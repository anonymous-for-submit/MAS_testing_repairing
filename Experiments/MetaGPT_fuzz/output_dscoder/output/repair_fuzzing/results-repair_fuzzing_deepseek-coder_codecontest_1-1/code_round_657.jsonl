{"name": "1607_A. Linear Keyboard", "description": "You are given a keyboard that consists of 26 keys. The keys are arranged sequentially in one row in a certain order. Each key corresponds to a unique lowercase Latin letter.\n\nYou have to type the word s on this keyboard. It also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nDetermine how long it will take to print the word s.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "tags": ["implementation", "strings"], "difficulty": 7, "id": 1607, "sample_io": [{"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}], "test_list": [{"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkjanscjanjkcanc\n", "output": ["164\n"]}, {"input": "1\nabcdefghilkjmnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjkcanc\n", "output": ["164\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjlcanc\n", "output": ["166\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nasdeb\n", "output": ["37\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkcanscjanjkcanj\n", "output": ["157\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n70\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nbbdes\n", "output": ["17\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n6\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsaeeb\n", "output": ["25\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkcanscjanjlcanj\n", "output": ["159\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabaacba\n", "output": ["13\n0\n70\n0\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n68\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n6\n74\n"]}, {"input": "1\nabcdefjhilkglnopqrstuvwxyz\nabdet\n", "output": ["19\n"]}, {"input": "1\naycdefbhilkjmnopqrstuvwxgz\nsfdba\n", "output": ["24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n70\n0\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n52\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkianscjanjclanb\n", "output": ["181\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsadfb\n", "output": ["27\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n0\n56\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n50\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n68\n6\n52\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\nbseeb\n", "output": ["34\n"]}, {"input": "1\nzywwsutvrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["171\n"]}, {"input": "1\nzgxovudsrqpcnljklihyfetwba\nsedba\n", "output": ["48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["13\n0\n50\n0\n35\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\nasdea\n", "output": ["38\n"]}, {"input": "1\nzywwsutvrqponmlcjihgfedkba\njnacljnajcsnackncasca\n", "output": ["173\n"]}, {"input": "1\nzgxwdutsrqponmjklihbfeucya\nsfdba\n", "output": ["50\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodffcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n6\n56\n"]}, {"input": "1\nzyxwvvtsrqponmlkjihgfedcba\nnnacljnajcrcajkncasca\n", "output": ["153\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nehllo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["10\n0\n50\n0\n35\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\naasccnkianscjanjlcanb\n", "output": ["163\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbsdfa\n", "output": ["39\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n66\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nehllo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ndodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["10\n0\n49\n0\n35\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\naatccnkianscjanjlcanb\n", "output": ["165\n"]}, {"input": "1\ndfxwvutsrqponmlkjihgfyzcba\naatccnkiansljanjccanb\n", "output": ["147\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponclljihgfedmba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabcabaa\n", "output": ["14\n0\n54\n6\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\naacdefghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n80\n0\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqpqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n36\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nscerofecod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n69\n18\n74\n"]}, {"input": "1\nabcdefyhilkjmponsrwtuvqxhz\nbedsa\n", "output": ["33\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngdlln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqpqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n36\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponclljihgfedmba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwfrtyuhopasdfghjklzxcvbnm\nabcabab\n", "output": ["14\n0\n54\n6\n65\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n65\n18\n74\n"]}, {"input": "1\nabcdehgsilkilnopqrftuvwxyz\nteaae\n", "output": ["23\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabchefxgijklmnupqrstovwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["16\n0\n65\n24\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\naacddfghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzxcvbnj\nabacaba\n", "output": ["15\n0\n80\n0\n74\n"]}, {"input": "1\naccdehgsilkilnopqqftuvwxxz\nseaae\n", "output": ["11\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponmlkjihgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n80\n6\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihggedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghzjmlmnopqrstuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\naaacaba\n", "output": ["16\n0\n65\n24\n48\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n80\n15\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihggedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghzjmlmnopqrstuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nrqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\naaacaba\n", "output": ["16\n0\n65\n27\n48\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nzqxwvutsryponmlkiihgfedcba\ncoeeforcse\nqwertyujnpasdfghjklzxcvbnn\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabcaaba\n", "output": ["15\n0\n80\n15\n52\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjklzxcvbnn\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabcaaba\n", "output": ["15\n0\n82\n15\n52\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nhdllo\nzyxvvutsrqponilkjmhgfddcaa\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["15\n0\n82\n15\n26\n"]}, {"input": "5\nabcdefghijilmnopqrstuvwxyz\nhdllo\naacddfghmjklinopqrstuvvxyz\nj\nabcdefghiiklmnopvrstuywxqz\ncoeeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["15\n0\n80\n15\n26\n"]}, {"input": "5\nabcdefghijilmnopqrstuvwxyz\nhdllo\naacddfghmjklinopqrstuvvxyz\nj\nabcdefghiiklmnopvrstuywxqz\ncoeeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacaa\n", "output": ["15\n0\n80\n15\n24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhlelo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["21\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacjkjanscnanjlcanb\n", "output": ["169\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n3\n74\n"]}, {"input": "1\nabcdefghijklmonpqrstuvwxyz\ncnackjnajcsnajkncasca\n", "output": ["170\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\ncoacljnajcsnajkncasca\n", "output": ["168\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbaacaba\n", "output": ["12\n0\n68\n18\n61\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsaeea\n", "output": ["26\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwautsrqponmlkjihgfedcbv\nacsacnkcanscjanjlcanj\n", "output": ["200\n"]}, {"input": "1\nnbcdefyhilkjmaopqrstuvwxgz\nsfdba\n", "output": ["29\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforbes\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n70\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwerbyuiopasdfghjklzxcvtnm\nabacaba\n", "output": ["12\n0\n68\n18\n46\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n18\n74\n"]}, {"input": "1\nzywwvutsrqponmlkjihgfedcba\njnacljnajcsnackncatca\n", "output": ["161\n"]}, {"input": "5\nzyxwvutsrqponmakjihgfedcbl\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["19\n0\n68\n18\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["12\n0\n68\n6\n52\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\ncsdea\n", "output": ["36\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nkelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["18\n0\n68\n0\n74\n"]}, {"input": "1\nzgxwuuterqponmjklihbfsdcya\nsfdba\n", "output": ["12\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\nacsacnkianscjanjldanb\n", "output": ["195\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\nasdae\n", "output": ["40\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyuiopasdfghjklzxcvbnm\nabbcaba\n", "output": ["11\n0\n68\n18\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nnlleh\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnzpqrstuvwxyo\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n106\n18\n74\n"]}, {"input": "1\nzyxwjvtsrqponmlkvihgfedcba\nnnacljnajcrcajkncasca\n", "output": ["211\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbscfa\n", "output": ["41\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n66\n18\n74\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlnlhe\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\neholl\nabcdefghijklmnopqrstuvwyyz\ni\nabcdefohijllmngpqrstuvwxyz\ndodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["13\n0\n49\n0\n35\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljihgfedcba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabcabaa\n", "output": ["14\n0\n68\n24\n52\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnlleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nscerofedod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n67\n18\n74\n"]}, {"input": "1\ndfxwvutsrqponmlkjihgfyzcba\naatccnkiansljanjccana\n", "output": ["148\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nbbacaba\n", "output": ["11\n0\n68\n18\n61\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nseeqofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n63\n18\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolleh\naacdefghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeefoqcse\nqwertyujnpasdfghjklzxcvbnn\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n78\n0\n74\n"]}, {"input": "1\nabcdehgsilkilnopqrftuvwxyz\naeate\n", "output": ["42\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmlfh\nabchefxgijklmnupqrstovwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["10\n0\n65\n18\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmelh\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["20\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhem\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\nabacaba\n", "output": ["17\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdsfghzjmlmnopqretuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\nabacaba\n", "output": ["16\n0\n53\n24\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcsf\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n79\n6\n74\n"]}, {"input": "1\nzxxwvutfqqponlekljshhiccca\nteaae\n", "output": ["30\n"]}, {"input": "1\nztxwvuxfqqponlikcjshieccma\neaaet\n", "output": ["28\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nhdlln\naacddfghmjklinopqrstuvvxyz\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["14\n0\n82\n15\n26\n"]}, {"input": "1\narcdeffhilkjmnopqbstuvwxyz\nabdes\n", "output": ["46\n"]}, {"input": "1\nzyxwvutsrqponclkjihgeedmba\nacsacnkjanscjanjlcanc\n", "output": ["144\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n9\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nccacljnajcsnajknoasca\n", "output": ["146\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnnjcacaska\n", "output": ["145\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbaacaba\n", "output": ["12\n0\n68\n24\n61\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabababa\n", "output": ["14\n0\n68\n0\n78\n"]}, {"input": "1\nzyxwautsrqponmlkjihgfedcbv\nacsacnkcanrcjanjlcanj\n", "output": ["198\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhdllo\nabcdezghijklmnopqrstuvwxyf\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["15\n0\n68\n0\n48\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nabdes\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxzz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\nbeesa\n", "output": ["35\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\ncnackjnajcsnajkncasca\n", "output": ["164\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nabdfs\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabcdefyhilkjlnopqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nsedba\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nasdeb\n", "output": ["37\n"]}, {"input": "5\nabcdekghijflmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\nasedb\n", "output": ["35\n"]}, {"input": "1\nabcdefyhilkhmnopqrstuvwxjz\nbeesa\n", "output": ["35\n"]}, {"input": "1\nabcdefjhilkglnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nsfdba\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabodefyhilkjlncpqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnaikncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nsedaa\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nbedsa\n", "output": ["37\n"]}, {"input": "5\nabcdekghijflmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsadeb\n", "output": ["25\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsrqpnomhklihyfedcba\nasedb\n", "output": ["35\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\nbeesa\n", "output": ["35\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["159\n"]}, {"input": "1\nabcdefghijklmnopqrstvvwxyz\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabwdefyhilkjlncpqrstuvoxgz\nsedba\n", "output": ["18\n"]}, {"input": "1\ndyxwvutsrqponmlkjihgfezcba\nbnacljnajcsnaikncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\naades\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n6\n74\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nbnacljnajcnnajkscasca\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\naedsb\n", "output": ["37\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabdet\n", "output": ["19\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzywwvutsrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["159\n"]}, {"input": "1\nzgxwvutsrqponmjklihbfedcya\nsfdba\n", "output": ["24\n"]}, {"input": "1\nabcdefghijklmnopqrstvvwxyz\ncnacljnajcrnajkncasca\n", "output": ["164\n"]}, {"input": "1\nzgxovutsrqpcnljklihyfedwba\nsedba\n", "output": ["18\n"]}, {"input": "1\ndyxwvutsrqponmlkjihgfezcba\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\naades\n", "output": ["18\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvvxyz\nacsacnkianscjanjclanb\n", "output": ["181\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nbsdea\n", "output": ["37\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabeet\n", "output": ["19\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzgxwuutsrqponmjklihbfedcya\nsfdba\n", "output": ["24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodffcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n0\n56\n"]}, {"input": "1\nzyxwvvtsrqponmlkjihgfedcba\ncnacljnajcrnajkncasca\n", "output": ["164\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n68\n6\n52\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbsdea\n", "output": ["37\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nnlleh\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsroponmhklihyfedcba\nbseeb\n", "output": ["34\n"]}, {"input": "1\nzyxwvutsrqponljklihgfedcba\nabeet\n", "output": ["19\n"]}], "task_id": "codecontest/98", "prompt": "You are given a keyboard that consists of 26 keys. The keys are arranged sequentially in one row in a certain order. Each key has its unique character embedded in it, representing a lowercase Latin letter. Each key corresponds to a unique lowercase Latin letter.\n\nYou have to type the word s on this keyboard. This word also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it. The act of typing each letter involves positioning your hand over the correct key. Pressing the designated key also happens in this process for each letter.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\".\n\nDetermine how long it will take to print the word s. Explain how the initial hand position plays a role in calculating the typing time. You must also consider the time taken to move to the first letter from the initial hand position when calculating the total typing time. The calculation of time should include the movement from the starting point to the first letter, emphasizing the importance of the initial position in the total time spent.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "repair_prompt": ["You are given a keyboard that consists of 26 keys. The keys are arranged sequentially in one row in a certain order. Each key has its unique character embedded in it, representing a lowercase Latin letter. Each key corresponds to a unique lowercase Latin letter.\n\nYou have to type the word s on this keyboard. This word also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it. The act of typing each letter involves positioning your hand over the correct key. Pressing the designated key also happens in this process for each letter.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\".\n\nDetermine how long it will take to print the word s. Explain how the initial hand position plays a role in calculating the typing time. You must also consider the time taken to move to the first letter from the initial hand position when calculating the total typing time. The calculation of time should include the movement from the starting point to the first letter, emphasizing the importance of the initial position in the total time spent.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\nWrite a main() function and use input() function to read input from stdin", " You are given a keyboard that consists of 26 keys. The keys are arranged sequentially in one row in a certain order. Each key has its unique character embedded in it, representing a lowercase Latin letter. Each key corresponds to a unique lowercase Latin letter.\n\nYou have to type the word s on this keyboard. This word also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it. The act of typing each letter involves positioning your hand over the correct key.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\nWrite a main() function and use input() function to read input from stdin", " You are given a keyboard with 26 keys arranged sequentially, each key representing a unique lowercase Latin letter. You need to type the word s on this keyboard. The time to type each letter is determined by the absolute value of the difference between the positions of the current and previous keys, plus the time to move the hand to the first letter from the initial hand position. Explain the role of the initial hand position in calculating the total typing time.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str, initial_position: int) -> int:\n    \"\"\"\n    Calculate the time required to type a given word on a specific keyboard layout.\n    \n    Args:\n        keyboard (str): A string representing the keyboard layout.\n        word (str): The word to be typed.\n        initial_position (int): The initial position of the hand on the keyboard.\n        \n    Returns:\n        int: The total time required to type the word.\n    \"\"\"\n    # Create a dictionary to map each character to its position on the keyboard\n    keyboard_positions = {char: idx for idx, char in enumerate(keyboard, start=1)}\n    \n    # Initialize the total time with the movement time from the initial position to the first character\n    total_time = 0\n    \n    # Get the position of the initial character\n    current_position = initial_position\n    \n    # Iterate over each character in the word\n    for char in word:\n        # Get the position of the current character\n        char_position = keyboard_positions[char]\n        \n        # Calculate the time to move from the current position to the character position\n        time_to_move = abs(char_position - current_position)\n        \n        # Add the time to move to the total time\n        total_time += time_to_move\n        \n        # Update the current position to the new position\n        current_position = char_position\n    \n    return total_time\n\n# Read input from stdin\nimport sys\n\n# Read the number of test cases\nt = int(sys.stdin.readline().strip())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the keyboard layout\n    keyboard = sys.stdin.readline().strip()\n    \n    # Read the word to be typed\n    word = sys.stdin.readline().strip()\n    \n    # Initialize the initial position to 0 (assuming the initial position is not specified)\n    initial_position = 0\n    \n    # Calculate the typing time\n    result = calculate_typing_time(keyboard, word, initial_position)\n    \n    # Print the result\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    # Create a dictionary to map each key to its position on the keyboard\n    key_positions = {char: idx for idx, char in enumerate(keyboard)}\n    \n    # Initialize the initial position of the hand (default to the first key)\n    initial_position = 0\n    \n    # Initialize the total time to 0\n    total_time = 0\n    \n    # Iterate through each letter in the word\n    for i in range(len(word)):\n        # Get the position of the current letter\n        current_position = key_positions[word[i]]\n        \n        # Calculate the time to move the hand from the initial position to the current position\n        time_to_move = abs(initial_position - current_position)\n        \n        # Add the time to move to the total time\n        total_time += time_to_move\n        \n        # Update the initial position to the current position for the next iteration\n        initial_position = current_position\n    \n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    # Read the keyboard layout\n    keyboard = input()\n    \n    # Read the word to type\n    word = input()\n    \n    # Calculate the typing time\n    result = calculate_typing_time(keyboard, word)\n    \n    # Output the result\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, initial_position: int, word: str) -> int:\n    \"\"\"\n    Calculate the time required to type a word based on the given keyboard layout and initial hand position.\n\n    Args:\n        keyboard (str): A string of length 26 representing the keyboard layout.\n        initial_position (int): The initial position of the hand on the keyboard.\n        word (str): The word to be typed.\n\n    Returns:\n        int: The total time required to type the word.\n    \"\"\"\n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n    \n    # Initialize the total time\n    total_time = 0\n    \n    # Calculate the time to move the hand from the initial position to the first letter of the word\n    first_letter_position = keyboard_positions[word[0]]\n    total_time += abs(initial_position - first_letter_position)\n    \n    # Calculate the time to move the hand between consecutive letters\n    for i in range(1, len(word)):\n        current_position = keyboard_positions[word[i]]\n        previous_position = keyboard_positions[word[i - 1]]\n        total_time += abs(current_position - previous_position)\n    \n    return total_time\n\n# Read the number of test cases from stdin\nimport sys\n\nt = int(sys.stdin.readline().strip())\n\nfor _ in range(t):\n    # Read the keyboard layout\n    keyboard = sys.stdin.readline().strip()\n    # Read the word to be typed\n    word = sys.stdin.readline().strip()\n    # Calculate the typing time\n    result = calculate_typing_time(keyboard, 0, word)  # Assuming initial position is 0\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the minimal time required to type a word on a given keyboard.\n\n    Args:\n        keyboard (str): A string of length 26 representing the keyboard layout.\n        word (str): The word to be typed, consisting of lowercase Latin letters.\n\n    Returns:\n        int: The minimal time required to type the word.\n    \"\"\"\n    # Create a dictionary to map each key to its position\n    key_positions = {char: index for index, char in enumerate(keyboard)}\n\n    # Initialize the total time to 0\n    total_time = 0\n\n    # Iterate through each character in the word\n    for char in word:\n        # Add the position of the current character to the total time\n        total_time += key_positions[char]\n\n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the keyboard layout and the word\n    keyboard = input()\n    word = input()\n\n    # Calculate the typing time and print the result\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the minimal time it takes to type a given word on a specific keyboard layout.\n\n    Args:\n        keyboard (str): A string of 26 unique lowercase Latin letters representing the keyboard layout.\n        word (str): The word to be typed, consisting of lowercase Latin letters.\n\n    Returns:\n        int: The minimal time it takes to type the word.\n    \"\"\"\n    # Create a dictionary to map each character to its position on the keyboard\n    keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n\n    # Initialize the typing time\n    typing_time = 0\n\n    # Calculate the time taken to type the word\n    for char in word:\n        typing_time += keyboard_positions[char]\n\n    return typing_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    # Read the keyboard layout and the word\n    keyboard = input()\n    word = input()\n\n    # Calculate and print the typing time for the word\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the minimal time to type a given word on a specific keyboard layout.\n\n    Args:\n        keyboard (str): A string of 26 characters representing the keyboard layout.\n        word (str): The word to be typed.\n\n    Returns:\n        int: The minimal time to type the word.\n    \"\"\"\n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n\n    # Initialize the total time to 0\n    total_time = 0\n\n    # Iterate through the word and calculate the time to type each letter\n    for i in range(len(word)):\n        current_char = word[i]\n        if i > 0:\n            previous_char = word[i - 1]\n            # Calculate the time to type the current letter based on its position\n            total_time += abs(keyboard_positions[current_char] - keyboard_positions[previous_char])\n        else:\n            # For the first letter, just add its position to the total time\n            total_time += keyboard_positions[current_char]\n\n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    keyboard = input()\n    word = input()\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    # Initialize the total typing time to 0\n    total_typing_time = 0\n    \n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {letter: index for index, letter in enumerate(keyboard)}\n    \n    # Determine the initial hand position for the first letter of the word\n    # For simplicity, we can assume the hand starts at 'a'\n    initial_hand_position = 0\n    \n    # Iterate through each letter in the word\n    for i in range(len(word)):\n        current_letter = word[i]\n        current_position = keyboard_positions[current_letter]\n        \n        if i == 0:\n            # Calculate the time to type the first letter from the initial hand position\n            total_typing_time += abs(current_position - initial_hand_position)\n        else:\n            # Calculate the time to type the current letter based on its position relative to the previous letter\n            previous_letter = word[i - 1]\n            previous_position = keyboard_positions[previous_letter]\n            total_typing_time += abs(current_position - previous_position)\n    \n    return total_typing_time\n\n# Provide the Interface\nt = int(input())\nfor _ in range(t):\n    keyboard = input()\n    word = input()\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\nimport sys\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n    \n    # Initialize the time to 0\n    time = 0\n    \n    # Calculate the initial hand position (assuming the hand starts at 'a')\n    initial_position = keyboard_positions['a']\n    \n    # Iterate through the word to calculate the typing time\n    for i in range(len(word)):\n        if i == 0:\n            # Add the time to move the hand from the initial position to the first letter\n            time += abs(keyboard_positions[word[i]] - initial_position)\n        else:\n            # Add the time to move the hand from the current letter to the next letter\n            time += abs(keyboard_positions[word[i]] - keyboard_positions[word[i - 1]])\n    \n    return time\n\n# Read the number of test cases\nt = int(input().strip())\n\n# Process each test case\nfor _ in range(t):\n    # Read the keyboard layout\n    keyboard = input().strip()\n    # Read the word to type\n    word = input().strip()\n    # Calculate the typing time\n    result = calculate_typing_time(keyboard, word)\n    # Print the result\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n    \n    # Initialize the total typing time and the position of the initial hand\n    total_time = 0\n    initial_hand_position = 0\n    \n    # Iterate through each letter in the word\n    for i in range(len(word)):\n        current_letter = word[i]\n        if i == 0:\n            # Calculate the time to move the hand from the initial position to the first letter\n            total_time += abs(keyboard_positions[current_letter] - initial_hand_position)\n        else:\n            # Calculate the time to type the current letter based on its position relative to the previous letter\n            total_time += abs(keyboard_positions[current_letter] - keyboard_positions[word[i - 1]])\n    \n    return total_time\n\n# Provide the Interface\nt = int(input())\nfor _ in range(t):\n    keyboard = input()\n    word = input()\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, initial_position: int, word: str) -> int:\n    \"\"\"\n    Calculate the time taken to type a word based on the given keyboard layout and initial hand position.\n\n    Args:\n        keyboard (str): A string of length 26 representing the keyboard layout.\n        initial_position (int): The initial position of the hand on the keyboard.\n        word (str): The word to be typed.\n\n    Returns:\n        int: The total time taken to type the word.\n    \"\"\"\n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n    \n    # Initialize the total time\n    total_time = 0\n    \n    # Calculate the time for each letter in the word\n    for i in range(len(word)):\n        if i == 0:\n            # No time for the first letter, only for the initial position\n            current_position = initial_position\n        else:\n            # Calculate the time for moving to the next letter\n            current_position = keyboard_positions[word[i]]\n            previous_position = keyboard_positions[word[i - 1]]\n            total_time += abs(current_position - previous_position)\n    \n    return total_time\n\n# Read the number of test cases\nn = int(input())\n\n# Process each test case\nfor _ in range(n):\n    keyboard = input().strip()\n    word = input().strip()\n    initial_position = ord(word[0]) - ord('a')\n    result = calculate_typing_time(keyboard, initial_position, word)\n    print(result)\n"], "plans": ["requirement analysis:\nThe primary requirement is to calculate the time required to type a given word on a specific keyboard layout. The initial hand position affects the typing time as it determines the starting point for typing each letter. The absolute difference in positions between consecutive letters and the first letter from the initial hand position must be considered. The output should provide the minimal time for each test case.\nrequirement pool:\n- Implement a function to calculate typing time based on keyboard layout and word.\n- Ensure the initial hand position is considered in the typing time calculation.\n- Provide accurate output for each test case.\n- Allow user to input different keyboard layouts and words for analysis.\n- Include a feature to compare typing times across different keyboards.\nTo solve this problem, we will create a Python function that calculates the time required to type a given word on a specific keyboard layout. The function will consider the initial hand position and the absolute difference in positions between consecutive letters. We will use a simple and efficient approach to ensure optimal performance.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': represents the order of keys on the keyboard\n    'word typing': involves consecutive typing of letters with movement between keys\n    'initial hand position': affects the total typing time due to movement from the starting point\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    provide detailed logic to implement the code\n\n# [edge case] \n    Edge case 1:\n    Input:\n    Keyboard: \"abcdefghijklmnopqrstuvwxyz\"\n    Word: \"hello\"\n    Explanation: The positions of the letters in the keyboard are as follows: a=1, b=2, c=3, ..., z=26. The time to type \"hello\" is calculated as follows: |5-1| + |12-5| + |12-12| + |15-12| = 4 + 7 + 0 + 3 = 14 units of time.\n    Edge case 2:\n    Input:\n    Keyboard: \"qwertyuiopasdfghjklzxcvbnm\"\n    Word: \"code\"\n    Explanation: The positions of the letters in the keyboard are as follows: q=1, w=2, e=3, ..., m=26. The time to type \"code\" is calculated as follows: |3-1| + |15-3| + |4-15| + |5-4| = 2 + 12 + 11 + 1 = 26 units of time.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic is sufficient to calculate the typing time based on the keyboard layout and the word to be typed.\n", "requirement analysis:\nThe primary requirement is to calculate the time required to type a given word on a specific keyboard layout. The secondary requirement is to consider the initial hand position and how it affects the typing time. The third requirement is to ensure the solution is efficient and can handle multiple test cases within the given constraints.\nrequirement pool:\n- Implement a function to calculate typing time based on keyboard layout and word.\n- Allow for the consideration of initial hand position in typing time calculation.\n- Ensure the solution can handle multiple test cases efficiently.\nTo solve this problem, we will use Python, leveraging its simplicity and efficiency. The main challenge is to calculate the time required to type a word based on a given keyboard layout, considering the initial hand position. We will map each key to its position on the keyboard and then calculate the time based on the positions of consecutive letters in the word.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    'word typing': The process of pressing each letter of the word consecutively on the keyboard.\n    'time calculation': The time taken to type a word includes the movement of the hand between keys and the pressing of each key.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    provide detailed logic to implement the code\n\n# [edge case] \n    Edge case 1:\n    Input:\n    Keyboard: \"abcdefghijklmnopqrstuvwxyz\"\n    Word: \"abc\"\n    Explanation: The initial hand position is at the first key (position 0). The time taken to type \"abc\" is the sum of the absolute differences between the positions of consecutive letters: |0 - 0| + |0 - 1| + |1 - 2| = 0 + 1 + 1 = 2 units of time.\n\n    Edge case 2:\n    Input:\n    Keyboard: \"qwertyuiopasdfghjklzxcvbnm\"\n    Word: \"hello\"\n    Explanation: The initial hand position can be at any key. For simplicity, let's assume the initial hand position is at the first key (position 0). The time taken to type \"hello\" is the sum of the absolute differences between the positions of consecutive letters: |0 - 16| + |16 - 4| + |4 - 12| + |12 - 12| + |12 - 15| = 16 + 12 + 8 + 0 + 3 = 49 units of time.\n\n    Edge case 3:\n    Input:\n    Keyboard: \"zyxwvutsrqponmlkjihgfedcba\"\n    Word: \"cba\"\n    Explanation: The initial hand position is at the last key (position 25). The time taken to type \"cba\" is the sum of the absolute differences between the positions of consecutive letters: |25 - 25| + |25 - 24| + |24 - 23| = 0 + 1 + 1 = 2 units of time.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the edge cases covers the scenarios where the initial hand position is at the first or last key. For other positions, the logic will still apply, but the initial position will be adjusted accordingly.\n", "requirement analysis:\nThe primary requirement is to calculate the time required to type a given word on a specified keyboard. This involves mapping each letter of the word to its position on the keyboard and calculating the time based on the distance between consecutive keys. The initial hand position is crucial as it affects the time taken to move the hand to the first letter of the word.\nrequirement pool:\n- Implement a function to calculate the time to type a word based on keyboard layout.\n- Allow for customization of the initial hand position.\n- Provide a user-friendly interface for inputting the keyboard layout and the word to be typed.\n- Ensure the application is efficient and can handle multiple test cases efficiently.\n- Include detailed instructions on how the initial hand position affects typing time.\nWe will use Python to implement the solution. The main challenge is to calculate the time required to type a word based on the given keyboard layout and initial hand position. We will map each letter to its position on the keyboard and calculate the time based on the distance between consecutive keys. The initial hand position will be considered when calculating the time to move the hand to the first letter of the word.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': the arrangement of keys on the keyboard, where each key corresponds to a unique lowercase Latin letter.\n    'word typing': the process of pressing each letter of the word consecutively on the keyboard.\n    'time calculation': the time taken to type a word includes the movement between keys and pressing the keys.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To calculate the time to type a word, we need to:\n    1. Map each letter to its position on the keyboard.\n    2. Calculate the time to move the hand from the initial position to the first letter of the word.\n    3. Calculate the time to move the hand between consecutive letters.\n    4. Sum the times to get the total typing time.\n\n# [edge case] \n    Edge case 1:\n    Input:\n    keyboard = \"abcdefghijklmnopqrstuvwxyz\"\n    word = \"abc\"\n    initial hand position = 1\n    Explanation:\n    The initial hand position is 1, so the time to move to the first letter 'a' is |1 - 1| = 0.\n    The time to move from 'a' to 'b' is |2 - 1| = 1.\n    The time to move from 'b' to 'c' is |3 - 2| = 1.\n    Total time = 0 + 1 + 1 = 2.\n\n    Edge case 2:\n    Input:\n    keyboard = \"qwertyuiopasdfghjklzxcvbnm\"\n    word = \"hello\"\n    initial hand position = 10\n    Explanation:\n    The initial hand position is 10, so the time to move to the first letter 'h' is |10 - 8| = 2.\n    The time to move from 'h' to 'e' is |5 - 8| = 3.\n    The time to move from 'e' to 'l' is |12 - 5| = 7.\n    The time to move from 'l' to 'l' is 0 (no movement needed).\n    The time to move from 'l' to 'o' is |15 - 12| = 3.\n    Total time = 2 + 3 + 7 + 0 + 3 = 15.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can handle any valid input.\n", "requirement analysis:\nThe requirements involve creating a program that calculates the minimum time required to type a given word on a specified keyboard. The program should handle multiple test cases efficiently. The keyboard layout and the word to be typed are provided as input, and the output should reflect the total time taken to type the word based on the keyboard's arrangement.\nrequirement pool:\n- The main code should efficiently calculate the typing time for each test case.\n- The program should handle up to 1000 test cases.\n- The input should include a keyboard layout and a word to be typed.\n- The output should provide the minimal time to type the word on the given keyboard.\n- The program should be able to process each test case in a reasonable amount of time.\nTo efficiently calculate the minimal time required to type a word on a given keyboard, we will use a simple and direct approach. We will map each key on the keyboard to its corresponding position and then calculate the time taken to type the word by summing the positions of each letter in the word. This approach ensures that we can handle up to 1000 test cases efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: In this context, the keyboard is a sequence of 26 unique characters representing the keys, and each key is associated with a specific letter from 'a' to 'z'.\n\n# [phrase showing quantity relationship]\n    'consecutively': means typing letters one after another without skipping any.\n    Explanation: This phrase indicates that the word should be typed without gaps, ensuring each letter is pressed in order.\n\n# [degree adverb] \n    'minimal': means the smallest possible time required to type the word.\n    Explanation: This adverb indicates that we need to find the shortest time to type the word, considering the positions of the letters on the keyboard.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the solution, we need to:\n    1. Create a mapping of each key to its position on the keyboard.\n    2. Iterate through the word, find the position of each letter in the keyboard, and sum these positions.\n    3. Output the total time for each word in the test cases.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the list contains integers that are all greater than 1, but there is no integer that appears as many times as itself (e.g., 2 appears twice, 3 appears three times, etc.). Therefore, the function should return -1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where no integer meets the condition of appearing at least as many times as itself.\n        if not lst:\n            return -1\n        freq = {}\n        for num in lst:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n        for num, count in freq.items():\n            if count >= num:\n                result = max(result, num)\n        return result if result != -1 else -1\n\n    This code will ensure that we handle the edge case where the list is empty or contains no integers that meet the specified condition.\n", "requirement analysis:\nThe requirements involve creating a program that calculates the minimum time required to type a given word on a specific keyboard layout. The program should handle multiple test cases efficiently. The keyboard layout and the word to be typed are provided as input, and the output should reflect the time taken to type each word based on the given keyboard.\nrequirement pool:\n- The main code should handle multiple test cases efficiently.\n- The program should correctly calculate the time to type each word based on the given keyboard layout.\n- The user interface should be intuitive and easy to use.\n- The program should be optimized for performance and accuracy.\nWe will use Python for this task as it provides efficient string manipulation and input/output handling capabilities. The main challenge is to calculate the time taken to type each word based on the given keyboard layout. We will use a dictionary to map each key to its position on the keyboard for quick lookup.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key has a unique character representing a lowercase Latin letter.\n    Explanation: In this problem, we need to calculate the minimal time it takes to type a given word on a specific keyboard layout. The keyboard layout is represented by a string of 26 unique lowercase Latin letters.\n\n# [phrase showing quantity relationship]\n    'consecutively': means typing each letter one after another without skipping any.\n    Explanation: For example, if the word is \"abc\", you would type 'a', then 'b', and finally 'c' without pausing or typing any letter out of order.\n\n# [degree adverb] \n    'minimal': means finding the shortest possible time to type the word.\n    Explanation: This implies that we should find the most efficient sequence of pressing keys to minimize the total time taken to type the word.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the solution, we can follow these steps:\n    1. Read the keyboard layout and the word for each test case.\n    2. Create a dictionary to map each character to its position on the keyboard.\n    3. For each word, calculate the time taken to type it by summing the positions of each letter in the word.\n    4. Output the calculated time for each word.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the list is [1, 2, 2, 3, 3, 3, 4, 4, 4]. The number 3 appears 3 times, which is more than or equal to its value. Since 3 is the largest number that meets the condition, the output is 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic is sufficient to find the largest integer that appears at least as many times as itself.\n\n# [edge case] \n    search([5, 5, 4, 4, 4]) = -1\n    Explanation: The list is [5, 5, 4, 4, 4]. The number 5 appears 2 times, which is less than its value. The number 4 appears 3 times, which is more than or equal to its value. However, since there is no number that appears more than or equal to itself, the output is -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic is sufficient to find if no such integer exists.\n", "requirement analysis:\nThe requirements specify that we need to calculate the minimal time to type a given word on a specific keyboard layout. Each test case consists of a keyboard layout and a word to be typed. The keyboard layout is a string of 26 lowercase Latin letters, and the word is a string of up to 50 lowercase Latin letters. The task is to determine the position of each letter on the keyboard and calculate the total time based on the order of the letters in the word. The time to type a letter is determined by its position on the keyboard.\nrequirement pool:\n- Implement a function to calculate the time to type each letter based on its position on the keyboard.\n- Create a function to read input and output the result for each test case.\n- Ensure the program handles up to 1000 test cases efficiently.\n- Optimize the code to handle words with up to 50 letters quickly.\nTo solve this problem, we will create a Python function that calculates the minimal time to type a given word on a specific keyboard layout. The function will first map each letter to its position on the keyboard, then calculate the time to type each letter based on its position in the word. The time to type a letter is determined by its position on the keyboard.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key has a unique character representing a lowercase Latin letter.\n    Explanation: In this problem, the keyboard is represented as a string of 26 characters, each character corresponding to a unique lowercase Latin letter. The task is to calculate the minimal time to type a given word on this specific keyboard.\n\n# [phrase showing quantity relationship]\n    'as many times': Indicates the frequency of a letter's appearance in the word.\n    Explanation: For example, if a letter appears twice in the word, it means the letter needs to be typed twice.\n\n# [degree adverb] \n    'minimal': Refers to the shortest time required to type the word.\n    Explanation: The goal is to find the minimal time needed to type the word, considering the positions of the letters on the keyboard.\n\n# [code logic]\n    The function will follow these steps:\n    1. Read the keyboard layout and the word.\n    2. Create a dictionary to map each letter to its position on the keyboard.\n    3. Iterate through the word, calculate the time to type each letter based on its position on the keyboard.\n    4. Sum the times to get the total minimal time to type the word.\n\n# [edge case] \n    Test Case 1:\n    Input:\n    keyboard = \"abcdefghijklmnopqrstuvwxyz\"\n    word = \"code\"\n    Expected Output: 22\n    Explanation: The positions of the letters in the word \"code\" on the keyboard are 3, 15, 4, and 5 respectively. The total time is 3 + 15 + 4 + 5 = 27.\n\n    Test Case 2:\n    Input:\n    keyboard = \"pqrstuvwxyzabcdefghijklmno\"\n    word = \"hello\"\n    Expected Output: 52\n    Explanation: The positions of the letters in the word \"hello\" on the keyboard are 16, 12, 12, 15, and 21 respectively. The total time is 16 + 12 + 12 + 15 + 21 = 52.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The given logic is sufficient to calculate the minimal time for typing the word on the keyboard.\n", "requirement analysis:\nThe requirements involve calculating the time to type a word based on the positions of the keys on a keyboard, considering the initial hand position. The input includes multiple test cases, each with a different keyboard layout and word to be typed. The output should provide the minimal time for each test case. The initial hand position is crucial as it affects the total typing time, as it determines the starting point for each letter's position calculation.\nrequirement pool:\n- Implement a function to calculate the time to type a letter based on the keyboard layout.\n- Handle multiple test cases efficiently.\n- Optimize the calculation to consider the initial hand position.\n- Provide clear and concise output for each test case.\nTo solve this problem, we will create a Python function that calculates the minimal time required to type a word on a given keyboard, considering the initial hand position. The function will iterate through each letter of the word, calculate the time to type each letter based on its position relative to the previous letter, and sum these times to get the total typing time. The initial hand position will be considered when calculating the time for the first letter.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key represents a unique lowercase Latin letter.\n    Explanation: In this problem, the keyboard is given as a string of length 26, with each letter from 'a' to 'z' appearing exactly once. This layout is crucial for determining the time taken to type each letter based on its position relative to the previous letter.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates that the time to type a letter is determined by the difference in positions between the current and previous letters.\n    'exactly once': Specifies that each letter from 'a' to 'z' appears exactly once on the keyboard.\n\n# [degree adverb] \n    'sequentially': Indicates that the keys are arranged in a linear order from 'a' to 'z', with no gaps or skipped letters.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The function will:\n    1. Initialize the total typing time to 0.\n    2. Create a dictionary to map each letter to its position on the keyboard.\n    3. Iterate through each letter in the word, calculate the time to type the current letter based on its position relative to the previous letter, and add this time to the total typing time.\n    4. Return the total typing time.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: Both 2 and 3 appears greater than or equal to its value, but 3 is the largest number\n    search([3,3,2,4,4,4]) = -1\n    explanation: number 2 appears one time, number 3 appears two times,number 4 appears three times, none of them appears greater than or equal to its value, so the function return -1\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We could set the original return answer to -1 and then find the largest integer that meets the need. \n\n## Prompt 3:\n[requirement]\nYou are given a keyboard with 26 keys arranged sequentially, each key representing a unique lowercase Latin letter. You need to type the word s on this keyboard. The time to type each letter is determined by the absolute value of the difference between the positions of the current and previous keys, plus the time to move the hand to the first letter from the initial hand position. Explain the role of the initial hand position in calculating the total typing time.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases. The first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard. The second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n[plan]\nTo solve this problem, we will create a Python function that calculates the minimal time required to type a word on a given keyboard, considering the initial hand position. The function will iterate through each letter of the word, calculate the time to type each letter based on its position relative to the previous letter, and sum these times to get the total typing time. The initial hand position will be considered when calculating the time for the first letter.\n\n## Answer 3:\n\n# [core concept]\n    'initial hand position': The starting point from which the hand moves to type each letter on the keyboard.\n    Explanation: The initial hand position is crucial because it sets the reference point for calculating the time to type each letter. The time to type each letter includes the time taken to move the hand from the initial position to the first letter of the word.\n\n# [phrase showing quantity relationship]\n    'absolute value': Indicates that the time to type a letter is determined by the distance between the current and previous keys, regardless of the direction.\n\n# [degree adverb] \n    'minimal': Indicates that the goal is to find the shortest possible time to type the word.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The function will:\n    1. Initialize the total typing time to 0.\n    2. Create a dictionary to map each letter to its position on the keyboard.\n    3. Determine the initial hand position for the first letter of the word.\n    4. Iterate through each letter in the word, calculate the time to type the current letter based on its position relative to the previous letter, and add this time to the total typing time.\n    5. Return the total typing time.\n\n# [edge case] \n    Edge Case 1:\n    Input: keyboard = \"abcdefghijklmnopqrstuvwxyz\", word = \"abc\"\n    Explanation: The initial hand position is at 'a'. The time to type 'a' is 0 (since it's the first letter and the hand is already there). The time to type 'b' is |1 - 0| = 1, and the time to type 'c' is |2 - 1| = 1. The total time is 0 + 1 + 1 = 2.\n    Edge Case 2:\n    Input: keyboard = \"qwertyuiopasdfghjklzxcvbnm\", word = \"hello\"\n    Explanation: The initial hand position can be at any position. For simplicity, let's assume the hand starts at 'a'. The time to type 'h' is |8 - 0| = 8, 'e' is |5 - 8| = 3, 'l' is |12 - 5| = 7, 'l' is |12 - 12| = 0, and 'o' is |15 - 12| = 3. The total time is 8 + 3 + 7 + 0 + 3 = 21.\n    Edge Case 3:\n    Input: keyboard = \"abcdefghijklmnopqrstuvwxyz\", word = \"z\"\n    Explanation: The initial hand position is at 'a'. The time to type 'z' is |26 - 0| = 26.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to calculate the total typing time for each test case.\n", "requirement analysis:\nThe requirement involves calculating the minimal time required to type a given word on a specific keyboard. The time to type each letter is determined by the absolute value of the difference between the positions of the current and previous keys, plus the time to move the hand to the first letter from the initial hand position. The initial hand position is crucial as it affects the total typing time, especially when the word starts with a letter far from the initial position.\nrequirement pool:\n- Implement the logic to calculate the time to type each letter based on the keyboard layout.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the calculation to minimize the total typing time.\n- Provide clear and concise output for each test case.\nTo solve this problem, we will use Python, leveraging its efficiency and simplicity for handling the given requirements. The main challenge is to calculate the minimal time required to type a word on a specific keyboard, considering the positions of the keys and the initial hand position. We will use a dictionary to map each letter to its position on the keyboard for quick lookup.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key represents a unique lowercase Latin letter.\n    Explanation: In this problem, the keyboard is given as a string of 26 characters, each representing a different letter from 'a' to 'z'. The goal is to calculate the time required to type a word on this keyboard, considering the initial hand position and the positions of the keys.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates that the time to type a letter is determined by the difference in positions between the current and previous keys, plus the time to move the hand to the first letter from the initial hand position.\n    Explanation: The phrase 'more than' is used to specify that the time to type a letter is not just the difference in positions but also includes the time to move the hand from the initial position to the first letter of the word.\n\n# [degree adverb] \n    'minimal': Indicates that the goal is to find the smallest possible time required to type the word.\n    Explanation: The degree adverb 'minimal' means that we need to find the minimum time to type the word, considering the positions of the keys and the initial hand position.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to:\n    1. Create a dictionary to map each letter to its position on the keyboard.\n    2. For each test case, calculate the time to type the word by iterating through the word and summing the time to move the hand from the current letter to the next.\n    3. Consider the initial hand position by adding the time to move the hand from the initial position to the first letter of the word.\n\n# [edge case] \n    Edge case 1: typing a word with only one letter.\n    Edge case 1 = 0\n    Explanation: If the word consists of only one letter, the time to type the word is 0 because there is no movement between letters.\n\n    Edge case 2: typing a word with all letters being the same.\n    Edge case 2 = 0\n    Explanation: If all letters in the word are the same, the time to type the word is 0 because there is no change in position between letters.\n\n    Edge case 3: typing a word with letters far apart on the keyboard.\n    Edge case 3 = 25\n    Explanation: If the word consists of the letters 'a' to 'z' in order, the time to type the word would be the sum of the differences between each letter and its successor, which is 25 (since 'a' to 'z' is 25 positions apart).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can handle these edge cases by considering the initial hand position and the positions of the keys.\n", "requirement analysis:\nThe requirements involve calculating the minimal time to type a given word on a specified keyboard, considering the initial hand position and the movement of the hand to each subsequent letter. The initial hand position is crucial as it sets the base time for typing, and the movement between keys determines the additional time. The solution should handle multiple test cases efficiently.\nrequirement pool:\n- Implement a function to calculate the time to type each letter based on the keyboard layout.\n- Develop a function to determine the minimal time to type a given word.\n- Ensure the program can handle multiple test cases efficiently.\n- Include a feature to visualize the typing process for learning purposes.\nTo solve this problem, we will use Python, leveraging its efficiency and ease of use. The main challenge is to calculate the minimal time to type a word based on the given keyboard layout and the initial hand position. We will use a simple approach to iterate through each letter of the word, calculate the time to type each letter based on its position relative to the previous letter, and sum these times to get the total typing time.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on the keyboard, where each key represents a unique lowercase Latin letter.\n    Explanation: The keyboard layout is crucial for determining the time taken to type each letter, as the time depends on the absolute value of the difference between the positions of the current and previous keys.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan involves iterating through each letter of the word, calculating the time to type each letter based on its position relative to the previous letter, and summing these times to get the total typing time.\n\n# [edge case] \n    Edge case 1: Typing a word with consecutive letters on a keyboard with sequential arrangement.\n    search([1, 2, 3, 4, 5]) = 4\n    Explanation: The word \"abcde\" has consecutive letters, so the time to type each letter is the difference between the positions of the current and previous keys, which is 1 for each pair of consecutive letters.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic can handle the scenario where the word consists of consecutive letters on a sequential keyboard.\n\n## Prompt 3:\n[requirement]\nYou are given a keyboard with 26 keys arranged sequentially, each key representing a unique lowercase Latin letter. You need to type the word s on this keyboard. The time to type each letter is determined by the absolute value of the difference between the positions of the current and previous keys, plus the time to move the hand to the first letter from the initial hand position. Explain the role of the initial hand position in calculating the total typing time.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases. The first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard. The second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n[plan]\nTo solve this problem, we will use Python, leveraging its efficiency and ease of use. The main challenge is to calculate the minimal time to type a word based on the given keyboard layout and the initial hand position. We will use a simple approach to iterate through each letter of the word, calculate the time to type each letter based on its position relative to the previous letter, and sum these times to get the total typing time.\n\n## Answer 3:\n\n# [core concept]\n    'initial hand position': The starting position of the hand before typing any letter on the keyboard.\n    Explanation: The initial hand position is crucial because it determines the time taken to move the hand from the initial position to the first letter of the word, which is added to the time taken to type each subsequent letter based on its position relative to the previous letter.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan involves iterating through each letter of the word, calculating the time to type each letter based on its position relative to the previous letter, and summing these times to get the total typing time.\n\n# [edge case] \n    Edge case 1: Typing a word with consecutive letters on a keyboard with sequential arrangement.\n    search([1, 2, 3, 4, 5]) = 4\n    Explanation: The word \"abcde\" has consecutive letters, so the time to type each letter is the difference between the positions of the current and previous keys, which is 1 for each pair of consecutive letters.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic can handle the scenario where the word consists of consecutive letters on a sequential keyboard.\n", "requirement analysis:\nThe primary requirement is to calculate the time required to type a given word on a specific keyboard layout. The keyboard layout is provided as a string of 26 lowercase Latin letters, and the word to be typed is also given. The challenge lies in determining the time taken to type each letter, considering the position of each key and the initial hand position. The initial hand position affects the total typing time because it determines the starting point for moving to the first letter of the word, which impacts the cumulative movement time.\nrequirement pool:\n- Implement a function to calculate the time to type a word based on keyboard layout\n- Allow for different initial hand positions and calculate the time accordingly\n- Ensure the program can handle multiple test cases efficiently\n- Provide clear and concise output for each test case\n- Optimize the algorithm for performance, especially for longer words and multiple test cases\nTo solve this problem, we will use Python, leveraging its simplicity and efficiency. The main challenge is to calculate the time taken to type a word based on the given keyboard layout. We will map each letter to its position on the keyboard and then calculate the time based on the initial hand position. The time calculation will include the movement from the starting point to the first letter of the word, emphasizing the importance of the initial position in the total time spent.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    'word typing': The process of pressing each letter of the word on the corresponding key in sequence.\n    'time calculation': The measurement of time taken to type a word, considering the movement between keys and the initial hand position.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To solve this problem, we need to:\n    1. Map each letter of the alphabet to its position on the given keyboard.\n    2. Calculate the time taken to type the word, considering the initial hand position and the movement between keys.\n    3. For each test case, determine the minimal time it takes to type the word s on the given keyboard.\n\n# [edge case] \n    Test Case 1:\n    Input:\n    keyboard = \"abcdefghijklmnopqrstuvwxyz\"\n    word = \"hello\"\n    initial_position = 1 (assuming the initial hand is over the key 'a')\n    Expected Output: 13\n    Explanation: The positions of the letters in the word \"hello\" on the keyboard are 8, 5, 12, 12, and 15. The time taken to type the word, considering the initial position, is calculated as follows:\n    - Move from position 1 to position 8: |8 - 1| = 7\n    - Move from position 8 to position 5: |5 - 8| = 3\n    - Move from position 5 to position 12: |12 - 5| = 7\n    - Move from position 12 to position 12: |12 - 12| = 0\n    - Move from position 12 to position 15: |15 - 12| = 3\n    Total time = 7 + 3 + 7 + 0 + 3 = 20\n\n    Test Case 2:\n    Input:\n    keyboard = \"qwertyuiopasdfghjklzxcvbnm\"\n    word = \"code\"\n    initial_position = 5 (assuming the initial hand is over the key 'e')\n    Expected Output: 34\n    Explanation: The positions of the letters in the word \"code\" on the keyboard are 19, 14, 3, and 5. The time taken to type the word, considering the initial position, is calculated as follows:\n    - Move from position 5 to position 19: |19 - 5| = 14\n    - Move from position 19 to position 14: |14 - 19| = 5\n    - Move from position 14 to position 3: |3 - 14| = 11\n    - Move from position 3 to position 5: |5 - 3| = 2\n    Total time = 14 + 5 + 11 + 2 = 32\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the initial position is not provided. In such cases, we can assume the initial position to be the position of the first letter of the word on the keyboard.\n\n    Example:\n    initial_position = keyboard.index(word[0]) + 1\n"], "scores": [], "pass_results": [false, true, false, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 657, "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "mutate_method": "add_1_sentence_at_end", "parent_index": 537}
