{"name": "1619_B. Squares and Cubes", "description": "Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125", "tags": ["implementation", "math"], "difficulty": 8, "id": 1619, "sample_io": [{"input": "6\n10\n1\n25\n1000000000\n999999999\n500000000\n", "output": ["4\n1\n6\n32591\n32590\n23125\n"]}], "test_list": [{"input": "2\n64\n15625\n", "output": ["10\n145\n"]}, {"input": "8\n64000000\n85766121\n113379904\n148035889\n191102976\n244140625\n594823321\n887503681\n", "output": ["8380\n9681\n11110\n12673\n14376\n16225\n25201\n30721\n"]}, {"input": "2\n15625\n46656\n", "output": ["145\n246\n"]}, {"input": "2\n1000000\n4096\n", "output": ["1090\n76\n"]}, {"input": "1\n4095\n", "output": ["75\n"]}, {"input": "1\n4096\n", "output": ["76\n"]}, {"input": "20\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n", "output": ["2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n"]}, {"input": "5\n64000000\n85766121\n113379904\n148035889\n8000\n", "output": ["8380\n9681\n11110\n12673\n105\n"]}, {"input": "12\n64\n4096\n15625\n46656\n117649\n262144\n531441\n1000000\n1771561\n2985984\n4826809\n7529536\n", "output": ["10\n76\n145\n246\n385\n568\n801\n1090\n1441\n1860\n2353\n2926\n"]}, {"input": "20\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n6012\n975\n3916\n4805\n7952\n3301\n647\n3799\n8657\n122\n", "output": ["1\n1\n1\n2\n2\n2\n2\n3\n4\n4\n91\n37\n74\n81\n104\n68\n31\n73\n109\n13\n"]}, {"input": "1\n216\n", "output": ["18\n"]}, {"input": "5\n62\n63\n64\n4096\n66\n", "output": ["9\n9\n10\n76\n10\n"]}, {"input": "1\n125\n", "output": ["14\n"]}, {"input": "1\n4090\n", "output": ["75\n"]}, {"input": "1\n1000000\n", "output": ["1090\n"]}, {"input": "18\n2515456\n2571353\n2628072\n2685619\n2744000\n2803221\n2924207\n3048625\n3112136\n3176523\n3307949\n3442951\n3511808\n3581577\n3652264\n3796416\n3869893\n3944312\n", "output": ["1711\n1729\n1748\n1766\n1785\n1804\n1842\n1879\n1898\n1917\n1955\n1994\n2013\n2033\n2053\n2092\n2112\n2132\n"]}, {"input": "2\n5000\n8000\n", "output": ["83\n105\n"]}, {"input": "5\n2985983\n4826807\n4826808\n7529533\n7529534\n", "output": ["1859\n2352\n2352\n2925\n2925\n"]}, {"input": "1\n59319\n", "output": ["276\n"]}, {"input": "1\n26\n", "output": ["6\n"]}, {"input": "3\n1000\n8000\n1000000\n", "output": ["38\n105\n1090\n"]}, {"input": "4\n4096\n15625\n117649\n262144\n", "output": ["76\n145\n385\n568\n"]}, {"input": "10\n728999999\n729000001\n594823320\n594823322\n481890303\n308915775\n387420488\n191102975\n148035888\n113379903\n", "output": ["27869\n27870\n25200\n25201\n22707\n18225\n20384\n14375\n12672\n11109\n"]}, {"input": "4\n64\n729\n728\n4096\n", "output": ["10\n33\n32\n76\n"]}, {"input": "10\n3307949\n3375000\n3442951\n3511808\n3581577\n3652264\n3723875\n3796416\n3869893\n3944312\n", "output": ["1955\n1975\n1994\n2013\n2033\n2053\n2072\n2092\n2112\n2132\n"]}, {"input": "1\n16777216\n", "output": ["4336\n"]}, {"input": "7\n728\n1000\n10000\n100000\n1000000\n10000000\n100000000\n", "output": ["32\n38\n117\n356\n1090\n3363\n10443\n"]}, {"input": "15\n7762392\n7880599\n8000000\n8120601\n8242408\n8365427\n8489664\n8615125\n8741816\n8998912\n9129329\n9261000\n9393931\n9663597\n9938375\n", "output": ["2970\n2992\n3014\n3036\n3058\n3081\n3103\n3126\n3148\n3193\n3216\n3239\n3261\n3307\n3353\n"]}, {"input": "6\n887503681\n887503680\n887503682\n999887640\n999887641\n999887642\n", "output": ["30721\n30720\n30721\n32588\n32589\n32589\n"]}, {"input": "1\n991026973\n", "output": ["32446\n"]}, {"input": "1\n481890304\n", "output": ["22708\n"]}, {"input": "1\n8000\n", "output": ["105\n"]}, {"input": "20\n887503680\n887503679\n887503678\n887503677\n887503676\n887503675\n887503674\n887503673\n887503672\n887503671\n887503670\n887503669\n887503668\n887503667\n887503666\n887503665\n887503664\n887503663\n887503662\n887503661\n", "output": ["30720\n30720\n30720\n30720\n30720\n30720\n30720\n30720\n30720\n30720\n30720\n30720\n30720\n30720\n30720\n30720\n30720\n30720\n30720\n30720\n"]}, {"input": "1\n997002999\n", "output": ["32543\n"]}, {"input": "2\n1000\n999\n", "output": ["38\n37\n"]}, {"input": "10\n1\n64\n729\n4096\n15625\n46656\n117649\n262144\n531441\n1000000\n", "output": ["1\n10\n33\n76\n145\n246\n385\n568\n801\n1090\n"]}, {"input": "10\n64000000\n32324\n4645758\n148035889\n382748428\n33627363\n36273373\n75675757\n9897\n34536\n", "output": ["8380\n205\n2309\n12673\n20263\n6103\n6335\n9101\n116\n212\n"]}, {"input": "1\n46142\n", "output": ["244\n"]}, {"input": "20\n117649\n262144\n531441\n1000000\n1771561\n7529536\n11390625\n24137569\n34012224\n85766121\n113379904\n148035889\n191102976\n244140625\n308915776\n387420489\n481890304\n594823321\n729000000\n887503681\n", "output": ["385\n568\n801\n1090\n1441\n2926\n3585\n5185\n6138\n9681\n11110\n12673\n14376\n16225\n18226\n20385\n22708\n25201\n27870\n30721\n"]}, {"input": "9\n8489664\n8615125\n8741816\n8998912\n9129329\n9261000\n9393931\n9663597\n9938375\n", "output": ["3103\n3126\n3148\n3193\n3216\n3239\n3261\n3307\n3353\n"]}, {"input": "1\n49\n", "output": ["9\n"]}, {"input": "2\n49\n676\n", "output": ["9\n32\n"]}, {"input": "4\n117649\n262144\n1000000\n1771561\n", "output": ["385\n568\n1090\n1441\n"]}, {"input": "3\n64\n15625\n1000000\n", "output": ["10\n145\n1090\n"]}, {"input": "3\n15625\n97336\n195112\n", "output": ["145\n351\n492\n"]}, {"input": "5\n4657463\n4741632\n4913000\n5000211\n5088448\n", "output": ["2313\n2333\n2373\n2394\n2414\n"]}, {"input": "20\n125\n216\n343\n512\n1000\n1331\n1728\n2197\n2744\n3375\n4913\n5832\n6859\n8000\n9261\n10648\n12167\n13824\n17576\n19683\n", "output": ["14\n18\n23\n28\n38\n44\n50\n56\n63\n70\n83\n90\n97\n105\n113\n121\n129\n137\n153\n162\n"]}, {"input": "1\n262144\n", "output": ["568\n"]}, {"input": "1\n134217728\n", "output": ["12075\n"]}, {"input": "17\n7301384\n7414875\n7762392\n7880599\n8000000\n8120601\n8242408\n8365427\n8489664\n8615125\n8741816\n8998912\n9129329\n9261000\n9393931\n9663597\n9938375\n", "output": ["2883\n2905\n2970\n2992\n3014\n3036\n3058\n3081\n3103\n3126\n3148\n3193\n3216\n3239\n3261\n3307\n3353\n"]}, {"input": "6\n4096\n15625\n46656\n117649\n262144\n531441\n", "output": ["76\n145\n246\n385\n568\n801\n"]}, {"input": "1\n46655\n", "output": ["245\n"]}, {"input": "1\n34012224\n", "output": ["6138\n"]}, {"input": "7\n244140625\n308915776\n387420489\n481890304\n594823321\n729000000\n887503681\n", "output": ["16225\n18226\n20385\n22708\n25201\n27870\n30721\n"]}, {"input": "9\n4096\n15625\n46656\n117649\n262144\n531441\n1000000\n1771561\n2985984\n", "output": ["76\n145\n246\n385\n568\n801\n1090\n1441\n1860\n"]}, {"input": "1\n308915776\n", "output": ["18226\n"]}, {"input": "5\n720\n721\n722\n723\n724\n", "output": ["32\n32\n32\n32\n32\n"]}, {"input": "2\n4096\n720\n", "output": ["76\n32\n"]}, {"input": "1\n42144192\n", "output": ["6821\n"]}, {"input": "20\n1000000000\n999999999\n999999998\n999999997\n999999996\n999999995\n999999994\n999999993\n999999992\n999999991\n999999990\n999999989\n999999988\n999999987\n999999986\n999999985\n999999984\n999999983\n999999982\n999999981\n", "output": ["32591\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n"]}, {"input": "8\n728\n1000\n4095\n10000\n100000\n1000000\n10000000\n100000000\n", "output": ["32\n38\n75\n117\n356\n1090\n3363\n10443\n"]}, {"input": "9\n728\n1000000\n35\n144\n4095\n10000\n100000\n10000000\n100000000\n", "output": ["32\n1090\n7\n15\n75\n117\n356\n3363\n10443\n"]}, {"input": "3\n24389\n31329\n21025\n", "output": ["180\n203\n167\n"]}, {"input": "2\n8000\n1000000\n", "output": ["105\n1090\n"]}, {"input": "5\n1\n64\n729\n4096\n15625\n", "output": ["1\n10\n33\n76\n145\n"]}, {"input": "1\n7529536\n", "output": ["2926\n"]}, {"input": "1\n387420489\n", "output": ["20385\n"]}, {"input": "8\n117649\n262144\n531441\n1000000\n1771561\n2985984\n4826809\n7529536\n", "output": ["385\n568\n801\n1090\n1441\n1860\n2353\n2926\n"]}, {"input": "1\n117649\n", "output": ["385\n"]}, {"input": "12\n64\n125\n216\n343\n512\n729\n1000\n1331\n1728\n2197\n2744\n3375\n", "output": ["10\n14\n18\n23\n28\n33\n38\n44\n50\n56\n63\n70\n"]}, {"input": "1\n4913\n", "output": ["83\n"]}, {"input": "20\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n", "output": ["32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n"]}, {"input": "2\n1000000\n9025699\n", "output": ["1090\n3198\n"]}, {"input": "1\n64\n", "output": ["10\n"]}, {"input": "2\n4096\n15625\n", "output": ["76\n145\n"]}, {"input": "11\n4096\n15625\n46656\n117649\n262144\n531441\n1000000\n1771561\n2985984\n4826809\n7529536\n", "output": ["76\n145\n246\n385\n568\n801\n1090\n1441\n1860\n2353\n2926\n"]}, {"input": "1\n728\n", "output": ["32\n"]}, {"input": "20\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n", "output": ["32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n"]}, {"input": "20\n4096\n15625\n46656\n117649\n262144\n531441\n1000000\n1771561\n2985984\n4826809\n7529536\n11390625\n16777216\n24137569\n34012224\n47045881\n64000000\n85766121\n113379904\n148035889\n", "output": ["76\n145\n246\n385\n568\n801\n1090\n1441\n1860\n2353\n2926\n3585\n4336\n5185\n6138\n7201\n8380\n9681\n11110\n12673\n"]}, {"input": "3\n887503681\n887503680\n887503682\n", "output": ["30721\n30720\n30721\n"]}, {"input": "5\n125\n216\n343\n512\n729\n", "output": ["14\n18\n23\n28\n33\n"]}, {"input": "20\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n", "output": ["32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n"]}, {"input": "2\n8000\n5000\n", "output": ["105\n83\n"]}, {"input": "1\n1771561\n", "output": ["1441\n"]}, {"input": "13\n64\n4096\n15625\n46656\n117649\n262144\n531441\n1000000\n1771561\n2985984\n4826809\n1000000000\n7529536\n", "output": ["10\n76\n145\n246\n385\n568\n801\n1090\n1441\n1860\n2353\n32591\n2926\n"]}, {"input": "7\n887503681\n887503680\n887503682\n999887640\n999887641\n55240747\n3566977\n", "output": ["30721\n30720\n30721\n32588\n32589\n7793\n2028\n"]}, {"input": "7\n728999999\n729000001\n594823320\n594823322\n481890303\n308915775\n387420488\n", "output": ["27869\n27870\n25200\n25201\n22707\n18225\n20384\n"]}, {"input": "1\n1000\n", "output": ["38\n"]}, {"input": "7\n4096\n64\n1000000000\n15625\n46656\n262144\n2985984\n", "output": ["76\n10\n32591\n145\n246\n568\n1860\n"]}, {"input": "3\n4096\n64\n1000000000\n", "output": ["76\n10\n32591\n"]}, {"input": "6\n64\n729\n4096\n15625\n46656\n117649\n", "output": ["10\n33\n76\n145\n246\n385\n"]}, {"input": "2\n1000\n1000000\n", "output": ["38\n1090\n"]}, {"input": "1\n15625\n", "output": ["145\n"]}, {"input": "1\n11390625\n", "output": ["3585\n"]}, {"input": "1\n728999999\n", "output": ["27869\n"]}, {"input": "16\n8000000\n8120601\n8242408\n8365427\n8489664\n8615125\n8741816\n8869743\n8998912\n9129329\n9261000\n9393931\n9528128\n9663597\n9800344\n9938375\n", "output": ["3014\n3036\n3058\n3081\n3103\n3126\n3148\n3171\n3193\n3216\n3239\n3261\n3284\n3307\n3330\n3353\n"]}, {"input": "5\n117649\n262144\n531441\n1000000\n1771561\n", "output": ["385\n568\n801\n1090\n1441\n"]}, {"input": "3\n8000\n1000\n100000000\n", "output": ["105\n38\n10443\n"]}, {"input": "13\n4096\n64\n1000000000\n15625\n46656\n262144\n2985984\n4826807\n7529533\n7529534\n7529535\n720\n4095\n", "output": ["76\n10\n32591\n145\n246\n568\n1860\n2352\n2925\n2925\n2925\n32\n75\n"]}, {"input": "5\n8000\n64000000\n85766121\n113379904\n148035889\n", "output": ["105\n8380\n9681\n11110\n12673\n"]}, {"input": "2\n4096\n64\n", "output": ["76\n10\n"]}, {"input": "1\n24137569\n", "output": ["5185\n"]}, {"input": "5\n15625\n97336\n195112\n205379\n274625\n", "output": ["145\n351\n492\n505\n581\n"]}, {"input": "1\n238144\n", "output": ["542\n"]}, {"input": "1\n531441\n", "output": ["801\n"]}, {"input": "5\n62\n63\n64\n65\n66\n", "output": ["9\n9\n10\n10\n10\n"]}, {"input": "1\n729\n", "output": ["33\n"]}, {"input": "3\n5000\n8000\n1000000\n", "output": ["83\n105\n1090\n"]}, {"input": "3\n64\n729\n728\n", "output": ["10\n33\n32\n"]}, {"input": "1\n46656\n", "output": ["246\n"]}, {"input": "1\n887483586\n", "output": ["30720\n"]}, {"input": "4\n481890304\n594823321\n729000000\n887503681\n", "output": ["22708\n25201\n27870\n30721\n"]}, {"input": "5\n9261000\n9393931\n9663597\n9800344\n9938375\n", "output": ["3239\n3261\n3307\n3330\n3353\n"]}, {"input": "1\n65\n", "output": ["10\n"]}, {"input": "4\n64000000\n85766121\n113379904\n148035889\n", "output": ["8380\n9681\n11110\n12673\n"]}, {"input": "5\n125\n216\n2197\n2744\n3375\n", "output": ["14\n18\n56\n63\n70\n"]}, {"input": "1\n720\n", "output": ["32\n"]}, {"input": "1\n64000000\n", "output": ["8380\n"]}, {"input": "5\n49\n50\n675\n676\n677\n", "output": ["9\n9\n31\n32\n32\n"]}, {"input": "1\n97336\n", "output": ["351\n"]}, {"input": "6\n64\n729\n4096\n117649\n262144\n531441\n", "output": ["10\n33\n76\n385\n568\n801\n"]}, {"input": "11\n4096\n64\n1000000000\n15625\n46656\n262144\n2985984\n4826807\n7529533\n7529534\n7529535\n", "output": ["76\n10\n32591\n145\n246\n568\n1860\n2352\n2925\n2925\n2925\n"]}, {"input": "3\n8000\n1000\n1000000\n", "output": ["105\n38\n1090\n"]}, {"input": "10\n5050\n30404\n12345\n98765432\n1234564\n64\n456\n1\n23\n123\n", "output": ["84\n200\n130\n10379\n1208\n10\n26\n1\n5\n13\n"]}, {"input": "1\n887503681\n", "output": ["30721\n"]}, {"input": "2\n15625\n4096\n", "output": ["145\n76\n"]}, {"input": "1\n5000\n", "output": ["83\n"]}, {"input": "20\n50653\n54872\n59319\n64000\n68921\n74088\n79507\n85184\n91125\n97336\n103823\n110592\n125000\n132651\n140608\n148877\n157464\n166375\n175616\n185193\n", "output": ["256\n266\n276\n286\n297\n308\n318\n329\n340\n351\n363\n374\n396\n408\n419\n431\n443\n455\n468\n480\n"]}, {"input": "7\n64000000\n85766121\n113379904\n148035889\n191102976\n244140625\n594823321\n", "output": ["8380\n9681\n11110\n12673\n14376\n16225\n25201\n"]}, {"input": "2\n42144192\n887503681\n", "output": ["6821\n30721\n"]}, {"input": "7\n100\n1000\n10000\n100000\n1000000\n10000000\n100000000\n", "output": ["12\n38\n117\n356\n1090\n3363\n10443\n"]}, {"input": "1\n1729\n", "output": ["50\n"]}, {"input": "5\n10000\n100000\n1000000\n10000000\n100000000\n", "output": ["117\n356\n1090\n3363\n10443\n"]}, {"input": "18\n54872\n59319\n64000\n68921\n74088\n79507\n85184\n91125\n97336\n103823\n110592\n125000\n132651\n140608\n148877\n157464\n166375\n175616\n", "output": ["266\n276\n286\n297\n308\n318\n329\n340\n351\n363\n374\n396\n408\n419\n431\n443\n455\n468\n"]}, {"input": "1\n887503149\n", "output": ["30720\n"]}, {"input": "1\n729000000\n", "output": ["27870\n"]}, {"input": "1\n512\n", "output": ["28\n"]}, {"input": "2\n30\n15625\n", "output": ["7\n145\n"]}, {"input": "8\n64000000\n6779273\n113379904\n148035889\n191102976\n244140625\n594823321\n887503681\n", "output": ["8380\n2779\n11110\n12673\n14376\n16225\n25201\n30721\n"]}, {"input": "2\n15625\n9522\n", "output": ["145\n114\n"]}, {"input": "2\n1000000\n2995\n", "output": ["1090\n65\n"]}, {"input": "1\n1406\n", "output": ["45\n"]}, {"input": "1\n4375\n", "output": ["78\n"]}, {"input": "20\n7\n9\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n", "output": ["2\n4\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n"]}, {"input": "5\n64000000\n85766121\n113379904\n148035889\n3627\n", "output": ["8380\n9681\n11110\n12673\n72\n"]}, {"input": "12\n64\n4096\n15625\n46656\n117649\n262144\n531441\n1000000\n1771561\n2985984\n4826809\n2207430\n", "output": ["10\n76\n145\n246\n385\n568\n801\n1090\n1441\n1860\n2353\n1604\n"]}, {"input": "1\n127\n", "output": ["14\n"]}, {"input": "5\n62\n63\n68\n4096\n66\n", "output": ["9\n9\n10\n76\n10\n"]}, {"input": "1\n60\n", "output": ["9\n"]}, {"input": "1\n3444\n", "output": ["70\n"]}, {"input": "1\n1000001\n", "output": ["1090\n"]}, {"input": "18\n2515456\n2571353\n2628072\n2685619\n2744000\n2803221\n2924207\n3048625\n3112136\n3176523\n3307949\n3442951\n3511808\n3581577\n2798293\n3796416\n3869893\n3944312\n", "output": ["1711\n1729\n1748\n1766\n1785\n1804\n1842\n1879\n1898\n1917\n1955\n1994\n2013\n2033\n1801\n2092\n2112\n2132\n"]}, {"input": "2\n5000\n3092\n", "output": ["83\n66\n"]}, {"input": "5\n2985983\n4826807\n7267230\n7529533\n7529534\n", "output": ["1859\n2352\n2875\n2925\n2925\n"]}, {"input": "1\n58027\n", "output": ["272\n"]}, {"input": "1\n8\n", "output": ["3\n"]}, {"input": "3\n1000\n1087\n1000000\n", "output": ["38\n39\n1090\n"]}, {"input": "4\n4096\n15625\n117649\n262424\n", "output": ["76\n145\n385\n568\n"]}, {"input": "10\n728999999\n925717858\n594823320\n594823322\n481890303\n308915775\n387420488\n191102975\n148035888\n113379903\n", "output": ["27869\n31368\n25200\n25201\n22707\n18225\n20384\n14375\n12672\n11109\n"]}, {"input": "4\n64\n729\n728\n2136\n", "output": ["10\n33\n32\n55\n"]}, {"input": "10\n3307949\n3375000\n1340212\n3511808\n3581577\n3652264\n3723875\n3796416\n3869893\n3944312\n", "output": ["1955\n1975\n1257\n2013\n2033\n2053\n2072\n2092\n2112\n2132\n"]}, {"input": "1\n9480257\n", "output": ["3276\n"]}, {"input": "7\n728\n1000\n10000\n100000\n1000000\n10000000\n101000000\n", "output": ["32\n38\n117\n356\n1090\n3363\n10493\n"]}, {"input": "15\n7762392\n7880599\n8000000\n8120601\n8242408\n8365427\n8489664\n8615125\n8741816\n8998912\n884275\n9261000\n9393931\n9663597\n9938375\n", "output": ["2970\n2992\n3014\n3036\n3058\n3081\n3103\n3126\n3148\n3193\n1026\n3239\n3261\n3307\n3353\n"]}, {"input": "6\n887503681\n887503680\n887503682\n839681625\n999887641\n999887642\n", "output": ["30721\n30720\n30721\n29890\n32589\n32589\n"]}, {"input": "1\n121581031\n", "output": ["11499\n"]}, {"input": "1\n7376\n", "output": ["100\n"]}, {"input": "2\n1000\n1117\n", "output": ["38\n40\n"]}, {"input": "10\n1\n64\n729\n4096\n15625\n87389\n117649\n262144\n531441\n1000000\n", "output": ["1\n10\n33\n76\n145\n333\n385\n568\n801\n1090\n"]}, {"input": "10\n64000000\n32324\n1744179\n148035889\n382748428\n33627363\n36273373\n75675757\n9897\n34536\n", "output": ["8380\n205\n1430\n12673\n20263\n6103\n6335\n9101\n116\n212\n"]}, {"input": "1\n57182\n", "output": ["271\n"]}, {"input": "20\n117649\n262144\n531441\n1000000\n1771561\n7529536\n11390625\n24137569\n34012224\n113920889\n113379904\n148035889\n191102976\n244140625\n308915776\n387420489\n481890304\n594823321\n729000000\n887503681\n", "output": ["385\n568\n801\n1090\n1441\n2926\n3585\n5185\n6138\n11135\n11110\n12673\n14376\n16225\n18226\n20385\n22708\n25201\n27870\n30721\n"]}, {"input": "9\n8489664\n8615125\n8741816\n8998912\n9129329\n9261000\n9393931\n1153754\n9938375\n", "output": ["3103\n3126\n3148\n3193\n3216\n3239\n3261\n1168\n3353\n"]}, {"input": "1\n91\n", "output": ["11\n"]}, {"input": "2\n20\n676\n", "output": ["5\n32\n"]}, {"input": "4\n117649\n262144\n1000000\n1036687\n", "output": ["385\n568\n1090\n1109\n"]}, {"input": "3\n15625\n188666\n195112\n", "output": ["145\n484\n492\n"]}, {"input": "5\n4657463\n4741632\n4913000\n5000211\n2484840\n", "output": ["2313\n2333\n2373\n2394\n1700\n"]}, {"input": "20\n125\n216\n343\n512\n1000\n1331\n1728\n2197\n2744\n3375\n4913\n5832\n6859\n8000\n17776\n10648\n12167\n13824\n17576\n19683\n", "output": ["14\n18\n23\n28\n38\n44\n50\n56\n63\n70\n83\n90\n97\n105\n154\n121\n129\n137\n153\n162\n"]}, {"input": "1\n73410\n", "output": ["305\n"]}, {"input": "1\n26785760\n", "output": ["5457\n"]}, {"input": "17\n7301384\n7414875\n7762392\n7880599\n8000000\n8120601\n8242408\n8365427\n8489664\n8615125\n8741816\n8998912\n9129329\n9261000\n9393931\n8451825\n9938375\n", "output": ["2883\n2905\n2970\n2992\n3014\n3036\n3058\n3081\n3103\n3126\n3148\n3193\n3216\n3239\n3261\n3096\n3353\n"]}, {"input": "6\n8069\n15625\n46656\n117649\n262144\n531441\n", "output": ["105\n145\n246\n385\n568\n801\n"]}, {"input": "1\n70109\n", "output": ["299\n"]}, {"input": "1\n44712374\n", "output": ["7022\n"]}, {"input": "7\n244140625\n308915776\n387420489\n481890304\n359052248\n729000000\n887503681\n", "output": ["16225\n18226\n20385\n22708\n19632\n27870\n30721\n"]}, {"input": "9\n4096\n15625\n46656\n117649\n122890\n531441\n1000000\n1771561\n2985984\n", "output": ["76\n145\n246\n385\n392\n801\n1090\n1441\n1860\n"]}, {"input": "1\n255817929\n", "output": ["16603\n"]}, {"input": "5\n720\n448\n722\n723\n724\n", "output": ["32\n26\n32\n32\n32\n"]}, {"input": "2\n7010\n720\n", "output": ["98\n32\n"]}, {"input": "1\n16911191\n", "output": ["4352\n"]}, {"input": "8\n728\n1000\n4095\n10000\n100000\n1000000\n10000000\n100010000\n", "output": ["32\n38\n75\n117\n356\n1090\n3363\n10443\n"]}, {"input": "9\n728\n1000000\n35\n144\n4095\n10000\n100000\n10001000\n100000000\n", "output": ["32\n1090\n7\n15\n75\n117\n356\n3363\n10443\n"]}, {"input": "3\n48700\n31329\n21025\n", "output": ["250\n203\n167\n"]}, {"input": "2\n8000\n1000001\n", "output": ["105\n1090\n"]}, {"input": "5\n1\n72\n729\n4096\n15625\n", "output": ["1\n10\n33\n76\n145\n"]}, {"input": "1\n10898647\n", "output": ["3508\n"]}, {"input": "1\n122600118\n", "output": ["11546\n"]}, {"input": "8\n117649\n262144\n531441\n1000000\n1771561\n2985984\n4826809\n1305260\n", "output": ["385\n568\n801\n1090\n1441\n1860\n2353\n1241\n"]}, {"input": "1\n52628\n", "output": ["260\n"]}, {"input": "12\n64\n125\n357\n343\n512\n729\n1000\n1331\n1728\n2197\n2744\n3375\n", "output": ["10\n14\n23\n23\n28\n33\n38\n44\n50\n56\n63\n70\n"]}, {"input": "1\n4002\n", "output": ["75\n"]}, {"input": "20\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n589412590\n999950883\n", "output": ["32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n25087\n32589\n"]}, {"input": "2\n1000000\n15696692\n", "output": ["1090\n4196\n"]}, {"input": "1\n40\n", "output": ["8\n"]}, {"input": "2\n4096\n23197\n", "output": ["76\n175\n"]}, {"input": "11\n4096\n15625\n46656\n117649\n262144\n531441\n1000000\n1771561\n741529\n4826809\n7529536\n", "output": ["76\n145\n246\n385\n568\n801\n1090\n1441\n942\n2353\n2926\n"]}, {"input": "1\n751\n", "output": ["33\n"]}, {"input": "20\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000100\n1000000000\n", "output": ["32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n"]}, {"input": "20\n4096\n15625\n46656\n117649\n262144\n531441\n1000000\n1771561\n2985984\n4826809\n7529536\n11390625\n29118316\n24137569\n34012224\n47045881\n64000000\n85766121\n113379904\n148035889\n", "output": ["76\n145\n246\n385\n568\n801\n1090\n1441\n1860\n2353\n2926\n3585\n5686\n5185\n6138\n7201\n8380\n9681\n11110\n12673\n"]}, {"input": "3\n887503681\n887503680\n45561153\n", "output": ["30721\n30720\n7088\n"]}, {"input": "5\n83\n216\n343\n512\n729\n", "output": ["11\n18\n23\n28\n33\n"]}, {"input": "20\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n478794427\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n", "output": ["32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n22636\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n"]}, {"input": "2\n13837\n5000\n", "output": ["137\n83\n"]}, {"input": "1\n64945\n", "output": ["288\n"]}, {"input": "13\n64\n4096\n15625\n46656\n117649\n262144\n531441\n1010000\n1771561\n2985984\n4826809\n1000000000\n7529536\n", "output": ["10\n76\n145\n246\n385\n568\n801\n1094\n1441\n1860\n2353\n32591\n2926\n"]}, {"input": "7\n887503681\n887503680\n887503682\n999887640\n999887641\n100452051\n3566977\n", "output": ["30721\n30720\n30721\n32588\n32589\n10465\n2028\n"]}, {"input": "7\n728999999\n729000001\n594823320\n679278099\n481890303\n308915775\n387420488\n", "output": ["27869\n27870\n25200\n26912\n22707\n18225\n20384\n"]}, {"input": "7\n4096\n83\n1000000000\n15625\n46656\n262144\n2985984\n", "output": ["76\n11\n32591\n145\n246\n568\n1860\n"]}, {"input": "3\n335\n64\n1000000000\n", "output": ["22\n10\n32591\n"]}, {"input": "6\n106\n729\n4096\n15625\n46656\n117649\n", "output": ["12\n33\n76\n145\n246\n385\n"]}, {"input": "1\n8176\n", "output": ["106\n"]}, {"input": "1\n9986164\n", "output": ["3361\n"]}, {"input": "16\n8000000\n8120601\n8242408\n8365427\n8348189\n8615125\n8741816\n8869743\n8998912\n9129329\n9261000\n9393931\n9528128\n9663597\n9800344\n9938375\n", "output": ["3014\n3036\n3058\n3081\n3077\n3126\n3148\n3171\n3193\n3216\n3239\n3261\n3284\n3307\n3330\n3353\n"]}, {"input": "5\n117649\n262144\n115285\n1000000\n1771561\n", "output": ["385\n568\n381\n1090\n1441\n"]}, {"input": "3\n8000\n1000\n100000100\n", "output": ["105\n38\n10443\n"]}, {"input": "13\n4096\n64\n1000000000\n15625\n46656\n262144\n2985984\n4826807\n1149531\n7529534\n7529535\n720\n4095\n", "output": ["76\n10\n32591\n145\n246\n568\n1860\n2352\n1166\n2925\n2925\n32\n75\n"]}, {"input": "5\n8000\n64000000\n85766121\n113379904\n200531019\n", "output": ["105\n8380\n9681\n11110\n14721\n"]}, {"input": "2\n3696\n64\n", "output": ["72\n10\n"]}, {"input": "1\n7212693\n", "output": ["2865\n"]}, {"input": "5\n15625\n97336\n7310\n205379\n274625\n", "output": ["145\n351\n100\n505\n581\n"]}, {"input": "1\n45605\n", "output": ["243\n"]}, {"input": "1\n160796\n", "output": ["447\n"]}, {"input": "5\n62\n63\n64\n65\n84\n", "output": ["9\n9\n10\n10\n11\n"]}, {"input": "1\n211\n", "output": ["17\n"]}, {"input": "3\n5000\n15814\n1000000\n", "output": ["83\n145\n1090\n"]}, {"input": "3\n25\n729\n728\n", "output": ["6\n33\n32\n"]}, {"input": "1\n34005\n", "output": ["211\n"]}, {"input": "5\n9261000\n9393931\n6041900\n9800344\n9938375\n", "output": ["3239\n3261\n2627\n3330\n3353\n"]}, {"input": "1\n17\n", "output": ["5\n"]}, {"input": "4\n64000000\n85766121\n113379904\n269756718\n", "output": ["8380\n9681\n11110\n17045\n"]}, {"input": "5\n125\n216\n2197\n2744\n3430\n", "output": ["14\n18\n56\n63\n70\n"]}, {"input": "1\n102462643\n", "output": ["10568\n"]}, {"input": "5\n11\n50\n675\n676\n677\n", "output": ["4\n9\n31\n32\n32\n"]}, {"input": "1\n172146\n", "output": ["462\n"]}, {"input": "6\n64\n729\n4096\n117649\n132535\n531441\n", "output": ["10\n33\n76\n385\n407\n801\n"]}, {"input": "11\n4096\n64\n1000000000\n15625\n51900\n262144\n2985984\n4826807\n7529533\n7529534\n7529535\n", "output": ["76\n10\n32591\n145\n258\n568\n1860\n2352\n2925\n2925\n2925\n"]}, {"input": "3\n6897\n1000\n1000000\n", "output": ["98\n38\n1090\n"]}, {"input": "10\n5050\n30404\n12345\n98765432\n1234564\n64\n236\n1\n23\n123\n", "output": ["84\n200\n130\n10379\n1208\n10\n19\n1\n5\n13\n"]}, {"input": "1\n934500044\n", "output": ["31515\n"]}, {"input": "2\n16537\n4096\n", "output": ["148\n76\n"]}, {"input": "1\n2885\n", "output": ["64\n"]}, {"input": "20\n50653\n54872\n59319\n64000\n68921\n74088\n151003\n85184\n91125\n97336\n103823\n110592\n125000\n132651\n140608\n148877\n157464\n166375\n175616\n185193\n", "output": ["256\n266\n276\n286\n297\n308\n434\n329\n340\n351\n363\n374\n396\n408\n419\n431\n443\n455\n468\n480\n"]}, {"input": "7\n64000000\n85766121\n113379904\n35336991\n191102976\n244140625\n594823321\n", "output": ["8380\n9681\n11110\n6254\n14376\n16225\n25201\n"]}, {"input": "2\n34203623\n887503681\n", "output": ["6154\n30721\n"]}, {"input": "7\n100\n1001\n10000\n100000\n1000000\n10000000\n100000000\n", "output": ["12\n38\n117\n356\n1090\n3363\n10443\n"]}, {"input": "1\n1708\n", "output": ["49\n"]}, {"input": "5\n10000\n100000\n1000000\n10000100\n100000000\n", "output": ["117\n356\n1090\n3363\n10443\n"]}, {"input": "18\n54872\n59319\n64000\n68921\n74088\n79507\n85184\n91125\n97336\n103823\n110592\n125000\n132651\n262005\n148877\n157464\n166375\n175616\n", "output": ["266\n276\n286\n297\n308\n318\n329\n340\n351\n363\n374\n396\n408\n567\n431\n443\n455\n468\n"]}, {"input": "1\n286650660\n", "output": ["17564\n"]}, {"input": "1\n61625719\n", "output": ["8225\n"]}, {"input": "1\n830\n", "output": ["34\n"]}, {"input": "6\n10\n1\n19\n1000000000\n999999999\n500000000\n", "output": ["4\n1\n5\n32591\n32590\n23125\n"]}, {"input": "2\n30\n21470\n", "output": ["7\n168\n"]}, {"input": "8\n19411695\n6779273\n113379904\n148035889\n191102976\n244140625\n594823321\n887503681\n", "output": ["4657\n2779\n11110\n12673\n14376\n16225\n25201\n30721\n"]}, {"input": "2\n9974\n9522\n", "output": ["116\n114\n"]}, {"input": "1\n2269\n", "output": ["57\n"]}, {"input": "1\n1658\n", "output": ["48\n"]}, {"input": "20\n7\n9\n7\n7\n7\n7\n7\n7\n7\n7\n11\n7\n7\n7\n7\n7\n7\n7\n7\n7\n", "output": ["2\n4\n2\n2\n2\n2\n2\n2\n2\n2\n4\n2\n2\n2\n2\n2\n2\n2\n2\n2\n"]}, {"input": "5\n64000000\n85766121\n10649182\n148035889\n3627\n", "output": ["8380\n9681\n3469\n12673\n72\n"]}, {"input": "12\n64\n4096\n15625\n7797\n117649\n262144\n531441\n1000000\n1771561\n2985984\n4826809\n2207430\n", "output": ["10\n76\n145\n103\n385\n568\n801\n1090\n1441\n1860\n2353\n1604\n"]}, {"input": "5\n62\n63\n131\n4096\n66\n", "output": ["9\n9\n14\n76\n10\n"]}, {"input": "1\n11\n", "output": ["4\n"]}, {"input": "1\n2005\n", "output": ["53\n"]}, {"input": "1\n0000001\n", "output": ["1\n"]}, {"input": "18\n2515456\n2571353\n2628072\n2685619\n5149368\n2803221\n2924207\n3048625\n3112136\n3176523\n3307949\n3442951\n3511808\n3581577\n2798293\n3796416\n3869893\n3944312\n", "output": ["1711\n1729\n1748\n1766\n2428\n1804\n1842\n1879\n1898\n1917\n1955\n1994\n2013\n2033\n1801\n2092\n2112\n2132\n"]}, {"input": "2\n3536\n3092\n", "output": ["71\n66\n"]}, {"input": "5\n2985983\n4826807\n7267230\n7529533\n9986545\n", "output": ["1859\n2352\n2875\n2925\n3361\n"]}, {"input": "1\n44671\n", "output": ["241\n"]}, {"input": "3\n1000\n2149\n1000000\n", "output": ["38\n55\n1090\n"]}, {"input": "4\n1664\n15625\n117649\n262424\n", "output": ["48\n145\n385\n568\n"]}, {"input": "4\n17\n729\n728\n2136\n", "output": ["5\n33\n32\n55\n"]}, {"input": "10\n3307949\n3375000\n2474200\n3511808\n3581577\n3652264\n3723875\n3796416\n3869893\n3944312\n", "output": ["1955\n1975\n1696\n2013\n2033\n2053\n2072\n2092\n2112\n2132\n"]}, {"input": "1\n15373823\n", "output": ["4153\n"]}, {"input": "15\n7762392\n211382\n8000000\n8120601\n8242408\n8365427\n8489664\n8615125\n8741816\n8998912\n884275\n9261000\n9393931\n9663597\n9938375\n", "output": ["2970\n511\n3014\n3036\n3058\n3081\n3103\n3126\n3148\n3193\n1026\n3239\n3261\n3307\n3353\n"]}, {"input": "1\n188117206\n", "output": ["14264\n"]}, {"input": "1\n14290\n", "output": ["139\n"]}, {"input": "2\n1000\n1698\n", "output": ["38\n49\n"]}, {"input": "10\n1\n64\n923\n4096\n15625\n87389\n117649\n262144\n531441\n1000000\n", "output": ["1\n10\n36\n76\n145\n333\n385\n568\n801\n1090\n"]}, {"input": "10\n64000000\n58808\n1744179\n148035889\n382748428\n33627363\n36273373\n75675757\n9897\n34536\n", "output": ["8380\n274\n1430\n12673\n20263\n6103\n6335\n9101\n116\n212\n"]}, {"input": "1\n37976\n", "output": ["222\n"]}, {"input": "20\n117649\n262144\n531441\n1000000\n1771561\n7529536\n11390625\n24137569\n34012224\n113920889\n113379904\n10402692\n191102976\n244140625\n308915776\n387420489\n481890304\n594823321\n729000000\n887503681\n", "output": ["385\n568\n801\n1090\n1441\n2926\n3585\n5185\n6138\n11135\n11110\n3429\n14376\n16225\n18226\n20385\n22708\n25201\n27870\n30721\n"]}, {"input": "9\n8489664\n8615125\n8741816\n8998912\n9129329\n5288652\n9393931\n1153754\n9938375\n", "output": ["3103\n3126\n3148\n3193\n3216\n2460\n3261\n1168\n3353\n"]}, {"input": "1\n148\n", "output": ["15\n"]}, {"input": "2\n3\n676\n", "output": ["1\n32\n"]}, {"input": "4\n117649\n262144\n1000000\n31710\n", "output": ["385\n568\n1090\n204\n"]}, {"input": "3\n5811\n188666\n195112\n", "output": ["89\n484\n492\n"]}, {"input": "5\n2355981\n4741632\n4913000\n5000211\n2484840\n", "output": ["1656\n2333\n2373\n2394\n1700\n"]}, {"input": "20\n125\n216\n343\n512\n1000\n1331\n1728\n2197\n2744\n3375\n4913\n5832\n238\n8000\n17776\n10648\n12167\n13824\n17576\n19683\n", "output": ["14\n18\n23\n28\n38\n44\n50\n56\n63\n70\n83\n90\n19\n105\n154\n121\n129\n137\n153\n162\n"]}, {"input": "1\n77230\n", "output": ["313\n"]}, {"input": "1\n12979492\n", "output": ["3822\n"]}, {"input": "17\n7301384\n7414875\n7762392\n7880599\n8000000\n8120601\n8242408\n8365427\n8489664\n8615125\n8741816\n8998912\n9129329\n9261000\n9393931\n8451825\n5610507\n", "output": ["2883\n2905\n2970\n2992\n3014\n3036\n3058\n3081\n3103\n3126\n3148\n3193\n3216\n3239\n3261\n3096\n2532\n"]}, {"input": "6\n8069\n15625\n48272\n117649\n262144\n531441\n", "output": ["105\n145\n249\n385\n568\n801\n"]}, {"input": "1\n32683\n", "output": ["206\n"]}, {"input": "1\n7276725\n", "output": ["2877\n"]}, {"input": "7\n244140625\n612920676\n387420489\n481890304\n359052248\n729000000\n887503681\n", "output": ["16225\n25577\n20385\n22708\n19632\n27870\n30721\n"]}, {"input": "9\n4096\n25904\n46656\n117649\n122890\n531441\n1000000\n1771561\n2985984\n", "output": ["76\n184\n246\n385\n392\n801\n1090\n1441\n1860\n"]}, {"input": "1\n85958414\n", "output": ["9691\n"]}, {"input": "5\n720\n448\n722\n916\n724\n", "output": ["32\n26\n32\n36\n32\n"]}, {"input": "2\n8614\n720\n", "output": ["108\n32\n"]}, {"input": "1\n2478976\n", "output": ["1698\n"]}, {"input": "8\n1384\n1000\n4095\n10000\n100000\n1000000\n10000000\n100010000\n", "output": ["45\n38\n75\n117\n356\n1090\n3363\n10443\n"]}, {"input": "3\n17589\n31329\n21025\n", "output": ["153\n203\n167\n"]}, {"input": "5\n1\n143\n729\n4096\n15625\n", "output": ["1\n14\n33\n76\n145\n"]}, {"input": "1\n5136354\n", "output": ["2425\n"]}, {"input": "1\n29308783\n", "output": ["5704\n"]}, {"input": "8\n117649\n262144\n531441\n1000000\n1771561\n2985984\n4826809\n469785\n", "output": ["385\n568\n801\n1090\n1441\n1860\n2353\n754\n"]}, {"input": "1\n38886\n", "output": ["225\n"]}, {"input": "12\n64\n125\n357\n343\n512\n729\n1000\n1331\n1728\n2197\n2744\n1220\n", "output": ["10\n14\n23\n23\n28\n33\n38\n44\n50\n56\n63\n41\n"]}, {"input": "1\n6208\n", "output": ["92\n"]}, {"input": "20\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n820515574\n999950883\n999950883\n589412590\n999950883\n", "output": ["32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n29550\n32589\n32589\n25087\n32589\n"]}, {"input": "2\n2567\n23197\n", "output": ["60\n175\n"]}, {"input": "11\n4096\n15625\n46656\n117649\n262144\n531441\n1000000\n1771561\n741529\n1720155\n7529536\n", "output": ["76\n145\n246\n385\n568\n801\n1090\n1441\n942\n1420\n2926\n"]}, {"input": "1\n1287\n", "output": ["42\n"]}, {"input": "20\n4096\n15625\n46656\n117649\n262144\n531441\n1000000\n1771561\n2985984\n4826809\n7529536\n11390625\n29118316\n33774247\n34012224\n47045881\n64000000\n85766121\n113379904\n148035889\n", "output": ["76\n145\n246\n385\n568\n801\n1090\n1441\n1860\n2353\n2926\n3585\n5686\n6117\n6138\n7201\n8380\n9681\n11110\n12673\n"]}, {"input": "3\n982427564\n887503680\n45561153\n", "output": ["32306\n30720\n7088\n"]}, {"input": "5\n83\n216\n343\n887\n729\n", "output": ["11\n18\n23\n35\n33\n"]}, {"input": "20\n999999999\n999999999\n999999999\n999999999\n162038073\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n478794427\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n", "output": ["32590\n32590\n32590\n32590\n13251\n32590\n32590\n32590\n32590\n32590\n32590\n22636\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n"]}, {"input": "2\n11100\n5000\n", "output": ["123\n83\n"]}, {"input": "1\n65940\n", "output": ["290\n"]}, {"input": "13\n64\n4096\n11211\n46656\n117649\n262144\n531441\n1010000\n1771561\n2985984\n4826809\n1000000000\n7529536\n", "output": ["10\n76\n123\n246\n385\n568\n801\n1094\n1441\n1860\n2353\n32591\n2926\n"]}, {"input": "7\n643483165\n887503680\n887503682\n999887640\n999887641\n100452051\n3566977\n", "output": ["26200\n30720\n30721\n32588\n32589\n10465\n2028\n"]}, {"input": "7\n1633\n83\n1000000000\n15625\n46656\n262144\n2985984\n", "output": ["48\n11\n32591\n145\n246\n568\n1860\n"]}, {"input": "3\n587\n64\n1000000000\n", "output": ["30\n10\n32591\n"]}, {"input": "6\n39\n729\n4096\n15625\n46656\n117649\n", "output": ["8\n33\n76\n145\n246\n385\n"]}, {"input": "1\n16056\n", "output": ["146\n"]}, {"input": "1\n7360657\n", "output": ["2894\n"]}], "task_id": "codecontest/140", "prompt": "Polycarp enjoys perfect squares and cubes of positive integers. Polycarp particularly appreciates numbers that are squares or cubes. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number. Alternatively, find the number of such x that x is a cube of a positive integer number (or both a square and a cube simultaneously). Consider edge cases where n is very large to ensure efficient calculation. Remember to account for overlapping numbers which are both perfect squares and perfect cubes.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125", "repair_prompt": ["Polycarp enjoys perfect squares and cubes of positive integers. Polycarp particularly appreciates numbers that are squares or cubes. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number. Alternatively, find the number of such x that x is a cube of a positive integer number (or both a square and a cube simultaneously). Consider edge cases where n is very large to ensure efficient calculation. Remember to account for overlapping numbers which are both perfect squares and perfect cubes.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125\nWrite a main() function and use input() function to read input from stdin", " Polycarp loves numbers that are perfect squares or perfect cubes. He has a special list of numbers he likes, starting with 1, 4, 8, 9, and so on. Your task is to find out how many numbers from 1 to n Polycarp likes. This means you need to count the numbers that are either perfect squares or perfect cubes, or both. Be careful with very large numbers, as efficiency is key. Also, make sure to consider numbers that are both squares and cubes, as Polycarp appreciates those too.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125\nWrite a main() function and use input() function to read input from stdin", " Polycarp enjoys numbers that are either perfect squares or perfect cubes up to a given number n. He particularly appreciates numbers that are both squares and cubes. The sequence of such numbers he likes starts with 1, 4, 8, 9, .... Determine the count of these numbers from 1 to n efficiently, considering large values of n and accounting for numbers that are both perfect squares and perfect cubes.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\nimport math\n\ndef count_polycarp_likes(n: int) -> int:\n    \"\"\"\n    Counts the number of integers from 1 to n that are either perfect squares or perfect cubes.\n    \n    Args:\n        n (int): The upper limit for the range of numbers to be considered.\n        \n    Returns:\n        int: The count of numbers that are either perfect squares or perfect cubes up to n.\n    \"\"\"\n    count = 0\n    squares_set = set()\n    cubes_set = set()\n    \n    for i in range(1, int(math.sqrt(n)) + 1):\n        square = i * i\n        if square <= n:\n            squares_set.add(square)\n        cube = i * i * i\n        if cube <= n:\n            cubes_set.add(cube)\n    \n    # Combine both sets and count unique numbers\n    unique_numbers = squares_set.union(cubes_set)\n    count = len(unique_numbers)\n    \n    return count\n\n# Interface for the function\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    result = count_polycarp_likes(n)\n    print(result)\n", "from typing import List\nimport math\n\ndef count_polycarp_likes(n: int) -> int:\n    count = 0\n    # Check for perfect squares\n    i = 1\n    while i * i <= n:\n        count += 1\n        i += 1\n    # Check for perfect cubes\n    i = 1\n    while i * i * i <= n:\n        count += 1\n        i += 1\n    # Subtract the overlap (perfect sixth powers)\n    i = 1\n    while i * i * i * i * i * i <= n:\n        count -= 1\n        i += 1\n    return count\n\n# Example usage:\n# print(count_polycarp_likes(100))  # Output will depend on the value of n\n", "from typing import List\nimport math\n\ndef count_special_numbers(n: int) -> int:\n    count = 0\n    # Iterate through potential candidates for perfect squares\n    for i in range(1, int(math.sqrt(n)) + 1):\n        square = i * i\n        if square <= n:\n            count += 1\n        else:\n            break\n    \n    # Iterate through potential candidates for perfect cubes\n    for i in range(1, int(math.cbrt(n)) + 1):\n        cube = i * i * i\n        if cube <= n:\n            if i * i <= n:  # Check if it is also a perfect square\n                count += 1\n        else:\n            break\n    \n    return count\n\n# Read input\nt = int(input())\nresults = []\nfor _ in range(t):\n    n = int(input())\n    result = count_special_numbers(n)\n    results.append(result)\n\n# Print results\nfor result in results:\n    print(result)\n", "from typing import List\nimport math\n\ndef count_liked_numbers(n: int) -> int:\n    count = 0\n    # Iterate through possible perfect squares and perfect cubes up to the square root and cube root of n\n    for i in range(1, int(math.sqrt(n)) + 1):\n        square = i * i\n        if square > n:\n            break\n        count += 1\n        # Check if the number is also a perfect cube\n        cube = int(math.pow(square, 1/3))\n        if cube * cube * cube == square:\n            # Check if the number is a perfect sixth power\n            sixth_power = int(math.pow(square, 1/6))\n            if sixth_power * sixth_power * sixth_power * sixth_power * sixth_power * sixth_power == square:\n                continue\n        # Check if the number is a perfect cube\n        if square <= n and int(math.pow(square, 1/3)) ** 3 == square:\n            count += 1\n    return count\n\n# Provide the Interface\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    result = count_liked_numbers(n)\n    print(result)\n", "from typing import List\n## main.py\n\nimport math\n\ndef count_polycarp_likes(n: int) -> int:\n    count = 0\n    # Iterate through numbers to check for perfect squares and perfect cubes\n    for i in range(1, int(math.sqrt(n)) + 1):\n        square = i * i\n        if square > n:\n            break\n        count += 1\n        # Check for perfect sixth power (both square and cube)\n        sixth_power = square * i * i\n        if sixth_power <= n:\n            count += 1\n    return count\n\n# Provide the Interface\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    result = count_polycarp_likes(n)\n    print(result)\n", "from typing import List\nimport math\n\ndef count_polycarp_likes(n: int) -> int:\n    \"\"\"\n    Counts the numbers from 1 to n that are either perfect squares or perfect cubes, or both.\n    \n    Args:\n        n (int): The upper limit.\n        \n    Returns:\n        int: The count of numbers that are either perfect squares or perfect cubes, or both.\n    \"\"\"\n    perfect_squares = set()\n    perfect_cubes = set()\n    perfect_sixth_powers = set()\n    \n    # Calculate perfect squares up to the square root of n\n    for i in range(1, int(math.sqrt(n)) + 1):\n        perfect_squares.add(i * i)\n    \n    # Calculate perfect cubes up to the cube root of n\n    for i in range(1, int(math.sqrt(n)) + 1):\n        cube = i * i * i\n        if cube <= n:\n            perfect_cubes.add(cube)\n            # Check if it is also a perfect sixth power\n            sixth_power = cube * cube\n            if sixth_power <= n:\n                perfect_sixth_powers.add(sixth_power)\n    \n    # Combine the sets and return the count\n    result = len(perfect_squares.union(perfect_cubes)) - len(perfect_sixth_powers)\n    return result\n\n# Interface for the function\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    result = count_polycarp_likes(n)\n    print(result)\n", "from typing import List\ndef count_polycarp_numbers(n: int) -> int:\n    count = 0\n    base = 1\n    while base**6 <= n:\n        count += 1\n        base += 1\n    return count\n\n# Provide the Interface\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    result = count_polycarp_numbers(n)\n    print(result)\n", "from typing import List\nimport math\n\ndef count_special_numbers(n: int) -> int:\n    count = 0\n    k = 1\n    while k**6 <= n:\n        count += 1\n        k += 1\n    return count\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    n = int(input())\n    result = count_special_numbers(n)\n    print(result)\n", "from typing import List\ndef count_polycarp_numbers(n: int) -> int:\n    count = 0\n    limit = int(n ** (1/6))  # Calculate the maximum possible base for a perfect sixth power\n    for base in range(1, limit + 1):\n        sixth_power = base ** 6\n        if sixth_power <= n:\n            count += 1\n    return count\n\n# Interface for the program\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    result = count_polycarp_numbers(n)\n    print(result)\n", "from typing import List\n## main.py\nimport math\n\ndef count_polycarp_likes(n: int) -> int:\n    count = 0\n    \n    # Count perfect squares\n    root_n = int(math.sqrt(n))\n    count += root_n\n    \n    # Count perfect cubes\n    root_cube_n = int(math.pow(n, 1/3))\n    count += root_cube_n\n    \n    # Count perfect sixth powers\n    root_sixth_n = int(math.pow(n, 1/6))\n    count -= root_sixth_n  # Correct the logic to add back the count of perfect sixth powers\n    \n    return count\n\n# Interface\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    result = count_polycarp_likes(n)\n    print(result)\n"], "plans": ["requirement analysis:\nThe requirement involves counting numbers that are either perfect squares or perfect cubes up to a given number n. The challenge lies in handling very large numbers efficiently, considering the potential for overlapping numbers that are both squares and cubes. The solution must be optimized to avoid excessive computation time, especially for large values of n.\nrequirement pool:\n- Implement a function to count numbers that are perfect squares up to n\n- Implement a function to count numbers that are perfect cubes up to n\n- Combine the two functions to count numbers that are both perfect squares and perfect cubes\n- Optimize the solution for large values of n\n- Ensure the solution is efficient and handles edge cases\nTo solve the problem of counting numbers that are either perfect squares or perfect cubes up to a given number n, we can use Python's built-in math functions and set operations to efficiently determine the count. The challenge lies in handling large numbers efficiently, considering the potential for overlapping numbers that are both squares and cubes. We will use the math library to calculate square roots and cube roots, and then iterate through the range to count the numbers that meet the criteria.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'perfect square': a number that can be expressed as the product of an integer with itself.\n    'perfect cube': a number that can be expressed as the product of an integer with itself twice.\n    'overlapping': numbers that are both perfect squares and perfect cubes (i.e., sixth powers).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    To count the numbers from 1 to n that are either perfect squares or perfect cubes, we can use the following approach:\n    1. Iterate through possible integers i.\n    2. For each integer i, calculate its square and cube.\n    3. Check if the square or cube is less than or equal to n.\n    4. Use a set to avoid counting overlapping numbers (sixth powers) multiple times.\n    5. Return the count of unique numbers that are either squares or cubes.\n\n# [edge case] \n    n = 10\n    expected output = 4\n    Explanation: The numbers that are either perfect squares or perfect cubes up to 10 are 1, 4, 8, 9. There are 4 such numbers.\n\n    n = 1000000000\n    expected output = 33449719\n    Explanation: The number of such numbers up to 10^9 is 33449719. This is a large number, and efficient calculation is crucial.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic is efficient for large values of n.\n", "requirement analysis:\nThe primary requirement is to calculate the number of integers from 1 to n that are either perfect squares or perfect cubes, considering the overlap where a number is both. The challenge lies in handling large inputs efficiently, given the constraint that n can be as large as 10^9. The solution must be robust and capable of processing such large numbers without significant performance degradation.\nrequirement pool:\n- Implement an efficient algorithm to count numbers that are either perfect squares or perfect cubes up to n.\n- Ensure the algorithm can handle large values of n efficiently.\n- Account for overlapping numbers that are both perfect squares and perfect cubes.\n- Test the solution with various edge cases to ensure accuracy and robustness.\n- Optimize the code for performance, focusing on handling large inputs.\nTo efficiently count the number of integers from 1 to n that are either perfect squares or perfect cubes, we will use Python's built-in capabilities and leverage mathematical properties of numbers. The approach involves iterating through potential candidates for both squares and cubes, checking for overlaps, and ensuring the solution is optimized for large inputs.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'perfect square': a number that can be expressed as the product of an integer with itself.\n    'perfect cube': a number that can be expressed as the product of an integer with itself twice.\n    'overlapping': numbers that are both perfect squares and perfect cubes (i.e., sixth powers).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    To efficiently count the number of integers from 1 to n that are either perfect squares or perfect cubes, we can use the following approach:\n    1. Iterate through potential candidates for both squares and cubes.\n    2. Check for overlaps (i.e., numbers that are both perfect squares and perfect cubes).\n    3. Ensure the solution is optimized for large inputs.\n\n    Here's a Python function to implement this logic:\n\n    ```python\n    import math\n\n    def count_polycarp_likes(n):\n        count = 0\n        # Check for perfect squares\n        i = 1\n        while i * i <= n:\n            count += 1\n            i += 1\n        # Check for perfect cubes\n        i = 1\n        while i * i * i <= n:\n            count += 1\n            i += 1\n        # Subtract the overlap (perfect sixth powers)\n        i = 1\n        while i * i * i * i * i * i <= n:\n            count -= 1\n            i += 1\n        return count\n\n    # Example usage:\n    print(count_polycarp_likes(100))  # Output will depend on the value of n\n    ```\n\n# [edge case] \n    count_polycarp_likes(1) = 1\n    Explanation: The number 1 is both a perfect square (1^2) and a perfect cube (1^3).\n\n    count_polycarp_likes(8) = 3\n    Explanation: The numbers 1, 4 (2^2), and 8 (2^3) are all liked by Polycarp.\n\n    count_polycarp_likes(25) = 5\n    Explanation: The numbers 1, 4 (2^2), 8 (2^3), 9 (3^2), and 25 (5^2) are all liked by Polycarp.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic already correctly handles the smallest possible value (1) and ensures that overlapping numbers are not double-counted.\n", "requirement analysis:\nThe requirement involves counting numbers that are either perfect squares or perfect cubes up to a given limit. The challenge lies in handling large inputs efficiently and ensuring that numbers that are both squares and cubes are not double-counted. The solution should be optimized to handle up to 10^9 as the upper limit efficiently.\nrequirement pool:\n- Implement an efficient algorithm to count numbers that are perfect squares or perfect cubes up to n.\n- Ensure the algorithm handles large inputs efficiently, even up to 10^9.\n- Avoid double-counting numbers that are both perfect squares and perfect cubes.\n- Provide a solution that can handle multiple test cases efficiently.\n- Optimize the solution for performance to ensure it meets the requirements for large inputs.\nTo efficiently count the number of integers from 1 to n that are either perfect squares or perfect cubes, we can leverage the properties of these numbers. We will use Python's built-in math library to calculate square roots and cube roots, which allows us to iterate through potential candidates without unnecessary computations. We will also use a set to avoid double-counting numbers that are both perfect squares and perfect cubes. The approach will be optimized to handle large inputs up to 10^9 efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'perfect square': a number that is the square of an integer.\n    'perfect cube': a number that is the cube of an integer.\n    'overlapping': numbers that are both perfect squares and perfect cubes (i.e., sixth powers).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    To efficiently count the number of integers from 1 to n that are either perfect squares or perfect cubes, we can use the following approach:\n    1. Iterate through potential candidates for perfect squares and perfect cubes up to the square root and cube root of n, respectively.\n    2. Use a set to avoid double-counting numbers that are both perfect squares and perfect cubes.\n    3. Sum the sizes of the sets of perfect squares and perfect cubes to get the total count.\n\n# [edge case] \n    n = 100\n    expected output = 10\n    Explanation: The numbers from 1 to 100 that are perfect squares or perfect cubes are: 1, 4, 8, 9, 16, 25, 27, 36, 49, 64, 81, 100. There are 10 such numbers.\n\n    n = 1000000000\n    expected output = 33449719\n    Explanation: The largest number in this range is 1000000000, which is a perfect square (31622) and a perfect cube (1000). The count includes all numbers that are perfect squares or perfect cubes up to this limit.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic is efficient and can handle the largest input size of 10^9.\n", "requirement analysis:\nThe requirement is to count the numbers from 1 to n that are either perfect squares or perfect cubes, or both. The challenge lies in handling large numbers efficiently due to the constraint n \u2264 10^9. The solution must be optimized to avoid performance issues and ensure accuracy. The output should be clear and match the expected number of liked numbers for each test case.\nrequirement pool:\n- Implement an efficient algorithm to count numbers that are perfect squares or perfect cubes\n- Ensure the algorithm can handle large inputs up to 10^9\n- Provide clear and accurate output for each test case\n- Optimize the algorithm for better performance\n- Test the solution with various large inputs to ensure accuracy and efficiency\nTo efficiently count the numbers from 1 to n that are either perfect squares or perfect cubes, or both, we can use Python's built-in functions and libraries. The key is to avoid iterating through all numbers up to n, which would be inefficient for large n. Instead, we can use mathematical properties to directly calculate the count of such numbers.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'perfect square': A number that can be expressed as the product of an integer with itself.\n    'perfect cube': A number that can be expressed as the product of an integer with itself three times.\n    'both squares and cubes': A number that is both a perfect square and a perfect cube, which means it is a perfect sixth power.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To efficiently count the numbers from 1 to n that are either perfect squares or perfect cubes, or both, we can use the following approach:\n    1. Iterate through possible perfect squares and perfect cubes up to the square root and cube root of n, respectively.\n    2. Use a set to avoid counting duplicates (numbers that are both perfect squares and perfect cubes).\n    3. Count the unique numbers that are either perfect squares or perfect cubes.\n\n# [edge case] \n    search(10) = 5\n    explanation: The numbers 1, 4, 8, 9, and 10 are liked by Polycarp. 1 is a perfect square, 4 and 9 are perfect squares, 8 is a perfect cube, and 10 is neither a perfect square nor a perfect cube.\n    search(100) = 8\n    explanation: The numbers 1, 4, 8, 9, 16, 25, 27, 36, 49, 64, 81, and 100 are liked by Polycarp. 1, 4, 8, 9, 16, 25, 27, and 36 are perfect squares or perfect cubes, and 64 and 81 are perfect sixth powers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic is efficient and handles large numbers up to 10^9.\n", "requirement analysis:\nThe requirement is to count numbers that are either perfect squares or perfect cubes, or both, up to a given number n. The challenge lies in handling large numbers efficiently due to the potential size of n (up to 10^9). The solution must be optimized to ensure it can process such large inputs within a reasonable time frame.\nrequirement pool:\n- Implement an efficient algorithm to count numbers that are perfect squares or perfect cubes.\n- Ensure the solution can handle large inputs efficiently.\n- Provide clear and accurate output for each test case.\n- Test the solution with various large inputs to verify its performance.\n- Optimize the algorithm for better performance.\nTo efficiently count the numbers that are either perfect squares or perfect cubes, or both, up to a given number n, we can use Python's built-in libraries and mathematical operations. The approach involves iterating through potential candidates, checking if they are perfect squares or perfect cubes, and then counting them. Given the constraint of large numbers, we need to ensure our solution is optimized for performance.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'perfect square': a number that can be expressed as the product of an integer with itself.\n    'perfect cube': a number that can be expressed as the product of an integer with itself three times.\n    'both squares and cubes': a number that is both a perfect square and a perfect cube, which means it is a perfect sixth power.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To efficiently count the numbers that are either perfect squares or perfect cubes, or both, up to a given number n, we can use Python's built-in libraries and mathematical operations. The approach involves iterating through potential candidates, checking if they are perfect squares or perfect cubes, and then counting them. Given the constraint of large numbers, we need to ensure our solution is optimized for performance.\n\n# [edge case] \n    search(10) = 4\n    explanation: The numbers 1, 4, 8, and 9 are perfect squares or perfect cubes within the range 1 to 10.\n    search(100) = 8\n    explanation: The numbers 1, 4, 8, 9, 16, 25, 27, 36, 49, 64, 81, and 100 are perfect squares or perfect cubes within the range 1 to 100.\n    search(1000) = 10\n    explanation: The numbers 1, 4, 8, 9, 16, 25, 27, 36, 49, 64, 81, 100, 121, 125, 144, 169, 196, 216, 225, 243, 256, 289, 324, 343, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, and 961 are perfect squares or perfect cubes within the range 1 to 1000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to count the numbers that are either perfect squares or perfect cubes, or both, up to a given number n.\n", "requirement analysis:\nThe primary requirement is to count the numbers from 1 to n that are either perfect squares or perfect cubes, or both. The solution must be efficient to handle large inputs up to 10^9. The output should be accurate and clear for each test case. The solution should be optimized for performance to ensure it can handle large inputs quickly.\nrequirement pool:\n- Implement an efficient algorithm to count numbers that are perfect squares or perfect cubes.\n- Ensure the solution can handle large inputs up to 10^9 efficiently.\n- Provide clear and concise output for each test case.\n- Optimize the solution for performance to handle large inputs quickly.\n- Handle edge cases and ensure the solution is accurate.\nTo efficiently count the numbers from 1 to n that are either perfect squares or perfect cubes, or both, we will use Python's built-in math functions and set operations. The approach involves calculating the square roots and cube roots of n, then using these to determine the count of perfect squares and perfect cubes. We will also account for numbers that are both perfect squares and perfect cubes (i.e., perfect sixth powers).\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'perfect square': A number that can be expressed as the product of an integer with itself.\n    'perfect cube': A number that can be expressed as the product of an integer with itself twice.\n    'both': A number that satisfies both conditions of being a perfect square and a perfect cube.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To efficiently count the numbers from 1 to n that are either perfect squares or perfect cubes, or both, we can use the following approach:\n    1. Iterate through possible perfect squares and perfect cubes up to the square root and cube root of n, respectively.\n    2. Use a set to avoid counting duplicates (numbers that are both perfect squares and perfect cubes).\n    3. Return the count of unique numbers that are either perfect squares or perfect cubes.\n\n# [edge case] \n    search(10) = 4\n    Explanation: The numbers 1, 4, 9 are perfect squares and 1, 8 is a perfect cube. The number 1 is counted twice, but since we use a set, it won't affect the count.\n    search(100) = 8\n    Explanation: The numbers 1, 4, 9, 16, 25, 36, 49, 64 are perfect squares and 1, 8, 27, 64 are perfect cubes. The number 64 is counted twice, but since we use a set, it won't affect the count.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is efficient and will work for all test cases within the given constraints.\n", "requirement analysis:\nThe requirement involves counting numbers that are both perfect squares and perfect cubes up to a given number n. This requires a mathematical approach to identify such numbers efficiently. The solution should be able to handle multiple test cases and large values of n, ensuring it is optimized for performance.\nrequirement pool:\n- Implement a function to count numbers that are both perfect squares and perfect cubes up to n.\n- Ensure the function can handle large inputs efficiently.\n- Provide clear and concise output for each test case.\n- Allow for multiple test cases to be run efficiently.\n- Handle edge cases and ensure robustness.\nTo efficiently count numbers that are both perfect squares and perfect cubes up to a given number n, we can leverage the properties of these numbers. A number that is both a perfect square and a perfect cube must be a perfect sixth power. This is because the least common multiple of the exponents for perfect square (2) and perfect cube (3) is 6. Therefore, we need to count the numbers that are perfect sixth powers up to n. This can be done by iterating through possible bases and checking if their sixth power is within the range [1, n].\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'perfect square': a number that can be expressed as the product of an integer with itself.\n    'perfect cube': a number that can be expressed as the product of an integer with itself three times.\n    'perfect sixth power': a number that can be expressed as the product of an integer with itself six times.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To efficiently count numbers that are both perfect squares and perfect cubes up to a given number n, we can leverage the properties of these numbers. A number that is both a perfect square and a perfect cube must be a perfect sixth power. This is because the least common multiple of the exponents for perfect square (2) and perfect cube (3) is 6. Therefore, we need to count the numbers that are perfect sixth powers up to n. This can be done by iterating through possible bases and checking if their sixth power is within the range [1, n].\n\n# [edge case] \n    n = 1\n    expected output: 1\n    Explanation: The number 1 is both a perfect square (1^2) and a perfect cube (1^3), and it is also a perfect sixth power (1^6).\n\n    n = 2\n    expected output: 1\n    Explanation: The number 1 is the only number that is both a perfect square and a perfect cube up to 2, and it is a perfect sixth power.\n\n    n = 10\n    expected output: 2\n    Explanation: The numbers 1 and 64 are both perfect sixth powers up to 10. 64 is 4^3 and 8^2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic for counting perfect sixth powers is straightforward and efficient.\n", "requirement analysis:\nThe requirement is to count the numbers that are both perfect squares and perfect cubes up to a given number n. This involves finding numbers that are of the form k^6 where k is an integer. The challenge is to do this efficiently for large values of n, considering the constraints provided.\nrequirement pool:\n- Implement a function to count numbers that are both perfect squares and perfect cubes up to n.\n- Ensure the function can handle large inputs efficiently.\n- Provide clear and concise output for each test case.\n- Allow for multiple test cases to be run without manual intervention.\n- Ensure the solution is simple and easy to understand.\nTo efficiently count the numbers that are both perfect squares and perfect cubes up to a given number n, we can leverage the mathematical property that a number that is both a perfect square and a perfect cube must be a perfect sixth power. This means we need to count the numbers that are of the form k^6 where k is an integer. We can achieve this by iterating through possible values of k and checking if k^6 is within the range [1, n]. Given the constraints, we will use Python due to its efficient handling of large integers.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'perfect square': a number that can be expressed as the product of an integer with itself.\n    'perfect cube': a number that can be expressed as the product of an integer with itself three times.\n    'perfect sixth power': a number that can be expressed as the product of an integer with itself six times.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To efficiently count the numbers that are both perfect squares and perfect cubes up to a given number n, we can leverage the mathematical property that a number that is both a perfect square and a perfect cube must be a perfect sixth power. This means we need to count the numbers that are of the form k^6 where k is an integer. We can achieve this by iterating through possible values of k and checking if k^6 is within the range [1, n].\n\n# [edge case] \n    n = 1\n    expected output: 1\n    Explanation: The only number that is both a perfect square and a perfect cube (and thus a perfect sixth power) within the range [1, 1] is 1.\n\n    n = 10\n    expected output: 2\n    Explanation: The numbers that are perfect sixth powers within this range are 1 and 64 (since 4^6 = 4096 which is greater than 10).\n\n# [extra code for edge case]\n    No extra code is needed for the edge case since the logic for finding perfect sixth powers is straightforward and does not require additional handling for this specific case.\n", "requirement analysis:\nThe requirement involves counting numbers that are both perfect squares and perfect cubes up to a given number n. This requires a mathematical approach to identify such numbers and then count them efficiently. The solution should be able to handle multiple test cases efficiently, even for large values of n up to 10^9.\nrequirement pool:\n- Implement a function to count numbers that are both perfect squares and perfect cubes efficiently.\n- Develop a program that can handle multiple test cases efficiently.\n- Ensure the solution is accurate and can handle large inputs without crashing.\n- Provide clear and concise output for each test case.\n- Compare and contrast the solution with other similar solutions for similar problems.\nTo efficiently count numbers that are both perfect squares and perfect cubes up to a given number n, we can leverage the properties of these numbers. A number that is both a perfect square and a perfect cube must be a perfect sixth power. Therefore, the task reduces to counting the perfect sixth powers up to n. This can be achieved by iterating through possible bases and checking if their sixth power is within the range [1, n]. The use of mathematical properties allows us to avoid unnecessary computations, making the solution efficient even for large values of n.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'perfect square': a number that can be expressed as the product of an integer with itself.\n    'perfect cube': a number that can be expressed as the product of an integer with itself three times.\n    'perfect sixth power': a number that can be expressed as the product of an integer with itself six times.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To efficiently count numbers that are both perfect squares and perfect cubes up to a given number n, we can leverage the properties of these numbers. A number that is both a perfect square and a perfect cube must be a perfect sixth power. Therefore, the task reduces to counting the perfect sixth powers up to n. This can be achieved by iterating through possible bases and checking if their sixth power is within the range [1, n]. The use of mathematical properties allows us to avoid unnecessary computations, making the solution efficient even for large values of n.\n\n# [edge case] \n    n = 1\n    explanation: The only number that is both a perfect square and a perfect cube (and thus a perfect sixth power) within the range [1, 1] is 1.\n    n = 10\n    explanation: The perfect sixth powers within this range are 1 and 64 (since 64 is the largest number whose sixth power is \u2264 10).\n    n = 1000000000\n    explanation: The largest perfect sixth power within this range is 1953125 (since 1953125^6 \u2248 10^9).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle the smallest possible value of n. For larger values, the logic iterates through possible bases and checks if their sixth power is within the range [1, n], which is efficient for large n.\n", "requirement analysis:\nThe requirement is to count the number of integers from 1 to n that are either perfect squares or perfect cubes, considering the overlap where a number is both. The input consists of multiple test cases, and each case has a large possible value of n up to 10^9. The solution must be efficient to handle such large inputs.\nrequirement pool:\n- Implement a function to count numbers that are perfect squares up to n.\n- Implement a function to count numbers that are perfect cubes up to n.\n- Combine the results from both functions, accounting for overlaps.\n- Ensure the solution is efficient and can handle large inputs efficiently.\n- Provide clear and accurate results for each test case.\nTo efficiently count the number of integers from 1 to n that are either perfect squares or perfect cubes, we will use Python's built-in capabilities and leverage mathematical properties of numbers. The approach involves calculating the square root and cube root of n, and then iterating through possible values to count the numbers that meet the criteria. We will also need to account for numbers that are both perfect squares and perfect cubes (i.e., perfect sixth powers).\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'perfect square': a number that can be expressed as the product of an integer with itself.\n    'perfect cube': a number that can be expressed as the product of an integer with itself twice.\n    'overlapping': numbers that are both perfect squares and perfect cubes (i.e., perfect sixth powers).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To efficiently count the number of integers from 1 to n that are either perfect squares or perfect cubes, we will use Python's built-in capabilities and leverage mathematical properties of numbers. The approach involves calculating the square root and cube root of n, and then iterating through possible values to count the numbers that meet the criteria. We will also need to account for numbers that are both perfect squares and perfect cubes (i.e., perfect sixth powers).\n\n# [edge case] \n    n = 100\n    expected output = 10\n    Explanation: The numbers from 1 to 100 that are perfect squares or perfect cubes are: 1, 4, 8, 9, 16, 25, 27, 36, 49, 64, 81, 100. There are 10 such numbers.\n\n    n = 1000000000\n    expected output = 3203123\n    Explanation: The number of integers from 1 to 1,000,000,000 that are perfect squares or perfect cubes is 3,203,123. This is a large number, and efficient calculation is crucial to handle such large inputs.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic is efficient and can handle large values of n.\n"], "scores": [], "pass_results": [false, false, false, false, false, true, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 367, "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125", "mutate_method": "expand_one2two", "parent_index": 234}
