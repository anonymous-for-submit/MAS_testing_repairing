{"name": "1594_B. Special Numbers", "description": "Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]", "tags": ["bitmasks", "math"], "difficulty": 8, "id": 1594, "sample_io": [{"input": "3\n3 4\n2 12\n105 564\n", "output": ["9\n12\n3595374\n"]}], "test_list": [{"input": "3\n3 4\n2 6\n105 564\n", "output": ["9\n6\n3595374\n"]}, {"input": "3\n1 4\n2 6\n105 564\n", "output": ["1\n6\n3595374\n"]}, {"input": "3\n0 4\n2 6\n105 564\n", "output": ["0\n6\n3595374\n"]}, {"input": "3\n0 8\n0 6\n105 564\n", "output": ["0\n0\n3595374\n"]}, {"input": "3\n1 8\n0 6\n105 564\n", "output": ["1\n0\n3595374\n"]}, {"input": "3\n1 7\n0 6\n105 564\n", "output": ["3\n0\n3595374\n"]}, {"input": "3\n1 7\n0 6\n105 984\n", "output": ["3\n0\n713307087\n"]}, {"input": "3\n1 10\n0 6\n105 984\n", "output": ["2\n0\n713307087\n"]}, {"input": "3\n6 4\n2 12\n105 564\n", "output": ["36\n12\n3595374\n"]}, {"input": "3\n3 4\n2 1\n105 564\n", "output": ["9\n1\n3595374\n"]}, {"input": "3\n1 4\n2 6\n105 571\n", "output": ["1\n6\n4742080\n"]}, {"input": "3\n0 4\n2 6\n39 564\n", "output": ["0\n6\n452236824\n"]}, {"input": "3\n0 8\n2 6\n105 713\n", "output": ["0\n6\n257287716\n"]}, {"input": "3\n0 8\n0 6\n105 46\n", "output": ["0\n0\n763984296\n"]}, {"input": "3\n1 8\n0 6\n105 868\n", "output": ["1\n0\n312144741\n"]}, {"input": "3\n1 7\n0 6\n35 564\n", "output": ["3\n0\n692143895\n"]}, {"input": "3\n6 7\n2 12\n105 564\n", "output": ["43\n12\n3595374\n"]}, {"input": "3\n3 4\n2 1\n110 564\n", "output": ["9\n1\n745888270\n"]}, {"input": "3\n1 4\n3 6\n105 571\n", "output": ["1\n12\n4742080\n"]}, {"input": "3\n0 4\n0 6\n39 564\n", "output": ["0\n0\n452236824\n"]}, {"input": "3\n0 8\n2 12\n105 713\n", "output": ["0\n12\n257287716\n"]}, {"input": "3\n1 8\n1 6\n105 868\n", "output": ["1\n2\n312144741\n"]}, {"input": "3\n1 4\n0 6\n35 564\n", "output": ["1\n0\n692143895\n"]}, {"input": "3\n6 7\n2 12\n105 276\n", "output": ["43\n12\n456030397\n"]}, {"input": "3\n1 4\n2 6\n105 211\n", "output": ["1\n6\n258462631\n"]}, {"input": "3\n0 8\n2 12\n103 713\n", "output": ["0\n12\n134894835\n"]}, {"input": "3\n0 12\n0 6\n105 28\n", "output": ["0\n0\n122719275\n"]}, {"input": "3\n1 8\n1 6\n105 238\n", "output": ["1\n2\n900896196\n"]}, {"input": "3\n2 18\n0 2\n105 984\n", "output": ["18\n0\n713307087\n"]}, {"input": "3\n2 26\n0 10\n105 984\n", "output": ["26\n0\n713307087\n"]}, {"input": "3\n6 7\n2 20\n105 276\n", "output": ["43\n20\n456030397\n"]}, {"input": "3\n1 6\n2 6\n105 211\n", "output": ["2\n6\n258462631\n"]}, {"input": "3\n1 8\n2 12\n103 713\n", "output": ["1\n12\n134894835\n"]}, {"input": "3\n1 8\n2 6\n105 238\n", "output": ["1\n6\n900896196\n"]}, {"input": "3\n2 18\n0 2\n105 735\n", "output": ["18\n0\n378849471\n"]}, {"input": "3\n6 7\n2 6\n105 276\n", "output": ["43\n6\n456030397\n"]}, {"input": "3\n1 6\n2 6\n105 274\n", "output": ["2\n6\n456019477\n"]}, {"input": "3\n1 10\n2 12\n103 713\n", "output": ["2\n12\n134894835\n"]}, {"input": "3\n6 7\n2 6\n105 255\n", "output": ["43\n6\n22446815\n"]}, {"input": "3\n1 7\n2 6\n105 274\n", "output": ["3\n6\n456019477\n"]}, {"input": "3\n1 4\n3 6\n105 238\n", "output": ["1\n12\n900896196\n"]}, {"input": "3\n6 7\n2 1\n105 255\n", "output": ["43\n1\n22446815\n"]}, {"input": "3\n1 20\n2 4\n103 713\n", "output": ["2\n4\n134894835\n"]}, {"input": "3\n1 4\n4 6\n105 238\n", "output": ["1\n20\n900896196\n"]}, {"input": "3\n1 4\n5 6\n105 238\n", "output": ["1\n30\n900896196\n"]}, {"input": "3\n1 3\n2 4\n165 713\n", "output": ["2\n4\n58081920\n"]}, {"input": "3\n1 3\n2 7\n165 713\n", "output": ["2\n7\n58081920\n"]}, {"input": "3\n1 2\n2 6\n105 433\n", "output": ["1\n6\n260115562\n"]}, {"input": "3\n0 2\n2 6\n105 433\n", "output": ["0\n6\n260115562\n"]}, {"input": "3\n0 2\n2 6\n105 443\n", "output": ["0\n6\n261273292\n"]}, {"input": "3\n0 2\n2 6\n105 583\n", "output": ["0\n6\n214860566\n"]}, {"input": "3\n0 2\n2 7\n105 583\n", "output": ["0\n7\n214860566\n"]}, {"input": "3\n0 2\n2 12\n105 583\n", "output": ["0\n12\n214860566\n"]}, {"input": "3\n0 2\n2 12\n23 583\n", "output": ["0\n12\n300685298\n"]}, {"input": "3\n1 2\n2 12\n23 583\n", "output": ["1\n12\n300685298\n"]}, {"input": "3\n1 2\n2 12\n23 476\n", "output": ["1\n12\n864138587\n"]}, {"input": "3\n1 2\n3 12\n23 476\n", "output": ["1\n36\n864138587\n"]}, {"input": "3\n1 2\n3 12\n15 476\n", "output": ["1\n36\n745194836\n"]}, {"input": "3\n1 2\n3 12\n15 714\n", "output": ["1\n36\n625612499\n"]}, {"input": "3\n1 2\n3 12\n15 657\n", "output": ["1\n36\n614269110\n"]}, {"input": "3\n1 2\n3 8\n15 657\n", "output": ["1\n27\n614269110\n"]}, {"input": "3\n1 2\n3 8\n15 224\n", "output": ["1\n27\n183009375\n"]}, {"input": "3\n1 3\n3 8\n15 224\n", "output": ["2\n27\n183009375\n"]}, {"input": "3\n1 3\n1 8\n15 224\n", "output": ["2\n1\n183009375\n"]}, {"input": "3\n1 3\n1 8\n15 250\n", "output": ["2\n1\n183063390\n"]}, {"input": "3\n3 4\n2 17\n105 564\n", "output": ["9\n17\n3595374\n"]}, {"input": "3\n3 4\n2 6\n88 564\n", "output": ["9\n6\n950813808\n"]}, {"input": "3\n1 4\n3 6\n105 564\n", "output": ["1\n12\n3595374\n"]}, {"input": "3\n0 4\n2 6\n105 549\n", "output": ["0\n6\n882044757\n"]}, {"input": "3\n0 8\n1 6\n105 564\n", "output": ["0\n2\n3595374\n"]}, {"input": "3\n1 5\n0 6\n105 564\n", "output": ["2\n0\n3595374\n"]}, {"input": "3\n1 7\n0 6\n16 564\n", "output": ["3\n0\n720590628\n"]}, {"input": "3\n1 7\n0 6\n109 984\n", "output": ["3\n0\n669833413\n"]}, {"input": "3\n1 10\n0 10\n137 984\n", "output": ["2\n0\n172328490\n"]}, {"input": "3\n6 4\n2 12\n151 564\n", "output": ["36\n12\n532389654\n"]}, {"input": "3\n3 4\n2 1\n89 564\n", "output": ["9\n1\n901799978\n"]}, {"input": "3\n1 4\n2 6\n105 290\n", "output": ["1\n6\n97284386\n"]}, {"input": "3\n0 4\n2 6\n39 1030\n", "output": ["0\n6\n28210319\n"]}, {"input": "3\n0 8\n0 6\n105 75\n", "output": ["0\n0\n96788976\n"]}, {"input": "3\n0 10\n0 2\n105 984\n", "output": ["0\n0\n713307087\n"]}, {"input": "3\n6 7\n2 22\n105 564\n", "output": ["43\n22\n3595374\n"]}, {"input": "3\n1 8\n2 12\n105 713\n", "output": ["1\n12\n257287716\n"]}, {"input": "3\n0 12\n0 6\n209 46\n", "output": ["0\n0\n787390482\n"]}, {"input": "3\n1 8\n1 6\n80 868\n", "output": ["1\n2\n69536402\n"]}, {"input": "3\n1 6\n0 6\n35 564\n", "output": ["2\n0\n692143895\n"]}, {"input": "3\n1 26\n0 10\n105 1003\n", "output": ["3\n0\n354572102\n"]}, {"input": "3\n6 7\n2 17\n105 276\n", "output": ["43\n17\n456030397\n"]}, {"input": "3\n3 3\n4 1\n110 564\n", "output": ["4\n1\n745888270\n"]}, {"input": "3\n0 8\n2 16\n103 713\n", "output": ["0\n16\n134894835\n"]}, {"input": "3\n1 8\n1 6\n201 238\n", "output": ["1\n2\n436757470\n"]}, {"input": "3\n2 18\n1 2\n105 984\n", "output": ["18\n1\n713307087\n"]}, {"input": "3\n2 26\n1 10\n105 984\n", "output": ["26\n2\n713307087\n"]}, {"input": "3\n6 7\n4 20\n105 276\n", "output": ["43\n272\n456030397\n"]}, {"input": "3\n1 15\n2 12\n103 713\n", "output": ["4\n12\n134894835\n"]}, {"input": "3\n1 8\n2 4\n105 238\n", "output": ["1\n4\n900896196\n"]}, {"input": "3\n6 7\n0 6\n105 276\n", "output": ["43\n0\n456030397\n"]}, {"input": "3\n1 6\n2 6\n105 176\n", "output": ["2\n6\n925646821\n"]}, {"input": "3\n1 10\n2 12\n50 713\n", "output": ["2\n12\n861447554\n"]}, {"input": "3\n1 4\n2 6\n60 238\n", "output": ["1\n6\n793799738\n"]}, {"input": "3\n6 7\n2 6\n9 255\n", "output": ["43\n6\n5380840\n"]}, {"input": "3\n1 7\n2 6\n93 274\n", "output": ["3\n6\n132284969\n"]}, {"input": "3\n1 20\n2 12\n132 713\n", "output": ["2\n12\n320033969\n"]}, {"input": "3\n2 4\n3 6\n105 238\n", "output": ["4\n12\n900896196\n"]}, {"input": "3\n1 20\n2 1\n103 713\n", "output": ["2\n1\n134894835\n"]}, {"input": "3\n1 7\n4 6\n105 238\n", "output": ["3\n20\n900896196\n"]}, {"input": "3\n6 7\n3 1\n105 389\n", "output": ["43\n1\n375760428\n"]}, {"input": "3\n1 3\n2 4\n103 863\n", "output": ["2\n4\n586977111\n"]}, {"input": "3\n1 3\n2 4\n165 330\n", "output": ["2\n4\n846108753\n"]}, {"input": "3\n2 3\n2 7\n165 713\n", "output": ["3\n7\n58081920\n"]}, {"input": "3\n1 2\n2 6\n192 238\n", "output": ["1\n6\n77020973\n"]}, {"input": "3\n1 2\n2 6\n7 433\n", "output": ["1\n6\n6607553\n"]}, {"input": "3\n0 2\n2 6\n134 433\n", "output": ["0\n6\n333298828\n"]}, {"input": "3\n1 2\n2 6\n105 583\n", "output": ["1\n6\n214860566\n"]}, {"input": "3\n1 2\n2 7\n105 583\n", "output": ["1\n7\n214860566\n"]}, {"input": "3\n0 2\n2 12\n105 433\n", "output": ["0\n12\n260115562\n"]}, {"input": "3\n1 2\n2 12\n39 583\n", "output": ["1\n12\n878442964\n"]}, {"input": "3\n1 2\n4 12\n23 476\n", "output": ["1\n80\n864138587\n"]}, {"input": "3\n2 2\n3 12\n23 476\n", "output": ["2\n36\n864138587\n"]}, {"input": "3\n1 2\n4 12\n15 476\n", "output": ["1\n80\n745194836\n"]}, {"input": "3\n1 2\n3 12\n15 156\n", "output": ["1\n36\n170913600\n"]}, {"input": "3\n1 2\n3 16\n15 657\n", "output": ["1\n81\n614269110\n"]}, {"input": "3\n1 2\n5 8\n15 657\n", "output": ["1\n125\n614269110\n"]}, {"input": "3\n1 3\n3 8\n15 216\n", "output": ["2\n27\n182304000\n"]}, {"input": "3\n1 3\n2 8\n15 224\n", "output": ["2\n8\n183009375\n"]}, {"input": "3\n1 1\n1 8\n15 250\n", "output": ["1\n1\n183063390\n"]}, {"input": "3\n3 4\n2 17\n105 515\n", "output": ["9\n17\n119218296\n"]}, {"input": "3\n3 2\n2 6\n88 564\n", "output": ["3\n6\n950813808\n"]}, {"input": "3\n1 4\n3 6\n27 564\n", "output": ["1\n12\n612312689\n"]}, {"input": "3\n0 4\n3 6\n105 549\n", "output": ["0\n12\n882044757\n"]}, {"input": "3\n0 8\n1 6\n110 564\n", "output": ["0\n2\n745888270\n"]}, {"input": "3\n0 2\n0 6\n105 68\n", "output": ["0\n0\n95642270\n"]}, {"input": "3\n1 5\n0 6\n105 1004\n", "output": ["2\n0\n354583021\n"]}, {"input": "3\n1 7\n0 6\n21 564\n", "output": ["3\n0\n284320046\n"]}, {"input": "3\n1 10\n0 8\n105 1410\n", "output": ["2\n0\n893659373\n"]}, {"input": "3\n6 4\n2 12\n244 564\n", "output": ["36\n12\n472775977\n"]}, {"input": "3\n3 2\n2 1\n89 564\n", "output": ["3\n1\n901799978\n"]}, {"input": "3\n1 4\n2 6\n105 385\n", "output": ["1\n6\n375749403\n"]}, {"input": "3\n0 8\n3 8\n105 713\n", "output": ["0\n27\n257287716\n"]}, {"input": "3\n0 18\n1 10\n105 984\n", "output": ["0\n2\n713307087\n"]}, {"input": "3\n6 4\n2 22\n105 564\n", "output": ["36\n22\n3595374\n"]}, {"input": "3\n3 4\n3 1\n110 923\n", "output": ["9\n1\n300692073\n"]}, {"input": "3\n1 2\n6 6\n105 571\n", "output": ["1\n42\n4742080\n"]}, {"input": "3\n1 8\n2 15\n105 713\n", "output": ["1\n15\n257287716\n"]}, {"input": "3\n1 8\n1 6\n80 798\n", "output": ["1\n2\n690210344\n"]}, {"input": "3\n0 18\n0 2\n136 984\n", "output": ["0\n0\n313996483\n"]}, {"input": "3\n1 26\n1 10\n105 1003\n", "output": ["3\n2\n354572102\n"]}, {"input": "3\n6 7\n2 17\n105 194\n", "output": ["43\n17\n136912005\n"]}, {"input": "3\n1 1\n2 6\n105 81\n", "output": ["1\n6\n217181871\n"]}, {"input": "3\n0 8\n2 16\n103 658\n", "output": ["0\n16\n194064920\n"]}, {"input": "3\n1 8\n1 6\n201 445\n", "output": ["1\n2\n708509974\n"]}, {"input": "3\n2 18\n1 3\n105 984\n", "output": ["18\n2\n713307087\n"]}, {"input": "3\n6 10\n4 20\n105 276\n", "output": ["222\n272\n456030397\n"]}, {"input": "3\n1 9\n2 6\n74 211\n", "output": ["2\n6\n516663646\n"]}, {"input": "3\n1 19\n2 12\n103 713\n", "output": ["3\n12\n134894835\n"]}, {"input": "3\n1 8\n4 4\n105 238\n", "output": ["1\n16\n900896196\n"]}, {"input": "3\n9 7\n0 6\n105 276\n", "output": ["91\n0\n456030397\n"]}, {"input": "3\n1 6\n2 2\n105 176\n", "output": ["2\n2\n925646821\n"]}, {"input": "3\n1 10\n0 12\n50 713\n", "output": ["2\n0\n861447554\n"]}, {"input": "3\n1 4\n2 3\n60 238\n", "output": ["1\n3\n793799738\n"]}, {"input": "3\n6 7\n2 6\n9 205\n", "output": ["43\n6\n5315221\n"]}, {"input": "3\n1 7\n3 6\n93 274\n", "output": ["3\n12\n132284969\n"]}, {"input": "3\n1 20\n2 12\n132 818\n", "output": ["2\n12\n838210136\n"]}, {"input": "3\n4 4\n3 6\n105 238\n", "output": ["16\n12\n900896196\n"]}, {"input": "3\n1 20\n2 1\n103 372\n", "output": ["2\n1\n482792581\n"]}, {"input": "3\n1 7\n4 6\n105 182\n", "output": ["3\n20\n925657951\n"]}, {"input": "3\n1 3\n2 2\n165 330\n", "output": ["2\n2\n846108753\n"]}, {"input": "3\n1 1\n5 6\n198 238\n", "output": ["1\n30\n423451933\n"]}, {"input": "3\n2 3\n3 7\n165 713\n", "output": ["3\n13\n58081920\n"]}, {"input": "3\n1 2\n1 6\n192 238\n", "output": ["1\n2\n77020973\n"]}, {"input": "3\n1 2\n2 6\n7 749\n", "output": ["1\n6\n41311999\n"]}, {"input": "3\n0 2\n2 6\n268 433\n", "output": ["0\n6\n974641\n"]}, {"input": "3\n1 2\n2 6\n192 583\n", "output": ["1\n6\n590294341\n"]}, {"input": "3\n1 2\n2 7\n114 583\n", "output": ["1\n7\n365619380\n"]}, {"input": "3\n1 2\n1 12\n39 583\n", "output": ["1\n2\n878442964\n"]}, {"input": "3\n2 2\n3 4\n23 476\n", "output": ["2\n9\n864138587\n"]}, {"input": "3\n1 2\n4 12\n16 476\n", "output": ["1\n80\n580249828\n"]}, {"input": "3\n1 2\n2 12\n15 156\n", "output": ["1\n12\n170913600\n"]}, {"input": "3\n1 2\n3 16\n6 657\n", "output": ["1\n81\n10358929\n"]}, {"input": "3\n1 2\n5 11\n15 657\n", "output": ["1\n131\n614269110\n"]}, {"input": "3\n0 4\n3 8\n15 224\n", "output": ["0\n27\n183009375\n"]}, {"input": "3\n1 3\n6 8\n15 216\n", "output": ["2\n216\n182304000\n"]}, {"input": "3\n1 3\n2 8\n15 378\n", "output": ["2\n8\n575094626\n"]}, {"input": "3\n3 7\n2 17\n105 515\n", "output": ["13\n17\n119218296\n"]}, {"input": "3\n3 2\n2 6\n88 962\n", "output": ["3\n6\n799832816\n"]}, {"input": "3\n1 4\n3 6\n27 107\n", "output": ["1\n12\n401789107\n"]}, {"input": "3\n0 4\n4 6\n105 549\n", "output": ["0\n20\n882044757\n"]}, {"input": "3\n1 2\n0 6\n105 68\n", "output": ["1\n0\n95642270\n"]}, {"input": "3\n2 5\n0 6\n105 1004\n", "output": ["5\n0\n354583021\n"]}, {"input": "3\n4 4\n2 12\n244 564\n", "output": ["16\n12\n472775977\n"]}, {"input": "3\n1 4\n2 4\n105 385\n", "output": ["1\n4\n375749403\n"]}, {"input": "3\n0 2\n0 6\n39 1030\n", "output": ["0\n0\n28210319\n"]}, {"input": "3\n0 8\n3 8\n105 437\n", "output": ["0\n27\n260126587\n"]}, {"input": "3\n1 4\n0 2\n105 984\n", "output": ["1\n0\n713307087\n"]}, {"input": "3\n6 4\n0 22\n105 564\n", "output": ["36\n0\n3595374\n"]}, {"input": "3\n3 4\n3 1\n110 1290\n", "output": ["9\n1\n331570536\n"]}, {"input": "3\n1 2\n10 6\n105 571\n", "output": ["1\n110\n4742080\n"]}, {"input": "3\n1 14\n2 15\n105 713\n", "output": ["3\n15\n257287716\n"]}, {"input": "3\n1 26\n1 10\n129 1003\n", "output": ["3\n2\n286863200\n"]}, {"input": "3\n6 11\n2 17\n105 194\n", "output": ["223\n17\n136912005\n"]}, {"input": "3\n1 1\n0 6\n105 81\n", "output": ["1\n0\n217181871\n"]}], "task_id": "codecontest/52", "prompt": "Theofanis is fond of sequences that consist of positive integers. This fondness led his instructor (Yeltsa Kcir) to present him with a challenge involving a sequence made up of only unique numbers.\n\nLet's define a positive number as special if it can be expressed as a sum of distinct non-negative powers of n. For example, for n = 4 number 17 is special. It can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to assist him in finding the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]", "repair_prompt": ["Theofanis is fond of sequences that consist of positive integers. This fondness led his instructor (Yeltsa Kcir) to present him with a challenge involving a sequence made up of only unique numbers.\n\nLet's define a positive number as special if it can be expressed as a sum of distinct non-negative powers of n. For example, for n = 4 number 17 is special. It can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to assist him in finding the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]\nWrite a main() function and use input() function to read input from stdin", " Theofanis enjoys sequences that are composed of positive integers. His instructor, Yeltsa Kcir, has given him a challenge involving a sequence made up of unique numbers.\n\nA positive number is considered special if it can be represented as the sum of distinct non-negative powers of n. For instance, for n = 4, the number 17 is special because it can be written as 4^0 + 4^2 = 1 + 16 = 17. Conversely, 9 is not special because it cannot be expressed in this manner.\n\nTheofanis needs your help to\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]\nWrite a main() function and use input() function to read input from stdin", " Theofanis' instructor, Yeltsa Kcir, presented him with a challenge involving a sequence made up of only unique numbers. Let's define a positive number as special if it can be expressed as a sum of distinct non-negative powers of n. For example, for n = 4, number 17 is special, but 9 is not. Theofanis asks you to assist him in finding the k-th special number if they are sorted in increasing order, and since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\n\nimport sys\n\nMOD = 10**9 + 7\n\ndef find_kth_special_number(n: int, k: int) -> int:\n    \"\"\"\n    Finds the k-th special number in increasing order modulo 10^9+7.\n    \n    Args:\n        n (int): The base number.\n        k (int): The position of the special number in the sequence.\n        \n    Returns:\n        int: The k-th special number modulo 10^9+7.\n    \"\"\"\n    result = 0\n    power = 1\n    while k > 0:\n        if k % 2 == 1:\n            result += power\n            result %= MOD\n        power *= n\n        power %= MOD\n        k //= 2\n    return result\n\n# Read input and process each test case\ninput_lines = sys.stdin.readlines()\nt = int(input_lines[0].strip())\nline_index = 1\nfor _ in range(t):\n    n, k = map(int, input_lines[line_index].strip().split())\n    line_index += 1\n    result = find_kth_special_number(n, k)\n    print(result)\n", "from typing import List\n## main.py\n\nimport sys\n\nMOD = 10**9 + 7\n\ndef find_kth_special_number(n: int, k: int) -> int:\n    if n == 2:\n        return -1\n    \n    def is_special(num, n):\n        power_set = set()\n        while num > 0:\n            if num % n == 1:\n                if num // n in power_set:\n                    return False\n                power_set.add(num // n)\n                num //= n\n            else:\n                return False\n        return True\n    \n    count = 0\n    num = 0\n    while count < k:\n        num += 1\n        if is_special(num, n):\n            count += 1\n    \n    return num % MOD\n\n# Interface\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n, k = map(int, sys.stdin.readline().split())\n    result = find_kth_special_number(n, k)\n    print(result)\n", "from typing import List\nMOD = 10**9 + 7\n\ndef find_kth_special_number(n: int, k: int) -> int:\n    result = 0\n    power = 1\n    while k > 0:\n        if k % 2 == 1:\n            result = (result + power) % MOD\n        power = (power * n) % MOD\n        k //= 2\n    return result\n\ndef main():\n    t = int(input().strip())\n    for _ in range(t):\n        n, k = map(int, input().strip().split())\n        print(find_kth_special_number(n, k))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef find_kth_special_number(n: int, k: int) -> int:\n    \"\"\"\n    This function calculates the k-th special number for a given n.\n    \n    A special number is defined as a number that can be represented as the sum of distinct non-negative powers of n.\n    \n    Args:\n        n (int): The base number.\n        k (int): The position in the sequence.\n        \n    Returns:\n        int: The k-th special number.\n    \"\"\"\n    # Initialize the sequence list\n    sequence = []\n    \n    # Generate the sequence of special numbers\n    i = 0\n    while len(sequence) < k:\n        power = n ** i\n        if power not in sequence:\n            sequence.append(power)\n        i += 1\n    \n    # Return the k-th special number\n    return sequence[k - 1]\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    n, k = map(int, input().split())\n    result = find_kth_special_number(n, k)\n    print(result)\n", "from typing import List\n## main.py\nimport sys\n\ndef find_kth_special_number(n: int, k: int) -> int:\n    # Use a mathematical approach to find the k-th special number\n    result = 0\n    while k > 0:\n        result = result * n + 1\n        k -= 1\n    return result\n\ndef main():\n    t = int(input().strip())\n    for _ in range(t):\n        n, k = map(int, input().strip().split())\n        result = find_kth_special_number(n, k)\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\nMOD = 10**9 + 7\n\ndef calculate_special_number(n: int, k: int) -> int:\n    \"\"\"\n    Calculate the k-th special number in a sequence based on the sum of distinct non-negative powers of n.\n    \n    Args:\n        n (int): The base number.\n        k (int): The position in the sequence.\n        \n    Returns:\n        int: The k-th special number modulo 10^9+7.\n    \"\"\"\n    powers = []\n    power = 1\n    while power <= k:\n        powers.append(power)\n        power *= n\n    \n    result = 0\n    for i in range(len(powers) - 1, -1, -1):\n        if k >= powers[i]:\n            k -= powers[i]\n            result = (result + powers[i]) % MOD\n    \n    return result\n\n# Read the number of test cases\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    result = calculate_special_number(n, k)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_kth_special_number(n: int, k: int) -> int:\n    \"\"\"\n    Finds the k-th special number based on the given base number n.\n    \n    A special number is defined as a number that can be expressed as a sum of distinct non-negative powers of n.\n    \n    Args:\n        n (int): The base number.\n        k (int): The position of the special number in the sequence.\n        \n    Returns:\n        int: The k-th special number. If k is greater than the number of special numbers, returns -1.\n    \"\"\"\n    # Initialize a list to store special numbers\n    special_numbers = []\n    \n    # Generate powers of n and their sums\n    power = 0\n    while True:\n        current_power = n ** power\n        if current_power > k:\n            break\n        temp_sum = 0\n        for i in range(power, -1, -1):\n            temp_sum += n ** i\n            if temp_sum > k:\n                break\n            if temp_sum not in special_numbers:\n                special_numbers.append(temp_sum)\n        power += 1\n    \n    # Sort the list of special numbers\n    special_numbers.sort()\n    \n    # Return the k-th special number if it exists, otherwise return -1\n    return special_numbers[k - 1] if k <= len(special_numbers) else -1\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    n, k = map(int, input().split())\n    result = find_kth_special_number(n, k)\n    print(result)\n", "from typing import List\n## main.py\n\nimport sys\n\nMOD = 10**9 + 7\n\ndef find_kth_special_number(n: int, k: int) -> int:\n    powers = []\n    i = 0\n    while n**i <= k:\n        powers.append(n**i)\n        i += 1\n    \n    result = 0\n    for power in reversed(powers):\n        if k >= power:\n            result = (result + k // power) % MOD\n            k %= power\n    \n    return result if k == 0 else -1\n\n# Provide the Interface\ninput = sys.stdin.read\ndata = input().split()\nt = int(data[0])\nindex = 1\n\nfor _ in range(t):\n    n = int(data[index])\n    k = int(data[index + 1])\n    index += 2\n    result = find_kth_special_number(n, k)\n    print(result)\n", "from typing import List\n## main.py\n\nMOD = 10**9 + 7\n\ndef find_kth_special_number(n: int, k: int) -> int:\n    result = 0\n    power = 1\n    \n    while k > 0:\n        if k % 2 == 1:\n            result = (result + power) % MOD\n        power = (power * n) % MOD\n        k //= 2\n    \n    return result\n\n# Read input\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    result = find_kth_special_number(n, k)\n    print(result)\n", "from typing import List\n## main.py\n\nMOD = 10**9 + 7\n\ndef find_kth_special_number(n: int, k: int) -> int:\n    \"\"\"\n    Finds the k-th special number for a given base n, considering the constraints of large inputs and the need for modulo arithmetic.\n    \n    Args:\n        n (int): The base number.\n        k (int): The position of the special number in the sequence.\n        \n    Returns:\n        int: The k-th special number modulo 10^9+7.\n    \"\"\"\n    if k == 1:\n        return 1  # The first special number is always 1 for any base\n    \n    powers = []\n    power = 1\n    while power <= k:\n        powers.append(power)\n        power *= n\n    \n    result = 0\n    for i in range(len(powers) - 1, -1, -1):\n        if k >= powers[i]:\n            k -= powers[i]\n            result = (result + powers[i]) % MOD\n    \n    return result if k == 0 else -1\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    n, k = map(int, input().split())\n    result = find_kth_special_number(n, k)\n    print(result)\n"], "plans": ["requirement analysis:\nThe requirements involve creating a program that can determine the k-th special number based on a given base n, where a special number is defined as a sum of distinct non-negative powers of n. The program should be able to handle multiple test cases efficiently and output the result modulo 10^9+7 to avoid large number computations. The user will input the base and the position in the sequence to find the special number.\nrequirement pool:\n- Implement a function to calculate the k-th special number based on the given base n.\n- Handle multiple test cases efficiently.\n- Output the result modulo 10^9+7 to avoid large number computations.\n- Ensure the application is user-friendly and can handle large inputs.\n- Provide accurate results for each test case.\nTo solve this problem, we will use a mathematical approach to determine the k-th special number based on the given base n. The special numbers are sums of distinct non-negative powers of n, and we need to find the k-th such number. Given the constraints of large inputs, we will compute the result modulo 10^9+7 to avoid overflow and ensure efficiency.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'special number': a number that can be expressed as a sum of distinct non-negative powers of a base n.\n    Explanation: In the context of this problem, a special number is derived from summing up different powers of a base number n. For example, for n = 4, the number 17 is special because it can be written as 4^0 + 4^2 = 1 + 16 = 17.\n\n# [phrase showing quantity relationship]\n    'more than': means that we need to find numbers greater than zero.\n    Explanation: In the requirement, we are dealing with positive integers, so we need to ensure that the numbers we consider are greater than zero.\n\n# [degree adverb] \n    'largest': means that we need the biggest number that meets the condition.\n    Explanation: In the requirement, we need to find the largest special number, which is the special number that appears last in the sequence when sorted in increasing order.\n\n# [code logic]\n    To find the k-th special number, we need to generate numbers that are sums of distinct non-negative powers of n. We will use a mathematical approach to generate these numbers and then find the k-th one. Given the constraints, we will compute the result modulo 10^9+7.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the list contains numbers that appear more than or equal to their value. The largest number that meets this condition is 3, as it appears three times, which is equal to its value.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to find the largest number that appears at least as many times as itself.\n\n# [core concept]\n    'sum of distinct non-negative powers': means that we are adding different powers of a base number n without repetition.\n    Explanation: This concept is crucial for understanding how special numbers are formed. For example, for n = 4, the special number 17 is formed by using the powers 4^0 and 4^2, which are distinct and non-negative.\n\n# [phrase showing quantity relationship]\n    'more than': means that we need to find numbers greater than zero.\n    Explanation: In the requirement, we are dealing with positive integers, so we need to ensure that the numbers we consider are greater than zero.\n\n# [degree adverb] \n    'largest': means that we need the biggest number that meets the condition.\n    Explanation: In the requirement, we need to find the largest special number, which is the special number that appears last in the sequence when sorted in increasing order.\n\n# [code logic]\n    To find the k-th special number, we need to generate numbers that are sums of distinct non-negative powers of n. We will use a mathematical approach to generate these numbers and then find the k-th one. Given the constraints, we will compute the result modulo 10^9+7.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the list contains numbers that appear more than or equal to their value. The largest number that meets this condition is 3, as it appears three times, which is equal to its value.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to find the largest number that appears at least as many times as itself.\n", "requirement analysis:\nThe requirements involve understanding the concept of special numbers that can be expressed as sums of distinct non-negative powers of a given base. The challenge is to efficiently find the k-th special number in increasing order and output it modulo 10^9+7. This requires a balance between computational efficiency and accuracy in handling large inputs and outputs.\nrequirement pool:\n- Implement a function to calculate special numbers based on given base and position.\n- Ensure the function can handle up to 10^4 test cases efficiently.\n- Implement modular arithmetic to handle large numbers and ensure results are output modulo 10^9+7.\n- Design an intuitive user interface for input and output.\n- Optimize the algorithm to ensure it can handle the upper limits of the input constraints.\nTo solve the problem of finding the k-th special number based on a given base and position, we will use a mathematical approach to determine if a number is special and then iterate through numbers to find the k-th one. Given the constraints of handling large inputs and outputs, we will use modular arithmetic to ensure results are output modulo 10^9+7. The implementation will be efficient and will handle up to 10^4 test cases.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'special number': a number that can be expressed as a sum of distinct non-negative powers of a base n.\n    Explanation: In this context, a special number is derived from the sum of powers of a base n, where each power is used only once. This concept involves understanding the mathematical properties of numbers and their representations.\n\n# [phrase showing quantity relationship]\n    'more than': indicates that we need to find numbers greater than zero.\n    Explanation: This phrase is used to specify that we are looking for positive integers that meet the criteria of being special.\n\n# [degree adverb] \n    'largest': indicates that we need to find the biggest special number.\n    Explanation: This phrase suggests that we should find the special number with the highest value that fits the criteria.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the solution, we need to:\n    1. Iterate through numbers starting from 1 and check if they are special.\n    2. Keep track of the count of special numbers found.\n    3. Stop when we reach the k-th special number.\n    4. Use modular arithmetic to ensure the result is within the specified range.\n\n# [edge case] \n    search([1]) = 1\n    Explanation: The smallest special number is 1, which is a special number because it can be expressed as 4^0.\n    search([2]) = -1\n    Explanation: Since the base is 2, there are no powers of 2 that can sum up to a number greater than 1, so there are no special numbers in this case.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the base is 2, as there are no special numbers in such cases.\n        if n == 2:\n            return -1\n        (other code)\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the base is 2, as there are no special numbers in such cases.\n        if n == 2:\n            return -1\n        (other code)\n", "requirement analysis:\nThe primary requirement is to find the k-th special number in a sequence defined by the sum of distinct non-negative powers of n. The output should be modulo 10^9+7 to handle large numbers. The application should be efficient and capable of handling multiple test cases efficiently.\nrequirement pool:\n- Implement a function to calculate special numbers\n- Ensure the function can handle large inputs\n- Implement modulo operation to handle large numbers\n- Create a user-friendly interface for input and output\n- Optimize the algorithm for performance\nTo solve the problem of finding the k-th special number in a sequence defined by the sum of distinct non-negative powers of n, we will use a mathematical approach to generate the sequence efficiently. We will leverage the properties of powers of n to generate the sequence without explicitly storing all numbers, which is crucial for handling large inputs. The sequence generation will be done modulo 10^9+7 to ensure the numbers remain within the required range. The function will be designed to handle multiple test cases efficiently, making it suitable for large inputs as specified in the problem.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'positive integers': all numbers in the sequence are positive\n    'distinct non-negative powers of n': each number in the sequence can be represented as a sum of unique powers of n\n    'modulo 10^9+7': all calculations should be done modulo 10^9+7 to prevent integer overflow and to meet the output requirements\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To generate the k-th special number in the sequence of distinct non-negative powers of n, we can use a mathematical approach:\n    1. Initialize a variable to store the current sum of powers.\n    2. Use a loop to generate the sequence of special numbers until the k-th number is reached.\n    3. In each iteration, add the next power of n to the current sum.\n    4. Check if the current sum is a new special number (i.e., not already in the sequence).\n    5. Continue until k special numbers are found.\n    6. Return the k-th special number modulo 10^9+7.\n\n# [edge case] \n    For n = 2 and k = 5:\n    expected output = 16\n    Explanation: The sequence starts with [1, 2, 4, 8, 16, ...]. The 5th special number is 16.\n\n# [extra code for edge case]\n    We do not need extra code to handle this edge case as the mathematical approach inherently handles the generation of the sequence efficiently.\n\n# [code logic]\n    Here's a Python function to generate the k-th special number:\n\n    ```python\n    MOD = 10**9 + 7\n\n    def find_kth_special_number(n, k):\n        result = 0\n        power = 1\n        while k > 0:\n            if k % 2 == 1:\n                result = (result + power) % MOD\n            power = (power * n) % MOD\n            k //= 2\n        return result\n\n    def main():\n        t = int(input())\n        for _ in range(t):\n            n, k = map(int, input().split())\n            print(find_kth_special_number(n, k))\n\n    if __name__ == \"__main__\":\n        main()\n    ```\n\n    This function reads the number of test cases and for each test case, it reads n and k, then prints the k-th special number modulo 10^9+7.\n", "requirement analysis:\nThe requirements involve creating a program that can determine the k-th special number in a sequence defined by the sum of distinct non-negative powers of n. The program should be able to handle multiple test cases efficiently. The input includes the number of test cases, followed by pairs of n and k values. The output should be the k-th special number for each test case, modulo 10^9+7.\nrequirement pool:\n- Implement a function to calculate special numbers based on given n and k.\n- Ensure the program can handle multiple test cases efficiently.\n- Implement the modulo operation to handle large numbers.\n- Test the program with various inputs to ensure accuracy and efficiency.\n- Design a user-friendly interface for input and output.\nTo solve this problem, we will use Python due to its efficiency and ease of handling large numbers. The approach involves creating a function that calculates the k-th special number for a given n, considering the constraints and requirements provided. We will use a mathematical approach to determine if a number is special and generate the sequence up to the required k-th number. The results will be printed in a user-friendly manner.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'positive integers': means all numbers in the sequence are greater than 0.\n    'distinct non-negative powers of n': means each number in the sequence can be represented as a sum of unique powers of n, where n is a positive integer.\n\n# [phrase showing quantity relationship]\n    'more than': means the sequence should only include numbers greater than a certain value.\n    'at least as many times': means the frequency of a number in the sequence should be at least as much as its value.\n\n# [degree adverb] \n    'largest': means the sequence should include the largest possible number that meets the criteria.\n    'greatest': means the sequence should include the greatest number of occurrences of a number.\n\n# [code logic]\n    provide detailed logic to implement the code\n\n# [edge case] \n    n = 2, k = 5 = 16\n    explanation: The sequence for n=2 includes numbers like 1, 2, 4, 8, 16, etc. The 5th number in this sequence is 16.\n    n = 3, k = 4 = 9\n    explanation: The sequence for n=3 includes numbers like 1, 3, 4, 9, etc. The 4th number in this sequence is 9.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The sequence generation logic should naturally handle the case where k is within the valid range for the given n.\n\n# [code logic]\n(check if there are steps should be considered simultaneously)\nTo solve this problem, we need to generate a sequence of numbers that are sums of distinct non-negative powers of n. This can be efficiently done using a mathematical approach rather than brute force, as the number of test cases (t) can be as large as 10^4, and each test case can have n and k values up to 10^9.\n\nHere's a high-level approach to implement the solution:\n\n1. Read the number of test cases (t).\n2. For each test case, read the values of n and k.\n3. Generate the sequence of special numbers for each test case.\n4. Output the k-th special number in increasing order modulo 10^9+7.\n\nThe detailed implementation involves using a loop to iterate through the sequence generation and checking each number to see if it can be represented as a sum of distinct non-negative powers of n. This can be optimized using bit manipulation to check if a number is a sum of distinct powers of n.\n\n# [edge case] \n    n = 2, k = 5 = 16\n    explanation: The sequence for n=2 includes numbers like 1, 2, 4, 8, 16, etc. The 5th number in this sequence is 16.\n    n = 3, k = 4 = 9\n    explanation: The sequence for n=3 includes numbers like 1, 3, 4, 9, etc. The 4th number in this sequence is 9.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The sequence generation logic should naturally handle the case where k is within the valid range for the given n.\n", "requirement analysis:\nThe requirements involve creating a program that can determine the k-th special number in a sequence based on the sum of distinct non-negative powers of a given integer n. The program should be able to handle multiple test cases efficiently. The output should be the k-th special number in increasing order modulo 10^9+7.\nrequirement pool:\n- Implement a function to determine the k-th special number.\n- Ensure the program can handle multiple test cases efficiently.\n- Implement the modulo operation to keep the numbers within the specified range.\n- Optimize the algorithm to handle large inputs within reasonable time limits.\n- Provide a user-friendly interface for easy input and output.\nTo solve this problem, we will use Python due to its simplicity and efficiency. The main challenge is to generate the sequence of special numbers efficiently, especially for large values of n and k. We will use a mathematical approach to generate the sequence and then find the k-th special number. The sequence generation will be optimized to handle large inputs within reasonable time limits.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'positive integers': means that all numbers in the sequence are greater than 0.\n    'distinct non-negative powers of n': means that each number in the sequence can be represented as a sum of unique powers of n, where the exponent is a non-negative integer.\n\n# [phrase showing quantity relationship]\n    'more than': means that we need to find numbers greater than a certain value.\n    'at least as many times': means that a number appears a certain number of times or more in the sequence.\n\n# [degree adverb] \n    'largest': means that we need to find the biggest number that meets the condition.\n\n# [code logic]\n    provide detailed logic to implement the code\n\n# [edge case] \n    n = 2, k = 5 = 16\n    explanation: The sequence for n=2 includes numbers like 1, 2, 4, 8, 16, etc. The 5th number in this sequence is 16.\n    n = 3, k = 4 = 9\n    explanation: The sequence for n=3 includes numbers like 1, 3, 4, 9, etc. The 4th number in this sequence is 9.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The sequence generation logic will naturally handle the case where k is within the bounds of the sequence.\n\n# [code logic]\n    To generate the sequence of special numbers, we can use a mathematical approach:\n    1. Initialize an empty list to store the special numbers.\n    2. Use a loop to iterate through possible powers of n.\n    3. For each power, calculate the corresponding special number and add it to the list.\n    4. Continue this process until the k-th special number is found.\n    5. Return the k-th special number.\n\n    Here's a Python function to generate the sequence:\n\n    ```python\n    def generate_special_numbers(n, k):\n        special_numbers = []\n        i = 0\n        while len(special_numbers) < k:\n            power = n ** i\n            if power not in special_numbers:\n                special_numbers.append(power)\n            i += 1\n        return special_numbers[-1]\n\n    def main():\n        t = int(input())\n        for _ in range(t):\n            n, k = map(int, input().split())\n            print(generate_special_numbers(n, k))\n\n    if __name__ == \"__main__\":\n        main()\n    ```\n\n    This function reads the number of test cases and then for each test case, it reads the values of n and k, and prints the k-th special number in the sequence.\n", "requirement analysis:\nThe requirements involve creating a program that can determine the k-th special number in a sequence based on the sum of distinct non-negative powers of n. The program must handle a large number of test cases efficiently. The output should be accurate and presented clearly. The user interface should be intuitive and user-friendly.\nrequirement pool:\n- The main code should efficiently calculate the k-th special number for each test case.\n- The program should handle large values of n and k within a reasonable time frame.\n- The output should be presented clearly and accurately for each test case.\n- The user interface should be intuitive and easy to use.\n- The program should be able to handle multiple test cases without crashing.\nTo efficiently calculate the k-th special number in a sequence based on the sum of distinct non-negative powers of n, we will use Python's mathematical capabilities and handle large inputs by optimizing the algorithm. The program will be designed to process multiple test cases efficiently, ensuring that the output is clear and accurate for each case.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'positive integers': means that all numbers in the sequence are greater than 0.\n    'distinct non-negative powers of n': means that each power of n is used only once and the sum of these powers equals the special number.\n    'modulo 10^9+7': means that the result should be taken modulo 10^9+7 to prevent overflow and to meet the constraints of the problem.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To find the k-th special number in a sequence based on the sum of distinct non-negative powers of n, we can use the following approach:\n    1. For each test case, calculate the powers of n until the sum exceeds k.\n    2. Use a binary search to find the k-th special number.\n    3. Return the result modulo 10^9+7.\n\n# [edge case] \n    test_case = (4, 1) = 1\n    Explanation: For n = 4, the only special number is 4^0 = 1, which is the 1st special number.\n    test_case = (3, 5) = 27\n    Explanation: For n = 3, the special numbers in increasing order are 1, 3, 9, 27, 81, etc. The 5th special number is 3^4 = 81, but we need to return it modulo 10^9+7, so the result is 27.\n    test_case = (2, 10) = 1024\n    Explanation: For n = 2, the special numbers in increasing order are 1, 2, 4, 8, 16, ..., up to the 10th number. The 10th special number is 2^9 = 512, but we need to return it modulo 10^9+7, so the result is 1024.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic is sufficient to find the k-th special number for each test case.\n", "requirement analysis:\nThe problem requires finding the k-th special number in a sequence defined by the sum of distinct non-negative powers of n. The sequence grows exponentially, so handling large values of n and k efficiently is crucial. The modulo operation ensures the numbers do not become too large to handle. The solution must be able to process multiple test cases efficiently.\nrequirement pool:\n- Implement a function to find the k-th special number.\n- Ensure the function can handle large values of n and k.\n- Implement the modulo operation to keep numbers within manageable limits.\n- Optimize the function for multiple test cases.\n- Ensure the solution is accurate and efficient.\nTo efficiently find the k-th special number, we will use a mathematical approach based on the properties of powers of n. The sequence of special numbers can be generated by summing distinct non-negative powers of n, which grows exponentially. We will use the modulo operation to keep the numbers within manageable limits. The function will be optimized to handle multiple test cases efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'special number': a number that can be expressed as a sum of distinct non-negative powers of n.\n    Explanation: A special number is derived from summing up different powers of a base number n. For example, for n = 4, 17 is a special number because it can be expressed as 4^0 + 4^2 (1 + 16).\n\n# [phrase showing quantity relationship]\n    'more than': indicates that the number must be greater than zero.\n    Explanation: The requirement specifies that the number must be positive, so we need to ensure that the sum of powers of n is greater than zero.\n\n# [degree adverb] \n    'largest': indicates that we need to find the largest special number.\n    Explanation: The requirement does not ask for the largest special number but rather the k-th special number in increasing order.\n\n# [code logic]\n    To find the k-th special number, we need to generate numbers that are sums of distinct non-negative powers of n. This can be done using a loop to generate powers of n and summing them up, checking if the sum is unique and positive. We will use a set to ensure uniqueness and then convert it to a sorted list to find the k-th element.\n\n# [edge case] \n    search([2,2,3,3,3]) = 3\n    Explanation: Both 2 and 3 appears greater than or equal to its value, but 3 is the largest number.\n    search([3,3,2,4,4,4]) = -1\n    Explanation: Number 2 appears one time, number 3 appears two times, number 4 appears three times, none of them appears greater than or equal to its value, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We can set the original return answer to -1 and then find the largest integer that meets the need.\n\n# [code logic]\n    To find the k-th special number, we need to generate numbers that are sums of distinct non-negative powers of n. This can be done using a loop to generate powers of n and summing them up, checking if the sum is unique and positive. We will use a set to ensure uniqueness and then convert it to a sorted list to find the k-th element.\n\n# [edge case] \n    search([2,2,3,3,3]) = 3\n    Explanation: Both 2 and 3 appears greater than or equal to its value, but 3 is the largest number.\n    search([3,3,2,4,4,4]) = -1\n    Explanation: Number 2 appears one time, number 3 appears two times, number 4 appears three times, none of them appears greater than or equal to its value, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We can set the original return answer to -1 and then find the largest integer that meets the need.\n", "requirement analysis:\nThe requirement involves finding the k-th special number in a sequence of numbers that can be expressed as sums of distinct non-negative powers of n. The output should be in increasing order and modulo 10^9+7 to handle large numbers. The solution should be efficient and capable of handling multiple test cases.\nrequirement pool:\n- Implement a function to find the k-th special number.\n- Ensure the output is in increasing order and modulo 10^9+7.\n- Optimize the algorithm for performance and scalability.\n- Handle multiple test cases efficiently.\n- Ensure the solution is accurate and meets the requirements.\nTo solve the problem of finding the k-th special number, we will use a mathematical approach based on the properties of powers of n. The special numbers are sums of distinct non-negative powers of n, which can be represented as a sum of a geometric series. We will use modular arithmetic to handle large numbers efficiently. The solution will be optimized to handle multiple test cases.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'special number': a number that can be expressed as a sum of distinct non-negative powers of n.\n    Explanation: A special number is derived from the sum of different powers of a base number n. For example, for n = 4, the number 17 is special because it can be represented as 4^0 + 4^2 (1 + 16).\n\n# [phrase showing quantity relationship]\n    'more than': means that the number must be greater than zero.\n    'at least as many times': means that the frequency of the number in the sequence must be at least as much as its value.\n\n# [degree adverb] \n    'largest': means that we need to find the largest integer that meets the condition.\n\n# [code logic]\n    To find the k-th special number, we need to generate numbers that are sums of distinct non-negative powers of n. This can be done using a mathematical approach where we calculate the sum of powers of n, ensuring that we only use distinct powers. The result should be taken modulo 10^9+7 to handle large numbers efficiently.\n\n# [edge case] \n    search([2,2,3,3,3]) = 3\n    Explanation: Both 2 and 3 appear more than or equal to their value, but 3 is the largest number among those that meet the condition.\n    search([3,3,2,4,4,4]) = -1\n    Explanation: Number 2 appears one time, number 3 appears two times, number 4 appears three times, none of them appear at least as many times as their value, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We can set the initial return value to -1 and then find the largest integer that meets the condition.\n\n# [core concept]\n    'sum of distinct non-negative powers': means that each power of n is unique and added together to form the special number.\n    Explanation: This concept involves understanding how to sum different powers of a base number n to form a special number.\n\n# [phrase showing quantity relationship]\n    'at least as many times': means that the frequency of the number in the sequence must be at least as much as its value.\n    'more than': means that the number must be greater than zero.\n\n# [degree adverb] \n    'largest': means that we need to find the largest integer that meets the condition.\n\n# [code logic]\n    To find the k-th special number, we need to generate numbers that are sums of distinct non-negative powers of n. This can be done using a mathematical approach where we calculate the sum of powers of n, ensuring that we only use distinct powers. The result should be taken modulo 10^9+7 to handle large numbers efficiently.\n\n# [edge case] \n    search([2,2,3,3,3]) = 3\n    Explanation: Both 2 and 3 appear more than or equal to their value, but 3 is the largest number among those that meet the condition.\n    search([3,3,2,4,4,4]) = -1\n    Explanation: Number 2 appears one time, number 3 appears two times, number 4 appears three times, none of them appear at least as many times as their value, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We can set the initial return value to -1 and then find the largest integer that meets the condition.\n", "requirement analysis:\nThe requirement involves finding the k-th special number based on the given base number n. The special number must be a sum of distinct non-negative powers of n. The output should be modulo 10^9+7 to handle large numbers efficiently. The application should be able to process multiple test cases efficiently.\nrequirement pool:\n- Implement a function to find the k-th special number based on the given base n.\n- Ensure the output is modulo 10^9+7 to handle large numbers.\n- Allow the application to process multiple test cases efficiently.\n- Develop a user-friendly interface for input and output.\n- Optimize the algorithm to handle large inputs and provide accurate results.\nTo solve this problem, we will use a mathematical approach to generate the k-th special number based on the given base number n. The special number is defined as a sum of distinct non-negative powers of n. Given the constraints, we will use a dynamic programming approach to efficiently generate these numbers without explicitly storing all of them, which would be computationally infeasible for large values of k and n. The result will be computed modulo 10^9+7 to handle large numbers efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'special number': a number that can be expressed as a sum of distinct non-negative powers of a base number n.\n    Explanation: In this problem, we need to find the k-th special number in increasing order for a given base n. A special number is a sum of distinct non-negative powers of n, and we need to output this number modulo 10^9+7 to handle large numbers efficiently.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To generate the k-th special number, we can use a mathematical approach to find the sum of distinct non-negative powers of n without explicitly storing all powers. We will use a loop to find the k-th special number by checking each power of n until we reach or exceed k.\n\n# [edge case] \n    test_case1 = (4, 5)\n    expected_output1 = 65536\n    Explanation: For n = 4 and k = 5, the special numbers are the sums of distinct non-negative powers of 4. The first few special numbers are 1, 4, 16, 64, 256, 1024, etc. The 5th special number is 256.\n\n    test_case2 = (3, 10)\n    expected_output2 = 59049\n    Explanation: For n = 3 and k = 10, the special numbers are the sums of distinct non-negative powers of 3. The first few special numbers are 1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683, etc. The 10th special number is 19683.\n\n    test_case3 = (2, 30)\n    expected_output3 = 1073741824\n    Explanation: For n = 2 and k = 30, the special numbers are the sums of distinct non-negative powers of 2. The first few special numbers are 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, etc. The 30th special number is 1073741824.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where k is very large. Since the result can be very large, we need to output it modulo 10^9+7. We can use a loop to calculate the sum of powers of n and take modulo 10^9+7 at each step to keep the number manageable.\n", "requirement analysis:\nThe requirements involve creating a program that can determine the k-th special number for a given base n, considering the constraints of large inputs and the need for modulo arithmetic. The program should be efficient and capable of handling multiple test cases efficiently.\nrequirement pool:\n- Implement a function to calculate special numbers based on the given base n.\n- Ensure the program can handle large values of k and n.\n- Implement modulo arithmetic to handle large numbers and ensure the result is within the specified range.\n- Create a user-friendly interface for inputting the base and position of the special number.\n- Ensure the program can process multiple test cases efficiently.\nTo solve this problem, we will use Python due to its strong support for handling large integers and efficient handling of modulo arithmetic. We will implement a function that calculates the k-th special number for a given base n, considering the constraints of large inputs and the need for modulo arithmetic. The function will be designed to handle multiple test cases efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'special number': a number that can be expressed as a sum of distinct non-negative powers of a base n.\n    Explanation: In the context of the problem, a special number is one that can be represented as the sum of unique powers of a given base n. For example, for n = 4, the number 17 is special because it can be written as 4^0 + 4^2 = 1 + 16 = 17.\n\n# [phrase showing quantity relationship]\n    'more than': means that we need to find numbers greater than zero.\n    Explanation: The phrase \"more than\" is used to indicate that we are looking for numbers that are strictly greater than zero.\n\n# [degree adverb] \n    'largest': means that we need the biggest number that meets the condition.\n    Explanation: The degree adverb \"largest\" indicates that we are looking for the maximum value that satisfies the given criteria.\n\n# [code logic]\n    To find the k-th special number, we need to generate numbers that are sums of distinct non-negative powers of n. This can be done by iterating through the powers and summing them up. Since the numbers can be very large, we need to output the result modulo 10^9+7.\n\n# [edge case] \n    search([2,2,3,3,3]) = 3\n    Explanation: Both 2 and 3 appear more than or equal to their value, but 3 is the largest number among them.\n    search([3,3,2,4,4,4]) = -1\n    Explanation: Number 2 appears one time, number 3 appears two times, number 4 appears three times, none of them appear more than or equal to their value, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We can set the initial return value to -1 and then find the largest integer that meets the condition.\n\n# [core concept]\n    'sum of distinct non-negative powers': means that we are looking at numbers that can be represented as the sum of unique powers of a base n.\n    Explanation: This concept is crucial as it defines the type of numbers we are dealing with in the problem.\n\n# [phrase showing quantity relationship]\n    'more than': means that we need to find integers greater than zero.\n    Explanation: This phrase indicates that we are looking for numbers that are strictly greater than zero.\n\n# [degree adverb] \n    'largest': means that we need the biggest integer that meets the condition.\n    Explanation: The degree adverb \"largest\" indicates that we are looking for the maximum value that satisfies the given criteria.\n\n# [code logic]\n    To find the k-th special number, we need to generate numbers that are sums of distinct non-negative powers of n. This can be done by iterating through the powers and summing them up. Since the numbers can be very large, we need to output the result modulo 10^9+7.\n\n# [edge case] \n    search([2,2,3,3,3]) = 3\n    Explanation: Both 2 and 3 appear more than or equal to their value, but 3 is the largest number among them.\n    search([3,3,2,4,4,4]) = -1\n    Explanation: Number 2 appears one time, number 3 appears two times, number 4 appears three times, none of them appear more than or equal to their value, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We can set the initial return value to -1 and then find the largest integer that meets the condition.\n"], "scores": [], "pass_results": [false, true, false, false, true, true, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 115, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]", "mutate_method": "rephrase_one", "parent_index": 67}
