{"name": "1607_A. Linear Keyboard", "description": "You are given a keyboard that consists of 26 keys. The keys are arranged sequentially in one row in a certain order. Each key corresponds to a unique lowercase Latin letter.\n\nYou have to type the word s on this keyboard. It also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nDetermine how long it will take to print the word s.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "tags": ["implementation", "strings"], "difficulty": 7, "id": 1607, "sample_io": [{"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}], "test_list": [{"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkjanscjanjkcanc\n", "output": ["164\n"]}, {"input": "1\nabcdefghilkjmnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjkcanc\n", "output": ["164\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjlcanc\n", "output": ["166\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nasdeb\n", "output": ["37\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkcanscjanjkcanj\n", "output": ["157\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n70\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nbbdes\n", "output": ["17\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n6\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsaeeb\n", "output": ["25\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkcanscjanjlcanj\n", "output": ["159\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabaacba\n", "output": ["13\n0\n70\n0\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n68\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n6\n74\n"]}, {"input": "1\nabcdefjhilkglnopqrstuvwxyz\nabdet\n", "output": ["19\n"]}, {"input": "1\naycdefbhilkjmnopqrstuvwxgz\nsfdba\n", "output": ["24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n70\n0\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n52\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkianscjanjclanb\n", "output": ["181\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsadfb\n", "output": ["27\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n0\n56\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n50\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n68\n6\n52\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\nbseeb\n", "output": ["34\n"]}, {"input": "1\nzywwsutvrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["171\n"]}, {"input": "1\nzgxovudsrqpcnljklihyfetwba\nsedba\n", "output": ["48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["13\n0\n50\n0\n35\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\nasdea\n", "output": ["38\n"]}, {"input": "1\nzywwsutvrqponmlcjihgfedkba\njnacljnajcsnackncasca\n", "output": ["173\n"]}, {"input": "1\nzgxwdutsrqponmjklihbfeucya\nsfdba\n", "output": ["50\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodffcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n6\n56\n"]}, {"input": "1\nzyxwvvtsrqponmlkjihgfedcba\nnnacljnajcrcajkncasca\n", "output": ["153\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nehllo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["10\n0\n50\n0\n35\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\naasccnkianscjanjlcanb\n", "output": ["163\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbsdfa\n", "output": ["39\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n66\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nehllo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ndodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["10\n0\n49\n0\n35\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\naatccnkianscjanjlcanb\n", "output": ["165\n"]}, {"input": "1\ndfxwvutsrqponmlkjihgfyzcba\naatccnkiansljanjccanb\n", "output": ["147\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponclljihgfedmba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabcabaa\n", "output": ["14\n0\n54\n6\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\naacdefghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n80\n0\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqpqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n36\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nscerofecod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n69\n18\n74\n"]}, {"input": "1\nabcdefyhilkjmponsrwtuvqxhz\nbedsa\n", "output": ["33\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngdlln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqpqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n36\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponclljihgfedmba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwfrtyuhopasdfghjklzxcvbnm\nabcabab\n", "output": ["14\n0\n54\n6\n65\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n65\n18\n74\n"]}, {"input": "1\nabcdehgsilkilnopqrftuvwxyz\nteaae\n", "output": ["23\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabchefxgijklmnupqrstovwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["16\n0\n65\n24\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\naacddfghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzxcvbnj\nabacaba\n", "output": ["15\n0\n80\n0\n74\n"]}, {"input": "1\naccdehgsilkilnopqqftuvwxxz\nseaae\n", "output": ["11\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponmlkjihgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n80\n6\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihggedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghzjmlmnopqrstuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\naaacaba\n", "output": ["16\n0\n65\n24\n48\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n80\n15\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihggedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghzjmlmnopqrstuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nrqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\naaacaba\n", "output": ["16\n0\n65\n27\n48\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nzqxwvutsryponmlkiihgfedcba\ncoeeforcse\nqwertyujnpasdfghjklzxcvbnn\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabcaaba\n", "output": ["15\n0\n80\n15\n52\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjklzxcvbnn\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabcaaba\n", "output": ["15\n0\n82\n15\n52\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nhdllo\nzyxvvutsrqponilkjmhgfddcaa\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["15\n0\n82\n15\n26\n"]}, {"input": "5\nabcdefghijilmnopqrstuvwxyz\nhdllo\naacddfghmjklinopqrstuvvxyz\nj\nabcdefghiiklmnopvrstuywxqz\ncoeeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["15\n0\n80\n15\n26\n"]}, {"input": "5\nabcdefghijilmnopqrstuvwxyz\nhdllo\naacddfghmjklinopqrstuvvxyz\nj\nabcdefghiiklmnopvrstuywxqz\ncoeeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacaa\n", "output": ["15\n0\n80\n15\n24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhlelo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["21\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacjkjanscnanjlcanb\n", "output": ["169\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n3\n74\n"]}, {"input": "1\nabcdefghijklmonpqrstuvwxyz\ncnackjnajcsnajkncasca\n", "output": ["170\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\ncoacljnajcsnajkncasca\n", "output": ["168\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbaacaba\n", "output": ["12\n0\n68\n18\n61\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsaeea\n", "output": ["26\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwautsrqponmlkjihgfedcbv\nacsacnkcanscjanjlcanj\n", "output": ["200\n"]}, {"input": "1\nnbcdefyhilkjmaopqrstuvwxgz\nsfdba\n", "output": ["29\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforbes\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n70\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwerbyuiopasdfghjklzxcvtnm\nabacaba\n", "output": ["12\n0\n68\n18\n46\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n18\n74\n"]}, {"input": "1\nzywwvutsrqponmlkjihgfedcba\njnacljnajcsnackncatca\n", "output": ["161\n"]}, {"input": "5\nzyxwvutsrqponmakjihgfedcbl\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["19\n0\n68\n18\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["12\n0\n68\n6\n52\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\ncsdea\n", "output": ["36\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nkelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["18\n0\n68\n0\n74\n"]}, {"input": "1\nzgxwuuterqponmjklihbfsdcya\nsfdba\n", "output": ["12\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\nacsacnkianscjanjldanb\n", "output": ["195\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\nasdae\n", "output": ["40\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyuiopasdfghjklzxcvbnm\nabbcaba\n", "output": ["11\n0\n68\n18\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nnlleh\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnzpqrstuvwxyo\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n106\n18\n74\n"]}, {"input": "1\nzyxwjvtsrqponmlkvihgfedcba\nnnacljnajcrcajkncasca\n", "output": ["211\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbscfa\n", "output": ["41\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n66\n18\n74\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlnlhe\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\neholl\nabcdefghijklmnopqrstuvwyyz\ni\nabcdefohijllmngpqrstuvwxyz\ndodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["13\n0\n49\n0\n35\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljihgfedcba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabcabaa\n", "output": ["14\n0\n68\n24\n52\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnlleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nscerofedod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n67\n18\n74\n"]}, {"input": "1\ndfxwvutsrqponmlkjihgfyzcba\naatccnkiansljanjccana\n", "output": ["148\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nbbacaba\n", "output": ["11\n0\n68\n18\n61\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nseeqofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n63\n18\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolleh\naacdefghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeefoqcse\nqwertyujnpasdfghjklzxcvbnn\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n78\n0\n74\n"]}, {"input": "1\nabcdehgsilkilnopqrftuvwxyz\naeate\n", "output": ["42\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmlfh\nabchefxgijklmnupqrstovwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["10\n0\n65\n18\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmelh\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["20\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhem\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\nabacaba\n", "output": ["17\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdsfghzjmlmnopqretuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\nabacaba\n", "output": ["16\n0\n53\n24\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcsf\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n79\n6\n74\n"]}, {"input": "1\nzxxwvutfqqponlekljshhiccca\nteaae\n", "output": ["30\n"]}, {"input": "1\nztxwvuxfqqponlikcjshieccma\neaaet\n", "output": ["28\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nhdlln\naacddfghmjklinopqrstuvvxyz\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["14\n0\n82\n15\n26\n"]}, {"input": "1\narcdeffhilkjmnopqbstuvwxyz\nabdes\n", "output": ["46\n"]}, {"input": "1\nzyxwvutsrqponclkjihgeedmba\nacsacnkjanscjanjlcanc\n", "output": ["144\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n9\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nccacljnajcsnajknoasca\n", "output": ["146\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnnjcacaska\n", "output": ["145\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbaacaba\n", "output": ["12\n0\n68\n24\n61\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabababa\n", "output": ["14\n0\n68\n0\n78\n"]}, {"input": "1\nzyxwautsrqponmlkjihgfedcbv\nacsacnkcanrcjanjlcanj\n", "output": ["198\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhdllo\nabcdezghijklmnopqrstuvwxyf\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["15\n0\n68\n0\n48\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nabdes\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxzz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\nbeesa\n", "output": ["35\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\ncnackjnajcsnajkncasca\n", "output": ["164\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nabdfs\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabcdefyhilkjlnopqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nsedba\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nasdeb\n", "output": ["37\n"]}, {"input": "5\nabcdekghijflmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\nasedb\n", "output": ["35\n"]}, {"input": "1\nabcdefyhilkhmnopqrstuvwxjz\nbeesa\n", "output": ["35\n"]}, {"input": "1\nabcdefjhilkglnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nsfdba\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabodefyhilkjlncpqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnaikncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nsedaa\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nbedsa\n", "output": ["37\n"]}, {"input": "5\nabcdekghijflmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsadeb\n", "output": ["25\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsrqpnomhklihyfedcba\nasedb\n", "output": ["35\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\nbeesa\n", "output": ["35\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["159\n"]}, {"input": "1\nabcdefghijklmnopqrstvvwxyz\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabwdefyhilkjlncpqrstuvoxgz\nsedba\n", "output": ["18\n"]}, {"input": "1\ndyxwvutsrqponmlkjihgfezcba\nbnacljnajcsnaikncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\naades\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n6\n74\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nbnacljnajcnnajkscasca\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\naedsb\n", "output": ["37\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabdet\n", "output": ["19\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzywwvutsrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["159\n"]}, {"input": "1\nzgxwvutsrqponmjklihbfedcya\nsfdba\n", "output": ["24\n"]}, {"input": "1\nabcdefghijklmnopqrstvvwxyz\ncnacljnajcrnajkncasca\n", "output": ["164\n"]}, {"input": "1\nzgxovutsrqpcnljklihyfedwba\nsedba\n", "output": ["18\n"]}, {"input": "1\ndyxwvutsrqponmlkjihgfezcba\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\naades\n", "output": ["18\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvvxyz\nacsacnkianscjanjclanb\n", "output": ["181\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nbsdea\n", "output": ["37\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabeet\n", "output": ["19\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzgxwuutsrqponmjklihbfedcya\nsfdba\n", "output": ["24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodffcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n0\n56\n"]}, {"input": "1\nzyxwvvtsrqponmlkjihgfedcba\ncnacljnajcrnajkncasca\n", "output": ["164\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n68\n6\n52\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbsdea\n", "output": ["37\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nnlleh\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsroponmhklihyfedcba\nbseeb\n", "output": ["34\n"]}, {"input": "1\nzyxwvutsrqponljklihgfedcba\nabeet\n", "output": ["19\n"]}], "task_id": "codecontest/98", "prompt": "You are given a keyboard that consists of 26 keys. The keys are arranged sequentially in one row in a certain order. Each key corresponds to a unique lowercase Latin letter.\n\nYou have to type the word s on this keyboard. It also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nDetermine how long it will take to print the word s. Your task is to implement a function that calculates this typing time efficiently.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "repair_prompt": ["You are given a keyboard that consists of 26 keys. The keys are arranged sequentially in one row in a certain order. Each key corresponds to a unique lowercase Latin letter.\n\nYou have to type the word s on this keyboard. It also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nDetermine how long it will take to print the word s. Your task is to implement a function that calculates this typing time efficiently.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\nWrite a main() function and use input() function to read input from stdin", " You are given a keyboard that consists of 26 keys. The keys are arranged sequentially in one row in a certain order. Each key corresponds to a unique lowercase Latin letter.\n\nYou have to type the word s on this keyboard. It also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one. To type each letter, you must position your hand exactly over the corresponding key and press it.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\nWrite a main() function and use input() function to read input from stdin", " You are given a keyboard with 26 keys arranged sequentially in one row, each key corresponding to a unique lowercase Latin letter. You need to type the word s on this keyboard, which consists only of lowercase Latin letters. To type each letter, you must position your hand exactly over the corresponding key, and moving the hand between the keys takes time equal to the absolute value of the difference between the positions of these keys. The task is to calculate the total time required to type the word s efficiently.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the typing time for a given word on a specific keyboard layout.\n\n    Args:\n        keyboard (str): A string representing the keyboard layout where each character is a unique lowercase Latin letter.\n        word (str): The word to be typed, consisting of lowercase Latin letters.\n\n    Returns:\n        int: The total typing time required to type the word.\n    \"\"\"\n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {char: index for index, char in enumerate(keyboard, start=1)}\n\n    # Initialize the total typing time\n    total_time = 0\n\n    # Initialize the position of the hand for the first letter\n    previous_position = 0\n\n    # Iterate through each letter in the word\n    for letter in word:\n        # Get the position of the current letter on the keyboard\n        current_position = keyboard_positions[letter]\n\n        # Calculate the time to type the current letter\n        time_to_type_current_letter = abs(current_position - previous_position)\n\n        # Add the time to the total typing time\n        total_time += time_to_type_current_letter\n\n        # Update the position of the hand for the next letter\n        previous_position = current_position\n\n    return total_time\n\n# Read the number of test cases from stdin\nimport sys\n\nt = int(sys.stdin.readline().strip())\n\nfor _ in range(t):\n    # Read the keyboard layout\n    keyboard = sys.stdin.readline().strip()\n    # Read the word to be typed\n    word = sys.stdin.readline().strip()\n    # Calculate and print the typing time\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the typing time for a given word on a specified keyboard layout.\n\n    Args:\n        keyboard (str): A string representing the keyboard layout where each character is a unique lowercase Latin letter.\n        word (str): The word to be typed, consisting of lowercase Latin letters.\n\n    Returns:\n        int: The total typing time in units of time.\n    \"\"\"\n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {char: idx for idx, char in enumerate(keyboard, start=1)}\n\n    # Initialize the typing time\n    typing_time = 0\n\n    # Iterate through the word to calculate the typing time\n    for i in range(1, len(word)):\n        current_pos = keyboard_positions[word[i]]\n        previous_pos = keyboard_positions[word[i - 1]]\n        typing_time += abs(current_pos - previous_pos)\n\n    return typing_time\n\n# Read input from stdin\nt = int(input().strip())\nfor _ in range(t):\n    keyboard = input().strip()\n    word = input().strip()\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the typing time for a word on a given keyboard.\n\n    Args:\n        keyboard (str): A string of length 26 representing the keyboard layout.\n        word (str): The word to be typed.\n\n    Returns:\n        int: The total typing time for the word.\n    \"\"\"\n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {char: index for index, char in enumerate(keyboard)}\n\n    # Initialize the total typing time\n    total_time = 0\n\n    # Calculate the typing time for the word\n    for i in range(1, len(word)):\n        current_pos = keyboard_positions[word[i]]\n        previous_pos = keyboard_positions[word[i - 1]]\n        total_time += abs(current_pos - previous_pos)\n\n    return total_time\n\n# Provide the Interface\nt = int(input())\nfor _ in range(t):\n    keyboard = input()\n    word = input()\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\nimport sys\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the minimal time it takes to type the word on the given keyboard.\n\n    Args:\n        keyboard (str): A string of 26 unique lowercase Latin letters representing the keyboard layout.\n        word (str): The word to be typed, consisting of lowercase Latin letters.\n\n    Returns:\n        int: The minimal time required to type the word.\n    \"\"\"\n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {letter: index for index, letter in enumerate(keyboard, start=1)}\n\n    # Initialize the total time to 0\n    total_time = 0\n\n    # Calculate the time for each letter in the word\n    for i in range(1, len(word)):\n        current_letter = word[i]\n        previous_letter = word[i - 1]\n        current_pos = keyboard_positions[current_letter]\n        previous_pos = keyboard_positions[previous_letter]\n        total_time += abs(current_pos - previous_pos)\n\n    return total_time\n\n# Read the number of test cases\nt = int(input().strip())\n\n# Process each test case\nfor _ in range(t):\n    keyboard = input().strip()\n    word = input().strip()\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_position(keyboard: str, letter: str) -> int:\n    \"\"\"\n    Calculate the position of a given letter on the keyboard.\n    \n    Args:\n        keyboard (str): A string representing the keyboard layout.\n        letter (str): A single lowercase Latin letter.\n    \n    Returns:\n        int: The position of the letter on the keyboard.\n    \"\"\"\n    return keyboard.index(letter) + 1\n\ndef calculate_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the minimal time to type a word on the given keyboard.\n    \n    Args:\n        keyboard (str): A string representing the keyboard layout.\n        word (str): A string representing the word to be typed.\n    \n    Returns:\n        int: The minimal time to type the word.\n    \"\"\"\n    positions = [calculate_position(keyboard, letter) for letter in word]\n    time = 0\n    for i in range(1, len(positions)):\n        time += abs(positions[i] - positions[i - 1])\n    return time\n\n# Interface for the program\nn = int(input())\nfor _ in range(n):\n    keyboard = input()\n    word = input()\n    result = calculate_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\nimport sys\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the minimal time required to type a given word on a specified keyboard.\n\n    Args:\n        keyboard (str): A string of 26 unique lowercase Latin letters representing the keyboard layout.\n        word (str): The word to be typed, consisting of lowercase Latin letters.\n\n    Returns:\n        int: The minimal time required to type the word.\n    \"\"\"\n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {char: idx for idx, char in enumerate(keyboard, start=1)}\n\n    # Initialize the total typing time\n    total_time = 0\n\n    # Calculate the time required to type each letter by considering the position difference between consecutive letters\n    for i in range(1, len(word)):\n        total_time += abs(keyboard_positions[word[i]] - keyboard_positions[word[i - 1]])\n\n    return total_time\n\n# Read the number of test cases\nt = int(input().strip())\n\n# Process each test case\nfor _ in range(t):\n    keyboard = input().strip()\n    word = input().strip()\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the total time required to type a word based on the positions of the keys on the keyboard.\n\n    Args:\n        keyboard (str): A string of length 26 representing the layout of the keyboard.\n        word (str): The word to be typed.\n\n    Returns:\n        int: The total time required to type the word.\n    \"\"\"\n    # Create a dictionary to map each key to its position on the keyboard\n    key_positions = {}\n    for index, key in enumerate(keyboard):\n        key_positions[key] = index\n\n    # Initialize the total time to 0\n    total_time = 0\n\n    # Calculate the time required to type the word\n    for i in range(1, len(word)):\n        current_key = word[i]\n        previous_key = word[i - 1]\n        current_pos = key_positions[current_key]\n        previous_pos = key_positions[previous_key]\n        # Add the absolute difference in positions to the total time\n        total_time += abs(current_pos - previous_pos)\n\n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    keyboard = input()\n    word = input()\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the total time required to type the word efficiently on the given keyboard.\n\n    Args:\n        keyboard (str): A string of 26 characters representing the keyboard layout.\n        word (str): The word to be typed.\n\n    Returns:\n        int: The total time required to type the word.\n    \"\"\"\n    # Create a dictionary to store the position of each key on the keyboard\n    key_positions = {}\n    for index, key in enumerate(keyboard):\n        key_positions[key] = index\n\n    # Initialize the total time required to type the word\n    total_time = 0\n\n    # Calculate the time required to type each letter in the word\n    for i in range(1, len(word)):\n        current_key = word[i]\n        previous_key = word[i - 1]\n        current_position = key_positions[current_key]\n        previous_position = key_positions[previous_key]\n        time_to_move = abs(current_position - previous_position)\n        total_time += time_to_move\n\n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    keyboard = input()\n    word = input()\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the total time required to type a word based on the given keyboard layout.\n\n    Args:\n        keyboard (str): A string of 26 characters representing the keyboard layout.\n        word (str): The word to be typed.\n\n    Returns:\n        int: The total time required to type the word.\n    \"\"\"\n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n    \n    # Initialize the total time to 0\n    total_time = 0\n    \n    # Iterate through the word to calculate the time for each letter\n    for i in range(1, len(word)):\n        prev_char = word[i - 1]\n        curr_char = word[i]\n        prev_pos = keyboard_positions[prev_char]\n        curr_pos = keyboard_positions[curr_char]\n        # Calculate the time based on the difference in positions\n        total_time += abs(prev_pos - curr_pos)\n    \n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    keyboard = input()\n    word = input()\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the minimal time it takes to type the word on the given keyboard.\n\n    Args:\n        keyboard (str): A string of length 26 representing the keyboard layout.\n        word (str): The word to be typed, consisting of lowercase Latin letters.\n\n    Returns:\n        int: The minimal time to type the word.\n    \"\"\"\n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {char: idx for idx, char in enumerate(keyboard, start=1)}\n\n    # Initialize the total typing time\n    total_time = 0\n\n    # Iterate through the word, calculating the time based on the positions of consecutive letters\n    for i in range(1, len(word)):\n        current_pos = keyboard_positions[word[i]]\n        previous_pos = keyboard_positions[word[i - 1]]\n        total_time += abs(current_pos - previous_pos)\n\n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    # Read the keyboard layout and the word\n    keyboard = input().strip()\n    word = input().strip()\n\n    # Calculate and print the typing time for the word on the given keyboard\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n"], "plans": ["requirement analysis:\nThe primary requirement is to calculate the typing time for a given word on a specific keyboard layout. The keyboard layout is provided as a string of 26 lowercase Latin letters, and the word to be typed is also given as a string. The typing time is calculated based on the positions of the letters in the keyboard. The challenge lies in efficiently mapping the letters to their positions and computing the time based on these positions.\nrequirement pool:\n- Implement a function to calculate typing time based on keyboard layout and word.\n- Ensure the function handles up to 1000 test cases efficiently.\n- Allow user to input custom keyboard layouts and words for calculation.\n- Provide a user-friendly interface for easy interaction.\n- Optimize the algorithm for handling large inputs and ensuring fast computation times.\nTo implement the typing time calculator efficiently, we will use Python's built-in data structures and functions. The primary challenge is to map each letter of the alphabet to its position on the keyboard and then calculate the time based on the positions of consecutive letters in the word. We will use a dictionary to store the positions of the keys for quick lookup.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: The keyboard is a sequence of 26 keys, each representing a letter from 'a' to 'z'. The order of these keys determines the position of each letter on the keyboard.\n\n# [phrase showing quantity relationship]\n    'as many times': Indicates the frequency with which a letter appears in the word.\n    Explanation: For example, if a letter appears 'n' times in the word, it means that the letter must be typed 'n' times consecutively.\n\n# [degree adverb] \n    'minimal': Refers to the shortest time required to type the word on the given keyboard.\n    Explanation: The goal is to find the minimum time needed to type the word by considering the positions of the keys and the order of the letters.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To calculate the typing time efficiently, we can follow these steps:\n    1. Create a dictionary to map each letter to its position on the keyboard.\n    2. Iterate through the word, calculating the time to type each letter based on its position and the position of the previous letter.\n    3. Sum the times for all letters to get the total typing time.\n\n# [edge case] \n    typing_time(\"abcdefghijklmnopqrstuvwxyz\", \"abc\") = 3\n    Explanation: The positions of 'a', 'b', and 'c' are 1, 2, and 3 respectively. The time taken to type \"abc\" is |2-1| + |3-2| = 2.\n    typing_time(\"abcdefghijklmnopqrstuvwxyz\", \"xyz\") = 2\n    Explanation: The positions of 'x', 'y', and 'z' are 24, 25, and 26 respectively. The time taken to type \"xyz\" is |25-24| + |26-25| = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to calculate the typing time for any given keyboard and word.\n", "requirement analysis:\nThe requirements specify the need to calculate the typing time for a given word on a specific keyboard. The keyboard is represented by a string of 26 lowercase Latin letters, and the word to be typed is also in lowercase Latin letters. The typing time is calculated based on the positions of the letters in the keyboard and the order in which they are typed.\nrequirement pool:\n- Implement a function to calculate typing time based on keyboard layout and word.\n- Ensure the function can handle up to 1000 test cases efficiently.\n- Provide clear and concise output for each test case.\n- Optimize the algorithm for large inputs to ensure performance.\n- Allow for easy integration and use of the typing time calculator.\nTo implement the typing time calculator efficiently, we will use Python's built-in data structures and simple logic. The function will first map each key to its position on the keyboard, then calculate the time taken to type a given word by summing the absolute differences between consecutive letters' positions.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: The keyboard is a sequence of 26 keys, each representing a letter from 'a' to 'z'. The order of these keys determines the position of each letter on the keyboard.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To calculate the typing time efficiently, we can follow these steps:\n    1. Create a dictionary to map each letter to its position on the keyboard.\n    2. Iterate through the word, calculating the time taken to type each letter by finding the absolute difference between the positions of consecutive letters.\n    3. Sum these differences to get the total typing time for the word.\n\n# [edge case] \n    Edge case 1: Typing a word with all keys on the same position.\n    typing_time(\"aaaaa\") = 0\n    Explanation: If the word consists of the same letter repeated, the typing time will be zero since the positions of consecutive letters are the same.\n\n    Edge case 2: Typing a word with keys at the extreme ends of the keyboard.\n    typing_time(\"az\") = 1\n    Explanation: The letter 'a' is at position 1 and 'z' is at position 26. The typing time is |26 - 1| = 25.\n\n    Edge case 3: Typing a word with keys in the middle of the keyboard.\n    typing_time(\"hello\") = 13\n    Explanation: The positions of the letters 'h', 'e', 'l', and 'o' are 8, 5, 12, and 15, respectively. The typing time is |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can handle these cases directly.\n", "requirement analysis:\nThe requirements specify the need to calculate the typing time for a given word on a specific keyboard layout. The typing time is determined by the position of each letter on the keyboard and the distance between consecutive letters. The input consists of multiple test cases, each with a unique keyboard layout and a word to be typed. The output should provide the typing time for each test case.\nrequirement pool:\n- Implement a function to calculate typing time based on keyboard layout and word.\n- Handle multiple test cases efficiently.\n- Ensure the function is optimized for large inputs.\n- Provide clear and concise output for each test case.\nTo implement the typing time calculator efficiently, we will use Python's built-in data structures and standard libraries. The function will first map each key to its position on the keyboard. Then, for each word in the input, it will calculate the total time by summing the absolute differences in positions between consecutive letters. This approach ensures that the function is both simple and efficient.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: The keyboard is a sequence of 26 keys, each representing a letter from 'a' to 'z'. The order of these keys determines the position of each letter on the keyboard.\n\n# [phrase showing quantity relationship]\n    'as many times': Indicates the frequency with which a letter appears in the word.\n    Explanation: For example, if a letter appears twice in the word, it means that the letter is typed twice consecutively.\n\n# [degree adverb] \n    'minimal': Refers to the shortest time required to type the word on the given keyboard.\n    Explanation: The goal is to find the minimum time needed to type the word by considering the positions of the keys on the keyboard.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the typing time calculator, we will follow these steps:\n    1. Create a dictionary to map each letter to its position on the keyboard.\n    2. For each word, calculate the total typing time by iterating through the word and summing the absolute differences in positions between consecutive letters.\n    3. Return the total typing time for each word.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the largest integer that appears at least as many times as itself is 3, as it appears 3 times, which is equal to its value.\n    search([2, 2, 3, 3, 3]) = 3\n    Explanation: The largest integer that appears at least as many times as itself is 3, as it appears 3 times, which is equal to its value.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to find the largest integer that appears at least as many times as itself.\n\n## Prompt 3:\n\n[requirement]\nYou are given a keyboard that consists of 26 keys. The keys are arranged sequentially in one row in a certain order. Each key corresponds to a unique lowercase Latin letter. You have to type the word s on this keyboard. It also consists only of lowercase Latin letters. To type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it. Moving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word. For example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". Determine how long it will take to print the word s. Your task is to implement a function that calculates this typing time efficiently. Input The first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. The next 2t lines contain descriptions of the test cases. The first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard. The second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters. Output Print t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n[plan]\nTo implement the typing time calculator efficiently, we will use Python's built-in data structures and standard libraries. The function will first map each key to its position on the keyboard. Then, for each word in the input, it will calculate the total time by summing the absolute differences in positions between consecutive letters. This approach ensures that the function is both simple and efficient.\n\n## Answer 3:\n\n# [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: The keyboard is a sequence of 26 keys, each representing a letter from 'a' to 'z'. The order of these keys determines the position of each letter on the keyboard.\n\n# [phrase showing quantity relationship]\n    'consecutively': Indicates that letters are typed one after another without skipping.\n    Explanation: For example, if a word is \"hello\", the letters 'h', 'e', 'l', 'l', and 'o' are typed one after another.\n\n# [degree adverb] \n    'minimal': Refers to the shortest time required to type the word on the given keyboard.\n    Explanation: The goal is to find the minimum time needed to type the word by considering the positions of the keys on the keyboard.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the typing time calculator, we will follow these steps:\n    1. Create a dictionary to map each letter to its position on the keyboard.\n    2. For each word, calculate the total typing time by iterating through the word and summing the absolute differences in positions between consecutive letters.\n    3. Return the total typing time for each word.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the largest integer that appears at least as many times as itself is 3, as it appears 3 times, which is equal to its value.\n    search([2, 2, 3, 3, 3]) = 3\n    Explanation: The largest integer that appears at least as many times as itself is 3, as it appears 3 times, which is equal to its value.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to find the largest integer that appears at least as many times as itself.\n", "requirement analysis:\nThe requirements involve calculating the minimal time to type a given word on a keyboard where each key is assigned to a unique letter. The challenge is to determine the position of each letter on the keyboard and compute the time based on the absolute difference in positions. The input consists of multiple test cases, each with a different keyboard layout and word to type. The output should provide the minimal time for each test case.\nrequirement pool:\n- Implement a function to calculate the position of each letter on the keyboard.\n- Develop a function to compute the time required to type a word based on the positions of its letters.\n- Create a main function to read input and output the results for each test case.\n- Ensure the program can handle multiple test cases efficiently.\n- Implement error handling for invalid inputs.\nTo solve this problem, we will use Python, leveraging its efficiency and simplicity for handling the input/output and basic string manipulations. We will create a function that calculates the time required to type a word based on the positions of its letters on a given keyboard. The main function will read the input, process each test case, and output the result.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique letter.\n    Explanation: In this problem, the keyboard is represented as a string of 26 unique lowercase Latin letters, and each letter is arranged in a specific order. The task is to calculate the time required to type a given word on this keyboard.\n\n# [phrase showing quantity relationship]\n    'as many times': Indicates the frequency or number of times a letter appears in the word.\n    Explanation: For example, in the requirement, \"Return the largest integer that is more than zero and appears at least as many times as the integer itself,\" the phrase 'appears at least as many times' refers to the frequency of an integer in a list.\n\n# [degree adverb] \n    'largest': Indicates the maximum or greatest value among a set of values.\n    Explanation: In the requirement, \"Return the largest integer that is more than zero and appears at least as many times as the integer itself,\" the degree adverb 'largest' specifies that we need to find the largest integer with the given property.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to consider the following steps:\n    1. Read the input for each test case, including the keyboard layout and the word to be typed.\n    2. Map each letter in the word to its position on the keyboard.\n    3. Calculate the time required to type each letter by finding the absolute difference in positions between consecutive letters.\n    4. Sum the times for all letters to get the total time for the word.\n    5. Output the total time for each test case.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this test case, the number 3 appears three times, which is more than or equal to its value. It is the largest number that meets the condition, so the function returns 3.\n    search([2, 2, 3, 3, 3]) = 3\n    Explanation: Both 2 and 3 appear more than or equal to their values, but 3 is the largest number among them.\n    search([3, 3, 2, 4, 4, 4]) = -1\n    Explanation: None of the numbers 2, 3, or 4 appear more than or equal to their values. Therefore, the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic can handle cases where no integer meets the condition by returning -1.\n", "requirement analysis:\nThe requirements involve calculating the minimal time to type a given word on a specific keyboard layout. Each test case consists of a keyboard layout and a word, and the task is to determine the total time taken to type the word based on the positions of the letters on the keyboard. The time to type a letter is determined by the absolute difference in positions between the current and the next letter.\nrequirement pool:\n- Implement a function to calculate the position of each letter on the keyboard.\n- Create a function to compute the time to type a word based on the positions of its letters.\n- Ensure the program can handle multiple test cases efficiently.\n- Allow the user to input the keyboard layout and the word for each test case.\nTo solve this problem, we will use Python due to its simplicity and efficiency. The main challenge is to calculate the time taken to type a word based on the positions of its letters on the keyboard. We will create a function to determine the position of each letter on the keyboard and another function to compute the time to type a word based on these positions. We will also ensure the program can handle multiple test cases efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique letter.\n    Explanation: In this problem, the keyboard is represented as a string of 26 unique lowercase Latin letters, and each letter is arranged in a specific order. The goal is to calculate the time taken to type a word based on the positions of its letters on this keyboard.\n\n# [phrase showing quantity relationship]\n    'as many times': Indicates the frequency or number of times a letter appears in the word.\n    Explanation: For example, if a letter appears twice in the word, it means the letter is typed twice consecutively.\n\n# [degree adverb] \n    'minimal': Refers to the smallest possible time required to type the word.\n    Explanation: The goal is to find the minimal time needed to type the word, considering the positions of the letters on the keyboard.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to:\n    1. Create a dictionary to map each letter to its position on the keyboard.\n    2. For each test case, calculate the time to type the word by summing the absolute differences in positions between consecutive letters.\n    3. Output the minimal time for each test case.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the number 3 appears more than three times, which is not allowed. The correct output should be -1.\n    search([3, 3, 2, 4, 4, 4]) = -1\n    Explanation: In this case, the number 2 appears one time, number 3 appears two times, and number 4 appears three times. None of them appear more than themselves, so the function should return -1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where no integer appears more than zero times and as many times as itself.\n        if max(frequency.values()) == 1:\n            return -1\n\n# [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique letter.\n    Explanation: In this problem, the keyboard is represented as a string of 26 unique lowercase Latin letters, and each letter is arranged in a specific order. The goal is to calculate the time taken to type a word based on the positions of its letters on this keyboard.\n\n# [phrase showing quantity relationship]\n    'as many times': Indicates the frequency or number of times a letter appears in the word.\n    Explanation: For example, if a letter appears twice in the word, it means the letter is typed twice consecutively.\n\n# [degree adverb] \n    'minimal': Refers to the smallest possible time required to type the word.\n    Explanation: The goal is to find the minimal time needed to type the word, considering the positions of the letters on the keyboard.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to:\n    1. Create a dictionary to map each letter to its position on the keyboard.\n    2. For each test case, calculate the time to type the word by summing the absolute differences in positions between consecutive letters.\n    3. Output the minimal time for each test case.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the number 3 appears more than three times, which is not allowed. The correct output should be -1.\n    search([3, 3, 2, 4, 4, 4]) = -1\n    Explanation: In this case, the number 2 appears one time, number 3 appears two times, and number 4 appears three times. None of them appear more than themselves, so the function should return -1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where no integer appears more than zero times and as many times as itself.\n        if max(frequency.values()) == 1:\n            return -1\n", "requirement analysis:\nThe primary requirement is to calculate the minimal time required to type a given word on a specified keyboard. This involves mapping each letter of the word to its position on the keyboard and calculating the total movement time based on the positions of consecutive letters. The solution should be efficient and handle up to 1000 test cases, each with a keyboard and a word of varying lengths.\nrequirement pool:\n- Implement a function to calculate the time to type a word on a given keyboard\n- Ensure the solution can handle multiple test cases efficiently\n- Optimize the code for minimal movement between keys\n- Allow for different keyboard layouts and word lengths\nTo solve this problem, we will create a Python function that calculates the minimal time required to type a given word on a specified keyboard. The function will map each letter of the word to its position on the keyboard and calculate the total movement time based on the positions of consecutive letters. We will use a simple and efficient approach to ensure the solution can handle multiple test cases efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique letter.\n    Explanation: In this problem, the keyboard is represented as a string of 26 unique lowercase Latin letters, and each letter is arranged in a specific order. The task is to calculate the time required to type a given word on this keyboard.\n\n# [phrase showing quantity relationship]\n    'as many times': Indicates the frequency or number of occurrences of a specific letter in the word.\n    Explanation: For example, in the requirement, \"Return the largest integer that is more than zero and appears at least as many times as the integer itself,\" the phrase 'appears at least as many times' refers to the number of times a specific integer appears in a list.\n\n# [degree adverb] \n    'largest': Indicates the maximum or greatest value among a set of values.\n    Explanation: In the requirement, \"Return the largest integer that is more than zero and appears at least as many times as the integer itself,\" the degree adverb 'largest' specifies that we need to find the largest integer in the list that meets the given condition.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to consider the following steps:\n    1. Read the keyboard layout and the word to be typed.\n    2. Map each letter in the word to its position on the keyboard.\n    3. Calculate the time required to type each letter by considering the position difference between consecutive letters.\n    4. Sum the times for all letters to get the total typing time.\n    5. Output the total typing time for each test case.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this edge case, the list contains numbers that appear more than or equal to their value. The number 3 appears three times, which is more than or equal to its value, and it is the largest number that meets this condition.\n    search([2, 2, 3, 3, 3]) = 3\n    Explanation: Similar to the previous edge case, both 2 and 3 appear more than or equal to their value, but 3 is the largest number among them.\n    search([3, 3, 2, 4, 4, 4]) = -1\n    Explanation: In this case, no number appears more than or equal to its value. The number 2 appears once, 3 appears twice, and 4 appears three times, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic can be used to find the largest integer that meets the condition.\n", "requirement analysis:\nThe requirements involve calculating the time to type a word based on the positions of the keys on a keyboard. Each test case involves a keyboard layout and a word to be typed. The goal is to output the minimum time required to type the word using the given keyboard. This requires understanding the positions of the keys and calculating the movement time between keys.\nrequirement pool:\n- Implement a function to calculate the time to type a word based on keyboard layout.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the keyboard layout for minimal movement time.\n- Provide clear and concise output for each test case.\nTo solve this problem, we will use Python due to its simplicity and efficiency. The main challenge is to calculate the time required to type a word based on the positions of the keys on the keyboard. We will create a function that takes the keyboard layout and the word as input and returns the total time required to type the word efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': the arrangement of keys on the keyboard\n    'word typing': the process of inputting a sequence of characters\n    'position difference': the time taken to move the hand between keys is proportional to the difference in their positions\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n\n# [edge case] \n    No edge case provided in the plan\n\n# [extra code for edge case]\n    No extra code needed for edge cases as the logic is clear and straightforward.\n\n# [core concept]\n    'keyboard layout': the arrangement of keys on the keyboard\n    'word typing': the process of inputting a sequence of characters\n    'position difference': the time taken to move the hand between keys is proportional to the difference in their positions\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n\n# [edge case] \n    No edge case provided in the plan\n\n# [extra code for edge case]\n    No extra code needed for edge cases as the logic is clear and straightforward.\n", "requirement analysis:\nThe requirements involve calculating the time to type a word based on the positions of letters on a keyboard. Each letter's position is determined by its order in the alphabet, and the time to move from one letter to another is the absolute difference in their positions. The challenge is to efficiently compute this for multiple test cases.\nrequirement pool:\n- Implement a function to calculate the time to type a word based on keyboard layout.\n- Handle multiple test cases efficiently.\n- Ensure the solution is optimized for both time and space complexity.\n- Provide clear and concise output for each test case.\nTo solve this problem, we will use Python due to its simplicity and efficiency. The main challenge is to calculate the time required to type a word based on the positions of letters on a keyboard. We will create a function that takes the keyboard layout and the word as input and returns the total time required to type the word efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': the arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: In this problem, the keyboard layout is given as a string of 26 characters, each representing a key on the keyboard. The goal is to calculate the time required to type a word based on the positions of these keys.\n\n# [phrase showing quantity relationship]\n    'as many times': means the frequency or number of occurrences of an element.\n    Explanation: In the requirement, the phrase \"appears at least as many times as the integer itself\" indicates that we need to find an integer in the list that appears at least as many times as its value.\n\n# [degree adverb] \n    'largest': means the biggest or greatest in value or size.\n    Explanation: The degree adverb 'largest' in the requirement suggests that we need to find the largest integer that meets the condition of appearing at least as many times as itself.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to:\n    1. Create a dictionary to store the frequency of each letter in the keyboard.\n    2. Iterate through the list to update the frequency of each letter.\n    3. Iterate through the dictionary to find the largest integer that appears at least as many times as itself.\n    4. Return the result or -1 if no such integer exists.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the number 3 appears three times, which is more than or equal to its value. It is the largest number that meets the condition.\n    search([2, 2, 3, 3, 3]) = 3\n    Explanation: Both 2 and 3 appear more than or equal to their values, but 3 is the largest number.\n    search([3, 3, 2, 4, 4, 4]) = -1\n    Explanation: None of the numbers 2, 3, or 4 appear more than or equal to their values, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic can handle cases where no integer meets the condition by returning -1.\n", "requirement analysis:\nThe requirements involve calculating the time required to type a given word on a keyboard where each key's position corresponds to a specific letter. The challenge is to determine the optimal path for typing the word, considering the distance between keys. This requires understanding the positional relationship between each letter on the keyboard and calculating the total movement time based on the sequence of letters in the word.\nrequirement pool:\n- Implement a function to calculate the time required to type a word based on keyboard layout.\n- Ensure the function can handle multiple test cases efficiently.\n- Optimize the function to minimize the total movement time for typing a word.\n- Allow the function to be easily integrated into other applications.\nTo solve this problem, we will use Python due to its simplicity and efficiency. The main challenge is to calculate the total time required to type a word based on the given keyboard layout. We will create a function that takes the keyboard layout and the word as input and returns the total time. The function will iterate through each letter in the word, find its position on the keyboard, and calculate the time based on the difference in positions between consecutive letters.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: In this problem, the keyboard is given as a string of 26 characters, each representing a key. The goal is to calculate the time required to type a word on this keyboard efficiently.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates that the number of times a letter appears in the word is greater than the letter itself.\n    Explanation: For example, in the requirement, \"Return the largest integer that is more than zero and appears at least as many times as the integer itself,\" the phrase 'more than' is used to specify that the integer must be greater than zero and its frequency must be at least as much as its value.\n\n# [degree adverb] \n    'largest': Indicates the maximum value that meets the condition of appearing more than itself.\n    Explanation: In the requirement, \"If no such a value exist, return -1,\" the degree adverb 'largest' is used to specify that we are looking for the biggest integer that satisfies the condition.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to:\n    1. Create a dictionary to map each letter to its position on the keyboard.\n    2. Iterate through the word, calculate the time to type each letter based on its position and the position of the previous letter.\n    3. Sum up the times for all letters to get the total time.\n\n# [edge case] \n    search([4, 1, 2, 2, 3, 1]) = 2\n    Explanation: The input list contains the integers 4, 1, 2, 2, 3, 1. The integer 2 appears twice, which is more than its value (2). The largest integer that appears more than itself is 2.\n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: The input list contains the integers 1, 2, 2, 3, 3, 3, 4, 4, 4. The integer 3 appears three times, which is more than its value (3). The largest integer that appears more than itself is 3.\n    search([5, 5, 4, 4, 4]) = -1\n    Explanation: The input list contains the integers 5, 5, 4, 4, 4. The integer 4 appears three times, but it is not the largest integer that appears more than itself. There is no integer that appears more than itself, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic can handle cases where no integer appears more than itself by returning -1.\n", "requirement analysis:\nThe requirements specify the need to calculate the typing time for a given word on a specific keyboard. The keyboard is represented by a string of 26 lowercase Latin letters, and the word to be typed is also in lowercase Latin letters. The typing time is calculated based on the positions of the letters in the keyboard and the order in which they are typed.\nrequirement pool:\n- Implement a function to calculate typing time based on keyboard layout and word.\n- Ensure the function can handle up to 1000 test cases efficiently.\n- Provide clear and concise output for each test case.\n- Allow the function to be easily integrated into other applications.\n- Optimize the algorithm for performance, especially for long words and large numbers of test cases.\nTo implement the typing time calculator efficiently, we will use Python due to its simplicity and efficiency. The main challenge is to map each letter to its position on the keyboard and calculate the time based on the positions of consecutive letters. We will use a dictionary to store the positions of the keys for quick lookup. The function will iterate through the word, calculating the time based on the positions of the letters in the keyboard.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: The keyboard is a sequence of 26 keys, each representing a letter from 'a' to 'z'. The order of these keys determines the positions of the letters on the keyboard.\n\n# [phrase showing quantity relationship]\n    'as many times': Indicates the frequency with which a letter appears in the word.\n    Explanation: For example, if a letter appears 'n' times in the word, it means that the letter must be typed 'n' times consecutively.\n\n# [degree adverb] \n    'minimal': Refers to the shortest time required to type the word.\n    Explanation: The goal is to find the minimum time needed to type the word by considering the positions of the letters on the keyboard.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the typing time calculator, we need to:\n    1. Create a dictionary to map each letter to its position on the keyboard.\n    2. Iterate through the word, calculating the time based on the positions of consecutive letters.\n    3. Sum the absolute differences between the positions of consecutive letters to get the total typing time.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the list is [1, 2, 2, 3, 3, 3, 4, 4, 4]. The largest integer that appears at least as many times as itself is 3, as it appears 3 times, which is equal to its value.\n    search([5, 5, 4, 4, 4]) = -1\n    Explanation: The list is [5, 5, 4, 4, 4]. The integers 5 and 4 appear more than or equal to their values, but the largest integer is 5, which appears 2 times, not greater than or equal to its value. Therefore, the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic can handle cases where no integer appears at least as many times as itself by returning -1.\n\n## Prompt 3:\n[requirement]\nYou are given a keyboard that consists of 26 keys. The keys are arranged sequentially in one row in a certain order. Each key corresponds to a unique lowercase Latin letter. You have to type the word s on this keyboard. It also consists only of lowercase Latin letters. To type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it. Moving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word. For example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". Determine how long it will take to print the word s. Your task is to implement a function that calculates this typing time efficiently. Input The first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. The next 2t lines contain descriptions of the test cases. The first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard. The second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters. Output Print t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n[plan]\nTo implement the typing time calculator efficiently, we will use Python due to its simplicity and efficiency. The main challenge is to map each letter to its position on the keyboard and calculate the time based on the positions of consecutive letters. We will use a dictionary to store the positions of the keys for quick lookup. The function will iterate through the word, calculating the time based on the positions of the letters in the keyboard.\n\n## Answer 3:\n\n# [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: The keyboard is a sequence of 26 keys, each representing a letter from 'a' to 'z'. The order of these keys determines the positions of the letters on the keyboard.\n\n# [phrase showing quantity relationship]\n    'consecutive': Indicates that letters in the word appear one after another on the keyboard.\n    Explanation: For example, if the word is \"hello\", the letters 'h', 'e', 'l', 'l', and 'o' must be typed consecutively on the keyboard.\n\n# [degree adverb] \n    'minimal': Refers to the shortest time required to type the word.\n    Explanation: The goal is to find the minimum time needed to type the word by considering the positions of the letters on the keyboard.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the typing time calculator, we need to:\n    1. Create a dictionary to map each letter to its position on the keyboard.\n    2. Iterate through the word, calculating the time based on the positions of consecutive letters.\n    3. Sum the absolute differences between the positions of consecutive letters to get the total typing time.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the list is [1, 2, 2, 3, 3, 3, 4, 4, 4]. The largest integer that appears at least as many times as itself is 3, as it appears 3 times, which is equal to its value.\n    search([5, 5, 4, 4, 4]) = -1\n    Explanation: The list is [5, 5, 4, 4, 4]. The integers 5 and 4 appear more than or equal to their values, but the largest integer is 5, which appears 2 times, not greater than or equal to its value. Therefore, the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic can handle cases where no integer appears at least as many times as itself by returning -1.\n"], "scores": [], "pass_results": [true, true, true, true, true, true, false, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 9, "round": 816, "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "mutate_method": "add_1_sentence_at_end", "parent_index": 12}
