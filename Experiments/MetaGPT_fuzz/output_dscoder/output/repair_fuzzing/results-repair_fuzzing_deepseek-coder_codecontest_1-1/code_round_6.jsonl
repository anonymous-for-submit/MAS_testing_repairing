{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing. He possesses a collection of songs of varying durations. Specifically, he has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing. He possesses a collection of songs of varying durations. Specifically, he has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has a collection of songs with different lengths. He has a certain number of one-minute songs, b two-minute songs, and c three-minute songs. He wants to divide all these songs into two concerts, making sure each song is in exactly one concert. Luntik aims to minimize the difference in the total duration between the two concerts. The duration of a concert is the total time of all songs in it. Can you help Luntik find the smallest possible difference in minutes between the concert durations?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has a collection of songs with varying durations: a one-minute songs, b two-minute songs, and c three-minute songs. He wants to distribute all songs into two concerts such that each song is included in exactly one concert, aiming to minimize the absolute difference in the durations of the concerts. Find the smallest possible difference in minutes between the concert durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\nimport sys\n\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Finds the minimal possible difference in durations between two concerts.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    total_duration = a * 1 + b * 2 + c * 3\n    min_diff = float('inf')\n\n    # Iterate through all possible splits of the songs\n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                if i + j + k <= total_duration // 2:\n                    duration1 = i * 1 + j * 2 + k * 3\n                    duration2 = total_duration - duration1\n                    diff = abs(duration1 - duration2)\n                    min_diff = min(min_diff, diff)\n\n    return min_diff\n\n# Read the number of test cases\nt = int(input().strip())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().strip().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\nimport sys\n\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Finds the minimal possible difference in minutes between the concerts durations.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    total_duration = a * 1 + b * 2 + c * 3\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of songs in the first concert\n    for i in range(c + 1):\n        for j in range(b + 1):\n            first_concert_duration = i * 3 + j * 2\n            second_concert_duration = total_duration - first_concert_duration\n            diff = abs(first_concert_duration - second_concert_duration)\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input().strip())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().strip().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    # Calculate the ideal duration for each concert\n    ideal_duration = total_duration // 2\n    \n    # Sort the songs by their durations in descending order\n    songs = [(1, a), (2, b), (3, c)]\n    songs.sort(key=lambda x: x[0], reverse=True)\n    \n    # Initialize the minimal difference\n    min_diff = float('inf')\n    \n    # Try all possible distributions of songs between two concerts\n    for i in range(2):  # There are only two possible distributions: (i, 1-i)\n        duration_i = 0\n        duration_1_i = 0\n        for j in range(3):\n            if (i + j) % 2 == 0:\n                duration_i += songs[j][0] * songs[j][1]\n            else:\n                duration_1_i += songs[j][0] * songs[j][1]\n        \n        # Calculate the difference for this distribution\n        diff = abs(duration_i - duration_1_i)\n        # Update the minimal difference\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_min_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Brute-force approach to try all possible combinations of songs in the two concerts\n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                if i + j + k <= total_duration // 2:\n                    duration1 = i + 2 * j + 3 * k\n                    duration2 = total_duration - duration1\n                    min_diff = min(min_diff, abs(duration1 - duration2))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_min_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\nimport sys\n\ndef find_minimal_difference(a, b, c):\n    total_duration = a + 2 * b + 3 * c\n    min_diff = float('inf')\n\n    # Try all combinations of distributing the songs\n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                if i + j + k <= a + b + c and abs((total_duration - (i + 2 * j + 3 * k)) - (i + 2 * j + 3 * k)) < min_diff:\n                    min_diff = abs((total_duration - (i + 2 * j + 3 * k)) - (i + 2 * j + 3 * k))\n\n    return min_diff\n\n# Read input\nt = int(input().strip())\nfor _ in range(t):\n    a, b, c = map(int, input().strip().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_min_difference(a, b, c):\n    \"\"\"\n    This function calculates the minimum possible difference in minutes between the durations of two concerts.\n    \n    Args:\n    a (int): Number of one-minute songs.\n    b (int): Number of two-minute songs.\n    c (int): Number of three-minute songs.\n    \n    Returns:\n    int: The minimum possible difference in minutes between the concert durations.\n    \"\"\"\n    total_duration = a + b * 2 + c * 3\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of songs in two concerts\n    for i in range(1 << (a + b + c)):\n        duration1 = 0\n        duration2 = 0\n        for j in range(a + b + c):\n            if i & (1 << j):\n                duration1 += (j % 3) + 1\n            else:\n                duration2 += (j % 3) + 1\n        min_diff = min(min_diff, abs(duration1 - duration2))\n    \n    return min_diff\n\n# Read the number of test cases\nn = int(input())\n\n# Process each test case\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    result = find_min_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\nimport sys\n\ndef calculate_minimal_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n        \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of distributing the songs into two concerts\n    for i in range(total_duration + 1):\n        # Calculate the duration of the first concert\n        first_concert_duration = i\n        # Calculate the duration of the second concert\n        second_concert_duration = total_duration - i\n        # Find the absolute difference between the two concert durations\n        diff = abs(first_concert_duration - second_concert_duration)\n        # Update the minimum difference if the current difference is smaller\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(sys.stdin.readline())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, sys.stdin.readline().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Finds the minimal possible difference in minutes between the durations of two concerts\n    given the number of one-minute, two-minute, and three-minute songs.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Try all possible distributions of songs into two concerts\n    for i in range(4):  # There are 4 possible ways to distribute the songs (0, 1, 2, or 3 songs in the first concert)\n        for j in range(4):\n            if i + j == 4:  # Ensure both concerts are filled\n                # Calculate the duration of the first concert\n                first_concert_duration = i * 1 + (i // 2) * 2 + (i // 3) * 3\n                # Calculate the duration of the second concert\n                second_concert_duration = total_duration - first_concert_duration\n                # Calculate the absolute difference\n                diff = abs(first_concert_duration - second_concert_duration)\n                # Update the minimal difference\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Sort the durations of the songs\n    durations = [a, b, c]\n    durations.sort()\n    \n    # Distribute the songs into two concerts\n    first_concert = durations[0] + durations[1]\n    second_concert = durations[2]\n    \n    # Calculate the absolute difference\n    return abs(first_concert - second_concert)\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Finds the minimal possible difference in minutes between the durations of the two concerts.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    total_duration = a * 1 + b * 2 + c * 3\n    min_diff = float('inf')\n    \n    # Iterate through possible splits using binary search for optimization\n    for i in range(total_duration + 1):\n        duration1 = i\n        duration2 = total_duration - i\n        diff = abs(duration1 - duration2)\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff\n\n# Read input and output results\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n"], "plans": ["requirement analysis:\nThe problem requires finding the minimal possible difference in durations between two concerts where songs of different durations are distributed. The solution involves calculating the total duration of all songs and then finding the closest possible split that minimizes the difference. This can be achieved by iterating through possible splits and calculating the differences.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Implement a function to find the minimal possible difference in durations between two concerts.\n- Ensure the solution is efficient and can handle large inputs within reasonable time limits.\n- Provide clear and concise output for each test case.\nTo solve the problem of finding the minimal possible difference in durations between two concerts, we will use a simple and efficient approach. We will first calculate the total duration of all songs. Then, we will iterate through possible splits and calculate the differences to find the minimal possible difference.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': the act of dividing or distributing items or amounts into separate groups or portions.\n    Explanation: In this problem, Luntik needs to distribute his songs into two concerts such that each song is included in exactly one concert. The goal is to minimize the absolute difference in the total duration of the two concerts.\n\n# [phrase showing quantity relationship]\n    'as small as possible': means that we need to find the smallest possible difference between the two concert durations.\n\n# [degree adverb] \n    'as small as possible': indicates that we are looking for the smallest difference, which is the minimal possible difference.\n\n# [code logic]\n    To solve this problem, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Iterate through possible splits of the songs into two concerts.\n    3. For each split, calculate the duration of each concert.\n    4. Compute the absolute difference between the two concert durations.\n    5. Track the smallest absolute difference found.\n    6. Return the smallest absolute difference.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The total duration is 1*1 + 2*1 + 3*1 = 6 minutes. The best way to split these songs is to put one song of each duration in each concert, resulting in concert durations of 3 and 3 minutes. The absolute difference is 0.\n    Expected output: 0\n\n    Edge case 2:\n    Input: a = 10, b = 0, c = 0\n    Explanation: There are only one-minute songs. The total duration is 1*10 = 10 minutes. The best way to split these songs is to put all of them in one concert, resulting in a duration of 10 minutes. The other concert will be empty, resulting in a duration of 0 minutes. The absolute difference is 10.\n    Expected output: 10\n\n    Edge case 3:\n    Input: a = 1, b = 2, c = 3\n    Explanation: There are one one-minute song, two two-minute songs, and three three-minute songs. The total duration is 1*1 + 2*2 + 3*3 = 14 minutes. A good split could be to put the one-minute and two-minute songs in one concert (duration 5 minutes) and the three-minute songs in the other concert (duration 9 minutes). The absolute difference is 4.\n    Expected output: 4\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can handle all cases, including when there are no songs of a certain duration.\n", "requirement analysis:\nThe problem requires a solution that can distribute songs into two concerts with the goal of minimizing the difference in their durations. This involves a balance between the number of one-minute, two-minute, and three-minute songs. The solution should be efficient and able to handle large inputs efficiently. The output should be accurate and clear for each test case.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in concert durations\n- Ensure the solution can handle up to 1000 test cases\n- Optimize the algorithm for large inputs\n- Provide clear and accurate output for each test case\n- Ensure the solution is user-friendly and easy to use\nTo solve this problem efficiently, we will use a dynamic programming approach to find the optimal distribution of songs into two concerts. The goal is to minimize the absolute difference in the durations of the two concerts. We will iterate through all possible combinations of songs and calculate the difference for each combination. The minimum difference found will be our answer.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': the process of dividing a collection into two or more parts or groups.\n    Explanation: In this problem, Luntik needs to distribute his songs into two concerts such that the absolute difference in the durations of the concerts is minimized. Each song has a specific duration, and the goal is to balance the total duration of the songs in each concert as evenly as possible.\n\n# [phrase showing quantity relationship]\n    'as small as possible': means that we need to find the minimal possible difference in minutes between the concerts durations.\n\n# [degree adverb] \n    'as small as possible': means that we need to find the minimal possible difference in minutes between the concerts durations.\n\n# [code logic]\n    To solve this problem, we need to consider all possible distributions of songs into two concerts and calculate the difference for each distribution. The minimal difference found will be the answer.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    Explanation: In this case, Luntik can distribute the songs in such a way that both concerts have the same duration (1 + 1 + 1 = 3 minutes each). The difference is 0.\n    search([1, 2, 3]) = 1\n    Explanation: Luntik can include one one-minute song and two three-minute songs in one concert, and one two-minute song and one three-minute song in the other concert. The durations will be 6 and 5 minutes, respectively, and the difference is |6 - 5| = 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The given logic can handle the case where all songs have the same duration by distributing them evenly.\n\n# [core concept]\n    'absolute difference': the difference between two values without regard to which is larger.\n    Explanation: In this problem, the absolute difference is used to measure the difference in durations between the two concerts. The goal is to minimize this difference.\n\n# [phrase showing quantity relationship]\n    'as many times as': means that the number of times a value appears in a list is at least equal to the value itself.\n\n# [degree adverb] \n    'as many times as': means that the number of times a value appears in a list is at least equal to the value itself.\n\n# [code logic]\n    To solve this problem, we need to find the largest integer in the list that appears at least as many times as itself. If no such integer exists, we return -1.\n\n# [edge case] \n    search([2, 2, 3, 3, 3]) = 3\n    Explanation: Both 2 and 3 appear more than or equal to their values, but 3 is the largest number among them.\n    search([3, 3, 2, 4, 4, 4]) = -1\n    Explanation: Number 2 appears one time, number 3 appears two times, and number 4 appears three times. None of them appear more than or equal to their values, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The given logic can handle the case where no integer meets the condition by returning -1.\n\n# [core concept]\n    'sliding window': a subarray of consecutive elements of an array.\n    Explanation: In this problem, we use a sliding window approach to find all occurrences of a substring within a string, including overlapping instances.\n\n# [phrase showing quantity relationship]\n    'more than': means that we need to find occurrences of the substring that are greater than zero.\n    'at least as many times as': means that we need to find occurrences of the substring that are at least equal to the length of the substring.\n\n# [degree adverb] \n    'more than': means that we need to find occurrences of the substring that are greater than zero.\n    'at least as many times as': means that we need to find occurrences of the substring that are at least equal to the length of the substring.\n\n# [code logic]\n    To solve this problem, we need to iterate through the original string using a sliding window approach and check if the current substring matches the input substring. If a match is found, we increment the counter variable.\n\n# [edge case] \n    how_many_times('', 'a') = 0\n    Explanation: Since the original string is empty, the substring cannot appear, so the expected output is 0.\n    how_many_times('abc', '') = 4\n    Explanation: '' appears four times in the original string. 'abc'.count('') = 4.\n\n# [extra code for edge case]\n    Extra code is needed to handle the edge case.\n        if not string:\n            return 0\n        elif not substring:\n            return len(string) + 1\n        (other code)\n", "requirement analysis:\nThe problem requires finding the optimal way to distribute songs into two concerts to minimize the absolute difference in their durations. This involves a balance between distributing songs evenly and considering their individual durations. The solution should be efficient enough to handle up to 1000 test cases, each with up to 10^9 songs.\nrequirement pool:\n- Implement a greedy algorithm to distribute songs between two concerts.\n- Ensure the algorithm can handle large inputs efficiently.\n- Provide a clear and concise output for each test case.\n- Test the performance of the algorithm with different input sizes.\nWe will implement a greedy algorithm to distribute songs between two concerts. The algorithm will first calculate the total duration of all songs and then attempt to balance the durations between the two concerts as evenly as possible. This will involve sorting the songs by their durations and then iteratively assigning songs to the two concerts to minimize the difference in their total durations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': The process of dividing items or amounts into two or more groups, typically for the purpose of organizing or managing them more efficiently.\n    Explanation: In this problem, Luntik needs to distribute his songs into two concerts such that the total duration of songs in each concert is as close as possible. This involves balancing the total duration of the two concerts.\n\n# [phrase showing quantity relationship]\n    'as small as possible': Indicates that the goal is to minimize the difference in duration between the two concerts.\n    Explanation: This phrase suggests that we need to find the minimal possible difference in minutes between the durations of the two concerts.\n\n# [degree adverb] \n    'as small as possible': Indicates the goal of minimizing the difference in duration between the two concerts.\n    Explanation: This adverb emphasizes the need to find the smallest possible difference in minutes between the durations of the two concerts.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan involves calculating the total duration of all songs and then distributing them into two concerts to minimize the difference in their total durations. This can be achieved by sorting the songs by their durations and then iteratively assigning songs to the two concerts.\n\n# [edge case] \n    Edge Case 1: t = 1, a = 1, b = 1, c = 1\n    Expected Output: 0\n    Explanation: In this case, there are three one-minute songs, three two-minute songs, and three three-minute songs. The optimal distribution would be to put one one-minute song, one two-minute song, and one three-minute song in each concert, resulting in a difference of 0 minutes between the two concerts.\n\n# [extra code for edge case]\n    We do not need extra code to handle this edge case. The given logic can handle the distribution of songs evenly when the counts are equal.\n\n# [edge case] \n    Edge Case 2: t = 1, a = 2, b = 2, c = 2\n    Expected Output: 2\n    Explanation: Here, we have two one-minute songs, two two-minute songs, and two three-minute songs. The optimal distribution would be to put one one-minute song, one two-minute song, and one three-minute song in one concert, and the remaining songs in the other concert. This results in a difference of 2 minutes between the two concerts.\n\n# [extra code for edge case]\n    We do not need extra code to handle this edge case. The given logic can handle the distribution of songs when the counts are not equal but still aim to minimize the difference.\n\n# [edge case] \n    Edge Case 3: t = 1, a = 10^9, b = 10^9, c = 10^9\n    Expected Output: 3*10^9\n    Explanation: In this case, we have a very large number of one-minute, two-minute, and three-minute songs. The optimal distribution would be to put all one-minute songs in one concert, all two-minute songs in the other concert, and all three-minute songs in the third concert. This results in a difference of 3*10^9 minutes between the two concerts.\n\n# [extra code for edge case]\n    We do not need extra code to handle this edge case. The given logic can handle the distribution of songs when the counts are very large, aiming to minimize the difference.\n", "requirement analysis:\nThe problem requires a solution that can handle multiple test cases efficiently, with each test case involving different numbers of songs of varying lengths. The solution should aim to minimize the difference in the total duration between the two concerts. The input size can be large, so the solution must be optimized for performance.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in minutes between the concerts durations.\n- Ensure the solution can handle multiple test cases efficiently.\n- Provide clear and accurate output for each test case.\n- Optimize the solution for handling large input sizes.\n- Enhance the user interface for better clarity and ease of use.\nTo solve this problem, we will use a simple and efficient approach that focuses on minimizing the difference in the total duration between the two concerts. We will calculate the total duration of all songs and then use a brute-force method to find the smallest possible difference by trying all possible combinations of songs in the two concerts. This approach is straightforward and should work well given the constraints of the problem.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'Minimizing the difference': The goal is to divide the songs into two concerts with the smallest possible difference in total duration.\n    Explanation: This involves finding a way to distribute the songs such that the sum of the durations in one concert is as close as possible to the sum of the durations in the other concert.\n\n# [phrase showing quantity relationship]\n    'one-minute': refers to songs that are 1 minute long.\n    'two-minute': refers to songs that are 2 minutes long.\n    'three-minute': refers to songs that are 3 minutes long.\n\n# [degree adverb] \n    'smallest possible': means the lowest difference between the two concert durations.\n\n# [code logic]\n    To implement the solution, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a brute-force approach to try all possible combinations of songs in the two concerts.\n    3. For each combination, calculate the difference in total duration between the two concerts.\n    4. Keep track of the smallest difference found.\n    5. Return the smallest difference.\n\n# [edge case] \n    Edge case 1:\n    Input: 1 1 1\n    Explanation: There are three songs of different lengths. The optimal way to divide them is to put one 1-minute and one 2-minute song in one concert, and the 3-minute song in the other. The difference in duration will be 0.\n    Expected output: 0\n\n    Edge case 2:\n    Input: 2 1 3\n    Explanation: There are two 1-minute songs, one 2-minute song, and three 3-minute songs. The optimal way to divide them is to put two 1-minute songs and one 2-minute song in one concert, and the remaining songs in the other. The difference in duration will be 1.\n    Expected output: 1\n\n# [extra code for edge case]\n    No extra code is needed for the given edge cases as the brute-force approach will naturally handle them. However, for larger inputs, optimizations or more efficient algorithms might be necessary to avoid excessive computation time.\n", "requirement analysis:\nThe problem requires a solution that can handle multiple test cases efficiently. Each test case involves determining the optimal way to divide songs into two concerts to minimize the difference in their total durations. The input consists of three integers representing the counts of one-minute, two-minute, and three-minute songs. The output should be the smallest possible difference in minutes between the durations of the two concerts.\nrequirement pool:\n- Implement a function to calculate the optimal concert division for each test case.\n- Ensure the solution can handle large input sizes efficiently.\n- Develop a clear and concise output format for each test case.\n- Include error handling for invalid inputs.\n- Optimize the algorithm for performance, especially for large inputs.\nTo solve this problem, we will use a simple and efficient approach that does not require complex algorithms or data structures. The key idea is to distribute the songs as evenly as possible between the two concerts. We will calculate the total duration of all songs and then find the smallest possible difference by trying different combinations of songs in the two concerts.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': the process of dividing items or amounts into parts or groups\n    'minimizing the difference': finding the smallest possible difference between two quantities\n\n# [phrase showing quantity relationship]\n    'one-minute': refers to songs that are 1 minute long\n    'two-minute': refers to songs that are 2 minutes long\n    'three-minute': refers to songs that are 3 minutes long\n\n# [degree adverb] \n    'smallest possible': the smallest difference between the durations of the two concerts\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    For each test case:\n    1. Calculate the total duration of all songs.\n    2. Determine the optimal way to distribute the songs to minimize the difference in duration between the two concerts.\n    3. Output the smallest possible difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: The total duration is 3 minutes. By including one one-minute song and one two-minute song in one concert, and the remaining one-minute song in the other, the difference is minimized to 0.\n    search([1, 1, 3]) = 1\n    explanation: The total duration is 7 minutes. By including one one-minute song, one two-minute song, and one three-minute song in one concert, and the remaining two three-minute songs in the other, the difference is 1 minute.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to find the smallest possible difference for any given test case.\n", "requirement analysis:\nThe problem requires a solution that can handle multiple test cases efficiently. Each test case provides the number of one-minute, two-minute, and three-minute songs. The goal is to find the smallest possible difference in the total duration between the two concerts. The solution should be able to handle large numbers and provide accurate results for each test case.\nrequirement pool:\n- Implement a function to calculate the total duration of songs for each test case.\n- Develop a method to minimize the difference in concert durations.\n- Ensure the solution can handle multiple test cases efficiently.\n- Provide clear and accurate output for each test case.\nTo solve this problem, we will use a simple and efficient approach that involves calculating the total duration of all songs and then finding the best way to divide them into two concerts to minimize the difference in their durations. We will use Python's built-in functions and a brute-force method to iterate through possible combinations of songs to find the optimal solution.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'Minimize the difference': The goal is to find the smallest possible difference in the total duration between the two concerts.\n    'Total duration': The sum of the durations of all songs.\n    'Divide into two concerts': Each song must be in exactly one concert.\n\n# [phrase showing quantity relationship]\n    No specific phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    To solve this problem, we need to calculate the total duration of all songs and then find the best way to divide them into two concerts to minimize the difference in their durations. Here's a step-by-step approach:\n    1. Calculate the total duration of all songs.\n    2. Use a brute-force method to iterate through possible combinations of songs to find the optimal solution.\n    3. For each test case, find the smallest possible difference in the total duration between the two concerts.\n\n# [edge case] \n    Edge case 1:\n    Input: 1 1 1\n    Explanation: The total duration is 1 + 1 + 1 = 3. The best way to divide the songs is to put one one-minute song and one two-minute song in one concert, and the three-minute song in the other concert. The difference will be |2 - 3| = 1.\n    \n    Edge case 2:\n    Input: 2 2 2\n    Explanation: The total duration is 2 + 2 + 2 = 6. The best way to divide the songs is to put two one-minute songs and one two-minute song in one concert, and the remaining two two-minute songs and two two-minute songs in the other concert. The difference will be |4 - 6| = 2.\n    \n    Edge case 3:\n    Input: 1 1 2\n    Explanation: The total duration is 1 + 1 + 2 = 4. The best way to divide the songs is to put one one-minute song and one two-minute song in one concert, and the remaining two two-minute songs and two two-minute songs in the other concert. The difference will be |2 - 4| = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The brute-force method will naturally handle all possible combinations and find the optimal solution.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts to minimize the absolute difference in their durations. This involves a combinatorial optimization problem where the goal is to balance the total duration of the songs in each concert. The solution should be efficient and handle large inputs within reasonable time limits.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in minutes between the concerts durations.\n- Ensure the solution can handle up to 1000 test cases.\n- Optimize the algorithm to handle large inputs efficiently.\n- Provide clear and accurate output for each test case.\n- Ensure the program is user-friendly and easy to use.\nTo solve this problem, we will use a simple brute-force approach to iterate through all possible combinations of distributing the songs into two concerts. This approach will be efficient enough to handle the given constraints. We will calculate the total duration for each possible combination and then find the minimum absolute difference between the two concerts.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': the process of dividing a collection into two or more parts or groups.\n    Explanation: In this context, the core concept is about distributing songs into two concerts to minimize the absolute difference in their durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the solution, we need to consider the following steps:\n    1. Calculate the total duration of all songs.\n    2. Iterate through all possible combinations of distributing the songs into two concerts.\n    3. For each combination, calculate the duration of each concert.\n    4. Find the minimum absolute difference between the two concert durations.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    Explanation: In this case, Luntik can distribute the songs such that both concerts have the same duration (1 + 1 + 1 = 3 minutes each). The difference is |3 - 3| = 0.\n    search([1, 2, 3]) = 1\n    Explanation: The optimal distribution is to put one one-minute song and one two-minute song in one concert, and the three-minute song in the other. The durations are 1 + 2 = 3 minutes and 3 minutes, respectively. The difference is |3 - 3| = 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will work correctly for the edge case where the number of songs of each duration is the same.\n", "requirement analysis:\nThe primary requirement is to find the optimal way to distribute songs into two concerts to minimize the absolute difference in their durations. This involves a combinatorial approach to try different distributions and calculate the differences. The solution should be efficient and capable of handling a large number of test cases within the given constraints.\nrequirement pool:\n- Implement a function to calculate the optimal distribution of songs.\n- Ensure the solution can handle up to 1000 test cases.\n- Optimize the algorithm for efficiency.\n- Provide detailed explanations for the distribution logic.\nTo solve this problem, we will use a combinatorial approach to try different distributions of songs into two concerts and calculate the absolute difference in their durations. We will iterate through all possible distributions and keep track of the smallest difference found. Given the constraints, we will ensure our solution is efficient and can handle up to 1000 test cases.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': the process of dividing a collection into two or more parts or groups.\n    Explanation: In this problem, Luntik needs to distribute his songs into two concerts such that each song is included in exactly one concert. The goal is to minimize the absolute difference in the durations of the concerts.\n\n# [phrase showing quantity relationship]\n    'as many times as': means that the number of times a song appears in a concert is equal to its duration.\n    Explanation: For example, if Luntik includes a one-minute song in a concert, the total duration of that concert will be 1 minute.\n\n# [degree adverb] \n    'minimal possible': means the smallest possible difference in the durations of the concerts.\n    Explanation: Luntik wants to find the smallest absolute difference between the durations of the two concerts.\n\n# [code logic]\n    To solve this problem, we need to iterate through all possible distributions of songs into two concerts and calculate the absolute difference in their durations. We will try to balance the distribution as much as possible by assigning songs to concerts in a way that minimizes the difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    Explanation: In this case, Luntik can distribute the songs such that both concerts have the same duration (1 + 1 + 1 = 3 minutes each). The difference is |3 - 3| = 0.\n    search([2, 2, 3]) = 1\n    Explanation: Luntik can distribute the songs such that one concert has a duration of 2 + 2 + 3 = 7 minutes, and the other has a duration of 6 minutes. The difference is |7 - 6| = 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly handle cases where the number of songs is small and can be easily distributed to achieve zero difference. For larger numbers, the logic will still apply, but the distribution will be more complex and may require additional steps to ensure the smallest possible difference.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts to minimize the absolute difference in their durations. This can be approached by trying to balance the total duration of the songs in each concert. The optimal distribution can be found by considering the total duration and distributing the songs as evenly as possible. The solution should be efficient and handle large inputs within reasonable time limits.\nrequirement pool:\n- Implement an efficient algorithm to distribute songs into two concerts\n- Ensure the solution can handle up to 1000 test cases\n- Provide clear and concise output for each test case\n- Optimize the algorithm for large inputs\n- Improve the user interface for better user experience\nTo solve this problem efficiently, we will use a greedy approach to distribute the songs into two concerts. The goal is to minimize the absolute difference in the durations of the concerts. We will sort the songs by their durations and then try to balance the total duration of the songs in each concert. This approach ensures that we are trying to distribute the songs as evenly as possible, which will lead to the smallest possible difference in the concert durations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups such that the total duration of each group is as close as possible.\n    Explanation: The goal is to minimize the absolute difference in the durations of the concerts, which means balancing the total duration of the songs between the two concerts as much as possible.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To solve this problem efficiently, we will use a greedy approach to distribute the songs into two concerts. The goal is to minimize the absolute difference in the durations of the concerts. We will sort the songs by their durations and then try to balance the total duration of the songs in each concert. This approach ensures that we are trying to distribute the songs as evenly as possible, which will lead to the smallest possible difference in the concert durations.\n\n# [edge case] \n    test case 1:\n    Input: a = 1, b = 1, c = 1\n    Expected output: 0\n    Explanation: Luntik can include one one-minute song and one two-minute song into the first concert, and one three-minute song into the second concert. The difference will be 0.\n\n    test case 2:\n    Input: a = 2, b = 1, c = 2\n    Expected output: 1\n    Explanation: Luntik can include two one-minute songs and one two-minute song and one three-minute song into the first concert, and two three-minute songs into the second concert. The difference will be 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The greedy approach will naturally handle cases where the number of songs of each duration is equal or nearly equal.\n", "requirement analysis:\nThe problem requires a method to distribute songs into two concerts to minimize the absolute difference in their durations. This can be approached by first calculating the total duration of all songs and then finding a way to split the songs into two groups such that the sum of durations in each group is as close as possible to half of the total duration. This is a classic optimization problem that can be solved using a greedy approach or dynamic programming.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a method to distribute songs into two groups to minimize the difference in their durations.\n- Ensure the solution is efficient and can handle large inputs within a reasonable time frame.\n- Provide a user-friendly interface for easy interaction.\nTo solve this problem efficiently, we will use a greedy approach to distribute the songs into two concerts. The goal is to minimize the absolute difference in the durations of the concerts. We will first calculate the total duration of all songs and then use a binary search approach to find the closest possible split that minimizes the difference.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': The process of dividing items or amounts into two groups or parts.\n    Explanation: In this problem, Luntik has a collection of songs with different durations. He wants to distribute these songs into two concerts such that each song is included in exactly one concert. The goal is to minimize the absolute difference in the total duration of the two concerts.\n\n# [phrase showing quantity relationship]\n    'varying durations': Indicates that the songs have different lengths.\n    Explanation: This phrase indicates that the number of one-minute, two-minute, and three-minute songs are different, which affects how they should be distributed to minimize the difference in concert durations.\n\n# [degree adverb] \n    'as small as possible': Means to make the difference as low as it can be.\n    Explanation: The requirement is to find the minimal possible difference in minutes between the durations of the two concerts. This means we need to find the best possible split of the songs to achieve the smallest absolute difference.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to consider the following steps:\n    1. Calculate the total duration of all songs.\n    2. Use a binary search approach to find the closest possible split that minimizes the difference.\n    3. Distribute the songs into two concerts based on the calculated split.\n    4. Calculate the absolute difference between the durations of the two concerts.\n\n# [edge case] \n    Test case: t = 1, a = 1, b = 1, c = 1\n    Expected output: 0\n    Explanation: In this case, there are three songs of each duration. The optimal distribution would be to put one one-minute song, one two-minute song, and one three-minute song in each concert. This results in two concerts with a total duration of 3 minutes each, leading to an absolute difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle this edge case. The given logic is sufficient to handle the scenario where all song counts are equal.\n\n# [core concept]\n    'greedy approach': A method of solving a problem by selecting the best option at each step, without regard for the overall consequences.\n    Explanation: The greedy approach is used here to minimize the absolute difference in concert durations by distributing the songs in a way that balances the total duration of the two concerts as evenly as possible.\n\n# [phrase showing quantity relationship]\n    'exactly one concert': Indicates that each song must be included in exactly one of the two concerts.\n    Explanation: This phrase ensures that all songs are accounted for in the distribution process, and each song is only counted once.\n\n# [degree adverb] \n    'as evenly as possible': Means to distribute the songs in a balanced manner.\n    Explanation: The requirement is to find the minimal possible difference in minutes between the durations of the two concerts, which implies that the distribution should be as balanced as possible.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to consider the following steps:\n    1. Calculate the total duration of all songs.\n    2. Use a greedy approach to distribute the songs into two concerts, prioritizing the distribution of songs with the smallest durations first to balance the total duration.\n    3. Calculate the absolute difference between the durations of the two concerts.\n\n# [edge case] \n    Test case: t = 1, a = 10, b = 0, c = 0\n    Expected output: 5\n    Explanation: In this case, all songs are one-minute songs. The optimal distribution would be to put all ten one-minute songs in one concert and none in the other. This results in one concert with a total duration of 5 minutes and the other with 0 minutes, leading to an absolute difference of 5.\n\n# [extra code for edge case]\n    We do not need extra code to handle this edge case. The given logic is sufficient to handle the scenario where one type of song dominates the collection.\n\n# [core concept]\n    'binary search': A search algorithm that finds the position of a target value within a sorted array.\n    Explanation: The binary search approach is used here to efficiently find the closest possible split of the songs to minimize the difference in concert durations.\n\n# [phrase showing quantity relationship]\n    'all songs': Indicates that the distribution process involves all available songs.\n    Explanation: This phrase ensures that all songs are considered in the distribution process, and no song is left out.\n\n# [degree adverb] \n    'as quickly as possible': Means to find the solution in the least amount of time.\n    Explanation: The binary search approach is used to find the optimal split as quickly as possible, ensuring an efficient solution to the problem.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to consider the following steps:\n    1. Calculate the total duration of all songs.\n    2. Use a binary search approach to find the closest possible split that minimizes the difference.\n    3. Distribute the songs into two concerts based on the calculated split.\n    4. Calculate the absolute difference between the durations of the two concerts.\n\n# [edge case] \n    Test case: t = 1, a = 1, b = 2, c = 3\n    Expected output: 1\n    Explanation: In this case, the optimal distribution would be to put one one-minute song, one two-minute song, and one three-minute song in one concert, and the remaining two-minute and three-minute songs in the other concert. This results in two concerts with total durations of 6 and 5 minutes, leading to an absolute difference of 1.\n"], "scores": [], "pass_results": [true, true, true, false, false, false, false, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 6, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "expand_one2two", "parent_index": 6}
