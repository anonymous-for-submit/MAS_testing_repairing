{"name": "1622_E. Math Test", "description": "Petya is a math teacher. n of his students has written a test consisting of m questions. For each student, it is known which questions he has answered correctly and which he has not.\n\nIf the student answers the j-th question correctly, he gets p_j points (otherwise, he gets 0 points). Moreover, the points for the questions are distributed in such a way that the array p is a permutation of numbers from 1 to m.\n\nFor the i-th student, Petya knows that he expects to get x_i points for the test. Petya wonders how unexpected the results could be. Petya believes that the surprise value of the results for students is equal to \u2211_{i=1}^{n} |x_i - r_i|, where r_i is the number of points that the i-th student has got for the test.\n\nYour task is to help Petya find such a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 10; 1 \u2264 m \u2264 10^4) \u2014 the number of students and the number of questions, respectively.\n\nThe second line contains n integers x_1, x_2, ..., x_n (0 \u2264 x_i \u2264 (m(m+1))/(2)), where x_i is the number of points that the i-th student expects to get.\n\nThis is followed by n lines, the i-th line contains the string s_i (|s_i| = m; s_{i, j} \u2208 \\{0, 1\\}), where s_{i, j} is 1 if the i-th student has answered the j-th question correctly, and 0 otherwise.\n\nThe sum of m for all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case, print m integers \u2014 a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n010110\n000101\n111111\n\n\nOutput\n\n\n3 1 2 \n2 3 4 1 \n3 1 4 5 2 6 ", "tags": ["bitmasks", "brute force", "greedy"], "difficulty": 11, "id": 1622, "sample_io": [{"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n010110\n000101\n111111\n", "output": ["3 1 2 \n2 3 4 1 \n3 1 4 5 2 6 \n"]}], "test_list": [{"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n3 1 4 5 2 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n2 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0111\n0101\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n001\n100\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["3 2 1\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n8 3 2\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n1 4 2 6 3 5\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n100\n001\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 2 1\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n8 3 2\n010110\n100101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 4 1 6 2 5\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n13 3 2\n010110\n100101\n111101\n", "output": ["3 1 2\n2 3 4 1\n5 2 3 4 1 6\n"]}, {"input": "3\n4 3\n5 1 4 2\n111\n101\n101\n000\n4 4\n16 1 1 11\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n4 1 1 2\n101\n100\n000\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 2\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n2 1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n000110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n2 3 4 5 1 6\n"]}, {"input": "3\n4 3\n3 1 2 2\n110\n100\n101\n100\n4 4\n2 1 0 10\n1001\n0010\n0110\n0101\n3 6\n38 2 8\n010110\n000101\n111001\n", "output": ["3 1 2\n3 1 4 2\n4 2 5 3 1 6\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1101\n0010\n0110\n0101\n3 2\n20 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n2 1\n"]}, {"input": "3\n4 3\n5 1 1 0\n111\n000\n101\n010\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["1 2 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 7\n010110\n000001\n111111\n", "output": ["3 1 2\n2 3 4 1\n4 1 5 2 3 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1101\n0010\n0110\n0111\n3 6\n38 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n3 4 1 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n100\n4 4\n2 4 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 8\n010110\n000101\n111101\n", "output": ["3 1 2\n4 1 2 3\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n2 1 0 10\n1001\n0011\n0110\n0001\n3 6\n38 2 8\n010110\n000101\n111101\n", "output": ["3 1 2\n1 2 4 3\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n001\n110\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 4 7\n010110\n000101\n111101\n", "output": ["3 2 1\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1101\n0010\n0010\n0101\n3 2\n20 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n2 1\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n101\n000\n101\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["2 1 3\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n9 1 4 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 7\n010110\n000100\n111101\n", "output": ["3 1 2\n2 3 4 1\n4 3 5 1 2 6\n"]}, {"input": "3\n4 3\n1 1 2 2\n110\n100\n111\n100\n4 4\n6 2 0 10\n1001\n0011\n0111\n0101\n3 1\n20 3 2\n010110\n000101\n111011\n", "output": ["3 2 1\n1 2 4 3\n1\n"]}, {"input": "3\n4 3\n5 1 2 4\n110\n100\n001\n110\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 4 7\n010110\n000101\n111101\n", "output": ["2 1 3\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 4\n110\n100\n001\n110\n4 4\n0 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 4 7\n010110\n000101\n111101\n", "output": ["2 1 3\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n100\n4 4\n6 3 0 10\n1001\n0110\n0110\n0101\n3 6\n13 3 1\n010110\n100100\n111101\n", "output": ["3 1 2\n2 3 4 1\n6 2 3 4 1 5\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n1 2 0 10\n1101\n0010\n0100\n0111\n3 6\n38 3 7\n010110\n100101\n111101\n", "output": ["3 1 2\n3 4 1 2\n5 2 3 4 1 6\n"]}, {"input": "3\n4 3\n1 1 2 0\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0011\n0111\n0101\n3 1\n20 3 2\n011110\n000101\n111011\n", "output": ["3 1 2\n1 2 4 3\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n000\n4 4\n6 3 0 10\n0001\n0110\n0110\n0101\n3 6\n13 3 1\n010110\n100100\n111101\n", "output": ["2 1 3\n2 3 4 1\n6 2 3 4 1 5\n"]}, {"input": "3\n4 3\n5 1 3 4\n100\n100\n101\n100\n4 4\n12 2 0 10\n1001\n0010\n0111\n0101\n3 1\n20 3 4\n010110\n010101\n111111\n", "output": ["1 2 3\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n3 1 2 2\n110\n000\n100\n100\n4 4\n6 2 1 11\n1001\n0010\n0110\n0101\n3 6\n38 0 7\n110110\n000101\n111101\n", "output": ["3 2 1\n2 3 4 1\n2 3 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n000\n4 4\n6 3 0 1\n0001\n0110\n0110\n0101\n3 6\n13 3 1\n010110\n100100\n111101\n", "output": ["2 1 3\n1 4 3 2\n6 2 3 4 1 5\n"]}, {"input": "3\n4 3\n3 1 3 2\n110\n000\n100\n100\n4 4\n6 2 1 11\n1001\n0010\n0110\n0101\n3 6\n38 0 7\n110110\n000101\n111101\n", "output": ["1 3 2\n2 3 4 1\n2 3 4 5 1 6\n"]}, {"input": "3\n4 3\n0 1 2 1\n110\n100\n100\n101\n4 4\n2 2 0 13\n1101\n0110\n0110\n0101\n3 6\n38 3 12\n010110\n000001\n111101\n", "output": ["3 1 2\n2 3 4 1\n4 2 5 3 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0001\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n2 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 8\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n2 1 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 8\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n2 1 0 10\n1001\n0010\n0110\n0101\n3 6\n38 2 8\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 11\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n10 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n3 1 4 5 2 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1101\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 2\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n101\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 2 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0001\n3 1\n30 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n2 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 12\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 11\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n0 1 2 2\n110\n100\n101\n100\n4 4\n2 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 8\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0110\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0001\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n3 1 2 2\n110\n100\n101\n100\n4 4\n2 1 0 10\n1001\n0010\n0110\n0101\n3 6\n38 2 8\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 11\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1101\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n100\n001\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 2 1\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n1 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0111\n0101\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n101\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 0 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 4 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0001\n3 1\n30 0 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n2 3 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 12\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 4 2\n111\n100\n101\n000\n4 4\n11 1 0 11\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 1 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0001\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 17\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1101\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n1 1 2 2\n110\n101\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0111\n0101\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0001\n3 1\n30 1 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 4 2\n111\n100\n101\n000\n4 4\n11 1 1 11\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 1 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 0 2 2\n111\n100\n101\n000\n4 4\n11 1 0 17\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n100\n000\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 2 1\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 4 2\n111\n100\n101\n000\n4 4\n16 1 1 11\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 1 0\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 1 2\n101\n100\n000\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 2 1\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n13 3 2\n010110\n100101\n111101\n", "output": ["3 1 2\n2 3 4 1\n5 2 3 4 1 6\n"]}, {"input": "3\n4 3\n5 1 1 0\n111\n000\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n4 1 1 2\n101\n100\n000\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n4 1 1 2\n101\n100\n000\n100\n4 4\n6 1 0 10\n1001\n0010\n0100\n0100\n3 2\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n2 1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n3 1 4 5 2 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000001\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n1 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 4 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0111\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n011\n100\n101\n100\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1101\n0010\n0110\n0101\n3 6\n38 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 4\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0001\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n36 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n2 0 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n100\n4 4\n2 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 8\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n1101\n3 1\n34 3 7\n010110\n000101\n110111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 1\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n2 1 0 10\n1001\n0010\n0110\n0001\n3 6\n38 2 8\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 11\n1001\n0010\n0110\n0101\n3 1\n34 3 1\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n10 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 18\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n3 1 4 5 2 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1101\n0010\n0110\n0101\n3 1\n20 3 7\n010010\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n4 1 2 2\n101\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 1\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 2\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 4\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n101\n4 4\n11 1 0 10\n0001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n100\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 2 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n1 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0001\n3 1\n30 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n001\n100\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111101\n", "output": ["3 2 1\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n0 1 2 2\n110\n100\n101\n100\n4 4\n2 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 12\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 11\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n110110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n0 1 2 0\n110\n100\n101\n100\n4 4\n2 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 8\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0110\n0110\n0101\n3 1\n34 3 7\n110110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0001\n3 1\n54 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 11\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000101\n110101\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n100\n4 4\n1 1 0 10\n1101\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n100\n001\n100\n4 4\n6 1 0 10\n1001\n0110\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 2 1\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n1 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0111\n0101\n3 1\n20 3 2\n010110\n000101\n111011\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n101\n4 4\n11 1 0 4\n1001\n0010\n0110\n0101\n3 1\n20 0 7\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n110\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 4 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 4 2\n111\n100\n101\n000\n4 4\n4 1 0 11\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n000\n101\n000\n4 4\n11 1 0 17\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000101\n110111\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n100\n001\n100\n4 4\n6 1 0 10\n1001\n0110\n0110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 2 1\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n8 3 2\n010110\n100101\n110101\n", "output": ["3 1 2\n2 3 4 1\n3 4 1 6 2 5\n"]}, {"input": "3\n4 3\n1 1 2 2\n110\n101\n101\n100\n4 4\n6 2 0 10\n1001\n0000\n0111\n0101\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0010\n0001\n3 1\n30 1 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 4 2\n111\n100\n101\n000\n4 4\n11 1 1 11\n1001\n0010\n1110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 1 2\n111\n100\n101\n000\n4 4\n11 2 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 0 2 2\n111\n100\n101\n000\n4 4\n11 1 0 17\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000101\n110110\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n100\n000\n101\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n13 1 2\n010110\n100101\n111101\n", "output": ["3 1 2\n2 3 4 1\n5 2 3 4 1 6\n"]}, {"input": "3\n4 3\n5 1 1 0\n011\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 1 2\n101\n100\n000\n100\n4 4\n6 1 0 10\n1001\n0010\n1110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 2 1\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n100\n4 4\n6 2 0 10\n1001\n0110\n0110\n0101\n3 6\n13 3 2\n010110\n100101\n111101\n", "output": ["3 1 2\n2 3 4 1\n5 2 3 4 1 6\n"]}, {"input": "3\n4 3\n5 1 4 2\n111\n101\n101\n000\n4 4\n16 1 1 11\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111011\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n4 1 1 2\n101\n100\n000\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 6 7\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n1110\n0101\n3 6\n20 3 15\n000110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n2 3 4 5 1 6\n"]}, {"input": "3\n4 3\n2 1 2 2\n110\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n1 1\n20 3 7\n010110\n010101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n9 1 4 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n011\n100\n101\n101\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 4\n110\n101\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0001\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n36 3 7\n010100\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n100\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 1\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n10 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 18\n1001\n0010\n0110\n0101\n3 6\n20 3 0\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n3 1 4 5 2 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1101\n0010\n0100\n0101\n3 1\n20 3 7\n010010\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n4 1 2 2\n101\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n011110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 4\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 2\n010110\n010101\n111111\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n101\n4 4\n3 1 0 10\n0001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n100\n100\n4 4\n6 2 0 11\n1001\n0010\n0110\n0101\n3 6\n38 2 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n0 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0001\n3 1\n30 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n000\n100\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n0 1 2 2\n110\n100\n101\n100\n4 4\n2 2 0 17\n1001\n0010\n0110\n0101\n3 6\n38 3 12\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n0 1 2 0\n110\n100\n101\n100\n4 4\n2 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 6\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n2 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0110\n0110\n0101\n3 1\n34 3 7\n110110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n0 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0001\n3 1\n54 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n3 1 2 2\n010\n100\n101\n100\n4 4\n2 1 0 10\n1001\n0010\n0110\n0101\n3 6\n38 2 8\n010110\n000101\n111001\n", "output": ["3 1 2\n3 1 4 2\n4 2 5 3 1 6\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n000\n4 4\n11 1 0 11\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000101\n110101\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n100\n4 4\n1 2 0 10\n1101\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n1 1 2 2\n110\n100\n111\n100\n4 4\n6 2 0 10\n1001\n0010\n0111\n0101\n3 1\n20 3 2\n010110\n000101\n111011\n", "output": ["3 2 1\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n2 1 2 2\n111\n000\n101\n000\n4 4\n11 1 0 17\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000101\n110111\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n100\n001\n100\n4 4\n8 1 0 10\n1001\n0110\n0110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 2 1\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n010\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n8 3 2\n010110\n100101\n110101\n", "output": ["3 1 2\n2 3 4 1\n3 4 1 6 2 5\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0010\n0001\n3 1\n30 0 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 1 2\n111\n100\n101\n000\n4 4\n11 2 0 10\n1001\n0010\n0110\n0100\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 0 2 2\n111\n100\n101\n000\n4 4\n11 1 0 17\n1001\n0010\n0110\n0101\n2 1\n66 3 2\n010110\n000101\n110110\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 1 0\n011\n100\n111\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 1 2\n101\n100\n000\n100\n4 4\n6 1 0 10\n1001\n0010\n1110\n0100\n3 1\n20 0 7\n010110\n000101\n111111\n", "output": ["3 2 1\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n100\n4 4\n6 2 0 10\n1001\n0110\n0110\n0101\n3 6\n13 3 1\n010110\n100101\n111101\n", "output": ["3 1 2\n2 3 4 1\n5 2 3 4 1 6\n"]}, {"input": "3\n4 3\n5 2 4 2\n111\n101\n101\n000\n4 4\n16 1 1 11\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111011\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 0 1 0\n111\n000\n101\n010\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["1 2 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n4 1 1 2\n101\n100\n000\n101\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 6 7\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n6 1 0 17\n1001\n0010\n0110\n0101\n1 1\n20 3 7\n010110\n010101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 4 2\n011\n100\n101\n101\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1101\n0010\n0100\n0111\n3 6\n38 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n3 4 1 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n100\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0001\n3 1\n34 3 1\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 0\n110\n100\n101\n100\n4 4\n2 1 0 10\n1001\n0011\n0110\n0001\n3 6\n38 2 8\n010110\n000101\n111101\n", "output": ["3 1 2\n1 2 4 3\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n10 1 2 2\n110\n110\n101\n100\n4 4\n6 2 0 18\n1001\n0010\n0110\n0101\n3 6\n20 3 0\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n3 1 4 5 2 6\n"]}, {"input": "3\n4 3\n4 1 2 2\n101\n110\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n011110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 4\n100\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 2\n010110\n010101\n111111\n", "output": ["1 2 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n100\n100\n4 4\n6 2 1 11\n1001\n0010\n0110\n0101\n3 6\n38 2 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n4 1 2 2\n111\n100\n000\n100\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n0 1 2 2\n110\n100\n101\n100\n4 4\n2 2 0 17\n1001\n0110\n0110\n0101\n3 6\n38 3 12\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n2 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0110\n0110\n0101\n3 1\n34 3 7\n110110\n000100\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n0 1 2 2\n111\n100\n101\n000\n4 4\n4 1 0 10\n1001\n0010\n0110\n0001\n3 1\n54 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n3 1 2 2\n011\n100\n101\n100\n4 4\n2 1 0 10\n1001\n0010\n0110\n0101\n3 6\n38 2 8\n010110\n000101\n111001\n", "output": ["3 1 2\n3 1 4 2\n4 2 5 3 1 6\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n000\n4 4\n12 1 0 11\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000101\n110101\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n100\n4 4\n1 0 0 10\n1101\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n2 1 2 2\n111\n000\n101\n000\n4 4\n11 1 0 17\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000111\n110111\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n000\n4 4\n6 1 0 10\n1101\n0010\n0010\n0101\n3 2\n20 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n2 1\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n100\n001\n100\n4 4\n8 1 0 10\n1001\n0110\n0110\n0100\n3 1\n20 6 7\n010110\n000101\n111111\n", "output": ["3 2 1\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 4 2\n101\n101\n000\n101\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["2 1 3\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 1 0\n011\n100\n111\n000\n4 4\n20 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n100\n4 4\n6 3 0 10\n1001\n0110\n0110\n0101\n3 6\n13 3 1\n010110\n100101\n111101\n", "output": ["3 1 2\n2 3 4 1\n5 2 3 4 1 6\n"]}, {"input": "3\n4 3\n4 1 1 2\n101\n100\n000\n101\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 6 7\n010110\n000101\n111110\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n6 1 0 17\n1001\n0010\n0110\n0101\n1 1\n20 3 8\n010110\n010101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}], "task_id": "codecontest/158", "prompt": "Petya is a math teacher. n of his students has written a test consisting of m questions; it is known which questions each student has answered correctly and which he has not.\n\nIf the student answers the j-th question correctly, he gets p_j points (otherwise, he gets 0 points). Moreover, the points for the questions are distributed in such a way that the array p is a permutation of numbers from 1 to m.\n\nFor the i-th student, Petya knows that he expects to get x_i points for the test. Petya wonders how unexpected the results could be, as he believes the surprise value of the results for students is equal to \u2211_{i=1}^{n} |x_i - r_i|, where r_i is the number of points that the i-th student has got for the test.\n\nYour task is to help Petya find such a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 10; 1 \u2264 m \u2264 10^4) \u2014 the number of students and the number of questions, respectively.\n\nThe second line contains n integers x_1, x_2, ..., x_n (0 \u2264 x_i \u2264 (m(m+1))/(2)), where x_i is the number of points that the i-th student expects to get.\n\nThis is followed by n lines, the i-th line contains the string s_i (|s_i| = m; s_{i, j} \u2208 \\{0, 1\\}), where s_{i, j} is 1 if the i-th student has answered the j-th question correctly, and 0 otherwise.\n\nThe sum of m for all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case, print m integers \u2014 a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n010110\n000101\n111111\n\n\nOutput\n\n\n3 1 2 \n2 3 4 1 \n3 1 4 5 2 6 ", "repair_prompt": ["Petya is a math teacher. n of his students has written a test consisting of m questions; it is known which questions each student has answered correctly and which he has not.\n\nIf the student answers the j-th question correctly, he gets p_j points (otherwise, he gets 0 points). Moreover, the points for the questions are distributed in such a way that the array p is a permutation of numbers from 1 to m.\n\nFor the i-th student, Petya knows that he expects to get x_i points for the test. Petya wonders how unexpected the results could be, as he believes the surprise value of the results for students is equal to \u2211_{i=1}^{n} |x_i - r_i|, where r_i is the number of points that the i-th student has got for the test.\n\nYour task is to help Petya find such a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 10; 1 \u2264 m \u2264 10^4) \u2014 the number of students and the number of questions, respectively.\n\nThe second line contains n integers x_1, x_2, ..., x_n (0 \u2264 x_i \u2264 (m(m+1))/(2)), where x_i is the number of points that the i-th student expects to get.\n\nThis is followed by n lines, the i-th line contains the string s_i (|s_i| = m; s_{i, j} \u2208 \\{0, 1\\}), where s_{i, j} is 1 if the i-th student has answered the j-th question correctly, and 0 otherwise.\n\nThe sum of m for all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case, print m integers \u2014 a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n010110\n000101\n111111\n\n\nOutput\n\n\n3 1 2 \n2 3 4 1 \n3 1 4 5 2 6 \nWrite a main() function and use input() function to read input from stdin", " Petya is a math teacher. He has n students, and each student has written a test with m questions. The test results show which questions each student answered correctly. Each correct answer earns a certain number of points, and the points for the questions are given in a specific order, which is a permutation of numbers from 1 to m.\n\nPetya knows the expected score each student should achieve, and he wants to determine the maximum possible surprise value of the students' test results. The surprise value is calculated as the sum of the absolute differences between the expected score and the actual score each student received.\n\nYour\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 10; 1 \u2264 m \u2264 10^4) \u2014 the number of students and the number of questions, respectively.\n\nThe second line contains n integers x_1, x_2, ..., x_n (0 \u2264 x_i \u2264 (m(m+1))/(2)), where x_i is the number of points that the i-th student expects to get.\n\nThis is followed by n lines, the i-th line contains the string s_i (|s_i| = m; s_{i, j} \u2208 \\{0, 1\\}), where s_{i, j} is 1 if the i-th student has answered the j-th question correctly, and 0 otherwise.\n\nThe sum of m for all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case, print m integers \u2014 a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n010110\n000101\n111111\n\n\nOutput\n\n\n3 1 2 \n2 3 4 1 \n3 1 4 5 2 6 \nWrite a main() function and use input() function to read input from stdin", " Petya is a math teacher. n of his students have written a test with m questions, and he knows which questions each student answered correctly. Each correct answer earns a student p_j points, where p is a permutation of numbers from 1 to m. Petya wants to maximize the surprise value of the students' scores, defined as \u2211_{i=1}^{n} |x_i - r_i|, where x_i is the expected score and r_i is the actual score. Your task is to find a permutation p that maximizes this surprise value. If there are multiple solutions, provide\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 10; 1 \u2264 m \u2264 10^4) \u2014 the number of students and the number of questions, respectively.\n\nThe second line contains n integers x_1, x_2, ..., x_n (0 \u2264 x_i \u2264 (m(m+1))/(2)), where x_i is the number of points that the i-th student expects to get.\n\nThis is followed by n lines, the i-th line contains the string s_i (|s_i| = m; s_{i, j} \u2208 \\{0, 1\\}), where s_{i, j} is 1 if the i-th student has answered the j-th question correctly, and 0 otherwise.\n\nThe sum of m for all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case, print m integers \u2014 a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n010110\n000101\n111111\n\n\nOutput\n\n\n3 1 2 \n2 3 4 1 \n3 1 4 5 2 6 \nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\nfrom typing import List\n\ndef find_optimal_permutation(n: int, m: int, expected_points: List[int], answers: List[str]) -> List[int]:\n    def calculate_actual_points(question_points: List[int]) -> List[int]:\n        actual_points = []\n        for i in range(n):\n            points = 0\n            for j in range(m):\n                if answers[i][j] == '1':\n                    points += question_points[j]\n            actual_points.append(points)\n        return actual_points\n\n    def calculate_surprise_value(actual_points: List[int]) -> int:\n        return sum(abs(expected_points[i] - actual_points[i]) for i in range(n))\n\n    # Start with the identity permutation\n    best_permutation = list(range(1, m + 1))\n    max_surprise_value = calculate_surprise_value(calculate_actual_points(best_permutation))\n\n    # Try all permutations to find the one with the maximum surprise value\n    for question_points in permutations(range(1, m + 1)):\n        actual_points = calculate_actual_points(list(question_points))\n        current_surprise_value = calculate_surprise_value(actual_points)\n        if current_surprise_value > max_surprise_value:\n            max_surprise_value = current_surprise_value\n            best_permutation = list(question_points)\n\n    return best_permutation\n\nfrom itertools import permutations\n\n# Read input\nn = int(input())\nresults = []\nfor _ in range(n):\n    m = int(input())\n    expected_points = list(map(int, input().split()))\n    answers = [input() for _ in range(m)]\n    result = find_optimal_permutation(n, m, expected_points, answers)\n    results.append(result)\n\n# Print results\nfor result in results:\n    for p in result:\n        print(p, end=' ')\n    print()\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef find_max_surprise_permutation(n: int, m: int, expected_points: List[int], answers: List[str]) -> List[int]:\n    def calculate_surprise_value(points_permutation: List[int]) -> int:\n        surprise_value = 0\n        for i in range(n):\n            actual_points = sum(points_permutation[j] for j in range(m) if answers[i][j] == '1')\n            surprise_value += abs(expected_points[i] - actual_points)\n        return surprise_value\n\n    # Start with the identity permutation\n    best_permutation = list(range(1, m + 1))\n    max_surprise_value = calculate_surprise_value(best_permutation)\n\n    # Use a greedy approach to find a good permutation\n    for i in range(m):\n        for j in range(i + 1, m):\n            # Swap points between questions i and j\n            new_permutation = best_permutation[:]\n            new_permutation[i], new_permutation[j] = new_permutation[j], new_permutation[i]\n            current_surprise_value = calculate_surprise_value(new_permutation)\n            if current_surprise_value > max_surprise_value:\n                max_surprise_value = current_surprise_value\n                best_permutation = new_permutation\n\n    return best_permutation\n\n# Read input\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n\n    result = find_max_surprise_permutation(n, m, expected_points, answers)\n    for p in result:\n        print(p, end=' ')\n    print()\n", "from typing import List\nfrom typing import List\nfrom itertools import permutations\n\ndef find_optimal_permutation(n: int, m: int, expected_scores: List[int], answers: List[str]) -> List[int]:\n    def calculate_surprise_value(permutation: List[int]) -> int:\n        surprise_value = 0\n        for i in range(n):\n            actual_score = sum(permutation[j] for j in range(m) if answers[i][j] == '1')\n            surprise_value += abs(expected_scores[i] - actual_score)\n        return surprise_value\n\n    max_surprise_value = -1\n    best_permutation = []\n\n    for perm in permutations(range(1, m + 1)):\n        current_surprise_value = calculate_surprise_value(list(perm))\n        if current_surprise_value > max_surprise_value:\n            max_surprise_value = current_surprise_value\n            best_permutation = list(perm)\n\n    return best_permutation\n\n# Read input\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_scores = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n\n    result = find_optimal_permutation(n, m, expected_scores, answers)\n    for p in result:\n        print(p, end=' ')\n    print()\n", "from typing import List\ndef find_optimal_permutation(expected_scores, answers):\n    def calculate_score(answer, permutation):\n        return sum(answer[p - 1] for p in permutation)\n\n    def calculate_surprise_value(expected_score, actual_score):\n        return abs(expected_score - actual_score)\n\n    n = len(expected_scores)\n    m = len(answers[0])\n    result = []\n\n    for i in range(n):\n        expected_score = expected_scores[i]\n        answer = answers[i]\n        scores = []\n\n        for perm in range(1, m + 1):\n            permutation = list(range(1, perm + 1))\n            actual_score = calculate_score(answer, permutation)\n            surprise_value = calculate_surprise_value(expected_score, actual_score)\n            scores.append((surprise_value, permutation))\n\n        scores.sort()\n        result.append(scores[0][1])\n\n    return result\n\n# Read input and output results\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_scores = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    result = find_optimal_permutation(expected_scores, answers)\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\nimport itertools\n\ndef calculate_surprise_value(expected_scores, answers, permutation):\n    \"\"\"\n    Calculate the surprise value for a given permutation of question points.\n    \n    Args:\n        expected_scores (list of int): List of expected scores for each student.\n        answers (list of str): List of answers for each student, where each answer is a string of '0's and '1's.\n        permutation (list of int): A permutation of question points.\n    \n    Returns:\n        list of int: The surprise value for each student based on the given permutation.\n    \"\"\"\n    surprise_values = []\n    for i in range(len(expected_scores)):\n        actual_score = sum(int(answers[i][j]) * permutation[int(answers[i][j])-1] for j in range(len(answers[i])))\n        surprise_value = abs(expected_scores[i] - actual_score)\n        surprise_values.append(surprise_value)\n    return surprise_values\n\ndef find_max_surprise_value(n, m, expected_scores, answers):\n    \"\"\"\n    Find the permutation of question points that maximizes the surprise value for each student.\n    \n    Args:\n        n (int): Number of students.\n        m (int): Number of questions.\n        expected_scores (list of int): List of expected scores for each student.\n        answers (list of str): List of answers for each student, where each answer is a string of '0's and '1's.\n    \n    Returns:\n        list of int: The permutation of question points that maximizes the surprise value.\n    \"\"\"\n    max_surprise_value = -1\n    best_permutation = []\n    for perm in itertools.permutations(range(1, m + 1)):\n        surprise_values = calculate_surprise_value(expected_scores, answers, perm)\n        current_surprise_value = sum(surprise_values)\n        if current_surprise_value > max_surprise_value:\n            max_surprise_value = current_surprise_value\n            best_permutation = perm\n    return best_permutation\n\n# Read input and process each test case\nt = int(input().strip())\nresults = []\nfor _ in range(t):\n    n, m = map(int, input().strip().split())\n    expected_scores = list(map(int, input().strip().split()))\n    answers = [input().strip() for _ in range(n)]\n    result = find_max_surprise_value(n, m, expected_scores, answers)\n    results.append(result)\n\n# Output the results\nfor res in results:\n    print(' '.join(map(str, res)))\n", "from typing import List\nfrom itertools import permutations\n\ndef calculate_surprise_value(expected_scores, answers, points_permutation):\n    \"\"\"\n    Calculate the surprise value for a given permutation of points.\n    \n    Args:\n        expected_scores (list of int): The expected scores for each student.\n        answers (list of str): The answers for each student, represented as strings of '0's and '1's.\n        points_permutation (list of int): The permutation of points to be used.\n    \n    Returns:\n        int: The total surprise value for the given permutation.\n    \"\"\"\n    surprise_value = 0\n    for expected, answer, point in zip(expected_scores, answers, points_permutation):\n        actual = sum(int(a) * p for a, p in zip(answer, point))\n        surprise_value += abs(expected - actual)\n    return surprise_value\n\ndef find_max_surprise_value(n, m, expected_scores, answers):\n    \"\"\"\n    Find the permutation of points that maximizes the surprise value.\n    \n    Args:\n        n (int): The number of students.\n        m (int): The number of questions.\n        expected_scores (list of int): The expected scores for each student.\n        answers (list of str): The answers for each student, represented as strings of '0's and '1's.\n    \n    Returns:\n        list of int: The permutation of points that maximizes the surprise value.\n    \"\"\"\n    max_surprise_value = -1\n    best_permutation = None\n    for points in permutations(range(1, m + 1)):\n        surprise_value = calculate_surprise_value(expected_scores, answers, points)\n        if surprise_value > max_surprise_value:\n            max_surprise_value = surprise_value\n            best_permutation = points\n    return best_permutation\n\n# Read input\nt = int(input().strip())\nfor _ in range(t):\n    n, m = map(int, input().strip().split())\n    expected_scores = list(map(int, input().strip().split()))\n    answers = [input().strip() for _ in range(n)]\n    \n    # Find and print the permutation\n    best_permutation = find_max_surprise_value(n, m, expected_scores, answers)\n    print(' '.join(map(str, best_permutation)))\n", "from typing import List\nfrom typing import List\nfrom itertools import permutations\n\ndef find_optimal_permutation(n: int, m: int, expected_scores: List[int], answers: List[str]) -> List[int]:\n    def calculate_surprise_value(permutation: List[int]) -> int:\n        total_surprise = 0\n        for i in range(n):\n            actual_score = sum(int(answers[i][j]) * permutation[j] for j in range(m))\n            total_surprise += abs(expected_scores[i] - actual_score)\n        return total_surprise\n\n    best_permutation = None\n    max_surprise_value = -1\n\n    for perm in permutations(range(1, m + 1)):\n        current_surprise_value = calculate_surprise_value(list(perm))\n        if current_surprise_value > max_surprise_value:\n            max_surprise_value = current_surprise_value\n            best_permutation = perm\n\n    return list(best_permutation)\n\n# Read input\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_scores = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n\n    result = find_optimal_permutation(n, m, expected_scores, answers)\n    for p in result:\n        print(p, end=' ')\n    print()\n", "from typing import List\nfrom typing import List\nfrom itertools import permutations\n\ndef find_max_surprise_permutation(n: int, m: int, expected_scores: List[int], answers: List[str]) -> List[int]:\n    def calculate_surprise_value(perm):\n        surprise_value = 0\n        for i in range(n):\n            actual_score = sum(int(answers[i][j]) * perm[j] for j in range(m))\n            surprise_value += abs(expected_scores[i] - actual_score)\n        return surprise_value\n\n    max_surprise_value = -1\n    best_permutation = []\n\n    for perm in permutations(range(1, m + 1)):\n        current_surprise_value = calculate_surprise_value(perm)\n        if current_surprise_value > max_surprise_value:\n            max_surprise_value = current_surprise_value\n            best_permutation = perm\n\n    return list(best_permutation)\n\n# Read input\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_scores = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n\n    result = find_max_surprise_permutation(n, m, expected_scores, answers)\n    for p in result:\n        print(p, end=' ')\n    print()\n", "from typing import List\nfrom typing import List\nfrom itertools import permutations\n\ndef find_optimal_permutation(n: int, m: int, expected_scores: List[int], answers: List[str]) -> List[int]:\n    def calculate_surprise_value(permutation: List[int]) -> int:\n        surprise_value = 0\n        for i in range(n):\n            actual_score = sum([int(answers[i][p - 1]) for p in permutation])\n            surprise_value += abs(expected_scores[i] - actual_score)\n        return surprise_value\n\n    best_permutation = None\n    max_surprise_value = -1\n\n    for perm in permutations(range(1, m + 1)):\n        current_surprise_value = calculate_surprise_value(list(perm))\n        if current_surprise_value > max_surprise_value:\n            max_surprise_value = current_surprise_value\n            best_permutation = perm\n\n    return list(best_permutation)\n\n# Data structures and interfaces\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        expected_scores = list(map(int, input().split()))\n        answers = [input() for _ in range(n)]\n        result = find_optimal_permutation(n, m, expected_scores, answers)\n        for p in result:\n            print(p, end=' ')\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\nfrom typing import List\nfrom itertools import permutations\n\ndef find_optimal_permutation(n: int, m: int, expected_scores: List[int], answers: List[str]) -> List[int]:\n    def calculate_surprise_value(p: List[int]) -> int:\n        surprise_value = 0\n        for i in range(n):\n            correct_answers = [j for j in range(m) if answers[i][j] == '1']\n            actual_score = sum(p[j] for j in correct_answers)\n            surprise_value += abs(expected_scores[i] - actual_score)\n        return surprise_value\n\n    max_surprise_value = -1\n    optimal_permutation = []\n\n    # Generate all possible permutations of points\n    for p in permutations(range(1, m + 1)):\n        current_surprise_value = calculate_surprise_value(list(p))\n        if current_surprise_value > max_surprise_value:\n            max_surprise_value = current_surprise_value\n            optimal_permutation = p\n\n    return list(optimal_permutation)\n\n# Read input\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_scores = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    result = find_optimal_permutation(n, m, expected_scores, answers)\n    print(' '.join(map(str, result)))\n"], "plans": ["requirement analysis:\nThe primary requirement is to find the optimal permutation of question points that maximizes the surprise value for the students' test results. This involves understanding the expected points each student should get and matching them with the actual points they receive based on their answers. The solution should be efficient and scalable, handling up to 10^4 test cases with a sum of m not exceeding 10^4.\nrequirement pool:\n- Implement a function to calculate the surprise value for a given permutation of question points.\n- Ensure the solution is efficient and can handle up to 10^4 test cases.\n- Provide a user-friendly interface for easy input and output.\n- Optimize the algorithm to find the optimal permutation of question points quickly.\n- Include features for scalability and future enhancements.\nTo solve this problem, we will use a combination of Python's built-in data structures and libraries to efficiently find the optimal permutation of question points that maximizes the surprise value. The approach involves calculating the expected and actual points for each student, then iterating through possible permutations of question points to find the one that maximizes the surprise value.\nPlease read and understand the following inteperation before coding\n It seems like your last message was cut off. Please provide the complete requirement and plan for the third prompt so I can proceed with the analysis.\n", "requirement analysis:\nThe primary requirement is to find a permutation of points for each question that maximizes the surprise value of the students' test results. This involves understanding the expected points each student should get and matching them with the actual points they receive. The solution should be efficient and handle a large number of test cases efficiently.\nrequirement pool:\n- Implement a function to calculate the surprise value for a given permutation of points.\n- Develop an algorithm to find the permutation of points that maximizes the surprise value.\n- Ensure the solution can handle up to 10 test cases efficiently.\n- Implement input/output handling to read from standard input and print to standard output.\n- Optimize the algorithm to handle up to 10^4 test cases efficiently.\nTo solve this problem, we will use a combination of Python's built-in libraries and a simple algorithm to find the permutation of points that maximizes the surprise value. The algorithm will involve calculating the difference between expected and actual points for each student and then finding a permutation of points that maximizes this difference.\nPlease read and understand the following inteperation before coding\n It seems like your request was cut off. However, based on the previous examples, I can help you analyze the coding plan and requirement for the third prompt. Let's proceed with that.\n\n## Prompt 3 Analysis:\n\n### [core concept]\n- **Permutation**: A rearrangement of the elements of a sequence.\n- **Surprise value**: The sum of the absolute differences between expected and actual points for all students.\n- **Expected value**: The number of points a student expects to get for the test.\n- **Actual value**: The number of points a student actually gets based on their correct answers.\n\nExplanation: The goal is to find a permutation of points (p) such that the sum of the absolute differences between the expected points (x_i) and the actual points (r_i) is maximized. This involves assigning points to questions in a way that maximizes the discrepancy between what students expect and what they actually get.\n\n### [phrase showing quantity relationship]\n- **Maximum possible**: The highest value that can be achieved under the given conditions.\n\n### [degree adverb]\n- **Maximum possible**: Indicates that we need to find the permutation that results in the highest surprise value.\n\n### [code logic]\n1. **Input Parsing**: Read the number of test cases, the number of students and questions, the expected points for each student, and the correctness of answers for each student.\n2. **Permutation Generation**: Generate all possible permutations of points.\n3. **Surprise Value Calculation**: For each permutation, calculate the surprise value by comparing the expected and actual points for each student.\n4. **Optimization**: Select the permutation with the highest surprise value.\n\n### [edge case]\n- **Single Student, Single Question**:\n  - Input: `n = 1`, `m = 1`, `x = [5]`, `s = ['1']`\n  - Explanation: There's only one student and one question. The expected points match the actual points, so the surprise value is 0.\n  - Expected Output: `[5]`\n\n- **All Students Expect Zero Points**:\n  - Input: `n = 3`, `m = 3`, `x = [0, 0, 0]`, `s = ['000', '000', '000']`\n  - Explanation: All students expect zero points, and they all answered incorrectly. The maximum surprise value is achieved by any permutation of points.\n  - Expected Output: Any permutation of `[1, 2, 3]` or `[3, 2, 1]`, etc.\n\n### [extra code for edge case]\n- **Handling Edge Cases**:\n  - For the edge case where all students expect zero points and all answers are incorrect, any permutation of points will yield the maximum surprise value.\n  - Code to handle this edge case:\n    ```python\n    if all(x == 0 for x in x_i) and all(s_ij == '0' for s_i in s for s_ij in s_i):\n        return list(range(1, m+1))\n    ```\n\nThis analysis should help the programmer understand the requirements and edge cases, and implement the solution accordingly.\n", "requirement analysis:\nThe primary requirement is to find a permutation of points that maximizes the surprise value for the students. This involves understanding each student's expected score and matching it with the actual score they receive. The permutation should be such that the difference between the expected and actual scores is maximized, providing a more surprising and varied outcome.\nrequirement pool:\n- Implement a function to calculate the surprise value based on student expectations and actual scores.\n- Develop a permutation algorithm that maximizes the surprise value for all students.\n- Ensure the solution is scalable and can handle multiple test cases efficiently.\n- Design a user interface for easy input and output of student data and results.\n- Provide clear documentation and examples for teachers to understand and implement the solution.\nTo address the problem of finding the optimal permutation of points that maximizes the surprise value for Petya's students, we will use a combination of algorithmic strategies and Python's capabilities. The challenge lies in balancing the expected scores with the actual scores to maximize the absolute difference, which will be our measure of surprise. We will use a permutation algorithm to generate different distributions of points and evaluate each one based on its ability to surprise the students.\nPlease read and understand the following inteperation before coding\n It seems like your request was cut off. However, based on the previous examples, I can help you analyze the coding plan and requirement for the given task. Please provide the specific coding plan and requirement you would like me to analyze.\n", "requirement analysis:\nThe requirements involve calculating the maximum surprise value for each student based on their expected scores and the correctness of their answers. The solution should be efficient and able to handle a large number of test cases efficiently. The output should be a permutation of question numbers that maximizes the surprise value.\nrequirement pool:\n- Implement a function to calculate the surprise value for each student.\n- Develop a function to find the optimal permutation of question numbers that maximizes the surprise value.\n- Ensure the solution can handle multiple test cases efficiently.\n- Implement input/output handling to read from standard input and write to standard output.\n- Optimize the algorithm to handle large inputs within reasonable time limits.\nTo solve this problem, we will use Python due to its efficiency and ease of handling complex data structures. The main challenge is to maximize the surprise value for each student, which involves finding the optimal permutation of question numbers. We will use a greedy algorithm to achieve this, ensuring that we maximize the absolute differences between expected and actual scores.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'permutation': a rearrangement of the elements of an ordered set into a new sequence\n    'greedy algorithm': an algorithmic paradigm that builds up a solution piece by piece, always choosing the next piece that offers the most obvious and immediate benefit\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    For each test case, we need to:\n    1. Calculate the expected score for each student based on the given string of correct answers.\n    2. Determine the optimal permutation of question numbers to maximize the surprise value.\n    3. Output the permutation for each test case.\n\n# [edge case] \n    Test case:\n    Input:\n    t = 1\n    n = 2, m = 3\n    expected_scores = [5, 5]\n    answers = [\n        \"110\",\n        \"011\"\n    ]\n    \n    Explanation:\n    The expected scores are 5, which means the student should have answered 5 questions correctly. The optimal permutation to maximize the surprise value would be [3, 2, 1] because it maximizes the absolute differences between expected and actual scores.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The given logic is sufficient to determine the optimal permutation for each test case.\n", "requirement analysis:\nThe requirements involve calculating the maximum surprise value for each student based on their expected scores and the correctness of their answers. The solution should be efficient enough to handle up to 10^4 test cases, each with up to 10 students and 10^4 questions. The output should be a permutation of question points that maximizes the surprise value for each student.\nrequirement pool:\n- Implement a function to calculate the surprise value for each student\n- Ensure the solution can handle multiple test cases efficiently\n- Output the permutation of question points that maximizes the surprise value\n- Optimize the algorithm for large inputs\n- Provide a user-friendly interface for teachers to input and view results\nTo solve this problem, we will use Python due to its efficiency and ease of handling large datasets. The main challenge is to find the permutation of question points that maximizes the surprise value for each student. We will use the itertools library to generate permutations and calculate the surprise value for each permutation. The solution will be optimized to handle up to 10^4 test cases efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'permutation': a rearrangement of the elements of an ordered set into a new sequence\n    'surprise value': the sum of the absolute differences between the expected score and the actual score each student received\n\n# [phrase showing quantity relationship]\n    'more than': means that we need to find interger > 0\n    'at least as many times': means that we need to find the interger whose appears times is greater than or equal to its value\n\n# [degree adverb] \n    'largest': means that we need the bigest interger that appears greater or equal to its value\n\n# [code logic]\n    provide detailed logic to implement the code\n\n# [edge case] \n    No specific edge cases are provided in the requirement.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We could set the original return answer to -1 and then find the largest interger that meets the need. \n\nPlease provide the specific requirement and plan for the coding task you need assistance with, so I can generate a detailed response based on the criteria you've outlined.\n", "requirement analysis:\nThe requirements involve processing multiple test cases with varying numbers of students and questions, calculating the maximum possible surprise value based on expected and actual scores, and outputting the optimal permutation of points for each test case.\nrequirement pool:\n- Implement a system to handle multiple test cases efficiently.\n- Develop a method to calculate the maximum surprise value.\n- Ensure the output is a permutation of points that maximizes the surprise value.\n- Create a user-friendly interface for inputting expected scores.\n- Optimize the algorithm for scalability and performance.\nTo address the requirements, we will use Python due to its simplicity and powerful libraries. We will focus on optimizing the calculation of the maximum surprise value by leveraging permutations and itertools. The main challenge is to handle multiple test cases efficiently while ensuring the output is a permutation of points that maximizes the surprise value. We will use itertools.permutations to generate all possible permutations of points and calculate the surprise value for each permutation.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'permutation': a mathematical concept where a set of items is arranged in a specific order.\n    Explanation: In this problem, permutations are used to find the optimal order of points that maximizes the surprise value.\n\n# [phrase showing quantity relationship]\n    'more than': means greater than a certain value.\n    'at least as many times': means greater than or equal to a certain value.\n\n# [degree adverb] \n    'largest': means the biggest value.\n\n# [code logic]\n    To implement the solution, we need to:\n    1. Iterate through all possible permutations of points.\n    2. Calculate the surprise value for each permutation.\n    3. Keep track of the permutation with the maximum surprise value.\n    4. Return the permutation with the maximum surprise value.\n\n# [edge case] \n    Edge case 1:\n    Input: t = 1, n = 1, m = 3, x = [5], s = ['101']\n    Explanation: There is only one student and three questions. The expected score is 5. The student answered the first and third questions correctly. The maximum surprise value is achieved by assigning points [3, 2, 1] because the absolute differences would be [2, 3, 4], and their sum is 9.\n    Expected output: [3, 2, 1]\n\n    Edge case 2:\n    Input: t = 1, n = 2, m = 2, x = [3, 4], s = ['11', '00']\n    Explanation: There are two students and two questions. The expected scores are 3 and 4. The first student answered both questions correctly, and the second student answered none correctly. The maximum surprise value is achieved by assigning points [2, 1] because the absolute differences would be [1, 3], and their sum is 4.\n    Expected output: [2, 1]\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    For each test case, we need to:\n    1. Parse the input.\n    2. Generate all possible permutations of points.\n    3. Calculate the surprise value for each permutation.\n    4. Return the permutation with the maximum surprise value.\n\n    Example code:\n    ```python\n    from itertools import permutations\n\n    def calculate_surprise_value(points, results):\n        return sum(abs(expected - actual) for expected, actual in zip(points, results))\n\n    def find_max_surprise_value(n, m, expected_scores, results):\n        max_surprise_value = -1\n        best_permutation = None\n        for points in permutations(range(1, m + 1)):\n            surprise_value = sum(calculate_surprise_value(points, results[i]) for i in range(n))\n            if surprise_value > max_surprise_value:\n                max_surprise_value = surprise_value\n                best_permutation = points\n        return best_permutation\n\n    # Read input\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        expected_scores = list(map(int, input().split()))\n        results = [list(map(int, input().strip())) for _ in range(n)]\n\n        # Find and print the permutation\n        best_permutation = find_max_surprise_value(n, m, expected_scores, results)\n        print(' '.join(map(str, best_permutation)))\n    ```\n", "requirement analysis:\nThe primary requirement is to find a permutation of points that maximizes the surprise value for each test case. The surprise value is calculated as the sum of the absolute differences between the expected scores and the actual scores. The solution should be efficient and handle up to 10^4 test cases with a sum of m not exceeding 10^4.\nrequirement pool:\n- Implement a function to calculate the surprise value for a given permutation.\n- Ensure the solution is efficient and can handle up to 10^4 test cases.\n- Provide a clear and user-friendly output for each test case.\n- Allow the user to view multiple solutions if there are multiple permutations that maximize the surprise value.\n- Optimize the algorithm to handle large inputs efficiently.\nTo solve this problem, we will use a combination of Python's built-in libraries and a heuristic approach to find the optimal permutation of points that maximizes the surprise value. The heuristic will involve iteratively trying different permutations and calculating the surprise value for each until we find the one that maximizes it.\nPlease read and understand the following inteperation before coding\n It appears that the response to the third prompt was cut off. Let's proceed with analyzing the given coding plan and requirement for the third prompt.\n\n### Prompt 3:\n\n[requirement]\nPetya is a math teacher. n of his students have written a test with m questions, and he knows which questions each student answered correctly. Each correct answer earns a student p_j points, where p is a permutation of numbers from 1 to m. Petya wants to maximize the surprise value of the students' scores, defined as \u2211_{i=1}^{n} |x_i - r_i|, where x_i is the expected score and r_i is the actual score. Your task is to find a permutation p that maximizes this surprise value. If there are multiple solutions, provide any of them.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 10; 1 \u2264 m \u2264 10^4) \u2014 the number of students and the number of questions, respectively.\n\nThe second line contains n integers x_1, x_2, ..., x_n (0 \u2264 x_i \u2264 (m(m+1))/(2)), where x_i is the number of points that the i-th student expects to get.\n\nThis is followed by n lines, the i-th line contains the string s_i (|s_i| = m; s_{i, j} \u2208 {0, 1}), where s_{i, j} is 1 if the i-th student has answered the j-th question correctly, and 0 otherwise.\n\nThe sum of m for all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case, print m integers \u2014 a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\n[plan]\nTo solve this problem, we will use a combination of Python's built-in libraries and a heuristic approach to find the optimal permutation of points that maximizes the surprise value. The heuristic will involve iteratively trying different permutations and calculating the surprise value for each until we find the one that maximizes it.\n\n### Analysis:\n\n1. **Core Concept**:\n   - **Permutation**: A rearrangement of elements in a sequence.\n   - **Surprise Value**: The sum of the absolute differences between expected scores and actual scores.\n\n2. **Phrase Showing Quantity Relationship**:\n   - **Permutation of numbers from 1 to m**: This implies that we need to find a way to assign points to each question such that the overall surprise value is maximized.\n\n3. **Degree Adverb**:\n   - **Maximize**: This suggests that we need to find the best possible assignment of points that results in the highest possible surprise value.\n\n4. **Code Logic**:\n   - **Heuristic Approach**: Use a trial-and-error method to try different permutations of points and calculate the surprise value for each.\n   - **Iterate through permutations**: Generate all possible permutations of points and evaluate the surprise value for each.\n   - **Select the best permutation**: Choose the permutation that yields the highest surprise value.\n\n5. **Edge Case**:\n   - **Single Student, Single Question**: If there is only one student and one question, the permutation is trivial as there are no other options to compare.\n   - **All Students Have the Same Expected Score**: If all students have the same expected score, any permutation of points will yield the same surprise value.\n   - **All Students Have Opposite Answers**: If all students have opposite answers (e.g., one student answers all questions correctly and another answers none), the surprise value will be maximized by assigning points inversely proportional to the number of correct answers.\n\n6. **Extra Code for Edge Cases**:\n   - **Handling Multiple Test Cases**: If there are multiple test cases, ensure the code can handle each independently.\n   - **Efficiency**: Given the constraints, ensure the code runs efficiently within the time limits.\n\n### Example Output:\n\n```python\n# [core concept]\n    'permutation', 'surprise value'\n    Explanation: A permutation refers to rearranging elements in a sequence, while surprise value is the sum of the absolute differences between expected and actual scores.\n\n# [phrase showing quantity relationship]\n    No specific phrases found.\n\n# [degree adverb] \n    'maximize'\n    Explanation: This indicates that the goal is to find the best possible permutation of points to maximize the surprise value.\n\n# [code logic]\n    Generate all possible permutations of points and evaluate the surprise value for each. Select the permutation with the highest surprise value.\n\n# [edge case] \n    Edge Case 1: search([4, 1, 2, 2, 3, 1]) = 2\n    Explanation: The number 2 appears twice and is the most frequent number, thus maximizing the surprise value.\n    Edge Case 2: search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: The number 3 appears three times and is the most frequent number, thus maximizing the surprise value.\n    Edge Case 3: search([5, 5, 4, 4, 4]) = -1\n    Explanation: No number appears more than once, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The heuristic approach will naturally handle these cases by evaluating all possibilities.\n```\n\nThis analysis provides a structured approach to solving the problem, considering the core concepts, quantity relationships, and degree adverbs, as well as identifying potential edge cases and handling them within the given logic.\n", "requirement analysis:\nThe requirements specify the need to find a permutation of points that maximizes the surprise value for students' scores. This involves understanding the expected and actual scores and finding a permutation that maximizes the difference between them. The solution must be efficient and handle a large number of test cases.\nrequirement pool:\n- Implement a function to calculate the surprise value for a given permutation.\n- Ensure the solution can handle up to 10 test cases with a maximum of 10,000 questions each.\n- Provide a clear and user-friendly output for the permutation.\n- Optimize the algorithm for efficiency, especially for large datasets.\n- Allow for multiple solutions and provide any valid permutation.\nTo solve this problem, we will use a combination of Python's built-in libraries and a heuristic approach to find a permutation that maximizes the surprise value. The surprise value is calculated as the sum of the absolute differences between the expected scores and the actual scores. We will use a brute-force approach to try all possible permutations of the points and select the one that maximizes the surprise value.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'permutation': a rearrangement of the elements of an ordered set into a new sequence\n    'surprise value': the sum of the absolute differences between the expected scores and the actual scores\n\n# [phrase showing quantity relationship]\n    'more than': used to compare the expected score with the actual score\n    'at least as many times': used to describe the condition where the number of correct answers is greater than or equal to the expected score\n\n# [degree adverb] \n    'maximum possible': used to indicate the highest possible value of the surprise value\n\n# [code logic]\n    provide detailed logic to implement the code\n\n# [edge case] \n    search([1, 2, 3], [1, 0, 1]) = [3, 1, 2]\n    explanation: The expected scores are 1, 2, and 3. The actual correctness of answers is [1, 0, 1]. The permutation [3, 1, 2] maximizes the surprise value because the absolute differences are |3-1| + |1-0| + |2-1| = 2 + 1 + 1 = 4.\n    search([0, 1, 2], [0, 1, 0]) = [2, 1, 3]\n    explanation: The expected scores are 0, 1, and 2. The actual correctness of answers is [0, 1, 0]. The permutation [2, 1, 3] maximizes the surprise value because the absolute differences are |2-0| + |1-1| + |3-0| = 2 + 0 + 3 = 5.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We can directly implement the permutation search using a brute-force approach.\n\n# [code logic]\n    To implement the code, we will follow these steps:\n    1. For each test case, read the number of students (n) and the number of questions (m).\n    2. Read the expected scores for each student.\n    3. Read the correctness of answers for each student.\n    4. Try all possible permutations of the points and calculate the surprise value for each permutation.\n    5. Select the permutation with the maximum surprise value.\n    6. Print the permutation.\n", "requirement analysis:\nThe primary requirement is to find a permutation of the questions that maximizes the surprise value for the students' scores. The surprise value is calculated as the sum of the absolute differences between the expected scores and the actual scores. The solution should be efficient enough to handle a large number of test cases, with the total number of questions not exceeding 10^4 across all test cases.\nrequirement pool:\n- Implement a function to calculate the surprise value for a given permutation of questions.\n- Ensure the solution is optimized to handle up to 10^4 test cases and questions.\n- Provide a user-friendly interface for inputting student scores and expected scores.\n- Include a feature to display the optimal permutation of questions that maximizes the surprise value.\nTo solve this problem, we will use a combination of Python's built-in libraries and a heuristic approach to find the optimal permutation of questions that maximizes the surprise value. The surprise value is calculated as the sum of the absolute differences between the expected scores and the actual scores. We will iterate through all possible permutations of the questions and calculate the surprise value for each permutation to find the optimal one.\nPlease read and understand the following inteperation before coding\n It seems like your prompt for the third example got cut off. However, I'll provide a general approach based on the previous examples and the plan format you've outlined.\n\n# [core concept]\n    'permutation': a rearrangement of the elements of an ordered set\n    'surprise value': the sum of the absolute differences between expected and actual scores\n\n# [phrase showing quantity relationship]\n    'more than': used to compare expected and actual scores\n    'at least as many times': not directly applicable in this context\n\n# [degree adverb] \n    'largest': not directly applicable in this context\n\n# [code logic]\n    provide detailed logic to implement the code\n\n# [edge case] \n    Edge cases are not applicable in this context as the problem requires finding a permutation that maximizes the surprise value. However, we can consider the smallest and largest possible values for n and m to ensure the code handles all cases.\n\n# [extra code for edge case]\n    We do not need extra code to handle edge cases as the problem does not specify any specific edge cases.\n\nPlease provide the complete requirement for the third example so I can give a more detailed and accurate response.\n", "requirement analysis:\nThe primary requirement is to maximize the surprise value of student test results by finding the optimal permutation of points. This involves understanding the distribution of expected and actual student scores and adjusting the points accordingly. The system should be able to handle multiple test cases efficiently, with the sum of questions across all test cases not exceeding 10^4.\nrequirement pool:\n- Implement a function to calculate the surprise value based on student expectations and actual scores.\n- Develop an algorithm to find the optimal permutation of points that maximizes the surprise value.\n- Ensure the system can handle up to 10 test cases efficiently.\n- Design a user-friendly interface for easy input and output of student data.\n- Optimize the algorithm for scalability and performance, especially with large datasets.\nTo solve this problem, we will use a combination of Python's built-in libraries and common open-source tools. The main challenge is to find the optimal permutation of points that maximizes the surprise value. We will use a brute-force approach to generate all possible permutations of points and calculate the surprise value for each permutation. The permutation with the highest surprise value will be selected as the optimal solution.\nPlease read and understand the following inteperation before coding\n It appears that the plan provided for the third prompt is incomplete and does not specify a clear approach to solving the problem. Therefore, I will focus on analyzing the core concepts, phrases showing quantity relationships, degree adverbs, and edge cases for the given requirement.\n\n## Prompt 3:\n\n[requirement]\nPetya is a math teacher. n of his students has written a test consisting of m questions; it is known which questions each student has answered correctly and which he has not. If the student answers the j-th question correctly, he gets p_j points (otherwise, he gets 0 points). Moreover, the points for the questions are distributed in such a way that the array p is a permutation of numbers from 1 to m. For the i-th student, Petya knows that he expects to get x_i points for the test. Petya wonders how unexpected the results could be, as he believes the surprise value of the results for students is equal to \u2211_{i=1}^{n} |x_i - r_i|, where r_i is the number of points that the i-th student has got for the test. Your task is to help Petya find such a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\nInput The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. The first line of each test case contains two integers n and m (1 \u2264 n \u2264 10; 1 \u2264 m \u2264 10^4) \u2014 the number of students and the number of questions, respectively. The second line contains n integers x_1, x_2, ..., x_n (0 \u2264 x_i \u2264 (m(m+1))/(2)), where x_i is the number of points that the i-th student expects to get. This is followed by n lines, the i-th line contains the string s_i (|s_i| = m; s_{i, j} \u2208 {0, 1}), where s_{i, j} is 1 if the i-th student has answered the j-th question correctly, and 0 otherwise. The sum of m for all test cases does not exceed 10^4.\n\nOutput For each test case, print m integers \u2014 a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\n[plan]\nTo solve this problem, we will use a combination of Python's built-in libraries and common open-source tools. The main challenge is to find the optimal permutation of points that maximizes the surprise value. We will use a brute-force approach to generate all possible permutations of points and calculate the surprise value for each permutation. The permutation with the highest surprise value will be selected as the optimal solution.\n\n# [core concept]\n    'permutation': A mathematical term for an arrangement of all the members of a set into some sequence or order. In this context, it refers to the distribution of points among the questions.\n    Explanation: To maximize the surprise value, we need to find the best distribution of points (p_j) among the questions (m) such that the difference |x_i - r_i| is maximized for each student.\n\n# [phrase showing quantity relationship]\n    'permutation': Refers to the arrangement of points among the questions.\n\n# [degree adverb] \n    'maximum possible': Indicates that we need to find the best possible distribution that maximizes the surprise value.\n\n# [code logic]\n    To implement the solution, we can use a brute-force approach to generate all possible permutations of points and calculate the surprise value for each permutation. The permutation with the highest surprise value will be selected as the optimal solution.\n\n# [edge case] \n    Edge case 1:\n    Input:\n    n = 1, m = 3\n    x_1 = 3\n    s_1 = \"111\"\n    Expected Output:\n    [3, 2, 1]\n    Explanation:\n    There is only one student, and they expect to get 3 points. The best distribution of points is [3, 2, 1] to maximize the surprise value, as the difference |3 - 3| = 0 is minimized.\n\n    Edge case 2:\n    Input:\n    n = 2, m = 2\n    x_1 = 2, x_2 = 2\n    s_1 = \"10\", s_2 = \"01\"\n    Expected Output:\n    [2, 1] or [1, 2]\n    Explanation:\n    Both students expect to get 2 points. The best distribution could be [2, 1] or [1, 2] to maximize the surprise value, as the difference |2 - 2| = 0 is minimized for both students.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases, as the brute-force approach will naturally handle them. The solution will find the optimal permutation for each test case, including the edge cases.\n"], "scores": [], "pass_results": [false, true, true, true, false, false, true, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 4, "round": 24, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 10; 1 \u2264 m \u2264 10^4) \u2014 the number of students and the number of questions, respectively.\n\nThe second line contains n integers x_1, x_2, ..., x_n (0 \u2264 x_i \u2264 (m(m+1))/(2)), where x_i is the number of points that the i-th student expects to get.\n\nThis is followed by n lines, the i-th line contains the string s_i (|s_i| = m; s_{i, j} \u2208 \\{0, 1\\}), where s_{i, j} is 1 if the i-th student has answered the j-th question correctly, and 0 otherwise.\n\nThe sum of m for all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case, print m integers \u2014 a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n010110\n000101\n111111\n\n\nOutput\n\n\n3 1 2 \n2 3 4 1 \n3 1 4 5 2 6 ", "mutate_method": "condense_two2one", "parent_index": 24}
