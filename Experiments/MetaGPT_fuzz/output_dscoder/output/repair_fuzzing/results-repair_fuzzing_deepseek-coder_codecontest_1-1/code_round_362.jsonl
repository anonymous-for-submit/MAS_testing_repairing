{"name": "1607_A. Linear Keyboard", "description": "You are given a keyboard that consists of 26 keys. The keys are arranged sequentially in one row in a certain order. Each key corresponds to a unique lowercase Latin letter.\n\nYou have to type the word s on this keyboard. It also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nDetermine how long it will take to print the word s.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "tags": ["implementation", "strings"], "difficulty": 7, "id": 1607, "sample_io": [{"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}], "test_list": [{"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkjanscjanjkcanc\n", "output": ["164\n"]}, {"input": "1\nabcdefghilkjmnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjkcanc\n", "output": ["164\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjlcanc\n", "output": ["166\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nasdeb\n", "output": ["37\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkcanscjanjkcanj\n", "output": ["157\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n70\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nbbdes\n", "output": ["17\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n6\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsaeeb\n", "output": ["25\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkcanscjanjlcanj\n", "output": ["159\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabaacba\n", "output": ["13\n0\n70\n0\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n68\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n6\n74\n"]}, {"input": "1\nabcdefjhilkglnopqrstuvwxyz\nabdet\n", "output": ["19\n"]}, {"input": "1\naycdefbhilkjmnopqrstuvwxgz\nsfdba\n", "output": ["24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n70\n0\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n52\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkianscjanjclanb\n", "output": ["181\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsadfb\n", "output": ["27\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n0\n56\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n50\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n68\n6\n52\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\nbseeb\n", "output": ["34\n"]}, {"input": "1\nzywwsutvrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["171\n"]}, {"input": "1\nzgxovudsrqpcnljklihyfetwba\nsedba\n", "output": ["48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["13\n0\n50\n0\n35\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\nasdea\n", "output": ["38\n"]}, {"input": "1\nzywwsutvrqponmlcjihgfedkba\njnacljnajcsnackncasca\n", "output": ["173\n"]}, {"input": "1\nzgxwdutsrqponmjklihbfeucya\nsfdba\n", "output": ["50\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodffcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n6\n56\n"]}, {"input": "1\nzyxwvvtsrqponmlkjihgfedcba\nnnacljnajcrcajkncasca\n", "output": ["153\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nehllo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["10\n0\n50\n0\n35\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\naasccnkianscjanjlcanb\n", "output": ["163\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbsdfa\n", "output": ["39\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n66\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nehllo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ndodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["10\n0\n49\n0\n35\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\naatccnkianscjanjlcanb\n", "output": ["165\n"]}, {"input": "1\ndfxwvutsrqponmlkjihgfyzcba\naatccnkiansljanjccanb\n", "output": ["147\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponclljihgfedmba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabcabaa\n", "output": ["14\n0\n54\n6\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\naacdefghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n80\n0\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqpqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n36\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nscerofecod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n69\n18\n74\n"]}, {"input": "1\nabcdefyhilkjmponsrwtuvqxhz\nbedsa\n", "output": ["33\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngdlln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqpqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n36\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponclljihgfedmba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwfrtyuhopasdfghjklzxcvbnm\nabcabab\n", "output": ["14\n0\n54\n6\n65\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n65\n18\n74\n"]}, {"input": "1\nabcdehgsilkilnopqrftuvwxyz\nteaae\n", "output": ["23\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabchefxgijklmnupqrstovwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["16\n0\n65\n24\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\naacddfghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzxcvbnj\nabacaba\n", "output": ["15\n0\n80\n0\n74\n"]}, {"input": "1\naccdehgsilkilnopqqftuvwxxz\nseaae\n", "output": ["11\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponmlkjihgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n80\n6\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihggedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghzjmlmnopqrstuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\naaacaba\n", "output": ["16\n0\n65\n24\n48\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n80\n15\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihggedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghzjmlmnopqrstuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nrqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\naaacaba\n", "output": ["16\n0\n65\n27\n48\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nzqxwvutsryponmlkiihgfedcba\ncoeeforcse\nqwertyujnpasdfghjklzxcvbnn\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabcaaba\n", "output": ["15\n0\n80\n15\n52\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjklzxcvbnn\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabcaaba\n", "output": ["15\n0\n82\n15\n52\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nhdllo\nzyxvvutsrqponilkjmhgfddcaa\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["15\n0\n82\n15\n26\n"]}, {"input": "5\nabcdefghijilmnopqrstuvwxyz\nhdllo\naacddfghmjklinopqrstuvvxyz\nj\nabcdefghiiklmnopvrstuywxqz\ncoeeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["15\n0\n80\n15\n26\n"]}, {"input": "5\nabcdefghijilmnopqrstuvwxyz\nhdllo\naacddfghmjklinopqrstuvvxyz\nj\nabcdefghiiklmnopvrstuywxqz\ncoeeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacaa\n", "output": ["15\n0\n80\n15\n24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhlelo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["21\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacjkjanscnanjlcanb\n", "output": ["169\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n3\n74\n"]}, {"input": "1\nabcdefghijklmonpqrstuvwxyz\ncnackjnajcsnajkncasca\n", "output": ["170\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\ncoacljnajcsnajkncasca\n", "output": ["168\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbaacaba\n", "output": ["12\n0\n68\n18\n61\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsaeea\n", "output": ["26\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwautsrqponmlkjihgfedcbv\nacsacnkcanscjanjlcanj\n", "output": ["200\n"]}, {"input": "1\nnbcdefyhilkjmaopqrstuvwxgz\nsfdba\n", "output": ["29\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforbes\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n70\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwerbyuiopasdfghjklzxcvtnm\nabacaba\n", "output": ["12\n0\n68\n18\n46\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n18\n74\n"]}, {"input": "1\nzywwvutsrqponmlkjihgfedcba\njnacljnajcsnackncatca\n", "output": ["161\n"]}, {"input": "5\nzyxwvutsrqponmakjihgfedcbl\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["19\n0\n68\n18\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["12\n0\n68\n6\n52\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\ncsdea\n", "output": ["36\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nkelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["18\n0\n68\n0\n74\n"]}, {"input": "1\nzgxwuuterqponmjklihbfsdcya\nsfdba\n", "output": ["12\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\nacsacnkianscjanjldanb\n", "output": ["195\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\nasdae\n", "output": ["40\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyuiopasdfghjklzxcvbnm\nabbcaba\n", "output": ["11\n0\n68\n18\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nnlleh\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnzpqrstuvwxyo\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n106\n18\n74\n"]}, {"input": "1\nzyxwjvtsrqponmlkvihgfedcba\nnnacljnajcrcajkncasca\n", "output": ["211\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbscfa\n", "output": ["41\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n66\n18\n74\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlnlhe\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\neholl\nabcdefghijklmnopqrstuvwyyz\ni\nabcdefohijllmngpqrstuvwxyz\ndodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["13\n0\n49\n0\n35\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljihgfedcba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabcabaa\n", "output": ["14\n0\n68\n24\n52\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnlleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nscerofedod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n67\n18\n74\n"]}, {"input": "1\ndfxwvutsrqponmlkjihgfyzcba\naatccnkiansljanjccana\n", "output": ["148\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nbbacaba\n", "output": ["11\n0\n68\n18\n61\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nseeqofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n63\n18\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolleh\naacdefghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeefoqcse\nqwertyujnpasdfghjklzxcvbnn\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n78\n0\n74\n"]}, {"input": "1\nabcdehgsilkilnopqrftuvwxyz\naeate\n", "output": ["42\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmlfh\nabchefxgijklmnupqrstovwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["10\n0\n65\n18\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmelh\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["20\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhem\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\nabacaba\n", "output": ["17\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdsfghzjmlmnopqretuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\nabacaba\n", "output": ["16\n0\n53\n24\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcsf\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n79\n6\n74\n"]}, {"input": "1\nzxxwvutfqqponlekljshhiccca\nteaae\n", "output": ["30\n"]}, {"input": "1\nztxwvuxfqqponlikcjshieccma\neaaet\n", "output": ["28\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nhdlln\naacddfghmjklinopqrstuvvxyz\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["14\n0\n82\n15\n26\n"]}, {"input": "1\narcdeffhilkjmnopqbstuvwxyz\nabdes\n", "output": ["46\n"]}, {"input": "1\nzyxwvutsrqponclkjihgeedmba\nacsacnkjanscjanjlcanc\n", "output": ["144\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n9\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nccacljnajcsnajknoasca\n", "output": ["146\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnnjcacaska\n", "output": ["145\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbaacaba\n", "output": ["12\n0\n68\n24\n61\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabababa\n", "output": ["14\n0\n68\n0\n78\n"]}, {"input": "1\nzyxwautsrqponmlkjihgfedcbv\nacsacnkcanrcjanjlcanj\n", "output": ["198\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhdllo\nabcdezghijklmnopqrstuvwxyf\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["15\n0\n68\n0\n48\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nabdes\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxzz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\nbeesa\n", "output": ["35\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\ncnackjnajcsnajkncasca\n", "output": ["164\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nabdfs\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabcdefyhilkjlnopqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nsedba\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nasdeb\n", "output": ["37\n"]}, {"input": "5\nabcdekghijflmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\nasedb\n", "output": ["35\n"]}, {"input": "1\nabcdefyhilkhmnopqrstuvwxjz\nbeesa\n", "output": ["35\n"]}, {"input": "1\nabcdefjhilkglnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nsfdba\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabodefyhilkjlncpqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnaikncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nsedaa\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nbedsa\n", "output": ["37\n"]}, {"input": "5\nabcdekghijflmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsadeb\n", "output": ["25\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsrqpnomhklihyfedcba\nasedb\n", "output": ["35\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\nbeesa\n", "output": ["35\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["159\n"]}, {"input": "1\nabcdefghijklmnopqrstvvwxyz\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabwdefyhilkjlncpqrstuvoxgz\nsedba\n", "output": ["18\n"]}, {"input": "1\ndyxwvutsrqponmlkjihgfezcba\nbnacljnajcsnaikncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\naades\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n6\n74\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nbnacljnajcnnajkscasca\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\naedsb\n", "output": ["37\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabdet\n", "output": ["19\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzywwvutsrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["159\n"]}, {"input": "1\nzgxwvutsrqponmjklihbfedcya\nsfdba\n", "output": ["24\n"]}, {"input": "1\nabcdefghijklmnopqrstvvwxyz\ncnacljnajcrnajkncasca\n", "output": ["164\n"]}, {"input": "1\nzgxovutsrqpcnljklihyfedwba\nsedba\n", "output": ["18\n"]}, {"input": "1\ndyxwvutsrqponmlkjihgfezcba\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\naades\n", "output": ["18\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvvxyz\nacsacnkianscjanjclanb\n", "output": ["181\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nbsdea\n", "output": ["37\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabeet\n", "output": ["19\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzgxwuutsrqponmjklihbfedcya\nsfdba\n", "output": ["24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodffcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n0\n56\n"]}, {"input": "1\nzyxwvvtsrqponmlkjihgfedcba\ncnacljnajcrnajkncasca\n", "output": ["164\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n68\n6\n52\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbsdea\n", "output": ["37\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nnlleh\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsroponmhklihyfedcba\nbseeb\n", "output": ["34\n"]}, {"input": "1\nzyxwvutsrqponljklihgfedcba\nabeet\n", "output": ["19\n"]}], "task_id": "codecontest/98", "prompt": "You are given a keyboard that consists of 26 keys, arranged sequentially in one row in a certain order, where each key corresponds to a unique lowercase Latin letter. You have to type the word s on this keyboard, which consists only of lowercase Latin letters. To type a word, you need to type all its letters consecutively one by one, by positioning your hand exactly over the corresponding key and then pressing it. Moving the hand between the keys takes time, which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right), and no time is spent on pressing the keys and on placing your hand over the first letter of the word. For example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order; the letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". Determine how long it will take to print the word s, clearly mentioning assumptions and constraints in the solution, such as the keyboard layout remaining constant for the entire duration of typing the word.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "repair_prompt": ["You are given a keyboard that consists of 26 keys, arranged sequentially in one row in a certain order, where each key corresponds to a unique lowercase Latin letter. You have to type the word s on this keyboard, which consists only of lowercase Latin letters. To type a word, you need to type all its letters consecutively one by one, by positioning your hand exactly over the corresponding key and then pressing it. Moving the hand between the keys takes time, which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right), and no time is spent on pressing the keys and on placing your hand over the first letter of the word. For example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order; the letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". Determine how long it will take to print the word s, clearly mentioning assumptions and constraints in the solution, such as the keyboard layout remaining constant for the entire duration of typing the word.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\nWrite a main() function and use input() function to read input from stdin", " You are given a keyboard that consists of 26 keys, arranged sequentially in one row in a certain order, where each key corresponds to a unique lowercase Latin letter. You have to type the word s on this keyboard, which consists only of lowercase Latin letters. To type a word, you need to type all its letters consecutively one by one, by positioning your hand exactly over the corresponding key and then pressing it. Moving the hand between the keys takes time, which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right), and no time is spent on pressing the keys\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\nWrite a main() function and use input() function to read input from stdin", " You are given a keyboard with 26 keys arranged sequentially in one row, each key corresponding to a unique lowercase Latin letter. You need to type the word s on this keyboard, which consists only of lowercase Latin letters. The time to type a word is determined by the absolute value of the difference between the positions of the keys used for consecutive letters, with no time spent on pressing the keys or placing the hand over the first letter. Determine the time to print the word s, assuming the keyboard layout remains constant throughout the typing process.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the time required to type a word based on the given keyboard layout.\n\n    Args:\n        keyboard (str): A string of 26 lowercase Latin letters representing the keyboard layout.\n        word (str): The word to be typed.\n\n    Returns:\n        int: The total time required to type the word.\n    \"\"\"\n    # Create a dictionary to map each key (letter) to its position on the keyboard\n    keyboard_positions = {letter: index for index, letter in enumerate(keyboard, start=1)}\n\n    # Initialize the total time to 0\n    total_time = 0\n\n    # Calculate the time required to type the word\n    for i in range(1, len(word)):\n        current_pos = keyboard_positions[word[i]]\n        previous_pos = keyboard_positions[word[i - 1]]\n        total_time += abs(current_pos - previous_pos)\n\n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    keyboard = input().strip()\n    word = input().strip()\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the time required to type a word based on a given keyboard layout.\n\n    Args:\n        keyboard (str): A string representing the keyboard layout where each character is a unique lowercase Latin letter.\n        word (str): The word to be typed, consisting of lowercase Latin letters.\n\n    Returns:\n        int: The total time required to type the word.\n    \"\"\"\n    if not keyboard or not word:\n        return 0\n\n    # Create a dictionary to map each character to its position on the keyboard\n    keyboard_positions = {}\n    for index, char in enumerate(keyboard):\n        keyboard_positions[char] = index\n\n    # Initialize the total time\n    total_time = 0\n\n    # Iterate through the word and calculate the time taken to type each character\n    for i in range(len(word) - 1):\n        current_char = word[i]\n        next_char = word[i + 1]\n        current_pos = keyboard_positions[current_char]\n        next_pos = keyboard_positions[next_char]\n        total_time += abs(next_pos - current_pos)\n\n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    keyboard = input().strip()\n    word = input().strip()\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {char: idx for idx, char in enumerate(keyboard, start=1)}\n    \n    # Initialize the total time to 0\n    total_time = 0\n    \n    # Iterate through the word to calculate the typing time\n    for i in range(1, len(word)):\n        current_pos = keyboard_positions[word[i]]\n        previous_pos = keyboard_positions[word[i - 1]]\n        total_time += abs(current_pos - previous_pos)\n    \n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    keyboard = input().strip()\n    word = input().strip()\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\nimport sys\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the minimum time required to type a word based on the positions of the keys on the keyboard.\n\n    Args:\n        keyboard (str): A string of 26 characters representing the keyboard layout.\n        word (str): The word to be typed.\n\n    Returns:\n        int: The minimum time required to type the word.\n    \"\"\"\n    key_positions = {}\n    for index, key in enumerate(keyboard):\n        key_positions[key] = index\n    \n    total_time = 0\n    for i in range(1, len(word)):\n        current_key = word[i]\n        previous_key = word[i - 1]\n        total_time += abs(key_positions[current_key] - key_positions[previous_key])\n    \n    return total_time\n\n# Read the number of test cases from command-line arguments\nif len(sys.argv) < 2:\n    print(\"Usage: python main.py <number_of_test_cases>\")\n    sys.exit(1)\n\nt = int(sys.argv[1])\n\n# Process each test case\nfor i in range(t):\n    if len(sys.argv) < 3 + 2 * t:\n        print(\"Insufficient arguments provided.\")\n        sys.exit(1)\n    \n    keyboard = sys.argv[2 + i * 2]\n    word = sys.argv[3 + i * 2]\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the total time required to type a word based on the given keyboard layout.\n    \n    Args:\n        keyboard (str): A string of 26 characters representing the keyboard layout.\n        word (str): The word to be typed.\n        \n    Returns:\n        int: The total time required to type the word.\n    \"\"\"\n    if len(keyboard) != 26:\n        raise ValueError(\"Keyboard layout must be exactly 26 characters long.\")\n    \n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n    \n    total_time = 0\n    \n    # Iterate through the word to calculate the total time required to type it\n    for i in range(1, len(word)):\n        current_letter = word[i]\n        previous_letter = word[i - 1]\n        \n        # Calculate the time taken to move from one letter to the next\n        current_pos = keyboard_positions[current_letter]\n        previous_pos = keyboard_positions[previous_letter]\n        time_taken = abs(current_pos - previous_pos)\n        \n        total_time += time_taken\n    \n    return total_time\n\n# Read input from stdin\nt = int(input())\nfor _ in range(t):\n    keyboard = input()\n    word = input()\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    # Create a dictionary to store the position of each key on the keyboard\n    key_positions = {}\n    for index, key in enumerate(keyboard):\n        key_positions[key] = index\n    \n    # Initialize the total time to 0\n    total_time = 0\n    \n    # Iterate through the word to calculate the typing time\n    for i in range(1, len(word)):\n        # Get the positions of the current and previous keys\n        current_pos = key_positions[word[i]]\n        previous_pos = key_positions[word[i - 1]]\n        \n        # Calculate the time taken to move between the keys\n        time_to_move = abs(current_pos - previous_pos)\n        \n        # Add the time to the total time\n        total_time += time_to_move\n    \n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    # Read the keyboard layout and the word\n    keyboard = input()\n    word = input()\n    \n    # Calculate and print the typing time for the word on the given keyboard\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    # Create a dictionary to map each character to its position on the keyboard\n    key_positions = {}\n    for index, key in enumerate(keyboard):\n        key_positions[key] = index\n    \n    # Initialize the total time to 0\n    total_time = 0\n    \n    # Calculate the time to type the word\n    for i in range(1, len(word)):\n        # Get the positions of the current and previous characters\n        current_pos = key_positions[word[i]]\n        previous_pos = key_positions[word[i - 1]]\n        \n        # Calculate the absolute difference in positions and add to the total time\n        total_time += abs(current_pos - previous_pos)\n    \n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    # Read the keyboard layout and the word\n    keyboard = input()\n    word = input()\n    \n    # Calculate and print the typing time for the word\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n    \n    # Initialize the total time to 0\n    total_time = 0\n    \n    # Calculate the time to type the word\n    for i in range(1, len(word)):\n        # Get the positions of the current and previous letters\n        current_pos = keyboard_positions[word[i]]\n        previous_pos = keyboard_positions[word[i - 1]]\n        \n        # Calculate the absolute difference in positions and add to the total time\n        total_time += abs(current_pos - previous_pos)\n    \n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    # Read the keyboard layout and the word\n    keyboard = input()\n    word = input()\n    \n    # Calculate and print the typing time for the word on the given keyboard\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n    \n    # Initialize the total time to 0\n    total_time = 0\n    \n    # Calculate the time to type the word by summing the absolute differences between the positions of consecutive letters\n    for i in range(1, len(word)):\n        current_pos = keyboard_positions[word[i]]\n        previous_pos = keyboard_positions[word[i - 1]]\n        total_time += abs(current_pos - previous_pos)\n    \n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    keyboard = input()\n    word = input()\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the time it takes to type a word based on a given keyboard layout.\n\n    Args:\n        keyboard (str): A string of 26 characters representing the keyboard layout.\n        word (str): The word to be typed.\n\n    Returns:\n        int: The total time to type the word.\n    \"\"\"\n    # Create a dictionary to map each character to its position on the keyboard\n    keyboard_positions = {char: idx for idx, char in enumerate(keyboard, start=1)}\n    \n    # Initialize the total time to 0\n    total_time = 0\n    \n    # Initialize the position of the previous character to 0\n    prev_position = 0\n    \n    # Iterate through each character in the word\n    for char in word:\n        # Find the position of the current character on the keyboard\n        current_position = keyboard_positions[char]\n        \n        # Calculate the time to type the current character based on the position difference\n        time_to_type_char = abs(current_position - prev_position)\n        \n        # Add this time to the total time\n        total_time += time_to_type_char\n        \n        # Update the previous position to the current position\n        prev_position = current_position\n    \n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# For each test case\nfor _ in range(t):\n    # Read the keyboard layout\n    keyboard = input()\n    \n    # Read the word to be typed\n    word = input()\n    \n    # Calculate the typing time\n    result = calculate_typing_time(keyboard, word)\n    \n    # Print the result\n    print(result)\n"], "plans": ["requirement analysis:\nThe primary requirement is to calculate the time required to type a given word on a keyboard where each key is assigned a unique position. The keyboard layout remains constant throughout the typing process. The solution should handle multiple test cases efficiently, ensuring minimal movement time between keys.\nrequirement pool:\n- Implement a function to calculate the time required to type a word based on the keyboard layout.\n- Ensure the solution can handle multiple test cases efficiently.\n- Provide a user-friendly interface for inputting the keyboard layout and the word to be typed.\n- Optimize the algorithm to minimize the movement time between keys.\nWe will use Python to implement the solution. The main challenge is to calculate the time required to type a word based on the keyboard layout efficiently. We will use a dictionary to map each key to its position on the keyboard. The time required to type a word will be the sum of the absolute differences between the positions of consecutive letters in the word.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': the arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: In this problem, we need to calculate the time required to type a word based on the given keyboard layout. The keyboard layout is a string of 26 lowercase Latin letters, and each letter appears exactly once. The time to type a word is determined by the positions of the letters on the keyboard.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the solution, we will follow these steps:\n    1. Read the keyboard layout and the word to be typed.\n    2. Create a dictionary to map each key (letter) to its position on the keyboard.\n    3. Calculate the time required to type the word by summing the absolute differences between the positions of consecutive letters.\n\n# [edge case] \n    Edge case 1:\n    Input:\n    a\n    abc\n    Expected output: 2\n    Explanation: The keyboard has only one key 'a' at position 1. The word \"abc\" consists of letters 'a', 'b', and 'c', which are at positions 1, 2, and 3 respectively. The time to type the word is |2 - 1| + |3 - 2| = 2.\n\n    Edge case 2:\n    Input:\n    zyxwvutsrqponmlkjihgfedcba\n    abc\n    Expected output: 25\n    Explanation: The keyboard is in reverse alphabetical order. The word \"abc\" consists of letters 'a', 'b', and 'c', which are at positions 26, 25, and 24 respectively. The time to type the word is |26 - 25| + |25 - 24| = 2.\n\n    Edge case 3:\n    Input:\n    abcdefghijklmnopqrstuvwxyz\n    abcdefghijklmnopqrstuvwxyz\n    Expected output: 0\n    Explanation: The keyboard is in alphabetical order. The word is the same as the keyboard layout. The time to type the word is 0 because all letters are already in the correct position.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic can handle all cases correctly.\n", "requirement analysis:\nThe primary requirement is to calculate the time required to type a given word on a specific keyboard layout. The keyboard layout remains constant for all test cases. The word length can vary from 1 to 50 characters. The challenge lies in mapping each character to its position on the keyboard and calculating the total time based on the movement between characters.\nrequirement pool:\n- Implement a function to calculate the time to type a word based on a given keyboard layout.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the code for readability and maintainability.\n- Include error handling for invalid inputs.\nWe will use Python to implement the solution. The main challenge is to calculate the time required to type a word based on a given keyboard layout. We will map each character to its position on the keyboard and calculate the total time based on the movement between characters. We will use a dictionary to store the position of each character for quick lookup.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': the arrangement of keys on a keyboard, where each key corresponds to a unique character.\n    Explanation: In this problem, we are given a specific arrangement of the 26 keys on the keyboard, and we need to calculate the time it takes to type a given word based on this arrangement.\n\n# [phrase showing quantity relationship]\n    'consecutively': means typing the letters one after another without skipping any.\n    Explanation: The word \"consecutively\" indicates that we need to type each letter of the word in the order they appear, without pausing or skipping any.\n\n# [degree adverb] \n    'minimal': means the smallest or shortest possible time required to type the word.\n    Explanation: The adverb \"minimal\" tells us that we need to find the minimum time required to type the word, considering the positions of the keys and the movement between them.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the solution, we will follow these steps:\n    1. Create a dictionary to map each character to its position on the keyboard.\n    2. Iterate through the word and calculate the time taken to type each character, considering the movement from the current character to the next.\n    3. Sum the times for all characters to get the total time.\n    4. Repeat the process for each test case.\n\n# [edge case] \n    how_many_times('', 'a') = 0\n    Explanation: Since the original string is empty, the substring cannot appear, so the expected output is 0.\n    how_many_times('abc', '') = 4\n    Explanation: '' appears four times in the original string. 'abc'.count('')=2\n\n# [extra code for edge case]\n    Extra code are needed to handle the edge case.\n        if not string:\n            return 0\n        elif not substring:\n            return len(string)+1\n        (other code)\n\n# [edge case] \n    search([2,2,3,3,3]) = 3\n    Explanation: Both 2 and 3 appears greater than or equal to its value, but 3 is the largest number\n    search([3,3,2,4,4,4]) = -1\n    Explanation: number 2 appears one time, number 3 appears two times,number 4 appears three times, none of them appears greater than or equal to its value, so the function return -1\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We could set the original return answer to -1 and then find the largest integer that meets the need. \n\n# [edge case] \n    search([5, 5, 4, 4, 4]) = -1\n    Explanation: Number 5 appears two times, number 4 appears three times, but no number appears greater than or equal to its value, so the function should return -1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case.\n        max_value = -1\n        for num in lst:\n            if lst.count(num) >= num:\n                max_value = max(max_value, num)\n        return max_value if max_value != -1 else -1\n", "requirement analysis:\nThe primary requirement is to calculate the time required to type a given word on a keyboard where each key is assigned a unique letter. The keyboard layout remains constant throughout the typing process. The solution should handle multiple test cases efficiently, ensuring that the time calculation is accurate and the output is formatted correctly.\nrequirement pool:\n- Implement a function to calculate the time required to type a word based on the keyboard layout.\n- Ensure the solution can handle multiple test cases efficiently.\n- Output the calculated time for each test case in the required format.\n- Include error handling to manage unexpected inputs.\n- Optimize the code for performance, especially for a large number of test cases.\nWe will use Python for the implementation as it provides a robust set of libraries and syntax that can handle the requirements efficiently. The main challenge is to calculate the time taken to type a word based on the keyboard layout, considering the absolute value of the difference between the positions of the keys. We will use a dictionary to map each letter to its position on the keyboard for quick lookup.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': the arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: In this problem, we need to calculate the time taken to type a word based on the positions of the keys on the keyboard. The positions are determined by the order of the letters in the given string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the solution, we will follow these steps:\n    1. Read the keyboard layout and the word to be typed.\n    2. Create a dictionary to map each letter to its position on the keyboard.\n    3. Iterate through the word, calculate the time taken to type each letter, and sum these times to get the total time.\n    4. Print the total time for each test case.\n\n# [edge case] \n    Edge case 1:\n    Input:\n    a\n    abc\n    Output:\n    2\n    Explanation: The keyboard has only one key 'a' at position 1. The word \"abc\" will take |1-1| + |1-2| + |1-3| = 2 units of time.\n\n    Edge case 2:\n    Input:\n    zyxwvutsrqponmlkjihgfedcba\n    abc\n    Output:\n    25\n    Explanation: The keyboard is in reverse alphabetical order. The word \"abc\" will take |26-1| + |26-2| + |26-3| = 25 units of time.\n\n    Edge case 3:\n    Input:\n    abcdefghijklmnopqrstuvwxyz\n    abc\n    Output:\n    2\n    Explanation: The word \"abc\" is already in alphabetical order on the keyboard. It will take |1-2| + |2-3| = 2 units of time.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can handle all the given test cases.\n", "requirement analysis:\nThe requirements involve calculating the time to type a word based on the positions of the keys on the keyboard. Each test case involves a keyboard layout and a word to be typed. The goal is to output the minimum time required to type the word on the given keyboard. This requires understanding the positions of the keys and calculating the time based on the word's letters.\nrequirement pool:\n- Implement a function to calculate the time to type a word based on keyboard layout.\n- Ensure the program can handle multiple test cases efficiently.\n- Provide a user-friendly interface for inputting keyboard layouts and words.\n- Ensure the program is efficient in terms of both time and space complexity.\n- Allow for easy customization of keyboard layouts for different users.\nTo solve this problem, we will use Python due to its simplicity and efficiency. The main challenge is to calculate the time required to type a word based on the positions of the keys on the keyboard. We will create a function that takes the keyboard layout and the word as input and returns the minimum time required to type the word. We will use a dictionary to store the positions of the keys for quick lookup.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: In this problem, the keyboard layout is given as a string of 26 characters, each representing a key. The order of these characters determines the position of each letter on the keyboard.\n\n# [phrase showing quantity relationship]\n    'as many times': Indicates the frequency of a letter's appearance in the word.\n    Explanation: For example, if a letter appears twice in the word, it means that the letter needs to be typed twice.\n\n# [degree adverb] \n    'minimal': Refers to the smallest amount of time required to type the word.\n    Explanation: The goal is to find the minimum time needed to type the word, considering the positions of the keys on the keyboard.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to:\n    1. Create a dictionary to store the positions of each key on the keyboard.\n    2. Iterate through the word and calculate the time required to type each letter, considering the positions of the keys.\n    3. Sum the times for all letters to get the total time.\n\n# [edge case] \n    Edge case 1: Typing a word with all keys on the same position.\n    Input: keyboard = \"abcdefghijklmnopqrstuvwxyz\", word = \"a\"\n    Expected output: 0\n    Explanation: Since all letters are on the same position, no time is required to type the word.\n\n    Edge case 2: Typing a word with alternating keys.\n    Input: keyboard = \"abcdefghijklmnopqrstuvwxyz\", word = \"ab\"\n    Expected output: 1\n    Explanation: The first letter 'a' is on position 1, and the second letter 'b' is on position 2. The time required is |1 - 2| = 1.\n\n    Edge case 3: Typing a word with all keys being the same.\n    Input: keyboard = \"abcdefghijklmnopqrstuvwxyz\", word = \"aaa\"\n    Expected output: 0\n    Explanation: Since all letters are the same, only one key press is needed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic can handle these cases by considering the positions of the keys and the word's composition.\n", "requirement analysis:\nThe requirements involve creating a system that calculates the minimal time required to type a given word on a specific keyboard layout. Each test case involves a unique keyboard layout and a word to be typed. The challenge lies in accurately mapping each letter's position on the keyboard to calculate the time taken to type the word, considering the distance between keys.\nrequirement pool:\n- Implement a function to calculate the time to type a word based on keyboard layout.\n- Ensure the system can handle multiple test cases efficiently.\n- Provide a user-friendly interface for selecting different keyboard layouts.\n- Allow users to input words and see the calculated typing time.\n- Include options for custom keyboard layouts for advanced users.\nTo solve this problem, we will use Python due to its simplicity and efficiency. The main challenge is to calculate the time taken to type a word based on the given keyboard layout. We will create a function that takes a keyboard layout and a word as input and returns the total time required to type the word. The time will be calculated as the sum of the absolute differences between the positions of consecutive letters in the word on the keyboard.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: In this problem, the keyboard is represented as a string of 26 characters, each character representing a key. The order of these characters determines the position of each letter on the keyboard.\n\n# [phrase showing quantity relationship]\n    'as many times': Indicates the frequency or number of times a letter appears in the word.\n    Explanation: For example, in the requirement, \"Return the largest integer that is more than zero and appears at least as many times as the integer itself,\" the phrase 'appears at least as many times' refers to the frequency of an integer in a list.\n\n# [degree adverb] \n    'largest': Indicates the maximum or greatest value among a set of values.\n    Explanation: In the requirement, \"Return the largest integer that is more than zero and appears at least as many times as the integer itself,\" the degree adverb 'largest' specifies that we need to find the largest integer with the given property.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to:\n    1. Create a dictionary to map each letter to its position on the keyboard.\n    2. Iterate through the word to calculate the total time required to type it.\n    3. For each pair of consecutive letters in the word, calculate the time taken to move from one letter to the next and sum these times.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this test case, the number 3 appears three times, which is more than or equal to its value. It is the largest number that meets the condition, so the function returns 3.\n    search([2, 2, 3, 3, 3]) = 3\n    Explanation: Both 2 and 3 appear more than or equal to their values, but 3 is the largest number among them.\n    search([3, 3, 2, 4, 4, 4]) = -1\n    Explanation: None of the numbers 2, 3, or 4 appear more than or equal to their values. Therefore, the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic can handle cases where no integer meets the condition by returning -1.\n", "requirement analysis:\nThe requirements involve calculating the time to type a word based on the position of each letter on the keyboard. Each move between keys takes time proportional to the difference in their positions. The goal is to minimize this movement time for the given word. The product should be able to handle multiple test cases efficiently.\nrequirement pool:\n- Implement a function to calculate the time to type a word based on keyboard layout.\n- Allow the user to input multiple test cases and receive output for each.\n- Provide a user-friendly interface for customizing keyboard layouts.\n- Optimize the algorithm for calculating minimal movement time.\nTo solve this problem, we will create a Python function that calculates the minimal time required to type a given word on a custom keyboard layout. The function will take into account the positions of each letter on the keyboard and compute the total time based on the movement between keys. We will use a simple and efficient approach to ensure optimal performance.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: In this problem, the keyboard is represented as a string of 26 characters, each character representing a key. The goal is to calculate the time required to type a given word on this keyboard, considering the time taken to move between keys.\n\n# [phrase showing quantity relationship]\n    'as many times': Indicates the frequency of a letter in the word to be typed.\n    Explanation: For example, if a letter appears twice in the word, it means that the hand needs to move between the corresponding keys twice.\n\n# [degree adverb] \n    'minimal': Refers to the smallest amount of time required to type the word.\n    Explanation: The goal is to find the minimum time needed to type the word, considering the positions of the keys and the movement between them.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the solution, we need to:\n    1. Store the positions of each key on the keyboard.\n    2. Iterate through the word and calculate the time taken to type each letter.\n    3. Sum the times for all letters, including the movement between keys.\n\n# [edge case] \n    Test case:\n    Keyboard: \"abcdefghijklmnopqrstuvwxyz\"\n    Word: \"abc\"\n    Expected output: 2\n    Explanation:\n    - The positions of 'a', 'b', and 'c' on the keyboard are 1, 2, and 3 respectively.\n    - The time to type 'a' is 0 (no movement).\n    - The time to type 'b' is 1 (movement from 'a' to 'b').\n    - The time to type 'c' is 1 (movement from 'b' to 'c').\n    - Total time: 0 + 1 + 1 = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic is sufficient to calculate the minimal time for typing the word on the given keyboard.\n", "requirement analysis:\nThe requirements involve calculating the time to type a word based on the positions of the keys on the keyboard. This requires a good understanding of string manipulation and basic arithmetic operations. The input consists of multiple test cases, which adds complexity to the code. The output should provide the minimal time for each test case.\nrequirement pool:\n- Implement a function to calculate the time to type a word based on keyboard key positions.\n- Handle multiple test cases efficiently.\n- Ensure the code is optimized for performance.\n- Provide clear and concise output for each test case.\nTo solve this problem, we will create a Python function that calculates the time to type a word based on the positions of the keys on the keyboard. The function will first map the positions of the keys, then calculate the time for each test case by iterating through the word and summing the absolute differences in positions between consecutive letters. The function will handle multiple test cases efficiently, ensuring optimal performance.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on the keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: The keyboard layout is fixed, and we need to calculate the time to type a word based on the positions of the keys.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To solve this problem, we need to:\n    1. Map the positions of the keys on the keyboard.\n    2. Calculate the time to type the word by summing the absolute differences in positions between consecutive letters.\n\n# [edge case] \n    Test Case 1:\n    Keyboard: \"abcdefghijklmnopqrstuvwxyz\"\n    Word: \"abc\"\n    Expected Output: 2\n    Explanation: The positions of the keys are consecutive, so the time to type \"abc\" is |1-0| + |2-1| + |3-2| = 0 + 1 + 1 = 2.\n\n    Test Case 2:\n    Keyboard: \"qwertyuiopasdfghjklzxcvbnm\"\n    Word: \"hello\"\n    Expected Output: 30\n    Explanation: The positions of the keys are not consecutive, so the time to type \"hello\" is |12-16| + |18-15| + |13-14| + |15-13| + |16-12| = 4 + 3 + 1 + 2 + 4 = 14.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to solve the problem.\n", "requirement analysis:\nThe primary requirement is to calculate the time required to type a word based on the positions of the keys on the keyboard. This involves mapping each letter to its position on the keyboard and calculating the time based on the difference in positions between consecutive letters. The input consists of multiple test cases, each with a unique keyboard layout and a word to be typed. The output should provide the minimal time for each test case.\nrequirement pool:\n- Implement a function to calculate the time to type a word based on keyboard layout.\n- Handle multiple test cases with different keyboard layouts and words.\n- Ensure the code is efficient and can handle up to 1000 test cases.\n- Provide a user-friendly interface to input the keyboard layout and words.\n- Display the calculated time for each test case in a clear and concise manner.\nTo solve this problem, we will create a Python function that calculates the time required to type a word based on the positions of the keys on the keyboard. The function will first map each letter to its position on the keyboard, then calculate the time based on the difference in positions between consecutive letters. We will handle multiple test cases, each with a unique keyboard layout and a word to be typed.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: In this problem, the keyboard is given as a string of 26 unique lowercase Latin letters. Each letter is positioned sequentially in a row. The task is to calculate the time required to type a word based on the positions of these keys.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates that the value of the integer on the left is greater than the value on the right.\n    Explanation: In the requirement, \"more than\" is used to compare the positions of keys on the keyboard. For example, \"the absolute value of the difference between the positions of the keys used for consecutive letters\" means we need to find the difference between the positions of two keys and take its absolute value.\n\n# [degree adverb] \n    'smallest': Indicates the minimum value that satisfies a condition.\n    Explanation: In the requirement, \"smallest\" is used to find the minimal time it takes to type the word s. This means we need to find the minimum possible time based on the positions of the keys on the keyboard.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to:\n    1. Map each letter to its position on the keyboard.\n    2. Calculate the time to type the word s based on the positions of the keys.\n    3. Handle multiple test cases with different keyboard layouts and words.\n\n# [edge case] \n    Edge case 1:\n    Input: keyboard = \"abcdefghijklmnopqrstuvwxyz\", word = \"abc\"\n    Explanation: The positions of the keys for 'a', 'b', and 'c' are 0, 1, and 2 respectively. The time to type the word \"abc\" is the sum of the absolute differences between consecutive positions: |1-0| + |2-1| = 1 + 1 = 2.\n    Edge case 2:\n    Input: keyboard = \"qwertyuiopasdfghjklzxcvbnm\", word = \"hello\"\n    Explanation: The positions of the keys for 'h', 'e', 'l', 'l', and 'o' are 7, 4, 11, 11, and 14 respectively. The time to type the word \"hello\" is |7-4| + |4-11| + |11-11| + |11-14| = 3 + 7 + 0 + 3 = 13.\n    Edge case 3:\n    Input: keyboard = \"zyxwvutsrqponmlkjihgfedcba\", word = \"code\"\n    Explanation: The positions of the keys for 'c', 'o', 'd', and 'e' are 25, 24, 3, and 4 respectively. The time to type the word \"code\" is |25-24| + |24-3| + |3-4| = 1 + 21 + 1 = 23.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can handle any valid input within the given constraints.\n", "requirement analysis:\nThe requirements involve calculating the time to type a word based on the positions of the keys on the keyboard. Each letter's position is determined by its index in the keyboard string. The time to type a word is the sum of the absolute differences between the positions of consecutive letters. This requires a straightforward calculation for each test case, making it suitable for a coding challenge.\nrequirement pool:\n- Implement a function to calculate the time to type a word based on keyboard positions.\n- Handle multiple test cases efficiently.\n- Ensure the program is user-friendly and provides clear output for each test case.\n- Optimize the code for performance, especially for a large number of test cases.\nTo solve this problem, we will create a Python function that calculates the time to type a word based on the positions of the keys on the keyboard. The function will first map each letter to its position on the keyboard, then calculate the time to type a word by summing the absolute differences between the positions of consecutive letters. We will handle multiple test cases by reading the input until the end of the file.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: In this problem, the keyboard layout is given as a string of 26 characters, each representing a key. The goal is to determine the time required to type a word on this keyboard, where the time is based on the positions of the keys used for consecutive letters.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates that the number of times a letter appears in the word should be greater than or equal to the letter's position on the keyboard.\n    Explanation: For example, if a letter 'a' appears more than once in the word, it means that the letter 'a' must be typed more than once.\n\n# [degree adverb] \n    'least': Indicates the minimum number of times a letter must appear in the word to be considered.\n    Explanation: For example, if a letter 'b' should appear at least twice, it means that the letter 'b' must appear at least two times in the word.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to:\n    1. Map each letter to its position on the keyboard.\n    2. Calculate the time to type the word by summing the absolute differences between the positions of consecutive letters.\n    3. Handle multiple test cases by reading the input until the end of the file.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the largest integer that appears at least as many times as itself is 3, as it appears 3 times, which is equal to its value.\n    search([5, 5, 4, 4, 4]) = -1\n    Explanation: No integer appears at least as many times as itself in this case, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We could set the original return answer to -1 and then find the largest integer that meets the need. \n\n## Prompt 3:\n[requirement]\nYou are given a keyboard with 26 keys arranged sequentially in one row, each key corresponding to a unique lowercase Latin letter. You need to type the word s on this keyboard, which consists only of lowercase Latin letters. The time to type a word is determined by the absolute value of the difference between the positions of the keys used for consecutive letters, with no time spent on pressing the keys or placing the hand over the first letter. Determine the time to print the word s, assuming the keyboard layout remains constant throughout the typing process.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n-------\n[plan]\nTo solve this problem, we will create a Python function that calculates the time to type a word based on the positions of the keys on the keyboard. The function will first map each letter to its position on the keyboard, then calculate the time to type a word by summing the absolute differences between the positions of consecutive letters. We will handle multiple test cases by reading the input until the end of the file.\n\n## Answer 3:\n\n# [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: In this problem, the keyboard layout is given as a string of 26 characters, each representing a key. The goal is to determine the time required to type a word on this keyboard, where the time is based on the positions of the keys used for consecutive letters.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates that the number of times a letter appears in the word should be greater than or equal to the letter's position on the keyboard.\n    Explanation: For example, if a letter 'a' appears more than once in the word, it means that the letter 'a' must be typed more than once.\n\n# [degree adverb] \n    'least': Indicates the minimum number of times a letter must appear in the word to be considered.\n    Explanation: For example, if a letter 'b' should appear at least twice, it means that the letter 'b' must appear at least two times in the word.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to:\n    1. Map each letter to its position on the keyboard.\n    2. Calculate the time to type the word by summing the absolute differences between the positions of consecutive letters.\n    3. Handle multiple test cases by reading the input until the end of the file.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the largest integer that appears at least as many times as itself is 3, as it appears 3 times, which is equal to its value.\n    search([5, 5, 4, 4, 4]) = -1\n    Explanation: No integer appears at least as many times as itself in this case, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We could set the original return answer to -1 and then find the largest integer that meets the need.\n", "requirement analysis:\nThe primary requirement is to calculate the time it takes to type a given word on a specific keyboard layout. The keyboard layout remains constant throughout the typing of the word. The solution should handle multiple test cases efficiently. The input includes the keyboard layout and the word to be typed, and the output is the time required to type the word.\nrequirement pool:\n- Implement a function to calculate the time to type a word based on a given keyboard layout.\n- Ensure the solution can handle multiple test cases efficiently.\n- Allow for customization of keyboard layouts to test against different scenarios.\n- Optimize the algorithm to minimize the time calculation for each word typed.\nWe will use Python to implement the solution. The main challenge is to calculate the time it takes to type a word based on a given keyboard layout. We will assume that the keyboard layout is provided as a string of 26 characters, where each character represents a key on the keyboard. The word to be typed will be provided as a string of characters. The solution will iterate through each character in the word, find its position on the keyboard, and calculate the time based on the position of the current and previous character.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': the arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: In this problem, the keyboard layout is given as a string of 26 characters, where each character represents a key on the keyboard. We need to calculate the time it takes to type a word based on this layout.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The solution will involve the following steps:\n    1. Read the keyboard layout and the word to be typed.\n    2. Create a dictionary to map each character to its position on the keyboard.\n    3. Initialize a variable to keep track of the total time.\n    4. Iterate through each character in the word, calculate the time to type the current character based on its position and the position of the previous character, and add this time to the total time.\n    5. Print the total time for each test case.\n\n# [edge case] \n    Edge case 1:\n    Input:\n    a\n    abc\n    Output:\n    2\n    Explanation: The keyboard has only one key 'a', and the word to be typed is 'abc'. It takes |1 - 1| + |1 - 1| + |1 - 1| = 2 units of time to type the word.\n\n    Edge case 2:\n    Input:\n    abcdefghijklmnopqrstuvwxyz\n    zyxwvutsrqponmlkjihgfedcba\n    Output:\n    25\n    Explanation: The keyboard is in reverse alphabetical order, and the word is the same as the keyboard layout but in reverse. It takes |26 - 1| + |25 - 2| + ... + |2 - 25| = 25 units of time to type the word.\n\n    Edge case 3:\n    Input:\n    abcdefghijklmnopqrstuvwxyz\n    a\n    Output:\n    0\n    Explanation: The word consists of only one character, 'a', which is the first key on the keyboard. It takes |1 - 1| = 0 units of time to type the word.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic can handle all the edge cases correctly.\n"], "scores": [], "pass_results": [true, true, true, false, true, true, true, false, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 8, "round": 362, "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "mutate_method": "condense_two2one", "parent_index": 245}
