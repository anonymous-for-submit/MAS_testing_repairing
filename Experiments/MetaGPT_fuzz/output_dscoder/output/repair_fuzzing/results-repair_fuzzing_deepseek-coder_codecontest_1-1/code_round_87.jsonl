{"name": "1613_A. Long Comparison", "description": "Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.", "tags": ["implementation", "math"], "difficulty": 7, "id": 1613, "sample_io": [{"input": "5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": [">\n=\n<\n=\n<\n"]}], "test_list": [{"input": "1\n2000 0\n2 3\n", "output": ["=\n"]}, {"input": "1\n1 6\n1000000 0\n", "output": ["=\n"]}, {"input": "3\n1 3\n100 1\n2 3\n200 1\n6 3\n600 1\n", "output": ["=\n=\n=\n"]}, {"input": "1\n1201 0\n12 2\n", "output": [">\n"]}, {"input": "1\n50 2\n500 1\n", "output": ["=\n"]}, {"input": "1\n21 4\n210010 0\n", "output": ["<\n"]}, {"input": "1\n12 2\n1205 0\n", "output": ["<\n"]}, {"input": "1\n12 2\n1204 0\n", "output": ["<\n"]}, {"input": "1\n100000 1\n1000000 0\n", "output": ["=\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "1\n1000000 10\n1000000 10\n", "output": ["=\n"]}, {"input": "1\n1 5\n101 3\n", "output": ["<\n"]}, {"input": "1\n105 0\n1 2\n", "output": [">\n"]}, {"input": "1\n402 2\n4 4\n", "output": [">\n"]}, {"input": "1\n1011 2\n1023 2\n", "output": ["<\n"]}, {"input": "2\n4 0\n7 0\n5 0\n6 0\n", "output": ["<\n<\n"]}, {"input": "1\n12 2\n1201 0\n", "output": ["<\n"]}, {"input": "1\n12001 59\n12 62\n", "output": [">\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n=\n=\n=\n"]}, {"input": "1\n1 6\n10101 2\n", "output": ["<\n"]}, {"input": "1\n999999 0\n999999 0\n", "output": ["=\n"]}, {"input": "1\n999999 0\n1000000 0\n", "output": ["<\n"]}, {"input": "5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": [">\n=\n<\n=\n<\n"]}, {"input": "1\n4 4\n402 2\n", "output": ["<\n"]}, {"input": "1\n12 5\n1204 3\n", "output": ["<\n"]}, {"input": "1\n100000 1\n100 4\n", "output": ["=\n"]}, {"input": "1\n1562 0\n2 3\n", "output": ["<\n"]}, {"input": "3\n1 3\n100 1\n4 3\n200 1\n6 3\n600 1\n", "output": ["=\n>\n=\n"]}, {"input": "1\n21 4\n72620 0\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "2\n4 0\n7 0\n5 0\n1 0\n", "output": ["<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n362 1\n6 3\n600 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n>\n=\n=\n"]}, {"input": "5\n2 1\n19 1\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": ["<\n=\n<\n=\n<\n"]}, {"input": "3\n1 3\n100 1\n4 3\n200 1\n5 3\n600 1\n", "output": ["=\n>\n<\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "2\n4 0\n7 0\n5 -1\n1 0\n", "output": ["<\n<\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n362 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n>\n>\n=\n"]}, {"input": "5\n2 1\n33 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 0\n", "output": ["<\n=\n<\n=\n>\n"]}, {"input": "3\n1 3\n100 1\n4 3\n200 1\n5 3\n465 1\n", "output": ["=\n>\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 6\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n<\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 0\n", "output": [">\n=\n<\n=\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 6\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 7\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n<\n=\n<\n=\n=\n=\n<\n=\n=\n=\n=\n<\n>\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 0\n1 0\n1 0\n99 0\n1 0\n", "output": [">\n=\n>\n=\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n6 3\n300 1\n4 3\n400 1\n4 3\n352 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n>\n=\n>\n>\n=\n"]}, {"input": "3\n1 3\n100 1\n8 0\n200 1\n5 0\n465 1\n", "output": ["=\n<\n<\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n6 3\n300 1\n5 3\n400 1\n4 3\n352 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n>\n>\n>\n>\n=\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1100 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 6\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1101 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n>\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 6\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1101 7\n1010000 4\n10000 7\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n>\n<\n=\n=\n>\n>\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "3\n1 3\n100 1\n2 3\n200 1\n11 3\n600 1\n", "output": ["=\n=\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1010000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n>\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n59 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "2\n4 0\n2 0\n5 0\n6 0\n", "output": [">\n<\n"]}, {"input": "5\n3 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": [">\n=\n<\n=\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 7\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 0\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n>\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 2\n362 1\n6 3\n600 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n<\n=\n=\n"]}, {"input": "5\n2 1\n19 1\n3 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": ["<\n<\n<\n=\n<\n"]}, {"input": "5\n2 1\n33 0\n10 2\n100 0\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 0\n", "output": ["<\n>\n<\n=\n>\n"]}, {"input": "3\n1 3\n110 1\n4 3\n200 1\n5 3\n600 1\n", "output": ["<\n>\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000010 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 10\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n<\n=\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n362 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n>\n>\n>\n=\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10001 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000010 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 6\n1000000 4\n100 8\n1000000 6\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n<\n<\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n4 3\n362 1\n6 3\n316 1\n1 2\n1000000 4\n", "output": ["=\n=\n=\n=\n>\n>\n<\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 0\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 0\n", "output": [">\n>\n<\n=\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n3 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n<\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1001000 4\n100 8\n1000000 6\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 7\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n<\n<\n=\n<\n=\n=\n=\n<\n=\n=\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 5\n200 1\n3 3\n300 1\n4 3\n400 1\n4 3\n352 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n>\n=\n=\n>\n>\n=\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 0\n1 0\n1 1\n99 0\n1 0\n", "output": [">\n=\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 2\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n<\n<\n>\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 0\n1 1\n1 0\n29 0\n1 0\n", "output": [">\n=\n>\n>\n>\n"]}, {"input": "3\n2 3\n100 1\n8 0\n200 1\n5 0\n465 1\n", "output": [">\n<\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000001 1\n1000011 1\n999999 1\n999998 1\n839388 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n>\n>\n"]}, {"input": "5\n2 1\n33 -1\n4 2\n100 1\n1999 0\n2 0\n1 0\n1 0\n29 0\n2 0\n", "output": [">\n<\n>\n=\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 5\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1100 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n>\n=\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 6\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1101 7\n1010000 4\n10000 2\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n>\n<\n=\n=\n>\n<\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1010000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 0\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n>\n=\n=\n=\n<\n>\n>\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n59 1\n3 3\n300 1\n4 3\n400 1\n5 3\n200 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n>\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "2\n4 0\n2 0\n5 0\n6 -1\n", "output": [">\n>\n"]}, {"input": "5\n3 1\n19 0\n10 2\n101 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": [">\n<\n<\n=\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 7\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 8\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n>\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 0\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1010 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n>\n=\n>\n=\n=\n=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 14\n1000010 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 0\n1000000 4\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 10\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n<\n=\n<\n=\n=\n=\n=\n<\n=\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n362 1\n6 3\n316 1\n1 10\n1000000 8\n", "output": ["=\n=\n=\n>\n>\n>\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10001 6\n1000000 4\n1000 7\n1000000 3\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000010 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n<\n=\n<\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 6\n1000000 4\n100 8\n1000000 6\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 2\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n<\n<\n=\n<\n=\n=\n=\n=\n=\n<\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n462 1\n4 3\n362 1\n6 3\n316 1\n1 2\n1000000 4\n", "output": ["=\n=\n=\n<\n>\n>\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n3 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n110 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n<\n=\n<\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 5\n200 1\n3 3\n300 1\n4 2\n400 1\n4 3\n352 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n>\n=\n<\n>\n>\n=\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 2\n1999 0\n2 0\n1 0\n1 1\n99 0\n1 0\n", "output": [">\n<\n>\n<\n>\n"]}, {"input": "3\n2 3\n100 1\n8 3\n200 1\n5 -1\n465 1\n", "output": [">\n>\n<\n"]}, {"input": "23\n1 3\n100 0\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 2\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": [">\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n<\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n121 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000001 1\n1000011 1\n999999 1\n999998 1\n839388 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n>\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n>\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 1\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1100 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n<\n=\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 6\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1101 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1010011 1\n999999 1\n999998 1\n1793536 1\n45690 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n>\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 6\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 2\n1101 7\n1010000 4\n10000 2\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n>\n<\n=\n>\n>\n<\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n1201 -1\n12 2\n", "output": ["<\n"]}, {"input": "1\n50 1\n500 1\n", "output": ["<\n"]}, {"input": "1\n12 2\n1205 1\n", "output": ["<\n"]}, {"input": "1\n5 2\n1204 0\n", "output": ["<\n"]}, {"input": "1\n100000 1\n1000000 -1\n", "output": [">\n"]}, {"input": "1\n1100000 10\n1000000 10\n", "output": [">\n"]}, {"input": "1\n2 5\n101 3\n", "output": [">\n"]}, {"input": "1\n105 -1\n1 2\n", "output": ["<\n"]}, {"input": "1\n402 0\n4 4\n", "output": ["<\n"]}, {"input": "1\n1011 2\n1023 3\n", "output": ["<\n"]}, {"input": "1\n12 2\n802 0\n", "output": [">\n"]}, {"input": "1\n12001 59\n12 2\n", "output": [">\n"]}, {"input": "1\n1 6\n11101 2\n", "output": ["<\n"]}, {"input": "1\n1603908 0\n999999 0\n", "output": [">\n"]}, {"input": "1\n999999 0\n1001000 0\n", "output": ["<\n"]}, {"input": "1\n4 3\n402 2\n", "output": ["<\n"]}, {"input": "1\n21 5\n1204 3\n", "output": [">\n"]}, {"input": "1\n100100 1\n100 4\n", "output": [">\n"]}, {"input": "5\n2 1\n33 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": ["<\n=\n<\n=\n<\n"]}, {"input": "1\n1562 -1\n2 3\n", "output": ["<\n"]}, {"input": "1\n1201 -1\n20 2\n", "output": ["<\n"]}, {"input": "1\n83 2\n500 1\n", "output": [">\n"]}, {"input": "1\n21 4\n114481 0\n", "output": [">\n"]}, {"input": "1\n2 2\n1205 1\n", "output": ["<\n"]}, {"input": "1\n5 4\n1204 0\n", "output": [">\n"]}, {"input": "1\n100100 1\n1000000 -1\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n1100000 19\n1000000 10\n", "output": [">\n"]}, {"input": "1\n2 5\n111 3\n", "output": [">\n"]}, {"input": "1\n105 -1\n2 2\n", "output": ["<\n"]}, {"input": "1\n402 0\n1 4\n", "output": ["<\n"]}, {"input": "1\n1111 2\n1023 3\n", "output": ["<\n"]}, {"input": "1\n12 2\n802 1\n", "output": ["<\n"]}, {"input": "1\n12001 59\n12 3\n", "output": [">\n"]}, {"input": "1\n1 6\n11100 2\n", "output": ["<\n"]}, {"input": "1\n1603908 0\n1801851 0\n", "output": ["<\n"]}, {"input": "1\n999999 0\n1001010 0\n", "output": ["<\n"]}, {"input": "1\n5 4\n402 2\n", "output": [">\n"]}, {"input": "1\n25 5\n1204 3\n", "output": [">\n"]}, {"input": "1\n100100 1\n110 4\n", "output": ["<\n"]}, {"input": "1\n1927 -1\n20 2\n", "output": ["<\n"]}, {"input": "1\n83 2\n952 1\n", "output": ["<\n"]}, {"input": "1\n21 4\n114481 -1\n", "output": [">\n"]}, {"input": "1\n2 2\n743 1\n", "output": ["<\n"]}, {"input": "1\n5 5\n1204 0\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000010 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n2 5\n111 5\n", "output": ["<\n"]}, {"input": "1\n402 0\n1 1\n", "output": [">\n"]}, {"input": "1\n1111 2\n1023 0\n", "output": [">\n"]}, {"input": "1\n12 2\n831 1\n", "output": ["<\n"]}, {"input": "1\n12001 59\n12 0\n", "output": [">\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n4 3\n362 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n>\n>\n=\n"]}, {"input": "1\n1 1\n11100 2\n", "output": ["<\n"]}, {"input": "1\n1603908 -1\n1801851 0\n", "output": ["<\n"]}, {"input": "1\n362052 0\n1001010 0\n", "output": ["<\n"]}, {"input": "1\n25 4\n1204 3\n", "output": ["<\n"]}, {"input": "1\n100100 1\n010 4\n", "output": [">\n"]}, {"input": "3\n1 3\n100 1\n8 3\n200 1\n5 3\n465 1\n", "output": ["=\n>\n>\n"]}, {"input": "1\n1927 -1\n16 2\n", "output": ["<\n"]}, {"input": "1\n132 2\n952 1\n", "output": [">\n"]}, {"input": "1\n21 4\n177954 -1\n", "output": [">\n"]}, {"input": "1\n2 4\n743 1\n", "output": [">\n"]}, {"input": "1\n5 5\n1216 0\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n2 5\n011 5\n", "output": ["<\n"]}, {"input": "1\n468 0\n1 1\n", "output": [">\n"]}, {"input": "1\n1111 3\n1023 0\n", "output": [">\n"]}, {"input": "1\n7 2\n831 1\n", "output": ["<\n"]}, {"input": "1\n12001 59\n18 0\n", "output": [">\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n4 3\n352 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n>\n>\n=\n"]}, {"input": "1\n1 1\n11100 0\n", "output": ["<\n"]}, {"input": "1\n2992743 -1\n1801851 0\n", "output": ["<\n"]}, {"input": "1\n362052 0\n1001011 0\n", "output": ["<\n"]}, {"input": "1\n25 4\n1990 3\n", "output": ["<\n"]}, {"input": "3\n1 3\n100 1\n8 3\n200 1\n5 0\n465 1\n", "output": ["=\n>\n<\n"]}, {"input": "1\n1927 -2\n16 2\n", "output": ["<\n"]}, {"input": "1\n132 2\n1561 1\n", "output": ["<\n"]}, {"input": "1\n2 4\n768 1\n", "output": [">\n"]}, {"input": "1\n5 9\n1216 0\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n2 5\n010 5\n", "output": ["<\n"]}, {"input": "1\n15 0\n1 1\n", "output": [">\n"]}, {"input": "1\n1111 3\n533 0\n", "output": [">\n"]}, {"input": "1\n7 2\n1076 1\n", "output": ["<\n"]}, {"input": "1\n12001 59\n11 0\n", "output": [">\n"]}, {"input": "1\n1 1\n11100 1\n", "output": ["<\n"]}, {"input": "1\n2992743 0\n1801851 0\n", "output": [">\n"]}, {"input": "1\n122308 0\n1001011 0\n", "output": ["<\n"]}, {"input": "1\n25 5\n1990 3\n", "output": [">\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 0\n1 0\n1 0\n29 0\n1 0\n", "output": [">\n=\n>\n=\n>\n"]}, {"input": "1\n1927 -3\n16 2\n", "output": ["<\n"]}, {"input": "1\n132 2\n2693 1\n", "output": ["<\n"]}, {"input": "1\n2 4\n768 0\n", "output": [">\n"]}, {"input": "1\n5 14\n1216 0\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000001 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n2 2\n011 5\n", "output": ["<\n"]}, {"input": "1\n7 0\n1 1\n", "output": ["<\n"]}, {"input": "1\n1111 3\n950 0\n", "output": [">\n"]}, {"input": "1\n7 2\n1076 2\n", "output": ["<\n"]}, {"input": "1\n12001 59\n11 1\n", "output": [">\n"]}, {"input": "1\n1 0\n11100 1\n", "output": ["<\n"]}, {"input": "1\n2992743 1\n1801851 0\n", "output": [">\n"]}, {"input": "1\n25 4\n1990 0\n", "output": [">\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 0\n1 0\n1 0\n29 0\n2 0\n", "output": [">\n=\n>\n=\n>\n"]}, {"input": "3\n1 3\n100 1\n8 0\n200 0\n5 0\n465 1\n", "output": ["=\n<\n<\n"]}, {"input": "1\n132 2\n73 1\n", "output": [">\n"]}, {"input": "1\n5 19\n1216 0\n", "output": [">\n"]}, {"input": "1\n2 1\n011 5\n", "output": ["<\n"]}, {"input": "1\n7 0\n1 2\n", "output": ["<\n"]}, {"input": "1\n1111 3\n1246 0\n", "output": [">\n"]}, {"input": "1\n12001 59\n11 2\n", "output": [">\n"]}, {"input": "1\n1 0\n11100 0\n", "output": ["<\n"]}, {"input": "1\n2992743 1\n28222 0\n", "output": [">\n"]}, {"input": "1\n34 4\n1990 0\n", "output": [">\n"]}, {"input": "3\n1 3\n100 1\n8 0\n200 0\n5 0\n465 2\n", "output": ["=\n<\n<\n"]}, {"input": "1\n132 1\n73 1\n", "output": [">\n"]}, {"input": "1\n5 19\n1216 1\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1101 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n7 0\n2 2\n", "output": ["<\n"]}, {"input": "1\n1111 3\n2222 0\n", "output": [">\n"]}, {"input": "1\n12001 59\n21 2\n", "output": [">\n"]}, {"input": "1\n1 0\n11000 1\n", "output": ["<\n"]}, {"input": "1\n2992743 1\n28222 1\n", "output": [">\n"]}, {"input": "1\n7 4\n1990 0\n", "output": [">\n"]}, {"input": "1\n229 1\n73 1\n", "output": [">\n"]}, {"input": "1\n2 19\n1216 1\n", "output": [">\n"]}], "task_id": "codecontest/113", "prompt": "Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format. Each of these numbers is a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him? Consider edge cases such as when x is 1 and p is large.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.", "repair_prompt": ["Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format. Each of these numbers is a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him? Consider edge cases such as when x is 1 and p is large.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.\nWrite a main() function and use input() function to read input from stdin", " Monocarp wrote down two numbers on a whiteboard. Both numbers are positive integers, and each has a certain number of zeros appended to its end. Specifically, each number is a positive integer x with p zeros appended to its end.\n\nMonocarp then asks you to compare these two numbers, taking into account edge cases where x is 1 and p is very large. Can you assist him in this task?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.\nWrite a main() function and use input() function to read input from stdin", " Monocarp wrote two numbers on a whiteboard, each being a positive integer x with p zeros appended to its end. He then asked you to compare these two numbers, taking into account edge cases like when x is 1 and p is very large.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\n\ndef compare_numbers(n1: tuple, n2: tuple) -> str:\n    x1, p1 = n1\n    x2, p2 = n2\n\n    # Adjust the number of zeros to match the length of the number\n    while p1 > 0 and x1 % 10 == 0:\n        x1 //= 10\n        p1 -= 1\n    while p2 > 0 and x2 % 10 == 0:\n        x2 //= 10\n        p2 -= 1\n\n    # Compare the numbers directly\n    if x1 < x2:\n        return '<'\n    elif x1 > x2:\n        return '>'\n    else:\n        return '='\n\n# Read input for the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    n1 = tuple(map(int, input().split()))\n    n2 = tuple(map(int, input().split()))\n    result = compare_numbers(n1, n2)\n    print(result)\n", "from typing import List\n## main.py\n\ndef compare_numbers(x1, p1, x2, p2):\n    \"\"\"\n    Compares two numbers where each number is a positive integer x with p zeros appended.\n    \n    Args:\n        x1 (int): The base integer of the first number.\n        p1 (int): The number of zeros appended to the end of the first number.\n        x2 (int): The base integer of the second number.\n        p2 (int): The number of zeros appended to the end of the second number.\n        \n    Returns:\n        str: '<' if the first number is smaller, '>' if the first number is larger, '=' if they are equal.\n    \"\"\"\n    # Remove trailing zeros from both numbers\n    while x1 % 10 == 0 and p1 > 0:\n        x1 //= 10\n        p1 -= 1\n    while x2 % 10 == 0 and p2 > 0:\n        x2 //= 10\n        p2 -= 1\n    \n    # Compare the lengths of the numbers after removing the zeros\n    if p1 > p2:\n        return '>'\n    elif p1 < p2:\n        return '<'\n    else:\n        # If the lengths are equal, compare the original numbers without the zeros\n        if x1 > x2:\n            return '>'\n        elif x1 < x2:\n            return '<'\n        else:\n            return '='\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n", "from typing import List\n## main.py\n\ndef compare_numbers(x1: int, p1: int, x2: int, p2: int) -> str:\n    \"\"\"\n    Compare two large numbers based on the number of zeros appended to them.\n\n    Args:\n        x1 (int): The first number.\n        p1 (int): The number of zeros to append to x1.\n        x2 (int): The second number.\n        p2 (int): The number of zeros to append to x2.\n\n    Returns:\n        str: '<' if the first number is smaller, '>' if the first number is larger, and '=' if they are equal.\n    \"\"\"\n    # Calculate the length of the numbers after appending zeros\n    len_x1 = len(str(x1)) + p1\n    len_x2 = len(str(x2)) + p2\n\n    # Compare the lengths of the numbers\n    if len_x1 < len_x2:\n        return '<'\n    elif len_x1 > len_x2:\n        return '>'\n    else:\n        # If lengths are equal, compare the original numbers directly\n        if x1 < x2:\n            return '<'\n        elif x1 > x2:\n            return '>'\n        else:\n            return '='\n\n# Read the number of test cases\nn = int(input())\n\n# Process each test case\nfor _ in range(n):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n", "from typing import List\n## main.py\n\ndef compare_numbers(x1, p1, x2, p2):\n    \"\"\"\n    Compares two numbers based on the number of trailing zeros.\n    \n    Args:\n        x1 (int): The first number without trailing zeros.\n        p1 (int): The number of trailing zeros in the first number.\n        x2 (int): The second number without trailing zeros.\n        p2 (int): The number of trailing zeros in the second number.\n        \n    Returns:\n        str: '<' if the first number is smaller, '>' if the first number is larger, '=' if they are equal.\n    \"\"\"\n    # Remove trailing zeros from both numbers\n    while x1 % 10 == 0 and p1 > 0:\n        x1 //= 10\n        p1 -= 1\n    while x2 % 10 == 0 and p2 > 0:\n        x2 //= 10\n        p2 -= 1\n    \n    # Compare the numbers after removing trailing zeros\n    if x1 < x2:\n        return '<'\n    elif x1 > x2:\n        return '>'\n    else:\n        return '='\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n", "from typing import List\n## main.py\n\ndef compare_numbers(x1, p1, x2, p2):\n    \"\"\"\n    Compares two numbers where each has a certain number of zeros appended.\n    \n    Args:\n        x1 (int): The base of the first number.\n        p1 (int): The number of zeros appended to the first number.\n        x2 (int): The base of the second number.\n        p2 (int): The number of zeros appended to the second number.\n        \n    Returns:\n        str: The result of the comparison ('<', '>', or '=').\n    \"\"\"\n    # Remove trailing zeros from both numbers\n    while x1 % 10 == 0 and p1 > 0:\n        x1 //= 10\n        p1 -= 1\n    while x2 % 10 == 0 and p2 > 0:\n        x2 //= 10\n        p2 -= 1\n    \n    # Compare the lengths of the numbers after removing the zeros\n    if p1 > p2:\n        return '>'\n    elif p1 < p2:\n        return '<'\n    else:\n        # If the lengths are equal, compare the original numbers without the zeros\n        if x1 > x2:\n            return '>'\n        elif x1 < x2:\n            return '<'\n        else:\n            return '='\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n", "from typing import List\n## main.py\n\ndef compare_numbers(x1: int, p1: int, x2: int, p2: int) -> str:\n    # Remove trailing zeros from both numbers\n    while x1 % 10 == 0 and p1 > 0:\n        x1 //= 10\n        p1 -= 1\n    while x2 % 10 == 0 and p2 > 0:\n        x2 //= 10\n        p2 -= 1\n    \n    # Compare the numbers after removing trailing zeros\n    if x1 < x2:\n        return '<'\n    elif x1 > x2:\n        return '>'\n    else:\n        return '='\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n", "from typing import List\n## main.py\n\ndef compare_numbers(x1: int, p1: int, x2: int, p2: int) -> str:\n    # Calculate the actual values of the numbers by appending the zeros\n    value1 = x1 * (10 ** p1)\n    value2 = x2 * (10 ** p2)\n    \n    # Compare the two numbers based on their magnitude\n    if value1 < value2:\n        return '<'\n    elif value1 > value2:\n        return '>'\n    else:\n        return '='\n\n# Provide the Interface\nn = int(input())\nfor _ in range(n):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n", "from typing import List\n## main.py\n\ndef compare_numbers(x1: int, p1: int, x2: int, p2: int) -> str:\n    # Determine the number of trailing zeros in each number\n    while x1 % 10 == 0 and x1 != 0:\n        x1 //= 10\n        p1 += 1\n    while x2 % 10 == 0 and x2 != 0:\n        x2 //= 10\n        p2 += 1\n    \n    # Compare the number of trailing zeros\n    if p1 > p2:\n        return '>'\n    elif p1 < p2:\n        return '<'\n    else:\n        # If the number of trailing zeros is the same, compare the numbers directly\n        if x1 > x2:\n            return '>'\n        elif x1 < x2:\n            return '<'\n        else:\n            return '='\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n", "from typing import List\n## main.py\n\ndef compare_numbers(x1: int, p1: int, x2: int, p2: int) -> str:\n    # Determine the number of digits in x1 and x2 after appending p1 and p2 zeros respectively\n    digits_x1 = len(str(x1)) + p1\n    digits_x2 = len(str(x2)) + p2\n    \n    # Compare the lengths of the two numbers\n    if digits_x1 > digits_x2:\n        return '>'\n    elif digits_x1 < digits_x2:\n        return '<'\n    else:\n        # If the lengths are the same, compare the original numbers x1 and x2\n        # Normalize the numbers by removing trailing zeros\n        while x1 % 10 == 0 and p1 > 0:\n            x1 //= 10\n            p1 -= 1\n        while x2 % 10 == 0 and p2 > 0:\n            x2 //= 10\n            p2 -= 1\n        \n        # Compare the normalized numbers\n        if x1 > x2:\n            return '>'\n        elif x1 < x2:\n            return '<'\n        else:\n            return '='\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n", "from typing import List\n## main.py\n\ndef compare_numbers(x1: int, p1: int, x2: int, p2: int) -> str:\n    # Handle edge case where either number is 1 and the power of zeros is large\n    if x1 == 1 and p1 >= 10**6:\n        return '<'\n    if x2 == 1 and p2 >= 10**6:\n        return '>'\n    \n    # Calculate the number of digits in x1 and x2\n    digits_x1 = len(str(x1)) + p1\n    digits_x2 = len(str(x2)) + p2\n    \n    # Compare the number of digits\n    if digits_x1 > digits_x2:\n        return '>'\n    elif digits_x2 > digits_x1:\n        return '<'\n    else:\n        # If the number of digits is the same, compare the numbers directly\n        if x1 > x2:\n            return '>'\n        elif x2 > x1:\n            return '<'\n        else:\n            return '='\n\n# Read the number of test cases\nn = int(input())\n\n# Process each test case\nfor _ in range(n):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n"], "plans": ["requirement analysis:\nThe requirements specify the need to compare two numbers, where each number is a positive integer with a specific number of zeros appended to it. The solution must handle a large number of test cases efficiently. Edge cases such as when x is 1 and p is large need to be considered to ensure the solution is robust.\nrequirement pool:\n- Implement a function to compare two numbers based on the given format\n- Handle edge cases where x is 1 and p is large\n- Ensure the solution can handle a large number of test cases efficiently\n- Optimize the code for performance to handle large inputs\n- Ensure the solution is user-friendly and easy to understand\nTo implement the solution, we will use Python due to its simplicity and efficiency. The main challenge is to compare two numbers where each number is a positive integer with a specific number of zeros appended to it. We will use string manipulation to handle the zeros and then compare the numbers directly.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'positive integer': means the numbers are greater than zero\n    'zeros appended': means the numbers end with a specific number of zeros\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n\n# [edge case] \n    Edge case 1: x_1 = 1, p_1 = 1000000\n    Expected output: '<'\n    Explanation: The first number is 1 followed by 1000000 zeros, which is effectively 1, and the second number is a positive integer with 0 zeros. The first number is clearly smaller than the second number.\n\n    Edge case 2: x_2 = 10, p_2 = 0\n    Expected output: '>'\n    Explanation: The first number is a positive integer with 0 zeros, and the second number is 10. The first number is 10, and the second number is 10, but since the first number has more trailing zeros, it is greater than the second number.\n\n    Edge case 3: x_1 = 1999, p_1 = 1\n    Expected output: '<'\n    Explanation: The first number is 1999 followed by 1 zero, which is 19990, and the second number is 2000 with 0 zeros. The first number is clearly smaller than the second number.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle these cases by comparing the numbers directly after removing the trailing zeros.\n", "requirement analysis:\nThe requirements specify the need to compare two numbers where each number is a positive integer x with p zeros appended to its end. The comparison should consider edge cases such as when x is 1 and p is large. The solution must handle multiple test cases efficiently. The output should clearly indicate whether the first number is less than, greater than, or equal to the second number.\nrequirement pool:\n- Implement a function to compare two numbers based on the given format\n- Handle edge cases where x is 1 and p is large\n- Ensure the solution can handle multiple test cases efficiently\n- Optimize the algorithm for performance\n- Provide clear and accurate output for each test case\nTo implement the solution, we will use Python due to its simplicity and efficiency. The main challenge is to compare two numbers where each number is a positive integer x with p zeros appended to its end. We will handle edge cases such as when x is 1 and p is large. The solution will be efficient and handle multiple test cases.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'positive integer': means that the numbers are greater than zero\n    'zeros appended': means that the numbers end with a certain number of zeros\n\n# [phrase showing quantity relationship]\n    'with p zeros appended': means that the number is multiplied by 10^p\n\n# [degree adverb] \n    'large': means that the number of zeros can be very high\n\n# [code logic]\n    To compare two numbers where each number is a positive integer x with p zeros appended, we can follow these steps:\n    1. Remove the trailing zeros from both numbers.\n    2. Compare the lengths of the numbers after removing the zeros.\n    3. If the lengths are equal, compare the original numbers without the zeros.\n    4. If one number has more trailing zeros, it is larger.\n\n# [edge case] \n    Edge case 1: x1 = 1, p1 = 1000000\n    Expected output: '<'\n    Explanation: The first number is 1 followed by 1000000 zeros, which is a very large number. The second number is just 1, so it is much smaller.\n\n    Edge case 2: x1 = 10, p1 = 0, x2 = 10, p2 = 0\n    Expected output: '='\n    Explanation: Both numbers are 10, and there are no zeros appended to them. They are equal.\n\n    Edge case 3: x1 = 1, p1 = 0, x2 = 2, p2 = 0\n    Expected output: '<'\n    Explanation: The first number is 1, and the second number is 2. They are not equal, and 1 is smaller than 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle these cases.\n", "requirement analysis:\nThe requirements specify the need to compare two numbers where each number is a positive integer with a specific number of zeros appended to it. The comparison should consider edge cases, such as when x is 1 and p is large. The solution should be efficient and handle a large number of test cases.\nrequirement pool:\n- Implement a function to compare two numbers based on the given format.\n- Handle edge cases where x is 1 and p is large.\n- Ensure the solution is efficient and can handle a large number of test cases.\n- Provide clear and accurate output for each test case.\nTo implement the solution, we will use Python due to its simplicity and efficiency. The main challenge is to handle the large number of zeros appended to the integers, which can lead to very large numbers that exceed the capacity of standard integer types. We will use Python's built-in support for large integers to handle these cases. The comparison will be done by comparing the lengths of the numbers after the zeros are appended. If the lengths are equal, we will compare the original numbers directly.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'large integers': means integers that can be very large and exceed the capacity of standard integer types.\n    Explanation: In the requirement, the numbers x are appended with p zeros, which can result in very large numbers. Python's built-in support for large integers allows us to handle these cases efficiently.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the solution, we will follow these steps:\n    1. Read the number of test cases (t).\n    2. For each test case, read the two numbers x_1, p_1, and x_2, p_2.\n    3. Append p_1 zeros to x_1 and p_2 zeros to x_2 to form the two large numbers.\n    4. Compare the lengths of the two numbers.\n    5. If the lengths are different, the number with the greater length is the larger number.\n    6. If the lengths are the same, compare the original numbers x_1 and x_2 directly.\n\n# [edge case] \n    Edge case 1: x_1 = 1, p_1 = 10^6\n    Expected output: '<'\n    Explanation: Appending 10^6 zeros to 1 results in a number with 10^6 + 1 zeros, which is significantly larger than any number with fewer than 10^6 zeros.\n\n    Edge case 2: x_1 = 10^6, p_1 = 0\n    Expected output: '='\n    Explanation: Not appending any zeros to 10^6 results in the same number, so the two numbers are equal.\n\n    Edge case 3: x_1 = 1999, p_1 = 1\n    Expected output: '<'\n    Explanation: Appending one zero to 1999 results in 19990, which is smaller than 2000 when compared by length.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to compare the numbers correctly.\n", "requirement analysis:\nThe requirement involves comparing two numbers where each number has a certain number of trailing zeros. The comparison should consider edge cases where the numbers are 1 or have a large number of trailing zeros. The solution should be efficient and handle a large number of test cases.\nrequirement pool:\n- Implement a function to compare two numbers based on their trailing zeros.\n- Handle edge cases where the numbers are 1 or have a large number of trailing zeros.\n- Ensure the solution is efficient and can handle a large number of test cases.\n- Provide a user-friendly interface for easy comparison.\nTo implement the solution, we will use Python due to its simplicity and efficiency. The main challenge is to compare two numbers considering the number of trailing zeros. We will use string manipulation to remove the trailing zeros and then compare the remaining numbers. We will also handle edge cases where the numbers are 1 or have a large number of trailing zeros.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'trailing zeros': The number of zeros at the end of a positive integer, which can be determined by counting the number of times the number can be divided by 10.\n    Explanation: In this problem, trailing zeros are crucial because they affect the comparison of the numbers. When comparing numbers with trailing zeros, removing these zeros allows for a fair comparison of the remaining digits.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates that one number has a greater number of trailing zeros than another.\n    Explanation: For example, if we compare two numbers where one has 3 trailing zeros and the other has 2, we would say the first number is \"more than\" the second in terms of trailing zeros.\n\n# [degree adverb] \n    'largest': Indicates the number with the most trailing zeros.\n    Explanation: In the context of comparing numbers, 'largest' refers to the number with the highest count of trailing zeros.\n\n# [code logic]\n    To implement the solution, we will follow these steps:\n    1. Read the number of test cases.\n    2. For each test case, read the two numbers and their respective counts of trailing zeros.\n    3. Remove the trailing zeros from both numbers.\n    4. Compare the remaining numbers:\n        - If the remaining number of the first number is less than the second, print '<'.\n        - If the remaining number of the first number is greater than the second, print '>'.\n        - If they are equal, print '='.\n\n# [edge case] \n    Edge case 1: Comparing numbers where one is 1 and the other has a large number of trailing zeros.\n    Edge case 1 = 1\n    Explanation: If one number is 1 and the other has a large number of trailing zeros, the number 1 is always smaller because it has fewer digits, regardless of the zeros.\n    Edge case 2: Comparing two numbers where both have the same number of trailing zeros but different values.\n    Edge case 2 = 100\n    Explanation: If two numbers have the same number of trailing zeros, we need to compare the actual values. For example, comparing 100 (which has 2 trailing zeros) and 1 (which has 0 trailing zeros) would result in 100 being greater because it has a higher value.\n    Edge case 3: Comparing two numbers where both are 1.\n    Edge case 3 = 1\n    Explanation: If both numbers are 1, they are equal, regardless of the trailing zeros.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan already covers all edge cases by comparing the remaining values after removing trailing zeros.\n", "requirement analysis:\nThe requirements specify a need to compare two numbers where each number has a certain number of zeros appended to its end. This requires a careful handling of the numbers to ensure accurate comparison, especially considering the edge cases where the numbers are close to each other or one of them is significantly larger due to a large number of zeros. The solution should be efficient and capable of handling multiple test cases efficiently.\nrequirement pool:\n- Implement a function to compare two numbers based on the given conditions.\n- Handle edge cases where the numbers are close to each other or one of them is significantly larger.\n- Ensure the solution is optimized for handling a large number of test cases efficiently.\n- Provide clear and simple output for each comparison.\n- Design a user-friendly interface for easy interaction.\nTo implement the solution, we will use Python due to its simplicity and efficiency. The main challenge is to compare two numbers where each number has a certain number of zeros appended to its end. We will handle edge cases where the numbers are close to each other or one of them is significantly larger. We will optimize the solution to handle a large number of test cases efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'positive integer': means that the numbers are greater than zero\n    'zeros appended': means that the numbers have trailing zeros added to them\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To compare two numbers where each has a certain number of zeros appended, we can follow these steps:\n    1. Remove the trailing zeros from both numbers.\n    2. Compare the lengths of the numbers after removing the zeros.\n    3. If the lengths are equal, compare the original numbers without the zeros.\n    4. Handle edge cases where one number is significantly larger than the other.\n\n# [edge case] \n    Edge case 1: Comparing numbers with different lengths of zeros appended\n        Input: x_1 = 1, p_1 = 5, x_2 = 1, p_2 = 3\n        Explanation: After removing the trailing zeros, we have 1 and 1. Since they are equal, we compare the original numbers, which are both 1. The result is '='.\n        Edge case 2: Comparing numbers with the same number of zeros appended\n        Input: x_1 = 20, p_1 = 1, x_2 = 19, p_2 = 1\n        Explanation: After removing the trailing zeros, we have 20 and 19. Since 20 is greater than 19, the result is '>'.\n        Edge case 3: Comparing numbers where one number is significantly larger\n        Input: x_1 = 1, p_1 = 1000000, x_2 = 1, p_2 = 0\n        Explanation: After removing the trailing zeros, we have 1 and 1. Since they are equal, we compare the original numbers, which are 1 and 10^1000000. The result is '<'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can handle these cases effectively.\n", "requirement analysis:\nThe requirements specify the need to compare two numbers where each number has a certain number of zeros appended to its end. The comparison should consider edge cases where the numbers are 1 or when the number of zeros appended is very large. The solution should be able to handle multiple test cases efficiently.\nrequirement pool:\n- Implement a function to compare two numbers based on the given conditions.\n- Ensure the solution can handle edge cases where the numbers are 1 or the number of zeros is very large.\n- Optimize the code to handle a large number of test cases efficiently.\n- Provide clear and simple output for each comparison.\n- Ensure the solution is user-friendly and easy to use.\nTo implement the solution, we will use Python due to its simplicity and efficiency. The main challenge is to compare two numbers where each number has a certain number of zeros appended to its end. We will handle edge cases where the numbers are 1 or the number of zeros is very large. We will optimize the code to handle a large number of test cases efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'positive integer': means that the numbers are greater than zero\n    'zeros appended': means that the numbers have trailing zeros\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    provide detailed logic to implement the code\n\n# [edge case] \n    x_1 = 1, p_1 = 1000000 = 1\n    explanation: Both numbers are 1 after removing the trailing zeros.\n    x_2 = 1, p_2 = 1000000 = 1\n    explanation: Both numbers are 1 after removing the trailing zeros.\n    x_1 = 20, p_1 = 0, x_2 = 19, p_2 = 0\n    explanation: The first number is 20 and the second number is 19, so 20 > 19.\n    x_1 = 1000, p_1 = 0, x_2 = 1000, p_2 = 0\n    explanation: Both numbers are 1000 after removing the trailing zeros, so they are equal.\n    x_1 = 1999, p_1 = 0, x_2 = 2000, p_2 = 0\n    explanation: The first number is 1999 and the second number is 2000, so 1999 < 2000.\n    x_1 = 99, p_1 = 0, x_2 = 100, p_2 = 0\n    explanation: The first number is 99 and the second number is 100, so 99 < 100.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle these cases.\n", "requirement analysis:\nThe requirements specify the need for a program that can handle multiple test cases efficiently, comparing two numbers where each number is represented by a base integer x and a number of zeros p to append. The program should handle edge cases such as when x is 1 and p is very large. The output should clearly indicate whether the first number is less than, greater than, or equal to the second number.\nrequirement pool:\n- Implement a function to compare two numbers based on the given conditions\n- Handle edge cases where x is 1 and p is very large\n- Ensure the program can handle multiple test cases efficiently\n- Develop a user-friendly interface for easy interaction\nTo implement the number comparison function efficiently, we will use Python due to its simplicity and powerful standard library. The function will handle the comparison based on the given conditions, including edge cases. We will ensure the program can handle multiple test cases efficiently and develop a user-friendly interface for easy interaction.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'positive integer': means that the numbers are greater than zero.\n    'zeros appended to its end': means that the numbers are multiplied by 10 raised to the power of the number of zeros.\n\n# [phrase showing quantity relationship]\n    'p zeros': means that the number is multiplied by 10 raised to the power of p.\n\n# [degree adverb] \n    'very large': means that the number of zeros is very high, potentially making the number very large.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    For each test case:\n    1. Read the two numbers x_1 and p_1, and x_2 and p_2.\n    2. Calculate the actual values of the numbers by appending the zeros.\n    3. Compare the two numbers based on their magnitude.\n    4. Print the result of the comparison.\n\n# [edge case] \n    Edge case 1: x_1 = 1, p_1 = 10^6\n    Expected output: '<'\n    Explanation: Appending 10^6 zeros to 1 results in a number with 10^6 zeros, which is significantly smaller than 1 followed by no zeros.\n\n    Edge case 2: x_1 = 10^6, p_1 = 0, x_2 = 10^6, p_2 = 0\n    Expected output: '='\n    Explanation: Both numbers are the same when stripped of their appended zeros.\n\n    Edge case 3: x_1 = 1, p_1 = 0, x_2 = 2, p_2 = 0\n    Expected output: '<'\n    Explanation: The first number is 1, and the second number is 2, regardless of the zeros.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The comparison logic in step 3 can handle these cases directly.\n", "requirement analysis:\nThe requirements specify the need for a program that can compare two numbers, each with a specific number of trailing zeros. The program must handle a large number of test cases efficiently. The output should clearly indicate whether the first number is less than, greater than, or equal to the second number. Special attention is required for edge cases where the numbers are very large or where the number of trailing zeros is significant.\nrequirement pool:\n- Implement a function to compare two numbers with trailing zeros.\n- Handle a large number of test cases efficiently.\n- Ensure the program can handle edge cases, especially when numbers are very large.\n- Develop a user-friendly interface for clear and concise output.\nTo implement the function for comparing two numbers with trailing zeros efficiently, we will use Python's built-in capabilities to handle large integers and string manipulation. The function will compare the numbers based on their magnitudes and the number of trailing zeros, taking into account edge cases where one or both numbers might be very large or have a large number of trailing zeros.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'trailing zeros': Adding zeros to the end of a number does not change its value in terms of comparison, but it affects the magnitude of the number.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates a comparison where one number has a greater number of trailing zeros than another.\n    'at least as many times': Indicates a comparison where one number appears more frequently than another.\n\n# [degree adverb] \n    'largest': Indicates the number with the most trailing zeros.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    For each testcase:\n    1. Compare the number of trailing zeros (p1 and p2).\n    2. If p1 is not equal to p2, compare the numbers directly (x1 and x2).\n    3. If p1 is equal to p2, compare the numbers directly (x1 and x2).\n\n# [edge case] \n    Edge case 1: x1 = 1, p1 = 10^6; x2 = 1, p2 = 0\n    expected output: '>'\n    Explanation: The first number has a large number of trailing zeros, making it much larger than the second number.\n\n    Edge case 2: x1 = 10^6, p1 = 0; x2 = 10^6, p2 = 1\n    expected output: '<'\n    Explanation: The first number has no trailing zeros, while the second number has one trailing zero, making the second number larger.\n\n    Edge case 3: x1 = 2, p1 = 1; x2 = 2, p2 = 2\n    expected output: '<'\n    Explanation: Both numbers are equal in value without trailing zeros, but the second number has more trailing zeros.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle these cases.\n", "requirement analysis:\nThe requirements specify the need for a program that can handle multiple test cases efficiently, comparing two numbers where each number is represented by a base integer x and a number of zeros p to append. The program should handle edge cases such as when x is 1 and p is very large. The output should clearly indicate whether the first number is less than, greater than, or equal to the second number.\nrequirement pool:\n- Implement a function to compare two numbers based on the given conditions.\n- Handle edge cases where x is 1 and p is very large.\n- Ensure the program can handle multiple test cases efficiently.\n- Develop a user-friendly interface for easy input and output.\n- Optimize the program for high performance and scalability.\nTo implement the number comparison tool efficiently, we will use Python due to its simplicity and powerful standard library. The main challenge is to handle large numbers correctly, especially when zeros are appended. We will use Python's built-in capabilities to manage large integers and ensure that the comparison is accurate.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'positive integer': means an integer greater than zero\n    'zeros appended': means adding a certain number of zeros at the end of an integer\n    'edge cases': special scenarios that need special handling\n\n# [phrase showing quantity relationship]\n    'more than': used to compare the number of zeros in the two numbers\n\n# [degree adverb] \n    'largest': refers to the number with the most significant digits after zeros are appended\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    For each testcase:\n    1. Read the input values for x_1, p_1, x_2, and p_2.\n    2. Determine the number of digits in x_1 and x_2 after appending p_1 and p_2 zeros respectively.\n    3. Compare the lengths of the two numbers.\n    4. If the lengths are different, the number with the longer length is larger.\n    5. If the lengths are the same, compare the original numbers x_1 and x_2.\n    6. Print the result of the comparison.\n\n# [edge case] \n    Edge case 1: x_1 = 1, p_1 = 10^6\n    Expected output: '<'\n    Explanation: Appending 10^6 zeros to 1 results in a number with 10^6 + 1 zeros, which is significantly larger than any other number with a similar number of digits.\n\n    Edge case 2: x_1 = 10^6, p_1 = 0, x_2 = 10^6, p_2 = 0\n    Expected output: '='\n    Explanation: Both numbers are the same after appending zeros, so they are equal.\n\n    Edge case 3: x_1 = 2, p_1 = 1, x_2 = 3, p_2 = 0\n    Expected output: '<'\n    Explanation: Appending one zero to 2 results in 20, which is smaller than 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle all edge cases.\n", "requirement analysis:\nThe requirements specify the need to compare two numbers, each described by an integer x and a count of zeros p. The comparison should consider edge cases where x is 1 and p is large. The solution should be efficient and handle a large number of test cases.\nrequirement pool:\n- Implement a function to compare two numbers based on the given format\n- Handle edge cases where x is 1 and p is large\n- Ensure the solution is efficient and can handle a large number of test cases\n- Provide clear and concise output for each test case\nTo implement the solution, we will use Python due to its simplicity and efficiency. The main challenge is to handle the large numbers and edge cases effectively. We will use string manipulation and comparison to ensure accuracy and performance.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'positive integer': means the number is greater than zero\n    'zeros appended to its end': means the number is multiplied by 10 raised to the power of the number of zeros\n\n# [phrase showing quantity relationship]\n    'with p zeros appended to its end': means the number is multiplied by 10^p\n\n# [degree adverb] \n    'large': means the number of zeros is large, which can affect the comparison\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    For each testcase:\n    1. Read the input values for x_1, p_1, x_2, and p_2.\n    2. Determine the number of digits in x_1 and x_2.\n    3. Compare the number of digits directly if p_1 and p_2 are equal.\n    4. If p_1 is greater than p_2, the first number is larger.\n    5. If p_2 is greater than p_1, the second number is larger.\n    6. If p_1 and p_2 are equal, compare the values of x_1 and x_2 directly.\n    7. Handle edge cases where x is 1 and p is large.\n\n# [edge case] \n    Edge case 1: x_1 = 1, p_1 = 10^6\n    Expected output: '<'\n    Explanation: The first number is 1 followed by 10^6 zeros, which is a very small number compared to the second number with the same number of zeros.\n\n    Edge case 2: x_2 = 1, p_2 = 10^6\n    Expected output: '>'\n    Explanation: The second number is 1 followed by 10^6 zeros, which is a very small number compared to the first number with the same number of zeros.\n\n    Edge case 3: x_1 = 1, p_1 = 0, x_2 = 1, p_2 = 0\n    Expected output: '='\n    Explanation: Both numbers are 1, and they have the same number of zeros appended.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where x is 1 and p is large.\n        if x_1 == 1 and p_1 >= 10^6:\n            return '<'\n        elif x_2 == 1 and p_2 >= 10^6:\n            return '>'\n        (other code)\n"], "scores": [], "pass_results": [false, false, false, false, false, false, true, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 87, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.", "mutate_method": "expand_one2two", "parent_index": 55}
