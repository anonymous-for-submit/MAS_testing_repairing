{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. You are required to implement an efficient solution considering the constraints on a, b, and c.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. You are required to implement an efficient solution considering the constraints on a, b, and c.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations. You are required to implement an efficient solution considering the constraints on a, b, and c.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has songs with durations of a one-minute songs, b two-minute songs, and c three-minute songs. He wants to distribute them into two concerts with the goal of minimizing the absolute difference in their durations. Find the smallest possible difference.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\n\nimport sys\n\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    This function calculates the minimal possible difference in minutes between the durations of the two concerts.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_diff = float('inf')\n\n    # Try to balance the durations as much as possible\n    for i in range(3):\n        for j in range(3):\n            duration1 = i * 1 + (i + j) * 2 + (i + j + (b - j)) * 3\n            duration2 = total_duration - duration1\n            min_diff = min(min_diff, abs(duration1 - duration2))\n\n    return min_diff\n\n# Read the number of test cases\nt = int(input().strip())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().strip().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\nimport sys\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Sort the songs by their durations\n    songs = [a, b, c]\n    songs.sort()\n    \n    # Calculate the total sum of all songs\n    total_sum = sum(songs)\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Try different combinations to find the minimal possible difference\n    for i in range(3):\n        for j in range(3):\n            if i != j:\n                # Calculate the sum of durations for each combination\n                sum1 = total_sum - songs[i] - songs[j]\n                sum2 = total_sum - sum1\n                # Calculate the absolute difference\n                diff = abs(sum1 - sum2)\n                # Update the minimal difference if a smaller one is found\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Provide the Interface\nt = int(input().strip())\nfor _ in range(t):\n    a, b, c = map(int, input().strip().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_min_difference(a: int, b: int, c: int) -> int:\n    # Sort the number of songs by their durations\n    songs = [a, b, c]\n    songs.sort()\n    \n    # Unpack the sorted counts of songs\n    a, b, c = songs\n    \n    # Calculate the total duration of all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    \n    # Initialize the minimum difference to a large value\n    min_diff = float('inf')\n    \n    # Use a greedy approach to distribute the songs\n    for i in range(a + 1):\n        for j in range(b + 1):\n            k = (total_duration - (i * 1 + j * 2)) // 3\n            if k <= c:\n                duration_1 = i * 1 + j * 2 + k * 3\n                duration_2 = total_duration - duration_1\n                diff = abs(duration_1 - duration_2)\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_min_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    min_difference = float('inf')\n\n    # Try all combinations of distributing the songs into two concerts\n    for i in range(4):  # There are 4 possible ways to distribute the songs (0, 1, 2, or 3 songs in one concert)\n        for j in range(4):\n            if i + j == 4:  # Ensure both concerts are filled\n                continue\n            duration_one = a + (b // 2) * 2 + (c // 2) * 3  # Duration of the first concert\n            duration_two = (b % 2) * 1 + (c % 2) * 2 + (a // 2) * 2 + (b // 2) * 2 + (c // 2) * 3  # Duration of the second concert\n            difference = abs(duration_one - duration_two)\n            min_difference = min(min_difference, difference)\n\n    return min_difference\n\n# Read the number of test cases\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Finds the minimal possible difference in minutes between the durations of the two concerts.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    # Calculate all possible distributions and their differences\n    differences = []\n    \n    # Case 1: All songs in one concert\n    differences.append(abs((a + b * 2 + c * 3) - 0))\n    \n    # Case 2: One song in each concert\n    if a > 0 and b > 0 and c > 0:\n        differences.append(abs((a - 1) + (b - 1) * 2 + (c - 1) * 3 + 3))\n    if a > 0 and b > 0 and c > 1:\n        differences.append(abs((a - 1) + (b - 1) * 2 + (c - 2) * 3 + 6))\n    if a > 0 and b > 1 and c > 0:\n        differences.append(abs((a - 1) + (b - 2) * 2 + (c - 1) * 3 + 4))\n    if a > 1 and b > 0 and c > 0:\n        differences.append(abs((a - 2) + (b - 1) * 2 + (c - 1) * 3 + 4))\n    \n    # Case 3: Two songs in each concert\n    if a > 1 and b > 1 and c > 0:\n        differences.append(abs((a - 2) + (b - 2) * 2 + (c - 1) * 3 + 6))\n    if a > 1 and b > 0 and c > 1:\n        differences.append(abs((a - 2) + (b - 1) * 2 + (c - 2) * 3 + 8))\n    if a > 0 and b > 1 and c > 1:\n        differences.append(abs((a - 1) + (b - 2) * 2 + (c - 2) * 3 + 8))\n    \n    # Case 4: Three songs in each concert\n    if a > 0 and b > 0 and c > 1:\n        differences.append(abs((a - 1) + (b - 1) * 2 + (c - 3) * 3 + 9))\n    if a > 1 and b > 1 and c > 0:\n        differences.append(abs((a - 3) + (b - 2) * 2 + (c - 1) * 3 + 9))\n    if a > 1 and b > 0 and c > 1:\n        differences.append(abs((a - 3) + (b - 1) * 2 + (c - 2) * 3 + 11))\n    \n    # Return the smallest difference\n    return min(differences)\n\n# Read input and output results\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Sort the number of songs by their duration\n    songs = [a, b, c]\n    songs.sort()\n    \n    # Distribute the songs into two concerts\n    # Assign the smallest number of songs to the first concert\n    # and the largest number of songs to the second concert\n    first_concert = songs[0] + songs[1]\n    second_concert = songs[2]\n    \n    # Calculate the difference between the two concerts\n    difference = abs(first_concert - second_concert)\n    \n    return difference\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_min_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a + b + c\n    \n    # Sort the songs by their durations\n    songs = [a, b, c]\n    songs.sort()\n    \n    # Initialize the durations of the two concerts\n    duration_concert1 = 0\n    duration_concert2 = 0\n    \n    # Use a two-pointer technique to distribute the songs\n    left = 0\n    right = 2\n    \n    while left <= right:\n        if duration_concert1 < duration_concert2:\n            duration_concert1 += songs[left]\n            left += 1\n        else:\n            duration_concert2 += songs[right]\n            right -= 1\n    \n    # Calculate the absolute difference between the two concert durations\n    return abs(duration_concert1 - duration_concert2)\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_min_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef calculate_minimal_difference(a, b, c):\n    # Sort the songs by their durations in descending order\n    songs = [a, b, c]\n    songs.sort(reverse=True)\n    \n    # Initialize two variables to keep track of the total duration of each concert\n    total_duration_1 = 0\n    total_duration_2 = 0\n    \n    # Use a two-pointer technique to distribute the songs into the two concerts\n    left = 0\n    right = len(songs) - 1\n    \n    while left <= right:\n        if total_duration_1 < total_duration_2:\n            total_duration_1 += songs[left]\n            left += 1\n        else:\n            total_duration_2 += songs[right]\n            right -= 1\n    \n    # Calculate the absolute difference between the two concert durations\n    return abs(total_duration_1 - total_duration_2)\n\n# Provide the Interface\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_minimal_difference(a: int, b: int, c: int) -> int:\n    total_duration = a * 1 + b * 2 + c * 3\n    min_difference = float('inf')\n    \n    # Try all possible distributions\n    for i in range(c + 1):\n        for j in range(b + 1):\n            for k in range(a + 1):\n                if i * 3 + j * 2 + k <= total_duration // 2:\n                    duration1 = i * 3 + j * 2 + k\n                    duration2 = total_duration - duration1\n                    difference = abs(duration1 - duration2)\n                    min_difference = min(min_difference, difference)\n    \n    return min_difference\n\n# Read the number of test cases\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    This function calculates the minimal possible difference in minutes between the durations of the two concerts.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    # Sort the songs by their durations\n    songs = [a, b, c]\n    songs.sort()\n    \n    # Distribute the songs into two concerts\n    one_concert = songs[0] + songs[1]\n    two_concert = songs[2]\n    \n    # Calculate the absolute difference\n    return abs(one_concert - two_concert)\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n"], "plans": ["requirement analysis:\nThe problem requires distributing songs into two concerts with the goal of minimizing the absolute difference in their durations. This involves a combinatorial approach to find the optimal distribution of songs. The solution should be efficient and capable of handling large input values efficiently.\nrequirement pool:\n- Implement an efficient algorithm to find the optimal distribution of songs.\n- Ensure the solution can handle large input values efficiently.\n- Provide clear and concise output for each test case.\n- Optimize the time complexity of the solution.\n- Enhance the user interface for better interaction.\nTo solve this problem efficiently, we will use a greedy approach to distribute the songs into two concerts. The goal is to minimize the absolute difference in the durations of the concerts. We will sort the songs by their durations and then use a two-pointer technique to distribute them into two concerts. This approach ensures that we are always trying to balance the durations as we go through the list of songs.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': The process of dividing items or amounts into two groups or parts.\n    Explanation: In this problem, Luntik has a set of songs with different durations (1, 2, and 3 minutes). He wants to distribute these songs into two concerts such that the total duration of songs in each concert is as balanced as possible.\n\n# [phrase showing quantity relationship]\n    'as small as possible': This phrase indicates that we need to minimize the difference in the total duration of the two concerts.\n    Explanation: We need to find the minimal possible difference in minutes between the durations of the two concerts.\n\n# [degree adverb] \n    'as small as possible': This adverb emphasizes the need to find the smallest possible difference.\n    Explanation: We aim to minimize the absolute difference in the durations of the concerts.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this efficiently, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a greedy approach to distribute the songs into two concerts, trying to balance the durations as much as possible.\n    3. Calculate the difference between the two concert durations and return the smallest possible difference.\n\n# [edge case] \n    Edge case 1: [1, 1, 1]\n    Expected output: 0\n    Explanation: With three one-minute songs, Luntik can distribute them evenly between the two concerts, resulting in no difference in duration.\n\n    Edge case 2: [1, 2, 3]\n    Expected output: 0\n    Explanation: With one one-minute, two two-minute, and three three-minute songs, Luntik can distribute them such that one concert has a duration of 6 minutes and the other has 3 minutes, resulting in a difference of 3 minutes.\n\n    Edge case 3: [10^9, 10^9, 10^9]\n    Expected output: 0\n    Explanation: With a large number of songs, the distribution will naturally balance out, leading to a minimal difference in duration.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy approach will naturally handle cases where the distribution is already balanced or nearly balanced.\n", "requirement analysis:\nThe problem requires finding the optimal way to distribute songs into two concerts to minimize the absolute difference in their durations. This involves a combinatorial approach to try different distributions and calculate the differences. The solution should be efficient and capable of handling large inputs efficiently.\nrequirement pool:\n- Implement an algorithm to distribute songs into two concerts\n- Calculate the minimal possible difference in concert durations\n- Ensure the solution is efficient and can handle large inputs\n- Provide a user-friendly interface for easy interaction\nTo solve this problem efficiently, we will use a greedy approach to distribute the songs into two concerts. The goal is to minimize the absolute difference in the durations of the concerts. We will sort the songs by their durations and then use a two-pointer technique to try different combinations of songs to find the minimal possible difference.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'Greedy Approach': This approach involves making the locally optimal choice at each step with the hope of finding a global optimum. In this problem, we will use a greedy approach to distribute songs into two concerts to minimize the absolute difference in their durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': This means we need to find the minimal possible difference between the durations of the two concerts.\n\n# [code logic]\n    To implement the solution efficiently, we will follow these steps:\n    1. Sort the songs by their durations.\n    2. Use a two-pointer technique to try different combinations of songs to find the minimal possible difference.\n    3. Calculate the sum of durations for each possible combination and find the absolute difference.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    Edge Case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: We have one 1-minute song, one 2-minute song, and one 3-minute song. The optimal way to distribute them is to put one song in each concert, resulting in a difference of |1-2| = 1 minute.\n    Expected Output: 1\n\n    Edge Case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: We have two 1-minute songs, two 2-minute songs, and two 3-minute songs. The optimal way to distribute them is to put two songs of each duration in one concert and one song in the other, resulting in a difference of |(1+2+3)-(1+2+3)| = 0 minutes.\n    Expected Output: 0\n\n    Edge Case 3:\n    Input: a = 10^9, b = 10^9, c = 10^9\n    Explanation: We have a large number of songs with different durations. The optimal way to distribute them is to try different combinations to find the minimal possible difference. This edge case tests the efficiency of the solution.\n    Expected Output: The exact minimal difference, which can be calculated using the greedy approach.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy approach is efficient enough to handle the constraints on a, b, and c.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts to minimize the absolute difference in their durations. This can be achieved by balancing the total duration of songs in each concert as evenly as possible. The solution should be efficient and handle large input values efficiently.\nrequirement pool:\n- Implement an efficient algorithm to distribute songs into two concerts\n- Ensure the solution can handle large input values\n- Provide clear and concise output for each test case\n- Test the solution with multiple test cases\nTo solve this problem efficiently, we will use a greedy approach to distribute the songs into two concerts. The goal is to balance the total duration of songs in each concert as evenly as possible. We will sort the songs by their durations and then use a two-pointer technique to distribute them into two concerts. This approach ensures that we minimize the absolute difference in the durations of the two concerts.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each song to exactly one concert to balance the total duration between the two concerts as evenly as possible.\n    'greedy approach': means using a strategy to make locally optimal choices at each step to achieve the overall optimal solution.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means minimizing the absolute difference in the durations of the two concerts.\n\n# [code logic]\n    To implement the solution efficiently, we need to:\n    1. Sort the songs by their durations.\n    2. Use a two-pointer technique to distribute the songs into two concerts.\n    3. Calculate the total duration of each concert and find the minimal possible difference in their durations.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The optimal way to distribute them is to put one 3-minute song in one concert and the other two songs in the other concert. The difference in durations will be |3 - (1+1+1)| = 0.\n    Expected output: 0\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs of different durations. The optimal way to distribute them is to put two 3-minute songs in one concert and the other four songs in the other concert. The difference in durations will be |(3+3) - (2+2+2+2)| = |6 - 8| = 2.\n    Expected output: 2\n\n    Edge case 3:\n    Input: a = 10, b = 0, c = 0\n    Explanation: There are ten one-minute songs with no two-minute or three-minute songs. The best way to distribute them is to put all ten one-minute songs in one concert and leave the other concert empty. The difference in durations will be |10 - 0| = 10.\n    Expected output: 10\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy approach and the sorting of songs by their durations inherently handle these cases efficiently.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in durations between two concerts after distributing songs of different durations into these concerts. The solution should be efficient and handle large inputs within a reasonable time frame. The input consists of multiple test cases, each with a specific number of one-minute, two-minute, and three-minute songs. The output should provide the minimal difference for each test case.\nrequirement pool:\n- Implement an efficient algorithm to find the minimal difference in concert durations\n- Handle multiple test cases efficiently\n- Ensure the solution is scalable and can handle large input sizes\n- Provide clear and concise output for each test case\n- Ensure the solution is easy to understand and implement\nTo solve this problem efficiently, we will use a dynamic programming approach to find the optimal distribution of songs into two concerts. The goal is to minimize the absolute difference in the total duration of the concerts. We will iterate through all possible combinations of songs and calculate the difference for each combination to find the minimal possible difference.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means dividing the songs into two groups such that each song is included in exactly one group.\n    'minimal possible difference': means finding the smallest absolute difference between the total durations of the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means the goal is to minimize the difference.\n\n# [code logic]\n    To solve this problem, we need to consider all possible distributions of the songs into two concerts and calculate the difference for each distribution. We can use a brute-force approach to iterate through all combinations of songs in the two concerts.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The optimal distribution would be to put one 3-minute song and two 1-minute songs in one concert, and the remaining song in the other concert. The differences would be 3 - (1 + 1) = 1.\n    Expected Output: 1\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs of different durations. The optimal distribution would be to put two 3-minute songs and two 2-minute songs in one concert, and the remaining two 1-minute songs in the other concert. The differences would be 6 - 4 = 2.\n    Expected Output: 2\n\n    Edge case 3:\n    Input: a = 3, b = 0, c = 0\n    Explanation: There are three one-minute songs. The only way to distribute them is to put all three in one concert and leave the other concert empty. The difference would be 3 - 0 = 3.\n    Expected Output: 3\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the brute-force approach will naturally handle them. The edge cases provided are simple and straightforward, and the brute-force approach will efficiently find the minimal possible difference.\n", "requirement analysis:\nThe problem requires finding the optimal way to distribute songs of different durations into two concerts to minimize the absolute difference in their durations. This involves a combinatorial approach to try different distributions and calculate the differences. The solution should be efficient enough to handle large inputs within the given constraints.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in concert durations\n- Ensure the solution is efficient and can handle large inputs\n- Provide a clear and accurate output for each test case\n- Optimize the algorithm for better performance\n- Add user interface elements for better user interaction\nTo solve this problem efficiently, we will use a combinatorial approach to try different distributions of songs into two concerts and calculate the differences. We will use Python's built-in functions and libraries to handle the input and output, ensuring the solution is both efficient and easy to understand.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': the process of dividing items or amounts into two or more groups, typically for the purpose of storage, transportation, or use.\n    'absolute difference': the positive difference between two values.\n    'minimal possible difference': the smallest possible difference between the durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means to find the smallest possible difference\n\n# [code logic]\n    To solve this problem, we need to consider all possible ways to distribute the songs into two concerts and calculate the difference for each distribution. The optimal solution will be the smallest difference found.\n\n# [edge case] \n    Edge case 1:\n    Input: 1 1 1\n    Explanation: Luntik can distribute the songs such that one concert has one one-minute song, one two-minute song, and one three-minute song, and the other concert has the remaining songs. The difference will be 0.\n    Expected output: 0\n\n    Edge case 2:\n    Input: 2 1 3\n    Explanation: Luntik can distribute the songs such that one concert has two one-minute songs and one two-minute song, and the other concert has one three-minute song and the remaining one-minute and two-minute songs. The difference will be 1.\n    Expected output: 1\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the given logic already covers the edge cases by considering all possible distributions.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in durations between two concerts after distributing songs of different durations. The solution should be efficient and capable of handling large inputs. The algorithm should be designed to minimize the absolute difference between the two concert durations.\nrequirement pool:\n- Implement an efficient algorithm to distribute songs into two concerts\n- Ensure the solution can handle up to 1000 test cases\n- Optimize the algorithm for minimal computational complexity\n- Provide clear and accurate output for each test case\n- Follow the input format strictly\nTo solve the problem of distributing songs of different durations into two concerts with the minimal possible difference in durations, we can use a greedy approach. The idea is to first sort the songs by their duration and then use a two-pointer technique to distribute them into two concerts. This approach ensures that we minimize the difference between the durations of the two concerts.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': The process of dividing items or amounts into two or more groups.\n    Explanation: In this problem, we need to distribute songs of different durations into two concerts such that the absolute difference in their durations is minimized. This involves a strategic allocation of songs to achieve the smallest possible difference.\n\n# [phrase showing quantity relationship]\n    'as small as possible': Indicates that we aim to find the smallest possible difference between the durations of the two concerts.\n\n# [degree adverb] \n    'as small as possible': Indicates the goal of minimizing the difference between the concert durations.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem efficiently, we can follow these steps:\n    1. Sort the songs by their duration.\n    2. Use a two-pointer technique to distribute the songs into two concerts.\n    3. Calculate the difference between the total durations of the two concerts after each distribution step.\n    4. Return the smallest difference found.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    Explanation: With three one-minute songs, we can distribute them equally between two concerts, resulting in a difference of 0 minutes.\n    search([1, 2, 3]) = 1\n    Explanation: With one one-minute song, two two-minute songs, and three three-minute songs, the best distribution is to put the one-minute and three-minute songs in one concert and the two-minute songs in the other, resulting in a difference of 1 minute.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic is efficient and handles the distribution of songs to achieve the minimal possible difference.\n", "requirement analysis:\nThe problem requires a method to distribute songs into two concerts to minimize the absolute difference in their durations. This can be approached using a greedy algorithm or dynamic programming, considering the constraints and the nature of the problem.\nrequirement pool:\n- Implement a function to read input and process the data.\n- Develop a method to calculate the optimal distribution of songs.\n- Ensure the solution is efficient and can handle large inputs.\n- Provide output in the specified format.\nTo solve the problem of distributing songs into two concerts with the goal of minimizing the absolute difference in their durations, we can use a greedy algorithm. The algorithm will distribute the songs in a way that balances the total duration of the two concerts as evenly as possible. This can be achieved by first sorting the songs by their durations and then using a two-pointer technique to distribute them.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'minimizing the absolute difference': means finding the smallest possible difference between the total durations of the two concerts.\n    'greedy algorithm': a method of solving optimization problems by making the best choice at each step, without considering the overall situation.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the solution, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Sort the songs by their durations.\n    3. Use a two-pointer technique to distribute the songs into two concerts, aiming to balance their durations as evenly as possible.\n    4. Calculate the absolute difference between the two concert durations and return the smallest possible difference.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The optimal distribution would be to put one 3-minute song in one concert and the other two songs in the other concert. The absolute difference would be |3 - (1+1+1)| = 0.\n    Expected output: 0\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs of different durations. The optimal distribution would be to put two 3-minute songs and one 2-minute song in one concert, and the other two 2-minute songs and one 1-minute song in the other concert. The absolute difference would be |(3+2) - (2+2+1)| = 0.\n    Expected output: 0\n\n    Edge case 3:\n    Input: a = 10, b = 0, c = 0\n    Explanation: There are ten one-minute songs. The optimal distribution would be to put all of them in one concert, and the other concert would be empty. The absolute difference would be |10 - 0| = 10.\n    Expected output: 10\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases, as the greedy algorithm inherently handles them by focusing on the best choice at each step. The provided edge cases are straightforward and can be solved using the given logic.\n", "requirement analysis:\nThe problem requires a solution that can handle multiple test cases efficiently. The input consists of integers representing the number of songs of different durations, and the output should be the smallest possible absolute difference between the total durations of the two concerts. The solution should be simple yet effective, ensuring that the distribution of songs is optimized to minimize the difference.\nrequirement pool:\n- Implement a function to calculate the optimal distribution of songs into two concerts.\n- Ensure the solution can handle up to 1000 test cases efficiently.\n- Provide a clear and concise output for each test case.\n- Optimize the algorithm to handle large input sizes within reasonable time limits.\nTo solve this problem efficiently, we will use a greedy approach to distribute the songs into two concerts. The goal is to minimize the absolute difference in the total durations of the two concerts. We will sort the songs by their durations and then use a two-pointer technique to distribute them as evenly as possible.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'minimizing the absolute difference': means finding the smallest possible difference between the total durations of the two concerts.\n    'greedy approach': means selecting the largest possible songs first to balance the durations between the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    For each test case:\n    1. Sort the songs by their durations in descending order.\n    2. Initialize two variables to keep track of the total duration of each concert.\n    3. Use a two-pointer technique to distribute the songs into the two concerts.\n    4. Calculate the absolute difference between the two concert durations after distributing all songs.\n    5. Return the smallest possible difference.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The optimal distribution would be to put one 3-minute song in one concert and the other two songs in the other concert. The absolute difference would be |3 - (1+1+1)| = 0.\n    Expected output: 0\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs of different durations. The optimal distribution would be to put two 3-minute songs and one 2-minute song in one concert, and the remaining three songs in the other concert. The absolute difference would be |(3+2) - (2+2+2)| = |5 - 6| = 1.\n    Expected output: 1\n\n    Edge case 3:\n    Input: a = 3, b = 0, c = 0\n    Explanation: There are three one-minute songs. The optimal distribution would be to put all three songs in one concert, and the other concert would be empty. The absolute difference would be |3 - 0| = 3.\n    Expected output: 3\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy approach and the logic provided in the plan will handle all cases efficiently.\n", "requirement analysis:\nThe problem requires a method to distribute songs into two concerts to minimize the absolute difference in their durations. This can be approached by considering the total duration and trying to balance it as evenly as possible between the two concerts. The solution should be efficient and handle a large number of test cases.\nrequirement pool:\n- Implement a function to calculate the optimal distribution of songs.\n- Ensure the solution can handle up to 1000 test cases.\n- Optimize the algorithm for efficiency.\n- Provide clear and concise output for each test case.\nTo solve this problem, we will use a greedy approach to distribute the songs into two concerts. The goal is to minimize the absolute difference in their durations. We will sort the songs by their durations and then try to balance the total duration between the two concerts. This approach ensures that we are trying to minimize the difference by always including the smallest remaining song in the concert with the lower total duration.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'minimizing the absolute difference': means finding the smallest possible difference between the total durations of the two concerts.\n    'greedy approach': means making the best choice at each step without considering the overall result.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To solve this problem, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a greedy approach to distribute the songs into two concerts, always adding the smallest remaining song to the concert with the lower total duration.\n    3. Calculate the absolute difference between the two concert durations.\n    4. Return the smallest possible difference.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The optimal distribution would be to put one 1-minute and one 2-minute song in one concert, and the 3-minute song in the other. The durations would be 3 and 3, resulting in a difference of 0.\n    Expected output: 0\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs in total. The optimal distribution would be to put two 1-minute songs, two 2-minute songs, and two 3-minute songs in each concert. The durations would be 12 and 12, resulting in a difference of 0.\n    Expected output: 0\n\n    Edge case 3:\n    Input: a = 10, b = 0, c = 0\n    Explanation: There are only 1-minute songs. The optimal distribution would be to put all of them in one concert, resulting in a duration of 10. The other concert would be empty, resulting in a difference of 10.\n    Expected output: 10\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy approach inherently handles all cases by always minimizing the difference at each step.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts with the goal of minimizing the absolute difference in their durations. This involves a combinatorial approach to find the optimal distribution of songs. The solution should be efficient and capable of handling large input values efficiently. The output should be clear and concise for each test case.\nrequirement pool:\n- Implement an efficient algorithm to find the optimal distribution of songs.\n- Ensure the solution can handle large input values efficiently.\n- Provide clear and concise output for each test case.\n- Test the solution with various edge cases to ensure robustness.\n- Optimize the time complexity of the solution.\nTo solve this problem efficiently, we will use a greedy approach to distribute the songs into two concerts. The goal is to minimize the absolute difference in the durations of the concerts. We will sort the songs by their durations and then use a two-pointer technique to distribute them into two concerts. This approach ensures that we are always trying to balance the durations as we go through the list of songs.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': The process of dividing items or amounts into two groups or parts.\n    Explanation: In this problem, Luntik has a set of songs with different durations (1, 2, and 3 minutes). He wants to distribute these songs into two concerts such that the total duration of songs in each concert is as balanced as possible.\n\n# [phrase showing quantity relationship]\n    'as small as possible': This phrase indicates that we need to minimize the difference in the total duration of the two concerts.\n    Explanation: We need to find the minimal possible difference in minutes between the durations of the two concerts.\n\n# [degree adverb] \n    'as small as possible': This adverb emphasizes the need to find the smallest possible difference.\n    Explanation: We aim to minimize the absolute difference in the durations of the concerts.\n\n# [code logic]\n    To solve this problem efficiently, we can follow these steps:\n    1. Sort the durations of the songs in non-decreasing order.\n    2. Use a two-pointer technique to distribute the songs into two concerts.\n    3. Calculate the total duration of each concert and find the absolute difference between them.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    Edge Case 1: [1, 1, 1]\n    Expected Output: 0\n    Explanation: With three one-minute songs, Luntik can distribute them evenly between the two concerts, resulting in no difference in duration.\n\n    Edge Case 2: [1, 2, 3]\n    Expected Output: 0\n    Explanation: With one one-minute song, two two-minute songs, and three three-minute songs, Luntik can distribute them such that one concert has a duration of 6 minutes and the other has 3 minutes, resulting in a difference of 3 minutes.\n\n    Edge Case 3: [10^9, 10^9, 10^9]\n    Expected Output: 0\n    Explanation: With a large number of songs, the problem becomes computationally intensive, but the optimal distribution will still ensure a minimal difference.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic is efficient and can handle the constraints on a, b, and c.\n"], "scores": [], "pass_results": [false, false, false, false, false, false, false, false, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 36, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "add_1_sentence_at_end", "parent_index": 6}
