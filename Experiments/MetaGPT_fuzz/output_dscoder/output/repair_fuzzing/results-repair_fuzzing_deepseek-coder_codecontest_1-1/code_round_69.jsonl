{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing. He possesses a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe aims to minimize the absolute difference in the time lengths of the concerts. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. You are required to implement an efficient solution considering the constraints on a, b, and c.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing. He possesses a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe aims to minimize the absolute difference in the time lengths of the concerts. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. You are required to implement an efficient solution considering the constraints on a, b, and c.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has decided to try singing. He possesses a one-minute songs, b two-minute songs, and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included in exactly one concert. He aims to minimize the absolute difference in the time lengths of the concerts. The duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations. You are required to implement an efficient solution considering the constraints on a, b, and c.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has songs of durations a, b, and c minutes. He wants to distribute them into two concerts, minimizing the absolute difference in their durations. Find the minimal possible difference.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\ndef find_min_difference(a: int, b: int, c: int) -> int:\n    # Sort the songs by their durations in descending order\n    songs = [a, b, c]\n    songs.sort(reverse=True)\n    \n    # Initialize the durations of the two concerts\n    duration1 = songs[0]\n    duration2 = songs[1] + songs[2]\n    \n    # Calculate the initial difference\n    min_diff = abs(duration1 - duration2)\n    \n    # Use a two-pointer technique to distribute the songs into two concerts\n    for i in range(1, 3):\n        for j in range(i + 1, 3):\n            duration1 = sum(songs[:i])\n            duration2 = sum(songs[i:])\n            diff = abs(duration1 - duration2)\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Provide the Interface\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_min_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_min_difference(a: int, b: int, c: int) -> int:\n    # Sort the number of songs by their durations\n    songs = [a, b, c]\n    songs.sort()\n    a, b, c = songs\n\n    # Calculate the total duration\n    total_duration = a + b * 2 + c * 3\n    half_duration = total_duration // 2\n\n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n\n    # Try to find the optimal distribution\n    for i in range(3):\n        for j in range(3):\n            concert1 = a * (i == 0) + b * (i == 1) + c * (i == 2)\n            concert2 = a * (j == 0) + b * (j == 1) + c * (j == 2)\n            diff = abs(concert1 - concert2)\n            min_diff = min(min_diff, diff)\n\n    return min_diff\n\n# Read the number of test cases\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_min_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total possible duration of all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    \n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n\n    # Iterate through all possible distributions of one-minute songs\n    for i in range(a + 1):\n        for j in range(b + 1):\n            # Calculate the duration of the first concert\n            duration1 = i * 1 + j * 2 + (a - i) * 1 + (b - j) * 2 + c * 3\n            # Calculate the duration of the second concert\n            duration2 = total_duration - duration1\n            # Calculate the absolute difference\n            diff = abs(duration1 - duration2)\n            # Update the minimum difference\n            min_diff = min(min_diff, diff)\n\n    return min_diff\n\n# Provide the Interface\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Sort the number of songs by their durations\n    songs = [a, b, c]\n    songs.sort()\n    \n    # Initialize the total durations of the two concerts\n    total_duration = sum(songs)\n    min_diff = float('inf')\n    \n    # Use a two-pointer technique to distribute the songs into two groups\n    for i in range(2**3):\n        # Generate a binary representation of the combination\n        combination = [0] * 3\n        for j in range(3):\n            if i & (1 << j):\n                combination[j] = songs[j]\n        \n        # Calculate the sum of durations in each group\n        sum1 = sum(combination)\n        sum2 = total_duration - sum1\n        \n        # Calculate the absolute difference between the two groups\n        diff = abs(sum1 - sum2)\n        \n        # Update the minimum difference found\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Try all possible combinations of distributing the songs into two concerts\n    for i in range(4):  # There are 4 possible ways to distribute the songs (0, 1, 2, or 3 songs in one concert)\n        for j in range(4):\n            if i + j == 4:  # Ensure both concerts are non-empty\n                continue\n            duration_one = a * 1 + b * 2 + c * 3 - (i * 1 + j * 2)\n            duration_two = total_duration - duration_one\n            min_diff = min(min_diff, abs(duration_one - duration_two))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_difference(a, b, c):\n    # Sort the songs by their duration\n    songs = [1] * a + [2] * b + [3] * c\n    songs.sort()\n    \n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Use a brute-force approach to find the optimal distribution\n    for i in range(1, 2**len(songs)):\n        # Generate all possible combinations of the songs\n        comb = [songs[j] for j in range(len(songs)) if (i & (1 << j))]\n        \n        # Calculate the difference between the two groups\n        diff = abs(sum(comb[:len(comb)//2]) - sum(comb[len(comb)//2:]))\n        \n        # Update the minimum difference\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef calculate_minimal_difference(a, b, c):\n    # Sort the song durations\n    durations = sorted([a, b, c])\n    \n    # Calculate the total duration of all songs\n    total_duration = sum(durations)\n    \n    # Calculate the ideal duration for each concert\n    ideal_duration = total_duration / 2\n    \n    # Initialize the durations of the two concerts\n    concert1_duration = 0\n    concert2_duration = 0\n    \n    # Distribute the songs to minimize the absolute difference\n    for duration in durations:\n        if concert1_duration < ideal_duration:\n            concert1_duration += duration\n        else:\n            concert2_duration += duration\n    \n    # Calculate the absolute difference between the two concert durations\n    difference = abs(concert1_duration - concert2_duration)\n    \n    return int(difference)\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_minimal_difference(a, b, c)->int:\n    # Sort the song durations\n    durations = sorted([a, b, c])\n    \n    # Use a greedy approach to distribute the songs into two concerts\n    # Try to balance the total duration between the two concerts\n    total_duration = sum(durations)\n    duration1 = durations[0] + durations[1]\n    duration2 = durations[2]\n    \n    # Calculate the absolute difference\n    diff = abs(duration1 - duration2)\n    \n    return diff\n\n# Read the number of test cases\nn = int(input())\n\n# Process each test case\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\nimport sys\n\ndef calculate_minimal_difference(a, b, c):\n    durations = sorted([a, b, c])\n    total_duration = sum(durations)\n    min_diff = float('inf')\n    for i in range(3):\n        for j in range(3):\n            if i != j:\n                diff = abs(total_duration - 2 * (durations[i] + durations[j]))\n                min_diff = min(min_diff, diff)\n    return min_diff\n\n# Read the number of test cases\nt = int(input().strip())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().strip().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Finds the minimal possible difference in minutes between the concerts durations.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: Minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    # Calculate the total number of songs\n    total_songs = a + b + c\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Try all possible distributions of songs into two concerts\n    for i in range(4):  # There are 4 possible ways to distribute the songs (0, 3, 2, 1 songs in one concert)\n        for j in range(4):\n            if i + j == 3:  # Ensure that the sum of songs in both concerts is equal\n                # Calculate the number of songs in each concert\n                songs_in_first_concert = (a + b * 2 + c * 3) * i // 3\n                songs_in_second_concert = (a + b * 2 + c * 3) - songs_in_first_concert\n                \n                # Calculate the difference\n                diff = abs(songs_in_first_concert - songs_in_second_concert)\n                \n                # Update the minimal difference\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n"], "plans": ["requirement analysis:\nThe problem requires distributing songs into two concerts to minimize the absolute difference in their durations. This involves a combinatorial optimization problem where the goal is to balance the total duration of the songs in each concert. The solution should be efficient and handle large inputs within reasonable time limits.\nrequirement pool:\n- Implement an efficient algorithm to distribute songs into two concerts\n- Ensure the solution can handle large inputs efficiently\n- Provide the minimal possible difference in minutes between the concerts durations\n- Optimize the algorithm for both time and space complexity\n- Ensure the solution is scalable and can handle future input size increases\nTo solve this problem efficiently, we will use a greedy approach. The idea is to first prioritize the inclusion of longer songs in one of the concerts to balance the durations. We will sort the songs by their durations and then use a two-pointer technique to distribute the songs into two concerts, aiming to minimize the absolute difference in their durations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'Greedy Algorithm': This is a strategy to solve optimization problems by making the best choice at each step, with the hope of finding a global optimum.\n    Explanation: In this problem, Luntik wants to distribute his songs into two concerts to minimize the absolute difference in their durations. By prioritizing longer songs first, we aim to balance the concerts as much as possible.\n\n# [phrase showing quantity relationship]\n    'more than': This phrase indicates that we need to find a solution where the difference between the two concerts is minimized.\n    Explanation: We need to find the minimal possible difference in minutes between the concerts durations.\n\n# [degree adverb] \n    'minimal': This adverb indicates that we are looking for the smallest possible difference.\n    Explanation: We aim to find the smallest absolute difference between the durations of the two concerts.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the solution efficiently, we need to consider the following steps:\n    1. Sort the songs by their durations in descending order.\n    2. Use a two-pointer technique to distribute the songs into two concerts.\n    3. Calculate the difference between the total durations of the two concerts at each step.\n    4. Return the minimal possible difference found.\n\n# [edge case] \n    Edge Case 1: [1, 1, 1]\n    Expected Output: 0\n    Explanation: With one one-minute, one two-minute, and one three-minute song, the best distribution would be to put one song in each concert, resulting in a difference of 0 minutes.\n\n    Edge Case 2: [10^9, 10^9, 10^9]\n    Expected Output: 0\n    Explanation: With a very large number of songs of each duration, the optimal distribution would be to put half of each duration into each concert, resulting in a difference of 0 minutes.\n\n    Edge Case 3: [1, 2, 3]\n    Expected Output: 0\n    Explanation: With one one-minute, two two-minute, and three three-minute songs, the best distribution would be to put one one-minute and two three-minute songs in one concert and the remaining two two-minute songs in the other concert, resulting in a difference of 0 minutes.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic is designed to handle large values and ensure the minimal possible difference is found.\n", "requirement analysis:\nThe problem requires finding the optimal way to distribute songs into two concerts to minimize the absolute difference in their durations. This involves considering the number of each type of song and how they can be grouped to achieve the smallest difference. The solution should be efficient and handle large inputs within reasonable time limits.\nrequirement pool:\n- Implement an efficient algorithm to minimize the difference in concert durations.\n- Ensure the solution can handle up to 1000 test cases.\n- Provide clear and concise output for each test case.\n- Optimize the solution for large input sizes.\nTo solve this problem efficiently, we will use a greedy approach to distribute the songs into two concerts. The goal is to minimize the absolute difference in the total duration of the concerts. We will sort the songs by their durations and then use a two-pointer technique to distribute them into two concerts. This approach ensures that we are always trying to balance the durations as we go through the list of songs.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'Greedy Algorithm': This is a problem-solving technique where we make the locally optimal choice at each step with the hope of finding a global optimum. In this case, we are trying to minimize the absolute difference in the total duration of the concerts by distributing the songs as evenly as possible.\n\n# [phrase showing quantity relationship]\n    No specific phrase showing quantity relationship.\n\n# [degree adverb] \n    No specific degree adverb.\n\n# [code logic]\n    To implement the solution efficiently, we need to follow these steps:\n    1. Sort the songs by their durations in non-decreasing order.\n    2. Use a two-pointer technique to distribute the songs into two concerts.\n    3. Calculate the total duration of each concert and then find the absolute difference between them.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    Edge Case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: We have one 1-minute song, one 2-minute song, and one 3-minute song. The optimal distribution would be to put the 1-minute and 3-minute songs in one concert and the 2-minute song in the other. The durations would be 4 and 2, respectively, leading to a difference of 2.\n    Expected Output: 2\n\n    Edge Case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: We have two 1-minute songs, two 2-minute songs, and two 3-minute songs. The optimal distribution would be to put two 1-minute songs and one 3-minute song in one concert, and the remaining in the other. The durations would be 4 and 6, respectively, leading to a difference of 2.\n    Expected Output: 2\n\n    Edge Case 3:\n    Input: a = 0, b = 0, c = 3\n    Explanation: We have three 3-minute songs. The only way to distribute them is to put all three in one concert, making the duration 3. The other concert would be empty, leading to a difference of 3.\n    Expected Output: 3\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the greedy approach inherently handles them by distributing the songs as evenly as possible. The logic provided in the plan is sufficient to solve the problem for all given constraints.\n", "requirement analysis:\nThe problem requires a solution that can distribute songs into two concerts to minimize the absolute difference in their durations. The input consists of multiple test cases, each with a specific number of one-minute, two-minute, and three-minute songs. The output should provide the minimal possible difference for each test case. The solution should be efficient to handle large inputs within the given constraints.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in concert durations.\n- Ensure the solution is optimized for large inputs.\n- Provide clear and concise output for each test case.\n- Handle edge cases and ensure robustness in input handling.\nTo solve this problem efficiently, we will use a mathematical approach to distribute the songs into two concerts. The goal is to minimize the absolute difference in the total duration of the concerts. We will calculate the total possible durations and find the closest pair. This approach will be efficient and suitable for large inputs.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': the process of dividing items or amounts into two or more groups, typically for the purpose of organizing or optimizing a system.\n    'minimizing the absolute difference': finding the smallest possible difference between two values.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To solve this problem efficiently, we will use a mathematical approach to distribute the songs into two concerts. The goal is to minimize the absolute difference in the total duration of the concerts. We will calculate the total possible durations and find the closest pair. This approach will be efficient and suitable for large inputs.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: Luntik has one one-minute, one two-minute, and one three-minute song. The optimal distribution would be to put one song in each concert, resulting in a difference of |1-2| = 1 minute.\n    Expected output: 1\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: Luntik has two one-minute, two two-minute, and two three-minute songs. The optimal distribution would be to put two one-minute songs and two two-minute songs in one concert, and two three-minute songs in the other, resulting in a difference of |4-6| = 2 minutes.\n    Expected output: 2\n\n    Edge case 3:\n    Input: a = 0, b = 0, c = 3\n    Explanation: Luntik has no one-minute or two-minute songs, but has three three-minute songs. The optimal distribution would be to put all three three-minute songs in one concert, resulting in a difference of |9-0| = 9 minutes.\n    Expected output: 9\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The mathematical approach described in the plan will naturally handle these cases efficiently.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts to minimize the absolute difference in their durations. The solution must be efficient and handle large input constraints. The output should be accurate and provide the minimal possible difference for each test case.\nrequirement pool:\n- Implement an efficient algorithm to distribute songs into two concerts.\n- Ensure the solution can handle large inputs within a reasonable time frame.\n- Provide clear and concise output for each test case.\n- Optimize the algorithm to minimize the absolute difference in concert durations.\n- Test the solution with various inputs to ensure accuracy and robustness.\nTo solve this problem efficiently, we will use a greedy approach to distribute the songs into two concerts. The goal is to minimize the absolute difference in the total duration of the concerts. We will sort the songs by their durations and then use a two-pointer technique to distribute them into two concerts. This approach ensures that we are always trying to balance the durations as much as possible.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': distributing songs into two concerts to minimize the absolute difference in their durations.\n    Explanation: The goal is to split the songs into two groups such that the sum of the durations in each group is as close as possible.\n\n# [phrase showing quantity relationship]\n    'two concerts': means we need to divide the songs into two groups.\n\n# [degree adverb] \n    'minimize': means we need to find the smallest possible difference between the two groups.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the solution efficiently, we can follow these steps:\n    1. Sort the durations of the songs in non-decreasing order.\n    2. Use a two-pointer technique to distribute the songs into two groups.\n    3. Calculate the difference between the sum of durations in each group and keep track of the smallest difference found.\n\n# [edge case] \n    Edge case 1: [1, 1, 2]\n    Expected output: 0\n    Explanation: The optimal distribution would be to put one 1-minute song and one 2-minute song in one concert, and the other two 1-minute songs in the other concert. The differences in durations would be 0.\n\n    Edge case 2: [1, 2, 3]\n    Expected output: 0\n    Explanation: The optimal distribution would be to put one 1-minute song and one 3-minute song in one concert, and the 2-minute song in the other concert. The differences in durations would be 0.\n\n    Edge case 3: [4, 4, 4]\n    Expected output: 0\n    Explanation: The optimal distribution would be to put two 4-minute songs in one concert and the remaining two 4-minute songs in the other concert. The differences in durations would be 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic is efficient and can handle the given constraints.\n", "requirement analysis:\nThe problem requires a method to distribute songs into two concerts to minimize the absolute difference in their durations. This involves a combinatorial approach to find the optimal distribution. The solution should be efficient and handle large input sizes efficiently.\nrequirement pool:\n- Implement a function to calculate the optimal distribution of songs.\n- Ensure the solution is optimized for large inputs.\n- Provide a simple interface for users to input the number of songs.\n- Ensure the output is clear and easy to understand.\n- Test the solution with various inputs to ensure accuracy and robustness.\nTo solve this problem efficiently, we will use a combinatorial approach to find the optimal distribution of songs into two concerts. The goal is to minimize the absolute difference in the time lengths of the concerts. We will use a brute-force method to try all possible combinations of distributing the songs to achieve this goal. Given the constraints on a, b, and c, this approach will be feasible.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'Minimize the absolute difference': The goal is to distribute songs into two concerts such that the difference in their total durations is minimized.\n    Explanation: This involves finding a way to split the total duration of all songs into two groups with the smallest possible difference.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the solution, we need to consider all possible combinations of distributing the songs into two concerts. This can be done by iterating through all possible ways to distribute the songs and calculating the difference for each distribution. The minimal difference found will be the answer.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The optimal way to distribute them is to put one song in each concert, resulting in a difference of 5 minutes (since the total duration is 6 minutes).\n    Expected output: 5\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs of different durations. The optimal way to distribute them is to put two songs of each duration in each concert, resulting in a difference of 0 minutes (since the total duration is 12 minutes, and each concert will have 6 minutes).\n    Expected output: 0\n\n    Edge case 3:\n    Input: a = 10^9, b = 10^9, c = 10^9\n    Explanation: There are three songs with a very large number of instances. The optimal way to distribute them is to put one song in each concert, resulting in a difference of 2*10^9 minutes (since the total duration is 3*10^9 minutes, and each concert will have approximately 1.5*10^9 minutes).\n    Expected output: 10^9\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The brute-force approach will work efficiently for the given constraints.\n", "requirement analysis:\nThe problem requires a method to distribute songs into two concerts to minimize the absolute difference in their durations. This involves a combinatorial approach to find the best distribution that balances the total duration of the concerts. The solution should be efficient and handle large input sizes effectively.\nrequirement pool:\n- Implement a function to calculate the optimal distribution of songs.\n- Ensure the solution is optimized for performance and can handle large inputs.\n- Develop a user interface that is simple and intuitive.\n- Include error handling to manage unexpected inputs.\nTo solve this problem efficiently, we will use a combinatorial approach that considers all possible distributions of the songs into two concerts. Given the constraints on the number of songs (a, b, c), we can use a brute-force method to explore all combinations. However, to optimize the solution, we will first sort the songs by their duration and then use a two-pointer technique to find the optimal distribution. This approach ensures that we explore the combinations in an efficient manner, making it suitable for handling large input sizes.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means dividing the songs into two groups such that each song is included in exactly one group.\n    'minimizing the absolute difference': means finding the closest possible total duration for the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To solve this problem, we need to consider all possible distributions of the songs into two concerts. We will use a brute-force method to explore all combinations, but to optimize the solution, we will sort the songs by their duration and then use a two-pointer technique to find the optimal distribution.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: We have one 1-minute song, one 2-minute song, and one 3-minute song. The optimal distribution would be to put the 1-minute and 3-minute songs in one concert and the 2-minute song in the other, resulting in a difference of |(1+3) - 2| = 2 minutes.\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: We have two 1-minute songs, two 2-minute songs, and two 3-minute songs. The optimal distribution would be to put one 1-minute song, one 2-minute song, and one 3-minute song in each concert, resulting in a difference of |(1+2+3) - (1+2+3)| = 0 minutes.\n    Edge case 3:\n    Input: a = 3, b = 0, c = 0\n    Explanation: We have three 1-minute songs and no 2-minute or 3-minute songs. The optimal distribution would be to put all three 1-minute songs in one concert, resulting in a difference of |3 - 0| = 3 minutes.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the brute-force method with sorting and two-pointer technique will naturally handle these cases. The solution will return the minimal possible difference for each test case.\n", "requirement analysis:\nThe problem requires a solution that can handle multiple test cases efficiently, each with different song durations. The goal is to minimize the absolute difference between the durations of the two concerts. The solution should be clear and provide accurate results for each test case.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in concert durations.\n- Ensure the solution can handle multiple test cases efficiently.\n- Provide clear and accurate output for each test case.\n- Optimize the algorithm for large input sizes.\nTo solve this problem efficiently, we will use a greedy approach to distribute the songs into two concerts. The key idea is to sort the song durations and then try to balance the durations between the two concerts. This approach ensures that we minimize the absolute difference in the durations of the two concerts.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'absolute difference': the smallest possible difference between two values\n    'greedy approach': a strategy to solve a problem by making the best choice at each step, without considering the overall result\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Sort the song durations: a, b, c\n    Calculate the total duration of all songs: total_duration = a + b + c\n    Calculate the ideal duration for each concert: ideal_duration = total_duration / 2\n    Distribute the songs to minimize the absolute difference:\n        1. Try to balance the durations by assigning the largest songs to the concert with the closer current duration to the ideal duration.\n        2. If the total duration is odd, one concert will have one more song than the other.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: The total duration is 3, which is even. The ideal duration for each concert is 1.5. By assigning one song to each concert, the difference is 0.\n    search([2, 1, 3]) = 1\n    explanation: The total duration is 6, which is even. The ideal duration for each concert is 3. By assigning two one-minute songs to one concert and the other songs to the other, the difference is 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The greedy approach inherently handles cases where the total duration is even or odd.\n\n# [core concept]\n    'sorting': arranging elements in a specific order, typically ascending or descending\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Sort the song durations: a, b, c\n    Calculate the total duration of all songs: total_duration = a + b + c\n    Calculate the ideal duration for each concert: ideal_duration = total_duration / 2\n    Distribute the songs to minimize the absolute difference:\n        1. Try to balance the durations by assigning the largest songs to the concert with the closer current duration to the ideal duration.\n        2. If the total duration is odd, one concert will have one more song than the other.\n\n# [edge case] \n    search([5, 5, 5]) = 0\n    explanation: The total duration is 15, which is even. The ideal duration for each concert is 7.5. By assigning five songs to each concert, the difference is 0.\n    search([1, 2, 3]) = 1\n    explanation: The total duration is 6, which is even. The ideal duration for each concert is 3. By assigning one three-minute song to one concert and the other songs to the other, the difference is 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The greedy approach inherently handles cases where the total duration is even or odd.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts to minimize the absolute difference in their durations. This involves a simple mathematical approach to distribute the songs in a way that balances the total duration of the two concerts. The solution should be efficient and handle a large number of test cases.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in concert durations\n- Ensure the solution can handle a large number of test cases efficiently\n- Provide clear and accurate output for each test case\n- Optimize the algorithm for performance\n- Enhance the user interface for better usability\nTo solve this problem efficiently, we will use a greedy approach to distribute the songs into two concerts. The goal is to minimize the absolute difference in the durations of the two concerts. We will sort the song durations and then try to balance the total duration between the two concerts. This approach ensures that we are making the best possible distribution without having to check all possible combinations, which would be computationally expensive for large inputs.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'minimizing the absolute difference': means finding the closest possible total duration for the two concerts.\n    'greedy approach': means selecting the best option at each step without considering all possible future options.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Sort the song durations.\n    Calculate the total duration of all songs.\n    Use a greedy approach to distribute the songs into two concerts, trying to balance the total duration between the two concerts.\n    Calculate the absolute difference between the two concert durations.\n    Return the minimal possible difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: The total duration is 3, and it can be evenly distributed into two concerts of 1.5 minutes each, resulting in a difference of |1.5 - 1.5| = 0.\n    search([1, 2, 3]) = 1\n    explanation: The optimal distribution is to put the 1 and 3 minute songs in one concert and the 2 minute song in the other, resulting in a difference of |3 - 2| = 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The greedy approach inherently handles cases where the total duration is evenly divisible by 2.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in durations when distributing songs into two concerts. The solution should be efficient and handle a large number of test cases. The input consists of multiple test cases, each with three integers representing the number of one-minute, two-minute, and three-minute songs. The output should be the minimal possible difference in minutes between the durations of the two concerts.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in concert durations\n- Ensure the solution can handle up to 1000 test cases\n- Optimize the algorithm for performance\n- Provide clear and accurate output for each test case\n- Ensure the solution is simple and easy to understand\nTo solve this problem efficiently, we will use a greedy approach to distribute the songs into two concerts. The goal is to minimize the absolute difference in their durations. We will sort the song durations and then try to balance the durations between the two concerts. This approach ensures that we are making the best possible distribution without having to check all possible combinations, which would be computationally expensive.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'minimizing the absolute difference': means finding the smallest possible difference between two groups of numbers.\n    'greedy approach': means making the best choice at each step without considering the overall result.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Sort the song durations: a, b, c.\n    Calculate the total duration of all songs.\n    Use a greedy approach to distribute the songs into two concerts, trying to balance the durations as much as possible.\n    Calculate the difference between the two concert durations and return the smallest possible difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: The total duration is 3, and the optimal distribution is 1+1=2 and 1, with a difference of |2-1|=1.\n    search([2, 2, 3]) = 1\n    explanation: The total duration is 7, and the optimal distribution is 2+2=4 and 3, with a difference of |4-3|=1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The greedy approach inherently handles the case where the total duration is evenly divisible by 2.\n\n# [code logic]\n    Sort the song durations: a, b, c.\n    Calculate the total duration: total_duration = a + b + c.\n    If total_duration is even, the minimal difference is 0.\n    If total_duration is odd, the minimal difference will be 1 because we can only distribute the songs in such a way that one concert has an odd duration and the other has an even duration.\n\n# [edge case] \n    search([1, 1, 2]) = 1\n    explanation: The total duration is 4, and the optimal distribution is 1+1=2 and 2, with a difference of |2-2|=0. However, since the total duration is even, we need to consider the case where the difference is 1 due to the odd total duration.\n    search([1, 2, 3]) = 1\n    explanation: The total duration is 6, and the optimal distribution is 1+2=3 and 3, with a difference of |3-3|=0. However, since the total duration is even, we need to consider the case where the difference is 1 due to the odd total duration.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The greedy approach inherently handles the case where the total duration is evenly divisible by 2.\n", "requirement analysis:\nThe problem requires finding the optimal distribution of songs into two concerts to minimize the absolute difference in their durations. This involves a combinatorial approach to try different distributions and calculate the differences. The solution should be efficient to handle large inputs within the given constraints.\nrequirement pool:\n- Implement an efficient algorithm to find the optimal distribution of songs.\n- Ensure the solution can handle large inputs within a reasonable time frame.\n- Provide clear and concise output for each test case.\n- Optimize the solution for minimizing the absolute difference in concert durations.\nTo solve this problem efficiently, we will use a combinatorial approach to try different distributions of songs into two concerts. We will calculate the sum of durations for each possible distribution and then find the minimal possible difference between the two concert durations. Given the constraints on a, b, and c, we need to ensure our solution is optimized for large inputs.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'Minimize the absolute difference': The goal is to distribute songs into two concerts such that the difference in their total durations is minimized.\n    Explanation: This involves finding the best possible split of songs into two groups to achieve the smallest possible difference in their total lengths.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To solve this problem efficiently, we can use a combinatorial approach to try different distributions of songs into two concerts. We will calculate the sum of durations for each possible distribution and then find the minimal possible difference between the two concert durations.\n\n# [edge case] \n    Edge Case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The optimal way to split them is to put one 3-minute song in one concert and the other two songs in the other concert, resulting in a difference of 1 minute.\n    Expected Output: 1\n\n    Edge Case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs of different durations. One optimal way to split them is to put two 3-minute songs and two 2-minute songs in one concert, and the remaining two 1-minute songs in the other concert, resulting in a difference of 0 minutes.\n    Expected Output: 0\n\n    Edge Case 3:\n    Input: a = 10^9, b = 10^9, c = 10^9\n    Explanation: There are a large number of songs of different durations. The optimal way to split them would be to distribute them as evenly as possible, resulting in a very small difference.\n    Expected Output: A small value close to 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The combinatorial approach we described will work efficiently for large inputs as well.\n"], "scores": [], "pass_results": [false, false, false, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": false, "pass": false, "pass_num": 0, "round": 69, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "rephrase_one", "parent_index": 54}
