{"name": "1607_A. Linear Keyboard", "description": "You are given a keyboard that consists of 26 keys. The keys are arranged sequentially in one row in a certain order. Each key corresponds to a unique lowercase Latin letter.\n\nYou have to type the word s on this keyboard. It also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nDetermine how long it will take to print the word s.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "tags": ["implementation", "strings"], "difficulty": 7, "id": 1607, "sample_io": [{"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}], "test_list": [{"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkjanscjanjkcanc\n", "output": ["164\n"]}, {"input": "1\nabcdefghilkjmnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjkcanc\n", "output": ["164\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjlcanc\n", "output": ["166\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nasdeb\n", "output": ["37\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkcanscjanjkcanj\n", "output": ["157\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n70\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nbbdes\n", "output": ["17\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n6\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsaeeb\n", "output": ["25\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkcanscjanjlcanj\n", "output": ["159\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabaacba\n", "output": ["13\n0\n70\n0\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n68\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n6\n74\n"]}, {"input": "1\nabcdefjhilkglnopqrstuvwxyz\nabdet\n", "output": ["19\n"]}, {"input": "1\naycdefbhilkjmnopqrstuvwxgz\nsfdba\n", "output": ["24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n70\n0\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n52\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkianscjanjclanb\n", "output": ["181\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsadfb\n", "output": ["27\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n0\n56\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n50\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n68\n6\n52\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\nbseeb\n", "output": ["34\n"]}, {"input": "1\nzywwsutvrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["171\n"]}, {"input": "1\nzgxovudsrqpcnljklihyfetwba\nsedba\n", "output": ["48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["13\n0\n50\n0\n35\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\nasdea\n", "output": ["38\n"]}, {"input": "1\nzywwsutvrqponmlcjihgfedkba\njnacljnajcsnackncasca\n", "output": ["173\n"]}, {"input": "1\nzgxwdutsrqponmjklihbfeucya\nsfdba\n", "output": ["50\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodffcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n6\n56\n"]}, {"input": "1\nzyxwvvtsrqponmlkjihgfedcba\nnnacljnajcrcajkncasca\n", "output": ["153\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nehllo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["10\n0\n50\n0\n35\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\naasccnkianscjanjlcanb\n", "output": ["163\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbsdfa\n", "output": ["39\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n66\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nehllo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ndodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["10\n0\n49\n0\n35\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\naatccnkianscjanjlcanb\n", "output": ["165\n"]}, {"input": "1\ndfxwvutsrqponmlkjihgfyzcba\naatccnkiansljanjccanb\n", "output": ["147\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponclljihgfedmba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabcabaa\n", "output": ["14\n0\n54\n6\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\naacdefghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n80\n0\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqpqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n36\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nscerofecod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n69\n18\n74\n"]}, {"input": "1\nabcdefyhilkjmponsrwtuvqxhz\nbedsa\n", "output": ["33\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngdlln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqpqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n36\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponclljihgfedmba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwfrtyuhopasdfghjklzxcvbnm\nabcabab\n", "output": ["14\n0\n54\n6\n65\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n65\n18\n74\n"]}, {"input": "1\nabcdehgsilkilnopqrftuvwxyz\nteaae\n", "output": ["23\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabchefxgijklmnupqrstovwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["16\n0\n65\n24\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\naacddfghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzxcvbnj\nabacaba\n", "output": ["15\n0\n80\n0\n74\n"]}, {"input": "1\naccdehgsilkilnopqqftuvwxxz\nseaae\n", "output": ["11\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponmlkjihgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n80\n6\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihggedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghzjmlmnopqrstuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\naaacaba\n", "output": ["16\n0\n65\n24\n48\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n80\n15\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihggedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghzjmlmnopqrstuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nrqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\naaacaba\n", "output": ["16\n0\n65\n27\n48\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nzqxwvutsryponmlkiihgfedcba\ncoeeforcse\nqwertyujnpasdfghjklzxcvbnn\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabcaaba\n", "output": ["15\n0\n80\n15\n52\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjklzxcvbnn\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabcaaba\n", "output": ["15\n0\n82\n15\n52\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nhdllo\nzyxvvutsrqponilkjmhgfddcaa\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["15\n0\n82\n15\n26\n"]}, {"input": "5\nabcdefghijilmnopqrstuvwxyz\nhdllo\naacddfghmjklinopqrstuvvxyz\nj\nabcdefghiiklmnopvrstuywxqz\ncoeeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["15\n0\n80\n15\n26\n"]}, {"input": "5\nabcdefghijilmnopqrstuvwxyz\nhdllo\naacddfghmjklinopqrstuvvxyz\nj\nabcdefghiiklmnopvrstuywxqz\ncoeeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacaa\n", "output": ["15\n0\n80\n15\n24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhlelo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["21\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacjkjanscnanjlcanb\n", "output": ["169\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n3\n74\n"]}, {"input": "1\nabcdefghijklmonpqrstuvwxyz\ncnackjnajcsnajkncasca\n", "output": ["170\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\ncoacljnajcsnajkncasca\n", "output": ["168\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbaacaba\n", "output": ["12\n0\n68\n18\n61\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsaeea\n", "output": ["26\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwautsrqponmlkjihgfedcbv\nacsacnkcanscjanjlcanj\n", "output": ["200\n"]}, {"input": "1\nnbcdefyhilkjmaopqrstuvwxgz\nsfdba\n", "output": ["29\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforbes\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n70\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwerbyuiopasdfghjklzxcvtnm\nabacaba\n", "output": ["12\n0\n68\n18\n46\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n18\n74\n"]}, {"input": "1\nzywwvutsrqponmlkjihgfedcba\njnacljnajcsnackncatca\n", "output": ["161\n"]}, {"input": "5\nzyxwvutsrqponmakjihgfedcbl\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["19\n0\n68\n18\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["12\n0\n68\n6\n52\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\ncsdea\n", "output": ["36\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nkelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["18\n0\n68\n0\n74\n"]}, {"input": "1\nzgxwuuterqponmjklihbfsdcya\nsfdba\n", "output": ["12\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\nacsacnkianscjanjldanb\n", "output": ["195\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\nasdae\n", "output": ["40\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyuiopasdfghjklzxcvbnm\nabbcaba\n", "output": ["11\n0\n68\n18\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nnlleh\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnzpqrstuvwxyo\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n106\n18\n74\n"]}, {"input": "1\nzyxwjvtsrqponmlkvihgfedcba\nnnacljnajcrcajkncasca\n", "output": ["211\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbscfa\n", "output": ["41\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n66\n18\n74\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlnlhe\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\neholl\nabcdefghijklmnopqrstuvwyyz\ni\nabcdefohijllmngpqrstuvwxyz\ndodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["13\n0\n49\n0\n35\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljihgfedcba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabcabaa\n", "output": ["14\n0\n68\n24\n52\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnlleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nscerofedod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n67\n18\n74\n"]}, {"input": "1\ndfxwvutsrqponmlkjihgfyzcba\naatccnkiansljanjccana\n", "output": ["148\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nbbacaba\n", "output": ["11\n0\n68\n18\n61\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nseeqofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n63\n18\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolleh\naacdefghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeefoqcse\nqwertyujnpasdfghjklzxcvbnn\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n78\n0\n74\n"]}, {"input": "1\nabcdehgsilkilnopqrftuvwxyz\naeate\n", "output": ["42\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmlfh\nabchefxgijklmnupqrstovwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["10\n0\n65\n18\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmelh\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["20\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhem\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\nabacaba\n", "output": ["17\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdsfghzjmlmnopqretuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\nabacaba\n", "output": ["16\n0\n53\n24\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcsf\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n79\n6\n74\n"]}, {"input": "1\nzxxwvutfqqponlekljshhiccca\nteaae\n", "output": ["30\n"]}, {"input": "1\nztxwvuxfqqponlikcjshieccma\neaaet\n", "output": ["28\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nhdlln\naacddfghmjklinopqrstuvvxyz\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["14\n0\n82\n15\n26\n"]}, {"input": "1\narcdeffhilkjmnopqbstuvwxyz\nabdes\n", "output": ["46\n"]}, {"input": "1\nzyxwvutsrqponclkjihgeedmba\nacsacnkjanscjanjlcanc\n", "output": ["144\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n9\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nccacljnajcsnajknoasca\n", "output": ["146\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnnjcacaska\n", "output": ["145\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbaacaba\n", "output": ["12\n0\n68\n24\n61\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabababa\n", "output": ["14\n0\n68\n0\n78\n"]}, {"input": "1\nzyxwautsrqponmlkjihgfedcbv\nacsacnkcanrcjanjlcanj\n", "output": ["198\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhdllo\nabcdezghijklmnopqrstuvwxyf\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["15\n0\n68\n0\n48\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nabdes\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxzz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\nbeesa\n", "output": ["35\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\ncnackjnajcsnajkncasca\n", "output": ["164\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nabdfs\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabcdefyhilkjlnopqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nsedba\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nasdeb\n", "output": ["37\n"]}, {"input": "5\nabcdekghijflmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\nasedb\n", "output": ["35\n"]}, {"input": "1\nabcdefyhilkhmnopqrstuvwxjz\nbeesa\n", "output": ["35\n"]}, {"input": "1\nabcdefjhilkglnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nsfdba\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabodefyhilkjlncpqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnaikncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nsedaa\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nbedsa\n", "output": ["37\n"]}, {"input": "5\nabcdekghijflmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsadeb\n", "output": ["25\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsrqpnomhklihyfedcba\nasedb\n", "output": ["35\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\nbeesa\n", "output": ["35\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["159\n"]}, {"input": "1\nabcdefghijklmnopqrstvvwxyz\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabwdefyhilkjlncpqrstuvoxgz\nsedba\n", "output": ["18\n"]}, {"input": "1\ndyxwvutsrqponmlkjihgfezcba\nbnacljnajcsnaikncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\naades\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n6\n74\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nbnacljnajcnnajkscasca\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\naedsb\n", "output": ["37\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabdet\n", "output": ["19\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzywwvutsrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["159\n"]}, {"input": "1\nzgxwvutsrqponmjklihbfedcya\nsfdba\n", "output": ["24\n"]}, {"input": "1\nabcdefghijklmnopqrstvvwxyz\ncnacljnajcrnajkncasca\n", "output": ["164\n"]}, {"input": "1\nzgxovutsrqpcnljklihyfedwba\nsedba\n", "output": ["18\n"]}, {"input": "1\ndyxwvutsrqponmlkjihgfezcba\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\naades\n", "output": ["18\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvvxyz\nacsacnkianscjanjclanb\n", "output": ["181\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nbsdea\n", "output": ["37\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabeet\n", "output": ["19\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzgxwuutsrqponmjklihbfedcya\nsfdba\n", "output": ["24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodffcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n0\n56\n"]}, {"input": "1\nzyxwvvtsrqponmlkjihgfedcba\ncnacljnajcrnajkncasca\n", "output": ["164\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n68\n6\n52\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbsdea\n", "output": ["37\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nnlleh\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsroponmhklihyfedcba\nbseeb\n", "output": ["34\n"]}, {"input": "1\nzyxwvutsrqponljklihgfedcba\nabeet\n", "output": ["19\n"]}], "task_id": "codecontest/98", "prompt": "You are given a keyboard that consists of 26 keys. The keys are laid out in a sequence in one line in a specified order. These keys are arranged sequentially in the specified order to streamline the typing process for users. Each key corresponds to a unique lowercase Latin letter.\n\nYou have to type the word s on this keyboard. It also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nDetermine how long it will take to print the word s. Clarify how the initial hand position affects the calculation if it is not aligned with the start of the word. This problem requires careful handling of initial positioning to ensure accurate time computation.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "repair_prompt": ["You are given a keyboard that consists of 26 keys. The keys are laid out in a sequence in one line in a specified order. These keys are arranged sequentially in the specified order to streamline the typing process for users. Each key corresponds to a unique lowercase Latin letter.\n\nYou have to type the word s on this keyboard. It also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nDetermine how long it will take to print the word s. Clarify how the initial hand position affects the calculation if it is not aligned with the start of the word. This problem requires careful handling of initial positioning to ensure accurate time computation.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\nWrite a main() function and use input() function to read input from stdin", " You are given a keyboard that consists of 26 keys. The keys are laid out in a sequence in one line in a specified order. These keys are arranged sequentially in the specified order to streamline the typing process for users. Each key corresponds to a unique lowercase Latin letter.\n\nYou have to type the word s on this keyboard. It also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it.\n\nMoving the hand between the keys takes time which is\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\nWrite a main() function and use input() function to read input from stdin", " You are given a keyboard with 26 keys arranged in a sequence, each corresponding to a unique lowercase Latin letter. You need to type the word s on this keyboard, which consists only of lowercase Latin letters. To type each letter, you must position your hand exactly over the corresponding key and press it. Moving the hand between keys takes time equal to the absolute value of the difference between the positions of these keys. The initial hand position does not affect the calculation if it is aligned with the start of the word, but if not, careful handling is required to ensure accurate time computation. Determine how long it will take to print the word\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    # Create a dictionary to map each letter to its position on the keyboard\n    key_positions = {char: index for index, char in enumerate(keyboard)}\n    \n    # Initialize the total time to 0\n    total_time = 0\n    \n    # Iterate through the word to calculate the typing time\n    for i in range(1, len(word)):\n        # Get the positions of the current and previous letters\n        current_pos = key_positions[word[i]]\n        previous_pos = key_positions[word[i - 1]]\n        \n        # Calculate the time to move the hand between the keys\n        time_to_move = abs(current_pos - previous_pos)\n        \n        # Add the time to the total time\n        total_time += time_to_move\n    \n    # Return the total time\n    return total_time\n\n# Read the number of test cases from a file or API\nimport sys\n\n# Read the number of test cases\nt = int(sys.stdin.readline().strip())\n\n# Process each test case\nfor _ in range(t):\n    # Read the keyboard layout and the word\n    keyboard = sys.stdin.readline().strip()\n    word = sys.stdin.readline().strip()\n    \n    # Calculate the typing time for the word on the given keyboard\n    result = calculate_typing_time(keyboard, word)\n    \n    # Output the result\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    # Create a dictionary to map each key (letter) to its position on the keyboard\n    key_positions = {}\n    for index, key in enumerate(keyboard):\n        key_positions[key] = index\n    \n    # Initialize the time to type the first letter\n    total_time = 0\n    \n    # Iterate through the word, calculating the time to type each letter\n    for i in range(1, len(word)):\n        current_key = word[i]\n        previous_key = word[i - 1]\n        # Calculate the time to move from the previous key to the current key\n        time_to_move = abs(key_positions[current_key] - key_positions[previous_key])\n        total_time += time_to_move\n    \n    return total_time\n\n# Read input from stdin\nt = int(input())\nfor _ in range(t):\n    keyboard = input()\n    word = input()\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    # Create a dictionary to map each key to its position on the keyboard\n    key_positions = {}\n    for index, key in enumerate(keyboard):\n        key_positions[key] = index + 1  # +1 to convert to 1-based index\n\n    # Initialize the total time and the position of the hand\n    total_time = 0\n    current_position = 0  # Start at position 0, which means the hand is not moved initially\n\n    # Calculate the time to type each letter in the word\n    for letter in word:\n        target_position = key_positions[letter]\n        total_time += abs(target_position - current_position)\n        current_position = target_position  # Update the current position to the target position\n\n    return total_time\n\n# Read input from stdin\nt = int(input())\nfor _ in range(t):\n    keyboard = input()\n    word = input()\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\nimport sys\ninput = sys.stdin.readline\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the minimal time it takes to type the word on the given keyboard.\n\n    Args:\n        keyboard (str): A string of length 26 representing the keyboard layout.\n        word (str): The word to be typed.\n\n    Returns:\n        int: The minimal time to type the word.\n    \"\"\"\n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n    \n    # Initialize the total time to 0\n    total_time = 0\n    \n    # Calculate the time to type the word\n    for char in word:\n        total_time += keyboard_positions[char]\n    \n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    # Read the keyboard layout and the word\n    keyboard = input().strip()\n    word = input().strip()\n    \n    # Calculate and print the typing time for the word on the given keyboard\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the minimal time required to type a given word on a specified keyboard.\n\n    Args:\n        keyboard (str): A string of length 26 representing the layout of the keyboard.\n        word (str): The word to be typed.\n\n    Returns:\n        int: The minimal time required to type the word.\n    \"\"\"\n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n\n    # Initialize the total time to 0\n    total_time = 0\n\n    # Calculate the time required to type each letter in the word\n    for i in range(len(word) - 1):\n        current_letter = word[i]\n        next_letter = word[i + 1]\n        current_position = keyboard_positions[current_letter]\n        next_position = keyboard_positions[next_letter]\n        # Add the absolute difference in positions to the total time\n        total_time += abs(next_position - current_position)\n\n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    keyboard = input()\n    word = input()\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the minimal time to type a given word on a specified keyboard layout.\n\n    Args:\n        keyboard (str): A string of length 26 representing the keyboard layout.\n        word (str): The word to be typed, consisting of lowercase Latin letters.\n\n    Returns:\n        int: The minimal time to type the word on the given keyboard.\n    \"\"\"\n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n\n    # Initialize the total time to 0\n    total_time = 0\n\n    # Calculate the time to type each letter in the word\n    for char in word:\n        current_position = keyboard_positions[char]\n        # The time to type the current letter is its position on the keyboard\n        total_time += current_position\n\n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    # Read the keyboard layout and the word\n    keyboard = input()\n    word = input()\n    \n    # Calculate and print the typing time for the current test case\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the total time required to type a word based on the given keyboard layout.\n\n    Args:\n        keyboard (str): A string of 26 characters representing the keyboard layout.\n        word (str): The word to be typed.\n\n    Returns:\n        int: The total time required to type the word.\n    \"\"\"\n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n    \n    # Initialize the total time to 0\n    total_time = 0\n    \n    # Initialize the previous position to the position of the first letter in the word\n    previous_position = keyboard_positions[word[0]]\n    \n    # Iterate through the word to calculate the time for each letter\n    for letter in word[1:]:\n        current_position = keyboard_positions[letter]\n        # Calculate the time based on the position of the current letter relative to the previous letter\n        time_to_move = abs(current_position - previous_position)\n        total_time += time_to_move\n        # Update the previous position to the current position\n        previous_position = current_position\n    \n    return total_time\n\n# Read the number of test cases\nt = int(input().strip())\n\n# Process each test case\nfor _ in range(t):\n    # Read the keyboard layout and the word\n    keyboard = input().strip()\n    word = input().strip()\n    \n    # Calculate the total time required to type the word\n    result = calculate_typing_time(keyboard, word)\n    \n    # Output the result\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n    \n    # Initialize the total time to 0\n    total_time = 0\n    \n    # Initialize the previous position to the position of the first letter\n    if word:\n        prev_position = keyboard_positions[word[0]]\n    \n    # Iterate through the word to calculate the total time\n    for letter in word[1:]:\n        current_position = keyboard_positions[letter]\n        # Calculate the time to move from the previous position to the current position\n        total_time += abs(current_position - prev_position)\n        # Update the previous position\n        prev_position = current_position\n    \n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    # Read the keyboard layout and the word\n    keyboard = input()\n    word = input()\n    \n    # Calculate and print the result\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the minimum time required to type a word on a given keyboard.\n\n    Args:\n        keyboard (str): A string of 26 characters representing the keyboard layout.\n        word (str): The word to be typed.\n\n    Returns:\n        int: The minimum time required to type the word.\n    \"\"\"\n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n    \n    # Initialize the time to type the first letter\n    time = 0\n    \n    # Initialize the position of the hand for the first letter\n    current_position = 0\n    \n    # Iterate through the word and calculate the time required to type each letter\n    for char in word:\n        char_position = keyboard_positions[char]\n        time += abs(char_position - current_position)\n        current_position = char_position\n    \n    return time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    # Read the keyboard layout and the word\n    keyboard = input()\n    word = input()\n    \n    # Calculate and print the typing time for the word on the given keyboard\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the time required to type a given word on a specified keyboard.\n\n    Args:\n        keyboard (str): A string of length 26 representing the keyboard layout.\n        word (str): The word to be typed.\n\n    Returns:\n        int: The total time required to type the word.\n    \"\"\"\n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n\n    # Initialize the total typing time\n    total_time = 0\n\n    # Initialize the position of the hand for the first letter\n    previous_position = 0\n\n    # Iterate over each letter in the word\n    for letter in word:\n        # Get the position of the current letter on the keyboard\n        current_position = keyboard_positions[letter]\n\n        # Calculate the time to type the current letter\n        time_to_type_current_letter = abs(current_position - previous_position)\n\n        # Add the time to the total typing time\n        total_time += time_to_type_current_letter\n\n        # Update the position of the hand for the next letter\n        previous_position = current_position\n\n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    # Read the keyboard layout and the word to type\n    keyboard = input()\n    word = input()\n\n    # Calculate the typing time for the word\n    result = calculate_typing_time(keyboard, word)\n\n    # Output the result\n    print(result)\n"], "plans": ["requirement analysis:\nThe requirements involve calculating the time it takes to type a given word on a specified keyboard layout. The keyboard layout is provided as a string of 26 lowercase Latin letters, and the word to be typed is also provided, with a length ranging from 1 to 50 characters. The challenge is to determine the minimal time required to type the word, considering the positions of the keys and the initial hand position.\nrequirement pool:\n- Implement a function to calculate the time to type a word based on the keyboard layout.\n- Ensure the function can handle multiple test cases efficiently.\n- Allow for customization of the initial hand position.\n- Provide a user-friendly interface for inputting the keyboard layout and words.\n- Include error handling for invalid inputs.\nTo solve this problem, we will create a Python function that calculates the time required to type a given word on a specified keyboard layout. The function will first map each key to its position on the keyboard, then calculate the time based on the positions of consecutive letters in the word. We will use a dictionary to store the positions of the keys for quick lookup.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': the arrangement of keys on a keyboard, where each key corresponds to a unique letter.\n    'position': the index of a key in the sequence of keys on the keyboard.\n    'time calculation': the absolute difference in positions between consecutive letters in a word, which represents the time taken to move the hand between keys.\n\n# [phrase showing quantity relationship]\n    No specific phrase showing quantity relationship.\n\n# [degree adverb] \n    No specific degree adverb.\n\n# [code logic]\n    The function will follow these steps:\n    1. Read the keyboard layout and the word to be typed.\n    2. Create a dictionary to map each letter to its position on the keyboard.\n    3. Initialize a variable to keep track of the total time.\n    4. Iterate through the word, calculating the time to type each letter based on the positions of the current and previous letters.\n    5. Return the total time.\n\n# [edge case] \n    Edge case 1:\n    Input: keyboard = \"abcdefghijklmnopqrstuvwxyz\", word = \"abc\"\n    Explanation: The positions of 'a', 'b', and 'c' are 1, 2, and 3 respectively. The time taken to type the word \"abc\" is |2-1| + |3-2| = 2.\n    Edge case 2:\n    Input: keyboard = \"qwertyuiopasdfghjklzxcvbnm\", word = \"hello\"\n    Explanation: The positions of 'h', 'e', 'l', 'l', and 'o' are 8, 5, 12, 12, and 15 respectively. The time taken to type the word \"hello\" is |5-8| + |12-5| + |12-12| + |15-12| = 13.\n    Edge case 3:\n    Input: keyboard = \"zyxwvutsrqponmlkjihgfedcba\", word = \"cba\"\n    Explanation: The positions of 'c', 'b', and 'a' are 26, 25, and 24 respectively. The time taken to type the word \"cba\" is |25-26| + |24-25| = 2.\n\n# [extra code for edge case]\n    No extra code is needed for handling the edge cases as the logic provided in the plan can handle any valid input within the given constraints.\n", "requirement analysis:\nThe requirements involve calculating the time taken to type a word on a given keyboard, considering the positions of the keys and the initial hand position. The keyboard layout is provided, and the word to be typed is also given. The challenge is to determine the minimal time required to type the word, taking into account the movement time between keys.\nrequirement pool:\n- Implement a function to calculate the time to type a word based on keyboard layout.\n- Ensure the function can handle different keyboard layouts and words of varying lengths.\n- Allow for customization of the initial hand position.\n- Optimize the algorithm for performance, especially for long words and complex keyboard layouts.\nTo solve this problem, we will create a Python function that calculates the time required to type a given word on a specified keyboard. The function will first map each key to its position on the keyboard, then calculate the time based on the positions of consecutive letters in the word. We will use a dictionary to store the positions of the keys for quick lookup.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: The problem involves understanding the positional relationship between keys on a keyboard to calculate the time required to type a word. Each key's position is crucial for determining the time taken to move from one key to another.\n\n# [phrase showing quantity relationship]\n    'consecutively': This phrase indicates that the letters of the word must be typed one after the other without skipping any.\n    Explanation: The word \"consecutively\" implies that the typing must be done in a sequential order without any breaks, ensuring that the time calculation accounts for each letter's position accurately.\n\n# [degree adverb] \n    'minimal': This adverb indicates that the goal is to find the shortest possible time required to type the word.\n    Explanation: The use of \"minimal\" suggests that the solution should find the best or optimal way to type the word, considering the positional differences between keys.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the solution, we need to:\n    1. Create a dictionary to map each key (letter) to its position on the keyboard.\n    2. Iterate through the word, calculating the time to type each letter based on its position and the position of the previous letter.\n    3. Sum the times for all letters to get the total time.\n\n# [edge case] \n    how_long_to_type(\"hello\", \"qwertyuiopasdfghjklzxcvbnm\") = 122\n    Explanation: The word \"hello\" would take 13 units of time on a keyboard where keys are in alphabetical order. However, on a random keyboard, the positions of the letters would be different, and the total time would be higher. The exact calculation would involve mapping each letter to its position on the given keyboard and summing the absolute differences.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the initial hand position is not at the start of the word. This would require calculating the time to move the hand from the initial position to the first letter of the word.\n    Explanation: The initial positioning of the hand can significantly affect the total time, especially if it is not aligned with the start of the word. This would require additional logic to account for the initial movement time.\n", "requirement analysis:\nThe requirements involve calculating the time taken to type a word based on the positions of the keys on the keyboard. The initial hand position is crucial as it affects the time calculation. The input consists of multiple test cases, and each case needs to be processed individually. The output should provide the minimal time for each test case.\nrequirement pool:\n- Implement a function to calculate typing time based on key positions.\n- Handle multiple test cases efficiently.\n- Allow for different keyboard layouts.\n- Consider the initial hand position in the typing time calculation.\n- Ensure the solution is scalable and can handle a large number of test cases.\nTo solve this problem, we will create a Python function that calculates the time required to type a word on a given keyboard. The function will first map each key to its position, then calculate the time based on the positions of consecutive letters in the word. The initial hand position will be considered by adjusting the starting position if necessary.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: The problem involves calculating the time to type a word based on the positions of the keys on the keyboard. The position of each key is determined by its order in the sequence of the alphabet.\n\n# [phrase showing quantity relationship]\n    'as many times': Indicates the frequency with which a letter appears in the word.\n    Explanation: For example, if a letter appears twice in the word, it means that the letter must be typed twice.\n\n# [degree adverb] \n    'minimal': Indicates the smallest possible time required to type the word.\n    Explanation: The goal is to find the minimal time, considering the positions of the keys and the initial hand position.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to:\n    1. Map each key to its position on the keyboard.\n    2. Calculate the time to type each letter in the word based on the positions of the keys.\n    3. Sum the times for all letters to get the total time.\n    4. Consider the initial hand position by adjusting the starting position if necessary.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the list is [1, 2, 2, 3, 3, 3, 4, 4, 4]. The number 3 appears three times and is the largest integer that meets the condition.\n    search([2, 2, 3, 3, 3]) = 3\n    Explanation: The list is [2, 2, 3, 3, 3]. The number 3 appears three times and is the largest integer that meets the condition.\n    search([3, 3, 2, 4, 4, 4]) = -1\n    Explanation: The list is [3, 3, 2, 4, 4, 4]. None of the numbers appear as many times as their value, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic can handle cases where no integer meets the condition by returning -1.\n", "requirement analysis:\nThe requirements involve calculating the minimal time to type a given word on a specified keyboard layout. The challenge lies in determining the position of each letter on the keyboard and calculating the total movement time for typing the word. The solution should be efficient and handle up to 1000 test cases.\nrequirement pool:\n- Implement a function to calculate the time to type a word on a given keyboard.\n- Ensure the solution can handle up to 1000 test cases efficiently.\n- Optimize the code for performance to handle large inputs.\n- Provide clear and concise output for each test case.\nWe will use a simple approach to solve the problem by mapping each key's position on the keyboard and then calculating the time to type the word based on the positions of its letters. This approach will be efficient and suitable for handling up to 1000 test cases.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard for efficient typing.\n    Explanation: The keys are laid out in a specific order, and each key corresponds to a unique letter from 'a' to 'z'. This layout helps in minimizing the time required to type a word by reducing the movement of the hand between keys.\n\n# [phrase showing quantity relationship]\n    'as many times': Indicates the frequency of a letter's appearance in the word.\n    Explanation: For example, if a letter appears 'n' times in the word, it means that the hand needs to press the corresponding key 'n' times.\n\n# [degree adverb] \n    'minimal': Refers to the shortest time required to type the word.\n    Explanation: This means finding the most efficient sequence of pressing keys to minimize the total time.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the solution, we need to:\n    1. Read the keyboard layout and the word for each test case.\n    2. Map each letter in the word to its position on the keyboard.\n    3. Calculate the time to type the word by summing the positions of its letters.\n    4. Output the result for each test case.\n\n# [edge case] \n    search([1]) = 1\n    Explanation: If the list contains only one element, it is trivially the largest integer that appears at least as many times as itself.\n    search([]) = -1\n    Explanation: An empty list does not contain any integers, so the function should return -1.\n    search([2, 2, 3, 3, 3]) = 3\n    Explanation: Both 2 and 3 appear more than or equal to their values, but 3 is the largest number.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic can handle cases with a single element or an empty list by returning the appropriate value.\n\n## Prompt 3:\n[requirement]\nYou are given a keyboard that consists of 26 keys. The keys are laid out in a sequence in one line in a specified order. These keys are arranged sequentially in the specified order to streamline the typing process for users. Each key corresponds to a unique lowercase Latin letter. You have to type the word s on this keyboard. It also consists only of lowercase Latin letters. To type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it. Moving the hand between the keys takes time which is Input The first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. The next 2t lines contain descriptions of the test cases. The first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard. The second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters. Output Print t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n------- Important Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample Input 5 abcdefghijklmnopqrstuvwxyz hello abcdefghijklmnopqrstuvwxyz i abcdefghijklmnopqrstuvwxyz codeforces qwertyuiopasdfghjklzxcvbnm qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq qwertyuiopasdfghjklzxcvbnm abacaba Output 13 0 68 0 74\n[plan]\nWe will use a simple approach to solve the problem by mapping each key's position on the keyboard and then calculating the time to type the word based on the positions of its letters. This approach will be efficient and suitable for handling up to 1000 test cases.\n\n## Answer 3:\n\n# [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard for efficient typing.\n    Explanation: The keys are laid out in a specific order, and each key corresponds to a unique letter from 'a' to 'z'. This layout helps in minimizing the time required to type a word by reducing the movement of the hand between keys.\n\n# [phrase showing quantity relationship]\n    'consecutively': Indicates that letters in the word should be typed one after another without skipping.\n    Explanation: For example, in the word \"hello\", the letters 'h', 'e', 'l', 'l', and 'o' should be typed in that order without any interruption.\n\n# [degree adverb] \n    'minimal': Refers to the shortest time required to type the word.\n    Explanation: This means finding the most efficient sequence of pressing keys to minimize the total time.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the solution, we need to:\n    1. Read the keyboard layout and the word for each test case.\n    2. Map each letter in the word to its position on the keyboard.\n    3. Calculate the time to type the word by summing the positions of its letters.\n    4. Output the result for each test case.\n\n# [edge case] \n    search([1]) = 1\n    Explanation: If the list contains only one element, it is trivially the largest integer that appears at least as many times as itself.\n    search([]) = -1\n    Explanation: An empty list does not contain any integers, so the function should return -1.\n    search([2, 2, 3, 3, 3]) = 3\n    Explanation: Both 2 and 3 appear more than or equal to their values, but 3 is the largest number.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic can handle cases with a single element or an empty list by returning the appropriate value.\n", "requirement analysis:\nThe requirements involve calculating the minimal time to type a given word on a specified keyboard. The challenge lies in determining the position of each letter on the keyboard and calculating the total time based on the order of typing. The input consists of multiple test cases, and each case requires a distinct output.\nrequirement pool:\n- Implement a function to calculate the time to type a word based on a given keyboard layout.\n- Handle multiple test cases efficiently.\n- Ensure the code is optimized for different keyboard layouts.\n- Allow user customization of keyboard layouts for personalization.\n- Include a feature to compare typing speeds across different keyboard layouts.\nTo solve this problem, we will create a Python function that calculates the minimal time required to type a given word on a specified keyboard. The function will map each letter to its position on the keyboard and then calculate the total time based on the order of typing the letters in the word. We will use a dictionary to store the position of each letter for quick lookup.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard for efficient typing.\n    Explanation: In this context, the keyboard is a sequence of 26 unique lowercase Latin letters arranged in a specific order. Each letter corresponds to a key on the keyboard, and typing a word involves moving the hand between these keys.\n\n# [phrase showing quantity relationship]\n    'as many times': Indicates the frequency with which a letter appears in the word.\n    Explanation: For example, if a letter appears 'n' times in the word, it means that the hand must be positioned over the corresponding key 'n' times.\n\n# [degree adverb] \n    'minimal': Refers to the shortest time required to type the word.\n    Explanation: The goal is to find the minimum time needed to type the word by considering the positions of the keys on the keyboard.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the solution, we need to:\n    1. Read the keyboard layout and the word from the input.\n    2. Create a dictionary to map each letter to its position on the keyboard.\n    3. Calculate the time required to type each letter in the word based on its position on the keyboard.\n    4. Sum the times for all letters to get the total time.\n    5. Output the total time for each test case.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3]) = 3\n    Explanation: In this case, the list contains integers that are all greater than zero. The largest integer that appears at least as many times as itself is 3, as it appears three times.\n    search([2, 2, 3, 3, 3]) = 3\n    Explanation: Similar to the previous edge case, the list contains integers that are all greater than zero. The largest integer that appears at least as many times as itself is 3, as it appears three times.\n    search([3, 3, 2, 4, 4, 4]) = -1\n    Explanation: The list contains integers that are all greater than zero. However, no integer appears at least as many times as itself. Therefore, the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic is sufficient to determine the largest integer that appears at least as many times as itself or return -1 if no such integer exists.\n", "requirement analysis:\nThe requirements involve calculating the minimal time to type a given word on a specified keyboard layout. The challenge lies in determining the position of each letter on the keyboard and calculating the total time based on the order of typing each letter. The input consists of multiple test cases, and each case requires a distinct output.\nrequirement pool:\n- Implement a function to calculate the time to type a word based on a given keyboard layout.\n- Handle multiple test cases efficiently.\n- Ensure the code is optimized for performance to handle large inputs.\n- Provide clear and concise output for each test case.\nWe will implement a Python function that calculates the minimal time to type a given word on a specified keyboard layout. The function will read multiple test cases, each with a unique keyboard layout and a word to type. The function will determine the position of each letter on the keyboard and calculate the total time based on the order of typing each letter. The result will be printed for each test case.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard for efficient typing.\n    Explanation: In this context, the keyboard is a sequence of 26 unique lowercase Latin letters, each corresponding to a key on the keyboard. The order of these letters determines the sequence in which the keys are laid out.\n\n# [phrase showing quantity relationship]\n    'as many times': Indicates the frequency or number of times a letter appears in the word.\n    Explanation: For example, in the requirement, \"Return the largest integer that is more than zero and appears at least as many times as the integer itself,\" the phrase 'appears at least as many times' refers to the frequency of an integer in a list.\n\n# [degree adverb] \n    'largest': Indicates the maximum or greatest value among a set of values.\n    Explanation: In the requirement, \"Return the largest integer that is more than zero and appears at least as many times as the integer itself,\" the degree adverb 'largest' specifies that we need to find the largest integer in the list that meets the given condition.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the function, we need to:\n    1. Read the keyboard layout and the word for each test case.\n    2. Map each letter in the word to its position on the keyboard.\n    3. Calculate the time taken to type each letter based on its position.\n    4. Sum the times for all letters in the word to get the total time for that test case.\n    5. Output the total time for each test case.\n\n# [edge case] \n    search([1]) = -1\n    Explanation: If the list contains only one element and it is not greater than zero, the function should return -1 as there is no integer that meets the condition.\n    search([2, 2, 3, 3, 3]) = 3\n    Explanation: Both 2 and 3 appear more than or equal to their value, but 3 is the largest number.\n    search([3, 3, 2, 4, 4, 4]) = -1\n    Explanation: Number 2 appears one time, number 3 appears two times, number 4 appears three times, none of them appear more than or equal to their value, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We can set the default return value to -1 and then find the largest integer that meets the condition.\n\n## Prompt 3:\n[requirement]\nYou are given a keyboard that consists of 26 keys. The keys are laid out in a sequence in one line in a specified order. These keys are arranged sequentially in the specified order to streamline the typing process for users. Each key corresponds to a unique lowercase Latin letter. You have to type the word s on this keyboard. It also consists only of lowercase Latin letters. To type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it. Moving the hand between the keys takes time which is Input The first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. The next 2t lines contain descriptions of the test cases. The first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard. The second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters. Output Print t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n------- Important Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample Input 5 abcdefghijklmnopqrstuvwxyz hello abcdefghijklmnopqrstuvwxyz i abcdefghijklmnopqrstuvwxyz codeforces qwertyuiopasdfghjklzxcvbnm qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq qwertyuiopasdfghjklzxcvbnm abacaba Output 13 0 68 0 74\n[plan]\nWe will implement a Python function that calculates the minimal time to type a given word on a specified keyboard layout. The function will read multiple test cases, each with a unique keyboard layout and a word to type. The function will determine the position of each letter on the keyboard and calculate the total time based on the order of typing each letter. The result will be printed for each test case.\n\n## Answer 3:\n\n# [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard for efficient typing.\n    Explanation: In this context, the keyboard is a sequence of 26 unique lowercase Latin letters, each corresponding to a key on the keyboard. The order of these letters determines the sequence in which the keys are laid out.\n\n# [phrase showing quantity relationship]\n    'as many times': Indicates the frequency or number of times a letter appears in the word.\n    Explanation: For example, in the requirement, \"Return the largest integer that is more than zero and appears at least as many times as the integer itself,\" the phrase 'appears at least as many times' refers to the frequency of an integer in a list.\n\n# [degree adverb] \n    'largest': Indicates the maximum or greatest value among a set of values.\n    Explanation: In the requirement, \"Return the largest integer that is more than zero and appears at least as many times as the integer itself,\" the degree adverb 'largest' specifies that we need to find the largest integer in the list that meets the given condition.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the function, we need to:\n    1. Read the keyboard layout and the word for each test case.\n    2. Map each letter in the word to its position on the keyboard.\n    3. Calculate the time taken to type each letter based on its position.\n    4. Sum the times for all letters in the word to get the total time for that test case.\n    5. Output the total time for each test case.\n\n# [edge case] \n    search([1]) = -1\n    Explanation: If the list contains only one element and it is not greater than zero, the function should return -1 as there is no integer that meets the condition.\n    search([2, 2, 3, 3, 3]) = 3\n    Explanation: Both 2 and 3 appear more than or equal to their value, but 3 is the largest number.\n    search([3, 3, 2, 4, 4, 4]) = -1\n    Explanation: Number 2 appears one time, number 3 appears two times, number 4 appears three times, none of them appear more than or equal to their value, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We can set the default return value to -1 and then find the largest integer that meets the condition.\n", "requirement analysis:\nThe requirements involve calculating the time it takes to type a given word on a specific keyboard layout. Each letter on the keyboard has a unique position, and the time to type a letter is determined by the distance from the current hand position to the target key. The initial position of the hand does not affect the calculation if it's aligned with the start of the word, but if not, the absolute difference in positions must be calculated for each move.\nrequirement pool:\n- Implement a function to calculate the time to type a word based on the keyboard layout.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the code for readability and performance.\n- Allow the user to input the keyboard layout and the word to be typed.\n- Output the minimal time required to type the word for each test case.\nTo solve this problem, we will use Python due to its simplicity and efficiency. The main challenge is to calculate the time required to type a word based on the given keyboard layout. We will create a function that takes the keyboard layout and the word as input and returns the total time required to type the word. The time for each letter will be calculated based on the position of the letter on the keyboard relative to the current hand position. We will use a dictionary to map each letter to its position on the keyboard for quick lookup.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: In this problem, the keyboard layout is given as a string of 26 characters, each representing a key. These keys are arranged in a specific order, and each key corresponds to a unique letter from 'a' to 'z'.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates that the value of a quantity is greater than a specified amount.\n    'at least as many times': Indicates that the frequency of a value is at least as much as the value itself.\n\n# [degree adverb] \n    'largest': Indicates the maximum value among a set of values.\n\n# [code logic]\n    To solve this problem, we need to:\n    1. Create a dictionary to map each letter to its position on the keyboard.\n    2. Iterate through the word and calculate the time required to type each letter based on the position of the current letter relative to the previous letter.\n    3. Sum the times for all letters to get the total time.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the list is [1, 2, 2, 3, 3, 3, 4, 4, 4]. The number 3 appears three times, which is more than its value (3). Therefore, the function should return 3.\n\n    search([2, 2, 3, 3, 3]) = 3\n    Explanation: The list is [2, 2, 3, 3, 3]. The number 3 appears three times, which is more than its value (3). Therefore, the function should return 3.\n\n    search([3, 3, 2, 4, 4, 4]) = -1\n    Explanation: The list is [3, 3, 2, 4, 4, 4]. The number 2 appears two times, which is less than its value (2). The number 3 appears two times, which is also less than its value (3). The number 4 appears three times, which is more than its value (4). Since no number appears at least as many times as its value, the function should return -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic is sufficient to determine if a number appears at least as many times as its value and to return the correct output.\n", "requirement analysis:\nThe requirements involve calculating the time required to type a given word on a specific keyboard layout. Each letter on the keyboard has a specific position, and the time to type a letter is determined by the distance from the current hand position to the target letter. The initial position of the hand does not affect the calculation if it's aligned with the start of the word, but if not, the absolute difference in positions must be considered for each move.\nrequirement pool:\n- Implement a function to calculate the time to type a word based on the keyboard layout.\n- Ensure the program can handle multiple test cases efficiently.\n- Allow users to input their initial hand position if it's not aligned with the start of the word.\n- Provide a user-friendly interface to display the typing time for each test case.\n- Optimize the algorithm to handle large inputs and edge cases efficiently.\nWe will use Python for this task as it provides a simple and efficient way to handle the requirements. The main challenge is to calculate the time required to type a word based on the keyboard layout, considering the positions of the keys and the initial hand position if not aligned with the start of the word.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on the keyboard, each key corresponding to a unique lowercase Latin letter.\n    Explanation: The keyboard layout is crucial for determining the time required to type a word, as the time to move the hand between keys depends on their positions.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates that the hand must move to a key corresponding to a letter that appears later in the word.\n    Explanation: For example, if the word contains both 'a' and 'b', and the keyboard has 'a' before 'b', the hand must move from 'a' to 'b' to type 'b'.\n\n# [degree adverb] \n    'minimal': Refers to the goal of finding the shortest time to type the word, considering the optimal hand position.\n    Explanation: The goal is to minimize the total time taken to type the word by strategically positioning the hand at the start and minimizing movements between keys.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the solution, we need to:\n    1. Map each letter to its position on the keyboard.\n    2. Calculate the initial position of the hand based on the first letter of the word.\n    3. Iterate through the word, calculating the time to move the hand from the current position to the next letter.\n    4. Sum the times for all letters to get the total time.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the largest integer that appears at least as many times as itself is 3, as it appears 3 times, which is equal to its value.\n    search([5, 5, 4, 4, 4]) = -1\n    Explanation: No integer appears more than once, so the function returns -1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the word is empty.\n        if not lst:\n            return -1\n\n    This ensures that the function returns -1 for an empty list, as there are no integers to evaluate.\n", "requirement analysis:\nThe primary requirement is to calculate the time required to type a given word on a specific keyboard. Each test case involves a keyboard layout and a word, and the goal is to determine the minimum time needed to type the word based on the positions of the letters on the keyboard. The solution should be efficient and handle up to 1000 test cases.\nrequirement pool:\n- Implement a function to calculate the time to type a word based on the keyboard layout.\n- Ensure the solution can handle multiple test cases efficiently.\n- Optimize the code for performance and readability.\n- Include error handling for invalid inputs.\n- Provide clear documentation and comments for the code.\nTo solve this problem, we will use Python due to its simplicity and efficiency. The main challenge is to calculate the time required to type a word based on the positions of the letters on the keyboard. We will create a function that takes the keyboard layout and the word as input and returns the minimum time required to type the word. We will also handle multiple test cases efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: In this problem, the keyboard layout is given as a string of 26 characters, each representing a key. The goal is to determine the time required to type a given word on this keyboard.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates that the value of a quantity is greater than another value.\n    Explanation: In this context, 'more than' is used to compare the number of times a letter appears in the word with the letter's position on the keyboard.\n\n# [degree adverb] \n    'shortest': Indicates the minimum time required to type the word.\n    Explanation: The degree adverb 'shortest' is used to find the minimal time needed to type the word on the given keyboard.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to:\n    1. Create a dictionary to map each letter to its position on the keyboard.\n    2. Iterate through the word and calculate the time required to type each letter based on its position and the position of the previous letter.\n    3. Sum the times for all letters to get the total time.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: Both 2 and 3 appears greater than or equal to its value, but 3 is the largest number\n    search([3,3,2,4,4,4]) = -1\n    explanation: number 2 appears one time, number 3 appears two times,number 4 appears three times, none of them appears greater than or equal to its value, so the function return -1\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We could set the original return answer to -1 and then find the largest interger that meets the need. \n\n## Prompt 3:\n[requirement]\nYou are given a keyboard with 26 keys arranged in a sequence, each corresponding to a unique lowercase Latin letter. You need to type the word s on this keyboard, which consists only of lowercase Latin letters. To type each letter, you must position your hand exactly over the corresponding key and press it. Moving the hand between keys takes time equal to the absolute value of the difference between the positions of these keys. The initial hand position does not affect the calculation if it is aligned with the start of the word, but if not, careful handling is required to ensure accurate time computation. Determine how long it will take to print the word\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases. The first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard. The second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n-------\n[plan]\nTo solve this problem, we will use Python due to its simplicity and efficiency. The main challenge is to calculate the time required to type a word based on the positions of the letters on the keyboard. We will create a function that takes the keyboard layout and the word as input and returns the minimum time required to type the word. We will also handle multiple test cases efficiently.\n\n## Answer 3:\n\n# [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: In this problem, the keyboard layout is given as a string of 26 characters, each representing a key. The goal is to determine the time required to type a given word on this keyboard.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates that the value of a quantity is greater than another value.\n    Explanation: In this context, 'more than' is used to compare the number of times a letter appears in the word with the letter's position on the keyboard.\n\n# [degree adverb] \n    'shortest': Indicates the minimum time required to type the word.\n    Explanation: The degree adverb 'shortest' is used to find the minimal time needed to type the word on the given keyboard.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to:\n    1. Create a dictionary to map each letter to its position on the keyboard.\n    2. Iterate through the word and calculate the time required to type each letter based on its position and the position of the previous letter.\n    3. Sum the times for all letters to get the total time.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: Both 2 and 3 appears greater than or equal to its value, but 3 is the largest number\n    search([3,3,2,4,4,4]) = -1\n    explanation: number 2 appears one time, number 3 appears two times,number 4 appears three times, none of them appears greater than or equal to its value, so the function return -1\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We could set the original return answer to -1 and then find the largest interger that meets the need. \n\n## Prompt 3:\n[requirement]\nYou are given a keyboard with 26 keys arranged in a sequence, each corresponding to a unique lowercase Latin letter. You need to type the word s on this keyboard, which consists only of lowercase Latin letters. To type each letter, you must position your hand exactly over the corresponding key and press it. Moving the hand between keys takes time equal to the absolute value of the difference between the positions of these keys. The initial hand position does not affect the calculation if it is aligned with the start of the word, but if not, careful handling is required to ensure accurate time computation. Determine how long it will take to print the word\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases. The first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard. The second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n-------\n[plan]\nTo solve this problem, we will use Python due to its simplicity and efficiency. The main challenge is to calculate the time required to type a word based on the positions of the letters on the keyboard. We will create a function that takes the keyboard layout and the word as input and returns the minimum time required to type the word. We will also handle multiple test cases efficiently.\n\n## Answer 3:\n\n# [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: In this problem, the keyboard layout is given as a string of 26 characters, each representing a key. The goal is to determine the time required to type a given word on this keyboard.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates that the value of a quantity is greater than another value.\n    Explanation: In this context, 'more than' is used to compare the number of times a letter appears in the word with the letter's position on the keyboard.\n\n# [degree adverb] \n    'shortest': Indicates the minimum time required to type the word.\n    Explanation: The degree adverb 'shortest' is used to find the minimal time needed to type the word on the given keyboard.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to:\n    1. Create a dictionary to map each letter to its position on the keyboard.\n    2. Iterate through the word and calculate the time required to type each letter based on its position and the position of the previous letter.\n    3. Sum the times for all letters to get the total time.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: Both 2 and 3 appears greater than or equal to its value, but 3 is the largest number\n    search([3,3,2,4,4,4]) = -1\n    explanation: number 2 appears one time, number 3 appears two times,number 4 appears three times, none of them appears greater than or equal to its value, so the function return -1\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We could set the original return answer to -1 and then find the largest interger that meets the need. \n\n## Prompt 3:\n[requirement]\nYou are given a keyboard with 26 keys arranged in a sequence, each corresponding to a unique lowercase Latin letter. You need to type the word s on this keyboard, which consists only of lowercase Latin letters. To type each letter, you must position your hand exactly over the corresponding key and press it. Moving the hand between keys takes time equal to the absolute value of the difference between the positions of these keys. The initial hand position does not affect the calculation if it is aligned with the start of the word, but if not, careful handling is required to ensure accurate time computation. Determine how long it will take to print the word\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases. The first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard. The second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n-------\n[plan]\nTo solve this problem, we will use Python due to its simplicity and efficiency. The main challenge is to calculate the time required to type a word based on the positions of the letters on the keyboard. We will create a function that takes the keyboard layout and the word as input and returns the minimum time required to type the word. We will also handle multiple test cases efficiently.\n", "requirement analysis:\nThe requirements involve calculating the time it takes to type a given word on a specified keyboard. The keyboard layout is provided, and the task is to determine the time based on the positions of the letters. The initial hand position affects the calculation, and the solution should handle multiple test cases efficiently.\nrequirement pool:\n- Implement a function to calculate typing time based on keyboard layout and word.\n- Handle multiple test cases efficiently.\n- Ensure the initial hand position does not affect the calculation.\n- Optimize the code for different keyboard layouts.\nTo solve this problem, we will create a Python function that calculates the time required to type a given word on a specified keyboard. The function will first map each key to its position on the keyboard, then calculate the time based on the positions of the letters in the word. We will use a simple and efficient approach to handle the input and output, ensuring that the initial hand position does not affect the calculation.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': Each key corresponds to a unique lowercase Latin letter, and the keys are laid out in a sequence in one line.\n    'typing time calculation': The time to type a letter is the absolute value of the difference between the positions of the keys.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function will follow these steps:\n    1. Read the keyboard layout and the word to be typed.\n    2. Map each letter to its position on the keyboard.\n    3. Calculate the time to type each letter based on its position and the position of the previous letter.\n    4. Sum the times for all letters to get the total typing time.\n    5. Output the total typing time for each test case.\n\n# [edge case] \n    Edge case 1:\n    Input:\n    keyboard = \"abcdefghijklmnopqrstuvwxyz\"\n    word = \"hello\"\n    Explanation: The positions of the letters in the word on the keyboard are 8, 5, 12, 12, and 15. The time to type the word is |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13.\n    Expected output: 13\n\n    Edge case 2:\n    Input:\n    keyboard = \"qwertyuiopasdfghjklzxcvbnm\"\n    word = \"world\"\n    Explanation: The positions of the letters in the word on the keyboard are 10, 20, 18, 17, and 13. The time to type the word is |20 - 10| + |18 - 20| + |17 - 18| + |13 - 17| = 18.\n    Expected output: 18\n\n# [extra code for edge case]\n    No extra code is needed for handling the edge cases as the logic provided in the plan already accounts for the initial positioning of the hand.\n"], "scores": [], "pass_results": [false, true, false, true, true, false, false, false, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 836, "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "mutate_method": "add_1_sentence_at_end", "parent_index": 554}
