{"name": "1607_A. Linear Keyboard", "description": "You are given a keyboard that consists of 26 keys. The keys are arranged sequentially in one row in a certain order. Each key corresponds to a unique lowercase Latin letter.\n\nYou have to type the word s on this keyboard. It also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nDetermine how long it will take to print the word s.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "tags": ["implementation", "strings"], "difficulty": 7, "id": 1607, "sample_io": [{"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}], "test_list": [{"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkjanscjanjkcanc\n", "output": ["164\n"]}, {"input": "1\nabcdefghilkjmnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjkcanc\n", "output": ["164\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjlcanc\n", "output": ["166\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nasdeb\n", "output": ["37\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkcanscjanjkcanj\n", "output": ["157\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n70\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nbbdes\n", "output": ["17\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n6\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsaeeb\n", "output": ["25\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkcanscjanjlcanj\n", "output": ["159\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabaacba\n", "output": ["13\n0\n70\n0\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n68\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n6\n74\n"]}, {"input": "1\nabcdefjhilkglnopqrstuvwxyz\nabdet\n", "output": ["19\n"]}, {"input": "1\naycdefbhilkjmnopqrstuvwxgz\nsfdba\n", "output": ["24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n70\n0\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n52\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkianscjanjclanb\n", "output": ["181\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsadfb\n", "output": ["27\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n0\n56\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n50\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n68\n6\n52\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\nbseeb\n", "output": ["34\n"]}, {"input": "1\nzywwsutvrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["171\n"]}, {"input": "1\nzgxovudsrqpcnljklihyfetwba\nsedba\n", "output": ["48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["13\n0\n50\n0\n35\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\nasdea\n", "output": ["38\n"]}, {"input": "1\nzywwsutvrqponmlcjihgfedkba\njnacljnajcsnackncasca\n", "output": ["173\n"]}, {"input": "1\nzgxwdutsrqponmjklihbfeucya\nsfdba\n", "output": ["50\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodffcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n6\n56\n"]}, {"input": "1\nzyxwvvtsrqponmlkjihgfedcba\nnnacljnajcrcajkncasca\n", "output": ["153\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nehllo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["10\n0\n50\n0\n35\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\naasccnkianscjanjlcanb\n", "output": ["163\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbsdfa\n", "output": ["39\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n66\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nehllo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ndodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["10\n0\n49\n0\n35\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\naatccnkianscjanjlcanb\n", "output": ["165\n"]}, {"input": "1\ndfxwvutsrqponmlkjihgfyzcba\naatccnkiansljanjccanb\n", "output": ["147\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponclljihgfedmba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabcabaa\n", "output": ["14\n0\n54\n6\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\naacdefghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n80\n0\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqpqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n36\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nscerofecod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n69\n18\n74\n"]}, {"input": "1\nabcdefyhilkjmponsrwtuvqxhz\nbedsa\n", "output": ["33\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngdlln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqpqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n36\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponclljihgfedmba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwfrtyuhopasdfghjklzxcvbnm\nabcabab\n", "output": ["14\n0\n54\n6\n65\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n65\n18\n74\n"]}, {"input": "1\nabcdehgsilkilnopqrftuvwxyz\nteaae\n", "output": ["23\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabchefxgijklmnupqrstovwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["16\n0\n65\n24\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\naacddfghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzxcvbnj\nabacaba\n", "output": ["15\n0\n80\n0\n74\n"]}, {"input": "1\naccdehgsilkilnopqqftuvwxxz\nseaae\n", "output": ["11\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponmlkjihgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n80\n6\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihggedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghzjmlmnopqrstuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\naaacaba\n", "output": ["16\n0\n65\n24\n48\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n80\n15\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihggedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghzjmlmnopqrstuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nrqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\naaacaba\n", "output": ["16\n0\n65\n27\n48\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nzqxwvutsryponmlkiihgfedcba\ncoeeforcse\nqwertyujnpasdfghjklzxcvbnn\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabcaaba\n", "output": ["15\n0\n80\n15\n52\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjklzxcvbnn\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabcaaba\n", "output": ["15\n0\n82\n15\n52\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nhdllo\nzyxvvutsrqponilkjmhgfddcaa\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["15\n0\n82\n15\n26\n"]}, {"input": "5\nabcdefghijilmnopqrstuvwxyz\nhdllo\naacddfghmjklinopqrstuvvxyz\nj\nabcdefghiiklmnopvrstuywxqz\ncoeeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["15\n0\n80\n15\n26\n"]}, {"input": "5\nabcdefghijilmnopqrstuvwxyz\nhdllo\naacddfghmjklinopqrstuvvxyz\nj\nabcdefghiiklmnopvrstuywxqz\ncoeeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacaa\n", "output": ["15\n0\n80\n15\n24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhlelo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["21\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacjkjanscnanjlcanb\n", "output": ["169\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n3\n74\n"]}, {"input": "1\nabcdefghijklmonpqrstuvwxyz\ncnackjnajcsnajkncasca\n", "output": ["170\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\ncoacljnajcsnajkncasca\n", "output": ["168\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbaacaba\n", "output": ["12\n0\n68\n18\n61\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsaeea\n", "output": ["26\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwautsrqponmlkjihgfedcbv\nacsacnkcanscjanjlcanj\n", "output": ["200\n"]}, {"input": "1\nnbcdefyhilkjmaopqrstuvwxgz\nsfdba\n", "output": ["29\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforbes\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n70\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwerbyuiopasdfghjklzxcvtnm\nabacaba\n", "output": ["12\n0\n68\n18\n46\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n18\n74\n"]}, {"input": "1\nzywwvutsrqponmlkjihgfedcba\njnacljnajcsnackncatca\n", "output": ["161\n"]}, {"input": "5\nzyxwvutsrqponmakjihgfedcbl\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["19\n0\n68\n18\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["12\n0\n68\n6\n52\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\ncsdea\n", "output": ["36\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nkelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["18\n0\n68\n0\n74\n"]}, {"input": "1\nzgxwuuterqponmjklihbfsdcya\nsfdba\n", "output": ["12\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\nacsacnkianscjanjldanb\n", "output": ["195\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\nasdae\n", "output": ["40\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyuiopasdfghjklzxcvbnm\nabbcaba\n", "output": ["11\n0\n68\n18\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nnlleh\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnzpqrstuvwxyo\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n106\n18\n74\n"]}, {"input": "1\nzyxwjvtsrqponmlkvihgfedcba\nnnacljnajcrcajkncasca\n", "output": ["211\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbscfa\n", "output": ["41\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n66\n18\n74\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlnlhe\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\neholl\nabcdefghijklmnopqrstuvwyyz\ni\nabcdefohijllmngpqrstuvwxyz\ndodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["13\n0\n49\n0\n35\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljihgfedcba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabcabaa\n", "output": ["14\n0\n68\n24\n52\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnlleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nscerofedod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n67\n18\n74\n"]}, {"input": "1\ndfxwvutsrqponmlkjihgfyzcba\naatccnkiansljanjccana\n", "output": ["148\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nbbacaba\n", "output": ["11\n0\n68\n18\n61\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nseeqofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n63\n18\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolleh\naacdefghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeefoqcse\nqwertyujnpasdfghjklzxcvbnn\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n78\n0\n74\n"]}, {"input": "1\nabcdehgsilkilnopqrftuvwxyz\naeate\n", "output": ["42\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmlfh\nabchefxgijklmnupqrstovwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["10\n0\n65\n18\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmelh\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["20\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhem\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\nabacaba\n", "output": ["17\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdsfghzjmlmnopqretuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\nabacaba\n", "output": ["16\n0\n53\n24\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcsf\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n79\n6\n74\n"]}, {"input": "1\nzxxwvutfqqponlekljshhiccca\nteaae\n", "output": ["30\n"]}, {"input": "1\nztxwvuxfqqponlikcjshieccma\neaaet\n", "output": ["28\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nhdlln\naacddfghmjklinopqrstuvvxyz\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["14\n0\n82\n15\n26\n"]}, {"input": "1\narcdeffhilkjmnopqbstuvwxyz\nabdes\n", "output": ["46\n"]}, {"input": "1\nzyxwvutsrqponclkjihgeedmba\nacsacnkjanscjanjlcanc\n", "output": ["144\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n9\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nccacljnajcsnajknoasca\n", "output": ["146\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnnjcacaska\n", "output": ["145\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbaacaba\n", "output": ["12\n0\n68\n24\n61\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabababa\n", "output": ["14\n0\n68\n0\n78\n"]}, {"input": "1\nzyxwautsrqponmlkjihgfedcbv\nacsacnkcanrcjanjlcanj\n", "output": ["198\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhdllo\nabcdezghijklmnopqrstuvwxyf\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["15\n0\n68\n0\n48\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nabdes\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxzz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\nbeesa\n", "output": ["35\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\ncnackjnajcsnajkncasca\n", "output": ["164\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nabdfs\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabcdefyhilkjlnopqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nsedba\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nasdeb\n", "output": ["37\n"]}, {"input": "5\nabcdekghijflmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\nasedb\n", "output": ["35\n"]}, {"input": "1\nabcdefyhilkhmnopqrstuvwxjz\nbeesa\n", "output": ["35\n"]}, {"input": "1\nabcdefjhilkglnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nsfdba\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabodefyhilkjlncpqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnaikncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nsedaa\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nbedsa\n", "output": ["37\n"]}, {"input": "5\nabcdekghijflmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsadeb\n", "output": ["25\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsrqpnomhklihyfedcba\nasedb\n", "output": ["35\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\nbeesa\n", "output": ["35\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["159\n"]}, {"input": "1\nabcdefghijklmnopqrstvvwxyz\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabwdefyhilkjlncpqrstuvoxgz\nsedba\n", "output": ["18\n"]}, {"input": "1\ndyxwvutsrqponmlkjihgfezcba\nbnacljnajcsnaikncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\naades\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n6\n74\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nbnacljnajcnnajkscasca\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\naedsb\n", "output": ["37\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabdet\n", "output": ["19\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzywwvutsrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["159\n"]}, {"input": "1\nzgxwvutsrqponmjklihbfedcya\nsfdba\n", "output": ["24\n"]}, {"input": "1\nabcdefghijklmnopqrstvvwxyz\ncnacljnajcrnajkncasca\n", "output": ["164\n"]}, {"input": "1\nzgxovutsrqpcnljklihyfedwba\nsedba\n", "output": ["18\n"]}, {"input": "1\ndyxwvutsrqponmlkjihgfezcba\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\naades\n", "output": ["18\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvvxyz\nacsacnkianscjanjclanb\n", "output": ["181\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nbsdea\n", "output": ["37\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabeet\n", "output": ["19\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzgxwuutsrqponmjklihbfedcya\nsfdba\n", "output": ["24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodffcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n0\n56\n"]}, {"input": "1\nzyxwvvtsrqponmlkjihgfedcba\ncnacljnajcrnajkncasca\n", "output": ["164\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n68\n6\n52\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbsdea\n", "output": ["37\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nnlleh\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsroponmhklihyfedcba\nbseeb\n", "output": ["34\n"]}, {"input": "1\nzyxwvutsrqponljklihgfedcba\nabeet\n", "output": ["19\n"]}], "task_id": "codecontest/98", "prompt": "You are provided with a keyboard containing 26 keys. The keys are set up in a single row, and they follow a specific sequence. Each key is linked to a distinct lowercase Latin character.\n\nYou have to type the word s on this keyboard. This word also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one. You must position your hand exactly over the corresponding key for each letter, and you should press it firmly.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nCalculate the time needed to type the word s. You should clearly mention assumptions and constraints in the solution. Also, consider edge cases where the word might contain repeated or adjacent characters.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "repair_prompt": ["You are provided with a keyboard containing 26 keys. The keys are set up in a single row, and they follow a specific sequence. Each key is linked to a distinct lowercase Latin character.\n\nYou have to type the word s on this keyboard. This word also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one. You must position your hand exactly over the corresponding key for each letter, and you should press it firmly.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nCalculate the time needed to type the word s. You should clearly mention assumptions and constraints in the solution. Also, consider edge cases where the word might contain repeated or adjacent characters.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\nWrite a main() function and use input() function to read input from stdin", " You are given a keyboard with 26 keys arranged in a single row, each key corresponding to a distinct lowercase Latin character. You need to type the word s on this keyboard. The word s consists only of lowercase Latin letters. To type the word, you must position your hand exactly over the corresponding key for each letter, and press it firmly. Moving the hand between the keys takes time, which is equal to the absolute value of the difference between the positions of these keys. No time is spent on pressing the keys or placing the hand over the first letter of the word.\n\nCalculate the time needed to type the word s\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\nWrite a main() function and use input() function to read input from stdin", " You are provided with a keyboard containing 26 keys. The keys are set up in a single row, and they follow a specific sequence. Each key is linked to a distinct lowercase Latin character.\n\nYou have to type the word s on this keyboard. This word also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one. You must position your hand exactly over the corresponding key for each letter, and you should press it firmly.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the time required to type a given word on a specific keyboard layout.\n\n    Args:\n        keyboard (str): A string of 26 characters representing the keyboard layout.\n        word (str): The word to be typed.\n\n    Returns:\n        int: The total time required to type the word.\n    \"\"\"\n    # Create a dictionary to map each character to its position on the keyboard\n    keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n\n    # Initialize the total time to 0\n    total_time = 0\n\n    # Calculate the time required to type the word\n    for i in range(1, len(word)):\n        current_pos = keyboard_positions[word[i]]\n        prev_pos = keyboard_positions[word[i - 1]]\n        total_time += abs(current_pos - prev_pos)\n\n    return total_time\n\n# Read from stdin\nimport sys\n\n# Read the number of test cases\nt = int(sys.stdin.readline().strip())\n\n# Process each test case\nfor _ in range(t):\n    keyboard = sys.stdin.readline().strip()\n    word = sys.stdin.readline().strip()\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    # Create a dictionary to map each character to its position on the keyboard\n    keyboard_positions = {}\n    for index, char in enumerate(keyboard):\n        keyboard_positions[char] = index\n    \n    # Initialize the total time to 0\n    total_time = 0\n    \n    # Calculate the time for each transition between consecutive characters\n    for i in range(1, len(word)):\n        total_time += abs(keyboard_positions[word[i]] - keyboard_positions[word[i - 1]])\n    \n    return total_time\n\n# Read the number of test cases\nimport sys\nt = int(sys.stdin.readline().strip())\n\n# Process each test case\nfor _ in range(t):\n    # Read the keyboard layout\n    keyboard = sys.stdin.readline().strip()\n    # Read the word to be typed\n    word = sys.stdin.readline().strip()\n    # Calculate the typing time\n    result = calculate_typing_time(keyboard, word)\n    # Print the result\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the time required to type a given word on a specific keyboard layout.\n\n    Args:\n        keyboard (str): A string representing the keyboard layout where each character is a unique lowercase Latin character.\n        word (str): The word to be typed, consisting of lowercase Latin letters.\n\n    Returns:\n        int: The total time required to type the word.\n    \"\"\"\n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n\n    # Initialize the total typing time\n    total_time = 0\n\n    # Iterate through the word to calculate the time required to type it\n    for i in range(1, len(word)):\n        # Get the positions of the current and previous letters\n        current_pos = keyboard_positions[word[i]]\n        previous_pos = keyboard_positions[word[i - 1]]\n\n        # Calculate the time to move the hand between the positions\n        time_to_move = abs(current_pos - previous_pos)\n\n        # Add the time to the total typing time\n        total_time += time_to_move\n\n    return total_time\n\n# Provide the Interface\nt = int(input())\nfor _ in range(t):\n    keyboard = input()\n    word = input()\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    # Create a dictionary to map each character to its position on the keyboard\n    keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n    \n    # Initialize the total time to 0\n    total_time = 0\n    \n    # Iterate through the word, calculating the time to type each letter based on its position and the position of the previous letter\n    for i in range(1, len(word)):\n        prev_char = word[i - 1]\n        curr_char = word[i]\n        prev_pos = keyboard_positions[prev_char]\n        curr_pos = keyboard_positions[curr_char]\n        # Calculate the time to move from prev_char to curr_char\n        time_to_move = abs(prev_pos - curr_pos)\n        total_time += time_to_move\n    \n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# For each test case, read the keyboard layout and the word\nfor _ in range(t):\n    keyboard = input()\n    word = input()\n    # Call the calculate_typing_time function with the keyboard and word\n    result = calculate_typing_time(keyboard, word)\n    # Print the total time for the current test case\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    # Create a dictionary to map each key to its position on the keyboard\n    key_positions = {}\n    for index, key in enumerate(keyboard):\n        key_positions[key] = index\n    \n    # Initialize the total time to 0\n    total_time = 0\n    \n    # Calculate the time needed to type the word\n    for i in range(1, len(word)):\n        current_key = word[i]\n        previous_key = word[i - 1]\n        # Calculate the absolute difference in positions between the current and previous keys\n        time_to_move = abs(key_positions[current_key] - key_positions[previous_key])\n        # Add the time to the total time\n        total_time += time_to_move\n    \n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    keyboard = input()\n    word = input()\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    # Create a dictionary to map each key to its position on the keyboard\n    key_positions = {}\n    for index, key in enumerate(keyboard):\n        key_positions[key] = index\n    \n    # Initialize the total time to 0\n    total_time = 0\n    \n    # Calculate the time needed to type the word\n    for i in range(1, len(word)):\n        current_key = word[i]\n        previous_key = word[i - 1]\n        current_position = key_positions[current_key]\n        previous_position = key_positions[previous_key]\n        # Add the absolute difference between the positions of the current and previous keys\n        total_time += abs(current_position - previous_position)\n    \n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    # Read the keyboard layout and the word to type\n    keyboard = input()\n    word = input()\n    # Calculate and print the typing time for the current test case\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    # Create a dictionary to map each character to its position on the keyboard\n    key_positions = {}\n    for index, char in enumerate(keyboard):\n        key_positions[char] = index\n    \n    # Initialize the total time to 0\n    total_time = 0\n    \n    # Calculate the time to type the word\n    for i in range(1, len(word)):\n        # Get the positions of the current and previous characters\n        current_pos = key_positions[word[i]]\n        previous_pos = key_positions[word[i - 1]]\n        \n        # Calculate the time to move the hand between the keys\n        time_to_move = abs(current_pos - previous_pos)\n        \n        # Add the time to the total time\n        total_time += time_to_move\n    \n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    keyboard = input()\n    word = input()\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    # Create a dictionary to map each key to its position on the keyboard\n    key_positions = {char: idx for idx, char in enumerate(keyboard)}\n    \n    # Initialize the total time to 0\n    total_time = 0\n    \n    # Iterate through the word to calculate the typing time\n    for i in range(1, len(word)):\n        # Get the positions of the current and previous keys\n        current_pos = key_positions[word[i]]\n        previous_pos = key_positions[word[i - 1]]\n        \n        # Calculate the time to move the hand between the keys\n        time_to_move = abs(current_pos - previous_pos)\n        \n        # Add the time to the total time\n        total_time += time_to_move\n    \n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    # Read the keyboard layout and the word\n    keyboard = input()\n    word = input()\n    \n    # Calculate the typing time for the word on the given keyboard\n    result = calculate_typing_time(keyboard, word)\n    \n    # Print the result\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    # Create a dictionary to map each character to its position on the keyboard\n    key_positions = {}\n    for index, char in enumerate(keyboard):\n        key_positions[char] = index\n    \n    # Initialize the total typing time\n    total_time = 0\n    \n    # Iterate through the word to calculate the typing time\n    for i in range(1, len(word)):\n        # Get the positions of the current and previous characters\n        current_pos = key_positions[word[i]]\n        previous_pos = key_positions[word[i - 1]]\n        \n        # Calculate the time to move the hand between the keys\n        time_to_move = abs(current_pos - previous_pos)\n        \n        # Add the time to the total typing time\n        total_time += time_to_move\n    \n    return total_time\n\n# Provide the Interface\nt = int(input())\nfor _ in range(t):\n    keyboard = input()\n    word = input()\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the time required to type a given word based on a provided keyboard layout.\n\n    Args:\n        keyboard (str): A string representing the keyboard layout where each character is a unique lowercase Latin character.\n        word (str): The word to be typed.\n\n    Returns:\n        int: The total time required to type the word.\n    \"\"\"\n    # Create a dictionary to map each character to its position on the keyboard\n    keyboard_positions = {}\n    for index, char in enumerate(keyboard):\n        keyboard_positions[char] = index + 1  # +1 to convert to 1-based index\n\n    # Initialize the total time to 0\n    total_time = 0\n\n    # Calculate the time to type the word\n    for i in range(len(word) - 1):\n        current_char = word[i]\n        next_char = word[i + 1]\n        current_pos = keyboard_positions[current_char]\n        next_pos = keyboard_positions[next_char]\n        total_time += abs(current_pos - next_pos)\n\n    return total_time\n\n# Read the number of test cases\nn = int(input())\n\n# Process each test case\nfor _ in range(n):\n    keyboard = input().strip()\n    word = input().strip()\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n"], "plans": ["requirement analysis:\nThe requirements involve calculating the time required to type a given word on a specific keyboard layout. The keyboard layout is provided as a string of 26 lowercase Latin letters, and the word to be typed is also provided, with constraints on its length. The challenge is to determine the optimal path for typing the word, considering the positions of the letters on the keyboard and the time taken to move between keys.\nrequirement pool:\n- Implement a function to calculate the time required to type a word based on keyboard layout.\n- Ensure the program can handle words of varying lengths and keyboard layouts.\n- Optimize the algorithm to minimize the typing time.\n- Include user input for both keyboard layout and word to type.\n- Provide a clear and concise output displaying the calculated typing time.\nTo solve this problem, we will create a Python function that calculates the time required to type a given word on a specific keyboard layout. The function will map each letter to its position on the keyboard and calculate the time based on the positions of consecutive letters. We will use a dictionary to store the positions of the letters for quick lookup.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key is associated with a distinct character.\n    Explanation: In this problem, the keyboard is represented as a string of 26 characters, each character corresponding to a specific key on the keyboard. The goal is to calculate the time required to type a given word on this keyboard, considering the time taken to move the hand between keys.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates that a value must be greater than a specified amount.\n    'at least as many times': Indicates that a value must appear at least a certain number of times.\n\n# [degree adverb] \n    'largest': Indicates that the maximum value should be found among a set of values.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the solution, we will follow these steps:\n    1. Read the keyboard layout and the word to be typed.\n    2. Create a dictionary to map each character to its position on the keyboard.\n    3. Calculate the time required to type the word by summing the absolute differences in positions for consecutive characters.\n    4. Return the calculated time for each test case.\n\n# [edge case] \n    Edge case 1: Typing a word with all identical characters.\n    search(['a', 'a', 'a']) = 'a'\n    Explanation: Since all characters are the same, the time taken will be zero because there is no movement between keys.\n\n    Edge case 2: Typing a word with no repeated characters.\n    search(['a', 'b', 'c', 'd']) = 3\n    Explanation: The word 'abcd' will require movement between each pair of consecutive characters, summing to 3 units of time.\n\n    Edge case 3: Typing a word with repeated characters.\n    search(['a', 'b', 'a', 'c', 'd', 'c']) = 5\n    Explanation: The word 'abacdc' will require movement between each pair of consecutive characters, summing to 5 units of time.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(set(s)) == 1:\n            return 0\n        (other code)\n", "requirement analysis:\nThe requirements involve calculating the time required to type a given word on a specific keyboard layout. The keyboard layout is provided as a string of 26 lowercase Latin letters, each representing a key. The word to be typed is also provided, and the task is to calculate the time based on the positions of the letters in the keyboard. The challenge lies in accurately mapping each letter's position and calculating the time for each transition between letters.\nrequirement pool:\n- Implement a function to calculate the time required to type a word based on a given keyboard layout.\n- Ensure the program can handle multiple test cases efficiently.\n- Develop a method to handle edge cases, such as repeated or adjacent characters in the word.\n- Include user input for both the keyboard layout and the words to be typed.\n- Provide clear and concise output for each test case.\nTo solve this problem, we will create a Python function that calculates the time required to type a given word on a specific keyboard layout. The function will first map each letter to its position on the keyboard, then calculate the time based on the positions of the letters in the word. We will assume that the keyboard layout is provided as a string of 26 lowercase Latin letters, and the word to be typed is also provided as a string of lowercase Latin letters. The function will handle edge cases, such as repeated or adjacent characters in the word, by calculating the time for each transition between letters.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': Each key on the keyboard is linked to a distinct lowercase Latin character.\n    'word typing': The process of typing a word involves moving the hand between keys and pressing them.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the solution, we will follow these steps:\n    1. Read the keyboard layout and the word to be typed.\n    2. Map each character to its position on the keyboard.\n    3. Calculate the time required to type the word by summing the absolute differences in positions for consecutive characters.\n\n# [edge case] \n    edge_case1 = \"aa\"\n    expected_output = 0\n    Explanation: Since the word contains repeated characters, no time is spent moving the hand between them.\n\n    edge_case2 = \"ab\"\n    expected_output = 1\n    Explanation: The word consists of two different characters, so the time is equal to the absolute difference in their positions on the keyboard.\n\n    edge_case3 = \"abc\"\n    expected_output = 2\n    Explanation: The word has three characters with increasing positions, so the time is the sum of the differences between consecutive characters.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can handle repeated and adjacent characters by calculating the time for each transition between letters.\n", "requirement analysis:\nThe requirements involve calculating the time required to type a given word on a specific keyboard layout. The keyboard layout is provided as a string of 26 lowercase Latin letters, and the word to be typed is also provided, with constraints on the length of the word. The challenge is to determine the optimal path for typing the word, considering the positions of the letters on the keyboard and the time taken to move between keys.\nrequirement pool:\n- Implement a function to calculate the time required to type a word based on the keyboard layout.\n- Ensure the function can handle words with repeated and adjacent characters.\n- Provide a clear and user-friendly interface for inputting the keyboard layout and the word.\n- Include error handling to manage invalid inputs.\n- Optimize the algorithm for efficiency, especially for longer words.\nTo solve this problem, we will create a Python function that calculates the time required to type a given word on a specific keyboard layout. The function will map each letter to its position on the keyboard and calculate the time based on the positions of consecutive letters. We will use a dictionary to store the positions of the letters for quick lookup.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': Each key is linked to a distinct lowercase Latin character, and the keys are set up in a single row.\n\n# [phrase showing quantity relationship]\n    'more than': This phrase is not explicitly mentioned in the requirement, but the need to find the absolute value of the difference between positions of keys suggests a comparison.\n\n# [degree adverb] \n    'largest': This phrase is not explicitly mentioned in the requirement, but the need to find the minimal time suggests a comparison.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the solution, we need to:\n    1. Create a dictionary to map each letter to its position on the keyboard.\n    2. Iterate through the word to calculate the time required to type it.\n    3. For each pair of consecutive letters, calculate the time based on their positions and sum it up.\n\n# [edge case] \n    Edge case 1: typing a word with repeated characters\n    typing_time(\"aabb\") = 0\n    Explanation: Since the characters are adjacent, no time is spent moving the hand between keys.\n\n    Edge case 2: typing a word with adjacent characters\n    typing_time(\"abc\") = 1\n    Explanation: The characters are in alphabetical order, so only 1 unit of time is spent moving the hand between keys.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can handle these cases by directly calculating the time based on the positions of the keys.\n", "requirement analysis:\nThe primary requirement is to calculate the time needed to type a given word on a keyboard, considering the positions of the keys. This involves mapping each letter to its position on the keyboard and calculating the time based on the distance between consecutive letters. The solution should be efficient and handle multiple test cases.\nrequirement pool:\n- Implement a function to calculate the time to type a word based on keyboard key positions.\n- Handle multiple test cases efficiently.\n- Ensure the solution is user-friendly and can be easily integrated into existing typing practice tools.\n- Optimize the algorithm to handle large inputs and edge cases.\nTo solve this problem, we will use Python, leveraging its efficiency and ease of use. The primary challenge is to calculate the time required to type a word based on the positions of the keys on the keyboard. We will map each letter to its position on the keyboard and then calculate the time based on the distance between consecutive letters. This will involve creating a function that takes the keyboard layout and the word to be typed as inputs and returns the total time required to type the word.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': Each key on the keyboard corresponds to a distinct character.\n    'word typing': The process of typing a word involves moving the hand between keys and pressing them.\n    'time calculation': The time to type a word is determined by the distance between keys.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the solution, we will follow these steps:\n    1. Create a dictionary to map each character to its position on the keyboard.\n    2. Iterate through the word, calculating the time to type each letter based on its position and the position of the previous letter.\n    3. Sum the times for all letters to get the total time.\n\n# [edge case] \n    search([2,2,3,3,3]) = 3\n    explanation: Both 2 and 3 appears greater than or equal to its value, but 3 is the largest number\n    search([3,3,2,4,4,4]) = -1\n    explanation: number 2 appears one time, number 3 appears two times,number 4 appears three times, none of them appears greater than or equal to its value, so the function return -1\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We could set the original return answer to -1 and then find the largest interger that meets the need. \n\n## Prompt 3:\n[requirement]\nYou are given a keyboard with 26 keys arranged in a single row, each key corresponding to a distinct lowercase Latin character. You need to type the word s on this keyboard. The word s consists only of lowercase Latin letters. To type the word, you must position your hand exactly over the corresponding key for each letter, and press it firmly. Moving the hand between the keys takes time, which is equal to the absolute value of the difference between the positions of these keys. No time is spent on pressing the keys or placing the hand over the first letter of the word.\n\nCalculate the time needed to type the word s\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases. The first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard. The second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n5\ndefghijklmnopqrstuvwxyz\nhello\ndefghijklmnopqrstuvwxyz\ni\ndefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\nOutput\n\n13\n0\n68\n0\n74\n\n[plan]\nTo solve this problem, we will use Python, leveraging its efficiency and ease of use. The primary challenge is to calculate the time required to type a word based on the positions of the keys on the keyboard. We will map each letter to its position on the keyboard and then calculate the time based on the distance between consecutive letters. This will involve creating a function that takes the keyboard layout and the word to be typed as inputs and returns the total time required to type the word.\n\n# [code logic]\n    Here's the detailed logic to implement the solution:\n    1. Read the number of test cases.\n    2. For each test case:\n        a. Read the keyboard layout and the word.\n        b. Create a dictionary to map each character to its position on the keyboard.\n        c. Initialize the total time to 0.\n        d. Iterate through the word, calculating the time to type each letter based on its position and the position of the previous letter.\n        e. Sum the times for all letters to get the total time.\n        f. Print the total time for the current test case.\n\n# [edge case] \n    search([2,2,3,3,3]) = 3\n    explanation: Both 2 and 3 appears greater than or equal to its value, but 3 is the largest number\n    search([3,3,2,4,4,4]) = -1\n    explanation: number 2 appears one time, number 3 appears two times,number 4 appears three times, none of them appears greater than or equal to its value, so the function return -1\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We could set the original return answer to -1 and then find the largest interger that meets the need. \n\n## Answer 3:\n\n# [core concept]\n    'keyboard layout': Each key on the keyboard corresponds to a distinct character.\n    'word typing': The process of typing a word involves moving the hand between keys and pressing them.\n    'time calculation': The time to type a word is determined by the distance between keys.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the solution, we will follow these steps:\n    1. Create a dictionary to map each character to its position on the keyboard.\n    2. Iterate through the word, calculating the time to type each letter based on its position and the position of the previous letter.\n    3. Sum the times for all letters to get the total time.\n\n# [edge case] \n    search([2,2,3,3,3]) = 3\n    explanation: Both 2 and 3 appears greater than or equal to its value, but 3 is the largest number\n    search([3,3,2,4,4,4]) = -1\n    explanation: number 2 appears one time, number 3 appears two times,number 4 appears three times, none of them appears greater than or equal to its value, so the function return -1\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We could set the original return answer to -1 and then find the largest interger that meets the need. \n\n## Prompt 3:\n[requirement]\nYou are given a keyboard with 26 keys arranged in a single row, each key corresponding to a distinct lowercase Latin character. You need to type the word s on this keyboard. The word s consists only of lowercase Latin letters. To type the word, you must position your hand exactly over the corresponding key for each letter, and press it firmly. Moving the hand between the keys takes time, which is equal to the absolute value of the difference between the positions of these keys. No time is spent on pressing the keys or placing the hand over the first letter of the word.\n\nCalculate the time needed to type the word s\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases. The first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard. The second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n5\ndefghijklmnopqrstuvwxyz\nhello\ndefghijklmnopqrstuvwxyz\ni\ndefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\nOutput\n\n13\n0\n68\n0\n74\n\n[plan]\nTo solve this problem, we will use Python, leveraging its efficiency and ease of use. The primary challenge is to calculate the time required to type a word based on the positions of the keys on the keyboard. We will map each letter to its position on the keyboard and then calculate the time based on the distance between consecutive letters. This will involve creating a function that takes the keyboard layout and the word to be typed as inputs and returns the total time required to type the word.\n\n# [code logic]\n    Here's the detailed logic to implement the solution:\n    1. Read the number of test cases.\n    2. For each test case:\n        a. Read the keyboard layout and the word.\n        b. Create a dictionary to map each character to its position on the keyboard.\n        c. Initialize the total time to 0.\n        d. Iterate through the word, calculating the time to type each letter based on its position and the position of the previous letter.\n        e. Sum the times for all letters to get the total time.\n        f. Print the total time for the current test case.\n", "requirement analysis:\nThe requirements involve calculating the time needed to type a word based on the positions of the keys on a given keyboard. Each test case involves a keyboard layout and a word to be typed. The challenge is to determine the minimal time required to type the word, considering the positions of the keys and the word's length. The solution should be efficient and capable of handling multiple test cases.\nrequirement pool:\n- Implement a function to calculate the time needed to type a word based on keyboard key positions.\n- Ensure the solution can handle multiple test cases efficiently.\n- Develop a user interface to input the keyboard layout and the word to be typed.\n- Provide a clear output displaying the minimal time for each test case.\nTo solve this problem, we will create a Python function that calculates the time needed to type a word based on the positions of the keys on a given keyboard. The function will first map each key to its position, then calculate the time based on the positions of the keys in the word. We will use a simple and efficient approach to ensure the function is both fast and easy to understand.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a distinct lowercase Latin character.\n    Explanation: In this problem, the keyboard is given as a string of length 26, where each character represents a key. The goal is to calculate the time needed to type a word based on the positions of these keys.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates that the time calculation involves comparing the positions of two keys to determine the time taken to move between them.\n    Explanation: For example, if the keys corresponding to 'a' and 'b' are far apart, moving from 'a' to 'b' will take more time than moving from 'a' to 'c'.\n\n# [degree adverb] \n    'absolute value': Indicates that the time calculation should consider the distance between keys without regard to direction.\n    Explanation: The absolute value is used to ensure that the time taken to move between keys is always a positive value, regardless of the order in which the keys are pressed.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the solution, we will follow these steps:\n    1. Read the keyboard layout and the word to be typed.\n    2. Map each key to its position on the keyboard.\n    3. Calculate the time needed to type the word by summing the absolute differences in positions between consecutive letters.\n    4. Output the total time for each test case.\n\n# [edge case] \n    Edge case 1: Typing a word with consecutive letters on a perfectly aligned keyboard.\n    Input: keyboard = \"abcdefghijklmnopqrstuvwxyz\", word = \"abc\"\n    Expected output: 0\n    Explanation: Since the keys are in alphabetical order, no time is spent moving between keys.\n\n    Edge case 2: Typing a word with letters at opposite ends of the keyboard.\n    Input: keyboard = \"abcdefghijklmnopqrstuvwxyz\", word = \"zyx\"\n    Expected output: 25\n    Explanation: The letters 'z' and 'a' are at opposite ends of the keyboard, so the time taken to move from 'z' to 'y' and then to 'x' is 25.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can handle all cases, including those with consecutive letters or letters at opposite ends of the keyboard.\n", "requirement analysis:\nThe primary requirement is to calculate the time needed to type a given word on a keyboard, considering the positions of the keys. The keyboard layout and the word to be typed are provided as inputs. The output should be the minimal time required to type the word, based on the positions of the keys.\nrequirement pool:\n- Implement a function to calculate the time required to type a word based on keyboard layout.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the code to minimize the number of operations and improve performance.\nWe will use Python to implement the function that calculates the time needed to type a word based on the given keyboard layout. The function will first map each key to its position on the keyboard, then calculate the time based on the positions of the keys in the word. We will use a simple dictionary to store the positions of the keys for quick lookup.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a distinct character.\n    Explanation: In this problem, we need to calculate the time to type a word based on the positions of the keys on the keyboard. The position of each key is determined by its order in the given string.\n\n# [phrase showing quantity relationship]\n    'as many times': Indicates the frequency of a character in the word.\n    Explanation: For example, in the requirement \"Return the largest integer that appears at least as many times as the integer itself,\" the phrase 'at least as many times' indicates that the frequency of the integer must be greater than or equal to its value.\n\n# [degree adverb] \n    'largest': Indicates the maximum value among those that meet the condition.\n    Explanation: In the requirement \"Return the largest integer that appears at least as many times as the integer itself,\" the degree adverb 'largest' means we need to find the largest integer that satisfies the condition.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the function, we need to:\n    1. Map each key to its position on the keyboard.\n    2. Calculate the time based on the positions of the keys in the word.\n    3. Sum the absolute differences between consecutive keys to get the total time.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3]) = 3\n    Explanation: Both 2 and 3 appear more than or equal to their value, but 3 is the largest number.\n    search([3, 3, 2, 4, 4, 4]) = -1\n    Explanation: Number 2 appears one time, number 3 appears two times, number 4 appears three times, none of them appear more than or equal to their value, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We can set the default return value to -1 and then find the largest integer that meets the condition.\n\n## Prompt 3:\n[requirement]\nYou are given a keyboard with 26 keys arranged in a single row, each key corresponding to a distinct lowercase Latin character. You need to type the word s on this keyboard. The word s consists only of lowercase Latin letters. To type the word, you must position your hand exactly over the corresponding key for each letter, and press it firmly. Moving the hand between the keys takes time, which is equal to the absolute value of the difference between the positions of these keys. No time is spent on pressing the keys or placing the hand over the first letter of the word.\n\nCalculate the time needed to type the word s\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases. The first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard. The second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n5\ndefghijklmnopqrstuvwxyz\nhello\ndefghijklmnopqrstuvwxyz\ni\ndefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\nOutput\n\n13\n0\n68\n0\n74\n\n[plan]\nWe will use Python to implement the function that calculates the time needed to type a word based on the given keyboard layout. The function will first map each key to its position on the keyboard, then calculate the time based on the positions of the keys in the word. We will use a simple dictionary to store the positions of the keys for quick lookup.\n\n## Answer 3:\n\n# [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a distinct character.\n    Explanation: In this problem, we need to calculate the time to type a word based on the positions of the keys on the keyboard. The position of each key is determined by its order in the given string.\n\n# [phrase showing quantity relationship]\n    'as many times': Indicates the frequency of a character in the word.\n    Explanation: For example, in the requirement \"Return the largest integer that appears at least as many times as the integer itself,\" the phrase 'at least as many times' indicates that the frequency of the integer must be greater than or equal to its value.\n\n# [degree adverb] \n    'largest': Indicates the maximum value among those that meet the condition.\n    Explanation: In the requirement \"Return the largest integer that appears at least as many times as the integer itself,\" the degree adverb 'largest' means we need to find the largest integer that satisfies the condition.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the function, we need to:\n    1. Map each key to its position on the keyboard.\n    2. Calculate the time based on the positions of the keys in the word.\n    3. Sum the absolute differences between consecutive keys to get the total time.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3]) = 3\n    Explanation: Both 2 and 3 appear more than or equal to their value, but 3 is the largest number.\n    search([3, 3, 2, 4, 4, 4]) = -1\n    Explanation: Number 2 appears one time, number 3 appears two times, number 4 appears three times, none of them appear more than or equal to their value, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We can set the default return value to -1 and then find the largest integer that meets the condition.\n", "requirement analysis:\nThe requirements involve creating a program that calculates the minimum time required to type a given word on a keyboard where each key is linked to a distinct character. The challenge lies in determining the optimal sequence of key presses to minimize the total time taken, considering the movement between keys. The program must handle multiple test cases efficiently, ensuring it can process a large number of inputs within a reasonable time frame.\nrequirement pool:\n- Implement a function to calculate the time required to type a word based on the keyboard layout.\n- Develop a mechanism to handle multiple test cases efficiently.\n- Ensure the program is user-friendly and can handle words up to 50 characters in length.\n- Include options for custom keyboard layouts to cater to different user preferences.\n- Implement a feature to analyze and compare different keyboard layouts for efficiency.\nWe will implement a Python function that calculates the minimum time required to type a given word on a keyboard. The function will take into account the positions of the keys on the keyboard and the sequence of the word to be typed. The function will be efficient and capable of handling multiple test cases efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key is linked to a distinct character.\n    Explanation: In this context, the keyboard is represented as a string of 26 characters, each character corresponding to a specific key on the keyboard. The order of these characters defines the sequence in which the keys are arranged.\n\n# [phrase showing quantity relationship]\n    'as many times': Indicates the frequency or number of times a character appears in the word.\n    Explanation: For example, if a character appears 'n' times in the word, it means that the character needs to be typed 'n' times.\n\n# [degree adverb] \n    'minimal': Refers to the smallest possible time required to type the word.\n    Explanation: This implies that we need to find the most efficient way to type the word, considering the positions of the keys and the sequence of the word.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To calculate the minimal time required to type the word, we need to:\n    1. Map each character in the word to its corresponding position on the keyboard.\n    2. Calculate the time taken to move the hand between keys for each pair of consecutive characters in the word.\n    3. Sum the times calculated in step 2 to get the total time.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the word is 'abc', and the keyboard is arranged such that 'a' is at position 1, 'b' at position 2, and 'c' at position 3. The minimal time to type the word is the sum of the absolute differences between consecutive positions, which is 0 + 1 + 1 = 2. However, the expected output is 3, which suggests a misunderstanding in the edge case interpretation.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case.\n        if len(s) == 1:\n            return 0\n        (other code)\n\n\nNote: The edge case provided in the example seems to be incorrect or misinterpreted. The correct minimal time for typing a single-character word should be 0, not 3. Please provide the correct edge case or clarification for the edge case handling.\n", "requirement analysis:\nThe requirements involve creating a simulation of typing on a keyboard, calculating the minimal time required to type a given word based on the positions of the keys. The challenge lies in ensuring that the keyboard layout is accurately represented and that the calculation of time takes into account the physical movement between keys. The product should be user-friendly and customizable to accommodate different users' preferences.\nrequirement pool:\n- Implement a keyboard layout with 26 keys.\n- Allow users to input a word to be typed.\n- Calculate the minimal time required to type the word based on key positions.\n- Allow users to customize the keyboard layout.\n- Provide a user-friendly interface for practicing typing.\nTo implement the solution, we will use Python due to its simplicity and extensive standard library. The main challenge is to calculate the minimal time required to type a word based on the positions of the keys on the keyboard. We will use a dictionary to map each key to its position for quick lookup. The time calculation will involve iterating through the word and summing the absolute differences in positions between consecutive letters.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key is associated with a distinct character.\n    Explanation: In this problem, the keyboard is represented as a string of 26 characters, each character corresponding to a specific key. The goal is to calculate the minimal time required to type a given word using this keyboard.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates a comparison where one quantity is greater than another.\n    Explanation: In the context of this problem, it is used to compare the positions of two consecutive keys when typing a word.\n\n# [degree adverb] \n    'minimal': Indicates the smallest or lowest possible value, in this case, the minimal time required to type the word.\n    Explanation: The problem asks for the minimal time, which is the smallest possible time needed to type the word on the given keyboard.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the solution, we will follow these steps:\n    1. Create a dictionary to map each key (character) to its position on the keyboard.\n    2. For each test case, read the keyboard layout and the word.\n    3. Initialize a variable to keep track of the total time.\n    4. Iterate through the word, calculating the time to move the hand between consecutive letters using the absolute difference in their positions.\n    5. Sum the times for all consecutive letters and print the result.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the largest integer that appears at least as many times as itself is 3, as it appears 3 times, which is equal to its value.\n    search([5, 5, 4, 4, 4]) = -1\n    Explanation: No integer appears more than once, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic can handle cases where no integer meets the condition by returning -1.\n\n## Prompt 3:\n[requirement]\nYou are provided with a keyboard containing 26 keys. The keys are set up in a single row, and they follow a specific sequence. Each key is linked to a distinct lowercase Latin character. You have to type the word s on this keyboard. This word also consists only of lowercase Latin letters. To type a word, you need to type all its letters consecutively one by one. You must position your hand exactly over the corresponding key for each letter, and you should press it firmly. Moving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys. Input The first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. The next 2t lines contain descriptions of the test cases. The first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard. The second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters. Output Print t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n[plan]\nTo implement the solution, we will use Python due to its simplicity and extensive standard library. The main challenge is to calculate the minimal time required to type a word based on the positions of the keys on the keyboard. We will use a dictionary to map each key to its position for quick lookup. The time calculation will involve iterating through the word and summing the absolute differences in positions between consecutive letters.\n\n## Answer 3:\n\n# [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key is associated with a distinct character.\n    Explanation: In this problem, the keyboard is represented as a string of 26 characters, each character corresponding to a specific key. The goal is to calculate the minimal time required to type a given word using this keyboard.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates a comparison where one quantity is greater than another.\n    Explanation: In the context of this problem, it is used to compare the positions of two consecutive keys when typing a word.\n\n# [degree adverb] \n    'minimal': Indicates the smallest or lowest possible value, in this case, the minimal time required to type the word.\n    Explanation: The problem asks for the minimal time, which is the smallest possible time needed to type the word on the given keyboard.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the solution, we will follow these steps:\n    1. Create a dictionary to map each key (character) to its position on the keyboard.\n    2. For each test case, read the keyboard layout and the word.\n    3. Initialize a variable to keep track of the total time.\n    4. Iterate through the word, calculating the time to move the hand between consecutive letters using the absolute difference in their positions.\n    5. Sum the times for all consecutive letters and print the result.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the largest integer that appears at least as many times as itself is 3, as it appears 3 times, which is equal to its value.\n    search([5, 5, 4, 4, 4]) = -1\n    Explanation: No integer appears more than once, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic can handle cases where no integer meets the condition by returning -1.\n", "requirement analysis:\nThe requirements involve creating a program that calculates the minimum time required to type a given word on a keyboard where each key is linked to a distinct character. The challenge lies in determining the optimal sequence of pressing the keys to minimize the time taken. This involves considering the positions of the keys and the word to be typed, with the goal of reducing the hand movement and switching times.\nrequirement pool:\n- The main code should efficiently calculate the minimum typing time for a given word on a keyboard.\n- The program should handle multiple test cases efficiently.\n- The keyboard layout should be customizable.\n- The user interface should be visually appealing and easy to navigate.\n- The program should be optimized for different types of keyboards and words.\nTo solve this problem, we will use a simple Python script that calculates the minimum typing time for a given word on a keyboard. The approach involves mapping each character to its position on the keyboard and then calculating the time based on the positions of consecutive characters. We will use a dictionary to store the positions of the keys for quick lookup.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key is associated with a distinct character.\n    Explanation: In this problem, the keyboard is represented as a string of 26 characters, each character corresponding to a specific key on the keyboard. The goal is to calculate the time required to type a given word on this keyboard, considering the time taken to move the hand between keys.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates a comparison where one quantity is greater than another.\n    Explanation: In the context of this problem, 'more than' is used to compare the positions of two keys on the keyboard to determine the time taken to move the hand between them.\n\n# [degree adverb] \n    'minimal': Indicates the best or highest quality or the furthest extreme.\n    Explanation: In the output, 'minimal' is used to describe the minimum time required to type a word on the given keyboard, ensuring the most efficient movement of the hand between keys.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to:\n    1. Map each character to its position on the keyboard.\n    2. Iterate through the word, calculating the time to type each character based on its position relative to the previous character.\n    3. Sum the times for all characters to get the total typing time.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the list contains integers that are greater than zero and appear at least as many times as the integer itself. The largest integer that meets this condition is 3, as it appears three times.\n    search([3, 3, 2, 4, 4, 4]) = -1\n    Explanation: Here, the list contains integers that are greater than zero, but no integer appears at least as many times as itself. Therefore, the function returns -1 to indicate that no such integer exists.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not lst:\n            return -1\n        freq = {}\n        for num in lst:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n        max_num = -1\n        for num, count in freq.items():\n            if count >= num:\n                max_num = max(max_num, num)\n        return max_num if max_num != -1 else -1\n\n## Prompt 3:\n[requirement]\nYou are provided with a keyboard containing 26 keys. The keys are set up in a single row, and they follow a specific sequence. Each key is linked to a distinct lowercase Latin character. You have to type the word s on this keyboard. This word also consists only of lowercase Latin letters. To type a word, you need to type all its letters consecutively one by one. You must position your hand exactly over the corresponding key for each letter, and you should press it firmly. Moving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys. Input The first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. The next 2t lines contain descriptions of the test cases. The first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard. The second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters. Output Print t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n[plan]\nTo solve this problem, we will use a simple Python script that calculates the minimum typing time for a given word on a keyboard. The approach involves mapping each character to its position on the keyboard and then calculating the time based on the positions of consecutive characters. We will use a dictionary to store the positions of the keys for quick lookup.\n\n## Answer 3:\n\n# [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key is associated with a distinct character.\n    Explanation: In this problem, the keyboard is represented as a string of 26 characters, each character corresponding to a specific key on the keyboard. The goal is to calculate the time required to type a given word on this keyboard, considering the time taken to move the hand between keys.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates a comparison where one quantity is greater than another.\n    Explanation: In the context of this problem, 'more than' is used to compare the positions of two keys on the keyboard to determine the time taken to move the hand between them.\n\n# [degree adverb] \n    'minimal': Indicates the best or highest quality or the furthest extreme.\n    Explanation: In the output, 'minimal' is used to describe the minimum time required to type a word on the given keyboard, ensuring the most efficient movement of the hand between keys.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to:\n    1. Map each character to its position on the keyboard.\n    2. Iterate through the word, calculating the time to type each character based on its position relative to the previous character.\n    3. Sum the times for all characters to get the total typing time.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the list contains integers that are greater than zero and appear at least as many times as the integer itself. The largest integer that meets this condition is 3, as it appears three times.\n    search([3, 3, 2, 4, 4, 4]) = -1\n    Explanation: Here, the list contains integers that are greater than zero, but no integer appears at least as many times as itself. Therefore, the function returns -1 to indicate that no such integer exists.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not lst:\n            return -1\n        freq = {}\n        for num in lst:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n        max_num = -1\n        for num, count in freq.items():\n            if count >= num:\n                max_num = max(max_num, num)\n        return max_num if max_num != -1 else -1\n", "requirement analysis:\nThe requirements involve calculating the time required to type a given word on a specific keyboard layout. The keyboard layout is provided as a string of 26 lowercase Latin letters, and the word to be typed is also provided as a string of lowercase Latin letters. The challenge is to determine the positions of the letters on the keyboard and calculate the time based on the positions of consecutive letters.\nrequirement pool:\n- Implement a function to calculate the time required to type a word based on the keyboard layout.\n- Ensure the program can handle multiple test cases efficiently.\n- Provide clear and concise output for each test case.\nTo solve this problem, we will create a Python function that calculates the time required to type a given word based on a provided keyboard layout. The function will first map each letter to its position on the keyboard, then calculate the time based on the positions of consecutive letters. We will use a simple and efficient approach to handle the input and output, ensuring that the program can handle multiple test cases efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': Each key is linked to a distinct lowercase Latin character, and the sequence of keys is fixed.\n    'word typing': The time to type a word is determined by the positions of the keys for each letter and the absolute difference in positions between consecutive letters.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function will follow these steps:\n    1. Read the keyboard layout and the word to be typed.\n    2. Map each letter to its position on the keyboard.\n    3. Calculate the time to type the word by summing the absolute differences in positions between consecutive letters.\n    4. Output the calculated time for each test case.\n\n# [edge case] \n    edge_case1 = \"abc\"\n    expected_output = 2\n    Explanation: The word \"abc\" is typed on a keyboard where the letters are in alphabetical order. The positions are 1, 2, and 3 respectively. The time is |2-1| + |3-2| = 2.\n\n    edge_case2 = \"aaa\"\n    expected_output = 0\n    Explanation: The word \"aaa\" consists of repeated characters. Since the characters are the same, no time is spent moving between keys.\n\n    edge_case3 = \"abacaba\"\n    expected_output = 7\n    Explanation: The word \"abacaba\" is typed on a keyboard where the letters are in the order 'a', 'b', 'a', 'c', 'a', 'b', 'a'. The positions are 1, 2, 1, 3, 1, 2, 1 respectively. The time is |2-1| + |1-2| + |3-1| + |1-3| + |2-1| + |1-2| = 7.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can handle all cases, including repeated and adjacent characters.\n"], "scores": [], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 776, "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "mutate_method": "expand_one2two", "parent_index": 335}
