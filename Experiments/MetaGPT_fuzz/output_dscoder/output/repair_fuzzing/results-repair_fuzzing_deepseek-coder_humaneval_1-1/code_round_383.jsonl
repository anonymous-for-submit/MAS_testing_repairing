{"task_id": "HumanEval/58", "prompt": "def common(l1: list, l2: list):\t\n'''Return sorted unique elements that are common to both lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "entry_point": "common", "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "test": ["def check(common):\n\tassert common([6, 5, 7, 10], [8, 4]) == []", "def check(common):\n\tassert common([6, 3, 2, 37, 657, 2, 6], [5, 9, 1, 6, 4, 654, 125]) == [6]", "def check(common):\n\tassert common([1, 6, 5, 9], [1, 6, 1]) == [1, 6]", "def check(common):\n\tassert common([8, 7, 6, 13], [7, 2]) == [7]", "def check(common):\n\tassert common([1, 1, 3, 11], [5, 3, 2]) == [3]", "def check(common):\n\tassert common([7, 8, 6, 11], [4, 5, 9]) == []", "def check(common):\n\tassert common([1, 6, 5, 34, 651, 3, 3], [7, 8, 1, 7, 9, 653, 121]) == [1]", "def check(common):\n\tassert common([6, 6, 4, 12], [3, 1]) == []", "def check(common):\n\tassert common([6, 1, 5, 36, 648, 1, 6], [3, 4, 2, 1, 12, 654, 123]) == [1]", "def check(common):\n\tassert common([6, 3, 7, 6], [3, 5, 7]) == [3, 7]", "def check(common):\n\tassert common([4, 8, 2, 9], [3, 1]) == []", "def check(common):\n\tassert common([3, 5, 5, 8], [7, 6]) == []", "def check(common):\n\tassert common([1, 8, 3, 4], [8, 7, 6]) == [8]", "def check(common):\n\tassert common([5, 2, 6, 30, 650, 7, 3], [7, 10, 2, 4, 4, 651, 126]) == [2, 7]", "def check(common):\n\tassert common([4, 6, 6, 7], [8, 6, 9]) == [6]", "def check(common):\n\tassert common([3, 7, 6, 3], [2, 4, 5]) == []", "def check(common):\n\tassert common([7, 4, 3, 10], [3, 1]) == [3]", "def check(common):\n\tassert common([3, 3, 1, 4], [4, 6, 4]) == [4]", "def check(common):\n\tassert common([4, 5, 2, 5], [1, 7, 5]) == [5]", "def check(common):\n\tassert common([5, 3, 4, 35, 652, 1, 1], [9, 6, 2, 8, 6, 653, 122]) == []", "def check(common):\n\tassert common([3, 1, 6, 11], [6, 6]) == [6]", "def check(common):\n\tassert common([7, 4, 7, 13], [8, 4]) == [4]", "def check(common):\n\tassert common([4, 4, 4, 34, 652, 5, 10], [8, 2, 1, 4, 5, 652, 117]) == [4, 5, 652]", "def check(common):\n\tassert common([2, 8, 3, 29, 650, 1, 7], [3, 6, 2, 3, 7, 652, 116]) == [2, 3, 7]", "def check(common):\n\tassert common([5, 8, 7, 3], [6, 4]) == []", "def check(common):\n\tassert common([2, 2, 1, 29, 650, 4, 2], [3, 10, 6, 2, 11, 651, 119]) == [2]", "def check(common):\n\tassert common([3, 3, 2, 30, 656, 3, 4], [6, 11, 2, 4, 4, 652, 123]) == [2, 4]", "def check(common):\n\tassert common([6, 1, 4, 33, 651, 4, 3], [4, 10, 1, 10, 12, 657, 126]) == [1, 4]", "def check(common):\n\tassert common([6, 6, 4, 5], [3, 3, 8]) == []", "def check(common):\n\tassert common([5, 5, 4, 34, 648, 5, 5], [3, 7, 6, 2, 10, 648, 116]) == [648]", "def check(common):\n\tassert common([2, 1, 7, 9], [6, 3]) == []", "def check(common):\n\tassert common([4, 1, 4, 12], [5, 1, 7]) == [1]", "def check(common):\n\tassert common([7, 6, 3, 9], [6, 5]) == [6]", "def check(common):\n\tassert common([2, 3, 3, 9], [5, 2]) == [2]", "def check(common):\n\tassert common([1, 4, 1, 32, 657, 7, 6], [4, 10, 2, 2, 4, 650, 124]) == [4]", "def check(common):\n\tassert common([8, 3, 4, 10], [8, 7]) == [8]", "def check(common):\n\tassert common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]", "def check(common):\n\tassert common([5, 2, 2, 30, 654, 5, 1], [3, 3, 2, 10, 6, 657, 126]) == [2]", "def check(common):\n\tassert common([2, 7, 4, 3], [8, 7, 5]) == [7]", "def check(common):\n\tassert common([4, 5, 7, 12], [7, 1]) == [7]", "def check(common):\n\tassert common([9, 3, 7, 4], [4, 2, 4]) == [4]", "def check(common):\n\tassert common([3, 1, 3, 10], [3, 3, 9]) == [3]", "def check(common):\n\tassert common([4, 4, 1, 37, 654, 7, 5], [3, 11, 2, 6, 9, 656, 120]) == []", "def check(common):\n\tassert common([2, 6, 2, 8], [5, 2]) == [2]", "def check(common):\n\tassert common([2, 4, 3, 12], [4, 5, 6]) == [4]", "def check(common):\n\tassert common([4, 4, 7, 8], [4, 4, 9]) == [4]", "def check(common):\n\tassert common([1, 6, 6, 12], [6, 2, 9]) == [6]", "def check(common):\n\tassert common([2, 7, 1, 4], [1, 2, 1]) == [1, 2]", "def check(common):\n\tassert common([2, 5, 6, 32, 649, 3, 9], [8, 6, 1, 4, 4, 658, 117]) == [6]", "def check(common):\n\tassert common([2, 1, 5, 37, 657, 7, 1], [4, 9, 3, 1, 12, 649, 122]) == [1]", "def check(common):\n\tassert common([5, 5, 7, 7], [5, 2]) == [5]", "def check(common):\n\tassert common([5, 3, 2, 8], [3, 2]) == [2, 3]", "def check(common):\n\tassert common([5, 4, 5, 32, 655, 6, 2], [2, 10, 4, 2, 14, 656, 117]) == [2, 4]", "def check(common):\n\tassert common([3, 4, 4, 8], [3, 3, 9]) == [3]", "def check(common):\n\tassert common([5, 2, 1, 3], [8, 3]) == [3]", "def check(common):\n\tassert common([3, 8, 3, 35, 651, 4, 2], [1, 12, 6, 10, 4, 654, 119]) == [4]", "def check(common):\n\tassert common([5, 6, 4, 8], [3, 7, 2]) == []", "def check(common):\n\tassert common([7, 7, 5, 11], [3, 4]) == []", "def check(common):\n\tassert common([4, 3, 2, 8], []) == []", "def check(common):\n\tassert common([7, 7, 7, 3], [2, 4]) == []", "def check(common):\n\tassert common([2, 9, 3, 36, 649, 6, 7], [10, 12, 4, 4, 14, 656, 116]) == []", "def check(common):\n\tassert common([3, 8, 6, 6], [4, 3, 3]) == [3]", "def check(common):\n\tassert common([1, 8, 7, 3], [2, 6]) == []", "def check(common):\n\tassert common([1, 4, 5, 11], [1, 6, 1]) == [1]", "def check(common):\n\tassert common([6, 2, 3, 8], [7, 6, 8]) == [6, 8]", "def check(common):\n\tassert common([1, 7, 4, 30, 653, 1, 1], [6, 9, 2, 2, 13, 650, 120]) == []", "def check(common):\n\tassert common([6, 8, 4, 32, 657, 7, 6], [4, 10, 1, 5, 14, 652, 120]) == [4]", "def check(common):\n\tassert common([2, 7, 7, 32, 650, 5, 6], [7, 2, 4, 3, 13, 654, 117]) == [2, 7]", "def check(common):\n\tassert common([1, 4, 7, 30, 658, 3, 10], [6, 7, 3, 10, 10, 658, 117]) == [3, 7, 10, 658]", "def check(common):\n\tassert common([8, 4, 1, 9], [6, 3]) == []", "def check(common):\n\tassert common([2, 1, 4, 37, 657, 3, 7], [8, 5, 5, 10, 7, 654, 121]) == [7]", "def check(common):\n\tassert common([9, 7, 7, 7], [5, 2]) == []", "def check(common):\n\tassert common([4, 6, 3, 31, 648, 7, 10], [1, 10, 4, 7, 7, 653, 117]) == [4, 7, 10]", "def check(common):\n\tassert common([6, 5, 2, 3], [3, 3, 3]) == [3]", "def check(common):\n\tassert common([4, 4, 1, 8], [1, 5, 7]) == [1]", "def check(common):\n\tassert common([8, 4, 6, 5], [1, 1]) == []", "def check(common):\n\tassert common([4, 5, 3, 10], [7, 5]) == [5]", "def check(common):\n\tassert common([7, 1, 7, 13], [3, 1]) == [1]", "def check(common):\n\tassert common([1, 5, 5, 29, 655, 4, 1], [5, 3, 2, 1, 5, 648, 118]) == [1, 5]", "def check(common):\n\tassert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "def check(common):\n\tassert common([7, 7, 1, 4], [5, 6]) == []", "def check(common):\n\tassert common([5, 4, 2, 36, 648, 7, 10], [6, 8, 1, 5, 11, 649, 126]) == [5]", "def check(common):\n\tassert common([8, 1, 1, 3], [5, 6]) == []", "def check(common):\n\tassert common([6, 3, 6, 3], [8, 5, 8]) == []", "def check(common):\n\tassert common([6, 8, 7, 32, 654, 7, 3], [7, 7, 2, 5, 10, 654, 123]) == [7, 654]", "def check(common):\n\tassert common([2, 2, 6, 11], [5, 6, 1]) == [6]", "def check(common):\n\tassert common([1, 4, 6, 39, 653, 4, 3], [6, 12, 2, 3, 14, 654, 116]) == [3, 6]", "def check(common):\n\tassert common([1, 3, 4, 9], [7, 3]) == [3]", "def check(common):\n\tassert common([9, 6, 6, 7], [7, 7, 1]) == [7]", "def check(common):\n\tassert common([5, 6, 2, 34, 654, 3, 7], [7, 9, 1, 7, 8, 650, 122]) == [7]", "def check(common):\n\tassert common([8, 2, 7, 4], [7, 7, 1]) == [7]", "def check(common):\n\tassert common([3, 2, 1, 37, 654, 7, 6], [2, 3, 2, 6, 4, 649, 123]) == [2, 3, 6]", "def check(common):\n\tassert common([9, 2, 7, 4], [5, 4, 1]) == [4]", "def check(common):\n\tassert common([8, 1, 4, 10], [4, 2]) == [4]", "def check(common):\n\tassert common([2, 8, 5, 10], [8, 4]) == [8]", "def check(common):\n\tassert common([8, 4, 4, 6], [3, 6]) == [6]", "def check(common):\n\tassert common([3, 6, 6, 7], [7, 4, 2]) == [7]", "def check(common):\n\tassert common([3, 4, 3, 11], [4, 1, 7]) == [4]", "def check(common):\n\tassert common([3, 1, 4, 5], [1, 1]) == [1]", "def check(common):\n\tassert common([3, 2, 5, 37, 652, 2, 3], [5, 4, 6, 7, 9, 651, 120]) == [5]"], "test_case_list": ["assert common([6, 5, 7, 10], [8, 4]) == []", "assert common([6, 3, 2, 37, 657, 2, 6], [5, 9, 1, 6, 4, 654, 125]) == [6]", "assert common([1, 6, 5, 9], [1, 6, 1]) == [1, 6]", "assert common([8, 7, 6, 13], [7, 2]) == [7]", "assert common([1, 1, 3, 11], [5, 3, 2]) == [3]", "assert common([7, 8, 6, 11], [4, 5, 9]) == []", "assert common([1, 6, 5, 34, 651, 3, 3], [7, 8, 1, 7, 9, 653, 121]) == [1]", "assert common([6, 6, 4, 12], [3, 1]) == []", "assert common([6, 1, 5, 36, 648, 1, 6], [3, 4, 2, 1, 12, 654, 123]) == [1]", "assert common([6, 3, 7, 6], [3, 5, 7]) == [3, 7]", "assert common([4, 8, 2, 9], [3, 1]) == []", "assert common([3, 5, 5, 8], [7, 6]) == []", "assert common([1, 8, 3, 4], [8, 7, 6]) == [8]", "assert common([5, 2, 6, 30, 650, 7, 3], [7, 10, 2, 4, 4, 651, 126]) == [2, 7]", "assert common([4, 6, 6, 7], [8, 6, 9]) == [6]", "assert common([3, 7, 6, 3], [2, 4, 5]) == []", "assert common([7, 4, 3, 10], [3, 1]) == [3]", "assert common([3, 3, 1, 4], [4, 6, 4]) == [4]", "assert common([4, 5, 2, 5], [1, 7, 5]) == [5]", "assert common([5, 3, 4, 35, 652, 1, 1], [9, 6, 2, 8, 6, 653, 122]) == []", "assert common([3, 1, 6, 11], [6, 6]) == [6]", "assert common([7, 4, 7, 13], [8, 4]) == [4]", "assert common([4, 4, 4, 34, 652, 5, 10], [8, 2, 1, 4, 5, 652, 117]) == [4, 5, 652]", "assert common([2, 8, 3, 29, 650, 1, 7], [3, 6, 2, 3, 7, 652, 116]) == [2, 3, 7]", "assert common([5, 8, 7, 3], [6, 4]) == []", "assert common([2, 2, 1, 29, 650, 4, 2], [3, 10, 6, 2, 11, 651, 119]) == [2]", "assert common([3, 3, 2, 30, 656, 3, 4], [6, 11, 2, 4, 4, 652, 123]) == [2, 4]", "assert common([6, 1, 4, 33, 651, 4, 3], [4, 10, 1, 10, 12, 657, 126]) == [1, 4]", "assert common([6, 6, 4, 5], [3, 3, 8]) == []", "assert common([5, 5, 4, 34, 648, 5, 5], [3, 7, 6, 2, 10, 648, 116]) == [648]", "assert common([2, 1, 7, 9], [6, 3]) == []", "assert common([4, 1, 4, 12], [5, 1, 7]) == [1]", "assert common([7, 6, 3, 9], [6, 5]) == [6]", "assert common([2, 3, 3, 9], [5, 2]) == [2]", "assert common([1, 4, 1, 32, 657, 7, 6], [4, 10, 2, 2, 4, 650, 124]) == [4]", "assert common([8, 3, 4, 10], [8, 7]) == [8]", "assert common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]", "assert common([5, 2, 2, 30, 654, 5, 1], [3, 3, 2, 10, 6, 657, 126]) == [2]", "assert common([2, 7, 4, 3], [8, 7, 5]) == [7]", "assert common([4, 5, 7, 12], [7, 1]) == [7]", "assert common([9, 3, 7, 4], [4, 2, 4]) == [4]", "assert common([3, 1, 3, 10], [3, 3, 9]) == [3]", "assert common([4, 4, 1, 37, 654, 7, 5], [3, 11, 2, 6, 9, 656, 120]) == []", "assert common([2, 6, 2, 8], [5, 2]) == [2]", "assert common([2, 4, 3, 12], [4, 5, 6]) == [4]", "assert common([4, 4, 7, 8], [4, 4, 9]) == [4]", "assert common([1, 6, 6, 12], [6, 2, 9]) == [6]", "assert common([2, 7, 1, 4], [1, 2, 1]) == [1, 2]", "assert common([2, 5, 6, 32, 649, 3, 9], [8, 6, 1, 4, 4, 658, 117]) == [6]", "assert common([2, 1, 5, 37, 657, 7, 1], [4, 9, 3, 1, 12, 649, 122]) == [1]", "assert common([5, 5, 7, 7], [5, 2]) == [5]", "assert common([5, 3, 2, 8], [3, 2]) == [2, 3]", "assert common([5, 4, 5, 32, 655, 6, 2], [2, 10, 4, 2, 14, 656, 117]) == [2, 4]", "assert common([3, 4, 4, 8], [3, 3, 9]) == [3]", "assert common([5, 2, 1, 3], [8, 3]) == [3]", "assert common([3, 8, 3, 35, 651, 4, 2], [1, 12, 6, 10, 4, 654, 119]) == [4]", "assert common([5, 6, 4, 8], [3, 7, 2]) == []", "assert common([7, 7, 5, 11], [3, 4]) == []", "assert common([4, 3, 2, 8], []) == []", "assert common([7, 7, 7, 3], [2, 4]) == []", "assert common([2, 9, 3, 36, 649, 6, 7], [10, 12, 4, 4, 14, 656, 116]) == []", "assert common([3, 8, 6, 6], [4, 3, 3]) == [3]", "assert common([1, 8, 7, 3], [2, 6]) == []", "assert common([1, 4, 5, 11], [1, 6, 1]) == [1]", "assert common([6, 2, 3, 8], [7, 6, 8]) == [6, 8]", "assert common([1, 7, 4, 30, 653, 1, 1], [6, 9, 2, 2, 13, 650, 120]) == []", "assert common([6, 8, 4, 32, 657, 7, 6], [4, 10, 1, 5, 14, 652, 120]) == [4]", "assert common([2, 7, 7, 32, 650, 5, 6], [7, 2, 4, 3, 13, 654, 117]) == [2, 7]", "assert common([1, 4, 7, 30, 658, 3, 10], [6, 7, 3, 10, 10, 658, 117]) == [3, 7, 10, 658]", "assert common([8, 4, 1, 9], [6, 3]) == []", "assert common([2, 1, 4, 37, 657, 3, 7], [8, 5, 5, 10, 7, 654, 121]) == [7]", "assert common([9, 7, 7, 7], [5, 2]) == []", "assert common([4, 6, 3, 31, 648, 7, 10], [1, 10, 4, 7, 7, 653, 117]) == [4, 7, 10]", "assert common([6, 5, 2, 3], [3, 3, 3]) == [3]", "assert common([4, 4, 1, 8], [1, 5, 7]) == [1]", "assert common([8, 4, 6, 5], [1, 1]) == []", "assert common([4, 5, 3, 10], [7, 5]) == [5]", "assert common([7, 1, 7, 13], [3, 1]) == [1]", "assert common([1, 5, 5, 29, 655, 4, 1], [5, 3, 2, 1, 5, 648, 118]) == [1, 5]", "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "assert common([7, 7, 1, 4], [5, 6]) == []", "assert common([5, 4, 2, 36, 648, 7, 10], [6, 8, 1, 5, 11, 649, 126]) == [5]", "assert common([8, 1, 1, 3], [5, 6]) == []", "assert common([6, 3, 6, 3], [8, 5, 8]) == []", "assert common([6, 8, 7, 32, 654, 7, 3], [7, 7, 2, 5, 10, 654, 123]) == [7, 654]", "assert common([2, 2, 6, 11], [5, 6, 1]) == [6]", "assert common([1, 4, 6, 39, 653, 4, 3], [6, 12, 2, 3, 14, 654, 116]) == [3, 6]", "assert common([1, 3, 4, 9], [7, 3]) == [3]", "assert common([9, 6, 6, 7], [7, 7, 1]) == [7]", "assert common([5, 6, 2, 34, 654, 3, 7], [7, 9, 1, 7, 8, 650, 122]) == [7]", "assert common([8, 2, 7, 4], [7, 7, 1]) == [7]", "assert common([3, 2, 1, 37, 654, 7, 6], [2, 3, 2, 6, 4, 649, 123]) == [2, 3, 6]", "assert common([9, 2, 7, 4], [5, 4, 1]) == [4]", "assert common([8, 1, 4, 10], [4, 2]) == [4]", "assert common([2, 8, 5, 10], [8, 4]) == [8]", "assert common([8, 4, 4, 6], [3, 6]) == [6]", "assert common([3, 6, 6, 7], [7, 4, 2]) == [7]", "assert common([3, 4, 3, 11], [4, 1, 7]) == [4]", "assert common([3, 1, 4, 5], [1, 1]) == [1]", "assert common([3, 2, 5, 37, 652, 2, 3], [5, 4, 6, 7, 9, 651, 120]) == [5]"], "nl": "Return sorted unique common elements for two lists.\n    ", "func": "def common(l1: list, l2: list):", "examples": ">>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    ", "completions": ["from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Return sorted unique elements that are common to both lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n    '''\n    # Convert lists to sets to find common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection result to a list\n    result_list = list(intersection)\n    \n    # Sort the list\n    result_list.sort()\n    \n    return result_list\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    Finds the common elements between two lists and returns them in a sorted list.\n\n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n\n    Returns:\n        list: A sorted list of common elements.\n    \"\"\"\n    # Convert both lists to sets to find the intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection result to a sorted list\n    sorted_common_elements = sorted(list(intersection))\n    \n    # Return the sorted list of common elements\n    return sorted_common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Return sorted unique elements that are common to both lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n    '''\n    # Convert both lists to sets to find the intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection result back to a list\n    result_list = list(intersection)\n    \n    # Sort the list\n    result_list.sort()\n    \n    # Return the sorted list\n    return result_list\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Return sorted unique elements that are common to both lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    '''\n    # Convert both input lists to sets to remove duplicates\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find intersection of sets\n    common_elements = set1.intersection(set2)\n    \n    # Convert the resulting set of common elements back to a list\n    common_list = list(common_elements)\n    \n    # Sort the list\n    common_list.sort()\n    \n    # Return the sorted list\n    return common_list\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted unique elements that are common to both lists.\n    Args:\n        l1 (list): First list of elements.\n        l2 (list): Second list of elements.\n    Returns:\n        list: Sorted list of unique common elements.\n    Examples:\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n    '''\n    # Convert lists to sets to find the intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection result back to a list\n    result_list = list(intersection)\n    \n    # Sort the list to ensure the output is in ascending order\n    result_list.sort()\n    \n    # Return the sorted list\n    return result_list\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Return sorted unique elements that are common to both lists.\n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n    Returns:\n        list: A sorted list of unique common elements.\n    Examples:\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n    '''\n    # Convert both input lists to sets to find the intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection result back to a list\n    result_list = list(intersection)\n    \n    # Sort the list to ensure the output is in ascending order\n    result_list.sort()\n    \n    # Return the sorted list\n    return result_list\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    Returns a sorted list of unique elements common to both input lists.\n\n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n\n    Returns:\n        list: A sorted list of unique elements common to both input lists.\n    \"\"\"\n    # Convert both lists to sets to find the intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    intersection = set1.intersection(set2)\n    \n    # Convert the resulting set to a list\n    common_elements = list(intersection)\n    \n    # Sort the list\n    common_elements.sort()\n    \n    # Use a set to ensure uniqueness\n    unique_common_elements = list(set(common_elements))\n    \n    return unique_common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Return sorted unique elements that are common to both lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    '''\n    # Convert lists to sets to find the intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection result to a list\n    common_elements = list(intersection)\n    \n    # Sort the list\n    common_elements.sort()\n    \n    # Ensure uniqueness by converting to a set and back to a list\n    unique_common_elements = list(set(common_elements))\n    \n    return unique_common_elements\n", "from typing import List\n## main.py\nfrom builtins import set, list\n\ndef common(l1: list, l2: list) -> list:\n    '''Return sorted unique elements that are common to both lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    '''\n    # Convert lists to sets to find the intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection result back to a list\n    common_elements = list(intersection)\n    \n    # Sort the list\n    common_elements.sort()\n    \n    # Remove duplicates by converting the list to a set again and back to a list\n    unique_common_elements = list(set(common_elements))\n    \n    # Return the final sorted list of unique common elements\n    return unique_common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    This function takes two lists and returns a sorted list of common elements.\n    \n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n    \n    Returns:\n        list: A sorted list of common elements.\n    \"\"\"\n    # Convert both lists to sets to find the intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection result to a list\n    common_elements = list(intersection)\n    \n    # Sort the list of common elements\n    common_elements.sort()\n    \n    # Return the sorted list of common elements\n    return common_elements\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that returns a sorted list of unique elements common to both input lists. The function should handle lists of various lengths and types of elements, ensuring it is efficient and accurate. The output should be sorted in ascending order, which is a common requirement for such functions.\nrequirement pool:\n- The function should return a sorted list of unique common elements from two input lists.\n- The function should handle lists with different lengths and types of elements.\n- The function should be efficient and fast in processing large datasets.\n- The function should be easy to integrate into existing projects.\nTo create a function that returns a sorted list of unique elements common to both input lists, we will use Python's built-in set operations, which are efficient and well-suited for this task. We will ensure the function handles lists with varying lengths and types of elements, and it will be optimized for performance to handle large datasets effectively.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common elements': elements that appear in both lists\n    'unique elements': elements that are not repeated in the result\n    'sorted list': elements in the result are arranged in ascending order\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Convert both lists to sets to find common elements.\n    - Convert the result back to a list.\n    - Sort the list.\n    - Use a set to ensure uniqueness.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([], [1, 2, 3]) = []\n    explanation: An empty list has no elements to compare, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    explanation: The number 2 is the only element that appears in both lists, and since we need unique elements, the result is [2].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic can handle cases where one or both lists are empty by returning an empty list.\n", "requirement analysis:\nThe original requirements call for a function that returns a sorted list of unique elements common to both input lists. This is a straightforward task that can be efficiently implemented using Python's set operations. The function should handle both integers and potentially large numbers, ensuring it's versatile and scalable. The output should be sorted in ascending order, which is a standard requirement for such functions.\nrequirement pool:\n- The function should return a sorted list of unique common elements from two input lists.\n- The function should handle both integers and potentially large numbers efficiently.\n- The function should be optimized for performance to handle large datasets.\n- The function should be tested to ensure it works correctly even with lists that have repeated elements.\nWe will use Python's built-in set operations to efficiently find the intersection of the two lists and then convert the result to a sorted list to ensure the output is unique and sorted.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common elements': elements that appear in both lists\n    'unique elements': elements that are not repeated\n    'sorted': elements are arranged in ascending order\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Convert both lists to sets to find the intersection.\n    - Convert the intersection result back to a list.\n    - Sort the list to ensure the output is unique and sorted.\n    - Return the sorted list.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    Explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([], [1, 2, 3]) = []\n    Explanation: If one of the lists is empty, there can be no common elements, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    Explanation: The number 2 appears twice in both lists, so it is the only common element, and it should be returned once in the sorted list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already covers the case where one or both lists are empty, and it will return an empty list as expected.\n", "requirement analysis:\nThe requirement is to create a function that finds the common elements between two lists, ensuring the output is unique and sorted. The function should handle both small and large numbers efficiently. The user stories and competitive analysis will help in understanding the user expectations and the market standards.\nrequirement pool:\n- The function should return a list of common elements that are unique to both input lists.\n- The function should sort the common elements in ascending order.\n- The function should handle lists with both integers and large numbers efficiently.\n- The function should be simple and easy to understand.\nTo create a function that efficiently finds the common elements between two lists, ensuring the output is unique and sorted, we will use Python's built-in data structures and set operations. The function will convert each list to a set to find the intersection, then convert the result back to a list and sort it.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common elements': means elements that appear in both lists\n    'unique elements': means the result should not have duplicate values\n    'sorted': means the result should be in ascending order\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Convert both lists to sets to find the intersection.\n    - Convert the intersection result back to a list.\n    - Sort the list.\n    - Return the sorted list.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([], [1, 2, 3]) = []\n    explanation: If one of the lists is empty, there can be no common elements, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    explanation: The number 2 is the only common element between the two lists, and since the result should be unique, the expected output is [2].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic can handle cases where one or both lists are empty, as it will result in an empty output.\n", "requirement analysis:\nThe original requirements call for a function that returns sorted unique elements common to two lists. This is a common problem in data processing and requires a solution that is both efficient and accurate. The function should handle lists of varying sizes and types, including large datasets and potential duplicates within the lists.\nrequirement pool:\n- The function should return the common elements sorted in ascending order.\n- The function should ensure that the result contains only unique elements.\n- The function should handle lists with varying lengths efficiently.\n- The function should be optimized for performance, especially with large datasets.\n- The function should handle edge cases, such as lists with no common elements.\nTo implement the function efficiently, we will leverage Python's built-in set operations, which are optimized for performance. We will convert the input lists to sets to eliminate duplicates and then use set intersection to find common elements. Finally, we will convert the result back to a list and sort it.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common elements': elements that appear in both lists\n    'unique elements': elements that are not duplicated within each list\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Convert both input lists to sets to remove duplicates.\n    (2) Use set intersection to find common elements between the two sets.\n    (3) Convert the resulting set of common elements back to a list.\n    (4) Sort the list of common elements.\n    (5) Return the sorted list.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([], [1, 2, 3]) = []\n    explanation: An empty list has no elements to compare, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    explanation: The number 2 is the only common element between the two lists, so the expected output is a list containing 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic will return an empty list for cases where there are no common elements or when one of the lists is empty.\n", "requirement analysis:\nThe original requirements call for a function that returns a sorted list of unique elements common to two input lists. This is a straightforward yet essential functionality that is crucial for various applications, including data analysis and manipulation. The function should handle both small and large datasets efficiently, ensuring that the results are accurate and visually appealing.\nrequirement pool:\n- Implement the function to return sorted unique common elements from two lists\n- Ensure the function is optimized for performance, handling large datasets efficiently\n- Develop a user-friendly interface for easy interaction with the function\n- Design a visually appealing interface to enhance user experience\n- Test the function with various edge cases to ensure robustness\nTo implement the function that returns sorted unique elements common to two input lists, we will use Python's built-in data structures and set operations for efficiency. The function will first convert the lists to sets to find the intersection, then convert the result back to a list and sort it to ensure the output meets the requirements.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common elements': elements that appear in both lists\n    'unique elements': elements that are not repeated in the result\n    'sorted order': elements should be in ascending order\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Convert both input lists to sets to find the intersection.\n    (2) Convert the intersection result back to a list.\n    (3) Sort the list to ensure the output is in ascending order.\n    (4) Return the sorted list.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([], [1, 2, 3]) = []\n    explanation: An empty list has no elements to compare, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    explanation: The number 2 is the only element that appears in both lists, and since the result should be unique, we only include one instance of 2 in the output.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already covers the case where one or both lists are empty, and it will return an empty list as expected.\n", "requirement analysis:\nThe function needs to efficiently find common elements between two lists, ensuring uniqueness and sorting. It should handle both small and large datasets effectively. The output should be sorted and free of duplicates.\nrequirement pool:\n- Implement a function to find common elements between two lists\n- Ensure the function returns unique and sorted results\n- Optimize the function for performance on large datasets\n- Include error handling for unexpected input types\n- Document the function clearly for user understanding\nTo implement the function efficiently, we will use Python's built-in set operations, which are optimized for performance and handle duplicates effectively. The function will convert both input lists to sets to find the intersection, then convert the result back to a list and sort it to ensure the output is unique and sorted.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common elements': elements that appear in both lists\n    'unique elements': elements that are not duplicated in the result\n    'sorted order': the output list should be in ascending order\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Convert both input lists to sets to find the intersection.\n    (2) Convert the intersection result back to a list.\n    (3) Sort the list to ensure the output is in ascending order.\n    (4) Return the sorted list.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([], [1, 2, 3]) = []\n    explanation: An empty list has no elements to compare, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    explanation: The number 2 is the only common element, and it appears in both lists. The output should include only one instance of 2 due to the requirement for unique elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The built-in set operations and list sorting will naturally handle cases where one or both input lists are empty.\n", "requirement analysis:\nThe requirement is to create a function that returns a sorted list of unique elements common to both input lists. The function should handle basic list operations efficiently and provide clear, user-friendly output.\nrequirement pool:\n- The function should return a sorted list of unique common elements.\n- The function should be efficient and handle basic list operations.\n- The function should provide a user-friendly interface.\n- The function should be tested for edge cases and performance.\nTo implement the function that returns a sorted list of unique elements common to both input lists, we will use Python's built-in data structures and set operations for efficiency. The function will take two lists as input, find their intersection, and return a sorted list of unique elements.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common elements': elements that appear in both lists\n    'unique elements': elements that are not repeated\n    'sorted list': elements in ascending order\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Convert both lists to sets to find the intersection.\n    - Convert the resulting set to a list.\n    - Sort the list.\n    - Use a set to ensure uniqueness.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([], [1, 2, 3]) = []\n    explanation: An empty list has no elements to compare, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    explanation: The number 2 is the only common element, and since we need unique elements, the output is [2].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already covers the case where one or both lists are empty, returning an empty list.\n", "requirement analysis:\nThe requirement is to create a function that returns a sorted list of unique elements common to both input lists. The function should handle basic list operations efficiently and provide clear, user-friendly output.\nrequirement pool:\n- Implement a function that takes two lists as input and returns a sorted list of common elements.\n- Ensure the function returns unique elements only.\n- Optimize the function for efficiency to handle large lists.\n- Develop a user-friendly interface for easy interaction.\nTo implement the function that returns a sorted list of unique elements common to both input lists, we will use Python's built-in data structures and set operations. This approach ensures efficiency and simplicity. We will convert the lists to sets to perform set intersection, which is efficient for finding common elements. After obtaining the intersection, we will convert the result back to a list, sort it, and ensure uniqueness by converting it to a set and back to a list. This method leverages Python's powerful standard library for data manipulation.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common elements': elements that appear in both lists\n    'unique elements': elements that are present in the intersection of the two lists\n    'sorted list': elements in ascending order\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Convert both lists to sets to find the intersection.\n    - Convert the intersection result to a list.\n    - Sort the list.\n    - Convert the sorted list to a set to ensure uniqueness.\n    - Convert the set back to a list and return it.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([], [1, 2, 3]) = []\n    explanation: An empty list has no elements to compare, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    explanation: The number 2 is the only element that appears in both lists, so the expected output is a list containing 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic already covers cases where one or both lists are empty, as it directly returns an empty list in such cases.\n", "requirement analysis:\nThe requirement is to create a function that returns a sorted list of unique elements common to both input lists. This function should be efficient and handle basic list operations well. The function should be compatible with Python's standard library and be easy to integrate into existing projects.\nrequirement pool:\n- The function should return a sorted list of unique common elements.\n- The function should handle lists of varying sizes efficiently.\n- The function should be compatible with Python's standard library.\n- The function should be easy to integrate into existing projects.\n- The function should handle edge cases such as empty lists or lists with no common elements.\nWe will use Python's built-in set operations to efficiently find the intersection of the two input lists. After finding the intersection, we will convert the result to a list, sort it, and remove duplicates to meet the requirement of returning a sorted list of unique common elements.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common elements': means elements that appear in both lists\n    'unique elements': means elements that are not repeated in the result\n    'sorted list': means the elements in the result are in ascending order\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Convert both lists to sets to find the intersection.\n    (2) Convert the intersection result back to a list.\n    (3) Sort the list.\n    (4) Remove duplicates by converting the list to a set again and back to a list.\n    (5) Return the final sorted list of unique common elements.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 1, 2, 2], [2, 2, 3, 3]) = [2]\n    explanation: The number 2 is the only common element, and it appears twice in both lists, so it should only appear once in the result.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The built-in set operations will automatically handle cases where there are no common elements.\n\n# [core concept]\n    'common elements': means elements that appear in both lists\n    'unique elements': means elements that are not repeated in the result\n    'sorted list': means the elements in the result are in ascending order\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Convert both lists to sets to find the intersection.\n    (2) Convert the intersection result back to a list.\n    (3) Sort the list.\n    (4) Remove duplicates by converting the list to a set again and back to a list.\n    (5) Return the final sorted list of unique common elements.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 1, 2, 2], [2, 2, 3, 3]) = [2]\n    explanation: The number 2 is the only common element, and it appears twice in both lists, so it should only appear once in the result.\n", "requirement analysis:\nThe original requirements call for a function that returns a sorted list of unique elements common to both input lists. This involves intersection, sorting, and ensuring uniqueness. The function should handle various list sizes efficiently.\nrequirement pool:\n- Implement the function to return common elements between two lists.\n- Ensure the result is sorted and contains only unique elements.\n- Optimize the function for both small and large lists.\n- Include error handling for non-list inputs.\n- Add documentation and examples to the function.\nTo implement the function efficiently and ensure it handles both small and large lists, we will use Python's built-in set operations which are optimized for performance. The function will first convert the lists to sets to find the intersection, then convert the result back to a list and sort it. This approach ensures both uniqueness and sorting of the common elements.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common elements': elements that appear in both lists\n    'unique elements': elements that are present in both lists without duplication\n    'sorting': arranging elements in ascending order\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Convert both lists to sets to find the intersection.\n    - Convert the intersection result back to a list.\n    - Sort the list of common elements.\n    - Return the sorted list.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([], [1, 2, 3]) = []\n    explanation: An empty list has no elements to compare, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    explanation: The number 2 is the only element that appears in both lists, so the expected output is a list containing 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic already covers cases where one or both lists are empty, as it directly returns an empty list in such scenarios.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.95, 0.95, 1.0], "pass_results": [true, true, true, true, true, true, false, false, false, true], "pass_test_cases_num": [100, 100, 100, 100, 100, 100, 95, 95, 95, 100], "completion": "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    This function takes two lists and returns a sorted list of common elements.\n    \n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n    \n    Returns:\n        list: A sorted list of common elements.\n    \"\"\"\n    # Convert both lists to sets to find the intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection result to a list\n    common_elements = list(intersection)\n    \n    # Sort the list of common elements\n    common_elements.sort()\n    \n    # Return the sorted list of common elements\n    return common_elements\n", "passed": true, "pass": true, "pass_num": 7, "round": 383, "repair_prompt": ["def common(l1: list, l2: list):\t\n'''Return sorted unique elements that are common to both lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", " def common(l1: list, l2: list):\n    '''Return sorted unique elements that are common to both lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    '''\n   ", " def common(l1: list, l2: list):\n    '''Return sorted unique elements that are common to both lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    '''\n"], "mutate_method": "condense_two2one", "parent_index": 315}
