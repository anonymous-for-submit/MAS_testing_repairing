{"task_id": "HumanEval/161", "prompt": "def solve(s):\t\n'''You are given a string s.\n    if s[i] is a letter, change its case from uppercase to lowercase or the opposite,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\nExamples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    '''", "entry_point": "solve", "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "test": ["def check(solve):\n\tassert solve(\"#ryv@$l*\") == '#RYV@$L*'", "def check(solve):\n\tassert solve(\"BjdhsNs\") == 'bJDHSnS'", "def check(solve):\n\tassert solve(\"$883%3/\") == '/3%388$'", "def check(solve):\n\tassert solve(\"QnNQfv\") == 'qNnqFV'", "def check(solve):\n\tassert solve(\"o3LWaIl4\") == 'O3lwAiL4'", "def check(solve):\n\tassert solve(\"zt*#m&v\") == 'ZT*#M&V'", "def check(solve):\n\tassert solve(\"wDgT\") == 'WdGt'", "def check(solve):\n\tassert solve(\"ab\") == \"AB\"", "def check(solve):\n\tassert solve(\"=E!NyLi\") == '=e!nYlI'", "def check(solve):\n\tassert solve(\"jZVuQ\") == 'JzvUq'", "def check(solve):\n\tassert solve(\"UKg@xpM~G\") == 'ukG@XPm~g'", "def check(solve):\n\tassert solve(\"%cCcq#\") == '%CcCQ#'", "def check(solve):\n\tassert solve(\"++A^/?xV\") == '++a^/?Xv'", "def check(solve):\n\tassert solve(\"7_%\") == '%_7'", "def check(solve):\n\tassert solve(\"qon\") == 'QON'", "def check(solve):\n\tassert solve(\"giiqdy\") == 'GIIQDY'", "def check(solve):\n\tassert solve(\"~@8%\") == '%8@~'", "def check(solve):\n\tassert solve(\"^@B\") == '^@b'", "def check(solve):\n\tassert solve(\"?UGciW\") == '?ugCIw'", "def check(solve):\n\tassert solve(\"17000556\") == '65500071'", "def check(solve):\n\tassert solve(\"nfl*&=+$@\") == 'NFL*&=+$@'", "def check(solve):\n\tassert solve(\"wSdcA\") == 'WsDCa'", "def check(solve):\n\tassert solve(\"luG9*?%\") == 'LUg9*?%'", "def check(solve):\n\tassert solve(\"5$0!@\") == '@!0$5'", "def check(solve):\n\tassert solve(\"sxFaMa\") == 'SXfAmA'", "def check(solve):\n\tassert solve(\"?ao\") == '?AO'", "def check(solve):\n\tassert solve(\"k&!_\") == 'K&!_'", "def check(solve):\n\tassert solve(\"-|MSfK\") == '-|msFk'", "def check(solve):\n\tassert solve(\"5%@\") == '@%5'", "def check(solve):\n\tassert solve(\"=epet*orq\") == '=EPET*ORQ'", "def check(solve):\n\tassert solve(\"^dHUM-y\") == '^Dhum-Y'", "def check(solve):\n\tassert solve(\"npKwSAD\") == 'NPkWsad'", "def check(solve):\n\tassert solve(\"55=9/9\") == '9/9=55'", "def check(solve):\n\tassert solve(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:", "def check(solve):\n\tassert solve(\"*^JOyeSI\") == '*^joYEsi'", "def check(solve):\n\tassert solve(\"yzzdc\") == 'YZZDC'", "def check(solve):\n\tassert solve(\"i!X&/T\") == 'I!x&/t'", "def check(solve):\n\tassert solve(\"mlB-*F\") == 'MLb-*f'", "def check(solve):\n\tassert solve(\"856\") == '658'", "def check(solve):\n\tassert solve(\"ifafP-OoTK%\") == 'IFAFp-oOtk%'", "def check(solve):\n\tassert solve(\"Xug\") == 'xUG'", "def check(solve):\n\tassert solve(\"~2~@0\") == '0@~2~'", "def check(solve):\n\tassert solve(\"UMm:m\") == 'umM:M'", "def check(solve):\n\tassert solve(\"6812832\") == '2382186'", "def check(solve):\n\tassert solve(\"QDF:CXB\") == 'qdf:cxb'", "def check(solve):\n\tassert solve(\"5-=@&*\") == '*&@=-5'", "def check(solve):\n\tassert solve(\"761~^_%~4\") == '4~%_^~167'", "def check(solve):\n\tassert solve(\"#$a^D\") == \"#$A^d\"", "def check(solve):\n\tassert solve(\"4hzTAP_e\") == '4HZtap_E'", "def check(solve):\n\tassert solve(\"2058786\") == '6878502'", "def check(solve):\n\tassert solve(\"yErHfPuhE\") == 'YeRhFpUHe'", "def check(solve):\n\tassert solve(\"*u~\") == '*U~'", "def check(solve):\n\tassert solve(\"g*chm\") == 'G*CHM'", "def check(solve):\n\tassert solve(\"enxhq\") == 'ENXHQ'", "def check(solve):\n\tassert solve(\"ctpx\") == 'CTPX'", "def check(solve):\n\tassert solve(\"j$&Wd\") == 'J$&wD'", "def check(solve):\n\tassert solve(\"ji$rpiwCJ\") == 'JI$RPIWcj'", "def check(solve):\n\tassert solve(\"cjG~zXx\") == 'CJg~ZxX'", "def check(solve):\n\tassert solve(\"dgksb\") == 'DGKSB'", "def check(solve):\n\tassert solve(\"827_~+=6:\") == ':6=+~_728'", "def check(solve):\n\tassert solve(\"vr_d$kBQ\") == 'VR_D$Kbq'", "def check(solve):\n\tassert solve(\"389627754\") == '457726983'", "def check(solve):\n\tassert solve(\"+:#\") == '#:+'", "def check(solve):\n\tassert solve(\"prytYOIw\") == 'PRYTyoiW'", "def check(solve):\n\tassert solve(\"+1/05*!?+\") == '+?!*50/1+'", "def check(solve):\n\tassert solve(\"$u%lZTsz\") == '$U%LztSZ'", "def check(solve):\n\tassert solve(\"qyAKc\") == 'QYakC'", "def check(solve):\n\tassert solve(\"/@-\") == '-@/'", "def check(solve):\n\tassert solve(\"iiyw\") == 'IIYW'", "def check(solve):\n\tassert solve(\"#a@C\") == \"#A@c\"", "def check(solve):\n\tassert solve(\"49623838\") == '83832694'", "def check(solve):\n\tassert solve(\"u:kx!*\") == 'U:KX!*'", "def check(solve):\n\tassert solve(\"gsl\") == 'GSL'", "def check(solve):\n\tassert solve(\"jlycko\") == 'JLYCKO'", "def check(solve):\n\tassert solve(\"MUSKIE\") == 'muskie'", "def check(solve):\n\tassert solve(\":TDr\") == ':tdR'", "def check(solve):\n\tassert solve(\"bkd\") == 'BKD'", "def check(solve):\n\tassert solve(\"DNOZ2XKDMJZSwC$\") == 'dnoz2xkdmjzsWc$'", "def check(solve):\n\tassert solve(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.", "def check(solve):\n\tassert solve(\"n$tkw\") == 'N$TKW'", "def check(solve):\n\tassert solve(\"48954\") == '45984'", "def check(solve):\n\tassert solve(\"LlWj5FD\") == 'lLwJ5fd'", "def check(solve):\n\tassert solve(\"AsDf\") == \"aSdF\"", "def check(solve):\n\tassert solve(\"@!93/5**@\") == '@**5/39!@'", "def check(solve):\n\tassert solve(\"VmVDPkI\") == 'vMvdpKi'", "def check(solve):\n\tassert solve(\"mOn\") == 'MoN'", "def check(solve):\n\tassert solve(\"059646105\") == '501646950'", "def check(solve):\n\tassert solve(\"huo^\") == 'HUO^'", "def check(solve):\n\tassert solve(\"ghgnw\") == 'GHGNW'", "def check(solve):\n\tassert solve(\"gne\") == 'GNE'", "def check(solve):\n\tassert solve(\"~~%==41\") == '14==%~~'", "def check(solve):\n\tassert solve(\"%_uoz/#?L\") == '%_UOZ/#?l'", "def check(solve):\n\tassert solve(\"w@l+zd\") == 'W@L+ZD'", "def check(solve):\n\tassert solve(\"1234\") == \"4321\"", "def check(solve):\n\tassert solve(\"EsvNrg\") == 'eSVnRG'", "def check(solve):\n\tassert solve(\"pstVx\") == 'PSTvX'", "def check(solve):\n\tassert solve(\"kLA#y:NC\") == 'Kla#Y:nc'", "def check(solve):\n\tassert solve(\"ePOjFeuu\") == 'EpoJfEUU'", "def check(solve):\n\tassert solve(\"GPJae+?*a\") == 'gpjAE+?*A'", "def check(solve):\n\tassert solve(\"Uc$$xCSQ0cN~\") == 'uC$$Xcsq0Cn~'", "def check(solve):\n\tassert solve(\"gtvtsr\") == 'GTVTSR'", "def check(solve):\n\tassert solve(\"#AsdfW^45\") == \"#aSDFw^45\"", "def check(solve):\n\tassert solve(\"6971168\") == '8611796'", "def check(solve):\n\tassert solve(\"??rwE\") == '??RWe'", "def check(solve):\n\tassert solve(\"HMYxK\") == 'hmyXk'", "def check(solve):\n\tassert solve(\"gcflna\") == 'GCFLNA'", "def check(solve):\n\tassert solve(\"~+/#\") == '#/+~'", "def check(solve):\n\tassert solve(\"glgh\") == 'GLGH'", "def check(solve):\n\tassert solve(\"?gn~\") == '?GN~'", "def check(solve):\n\tassert solve(\"73713138\") == '83131737'", "def check(solve):\n\tassert solve(\"54138\") == '83145'", "def check(solve):\n\tassert solve(\"oGzZO!NOb@Lty\") == 'OgZzo!noB@lTY'", "def check(solve):\n\tassert solve(\"Q&LKD*BmV\") == 'q&lkd*bMv'", "def check(solve):\n\tassert solve(\"13431299\") == '99213431'", "def check(solve):\n\tassert solve(\"~/uc/@p^h\") == '~/UC/@P^H'", "def check(solve):\n\tassert solve(\"4kqV&&/6+Lc\") == '4KQv&&/6+lC'", "def check(solve):\n\tassert solve(\"fqY\") == 'FQy'", "def check(solve):\n\tassert solve(\"|n*e~bx-\") == '|N*E~BX-'", "def check(solve):\n\tassert solve(\"Pj+3w:31N!s6\") == 'pJ+3W:31n!S6'", "def check(solve):\n\tassert solve(\"++skzZ\") == '++SKZz'", "def check(solve):\n\tassert solve(\"%kmlC*s\") == '%KMLc*S'", "def check(solve):\n\tassert solve(\"232948\") == '849232'", "def check(solve):\n\tassert solve(\"613\") == '316'", "def check(solve):\n\tassert solve(\"!tmFhu\") == '!TMfHU'", "def check(solve):\n\tassert solve(\"+fDs:f\") == '+FdS:F'", "def check(solve):\n\tassert solve(\"XAdrNtUNr\") == 'xaDRnTunR'", "def check(solve):\n\tassert solve(\"cqiau\") == 'CQIAU'", "def check(solve):\n\tassert solve(\"340988\") == '889043'"], "test_case_list": ["assert solve(\"#ryv@$l*\") == '#RYV@$L*'", "assert solve(\"BjdhsNs\") == 'bJDHSnS'", "assert solve(\"$883%3/\") == '/3%388$'", "assert solve(\"QnNQfv\") == 'qNnqFV'", "assert solve(\"o3LWaIl4\") == 'O3lwAiL4'", "assert solve(\"zt*#m&v\") == 'ZT*#M&V'", "assert solve(\"wDgT\") == 'WdGt'", "assert solve(\"ab\") == \"AB\"", "assert solve(\"=E!NyLi\") == '=e!nYlI'", "assert solve(\"jZVuQ\") == 'JzvUq'", "assert solve(\"UKg@xpM~G\") == 'ukG@XPm~g'", "assert solve(\"%cCcq#\") == '%CcCQ#'", "assert solve(\"++A^/?xV\") == '++a^/?Xv'", "assert solve(\"7_%\") == '%_7'", "assert solve(\"qon\") == 'QON'", "assert solve(\"giiqdy\") == 'GIIQDY'", "assert solve(\"~@8%\") == '%8@~'", "assert solve(\"^@B\") == '^@b'", "assert solve(\"?UGciW\") == '?ugCIw'", "assert solve(\"17000556\") == '65500071'", "assert solve(\"nfl*&=+$@\") == 'NFL*&=+$@'", "assert solve(\"wSdcA\") == 'WsDCa'", "assert solve(\"luG9*?%\") == 'LUg9*?%'", "assert solve(\"5$0!@\") == '@!0$5'", "assert solve(\"sxFaMa\") == 'SXfAmA'", "assert solve(\"?ao\") == '?AO'", "assert solve(\"k&!_\") == 'K&!_'", "assert solve(\"-|MSfK\") == '-|msFk'", "assert solve(\"5%@\") == '@%5'", "assert solve(\"=epet*orq\") == '=EPET*ORQ'", "assert solve(\"^dHUM-y\") == '^Dhum-Y'", "assert solve(\"npKwSAD\") == 'NPkWsad'", "assert solve(\"55=9/9\") == '9/9=55'", "assert solve(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:", "assert solve(\"*^JOyeSI\") == '*^joYEsi'", "assert solve(\"yzzdc\") == 'YZZDC'", "assert solve(\"i!X&/T\") == 'I!x&/t'", "assert solve(\"mlB-*F\") == 'MLb-*f'", "assert solve(\"856\") == '658'", "assert solve(\"ifafP-OoTK%\") == 'IFAFp-oOtk%'", "assert solve(\"Xug\") == 'xUG'", "assert solve(\"~2~@0\") == '0@~2~'", "assert solve(\"UMm:m\") == 'umM:M'", "assert solve(\"6812832\") == '2382186'", "assert solve(\"QDF:CXB\") == 'qdf:cxb'", "assert solve(\"5-=@&*\") == '*&@=-5'", "assert solve(\"761~^_%~4\") == '4~%_^~167'", "assert solve(\"#$a^D\") == \"#$A^d\"", "assert solve(\"4hzTAP_e\") == '4HZtap_E'", "assert solve(\"2058786\") == '6878502'", "assert solve(\"yErHfPuhE\") == 'YeRhFpUHe'", "assert solve(\"*u~\") == '*U~'", "assert solve(\"g*chm\") == 'G*CHM'", "assert solve(\"enxhq\") == 'ENXHQ'", "assert solve(\"ctpx\") == 'CTPX'", "assert solve(\"j$&Wd\") == 'J$&wD'", "assert solve(\"ji$rpiwCJ\") == 'JI$RPIWcj'", "assert solve(\"cjG~zXx\") == 'CJg~ZxX'", "assert solve(\"dgksb\") == 'DGKSB'", "assert solve(\"827_~+=6:\") == ':6=+~_728'", "assert solve(\"vr_d$kBQ\") == 'VR_D$Kbq'", "assert solve(\"389627754\") == '457726983'", "assert solve(\"+:#\") == '#:+'", "assert solve(\"prytYOIw\") == 'PRYTyoiW'", "assert solve(\"+1/05*!?+\") == '+?!*50/1+'", "assert solve(\"$u%lZTsz\") == '$U%LztSZ'", "assert solve(\"qyAKc\") == 'QYakC'", "assert solve(\"/@-\") == '-@/'", "assert solve(\"iiyw\") == 'IIYW'", "assert solve(\"#a@C\") == \"#A@c\"", "assert solve(\"49623838\") == '83832694'", "assert solve(\"u:kx!*\") == 'U:KX!*'", "assert solve(\"gsl\") == 'GSL'", "assert solve(\"jlycko\") == 'JLYCKO'", "assert solve(\"MUSKIE\") == 'muskie'", "assert solve(\":TDr\") == ':tdR'", "assert solve(\"bkd\") == 'BKD'", "assert solve(\"DNOZ2XKDMJZSwC$\") == 'dnoz2xkdmjzsWc$'", "assert solve(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.", "assert solve(\"n$tkw\") == 'N$TKW'", "assert solve(\"48954\") == '45984'", "assert solve(\"LlWj5FD\") == 'lLwJ5fd'", "assert solve(\"AsDf\") == \"aSdF\"", "assert solve(\"@!93/5**@\") == '@**5/39!@'", "assert solve(\"VmVDPkI\") == 'vMvdpKi'", "assert solve(\"mOn\") == 'MoN'", "assert solve(\"059646105\") == '501646950'", "assert solve(\"huo^\") == 'HUO^'", "assert solve(\"ghgnw\") == 'GHGNW'", "assert solve(\"gne\") == 'GNE'", "assert solve(\"~~%==41\") == '14==%~~'", "assert solve(\"%_uoz/#?L\") == '%_UOZ/#?l'", "assert solve(\"w@l+zd\") == 'W@L+ZD'", "assert solve(\"1234\") == \"4321\"", "assert solve(\"EsvNrg\") == 'eSVnRG'", "assert solve(\"pstVx\") == 'PSTvX'", "assert solve(\"kLA#y:NC\") == 'Kla#Y:nc'", "assert solve(\"ePOjFeuu\") == 'EpoJfEUU'", "assert solve(\"GPJae+?*a\") == 'gpjAE+?*A'", "assert solve(\"Uc$$xCSQ0cN~\") == 'uC$$Xcsq0Cn~'", "assert solve(\"gtvtsr\") == 'GTVTSR'", "assert solve(\"#AsdfW^45\") == \"#aSDFw^45\"", "assert solve(\"6971168\") == '8611796'", "assert solve(\"??rwE\") == '??RWe'", "assert solve(\"HMYxK\") == 'hmyXk'", "assert solve(\"gcflna\") == 'GCFLNA'", "assert solve(\"~+/#\") == '#/+~'", "assert solve(\"glgh\") == 'GLGH'", "assert solve(\"?gn~\") == '?GN~'", "assert solve(\"73713138\") == '83131737'", "assert solve(\"54138\") == '83145'", "assert solve(\"oGzZO!NOb@Lty\") == 'OgZzo!noB@lTY'", "assert solve(\"Q&LKD*BmV\") == 'q&lkd*bMv'", "assert solve(\"13431299\") == '99213431'", "assert solve(\"~/uc/@p^h\") == '~/UC/@P^H'", "assert solve(\"4kqV&&/6+Lc\") == '4KQv&&/6+lC'", "assert solve(\"fqY\") == 'FQy'", "assert solve(\"|n*e~bx-\") == '|N*E~BX-'", "assert solve(\"Pj+3w:31N!s6\") == 'pJ+3W:31n!S6'", "assert solve(\"++skzZ\") == '++SKZz'", "assert solve(\"%kmlC*s\") == '%KMLc*S'", "assert solve(\"232948\") == '849232'", "assert solve(\"613\") == '316'", "assert solve(\"!tmFhu\") == '!TMfHU'", "assert solve(\"+fDs:f\") == '+FdS:F'", "assert solve(\"XAdrNtUNr\") == 'xaDRnTunR'", "assert solve(\"cqiau\") == 'CQIAU'", "assert solve(\"340988\") == '889043'"], "nl": "You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    ", "func": "def solve(s):", "examples": "Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    ", "completions": ["from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    letters_found = False\n    result = []\n\n    for char in s:\n        if char.isalpha():\n            letters_found = True\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n\n    if not letters_found:\n        return ''.join(result[::-1])\n\n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function takes a string s as input and returns a string.\n    The function will check if the string contains any letters.\n    If it does, it will iterate through each character, toggling its case if it's a letter.\n    If the string contains no letters, it will reverse the string.\n    \"\"\"\n    # Check if the string contains any letters\n    contains_letters = any(char.isalpha() for char in s)\n    \n    if contains_letters:\n        # If the string contains letters, toggle their cases\n        result = []\n        for char in s:\n            if char.isupper():\n                result.append(char.lower())\n            elif char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char)\n        return ''.join(result)\n    else:\n        # If the string contains no letters, reverse the string\n        return s[::-1]\n\n# Example usage:\n# print(solve(\"1234\"))  # Output: \"4321\"\n# print(solve(\"ab\"))    # Output: \"AB\"\n# print(solve(\"#a@C\"))  # Output: \"#A@c\"\n", "from typing import List\n## main.py\n\nimport string\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function takes a string as input and returns a string as output.\n    The input string can contain any characters, and the output string will have its case toggled for letters\n    and will be reversed if no letters are present.\n    \"\"\"\n    # Check if the string contains any letters\n    contains_letters = any(char.isalpha() for char in s)\n    \n    if contains_letters:\n        # If letters are present, toggle case for each letter\n        result = [char.lower() if char.isupper() else char.upper() if char.islower() else char for char in s]\n        return ''.join(result)\n    else:\n        # If no letters are present, reverse the string\n        return s[::-1]\n\n# Example usage:\n# print(solve(\"Hello123\"))  # Output: \"hELLO123\"\n# print(solve(\"12345\"))     # Output: \"54321\"\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    Manipulates the input string based on the presence of letters.\n    \n    Args:\n        s (str): The input string to be manipulated.\n    \n    Returns:\n        str: The manipulated string.\n    \"\"\"\n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        # Toggle the case of each letter in the string\n        result = []\n        for char in s:\n            if char.isupper():\n                result.append(char.lower())\n            elif char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char)\n        return ''.join(result)\n    else:\n        # Reverse the string\n        return s[::-1]\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    Manipulates the input string based on the presence of letters.\n    \n    Args:\n        s (str): The input string to be manipulated.\n    \n    Returns:\n        str: The manipulated string.\n    \"\"\"\n    if any(char.isalpha() for char in s):\n        # Toggle the case of each letter in the string\n        manipulated_string = ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        # Reverse the string\n        manipulated_string = s[::-1]\n    \n    return manipulated_string\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    if any(char.isalpha() for char in s):\n        # Toggle the case of each letter\n        return ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        # Reverse the string\n        return s[::-1]\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    def is_letter(c: str) -> bool:\n        return c.isalpha()\n\n    def toggle_case(c: str) -> str:\n        return c.lower() if c.isupper() else c.upper()\n\n    if any(is_letter(char) for char in s):\n        result = []\n        for char in s:\n            if is_letter(char):\n                result.append(toggle_case(char))\n            else:\n                result.append(char)\n        return ''.join(result)\n    else:\n        return s[::-1]\n\n# Example usage:\n# print(solve(\"abc\"))  # Output: \"ABC\"\n# print(solve(\"123\"))  # Output: \"321\"\n# print(solve(\"!@#\"))  # Output: \"!@#\"\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    # Check if the string contains any letters\n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        # Toggle case for each letter in the string\n        result = []\n        for char in s:\n            if char.isupper():\n                result.append(char.lower())\n            elif char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char)\n        return ''.join(result)\n    else:\n        # Reverse the string if no letters are found\n        return s[::-1]\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    # Initialize an empty list to store the manipulated characters\n    result = []\n    \n    # Flag to check if any letter is found\n    has_letter = False\n    \n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is a letter\n        if char.isalpha():\n            # Toggle the case of the letter\n            result.append(char.swapcase())\n            has_letter = True\n        else:\n            # If not a letter, leave it unchanged\n            result.append(char)\n    \n    # If no letters were found, reverse the string\n    if not has_letter:\n        result.reverse()\n    \n    # Join the list of characters into a string and return it\n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    # Check if the string contains any letters\n    contains_letters = any(char.isalpha() for char in s)\n    \n    if contains_letters:\n        # Toggle case for each letter in the string\n        result = []\n        for char in s:\n            if char.isupper():\n                result.append(char.lower())\n            elif char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char)\n        return ''.join(result)\n    else:\n        # Reverse the string if it contains no letters\n        return s[::-1]\n"], "plans": ["requirement analysis:\nThe function needs to handle strings with letters and non-letters. It should toggle the case of letters and reverse the string if there are no letters. This requirement is clear and straightforward, focusing on string manipulation and conditional logic.\nrequirement pool:\n- Implement the function to toggle the case of letters and handle strings without letters by reversing them.\n- Ensure the application is user-friendly and provides clear feedback.\n- Design a responsive and visually appealing UI.\nWe will implement the function to toggle the case of letters and handle strings without letters by reversing them. This involves checking each character in the string, determining if it's a letter, and then toggling its case. If no letters are found, the string will be reversed.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case toggling': changing the case of a letter from uppercase to lowercase or vice versa.\n    'reversing a string': flipping the order of characters in a string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Iterate through each character in the string.\n    - Check if the character is a letter.\n    - If it is a letter, toggle its case.\n    - If it is not a letter, keep it as it is.\n    - After processing all characters, if no letters were found, reverse the string.\n    - Return the resulting string.\n\n# [edge case] \n    solve(\"1234\") = \"4321\"\n    Explanation: The string contains no letters, so the function reverses the string.\n    solve(\"ab\") = \"AB\"\n    Explanation: The string contains letters, so the function toggles their case.\n    solve(\"#a@C\") = \"#A@c\"\n    Explanation: The string contains letters, so the function toggles their case.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan already covers the case where no letters are present by reversing the string.\n\n# [core concept]\n    'case toggling': changing the case of a letter from uppercase to lowercase or vice versa.\n    'reversing a string': flipping the order of characters in a string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Iterate through each character in the string.\n    - Check if the character is a letter.\n    - If it is a letter, toggle its case.\n    - If it is not a letter, keep it as it is.\n    - After processing all characters, if no letters were found, reverse the string.\n    - Return the resulting string.\n\n# [edge case] \n    solve(\"1234\") = \"4321\"\n    Explanation: The string contains no letters, so the function reverses the string.\n    solve(\"ab\") = \"AB\"\n    Explanation: The string contains letters, so the function toggles their case.\n    solve(\"#a@C\") = \"#A@c\"\n    Explanation: The string contains letters, so the function toggles their case.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan already covers the case where no letters are present by reversing the string.\n", "requirement analysis:\nThe function needs to handle strings with mixed characters, including letters and non-letters. It should toggle the case of letters and reverse the string if there are no letters. The solution should be efficient and clear, ensuring easy integration and maintenance.\nrequirement pool:\n- Implement a function that can toggle the case of letters in a string.\n- Ensure the function can identify and handle strings without any letters by reversing them.\n- Design the user interface to be intuitive and visually appealing.\n- Optimize the code for performance and readability.\nWe will implement the function by first checking if the string contains any letters. If it does, we will iterate through each character, toggling its case if it's a letter. If the string contains no letters, we will reverse the string. This approach ensures that the function handles both cases efficiently and clearly.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case toggling': changing the case of a character from uppercase to lowercase or vice versa.\n    'reversing a string': reversing the order of characters in a string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    The function `solve(s)` will follow these steps:\n    1. Check if the string `s` contains any letters.\n    2. If it does, iterate through each character:\n       - If the character is a letter, toggle its case.\n       - If the character is not a letter, keep it as it is.\n    3. Return the modified string.\n    4. If the string contains no letters, reverse the string and return the result.\n\n# [edge case] \n    solve(\"1234\") = \"4321\"\n    Explanation: The string contains no letters, so we reverse the string.\n    solve(\"ab\") = \"AB\"\n    Explanation: The string contains letters, so we toggle their cases.\n    solve(\"#a@C\") = \"#A@c\"\n    Explanation: The string contains letters, so we toggle their cases.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan already covers the case where the string contains no letters by reversing the string.\n", "requirement analysis:\nThe function needs to handle strings with mixed characters, including letters and non-letters. It should toggle the case of letters and reverse the string if there are no letters. The requirements are clear and straightforward, focusing on string manipulation and conditional logic.\nrequirement pool:\n- Implement the function to toggle case of letters and keep non-letter characters unchanged.\n- Add a check to reverse the string if no letters are present.\n- Ensure the function is efficient and handles edge cases, such as empty strings or strings with only non-letter characters.\n- Design the function to be user-friendly and compatible with various programming environments.\nWe will implement the function by first checking if the string contains any letters. If it does, we will iterate through each character, toggling its case if it's a letter. If no letters are found, we will reverse the string. This approach ensures that the function handles both letter and non-letter characters appropriately and meets the requirements specified.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case toggling': changing the case of a character from uppercase to lowercase or vice versa.\n    'reversing a string': reversing the order of characters in a string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - First, check if the string contains any letters.\n    - If it does, iterate through each character and toggle its case if it's a letter.\n    - If no letters are found, reverse the string.\n\n# [edge case] \n    solve(\"Hello123\") = \"hELLO123\"\n    Explanation: The string contains letters, so we toggle the case of each letter.\n    solve(\"12345\") = \"54321\"\n    Explanation: The string contains no letters, so we reverse the string.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan already covers the case where the string contains no letters by reversing the string.\n", "requirement analysis:\nThe task requires a function that manipulates a string based on the content of the string. If the string contains letters, it should toggle their case. If there are no letters, it should reverse the string. This requirement is clear and straightforward, focusing on string manipulation and conditional logic.\nrequirement pool:\n- Implement the function to toggle case of letters and reverse the string if no letters are present.\n- Ensure the function is efficient and handles edge cases such as empty strings or strings with only non-letter characters.\n- Develop a user-friendly interface for easy interaction with the function.\nWe will implement a function that takes a string as input and manipulates it based on the presence of letters. If the string contains letters, it will toggle the case of each letter. If the string contains no letters, it will reverse the string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case manipulation': changing the case of letters from uppercase to lowercase or vice versa.\n    'reversing a string': flipping the order of characters in a string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Check if the string contains any letters.\n    (2) If it does, iterate through each character in the string:\n        - If the character is a letter, toggle its case.\n        - If the character is not a letter, leave it unchanged.\n    (3) If the string does not contain any letters, reverse the string.\n    (4) Return the resulting string.\n\n# [edge case] \n    solve(\"1234\") = \"4321\"\n    Explanation: The string contains no letters, so the function reverses the string.\n    solve(\"ab\") = \"AB\"\n    Explanation: The string contains letters, so the function toggles the case of each letter.\n    solve(\"#a@C\") = \"#A@c\"\n    Explanation: The string contains letters, so the function toggles the case of each letter.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan already covers the case where the string contains no letters by reversing the string.\n", "requirement analysis:\nThe task requires a function that manipulates a string based on the content of the string. If the string contains letters, it should toggle their case. If there are no letters, it should reverse the string. This requirement is clear and straightforward, focusing on string manipulation and conditional logic.\nrequirement pool:\n- Implement the function to toggle case of letters and reverse the string if no letters are present.\n- Ensure the function is efficient and handles edge cases such as empty strings or strings with only non-letter characters.\n- Develop a user-friendly interface for easy interaction with the function.\nWe will implement a function that takes a string as input and manipulates it based on the presence of letters. If the string contains letters, it will toggle the case of each letter. If the string contains no letters, it will reverse the string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case manipulation': changing the case of letters from uppercase to lowercase or vice versa.\n    'reversing a string': flipping the order of characters in a string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Check if the string contains any letters.\n    (2) If it does, iterate through each character in the string:\n        - If the character is a letter, toggle its case.\n        - If the character is not a letter, leave it unchanged.\n    (3) If the string does not contain any letters, reverse the string.\n    (4) Return the manipulated string.\n\n# [edge case] \n    solve(\"abc\") = \"ABC\"\n    Explanation: The string contains letters, so their cases are toggled.\n    solve(\"123\") = \"321\"\n    Explanation: The string does not contain any letters, so it is reversed.\n    solve(\"#$%\") = \"#$%\"\n    Explanation: The string contains no letters, so it remains unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios.\n", "requirement analysis:\nThe task requires a function that manipulates a string based on the content of the string. If the string contains letters, it should toggle their case. If there are no letters, it should reverse the string. This requirement is clear and straightforward, focusing on string manipulation and conditional logic.\nrequirement pool:\n- Implement the function to toggle case of letters and reverse the string if no letters are present.\n- Ensure the function handles various types of input strings, including those with special characters.\n- Optimize the function for performance, especially for long strings.\nWe will implement a function that takes a string as input and manipulates it based on the presence of letters. If the string contains letters, it will toggle the case of each letter. If the string contains no letters, it will reverse the string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case manipulation': changing the case of letters from uppercase to lowercase or vice versa.\n    'reversing a string': flipping the order of characters in a string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Check if the string contains any letters.\n    - If it does, iterate through each character, check if it's a letter, and toggle its case.\n    - If it doesn't contain any letters, reverse the string.\n\n# [edge case] \n    solve(\"1234\") = \"4321\"\n    Explanation: The string contains no letters, so we reverse it.\n    solve(\"ab\") = \"AB\"\n    Explanation: The string contains letters, so we toggle their case.\n    solve(\"#a@C\") = \"#A@c\"\n    Explanation: The string contains letters, so we toggle their case.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle the case where the string contains no letters.\n", "requirement analysis:\nThe function 'solve' needs to handle strings with mixed case letters and non-letter characters. It should toggle the case of letters and reverse the string if there are no letters. The function should be efficient and handle edge cases like empty strings or strings with only non-letter characters.\nrequirement pool:\n- Implement a function that can change the case of letters in a string.\n- Ensure the function can reverse the string if it contains no letters.\n- Develop a user-friendly interface for easy string manipulation.\n- Optimize the function for performance and handle edge cases.\nWe will use Python's built-in string manipulation methods and a simple conditional check to determine if the string contains any letters. If it does, we will iterate through each character, checking if it's a letter and then toggling its case. If no letters are found, we will reverse the string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case toggling': changing the case of a letter from uppercase to lowercase or vice versa.\n    'string manipulation': reversing a string if no letters are present.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    (1) Check if the string contains any letters.\n    (2) If letters are present:\n        - Iterate through each character.\n        - If the character is a letter, toggle its case.\n        - Otherwise, keep it unchanged.\n    (3) If no letters are present:\n        - Reverse the string.\n\n# [edge case] \n    solve(\"abc\") = \"ABC\"\n    Explanation: The string contains letters, so their cases are toggled.\n    solve(\"123\") = \"321\"\n    Explanation: The string contains no letters, so the string is reversed.\n    solve(\"!@#\") = \"!@#\"\n    Explanation: The string contains no letters, so the string is reversed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan already covers the edge cases.\n", "requirement analysis:\nThe requirements specify a function that manipulates a string based on the type of character at each index. If the character is a letter, it should toggle its case. If there are no letters, the string should be reversed. This functionality should handle special characters appropriately without altering their case.\nrequirement pool:\n- Implement a function that can toggle the case of letters in a string.\n- Ensure the function can reverse the string if it contains no letters.\n- Handle special characters without changing their case.\n- Provide a user-friendly interface for easy interaction.\n- Ensure the application is responsive and works well on different devices.\nWe will implement a function that takes a string as input and processes it according to the given rules. The function will iterate through each character in the string, check if it is a letter, and toggle its case if it is. If the string contains no letters, the function will reverse the string. Special characters will be left unchanged.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case toggling': changing the case of a letter from uppercase to lowercase or vice versa.\n    'reversing a string': flipping the order of characters in a string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    The function will iterate through each character in the string. If the character is a letter, it will toggle its case. If the string contains no letters, the function will reverse the string. Special characters will remain unchanged.\n\n# [edge case] \n    solve(\"1234\") = \"4321\"\n    Explanation: The string contains no letters, so the function reverses the string.\n    solve(\"ab\") = \"AB\"\n    Explanation: The string contains letters, so the function toggles the case of each letter.\n    solve(\"#a@C\") = \"#A@c\"\n    Explanation: The string contains letters and special characters. The function toggles the case of the letters and leaves the special characters unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle all cases.\n", "requirement analysis:\nThe requirements specify a function that manipulates a string based on the type of character at each index. If the character is a letter, it should toggle its case. If there are no letters, the string should be reversed. The function should handle special characters appropriately without altering their case. The product should be user-friendly and efficient.\nrequirement pool:\n- Implement a function that can toggle the case of letters in a string.\n- Ensure the function can reverse the string if it contains no letters.\n- Handle special characters without changing their case.\n- Create a user-friendly interface for easy string manipulation.\n- Ensure the application is responsive and efficient.\nWe will implement the function by iterating through each character in the string. For each character, we will check if it is a letter. If it is, we will toggle its case. If there are no letters in the string, we will reverse the string. Special characters will be left unchanged.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case toggling': changing the case of a letter from uppercase to lowercase or vice versa.\n    'reversing a string': flipping the order of characters in a string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    Iterate through each character in the string.\n    Check if the character is a letter.\n        If yes, toggle its case.\n        If no, leave it unchanged.\n    After iterating through the string, check if any letter was found.\n        If no letters were found, reverse the string.\n    Return the resulting string.\n\n# [edge case] \n    solve(\"1234\") = \"4321\"\n    Explanation: The string contains no letters, so the function reverses the string.\n    solve(\"ab\") = \"AB\"\n    Explanation: The string contains letters, so the function toggles their case.\n    solve(\"#a@C\") = \"#A@c\"\n    Explanation: The string contains letters and special characters. The function toggles the case of the letters and leaves the special characters unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan already covers the case where there are no letters in the string, which automatically triggers the reversal of the string.\n", "requirement analysis:\nThe function needs to handle strings with mixed characters, including letters and non-letters. It should toggle the case of letters and reverse the string if there are no letters. The requirements are clear and straightforward, focusing on string manipulation and conditional logic.\nrequirement pool:\n- Implement the function to toggle the case of letters and keep non-letter characters unchanged.\n- If the string contains no letters, reverse the string.\n- Ensure the function is efficient and handles edge cases, such as empty strings or strings with only non-letter characters.\n- Design the function to be user-friendly and compatible with different programming languages.\nWe will implement the function by first checking if the string contains any letters. If it does, we will iterate through each character in the string and toggle its case. If the string contains no letters, we will reverse the string. This approach ensures that the function handles both cases effectively and efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case toggling': changing the case of a character from uppercase to lowercase or vice versa.\n    'reversing a string': reversing the order of characters in a string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - First, check if the string contains any letters.\n    - If it does, iterate through each character in the string and toggle its case.\n    - If the string contains no letters, reverse the string.\n    - Return the resulted string.\n\n# [edge case] \n    solve('123') = '321'\n    explanation: The string contains no letters, so we reverse the string.\n    solve('aBc') = 'aBc'\n    explanation: The string contains letters, so we toggle their cases.\n    solve('!@#') = '!@#'\n    explanation: The string contains no letters, so we reverse the string.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle the edge cases.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [128, 128, 128, 128, 128, 128, 128, 128, 128, 128], "completion": "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    # Check if the string contains any letters\n    contains_letters = any(char.isalpha() for char in s)\n    \n    if contains_letters:\n        # Toggle case for each letter in the string\n        result = []\n        for char in s:\n            if char.isupper():\n                result.append(char.lower())\n            elif char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char)\n        return ''.join(result)\n    else:\n        # Reverse the string if it contains no letters\n        return s[::-1]\n", "passed": true, "pass": true, "pass_num": 10, "round": 379, "repair_prompt": ["def solve(s):\t\n'''You are given a string s.\n    if s[i] is a letter, change its case from uppercase to lowercase or the opposite,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\nExamples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    '''", " You are given a string s.\nif s[i] is a letter, change its case from uppercase to lowercase or the opposite,\notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"", " You are given a string s.\nif s[i] is a letter, change its case from uppercase to lowercase or the opposite,\notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \ndef solve(s):\t\n'''You are given a string s.\n    if s[i] is a letter,"], "mutate_method": "rephrase_one", "parent_index": 348}
