{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": ["def check(monotonic):\n\tassert monotonic([6, 2, 5, 7, 4, 65]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 7, 4, 3, 64]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 8]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 7, 1, 62]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 1, 1]) == True", "def check(monotonic):\n\tassert monotonic([3, 2, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([2, 7, 7, 15]) == True", "def check(monotonic):\n\tassert monotonic([4, 7, 7, 1, 1, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 8, 13]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 8, 17]) == True", "def check(monotonic):\n\tassert monotonic([2, 22, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([2, 23, 5, 6]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 2, 18]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 2, 6]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 3, 2]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 2, -5]) == True", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 10]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 6, 18]) == False", "def check(monotonic):\n\tassert monotonic([6, 1, 7, 3, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 7, 3, 8, 61]) == False", "def check(monotonic):\n\tassert monotonic([2, 17, 7, 8]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 4, 5, 3, 59]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 5, 5, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([1, 16, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([7, 6, 2, -14]) == True", "def check(monotonic):\n\tassert monotonic([5, 6, 4, 16]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 5, -10]) == False", "def check(monotonic):\n\tassert monotonic([1, 22, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 8, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 1, 6, 4, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 7, 2, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 1, 4]) == False", "def check(monotonic):\n\tassert monotonic([4, 19, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 8, 5, 5, 56]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 6, 25]) == True", "def check(monotonic):\n\tassert monotonic([2, 3, 1, 7]) == False", "def check(monotonic):\n\tassert monotonic([8, 6, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 6, 2, 8, 62]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 6, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 6, 1, 3]) == False", "def check(monotonic):\n\tassert monotonic([4, 2, 5, 7, 6, 62]) == False", "def check(monotonic):\n\tassert monotonic([3, 7, 1, 20]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 17]) == False", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 5, 5, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 20, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 4, 14]) == False", "def check(monotonic):\n\tassert monotonic([3, 17, 2, 14]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 7, 2, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 20]) == True", "def check(monotonic):\n\tassert monotonic([3, 3, 3, -5]) == True", "def check(monotonic):\n\tassert monotonic([4, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 4, 2, 1, 60]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 7, 24]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 1, 1, 2, 61]) == False", "def check(monotonic):\n\tassert monotonic([1, 4, 3, -8]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 3, 5, 10, 63]) == False", "def check(monotonic):\n\tassert monotonic([4, 6, 3, 3, 10, 57]) == False", "def check(monotonic):\n\tassert monotonic([5, 4, 9, 14]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 5, 17]) == True", "def check(monotonic):\n\tassert monotonic([6, 7, 1, 8]) == False", "def check(monotonic):\n\tassert monotonic([9, 2, 5, -5]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 5, 1]) == False", "def check(monotonic):\n\tassert monotonic([9, 9, 9, 9]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 4, 5, 60]) == True", "def check(monotonic):\n\tassert monotonic([6, 2, 5, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 3, -9]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([1, 24, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 7, 6, 6, 61]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 1, 0]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 3, 3, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 8, 5, 9, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 16, 2, 11]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 2, 4, 2, 55]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 8, 7, 7, 65]) == False", "def check(monotonic):\n\tassert monotonic([2, 20, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 3, -10]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 4, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -12]) == True", "def check(monotonic):\n\tassert monotonic([9, 4, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([2, 15, 2, 15]) == False", "def check(monotonic):\n\tassert monotonic([6, 2, 4, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 2, 4]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 1, 3, 63]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 12]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 2, 1]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([6, 5, 7, 7, 6, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 4, 14]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 8, 5]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 1, -7]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 6, 8]) == True", "def check(monotonic):\n\tassert monotonic([9, 5, 5, -14]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 4, 4, 5, 55]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 0, -10]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 21]) == True", "def check(monotonic):\n\tassert monotonic([1, 1, 3, 18]) == True", "def check(monotonic):\n\tassert monotonic([1, 6, 4, -7]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 4, 17]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 2, 5, 60]) == False", "def check(monotonic):\n\tassert monotonic([5, 2, 5, 2]) == False", "def check(monotonic):\n\tassert monotonic([2, 3, 8, 8]) == True", "def check(monotonic):\n\tassert monotonic([5, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([8, 3, 2, -15]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 3, 19]) == False"], "test_case_list": ["assert monotonic([6, 2, 5, 7, 4, 65]) == False", "assert monotonic([3, 3, 7, 4, 3, 64]) == False", "assert monotonic([3, 1, 5, 8]) == False", "assert monotonic([4, 3, 5, 7, 1, 62]) == False", "assert monotonic([4, 4, 1, 1]) == True", "assert monotonic([3, 2, 7, 6]) == False", "assert monotonic([2, 7, 7, 15]) == True", "assert monotonic([4, 7, 7, 1, 1, 57]) == False", "assert monotonic([1, 1, 8, 13]) == True", "assert monotonic([5, 5, 8, 17]) == True", "assert monotonic([2, 22, 8, 7]) == False", "assert monotonic([2, 23, 5, 6]) == False", "assert monotonic([3, 2, 2, 18]) == False", "assert monotonic([2, 2, 2, 6]) == True", "assert monotonic([7, 5, 3, 2]) == True", "assert monotonic([7, 5, 2, -5]) == True", "assert monotonic([6, 19, 9, 12]) == False", "assert monotonic([1, 2, 4, 10]) == True", "assert monotonic([5, 4, 6, 18]) == False", "assert monotonic([6, 1, 7, 3, 4, 56]) == False", "assert monotonic([6, 3, 7, 3, 8, 61]) == False", "assert monotonic([2, 17, 7, 8]) == False", "assert monotonic([5, 1, 4, 5, 3, 59]) == False", "assert monotonic([3, 5, 5, 5, 3, 65]) == False", "assert monotonic([6, 19, 9, 7]) == False", "assert monotonic([1, 16, 9, 7]) == False", "assert monotonic([7, 6, 2, -14]) == True", "assert monotonic([5, 6, 4, 16]) == False", "assert monotonic([1, 6, 5, -10]) == False", "assert monotonic([1, 22, 4, 10]) == False", "assert monotonic([1, 6, 8, 6, 3, 62]) == False", "assert monotonic([1, 5, 1, 6, 4, 62]) == False", "assert monotonic([1, 1, 7, 2, 4, 56]) == False", "assert monotonic([2, 1, 5, 12]) == False", "assert monotonic([1, 3, 1, 4]) == False", "assert monotonic([4, 19, 8, 7]) == False", "assert monotonic([3, 5, 8, 5, 5, 56]) == False", "assert monotonic([1, 3, 6, 25]) == True", "assert monotonic([2, 3, 1, 7]) == False", "assert monotonic([8, 6, 2, 5]) == False", "assert monotonic([6, 3, 6, 2, 8, 62]) == False", "assert monotonic([6, 4, 6, 4]) == False", "assert monotonic([3, 6, 1, 3]) == False", "assert monotonic([4, 2, 5, 7, 6, 62]) == False", "assert monotonic([3, 7, 1, 20]) == False", "assert monotonic([3, 1, 5, 17]) == False", "assert monotonic([5, 5, 7, 5, 5, 57]) == False", "assert monotonic([1, 20, 4, 10]) == False", "assert monotonic([6, 16, 4, 14]) == False", "assert monotonic([3, 17, 2, 14]) == False", "assert monotonic([4, 5, 7, 2, 8, 63]) == False", "assert monotonic([1, 2, 4, 20]) == True", "assert monotonic([3, 3, 3, -5]) == True", "assert monotonic([4, 2, 3, 4]) == False", "assert monotonic([3, 5, 4, 2, 1, 60]) == False", "assert monotonic([6, 4, 7, 24]) == False", "assert monotonic([6, 3, 1, 1, 2, 61]) == False", "assert monotonic([1, 4, 3, -8]) == False", "assert monotonic([2, 6, 3, 5, 10, 63]) == False", "assert monotonic([4, 6, 3, 3, 10, 57]) == False", "assert monotonic([5, 4, 9, 14]) == False", "assert monotonic([1, 3, 5, 17]) == True", "assert monotonic([6, 7, 1, 8]) == False", "assert monotonic([9, 2, 5, -5]) == False", "assert monotonic([3, 2, 5, 1]) == False", "assert monotonic([9, 9, 9, 9]) == True", "assert monotonic([1, 2, 3, 4, 5, 60]) == True", "assert monotonic([6, 2, 5, 6, 3, 62]) == False", "assert monotonic([5, 1, 3, -9]) == False", "assert monotonic([1, 5, 7, 6]) == False", "assert monotonic([1, 24, 9, 12]) == False", "assert monotonic([2, 6, 7, 6, 6, 61]) == False", "assert monotonic([4, 1, 1, 0]) == True", "assert monotonic([2, 1, 3, 3, 3, 65]) == False", "assert monotonic([1, 2, 8, 5, 9, 55]) == False", "assert monotonic([2, 16, 2, 11]) == False", "assert monotonic([6, 16, 3, 15]) == False", "assert monotonic([1, 5, 2, 4, 2, 55]) == False", "assert monotonic([3, 1, 8, 7, 7, 65]) == False", "assert monotonic([2, 20, 2, 5]) == False", "assert monotonic([7, 2, 3, -10]) == False", "assert monotonic([4, 3, 5, 4, 8, 63]) == False", "assert monotonic([7, 2, 1, -12]) == True", "assert monotonic([9, 4, 1, -6]) == True", "assert monotonic([2, 15, 2, 15]) == False", "assert monotonic([6, 2, 4, 4]) == False", "assert monotonic([3, 3, 2, 4]) == False", "assert monotonic([2, 2, 8, 1, 3, 63]) == False", "assert monotonic([2, 2, 8, 12]) == True", "assert monotonic([3, 4, 2, 1]) == False", "assert monotonic([4, 4, 3, 15]) == False", "assert monotonic([2, 6, 5, 3]) == False", "assert monotonic([6, 5, 7, 7, 6, 55]) == False", "assert monotonic([2, 4, 4, 14]) == True", "assert monotonic([5, 4, 8, 5]) == False", "assert monotonic([4, 5, 1, -7]) == False", "assert monotonic([3, 3, 6, 8]) == True", "assert monotonic([9, 5, 5, -14]) == True", "assert monotonic([2, 1, 4, 4, 5, 55]) == False", "assert monotonic([4, 1, 0, -10]) == True", "assert monotonic([5, 5, 7, 21]) == True", "assert monotonic([1, 1, 3, 18]) == True", "assert monotonic([1, 6, 4, -7]) == False", "assert monotonic([4, 3, 4, 17]) == False", "assert monotonic([7, 2, 1, -6]) == True", "assert monotonic([1, 2, 3, 2, 5, 60]) == False", "assert monotonic([5, 2, 5, 2]) == False", "assert monotonic([2, 3, 8, 8]) == True", "assert monotonic([5, 2, 3, 4]) == False", "assert monotonic([8, 3, 2, -15]) == True", "assert monotonic([3, 4, 3, 15]) == False", "assert monotonic([2, 1, 5, 3]) == False", "assert monotonic([2, 4, 3, 19]) == False"], "nl": "Return True is list elements are monotonically increasing or decreasing.\n    ", "func": "def monotonic(l: list):", "examples": ">>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    ", "completions": ["from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n        True\n    >>> monotonic([1, 20, 4, 10])\n        False\n    >>> monotonic([4, 1, 0, -10])\n        True\n    '''\n    if len(l) <= 1:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n        True\n    >>> monotonic([1, 20, 4, 10])\n        False\n    >>> monotonic([4, 1, 0, -10])\n        True\n    '''\n    if len(l) <= 1:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    is_increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    is_decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return is_increasing or is_decreasing\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if not isinstance(l, list):\n        raise ValueError(\"Input must be a list\")\n    \n    increasing = all(x <= y for x, y in zip(l, l[1:]))\n    decreasing = all(x >= y for x, y in zip(l, l[1:]))\n    \n    return increasing or decreasing\n", "from typing import List\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n    \n    increasing = all(x <= y for x, y in zip(l, l[1:]))\n    decreasing = all(x >= y for x, y in zip(l, l[1:]))\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    increasing = all(l[i] <= l[i+1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l) - 1))\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    increasing = True\n    decreasing = True\n    \n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            decreasing = False\n        elif l[i] > l[i + 1]:\n            increasing = False\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            decreasing = False\n        elif l[i] > l[i + 1]:\n            increasing = False\n    \n    return increasing or decreasing\n"], "plans": ["requirement analysis:\nThe requirement is to determine if a list is monotonically increasing or decreasing. This involves checking if each element in the list is either greater than or equal to the previous element for increasing, or less than or equal to the previous element for decreasing. The function should return True if the list is either monotonically increasing or decreasing, and False otherwise.\nrequirement pool:\n- Implement the function to check for monotonicity\n- Ensure the function handles both increasing and decreasing lists\n- Optimize the function for efficiency\n- Add test cases to verify the function's correctness\n- Document the function and its usage\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and leverage a simple approach. The function will compare each element with the next one to determine if the list is strictly increasing or decreasing. This will be efficient for small to medium-sized lists.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list either consistently increases or consistently decreases without any reversals.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To check if a list is monotonic, we can iterate through the list and compare each element with the next one. If we find any element that is greater than the next, we check if the rest of the list is consistently decreasing. Similarly, if we find any element that is less than the next, we check if the rest of the list is consistently increasing. If neither condition is met, the list is not monotonic.\n\n# [edge case] \n    monotonic([1, 1, 1, 1]) = True\n    Explanation: All elements are equal, so the list is considered monotonic as it neither increases nor decreases.\n    monotonic([1, 3, 2, 4]) = False\n    Explanation: The list first increases (from 1 to 3) and then decreases (from 3 to 2), so it is not monotonic.\n    monotonic([5]) = True\n    Explanation: A single element list is trivially monotonic.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided will correctly handle a single-element list.\n", "requirement analysis:\nThe requirement is to determine if a list is monotonically increasing or decreasing. This involves checking if each element in the list is either greater than or equal to the previous element for increasing, or less than or equal to the previous element for decreasing. The function should return True if the list is either monotonically increasing or decreasing, and False otherwise.\nrequirement pool:\n- The main code should correctly implement the monotonic function.\n- The function should handle lists of different lengths and element types.\n- The function should be efficient and handle edge cases such as empty lists or lists with identical elements.\n- The function should be well-documented and include test cases to ensure correctness.\nTo implement the `monotonic` function, we will use Python's built-in capabilities to iterate through the list and compare each element with the next one. This function will check if the list is either monotonically increasing or decreasing. We will handle edge cases such as empty lists or lists with identical elements to ensure robustness.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list either consistently increases or consistently decreases without any reversals.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the `monotonic` function, we will:\n    1. Check if the list is empty or has only one element, in which case it is trivially monotonic.\n    2. Iterate through the list to compare each element with the next one.\n    3. Determine if the list is monotonically increasing or decreasing based on the comparisons.\n    4. Return `True` if the list is monotonic, otherwise return `False`.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonic as there are no elements to violate the monotonic property.\n    monotonic([5, 5, 5, 5]) = True\n    Explanation: A list with all identical elements is considered monotonic since there are no changes in value.\n    monotonic([1, 3, 2, 4]) = False\n    Explanation: The list is neither entirely increasing nor entirely decreasing, so it is not monotonic.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan already covers these cases.\n", "requirement analysis:\nThe requirement is to determine if a list is monotonically increasing or decreasing. This involves checking if each element in the list is either greater than or equal to the previous element for increasing, or less than or equal to the previous element for decreasing. The function should return True if the list is either monotonically increasing or decreasing, and False otherwise.\nrequirement pool:\n- The main code should correctly implement the monotonic function.\n- The function should handle lists of different lengths and element types.\n- The function should be efficient and handle edge cases such as empty lists or lists with identical elements.\n- The function should be well-documented and include test cases to ensure correctness.\nTo implement the `monotonic` function, we will use Python's built-in capabilities to iterate through the list and compare each element with the next one. This function will check if the list is either monotonically increasing or decreasing. We will handle edge cases such as empty lists or lists with identical elements to ensure robustness.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list either consistently increases or consistently decreases without any reversals.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the `monotonic` function, we will:\n    1. Check if the list is empty or has only one element, in which case it is trivially monotonic.\n    2. Iterate through the list to compare each element with the next one.\n    3. Determine if the list is monotonically increasing or decreasing based on the comparisons.\n    4. Return `True` if the list is monotonic, otherwise return `False`.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonic as there are no elements to violate the monotonic property.\n    monotonic([5, 5, 5, 5]) = True\n    Explanation: A list with all identical elements is considered monotonic since there are no changes in value.\n    monotonic([1, 3, 2, 4]) = False\n    Explanation: The list is neither entirely increasing nor entirely decreasing, so it is not monotonic.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan already covers these cases.\n", "requirement analysis:\nThe requirement is to create a function that checks if a list is monotonically increasing or decreasing. This involves comparing each element with the next one in the list. The function should return True if the list is either entirely non-decreasing or non-increasing. The solution should be efficient and handle edge cases such as empty lists or lists with a single element.\nrequirement pool:\n- The main code should correctly determine if the list is monotonically increasing or decreasing\n- The function should handle edge cases such as empty lists or lists with a single element\n- Optimize the function for performance to handle large lists efficiently\n- Enhance the documentation and provide examples to help users understand how to use the function\nTo create a function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and ensure the function is efficient and handles edge cases. We will compare each element with the next one in the list to determine if the list is non-decreasing or non-increasing. The function will return True if the list meets either condition.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonically increasing or decreasing': This means that the list either consistently goes up or consistently goes down without any reversals.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The plan suggests using the `all` function with a generator expression to check if the list is non-decreasing or non-increasing. The function will compare each element with the next one in the list. If the list is either non-decreasing (all elements are less than or equal to the next element) or non-increasing (all elements are greater than or equal to the next element), the function will return `True`. Otherwise, it will return `False`.\n\n# [edge case] \n    monotonic([1, 1, 1, 1]) = True\n    Explanation: This list is considered monotonically increasing and decreasing because all elements are the same.\n    monotonic([5, 4, 3, 2, 1]) = True\n    Explanation: This list is monotonically decreasing as each element is greater than or equal to the next one.\n    monotonic([1, 3, 2, 4]) = False\n    Explanation: This list is neither monotonically increasing nor decreasing because it has both increasing and decreasing segments.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic already correctly handles lists with all identical elements by returning `True`, as they are considered both monotonically increasing and decreasing.\n", "requirement analysis:\nThe requirement is to create a function that checks if a list is monotonically increasing or decreasing. This involves comparing each element with the next one in the list. The function should return True if the list is either entirely non-decreasing or non-increasing. The solution should be efficient and handle basic edge cases.\nrequirement pool:\n- Implement the function to check for monotonicity\n- Ensure the function works correctly for increasing, decreasing, and mixed lists\n- Optimize the function for performance\n- Add error handling for non-list inputs\n- Document the function and provide examples of usage\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and ensure efficiency. The function will compare each element with the next one in the list to determine if the list is entirely non-decreasing or non-increasing. We will also add basic error handling for non-list inputs to enhance robustness.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonically increasing or decreasing': This means that the list either consistently goes up or consistently goes down without any peaks or valleys.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The plan suggests using the `all` function with a generator expression to check if the list is non-decreasing. For a list to be monotonically increasing, every element must be less than or equal to the next element. Similarly, for a list to be monotonically decreasing, every element must be greater than or equal to the next element.\n\n# [edge case] \n    monotonic([1, 2, 2, 3]) = True\n    Explanation: This list is monotonically increasing because each element is less than or equal to the next element.\n    monotonic([3, 2, 2, 1]) = True\n    Explanation: This list is monotonically decreasing because each element is greater than or equal to the next element.\n\n# [extra code for edge case]\n    We need extra code to handle non-list inputs.\n        if not isinstance(l, list):\n            raise ValueError(\"Input must be a list\")\n        (other code)\n\n    This additional code ensures that the function only processes lists, providing a clear error message for non-list inputs.\n", "requirement analysis:\nThe requirement is to create a function that checks if a list is monotonically increasing or decreasing. This involves comparing each element with the next one in the list. The function should return True if the list is either entirely non-decreasing or non-increasing, and False otherwise. The solution should be efficient and handle edge cases such as empty lists or lists with a single element.\nrequirement pool:\n- Implement the function to check for monotonicity\n- Ensure the function works correctly for lists of different lengths\n- Optimize the function for performance\n- Add support for handling edge cases\n- Enhance the function's documentation and examples\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and ensure efficiency. The function will compare each element with the next one in the list to determine if the list is entirely non-decreasing or non-increasing. We will also handle edge cases such as empty lists or lists with a single element.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonically increasing or decreasing': This means that the list either consistently goes up or consistently goes down without any reversals.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The plan suggests using Python's built-in capabilities to check if the list is non-decreasing or non-increasing. The function will use the `all` function with a generator expression to compare each element with the next one. If the list is either entirely non-decreasing (`all(x <= y for x, y in zip(l, l[1:]))`) or non-increasing (`all(x >= y for x, y in zip(l, l[1:]))`), the function will return `True`. Otherwise, it will return `False`.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonic as there are no elements to disprove the condition.\n    monotonic([5]) = True\n    Explanation: A list with a single element is trivially monotonic.\n    monotonic([2, 2, 3, 1]) = False\n    Explanation: The list is neither entirely non-decreasing (2, 2, 3, 1) nor non-increasing (2, 2, 3, 1), as there is a reversal from increasing to decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the logic provided in the plan already covers them. The function will return `True` for empty lists and lists with a single element, as these are considered monotonic by definition.\n", "requirement analysis:\nThe requirement is to determine if a list is monotonically increasing or decreasing. This involves checking if each element in the list is either greater than or equal to the previous element for increasing, or less than or equal to the previous element for decreasing. The function should return True if the list is either monotonically increasing or decreasing, and False otherwise.\nrequirement pool:\n- Implement the function to check for monotonicity\n- Ensure the function handles both increasing and decreasing lists\n- Optimize the function for efficiency\n- Add test cases to verify the function's correctness\n- Document the function and its usage\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and leverage a simple approach. This will involve iterating through the list and comparing each element with the next one to determine the monotonicity.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list either consistently increases or consistently decreases without any reversals.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Compare each element with the next one in the list.\n    - Check if the list is strictly increasing or strictly decreasing.\n    - Return `True` if it is monotonic, otherwise return `False`.\n\n# [edge case] \n    monotonic([1, 2, 2, 3]) = True\n    Explanation: The list is monotonically increasing as it does not have any decreasing sequence.\n    monotonic([3, 2, 2, 1]) = True\n    Explanation: The list is monotonically decreasing as it does not have any increasing sequence.\n    monotonic([1, 3, 2, 4]) = False\n    Explanation: The list is not monotonic because it has both increasing and decreasing sequences (from 1 to 3 and then from 2 to 4).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic to check for monotonicity is straightforward and does not require additional handling for these edge cases.\n", "requirement analysis:\nThe requirement is to determine if a list is monotonically increasing or decreasing. This involves checking if each element in the list is either greater than or equal to the previous element for increasing, or less than or equal to the previous element for decreasing. The function should return True if the list is either monotonically increasing or decreasing, and False otherwise.\nrequirement pool:\n- Implement the function to check for monotonicity\n- Ensure the function handles both increasing and decreasing lists\n- Add tests to verify the function's correctness\n- Optimize the function for efficiency\n- Include documentation for the function\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and leverage a simple approach. The function will compare each element with the next one to determine if the list is strictly increasing or decreasing. This will be efficient and straightforward, making use of Python's list traversal and comparison operations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonically increasing or decreasing': This means that the list either consistently goes up or consistently goes down without any reversals.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function will compare each element with the next one to determine if the list is strictly increasing or decreasing. This can be done by iterating through the list and checking the relationship between consecutive elements.\n\n# [edge case] \n    monotonic([1, 1, 1, 1]) = True\n    Explanation: All elements are the same, so the list is considered monotonic.\n    monotonic([10, 20, 30, 40]) = True\n    Explanation: The list is strictly increasing, so it is considered monotonic.\n    monotonic([40, 30, 20, 10]) = True\n    Explanation: The list is strictly decreasing, so it is considered monotonic.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will correctly return True for lists with all identical elements.\n", "requirement analysis:\nThe requirement is to determine if a list is monotonically increasing or decreasing. This involves checking if each element in the list is either greater than or equal to the previous element for increasing, or less than or equal to the previous element for decreasing. The function should return True if the list is either monotonically increasing or decreasing, and False otherwise.\nrequirement pool:\n- Implement the function to check for monotonicity\n- Ensure the function handles both increasing and decreasing lists\n- Optimize the function for efficiency\n- Add test cases to verify the function's correctness\n- Document the function and its usage\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and leverage a simple approach. The function will compare each element with the next one to determine if the list is strictly increasing or decreasing. This will be efficient for small to medium-sized lists.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list either consistently increases or consistently decreases without any reversals.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To check if a list is monotonic, we can compare each element with the next one. If we find any reversal (where an element is greater than the next), we can immediately conclude that the list is not monotonic. Otherwise, the list is monotonic.\n\n# [edge case] \n    monotonic([1, 2, 2, 3]) = True\n    Explanation: The list is strictly increasing, so it is considered monotonic.\n    monotonic([3, 2, 1]) = True\n    Explanation: The list is strictly decreasing, so it is considered monotonic.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to determine if the list is monotonic.\n", "requirement analysis:\nThe requirement is to determine if a list is monotonically increasing or decreasing. This involves checking if each element in the list is either greater than or equal to the previous element for increasing, or less than or equal to the previous element for decreasing. The function should return True if the list is either monotonically increasing or decreasing, and False otherwise.\nrequirement pool:\n- The main code should correctly implement the monotonic function.\n- The function should handle lists of different lengths and element types.\n- The function should be efficient and handle edge cases such as empty lists or lists with identical elements.\n- The function should be well-documented and include test cases to ensure correctness.\nTo implement the `monotonic` function, we will use Python's built-in capabilities to iterate through the list and compare each element with the next one. This function will check if the list is either monotonically increasing or decreasing. We will ensure efficiency by using a single pass through the list, which will allow us to handle lists of different lengths and element types effectively.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list either consistently increases or consistently decreases without any reversals.\n    Explanation: A list is considered monotonic if its elements never decrease (increasing) or never increase (decreasing) as you move through the list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the `monotonic` function, we will:\n    1. Check if the list has less than 2 elements, if so, return True since a single element or an empty list is trivially monotonic.\n    2. Iterate through the list and compare each element with the next one to determine if the list is increasing or decreasing.\n    3. If at any point the direction changes (from increasing to decreasing or vice versa), return False.\n    4. If the loop completes without finding a change in direction, return True.\n\n# [edge case] \n    monotonic([1, 2, 2, 3]) = True\n    Explanation: The list is monotonically increasing as each element is less than or equal to the next.\n    monotonic([3, 2, 1]) = True\n    Explanation: The list is monotonically decreasing as each element is greater than or equal to the next.\n    monotonic([1, 3, 2, 4]) = False\n    Explanation: The list is not monotonic because it first increases (from 1 to 3) and then decreases (from 3 to 2), followed by an increase again.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan already covers all scenarios, including lists with all identical elements.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [113, 113, 113, 113, 113, 113, 113, 113, 113, 113], "completion": "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            decreasing = False\n        elif l[i] > l[i + 1]:\n            increasing = False\n    \n    return increasing or decreasing\n", "passed": true, "pass": true, "pass_num": 10, "round": 456, "repair_prompt": ["def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", " def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    increasing = all(x <= y for x, y in zip(l, l[1:]))\n    decreasing = all(x >= y for x, y in zip(l, l[", " def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''"], "mutate_method": "condense_two2one", "parent_index": 152}
