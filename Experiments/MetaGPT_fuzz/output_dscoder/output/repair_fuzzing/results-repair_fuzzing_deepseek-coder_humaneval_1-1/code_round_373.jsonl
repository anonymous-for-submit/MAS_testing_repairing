{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that accepts 3 numbers. Returns true if one of the numbers matches the sum of the other two, and all numbers are integers. Returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "entry_point": "any_int", "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n", "test": ["def check(any_int):\n\tassert any_int(8, 19, 11) == True", "def check(any_int):\n\tassert any_int(7.307, 7.071, 5.088) == False", "def check(any_int):\n\tassert any_int(6, 12, 6) == True", "def check(any_int):\n\tassert any_int(6.511, 2, 3) == False", "def check(any_int):\n\tassert any_int(12, 6, 6) == True", "def check(any_int):\n\tassert any_int(2, 2, 4) == True", "def check(any_int):\n\tassert any_int(5.114, 5, 4) == False", "def check(any_int):\n\tassert any_int(3.376, 6.953, 2.111) == False", "def check(any_int):\n\tassert any_int(2, 3, 1)==True", "def check(any_int):\n\tassert any_int(2, 5, 4) == False", "def check(any_int):\n\tassert any_int(7.194, 1.302, 7.462) == False", "def check(any_int):\n\tassert any_int(1, 7, 8) == True", "def check(any_int):\n\tassert any_int(5, 8, 3) == True", "def check(any_int):\n\tassert any_int(2.389, 9, 10) == False", "def check(any_int):\n\tassert any_int(-1, 0, 1) == True", "def check(any_int):\n\tassert any_int(9, 6, 3) == True", "def check(any_int):\n\tassert any_int(4.38, 6, 1) == False", "def check(any_int):\n\tassert any_int(3.785, 6.308, 7.367) == False", "def check(any_int):\n\tassert any_int(6, 10, 4) == True", "def check(any_int):\n\tassert any_int(1.705, 2, 6.616) == False", "def check(any_int):\n\tassert any_int(6, 4, 2) == True", "def check(any_int):\n\tassert any_int(4, 2, 2)==True", "def check(any_int):\n\tassert any_int(3.692, 2, 7.2) == False", "def check(any_int):\n\tassert any_int(2.5, 2, 3)==False", "def check(any_int):\n\tassert any_int(5, 6, 1) == True", "def check(any_int):\n\tassert any_int(1, 3, 2) == True", "def check(any_int):\n\tassert any_int(3,4,7)==True", "def check(any_int):\n\tassert any_int(6, 10, 1) == False", "def check(any_int):\n\tassert any_int(6, 2, 4) == True", "def check(any_int):\n\tassert any_int(6.155, 2.926, 1.672) == False", "def check(any_int):\n\tassert any_int(5, 2, 3) == True", "def check(any_int):\n\tassert any_int(7.829, 2, 9) == False", "def check(any_int):\n\tassert any_int(4, 6, 3) == False", "def check(any_int):\n\tassert any_int(2.583, 3.749, 4.738) == False", "def check(any_int):\n\tassert any_int(12, 11, 1) == True", "def check(any_int):\n\tassert any_int(3.211, 4, 3) == False", "def check(any_int):\n\tassert any_int(1, 1, 7) == False", "def check(any_int):\n\tassert any_int(0, 3, 3) == True", "def check(any_int):\n\tassert any_int(1.157, 8, 2) == False", "def check(any_int):\n\tassert any_int(3, 3, 6) == True", "def check(any_int):\n\tassert any_int(4.272, 6.612, 6.663) == False", "def check(any_int):\n\tassert any_int(1, 1, 2) == True", "def check(any_int):\n\tassert any_int(2.2, 2.2, 2.2)==False", "def check(any_int):\n\tassert any_int(3.158, 8, 6.135) == False", "def check(any_int):\n\tassert any_int(1.346, 5, 6) == False", "def check(any_int):\n\tassert any_int(15, 9, 6) == True", "def check(any_int):\n\tassert any_int(1, 4, 5) == True", "def check(any_int):\n\tassert any_int(7.656, 1, 7) == False", "def check(any_int):\n\tassert any_int(3.599, 5, 1) == False", "def check(any_int):\n\tassert any_int(3, 1, 2) == True", "def check(any_int):\n\tassert any_int(-3, 2, 5) == True", "def check(any_int):\n\tassert any_int(4, 11, 5) == False", "def check(any_int):\n\tassert any_int(10, 7, 3) == True", "def check(any_int):\n\tassert any_int(7, 3, 10) == True", "def check(any_int):\n\tassert any_int(3, 4, 1) == True", "def check(any_int):\n\tassert any_int(3.103, 3, 10) == False", "def check(any_int):\n\tassert any_int(6, 16, 10) == True", "def check(any_int):\n\tassert any_int(1.812, 6.567, 7.145) == False", "def check(any_int):\n\tassert any_int(6, 6, 12) == True", "def check(any_int):\n\tassert any_int(1, 7, 2) == False", "def check(any_int):\n\tassert any_int(7, 6, 1) == True", "def check(any_int):\n\tassert any_int(4, 3, 7) == True", "def check(any_int):\n\tassert any_int(4, 6, 2) == True", "def check(any_int):\n\tassert any_int(2.007, 9, 7.198) == False", "def check(any_int):\n\tassert any_int(2, 3, 5) == True", "def check(any_int):\n\tassert any_int(6.086, 4, 4) == False", "def check(any_int):\n\tassert any_int(3.754, 6, 5.044) == False", "def check(any_int):\n\tassert any_int(8, 10, 2) == True", "def check(any_int):\n\tassert any_int(7.73, 5.041, 6.418) == False", "def check(any_int):\n\tassert any_int(2, 6, 2)==False", "def check(any_int):\n\tassert any_int(3.683, 8, 1.193) == False", "def check(any_int):\n\tassert any_int(-4, 6, 2)==True", "def check(any_int):\n\tassert any_int(7, 13, 6) == True", "def check(any_int):\n\tassert any_int(2.003, 3, 11) == False", "def check(any_int):\n\tassert any_int(3.357, 7, 8.074) == False", "def check(any_int):\n\tassert any_int(3.621, 6.679, 2.542) == False", "def check(any_int):\n\tassert any_int(12, 3, 9) == True", "def check(any_int):\n\tassert any_int(7.797, 7, 4) == False", "def check(any_int):\n\tassert any_int(7, 1, 8) == True", "def check(any_int):\n\tassert any_int(5, 3, 8) == True", "def check(any_int):\n\tassert any_int(5, 7, 2) == True", "def check(any_int):\n\tassert any_int(5, 6, 11) == True", "def check(any_int):\n\tassert any_int(6.681, 8, 4.747) == False", "def check(any_int):\n\tassert any_int(3, 2, 5) == True", "def check(any_int):\n\tassert any_int(3.0,4,7)==False", "def check(any_int):\n\tassert any_int(9, 1, 10) == True", "def check(any_int):\n\tassert any_int(1.5, 5, 3.5)==False", "def check(any_int):\n\tassert any_int(2.834, 7, 9) == False", "def check(any_int):\n\tassert any_int(2, 6, 4) == True", "def check(any_int):\n\tassert any_int(6.068, 1, 3.454) == False", "def check(any_int):\n\tassert any_int(1.834, 7.255, 6.304) == False", "def check(any_int):\n\tassert any_int(1.726, 3, 1) == False", "def check(any_int):\n\tassert any_int(13, 7, 6) == True", "def check(any_int):\n\tassert any_int(6.9, 4, 12) == False", "def check(any_int):\n\tassert any_int(4.039, 5, 5.992) == False", "def check(any_int):\n\tassert any_int(4, 5, 9) == True", "def check(any_int):\n\tassert any_int(6, 2, 7) == False", "def check(any_int):\n\tassert any_int(3, 10, 7) == True", "def check(any_int):\n\tassert any_int(5.586, 1, 2) == False", "def check(any_int):\n\tassert any_int(12, 8, 4) == True", "def check(any_int):\n\tassert any_int(2.459, 5, 11) == False", "def check(any_int):\n\tassert any_int(0, 2, 2) == True", "def check(any_int):\n\tassert any_int(6.175, 9, 4) == False", "def check(any_int):\n\tassert any_int(12, 5, 7) == True", "def check(any_int):\n\tassert any_int(8.854, 2, 8) == False", "def check(any_int):\n\tassert any_int(2.858, 1, 2) == False", "def check(any_int):\n\tassert any_int(4, 3, 1) == True", "def check(any_int):\n\tassert any_int(4, 11, 1) == False", "def check(any_int):\n\tassert any_int(5, 5, 10) == True", "def check(any_int):\n\tassert any_int(10, 5, 5) == True", "def check(any_int):\n\tassert any_int(3.228, 6, 6) == False", "def check(any_int):\n\tassert any_int(2.805, 3, 6.418) == False", "def check(any_int):\n\tassert any_int(2, 1, 1) == True", "def check(any_int):\n\tassert any_int(6, 3, 3) == True", "def check(any_int):\n\tassert any_int(7, 5, 12) == True", "def check(any_int):\n\tassert any_int(-4, 11, 7) == True", "def check(any_int):\n\tassert any_int(2,1,1)==True", "def check(any_int):\n\tassert any_int(7, 2, 9) == True", "def check(any_int):\n\tassert any_int(3.445, 2, 2) == False", "def check(any_int):\n\tassert any_int(2, 7, 5) == True", "def check(any_int):\n\tassert any_int(6.254, 6, 7) == False", "def check(any_int):\n\tassert any_int(3.685, 2, 6) == False", "def check(any_int):\n\tassert any_int(5, 9, 5) == False", "def check(any_int):\n\tassert any_int(5.408, 8, 3.454) == False", "def check(any_int):\n\tassert any_int(-7, 5, -2) == True", "def check(any_int):\n\tassert any_int(4, 8, 4) == True", "def check(any_int):\n\tassert any_int(12, 7, 5) == True", "def check(any_int):\n\tassert any_int(4, 7, 3) == True", "def check(any_int):\n\tassert any_int(6.61, 1.687, 2.647) == False", "def check(any_int):\n\tassert any_int(3.033, 6.554, 7.391) == False", "def check(any_int):\n\tassert any_int(2.08, 7, 1.239) == False"], "test_case_list": ["assert any_int(8, 19, 11) == True", "assert any_int(7.307, 7.071, 5.088) == False", "assert any_int(6, 12, 6) == True", "assert any_int(6.511, 2, 3) == False", "assert any_int(12, 6, 6) == True", "assert any_int(2, 2, 4) == True", "assert any_int(5.114, 5, 4) == False", "assert any_int(3.376, 6.953, 2.111) == False", "assert any_int(2, 3, 1)==True", "assert any_int(2, 5, 4) == False", "assert any_int(7.194, 1.302, 7.462) == False", "assert any_int(1, 7, 8) == True", "assert any_int(5, 8, 3) == True", "assert any_int(2.389, 9, 10) == False", "assert any_int(-1, 0, 1) == True", "assert any_int(9, 6, 3) == True", "assert any_int(4.38, 6, 1) == False", "assert any_int(3.785, 6.308, 7.367) == False", "assert any_int(6, 10, 4) == True", "assert any_int(1.705, 2, 6.616) == False", "assert any_int(6, 4, 2) == True", "assert any_int(4, 2, 2)==True", "assert any_int(3.692, 2, 7.2) == False", "assert any_int(2.5, 2, 3)==False", "assert any_int(5, 6, 1) == True", "assert any_int(1, 3, 2) == True", "assert any_int(3,4,7)==True", "assert any_int(6, 10, 1) == False", "assert any_int(6, 2, 4) == True", "assert any_int(6.155, 2.926, 1.672) == False", "assert any_int(5, 2, 3) == True", "assert any_int(7.829, 2, 9) == False", "assert any_int(4, 6, 3) == False", "assert any_int(2.583, 3.749, 4.738) == False", "assert any_int(12, 11, 1) == True", "assert any_int(3.211, 4, 3) == False", "assert any_int(1, 1, 7) == False", "assert any_int(0, 3, 3) == True", "assert any_int(1.157, 8, 2) == False", "assert any_int(3, 3, 6) == True", "assert any_int(4.272, 6.612, 6.663) == False", "assert any_int(1, 1, 2) == True", "assert any_int(2.2, 2.2, 2.2)==False", "assert any_int(3.158, 8, 6.135) == False", "assert any_int(1.346, 5, 6) == False", "assert any_int(15, 9, 6) == True", "assert any_int(1, 4, 5) == True", "assert any_int(7.656, 1, 7) == False", "assert any_int(3.599, 5, 1) == False", "assert any_int(3, 1, 2) == True", "assert any_int(-3, 2, 5) == True", "assert any_int(4, 11, 5) == False", "assert any_int(10, 7, 3) == True", "assert any_int(7, 3, 10) == True", "assert any_int(3, 4, 1) == True", "assert any_int(3.103, 3, 10) == False", "assert any_int(6, 16, 10) == True", "assert any_int(1.812, 6.567, 7.145) == False", "assert any_int(6, 6, 12) == True", "assert any_int(1, 7, 2) == False", "assert any_int(7, 6, 1) == True", "assert any_int(4, 3, 7) == True", "assert any_int(4, 6, 2) == True", "assert any_int(2.007, 9, 7.198) == False", "assert any_int(2, 3, 5) == True", "assert any_int(6.086, 4, 4) == False", "assert any_int(3.754, 6, 5.044) == False", "assert any_int(8, 10, 2) == True", "assert any_int(7.73, 5.041, 6.418) == False", "assert any_int(2, 6, 2)==False", "assert any_int(3.683, 8, 1.193) == False", "assert any_int(-4, 6, 2)==True", "assert any_int(7, 13, 6) == True", "assert any_int(2.003, 3, 11) == False", "assert any_int(3.357, 7, 8.074) == False", "assert any_int(3.621, 6.679, 2.542) == False", "assert any_int(12, 3, 9) == True", "assert any_int(7.797, 7, 4) == False", "assert any_int(7, 1, 8) == True", "assert any_int(5, 3, 8) == True", "assert any_int(5, 7, 2) == True", "assert any_int(5, 6, 11) == True", "assert any_int(6.681, 8, 4.747) == False", "assert any_int(3, 2, 5) == True", "assert any_int(3.0,4,7)==False", "assert any_int(9, 1, 10) == True", "assert any_int(1.5, 5, 3.5)==False", "assert any_int(2.834, 7, 9) == False", "assert any_int(2, 6, 4) == True", "assert any_int(6.068, 1, 3.454) == False", "assert any_int(1.834, 7.255, 6.304) == False", "assert any_int(1.726, 3, 1) == False", "assert any_int(13, 7, 6) == True", "assert any_int(6.9, 4, 12) == False", "assert any_int(4.039, 5, 5.992) == False", "assert any_int(4, 5, 9) == True", "assert any_int(6, 2, 7) == False", "assert any_int(3, 10, 7) == True", "assert any_int(5.586, 1, 2) == False", "assert any_int(12, 8, 4) == True", "assert any_int(2.459, 5, 11) == False", "assert any_int(0, 2, 2) == True", "assert any_int(6.175, 9, 4) == False", "assert any_int(12, 5, 7) == True", "assert any_int(8.854, 2, 8) == False", "assert any_int(2.858, 1, 2) == False", "assert any_int(4, 3, 1) == True", "assert any_int(4, 11, 1) == False", "assert any_int(5, 5, 10) == True", "assert any_int(10, 5, 5) == True", "assert any_int(3.228, 6, 6) == False", "assert any_int(2.805, 3, 6.418) == False", "assert any_int(2, 1, 1) == True", "assert any_int(6, 3, 3) == True", "assert any_int(7, 5, 12) == True", "assert any_int(-4, 11, 7) == True", "assert any_int(2,1,1)==True", "assert any_int(7, 2, 9) == True", "assert any_int(3.445, 2, 2) == False", "assert any_int(2, 7, 5) == True", "assert any_int(6.254, 6, 7) == False", "assert any_int(3.685, 2, 6) == False", "assert any_int(5, 9, 5) == False", "assert any_int(5.408, 8, 3.454) == False", "assert any_int(-7, 5, -2) == True", "assert any_int(4, 8, 4) == True", "assert any_int(12, 7, 5) == True", "assert any_int(4, 7, 3) == True", "assert any_int(6.61, 1.687, 2.647) == False", "assert any_int(3.033, 6.554, 7.391) == False", "assert any_int(2.08, 7, 1.239) == False"], "nl": "\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    ", "func": "def any_int(x, y, z):", "examples": "Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    ", "completions": ["from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if any of the three numbers is equal to the sum of the other two.\n\n    Args:\n        x (int): The first number.\n        y (int): The second number.\n        z (int): The third number.\n\n    Returns:\n        bool: True if any number is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n\n    # Check if any number is equal to the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if any of the three numbers is equal to the sum of the other two.\n    \n    Args:\n        x (int): The first number.\n        y (int): The second number.\n        z (int): The third number.\n        \n    Returns:\n        bool: True if any number is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n    \n    # Check if any one of the numbers matches the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Checks if any of the three given numbers is equal to the sum of the other two and all numbers are integers.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if any number is equal to the sum of the other two and all numbers are integers, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n\n    # Calculate the sums of pairs\n    sum_xy = x + y\n    sum_yz = y + z\n    sum_zx = z + x\n\n    # Check if any number is equal to the sum of the other two\n    return x == sum_yz or y == sum_zx or z == sum_xy\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Checks if any of the three provided numbers matches the sum of the other two, and all numbers are integers.\n    \n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n    \n    Returns:\n        bool: True if any number matches the sum of the other two, otherwise False.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n    \n    # Calculate the sum of any two numbers\n    sum_xy = x + y\n    sum_xz = x + z\n    sum_yz = y + z\n    \n    # Check if any of the numbers matches the sum of the other two\n    if x == sum_xy or x == sum_xz or x == sum_yz or \\\n       y == sum_xy or y == sum_xz or y == sum_yz or \\\n       z == sum_xy or z == sum_xz or z == sum_yz:\n        return True\n    else:\n        return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Checks if any one of the three provided numbers matches the sum of the other two, and all numbers are integers.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if any one of the numbers matches the sum of the other two, otherwise False.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n\n    # Check if any one of the numbers matches the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: (int, float), y: (int, float), z: (int, float)) -> bool:\n    \"\"\"\n    Check if any of the three numbers is equal to the sum of the other two.\n\n    Args:\n        x (int, float): The first number.\n        y (int, float): The second number.\n        z (int, float): The third number.\n\n    Returns:\n        bool: True if any number is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Validate that all inputs are integers\n    if not isinstance(x, (int, float)) or not isinstance(y, (int, float)) or not isinstance(z, (int, float)):\n        return False\n\n    # Check if any number is equal to the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: int | float, y: int | float, z: int | float) -> bool:\n    \"\"\"\n    This function checks if any of the three provided numbers is equal to the sum of the other two.\n    The numbers can be integers or floating-point numbers.\n    \n    Args:\n        x (int | float): The first number.\n        y (int | float): The second number.\n        z (int | float): The third number.\n    \n    Returns:\n        bool: True if any number matches the sum of the other two, otherwise False.\n    \"\"\"\n    # Check if all inputs are integers or floats\n    if not (isinstance(x, (int, float)) and isinstance(y, (int, float)) and isinstance(z, (int, float))):\n        return False\n    \n    # Calculate the sum of the first two numbers\n    sum_xy = x + y\n    \n    # Check if any number matches the sum of the other two\n    if z == sum_xy or x == y + z or y == x + z:\n        return True\n    \n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if any of the numbers is equal to the sum of the other two.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if any number matches the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        raise ValueError(\"All inputs must be integers.\")\n\n    # Calculate the sums\n    sum_xy = x + y\n    sum_xz = x + z\n    sum_yz = y + z\n\n    # Check if any number matches the sum of the other two\n    return x == sum_xy or x == sum_xz or x == sum_yz or \\\n           y == sum_xy or y == sum_xz or y == sum_yz or \\\n           z == sum_xy or z == sum_xz or z == sum_yz\n\n# Example usage:\n# print(any_int(5, 2, 7))  # True\n# print(any_int(3, 2, 2))  # False\n# print(any_int(3, -2, 1)) # True\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if any one of the three given numbers matches the sum of the other two.\n    \n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n    \n    Returns:\n        bool: True if any number matches the sum of the other two, False otherwise.\n    \"\"\"\n    # Validate that all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n    \n    # Check if any number matches the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    This function checks if any of the three inputs is equal to the sum of the other two and ensures all inputs are integers.\n    \n    Args:\n        x (int): The first integer input.\n        y (int): The second integer input.\n        z (int): The third integer input.\n    \n    Returns:\n        bool: True if any input is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    \n    # Check if any one of the numbers matches the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n"], "plans": ["requirement analysis:\nThe original requirement is to create a function that checks if any of the three given numbers matches the sum of the other two, and all numbers must be integers. The function should return true if the condition is met, and false otherwise. The requirement also specifies that the function should handle both integers and floating-point numbers, but the output should be boolean based on integer checks.\nrequirement pool:\n- The function should accept three numbers and check if any one of them is equal to the sum of the other two.\n- The function should return true if any number matches the sum of the other two and all numbers are integers.\n- The function should return false if any number is not an integer or if none of the numbers match the sum of the other two.\n- The function should handle both integers and floating-point numbers.\nWe will use Python's built-in capabilities to check if a number is an integer and to perform arithmetic operations. The function will first validate that all inputs are integers, then it will check if any of the numbers matches the sum of the other two.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'integer': means that the numbers must be whole numbers without any decimal parts.\n    'sum': means the result of adding two or more numbers together.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - First, check if all inputs are integers using the `isinstance` function.\n    - Then, check if any of the numbers matches the sum of the other two.\n\n# [edge case] \n    any_int(5, 2, 7) = True\n    Explanation: 5 is equal to 2 + 7, so the function should return True.\n    any_int(3, 2, 2) = False\n    Explanation: None of the numbers match the sum of the other two, so the function should return False.\n    any_int(3.6, -2.2, 2) = False\n    Explanation: The inputs are not all integers, so the function should return False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already checks if the inputs are integers and if any number matches the sum of the other two.\n", "requirement analysis:\nThe function should accept three numbers and check if any of them is equal to the sum of the other two. It should return true if the condition is met and all numbers are integers, otherwise, it should return false. The function should handle both integers and floating-point numbers.\nrequirement pool:\n- The function should accept three numbers and check if any of them is equal to the sum of the other two.\n- The function should return true if the condition is met and all numbers are integers, otherwise, return false.\n- The function should handle both integers and floating-point numbers.\n- The function should be easy to understand and use.\nWe will implement the function using Python's built-in capabilities and type checking. The function will check if any of the three numbers is equal to the sum of the other two and ensure all numbers are integers. We will use type hints to enforce the input types and return the appropriate boolean value.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers': means the result of adding two of the three numbers together.\n    'integer': means the numbers must be whole numbers without any decimal parts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Check if all inputs are integers.\n    - Check if any one of the numbers matches the sum of the other two.\n\n# [edge case] \n    any_int(5, 2, 7) = True\n    Explanation: 7 (the sum of 5 and 2) matches one of the numbers (7 itself). All numbers are integers.\n    any_int(3, 2, 2) = False\n    Explanation: No number matches the sum of the other two (3 != 2+2, 2 != 3+2, 2 != 3+2). All numbers are integers.\n    any_int(3.6, -2.2, 2) = False\n    Explanation: The third number is not an integer, so the function should return False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function already checks if all numbers are integers and if any number matches the sum of the other two.\n", "requirement analysis:\nThe requirement is to create a function that checks if any of the three given numbers is equal to the sum of the other two, and all numbers must be integers. The function should return true if the condition is met, and false otherwise. The function should also handle both positive and negative integers.\nrequirement pool:\n- The function should return true if any of the three numbers matches the sum of the other two and all numbers are integers.\n- The function should return false if any of the numbers are not integers or if none of the numbers match the sum of the other two.\n- The function should handle both positive and negative integers.\n- The function should be efficient and easy to understand.\nTo implement the function 'any_int' that checks if any of the three given numbers is equal to the sum of the other two and all numbers are integers, we will use Python's built-in capabilities and ensure efficiency and clarity in the code.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers': means the result of adding two of the given numbers together.\n    'integer': means a whole number without any decimal or fractional part.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Check if all inputs are integers.\n    - Check if any one of the numbers matches the sum of the other two.\n\n# [edge case] \n    any_int(5, 2, 7) = True\n    Explanation: 7 (the sum of 5 and 2) matches one of the numbers (7 itself). All numbers are integers.\n    any_int(3, 2, 2) = False\n    Explanation: None of the numbers (3, 2, 2) matches the sum of the other two (3 != 2+2, 2 != 3+2, 2 != 3+2). All numbers are integers.\n    any_int(3.6, -2.2, 2) = False\n    Explanation: The third number (2) is an integer, but the first two numbers (3.6 and -2.2) are not integers. Therefore, the function should return False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function already checks if all numbers are integers and if any number matches the sum of the other two.\n", "requirement analysis:\nThe original requirements call for a function that checks if any of the three provided numbers matches the sum of the other two, and all numbers must be integers. The function should return true if the condition is met, and false otherwise. The requirements also mention handling both integers and floating-point numbers, and ensuring the function correctly identifies non-integer inputs.\nrequirement pool:\n- Implement the function to check if any number matches the sum of the other two, ensuring all numbers are integers.\n- Handle both integers and floating-point numbers in the function.\n- Ensure the function returns false if any number is not an integer.\n- Test the function with various inputs to ensure it works as expected.\n- Document the function and provide clear examples of its usage.\nTo implement the function 'any_int' that checks if any of the three provided numbers matches the sum of the other two, and all numbers are integers, we will use Python's built-in capabilities and ensure the function handles both integers and floating-point numbers efficiently. We will use type checking to ensure all inputs are integers, and perform the sum check to determine if any number matches the sum of the other two.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'integer': means that all numbers provided must be whole numbers without any fractional part.\n    'sum': means the result of adding two numbers together.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Steps to implement the function:\n    1. Check if all inputs are integers using type checking.\n    2. Calculate the sum of any two numbers.\n    3. Check if any of the numbers matches the sum of the other two.\n    4. Return True if the condition is met, otherwise return False.\n\n# [edge case] \n    any_int(3.6, -2.2, 5.8) = False\n    Explanation: The function should return False because the input includes floating-point numbers, which are not integers as per the requirement.\n    any_int(1, 2, 3) = True\n    Explanation: The sum of 1 and 2 is 3, and 3 matches one of the numbers, so the function returns True.\n    any_int(0, 0, 0) = False\n    Explanation: Although the sum of any two 0s is 0, which matches the third number, the function should return False because all numbers are zero, and the requirement specifies that the numbers must be positive.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case.\n        if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n            return False\n        (other code)\n", "requirement analysis:\nThe original requirements call for a function that checks if any one of the three provided numbers matches the sum of the other two, with the added condition that all numbers must be integers. The function should return true if this condition is met and false otherwise. The examples provided illustrate the expected behavior with both positive and negative integers, as well as a case that includes floating-point numbers, though the latter is not fully specified in the requirements.\nrequirement pool:\n- The function should accept three numbers and return true if one matches the sum of the other two, and all numbers are integers.\n- The function should handle both integers and floating-point numbers.\n- The function should return false if any of the numbers are not integers or if none of the numbers match the sum of the other two.\n- The function should be optimized for performance and readability.\n- The function should be tested with various inputs to ensure it behaves as expected.\nTo create a function that checks if any one of the three provided numbers matches the sum of the other two, and all numbers are integers, we will use Python's built-in capabilities and ensure the function is optimized for readability and performance. We will not use any external libraries for this specific task.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers': means the addition of two integers\n    'integer': means the numbers are whole numbers without any decimal part\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Ensure all inputs are integers\n    - Check if any one of the numbers matches the sum of the other two\n\n# [edge case] \n    any_int(5, 2, 7) = True\n    Explanation: 5 is equal to 2 + 7, so the function should return True.\n    any_int(3, 2, 2) = False\n    Explanation: None of the numbers match the sum of the other two, so the function should return False.\n    any_int(3.6, -2.2, 5.8) = False\n    Explanation: The function expects all numbers to be integers, but 3.6 and -2.2 are not integers. Therefore, the function should return False.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the inputs are not integers.\n        if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n            return False\n        (other code)\n", "requirement analysis:\nThe original requirements specify a function that takes three numbers and returns true if one of the numbers matches the sum of the other two, and all numbers are integers. The function should return false in any other cases. This includes handling both integers and floating-point numbers, ensuring the function is robust and can handle various inputs. The requirements are clear and specific, focusing on the functionality and correctness of the function.\nrequirement pool:\n- The main code should correctly implement the logic to check if any number matches the sum of the other two numbers.\n- The function should handle both integers and floating-point numbers.\n- The function should return false if any of the numbers is not an integer.\n- The function should be optimized for performance and readability.\n- The function should include proper error handling for invalid inputs.\nWe will use Python's built-in capabilities to check if a number matches the sum of the other two numbers. We will also ensure that all inputs are integers to meet the requirement. The function will first validate the inputs to ensure they are numbers and then check if any of the numbers equals the sum of the other two.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers': means the result of adding two numbers together\n    'integer': means the numbers are whole numbers without any decimal parts\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Validate that all inputs are integers.\n    - Check if any of the numbers equals the sum of the other two.\n\n# [edge case] \n    any_int(3.6, -2.2, 5.8) = False\n    Explanation: The input includes non-integer values (3.6, -2.2, 5.8), which do not meet the requirement of all numbers being integers. The function should return False in this case.\n    any_int(1, 2, 3) = True\n    Explanation: The sum of 1 and 2 is 3, and all numbers are integers. The function should return True in this case.\n    any_int(0, 0, 0) = False\n    Explanation: Although the sum of any two 0s is 0, the function should return False because the requirement specifies that all numbers must be positive.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the inputs are not integers.\n        if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n            return False\n        (other code)\n", "requirement analysis:\nThe original requirements call for a function that checks if any of the three provided numbers matches the sum of the other two, with all numbers being integers. The function should return true if this condition is met, and false otherwise. The examples provided illustrate the expected behavior with different inputs. The requirement is clear and straightforward, focusing on the logic and type checking needed to fulfill the condition.\nrequirement pool:\n- The function should accept three parameters and check if any one of them is equal to the sum of the other two.\n- The function should ensure all parameters are integers.\n- The function should return true if the condition is met, otherwise return false.\n- The function should handle both integers and floating-point numbers.\nWe will use Python's built-in 'isinstance' function to check if the provided parameters are integers. The function will sum the first two numbers and check if the third number matches this sum. If all numbers are integers and any number matches the sum of the other two, the function will return true; otherwise, it will return false.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'integers': means that all the numbers provided must be whole numbers without any decimal part.\n    'sum': means the result of adding two numbers together.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests using the 'isinstance' function to check if the numbers are integers. The function should then sum the first two numbers and check if the third number matches this sum. If all numbers are integers and any number matches the sum of the other two, the function should return true; otherwise, it should return false.\n\n# [edge case] \n    any_int(3.6, -2.2, 1) = False\n    Explanation: The function should return false because the third number (1) does not match the sum of the first two numbers (3.6 + (-2.2) = 1.4). Additionally, the third number is not an integer, which violates the requirement that all numbers must be integers.\n\n    any_int(0, 0, 0) = False\n    Explanation: The function should return false because the sum of two zeros is zero, and the third number is also zero. This does not satisfy the requirement that one of the numbers must match the sum of the other two.\n\n    any_int(1, -1, 0) = True\n    Explanation: The function should return true because the sum of 1 and (-1) is 0, and the third number is zero. Although the numbers are not strictly positive, they are integers and the third number matches the sum of the other two.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic already checks for the conditions specified in the requirement.\n", "requirement analysis:\nThe requirement is to create a function that checks if one of the three given numbers matches the sum of the other two and ensures all numbers are integers. This is a straightforward requirement that focuses on basic arithmetic operations and data validation.\nrequirement pool:\n- The main code should accurately check if one number matches the sum of the other two and ensure all inputs are integers.\n- Provide clear and concise examples to demonstrate the function's usage.\n- Ensure the function is optimized for performance to handle a variety of inputs efficiently.\nWe will implement the function `any_int` using Python, leveraging basic arithmetic operations and type checking to ensure all inputs are integers. The function will compare each number to the sum of the other two and return `True` if any number matches the sum, and `False` otherwise. This approach ensures simplicity and efficiency.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'integer': means that the numbers provided must be whole numbers without any decimal parts.\n    'sum': means the result of adding two numbers together.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `any_int(x, y, z)`, we need to check if any of the numbers `x`, `y`, or `z` is equal to the sum of the other two. We also need to ensure that all numbers are integers. Here's the detailed logic:\n\n    1. Check if all inputs are integers using the `isinstance` function.\n    2. Calculate the sum of `x` and `y`, then check if `z` is equal to this sum.\n    3. Calculate the sum of `x` and `z`, then check if `y` is equal to this sum.\n    4. Calculate the sum of `y` and `z`, then check if `x` is equal to this sum.\n    5. Return `True` if any of the above conditions are met, otherwise return `False`.\n\n# [edge case] \n    any_int(5, 2, 7) = True\n    Explanation: 5 is equal to the sum of 2 and 7.\n    any_int(3, 2, 2) = False\n    Explanation: None of the numbers match the sum of the other two.\n    any_int(3, -2, 1) = True\n    Explanation: 3 is equal to the sum of -2 and 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic already checks for all possible combinations and returns the correct result.\n", "requirement analysis:\nThe requirement is to create a function that checks if any one of the three given numbers matches the sum of the other two, and all numbers must be integers. This is a straightforward requirement that can be implemented using basic Python constructs. The function should return True if the condition is met, and False otherwise. The focus should be on ensuring the function is efficient and handles various edge cases, such as floating-point numbers that are effectively integers.\nrequirement pool:\n- Implement the function to check if any number matches the sum of the other two and all numbers are integers.\n- Ensure the function handles edge cases, including floating-point numbers that are effectively integers.\n- Optimize the function for performance to ensure it does not slow down the application.\n- Document the function clearly for easy understanding and usage.\n- Test the function with various inputs to ensure it behaves as expected.\nWe will implement the function using basic Python constructs to check if any one of the three given numbers matches the sum of the other two, ensuring all numbers are integers. The function will first validate that all inputs are integers, then perform the sum check, and return the appropriate boolean value.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers': means the addition of two numbers\n    'integer': means the numbers are whole numbers without any decimal part\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Validate that all inputs are integers.\n    - Check if any one of the numbers matches the sum of the other two.\n    - Return True if the condition is met, otherwise return False.\n\n# [edge case] \n    any_int(5, 2, 7) = True\n    Explanation: 5 is equal to 2 + 7, so the function should return True.\n    any_int(3, 2, 2) = False\n    Explanation: None of the numbers match the sum of the other two, so the function should return False.\n    any_int(3.6, -2.2, 5.8) = False\n    Explanation: Although the sum of 3.6 and -2.2 is 1.4, which is equal to 5.8, not all numbers are integers, so the function should return False.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the numbers are not integers.\n        if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n            return False\n        (other code)\n", "requirement analysis:\nThe function needs to check if any of the three numbers is equal to the sum of the other two and ensure all numbers are integers. The function should return true if the condition is met and false otherwise. The function should also handle both positive and negative integers.\nrequirement pool:\n- The function should check if any of the three numbers is equal to the sum of the other two.\n- The function should ensure all numbers are integers.\n- The function should return true if the condition is met and false otherwise.\n- The function should handle both positive and negative integers.\n- The function should be simple and easy to understand.\nWe will implement the function using Python's built-in capabilities and a simple conditional check. The function will validate if any of the three inputs is equal to the sum of the other two and ensure all inputs are integers. This approach leverages Python's type checking and arithmetic operations, ensuring efficiency and simplicity.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'integer': means that all the numbers provided should be whole numbers and not decimals.\n    'sum': means the result of adding two numbers together.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The function should first check if all inputs are integers using the `isinstance` function. Then, it should check if any one of the numbers matches the sum of the other two.\n\n# [edge case] \n    any_int(3, 2, 5) = True\n    Explanation: The sum of 3 and 2 is 5, so one of the numbers matches the sum of the other two.\n    any_int(1.1, 2.2, 3.3) = False\n    Explanation: The inputs are not integers, so the function should return False.\n    any_int(0, 0, 0) = False\n    Explanation: The sum of any two zeros is zero, but the function should return False because none of the numbers matches the sum of the other two.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic is sufficient to check for integer inputs and the sum condition.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 0.9847, 0.9847, 0.5725, 1.0, 1.0], "pass_results": [true, true, true, true, true, false, false, false, true, true], "pass_test_cases_num": [131, 131, 131, 131, 131, 129, 129, 75, 131, 131], "completion": "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    This function checks if any of the three inputs is equal to the sum of the other two and ensures all inputs are integers.\n    \n    Args:\n        x (int): The first integer input.\n        y (int): The second integer input.\n        z (int): The third integer input.\n    \n    Returns:\n        bool: True if any input is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    \n    # Check if any one of the numbers matches the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "passed": true, "pass": true, "pass_num": 7, "round": 373, "repair_prompt": ["def any_int(x, y, z):\t\n'''Create a function that accepts 3 numbers. Returns true if one of the numbers matches the sum of the other two, and all numbers are integers. Returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", " def any_int(x, y, z):\n    '''Create a function that accepts 3 numbers. Returns true if one of the numbers matches the sum of the other two, and all numbers are integers. Returns false in any other cases.\n    Examples\n        any_int(5, 2, 7) \u279e True\n        \n        any_int(3, 2, 2) \u279e False\n    \n        any_int(3, -2, 1) \u279e True\n        \n        any_int(3.6, -2.2", " def any_int(x, y, z):\n    '''Create a function that accepts 3 numbers. Returns true if one of the numbers matches the sum of the other two, and all numbers are integers. Returns false in any other cases.\n    Examples\n        any_int(5, 2, 7) \u279e True\n        \n        any_int(3, 2, 2) \u279e False\n\n        any_int(3, -2, 1) \u279e True\n        \n        any_int(3.6, -2.2,"], "mutate_method": "rephrase_one", "parent_index": 214}
