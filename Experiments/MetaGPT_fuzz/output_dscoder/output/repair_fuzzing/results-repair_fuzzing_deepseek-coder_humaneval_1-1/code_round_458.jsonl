{"task_id": "HumanEval/43", "prompt": "def pairs_sum_to_zero(l):\t\n'''pairs_sum_to_zero takes a list of integers as an input. It returns True if there are two distinct elements in the list that sum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''", "entry_point": "pairs_sum_to_zero", "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n", "test": ["def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 11, -3, 6, 7, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 7, -4, 1, 1, 11]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 11, 0, 3, 6, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 14, 0, 5, 2, 34]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 2, 3, 7]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 2, 9, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 4, 2, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 14, 1, 8, 6, 36]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 9, 0, 8, 5, 9]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 4, -6, 7, 1, 32]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 8, -2, 3]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-2, 10, 0, 6, 5, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 1, -2, 2]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 2, -1, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 4, -2, 5, 5, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 5, -3, 3]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 3, -4, 5]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-2, 4, -5, 4, 1, 25]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 6, -4, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 5, 2, 4, 1, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 14, 0, 1, 7, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 8, -5, 3, 7, 35]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 9, -9, 2, 7, 11]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 7, -1, 2, 1, 28]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 3, 2, 31]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 6, -7, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 9, 2, 3, 4, 30]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 6, 1, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 1, 3, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 5, 8, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 7, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 8, 10, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 13, -5, 7, 7, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 5, -10, 2, 10, 9]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 3, 1, 8]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 7, 4, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 9, -5, 4, 6, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 6, 2, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 2, 1, 11]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 2, 7, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 5, 2, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 14, -2, 8, 2, 35]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, 5, 0]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 8, 4, 3, 7, 29]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 12, 1, 9, 6, 33]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 11, 1, 6, 6, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 11, -3, 8, 7, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 10, -4, 8, 6, 26]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 3, 7, 1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 1, -4, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-2, 12, -4, 7, 1, 36]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 12, 1, 6, 7, 25]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 11, -3, 6, 2, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 13, -2, 7, 3, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 4, -10, 5, 10, 9]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 1, 3, 7]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 8, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 14, 2, 4, 6, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 5, 1, 12]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 3, 2, 30]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 5, -6, 8, 1, 33]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 3, 7, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 14, -6, 5, 1, 35]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 4, -1, 5, 10, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 13, -2, 4, 4, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 2, 6, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 4, -1, 5, 3, 33]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 3, 1, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([7, 5, -1, 1, 8, 10]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, 4, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 7, 3, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 12, -3, 2, 6, 29]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 9, -3, 6, 7, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 7, -9, 5, 4, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 6, 0, 6, 3, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 7, 8, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 4, -1, 8, 8, 12]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 8, 1, 1, 6, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 14, 1, 8, 2, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 6, -5, 7, 7, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 4, -7, 1, 2, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 11, -6, 5, 7, 36]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 14, 0, 5, 1, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 9, -1, 7, 4, 34]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, 3, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 10, 2, 9, 3, 33]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 4, 1, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 4, 2, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, -2, 1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 10, -2, 2, 4, 33]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 9, -8, 6, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 7, -4, 4, 2, 32]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 4, 10, 1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([7, 8, -10, 7, 2, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 8, 0, 4, 5, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 14, -4, 5, 6, 32]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 12, 1, 8, 6, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 12, -6, 6, 7, 29]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 5, 1, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 8, -4, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 2, 1, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 4, 3, 6, 2, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 11, -4, 3, 5, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 9, 2, 1, 6, 34]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 13, -4, 6, 3, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 1, 0, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 5, -2, 3, 1, 32]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 5, -1, 8, 8, 4]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 2, 2, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 8, 1, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 6, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 14, 3, 6, 2, 29]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 13, -2, 8, 7, 35]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 1, 3, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 8, -1, 7, 6, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 12, 0, 1, 7, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 3, 6, 7]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 6, -8, 1, 2, 8]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 8, -3, 9, 5, 29]) == False"], "test_case_list": ["assert pairs_sum_to_zero([1, 11, -3, 6, 7, 30]) == False", "assert pairs_sum_to_zero([3, 7, -4, 1, 1, 11]) == False", "assert pairs_sum_to_zero([-8, 11, 0, 3, 6, 26]) == False", "assert pairs_sum_to_zero([1, 14, 0, 5, 2, 34]) == False", "assert pairs_sum_to_zero([1, 2, 3, 7]) == False", "assert pairs_sum_to_zero([4, 2, 9, 3]) == False", "assert pairs_sum_to_zero([-3, 9, -1, 4, 2, 31]) == False", "assert pairs_sum_to_zero([3]) == False", "assert pairs_sum_to_zero([-1, 14, 1, 8, 6, 36]) == True", "assert pairs_sum_to_zero([3, 9, 0, 8, 5, 9]) == False", "assert pairs_sum_to_zero([1, 4, -6, 7, 1, 32]) == False", "assert pairs_sum_to_zero([2, 8, -2, 3]) == True", "assert pairs_sum_to_zero([-2, 10, 0, 6, 5, 30]) == False", "assert pairs_sum_to_zero([3, 1, -2, 2]) == True", "assert pairs_sum_to_zero([3, 2, -1, 2]) == False", "assert pairs_sum_to_zero([-1, 4, -2, 5, 5, 27]) == False", "assert pairs_sum_to_zero([1]) == False", "assert pairs_sum_to_zero([6, 5, -3, 3]) == True", "assert pairs_sum_to_zero([4, 3, -4, 5]) == True", "assert pairs_sum_to_zero([-2, 4, -5, 4, 1, 25]) == False", "assert pairs_sum_to_zero([2, 6, -4, 5]) == False", "assert pairs_sum_to_zero([-7, 5, 2, 4, 1, 26]) == False", "assert pairs_sum_to_zero([-8, 14, 0, 1, 7, 30]) == False", "assert pairs_sum_to_zero([1, 8, -5, 3, 7, 35]) == False", "assert pairs_sum_to_zero([6, 9, -9, 2, 7, 11]) == True", "assert pairs_sum_to_zero([-8, 7, -1, 2, 1, 28]) == True", "assert pairs_sum_to_zero([-3, 9, -1, 3, 2, 31]) == True", "assert pairs_sum_to_zero([6, 6, -7, 6]) == False", "assert pairs_sum_to_zero([-4, 9, 2, 3, 4, 30]) == True", "assert pairs_sum_to_zero([1, 6, 1, 2]) == False", "assert pairs_sum_to_zero([5, 1, 3, 5]) == False", "assert pairs_sum_to_zero([4, 5, 8, 3]) == False", "assert pairs_sum_to_zero([6, 7, 2, 5]) == False", "assert pairs_sum_to_zero([2, 8, 10, 3]) == False", "assert pairs_sum_to_zero([1, 13, -5, 7, 7, 27]) == False", "assert pairs_sum_to_zero([4, 5, -10, 2, 10, 9]) == True", "assert pairs_sum_to_zero([2, 3, 1, 8]) == False", "assert pairs_sum_to_zero([1, 7, 4, 6]) == False", "assert pairs_sum_to_zero([2, 9, -5, 4, 6, 30]) == False", "assert pairs_sum_to_zero([4, 6, 2, 4]) == False", "assert pairs_sum_to_zero([5, 2, 1, 11]) == False", "assert pairs_sum_to_zero([5, 2, 7, 3]) == False", "assert pairs_sum_to_zero([5, 5, 2, 2]) == False", "assert pairs_sum_to_zero([-8, 14, -2, 8, 2, 35]) == True", "assert pairs_sum_to_zero([1, 3, 5, 0]) == False", "assert pairs_sum_to_zero([-1, 8, 4, 3, 7, 29]) == False", "assert pairs_sum_to_zero([2, 12, 1, 9, 6, 33]) == False", "assert pairs_sum_to_zero([-4, 11, 1, 6, 6, 28]) == False", "assert pairs_sum_to_zero([0, 11, -3, 8, 7, 26]) == False", "assert pairs_sum_to_zero([-8, 10, -4, 8, 6, 26]) == True", "assert pairs_sum_to_zero([2]) == False", "assert pairs_sum_to_zero([2, 3, 7, 1]) == False", "assert pairs_sum_to_zero([6, 1, -4, 6]) == False", "assert pairs_sum_to_zero([-2, 12, -4, 7, 1, 36]) == False", "assert pairs_sum_to_zero([2, 12, 1, 6, 7, 25]) == False", "assert pairs_sum_to_zero([-4, 11, -3, 6, 2, 27]) == False", "assert pairs_sum_to_zero([0, 13, -2, 7, 3, 31]) == False", "assert pairs_sum_to_zero([1, 4, -10, 5, 10, 9]) == True", "assert pairs_sum_to_zero([4, 1, 3, 7]) == False", "assert pairs_sum_to_zero([6, 8, 2, 5]) == False", "assert pairs_sum_to_zero([-7, 14, 2, 4, 6, 30]) == False", "assert pairs_sum_to_zero([1, 5, 1, 12]) == False", "assert pairs_sum_to_zero([-3, 9, -1, 3, 2, 30]) == True", "assert pairs_sum_to_zero([-1, 5, -6, 8, 1, 33]) == True", "assert pairs_sum_to_zero([2, 3, 7, 4]) == False", "assert pairs_sum_to_zero([0, 14, -6, 5, 1, 35]) == False", "assert pairs_sum_to_zero([5, 4, -1, 5, 10, 6]) == False", "assert pairs_sum_to_zero([0, 13, -2, 4, 4, 28]) == False", "assert pairs_sum_to_zero([2, 2, 6, 4]) == False", "assert pairs_sum_to_zero([0, 4, -1, 5, 3, 33]) == False", "assert pairs_sum_to_zero([3, 3, 1, 4]) == False", "assert pairs_sum_to_zero([7, 5, -1, 1, 8, 10]) == True", "assert pairs_sum_to_zero([1, 3, 4, 3]) == False", "assert pairs_sum_to_zero([5, 7, 3, 4]) == False", "assert pairs_sum_to_zero([-7, 12, -3, 2, 6, 29]) == False", "assert pairs_sum_to_zero([-4, 9, -3, 6, 7, 31]) == False", "assert pairs_sum_to_zero([4, 7, -9, 5, 4, 6]) == False", "assert pairs_sum_to_zero([-4, 6, 0, 6, 3, 26]) == False", "assert pairs_sum_to_zero([4]) == False", "assert pairs_sum_to_zero([2, 7, 8, 5]) == False", "assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True", "assert pairs_sum_to_zero([1, 4, -1, 8, 8, 12]) == True", "assert pairs_sum_to_zero([-3, 8, 1, 1, 6, 31]) == False", "assert pairs_sum_to_zero([-6, 14, 1, 8, 2, 28]) == False", "assert pairs_sum_to_zero([-3, 6, -5, 7, 7, 30]) == False", "assert pairs_sum_to_zero([3, 4, -7, 1, 2, 3]) == False", "assert pairs_sum_to_zero([-8, 11, -6, 5, 7, 36]) == False", "assert pairs_sum_to_zero([-7, 14, 0, 5, 1, 28]) == False", "assert pairs_sum_to_zero([-5, 9, -1, 7, 4, 34]) == False", "assert pairs_sum_to_zero([1, 3, 3, 5]) == False", "assert pairs_sum_to_zero([-5, 10, 2, 9, 3, 33]) == False", "assert pairs_sum_to_zero([2, 4, 1, 2]) == False", "assert pairs_sum_to_zero([-3, 9, -1, 4, 2, 30]) == False", "assert pairs_sum_to_zero([1, 3, -2, 1]) == False", "assert pairs_sum_to_zero([2, 10, -2, 2, 4, 33]) == True", "assert pairs_sum_to_zero([3, 9, -8, 6, 2, 5]) == False", "assert pairs_sum_to_zero([-6, 7, -4, 4, 2, 32]) == True", "assert pairs_sum_to_zero([3, 4, 10, 1]) == False", "assert pairs_sum_to_zero([7, 8, -10, 7, 2, 4]) == False", "assert pairs_sum_to_zero([-6, 8, 0, 4, 5, 27]) == False", "assert pairs_sum_to_zero([-6, 14, -4, 5, 6, 32]) == True", "assert pairs_sum_to_zero([-5, 12, 1, 8, 6, 31]) == False", "assert pairs_sum_to_zero([-3, 12, -6, 6, 7, 29]) == True", "assert pairs_sum_to_zero([1, 5, 1, 3]) == False", "assert pairs_sum_to_zero([5, 8, -4, 5]) == False", "assert pairs_sum_to_zero([3, 2, 1, 6]) == False", "assert pairs_sum_to_zero([-5, 4, 3, 6, 2, 27]) == False", "assert pairs_sum_to_zero([-1, 11, -4, 3, 5, 28]) == False", "assert pairs_sum_to_zero([-7, 9, 2, 1, 6, 34]) == False", "assert pairs_sum_to_zero([-1, 13, -4, 6, 3, 28]) == False", "assert pairs_sum_to_zero([6, 1, 0, 3]) == False", "assert pairs_sum_to_zero([-5, 5, -2, 3, 1, 32]) == True", "assert pairs_sum_to_zero([1, 5, -1, 8, 8, 4]) == True", "assert pairs_sum_to_zero([1, 2, 2, 2]) == False", "assert pairs_sum_to_zero([6]) == False", "assert pairs_sum_to_zero([2, 8, 1, 4]) == False", "assert pairs_sum_to_zero([2, 6, 2, 5]) == False", "assert pairs_sum_to_zero([2, 14, 3, 6, 2, 29]) == False", "assert pairs_sum_to_zero([-5, 13, -2, 8, 7, 35]) == False", "assert pairs_sum_to_zero([6, 1, 3, 2]) == False", "assert pairs_sum_to_zero([5]) == False", "assert pairs_sum_to_zero([-4, 8, -1, 7, 6, 26]) == False", "assert pairs_sum_to_zero([-4, 12, 0, 1, 7, 28]) == False", "assert pairs_sum_to_zero([5, 3, 6, 7]) == False", "assert pairs_sum_to_zero([4, 6, -8, 1, 2, 8]) == True", "assert pairs_sum_to_zero([-4, 8, -3, 9, 5, 29]) == False"], "nl": "\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    ", "func": "def pairs_sum_to_zero(l):", "examples": ">>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    ", "completions": ["from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there are two distinct elements in the list that sum to zero,\n    and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n        False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n        False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n        False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n        True\n    >>> pairs_sum_to_zero([1])\n        False\n    '''\n    if len(l) < 2:\n        return False\n    \n    complements = set()\n    \n    for num in l:\n        complement = -num\n        if complement in complements:\n            return True\n        complements.add(num)\n    \n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there are two distinct elements in the list that sum to zero,\n    and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n        False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n        False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n        False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n        True\n    >>> pairs_sum_to_zero([1])\n        False\n    '''\n    if len(l) < 2:\n        return False\n    \n    seen = set()\n    for number in l:\n        complement = -number\n        if complement in seen:\n            return True\n        seen.add(number)\n    \n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there are two distinct elements in the list that sum to zero,\n    and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n        False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n        False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n        False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n        True\n    >>> pairs_sum_to_zero([1])\n        False\n    '''\n    seen = set()\n    for number in l:\n        complement = -number\n        if complement in seen:\n            return True\n        seen.add(number)\n    return False\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there are two distinct elements in the list that sum to zero,\n    and False otherwise.\n    '''\n    if not l:\n        return False\n    \n    seen = set()\n    \n    for num in l:\n        complement = 0 - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    \n    return False\n", "from typing import List\n## main.py\n\ndef pairs_sum_to_zero(l: list[int]) -> bool:\n    '''pairs_sum_to_zero takes a list of integers as an input. It returns True if there are two distinct elements in the list that sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    '''\n    n = len(l)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there are two distinct elements in the list that sum to zero,\n    and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    '''\n    seen_complements = set()\n    \n    for num in l:\n        complement = -num\n        if complement in seen_complements:\n            return True\n        seen_complements.add(num)\n    \n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there are two distinct elements in the list that sum to zero,\n    and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n        False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n        False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n        False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n        True\n    >>> pairs_sum_to_zero([1])\n        False\n    '''\n    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that checks if there are two distinct elements in a list of integers that sum to zero. This is a straightforward problem that can be solved efficiently using a set to track the complements of each number. The function should return True if such a pair exists and False otherwise. The solution should handle edge cases like lists with a single element or no elements.\nrequirement pool:\n- The main code should efficiently check for pairs summing to zero using a set for complements.\n- The function should handle edge cases like lists with a single element or no elements.\n- Ensure the solution is optimized for large lists to maintain performance.\n- Develop a clear and concise code structure for easy understanding and maintenance.\nTo implement the function efficiently, we will use a set to track the complements of each number in the list. This approach ensures that we can check for pairs summing to zero in linear time, making it suitable for large lists. We will also handle edge cases by checking the length of the list and ensuring that there are at least two elements to form a pair.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the two numbers in the pair should add up to 0.\n    'distinct elements': means the two numbers in the pair should be different.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Iterate through the list and use a set to store the complements of each number.\n    - For each number, check if its complement (number * -1) is already in the set.\n    - If a complement is found, return True as we have found a pair that sums to zero.\n    - If no such pair is found after checking all elements, return False.\n\n# [edge case] \n    pairs_sum_to_zero([1]) = False\n    Explanation: Since the list contains only one element, it's impossible to find a pair that sums to zero.\n    pairs_sum_to_zero([1, 3, -2, 1]) = False\n    Explanation: Although the list contains negative numbers, there are no two distinct elements that sum to zero.\n    pairs_sum_to_zero([1, 2, 3, 7]) = False\n    Explanation: Similar to the previous edge case, no two distinct elements sum to zero in this list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic already accounts for lists with fewer than two elements by returning False immediately.\n", "requirement analysis:\nThe requirement is to check if there are two distinct elements in a list that sum to zero. This is a common problem in algorithmic thinking and can be solved efficiently using a set to track seen numbers and check for complements.\nrequirement pool:\n- The main code should iterate through the list and use a set to check for complements that sum to zero.\n- Ensure the function returns False for lists with fewer than two elements.\n- Optimize the function to handle large lists efficiently.\n- Include tests to cover various edge cases.\n- Document the function with clear comments and docstrings.\nWe will implement the function using a set to track seen numbers and check for complements that sum to zero. This approach ensures efficiency and clarity in the code.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the addition of two numbers in the list equals zero\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n\n# [edge case] \n    pairs_sum_to_zero([1, 3, 5, 0]) = False\n    Explanation: The sum of any two distinct elements in the list does not equal zero.\n    pairs_sum_to_zero([1, 3, -2, 1]) = False\n    Explanation: The list contains duplicates, but no two distinct elements sum to zero.\n    pairs_sum_to_zero([1, 2, 3, 7]) = False\n    Explanation: The sum of any two distinct elements in the list does not equal zero.\n    pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) = True\n    Explanation: The pair (-5, 5) sums to zero.\n    pairs_sum_to_zero([1]) = False\n    Explanation: The list contains only one element, so it's impossible to find a pair that sums to zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic is sufficient to handle all provided edge cases.\n", "requirement analysis:\nThe requirement is to check if there are two distinct elements in a list that sum to zero. This is a common problem in algorithms and can be solved efficiently using a set to track complements. The function should return True if such a pair exists and False otherwise. The solution should handle edge cases like lists with a single element.\nrequirement pool:\n- The main code should efficiently check for pairs summing to zero.\n- The function should handle lists with a single element.\n- Ensure the solution is simple and easy to understand.\n- Optimize the performance for large lists.\nTo solve the problem of checking if there are two distinct elements in a list that sum to zero, we can use a set to track the complements of each element. This approach ensures that we can efficiently check for the existence of the complement in constant time. The function will iterate through the list, calculate the complement for each element, and check if the complement exists in the set. If it does, the function will return True. If the loop completes without finding such a pair, the function will return False.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distinct elements': means that the two elements in the list must be different\n    'sum to zero': means the sum of the two elements should be 0\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Iterate through the list of integers.\n    (2) For each integer, calculate its complement (i.e., -integer).\n    (3) Check if the complement exists in the set of seen numbers.\n    (4) If the complement exists, return True.\n    (5) If the loop completes without finding such a pair, return False.\n\n# [edge case] \n    pairs_sum_to_zero([1, 3, 5, 0]) = False\n    Explanation: No two distinct elements sum to zero in the list [1, 3, 5, 0].\n    pairs_sum_to_zero([1, 3, -2, 1]) = False\n    Explanation: The elements 1 and -1 are not distinct, and no other pair sums to zero.\n    pairs_sum_to_zero([1, 2, 3, 7]) = False\n    Explanation: No two distinct elements sum to zero in the list [1, 2, 3, 7].\n    pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) = True\n    Explanation: The pair (-5, 5) sums to zero and are distinct.\n    pairs_sum_to_zero([1]) = False\n    Explanation: With only one element, it's impossible to find a pair that sums to zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle the case of a single element in the list.\n", "requirement analysis:\nThe requirement is to check if there are any two distinct elements in the list that sum to zero. This is a basic requirement that can be implemented efficiently. The function should return True if such a pair exists and False otherwise.\nrequirement pool:\n- Implement the function pairs_sum_to_zero to check for pairs summing to zero\n- Ensure the function works correctly for all types of input lists\n- Optimize the function for performance\n- Make the code readable and maintainable\n- Test the function with various edge cases\nTo implement the function pairs_sum_to_zero, we will use a set to keep track of the numbers we have seen so far. For each number in the list, we will check if the negative of that number is already in the set. If it is, we have found a pair that sums to zero. If we go through the entire list without finding such a pair, we return False. This approach ensures that we only pass through the list once, making the function efficient.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distinct elements': means that the two elements in the list must be different\n    'sum to zero': means that the sum of the two elements should be 0\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through the list and use a set to keep track of the numbers seen so far. For each number, check if its negative is in the set. If it is, return True. If the loop completes without finding such a pair, return False.\n\n# [edge case] \n    pairs_sum_to_zero([0, 0, 0]) = False\n    Explanation: There are no two distinct elements in the list that sum to zero.\n    pairs_sum_to_zero([-1, 1]) = True\n    Explanation: The elements -1 and 1 are distinct and their sum is 0.\n    pairs_sum_to_zero([2, -2, 3, 4]) = True\n    Explanation: The elements 2 and -2 are distinct and their sum is 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will correctly handle the case where all elements are zero, as it will not find any pair that sums to zero.\n\n# [core concept]\n    'distinct elements': means that the two elements in the list must be different\n    'sum to zero': means that the sum of the two elements should be 0\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through the list and use a set to keep track of the numbers seen so far. For each number, check if its negative is in the set. If it is, return True. If the loop completes without finding such a pair, return False.\n\n# [edge case] \n    pairs_sum_to_zero([0, 0, 0]) = False\n    Explanation: There are no two distinct elements in the list that sum to zero.\n    pairs_sum_to_zero([-1, 1]) = True\n    Explanation: The elements -1 and 1 are distinct and their sum is 0.\n    pairs_sum_to_zero([2, -2, 3, 4]) = True\n    Explanation: The elements 2 and -2 are distinct and their sum is 0.\n", "requirement analysis:\nThe requirement is to check if there are any two distinct elements in the list that sum to zero. The function should return True if such pairs exist and False otherwise. The solution should be efficient and handle both positive and negative integers.\nrequirement pool:\n- Implement the function to check for pairs that sum to zero\n- Ensure the function is efficient in terms of time complexity\n- Handle both positive and negative integers in the list\n- Return False if no pairs sum to zero\n- Ensure the code is readable and maintainable\nTo implement the function efficiently, we will use a set to keep track of the numbers we have seen so far. This allows us to check in constant time whether the complement of the current number (i.e., the number that, when added to the current number, equals zero) has already been seen. This approach ensures that the function runs in O(n) time complexity, where n is the number of elements in the list. We will also ensure that the function is readable and maintainable by using clear variable names and following Python's PEP 8 style guide.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the two numbers in the list should add up to 0\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through the list and use a set to keep track of the numbers seen so far. For each number, check if its complement (i.e., -number) is in the set. If it is, return True. If the loop completes without finding such a pair, return False.\n\n# [edge case] \n    pairs_sum_to_zero([0, 0, 0]) = False\n    Explanation: There are no two distinct elements that sum to zero.\n    pairs_sum_to_zero([-1, 1]) = True\n    Explanation: The elements -1 and 1 sum to zero.\n    pairs_sum_to_zero([1, 2, 3, 4]) = False\n    Explanation: There are no two distinct elements that sum to zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will correctly return False as there are no two distinct elements that sum to zero.\n", "requirement analysis:\nThe requirement is to check if there are any two distinct elements in the list that sum to zero. This is a basic problem that can be solved efficiently using a set to track the complements of each element.\nrequirement pool:\n- Implement the function pairs_sum_to_zero with a time complexity of O(n).\n- Ensure the function handles edge cases such as empty lists and lists with all identical elements.\n- Optimize the function for readability and maintainability.\n- Test the function with various inputs to ensure it works correctly.\n- Include comments in the code to explain the logic.\nTo implement the function pairs_sum_to_zero efficiently, we will use a set to track the complements of each element. This approach ensures that we can check for pairs in linear time, O(n). We will also handle edge cases such as empty lists and lists with all identical elements.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the two numbers in the pair should add up to 0\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Create a set to store the complements of each element.\n    - Iterate through the list of integers.\n    - For each element, check if its complement (0 - element) is already in the set.\n    - If a complement is found, return True.\n    - If no such pair is found after checking all elements, return False.\n\n# [edge case] \n    pairs_sum_to_zero([]) = False\n    Explanation: An empty list does not contain any pairs, so the expected output is False.\n    pairs_sum_to_zero([0, 0, 0, 0]) = False\n    Explanation: All elements are the same and sum to zero only when both elements are 0, but since they are all the same, no pair can sum to zero. The expected output is False.\n    pairs_sum_to_zero([-1, 1]) = True\n    Explanation: The list contains two distinct elements, -1 and 1, which sum to zero. The expected output is True.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can handle these cases by checking for the presence of the complement in the set.\n", "requirement analysis:\nThe requirement is to check if there are any two distinct elements in a list of integers that sum to zero. This is a common problem in algorithmic thinking and can be approached using various methods such as brute force, sorting, or hashing. The solution should be efficient and clear, making it easy for users to understand and use.\nrequirement pool:\n- Implement a function that checks for pairs summing to zero\n- Ensure the function is optimized for both time and space complexity\n- Include comments and docstrings for better understanding and maintainability\n- Test the function with various edge cases to ensure robustness\n- Consider improving the algorithm to handle large datasets more efficiently\nWe will implement the function using a brute force approach to check all possible pairs in the list. This method is simple and easy to understand, making it suitable for beginners. We will use a nested loop to iterate through the list and check if any two distinct elements sum to zero.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the two numbers added together equal zero\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through the list with two nested loops to check every possible pair.\n    For each pair, check if their sum equals zero.\n    If a pair is found that sums to zero, return True.\n    If no such pair is found after checking all possibilities, return False.\n\n# [edge case] \n    pairs_sum_to_zero([0, 0, 0]) = False\n    Explanation: There are no two distinct elements that sum to zero.\n    pairs_sum_to_zero([-1, 1]) = True\n    Explanation: The pair (-1, 1) sums to zero.\n    pairs_sum_to_zero([1, -1, 2, -2, 3]) = True\n    Explanation: The pairs (-1, 1), (2, -2), and (3, -3) all sum to zero. However, since we need to return True for any pair, we only need to find one pair that sums to zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The brute force approach inherently handles the case where all elements are zero by checking all pairs and finding no valid pair.\n", "requirement analysis:\nThe requirement is to check if there are any two distinct elements in the list that sum to zero. This is a straightforward problem that can be solved efficiently using a set to track the complements of each element.\nrequirement pool:\n- Implement the function pairs_sum_to_zero to check for pairs summing to zero\n- Ensure the function is optimized for performance\n- Include tests to cover various edge cases\n- Document the function and its usage\n- Make the function compatible with different versions of Python\nTo implement the function pairs_sum_to_zero, we will use a set to track the complements of each element in the list. This approach ensures that we can check for pairs summing to zero in linear time, making it efficient. We will also include tests to cover various edge cases to ensure the function works correctly for different input lists.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the two numbers in the pair should add up to 0\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Create a set to store the complements of each element in the list.\n    - Iterate through the list and check if the complement of the current element (i.e., -current_element) is already in the set.\n    - If a complement is found, return True.\n    - If the loop completes without finding such a pair, return False.\n\n# [edge case] \n    pairs_sum_to_zero([0, 0, 0]) = False\n    Explanation: There are no two distinct elements that sum to zero.\n    pairs_sum_to_zero([1, -1]) = True\n    Explanation: The pair (1, -1) sums to zero.\n    pairs_sum_to_zero([1, 2, -3, 4, -2, -1]) = True\n    Explanation: The pair (1, -1) and (2, -2) both sum to zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will correctly handle the case where all elements are zero, as it will not find any pair summing to zero.\n\n# [core concept]\n    'sum to zero': means the two numbers in the pair should add up to 0\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Create a set to store the complements of each element in the list.\n    - Iterate through the list and check if the complement of the current element (i.e., -current_element) is already in the set.\n    - If a complement is found, return True.\n    - If the loop completes without finding such a pair, return False.\n\n# [edge case] \n    pairs_sum_to_zero([0, 0, 0]) = False\n    Explanation: There are no two distinct elements that sum to zero.\n    pairs_sum_to_zero([1, -1]) = True\n    Explanation: The pair (1, -1) sums to zero.\n    pairs_sum_to_zero([1, 2, -3, 4, -2, -1]) = True\n    Explanation: The pair (1, -1) and (2, -2) both sum to zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will correctly handle the case where all elements are zero, as it will not find any pair summing to zero.\n", "requirement analysis:\nThe requirement is to check if there are any two distinct elements in the list that sum to zero. This is a basic problem that can be solved using a straightforward approach. The function should be efficient and handle various types of input lists.\nrequirement pool:\n- Implement the function to check for pairs summing to zero\n- Ensure the function works correctly for all types of input lists\n- Optimize the function for performance\n- Document the function with examples\n- Test the function with different edge cases\nTo implement the function `pairs_sum_to_zero`, we will use a straightforward approach. We will iterate through the list and use a set to keep track of the numbers we have seen so far. For each number, we will check if the negative of that number exists in the set. If it does, we have found a pair that sums to zero. If we finish iterating through the list without finding such a pair, we will return False. This approach ensures that we only pass through the list once, making the function efficient.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the two numbers in the pair should add up to 0\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through the list and use a set to keep track of the numbers seen so far. For each number, check if its negative is in the set. If it is, return True. If the loop completes without finding such a pair, return False.\n\n# [edge case] \n    pairs_sum_to_zero([1, 2, -1, -2]) = True\n    Explanation: The pairs (-1, 1) and (-2, 2) both sum to zero.\n    pairs_sum_to_zero([1, 2, 3, 4]) = False\n    Explanation: No two distinct elements in the list sum to zero.\n    pairs_sum_to_zero([]) = False\n    Explanation: The list is empty, so there are no pairs to sum to zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic already correctly handles an empty list by returning False.\n", "requirement analysis:\nThe requirement is to create a function that checks if there are two distinct elements in a list that sum to zero. This is a common problem in algorithmic challenges and can be efficiently solved using a set to track complements. The function should handle edge cases like lists with a single element or no pairs summing to zero.\nrequirement pool:\n- The main code should efficiently check for pairs summing to zero using a set.\n- The function should handle edge cases like single-element lists and no pairs summing to zero.\n- The function should be optimized for both time and space complexity.\n- The function should have a clear and concise user interface.\n- The function should be tested for various input scenarios.\nTo implement the function `pairs_sum_to_zero`, we will use a set to track the complements of each number in the list. This approach ensures that we can efficiently check for pairs summing to zero with a time complexity of O(n), where n is the number of elements in the list. The space complexity will be O(n) due to the storage of complements in the set.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distinct elements': means that the two elements in the list must be different\n    'sum to zero': means the sum of the two elements must be 0\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Iterate through the list of integers.\n    (2) For each integer, calculate its complement (i.e., the negative of the integer).\n    (3) Check if the complement is already in the set of seen numbers.\n    (4) If the complement is found, return `True` because we have found two distinct elements that sum to zero.\n    (5) If the loop completes without finding such a pair, return `False`.\n\n# [edge case] \n    pairs_sum_to_zero([1]) = False\n    Explanation: There is only one element in the list, so it's impossible to find a pair that sums to zero.\n    pairs_sum_to_zero([1, 3, -2, 1]) = False\n    Explanation: Although the list contains negative numbers, there are no two distinct elements that sum to zero.\n    pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) = True\n    Explanation: The pair (-5, 5) sums to zero, and they are distinct elements in the list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic is sufficient to return `False` for a list with only one element.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [126, 126, 126, 126, 126, 126, 126, 126, 126, 126], "completion": "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there are two distinct elements in the list that sum to zero,\n    and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n        False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n        False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n        False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n        True\n    >>> pairs_sum_to_zero([1])\n        False\n    '''\n    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n", "passed": true, "pass": true, "pass_num": 10, "round": 458, "repair_prompt": ["def pairs_sum_to_zero(l):\t\n'''pairs_sum_to_zero takes a list of integers as an input. It returns True if there are two distinct elements in the list that sum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''", " def pairs_sum_to_zero(l):\n    '''pairs_sum_to_zero takes a list of integers as an input. It returns True if there are two distinct elements in the list that sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n        False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n        False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n        False\n   ", " def pairs_sum_to_zero(l):\n    '''pairs_sum_to_zero takes a list of integers as an input. It returns True if there are two distinct elements in the list that sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n   "], "mutate_method": "condense_two2one", "parent_index": 37}
