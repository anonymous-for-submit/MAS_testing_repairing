{"task_id": "HumanEval/43", "prompt": "def pairs_sum_to_zero(l):\t\n'''pairs_sum_to_zero takes a list of integers as an input. it returns True if there exist two different elements in the list whose sum equals zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''", "entry_point": "pairs_sum_to_zero", "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n", "test": ["def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 11, -3, 6, 7, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 7, -4, 1, 1, 11]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 11, 0, 3, 6, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 14, 0, 5, 2, 34]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 2, 3, 7]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 2, 9, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 4, 2, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 14, 1, 8, 6, 36]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 9, 0, 8, 5, 9]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 4, -6, 7, 1, 32]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 8, -2, 3]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-2, 10, 0, 6, 5, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 1, -2, 2]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 2, -1, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 4, -2, 5, 5, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 5, -3, 3]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 3, -4, 5]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-2, 4, -5, 4, 1, 25]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 6, -4, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 5, 2, 4, 1, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 14, 0, 1, 7, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 8, -5, 3, 7, 35]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 9, -9, 2, 7, 11]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 7, -1, 2, 1, 28]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 3, 2, 31]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 6, -7, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 9, 2, 3, 4, 30]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 6, 1, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 1, 3, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 5, 8, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 7, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 8, 10, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 13, -5, 7, 7, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 5, -10, 2, 10, 9]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 3, 1, 8]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 7, 4, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 9, -5, 4, 6, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 6, 2, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 2, 1, 11]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 2, 7, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 5, 2, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 14, -2, 8, 2, 35]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, 5, 0]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 8, 4, 3, 7, 29]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 12, 1, 9, 6, 33]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 11, 1, 6, 6, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 11, -3, 8, 7, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 10, -4, 8, 6, 26]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 3, 7, 1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 1, -4, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-2, 12, -4, 7, 1, 36]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 12, 1, 6, 7, 25]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 11, -3, 6, 2, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 13, -2, 7, 3, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 4, -10, 5, 10, 9]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 1, 3, 7]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 8, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 14, 2, 4, 6, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 5, 1, 12]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 3, 2, 30]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 5, -6, 8, 1, 33]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 3, 7, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 14, -6, 5, 1, 35]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 4, -1, 5, 10, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 13, -2, 4, 4, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 2, 6, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 4, -1, 5, 3, 33]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 3, 1, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([7, 5, -1, 1, 8, 10]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, 4, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 7, 3, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 12, -3, 2, 6, 29]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 9, -3, 6, 7, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 7, -9, 5, 4, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 6, 0, 6, 3, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 7, 8, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 4, -1, 8, 8, 12]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 8, 1, 1, 6, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 14, 1, 8, 2, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 6, -5, 7, 7, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 4, -7, 1, 2, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 11, -6, 5, 7, 36]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 14, 0, 5, 1, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 9, -1, 7, 4, 34]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, 3, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 10, 2, 9, 3, 33]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 4, 1, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 4, 2, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, -2, 1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 10, -2, 2, 4, 33]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 9, -8, 6, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 7, -4, 4, 2, 32]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 4, 10, 1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([7, 8, -10, 7, 2, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 8, 0, 4, 5, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 14, -4, 5, 6, 32]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 12, 1, 8, 6, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 12, -6, 6, 7, 29]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 5, 1, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 8, -4, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 2, 1, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 4, 3, 6, 2, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 11, -4, 3, 5, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 9, 2, 1, 6, 34]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 13, -4, 6, 3, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 1, 0, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 5, -2, 3, 1, 32]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 5, -1, 8, 8, 4]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 2, 2, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 8, 1, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 6, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 14, 3, 6, 2, 29]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 13, -2, 8, 7, 35]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 1, 3, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 8, -1, 7, 6, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 12, 0, 1, 7, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 3, 6, 7]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 6, -8, 1, 2, 8]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 8, -3, 9, 5, 29]) == False"], "test_case_list": ["assert pairs_sum_to_zero([1, 11, -3, 6, 7, 30]) == False", "assert pairs_sum_to_zero([3, 7, -4, 1, 1, 11]) == False", "assert pairs_sum_to_zero([-8, 11, 0, 3, 6, 26]) == False", "assert pairs_sum_to_zero([1, 14, 0, 5, 2, 34]) == False", "assert pairs_sum_to_zero([1, 2, 3, 7]) == False", "assert pairs_sum_to_zero([4, 2, 9, 3]) == False", "assert pairs_sum_to_zero([-3, 9, -1, 4, 2, 31]) == False", "assert pairs_sum_to_zero([3]) == False", "assert pairs_sum_to_zero([-1, 14, 1, 8, 6, 36]) == True", "assert pairs_sum_to_zero([3, 9, 0, 8, 5, 9]) == False", "assert pairs_sum_to_zero([1, 4, -6, 7, 1, 32]) == False", "assert pairs_sum_to_zero([2, 8, -2, 3]) == True", "assert pairs_sum_to_zero([-2, 10, 0, 6, 5, 30]) == False", "assert pairs_sum_to_zero([3, 1, -2, 2]) == True", "assert pairs_sum_to_zero([3, 2, -1, 2]) == False", "assert pairs_sum_to_zero([-1, 4, -2, 5, 5, 27]) == False", "assert pairs_sum_to_zero([1]) == False", "assert pairs_sum_to_zero([6, 5, -3, 3]) == True", "assert pairs_sum_to_zero([4, 3, -4, 5]) == True", "assert pairs_sum_to_zero([-2, 4, -5, 4, 1, 25]) == False", "assert pairs_sum_to_zero([2, 6, -4, 5]) == False", "assert pairs_sum_to_zero([-7, 5, 2, 4, 1, 26]) == False", "assert pairs_sum_to_zero([-8, 14, 0, 1, 7, 30]) == False", "assert pairs_sum_to_zero([1, 8, -5, 3, 7, 35]) == False", "assert pairs_sum_to_zero([6, 9, -9, 2, 7, 11]) == True", "assert pairs_sum_to_zero([-8, 7, -1, 2, 1, 28]) == True", "assert pairs_sum_to_zero([-3, 9, -1, 3, 2, 31]) == True", "assert pairs_sum_to_zero([6, 6, -7, 6]) == False", "assert pairs_sum_to_zero([-4, 9, 2, 3, 4, 30]) == True", "assert pairs_sum_to_zero([1, 6, 1, 2]) == False", "assert pairs_sum_to_zero([5, 1, 3, 5]) == False", "assert pairs_sum_to_zero([4, 5, 8, 3]) == False", "assert pairs_sum_to_zero([6, 7, 2, 5]) == False", "assert pairs_sum_to_zero([2, 8, 10, 3]) == False", "assert pairs_sum_to_zero([1, 13, -5, 7, 7, 27]) == False", "assert pairs_sum_to_zero([4, 5, -10, 2, 10, 9]) == True", "assert pairs_sum_to_zero([2, 3, 1, 8]) == False", "assert pairs_sum_to_zero([1, 7, 4, 6]) == False", "assert pairs_sum_to_zero([2, 9, -5, 4, 6, 30]) == False", "assert pairs_sum_to_zero([4, 6, 2, 4]) == False", "assert pairs_sum_to_zero([5, 2, 1, 11]) == False", "assert pairs_sum_to_zero([5, 2, 7, 3]) == False", "assert pairs_sum_to_zero([5, 5, 2, 2]) == False", "assert pairs_sum_to_zero([-8, 14, -2, 8, 2, 35]) == True", "assert pairs_sum_to_zero([1, 3, 5, 0]) == False", "assert pairs_sum_to_zero([-1, 8, 4, 3, 7, 29]) == False", "assert pairs_sum_to_zero([2, 12, 1, 9, 6, 33]) == False", "assert pairs_sum_to_zero([-4, 11, 1, 6, 6, 28]) == False", "assert pairs_sum_to_zero([0, 11, -3, 8, 7, 26]) == False", "assert pairs_sum_to_zero([-8, 10, -4, 8, 6, 26]) == True", "assert pairs_sum_to_zero([2]) == False", "assert pairs_sum_to_zero([2, 3, 7, 1]) == False", "assert pairs_sum_to_zero([6, 1, -4, 6]) == False", "assert pairs_sum_to_zero([-2, 12, -4, 7, 1, 36]) == False", "assert pairs_sum_to_zero([2, 12, 1, 6, 7, 25]) == False", "assert pairs_sum_to_zero([-4, 11, -3, 6, 2, 27]) == False", "assert pairs_sum_to_zero([0, 13, -2, 7, 3, 31]) == False", "assert pairs_sum_to_zero([1, 4, -10, 5, 10, 9]) == True", "assert pairs_sum_to_zero([4, 1, 3, 7]) == False", "assert pairs_sum_to_zero([6, 8, 2, 5]) == False", "assert pairs_sum_to_zero([-7, 14, 2, 4, 6, 30]) == False", "assert pairs_sum_to_zero([1, 5, 1, 12]) == False", "assert pairs_sum_to_zero([-3, 9, -1, 3, 2, 30]) == True", "assert pairs_sum_to_zero([-1, 5, -6, 8, 1, 33]) == True", "assert pairs_sum_to_zero([2, 3, 7, 4]) == False", "assert pairs_sum_to_zero([0, 14, -6, 5, 1, 35]) == False", "assert pairs_sum_to_zero([5, 4, -1, 5, 10, 6]) == False", "assert pairs_sum_to_zero([0, 13, -2, 4, 4, 28]) == False", "assert pairs_sum_to_zero([2, 2, 6, 4]) == False", "assert pairs_sum_to_zero([0, 4, -1, 5, 3, 33]) == False", "assert pairs_sum_to_zero([3, 3, 1, 4]) == False", "assert pairs_sum_to_zero([7, 5, -1, 1, 8, 10]) == True", "assert pairs_sum_to_zero([1, 3, 4, 3]) == False", "assert pairs_sum_to_zero([5, 7, 3, 4]) == False", "assert pairs_sum_to_zero([-7, 12, -3, 2, 6, 29]) == False", "assert pairs_sum_to_zero([-4, 9, -3, 6, 7, 31]) == False", "assert pairs_sum_to_zero([4, 7, -9, 5, 4, 6]) == False", "assert pairs_sum_to_zero([-4, 6, 0, 6, 3, 26]) == False", "assert pairs_sum_to_zero([4]) == False", "assert pairs_sum_to_zero([2, 7, 8, 5]) == False", "assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True", "assert pairs_sum_to_zero([1, 4, -1, 8, 8, 12]) == True", "assert pairs_sum_to_zero([-3, 8, 1, 1, 6, 31]) == False", "assert pairs_sum_to_zero([-6, 14, 1, 8, 2, 28]) == False", "assert pairs_sum_to_zero([-3, 6, -5, 7, 7, 30]) == False", "assert pairs_sum_to_zero([3, 4, -7, 1, 2, 3]) == False", "assert pairs_sum_to_zero([-8, 11, -6, 5, 7, 36]) == False", "assert pairs_sum_to_zero([-7, 14, 0, 5, 1, 28]) == False", "assert pairs_sum_to_zero([-5, 9, -1, 7, 4, 34]) == False", "assert pairs_sum_to_zero([1, 3, 3, 5]) == False", "assert pairs_sum_to_zero([-5, 10, 2, 9, 3, 33]) == False", "assert pairs_sum_to_zero([2, 4, 1, 2]) == False", "assert pairs_sum_to_zero([-3, 9, -1, 4, 2, 30]) == False", "assert pairs_sum_to_zero([1, 3, -2, 1]) == False", "assert pairs_sum_to_zero([2, 10, -2, 2, 4, 33]) == True", "assert pairs_sum_to_zero([3, 9, -8, 6, 2, 5]) == False", "assert pairs_sum_to_zero([-6, 7, -4, 4, 2, 32]) == True", "assert pairs_sum_to_zero([3, 4, 10, 1]) == False", "assert pairs_sum_to_zero([7, 8, -10, 7, 2, 4]) == False", "assert pairs_sum_to_zero([-6, 8, 0, 4, 5, 27]) == False", "assert pairs_sum_to_zero([-6, 14, -4, 5, 6, 32]) == True", "assert pairs_sum_to_zero([-5, 12, 1, 8, 6, 31]) == False", "assert pairs_sum_to_zero([-3, 12, -6, 6, 7, 29]) == True", "assert pairs_sum_to_zero([1, 5, 1, 3]) == False", "assert pairs_sum_to_zero([5, 8, -4, 5]) == False", "assert pairs_sum_to_zero([3, 2, 1, 6]) == False", "assert pairs_sum_to_zero([-5, 4, 3, 6, 2, 27]) == False", "assert pairs_sum_to_zero([-1, 11, -4, 3, 5, 28]) == False", "assert pairs_sum_to_zero([-7, 9, 2, 1, 6, 34]) == False", "assert pairs_sum_to_zero([-1, 13, -4, 6, 3, 28]) == False", "assert pairs_sum_to_zero([6, 1, 0, 3]) == False", "assert pairs_sum_to_zero([-5, 5, -2, 3, 1, 32]) == True", "assert pairs_sum_to_zero([1, 5, -1, 8, 8, 4]) == True", "assert pairs_sum_to_zero([1, 2, 2, 2]) == False", "assert pairs_sum_to_zero([6]) == False", "assert pairs_sum_to_zero([2, 8, 1, 4]) == False", "assert pairs_sum_to_zero([2, 6, 2, 5]) == False", "assert pairs_sum_to_zero([2, 14, 3, 6, 2, 29]) == False", "assert pairs_sum_to_zero([-5, 13, -2, 8, 7, 35]) == False", "assert pairs_sum_to_zero([6, 1, 3, 2]) == False", "assert pairs_sum_to_zero([5]) == False", "assert pairs_sum_to_zero([-4, 8, -1, 7, 6, 26]) == False", "assert pairs_sum_to_zero([-4, 12, 0, 1, 7, 28]) == False", "assert pairs_sum_to_zero([5, 3, 6, 7]) == False", "assert pairs_sum_to_zero([4, 6, -8, 1, 2, 8]) == True", "assert pairs_sum_to_zero([-4, 8, -3, 9, 5, 29]) == False"], "nl": "\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    ", "func": "def pairs_sum_to_zero(l):", "examples": ">>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    ", "completions": ["from typing import List\n## main.py\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n", "from typing import List\n## main.py\n\ndef pairs_sum_to_zero(l: list[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there exist two different elements in the list whose sum equals zero,\n    and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n        False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n        True\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n        False\n    '''\n    if not l:\n        return False\n    \n    seen_complements = set()\n    \n    for num in l:\n        complement = -num\n        if complement in seen_complements:\n            return True\n        seen_complements.add(num)\n    \n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there exist two different elements in the list whose sum equals zero,\n    and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n        False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n        True\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n        False\n    '''\n    if not l:\n        return False\n    \n    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    \n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there exist two different elements in the list whose sum equals zero,\n    and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n        False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n        True\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n        False\n    '''\n    seen = set()\n    for num in l:\n        complement = 0 - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there exist two different elements in the list whose sum equals zero,\n    and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n        False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n        True\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n        False\n    '''\n    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n", "from typing import List\n## main.py\n\ndef pairs_sum_to_zero(l: list[int]) -> bool:\n    seen_numbers = set()\n    \n    for number in l:\n        if -number in seen_numbers:\n            return True\n        seen_numbers.add(number)\n    \n    return False\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"], "plans": ["requirement analysis:\nThe requirement is to check if there are any two different elements in a list of integers that sum to zero. This is a common problem in algorithmic challenges and has practical applications in data analysis and problem-solving. The solution should be efficient and handle edge cases, such as lists with only one element, gracefully.\nrequirement pool:\n- The main code should iterate through the list and check pairs of integers for a sum of zero.\n- The function should return False if the list has fewer than two elements.\n- The solution should be optimized for time complexity, aiming for O(n) efficiency.\n- The function should handle edge cases, such as lists with only one element, gracefully.\n- The implementation should be clear and concise, making it easy to understand and maintain.\nTo implement the function `pairs_sum_to_zero`, we will use a set to keep track of the numbers we have seen so far. As we iterate through the list, we will check if the negative of the current number exists in the set. If it does, we return `True`. If we finish iterating through the list without finding such a pair, we return `False`. This approach ensures that we only pass through the list once, achieving an O(n) time complexity.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the sum of two numbers in the list equals zero\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through the list and use a set to keep track of the numbers seen so far. For each number, check if its negative is in the set. If it is, return `True`. If the loop completes without finding such a pair, return `False`.\n\n# [edge case] \n    pairs_sum_to_zero([1, 3, 5, 0]) = False\n    Explanation: No two different elements in the list sum to zero.\n    pairs_sum_to_zero([1, 3, -2, 1]) = False\n    Explanation: The only pair is (1, -1), but -1 is not in the list.\n    pairs_sum_to_zero([1, 2, 3, 7]) = False\n    Explanation: No two different elements in the list sum to zero.\n    pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) = True\n    Explanation: The pair (-5, 5) sums to zero.\n    pairs_sum_to_zero([1]) = False\n    Explanation: The list contains only one element, so it's impossible to find a pair that sums to zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle all cases.\n", "requirement analysis:\nThe requirement is to create a function that checks if there are any two different elements in a list of integers whose sum equals zero. The function should return True if such a pair exists and False otherwise. The function should handle edge cases such as an empty list or a list with a single element.\nrequirement pool:\n- The main code should correctly identify pairs whose sum equals zero.\n- The function should handle edge cases such as an empty list or a list with a single element.\n- The function should be optimized for performance to handle large lists efficiently.\n- The function should be easy to read and maintain.\n- The function should be tested thoroughly to ensure it works correctly for various input scenarios.\nWe will use a straightforward approach to solve the problem. The function will iterate through the list of integers, checking each pair to see if their sum equals zero. To optimize performance, we will use a set to keep track of the numbers we have seen so far, which allows for O(1) average time complexity for lookups.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the sum of two numbers in the list equals zero\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through the list and use a set to keep track of the numbers seen so far. For each number, check if the negative of that number exists in the set. If it does, return True. If the loop completes without finding such a pair, return False.\n\n# [edge case] \n    pairs_sum_to_zero([1]) = False\n    Explanation: Since there is only one element in the list, it's impossible for any pair to sum to zero.\n    pairs_sum_to_zero([0, 0]) = True\n    Explanation: The list contains two zeros, and their sum is zero.\n    pairs_sum_to_zero([-1, 1]) = True\n    Explanation: The list contains -1 and 1, which sum to zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic already correctly handles the case where the list has only one element.\n", "requirement analysis:\nThe requirement is to create a function that checks if there are any two different elements in a list of integers that sum to zero. This is a common problem in algorithmic challenges and software development. The function should be efficient and handle edge cases such as lists with a single element or no elements that sum to zero.\nrequirement pool:\n- The main code should iterate through the list and check pairs of elements to see if their sum equals zero.\n- The function should return False if no such pairs are found.\n- The function should return True if at least one pair of elements sums to zero.\n- The function should handle edge cases such as an empty list or a list with a single element.\n- The function should be optimized for time complexity to handle large lists efficiently.\nWe will use a straightforward approach to solve the problem. The function will iterate through the list of integers, checking each pair of elements to see if their sum equals zero. To ensure efficiency, we will use a set to keep track of the elements we have seen so far, which allows for constant time checks for complements.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the sum of two numbers in the list equals zero\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through the list and use a set to store the elements seen so far. For each element, check if its complement (element with opposite sign) is in the set. If it is, return True. If the loop completes without finding such a pair, return False.\n\n# [edge case] \n    pairs_sum_to_zero([1]) = False\n    Explanation: With only one element, it's impossible to find a pair that sums to zero.\n    pairs_sum_to_zero([0, 0]) = True\n    Explanation: The pair (0, 0) sums to zero.\n    pairs_sum_to_zero([-1, 1]) = True\n    Explanation: The pair (-1, 1) sums to zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic already correctly handles the case with a single element by returning False.\n\n# [core concept]\n    'sum to zero': means the sum of two numbers in the list equals zero\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through the list and use a set to store the elements seen so far. For each element, check if its complement (element with opposite sign) is in the set. If it is, return True. If the loop completes without finding such a pair, return False.\n\n# [edge case] \n    pairs_sum_to_zero([1]) = False\n    Explanation: With only one element, it's impossible to find a pair that sums to zero.\n    pairs_sum_to_zero([0, 0]) = True\n    Explanation: The pair (0, 0) sums to zero.\n    pairs_sum_to_zero([-1, 1]) = True\n    Explanation: The pair (-1, 1) sums to zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic already correctly handles the case with a single element by returning False.\n", "requirement analysis:\nThe requirement is to check if there are any two different elements in the list whose sum equals zero. This is a straightforward problem that can be solved efficiently using a set to track the complements of each element.\nrequirement pool:\n- Implement the function pairs_sum_to_zero with a time complexity of O(n)\n- Ensure the function handles edge cases such as empty lists or lists with all identical elements\n- Include comments in the code to explain the logic\n- Write unit tests to verify the correctness of the function\n- Optimize the code for performance\nTo implement the function pairs_sum_to_zero efficiently, we will use a set to track the complements of each element. This approach ensures that we can check for pairs in linear time, O(n), which is optimal for this problem. We will also handle edge cases such as empty lists or lists with all identical elements.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the two numbers in the pair should add up to zero.\n    Explanation: This concept involves finding two distinct elements in a list that, when added together, result in zero.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    To implement the function `pairs_sum_to_zero`, we can follow these steps:\n    1. Initialize an empty set to store the complements of each element.\n    2. Iterate through the list of integers.\n    3. For each element, calculate its complement (i.e., `-element`).\n    4. Check if the complement is already in the set.\n    5. If it is, return `True` because we have found a pair that sums to zero.\n    6. If it is not, add the complement to the set and continue.\n    7. If the loop completes without finding any such pair, return `False`.\n\n# [edge case] \n    pairs_sum_to_zero([]) = False\n    Explanation: An empty list does not contain any pairs, so the function should return `False`.\n    pairs_sum_to_zero([0, 0, 0]) = False\n    Explanation: All elements are the same, so it is impossible to find two different elements that sum to zero. The function should return `False`.\n    pairs_sum_to_zero([1, -1, 2, -2, 3, -3]) = True\n    Explanation: Each negative number pairs with its corresponding positive number to sum to zero. The function should return `True`.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can handle lists with all identical elements and empty lists without additional complexity.\n", "requirement analysis:\nThe requirement is to check if there are any two different elements in the list whose sum equals zero. This is a straightforward problem that can be solved efficiently using a set to track the complements of each element.\nrequirement pool:\n- Implement the function pairs_sum_to_zero with a time complexity of O(n).\n- Ensure the function handles edge cases such as empty lists and lists with all positive or all negative numbers.\n- Optimize the function for readability and maintainability.\nTo implement the function `pairs_sum_to_zero`, we will use a set to track the complements of each element as we iterate through the list. This approach ensures that we can check for pairs in linear time, O(n), which is efficient for large lists. We will also handle edge cases such as empty lists and lists with all positive or all negative numbers.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the sum of two numbers in the list equals zero\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n\n# [edge case] \n    pairs_sum_to_zero([]) = False\n    Explanation: An empty list cannot contain pairs, so the expected output is False.\n    pairs_sum_to_zero([0, 0, 0]) = False\n    Explanation: All elements are zero, and no pair can sum to zero, so the expected output is False.\n    pairs_sum_to_zero([-1, 1]) = True\n    Explanation: The pair (-1, 1) sums to zero, so the expected output is True.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic can handle these cases by checking if the list is empty or if all elements are the same.\n", "requirement analysis:\nThe requirement is to check if there are any two different elements in the list whose sum equals zero. This is a straightforward problem that can be solved efficiently using a set to track the complements of each element.\nrequirement pool:\n- Implement the function pairs_sum_to_zero with a time complexity of O(n).\n- Ensure the function handles edge cases such as empty lists and lists with all identical elements.\n- Optimize the function for performance to handle large lists efficiently.\nTo implement the function pairs_sum_to_zero efficiently, we will use a set to track the complements of each element. This approach ensures that we can check for pairs in linear time, O(n), which is optimal for this problem.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the two numbers in the pair should add up to zero.\n    'unique pairs': means the pair should consist of two different elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    The plan suggests using a set to track the complements of each element. Here's a detailed logic:\n    1. Initialize an empty set called `seen` to keep track of the elements we've encountered.\n    2. Iterate through each element `num` in the list `l`.\n    3. For each `num`, calculate its complement with respect to zero (`0 - num`).\n    4. Check if this complement is already in the `seen` set.\n    5. If it is, return `True` because we've found a pair that sums to zero.\n    6. If it is not, add `num` to the `seen` set.\n    7. If the loop completes without finding any such pair, return `False`.\n\n# [edge case] \n    pairs_sum_to_zero([0, 0, 0]) = True\n    Explanation: There are two different elements (0 and 0) whose sum equals zero.\n    pairs_sum_to_zero([1, -1, 2, -2]) = True\n    Explanation: There are two different elements (-1 and 1) and (2 and -2) whose sum equals zero.\n    pairs_sum_to_zero([1, 2, 3, 4]) = False\n    Explanation: No two different elements in the list sum to zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan already covers the case where all elements are zero, as well as cases with negative numbers.\n", "requirement analysis:\nThe requirement is to check if there are any two different elements in the list whose sum equals zero. The function should return True if such a pair exists and False otherwise. The solution should be efficient and easy to understand.\nrequirement pool:\n- Implement the function pairs_sum_to_zero with a clear and efficient algorithm.\n- Ensure the function works correctly for all types of input lists.\n- Include comments and docstrings for better readability and maintainability.\n- Optimize the function for performance to handle large lists efficiently.\n- Test the function with various edge cases to ensure robustness.\nTo implement the function pairs_sum_to_zero efficiently, we will use a set to keep track of the numbers we have seen so far. This approach allows us to check in constant time whether the complement of the current number (i.e., the number that, when added to the current number, equals zero) has already been seen. This method ensures that the function runs in linear time, making it efficient for large lists.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the sum of two numbers in the list equals zero\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through the list and use a set to keep track of the numbers seen so far. For each number, check if its complement (i.e., -number) is in the set. If it is, return True. If the loop completes without finding such a pair, return False.\n\n# [edge case] \n    pairs_sum_to_zero([0, 0, 0]) = True\n    Explanation: There are two zeros in the list, and their sum is zero.\n    pairs_sum_to_zero([1, -1, 2, -2]) = True\n    Explanation: There are pairs (1, -1) and (2, -2) whose sums are zero.\n    pairs_sum_to_zero([1, 2, 3, 4]) = False\n    Explanation: No two different elements in the list sum to zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic already correctly handles the presence of multiple zeros in the list.\n", "requirement analysis:\nThe requirement is to check if there are any two different elements in the list whose sum equals zero. This can be efficiently achieved using a set to store the complements of each element as we iterate through the list. This approach ensures that the lookup is fast, making the solution efficient.\nrequirement pool:\n- Implement the function using a set to store complements\n- Ensure the function can handle lists of various sizes\n- Include comments to explain the logic\n- Add tests to cover different scenarios\n- Optimize the code for performance\nTo implement the function efficiently, we will use a set to store the complements of each element as we iterate through the list. This approach ensures that the lookup is fast, making the solution efficient. We will also include comments to explain the logic for better understandability.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the sum of two different elements in the list equals zero.\n    Explanation: This core concept involves finding two distinct elements in the list whose values add up to zero.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    To implement the function efficiently, we will use a set to store the complements of each element as we iterate through the list. This approach ensures that the lookup is fast, making the solution efficient. We will also include comments to explain the logic for better understandability.\n\n# [edge case] \n    pairs_sum_to_zero([1, 2, -1, -2]) = True\n    Explanation: In this case, the list contains the pair (1, -1) and (-2, 2) which both sum to zero.\n    pairs_sum_to_zero([1, 2, 3, 4]) = False\n    Explanation: There are no two distinct elements in the list that sum to zero.\n    pairs_sum_to_zero([]) = False\n    Explanation: An empty list does not contain any elements, so it is impossible to find a pair that sums to zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will return False for an empty list.\n", "requirement analysis:\nThe requirement is to check if there are any two different elements in the list whose sum equals zero. This is a straightforward problem that can be solved efficiently using Python's built-in functions and data structures. The solution should be simple, readable, and optimized for performance.\nrequirement pool:\n- Implement the function to check for pairs summing to zero\n- Ensure the function works correctly for all edge cases\n- Optimize the function for performance\n- Document the function for easy understanding\n- Test the function with various inputs\nWe will use Python's built-in functions and data structures to implement the function efficiently. The function will iterate through the list and use a set to keep track of the numbers we have seen so far. For each number, we will check if the negative of that number exists in the set. If it does, we return True. If we finish iterating through the list without finding such a pair, we return False.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the sum of two numbers in the list equals zero\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through the list and use a set to keep track of the numbers we have seen so far. For each number, check if the negative of that number exists in the set. If it does, return True. If we finish iterating through the list without finding such a pair, return False.\n\n# [edge case] \n    pairs_sum_to_zero([0, 0, 0]) = True\n    Explanation: There are two zeros in the list, and their sum is zero.\n    pairs_sum_to_zero([1, -1]) = True\n    Explanation: There are two different elements in the list whose sum equals zero.\n    pairs_sum_to_zero([2, 3, 4]) = False\n    Explanation: No two different elements in the list sum to zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will correctly handle the case where all elements are zero, as well as cases with exactly one pair that sums to zero.\n", "requirement analysis:\nThe requirement is to check if there are any two different elements in the list whose sum equals zero. The function should return True if such a pair exists, and False otherwise. The function should handle edge cases such as an empty list or a list with a single element.\nrequirement pool:\n- The main code should correctly identify pairs whose sum equals zero.\n- The function should handle edge cases effectively.\n- Ensure the function is optimized for performance.\n- Provide clear and concise documentation for the function.\n- Include unit tests to verify the function's correctness.\nTo implement the function `pairs_sum_to_zero` efficiently, we will use a set to keep track of the numbers we have seen so far. This approach allows us to check in constant time whether the complement of the current number (i.e., the number that, when added to the current number, equals zero) has already been seen. This method ensures that the function runs in linear time, making it both fast and efficient.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the sum of two numbers in the list equals zero\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through the list and use a set to keep track of the numbers seen so far. For each number, check if its complement (i.e., -number) is in the set. If it is, return True. If the loop completes without finding such a pair, return False.\n\n# [edge case] \n    pairs_sum_to_zero([1, 2, -3, 4, -1]) = True\n    Explanation: The pair (-1, 1) sums to zero.\n    pairs_sum_to_zero([1, 2, 3, 4]) = False\n    Explanation: No two numbers in the list sum to zero.\n    pairs_sum_to_zero([]) = False\n    Explanation: The list is empty, so there are no pairs to sum.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle the case of an empty list.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [126, 126, 126, 126, 126, 126, 126, 126, 126, 126], "completion": "from typing import List\n## main.py\n\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n", "passed": true, "pass": true, "pass_num": 10, "round": 344, "repair_prompt": ["def pairs_sum_to_zero(l):\t\n'''pairs_sum_to_zero takes a list of integers as an input. it returns True if there exist two different elements in the list whose sum equals zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''", " def pairs_sum_to_zero(l):\n    '''pairs_sum_to_zero takes a list of integers as an input. it returns True if there exist two different elements in the list whose sum equals zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n        False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n        False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n        False\n   ", " def pairs_sum_to_zero(l):\n    '''pairs_sum_to_zero takes a list of integers as an input. it returns True if there exist two different elements in the list whose sum equals zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n        False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n        False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n        False\n   "], "mutate_method": "rephrase_one", "parent_index": 37}
