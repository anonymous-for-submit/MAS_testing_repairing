{"task_id": "HumanEval/117", "prompt": "def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Ensure that the function handles both uppercase and lowercase letters without any case sensitivity issues.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", "entry_point": "select_words", "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "test": ["def check(select_words):\n\tassert select_words('eg aqk', 2) == ['aqk']", "def check(select_words):\n\tassert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "def check(select_words):\n\tassert select_words('syk', 6) == []", "def check(select_words):\n\tassert select_words('gw', 9) == []", "def check(select_words):\n\tassert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "def check(select_words):\n\tassert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "def check(select_words):\n\tassert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "def check(select_words):\n\tassert select_words('zGMhBC', 6) == ['zGMhBC']", "def check(select_words):\n\tassert select_words('kfohjsjunakqmmsx', 1) == []", "def check(select_words):\n\tassert select_words('KbpFfWgXZoVjXV', 1) == []", "def check(select_words):\n\tassert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "def check(select_words):\n\tassert select_words('kg', 1) == []", "def check(select_words):\n\tassert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "def check(select_words):\n\tassert select_words('xrbpxpncgqufqkq', 6) == []", "def check(select_words):\n\tassert select_words('sqgikswgssxsbwkl', 7) == []", "def check(select_words):\n\tassert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "def check(select_words):\n\tassert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "def check(select_words):\n\tassert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "def check(select_words):\n\tassert select_words('bnXA AjPVh', 5) == []", "def check(select_words):\n\tassert select_words('omnivbqgmavyqdgqssas', 6) == []", "def check(select_words):\n\tassert select_words('fmjizkhknnihqioic', 4) == []", "def check(select_words):\n\tassert select_words('lINKPOlFIImtg', 3) == []", "def check(select_words):\n\tassert select_words('nPxmyTd', 7) == ['nPxmyTd']", "def check(select_words):\n\tassert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "def check(select_words):\n\tassert select_words('mehochzpausf', 2) == []", "def check(select_words):\n\tassert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "def check(select_words):\n\tassert select_words('EGiDfM', 1) == []", "def check(select_words):\n\tassert select_words('mc', 7) == []", "def check(select_words):\n\tassert select_words('wzx', 5) == []", "def check(select_words):\n\tassert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "def check(select_words):\n\tassert select_words('xwkxcjffocow', 5) == []", "def check(select_words):\n\tassert select_words('dl', 5) == []", "def check(select_words):\n\tassert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "def check(select_words):\n\tassert select_words('ABIStgq', 5) == ['ABIStgq']", "def check(select_words):\n\tassert select_words('nb', 2) == ['nb']", "def check(select_words):\n\tassert select_words('ny', 2) == ['ny']", "def check(select_words):\n\tassert select_words('HWCLBC', 6) == ['HWCLBC']", "def check(select_words):\n\tassert select_words('uuh', 6) == []", "def check(select_words):\n\tassert select_words('uoubngttn', 3) == []", "def check(select_words):\n\tassert select_words('g', 5) == []", "def check(select_words):\n\tassert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "def check(select_words):\n\tassert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "def check(select_words):\n\tassert select_words('aztxoxesjkzqebhrfzw', 3) == []", "def check(select_words):\n\tassert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "def check(select_words):\n\tassert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "def check(select_words):\n\tassert select_words('tJzO PnCT', 3) == ['tJzO']", "def check(select_words):\n\tassert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "def check(select_words):\n\tassert select_words('qhwubvrfmwy', 2) == []", "def check(select_words):\n\tassert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "def check(select_words):\n\tassert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "def check(select_words):\n\tassert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "def check(select_words):\n\tassert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "def check(select_words):\n\tassert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "def check(select_words):\n\tassert select_words('r s rhhipmt', 6) == ['rhhipmt']", "def check(select_words):\n\tassert select_words('aDqyhePv', 6) == ['aDqyhePv']", "def check(select_words):\n\tassert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "def check(select_words):\n\tassert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "def check(select_words):\n\tassert select_words('aru', 5) == []", "def check(select_words):\n\tassert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "def check(select_words):\n\tassert select_words('SNeiILCez', 4) == []", "def check(select_words):\n\tassert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "def check(select_words):\n\tassert select_words('ySmjGAg', 6) == ['ySmjGAg']", "def check(select_words):\n\tassert select_words('bRJRZC', 3) == []", "def check(select_words):\n\tassert select_words('u', 1) == []", "def check(select_words):\n\tassert select_words('djucfuuizrjfvuzzo', 4) == []", "def check(select_words):\n\tassert select_words('dvYLMt', 6) == ['dvYLMt']", "def check(select_words):\n\tassert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "def check(select_words):\n\tassert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "def check(select_words):\n\tassert select_words('yp', 6) == []", "def check(select_words):\n\tassert select_words('v', 4) == []", "def check(select_words):\n\tassert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "def check(select_words):\n\tassert select_words('afrrguc', 5) == ['afrrguc']", "def check(select_words):\n\tassert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "def check(select_words):\n\tassert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "def check(select_words):\n\tassert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "def check(select_words):\n\tassert select_words('nh vu lcakrb', 1) == ['vu']", "def check(select_words):\n\tassert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "def check(select_words):\n\tassert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "def check(select_words):\n\tassert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "def check(select_words):\n\tassert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "def check(select_words):\n\tassert select_words('MjRnAErHPguQC', 1) == []", "def check(select_words):\n\tassert select_words('tmchxmttrgfdanq', 3) == []", "def check(select_words):\n\tassert select_words('jezkeorvxnruwhhwzxm', 7) == []", "def check(select_words):\n\tassert select_words('caurfxlpkygqxoknil', 4) == []", "def check(select_words):\n\tassert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "def check(select_words):\n\tassert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "def check(select_words):\n\tassert select_words('NSjIbZV', 2) == []", "def check(select_words):\n\tassert select_words('rPKhzIot', 6) == ['rPKhzIot']", "def check(select_words):\n\tassert select_words('ASDVzOVVDEdj J', 1) == ['J']", "def check(select_words):\n\tassert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "def check(select_words):\n\tassert select_words(' siweqafqot', 5) == []", "def check(select_words):\n\tassert select_words('xdQgsAHI', 5) == []", "def check(select_words):\n\tassert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "def check(select_words):\n\tassert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "def check(select_words):\n\tassert select_words('hguHoJGaaNwX', 3) == []", "def check(select_words):\n\tassert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "def check(select_words):\n\tassert select_words('choounwx', 5) == ['choounwx']", "def check(select_words):\n\tassert select_words('yue', 2) == []", "def check(select_words):\n\tassert select_words('DDdrgPy', 4) == []", "def check(select_words):\n\tassert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "def check(select_words):\n\tassert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "def check(select_words):\n\tassert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "def check(select_words):\n\tassert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "def check(select_words):\n\tassert select_words('Reg MuZcF', 4) == ['MuZcF']", "def check(select_words):\n\tassert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "def check(select_words):\n\tassert select_words('sl', 6) == []", "def check(select_words):\n\tassert select_words('IFKqNq ', 5) == ['IFKqNq']", "def check(select_words):\n\tassert select_words('lfspeijyudniowk', 1) == []", "def check(select_words):\n\tassert select_words('kogmgdnk', 7) == ['kogmgdnk']", "def check(select_words):\n\tassert select_words('nnchatjackywoavfwfps', 5) == []", "def check(select_words):\n\tassert select_words('d', 2) == []", "def check(select_words):\n\tassert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "def check(select_words):\n\tassert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "def check(select_words):\n\tassert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "def check(select_words):\n\tassert select_words('jopfxbbvlslmluypcdt', 3) == []", "def check(select_words):\n\tassert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "def check(select_words):\n\tassert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "def check(select_words):\n\tassert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "def check(select_words):\n\tassert select_words('etdrxwybqi', 1) == []", "def check(select_words):\n\tassert select_words('aVCSziOkLCLGizHcmC', 2) == []", "def check(select_words):\n\tassert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "def check(select_words):\n\tassert select_words('txXxge', 4) == []", "def check(select_words):\n\tassert select_words('kcpieuVjAOaxdpB', 4) == []", "def check(select_words):\n\tassert select_words('oh', 8) == []", "def check(select_words):\n\tassert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "def check(select_words):\n\tassert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "def check(select_words):\n\tassert select_words('eywh qxreeexrrhyovpwl', 7) == []", "def check(select_words):\n\tassert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "def check(select_words):\n\tassert select_words('asfwxvbzdfsrymc', 3) == []", "def check(select_words):\n\tassert select_words('nBmjWxiPV', 3) == []", "def check(select_words):\n\tassert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "test_case_list": ["assert select_words('eg aqk', 2) == ['aqk']", "assert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "assert select_words('syk', 6) == []", "assert select_words('gw', 9) == []", "assert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "assert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "assert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "assert select_words('zGMhBC', 6) == ['zGMhBC']", "assert select_words('kfohjsjunakqmmsx', 1) == []", "assert select_words('KbpFfWgXZoVjXV', 1) == []", "assert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "assert select_words('kg', 1) == []", "assert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "assert select_words('xrbpxpncgqufqkq', 6) == []", "assert select_words('sqgikswgssxsbwkl', 7) == []", "assert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "assert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "assert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "assert select_words('bnXA AjPVh', 5) == []", "assert select_words('omnivbqgmavyqdgqssas', 6) == []", "assert select_words('fmjizkhknnihqioic', 4) == []", "assert select_words('lINKPOlFIImtg', 3) == []", "assert select_words('nPxmyTd', 7) == ['nPxmyTd']", "assert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "assert select_words('mehochzpausf', 2) == []", "assert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "assert select_words('EGiDfM', 1) == []", "assert select_words('mc', 7) == []", "assert select_words('wzx', 5) == []", "assert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "assert select_words('xwkxcjffocow', 5) == []", "assert select_words('dl', 5) == []", "assert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "assert select_words('ABIStgq', 5) == ['ABIStgq']", "assert select_words('nb', 2) == ['nb']", "assert select_words('ny', 2) == ['ny']", "assert select_words('HWCLBC', 6) == ['HWCLBC']", "assert select_words('uuh', 6) == []", "assert select_words('uoubngttn', 3) == []", "assert select_words('g', 5) == []", "assert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "assert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "assert select_words('aztxoxesjkzqebhrfzw', 3) == []", "assert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "assert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "assert select_words('tJzO PnCT', 3) == ['tJzO']", "assert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "assert select_words('qhwubvrfmwy', 2) == []", "assert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "assert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "assert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "assert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "assert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "assert select_words('r s rhhipmt', 6) == ['rhhipmt']", "assert select_words('aDqyhePv', 6) == ['aDqyhePv']", "assert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "assert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "assert select_words('aru', 5) == []", "assert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "assert select_words('SNeiILCez', 4) == []", "assert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "assert select_words('ySmjGAg', 6) == ['ySmjGAg']", "assert select_words('bRJRZC', 3) == []", "assert select_words('u', 1) == []", "assert select_words('djucfuuizrjfvuzzo', 4) == []", "assert select_words('dvYLMt', 6) == ['dvYLMt']", "assert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "assert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "assert select_words('yp', 6) == []", "assert select_words('v', 4) == []", "assert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "assert select_words('afrrguc', 5) == ['afrrguc']", "assert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "assert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "assert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "assert select_words('nh vu lcakrb', 1) == ['vu']", "assert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "assert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "assert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "assert select_words('MjRnAErHPguQC', 1) == []", "assert select_words('tmchxmttrgfdanq', 3) == []", "assert select_words('jezkeorvxnruwhhwzxm', 7) == []", "assert select_words('caurfxlpkygqxoknil', 4) == []", "assert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "assert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "assert select_words('NSjIbZV', 2) == []", "assert select_words('rPKhzIot', 6) == ['rPKhzIot']", "assert select_words('ASDVzOVVDEdj J', 1) == ['J']", "assert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "assert select_words(' siweqafqot', 5) == []", "assert select_words('xdQgsAHI', 5) == []", "assert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "assert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "assert select_words('hguHoJGaaNwX', 3) == []", "assert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "assert select_words('choounwx', 5) == ['choounwx']", "assert select_words('yue', 2) == []", "assert select_words('DDdrgPy', 4) == []", "assert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "assert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "assert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "assert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "assert select_words('Reg MuZcF', 4) == ['MuZcF']", "assert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "assert select_words('sl', 6) == []", "assert select_words('IFKqNq ', 5) == ['IFKqNq']", "assert select_words('lfspeijyudniowk', 1) == []", "assert select_words('kogmgdnk', 7) == ['kogmgdnk']", "assert select_words('nnchatjackywoavfwfps', 5) == []", "assert select_words('d', 2) == []", "assert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "assert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "assert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "assert select_words('jopfxbbvlslmluypcdt', 3) == []", "assert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "assert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "assert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "assert select_words('etdrxwybqi', 1) == []", "assert select_words('aVCSziOkLCLGizHcmC', 2) == []", "assert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "assert select_words('txXxge', 4) == []", "assert select_words('kcpieuVjAOaxdpB', 4) == []", "assert select_words('oh', 8) == []", "assert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "assert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "assert select_words('eywh qxreeexrrhyovpwl', 7) == []", "assert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "assert select_words('asfwxvbzdfsrymc', 3) == []", "assert select_words('nBmjWxiPV', 3) == []", "assert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "nl": "Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    ", "func": "def select_words(s, n):", "examples": "Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    ", "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants they contain.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants a word must contain to be included in the output.\n        \n    Returns:\n        List[str]: A list of words from the input string that contain exactly `n` consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    def count_consonants(word: str) -> int:\n        \"\"\"\n        Counts the number of consonants in a word.\n        \n        Args:\n            word (str): The word to count consonants in.\n            \n        Returns:\n            int: The number of consonants in the word.\n        \"\"\"\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n    \n    words = s.lower().split()\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    \n    return filtered_words\n", "from typing import List\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    \n    # Define a set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyz\")\n    \n    # Split the input string into words\n    words = s.lower().split()\n    \n    # Filter words based on the number of consonants\n    filtered_words = [word for word in words if sum(1 for char in word if char in consonants) == n]\n    \n    return filtered_words\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    \n    def count_consonants(word: str) -> int:\n        vowels = \"aeiou\"\n        return sum(1 for char in word.lower() if char.isalpha() and char not in vowels)\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    \n    vowels = \"aeiou\"\n    words = s.lower().split()\n    filtered_words = []\n    \n    for word in words:\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        if consonant_count == n:\n            filtered_words.append(word)\n    \n    return filtered_words\n", "from typing import List\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    \n    vowels = set('aeiou')\n    consonants = set('bcdfghjklmnpqrstvwxyz')\n    \n    def count_consonants(word: str) -> int:\n        return sum(1 for char in word.lower() if char in consonants)\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    \n    return result\n", "from typing import List\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants.\n\n    Args:\n        s (str): The input string.\n        n (int): The number of consonants a word must contain.\n\n    Returns:\n        List[str]: A list of words containing exactly n consonants.\n    \"\"\"\n    # Step 1: Normalize the case of the input string to ensure case-insensitivity.\n    s = s.lower()\n    \n    # Step 2: Split the string into words.\n    words = s.split()\n    \n    # Step 3: Define a helper function to count the consonants in a word.\n    def count_consonants(word: str) -> int:\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return sum(1 for char in word if char in consonants)\n    \n    # Step 4: Filter the words based on the specified number of consonants.\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    \n    # Step 5: Return the filtered list of words.\n    return filtered_words\n", "from typing import List\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    \n    def count_consonants(word: str) -> int:\n        vowels = \"aeiou\"\n        return sum(1 for char in word.lower() if char.isalpha() and char not in vowels)\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "from typing import List\n## main.py\nimport re\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    \n    # Normalize the string to lowercase\n    s = s.lower()\n    \n    # Define a function to count consonants in a word\n    def count_consonants(word: str) -> int:\n        vowels = \"aeiou\"\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n    \n    # Use regex to find words with exactly n consonants\n    pattern = r'\\b\\w*[^aeiou]{' + str(n) + r'}(\\w{2,})'\n    matches = re.findall(pattern, s)\n    \n    # Return the filtered list of words\n    return matches\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef count_consonants(word: str) -> int:\n    \"\"\"Helper function to count the number of consonants in a word.\"\"\"\n    vowels = \"aeiouAEIOU\"\n    return sum(1 for char in word if char.isalpha() and char not in vowels)\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Function to filter words based on the number of consonants they contain.\"\"\"\n    if not s:\n        return []\n    \n    words = s.split()\n    filtered_words = []\n    \n    for word in words:\n        consonant_count = count_consonants(word)\n        if consonant_count == n:\n            filtered_words.append(word)\n    \n    return filtered_words\n", "from typing import List\nimport re\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    \n    # Define a set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyz\")\n    \n    # Clean the string and convert to lowercase\n    cleaned_s = re.sub(r'\\s+', ' ', s).lower()\n    \n    # Split the string into words\n    words = cleaned_s.split()\n    \n    # Use list comprehension to filter words with exactly n consonants\n    result = [word for word in words if len(re.findall(r'[bcdfghjklmnpqrstvwxyz]', word)) == n]\n    \n    return result\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be case-insensitive and maintain the order of words as they appear in the input string. The solution should be efficient and handle various input sizes.\nrequirement pool:\n- Implement a function that filters words based on the number of consonants they contain.\n- Ensure the function is case-insensitive.\n- Maintain the order of words as they appear in the input string.\n- Optimize the function for efficiency.\n- Handle various input sizes without performance issues.\nTo implement the function `select_words(s, n)` that filters words based on the number of consonants they contain, we will follow these steps: 1. Normalize the case of all letters to ensure case-insensitivity. 2. Split the input string into words. 3. Define a helper function to count the consonants in a word. 4. Filter words based on the specified number of consonants. 5. Return the filtered list of words in the order they appear in the input string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case-insensitivity': means that the function should treat uppercase and lowercase letters as the same.\n    'consonants': means the letters that are not vowels (a, e, i, o, u) in the English alphabet.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Steps to implement the function:\n    1. Normalize the case of all letters in the string to lowercase.\n    2. Split the input string into words.\n    3. Define a helper function to count the consonants in a word.\n    4. Filter words based on the specified number of consonants.\n    5. Return the filtered list of words in the order they appear in the input string.\n\n# [edge case] \n    select_words(\"\", 4) = []\n    Explanation: The input string is empty, so there are no words to filter, and the expected output is an empty list.\n    select_words(\"Hello world\", 0) = [\"Hello\", \"world\"]\n    Explanation: The number of consonants in each word is zero, so all words are included in the output list.\n    select_words(\"Mary had a little lamb\", 10) = []\n    Explanation: The number of consonants in any word cannot be 10, so the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic can handle cases where the input string is empty or where the specified number of consonants is not possible.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be case-insensitive and handle empty strings gracefully. The analysis shows a strong position in functionality and user experience compared to similar products, indicating a good market fit.\nrequirement pool:\n- Implement a function that filters words based on the number of consonants they contain.\n- Ensure the function is case-insensitive.\n- Handle empty strings gracefully by returning an empty list.\n- Optimize the function for performance to handle large inputs efficiently.\n- Include detailed examples in the function documentation.\nTo implement the function `select_words` that filters words based on the number of consonants they contain, we will use Python's built-in string manipulation methods and a simple list comprehension. The function will be designed to be case-insensitive, handling both uppercase and lowercase letters without any issues. We will also ensure it gracefully handles empty strings by returning an empty list.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants\n\n# [phrase showing quantity relationship]\n    'exactly': means that the word must have a specific number of consonants\n\n# [degree adverb] \n    No degree adverb specifically related to the number of consonants\n\n# [code logic]\n    (1) Split the input string into words.\n    (2) Define a set of consonants for easy checking.\n    (3) Use a list comprehension to filter words that have exactly n consonants.\n    (4) Ensure the function is case-insensitive by converting words to lowercase.\n    (5) Return the filtered list of words.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to consider, and the function should return an empty list.\n    select_words(\"Hello world\", 5) = []\n    Explanation: The input string contains no words with exactly 5 consonants. The word \"world\" has 3 consonants, which does not meet the requirement.\n    select_words(\"A quick brown fox jumps over the lazy dog\", 5) = [\"quick\", \"brown\"]\n    Explanation: The input string contains several words with exactly 5 consonants. The words \"quick\" and \"brown\" are the ones that appear in the order they are found in the string.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case of an empty string. The function already returns an empty list as expected.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be case-insensitive and ignore spaces. The function should return an empty list if the input string is empty. The requirements are clear and specific, focusing on functionality and usability.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function is case-insensitive and ignores spaces.\n- Return an empty list if the input string is empty.\n- Test the function for efficiency and accuracy.\n- Develop a user-friendly interface for easy input and output.\nTo implement the function that filters words based on the number of consonants they contain, we will use Python's built-in string manipulation methods and a simple list comprehension. The function will first split the input string into words, then filter these words based on the number of consonants they contain. We will ensure the function is case-insensitive by converting all letters to lowercase. Spaces will be ignored during the consonant counting process.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'case-insensitivity': the function should treat uppercase and lowercase letters as the same\n    'word splitting': breaking a string into individual words\n\n# [phrase showing quantity relationship]\n    'exactly': means the number of consonants in a word must match the given number n\n\n# [degree adverb] \n    No degree adverb specifically mentioned, but 'exactly' implies a specific quantity\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Steps:\n    1. Split the input string into words.\n    2. Define a function to count consonants in a word.\n    3. Use a list comprehension to filter words with exactly n consonants.\n    4. Ensure the function is case-insensitive by converting words to lowercase.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The string is empty, so there are no words to consider, and the expected output is an empty list.\n    select_words(\"Hello world\", 5) = []\n    Explanation: There are no words with exactly 5 consonants in the string. The word \"world\" has 3 consonants, and \"Hello\" has 2 consonants.\n    select_words(\"A quick brown fox jumps over the lazy dog\", 5) = [\"quick\", \"brown\"]\n    Explanation: The words \"quick\" and \"brown\" each have exactly 5 consonants, while other words either have fewer or more consonants.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case of an empty string. The function already returns an empty list as expected.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be able to handle both uppercase and lowercase letters and should return an empty list if the input string is empty. The function should be efficient and easy to use.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function is case-insensitive.\n- Return an empty list if the input string is empty.\n- Optimize the function for efficiency.\n- Develop a user-friendly interface for easy input and output.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string manipulation capabilities. The function will first split the input string into words, then filter these words based on the number of consonants they contain. We will ensure the function is case-insensitive by converting all letters to lowercase. The function will return an empty list if the input string is empty.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'case-insensitivity': the function should treat uppercase and lowercase letters as the same\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Split the input string into words.\n    - Filter words based on the number of consonants they contain.\n    - Ensure case-insensitivity by converting all letters to lowercase.\n    - Return an empty list if the input string is empty.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    explanation: The input string is empty, so the function should return an empty list.\n    select_words(\"Mary had a little lamb\", 3) = ['Mary']\n    explanation: The word 'Mary' contains exactly 3 consonants ('M', 'r', 'y'), which are 'M', 'r', and 'y'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function already returns an empty list for an empty input string.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be case-insensitive and handle empty strings by returning an empty list. The solution should be efficient and easy to understand.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function is case-insensitive.\n- Handle empty strings by returning an empty list.\n- Optimize the function for efficiency.\n- Document the code for easy understanding.\nTo implement the function `select_words` that filters words based on the number of consonants, we will use Python's built-in string manipulation methods and a simple list comprehension. The function will first split the input string into words, then filter these words based on the number of consonants they contain. We will ensure the function is case-insensitive by converting all words to lowercase before counting consonants.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'case-insensitive': the function should treat 'A' and 'a' as the same letter\n\n# [phrase showing quantity relationship]\n    'exactly': means that the word must contain exactly n consonants\n\n# [degree adverb] \n    No degree adverb specifically mentioned, but 'exactly' implies a specific quantity\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Steps to implement the function:\n    1. Split the input string into words.\n    2. Define a set of consonants for easy lookup.\n    3. Iterate through each word, convert it to lowercase, and count the consonants.\n    4. Filter words that have exactly n consonants.\n    5. Return the filtered list of words.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to consider. The expected output is an empty list.\n    select_words(\"Hello World\", 3) = []\n    Explanation: The input string contains words with varying numbers of consonants, none of which have exactly 3 consonants. The expected output is an empty list.\n    select_words(\"A quick brown fox jumps over the lazy dog\", 5) = [\"quick\", \"brown\"]\n    Explanation: The input string contains several words, and \"quick\" and \"brown\" are the only words with exactly 5 consonants. The expected output is a list containing these two words.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case of an empty string. The function already returns an empty list for such cases.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants. The function should be able to handle both uppercase and lowercase letters and return the words in the order they appear in the input string. The function should also handle edge cases such as an empty input string.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function is case-insensitive.\n- Maintain the order of words in the input string.\n- Handle edge cases such as an empty input string.\n- Optimize the function for efficiency.\nTo implement the function `select_words(s, n)` that filters words based on the number of consonants, we will follow these steps: 1. Normalize the case of the input string to ensure case-insensitivity. 2. Split the string into words. 3. Define a helper function to count the consonants in a word. 4. Filter the words based on the specified number of consonants. 5. Return the filtered list of words in the order they appear in the input string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case-insensitivity': means that the function should treat uppercase and lowercase letters as the same.\n    'consonants': means the letters that are not vowels (a, e, i, o, u) in the English alphabet.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Normalize the case of the input string.\n    - Split the string into words.\n    - Define a helper function to count the consonants in a word.\n    - Filter the words based on the specified number of consonants.\n    - Return the filtered list of words in the order they appear in the input string.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    explanation: The input string is empty, so the function should return an empty list.\n    select_words(\"Hello World\", 3) = [\"Hello\"]\n    explanation: The word \"Hello\" contains exactly 3 consonants (H, l, l), while \"World\" contains 2 consonants.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function will naturally return an empty list if the input string is empty.\n\nPlease note that the plan provided in the prompt is incomplete and does not cover all the necessary steps to implement the function `select_words(s, n)`. I will now provide a detailed plan and logic for the function based on the requirement and analysis.\n\n## Plan for `select_words(s, n)`:\n\n1. Normalize the case of the input string to ensure case-insensitivity.\n2. Split the string into words.\n3. Define a helper function to count the consonants in a word.\n4. Filter the words based on the specified number of consonants.\n5. Return the filtered list of words in the order they appear in the input string.\n\n## Code Logic:\n\n```python\ndef select_words(s, n):\n    # Step 1: Normalize the case of the input string\n    s = s.lower()\n    \n    # Step 2: Split the string into words\n    words = s.split()\n    \n    # Step 3: Define a helper function to count consonants in a word\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return sum(1 for char in word if char in consonants)\n    \n    # Step 4: Filter the words based on the specified number of consonants\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    \n    # Step 5: Return the filtered list of words\n    return filtered_words\n```\n\n## Edge Cases:\n\n1. `select_words(\"\", 3) = []`\n    - Explanation: The input string is empty, so the function should return an empty list.\n2. `select_words(\"Hello World\", 3) = [\"Hello\"]`\n    - Explanation: The word \"Hello\" contains exactly 3 consonants (H, l, l), while \"World\" contains 2 consonants.\n\n## Extra Code for Edge Cases:\n\nWe do not need extra code to handle the edge case. The function will naturally return an empty list if the input string is empty.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be able to handle both uppercase and lowercase letters and return the words in the order they appear in the input string. The function should also return an empty list if the input string is empty.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function is case-insensitive.\n- Return the words in the order they appear in the input string.\n- Handle empty input strings by returning an empty list.\n- Optimize the function for efficiency and readability.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string manipulation methods and a simple list comprehension. The function will first split the input string into words, then filter these words based on the number of consonants they contain. We will ensure the function is case-insensitive by converting all letters to lowercase. The function will return the words in the order they appear in the input string, and handle empty input strings by returning an empty list.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'case-insensitivity': the function should treat uppercase and lowercase letters as the same\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Split the input string into words.\n    - Define a function to count the number of consonants in a word.\n    - Use a list comprehension to filter words that have exactly n consonants.\n    - Ensure the function is case-insensitive by converting all letters to lowercase.\n    - Return the filtered list of words in the order they appear in the input string.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    explanation: The input string is empty, so the function should return an empty list.\n    select_words(\"Mary had a little lamb\", 3) = ['little']\n    explanation: The word 'little' contains exactly 3 consonants ('l', 't', 'l'). Other words do not meet the criteria.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function already returns an empty list for an empty input string.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be able to handle both uppercase and lowercase letters and return an empty list if the input string is empty. The function should be efficient and user-friendly.\nrequirement pool:\n- Implement the function to filter words based on consonant count.\n- Ensure the function is case-insensitive.\n- Return an empty list if the input string is empty.\n- Optimize the function for efficiency.\n- Develop a user-friendly interface for input and output.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string manipulation capabilities and regular expressions for efficient filtering. The function will be designed to be case-insensitive and will handle empty input strings gracefully.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'case-insensitivity': the function should treat uppercase and lowercase letters as the same\n\n# [phrase showing quantity relationship]\n    'exactly': means that the word must contain exactly n consonants\n\n# [degree adverb] \n    No degree adverb specifically mentioned, but 'exactly' implies a specific quantity\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Split the string into words\n    - Define a function to count consonants in a word\n    - Filter words based on the number of consonants\n    - Return the filtered list of words\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so the function should return an empty list.\n    select_words(\"Mary had a little lamb\", 3) = ['little']\n    Explanation: The word 'little' contains exactly 3 consonants (l, t, t). Other words do not meet the criteria.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic can handle an empty string by returning an empty list.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be case-insensitive and return the words in the order they appear in the input string. The function should also handle empty strings gracefully by returning an empty list.\nrequirement pool:\n- Implement the function to filter words based on consonant count.\n- Ensure the function is case-insensitive.\n- Return words in the order they appear in the input string.\n- Handle empty strings by returning an empty list.\n- Optimize the function for efficiency.\nTo implement the function that filters words based on the number of consonants they contain, we will use Python's built-in string manipulation methods and a simple list processing approach. The function will be case-insensitive, meaning it will treat 'A' and 'a' as the same character. We will define a helper function to count consonants in a word. The main function will split the input string into words, filter those that have the exact number of consonants, and return them in the order they appear in the input string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'case-insensitivity': the function should treat 'A' and 'a' as the same character\n    'exact number of consonants': the word must contain exactly n consonants\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    provide detailed logic to implement the code\n\n# [edge case] \n    select_words(\"\", 3) = []\n    explanation: The input string is empty, so the function should return an empty list.\n    select_words(\"Mary had a little lamb\", 3) = ['little']\n    explanation: The word 'little' contains exactly 3 consonants ('l', 't', 'l'). Other words like 'Mary', 'had', 'a', 'lamb' do not meet the criteria.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function will naturally return an empty list if the input string is empty.\n\n# [code logic]\n1. Define a helper function to count consonants in a word.\n2. Split the input string into words.\n3. Filter words that have exactly n consonants.\n4. Return the filtered list of words in the order they appear in the input string.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be case-insensitive and ignore spaces. The analysis shows that the function should be efficient and user-friendly, handling various inputs correctly.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function is case-insensitive and ignores spaces.\n- Develop the function to be efficient and handle various input sizes.\n- Design a user-friendly interface for easy input and output.\n- Include error handling for invalid inputs.\nTo implement the function `select_words` that filters words based on the number of consonants they contain, we will use Python's built-in string manipulation methods and a simple list comprehension. The function will be designed to be case-insensitive and will ignore spaces. We will use regular expressions to count consonants efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case-insensitive': means that the function should treat uppercase and lowercase letters as the same.\n    'exactly n consonants': means that the word must contain exactly n consonants, not more or less.\n\n# [phrase showing quantity relationship]\n    'exactly': means that the word must meet a specific count of consonants.\n\n# [degree adverb] \n    'exactly': means that the word must meet a specific count of consonants.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Split the string into words.\n    - Define a set of consonants.\n    - Use a list comprehension to filter words that have exactly n consonants.\n    - Ensure the function is case-insensitive by converting the word to lowercase before counting consonants.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The string is empty, so there are no words to consider. The expected output is an empty list.\n    select_words(\"Hello world\", 0) = [\"Hello\", \"world\"]\n    Explanation: Both \"Hello\" and \"world\" contain zero consonants, which matches the given number. The expected output is a list of these words.\n    select_words(\"Mary had a little lamb\", 5) = []\n    Explanation: There are no words with exactly 5 consonants in the given string. The expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic already correctly returns an empty list when the input string is empty.\n"], "scores": [0.6466, 0.6466, 1.0, 0.6466, 1.0, 0.6466, 1.0, 0.1955, 1.0, 0.6466], "pass_results": [false, false, true, false, true, false, true, false, true, false], "pass_test_cases_num": [86, 86, 133, 86, 133, 86, 133, 26, 133, 86], "completion": "from typing import List\nimport re\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    \n    # Define a set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyz\")\n    \n    # Clean the string and convert to lowercase\n    cleaned_s = re.sub(r'\\s+', ' ', s).lower()\n    \n    # Split the string into words\n    words = cleaned_s.split()\n    \n    # Use list comprehension to filter words with exactly n consonants\n    result = [word for word in words if len(re.findall(r'[bcdfghjklmnpqrstvwxyz]', word)) == n]\n    \n    return result\n", "passed": true, "pass": true, "pass_num": 4, "round": 227, "repair_prompt": ["def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Ensure that the function handles both uppercase and lowercase letters without any case sensitivity issues.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", " def select_words(s, n):\t\n    '''Given a string s and a natural number n, you have been tasked to implement \n        a function that returns a list of all words from string s that contain exactly \n        n consonants, in order these words appear in the string s.\n        If the string s is empty then the function should return an empty list.\n        Note: you may assume the input string contains only letters and spaces.\n        Ensure that the function handles both uppercase and lowercase letters without any case sensitivity issues.\n    Examples:\n        select_words(\"Mary had a little", " def select_words(s, n):\n    '''Given a string s and a natural number n, you have been tasked to implement \n        a function that returns a list of all words from string s that contain exactly \n        n consonants, in order these words appear in the string s.\n        If the string s is empty then the function should return an empty list.\n        Note: you may assume the input string contains only letters and spaces.\n        Ensure that the function handles both uppercase and lowercase letters without any case sensitivity issues.\n    Examples:\n        select_words(\"Mary had a little lamb"], "mutate_method": "add_1_sentence_at_end", "parent_index": 90}
