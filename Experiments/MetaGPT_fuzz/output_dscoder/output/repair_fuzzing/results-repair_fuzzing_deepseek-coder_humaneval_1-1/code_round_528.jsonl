{"task_id": "HumanEval/117", "prompt": "def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants. The words should be in order as they appear in string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", "entry_point": "select_words", "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "test": ["def check(select_words):\n\tassert select_words('eg aqk', 2) == ['aqk']", "def check(select_words):\n\tassert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "def check(select_words):\n\tassert select_words('syk', 6) == []", "def check(select_words):\n\tassert select_words('gw', 9) == []", "def check(select_words):\n\tassert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "def check(select_words):\n\tassert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "def check(select_words):\n\tassert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "def check(select_words):\n\tassert select_words('zGMhBC', 6) == ['zGMhBC']", "def check(select_words):\n\tassert select_words('kfohjsjunakqmmsx', 1) == []", "def check(select_words):\n\tassert select_words('KbpFfWgXZoVjXV', 1) == []", "def check(select_words):\n\tassert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "def check(select_words):\n\tassert select_words('kg', 1) == []", "def check(select_words):\n\tassert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "def check(select_words):\n\tassert select_words('xrbpxpncgqufqkq', 6) == []", "def check(select_words):\n\tassert select_words('sqgikswgssxsbwkl', 7) == []", "def check(select_words):\n\tassert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "def check(select_words):\n\tassert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "def check(select_words):\n\tassert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "def check(select_words):\n\tassert select_words('bnXA AjPVh', 5) == []", "def check(select_words):\n\tassert select_words('omnivbqgmavyqdgqssas', 6) == []", "def check(select_words):\n\tassert select_words('fmjizkhknnihqioic', 4) == []", "def check(select_words):\n\tassert select_words('lINKPOlFIImtg', 3) == []", "def check(select_words):\n\tassert select_words('nPxmyTd', 7) == ['nPxmyTd']", "def check(select_words):\n\tassert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "def check(select_words):\n\tassert select_words('mehochzpausf', 2) == []", "def check(select_words):\n\tassert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "def check(select_words):\n\tassert select_words('EGiDfM', 1) == []", "def check(select_words):\n\tassert select_words('mc', 7) == []", "def check(select_words):\n\tassert select_words('wzx', 5) == []", "def check(select_words):\n\tassert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "def check(select_words):\n\tassert select_words('xwkxcjffocow', 5) == []", "def check(select_words):\n\tassert select_words('dl', 5) == []", "def check(select_words):\n\tassert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "def check(select_words):\n\tassert select_words('ABIStgq', 5) == ['ABIStgq']", "def check(select_words):\n\tassert select_words('nb', 2) == ['nb']", "def check(select_words):\n\tassert select_words('ny', 2) == ['ny']", "def check(select_words):\n\tassert select_words('HWCLBC', 6) == ['HWCLBC']", "def check(select_words):\n\tassert select_words('uuh', 6) == []", "def check(select_words):\n\tassert select_words('uoubngttn', 3) == []", "def check(select_words):\n\tassert select_words('g', 5) == []", "def check(select_words):\n\tassert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "def check(select_words):\n\tassert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "def check(select_words):\n\tassert select_words('aztxoxesjkzqebhrfzw', 3) == []", "def check(select_words):\n\tassert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "def check(select_words):\n\tassert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "def check(select_words):\n\tassert select_words('tJzO PnCT', 3) == ['tJzO']", "def check(select_words):\n\tassert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "def check(select_words):\n\tassert select_words('qhwubvrfmwy', 2) == []", "def check(select_words):\n\tassert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "def check(select_words):\n\tassert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "def check(select_words):\n\tassert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "def check(select_words):\n\tassert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "def check(select_words):\n\tassert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "def check(select_words):\n\tassert select_words('r s rhhipmt', 6) == ['rhhipmt']", "def check(select_words):\n\tassert select_words('aDqyhePv', 6) == ['aDqyhePv']", "def check(select_words):\n\tassert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "def check(select_words):\n\tassert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "def check(select_words):\n\tassert select_words('aru', 5) == []", "def check(select_words):\n\tassert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "def check(select_words):\n\tassert select_words('SNeiILCez', 4) == []", "def check(select_words):\n\tassert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "def check(select_words):\n\tassert select_words('ySmjGAg', 6) == ['ySmjGAg']", "def check(select_words):\n\tassert select_words('bRJRZC', 3) == []", "def check(select_words):\n\tassert select_words('u', 1) == []", "def check(select_words):\n\tassert select_words('djucfuuizrjfvuzzo', 4) == []", "def check(select_words):\n\tassert select_words('dvYLMt', 6) == ['dvYLMt']", "def check(select_words):\n\tassert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "def check(select_words):\n\tassert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "def check(select_words):\n\tassert select_words('yp', 6) == []", "def check(select_words):\n\tassert select_words('v', 4) == []", "def check(select_words):\n\tassert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "def check(select_words):\n\tassert select_words('afrrguc', 5) == ['afrrguc']", "def check(select_words):\n\tassert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "def check(select_words):\n\tassert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "def check(select_words):\n\tassert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "def check(select_words):\n\tassert select_words('nh vu lcakrb', 1) == ['vu']", "def check(select_words):\n\tassert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "def check(select_words):\n\tassert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "def check(select_words):\n\tassert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "def check(select_words):\n\tassert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "def check(select_words):\n\tassert select_words('MjRnAErHPguQC', 1) == []", "def check(select_words):\n\tassert select_words('tmchxmttrgfdanq', 3) == []", "def check(select_words):\n\tassert select_words('jezkeorvxnruwhhwzxm', 7) == []", "def check(select_words):\n\tassert select_words('caurfxlpkygqxoknil', 4) == []", "def check(select_words):\n\tassert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "def check(select_words):\n\tassert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "def check(select_words):\n\tassert select_words('NSjIbZV', 2) == []", "def check(select_words):\n\tassert select_words('rPKhzIot', 6) == ['rPKhzIot']", "def check(select_words):\n\tassert select_words('ASDVzOVVDEdj J', 1) == ['J']", "def check(select_words):\n\tassert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "def check(select_words):\n\tassert select_words(' siweqafqot', 5) == []", "def check(select_words):\n\tassert select_words('xdQgsAHI', 5) == []", "def check(select_words):\n\tassert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "def check(select_words):\n\tassert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "def check(select_words):\n\tassert select_words('hguHoJGaaNwX', 3) == []", "def check(select_words):\n\tassert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "def check(select_words):\n\tassert select_words('choounwx', 5) == ['choounwx']", "def check(select_words):\n\tassert select_words('yue', 2) == []", "def check(select_words):\n\tassert select_words('DDdrgPy', 4) == []", "def check(select_words):\n\tassert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "def check(select_words):\n\tassert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "def check(select_words):\n\tassert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "def check(select_words):\n\tassert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "def check(select_words):\n\tassert select_words('Reg MuZcF', 4) == ['MuZcF']", "def check(select_words):\n\tassert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "def check(select_words):\n\tassert select_words('sl', 6) == []", "def check(select_words):\n\tassert select_words('IFKqNq ', 5) == ['IFKqNq']", "def check(select_words):\n\tassert select_words('lfspeijyudniowk', 1) == []", "def check(select_words):\n\tassert select_words('kogmgdnk', 7) == ['kogmgdnk']", "def check(select_words):\n\tassert select_words('nnchatjackywoavfwfps', 5) == []", "def check(select_words):\n\tassert select_words('d', 2) == []", "def check(select_words):\n\tassert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "def check(select_words):\n\tassert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "def check(select_words):\n\tassert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "def check(select_words):\n\tassert select_words('jopfxbbvlslmluypcdt', 3) == []", "def check(select_words):\n\tassert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "def check(select_words):\n\tassert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "def check(select_words):\n\tassert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "def check(select_words):\n\tassert select_words('etdrxwybqi', 1) == []", "def check(select_words):\n\tassert select_words('aVCSziOkLCLGizHcmC', 2) == []", "def check(select_words):\n\tassert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "def check(select_words):\n\tassert select_words('txXxge', 4) == []", "def check(select_words):\n\tassert select_words('kcpieuVjAOaxdpB', 4) == []", "def check(select_words):\n\tassert select_words('oh', 8) == []", "def check(select_words):\n\tassert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "def check(select_words):\n\tassert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "def check(select_words):\n\tassert select_words('eywh qxreeexrrhyovpwl', 7) == []", "def check(select_words):\n\tassert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "def check(select_words):\n\tassert select_words('asfwxvbzdfsrymc', 3) == []", "def check(select_words):\n\tassert select_words('nBmjWxiPV', 3) == []", "def check(select_words):\n\tassert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "test_case_list": ["assert select_words('eg aqk', 2) == ['aqk']", "assert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "assert select_words('syk', 6) == []", "assert select_words('gw', 9) == []", "assert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "assert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "assert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "assert select_words('zGMhBC', 6) == ['zGMhBC']", "assert select_words('kfohjsjunakqmmsx', 1) == []", "assert select_words('KbpFfWgXZoVjXV', 1) == []", "assert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "assert select_words('kg', 1) == []", "assert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "assert select_words('xrbpxpncgqufqkq', 6) == []", "assert select_words('sqgikswgssxsbwkl', 7) == []", "assert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "assert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "assert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "assert select_words('bnXA AjPVh', 5) == []", "assert select_words('omnivbqgmavyqdgqssas', 6) == []", "assert select_words('fmjizkhknnihqioic', 4) == []", "assert select_words('lINKPOlFIImtg', 3) == []", "assert select_words('nPxmyTd', 7) == ['nPxmyTd']", "assert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "assert select_words('mehochzpausf', 2) == []", "assert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "assert select_words('EGiDfM', 1) == []", "assert select_words('mc', 7) == []", "assert select_words('wzx', 5) == []", "assert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "assert select_words('xwkxcjffocow', 5) == []", "assert select_words('dl', 5) == []", "assert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "assert select_words('ABIStgq', 5) == ['ABIStgq']", "assert select_words('nb', 2) == ['nb']", "assert select_words('ny', 2) == ['ny']", "assert select_words('HWCLBC', 6) == ['HWCLBC']", "assert select_words('uuh', 6) == []", "assert select_words('uoubngttn', 3) == []", "assert select_words('g', 5) == []", "assert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "assert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "assert select_words('aztxoxesjkzqebhrfzw', 3) == []", "assert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "assert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "assert select_words('tJzO PnCT', 3) == ['tJzO']", "assert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "assert select_words('qhwubvrfmwy', 2) == []", "assert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "assert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "assert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "assert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "assert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "assert select_words('r s rhhipmt', 6) == ['rhhipmt']", "assert select_words('aDqyhePv', 6) == ['aDqyhePv']", "assert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "assert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "assert select_words('aru', 5) == []", "assert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "assert select_words('SNeiILCez', 4) == []", "assert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "assert select_words('ySmjGAg', 6) == ['ySmjGAg']", "assert select_words('bRJRZC', 3) == []", "assert select_words('u', 1) == []", "assert select_words('djucfuuizrjfvuzzo', 4) == []", "assert select_words('dvYLMt', 6) == ['dvYLMt']", "assert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "assert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "assert select_words('yp', 6) == []", "assert select_words('v', 4) == []", "assert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "assert select_words('afrrguc', 5) == ['afrrguc']", "assert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "assert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "assert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "assert select_words('nh vu lcakrb', 1) == ['vu']", "assert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "assert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "assert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "assert select_words('MjRnAErHPguQC', 1) == []", "assert select_words('tmchxmttrgfdanq', 3) == []", "assert select_words('jezkeorvxnruwhhwzxm', 7) == []", "assert select_words('caurfxlpkygqxoknil', 4) == []", "assert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "assert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "assert select_words('NSjIbZV', 2) == []", "assert select_words('rPKhzIot', 6) == ['rPKhzIot']", "assert select_words('ASDVzOVVDEdj J', 1) == ['J']", "assert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "assert select_words(' siweqafqot', 5) == []", "assert select_words('xdQgsAHI', 5) == []", "assert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "assert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "assert select_words('hguHoJGaaNwX', 3) == []", "assert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "assert select_words('choounwx', 5) == ['choounwx']", "assert select_words('yue', 2) == []", "assert select_words('DDdrgPy', 4) == []", "assert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "assert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "assert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "assert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "assert select_words('Reg MuZcF', 4) == ['MuZcF']", "assert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "assert select_words('sl', 6) == []", "assert select_words('IFKqNq ', 5) == ['IFKqNq']", "assert select_words('lfspeijyudniowk', 1) == []", "assert select_words('kogmgdnk', 7) == ['kogmgdnk']", "assert select_words('nnchatjackywoavfwfps', 5) == []", "assert select_words('d', 2) == []", "assert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "assert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "assert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "assert select_words('jopfxbbvlslmluypcdt', 3) == []", "assert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "assert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "assert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "assert select_words('etdrxwybqi', 1) == []", "assert select_words('aVCSziOkLCLGizHcmC', 2) == []", "assert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "assert select_words('txXxge', 4) == []", "assert select_words('kcpieuVjAOaxdpB', 4) == []", "assert select_words('oh', 8) == []", "assert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "assert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "assert select_words('eywh qxreeexrrhyovpwl', 7) == []", "assert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "assert select_words('asfwxvbzdfsrymc', 3) == []", "assert select_words('nBmjWxiPV', 3) == []", "assert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "nl": "Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    ", "func": "def select_words(s, n):", "examples": "Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    ", "completions": ["from typing import List\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants they contain.\n\n    Args:\n        s (str): The input string.\n        n (int): The number of consonants a word must contain.\n\n    Returns:\n        List[str]: A list of words from the input string that contain exactly `n` consonants.\n    \"\"\"\n    if not s:\n        return []\n\n    # Define a set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyz\")\n\n    # Split the input string into words\n    words = s.split()\n\n    # Filter words based on the number of consonants they contain\n    filtered_words = [word for word in words if sum(1 for char in word.lower() if char in consonants) == n]\n\n    return filtered_words\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants.\n\n    Args:\n        s (str): The input string.\n        n (int): The number of consonants the words must contain.\n\n    Returns:\n        List[str]: A list of words that contain exactly n consonants.\n    \"\"\"\n    # Define a set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyz\")\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Filter words based on the number of consonants they contain\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    \n    return filtered_words\n\ndef count_consonants(word: str) -> int:\n    \"\"\"\n    Counts the number of consonants in a word.\n\n    Args:\n        word (str): The word to count consonants in.\n\n    Returns:\n        int: The number of consonants in the word.\n    \"\"\"\n    return sum(1 for char in word.lower() if char in consonants)\n\n# Example usage:\n# print(select_words(\"Mary had a little lamb\", 5))  # Output: []\n# print(select_words(\"Hello world\", 0))  # Output: [\"Hello\", \"world\"]\n# print(select_words(\"\", 4))  # Output: []\n", "from typing import List\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    \n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    words = s.split()\n    result = [word for word in words if len([char for char in word if char in consonants]) == n]\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport re\n\ndef count_consonants(word: str) -> int:\n    \"\"\"\n    Count the number of consonants in a given word.\n    \n    Args:\n        word (str): The word to count consonants in.\n        \n    Returns:\n        int: The number of consonants in the word.\n    \"\"\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    return sum(1 for char in word.lower() if char in consonants)\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filter words based on the number of consonants they contain.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants a word must contain.\n        \n    Returns:\n        List[str]: A list of words that contain exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    words = s.split()\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    \n    return filtered_words\n\n# Example usage:\n# print(select_words(\"Mary had a little lamb\", 4))  # Output: [\"little\"]\n# print(select_words(\"\", 3))  # Output: []\n# print(select_words(\"Hello world\", 3))  # Output: []\n", "from typing import List\nfrom typing import List\n\ndef count_consonants(word: str) -> int:\n    vowels = \"aeiouAEIOU\"\n    return sum(1 for char in word if char.isalpha() and char not in vowels)\n\ndef select_words(s: str, n: int) -> List[str]:\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants a word must contain.\n        \n    Returns:\n        List[str]: A list of words that contain exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    def count_consonants(word: str) -> int:\n        \"\"\"\n        Counts the number of consonants in a word.\n        \n        Args:\n            word (str): The word to count consonants in.\n            \n        Returns:\n            int: The number of consonants in the word.\n        \"\"\"\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants.\n\n    Args:\n        s (str): The input string.\n        n (int): The number of consonants required in the words.\n\n    Returns:\n        List[str]: A list of words containing exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n\n    def count_consonants(word: str) -> int:\n        \"\"\"\n        Counts the number of consonants in a word.\n\n        Args:\n            word (str): The word to count consonants in.\n\n        Returns:\n            int: The number of consonants in the word.\n        \"\"\"\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport re\n\ndef count_consonants(word: str) -> int:\n    \"\"\"\n    Count the number of consonants in a given word.\n    \n    Args:\n        word (str): The word to count consonants in.\n        \n    Returns:\n        int: The number of consonants in the word.\n    \"\"\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    return sum(1 for char in word.lower() if char in consonants)\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants required in each word.\n        \n    Returns:\n        List[str]: A list of words that have exactly `n` consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    words = s.split()\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    \n    return filtered_words\n\n# Example usage:\n# print(select_words(\"Mary had a little lamb\", 1))  # Output: [\"had\", \"lamb\"]\n# print(select_words(\"Mary had a little lamb\", 4))  # Output: []\n", "from typing import List\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    \n    # Define a set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyz\")\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Filter words based on the number of consonants\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    \n    return filtered_words\n\ndef count_consonants(word: str) -> int:\n    # Count the number of consonants in a word\n    return sum(1 for char in word.lower() if char in consonants)\n\n# Example usage:\n# print(select_words(\"Mary had a little lamb\", 5))  # Output: []\n# print(select_words(\"Hello world\", 0))  # Output: [\"Hello\", \"world\"]\n# print(select_words(\"\", 4))  # Output: []\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport re\n\ndef count_consonants(word: str) -> int:\n    \"\"\"\n    Count the number of consonants in a given word.\n    \n    Args:\n        word (str): The word to count consonants in.\n        \n    Returns:\n        int: The number of consonants in the word.\n    \"\"\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    return sum(1 for char in word.lower() if char in consonants)\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants required in each word.\n        \n    Returns:\n        List[str]: A list of words that have exactly `n` consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    words = s.split()\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    \n    return filtered_words\n\n# Example usage:\n# print(select_words(\"Mary had a little lamb\", 1))  # Output: [\"had\", \"lamb\"]\n# print(select_words(\"Mary had a little lamb\", 4))  # Output: []\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be able to handle various inputs including strings with multiple spaces and return an empty list if there are no words with the specified number of consonants. The function should also be optimized for performance to handle large inputs effectively.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function can handle various inputs including strings with multiple spaces.\n- Optimize the function for performance to handle large inputs effectively.\n- Include error handling for empty strings and invalid inputs.\n- Implement unit tests to ensure the function works as expected.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string manipulation methods and a simple list comprehension. We will define a set of consonants and use it to check the number of consonants in each word. The function will split the input string into words, filter those words based on the specified number of consonants, and return the filtered list.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants\n\n# [phrase showing quantity relationship]\n    'exactly': means that the word must have a specific number of consonants\n\n# [degree adverb] \n    No degree adverb specifically mentioned, but 'exactly' implies a specific quantity\n\n# [code logic]\n    (1) Define a set of consonants.\n    (2) Split the input string into words.\n    (3) Filter words based on the number of consonants they contain.\n    (4) Return the list of words that meet the criteria.\n\n# [edge case] \n    select_words(\"\", 4) = []\n    Explanation: The input string is empty, so there are no words to filter. The expected output is an empty list.\n    select_words(\"Hello world\", 0) = [\"Hello\", \"world\"]\n    Explanation: If n is 0, the function should return all words since they all contain 0 consonants. The expected output includes both \"Hello\" and \"world\".\n    select_words(\"Mary had a little lamb\", 5) = []\n    Explanation: There are no words with exactly 5 consonants in the given string. The expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case where the input string is empty, as the function already returns an empty list. For the case where n is 0, we can add a special case in the code to return all words, but this is already covered by the current logic.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be able to handle various inputs including empty strings and strings with no suitable words. The function should also be efficient and maintain the order of words as they appear in the input string.\nrequirement pool:\n- The main code should filter words based on the number of consonants.\n- The function should handle edge cases such as empty strings and strings with no words meeting the criteria.\n- Ensure the function is efficient and performs well with large inputs.\n- Maintain the order of words as they appear in the input string.\nTo implement the function `select_words` that filters words based on the number of consonants, we will use Python's built-in string manipulation methods and a simple list comprehension. We will define a set of consonants and use it to check the number of consonants in each word. The function will iterate over the words in the input string, count the consonants, and return a list of words that match the specified number of consonants.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants, no more, no less\n\n# [phrase showing quantity relationship]\n    'exactly': means that the word must have a specific number of consonants, not more or less\n\n# [degree adverb] \n    No degree adverb specifically mentioned, but 'exactly' implies a specific quantity\n\n# [code logic]\n    (1) Define a set of consonants.\n    (2) Split the input string into words.\n    (3) Filter words based on the number of consonants they contain.\n    (4) Return the list of words that meet the criteria.\n\n# [edge case] \n    select_words(\"\", 4) = []\n    Explanation: The input string is empty, so there are no words to consider. The expected output is an empty list.\n    select_words(\"Hello world\", 0) = [\"Hello\", \"world\"]\n    Explanation: If n is 0, the function should return all words since they all contain 0 consonants.\n    select_words(\"Mary had a little lamb\", 5) = []\n    Explanation: There are no words with exactly 5 consonants in the given string.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case where the input string is empty, as the function already returns an empty list. For the case where n is 0, we can add a special check to return all words, but this can be handled within the main logic.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be able to handle various inputs including strings with multiple spaces and return an empty list if there are no words with the specified number of consonants. The function should also be optimized for performance to handle large inputs effectively.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function can handle various inputs including strings with multiple spaces.\n- Optimize the function for performance to handle large inputs effectively.\n- Return an empty list if there are no words with the specified number of consonants.\n- Ensure the function is robust and handles edge cases such as empty strings.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string manipulation methods and a simple list comprehension. We will define a set of consonants and use it to check the number of consonants in each word. The function will split the input string into words, filter those words based on the specified number of consonants, and return the filtered list.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants\n\n# [phrase showing quantity relationship]\n    'exactly': means that the word must have a specific number of consonants\n\n# [degree adverb] \n    No degree adverb specifically mentioned, but 'exactly' implies a specific quantity\n\n# [code logic]\n    (1) Define a set of consonants.\n    (2) Split the input string into words.\n    (3) Filter words based on the number of consonants they contain.\n    (4) Return the list of words that meet the criteria.\n\n# [edge case] \n    select_words(\"\", 4) = []\n    Explanation: The input string is empty, so there are no words to filter.\n    select_words(\"Hello world\", 0) = [\"Hello\", \"world\"]\n    Explanation: Words with zero consonants (a, e, i, o, u) are considered.\n\n# [extra code for edge case]\n    We do not need extra code to handle this edge case as the function already returns an empty list for an empty input string.\n\n# [code logic]\n    ```python\n    def select_words(s, n):\n        if not s:\n            return []\n        \n        vowels = \"aeiouAEIOU\"\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        \n        words = s.split()\n        result = [word for word in words if len([char for char in word if char in consonants]) == n]\n        \n        return result\n    ```\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle basic string operations and return results in the order they appear in the input string. The function should also handle edge cases such as an empty string or a number less than zero.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function can handle various input sizes efficiently.\n- Develop a user-friendly interface for easy integration.\n- Test the function with edge cases such as an empty string or a number less than zero.\n- Optimize the function for performance and scalability.\nTo implement the function that filters words based on the number of consonants they contain, we will use Python's built-in string manipulation capabilities and regular expressions for efficient filtering. The function will first split the input string into words, then filter these words based on the specified number of consonants. The use of regular expressions will help in identifying consonants efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants, no more no less\n\n# [phrase showing quantity relationship]\n    'exactly': means that the word must meet the specified number of consonants\n\n# [degree adverb] \n    No degree adverb specifically mentioned, but the requirement emphasizes the exact count of consonants.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Split the input string into words.\n    - Define a function to count consonants in a word.\n    - Filter words based on the number of consonants.\n    - Return the list of words that meet the criteria.\n\n# [edge case] \n    select_words(\"Mary had a little lamb\", 4) = [\"little\"]\n    Explanation: The word \"little\" contains exactly 4 consonants (l, t, t, l).\n\n    select_words(\"\", 3) = []\n    Explanation: The string is empty, so there are no words to filter.\n\n    select_words(\"Hello world\", 3) = []\n    Explanation: The word \"Hello\" contains 2 consonants, and \"world\" contains 3 consonants. However, the requirement is for words that contain exactly 3 consonants, so neither \"Hello\" nor \"world\" meet the criteria.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic already handles the case where the input string is empty by returning an empty list.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle strings with spaces and ensure that the words are in the order they appear in the input string. The function should also handle edge cases like empty strings gracefully by returning an empty list.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function handles strings with spaces and maintains the order of words.\n- Handle edge cases like empty strings by returning an empty list.\n- Optimize the function for efficiency and performance.\n- Develop a user-friendly interface for easy integration.\nTo implement the function `select_words` that filters words based on the number of consonants, we will use Python's built-in string manipulation capabilities. The function will split the input string into words, filter those words based on the specified number of consonants, and return the filtered list. We will ensure efficiency by using Python's list comprehensions and built-in functions.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Split the input string into words.\n    (2) Define a function to count the number of consonants in a word.\n    (3) Use a list comprehension to filter words that have exactly n consonants.\n    (4) Return the filtered list of words.\n\n# [edge case] \n    select_words(\"Mary had a little lamb\", 4) = [\"little\"]\n    Explanation: The word \"little\" contains exactly 4 consonants (l, t, t, l).\n    select_words(\"\", 4) = []\n    Explanation: The string is empty, so there are no words to filter, resulting in an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic already returns an empty list when the input string is empty.\n\n# [code logic]\n    (1) Split the input string `s` into words using the `split()` method.\n    (2) Define a helper function `count_consonants(word)` that counts the number of consonants in a given word.\n    (3) Use a list comprehension to filter words that have exactly `n` consonants:\n        ```python\n        def count_consonants(word):\n            vowels = \"aeiouAEIOU\"\n            return sum(1 for char in word if char.isalpha() and char not in vowels)\n\n        def select_words(s, n):\n            words = s.split()\n            return [word for word in words if count_consonants(word) == n]\n        ```\n    (4) Return the resulting list.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be able to handle strings with spaces and ensure that the words are returned in the order they appear in the input string. The function should also handle edge cases like empty strings gracefully.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function works correctly with various input sizes and types.\n- Develop a user-friendly interface for easy input and output.\n- Handle edge cases like empty strings and strings with no words that meet the criteria.\n- Optimize the function for efficiency and performance.\nTo implement the function `select_words` that filters words based on the number of consonants, we will use Python's built-in string manipulation methods and a simple list comprehension. The function will first split the input string into words, then filter these words based on the number of consonants they contain. The result will be a list of words that meet the criteria.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Split the input string into words.\n    (2) Define a function to count the number of consonants in a word.\n    (3) Use a list comprehension to filter words that have exactly n consonants.\n    (4) Return the filtered list of words.\n\n# [edge case] \n    select_words(\"\", 4) = []\n    Explanation: The input string is empty, so there are no words to filter. The expected output is an empty list.\n    select_words(\"Mary had a little lamb\", 1) = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    Explanation: The input string contains all vowels, and each of them appears exactly once in the string. The expected output is a list of all words that contain exactly 1 consonant, which in this case are all the vowels.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will correctly return an empty list when the input string is empty.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be able to handle various inputs, including empty strings and non-positive numbers. The output should be a list of words that meet the criteria, preserving their order in the input string.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function can handle edge cases, such as empty strings and non-positive numbers.\n- Develop a user-friendly interface for easy input and output.\n- Optimize the function for performance and efficiency.\nTo implement the function `select_words` that filters words based on the number of consonants, we need to consider the following steps: 1. Split the input string into words. 2. Define a function to count the consonants in a word. 3. Filter words based on the specified number of consonants. 4. Return the filtered list of words.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Split the input string into words.\n    (2) Define a function to count the consonants in a word.\n    (3) Filter words based on the specified number of consonants.\n    (4) Return the filtered list of words.\n\n# [edge case] \n    select_words(\"\", 4) = []\n    Explanation: The input string is empty, so there are no words to filter. The expected output is an empty list.\n    select_words(\"Mary had a little lamb\", 1) = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    Explanation: The input string contains words with varying numbers of consonants. Since the requirement is to find words with exactly 1 consonant, the expected output includes all words containing exactly one consonant.\n    select_words(\"Mary had a little lamb\", 10) = []\n    Explanation: The input string does not contain any word with exactly 10 consonants. Therefore, the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic can handle the case where the input string is empty by returning an empty list.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be able to handle various inputs, including empty strings and negative numbers. The output should be a list of words that meet the criteria, preserving the order they appear in the input string.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Handle edge cases such as empty strings and negative numbers.\n- Ensure the function is efficient and works well with various input sizes.\n- Develop a user-friendly interface for easy input and output.\nTo implement the function `select_words` that filters words based on the number of consonants, we will use Python's built-in string manipulation capabilities and regular expressions for efficient filtering. The function will first split the input string into words, then filter these words based on the specified number of consonants. The use of regular expressions will help in identifying consonants efficiently.\nPlease read and understand the following inteperation before coding\n It seems like the plan for the function `select_words` is incomplete in the provided prompt. Let's proceed with the analysis based on the requirement and the available plan.\n\n# [core concept]\n    'consonants': In the requirement, it refers to the letters that are not vowels (a, e, i, o, u) in the English alphabet.\n    Explanation: The function needs to identify and count consonants in each word to filter out those with exactly `n` consonants.\n\n# [phrase showing quantity relationship]\n    'exactly': This phrase indicates that the number of consonants in a word must match the given number `n`.\n    Explanation: For example, if `n` is 4, the function should only include words with exactly 4 consonants.\n\n# [degree adverb]\n    'exactly': This adverb is used to specify the exact number of consonants required in each word.\n    Explanation: The function will look for words with a specific number of consonants, not more or less.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Steps to consider:\n    1. Split the input string `s` into words.\n    2. Define a function to count consonants in a word.\n    3. Filter words based on the number of consonants.\n    4. Return the list of words that meet the criteria.\n\n# [edge case]\n    select_words(\"\", 4) = []\n    Explanation: Since the input string is empty, there are no words to consider, so the expected output is an empty list.\n    select_words(\"Mary had a little lamb\", 1) = [\"had\", \"lamb\"]\n    Explanation: The words \"Mary\", \"a\", and \"little\" do not have exactly 1 consonant, but \"had\" and \"lamb\" each have one consonant.\n    select_words(\"Mary had a little lamb\", 10) = []\n    Explanation: There are no words with exactly 10 consonants in the given string, so the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic can be extended to check for the presence of exactly `n` consonants in each word.\n\nPlease note that the plan provided for `select_words` is incomplete, and the analysis above is based on the requirement and the core concepts described. If you have the complete plan or additional details, please provide them for a more accurate analysis.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be able to handle various inputs including strings with multiple spaces and return an empty list if there are no words with the specified number of consonants. The function should be efficient and handle edge cases effectively.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function can handle various inputs including strings with multiple spaces.\n- Return an empty list if there are no words with the specified number of consonants.\n- Optimize the function for performance to handle large inputs effectively.\n- Test the function with edge cases to ensure robustness.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string manipulation methods and a simple list comprehension. We will define a set of consonants and use it to check the number of consonants in each word. The function will split the input string into words, filter those words based on the specified number of consonants, and return the filtered list.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants\n\n# [phrase showing quantity relationship]\n    'exactly': means that the word must have a specific number of consonants\n\n# [degree adverb] \n    No degree adverb specifically related to the requirement\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Split the input string into words.\n    - Define a set of consonants.\n    - For each word, count the number of consonants.\n    - Filter words that have exactly n consonants.\n    - Return the filtered list of words.\n\n# [edge case] \n    select_words(\"\", 4) = []\n    Explanation: The input string is empty, so there are no words to filter. The expected output is an empty list.\n    select_words(\"Hello world\", 0) = [\"Hello\", \"world\"]\n    Explanation: The number of consonants in each word is zero, so all words are included in the output.\n    select_words(\"Mary had a little lamb\", 5) = []\n    Explanation: There are no words with exactly 5 consonants in the input string. The expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic already handles the case where the input string is empty by returning an empty list.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be able to handle various inputs, including empty strings and negative numbers. The output should be a list of words that meet the criteria, preserving the order they appear in the input string.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Handle edge cases such as empty strings and negative numbers.\n- Ensure the function is efficient and works well with various input sizes.\n- Develop a user-friendly interface for easy input and output.\nTo implement the function `select_words` that filters words based on the number of consonants, we will use Python's built-in string manipulation capabilities and regular expressions for efficient filtering. The function will first split the input string into words, then filter these words based on the specified number of consonants. The use of regular expressions will help in identifying consonants efficiently.\nPlease read and understand the following inteperation before coding\n It seems like the plan for the function `select_words` is incomplete in the provided prompt. Let's proceed with the analysis based on the requirement and the available plan.\n\n# [core concept]\n    'consonants': In the requirement, it refers to the letters that are not vowels (a, e, i, o, u) in the English alphabet.\n    Explanation: The function needs to identify and count consonants in each word to filter out those with exactly `n` consonants.\n\n# [phrase showing quantity relationship]\n    'exactly': This phrase indicates that the number of consonants in a word must match the given number `n`.\n    Explanation: For example, if `n` is 4, the function should only include words with exactly 4 consonants.\n\n# [degree adverb]\n    'exactly': This adverb is used to specify the exact number of consonants required in each word.\n    Explanation: The function will look for words with a specific number of consonants, not more or less.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Steps to consider:\n    1. Split the input string `s` into words.\n    2. Define a function to count consonants in a word.\n    3. Filter words based on the number of consonants.\n    4. Return the list of words that meet the criteria.\n\n# [edge case]\n    select_words(\"\", 4) = []\n    Explanation: Since the input string is empty, there are no words to consider, so the expected output is an empty list.\n    select_words(\"Mary had a little lamb\", 1) = [\"had\", \"lamb\"]\n    Explanation: The words \"Mary\", \"a\", and \"little\" do not have exactly 1 consonant, but \"had\" and \"lamb\" each have one consonant.\n    select_words(\"Mary had a little lamb\", 10) = []\n    Explanation: There are no words with exactly 10 consonants in the given string, so the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic can be extended to check for the presence of exactly `n` consonants in each word.\n\nPlease note that the plan provided for `select_words` is incomplete, and the analysis above is based on the requirement and the core concepts described. If you have the complete plan or additional details, please provide them for a more accurate analysis.\n"], "scores": [1.0, 0.0075, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0075, 1.0], "pass_results": [true, false, true, true, true, true, true, true, false, true], "pass_test_cases_num": [133, 1, 133, 133, 133, 133, 133, 133, 1, 133], "completion": "from typing import List\n## main.py\n\nfrom typing import List\nimport re\n\ndef count_consonants(word: str) -> int:\n    \"\"\"\n    Count the number of consonants in a given word.\n    \n    Args:\n        word (str): The word to count consonants in.\n        \n    Returns:\n        int: The number of consonants in the word.\n    \"\"\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    return sum(1 for char in word.lower() if char in consonants)\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants required in each word.\n        \n    Returns:\n        List[str]: A list of words that have exactly `n` consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    words = s.split()\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    \n    return filtered_words\n\n# Example usage:\n# print(select_words(\"Mary had a little lamb\", 1))  # Output: [\"had\", \"lamb\"]\n# print(select_words(\"Mary had a little lamb\", 4))  # Output: []\n", "passed": true, "pass": true, "pass_num": 8, "round": 528, "repair_prompt": ["def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants. The words should be in order as they appear in string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", " def select_words(s, n):\t\n    '''Given a string s and a natural number n, you have been tasked to implement \n        a function that returns a list of all words from string s that contain exactly \n        n consonants. The words should be in order as they appear in string s.\n        If the string s is empty then the function should return an empty list.\n        Note: you may assume the input string contains only letters and spaces.\n    Examples:\n        select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n        select_words(\"", " def select_words(s, n):\n    '''Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants. The words should be in order as they appear in string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had"], "mutate_method": "expand_one2two", "parent_index": 279}
