{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\nEnsure the function handles both positive and negative integers correctly.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "entry_point": "any_int", "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n", "test": ["def check(any_int):\n\tassert any_int(8, 19, 11) == True", "def check(any_int):\n\tassert any_int(7.307, 7.071, 5.088) == False", "def check(any_int):\n\tassert any_int(6, 12, 6) == True", "def check(any_int):\n\tassert any_int(6.511, 2, 3) == False", "def check(any_int):\n\tassert any_int(12, 6, 6) == True", "def check(any_int):\n\tassert any_int(2, 2, 4) == True", "def check(any_int):\n\tassert any_int(5.114, 5, 4) == False", "def check(any_int):\n\tassert any_int(3.376, 6.953, 2.111) == False", "def check(any_int):\n\tassert any_int(2, 3, 1)==True", "def check(any_int):\n\tassert any_int(2, 5, 4) == False", "def check(any_int):\n\tassert any_int(7.194, 1.302, 7.462) == False", "def check(any_int):\n\tassert any_int(1, 7, 8) == True", "def check(any_int):\n\tassert any_int(5, 8, 3) == True", "def check(any_int):\n\tassert any_int(2.389, 9, 10) == False", "def check(any_int):\n\tassert any_int(-1, 0, 1) == True", "def check(any_int):\n\tassert any_int(9, 6, 3) == True", "def check(any_int):\n\tassert any_int(4.38, 6, 1) == False", "def check(any_int):\n\tassert any_int(3.785, 6.308, 7.367) == False", "def check(any_int):\n\tassert any_int(6, 10, 4) == True", "def check(any_int):\n\tassert any_int(1.705, 2, 6.616) == False", "def check(any_int):\n\tassert any_int(6, 4, 2) == True", "def check(any_int):\n\tassert any_int(4, 2, 2)==True", "def check(any_int):\n\tassert any_int(3.692, 2, 7.2) == False", "def check(any_int):\n\tassert any_int(2.5, 2, 3)==False", "def check(any_int):\n\tassert any_int(5, 6, 1) == True", "def check(any_int):\n\tassert any_int(1, 3, 2) == True", "def check(any_int):\n\tassert any_int(3,4,7)==True", "def check(any_int):\n\tassert any_int(6, 10, 1) == False", "def check(any_int):\n\tassert any_int(6, 2, 4) == True", "def check(any_int):\n\tassert any_int(6.155, 2.926, 1.672) == False", "def check(any_int):\n\tassert any_int(5, 2, 3) == True", "def check(any_int):\n\tassert any_int(7.829, 2, 9) == False", "def check(any_int):\n\tassert any_int(4, 6, 3) == False", "def check(any_int):\n\tassert any_int(2.583, 3.749, 4.738) == False", "def check(any_int):\n\tassert any_int(12, 11, 1) == True", "def check(any_int):\n\tassert any_int(3.211, 4, 3) == False", "def check(any_int):\n\tassert any_int(1, 1, 7) == False", "def check(any_int):\n\tassert any_int(0, 3, 3) == True", "def check(any_int):\n\tassert any_int(1.157, 8, 2) == False", "def check(any_int):\n\tassert any_int(3, 3, 6) == True", "def check(any_int):\n\tassert any_int(4.272, 6.612, 6.663) == False", "def check(any_int):\n\tassert any_int(1, 1, 2) == True", "def check(any_int):\n\tassert any_int(2.2, 2.2, 2.2)==False", "def check(any_int):\n\tassert any_int(3.158, 8, 6.135) == False", "def check(any_int):\n\tassert any_int(1.346, 5, 6) == False", "def check(any_int):\n\tassert any_int(15, 9, 6) == True", "def check(any_int):\n\tassert any_int(1, 4, 5) == True", "def check(any_int):\n\tassert any_int(7.656, 1, 7) == False", "def check(any_int):\n\tassert any_int(3.599, 5, 1) == False", "def check(any_int):\n\tassert any_int(3, 1, 2) == True", "def check(any_int):\n\tassert any_int(-3, 2, 5) == True", "def check(any_int):\n\tassert any_int(4, 11, 5) == False", "def check(any_int):\n\tassert any_int(10, 7, 3) == True", "def check(any_int):\n\tassert any_int(7, 3, 10) == True", "def check(any_int):\n\tassert any_int(3, 4, 1) == True", "def check(any_int):\n\tassert any_int(3.103, 3, 10) == False", "def check(any_int):\n\tassert any_int(6, 16, 10) == True", "def check(any_int):\n\tassert any_int(1.812, 6.567, 7.145) == False", "def check(any_int):\n\tassert any_int(6, 6, 12) == True", "def check(any_int):\n\tassert any_int(1, 7, 2) == False", "def check(any_int):\n\tassert any_int(7, 6, 1) == True", "def check(any_int):\n\tassert any_int(4, 3, 7) == True", "def check(any_int):\n\tassert any_int(4, 6, 2) == True", "def check(any_int):\n\tassert any_int(2.007, 9, 7.198) == False", "def check(any_int):\n\tassert any_int(2, 3, 5) == True", "def check(any_int):\n\tassert any_int(6.086, 4, 4) == False", "def check(any_int):\n\tassert any_int(3.754, 6, 5.044) == False", "def check(any_int):\n\tassert any_int(8, 10, 2) == True", "def check(any_int):\n\tassert any_int(7.73, 5.041, 6.418) == False", "def check(any_int):\n\tassert any_int(2, 6, 2)==False", "def check(any_int):\n\tassert any_int(3.683, 8, 1.193) == False", "def check(any_int):\n\tassert any_int(-4, 6, 2)==True", "def check(any_int):\n\tassert any_int(7, 13, 6) == True", "def check(any_int):\n\tassert any_int(2.003, 3, 11) == False", "def check(any_int):\n\tassert any_int(3.357, 7, 8.074) == False", "def check(any_int):\n\tassert any_int(3.621, 6.679, 2.542) == False", "def check(any_int):\n\tassert any_int(12, 3, 9) == True", "def check(any_int):\n\tassert any_int(7.797, 7, 4) == False", "def check(any_int):\n\tassert any_int(7, 1, 8) == True", "def check(any_int):\n\tassert any_int(5, 3, 8) == True", "def check(any_int):\n\tassert any_int(5, 7, 2) == True", "def check(any_int):\n\tassert any_int(5, 6, 11) == True", "def check(any_int):\n\tassert any_int(6.681, 8, 4.747) == False", "def check(any_int):\n\tassert any_int(3, 2, 5) == True", "def check(any_int):\n\tassert any_int(3.0,4,7)==False", "def check(any_int):\n\tassert any_int(9, 1, 10) == True", "def check(any_int):\n\tassert any_int(1.5, 5, 3.5)==False", "def check(any_int):\n\tassert any_int(2.834, 7, 9) == False", "def check(any_int):\n\tassert any_int(2, 6, 4) == True", "def check(any_int):\n\tassert any_int(6.068, 1, 3.454) == False", "def check(any_int):\n\tassert any_int(1.834, 7.255, 6.304) == False", "def check(any_int):\n\tassert any_int(1.726, 3, 1) == False", "def check(any_int):\n\tassert any_int(13, 7, 6) == True", "def check(any_int):\n\tassert any_int(6.9, 4, 12) == False", "def check(any_int):\n\tassert any_int(4.039, 5, 5.992) == False", "def check(any_int):\n\tassert any_int(4, 5, 9) == True", "def check(any_int):\n\tassert any_int(6, 2, 7) == False", "def check(any_int):\n\tassert any_int(3, 10, 7) == True", "def check(any_int):\n\tassert any_int(5.586, 1, 2) == False", "def check(any_int):\n\tassert any_int(12, 8, 4) == True", "def check(any_int):\n\tassert any_int(2.459, 5, 11) == False", "def check(any_int):\n\tassert any_int(0, 2, 2) == True", "def check(any_int):\n\tassert any_int(6.175, 9, 4) == False", "def check(any_int):\n\tassert any_int(12, 5, 7) == True", "def check(any_int):\n\tassert any_int(8.854, 2, 8) == False", "def check(any_int):\n\tassert any_int(2.858, 1, 2) == False", "def check(any_int):\n\tassert any_int(4, 3, 1) == True", "def check(any_int):\n\tassert any_int(4, 11, 1) == False", "def check(any_int):\n\tassert any_int(5, 5, 10) == True", "def check(any_int):\n\tassert any_int(10, 5, 5) == True", "def check(any_int):\n\tassert any_int(3.228, 6, 6) == False", "def check(any_int):\n\tassert any_int(2.805, 3, 6.418) == False", "def check(any_int):\n\tassert any_int(2, 1, 1) == True", "def check(any_int):\n\tassert any_int(6, 3, 3) == True", "def check(any_int):\n\tassert any_int(7, 5, 12) == True", "def check(any_int):\n\tassert any_int(-4, 11, 7) == True", "def check(any_int):\n\tassert any_int(2,1,1)==True", "def check(any_int):\n\tassert any_int(7, 2, 9) == True", "def check(any_int):\n\tassert any_int(3.445, 2, 2) == False", "def check(any_int):\n\tassert any_int(2, 7, 5) == True", "def check(any_int):\n\tassert any_int(6.254, 6, 7) == False", "def check(any_int):\n\tassert any_int(3.685, 2, 6) == False", "def check(any_int):\n\tassert any_int(5, 9, 5) == False", "def check(any_int):\n\tassert any_int(5.408, 8, 3.454) == False", "def check(any_int):\n\tassert any_int(-7, 5, -2) == True", "def check(any_int):\n\tassert any_int(4, 8, 4) == True", "def check(any_int):\n\tassert any_int(12, 7, 5) == True", "def check(any_int):\n\tassert any_int(4, 7, 3) == True", "def check(any_int):\n\tassert any_int(6.61, 1.687, 2.647) == False", "def check(any_int):\n\tassert any_int(3.033, 6.554, 7.391) == False", "def check(any_int):\n\tassert any_int(2.08, 7, 1.239) == False"], "test_case_list": ["assert any_int(8, 19, 11) == True", "assert any_int(7.307, 7.071, 5.088) == False", "assert any_int(6, 12, 6) == True", "assert any_int(6.511, 2, 3) == False", "assert any_int(12, 6, 6) == True", "assert any_int(2, 2, 4) == True", "assert any_int(5.114, 5, 4) == False", "assert any_int(3.376, 6.953, 2.111) == False", "assert any_int(2, 3, 1)==True", "assert any_int(2, 5, 4) == False", "assert any_int(7.194, 1.302, 7.462) == False", "assert any_int(1, 7, 8) == True", "assert any_int(5, 8, 3) == True", "assert any_int(2.389, 9, 10) == False", "assert any_int(-1, 0, 1) == True", "assert any_int(9, 6, 3) == True", "assert any_int(4.38, 6, 1) == False", "assert any_int(3.785, 6.308, 7.367) == False", "assert any_int(6, 10, 4) == True", "assert any_int(1.705, 2, 6.616) == False", "assert any_int(6, 4, 2) == True", "assert any_int(4, 2, 2)==True", "assert any_int(3.692, 2, 7.2) == False", "assert any_int(2.5, 2, 3)==False", "assert any_int(5, 6, 1) == True", "assert any_int(1, 3, 2) == True", "assert any_int(3,4,7)==True", "assert any_int(6, 10, 1) == False", "assert any_int(6, 2, 4) == True", "assert any_int(6.155, 2.926, 1.672) == False", "assert any_int(5, 2, 3) == True", "assert any_int(7.829, 2, 9) == False", "assert any_int(4, 6, 3) == False", "assert any_int(2.583, 3.749, 4.738) == False", "assert any_int(12, 11, 1) == True", "assert any_int(3.211, 4, 3) == False", "assert any_int(1, 1, 7) == False", "assert any_int(0, 3, 3) == True", "assert any_int(1.157, 8, 2) == False", "assert any_int(3, 3, 6) == True", "assert any_int(4.272, 6.612, 6.663) == False", "assert any_int(1, 1, 2) == True", "assert any_int(2.2, 2.2, 2.2)==False", "assert any_int(3.158, 8, 6.135) == False", "assert any_int(1.346, 5, 6) == False", "assert any_int(15, 9, 6) == True", "assert any_int(1, 4, 5) == True", "assert any_int(7.656, 1, 7) == False", "assert any_int(3.599, 5, 1) == False", "assert any_int(3, 1, 2) == True", "assert any_int(-3, 2, 5) == True", "assert any_int(4, 11, 5) == False", "assert any_int(10, 7, 3) == True", "assert any_int(7, 3, 10) == True", "assert any_int(3, 4, 1) == True", "assert any_int(3.103, 3, 10) == False", "assert any_int(6, 16, 10) == True", "assert any_int(1.812, 6.567, 7.145) == False", "assert any_int(6, 6, 12) == True", "assert any_int(1, 7, 2) == False", "assert any_int(7, 6, 1) == True", "assert any_int(4, 3, 7) == True", "assert any_int(4, 6, 2) == True", "assert any_int(2.007, 9, 7.198) == False", "assert any_int(2, 3, 5) == True", "assert any_int(6.086, 4, 4) == False", "assert any_int(3.754, 6, 5.044) == False", "assert any_int(8, 10, 2) == True", "assert any_int(7.73, 5.041, 6.418) == False", "assert any_int(2, 6, 2)==False", "assert any_int(3.683, 8, 1.193) == False", "assert any_int(-4, 6, 2)==True", "assert any_int(7, 13, 6) == True", "assert any_int(2.003, 3, 11) == False", "assert any_int(3.357, 7, 8.074) == False", "assert any_int(3.621, 6.679, 2.542) == False", "assert any_int(12, 3, 9) == True", "assert any_int(7.797, 7, 4) == False", "assert any_int(7, 1, 8) == True", "assert any_int(5, 3, 8) == True", "assert any_int(5, 7, 2) == True", "assert any_int(5, 6, 11) == True", "assert any_int(6.681, 8, 4.747) == False", "assert any_int(3, 2, 5) == True", "assert any_int(3.0,4,7)==False", "assert any_int(9, 1, 10) == True", "assert any_int(1.5, 5, 3.5)==False", "assert any_int(2.834, 7, 9) == False", "assert any_int(2, 6, 4) == True", "assert any_int(6.068, 1, 3.454) == False", "assert any_int(1.834, 7.255, 6.304) == False", "assert any_int(1.726, 3, 1) == False", "assert any_int(13, 7, 6) == True", "assert any_int(6.9, 4, 12) == False", "assert any_int(4.039, 5, 5.992) == False", "assert any_int(4, 5, 9) == True", "assert any_int(6, 2, 7) == False", "assert any_int(3, 10, 7) == True", "assert any_int(5.586, 1, 2) == False", "assert any_int(12, 8, 4) == True", "assert any_int(2.459, 5, 11) == False", "assert any_int(0, 2, 2) == True", "assert any_int(6.175, 9, 4) == False", "assert any_int(12, 5, 7) == True", "assert any_int(8.854, 2, 8) == False", "assert any_int(2.858, 1, 2) == False", "assert any_int(4, 3, 1) == True", "assert any_int(4, 11, 1) == False", "assert any_int(5, 5, 10) == True", "assert any_int(10, 5, 5) == True", "assert any_int(3.228, 6, 6) == False", "assert any_int(2.805, 3, 6.418) == False", "assert any_int(2, 1, 1) == True", "assert any_int(6, 3, 3) == True", "assert any_int(7, 5, 12) == True", "assert any_int(-4, 11, 7) == True", "assert any_int(2,1,1)==True", "assert any_int(7, 2, 9) == True", "assert any_int(3.445, 2, 2) == False", "assert any_int(2, 7, 5) == True", "assert any_int(6.254, 6, 7) == False", "assert any_int(3.685, 2, 6) == False", "assert any_int(5, 9, 5) == False", "assert any_int(5.408, 8, 3.454) == False", "assert any_int(-7, 5, -2) == True", "assert any_int(4, 8, 4) == True", "assert any_int(12, 7, 5) == True", "assert any_int(4, 7, 3) == True", "assert any_int(6.61, 1.687, 2.647) == False", "assert any_int(3.033, 6.554, 7.391) == False", "assert any_int(2.08, 7, 1.239) == False"], "nl": "\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    ", "func": "def any_int(x, y, z):", "examples": "Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    ", "completions": ["from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Checks if one of the numbers is equal to the sum of the other two and all numbers are integers.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if any one of the numbers is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n\n    # Check if any one of the numbers is equal to the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Checks if one of the three given numbers is equal to the sum of the other two and ensures all inputs are integers.\n    \n    Args:\n        x (int): The first integer input.\n        y (int): The second integer input.\n        z (int): The third integer input.\n    \n    Returns:\n        bool: True if one of the numbers is equal to the sum of the other two, otherwise False.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n    \n    # Check if one of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if any one of the numbers is equal to the sum of the other two and all numbers are integers.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if any one of the numbers is equal to the sum of the other two and all numbers are integers, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n\n    # Check if any one of the numbers is equal to the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if one of the numbers is the sum of the other two and all numbers are integers.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if one number is the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        raise ValueError(\"All inputs must be integers.\")\n\n    # Check if one number is the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if any one of the three numbers is equal to the sum of the other two.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if any one of the numbers is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if one of the three given numbers is equal to the sum of the other two.\n    \n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n    \n    Returns:\n        bool: True if one of the numbers is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        raise ValueError(\"All inputs must be integers.\")\n    \n    # Calculate the sums of pairs\n    sum_xy = x + y\n    sum_xz = x + z\n    sum_yz = y + z\n    \n    # Check if any of the sums is equal to one of the numbers\n    if x == sum_xy or y == sum_xz or z == sum_yz:\n        return True\n    if sum_xy == x or sum_xz == y or sum_yz == z:\n        return True\n    \n    return False\n\n# Example usage:\n# print(any_int(5, 2, 7))  # \u279e True\n# print(any_int(3, 2, 2))  # \u279e False\n# print(any_int(3, -2, 1))  # \u279e True\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if one of the three given numbers is equal to the sum of the other two, and all numbers are integers.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if one of the numbers is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        raise ValueError(\"All inputs must be integers.\")\n\n    # Check if one of the numbers is equal to the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Function to check if one number is the sum of the other two and all numbers are integers.\n    \n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n    \n    Returns:\n        bool: True if one number is the sum of the other two, False otherwise.\n    \"\"\"\n    # Validate that all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        raise ValueError(\"All inputs must be integers.\")\n    \n    # Check if any one of the numbers is equal to the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if any of the three given numbers is equal to the sum of the other two.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if any one of the numbers is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        raise ValueError(\"All inputs must be integers.\")\n\n    # Calculate the sums of pairs of numbers\n    sum_xy = x + y\n    sum_xz = x + z\n    sum_yz = y + z\n\n    # Check if any one of the numbers is equal to the sum of the other two\n    return x == sum_xy or x == sum_xz or x == sum_yz or y == sum_xy or y == sum_xz or y == sum_yz or z == sum_xy or z == sum_xz or z == sum_yz\n\n# Example usage:\n# print(any_int(5, 2, 7))  # True, because 5 + 2 = 7\n# print(any_int(3, 2, 2))  # False, no number is equal to the sum of the other two\n# print(any_int(3, -2, 1)) # True, because 3 + (-2) = 1\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if any of the three given numbers is equal to the sum of the other two and all numbers are integers.\n\n    Args:\n        x (int): The first number.\n        y (int): The second number.\n        z (int): The third number.\n\n    Returns:\n        bool: True if any number is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        raise ValueError(\"All inputs must be integers.\")\n\n    # Check if any one of the numbers is equal to the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that takes three numbers and checks if one of them is equal to the sum of the other two, with the added condition that all numbers must be integers. The function should return true if the condition is met and false otherwise. The function should also handle both positive and negative integers correctly. The examples provided illustrate the expected behavior of the function.\nrequirement pool:\n- The main code should accurately check if one of the numbers is equal to the sum of the other two and all numbers are integers.\n- The function should handle both positive and negative integers correctly.\n- Provide clear and concise examples to illustrate the function's behavior.\n- Ensure the function returns false for non-integer inputs.\n- Create a user-friendly interface for easy interaction.\nTo implement the function `any_int(x, y, z)` that checks if one of the numbers is equal to the sum of the other two and all numbers are integers, we will use Python's built-in type checking and arithmetic operations. The function will first ensure that all inputs are integers using the `isinstance` function. Then, it will check if any one of the numbers is equal to the sum of the other two. This approach ensures that the function is both simple and efficient.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers equals the third number'\n    This means that for any three numbers, one of them should be equal to the sum of the other two.\n\n# [phrase showing quantity relationship]\n    No specific phrase showing quantity relationship is mentioned in the requirement.\n\n# [degree adverb] \n    No degree adverb is mentioned in the requirement.\n\n# [code logic]\n    To implement the function `any_int(x, y, z)`, we need to follow these steps:\n    1. Check if all inputs are integers using `isinstance(x, int)`, `isinstance(y, int)`, and `isinstance(z, int)`.\n    2. Check if any one of the numbers is equal to the sum of the other two.\n    3. Return `True` if the condition is met, otherwise return `False`.\n\n# [edge case] \n    any_int(5, 2, 7) = True\n    Explanation: 7 is equal to the sum of 5 and 2.\n    any_int(3, 2, 2) = False\n    Explanation: None of the numbers is equal to the sum of the other two.\n    any_int(3, -2, 1) = True\n    Explanation: 3 is equal to the sum of -2 and 1.\n    any_int(3.6, -2.2, 2) = False\n    Explanation: The inputs are not integers, so the function should return `False`.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the inputs are not integers.\n    ```python\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    ```\n", "requirement analysis:\nThe function requires the ability to check if any one of the three given numbers is equal to the sum of the other two, while ensuring all inputs are integers. The function should handle both positive and negative integers correctly. The implementation should be clear and concise to ensure ease of use and understanding.\nrequirement pool:\n- The main code should accurately check if one number is the sum of the other two and ensure all inputs are integers.\n- The function should handle both positive and negative integers correctly.\n- Ensure the function is easy to understand and use.\n- Provide clear examples and documentation for the function.\nTo implement the function `any_int(x, y, z)` that checks if one of the three given numbers is equal to the sum of the other two and ensures all inputs are integers, we will use Python's built-in capabilities and type checking. We will validate that all inputs are integers and then perform the sum check. This approach ensures clarity and simplicity in the implementation.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum check': means checking if one of the numbers is equal to the sum of the other two.\n    'integer check': means ensuring all inputs are integers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Steps to implement the function:\n    1. Check if all inputs are integers.\n    2. Check if one of the numbers is equal to the sum of the other two.\n    3. Return True if the condition is met, otherwise return False.\n\n# [edge case] \n    any_int(5, 2, 7) = True\n    Explanation: 7 is equal to 5 + 2. All inputs are integers.\n    any_int(3, 2, 2) = False\n    Explanation: None of the numbers is equal to the sum of the other two. All inputs are integers.\n    any_int(3, -2, 1) = True\n    Explanation: 3 is equal to -2 + 1. All inputs are integers.\n    any_int(3.6, -2.2, 2) = False\n    Explanation: The inputs are not integers, so the function should return False.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where inputs are not integers.\n        if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n            return False\n        (other code)\n", "requirement analysis:\nThe function should take three numbers as input and check if any one of them is equal to the sum of the other two. It should return true if all numbers are integers and this condition is met. Otherwise, it should return false. The function should handle both positive and negative integers correctly. The examples provided in the original requirements are clear and demonstrate the expected behavior.\nrequirement pool:\n- The function should take three numbers as input.\n- The function should check if any one of the numbers is equal to the sum of the other two.\n- The function should return true if all numbers are integers and the condition is met.\n- The function should return false otherwise.\n- The function should handle both positive and negative integers correctly.\nTo implement the function `any_int(x, y, z)` that checks if any one of the numbers is equal to the sum of the other two and all numbers are integers, we will use Python's built-in capabilities and type checking. We will ensure that the function only returns true if all inputs are integers and the condition is met. Otherwise, it will return false. This approach will handle both positive and negative integers correctly.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers equals the third number'\n    In the requirement, it means that the sum of any two of the given numbers should be equal to the third number.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Ensure all inputs are integers.\n    - Check if any one of the numbers is equal to the sum of the other two.\n\n# [edge case] \n    any_int(5, 2, 7) = True\n    Explanation: 5 + 2 = 7, so one of the numbers is equal to the sum of the other two.\n    any_int(3, 2, 2) = False\n    Explanation: No number is equal to the sum of the other two.\n    any_int(3, -2, 1) = True\n    Explanation: 3 + (-2) = 1, so one of the numbers is equal to the sum of the other two.\n    any_int(3.6, -2.2, 2) = False\n    Explanation: The inputs are not integers, so the function should return false.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the inputs are not integers.\n        if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n            return False\n        (other code)\n", "requirement analysis:\nThe function needs to check if one of the three numbers is equal to the sum of the other two and ensure all numbers are integers. It should handle both positive and negative integers correctly. The function should return True if the condition is met, and False otherwise. The examples provided should demonstrate the function's behavior and help users understand how to use it.\nrequirement pool:\n- The function should check if one number is the sum of the other two and ensure all numbers are integers.\n- The function should handle both positive and negative integers correctly.\n- Provide clear and concise examples to demonstrate the function's behavior.\n- Ensure the function provides a clear and concise interface.\nTo implement the function `any_int(x, y, z)` that checks if one of the numbers is the sum of the other two and all numbers are integers, we will use Python's built-in capabilities to ensure the numbers are integers and then perform a simple arithmetic check. This approach leverages Python's type checking and arithmetic operations, making the implementation straightforward and efficient.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers equals the third number'\n    In the requirement, it means that the sum of any two of the three given numbers should be equal to the third number.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Ensure all numbers are integers.\n    - Check if one number is the sum of the other two.\n\n# [edge case] \n    any_int(5, 2, 7) \u279e True\n    Explanation: 5 + 2 = 7, so one number is the sum of the other two.\n    any_int(3, 2, 2) \u279e False\n    Explanation: No number is the sum of the other two.\n    any_int(3, -2, 1) \u279e True\n    Explanation: 3 + (-2) = 1, so one number is the sum of the other two.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The function already checks if all numbers are integers and if one number is the sum of the other two.\n", "requirement analysis:\nThe requirement is to create a function that takes three numbers and returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. The function should handle both positive and negative integers correctly. The examples provided give clear scenarios to test the function.\nrequirement pool:\n- The main code should accurately check if one of the numbers is equal to the sum of the other two and ensure all numbers are integers.\n- The function should handle both positive and negative integers correctly.\n- Provide clear and concise examples to demonstrate the function's usage.\nWe will implement the function using Python, leveraging basic arithmetic operations and type checking to ensure all inputs are integers. The function will check if any one of the three numbers is equal to the sum of the other two, and return the appropriate boolean value.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers equals a third number'\n    This means that for any three given numbers, one of them should be equal to the sum of the other two.\n\n# [phrase showing quantity relationship]\n    No specific phrase showing quantity relationship is mentioned.\n\n# [degree adverb] \n    No degree adverb is mentioned.\n\n# [code logic]\n    To implement the function `any_int(x, y, z)`, we need to check if any one of the numbers is equal to the sum of the other two. This can be done using a simple conditional check in Python.\n\n    ```python\n    def any_int(x, y, z):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    ```\n\n# [edge case] \n    any_int(5, 2, 7) = True\n    Explanation: In this case, 7 is equal to the sum of 5 and 2. Therefore, the function returns True.\n\n    any_int(3, 2, 2) = False\n    Explanation: Here, none of the numbers is equal to the sum of the other two. Thus, the function returns False.\n\n    any_int(3, -2, 1) = True\n    Explanation: In this example, 3 is equal to the sum of -2 and 1. The function correctly identifies this and returns True.\n\n# [extra code for edge case]\n    No extra code is needed for the given edge cases as the provided logic already handles all the cases correctly.\n", "requirement analysis:\nThe requirement is to create a function that checks if one of the three given numbers is equal to the sum of the other two, and all numbers must be integers. The function should handle both positive and negative integers correctly. The examples provided give clear scenarios to test the function.\nrequirement pool:\n- The main code should accurately check if one number is the sum of the other two and ensure all numbers are integers.\n- The function should handle both positive and negative integers correctly.\n- Provide clear and concise examples to demonstrate the function's behavior.\n- Ensure the function is easy to understand and use.\n- Include a simple and intuitive user interface for easy interaction.\nWe will implement the function using a simple and straightforward approach. The function will check if one of the three given numbers is equal to the sum of the other two, and all numbers must be integers. To ensure the function handles both positive and negative integers correctly, we will use Python's built-in type checking capabilities.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers equals the third number'\n    In the requirement, it means that for any three given numbers, one of them should be equal to the sum of the other two, and all numbers must be integers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The function will check if one of the three given numbers is equal to the sum of the other two, and all numbers must be integers.\n\n# [edge case] \n    any_int(5, 2, 7) \u279e True\n    Explanation: In this case, 7 is equal to the sum of 5 and 2. All numbers are integers, so the function should return True.\n    any_int(3, 2, 2) \u279e False\n    Explanation: In this case, none of the numbers is equal to the sum of the other two, and the function should return False.\n    any_int(3, -2, 1) \u279e True\n    Explanation: In this case, 3 is equal to the sum of -2 and 1. All numbers are integers, so the function should return True.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The function's logic is straightforward and covers all necessary cases.\n", "requirement analysis:\nThe requirement is to create a function that checks if one of the three given numbers is equal to the sum of the other two, and all numbers are integers. The function should handle both positive and negative integers correctly. The examples provided give clear scenarios to test the function.\nrequirement pool:\n- The main code should accurately check if one number is the sum of the other two and ensure all numbers are integers.\n- The function should handle both positive and negative integers correctly.\n- Provide clear and concise examples to demonstrate the function's usage.\n- Ensure the function is easy to understand and implement.\n- Test the function with various combinations of positive and negative integers.\nWe will implement the function `any_int` using Python. The function will check if one of the three given numbers is equal to the sum of the other two, and all numbers are integers. To achieve this, we will use basic arithmetic operations and type checking. The function will return `True` if the condition is met, and `False` otherwise. We will also ensure that the function handles both positive and negative integers correctly.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers equals the third number'\n    In the requirement, it means that the sum of any two of the given numbers should be equal to the third number.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Check if all inputs are integers.\n    - Check if one of the numbers is equal to the sum of the other two.\n\n# [edge case] \n    any_int(5, 2, 7) \u279e True\n    Explanation: 5 + 2 = 7, so one of the numbers is equal to the sum of the other two.\n    any_int(3, 2, 2) \u279e False\n    Explanation: No number is equal to the sum of the other two.\n    any_int(3, -2, 1) \u279e True\n    Explanation: 3 + (-2) = 1, so one of the numbers is equal to the sum of the other two.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic already checks for the conditions specified in the requirement.\n", "requirement analysis:\nThe original requirements specify a function that takes three numbers and returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. The function should handle both positive and negative integers correctly. The requirement is clear and specific, focusing on the functionality of the function and its ability to work with integers.\nrequirement pool:\n- The main code should accurately determine if one number is the sum of the other two and ensure all numbers are integers.\n- The function should handle both positive and negative integers correctly.\n- Provide clear and concise examples to demonstrate the function's usage.\n- Ensure the function is user-friendly and easy to understand.\nTo implement the function `any_int(x, y, z)` that checks if one of the numbers is the sum of the other two and all numbers are integers, we will follow these steps: \n1. Validate that all inputs are integers. \n2. Check if any one of the numbers is equal to the sum of the other two. \n3. Return the result as a boolean value.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers': means the result of adding two of the numbers together\n    'integer': means the numbers are whole numbers without any decimal parts\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Steps to implement the function:\n    1. Validate that all inputs are integers.\n    2. Check if any one of the numbers is equal to the sum of the other two.\n    3. Return the result as a boolean value.\n\n# [edge case] \n    any_int(1, 2, 3) = True\n    Explanation: The sum of 1 and 2 is 3, so one of the numbers is equal to the sum of the other two.\n    any_int(1, 1, 1) = False\n    Explanation: None of the numbers are equal to the sum of the other two.\n    any_int(0, 0, 0) = True\n    Explanation: The sum of 0 and 0 is 0, so one of the numbers is equal to the sum of the other two.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic is sufficient to check if one number is the sum of the other two and ensure all numbers are integers.\n", "requirement analysis:\nThe requirement is to create a function that checks if any of the three given numbers is equal to the sum of the other two, and all numbers must be integers. The function should correctly handle both positive and negative integers. The examples provided illustrate the expected behavior of the function.\nrequirement pool:\n- The function should return True if any one of the numbers is equal to the sum of the other two, and all numbers are integers.\n- The function should return False if none of the numbers is equal to the sum of the other two, or if any of the numbers is not an integer.\n- The function should handle both positive and negative integers correctly.\n- The function should be easy to understand and implement.\nWe will implement the function using a simple and straightforward approach. The function will check if any of the three given numbers is equal to the sum of the other two, and all numbers must be integers. We will use Python's built-in type checking to ensure all inputs are integers. This approach ensures clarity and ease of implementation.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers equals a third number'\n    In the requirement, it means that the sum of any two of the three given numbers should be equal to the third number.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Check if all inputs are integers.\n    (2) Check if any one of the numbers is equal to the sum of the other two.\n    (3) Return True if the condition is met, otherwise return False.\n\n# [edge case] \n    any_int(5, 2, 7) = True\n    Explanation: 5 + 2 = 7, so one of the numbers is equal to the sum of the other two.\n    any_int(3, 2, 2) = False\n    Explanation: No number is equal to the sum of the other two.\n    any_int(3, -2, 1) = True\n    Explanation: 3 + (-2) = 1, so one of the numbers is equal to the sum of the other two.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the logic provided in the plan is sufficient to check for the conditions mentioned in the requirement.\n", "requirement analysis:\nThe requirement is to create a function that checks if any of the three given numbers is equal to the sum of the other two, and all numbers must be integers. The function should correctly handle both positive and negative integers. The examples provided illustrate the expected behavior of the function.\nrequirement pool:\n- The function should return true if one of the numbers is equal to the sum of the other two and all numbers are integers.\n- The function should return false if any of the numbers are not integers.\n- The function should handle both positive and negative integers correctly.\n- The function should be efficient in its implementation.\nTo create a function that checks if any of the three given numbers is equal to the sum of the other two and all numbers are integers, we will use Python's built-in capabilities to ensure type checking and simple arithmetic operations. The function will first verify that all inputs are integers using the isinstance() function. Then, it will check if any one of the numbers is equal to the sum of the other two. This approach ensures efficiency and clarity in implementation.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers equals the third'\n    In the requirement, it means that for any three numbers, one of them should be equal to the sum of the other two.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests creating a function that checks if any of the three given numbers is equal to the sum of the other two and all numbers are integers. This can be achieved by using a simple conditional check in Python.\n\n# [edge case] \n    any_int(5, 2, 7) \u279e True\n    Explanation: 5 is equal to 2 + 7, so the function should return True.\n    any_int(3, 2, 2) \u279e False\n    Explanation: None of the numbers is equal to the sum of the other two, so the function should return False.\n    any_int(3, -2, 1) \u279e True\n    Explanation: 3 is equal to -2 + 1, so the function should return True.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic in the plan is sufficient to check if any of the numbers is equal to the sum of the other two and ensure all numbers are integers.\n"], "scores": [1.0, 1.0, 1.0, 0.5725, 0.9847, 0.2443, 0.5725, 0.5725, 0.5725, 0.5725], "pass_results": [true, true, true, false, false, false, false, false, false, false], "pass_test_cases_num": [131, 131, 131, 75, 129, 32, 75, 75, 75, 75], "completion": "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if any of the three given numbers is equal to the sum of the other two and all numbers are integers.\n\n    Args:\n        x (int): The first number.\n        y (int): The second number.\n        z (int): The third number.\n\n    Returns:\n        bool: True if any number is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        raise ValueError(\"All inputs must be integers.\")\n\n    # Check if any one of the numbers is equal to the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "passed": true, "pass": true, "pass_num": 3, "round": 869, "repair_prompt": ["def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\nEnsure the function handles both positive and negative integers correctly.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", " def any_int(x, y, z):\n    '''Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    Ensure the function handles both positive and negative integers correctly.\n    Examples\n        any_int(5, 2, 7) \u279e True\n        \n        any_int(3, 2, 2) \u279e False\n\n        any_int(3, -2, 1) ", " def any_int(x, y, z):\n    '''Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    Ensure the function handles both positive and negative integers correctly.\n    Examples\n        any_int(5, 2, 7) \u279e True\n        \n        any_int(3, 2, 2) \u279e False\n    \n        any_int(3, -2, 1) "], "mutate_method": "add_1_sentence_at_end", "parent_index": 71}
