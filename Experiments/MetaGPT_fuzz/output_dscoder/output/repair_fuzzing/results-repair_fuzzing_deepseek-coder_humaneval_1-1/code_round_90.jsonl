{"task_id": "HumanEval/117", "prompt": "def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that have precisely \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", "entry_point": "select_words", "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "test": ["def check(select_words):\n\tassert select_words('eg aqk', 2) == ['aqk']", "def check(select_words):\n\tassert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "def check(select_words):\n\tassert select_words('syk', 6) == []", "def check(select_words):\n\tassert select_words('gw', 9) == []", "def check(select_words):\n\tassert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "def check(select_words):\n\tassert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "def check(select_words):\n\tassert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "def check(select_words):\n\tassert select_words('zGMhBC', 6) == ['zGMhBC']", "def check(select_words):\n\tassert select_words('kfohjsjunakqmmsx', 1) == []", "def check(select_words):\n\tassert select_words('KbpFfWgXZoVjXV', 1) == []", "def check(select_words):\n\tassert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "def check(select_words):\n\tassert select_words('kg', 1) == []", "def check(select_words):\n\tassert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "def check(select_words):\n\tassert select_words('xrbpxpncgqufqkq', 6) == []", "def check(select_words):\n\tassert select_words('sqgikswgssxsbwkl', 7) == []", "def check(select_words):\n\tassert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "def check(select_words):\n\tassert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "def check(select_words):\n\tassert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "def check(select_words):\n\tassert select_words('bnXA AjPVh', 5) == []", "def check(select_words):\n\tassert select_words('omnivbqgmavyqdgqssas', 6) == []", "def check(select_words):\n\tassert select_words('fmjizkhknnihqioic', 4) == []", "def check(select_words):\n\tassert select_words('lINKPOlFIImtg', 3) == []", "def check(select_words):\n\tassert select_words('nPxmyTd', 7) == ['nPxmyTd']", "def check(select_words):\n\tassert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "def check(select_words):\n\tassert select_words('mehochzpausf', 2) == []", "def check(select_words):\n\tassert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "def check(select_words):\n\tassert select_words('EGiDfM', 1) == []", "def check(select_words):\n\tassert select_words('mc', 7) == []", "def check(select_words):\n\tassert select_words('wzx', 5) == []", "def check(select_words):\n\tassert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "def check(select_words):\n\tassert select_words('xwkxcjffocow', 5) == []", "def check(select_words):\n\tassert select_words('dl', 5) == []", "def check(select_words):\n\tassert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "def check(select_words):\n\tassert select_words('ABIStgq', 5) == ['ABIStgq']", "def check(select_words):\n\tassert select_words('nb', 2) == ['nb']", "def check(select_words):\n\tassert select_words('ny', 2) == ['ny']", "def check(select_words):\n\tassert select_words('HWCLBC', 6) == ['HWCLBC']", "def check(select_words):\n\tassert select_words('uuh', 6) == []", "def check(select_words):\n\tassert select_words('uoubngttn', 3) == []", "def check(select_words):\n\tassert select_words('g', 5) == []", "def check(select_words):\n\tassert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "def check(select_words):\n\tassert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "def check(select_words):\n\tassert select_words('aztxoxesjkzqebhrfzw', 3) == []", "def check(select_words):\n\tassert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "def check(select_words):\n\tassert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "def check(select_words):\n\tassert select_words('tJzO PnCT', 3) == ['tJzO']", "def check(select_words):\n\tassert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "def check(select_words):\n\tassert select_words('qhwubvrfmwy', 2) == []", "def check(select_words):\n\tassert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "def check(select_words):\n\tassert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "def check(select_words):\n\tassert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "def check(select_words):\n\tassert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "def check(select_words):\n\tassert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "def check(select_words):\n\tassert select_words('r s rhhipmt', 6) == ['rhhipmt']", "def check(select_words):\n\tassert select_words('aDqyhePv', 6) == ['aDqyhePv']", "def check(select_words):\n\tassert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "def check(select_words):\n\tassert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "def check(select_words):\n\tassert select_words('aru', 5) == []", "def check(select_words):\n\tassert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "def check(select_words):\n\tassert select_words('SNeiILCez', 4) == []", "def check(select_words):\n\tassert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "def check(select_words):\n\tassert select_words('ySmjGAg', 6) == ['ySmjGAg']", "def check(select_words):\n\tassert select_words('bRJRZC', 3) == []", "def check(select_words):\n\tassert select_words('u', 1) == []", "def check(select_words):\n\tassert select_words('djucfuuizrjfvuzzo', 4) == []", "def check(select_words):\n\tassert select_words('dvYLMt', 6) == ['dvYLMt']", "def check(select_words):\n\tassert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "def check(select_words):\n\tassert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "def check(select_words):\n\tassert select_words('yp', 6) == []", "def check(select_words):\n\tassert select_words('v', 4) == []", "def check(select_words):\n\tassert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "def check(select_words):\n\tassert select_words('afrrguc', 5) == ['afrrguc']", "def check(select_words):\n\tassert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "def check(select_words):\n\tassert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "def check(select_words):\n\tassert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "def check(select_words):\n\tassert select_words('nh vu lcakrb', 1) == ['vu']", "def check(select_words):\n\tassert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "def check(select_words):\n\tassert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "def check(select_words):\n\tassert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "def check(select_words):\n\tassert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "def check(select_words):\n\tassert select_words('MjRnAErHPguQC', 1) == []", "def check(select_words):\n\tassert select_words('tmchxmttrgfdanq', 3) == []", "def check(select_words):\n\tassert select_words('jezkeorvxnruwhhwzxm', 7) == []", "def check(select_words):\n\tassert select_words('caurfxlpkygqxoknil', 4) == []", "def check(select_words):\n\tassert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "def check(select_words):\n\tassert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "def check(select_words):\n\tassert select_words('NSjIbZV', 2) == []", "def check(select_words):\n\tassert select_words('rPKhzIot', 6) == ['rPKhzIot']", "def check(select_words):\n\tassert select_words('ASDVzOVVDEdj J', 1) == ['J']", "def check(select_words):\n\tassert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "def check(select_words):\n\tassert select_words(' siweqafqot', 5) == []", "def check(select_words):\n\tassert select_words('xdQgsAHI', 5) == []", "def check(select_words):\n\tassert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "def check(select_words):\n\tassert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "def check(select_words):\n\tassert select_words('hguHoJGaaNwX', 3) == []", "def check(select_words):\n\tassert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "def check(select_words):\n\tassert select_words('choounwx', 5) == ['choounwx']", "def check(select_words):\n\tassert select_words('yue', 2) == []", "def check(select_words):\n\tassert select_words('DDdrgPy', 4) == []", "def check(select_words):\n\tassert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "def check(select_words):\n\tassert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "def check(select_words):\n\tassert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "def check(select_words):\n\tassert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "def check(select_words):\n\tassert select_words('Reg MuZcF', 4) == ['MuZcF']", "def check(select_words):\n\tassert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "def check(select_words):\n\tassert select_words('sl', 6) == []", "def check(select_words):\n\tassert select_words('IFKqNq ', 5) == ['IFKqNq']", "def check(select_words):\n\tassert select_words('lfspeijyudniowk', 1) == []", "def check(select_words):\n\tassert select_words('kogmgdnk', 7) == ['kogmgdnk']", "def check(select_words):\n\tassert select_words('nnchatjackywoavfwfps', 5) == []", "def check(select_words):\n\tassert select_words('d', 2) == []", "def check(select_words):\n\tassert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "def check(select_words):\n\tassert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "def check(select_words):\n\tassert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "def check(select_words):\n\tassert select_words('jopfxbbvlslmluypcdt', 3) == []", "def check(select_words):\n\tassert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "def check(select_words):\n\tassert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "def check(select_words):\n\tassert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "def check(select_words):\n\tassert select_words('etdrxwybqi', 1) == []", "def check(select_words):\n\tassert select_words('aVCSziOkLCLGizHcmC', 2) == []", "def check(select_words):\n\tassert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "def check(select_words):\n\tassert select_words('txXxge', 4) == []", "def check(select_words):\n\tassert select_words('kcpieuVjAOaxdpB', 4) == []", "def check(select_words):\n\tassert select_words('oh', 8) == []", "def check(select_words):\n\tassert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "def check(select_words):\n\tassert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "def check(select_words):\n\tassert select_words('eywh qxreeexrrhyovpwl', 7) == []", "def check(select_words):\n\tassert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "def check(select_words):\n\tassert select_words('asfwxvbzdfsrymc', 3) == []", "def check(select_words):\n\tassert select_words('nBmjWxiPV', 3) == []", "def check(select_words):\n\tassert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "test_case_list": ["assert select_words('eg aqk', 2) == ['aqk']", "assert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "assert select_words('syk', 6) == []", "assert select_words('gw', 9) == []", "assert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "assert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "assert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "assert select_words('zGMhBC', 6) == ['zGMhBC']", "assert select_words('kfohjsjunakqmmsx', 1) == []", "assert select_words('KbpFfWgXZoVjXV', 1) == []", "assert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "assert select_words('kg', 1) == []", "assert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "assert select_words('xrbpxpncgqufqkq', 6) == []", "assert select_words('sqgikswgssxsbwkl', 7) == []", "assert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "assert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "assert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "assert select_words('bnXA AjPVh', 5) == []", "assert select_words('omnivbqgmavyqdgqssas', 6) == []", "assert select_words('fmjizkhknnihqioic', 4) == []", "assert select_words('lINKPOlFIImtg', 3) == []", "assert select_words('nPxmyTd', 7) == ['nPxmyTd']", "assert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "assert select_words('mehochzpausf', 2) == []", "assert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "assert select_words('EGiDfM', 1) == []", "assert select_words('mc', 7) == []", "assert select_words('wzx', 5) == []", "assert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "assert select_words('xwkxcjffocow', 5) == []", "assert select_words('dl', 5) == []", "assert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "assert select_words('ABIStgq', 5) == ['ABIStgq']", "assert select_words('nb', 2) == ['nb']", "assert select_words('ny', 2) == ['ny']", "assert select_words('HWCLBC', 6) == ['HWCLBC']", "assert select_words('uuh', 6) == []", "assert select_words('uoubngttn', 3) == []", "assert select_words('g', 5) == []", "assert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "assert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "assert select_words('aztxoxesjkzqebhrfzw', 3) == []", "assert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "assert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "assert select_words('tJzO PnCT', 3) == ['tJzO']", "assert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "assert select_words('qhwubvrfmwy', 2) == []", "assert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "assert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "assert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "assert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "assert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "assert select_words('r s rhhipmt', 6) == ['rhhipmt']", "assert select_words('aDqyhePv', 6) == ['aDqyhePv']", "assert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "assert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "assert select_words('aru', 5) == []", "assert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "assert select_words('SNeiILCez', 4) == []", "assert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "assert select_words('ySmjGAg', 6) == ['ySmjGAg']", "assert select_words('bRJRZC', 3) == []", "assert select_words('u', 1) == []", "assert select_words('djucfuuizrjfvuzzo', 4) == []", "assert select_words('dvYLMt', 6) == ['dvYLMt']", "assert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "assert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "assert select_words('yp', 6) == []", "assert select_words('v', 4) == []", "assert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "assert select_words('afrrguc', 5) == ['afrrguc']", "assert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "assert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "assert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "assert select_words('nh vu lcakrb', 1) == ['vu']", "assert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "assert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "assert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "assert select_words('MjRnAErHPguQC', 1) == []", "assert select_words('tmchxmttrgfdanq', 3) == []", "assert select_words('jezkeorvxnruwhhwzxm', 7) == []", "assert select_words('caurfxlpkygqxoknil', 4) == []", "assert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "assert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "assert select_words('NSjIbZV', 2) == []", "assert select_words('rPKhzIot', 6) == ['rPKhzIot']", "assert select_words('ASDVzOVVDEdj J', 1) == ['J']", "assert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "assert select_words(' siweqafqot', 5) == []", "assert select_words('xdQgsAHI', 5) == []", "assert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "assert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "assert select_words('hguHoJGaaNwX', 3) == []", "assert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "assert select_words('choounwx', 5) == ['choounwx']", "assert select_words('yue', 2) == []", "assert select_words('DDdrgPy', 4) == []", "assert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "assert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "assert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "assert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "assert select_words('Reg MuZcF', 4) == ['MuZcF']", "assert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "assert select_words('sl', 6) == []", "assert select_words('IFKqNq ', 5) == ['IFKqNq']", "assert select_words('lfspeijyudniowk', 1) == []", "assert select_words('kogmgdnk', 7) == ['kogmgdnk']", "assert select_words('nnchatjackywoavfwfps', 5) == []", "assert select_words('d', 2) == []", "assert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "assert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "assert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "assert select_words('jopfxbbvlslmluypcdt', 3) == []", "assert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "assert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "assert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "assert select_words('etdrxwybqi', 1) == []", "assert select_words('aVCSziOkLCLGizHcmC', 2) == []", "assert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "assert select_words('txXxge', 4) == []", "assert select_words('kcpieuVjAOaxdpB', 4) == []", "assert select_words('oh', 8) == []", "assert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "assert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "assert select_words('eywh qxreeexrrhyovpwl', 7) == []", "assert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "assert select_words('asfwxvbzdfsrymc', 3) == []", "assert select_words('nBmjWxiPV', 3) == []", "assert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "nl": "Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    ", "func": "def select_words(s, n):", "examples": "Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    ", "completions": ["from typing import List\nfrom typing import List\n\ndef count_consonants(word: str) -> int:\n    \"\"\"\n    Helper function to count the number of consonants in a word.\n    \n    Args:\n        word (str): The word to count consonants in.\n        \n    Returns:\n        int: The number of consonants in the word.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return sum(1 for char in word if char.isalpha() and char not in vowels)\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants.\n        \n    Returns:\n        List[str]: A list of words with exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "from typing import List\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    \n    vowels = set('aeiouAEIOU')\n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = sum(1 for char in word if char.lower() not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants.\n\n    Args:\n        s (str): The input string containing words.\n        n (int): The number of consonants a word must contain.\n\n    Returns:\n        List[str]: A list of words that contain exactly `n` consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    vowels = set('aeiouAEIOU')\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    \n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = sum(1 for char in word if char in consonants)\n        if consonant_count == n:\n            result.append(word)\n    \n    return result\n", "from typing import List\nfrom typing import List\nimport re\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    \n    # Split the input string into words\n    words = re.findall(r'\\b\\w+\\b', s)\n    \n    # Function to count consonants in a word\n    def count_consonants(word: str) -> int:\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n    \n    # Filter words based on the specified number of consonants\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    \n    return filtered_words\n", "from typing import List\nfrom typing import List\nimport re\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants.\n\n    Args:\n        s (str): The input string containing words.\n        n (int): The number of consonants that each word must contain.\n\n    Returns:\n        List[str]: A list of words that contain exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n\n    def count_consonants(word: str) -> int:\n        \"\"\"\n        Counts the number of consonants in a word.\n\n        Args:\n            word (str): The word to count consonants in.\n\n        Returns:\n            int: The number of consonants in the word.\n        \"\"\"\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return sum(1 for char in word.lower() if char in consonants)\n\n    words = s.split()\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    return filtered_words\n\n# Example usage:\n# result = select_words(\"Mary had a little lamb\", 3)\n# print(result)  # Output: ['Mary', 'lamb']\n", "from typing import List\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants they contain.\n\n    Args:\n        s (str): The input string.\n        n (int): The number of consonants a word must contain.\n\n    Returns:\n        List[str]: A list of words from the input string that contain exactly `n` consonants.\n    \"\"\"\n    if not s:\n        return []\n\n    # Define a set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyz\")\n\n    # Split the input string into words\n    words = s.split()\n\n    # Filter words based on the number of consonants they contain\n    filtered_words = [word for word in words if sum(1 for char in word.lower() if char in consonants) == n]\n\n    return filtered_words\n", "from typing import List\nfrom typing import List\nimport re\n\ndef count_consonants(word: str) -> int:\n    \"\"\"\n    Count the number of consonants in a word.\n    \n    Args:\n        word (str): The word to count consonants in.\n        \n    Returns:\n        int: The number of consonants in the word.\n    \"\"\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    return sum(1 for char in word.lower() if char in consonants)\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants they contain.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants a word must contain.\n        \n    Returns:\n        List[str]: A list of words that contain exactly `n` consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    words = re.findall(r'\\b[A-Za-z]+\\b', s)\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    \n    return filtered_words\n", "from typing import List\nfrom typing import List\n\ndef count_consonants(word: str) -> int:\n    vowels = \"aeiouAEIOU\"\n    return sum(1 for char in word if char.isalpha() and char not in vowels)\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    \n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = count_consonants(word)\n        if consonant_count == n:\n            result.append(word)\n    \n    return result\n", "from typing import List\nfrom typing import List\nimport re\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    \n    # Split the input string into words\n    words = re.findall(r'\\b\\w+\\b', s)\n    \n    # Function to count consonants in a word\n    def count_consonants(word: str) -> int:\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return sum(1 for char in word.lower() if char in consonants)\n    \n    # Filter words with exactly n consonants\n    result = [word for word in words if count_consonants(word) == n]\n    \n    return result\n", "from typing import List\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants.\n\n    Args:\n        s (str): The input string.\n        n (int): The number of consonants.\n\n    Returns:\n        List[str]: A list of words with exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n\n    # Define a set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyz\")\n\n    # Split the input string into words\n    words = s.split()\n\n    # Filter words based on the number of consonants\n    filtered_words = [word for word in words if len([char for char in word.lower() if char in consonants]) == n]\n\n    return filtered_words\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle various edge cases such as empty strings and strings with no words meeting the criteria. The function should be efficient and handle large inputs effectively. The product should be user-friendly and provide clear feedback to the user.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Handle edge cases such as empty strings and no matching words.\n- Ensure the function is efficient and performs well with large inputs.\n- Create a user-friendly interface for easy input and output.\n- Provide clear feedback to the user regarding the results.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string manipulation methods and a simple list comprehension. We will define a helper function to count the consonants in a word and then use this function within our main function to filter the words based on the specified number of consonants.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'natural number': a positive integer (1, 2, 3, ...)\n\n# [phrase showing quantity relationship]\n    'precisely': means exactly the specified number\n\n# [degree adverb] \n    No degree adverb specifically mentioned, but the requirement emphasizes the exact count of consonants.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Define a function to count consonants in a word.\n    - Use a list comprehension to filter words based on the specified number of consonants.\n    - Handle the case where the input string is empty by returning an empty list.\n\n# [edge case] \n    select_words(\"\", 4) = []\n    Explanation: The input string is empty, so there are no words to consider, and the function should return an empty list.\n    select_words(\"Hello world\", 0) = [\"Hello\", \"world\"]\n    Explanation: Words with zero consonants are \"Hello\" and \"world\" as they contain no consonants.\n    select_words(\"Mary had a little lamb\", 1) = [\"had\", \"lamb\"]\n    Explanation: Words \"had\" and \"lamb\" each have exactly one consonant, which are consonants in the context of English.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan already covers the case where the input string is empty. However, for the other edge cases, the provided logic should suffice.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle basic string operations and return the words in the order they appear in the input string. The function should also handle edge cases such as empty strings and non-positive integers for the number of consonants.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function returns words in the order they appear in the input string.\n- Handle edge cases such as empty strings and non-positive integers for the number of consonants.\n- Develop a user-friendly interface for easy input and output handling.\n- Provide clear examples and documentation for user guidance.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string operations and list comprehensions for simplicity and efficiency. The function will first split the input string into words, then filter these words based on the number of consonants they contain, and finally return the filtered list of words in the order they appear in the input string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'natural number': a positive integer (1, 2, 3, ...)\n\n    Explanation: The function is designed to select words from a given string based on the count of consonants they contain. A consonant is any letter that is not a vowel. The function will return a list of words that have exactly 'n' consonants, maintaining the order they appear in the input string.\n\n# [phrase showing quantity relationship]\n    'precisely': means that the word must have exactly 'n' consonants\n\n# [degree adverb] \n    No degree adverb specifically mentioned\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Steps to implement the function:\n    1. Split the input string 's' into words.\n    2. Define a set of vowels for easy lookup.\n    3. Iterate through each word, count the number of consonants, and check if it matches 'n'.\n    4. Collect and return the words that match the condition.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to process, and the function should return an empty list.\n    select_words(\"Hello world\", 4) = [\"world\"]\n    Explanation: The word \"world\" has 3 consonants, but the function should return the word with exactly 4 consonants, which is \"world\".\n    select_words(\"Mary had a little lamb\", 4) = [\"little\"]\n    Explanation: The word \"little\" has 4 consonants, which matches the given 'n', so it is included in the output list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic can handle the case where the input string is empty by returning an empty list.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be able to handle various lengths of words and different numbers of consonants. It should return an empty list if there are no words meeting the criteria. The function should also handle edge cases such as empty strings.\nrequirement pool:\n- The main code should correctly filter words based on the number of consonants.\n- The function should handle edge cases such as empty strings and strings with no words meeting the criteria.\n- Implement a mechanism to count consonants in each word.\n- Ensure the function is optimized for performance to handle large inputs effectively.\n- Include user-friendly error handling for invalid inputs.\nTo implement the function `select_words` that filters words based on the number of consonants, we will use Python's built-in string manipulation methods and a simple list processing approach. We will define a set of consonants for easy checking and iterate through the words in the input string to count consonants in each word. The function will return a list of words that match the specified number of consonants.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'natural number': a positive integer (1, 2, 3, ...)\n\n# [phrase showing quantity relationship]\n    'precisely': means exactly the number of consonants specified\n\n# [degree adverb] \n    No degree adverb specifically mentioned, but 'exactly' can be inferred from 'precisely'\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Define a set of consonants for easy checking.\n    - Split the input string into words.\n    - Iterate through each word to count the number of consonants.\n    - Filter words that have the specified number of consonants.\n    - Return the filtered list of words.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    explanation: The input string is empty, so there are no words to process, and the function should return an empty list.\n    select_words(\"Hello world\", 0) = [\"Hello\", \"world\"]\n    explanation: Both \"Hello\" and \"world\" have zero consonants, which matches the specified number.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic already correctly handles an empty string by returning an empty list.\n\n# [code logic]\n    Here's a detailed implementation of the `select_words` function:\n\n    ```python\n    def select_words(s, n):\n        if not s:\n            return []\n        \n        vowels = set('aeiouAEIOU')\n        consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n        \n        words = s.split()\n        result = []\n        \n        for word in words:\n            consonant_count = sum(1 for char in word if char in consonants)\n            if consonant_count == n:\n                result.append(word)\n        \n        return result\n    ```\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. This involves parsing the input string, identifying words, and counting consonants to ensure only those with the specified number are returned. The function should handle edge cases such as empty strings and various input formats.\nrequirement pool:\n- Implement the function to accurately count consonants in each word and filter based on the specified count.\n- Ensure the function is efficient and can handle strings of varying lengths and complexities.\n- Develop a user-friendly interface for easy integration and use.\n- Test the function with a variety of inputs to ensure robustness and accuracy.\n- Optimize the function for performance and scalability.\nTo implement the function `select_words` that filters words based on the number of consonants they contain, we will use Python's built-in string manipulation capabilities and regular expressions for efficient word extraction and consonant counting. The function will parse the input string, identify words, and count consonants to filter based on the specified count. We will ensure the function is efficient and can handle various input sizes by optimizing the algorithm and using Python's efficient data structures.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'words': means individual units of language, typically having meaning and starting with a capital letter\n    'consonants': means letters that are not vowels (a, e, i, o, u) in the English alphabet\n\n# [phrase showing quantity relationship]\n    'precisely': means exactly the specified number, no more no less\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Split the input string into words\n    - Count the consonants in each word\n    - Filter words based on the specified number of consonants\n    - Return the filtered list of words\n\n# [edge case] \n    select_words(\"\", 4) = []\n    explanation: The input string is empty, so there are no words to filter, and the expected output is an empty list.\n    select_words(\"Hello world\", 3) = [\"world\"]\n    explanation: The word \"world\" has 3 consonants (w, r, l, d), which matches the specified count, so it is included in the output list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function already handles the case where the input string is empty by returning an empty list.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. This is a specific use case that can be useful in various applications, including text analysis and word processing. The function should handle basic inputs and edge cases, such as an empty string or a negative number for the consonant count. The implementation should be efficient and suitable for integration into other systems.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Handle edge cases, such as an empty string or a negative number for the consonant count.\n- Ensure the function is efficient and can handle various input sizes.\n- Develop a user-friendly interface for easy integration into other applications.\n- Test the function with various inputs to ensure accuracy and reliability.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string manipulation capabilities and regular expressions for efficient word extraction and filtering. The function will first split the input string into words, then filter these words based on the specified number of consonants. The use of regular expressions will help in accurately counting consonants in each word.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'words': means sequences of letters separated by spaces\n    'consonants': means letters that are not vowels (a, e, i, o, u)\n    'natural number': means a positive integer\n\n    Explanation: The function is designed to select words from a given string based on the count of consonants they contain. The count of consonants is specified by the user and must be a positive integer.\n\n# [phrase showing quantity relationship]\n    'precisely': means exactly the specified number\n\n# [degree adverb] \n    No degree adverb specifically mentioned\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Steps to implement the function:\n    1. Split the input string into words.\n    2. Define a function to count consonants in a word.\n    3. Filter words based on the specified number of consonants.\n    4. Return the filtered list of words.\n\n# [edge case] \n    select_words(\"\", 4) = []\n    Explanation: Since the input string is empty, there are no words to filter, so the expected output is an empty list.\n    select_words(\"Mary had a little lamb\", 0) = [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n    Explanation: If the number of consonants is 0, the function should return all words in the string, as each word contains at least one vowel, which is not considered a consonant in this context.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic can handle the case where the input string is empty by returning an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic can handle the case where the number of consonants is 0 by returning all words.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. This involves parsing the input string, identifying words, and counting consonants in each word. The function should handle edge cases like empty strings and return an empty list in such cases. The output should be a list of words that meet the criteria.\nrequirement pool:\n- Implement the function to count consonants in words and filter based on the specified number.\n- Ensure the function handles edge cases like empty strings and returns an appropriate response.\n- Develop a user-friendly interface for easy input and output.\n- Optimize the function for efficiency and performance.\nTo implement the function `select_words` that filters words based on the number of consonants they contain, we will use Python's built-in string manipulation methods and a simple list comprehension. We will define a set of consonants for easy checking and then iterate over the words in the input string, counting consonants in each word to determine if it meets the specified criteria.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'natural number': a positive integer (1, 2, 3, ...)\n\n# [phrase showing quantity relationship]\n    'precisely': means exactly the specified number of consonants\n\n# [degree adverb] \n    No degree adverb specifically mentioned, but 'exactly' can be inferred from 'precisely'\n\n# [code logic]\n    (1) Define a set of consonants.\n    (2) Split the input string into words.\n    (3) Filter words based on the number of consonants they contain.\n    (4) Return the filtered list of words.\n\n# [edge case] \n    select_words(\"Mary had a little lamb\", 4) = [\"little\"]\n    Explanation: The word \"little\" has 4 consonants (l, t, l, b).\n\n    select_words(\"\", 3) = []\n    Explanation: The string is empty, so there are no words to consider.\n\n    select_words(\"hello world\", 3) = [\"world\"]\n    Explanation: The word \"world\" has 3 consonants (w, r, l, d).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case since the function already returns an empty list for an empty string.\n", "requirement analysis:\nThe requirement is to create a function that filters words from a given string based on the number of consonants they contain. The function should be able to handle various input scenarios, including empty strings and strings with no words meeting the criteria. The function should be efficient and easy to use.\nrequirement pool:\n- Implement the function to accurately count consonants and filter words based on the specified number.\n- Ensure the function can handle edge cases such as empty strings and strings with no matching words.\n- Optimize the function for performance, especially for large inputs.\n- Develop a user-friendly interface for easy integration and usage.\n- Test the function thoroughly to ensure it meets all requirements and handles all edge cases.\nTo implement the function `select_words(s, n)` that filters words based on the number of consonants they contain, we will use Python's built-in string manipulation capabilities and regular expressions for efficient word extraction and consonant counting. The function will first split the input string into words, then filter these words based on the specified number of consonants, and finally return the filtered list.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'words': means individual units of language, typically starting with a capital letter and consisting of a sequence of letters; used in syntax as the basic building blocks of sentences.\n    'consonants': means any consonantal sound in a language, excluding the vowels.\n\n# [phrase showing quantity relationship]\n    'precisely': means exactly, without exception or deviation.\n\n# [degree adverb] \n    'natural number': means a positive integer (1, 2, 3, ...), used in mathematics.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Split the input string `s` into words.\n    - Define a function to count the consonants in a word.\n    - Filter words based on the number of consonants (`n`).\n    - Return the list of words that meet the criteria.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    explanation: The input string is empty, so there are no words to filter, and the function should return an empty list.\n    select_words(\"Hello world\", 5) = []\n    explanation: There are no words with exactly 5 consonants in the given string, so the function should return an empty list.\n    select_words(\"Mary had a little lamb\", 4) = [\"little\"]\n    explanation: The word \"little\" has exactly 4 consonants ('l', 't', 'l', 'b'), so it is included in the output list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case of an empty string. The function already returns an empty list for such cases.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle different lengths of input strings and return the words in the order they appear in the input string. The input string is assumed to contain only letters and spaces.\nrequirement pool:\n- Implement the function to filter words based on consonant count.\n- Ensure the function handles different lengths of input strings.\n- Maintain the order of words as they appear in the input string.\n- Provide a user-friendly interface for easy input and output.\n- Optimize the performance for large input strings.\nTo implement the function that filters words based on the number of consonants they contain, we will use Python's built-in string manipulation capabilities and a simple approach to count consonants. We will define a helper function to count consonants in a word and then use this function to filter the words in the input string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'natural number': a positive integer (1, 2, 3, ...)\n\n    Explanation: The function `select_words` is designed to filter words based on the number of consonants they contain. The input string `s` is expected to contain words separated by spaces, and the natural number `n` specifies the required number of consonants for the words to be included in the output list.\n\n# [phrase showing quantity relationship]\n    'precisely': means exactly the specified number of consonants\n\n# [degree adverb] \n    No degree adverb specifically mentioned, but the requirement is to find the words with the exact number of consonants.\n\n# [code logic]\n    To implement the function, we will follow these steps:\n    1. Split the input string `s` into words.\n    2. Define a helper function to count the consonants in a word.\n    3. Iterate through each word, count its consonants, and check if it matches the required number `n`.\n    4. Collect and return the words that meet the criteria.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: Since the input string is empty, there are no words to process, so the function should return an empty list.\n\n    select_words(\"Hello world\", 5) = []\n    Explanation: There are no words with exactly 5 consonants in the string \"Hello world\". The word \"world\" has 1 consonant, and \"Hello\" has 2 consonants.\n\n    select_words(\"Python programming is fun\", 4) = [\"programming\"]\n    Explanation: The word \"programming\" has exactly 4 consonants (p, r, g, m, m, n). Other words either have fewer or more consonants.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case of an empty string. The function already returns an empty list as expected.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants. The function should handle strings with spaces and return a list of words that have exactly 'n' consonants. The function should also handle empty strings by returning an empty list.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Handle empty strings and return an empty list.\n- Ensure the function is efficient and can handle various lengths of input strings.\n- Develop a user-friendly interface for easy input and output.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string manipulation capabilities and regular expressions. The function will first split the input string into words, then count the consonants in each word, and finally return a list of words that have exactly 'n' consonants.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'natural number': a positive integer (1, 2, 3, ...)\n\n# [phrase showing quantity relationship]\n    'precisely': means exactly the number of consonants specified by 'n'\n\n# [degree adverb] \n    No degree adverb specifically mentioned, but 'exactly' implies a specific quantity.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Split the input string into words.\n    - Count the consonants in each word.\n    - Filter words that have exactly 'n' consonants.\n    - Return the list of words that meet the criteria.\n\n# [edge case] \n    select_words(\"Mary had a little lamb\", 4) = [\"little\"]\n    Explanation:\n    - The word \"little\" has 4 consonants (l, t, l, b).\n    - Other words have a different number of consonants.\n    select_words(\"Mary had a little\", 3) = [\"had\"]\n    Explanation:\n    - The word \"had\" has exactly 3 consonants (h, d).\n    - Other words have a different number of consonants.\n    select_words(\"\", 3) = []\n    Explanation:\n    - The string is empty, so there are no words to consider.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function will naturally return an empty list if the input string is empty.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants. The function should be able to handle various lengths of words and different numbers of consonants. It should return an empty list if there are no words with the specified number of consonants. The function should also handle edge cases such as empty strings.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Handle edge cases such as empty strings and strings with no words meeting the criteria.\n- Ensure the function is optimized for performance to handle large inputs effectively.\n- Provide clear and concise documentation for the function.\n- Test the function with various inputs to ensure it works as expected.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string manipulation methods and a simple list comprehension. We will define a set of consonants and use it to count the consonants in each word. The function will then filter and return the words that match the specified number of consonants.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'natural number': a positive integer (1, 2, 3, ...)\n\n# [phrase showing quantity relationship]\n    'precisely': means exactly the specified number of consonants\n\n# [degree adverb] \n    No degree adverb specifically mentioned, but the requirement emphasizes the exact count of consonants.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Steps to implement the function:\n    1. Define a set of consonants.\n    2. Split the input string into words.\n    3. Filter words based on the number of consonants.\n    4. Return the filtered list of words.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to filter, and the function should return an empty list.\n    select_words(\"Hello world\", 0) = [\"Hello\", \"world\"]\n    Explanation: The requirement specifies a natural number n, which includes 0. Therefore, words with zero consonants should also be included in the output.\n    select_words(\"Mary had a little lamb\", 5) = []\n    Explanation: There are no words with exactly 5 consonants in the given string, so the function should return an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic can handle cases where the input string is empty or where the specified number of consonants is zero.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [133, 133, 133, 133, 133, 133, 133, 133, 133, 133], "completion": "from typing import List\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants.\n\n    Args:\n        s (str): The input string.\n        n (int): The number of consonants.\n\n    Returns:\n        List[str]: A list of words with exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n\n    # Define a set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyz\")\n\n    # Split the input string into words\n    words = s.split()\n\n    # Filter words based on the number of consonants\n    filtered_words = [word for word in words if len([char for char in word.lower() if char in consonants]) == n]\n\n    return filtered_words\n", "passed": true, "pass": true, "pass_num": 10, "round": 90, "repair_prompt": ["def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that have precisely \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", " def select_words(s, n):\t\n    '''Given a string s and a natural number n, you have been tasked to implement \n        a function that returns a list of all words from string s that have precisely \n        n consonants, in order these words appear in the string s.\n        If the string s is empty then the function should return an empty list.\n        Note: you may assume the input string contains only letters and spaces.\n    Examples:\n        select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n        select_words(\"Mary had a", " def select_words(s, n):\n    '''Given a string s and a natural number n, you have been tasked to implement \n        a function that returns a list of all words from string s that have precisely \n        n consonants, in order these words appear in the string s.\n        If the string s is empty then the function should return an empty list.\n        Note: you may assume the input string contains only letters and spaces.\n    Examples:\n        select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n        select_words(\"Mary had a little"], "mutate_method": "rephrase_one", "parent_index": 90}
