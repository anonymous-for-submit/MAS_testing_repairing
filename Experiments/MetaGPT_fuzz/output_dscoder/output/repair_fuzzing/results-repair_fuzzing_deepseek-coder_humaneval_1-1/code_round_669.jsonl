{"task_id": "HumanEval/58", "prompt": "def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for two lists. Ensure that your solution efficiently handles large lists to achieve optimal performance.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "entry_point": "common", "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "test": ["def check(common):\n\tassert common([6, 5, 7, 10], [8, 4]) == []", "def check(common):\n\tassert common([6, 3, 2, 37, 657, 2, 6], [5, 9, 1, 6, 4, 654, 125]) == [6]", "def check(common):\n\tassert common([1, 6, 5, 9], [1, 6, 1]) == [1, 6]", "def check(common):\n\tassert common([8, 7, 6, 13], [7, 2]) == [7]", "def check(common):\n\tassert common([1, 1, 3, 11], [5, 3, 2]) == [3]", "def check(common):\n\tassert common([7, 8, 6, 11], [4, 5, 9]) == []", "def check(common):\n\tassert common([1, 6, 5, 34, 651, 3, 3], [7, 8, 1, 7, 9, 653, 121]) == [1]", "def check(common):\n\tassert common([6, 6, 4, 12], [3, 1]) == []", "def check(common):\n\tassert common([6, 1, 5, 36, 648, 1, 6], [3, 4, 2, 1, 12, 654, 123]) == [1]", "def check(common):\n\tassert common([6, 3, 7, 6], [3, 5, 7]) == [3, 7]", "def check(common):\n\tassert common([4, 8, 2, 9], [3, 1]) == []", "def check(common):\n\tassert common([3, 5, 5, 8], [7, 6]) == []", "def check(common):\n\tassert common([1, 8, 3, 4], [8, 7, 6]) == [8]", "def check(common):\n\tassert common([5, 2, 6, 30, 650, 7, 3], [7, 10, 2, 4, 4, 651, 126]) == [2, 7]", "def check(common):\n\tassert common([4, 6, 6, 7], [8, 6, 9]) == [6]", "def check(common):\n\tassert common([3, 7, 6, 3], [2, 4, 5]) == []", "def check(common):\n\tassert common([7, 4, 3, 10], [3, 1]) == [3]", "def check(common):\n\tassert common([3, 3, 1, 4], [4, 6, 4]) == [4]", "def check(common):\n\tassert common([4, 5, 2, 5], [1, 7, 5]) == [5]", "def check(common):\n\tassert common([5, 3, 4, 35, 652, 1, 1], [9, 6, 2, 8, 6, 653, 122]) == []", "def check(common):\n\tassert common([3, 1, 6, 11], [6, 6]) == [6]", "def check(common):\n\tassert common([7, 4, 7, 13], [8, 4]) == [4]", "def check(common):\n\tassert common([4, 4, 4, 34, 652, 5, 10], [8, 2, 1, 4, 5, 652, 117]) == [4, 5, 652]", "def check(common):\n\tassert common([2, 8, 3, 29, 650, 1, 7], [3, 6, 2, 3, 7, 652, 116]) == [2, 3, 7]", "def check(common):\n\tassert common([5, 8, 7, 3], [6, 4]) == []", "def check(common):\n\tassert common([2, 2, 1, 29, 650, 4, 2], [3, 10, 6, 2, 11, 651, 119]) == [2]", "def check(common):\n\tassert common([3, 3, 2, 30, 656, 3, 4], [6, 11, 2, 4, 4, 652, 123]) == [2, 4]", "def check(common):\n\tassert common([6, 1, 4, 33, 651, 4, 3], [4, 10, 1, 10, 12, 657, 126]) == [1, 4]", "def check(common):\n\tassert common([6, 6, 4, 5], [3, 3, 8]) == []", "def check(common):\n\tassert common([5, 5, 4, 34, 648, 5, 5], [3, 7, 6, 2, 10, 648, 116]) == [648]", "def check(common):\n\tassert common([2, 1, 7, 9], [6, 3]) == []", "def check(common):\n\tassert common([4, 1, 4, 12], [5, 1, 7]) == [1]", "def check(common):\n\tassert common([7, 6, 3, 9], [6, 5]) == [6]", "def check(common):\n\tassert common([2, 3, 3, 9], [5, 2]) == [2]", "def check(common):\n\tassert common([1, 4, 1, 32, 657, 7, 6], [4, 10, 2, 2, 4, 650, 124]) == [4]", "def check(common):\n\tassert common([8, 3, 4, 10], [8, 7]) == [8]", "def check(common):\n\tassert common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]", "def check(common):\n\tassert common([5, 2, 2, 30, 654, 5, 1], [3, 3, 2, 10, 6, 657, 126]) == [2]", "def check(common):\n\tassert common([2, 7, 4, 3], [8, 7, 5]) == [7]", "def check(common):\n\tassert common([4, 5, 7, 12], [7, 1]) == [7]", "def check(common):\n\tassert common([9, 3, 7, 4], [4, 2, 4]) == [4]", "def check(common):\n\tassert common([3, 1, 3, 10], [3, 3, 9]) == [3]", "def check(common):\n\tassert common([4, 4, 1, 37, 654, 7, 5], [3, 11, 2, 6, 9, 656, 120]) == []", "def check(common):\n\tassert common([2, 6, 2, 8], [5, 2]) == [2]", "def check(common):\n\tassert common([2, 4, 3, 12], [4, 5, 6]) == [4]", "def check(common):\n\tassert common([4, 4, 7, 8], [4, 4, 9]) == [4]", "def check(common):\n\tassert common([1, 6, 6, 12], [6, 2, 9]) == [6]", "def check(common):\n\tassert common([2, 7, 1, 4], [1, 2, 1]) == [1, 2]", "def check(common):\n\tassert common([2, 5, 6, 32, 649, 3, 9], [8, 6, 1, 4, 4, 658, 117]) == [6]", "def check(common):\n\tassert common([2, 1, 5, 37, 657, 7, 1], [4, 9, 3, 1, 12, 649, 122]) == [1]", "def check(common):\n\tassert common([5, 5, 7, 7], [5, 2]) == [5]", "def check(common):\n\tassert common([5, 3, 2, 8], [3, 2]) == [2, 3]", "def check(common):\n\tassert common([5, 4, 5, 32, 655, 6, 2], [2, 10, 4, 2, 14, 656, 117]) == [2, 4]", "def check(common):\n\tassert common([3, 4, 4, 8], [3, 3, 9]) == [3]", "def check(common):\n\tassert common([5, 2, 1, 3], [8, 3]) == [3]", "def check(common):\n\tassert common([3, 8, 3, 35, 651, 4, 2], [1, 12, 6, 10, 4, 654, 119]) == [4]", "def check(common):\n\tassert common([5, 6, 4, 8], [3, 7, 2]) == []", "def check(common):\n\tassert common([7, 7, 5, 11], [3, 4]) == []", "def check(common):\n\tassert common([4, 3, 2, 8], []) == []", "def check(common):\n\tassert common([7, 7, 7, 3], [2, 4]) == []", "def check(common):\n\tassert common([2, 9, 3, 36, 649, 6, 7], [10, 12, 4, 4, 14, 656, 116]) == []", "def check(common):\n\tassert common([3, 8, 6, 6], [4, 3, 3]) == [3]", "def check(common):\n\tassert common([1, 8, 7, 3], [2, 6]) == []", "def check(common):\n\tassert common([1, 4, 5, 11], [1, 6, 1]) == [1]", "def check(common):\n\tassert common([6, 2, 3, 8], [7, 6, 8]) == [6, 8]", "def check(common):\n\tassert common([1, 7, 4, 30, 653, 1, 1], [6, 9, 2, 2, 13, 650, 120]) == []", "def check(common):\n\tassert common([6, 8, 4, 32, 657, 7, 6], [4, 10, 1, 5, 14, 652, 120]) == [4]", "def check(common):\n\tassert common([2, 7, 7, 32, 650, 5, 6], [7, 2, 4, 3, 13, 654, 117]) == [2, 7]", "def check(common):\n\tassert common([1, 4, 7, 30, 658, 3, 10], [6, 7, 3, 10, 10, 658, 117]) == [3, 7, 10, 658]", "def check(common):\n\tassert common([8, 4, 1, 9], [6, 3]) == []", "def check(common):\n\tassert common([2, 1, 4, 37, 657, 3, 7], [8, 5, 5, 10, 7, 654, 121]) == [7]", "def check(common):\n\tassert common([9, 7, 7, 7], [5, 2]) == []", "def check(common):\n\tassert common([4, 6, 3, 31, 648, 7, 10], [1, 10, 4, 7, 7, 653, 117]) == [4, 7, 10]", "def check(common):\n\tassert common([6, 5, 2, 3], [3, 3, 3]) == [3]", "def check(common):\n\tassert common([4, 4, 1, 8], [1, 5, 7]) == [1]", "def check(common):\n\tassert common([8, 4, 6, 5], [1, 1]) == []", "def check(common):\n\tassert common([4, 5, 3, 10], [7, 5]) == [5]", "def check(common):\n\tassert common([7, 1, 7, 13], [3, 1]) == [1]", "def check(common):\n\tassert common([1, 5, 5, 29, 655, 4, 1], [5, 3, 2, 1, 5, 648, 118]) == [1, 5]", "def check(common):\n\tassert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "def check(common):\n\tassert common([7, 7, 1, 4], [5, 6]) == []", "def check(common):\n\tassert common([5, 4, 2, 36, 648, 7, 10], [6, 8, 1, 5, 11, 649, 126]) == [5]", "def check(common):\n\tassert common([8, 1, 1, 3], [5, 6]) == []", "def check(common):\n\tassert common([6, 3, 6, 3], [8, 5, 8]) == []", "def check(common):\n\tassert common([6, 8, 7, 32, 654, 7, 3], [7, 7, 2, 5, 10, 654, 123]) == [7, 654]", "def check(common):\n\tassert common([2, 2, 6, 11], [5, 6, 1]) == [6]", "def check(common):\n\tassert common([1, 4, 6, 39, 653, 4, 3], [6, 12, 2, 3, 14, 654, 116]) == [3, 6]", "def check(common):\n\tassert common([1, 3, 4, 9], [7, 3]) == [3]", "def check(common):\n\tassert common([9, 6, 6, 7], [7, 7, 1]) == [7]", "def check(common):\n\tassert common([5, 6, 2, 34, 654, 3, 7], [7, 9, 1, 7, 8, 650, 122]) == [7]", "def check(common):\n\tassert common([8, 2, 7, 4], [7, 7, 1]) == [7]", "def check(common):\n\tassert common([3, 2, 1, 37, 654, 7, 6], [2, 3, 2, 6, 4, 649, 123]) == [2, 3, 6]", "def check(common):\n\tassert common([9, 2, 7, 4], [5, 4, 1]) == [4]", "def check(common):\n\tassert common([8, 1, 4, 10], [4, 2]) == [4]", "def check(common):\n\tassert common([2, 8, 5, 10], [8, 4]) == [8]", "def check(common):\n\tassert common([8, 4, 4, 6], [3, 6]) == [6]", "def check(common):\n\tassert common([3, 6, 6, 7], [7, 4, 2]) == [7]", "def check(common):\n\tassert common([3, 4, 3, 11], [4, 1, 7]) == [4]", "def check(common):\n\tassert common([3, 1, 4, 5], [1, 1]) == [1]", "def check(common):\n\tassert common([3, 2, 5, 37, 652, 2, 3], [5, 4, 6, 7, 9, 651, 120]) == [5]"], "test_case_list": ["assert common([6, 5, 7, 10], [8, 4]) == []", "assert common([6, 3, 2, 37, 657, 2, 6], [5, 9, 1, 6, 4, 654, 125]) == [6]", "assert common([1, 6, 5, 9], [1, 6, 1]) == [1, 6]", "assert common([8, 7, 6, 13], [7, 2]) == [7]", "assert common([1, 1, 3, 11], [5, 3, 2]) == [3]", "assert common([7, 8, 6, 11], [4, 5, 9]) == []", "assert common([1, 6, 5, 34, 651, 3, 3], [7, 8, 1, 7, 9, 653, 121]) == [1]", "assert common([6, 6, 4, 12], [3, 1]) == []", "assert common([6, 1, 5, 36, 648, 1, 6], [3, 4, 2, 1, 12, 654, 123]) == [1]", "assert common([6, 3, 7, 6], [3, 5, 7]) == [3, 7]", "assert common([4, 8, 2, 9], [3, 1]) == []", "assert common([3, 5, 5, 8], [7, 6]) == []", "assert common([1, 8, 3, 4], [8, 7, 6]) == [8]", "assert common([5, 2, 6, 30, 650, 7, 3], [7, 10, 2, 4, 4, 651, 126]) == [2, 7]", "assert common([4, 6, 6, 7], [8, 6, 9]) == [6]", "assert common([3, 7, 6, 3], [2, 4, 5]) == []", "assert common([7, 4, 3, 10], [3, 1]) == [3]", "assert common([3, 3, 1, 4], [4, 6, 4]) == [4]", "assert common([4, 5, 2, 5], [1, 7, 5]) == [5]", "assert common([5, 3, 4, 35, 652, 1, 1], [9, 6, 2, 8, 6, 653, 122]) == []", "assert common([3, 1, 6, 11], [6, 6]) == [6]", "assert common([7, 4, 7, 13], [8, 4]) == [4]", "assert common([4, 4, 4, 34, 652, 5, 10], [8, 2, 1, 4, 5, 652, 117]) == [4, 5, 652]", "assert common([2, 8, 3, 29, 650, 1, 7], [3, 6, 2, 3, 7, 652, 116]) == [2, 3, 7]", "assert common([5, 8, 7, 3], [6, 4]) == []", "assert common([2, 2, 1, 29, 650, 4, 2], [3, 10, 6, 2, 11, 651, 119]) == [2]", "assert common([3, 3, 2, 30, 656, 3, 4], [6, 11, 2, 4, 4, 652, 123]) == [2, 4]", "assert common([6, 1, 4, 33, 651, 4, 3], [4, 10, 1, 10, 12, 657, 126]) == [1, 4]", "assert common([6, 6, 4, 5], [3, 3, 8]) == []", "assert common([5, 5, 4, 34, 648, 5, 5], [3, 7, 6, 2, 10, 648, 116]) == [648]", "assert common([2, 1, 7, 9], [6, 3]) == []", "assert common([4, 1, 4, 12], [5, 1, 7]) == [1]", "assert common([7, 6, 3, 9], [6, 5]) == [6]", "assert common([2, 3, 3, 9], [5, 2]) == [2]", "assert common([1, 4, 1, 32, 657, 7, 6], [4, 10, 2, 2, 4, 650, 124]) == [4]", "assert common([8, 3, 4, 10], [8, 7]) == [8]", "assert common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]", "assert common([5, 2, 2, 30, 654, 5, 1], [3, 3, 2, 10, 6, 657, 126]) == [2]", "assert common([2, 7, 4, 3], [8, 7, 5]) == [7]", "assert common([4, 5, 7, 12], [7, 1]) == [7]", "assert common([9, 3, 7, 4], [4, 2, 4]) == [4]", "assert common([3, 1, 3, 10], [3, 3, 9]) == [3]", "assert common([4, 4, 1, 37, 654, 7, 5], [3, 11, 2, 6, 9, 656, 120]) == []", "assert common([2, 6, 2, 8], [5, 2]) == [2]", "assert common([2, 4, 3, 12], [4, 5, 6]) == [4]", "assert common([4, 4, 7, 8], [4, 4, 9]) == [4]", "assert common([1, 6, 6, 12], [6, 2, 9]) == [6]", "assert common([2, 7, 1, 4], [1, 2, 1]) == [1, 2]", "assert common([2, 5, 6, 32, 649, 3, 9], [8, 6, 1, 4, 4, 658, 117]) == [6]", "assert common([2, 1, 5, 37, 657, 7, 1], [4, 9, 3, 1, 12, 649, 122]) == [1]", "assert common([5, 5, 7, 7], [5, 2]) == [5]", "assert common([5, 3, 2, 8], [3, 2]) == [2, 3]", "assert common([5, 4, 5, 32, 655, 6, 2], [2, 10, 4, 2, 14, 656, 117]) == [2, 4]", "assert common([3, 4, 4, 8], [3, 3, 9]) == [3]", "assert common([5, 2, 1, 3], [8, 3]) == [3]", "assert common([3, 8, 3, 35, 651, 4, 2], [1, 12, 6, 10, 4, 654, 119]) == [4]", "assert common([5, 6, 4, 8], [3, 7, 2]) == []", "assert common([7, 7, 5, 11], [3, 4]) == []", "assert common([4, 3, 2, 8], []) == []", "assert common([7, 7, 7, 3], [2, 4]) == []", "assert common([2, 9, 3, 36, 649, 6, 7], [10, 12, 4, 4, 14, 656, 116]) == []", "assert common([3, 8, 6, 6], [4, 3, 3]) == [3]", "assert common([1, 8, 7, 3], [2, 6]) == []", "assert common([1, 4, 5, 11], [1, 6, 1]) == [1]", "assert common([6, 2, 3, 8], [7, 6, 8]) == [6, 8]", "assert common([1, 7, 4, 30, 653, 1, 1], [6, 9, 2, 2, 13, 650, 120]) == []", "assert common([6, 8, 4, 32, 657, 7, 6], [4, 10, 1, 5, 14, 652, 120]) == [4]", "assert common([2, 7, 7, 32, 650, 5, 6], [7, 2, 4, 3, 13, 654, 117]) == [2, 7]", "assert common([1, 4, 7, 30, 658, 3, 10], [6, 7, 3, 10, 10, 658, 117]) == [3, 7, 10, 658]", "assert common([8, 4, 1, 9], [6, 3]) == []", "assert common([2, 1, 4, 37, 657, 3, 7], [8, 5, 5, 10, 7, 654, 121]) == [7]", "assert common([9, 7, 7, 7], [5, 2]) == []", "assert common([4, 6, 3, 31, 648, 7, 10], [1, 10, 4, 7, 7, 653, 117]) == [4, 7, 10]", "assert common([6, 5, 2, 3], [3, 3, 3]) == [3]", "assert common([4, 4, 1, 8], [1, 5, 7]) == [1]", "assert common([8, 4, 6, 5], [1, 1]) == []", "assert common([4, 5, 3, 10], [7, 5]) == [5]", "assert common([7, 1, 7, 13], [3, 1]) == [1]", "assert common([1, 5, 5, 29, 655, 4, 1], [5, 3, 2, 1, 5, 648, 118]) == [1, 5]", "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "assert common([7, 7, 1, 4], [5, 6]) == []", "assert common([5, 4, 2, 36, 648, 7, 10], [6, 8, 1, 5, 11, 649, 126]) == [5]", "assert common([8, 1, 1, 3], [5, 6]) == []", "assert common([6, 3, 6, 3], [8, 5, 8]) == []", "assert common([6, 8, 7, 32, 654, 7, 3], [7, 7, 2, 5, 10, 654, 123]) == [7, 654]", "assert common([2, 2, 6, 11], [5, 6, 1]) == [6]", "assert common([1, 4, 6, 39, 653, 4, 3], [6, 12, 2, 3, 14, 654, 116]) == [3, 6]", "assert common([1, 3, 4, 9], [7, 3]) == [3]", "assert common([9, 6, 6, 7], [7, 7, 1]) == [7]", "assert common([5, 6, 2, 34, 654, 3, 7], [7, 9, 1, 7, 8, 650, 122]) == [7]", "assert common([8, 2, 7, 4], [7, 7, 1]) == [7]", "assert common([3, 2, 1, 37, 654, 7, 6], [2, 3, 2, 6, 4, 649, 123]) == [2, 3, 6]", "assert common([9, 2, 7, 4], [5, 4, 1]) == [4]", "assert common([8, 1, 4, 10], [4, 2]) == [4]", "assert common([2, 8, 5, 10], [8, 4]) == [8]", "assert common([8, 4, 4, 6], [3, 6]) == [6]", "assert common([3, 6, 6, 7], [7, 4, 2]) == [7]", "assert common([3, 4, 3, 11], [4, 1, 7]) == [4]", "assert common([3, 1, 4, 5], [1, 1]) == [1]", "assert common([3, 2, 5, 37, 652, 2, 3], [5, 4, 6, 7, 9, 651, 120]) == [5]"], "nl": "Return sorted unique common elements for two lists.\n    ", "func": "def common(l1: list, l2: list):", "examples": ">>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    ", "completions": ["from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted unique common elements for two lists.\n    Args:\n        l1 (list): First list of elements.\n        l2 (list): Second list of elements.\n    Returns:\n        list: Sorted list of unique common elements.\n    Examples:\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n            [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n            [2, 3]\n    '''\n    # Convert lists to sets to find intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection result back to a list\n    result_list = list(intersection)\n    \n    # Sort the list to ensure the elements are in ascending order\n    result_list.sort()\n    \n    # Return the sorted list\n    return result_list\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Returns a sorted list of unique common elements from two input lists.\n\n    Args:\n    l1 (list): The first list of elements.\n    l2 (list): The second list of elements.\n\n    Returns:\n    list: A sorted list of common elements.\n    '''\n    # Convert lists to sets to remove duplicates\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection back to a sorted list\n    sorted_list = sorted(list(intersection))\n    \n    return sorted_list\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Returns a sorted list of unique common elements from two input lists.\n\n    Args:\n    l1 (list): The first list of elements.\n    l2 (list): The second list of elements.\n\n    Returns:\n    list: A sorted list of unique common elements.\n    '''\n    # Convert both lists to sets to find common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the set of common elements to a list\n    common_list = list(common_elements)\n    \n    # Sort the list of common elements\n    common_list.sort()\n    \n    # Return the sorted list of common elements\n    return common_list\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Return sorted unique common elements for two lists. Ensure that your solution efficiently handles large lists to achieve optimal performance.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [3, 2]\n    '''\n    # Convert lists to sets to find common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the result back to a sorted list\n    result = sorted(list(intersection))\n    \n    return result\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Return sorted unique common elements for two lists.'''\n    # Convert both lists to sets to remove duplicates\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of these sets to get the common elements\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection to a sorted list\n    result = sorted(list(intersection))\n    \n    return result\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Return sorted unique common elements for two lists.'''\n    # Convert both input lists to sets to remove duplicates\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of these sets to get the common elements\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection to a sorted list\n    sorted_common_elements = sorted(list(intersection))\n    \n    # Return the sorted list\n    return sorted_common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Return sorted unique common elements for two lists. Ensure that your solution efficiently handles large lists to achieve optimal performance.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [3, 2]\n    '''\n    # Convert both lists to sets to remove duplicates\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection result to a sorted list\n    result = sorted(list(intersection))\n    \n    return result\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Returns a sorted list of unique common elements from two input lists.\n\n    Args:\n    l1 (list): The first list of elements.\n    l2 (list): The second list of elements.\n\n    Returns:\n    list: A sorted list of unique common elements.\n    '''\n    set1 = set(l1)\n    set2 = set(l2)\n    common_elements = set1.intersection(set2)\n    sorted_common_elements = sorted(list(common_elements))\n    return sorted_common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted unique common elements for two lists.\n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n    Returns:\n        list: A sorted list of unique common elements.\n    Examples:\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n        [3, 2]\n    '''\n    # Convert both lists to sets to remove duplicates\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of these sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the result back to a list\n    common_list = list(common_elements)\n    \n    # Sort the list to meet the sorted requirement\n    common_list.sort()\n    \n    # Return the sorted list of unique common elements\n    return common_list\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    Finds the unique common elements between two lists.\n\n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n\n    Returns:\n        list: A sorted list of unique common elements.\n    \"\"\"\n    # Convert lists to sets to remove duplicates\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    common_elements = set1.intersection(set2)\n    \n    # Convert the result back to a sorted list\n    result = sorted(list(common_elements))\n    \n    return result\n"], "plans": ["requirement analysis:\nThe requirement is to find common elements between two lists, ensuring the results are sorted and unique. The solution should be efficient and handle large datasets effectively. The user stories and competitive analysis highlight the need for a balance between performance and usability.\nrequirement pool:\n- Implement a function to find common elements between two lists.\n- Ensure the results are sorted and unique.\n- Optimize the solution for performance, especially for large datasets.\n- Ensure the solution is easy to understand and maintain.\nTo efficiently find common elements between two lists while ensuring the results are sorted and unique, we will utilize Python's built-in data structures and set operations. The use of sets will allow us to handle uniqueness and intersection operations efficiently. We will then convert the result back to a list and sort it to meet the sorted requirement.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'unique common elements': means that the result should only include elements that appear in both lists, and each element should only be listed once.\n    'efficiently handles large lists': means that the solution should be optimized to handle large datasets without running into performance issues.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Convert both lists to sets to remove duplicates and facilitate intersection operations.\n    - Find the intersection of the two sets.\n    - Convert the intersection result back to a list.\n    - Sort the list to ensure the elements are in ascending order.\n    - Return the sorted list.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 1, 2, 2, 3, 3], [2, 2, 3, 3, 4, 4]) = [2, 3]\n    explanation: The common elements are 2 and 3, each appearing at least as many times as their value. The result should be sorted and unique.\n    common([], [1, 2, 3]) = []\n    explanation: One of the lists is empty, so there are no common elements, and the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will correctly return an empty list when one of the input lists is empty.\n", "requirement analysis:\nThe requirement is to find common elements between two lists, ensuring the solution is efficient and handles large lists well. The solution should be easy to integrate and use, providing a clear and optimized API. The function should also be flexible enough to handle various use cases without significant performance degradation.\nrequirement pool:\n- Implement a function that returns sorted unique common elements from two lists.\n- Ensure the function can handle large lists efficiently.\n- Provide a clear and easy-to-use API for integrating the function into other projects.\n- Ensure the function is flexible and can handle different types of input lists.\n- Consider optional parameters for sorting or filtering the results.\nTo efficiently find common elements between two lists and return them sorted and uniquely, we will leverage Python's built-in set operations due to their speed and ease of use. We will convert each list to a set to eliminate duplicates, then find the intersection of these sets. Finally, we will convert the result back to a list and sort it.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'unique common elements': means that the result should only include elements that appear in both lists, and each element should only be listed once.\n    'efficiently handles large lists': means that the solution should be optimized to handle large datasets without running into performance issues.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Convert each list to a set to remove duplicates.\n    - Find the intersection of these sets to get common elements.\n    - Convert the result back to a list and sort it.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 1, 2, 2, 3, 3], [2, 2, 3, 3, 4, 4]) = [2, 3]\n    explanation: The common elements are 2 and 3, each appearing at least as many times as themselves. The result should be sorted and unique.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic already ensures that the result is sorted and unique.\n", "requirement analysis:\nThe requirement is to create a function that returns sorted unique common elements from two lists. The function should be efficient and handle large lists optimally. This is crucial for scenarios where performance is a key factor, such as in data analysis or large-scale applications.\nrequirement pool:\n- The main code should efficiently find common elements between two lists.\n- Ensure the function returns unique common elements.\n- The function should handle large lists without significant performance degradation.\n- Implement sorting for the returned common elements.\n- Provide clear documentation and examples for easy integration.\nTo efficiently find common elements between two lists and ensure they are unique and sorted, we will utilize Python's built-in data structures and set operations. The use of sets will allow us to quickly identify common elements and remove duplicates. After finding the common elements, we will convert the result to a list and sort it. This approach leverages Python's performance characteristics for set operations and ensures that the solution is both efficient and scalable.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'unique common elements': means that the elements that appear in both lists and should not have duplicates.\n    'sorted': means that the final list of common elements should be in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Convert both lists to sets to find common elements.\n    - Convert the set of common elements to a list.\n    - Sort the list of common elements.\n    - Return the sorted list.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    Explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 1, 2, 2], [2, 2, 3, 3]) = [2]\n    Explanation: The common elements are 2 and 2, but since we need unique common elements, the output should be [2].\n    common([1, 2, 2, 3, 4], [2, 2, 4, 4, 5]) = [2, 4]\n    Explanation: The common elements are 2 and 2 (unique) and 4 and 4 (unique), so the output should be [2, 4].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan already ensures that the common elements are unique and sorted.\n", "requirement analysis:\nThe requirement is to find common elements between two lists, ensuring the solution is efficient and handles large lists well. The solution should be easy to use and provide accurate results. The function should be optimized for performance and scalability.\nrequirement pool:\n- The main code should efficiently find common elements between two lists.\n- The solution should handle large lists to achieve optimal performance.\n- Ensure the function is easy to use and provides clear documentation.\n- The function should be optimized for performance and scalability.\n- Provide a clear and concise API for users.\nTo efficiently find common elements between two lists, we will use Python's built-in data structures and set operations. Sets in Python provide an efficient way to find common elements between collections. We will convert both lists to sets and then find the intersection, which will automatically handle duplicates and sorting. This approach is both simple and efficient, leveraging Python's powerful standard library.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'unique common elements': means that the result should contain only the elements that appear in both lists, without duplicates, and sorted in ascending order.\n    'efficiently handles large lists': means that the solution should be optimized to handle large datasets without performance issues.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests converting both lists to sets and finding their intersection. This is a straightforward and efficient approach.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    Explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    Explanation: The number 2 appears in both lists, but since we need unique common elements, the result should only include one instance of 2.\n    common([1, 1, 2, 3], [1, 1, 4, 5]) = [1]\n    Explanation: The number 1 appears in both lists, but since we need unique common elements, the result should only include one instance of 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic already ensures that the result is unique and sorted.\n", "requirement analysis:\nThe requirement is to find common elements between two lists and ensure the solution is efficient and handles large lists well. The solution should be optimized for performance and usability.\nrequirement pool:\n- Implement a solution that efficiently finds common elements between two lists.\n- Ensure the solution can handle large datasets without significant performance degradation.\n- Provide a clear and Pythonic API for easy integration.\n- Ensure the results are sorted and unique.\n- Test and optimize the solution for different types of input data.\nTo efficiently find common elements between two lists while ensuring the solution can handle large datasets, we will utilize Python's built-in set operations, which are optimized for such tasks. We will convert the lists to sets to eliminate duplicates and then find the intersection. Finally, we will convert the result back to a list and sort it to ensure the elements are in order.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'unique common elements': means that the result should only include elements that appear in both lists, and each element should only be listed once.\n    'efficiently handles large lists': means that the solution should be optimized to handle large datasets without running into performance issues.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Convert both lists to sets to remove duplicates.\n    - Find the intersection of these sets to get the common elements.\n    - Convert the result back to a list.\n    - Sort the list to ensure the elements are in order.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 2, 2, 3, 4], [2, 2, 4, 5]) = [2, 4]\n    explanation: The common elements are 2 and 4, which appear in both lists. The result should be sorted and contain unique elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic already ensures that the result is sorted and contains unique elements.\n", "requirement analysis:\nThe requirement is to find common elements between two lists, ensuring the output is sorted and unique. The solution should be efficient and handle large datasets effectively.\nrequirement pool:\n- Implement a function to find common elements between two lists.\n- Ensure the output contains only unique elements.\n- Ensure the output is sorted in ascending order.\n- Optimize the function to handle large datasets efficiently.\n- Provide a clear and concise API documentation.\nTo implement the function efficiently, we will use Python's built-in data structures and set operations. The function will convert both input lists to sets to eliminate duplicates and then find the intersection of these sets. The result will be converted back to a list, sorted, and returned.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'unique common elements': means that the elements that appear in both lists and should not be repeated in the result.\n    'efficiently handles large lists': means the solution should perform well even with large datasets.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Convert both input lists to sets to remove duplicates.\n    (2) Find the intersection of these sets to get the common elements.\n    (3) Convert the result back to a list.\n    (4) Sort the list of common elements.\n    (5) Return the sorted list.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 2, 2, 3, 4], [2, 2, 4, 6, 7]) = [2, 4]\n    explanation: The common elements are 2 and 4, and since we need unique elements, the result is [2, 4].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will return an empty list if there are no common elements.\n", "requirement analysis:\nThe requirement is to find common elements between two lists, ensuring the solution is efficient and handles large lists well. The solution should be accurate and unique in identifying common elements.\nrequirement pool:\n- Implement a method to find common elements between two lists.\n- Ensure the solution is efficient and can handle large lists.\n- Ensure the solution provides unique common elements.\n- Optimize the performance of the solution for large datasets.\n- Test and validate the accuracy of the common elements found.\nTo efficiently find common elements between two lists while ensuring uniqueness and handling large datasets, we will utilize Python's built-in data structures and set operations. Sets in Python provide an efficient way to find common elements and automatically handle duplicates, which aligns with our requirement to ensure unique common elements. We will also leverage the intersection operation of sets, which is optimized for performance.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'unique common elements': means that the result should only include elements that appear in both lists, and each element should only be listed once.\n    'efficiently handles large lists': means that the solution should be optimized to handle large datasets without significant performance degradation.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Convert both lists to sets to remove duplicates.\n    - Use the intersection operation to find common elements.\n    - Convert the result back to a list and sort it.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    Explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    Explanation: The number 2 is the only common element, and it appears twice in both lists, so it should be listed once in the result.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The intersection operation in sets will naturally handle cases where there are no common elements by returning an empty set, which we can convert to a list.\n", "requirement analysis:\nThe requirement is to return sorted unique common elements from two lists. The solution should be efficient and handle large lists optimally. This involves using set operations to find common elements and then sorting and removing duplicates.\nrequirement pool:\n- Implement a function that returns sorted unique common elements from two lists.\n- Ensure the function can handle large lists efficiently.\n- Provide a clear and concise API for easy integration.\n- Test and optimize the function for performance and scalability.\nTo efficiently find sorted unique common elements from two lists, we will use Python's built-in set operations to identify common elements and then convert the result to a list. This approach leverages Python's performance and readability, making it suitable for handling large datasets.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'unique common elements': means that the final list should only contain elements that appear in both input lists, and each element should only be listed once.\n    'efficiently handles large lists': means that the solution should be optimized to handle large datasets without running into performance issues.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Convert both lists to sets to remove duplicates.\n    - Find the intersection of these sets to get common elements.\n    - Convert the resulting set back to a list.\n    - Sort the list of common elements.\n    - Return the sorted list.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    explanation: The number 2 is the only common element between the two lists, and it appears twice in both lists, so it should be listed once in the output.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided will correctly handle cases where there are no common elements.\n\n# [code logic continued]\n    Here's the detailed implementation of the code logic:\n    ```python\n    def common(l1, l2):\n        set1 = set(l1)\n        set2 = set(l2)\n        common_elements = set1.intersection(set2)\n        sorted_common_elements = sorted(list(common_elements))\n        return sorted_common_elements\n    ```\n", "requirement analysis:\nThe requirement is to find common elements between two lists, ensuring the solution is efficient and handles large lists well. The solution should return unique and sorted common elements. The user expects the API to be straightforward and the performance to be optimal.\nrequirement pool:\n- Implement a function that returns sorted unique common elements from two lists.\n- Ensure the solution is optimized for handling large datasets.\n- Provide a clear and concise API for easy integration.\n- Test the solution for edge cases and performance benchmarks.\n- Document the solution for user guidance.\nTo efficiently find common elements between two lists and ensure the solution is optimized for handling large datasets, we will use Python's built-in set operations. This approach leverages the efficiency of set operations and ensures that the solution is scalable and handles large lists well. We will also ensure that the results are unique and sorted to meet the user's requirements.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'unique common elements': means that the result should only include elements that appear in both lists, and each element should only be listed once.\n    'sorted': means that the result should be in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Convert both lists to sets to remove duplicates.\n    - Find the intersection of these sets to get common elements.\n    - Convert the result back to a list.\n    - Sort the list to meet the sorted requirement.\n    - Return the sorted list of unique common elements.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 2, 2, 3, 4], [2, 2, 4, 6]) = [2, 4]\n    explanation: The common elements are 2 and 4, and they should appear only once in the result.\n    common([], [1, 2, 3]) = []\n    explanation: One of the lists is empty, so the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios, including empty lists.\n", "requirement analysis:\nThe requirement is to find common elements between two lists, ensuring the solution is efficient and handles large datasets well. The output should be sorted and contain only unique elements.\nrequirement pool:\n- Implement an efficient algorithm to find common elements between two lists.\n- Ensure the solution can handle large lists without significant performance degradation.\n- Output the common elements in sorted order.\n- Ensure all common elements are unique.\n- Provide clear and concise documentation for easy understanding and maintenance.\nTo efficiently find common elements between two lists and ensure the solution handles large datasets well, we will use Python's built-in data structures and set operations. We will convert each list to a set to eliminate duplicates and then use set intersection to find common elements. Finally, we will convert the result back to a list and sort it.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'unique common elements': means that the elements that appear in both lists and should not be repeated in the result.\n    'efficiently handles large lists': means the solution should be optimized to handle large datasets without performance degradation.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Convert each list to a set to remove duplicates.\n    - Use set intersection to find common elements.\n    - Convert the result back to a list and sort it.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([], [1, 2, 3]) = []\n    explanation: An empty list has no elements to compare, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    explanation: The number 2 appears in both lists, but since we need unique common elements, the result should only include one instance of 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic already ensures that empty lists or lists with no common elements will return an empty list.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], "completion": "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    Finds the unique common elements between two lists.\n\n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n\n    Returns:\n        list: A sorted list of unique common elements.\n    \"\"\"\n    # Convert lists to sets to remove duplicates\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    common_elements = set1.intersection(set2)\n    \n    # Convert the result back to a sorted list\n    result = sorted(list(common_elements))\n    \n    return result\n", "passed": true, "pass": true, "pass_num": 10, "round": 669, "repair_prompt": ["def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for two lists. Ensure that your solution efficiently handles large lists to achieve optimal performance.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", " def common(l1: list, l2: list):\n    '''Return sorted unique common elements for two lists. Ensure that your solution efficiently handles large lists to achieve optimal performance.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n   ", " def common(l1: list, l2: list):\n    '''Return sorted unique common elements for two lists. Ensure that your solution efficiently handles large lists to achieve optimal performance.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n   "], "mutate_method": "add_1_sentence_at_end", "parent_index": 153}
