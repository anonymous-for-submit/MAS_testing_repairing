{"task_id": "HumanEval/161", "prompt": "def solve(s):\t\n'''You are given a string s.  \n    if s[i] is a letter, change its case from lower to upper or upper to lower, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\nExamples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    '''", "entry_point": "solve", "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "test": ["def check(solve):\n\tassert solve(\"#ryv@$l*\") == '#RYV@$L*'", "def check(solve):\n\tassert solve(\"BjdhsNs\") == 'bJDHSnS'", "def check(solve):\n\tassert solve(\"$883%3/\") == '/3%388$'", "def check(solve):\n\tassert solve(\"QnNQfv\") == 'qNnqFV'", "def check(solve):\n\tassert solve(\"o3LWaIl4\") == 'O3lwAiL4'", "def check(solve):\n\tassert solve(\"zt*#m&v\") == 'ZT*#M&V'", "def check(solve):\n\tassert solve(\"wDgT\") == 'WdGt'", "def check(solve):\n\tassert solve(\"ab\") == \"AB\"", "def check(solve):\n\tassert solve(\"=E!NyLi\") == '=e!nYlI'", "def check(solve):\n\tassert solve(\"jZVuQ\") == 'JzvUq'", "def check(solve):\n\tassert solve(\"UKg@xpM~G\") == 'ukG@XPm~g'", "def check(solve):\n\tassert solve(\"%cCcq#\") == '%CcCQ#'", "def check(solve):\n\tassert solve(\"++A^/?xV\") == '++a^/?Xv'", "def check(solve):\n\tassert solve(\"7_%\") == '%_7'", "def check(solve):\n\tassert solve(\"qon\") == 'QON'", "def check(solve):\n\tassert solve(\"giiqdy\") == 'GIIQDY'", "def check(solve):\n\tassert solve(\"~@8%\") == '%8@~'", "def check(solve):\n\tassert solve(\"^@B\") == '^@b'", "def check(solve):\n\tassert solve(\"?UGciW\") == '?ugCIw'", "def check(solve):\n\tassert solve(\"17000556\") == '65500071'", "def check(solve):\n\tassert solve(\"nfl*&=+$@\") == 'NFL*&=+$@'", "def check(solve):\n\tassert solve(\"wSdcA\") == 'WsDCa'", "def check(solve):\n\tassert solve(\"luG9*?%\") == 'LUg9*?%'", "def check(solve):\n\tassert solve(\"5$0!@\") == '@!0$5'", "def check(solve):\n\tassert solve(\"sxFaMa\") == 'SXfAmA'", "def check(solve):\n\tassert solve(\"?ao\") == '?AO'", "def check(solve):\n\tassert solve(\"k&!_\") == 'K&!_'", "def check(solve):\n\tassert solve(\"-|MSfK\") == '-|msFk'", "def check(solve):\n\tassert solve(\"5%@\") == '@%5'", "def check(solve):\n\tassert solve(\"=epet*orq\") == '=EPET*ORQ'", "def check(solve):\n\tassert solve(\"^dHUM-y\") == '^Dhum-Y'", "def check(solve):\n\tassert solve(\"npKwSAD\") == 'NPkWsad'", "def check(solve):\n\tassert solve(\"55=9/9\") == '9/9=55'", "def check(solve):\n\tassert solve(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:", "def check(solve):\n\tassert solve(\"*^JOyeSI\") == '*^joYEsi'", "def check(solve):\n\tassert solve(\"yzzdc\") == 'YZZDC'", "def check(solve):\n\tassert solve(\"i!X&/T\") == 'I!x&/t'", "def check(solve):\n\tassert solve(\"mlB-*F\") == 'MLb-*f'", "def check(solve):\n\tassert solve(\"856\") == '658'", "def check(solve):\n\tassert solve(\"ifafP-OoTK%\") == 'IFAFp-oOtk%'", "def check(solve):\n\tassert solve(\"Xug\") == 'xUG'", "def check(solve):\n\tassert solve(\"~2~@0\") == '0@~2~'", "def check(solve):\n\tassert solve(\"UMm:m\") == 'umM:M'", "def check(solve):\n\tassert solve(\"6812832\") == '2382186'", "def check(solve):\n\tassert solve(\"QDF:CXB\") == 'qdf:cxb'", "def check(solve):\n\tassert solve(\"5-=@&*\") == '*&@=-5'", "def check(solve):\n\tassert solve(\"761~^_%~4\") == '4~%_^~167'", "def check(solve):\n\tassert solve(\"#$a^D\") == \"#$A^d\"", "def check(solve):\n\tassert solve(\"4hzTAP_e\") == '4HZtap_E'", "def check(solve):\n\tassert solve(\"2058786\") == '6878502'", "def check(solve):\n\tassert solve(\"yErHfPuhE\") == 'YeRhFpUHe'", "def check(solve):\n\tassert solve(\"*u~\") == '*U~'", "def check(solve):\n\tassert solve(\"g*chm\") == 'G*CHM'", "def check(solve):\n\tassert solve(\"enxhq\") == 'ENXHQ'", "def check(solve):\n\tassert solve(\"ctpx\") == 'CTPX'", "def check(solve):\n\tassert solve(\"j$&Wd\") == 'J$&wD'", "def check(solve):\n\tassert solve(\"ji$rpiwCJ\") == 'JI$RPIWcj'", "def check(solve):\n\tassert solve(\"cjG~zXx\") == 'CJg~ZxX'", "def check(solve):\n\tassert solve(\"dgksb\") == 'DGKSB'", "def check(solve):\n\tassert solve(\"827_~+=6:\") == ':6=+~_728'", "def check(solve):\n\tassert solve(\"vr_d$kBQ\") == 'VR_D$Kbq'", "def check(solve):\n\tassert solve(\"389627754\") == '457726983'", "def check(solve):\n\tassert solve(\"+:#\") == '#:+'", "def check(solve):\n\tassert solve(\"prytYOIw\") == 'PRYTyoiW'", "def check(solve):\n\tassert solve(\"+1/05*!?+\") == '+?!*50/1+'", "def check(solve):\n\tassert solve(\"$u%lZTsz\") == '$U%LztSZ'", "def check(solve):\n\tassert solve(\"qyAKc\") == 'QYakC'", "def check(solve):\n\tassert solve(\"/@-\") == '-@/'", "def check(solve):\n\tassert solve(\"iiyw\") == 'IIYW'", "def check(solve):\n\tassert solve(\"#a@C\") == \"#A@c\"", "def check(solve):\n\tassert solve(\"49623838\") == '83832694'", "def check(solve):\n\tassert solve(\"u:kx!*\") == 'U:KX!*'", "def check(solve):\n\tassert solve(\"gsl\") == 'GSL'", "def check(solve):\n\tassert solve(\"jlycko\") == 'JLYCKO'", "def check(solve):\n\tassert solve(\"MUSKIE\") == 'muskie'", "def check(solve):\n\tassert solve(\":TDr\") == ':tdR'", "def check(solve):\n\tassert solve(\"bkd\") == 'BKD'", "def check(solve):\n\tassert solve(\"DNOZ2XKDMJZSwC$\") == 'dnoz2xkdmjzsWc$'", "def check(solve):\n\tassert solve(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.", "def check(solve):\n\tassert solve(\"n$tkw\") == 'N$TKW'", "def check(solve):\n\tassert solve(\"48954\") == '45984'", "def check(solve):\n\tassert solve(\"LlWj5FD\") == 'lLwJ5fd'", "def check(solve):\n\tassert solve(\"AsDf\") == \"aSdF\"", "def check(solve):\n\tassert solve(\"@!93/5**@\") == '@**5/39!@'", "def check(solve):\n\tassert solve(\"VmVDPkI\") == 'vMvdpKi'", "def check(solve):\n\tassert solve(\"mOn\") == 'MoN'", "def check(solve):\n\tassert solve(\"059646105\") == '501646950'", "def check(solve):\n\tassert solve(\"huo^\") == 'HUO^'", "def check(solve):\n\tassert solve(\"ghgnw\") == 'GHGNW'", "def check(solve):\n\tassert solve(\"gne\") == 'GNE'", "def check(solve):\n\tassert solve(\"~~%==41\") == '14==%~~'", "def check(solve):\n\tassert solve(\"%_uoz/#?L\") == '%_UOZ/#?l'", "def check(solve):\n\tassert solve(\"w@l+zd\") == 'W@L+ZD'", "def check(solve):\n\tassert solve(\"1234\") == \"4321\"", "def check(solve):\n\tassert solve(\"EsvNrg\") == 'eSVnRG'", "def check(solve):\n\tassert solve(\"pstVx\") == 'PSTvX'", "def check(solve):\n\tassert solve(\"kLA#y:NC\") == 'Kla#Y:nc'", "def check(solve):\n\tassert solve(\"ePOjFeuu\") == 'EpoJfEUU'", "def check(solve):\n\tassert solve(\"GPJae+?*a\") == 'gpjAE+?*A'", "def check(solve):\n\tassert solve(\"Uc$$xCSQ0cN~\") == 'uC$$Xcsq0Cn~'", "def check(solve):\n\tassert solve(\"gtvtsr\") == 'GTVTSR'", "def check(solve):\n\tassert solve(\"#AsdfW^45\") == \"#aSDFw^45\"", "def check(solve):\n\tassert solve(\"6971168\") == '8611796'", "def check(solve):\n\tassert solve(\"??rwE\") == '??RWe'", "def check(solve):\n\tassert solve(\"HMYxK\") == 'hmyXk'", "def check(solve):\n\tassert solve(\"gcflna\") == 'GCFLNA'", "def check(solve):\n\tassert solve(\"~+/#\") == '#/+~'", "def check(solve):\n\tassert solve(\"glgh\") == 'GLGH'", "def check(solve):\n\tassert solve(\"?gn~\") == '?GN~'", "def check(solve):\n\tassert solve(\"73713138\") == '83131737'", "def check(solve):\n\tassert solve(\"54138\") == '83145'", "def check(solve):\n\tassert solve(\"oGzZO!NOb@Lty\") == 'OgZzo!noB@lTY'", "def check(solve):\n\tassert solve(\"Q&LKD*BmV\") == 'q&lkd*bMv'", "def check(solve):\n\tassert solve(\"13431299\") == '99213431'", "def check(solve):\n\tassert solve(\"~/uc/@p^h\") == '~/UC/@P^H'", "def check(solve):\n\tassert solve(\"4kqV&&/6+Lc\") == '4KQv&&/6+lC'", "def check(solve):\n\tassert solve(\"fqY\") == 'FQy'", "def check(solve):\n\tassert solve(\"|n*e~bx-\") == '|N*E~BX-'", "def check(solve):\n\tassert solve(\"Pj+3w:31N!s6\") == 'pJ+3W:31n!S6'", "def check(solve):\n\tassert solve(\"++skzZ\") == '++SKZz'", "def check(solve):\n\tassert solve(\"%kmlC*s\") == '%KMLc*S'", "def check(solve):\n\tassert solve(\"232948\") == '849232'", "def check(solve):\n\tassert solve(\"613\") == '316'", "def check(solve):\n\tassert solve(\"!tmFhu\") == '!TMfHU'", "def check(solve):\n\tassert solve(\"+fDs:f\") == '+FdS:F'", "def check(solve):\n\tassert solve(\"XAdrNtUNr\") == 'xaDRnTunR'", "def check(solve):\n\tassert solve(\"cqiau\") == 'CQIAU'", "def check(solve):\n\tassert solve(\"340988\") == '889043'"], "test_case_list": ["assert solve(\"#ryv@$l*\") == '#RYV@$L*'", "assert solve(\"BjdhsNs\") == 'bJDHSnS'", "assert solve(\"$883%3/\") == '/3%388$'", "assert solve(\"QnNQfv\") == 'qNnqFV'", "assert solve(\"o3LWaIl4\") == 'O3lwAiL4'", "assert solve(\"zt*#m&v\") == 'ZT*#M&V'", "assert solve(\"wDgT\") == 'WdGt'", "assert solve(\"ab\") == \"AB\"", "assert solve(\"=E!NyLi\") == '=e!nYlI'", "assert solve(\"jZVuQ\") == 'JzvUq'", "assert solve(\"UKg@xpM~G\") == 'ukG@XPm~g'", "assert solve(\"%cCcq#\") == '%CcCQ#'", "assert solve(\"++A^/?xV\") == '++a^/?Xv'", "assert solve(\"7_%\") == '%_7'", "assert solve(\"qon\") == 'QON'", "assert solve(\"giiqdy\") == 'GIIQDY'", "assert solve(\"~@8%\") == '%8@~'", "assert solve(\"^@B\") == '^@b'", "assert solve(\"?UGciW\") == '?ugCIw'", "assert solve(\"17000556\") == '65500071'", "assert solve(\"nfl*&=+$@\") == 'NFL*&=+$@'", "assert solve(\"wSdcA\") == 'WsDCa'", "assert solve(\"luG9*?%\") == 'LUg9*?%'", "assert solve(\"5$0!@\") == '@!0$5'", "assert solve(\"sxFaMa\") == 'SXfAmA'", "assert solve(\"?ao\") == '?AO'", "assert solve(\"k&!_\") == 'K&!_'", "assert solve(\"-|MSfK\") == '-|msFk'", "assert solve(\"5%@\") == '@%5'", "assert solve(\"=epet*orq\") == '=EPET*ORQ'", "assert solve(\"^dHUM-y\") == '^Dhum-Y'", "assert solve(\"npKwSAD\") == 'NPkWsad'", "assert solve(\"55=9/9\") == '9/9=55'", "assert solve(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:", "assert solve(\"*^JOyeSI\") == '*^joYEsi'", "assert solve(\"yzzdc\") == 'YZZDC'", "assert solve(\"i!X&/T\") == 'I!x&/t'", "assert solve(\"mlB-*F\") == 'MLb-*f'", "assert solve(\"856\") == '658'", "assert solve(\"ifafP-OoTK%\") == 'IFAFp-oOtk%'", "assert solve(\"Xug\") == 'xUG'", "assert solve(\"~2~@0\") == '0@~2~'", "assert solve(\"UMm:m\") == 'umM:M'", "assert solve(\"6812832\") == '2382186'", "assert solve(\"QDF:CXB\") == 'qdf:cxb'", "assert solve(\"5-=@&*\") == '*&@=-5'", "assert solve(\"761~^_%~4\") == '4~%_^~167'", "assert solve(\"#$a^D\") == \"#$A^d\"", "assert solve(\"4hzTAP_e\") == '4HZtap_E'", "assert solve(\"2058786\") == '6878502'", "assert solve(\"yErHfPuhE\") == 'YeRhFpUHe'", "assert solve(\"*u~\") == '*U~'", "assert solve(\"g*chm\") == 'G*CHM'", "assert solve(\"enxhq\") == 'ENXHQ'", "assert solve(\"ctpx\") == 'CTPX'", "assert solve(\"j$&Wd\") == 'J$&wD'", "assert solve(\"ji$rpiwCJ\") == 'JI$RPIWcj'", "assert solve(\"cjG~zXx\") == 'CJg~ZxX'", "assert solve(\"dgksb\") == 'DGKSB'", "assert solve(\"827_~+=6:\") == ':6=+~_728'", "assert solve(\"vr_d$kBQ\") == 'VR_D$Kbq'", "assert solve(\"389627754\") == '457726983'", "assert solve(\"+:#\") == '#:+'", "assert solve(\"prytYOIw\") == 'PRYTyoiW'", "assert solve(\"+1/05*!?+\") == '+?!*50/1+'", "assert solve(\"$u%lZTsz\") == '$U%LztSZ'", "assert solve(\"qyAKc\") == 'QYakC'", "assert solve(\"/@-\") == '-@/'", "assert solve(\"iiyw\") == 'IIYW'", "assert solve(\"#a@C\") == \"#A@c\"", "assert solve(\"49623838\") == '83832694'", "assert solve(\"u:kx!*\") == 'U:KX!*'", "assert solve(\"gsl\") == 'GSL'", "assert solve(\"jlycko\") == 'JLYCKO'", "assert solve(\"MUSKIE\") == 'muskie'", "assert solve(\":TDr\") == ':tdR'", "assert solve(\"bkd\") == 'BKD'", "assert solve(\"DNOZ2XKDMJZSwC$\") == 'dnoz2xkdmjzsWc$'", "assert solve(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.", "assert solve(\"n$tkw\") == 'N$TKW'", "assert solve(\"48954\") == '45984'", "assert solve(\"LlWj5FD\") == 'lLwJ5fd'", "assert solve(\"AsDf\") == \"aSdF\"", "assert solve(\"@!93/5**@\") == '@**5/39!@'", "assert solve(\"VmVDPkI\") == 'vMvdpKi'", "assert solve(\"mOn\") == 'MoN'", "assert solve(\"059646105\") == '501646950'", "assert solve(\"huo^\") == 'HUO^'", "assert solve(\"ghgnw\") == 'GHGNW'", "assert solve(\"gne\") == 'GNE'", "assert solve(\"~~%==41\") == '14==%~~'", "assert solve(\"%_uoz/#?L\") == '%_UOZ/#?l'", "assert solve(\"w@l+zd\") == 'W@L+ZD'", "assert solve(\"1234\") == \"4321\"", "assert solve(\"EsvNrg\") == 'eSVnRG'", "assert solve(\"pstVx\") == 'PSTvX'", "assert solve(\"kLA#y:NC\") == 'Kla#Y:nc'", "assert solve(\"ePOjFeuu\") == 'EpoJfEUU'", "assert solve(\"GPJae+?*a\") == 'gpjAE+?*A'", "assert solve(\"Uc$$xCSQ0cN~\") == 'uC$$Xcsq0Cn~'", "assert solve(\"gtvtsr\") == 'GTVTSR'", "assert solve(\"#AsdfW^45\") == \"#aSDFw^45\"", "assert solve(\"6971168\") == '8611796'", "assert solve(\"??rwE\") == '??RWe'", "assert solve(\"HMYxK\") == 'hmyXk'", "assert solve(\"gcflna\") == 'GCFLNA'", "assert solve(\"~+/#\") == '#/+~'", "assert solve(\"glgh\") == 'GLGH'", "assert solve(\"?gn~\") == '?GN~'", "assert solve(\"73713138\") == '83131737'", "assert solve(\"54138\") == '83145'", "assert solve(\"oGzZO!NOb@Lty\") == 'OgZzo!noB@lTY'", "assert solve(\"Q&LKD*BmV\") == 'q&lkd*bMv'", "assert solve(\"13431299\") == '99213431'", "assert solve(\"~/uc/@p^h\") == '~/UC/@P^H'", "assert solve(\"4kqV&&/6+Lc\") == '4KQv&&/6+lC'", "assert solve(\"fqY\") == 'FQy'", "assert solve(\"|n*e~bx-\") == '|N*E~BX-'", "assert solve(\"Pj+3w:31N!s6\") == 'pJ+3W:31n!S6'", "assert solve(\"++skzZ\") == '++SKZz'", "assert solve(\"%kmlC*s\") == '%KMLc*S'", "assert solve(\"232948\") == '849232'", "assert solve(\"613\") == '316'", "assert solve(\"!tmFhu\") == '!TMfHU'", "assert solve(\"+fDs:f\") == '+FdS:F'", "assert solve(\"XAdrNtUNr\") == 'xaDRnTunR'", "assert solve(\"cqiau\") == 'CQIAU'", "assert solve(\"340988\") == '889043'"], "nl": "You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    ", "func": "def solve(s):", "examples": "Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    ", "completions": ["from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    # Check if the string contains any letters\n    contains_letters = any(char.isalpha() for char in s)\n    \n    if not contains_letters:\n        # If the string contains no letters, reverse the string\n        return s[::-1]\n    else:\n        # If the string contains letters, convert all letters to uppercase\n        return ''.join(char.upper() if char.isalpha() else char for char in s)\n\n# Example usage:\n# print(solve(\"1234\"))  # Output: \"4321\"\n# print(solve(\"ab\"))    # Output: \"AB\"\n# print(solve(\"#a@C\"))  # Output: \"#A@C\"\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    # Check if the string contains any letters\n    contains_letters = any(char.isalpha() for char in s)\n    \n    if contains_letters:\n        # Capitalize each letter in the string\n        return ''.join(char.upper() if char.isalpha() else char for char in s)\n    else:\n        # Reverse the string\n        return s[::-1]\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function checks if the input string contains any letters.\n    If it does not contain any letters, the function will reverse the string.\n    Otherwise, the function will return the string as is.\n    \n    Args:\n        s (str): The input string to be processed.\n    \n    Returns:\n        str: The processed string.\n    \"\"\"\n    # Check if the string contains any letters\n    contains_letters = any(char.isalpha() for char in s)\n    \n    # If the string contains letters, return the string as is\n    if contains_letters:\n        return s.upper()\n    # If the string does not contain any letters, reverse the string\n    else:\n        return s[::-1]\n\n# Example usage:\n# print(solve(\"1234\"))  # Output: \"4321\"\n# print(solve(\"ab\"))    # Output: \"AB\"\n# print(solve(\"#a@C\"))  # Output: \"#A@c\"\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    Manipulates the input string based on the presence of letters.\n    \n    Args:\n        s (str): The input string to be manipulated.\n    \n    Returns:\n        str: The manipulated string.\n    \"\"\"\n    if any(char.isalpha() for char in s):\n        # If the string contains letters, toggle the case of each letter.\n        result = []\n        for char in s:\n            if char.islower():\n                result.append(char.upper())\n            elif char.isupper():\n                result.append(char.lower())\n            else:\n                result.append(char)\n        return ''.join(result)\n    else:\n        # If the string contains no letters, reverse the string.\n        return s[::-1]\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    # Check if the string contains any letters\n    has_letters = any(char.isalpha() for char in s)\n    \n    # If there are letters, toggle their case\n    if has_letters:\n        result = []\n        for char in s:\n            if char.isupper():\n                result.append(char.lower())\n            elif char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char)\n        return ''.join(result)\n    \n    # If there are no letters, reverse the string\n    else:\n        return s[::-1]\n", "from typing import List\n## main.py\n\nimport string\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function takes a string as input and performs the following operations:\n    1. Checks if the string contains any letters.\n    2. If it does, toggles the case of each letter.\n    3. If the string contains no letters, reverses the string.\n    4. Returns the resulting string.\n    \"\"\"\n    if any(char in string.ascii_letters for char in s):\n        # Toggle the case of each letter\n        return ''.join(char.upper() if char.islower() else char.lower() if char.isupper() else char for char in s)\n    else:\n        # Reverse the string\n        return s[::-1]\n\n# Example usage:\n# print(solve(\"abc\"))  # Output: \"ABC\"\n# print(solve(\"123\"))  # Output: \"321\"\n# print(solve(\"#$%&\")) # Output: \"&%$#\"\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    # Check if the string contains any letters\n    contains_letters = any(char.isalpha() for char in s)\n    \n    if contains_letters:\n        # Capitalize each letter in the string\n        return ''.join(char.upper() if char.isalpha() else char for char in s)\n    else:\n        # Reverse the string\n        return s[::-1]\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    Manipulates the input string based on the presence of letters.\n    \n    Args:\n        s (str): The input string to be manipulated.\n    \n    Returns:\n        str: The manipulated string.\n    \"\"\"\n    if any(char.isalpha() for char in s):\n        # If the string contains letters, toggle the case of each letter.\n        result = []\n        for char in s:\n            if char.islower():\n                result.append(char.upper())\n            elif char.isupper():\n                result.append(char.lower())\n            else:\n                result.append(char)\n        return ''.join(result)\n    else:\n        # If the string contains no letters, reverse the string.\n        return s[::-1]\n", "from typing import List\n## main.py\n\nimport string\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function takes a string as input and performs the following operations:\n    1. Checks if the string contains any letters.\n    2. If it does, toggles the case of each letter.\n    3. If the string contains no letters, reverses the string.\n    4. Returns the resulting string.\n    \"\"\"\n    if any(char in string.ascii_letters for char in s):\n        # Toggle the case of each letter\n        return ''.join(char.upper() if char.islower() else char.lower() if char.isupper() else char for char in s)\n    else:\n        # Reverse the string\n        return s[::-1]\n\n# Example usage:\n# print(solve(\"abc\"))  # Output: \"ABC\"\n# print(solve(\"123\"))  # Output: \"321\"\n# print(solve(\"#$%&\")) # Output: \"&%$#\"\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    # Check if the string contains any letters\n    has_letters = any(char.isalpha() for char in s)\n    \n    # If there are letters, toggle their case\n    if has_letters:\n        result = []\n        for char in s:\n            if char.isupper():\n                result.append(char.lower())\n            elif char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char)\n        return ''.join(result)\n    \n    # If there are no letters, reverse the string\n    else:\n        return s[::-1]\n"], "plans": ["requirement analysis:\nThe original requirements specify a function that takes a string and returns a new string based on the content of the input string. If the string contains no letters, the function should reverse the string. This requirement is clear and straightforward, focusing on string manipulation and conditional logic.\nrequirement pool:\n- Implement the function to reverse the string if it contains no letters.\n- Ensure the function is tested with various inputs including strings with only numbers, letters, and special characters.\n- Optimize the function for performance, especially for long strings.\n- Design a simple and intuitive user interface for easy interaction.\n- Integrate accessibility features to support a wide range of users.\nWe will implement the function `solve` that takes a string `s` as input. The function will check if the string contains any letters. If it does not contain any letters, the function will reverse the string. Otherwise, the function will return the original string with all letters converted to uppercase. This approach ensures that the function meets the requirements and handles various input cases effectively.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'letters': means alphabetic characters\n    'no letters': means the string does not contain any alphabetic characters\n    'reverse': means to arrange the characters in the opposite order\n    'uppercase': means to convert characters to their upper case form\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Check if the string contains any letters.\n    (2) If the string contains no letters, reverse the string.\n    (3) If the string contains letters, convert all letters to uppercase.\n    (4) Return the resulted string.\n\n# [edge case] \n    solve(\"1234\") = \"4321\"\n    Explanation: The string \"1234\" contains no letters, so the function reverses the string.\n    solve(\"ab\") = \"AB\"\n    Explanation: The string \"ab\" contains letters, so the function converts all letters to uppercase, resulting in \"AB\".\n    solve(\"#a@C\") = \"#A@c\"\n    Explanation: The string \"#a@C\" contains letters, so the function converts all letters to uppercase, resulting in \"#A@c\".\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle all cases.\n", "requirement analysis:\nThe original requirements specify a function that takes a string as input and returns a modified version of the string based on whether it contains letters or not. If the string contains no letters, the function should reverse the string. This requirement is clear and straightforward, focusing on a specific string manipulation task.\nrequirement pool:\n- The main code should correctly implement the function to check for letters and reverse the string if necessary.\n- Ensure the function is efficient and handles edge cases, such as empty strings or strings with only non-letter characters.\n- Develop a user-friendly interface for easy interaction with the function.\nWe will implement the function `solve` by checking if the input string contains any letters. If it does, we will return the string with each letter capitalized. If it does not contain any letters, we will reverse the string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'letters': means alphabetic characters\n    'reverse': means to write the string in reverse order\n    'capitalize': means to convert each letter to uppercase\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Check if the string contains any letters.\n    (2) If it does, capitalize each letter and return the new string.\n    (3) If it does not contain any letters, reverse the string.\n    (4) Return the resulted string.\n\n# [edge case] \n    solve(\"1234\") = \"4321\"\n    Explanation: The string contains no letters, so we reverse it.\n    solve(\"ab\") = \"AB\"\n    Explanation: The string contains letters, so we capitalize them.\n    solve(\"#a@C\") = \"#A@c\"\n    Explanation: The string contains letters, so we capitalize them.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle all cases.\n", "requirement analysis:\nThe original requirements specify a function that takes a string and returns a new string based on the content of the input string. If the string contains no letters, the function should reverse the string. This requirement is clear and straightforward, focusing on string manipulation and conditional logic.\nrequirement pool:\n- Implement the function to reverse the string if it contains no letters.\n- Ensure the function is tested with various inputs including strings with only numbers, letters, and special characters.\n- Design the function to be efficient and handle edge cases such as very long strings.\n- Include comments in the code to explain the logic for better understanding and maintainability.\n- Integrate the function into a larger application if necessary.\nWe will implement the function `solve` that checks if the input string contains any letters. If it does not contain any letters, the function will reverse the string. Otherwise, the function will return the string as is.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'letters': means alphabetic characters\n    'reverse': means to write the string in the opposite order\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Check if the string contains any letters.\n    (2) If the string contains letters, return the string as is.\n    (3) If the string does not contain any letters, reverse the string.\n    (4) Return the resulted string.\n\n# [edge case] \n    solve(\"1234\") = \"4321\"\n    Explanation: The string \"1234\" contains no letters, so the function reverses it to \"4321\".\n    solve(\"ab\") = \"AB\"\n    Explanation: The string \"ab\" contains letters, so the function returns it as is in uppercase \"AB\".\n    solve(\"#a@C\") = \"#A@c\"\n    Explanation: The string \"#a@C\" contains letters, so the function returns it with the letters in uppercase \"AB\" and the rest in lowercase \"ab\".\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle all cases.\n", "requirement analysis:\nThe requirements specify a function that manipulates a string based on the content of the string. If the string contains letters, it should toggle their case. If there are no letters, it should reverse the string. This functionality is straightforward and focuses on string manipulation and conditional logic.\nrequirement pool:\n- Implement the function to toggle case of letters and reverse the string if no letters are present.\n- Ensure the function handles various edge cases, such as empty strings or strings with only non-letter characters.\n- Optimize the function for performance, especially for very long strings.\nWe will implement a function that takes a string as input and manipulates it based on the presence of letters. If the string contains letters, it will toggle the case of each letter. If the string contains no letters, it will reverse the string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case toggling': changing the case of a letter from lowercase to uppercase and vice versa.\n    'reversing a string': reversing the order of characters in a string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Check if the string contains any letters.\n    (2) If it does, iterate through the string and toggle the case of each letter.\n    (3) If it does not, reverse the string.\n    (4) Return the resulting string.\n\n# [edge case] \n    solve(\"abc\") = \"ABC\"\n    Explanation: The string contains letters, so their cases are toggled.\n    solve(\"123\") = \"321\"\n    Explanation: The string contains no letters, so it is reversed.\n    solve(\"#$%\") = \"#$%\"\n    Explanation: The string contains no letters, so it is reversed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios.\n", "requirement analysis:\nThe requirements specify a function that manipulates a string based on the content of the string. If the string contains letters, it should toggle their case. If there are no letters, it should reverse the string. This functionality is straightforward and focuses on string manipulation and conditional logic.\nrequirement pool:\n- Implement the function to toggle case of letters and reverse the string if no letters are present.\n- Ensure the function handles various edge cases, such as empty strings or strings with only non-letter characters.\n- Optimize the function for performance, especially for very long strings.\nWe will implement the function by checking each character in the string. If the character is a letter, we will toggle its case. If there are no letters, we will reverse the string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case toggling': changing the case of a letter from lowercase to uppercase and vice versa.\n    'reversing a string': reversing the order of characters in a string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Iterate through each character in the string.\n    Check if the character is a letter.\n        If yes, toggle its case.\n        If no, keep it as it is.\n    After iterating through the string, check if any letter was found.\n        If no letter was found, reverse the string.\n    Return the resulting string.\n\n# [edge case] \n    solve(\"abc\") = \"ABC\"\n    Explanation: The string contains letters, so their cases are toggled, resulting in \"ABC\".\n    solve(\"123\") = \"321\"\n    Explanation: The string contains no letters, so it is reversed, resulting in \"321\".\n    solve(\"#$%\") = \"#$%\"\n    Explanation: The string contains no letters, so it is reversed, but since there are no letters, the original string remains unchanged, resulting in \"#$%\".\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan already covers the case where there are no letters in the string.\n", "requirement analysis:\nThe task requires a function that manipulates a string based on the content of the string. If the string contains letters, it should toggle their case. If there are no letters, it should reverse the string. This requirement is clear and straightforward, focusing on string manipulation and conditional logic.\nrequirement pool:\n- Implement a function that can identify letters and toggle their case.\n- Implement a function that can check if the string contains any letters.\n- Ensure the function can reverse the string if no letters are present.\n- Test the function with various inputs to ensure it behaves as expected.\nTo implement the function, we will use Python's built-in capabilities to manipulate strings and check for letter characters. The function will first check if the string contains any letters. If it does, it will toggle the case of each letter. If the string contains no letters, it will reverse the string. This approach leverages Python's simplicity and readability.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case toggling': changing the case of a letter from lowercase to uppercase and vice versa.\n    'reversing a string': flipping the order of characters in a string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    The function will follow these steps:\n    1. Check if the string contains any letters.\n    2. If it does, iterate through each character in the string:\n        - If the character is a letter, toggle its case.\n        - If the character is not a letter, keep it unchanged.\n    3. If the string contains no letters, reverse the string.\n    4. Return the resulting string.\n\n# [edge case] \n    solve(\"abc\") = \"ABC\"\n    explanation: The string contains letters, so their cases are toggled, resulting in \"ABC\".\n    solve(\"123\") = \"321\"\n    explanation: The string contains no letters, so the string is reversed, resulting in \"321\".\n    solve(\"#$%&\") = \"&%$#\"\n    explanation: The string contains no letters, so the string is reversed, resulting in \"&%$#\".\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases, as the logic provided covers all scenarios.\n", "requirement analysis:\nThe original requirements specify a function that takes a string as input and returns a modified version of the string based on whether it contains letters or not. If the string contains no letters, the function should reverse the string. This requirement is clear and straightforward, focusing on a specific string manipulation task.\nrequirement pool:\n- The main code should correctly implement the function to check for letters and reverse the string if necessary.\n- Ensure the function is efficient and handles edge cases, such as empty strings or strings with only non-letter characters.\n- Develop a user-friendly interface for easy interaction with the function.\nWe will implement the function `solve` by checking if the input string contains any letters. If it does, we will return the string with each letter capitalized. If it does not contain any letters, we will reverse the string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'letters': means alphabetic characters\n    'reverse': means to write the string in reverse order\n    'capitalize': means to convert each letter to uppercase\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Check if the string contains any letters.\n    (2) If it does, capitalize each letter and return the new string.\n    (3) If it does not contain any letters, reverse the string.\n    (4) Return the resulted string.\n\n# [edge case] \n    solve(\"1234\") = \"4321\"\n    Explanation: The string contains no letters, so we reverse it.\n    solve(\"ab\") = \"AB\"\n    Explanation: The string contains letters, so we capitalize them.\n    solve(\"#a@C\") = \"#A@c\"\n    Explanation: The string contains letters, so we capitalize them.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle all cases.\n", "requirement analysis:\nThe requirements specify a function that manipulates a string based on the content of the string. If the string contains letters, it should toggle their case. If there are no letters, it should reverse the string. This functionality is straightforward and focuses on string manipulation and conditional logic.\nrequirement pool:\n- Implement the function to toggle case of letters and reverse the string if no letters are present.\n- Ensure the function handles various edge cases, such as empty strings or strings with only non-letter characters.\n- Optimize the function for performance, especially for very long strings.\nWe will implement a function that takes a string as input and manipulates it based on the presence of letters. If the string contains letters, it will toggle the case of each letter. If the string contains no letters, it will reverse the string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case toggling': changing the case of a letter from lowercase to uppercase and vice versa.\n    'reversing a string': reversing the order of characters in a string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Check if the string contains any letters.\n    (2) If it does, iterate through the string and toggle the case of each letter.\n    (3) If it does not, reverse the string.\n    (4) Return the resulting string.\n\n# [edge case] \n    solve(\"abc\") = \"ABC\"\n    Explanation: The string contains letters, so their cases are toggled.\n    solve(\"123\") = \"321\"\n    Explanation: The string contains no letters, so it is reversed.\n    solve(\"#$%\") = \"#$%\"\n    Explanation: The string contains no letters, so it is reversed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios.\n", "requirement analysis:\nThe task requires a function that manipulates a string based on the content of the string. If the string contains letters, it should toggle their case. If there are no letters, it should reverse the string. This requirement is clear and straightforward, focusing on string manipulation and conditional logic.\nrequirement pool:\n- Implement a function that can identify letters and toggle their case.\n- Implement a function that can check if the string contains any letters.\n- Ensure the function can reverse the string if no letters are present.\n- Test the function with various inputs to ensure it behaves as expected.\nTo implement the function, we will use Python's built-in capabilities to manipulate strings and check for letter characters. The function will first check if the string contains any letters. If it does, it will toggle the case of each letter. If the string contains no letters, it will reverse the string. This approach leverages Python's simplicity and readability.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case toggling': changing the case of a letter from lowercase to uppercase and vice versa.\n    'reversing a string': flipping the order of characters in a string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    The function will follow these steps:\n    1. Check if the string contains any letters.\n    2. If it does, iterate through each character in the string:\n        - If the character is a letter, toggle its case.\n        - If the character is not a letter, keep it unchanged.\n    3. If the string contains no letters, reverse the string.\n    4. Return the resulting string.\n\n# [edge case] \n    solve(\"abc\") = \"ABC\"\n    explanation: The string contains letters, so their cases are toggled, resulting in \"ABC\".\n    solve(\"123\") = \"321\"\n    explanation: The string contains no letters, so the string is reversed, resulting in \"321\".\n    solve(\"#$%&\") = \"&%$#\"\n    explanation: The string contains no letters, so the string is reversed, resulting in \"&%$#\".\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases, as the logic provided covers all scenarios.\n", "requirement analysis:\nThe requirements specify a function that manipulates a string based on the content of the string. If the string contains letters, it should toggle their case. If there are no letters, it should reverse the string. This functionality is straightforward and focuses on string manipulation and conditional logic.\nrequirement pool:\n- Implement the function to toggle case of letters and reverse the string if no letters are present.\n- Ensure the function handles various edge cases, such as empty strings or strings with only non-letter characters.\n- Optimize the function for performance, especially for very long strings.\nWe will implement the function by checking each character in the string. If the character is a letter, we will toggle its case. If there are no letters, we will reverse the string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case toggling': changing the case of a letter from lowercase to uppercase and vice versa.\n    'reversing a string': reversing the order of characters in a string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Iterate through each character in the string.\n    Check if the character is a letter.\n        If yes, toggle its case.\n        If no, keep it as it is.\n    After iterating through the string, check if any letter was found.\n        If no letter was found, reverse the string.\n    Return the resulting string.\n\n# [edge case] \n    solve(\"abc\") = \"ABC\"\n    Explanation: The string contains letters, so their cases are toggled, resulting in \"ABC\".\n    solve(\"123\") = \"321\"\n    Explanation: The string contains no letters, so it is reversed, resulting in \"321\".\n    solve(\"#$%\") = \"#$%\"\n    Explanation: The string contains no letters, so it is reversed, but since there are no letters, the original string remains unchanged, resulting in \"#$%\".\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan already covers the case where there are no letters in the string.\n"], "scores": [0.5156, 0.5156, 0.5156, 1.0, 1.0, 1.0, 0.5156, 1.0, 1.0, 1.0], "pass_results": [false, false, false, true, true, true, false, true, true, true], "pass_test_cases_num": [66, 66, 66, 128, 128, 128, 66, 128, 128, 128], "completion": "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    # Check if the string contains any letters\n    has_letters = any(char.isalpha() for char in s)\n    \n    # If there are letters, toggle their case\n    if has_letters:\n        result = []\n        for char in s:\n            if char.isupper():\n                result.append(char.lower())\n            elif char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char)\n        return ''.join(result)\n    \n    # If there are no letters, reverse the string\n    else:\n        return s[::-1]\n", "passed": true, "pass": true, "pass_num": 6, "round": 779, "repair_prompt": ["def solve(s):\t\n'''You are given a string s.  \n    if s[i] is a letter, change its case from lower to upper or upper to lower, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\nExamples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    '''", " def solve(s):\t\n    '''You are given a string s.  \n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n        solve(\"1234\") = \"4321\"\n        solve(\"ab\") = \"AB\"\n        solve(\"#a@C\") = \"#A@c\"\n    '''", " You are given a string s.\nif s[i] is a letter, change its case from lower to upper or upper to lower,\notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\""], "mutate_method": "rephrase_one", "parent_index": 375}
