{"task_id": "HumanEval/161", "prompt": "def solve(s):\t\n'''You are given a string s. if s[i] is a letter, reverse its case from lower to upper or vise versa, otherwise keep it as it is, and if the string contains no letters, reverse the string. The function should return the resulted string.\nExamples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    '''", "entry_point": "solve", "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "test": ["def check(solve):\n\tassert solve(\"#ryv@$l*\") == '#RYV@$L*'", "def check(solve):\n\tassert solve(\"BjdhsNs\") == 'bJDHSnS'", "def check(solve):\n\tassert solve(\"$883%3/\") == '/3%388$'", "def check(solve):\n\tassert solve(\"QnNQfv\") == 'qNnqFV'", "def check(solve):\n\tassert solve(\"o3LWaIl4\") == 'O3lwAiL4'", "def check(solve):\n\tassert solve(\"zt*#m&v\") == 'ZT*#M&V'", "def check(solve):\n\tassert solve(\"wDgT\") == 'WdGt'", "def check(solve):\n\tassert solve(\"ab\") == \"AB\"", "def check(solve):\n\tassert solve(\"=E!NyLi\") == '=e!nYlI'", "def check(solve):\n\tassert solve(\"jZVuQ\") == 'JzvUq'", "def check(solve):\n\tassert solve(\"UKg@xpM~G\") == 'ukG@XPm~g'", "def check(solve):\n\tassert solve(\"%cCcq#\") == '%CcCQ#'", "def check(solve):\n\tassert solve(\"++A^/?xV\") == '++a^/?Xv'", "def check(solve):\n\tassert solve(\"7_%\") == '%_7'", "def check(solve):\n\tassert solve(\"qon\") == 'QON'", "def check(solve):\n\tassert solve(\"giiqdy\") == 'GIIQDY'", "def check(solve):\n\tassert solve(\"~@8%\") == '%8@~'", "def check(solve):\n\tassert solve(\"^@B\") == '^@b'", "def check(solve):\n\tassert solve(\"?UGciW\") == '?ugCIw'", "def check(solve):\n\tassert solve(\"17000556\") == '65500071'", "def check(solve):\n\tassert solve(\"nfl*&=+$@\") == 'NFL*&=+$@'", "def check(solve):\n\tassert solve(\"wSdcA\") == 'WsDCa'", "def check(solve):\n\tassert solve(\"luG9*?%\") == 'LUg9*?%'", "def check(solve):\n\tassert solve(\"5$0!@\") == '@!0$5'", "def check(solve):\n\tassert solve(\"sxFaMa\") == 'SXfAmA'", "def check(solve):\n\tassert solve(\"?ao\") == '?AO'", "def check(solve):\n\tassert solve(\"k&!_\") == 'K&!_'", "def check(solve):\n\tassert solve(\"-|MSfK\") == '-|msFk'", "def check(solve):\n\tassert solve(\"5%@\") == '@%5'", "def check(solve):\n\tassert solve(\"=epet*orq\") == '=EPET*ORQ'", "def check(solve):\n\tassert solve(\"^dHUM-y\") == '^Dhum-Y'", "def check(solve):\n\tassert solve(\"npKwSAD\") == 'NPkWsad'", "def check(solve):\n\tassert solve(\"55=9/9\") == '9/9=55'", "def check(solve):\n\tassert solve(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:", "def check(solve):\n\tassert solve(\"*^JOyeSI\") == '*^joYEsi'", "def check(solve):\n\tassert solve(\"yzzdc\") == 'YZZDC'", "def check(solve):\n\tassert solve(\"i!X&/T\") == 'I!x&/t'", "def check(solve):\n\tassert solve(\"mlB-*F\") == 'MLb-*f'", "def check(solve):\n\tassert solve(\"856\") == '658'", "def check(solve):\n\tassert solve(\"ifafP-OoTK%\") == 'IFAFp-oOtk%'", "def check(solve):\n\tassert solve(\"Xug\") == 'xUG'", "def check(solve):\n\tassert solve(\"~2~@0\") == '0@~2~'", "def check(solve):\n\tassert solve(\"UMm:m\") == 'umM:M'", "def check(solve):\n\tassert solve(\"6812832\") == '2382186'", "def check(solve):\n\tassert solve(\"QDF:CXB\") == 'qdf:cxb'", "def check(solve):\n\tassert solve(\"5-=@&*\") == '*&@=-5'", "def check(solve):\n\tassert solve(\"761~^_%~4\") == '4~%_^~167'", "def check(solve):\n\tassert solve(\"#$a^D\") == \"#$A^d\"", "def check(solve):\n\tassert solve(\"4hzTAP_e\") == '4HZtap_E'", "def check(solve):\n\tassert solve(\"2058786\") == '6878502'", "def check(solve):\n\tassert solve(\"yErHfPuhE\") == 'YeRhFpUHe'", "def check(solve):\n\tassert solve(\"*u~\") == '*U~'", "def check(solve):\n\tassert solve(\"g*chm\") == 'G*CHM'", "def check(solve):\n\tassert solve(\"enxhq\") == 'ENXHQ'", "def check(solve):\n\tassert solve(\"ctpx\") == 'CTPX'", "def check(solve):\n\tassert solve(\"j$&Wd\") == 'J$&wD'", "def check(solve):\n\tassert solve(\"ji$rpiwCJ\") == 'JI$RPIWcj'", "def check(solve):\n\tassert solve(\"cjG~zXx\") == 'CJg~ZxX'", "def check(solve):\n\tassert solve(\"dgksb\") == 'DGKSB'", "def check(solve):\n\tassert solve(\"827_~+=6:\") == ':6=+~_728'", "def check(solve):\n\tassert solve(\"vr_d$kBQ\") == 'VR_D$Kbq'", "def check(solve):\n\tassert solve(\"389627754\") == '457726983'", "def check(solve):\n\tassert solve(\"+:#\") == '#:+'", "def check(solve):\n\tassert solve(\"prytYOIw\") == 'PRYTyoiW'", "def check(solve):\n\tassert solve(\"+1/05*!?+\") == '+?!*50/1+'", "def check(solve):\n\tassert solve(\"$u%lZTsz\") == '$U%LztSZ'", "def check(solve):\n\tassert solve(\"qyAKc\") == 'QYakC'", "def check(solve):\n\tassert solve(\"/@-\") == '-@/'", "def check(solve):\n\tassert solve(\"iiyw\") == 'IIYW'", "def check(solve):\n\tassert solve(\"#a@C\") == \"#A@c\"", "def check(solve):\n\tassert solve(\"49623838\") == '83832694'", "def check(solve):\n\tassert solve(\"u:kx!*\") == 'U:KX!*'", "def check(solve):\n\tassert solve(\"gsl\") == 'GSL'", "def check(solve):\n\tassert solve(\"jlycko\") == 'JLYCKO'", "def check(solve):\n\tassert solve(\"MUSKIE\") == 'muskie'", "def check(solve):\n\tassert solve(\":TDr\") == ':tdR'", "def check(solve):\n\tassert solve(\"bkd\") == 'BKD'", "def check(solve):\n\tassert solve(\"DNOZ2XKDMJZSwC$\") == 'dnoz2xkdmjzsWc$'", "def check(solve):\n\tassert solve(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.", "def check(solve):\n\tassert solve(\"n$tkw\") == 'N$TKW'", "def check(solve):\n\tassert solve(\"48954\") == '45984'", "def check(solve):\n\tassert solve(\"LlWj5FD\") == 'lLwJ5fd'", "def check(solve):\n\tassert solve(\"AsDf\") == \"aSdF\"", "def check(solve):\n\tassert solve(\"@!93/5**@\") == '@**5/39!@'", "def check(solve):\n\tassert solve(\"VmVDPkI\") == 'vMvdpKi'", "def check(solve):\n\tassert solve(\"mOn\") == 'MoN'", "def check(solve):\n\tassert solve(\"059646105\") == '501646950'", "def check(solve):\n\tassert solve(\"huo^\") == 'HUO^'", "def check(solve):\n\tassert solve(\"ghgnw\") == 'GHGNW'", "def check(solve):\n\tassert solve(\"gne\") == 'GNE'", "def check(solve):\n\tassert solve(\"~~%==41\") == '14==%~~'", "def check(solve):\n\tassert solve(\"%_uoz/#?L\") == '%_UOZ/#?l'", "def check(solve):\n\tassert solve(\"w@l+zd\") == 'W@L+ZD'", "def check(solve):\n\tassert solve(\"1234\") == \"4321\"", "def check(solve):\n\tassert solve(\"EsvNrg\") == 'eSVnRG'", "def check(solve):\n\tassert solve(\"pstVx\") == 'PSTvX'", "def check(solve):\n\tassert solve(\"kLA#y:NC\") == 'Kla#Y:nc'", "def check(solve):\n\tassert solve(\"ePOjFeuu\") == 'EpoJfEUU'", "def check(solve):\n\tassert solve(\"GPJae+?*a\") == 'gpjAE+?*A'", "def check(solve):\n\tassert solve(\"Uc$$xCSQ0cN~\") == 'uC$$Xcsq0Cn~'", "def check(solve):\n\tassert solve(\"gtvtsr\") == 'GTVTSR'", "def check(solve):\n\tassert solve(\"#AsdfW^45\") == \"#aSDFw^45\"", "def check(solve):\n\tassert solve(\"6971168\") == '8611796'", "def check(solve):\n\tassert solve(\"??rwE\") == '??RWe'", "def check(solve):\n\tassert solve(\"HMYxK\") == 'hmyXk'", "def check(solve):\n\tassert solve(\"gcflna\") == 'GCFLNA'", "def check(solve):\n\tassert solve(\"~+/#\") == '#/+~'", "def check(solve):\n\tassert solve(\"glgh\") == 'GLGH'", "def check(solve):\n\tassert solve(\"?gn~\") == '?GN~'", "def check(solve):\n\tassert solve(\"73713138\") == '83131737'", "def check(solve):\n\tassert solve(\"54138\") == '83145'", "def check(solve):\n\tassert solve(\"oGzZO!NOb@Lty\") == 'OgZzo!noB@lTY'", "def check(solve):\n\tassert solve(\"Q&LKD*BmV\") == 'q&lkd*bMv'", "def check(solve):\n\tassert solve(\"13431299\") == '99213431'", "def check(solve):\n\tassert solve(\"~/uc/@p^h\") == '~/UC/@P^H'", "def check(solve):\n\tassert solve(\"4kqV&&/6+Lc\") == '4KQv&&/6+lC'", "def check(solve):\n\tassert solve(\"fqY\") == 'FQy'", "def check(solve):\n\tassert solve(\"|n*e~bx-\") == '|N*E~BX-'", "def check(solve):\n\tassert solve(\"Pj+3w:31N!s6\") == 'pJ+3W:31n!S6'", "def check(solve):\n\tassert solve(\"++skzZ\") == '++SKZz'", "def check(solve):\n\tassert solve(\"%kmlC*s\") == '%KMLc*S'", "def check(solve):\n\tassert solve(\"232948\") == '849232'", "def check(solve):\n\tassert solve(\"613\") == '316'", "def check(solve):\n\tassert solve(\"!tmFhu\") == '!TMfHU'", "def check(solve):\n\tassert solve(\"+fDs:f\") == '+FdS:F'", "def check(solve):\n\tassert solve(\"XAdrNtUNr\") == 'xaDRnTunR'", "def check(solve):\n\tassert solve(\"cqiau\") == 'CQIAU'", "def check(solve):\n\tassert solve(\"340988\") == '889043'"], "test_case_list": ["assert solve(\"#ryv@$l*\") == '#RYV@$L*'", "assert solve(\"BjdhsNs\") == 'bJDHSnS'", "assert solve(\"$883%3/\") == '/3%388$'", "assert solve(\"QnNQfv\") == 'qNnqFV'", "assert solve(\"o3LWaIl4\") == 'O3lwAiL4'", "assert solve(\"zt*#m&v\") == 'ZT*#M&V'", "assert solve(\"wDgT\") == 'WdGt'", "assert solve(\"ab\") == \"AB\"", "assert solve(\"=E!NyLi\") == '=e!nYlI'", "assert solve(\"jZVuQ\") == 'JzvUq'", "assert solve(\"UKg@xpM~G\") == 'ukG@XPm~g'", "assert solve(\"%cCcq#\") == '%CcCQ#'", "assert solve(\"++A^/?xV\") == '++a^/?Xv'", "assert solve(\"7_%\") == '%_7'", "assert solve(\"qon\") == 'QON'", "assert solve(\"giiqdy\") == 'GIIQDY'", "assert solve(\"~@8%\") == '%8@~'", "assert solve(\"^@B\") == '^@b'", "assert solve(\"?UGciW\") == '?ugCIw'", "assert solve(\"17000556\") == '65500071'", "assert solve(\"nfl*&=+$@\") == 'NFL*&=+$@'", "assert solve(\"wSdcA\") == 'WsDCa'", "assert solve(\"luG9*?%\") == 'LUg9*?%'", "assert solve(\"5$0!@\") == '@!0$5'", "assert solve(\"sxFaMa\") == 'SXfAmA'", "assert solve(\"?ao\") == '?AO'", "assert solve(\"k&!_\") == 'K&!_'", "assert solve(\"-|MSfK\") == '-|msFk'", "assert solve(\"5%@\") == '@%5'", "assert solve(\"=epet*orq\") == '=EPET*ORQ'", "assert solve(\"^dHUM-y\") == '^Dhum-Y'", "assert solve(\"npKwSAD\") == 'NPkWsad'", "assert solve(\"55=9/9\") == '9/9=55'", "assert solve(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:", "assert solve(\"*^JOyeSI\") == '*^joYEsi'", "assert solve(\"yzzdc\") == 'YZZDC'", "assert solve(\"i!X&/T\") == 'I!x&/t'", "assert solve(\"mlB-*F\") == 'MLb-*f'", "assert solve(\"856\") == '658'", "assert solve(\"ifafP-OoTK%\") == 'IFAFp-oOtk%'", "assert solve(\"Xug\") == 'xUG'", "assert solve(\"~2~@0\") == '0@~2~'", "assert solve(\"UMm:m\") == 'umM:M'", "assert solve(\"6812832\") == '2382186'", "assert solve(\"QDF:CXB\") == 'qdf:cxb'", "assert solve(\"5-=@&*\") == '*&@=-5'", "assert solve(\"761~^_%~4\") == '4~%_^~167'", "assert solve(\"#$a^D\") == \"#$A^d\"", "assert solve(\"4hzTAP_e\") == '4HZtap_E'", "assert solve(\"2058786\") == '6878502'", "assert solve(\"yErHfPuhE\") == 'YeRhFpUHe'", "assert solve(\"*u~\") == '*U~'", "assert solve(\"g*chm\") == 'G*CHM'", "assert solve(\"enxhq\") == 'ENXHQ'", "assert solve(\"ctpx\") == 'CTPX'", "assert solve(\"j$&Wd\") == 'J$&wD'", "assert solve(\"ji$rpiwCJ\") == 'JI$RPIWcj'", "assert solve(\"cjG~zXx\") == 'CJg~ZxX'", "assert solve(\"dgksb\") == 'DGKSB'", "assert solve(\"827_~+=6:\") == ':6=+~_728'", "assert solve(\"vr_d$kBQ\") == 'VR_D$Kbq'", "assert solve(\"389627754\") == '457726983'", "assert solve(\"+:#\") == '#:+'", "assert solve(\"prytYOIw\") == 'PRYTyoiW'", "assert solve(\"+1/05*!?+\") == '+?!*50/1+'", "assert solve(\"$u%lZTsz\") == '$U%LztSZ'", "assert solve(\"qyAKc\") == 'QYakC'", "assert solve(\"/@-\") == '-@/'", "assert solve(\"iiyw\") == 'IIYW'", "assert solve(\"#a@C\") == \"#A@c\"", "assert solve(\"49623838\") == '83832694'", "assert solve(\"u:kx!*\") == 'U:KX!*'", "assert solve(\"gsl\") == 'GSL'", "assert solve(\"jlycko\") == 'JLYCKO'", "assert solve(\"MUSKIE\") == 'muskie'", "assert solve(\":TDr\") == ':tdR'", "assert solve(\"bkd\") == 'BKD'", "assert solve(\"DNOZ2XKDMJZSwC$\") == 'dnoz2xkdmjzsWc$'", "assert solve(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.", "assert solve(\"n$tkw\") == 'N$TKW'", "assert solve(\"48954\") == '45984'", "assert solve(\"LlWj5FD\") == 'lLwJ5fd'", "assert solve(\"AsDf\") == \"aSdF\"", "assert solve(\"@!93/5**@\") == '@**5/39!@'", "assert solve(\"VmVDPkI\") == 'vMvdpKi'", "assert solve(\"mOn\") == 'MoN'", "assert solve(\"059646105\") == '501646950'", "assert solve(\"huo^\") == 'HUO^'", "assert solve(\"ghgnw\") == 'GHGNW'", "assert solve(\"gne\") == 'GNE'", "assert solve(\"~~%==41\") == '14==%~~'", "assert solve(\"%_uoz/#?L\") == '%_UOZ/#?l'", "assert solve(\"w@l+zd\") == 'W@L+ZD'", "assert solve(\"1234\") == \"4321\"", "assert solve(\"EsvNrg\") == 'eSVnRG'", "assert solve(\"pstVx\") == 'PSTvX'", "assert solve(\"kLA#y:NC\") == 'Kla#Y:nc'", "assert solve(\"ePOjFeuu\") == 'EpoJfEUU'", "assert solve(\"GPJae+?*a\") == 'gpjAE+?*A'", "assert solve(\"Uc$$xCSQ0cN~\") == 'uC$$Xcsq0Cn~'", "assert solve(\"gtvtsr\") == 'GTVTSR'", "assert solve(\"#AsdfW^45\") == \"#aSDFw^45\"", "assert solve(\"6971168\") == '8611796'", "assert solve(\"??rwE\") == '??RWe'", "assert solve(\"HMYxK\") == 'hmyXk'", "assert solve(\"gcflna\") == 'GCFLNA'", "assert solve(\"~+/#\") == '#/+~'", "assert solve(\"glgh\") == 'GLGH'", "assert solve(\"?gn~\") == '?GN~'", "assert solve(\"73713138\") == '83131737'", "assert solve(\"54138\") == '83145'", "assert solve(\"oGzZO!NOb@Lty\") == 'OgZzo!noB@lTY'", "assert solve(\"Q&LKD*BmV\") == 'q&lkd*bMv'", "assert solve(\"13431299\") == '99213431'", "assert solve(\"~/uc/@p^h\") == '~/UC/@P^H'", "assert solve(\"4kqV&&/6+Lc\") == '4KQv&&/6+lC'", "assert solve(\"fqY\") == 'FQy'", "assert solve(\"|n*e~bx-\") == '|N*E~BX-'", "assert solve(\"Pj+3w:31N!s6\") == 'pJ+3W:31n!S6'", "assert solve(\"++skzZ\") == '++SKZz'", "assert solve(\"%kmlC*s\") == '%KMLc*S'", "assert solve(\"232948\") == '849232'", "assert solve(\"613\") == '316'", "assert solve(\"!tmFhu\") == '!TMfHU'", "assert solve(\"+fDs:f\") == '+FdS:F'", "assert solve(\"XAdrNtUNr\") == 'xaDRnTunR'", "assert solve(\"cqiau\") == 'CQIAU'", "assert solve(\"340988\") == '889043'"], "nl": "You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    ", "func": "def solve(s):", "examples": "Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    ", "completions": ["from typing import List\n## main.py\n\nimport re\n\ndef solve(s: str) -> str:\n    if any(char.isalpha() for char in s):\n        return ''.join(char.upper() if char.islower() else char.lower() for char in s)\n    else:\n        return ''.join(reversed(s))\n\n# Example usage:\n# print(solve(\"1234\"))  # Output: \"4321\"\n# print(solve(\"ab\"))    # Output: \"AB\"\n# print(solve(\"#a@C\"))  # Output: \"#A@c\"\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    # Check if the string contains any letters\n    contains_letters = any(char.isalpha() for char in s)\n    \n    if contains_letters:\n        # Initialize the result string\n        result = []\n        # Iterate through each character in the string\n        for char in s:\n            if char.islower():\n                # Reverse the case of lowercase letters\n                result.append(char.upper())\n            elif char.isupper():\n                # Reverse the case of uppercase letters\n                result.append(char.lower())\n            else:\n                # Leave non-letter characters unchanged\n                result.append(char)\n        # Join the characters to form the final string\n        return ''.join(result)\n    else:\n        # Reverse the entire string if it contains no letters\n        return s[::-1]\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    def is_letter(c: str) -> bool:\n        return c.isalpha()\n\n    def reverse_case(c: str) -> str:\n        return c.lower() if c.isupper() else c.upper()\n\n    if not any(is_letter(char) for char in s):\n        return s[::-1]\n\n    result = []\n    for char in s:\n        if is_letter(char):\n            result.append(reverse_case(char))\n        else:\n            result.append(char)\n\n    return ''.join(result)\n", "from typing import List\n## main.py\n\nimport string\n\ndef process_string(s: str) -> str:\n    \"\"\"\n    Process the input string based on the presence of letters.\n    \n    Args:\n        s (str): The input string to be processed.\n        \n    Returns:\n        str: The processed string with reversed case of letters or reversed entire string if no letters are present.\n    \"\"\"\n    has_letters = any(char in string.ascii_letters for char in s)\n    \n    if has_letters:\n        # Reverse the case of each letter in the string\n        processed_string = ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        # Reverse the entire string\n        processed_string = s[::-1]\n    \n    return processed_string\n", "from typing import List\n## main.py\n\nimport string\n\ndef process_string(s: str) -> str:\n    \"\"\"\n    Process the input string based on the presence of letters.\n    \n    Args:\n        s (str): The input string to be processed.\n        \n    Returns:\n        str: The processed string with case-reversed letters or reversed if no letters are present.\n    \"\"\"\n    # Check if the string contains any letters\n    contains_letters = any(char.isalpha() for char in s)\n    \n    if contains_letters:\n        # Iterate through each character and switch its case if it's a letter\n        result = []\n        for char in s:\n            if char.isalpha():\n                if char.islower():\n                    result.append(char.upper())\n                else:\n                    result.append(char.lower())\n            else:\n                result.append(char)\n        return ''.join(result)\n    else:\n        # Reverse the string if no letters are present\n        return s[::-1]\n", "from typing import List\n## main.py\n\ndef process_string(s: str) -> str:\n    \"\"\"\n    Process a string based on the nature of its characters.\n    \n    Args:\n        s (str): The input string to be processed.\n        \n    Returns:\n        str: The processed string based on the presence of letters.\n    \"\"\"\n    # Check if the string contains any letters\n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        # Reverse the case of letters in the string\n        result = []\n        for char in s:\n            if char.isalpha():\n                if char.islower():\n                    result.append(char.upper())\n                else:\n                    result.append(char.lower())\n            else:\n                result.append(char)\n        return ''.join(result)\n    else:\n        # Reverse the entire string\n        return s[::-1]\n\n# Example usage:\n# print(process_string(\"Hello123\"))  # Output: \"hELLO123\"\n# print(process_string(\"12345\"))    # Output: \"54321\"\n# print(process_string(\"Python3.8\")) # Output: \"PYTHON3.8\"\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function processes a string based on the presence of letters.\n    \n    Args:\n        s (str): The input string to be processed.\n    \n    Returns:\n        str: The processed string.\n    \"\"\"\n    # Check if the string contains any letters\n    contains_letters = any(char.isalpha() for char in s)\n    \n    if contains_letters:\n        # If the string contains letters, toggle the case of each letter\n        result = []\n        for char in s:\n            if char.islower():\n                result.append(char.upper())\n            elif char.isupper():\n                result.append(char.lower())\n            else:\n                result.append(char)\n        return ''.join(result)\n    else:\n        # If the string contains no letters, reverse the string\n        return s[::-1]\n\n# Example usage:\n# print(solve(\"ab\"))  # Output: \"AB\"\n# print(solve(\"1234\"))  # Output: \"4321\"\n# print(solve(\"#a@C\"))  # Output: \"#A@c\"\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        result = []\n        for char in s:\n            if char.isalpha():\n                if char.islower():\n                    result.append(char.upper())\n                else:\n                    result.append(char.lower())\n            else:\n                result.append(char)\n        return ''.join(result)\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function takes a string as input and returns a new string with the case of each letter reversed.\n    Non-letter characters remain unchanged. If the string contains no letters, the entire string is reversed.\n    \n    Args:\n        s (str): The input string.\n    \n    Returns:\n        str: A new string with the case of each letter reversed or the entire string reversed if no letters are present.\n    \"\"\"\n    # Check if the string contains any letters\n    contains_letters = any(char.isalpha() for char in s)\n    \n    if not contains_letters:\n        # If no letters are present, reverse the entire string\n        return s[::-1]\n    else:\n        # Reverse the case of each letter\n        result = []\n        for char in s:\n            if char.isalpha():\n                if char.islower():\n                    result.append(char.upper())\n                else:\n                    result.append(char.lower())\n            else:\n                result.append(char)\n        return ''.join(result)\n\n# Example usage:\n# print(solve(\"ab\"))  # Output: \"AB\"\n# print(solve(\"1234\"))  # Output: \"4321\"\n# print(solve(\"#a@C\"))  # Output: \"#A@c\"\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    # Check if the string contains any letters\n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        # Swap the case of each letter in the string\n        result = ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        # Reverse the string\n        result = s[::-1]\n    \n    return result\n"], "plans": ["requirement analysis:\nThe original requirements specify a function that processes a string based on the presence of letters. If letters are present, it should toggle their case; if no letters are present, it should reverse the string. This aligns with the goal of creating a versatile string manipulation tool.\nrequirement pool:\n- The main code should process the string based on the presence of letters.\n- The function should toggle the case of letters if present.\n- If no letters are present, the function should reverse the string.\n- Ensure the function handles edge cases such as empty strings or strings with only non-letter characters.\nWe will implement the function `solve` by first checking if the string contains any letters. If it does, we will iterate through each character, toggling its case if it's a letter. If no letters are found, we will simply reverse the string. This approach leverages Python's string manipulation capabilities and the built-in `reversed` function for simplicity.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case toggling': changing the case of a letter from lowercase to uppercase and vice versa.\n    'string reversal': flipping the order of characters in a string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    The function `solve` will follow these steps:\n    1. Check if the string contains any letters.\n    2. If letters are found, iterate through each character, toggling its case if it's a letter.\n    3. If no letters are found, use the `reversed` function to reverse the string.\n    4. Return the resulted string.\n\n# [edge case] \n    solve(\"1234\") = \"4321\"\n    Explanation: The string contains no letters, so the function reverses the string.\n    solve(\"ab\") = \"AB\"\n    Explanation: The string contains letters, so the function toggles their cases.\n    solve(\"#a@C\") = \"#A@c\"\n    Explanation: The string contains letters, so the function toggles their cases.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient for all cases.\n", "requirement analysis:\nThe original requirements specify a function that processes a string based on the presence of letters. If letters are present, it should reverse their case; if no letters are present, it should reverse the entire string. This aligns with the goal of creating an engaging user experience by offering interactive and dynamic content.\nrequirement pool:\n- The main code should process the string based on the presence of letters.\n- The function should handle the case where no letters are present by reversing the string.\n- Ensure the function is responsive and works well on various devices.\n- Design a beautiful UI that enhances the user experience.\nWe will implement the function `solve` by first checking if the string contains any letters. If it does, we will iterate through each character, reversing the case of letters while leaving non-letter characters unchanged. If the string contains no letters, we will reverse the entire string. This approach ensures that the function is both responsive and capable of handling various input scenarios effectively.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case reversal': means changing the case of a letter from lowercase to uppercase and vice versa.\n    'string manipulation': involves changing the characters in a string based on certain conditions.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Check if the string contains any letters.\n    - Iterate through each character in the string.\n    - Reverse the case of letters.\n    - If the string contains no letters, reverse the entire string.\n    - Return the resulted string.\n\n# [edge case] \n    solve(\"1234\") = \"4321\"\n    explanation: The string contains no letters, so the entire string is reversed.\n    solve(\"ab\") = \"AB\"\n    explanation: The string contains letters, so their cases are reversed.\n    solve(\"#a@C\") = \"#A@c\"\n    explanation: The string contains letters and special characters. Letters are reversed in case, while special characters remain unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic already covers the scenario where the string contains no letters by reversing the entire string.\n", "requirement analysis:\nThe original requirements specify a function that processes a string based on the presence of letters. If letters are present, it should reverse their case; if no letters are present, it should reverse the entire string. This aligns with the goal of creating an engaging user experience by offering dynamic interactions.\nrequirement pool:\n- The main code should process the string based on the presence of letters.\n- The function should handle the case where no letters are present by reversing the string.\n- Ensure the function is responsive and handles various input cases efficiently.\n- Design a beautiful UI that enhances the user experience.\nWe will implement the function `solve` by first checking if the input string contains any letters. If it does, we will iterate through each character, reversing the case of letters while leaving non-letter characters unchanged. If the string contains no letters, we will reverse the entire string. This approach ensures that the function is both efficient and easy to understand.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case reversal': This involves changing the case of a letter from lowercase to uppercase and vice versa.\n    'string manipulation': This includes checking for the presence of letters and performing operations on them.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function `solve` will follow these steps:\n    1. Check if the input string contains any letters.\n    2. If it does, iterate through each character:\n        - If the character is a letter, reverse its case.\n        - If the character is not a letter, leave it unchanged.\n    3. Return the resulting string.\n    4. If the string contains no letters, reverse the entire string.\n\n# [edge case] \n    solve(\"1234\") = \"4321\"\n    Explanation: The string contains no letters, so the entire string is reversed.\n    solve(\"ab\") = \"AB\"\n    Explanation: The string contains letters, so their cases are reversed.\n    solve(\"#a@C\") = \"#A@c\"\n    Explanation: The string contains letters and special characters. Letters are reversed in case, and special characters remain unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle all cases.\n", "requirement analysis:\nThe requirement is to create a function that processes a string based on the presence of letters. If a character is a letter, its case should be reversed. If there are no letters, the entire string should be reversed. This requirement is clear and straightforward, focusing on string manipulation and conditional logic.\nrequirement pool:\n- Implement the function to reverse the case of letters and reverse the string if no letters are present.\n- Ensure the function handles various types of input strings, including those with only non-letter characters.\n- Design the function to be efficient and maintainable, suitable for future extensions or modifications.\nTo implement the function, we will use Python's built-in string manipulation methods and conditional logic. The function will check for the presence of letters in the input string. If letters are present, it will reverse the case of each letter. If no letters are present, it will reverse the entire string. This approach ensures efficiency and clarity in handling the requirements.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'string manipulation': This includes reversing the case of letters and reversing the entire string if no letters are present.\n    Explanation: The core concept involves manipulating the characters in a string based on their type (letter or non-letter) and reversing their case or the entire string if necessary.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests iterating through the string to check for letters and then applying the necessary transformations. This can be done in a single pass through the string.\n\n# [edge case] \n    reverse_string(\"Hello123\") = \"hELLO123\"\n    Explanation: The string contains letters (H, e, l, l, o) which are reversed in case. The numbers (1, 2, 3) remain unchanged.\n    reverse_string(\"12345\") = \"54321\"\n    Explanation: The string contains no letters, so the entire string is reversed.\n    reverse_string(\"Python3.8\") = \"PYTHOn3.8\"\n    Explanation: The string contains a letter (P, y, t, h, O) which is reversed in case. The number (3, ., 8) remains unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic in the plan can handle strings with and without letters, including those with mixed characters.\n\n# [extra code for edge case]\n    No extra code needed for edge cases.\n", "requirement analysis:\nThe requirement involves a function that processes a string based on the nature of its characters. It needs to check each character to determine if it's a letter, and if so, it should switch its case. If there are no letters, the entire string should be reversed. This requirement is clear and specific, focusing on string manipulation and conditional logic.\nrequirement pool:\n- Implement the function to switch case of letters and reverse the string if no letters are present.\n- Ensure the function is efficient and handles edge cases such as empty strings or strings with only non-letter characters.\n- Design the UI to be user-friendly, with clear instructions and feedback mechanisms.\nWe will implement the function by first checking if the string contains any letters. If it does, we will iterate through each character, switching its case if it's a letter. If the string contains no letters, we will reverse the string. This approach ensures that the function meets the requirements efficiently and handles edge cases effectively.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case reversal': This involves changing the case of a character from lowercase to uppercase and vice versa.\n    'string manipulation': This includes operations like checking for the presence of letters, iterating through characters, and reversing the string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Check if the string contains any letters.\n    (2) If it does, iterate through each character:\n        - If the character is a letter, switch its case.\n        - If the character is not a letter, leave it unchanged.\n    (3) If the string contains no letters, reverse the string.\n    (4) Return the resulted string.\n\n# [edge case] \n    edge_case1 = \"a1B2\"\n    expected_output: \"A1b2\"\n    Explanation: The string contains letters 'a', 'B', and '2'. The cases of 'a' and 'B' are reversed, while '1' and '2' remain unchanged.\n\n    edge_case2 = \"!@#$%^&*()\"\n    expected_output: \"!@#$%^&*()\"\n    Explanation: The string contains no letters, so it is reversed to become the same string.\n\n    edge_case3 = \"Python3.8\"\n    expected_output: \"pYTHON3.8\"\n    Explanation: The string contains numbers and special characters, but also letters. The cases of the letters are reversed, while the rest remain unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic already covers all scenarios, including strings with no letters and strings with mixed characters.\n", "requirement analysis:\nThe requirement involves a function that processes a string based on the nature of its characters. It needs to check each character to determine if it's a letter, and if so, it should switch its case. If there are no letters, the entire string should be reversed. This requirement is clear and specific, focusing on string manipulation and conditional logic.\nrequirement pool:\n- The main code should process the string as described\n- Ensure the function handles both uppercase and lowercase letters correctly\n- Implement a check for the presence of letters in the string\n- Include functionality to reverse the string if no letters are found\n- Optimize the function for efficiency and readability\nWe will implement a function that processes a string based on the nature of its characters. The function will check each character to determine if it's a letter, and if so, it will switch its case. If there are no letters, the entire string will be reversed.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case reversal': This involves switching the case of a letter from lowercase to uppercase and vice versa.\n    'no letters': This refers to a situation where the string contains no alphabetical characters.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function will iterate through each character in the string. If the character is a letter, it will switch its case. If the string contains no letters, the entire string will be reversed.\n\n# [edge case] \n    reverse_string(\"Hello123\") = \"hELLO123\"\n    Explanation: The function will check each character. Letters 'H', 'e', 'l', 'l', 'o' will have their cases reversed, while '1', '2', '3' will remain unchanged.\n    reverse_string(\"12345\") = \"54321\"\n    Explanation: Since the string contains no letters, the entire string will be reversed.\n    reverse_string(\"Python3.8\") = \"PYTHON3.8\"\n    Explanation: The function will check each character. Letters 'P', 'y', 't', 'h', 'o', 'n' will have their cases reversed, while '3', '.' will remain unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan will correctly handle the case where the string contains no letters by reversing the entire string.\n", "requirement analysis:\nThe original requirements specify a function that processes a string based on the presence of letters. If the string contains no letters, it should reverse the string. If the string contains letters, it should reverse the case of each letter while leaving non-letter characters unchanged. The function should return the processed string.\nrequirement pool:\n- Implement the logic to process the string based on the presence of letters.\n- Ensure the function handles strings with no letters by reversing the entire string.\n- Develop the function to toggle the case of letters in the string.\n- Test the function with various inputs to ensure it meets the requirements.\nWe will implement the function by first checking if the string contains any letters. If it does, we will iterate through each character in the string, and if it's a letter, we will toggle its case. If the string contains no letters, we will reverse the string. This approach leverages Python's built-in string manipulation capabilities and the 'string' module for checking letter characters.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case toggling': This involves changing the case of a letter from lowercase to uppercase and vice versa.\n    'string manipulation': This includes checking for letter characters and reversing the string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n\n# [edge case] \n    solve(\"1234\") = \"4321\"\n    Explanation: The string contains no letters, so we reverse the string.\n    solve(\"ab\") = \"AB\"\n    Explanation: The string contains letters, so we toggle their cases.\n    solve(\"#a@C\") = \"#A@c\"\n    Explanation: The string contains letters, so we toggle their cases.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan already covers the case where the string contains no letters by reversing the string.\n\n# [core concept]\n    'reversing': This involves flipping the order of elements in a sequence.\n    'string manipulation': This includes checking for letter characters and toggling their cases.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n\n# [edge case] \n    solve(\"1234\") = \"4321\"\n    Explanation: The string contains no letters, so we reverse the string.\n    solve(\"ab\") = \"AB\"\n    Explanation: The string contains letters, so we toggle their cases.\n    solve(\"#a@C\") = \"#A@c\"\n    Explanation: The string contains letters, so we toggle their cases.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan already covers the case where the string contains no letters by reversing the string.\n", "requirement analysis:\nThe original requirements specify a function that processes a string based on the presence of letters. If the string contains no letters, it should reverse the string. If the string contains letters, it should reverse the case of each letter while leaving non-letter characters unchanged. The function should return the processed string.\nrequirement pool:\n- Implement the logic to process the string based on the presence of letters.\n- Ensure the function handles cases where the string contains no letters by reversing the string.\n- Design the function to toggle the case of letters while leaving non-letter characters unchanged.\n- Test the function with various inputs to ensure it behaves as expected.\nWe will implement the function `solve` by checking each character in the input string. If the string contains no letters, we will reverse the string. If the string contains letters, we will toggle the case of each letter while leaving non-letter characters unchanged.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case toggling': This involves changing the case of a letter from lowercase to uppercase and vice versa.\n    'string reversal': This involves reversing the order of characters in a string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - First, check if the string contains any alphabetic characters using `any(c.isalpha() for c in s)`.\n    - If no alphabetic characters are found, reverse the string.\n    - If alphabetic characters are found, iterate through each character in the string:\n        - If the character is a letter, toggle its case.\n        - If the character is not a letter, leave it unchanged.\n    - Return the resulting string.\n\n# [edge case] \n    solve(\"\") = \"\"\n    explanation: The input string is empty, so the function should return an empty string.\n    solve(\"abc\") = \"ABC\"\n    explanation: The input string contains letters, so each letter's case should be toggled, resulting in \"ABC\".\n    solve(\"123\") = \"321\"\n    explanation: The input string contains no letters, so the string should be reversed, resulting in \"321\".\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan already covers the edge cases of an empty string and a string with no letters.\n", "requirement analysis:\nThe original requirements specify a function that processes a string based on the presence of letters. If the string contains no letters, it should reverse the string. If the string contains letters, it should reverse the case of each letter while leaving non-letter characters unchanged. The function should return the modified string.\nrequirement pool:\n- Implement the logic to reverse the case of letters and keep non-letter characters unchanged.\n- Add a check to reverse the string if no letters are present.\n- Ensure the function is efficient and handles edge cases, such as empty strings or strings with only non-letter characters.\n- Design the function to be easily extendable for future modifications or additional features.\nWe will implement the function by first checking if the input string contains any letters. If it does, we will iterate through each character in the string, reversing the case of each letter while leaving non-letter characters unchanged. If the string contains no letters, we will reverse the string. This approach ensures that the function meets the requirements specified.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case reversal': means changing the case of a letter from lowercase to uppercase and vice versa.\n    'string manipulation': involves checking each character in the string and performing operations based on its type.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Check if the string contains any letters.\n    - Iterate through each character in the string.\n    - Reverse the case of letters, leave non-letter characters unchanged.\n    - If the string contains no letters, reverse the string.\n\n# [edge case] \n    solve(\"1234\") = \"4321\"\n    explanation: The string contains no letters, so the entire string is reversed.\n    solve(\"ab\") = \"AB\"\n    explanation: The string contains letters, so their cases are reversed.\n    solve(\"#a@C\") = \"#A@c\"\n    explanation: The string contains letters and special characters. Letters' cases are reversed, and special characters remain unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic already covers the edge cases of strings with no letters and strings with letters and special characters.\n", "requirement analysis:\nThe original requirements specify a function that processes a string based on the presence of letters. If letters are present, it should toggle their case; if no letters are present, it should reverse the string. This aligns with the goal of creating a versatile string manipulation tool.\nrequirement pool:\n- The main code should correctly identify letters and toggle their case.\n- The function should handle the case where no letters are present by reversing the string.\n- Ensure the function is efficient and handles edge cases, such as empty strings or strings with only non-letter characters.\n- Implement a clear and user-friendly interface for easy interaction.\nWe will use Python's built-in string manipulation methods and a simple conditional check to determine if the string contains letters. If letters are found, we will iterate through the string and swap their cases. If no letters are found, we will reverse the string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'string manipulation': involves changing the case of characters or reversing the order of characters in a string.\n    'conditional check': involves determining if a string contains letters to decide the action to take.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Iterate through each character in the string.\n    - Check if the character is a letter.\n    - If it is a letter, swap its case.\n    - If it is not a letter, keep it as it is.\n    - If no letters are found, reverse the entire string.\n\n# [edge case] \n    solve(\"1234\") = \"4321\"\n    Explanation: The string contains no letters, so we reverse the string.\n    solve(\"ab\") = \"AB\"\n    Explanation: The string contains letters, so we swap their cases.\n    solve(\"#a@C\") = \"#A@c\"\n    Explanation: The string contains letters, so we swap their cases.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan already covers the case where no letters are present.\n\n# [core concept]\n    'string manipulation': involves changing the case of characters or reversing the order of characters in a string.\n    'conditional check': involves determining if a string contains letters to decide the action to take.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Iterate through each character in the string.\n    - Check if the character is a letter.\n    - If it is a letter, swap its case.\n    - If it is not a letter, keep it as it is.\n    - If no letters are found, reverse the entire string.\n\n# [edge case] \n    solve(\"1234\") = \"4321\"\n    Explanation: The string contains no letters, so we reverse the string.\n    solve(\"ab\") = \"AB\"\n    Explanation: The string contains letters, so we swap their cases.\n    solve(\"#a@C\") = \"#A@c\"\n    Explanation: The string contains letters, so we swap their cases.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan already covers the case where no letters are present.\n"], "scores": [1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, false, false, false, true, true, true, true], "pass_test_cases_num": [128, 128, 128, 0, 0, 0, 128, 128, 128, 128], "completion": "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    # Check if the string contains any letters\n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        # Swap the case of each letter in the string\n        result = ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        # Reverse the string\n        result = s[::-1]\n    \n    return result\n", "passed": true, "pass": true, "pass_num": 7, "round": 836, "repair_prompt": ["def solve(s):\t\n'''You are given a string s. if s[i] is a letter, reverse its case from lower to upper or vise versa, otherwise keep it as it is, and if the string contains no letters, reverse the string. The function should return the resulted string.\nExamples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    '''", " You are given a string s. If s[i] is a letter, reverse its case from lower to upper or vice versa, otherwise keep it as it is, and if the string contains no letters, reverse the string. The function should return the resulted string.\nExamples:\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"", " def solve(s):\t\n    '''You are given a string s. if s[i] is a letter, reverse its case from lower to upper or vise versa, otherwise keep it as it is, and if the string contains no letters, reverse the string. The function should return the resulted string.\n    Examples\n        solve(\"1234\") = \"4321\"\n        solve(\"ab\") = \"AB\"\n        solve(\"#a@C\") = \"#A@c\"\n        '''\n    if not any(c.isalpha() for c in s):\n       "], "mutate_method": "condense_two2one", "parent_index": 119}
