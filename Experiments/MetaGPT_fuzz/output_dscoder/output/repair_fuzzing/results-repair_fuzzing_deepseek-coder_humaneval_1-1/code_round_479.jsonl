{"task_id": "HumanEval/161", "prompt": "def solve(s):\t\n'''You are given a string s. If s[i] is a letter, reverse its case from lower to upper or vise versa, otherwise keep it as it is and if the string contains no letters, reverse the string. The function should return the resulted string.\nExamples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    '''", "entry_point": "solve", "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "test": ["def check(solve):\n\tassert solve(\"#ryv@$l*\") == '#RYV@$L*'", "def check(solve):\n\tassert solve(\"BjdhsNs\") == 'bJDHSnS'", "def check(solve):\n\tassert solve(\"$883%3/\") == '/3%388$'", "def check(solve):\n\tassert solve(\"QnNQfv\") == 'qNnqFV'", "def check(solve):\n\tassert solve(\"o3LWaIl4\") == 'O3lwAiL4'", "def check(solve):\n\tassert solve(\"zt*#m&v\") == 'ZT*#M&V'", "def check(solve):\n\tassert solve(\"wDgT\") == 'WdGt'", "def check(solve):\n\tassert solve(\"ab\") == \"AB\"", "def check(solve):\n\tassert solve(\"=E!NyLi\") == '=e!nYlI'", "def check(solve):\n\tassert solve(\"jZVuQ\") == 'JzvUq'", "def check(solve):\n\tassert solve(\"UKg@xpM~G\") == 'ukG@XPm~g'", "def check(solve):\n\tassert solve(\"%cCcq#\") == '%CcCQ#'", "def check(solve):\n\tassert solve(\"++A^/?xV\") == '++a^/?Xv'", "def check(solve):\n\tassert solve(\"7_%\") == '%_7'", "def check(solve):\n\tassert solve(\"qon\") == 'QON'", "def check(solve):\n\tassert solve(\"giiqdy\") == 'GIIQDY'", "def check(solve):\n\tassert solve(\"~@8%\") == '%8@~'", "def check(solve):\n\tassert solve(\"^@B\") == '^@b'", "def check(solve):\n\tassert solve(\"?UGciW\") == '?ugCIw'", "def check(solve):\n\tassert solve(\"17000556\") == '65500071'", "def check(solve):\n\tassert solve(\"nfl*&=+$@\") == 'NFL*&=+$@'", "def check(solve):\n\tassert solve(\"wSdcA\") == 'WsDCa'", "def check(solve):\n\tassert solve(\"luG9*?%\") == 'LUg9*?%'", "def check(solve):\n\tassert solve(\"5$0!@\") == '@!0$5'", "def check(solve):\n\tassert solve(\"sxFaMa\") == 'SXfAmA'", "def check(solve):\n\tassert solve(\"?ao\") == '?AO'", "def check(solve):\n\tassert solve(\"k&!_\") == 'K&!_'", "def check(solve):\n\tassert solve(\"-|MSfK\") == '-|msFk'", "def check(solve):\n\tassert solve(\"5%@\") == '@%5'", "def check(solve):\n\tassert solve(\"=epet*orq\") == '=EPET*ORQ'", "def check(solve):\n\tassert solve(\"^dHUM-y\") == '^Dhum-Y'", "def check(solve):\n\tassert solve(\"npKwSAD\") == 'NPkWsad'", "def check(solve):\n\tassert solve(\"55=9/9\") == '9/9=55'", "def check(solve):\n\tassert solve(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:", "def check(solve):\n\tassert solve(\"*^JOyeSI\") == '*^joYEsi'", "def check(solve):\n\tassert solve(\"yzzdc\") == 'YZZDC'", "def check(solve):\n\tassert solve(\"i!X&/T\") == 'I!x&/t'", "def check(solve):\n\tassert solve(\"mlB-*F\") == 'MLb-*f'", "def check(solve):\n\tassert solve(\"856\") == '658'", "def check(solve):\n\tassert solve(\"ifafP-OoTK%\") == 'IFAFp-oOtk%'", "def check(solve):\n\tassert solve(\"Xug\") == 'xUG'", "def check(solve):\n\tassert solve(\"~2~@0\") == '0@~2~'", "def check(solve):\n\tassert solve(\"UMm:m\") == 'umM:M'", "def check(solve):\n\tassert solve(\"6812832\") == '2382186'", "def check(solve):\n\tassert solve(\"QDF:CXB\") == 'qdf:cxb'", "def check(solve):\n\tassert solve(\"5-=@&*\") == '*&@=-5'", "def check(solve):\n\tassert solve(\"761~^_%~4\") == '4~%_^~167'", "def check(solve):\n\tassert solve(\"#$a^D\") == \"#$A^d\"", "def check(solve):\n\tassert solve(\"4hzTAP_e\") == '4HZtap_E'", "def check(solve):\n\tassert solve(\"2058786\") == '6878502'", "def check(solve):\n\tassert solve(\"yErHfPuhE\") == 'YeRhFpUHe'", "def check(solve):\n\tassert solve(\"*u~\") == '*U~'", "def check(solve):\n\tassert solve(\"g*chm\") == 'G*CHM'", "def check(solve):\n\tassert solve(\"enxhq\") == 'ENXHQ'", "def check(solve):\n\tassert solve(\"ctpx\") == 'CTPX'", "def check(solve):\n\tassert solve(\"j$&Wd\") == 'J$&wD'", "def check(solve):\n\tassert solve(\"ji$rpiwCJ\") == 'JI$RPIWcj'", "def check(solve):\n\tassert solve(\"cjG~zXx\") == 'CJg~ZxX'", "def check(solve):\n\tassert solve(\"dgksb\") == 'DGKSB'", "def check(solve):\n\tassert solve(\"827_~+=6:\") == ':6=+~_728'", "def check(solve):\n\tassert solve(\"vr_d$kBQ\") == 'VR_D$Kbq'", "def check(solve):\n\tassert solve(\"389627754\") == '457726983'", "def check(solve):\n\tassert solve(\"+:#\") == '#:+'", "def check(solve):\n\tassert solve(\"prytYOIw\") == 'PRYTyoiW'", "def check(solve):\n\tassert solve(\"+1/05*!?+\") == '+?!*50/1+'", "def check(solve):\n\tassert solve(\"$u%lZTsz\") == '$U%LztSZ'", "def check(solve):\n\tassert solve(\"qyAKc\") == 'QYakC'", "def check(solve):\n\tassert solve(\"/@-\") == '-@/'", "def check(solve):\n\tassert solve(\"iiyw\") == 'IIYW'", "def check(solve):\n\tassert solve(\"#a@C\") == \"#A@c\"", "def check(solve):\n\tassert solve(\"49623838\") == '83832694'", "def check(solve):\n\tassert solve(\"u:kx!*\") == 'U:KX!*'", "def check(solve):\n\tassert solve(\"gsl\") == 'GSL'", "def check(solve):\n\tassert solve(\"jlycko\") == 'JLYCKO'", "def check(solve):\n\tassert solve(\"MUSKIE\") == 'muskie'", "def check(solve):\n\tassert solve(\":TDr\") == ':tdR'", "def check(solve):\n\tassert solve(\"bkd\") == 'BKD'", "def check(solve):\n\tassert solve(\"DNOZ2XKDMJZSwC$\") == 'dnoz2xkdmjzsWc$'", "def check(solve):\n\tassert solve(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.", "def check(solve):\n\tassert solve(\"n$tkw\") == 'N$TKW'", "def check(solve):\n\tassert solve(\"48954\") == '45984'", "def check(solve):\n\tassert solve(\"LlWj5FD\") == 'lLwJ5fd'", "def check(solve):\n\tassert solve(\"AsDf\") == \"aSdF\"", "def check(solve):\n\tassert solve(\"@!93/5**@\") == '@**5/39!@'", "def check(solve):\n\tassert solve(\"VmVDPkI\") == 'vMvdpKi'", "def check(solve):\n\tassert solve(\"mOn\") == 'MoN'", "def check(solve):\n\tassert solve(\"059646105\") == '501646950'", "def check(solve):\n\tassert solve(\"huo^\") == 'HUO^'", "def check(solve):\n\tassert solve(\"ghgnw\") == 'GHGNW'", "def check(solve):\n\tassert solve(\"gne\") == 'GNE'", "def check(solve):\n\tassert solve(\"~~%==41\") == '14==%~~'", "def check(solve):\n\tassert solve(\"%_uoz/#?L\") == '%_UOZ/#?l'", "def check(solve):\n\tassert solve(\"w@l+zd\") == 'W@L+ZD'", "def check(solve):\n\tassert solve(\"1234\") == \"4321\"", "def check(solve):\n\tassert solve(\"EsvNrg\") == 'eSVnRG'", "def check(solve):\n\tassert solve(\"pstVx\") == 'PSTvX'", "def check(solve):\n\tassert solve(\"kLA#y:NC\") == 'Kla#Y:nc'", "def check(solve):\n\tassert solve(\"ePOjFeuu\") == 'EpoJfEUU'", "def check(solve):\n\tassert solve(\"GPJae+?*a\") == 'gpjAE+?*A'", "def check(solve):\n\tassert solve(\"Uc$$xCSQ0cN~\") == 'uC$$Xcsq0Cn~'", "def check(solve):\n\tassert solve(\"gtvtsr\") == 'GTVTSR'", "def check(solve):\n\tassert solve(\"#AsdfW^45\") == \"#aSDFw^45\"", "def check(solve):\n\tassert solve(\"6971168\") == '8611796'", "def check(solve):\n\tassert solve(\"??rwE\") == '??RWe'", "def check(solve):\n\tassert solve(\"HMYxK\") == 'hmyXk'", "def check(solve):\n\tassert solve(\"gcflna\") == 'GCFLNA'", "def check(solve):\n\tassert solve(\"~+/#\") == '#/+~'", "def check(solve):\n\tassert solve(\"glgh\") == 'GLGH'", "def check(solve):\n\tassert solve(\"?gn~\") == '?GN~'", "def check(solve):\n\tassert solve(\"73713138\") == '83131737'", "def check(solve):\n\tassert solve(\"54138\") == '83145'", "def check(solve):\n\tassert solve(\"oGzZO!NOb@Lty\") == 'OgZzo!noB@lTY'", "def check(solve):\n\tassert solve(\"Q&LKD*BmV\") == 'q&lkd*bMv'", "def check(solve):\n\tassert solve(\"13431299\") == '99213431'", "def check(solve):\n\tassert solve(\"~/uc/@p^h\") == '~/UC/@P^H'", "def check(solve):\n\tassert solve(\"4kqV&&/6+Lc\") == '4KQv&&/6+lC'", "def check(solve):\n\tassert solve(\"fqY\") == 'FQy'", "def check(solve):\n\tassert solve(\"|n*e~bx-\") == '|N*E~BX-'", "def check(solve):\n\tassert solve(\"Pj+3w:31N!s6\") == 'pJ+3W:31n!S6'", "def check(solve):\n\tassert solve(\"++skzZ\") == '++SKZz'", "def check(solve):\n\tassert solve(\"%kmlC*s\") == '%KMLc*S'", "def check(solve):\n\tassert solve(\"232948\") == '849232'", "def check(solve):\n\tassert solve(\"613\") == '316'", "def check(solve):\n\tassert solve(\"!tmFhu\") == '!TMfHU'", "def check(solve):\n\tassert solve(\"+fDs:f\") == '+FdS:F'", "def check(solve):\n\tassert solve(\"XAdrNtUNr\") == 'xaDRnTunR'", "def check(solve):\n\tassert solve(\"cqiau\") == 'CQIAU'", "def check(solve):\n\tassert solve(\"340988\") == '889043'"], "test_case_list": ["assert solve(\"#ryv@$l*\") == '#RYV@$L*'", "assert solve(\"BjdhsNs\") == 'bJDHSnS'", "assert solve(\"$883%3/\") == '/3%388$'", "assert solve(\"QnNQfv\") == 'qNnqFV'", "assert solve(\"o3LWaIl4\") == 'O3lwAiL4'", "assert solve(\"zt*#m&v\") == 'ZT*#M&V'", "assert solve(\"wDgT\") == 'WdGt'", "assert solve(\"ab\") == \"AB\"", "assert solve(\"=E!NyLi\") == '=e!nYlI'", "assert solve(\"jZVuQ\") == 'JzvUq'", "assert solve(\"UKg@xpM~G\") == 'ukG@XPm~g'", "assert solve(\"%cCcq#\") == '%CcCQ#'", "assert solve(\"++A^/?xV\") == '++a^/?Xv'", "assert solve(\"7_%\") == '%_7'", "assert solve(\"qon\") == 'QON'", "assert solve(\"giiqdy\") == 'GIIQDY'", "assert solve(\"~@8%\") == '%8@~'", "assert solve(\"^@B\") == '^@b'", "assert solve(\"?UGciW\") == '?ugCIw'", "assert solve(\"17000556\") == '65500071'", "assert solve(\"nfl*&=+$@\") == 'NFL*&=+$@'", "assert solve(\"wSdcA\") == 'WsDCa'", "assert solve(\"luG9*?%\") == 'LUg9*?%'", "assert solve(\"5$0!@\") == '@!0$5'", "assert solve(\"sxFaMa\") == 'SXfAmA'", "assert solve(\"?ao\") == '?AO'", "assert solve(\"k&!_\") == 'K&!_'", "assert solve(\"-|MSfK\") == '-|msFk'", "assert solve(\"5%@\") == '@%5'", "assert solve(\"=epet*orq\") == '=EPET*ORQ'", "assert solve(\"^dHUM-y\") == '^Dhum-Y'", "assert solve(\"npKwSAD\") == 'NPkWsad'", "assert solve(\"55=9/9\") == '9/9=55'", "assert solve(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:", "assert solve(\"*^JOyeSI\") == '*^joYEsi'", "assert solve(\"yzzdc\") == 'YZZDC'", "assert solve(\"i!X&/T\") == 'I!x&/t'", "assert solve(\"mlB-*F\") == 'MLb-*f'", "assert solve(\"856\") == '658'", "assert solve(\"ifafP-OoTK%\") == 'IFAFp-oOtk%'", "assert solve(\"Xug\") == 'xUG'", "assert solve(\"~2~@0\") == '0@~2~'", "assert solve(\"UMm:m\") == 'umM:M'", "assert solve(\"6812832\") == '2382186'", "assert solve(\"QDF:CXB\") == 'qdf:cxb'", "assert solve(\"5-=@&*\") == '*&@=-5'", "assert solve(\"761~^_%~4\") == '4~%_^~167'", "assert solve(\"#$a^D\") == \"#$A^d\"", "assert solve(\"4hzTAP_e\") == '4HZtap_E'", "assert solve(\"2058786\") == '6878502'", "assert solve(\"yErHfPuhE\") == 'YeRhFpUHe'", "assert solve(\"*u~\") == '*U~'", "assert solve(\"g*chm\") == 'G*CHM'", "assert solve(\"enxhq\") == 'ENXHQ'", "assert solve(\"ctpx\") == 'CTPX'", "assert solve(\"j$&Wd\") == 'J$&wD'", "assert solve(\"ji$rpiwCJ\") == 'JI$RPIWcj'", "assert solve(\"cjG~zXx\") == 'CJg~ZxX'", "assert solve(\"dgksb\") == 'DGKSB'", "assert solve(\"827_~+=6:\") == ':6=+~_728'", "assert solve(\"vr_d$kBQ\") == 'VR_D$Kbq'", "assert solve(\"389627754\") == '457726983'", "assert solve(\"+:#\") == '#:+'", "assert solve(\"prytYOIw\") == 'PRYTyoiW'", "assert solve(\"+1/05*!?+\") == '+?!*50/1+'", "assert solve(\"$u%lZTsz\") == '$U%LztSZ'", "assert solve(\"qyAKc\") == 'QYakC'", "assert solve(\"/@-\") == '-@/'", "assert solve(\"iiyw\") == 'IIYW'", "assert solve(\"#a@C\") == \"#A@c\"", "assert solve(\"49623838\") == '83832694'", "assert solve(\"u:kx!*\") == 'U:KX!*'", "assert solve(\"gsl\") == 'GSL'", "assert solve(\"jlycko\") == 'JLYCKO'", "assert solve(\"MUSKIE\") == 'muskie'", "assert solve(\":TDr\") == ':tdR'", "assert solve(\"bkd\") == 'BKD'", "assert solve(\"DNOZ2XKDMJZSwC$\") == 'dnoz2xkdmjzsWc$'", "assert solve(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.", "assert solve(\"n$tkw\") == 'N$TKW'", "assert solve(\"48954\") == '45984'", "assert solve(\"LlWj5FD\") == 'lLwJ5fd'", "assert solve(\"AsDf\") == \"aSdF\"", "assert solve(\"@!93/5**@\") == '@**5/39!@'", "assert solve(\"VmVDPkI\") == 'vMvdpKi'", "assert solve(\"mOn\") == 'MoN'", "assert solve(\"059646105\") == '501646950'", "assert solve(\"huo^\") == 'HUO^'", "assert solve(\"ghgnw\") == 'GHGNW'", "assert solve(\"gne\") == 'GNE'", "assert solve(\"~~%==41\") == '14==%~~'", "assert solve(\"%_uoz/#?L\") == '%_UOZ/#?l'", "assert solve(\"w@l+zd\") == 'W@L+ZD'", "assert solve(\"1234\") == \"4321\"", "assert solve(\"EsvNrg\") == 'eSVnRG'", "assert solve(\"pstVx\") == 'PSTvX'", "assert solve(\"kLA#y:NC\") == 'Kla#Y:nc'", "assert solve(\"ePOjFeuu\") == 'EpoJfEUU'", "assert solve(\"GPJae+?*a\") == 'gpjAE+?*A'", "assert solve(\"Uc$$xCSQ0cN~\") == 'uC$$Xcsq0Cn~'", "assert solve(\"gtvtsr\") == 'GTVTSR'", "assert solve(\"#AsdfW^45\") == \"#aSDFw^45\"", "assert solve(\"6971168\") == '8611796'", "assert solve(\"??rwE\") == '??RWe'", "assert solve(\"HMYxK\") == 'hmyXk'", "assert solve(\"gcflna\") == 'GCFLNA'", "assert solve(\"~+/#\") == '#/+~'", "assert solve(\"glgh\") == 'GLGH'", "assert solve(\"?gn~\") == '?GN~'", "assert solve(\"73713138\") == '83131737'", "assert solve(\"54138\") == '83145'", "assert solve(\"oGzZO!NOb@Lty\") == 'OgZzo!noB@lTY'", "assert solve(\"Q&LKD*BmV\") == 'q&lkd*bMv'", "assert solve(\"13431299\") == '99213431'", "assert solve(\"~/uc/@p^h\") == '~/UC/@P^H'", "assert solve(\"4kqV&&/6+Lc\") == '4KQv&&/6+lC'", "assert solve(\"fqY\") == 'FQy'", "assert solve(\"|n*e~bx-\") == '|N*E~BX-'", "assert solve(\"Pj+3w:31N!s6\") == 'pJ+3W:31n!S6'", "assert solve(\"++skzZ\") == '++SKZz'", "assert solve(\"%kmlC*s\") == '%KMLc*S'", "assert solve(\"232948\") == '849232'", "assert solve(\"613\") == '316'", "assert solve(\"!tmFhu\") == '!TMfHU'", "assert solve(\"+fDs:f\") == '+FdS:F'", "assert solve(\"XAdrNtUNr\") == 'xaDRnTunR'", "assert solve(\"cqiau\") == 'CQIAU'", "assert solve(\"340988\") == '889043'"], "nl": "You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    ", "func": "def solve(s):", "examples": "Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    ", "completions": ["from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    # Check if the string contains any letters\n    contains_letters = any(char.isalpha() for char in s)\n    \n    if contains_letters:\n        # If the string contains letters, toggle case for each letter\n        result = []\n        for char in s:\n            if char.isalpha():\n                if char.islower():\n                    result.append(char.upper())\n                else:\n                    result.append(char.lower())\n            else:\n                result.append(char)\n        return ''.join(result)\n    else:\n        # If the string contains no letters, reverse the entire string\n        return s[::-1]\n\n# Example usage:\n# print(solve(\"1234\"))  # Output: \"4321\"\n# print(solve(\"ab\"))    # Output: \"AB\"\n# print(solve(\"#a@C\"))  # Output: \"#A@c\"\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    def is_letter(c: str) -> bool:\n        return c.isalpha()\n\n    def reverse_case(c: str) -> str:\n        return c.lower() if c.isupper() else c.upper()\n\n    if any(is_letter(char) for char in s):\n        result = []\n        for char in s:\n            if is_letter(char):\n                result.append(reverse_case(char))\n            else:\n                result.append(char)\n        return ''.join(result)\n    else:\n        return s[::-1]\n\n# Example usage:\n# print(solve(\"ab\"))  # Output: \"AB\"\n# print(solve(\"1234\"))  # Output: \"4321\"\n# print(solve(\"#a@C\"))  # Output: \"#A@c\"\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    # Check if the string contains any letters\n    contains_letters = any(char.isalpha() for char in s)\n    \n    if contains_letters:\n        # Toggle the case of each letter in the string\n        result = []\n        for char in s:\n            if char.islower():\n                result.append(char.upper())\n            elif char.isupper():\n                result.append(char.lower())\n            else:\n                result.append(char)\n        return ''.join(result)\n    else:\n        # Reverse the entire string if no letters are present\n        return s[::-1]\n", "from typing import List\n## main.py\n\ndef reverse_case_or_reverse_string(s: str) -> str:\n    \"\"\"\n    This function takes a string as input and performs the following operations:\n    1. Iterates through each character in the input string.\n    2. If the character is a letter, it reverses its case.\n    3. If there are no letters in the string, it reverses the entire string.\n    4. Returns the resulted string.\n    \"\"\"\n    has_letters = False\n    result = []\n\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n\n    if not has_letters:\n        return ''.join(result[::-1])\n    else:\n        return ''.join(result)\n\n# Example usage:\n# print(reverse_case_or_reverse_string(\"Hello123\"))  # Output: \"hELLO123\"\n# print(reverse_case_or_reverse_string(\"Python3.8\"))  # Output: \"pYTHON3.8\"\n# print(reverse_case_or_reverse_string(\"12345\"))  # Output: \"54321\"\n", "from typing import List\n## main.py\n\ndef process_string(s: str) -> str:\n    \"\"\"\n    Process the input string by reversing the case of letters and reversing the entire string if no letters are present.\n\n    Args:\n        s (str): The input string to be processed.\n\n    Returns:\n        str: The processed string with reversed case of letters or the entire string if no letters are present.\n    \"\"\"\n    # Check if the string contains any letters\n    has_letters = any(char.isalpha() for char in s)\n\n    if not has_letters:\n        # If no letters are present, reverse the entire string\n        return s[::-1]\n    else:\n        # If letters are present, reverse the case of each letter\n        result = []\n        for char in s:\n            if char.isalpha():\n                if char.islower():\n                    result.append(char.upper())\n                else:\n                    result.append(char.lower())\n            else:\n                result.append(char)\n        return ''.join(result)\n\n# Example usage:\n# print(process_string(\"Hello123\"))  # Output: \"hELLO123\"\n# print(process_string(\"12345\"))     # Output: \"54321\"\n# print(process_string(\"Python3.8\")) # Output: \"PYTHon3.8\"\n", "from typing import List\n## main.py\n\ndef process_string(s: str) -> str:\n    \"\"\"\n    Processes a string by checking each character. If the character is a letter, it will reverse its case.\n    If there are no letters, it will reverse the entire string.\n    \n    Args:\n        s (str): The input string to be processed.\n    \n    Returns:\n        str: The processed string.\n    \"\"\"\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    \n    result = []\n    for char in s:\n        if char.isupper():\n            result.append(char.lower())\n        elif char.islower():\n            result.append(char.upper())\n        else:\n            result.append(char)\n    \n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef process_string(s: str) -> str:\n    \"\"\"\n    Process a string by checking each character. If the character is a letter, switch its case.\n    If there are no letters, reverse the entire string.\n    \n    Args:\n        s (str): The input string to be processed.\n    \n    Returns:\n        str: The processed string.\n    \"\"\"\n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        # Switch case of each letter\n        result = []\n        for char in s:\n            if char.islower():\n                result.append(char.upper())\n            elif char.isupper():\n                result.append(char.lower())\n            else:\n                result.append(char)\n        return ''.join(result)\n    else:\n        # Reverse the entire string\n        return s[::-1]\n\n# Example usage:\n# print(process_string(\"Hello123\"))  # Output: \"hELLO123\"\n# print(process_string(\"12345\"))    # Output: \"54321\"\n# print(process_string(\"Python3.8\")) # Output: \"PYTHON3.8\"\n", "from typing import List\n## main.py\n\ndef reverse_case_or_reverse_string(s: str) -> str:\n    \"\"\"\n    This function takes a string as input and performs the following operations:\n    1. Iterates through each character in the string.\n    2. Checks if the character is a letter.\n    3. If it is a letter, reverses its case.\n    4. If it is not a letter, leaves it unchanged.\n    5. After processing all characters, checks if any letters were present.\n    6. If no letters were present, reverses the entire string.\n    7. Returns the resulting string.\n\n    Args:\n        s (str): The input string to be processed.\n\n    Returns:\n        str: The processed string.\n    \"\"\"\n    has_letter = False\n    result = []\n\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n\n    if not has_letter:\n        return s[::-1]\n\n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef process_string(s: str) -> str:\n    \"\"\"\n    Process the input string by reversing the case of letters and reversing the entire string if no letters are present.\n\n    Args:\n        s (str): The input string to be processed.\n\n    Returns:\n        str: The processed string.\n    \"\"\"\n    result = []\n    has_letters = False\n\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n\n    if not has_letters:\n        return ''.join(result[::-1])\n\n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function takes a string as input and returns a new string with the case of each letter reversed.\n    If the string contains no letters, the entire string is reversed.\n    \n    Args:\n        s (str): The input string.\n    \n    Returns:\n        str: The modified string with reversed cases of letters or the entire string reversed if no letters are present.\n    \"\"\"\n    # Check if the string contains any letters\n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        # Reverse the case of each letter found in the string\n        result = []\n        for char in s:\n            if char.isupper():\n                result.append(char.lower())\n            elif char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char)\n        return ''.join(result)\n    else:\n        # Reverse the entire string if no letters are present\n        return s[::-1]\n"], "plans": ["requirement analysis:\nThe function needs to handle different cases: if the string contains letters, it should toggle the case of each letter; if the string contains no letters, it should reverse the entire string. The function should also handle special characters without altering them.\nrequirement pool:\n- The main code should correctly handle the case toggling for letters and non-letter characters.\n- The function should check for the presence of letters and act accordingly.\n- Implement a clear and responsive UI for user interaction.\n- Ensure the application is accessible and works well on different devices.\nWe will implement the function `solve` by first checking if the input string contains any letters. If it does, we will iterate through each character, toggle its case if it's a letter, and leave it unchanged otherwise. If the string contains no letters, we will reverse the entire string. This approach ensures that special characters are not altered.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case toggling': This involves changing the case of a letter from lowercase to uppercase and vice versa.\n    'string manipulation': This includes checking for the presence of letters, iterating through characters, and reversing the string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function `solve` will follow these steps:\n    1. Check if the input string `s` contains any letters.\n    2. If it does, iterate through each character:\n       - If the character is a letter, toggle its case.\n       - If the character is not a letter, leave it unchanged.\n    3. Return the resulting string.\n    4. If the string contains no letters, reverse the entire string.\n\n# [edge case] \n    solve(\"1234\") = \"4321\"\n    Explanation: The input string contains no letters, so the function reverses the string.\n    solve(\"ab\") = \"AB\"\n    Explanation: The input string contains letters, so the function toggles the case of each letter.\n    solve(\"#a@C\") = \"#A@c\"\n    Explanation: The input string contains letters, so the function toggles the case of the letter 'a' and 'C'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle all cases.\n", "requirement analysis:\nThe function needs to handle different cases: when the input string contains only digits, when it contains only letters, and when it contains both letters and symbols. The function should reverse the case of letters and reverse the entire string if there are no letters.\nrequirement pool:\n- The main code should handle the case conversion for letters and reverse the string if no letters are present.\n- Ensure the function is efficient and handles all types of input strings.\n- Design a simple and responsive UI for the product.\nWe will implement the function `solve` by first checking if the input string contains any letters. If it does, we will iterate through the string and reverse the case of each letter. If no letters are present, we will simply reverse the string. This approach ensures that the function handles all types of input strings efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case reversal': This involves changing the case of a letter from lowercase to uppercase and vice versa.\n    'string manipulation': This includes checking for the presence of letters, iterating through the string, and reversing the string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function `solve` will follow these steps:\n    1. Check if the input string contains any letters.\n    2. If letters are present:\n        - Iterate through the string.\n        - For each character, if it's a letter, reverse its case.\n        - If it's not a letter, keep it as is.\n    3. If no letters are present:\n        - Reverse the entire string.\n    4. Return the resulted string.\n\n# [edge case] \n    solve(\"1234\") = \"4321\"\n    Explanation: The input string contains no letters, so the function reverses the string.\n    solve(\"ab\") = \"AB\"\n    Explanation: The input string contains letters, so the function reverses the case of each letter.\n    solve(\"#a@C\") = \"#A@c\"\n    Explanation: The input string contains letters, so the function reverses the case of the letters 'a' and 'C'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle all cases.\n", "requirement analysis:\nThe function needs to handle different cases: if the string contains letters, it should toggle the case of each letter; if the string contains no letters, it should reverse the entire string. The function should be able to process strings with special characters as well.\nrequirement pool:\n- Implement the logic to toggle the case of letters and reverse the string if no letters are present.\n- Ensure the function can handle strings with special characters.\n- Test the function with various inputs to ensure it behaves as expected.\nWe will implement the function `solve` by first checking if the input string contains any letters. If it does, we will iterate through each character in the string, toggling the case of each letter. If the string contains no letters, we will reverse the entire string. This approach will ensure that the function handles both cases: when there are letters to toggle and when there are none.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case toggling': This involves changing the case of a letter from lowercase to uppercase and vice versa.\n    'string manipulation': This includes checking for the presence of letters, iterating through characters, and reversing the string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Check if the string contains any letters.\n    - Iterate through each character in the string.\n    - Toggle the case of letters.\n    - Reverse the entire string if no letters are present.\n\n# [edge case] \n    solve(\"1234\") = \"4321\"\n    Explanation: The string contains no letters, so the function reverses the string.\n    solve(\"ab\") = \"AB\"\n    Explanation: The string contains letters, so the function toggles the case of each letter.\n    solve(\"#a@C\") = \"#A@c\"\n    Explanation: The string contains letters, so the function toggles the case of each letter.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic already covers reversing the string if no letters are present.\n", "requirement analysis:\nThe requirements specify a function that processes a string by checking each character. If the character is a letter, it reverses its case. If there are no letters, it reverses the entire string. This functionality is straightforward and focuses on string manipulation and conditional logic.\nrequirement pool:\n- Implement the function to reverse the case of letters and reverse the string if no letters are present.\n- Ensure the function is efficient and handles edge cases such as empty strings or strings with no letters.\n- Design the user interface to allow easy input and display of results.\nWe will implement the function by iterating through each character in the input string. If the character is a letter, we will reverse its case. If there are no letters in the string, we will reverse the entire string. This approach will involve using basic string manipulation techniques and conditional logic.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'string manipulation': This includes operations like reversing the case of letters and checking if a character is a letter.\n    'conditional logic': This involves checking if a character is a letter and then deciding whether to reverse its case or not.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Iterate through each character in the input string.\n    (2) Check if the character is a letter.\n    (3) If it is a letter, reverse its case.\n    (4) If it is not a letter, keep it as it is.\n    (5) After iterating through the entire string, check if any letters were present.\n    (6) If no letters were present, reverse the entire string.\n    (7) Return the resulted string.\n\n# [edge case] \n    reverse_string(\"Hello123\") = \"hELLO123\"\n    Explanation: The function will reverse the case of the letters 'H', 'e', 'l', 'l', 'o' and keep the digits '1', '2', '3' as they are.\n    reverse_string(\"Python3.8\") = \"pYTHON3.8\"\n    Explanation: The function will reverse the case of the letters 'P', 'y', 't', 'h', 'o', 'n' and keep the digits '3', '.' as they are.\n    reverse_string(\"12345\") = \"54321\"\n    Explanation: The function will keep all digits as they are since there are no letters. The entire string will be reversed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided covers the case where there are no letters in the string by reversing the entire string.\n", "requirement analysis:\nThe requirements specify a function that processes a string by checking each character. If the character is a letter, it reverses its case. If there are no letters, it reverses the entire string. This functionality is straightforward but needs to handle both character case reversal and string reversal appropriately.\nrequirement pool:\n- Implement the function to reverse the case of letters and reverse the string if no letters are present.\n- Ensure the function is efficient and handles edge cases such as empty strings or strings with no letters.\n- Design the user interface to be intuitive and visually appealing, supporting the functional requirements.\nWe will implement the function by iterating through each character in the input string. If the character is a letter, we will reverse its case. If there are no letters in the string, we will reverse the entire string. This approach ensures that the function handles both character case reversal and string reversal appropriately.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case reversal': This involves changing a letter from lowercase to uppercase or vice versa.\n    'string reversal': This involves reversing the order of characters in a string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Iterate through each character in the input string.\n    - Check if the character is a letter.\n    - If it is a letter, reverse its case.\n    - If the string contains no letters, reverse the entire string.\n    - Return the resulted string.\n\n# [edge case] \n    reverse_string(\"Hello123\") = \"hELLO123\"\n    Explanation: The string contains letters and numbers. The letters are reversed in case, while the numbers remain unchanged.\n    reverse_string(\"12345\") = \"54321\"\n    Explanation: The string contains no letters, so the entire string is reversed.\n    reverse_string(\"Python3.8\") = \"PYTHon3.8\"\n    Explanation: The string contains both letters and non-letter characters. The letters are reversed in case, while the non-letter characters remain unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can handle both scenarios (with and without letters) by checking for the presence of letters and acting accordingly.\n", "requirement analysis:\nThe requirements specify a function that processes a string by checking each character. If the character is a letter, it reverses its case. If there are no letters, it reverses the entire string. This functionality is straightforward but needs to handle both letter case reversal and string reversal appropriately.\nrequirement pool:\n- Implement the function to reverse the case of letters and reverse the string if no letters are present.\n- Ensure the function is efficient and handles edge cases such as empty strings or strings with no letters.\n- Design the user interface to be responsive and visually appealing, incorporating user feedback from stories.\nWe will implement a Python function that processes a string by checking each character. If the character is a letter, it will reverse its case. If there are no letters, it will reverse the entire string. This function will be efficient and handle edge cases such as empty strings or strings with no letters.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case reversal': This involves changing the case of a letter from lowercase to uppercase and vice versa.\n    'no letters': This refers to a situation where the string does not contain any alphabetic characters.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function will iterate through each character in the string. If the character is a letter, it will reverse its case. If the string contains no letters, the entire string will be reversed.\n\n# [edge case] \n    reverse_string(\"\") = \"\"\n    Explanation: The input string is empty, so the function returns an empty string.\n    reverse_string(\"123\") = \"321\"\n    Explanation: The input string contains no letters, so the function reverses the entire string.\n    reverse_string(\"aBcDe\") = \"AbCdE\"\n    Explanation: The input string contains letters, so the function reverses the case of each letter.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle empty strings and strings without letters.\n", "requirement analysis:\nThe requirements specify a function that processes a string based on the type of character at each index. If the character is a letter, it should switch its case. If there are no letters, the entire string should be reversed. This functionality is straightforward and focuses on string manipulation and conditional logic.\nrequirement pool:\n- Implement the function to switch case of letters and reverse the string if no letters are present.\n- Ensure the function is efficient and handles edge cases such as empty strings or strings with only non-letter characters.\n- Design the UI to be user-friendly and visually appealing, with clear feedback mechanisms for user actions.\nWe will implement a function that processes a string by checking each character. If the character is a letter, we will switch its case. If there are no letters, we will reverse the entire string. This approach ensures that the function is efficient and handles edge cases effectively.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case reversal': This involves switching the case of a letter from lowercase to uppercase and vice versa.\n    'no letters': This refers to a situation where the string does not contain any alphabetic characters.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function will iterate through each character in the string. If the character is a letter, it will switch its case. If the string contains no letters, it will reverse the entire string.\n\n# [edge case] \n    reverse_string(\"Hello123\") = \"hELLO123\"\n    Explanation: The string contains letters (H, e, l, l, o) and non-letter characters (1, 2, 3). The letters' cases are reversed, while the non-letter characters remain unchanged.\n    reverse_string(\"12345\") = \"54321\"\n    Explanation: The string contains no letters, so the entire string is reversed.\n    reverse_string(\"Python3.8\") = \"PYTHON3.8\"\n    Explanation: The string contains letters (P, y, t, h, o, n) and non-letter characters (3, ., 8). The letters' cases are reversed, while the non-letter characters remain unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function will automatically handle the situation where the string contains no letters by reversing the entire string.\n", "requirement analysis:\nThe requirements specify a function that processes a string by checking each character. If the character is a letter, it reverses its case. If there are no letters, it reverses the entire string. This functionality is straightforward and focuses on string manipulation and conditional logic.\nrequirement pool:\n- Implement the function to reverse the case of letters and reverse the string if no letters are present.\n- Ensure the function is efficient and handles edge cases such as empty strings or strings with no letters.\n- Design the user interface to allow easy input and display of results.\nWe will use Python's built-in string manipulation methods and a simple conditional logic to implement the function. The function will check each character in the string. If the character is a letter, it will reverse its case. If there are no letters, it will reverse the entire string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'string manipulation': This includes reversing the case of letters and reversing the entire string if no letters are present.\n    'conditional logic': This involves checking each character in the string to determine if it is a letter and then applying the appropriate transformation.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Iterate through each character in the string.\n    (2) Check if the character is a letter.\n    (3) If it is a letter, reverse its case.\n    (4) If it is not a letter, leave it unchanged.\n    (5) After processing all characters, check if any letters were present.\n    (6) If no letters were present, reverse the entire string.\n    (7) Return the resulting string.\n\n# [edge case] \n    reverse_string(\"Hello, World!\") = \"hELLO, wORLD!\"\n    Explanation: The function will reverse the case of each letter and leave non-letter characters unchanged.\n    reverse_string(\"12345\") = \"54321\"\n    Explanation: Since the string contains no letters, the function will reverse the entire string.\n    reverse_string(\"Python3.8\") = \"pYTHON3.8\"\n    Explanation: The function will reverse the case of the letter 'P' and leave the digits unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can handle strings with no letters by reversing the entire string.\n", "requirement analysis:\nThe requirements specify a function that processes a string by checking each character. If the character is a letter, it reverses its case. If there are no letters, it reverses the entire string. This functionality is straightforward and focuses on string manipulation and conditional logic.\nrequirement pool:\n- Implement the function to reverse the case of letters and reverse the string if no letters are present.\n- Ensure the function is efficient and handles edge cases such as empty strings or strings with only non-letter characters.\n- Design the user interface to be intuitive and visually appealing, supporting the functionality of the application.\nWe will implement the function by iterating through each character in the input string. If the character is a letter, we will reverse its case. If there are no letters in the string, we will reverse the entire string. This approach will involve using basic string manipulation techniques and conditional logic.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'string manipulation': This includes operations like reversing the case of letters and checking if a character is a letter.\n    'conditional logic': This involves checking if a character is a letter and then deciding whether to reverse its case or not.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Iterate through each character in the input string.\n    (2) Check if the character is a letter.\n    (3) If it is a letter, reverse its case.\n    (4) If it is not a letter, keep it as it is.\n    (5) After iterating through the entire string, check if any letters were present.\n    (6) If no letters were present, reverse the entire string.\n    (7) Return the resulted string.\n\n# [edge case] \n    reverse_string(\"Hello123\") = \"hELLO123\"\n    Explanation: The string contains letters and non-letter characters. The letters 'H', 'e', 'l', and 'o' are reversed in case, while the digits '1', '2', and '3' remain unchanged.\n    reverse_string(\"Python3.8\") = \"pYTHON3.8\"\n    Explanation: The string contains letters and non-letter characters. The letters 'P', 'y', 't', 'h', 'o', and 'n' are reversed in case, while the digits '3', and '.' remain unchanged.\n    reverse_string(\"12345\") = \"54321\"\n    Explanation: The string contains only non-letter characters. The entire string is reversed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided covers the case where the string contains no letters, which is handled by reversing the entire string.\n", "requirement analysis:\nThe function needs to handle different cases based on the content of the input string. It should check each character to determine if it's a letter, and if so, reverse its case. If there are no letters, the entire string should be reversed. This requirement ensures the function is versatile and can handle various inputs effectively.\nrequirement pool:\n- The main code should correctly identify letters and reverse their case.\n- If the string contains no letters, the function should reverse the string.\n- Ensure the function is efficient and handles edge cases, such as empty strings or strings with only non-letter characters.\n- Develop a user-friendly interface for easy input and output display.\nWe will use Python's built-in functions and string manipulation methods to achieve the functionality. The main challenge is to correctly identify letters and reverse their case, and handle the case where the string contains no letters by reversing the entire string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'string manipulation': involves changing the case of characters or reversing the order of characters in a string.\n    'letter identification': identifying whether a character is a letter and then reversing its case.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Check if the string contains any letters.\n    - If it does, iterate through the string, reverse the case of each letter found.\n    - If it does not, reverse the entire string.\n\n# [edge case] \n    solve(\"1234\") = \"4321\"\n    Explanation: The string contains no letters, so the entire string is reversed.\n    solve(\"ab\") = \"AB\"\n    Explanation: The string contains letters, so their cases are reversed.\n    solve(\"#a@C\") = \"#A@c\"\n    Explanation: The string contains letters and special characters. Letters are reversed in case, while special characters remain unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can handle all cases correctly.\n"], "scores": [1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], "pass_results": [true, true, true, false, false, false, false, false, false, true], "pass_test_cases_num": [128, 128, 128, 0, 0, 0, 0, 0, 0, 128], "completion": "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function takes a string as input and returns a new string with the case of each letter reversed.\n    If the string contains no letters, the entire string is reversed.\n    \n    Args:\n        s (str): The input string.\n    \n    Returns:\n        str: The modified string with reversed cases of letters or the entire string reversed if no letters are present.\n    \"\"\"\n    # Check if the string contains any letters\n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        # Reverse the case of each letter found in the string\n        result = []\n        for char in s:\n            if char.isupper():\n                result.append(char.lower())\n            elif char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char)\n        return ''.join(result)\n    else:\n        # Reverse the entire string if no letters are present\n        return s[::-1]\n", "passed": true, "pass": true, "pass_num": 4, "round": 479, "repair_prompt": ["def solve(s):\t\n'''You are given a string s. If s[i] is a letter, reverse its case from lower to upper or vise versa, otherwise keep it as it is and if the string contains no letters, reverse the string. The function should return the resulted string.\nExamples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    '''", " You are given a string s. If s[i] is a letter, reverse its case from lower to upper or vice versa, otherwise keep it as it is. If the string contains no letters, reverse the string. The function should return the resulted string.\nExamples:\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"", " You are given a string s. If s[i] is a letter, reverse its case from lower to upper or vice versa, otherwise keep it as it is. If the string contains no letters, reverse the string. The function should return the resulted string.\nExamples:\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\""], "mutate_method": "condense_two2one", "parent_index": 119}
