{"task_id": "HumanEval/43", "prompt": "def pairs_sum_to_zero(l):\t\n'''pairs_sum_to_zero takes a list of integers as an input. It returns True if there are two distinct elements in the list that sum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''", "entry_point": "pairs_sum_to_zero", "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n", "test": ["def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 11, -3, 6, 7, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 7, -4, 1, 1, 11]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 11, 0, 3, 6, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 14, 0, 5, 2, 34]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 2, 3, 7]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 2, 9, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 4, 2, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 14, 1, 8, 6, 36]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 9, 0, 8, 5, 9]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 4, -6, 7, 1, 32]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 8, -2, 3]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-2, 10, 0, 6, 5, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 1, -2, 2]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 2, -1, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 4, -2, 5, 5, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 5, -3, 3]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 3, -4, 5]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-2, 4, -5, 4, 1, 25]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 6, -4, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 5, 2, 4, 1, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 14, 0, 1, 7, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 8, -5, 3, 7, 35]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 9, -9, 2, 7, 11]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 7, -1, 2, 1, 28]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 3, 2, 31]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 6, -7, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 9, 2, 3, 4, 30]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 6, 1, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 1, 3, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 5, 8, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 7, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 8, 10, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 13, -5, 7, 7, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 5, -10, 2, 10, 9]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 3, 1, 8]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 7, 4, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 9, -5, 4, 6, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 6, 2, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 2, 1, 11]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 2, 7, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 5, 2, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 14, -2, 8, 2, 35]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, 5, 0]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 8, 4, 3, 7, 29]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 12, 1, 9, 6, 33]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 11, 1, 6, 6, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 11, -3, 8, 7, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 10, -4, 8, 6, 26]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 3, 7, 1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 1, -4, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-2, 12, -4, 7, 1, 36]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 12, 1, 6, 7, 25]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 11, -3, 6, 2, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 13, -2, 7, 3, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 4, -10, 5, 10, 9]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 1, 3, 7]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 8, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 14, 2, 4, 6, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 5, 1, 12]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 3, 2, 30]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 5, -6, 8, 1, 33]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 3, 7, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 14, -6, 5, 1, 35]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 4, -1, 5, 10, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 13, -2, 4, 4, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 2, 6, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 4, -1, 5, 3, 33]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 3, 1, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([7, 5, -1, 1, 8, 10]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, 4, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 7, 3, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 12, -3, 2, 6, 29]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 9, -3, 6, 7, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 7, -9, 5, 4, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 6, 0, 6, 3, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 7, 8, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 4, -1, 8, 8, 12]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 8, 1, 1, 6, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 14, 1, 8, 2, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 6, -5, 7, 7, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 4, -7, 1, 2, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 11, -6, 5, 7, 36]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 14, 0, 5, 1, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 9, -1, 7, 4, 34]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, 3, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 10, 2, 9, 3, 33]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 4, 1, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 4, 2, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, -2, 1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 10, -2, 2, 4, 33]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 9, -8, 6, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 7, -4, 4, 2, 32]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 4, 10, 1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([7, 8, -10, 7, 2, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 8, 0, 4, 5, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 14, -4, 5, 6, 32]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 12, 1, 8, 6, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 12, -6, 6, 7, 29]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 5, 1, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 8, -4, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 2, 1, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 4, 3, 6, 2, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 11, -4, 3, 5, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 9, 2, 1, 6, 34]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 13, -4, 6, 3, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 1, 0, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 5, -2, 3, 1, 32]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 5, -1, 8, 8, 4]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 2, 2, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 8, 1, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 6, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 14, 3, 6, 2, 29]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 13, -2, 8, 7, 35]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 1, 3, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 8, -1, 7, 6, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 12, 0, 1, 7, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 3, 6, 7]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 6, -8, 1, 2, 8]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 8, -3, 9, 5, 29]) == False"], "test_case_list": ["assert pairs_sum_to_zero([1, 11, -3, 6, 7, 30]) == False", "assert pairs_sum_to_zero([3, 7, -4, 1, 1, 11]) == False", "assert pairs_sum_to_zero([-8, 11, 0, 3, 6, 26]) == False", "assert pairs_sum_to_zero([1, 14, 0, 5, 2, 34]) == False", "assert pairs_sum_to_zero([1, 2, 3, 7]) == False", "assert pairs_sum_to_zero([4, 2, 9, 3]) == False", "assert pairs_sum_to_zero([-3, 9, -1, 4, 2, 31]) == False", "assert pairs_sum_to_zero([3]) == False", "assert pairs_sum_to_zero([-1, 14, 1, 8, 6, 36]) == True", "assert pairs_sum_to_zero([3, 9, 0, 8, 5, 9]) == False", "assert pairs_sum_to_zero([1, 4, -6, 7, 1, 32]) == False", "assert pairs_sum_to_zero([2, 8, -2, 3]) == True", "assert pairs_sum_to_zero([-2, 10, 0, 6, 5, 30]) == False", "assert pairs_sum_to_zero([3, 1, -2, 2]) == True", "assert pairs_sum_to_zero([3, 2, -1, 2]) == False", "assert pairs_sum_to_zero([-1, 4, -2, 5, 5, 27]) == False", "assert pairs_sum_to_zero([1]) == False", "assert pairs_sum_to_zero([6, 5, -3, 3]) == True", "assert pairs_sum_to_zero([4, 3, -4, 5]) == True", "assert pairs_sum_to_zero([-2, 4, -5, 4, 1, 25]) == False", "assert pairs_sum_to_zero([2, 6, -4, 5]) == False", "assert pairs_sum_to_zero([-7, 5, 2, 4, 1, 26]) == False", "assert pairs_sum_to_zero([-8, 14, 0, 1, 7, 30]) == False", "assert pairs_sum_to_zero([1, 8, -5, 3, 7, 35]) == False", "assert pairs_sum_to_zero([6, 9, -9, 2, 7, 11]) == True", "assert pairs_sum_to_zero([-8, 7, -1, 2, 1, 28]) == True", "assert pairs_sum_to_zero([-3, 9, -1, 3, 2, 31]) == True", "assert pairs_sum_to_zero([6, 6, -7, 6]) == False", "assert pairs_sum_to_zero([-4, 9, 2, 3, 4, 30]) == True", "assert pairs_sum_to_zero([1, 6, 1, 2]) == False", "assert pairs_sum_to_zero([5, 1, 3, 5]) == False", "assert pairs_sum_to_zero([4, 5, 8, 3]) == False", "assert pairs_sum_to_zero([6, 7, 2, 5]) == False", "assert pairs_sum_to_zero([2, 8, 10, 3]) == False", "assert pairs_sum_to_zero([1, 13, -5, 7, 7, 27]) == False", "assert pairs_sum_to_zero([4, 5, -10, 2, 10, 9]) == True", "assert pairs_sum_to_zero([2, 3, 1, 8]) == False", "assert pairs_sum_to_zero([1, 7, 4, 6]) == False", "assert pairs_sum_to_zero([2, 9, -5, 4, 6, 30]) == False", "assert pairs_sum_to_zero([4, 6, 2, 4]) == False", "assert pairs_sum_to_zero([5, 2, 1, 11]) == False", "assert pairs_sum_to_zero([5, 2, 7, 3]) == False", "assert pairs_sum_to_zero([5, 5, 2, 2]) == False", "assert pairs_sum_to_zero([-8, 14, -2, 8, 2, 35]) == True", "assert pairs_sum_to_zero([1, 3, 5, 0]) == False", "assert pairs_sum_to_zero([-1, 8, 4, 3, 7, 29]) == False", "assert pairs_sum_to_zero([2, 12, 1, 9, 6, 33]) == False", "assert pairs_sum_to_zero([-4, 11, 1, 6, 6, 28]) == False", "assert pairs_sum_to_zero([0, 11, -3, 8, 7, 26]) == False", "assert pairs_sum_to_zero([-8, 10, -4, 8, 6, 26]) == True", "assert pairs_sum_to_zero([2]) == False", "assert pairs_sum_to_zero([2, 3, 7, 1]) == False", "assert pairs_sum_to_zero([6, 1, -4, 6]) == False", "assert pairs_sum_to_zero([-2, 12, -4, 7, 1, 36]) == False", "assert pairs_sum_to_zero([2, 12, 1, 6, 7, 25]) == False", "assert pairs_sum_to_zero([-4, 11, -3, 6, 2, 27]) == False", "assert pairs_sum_to_zero([0, 13, -2, 7, 3, 31]) == False", "assert pairs_sum_to_zero([1, 4, -10, 5, 10, 9]) == True", "assert pairs_sum_to_zero([4, 1, 3, 7]) == False", "assert pairs_sum_to_zero([6, 8, 2, 5]) == False", "assert pairs_sum_to_zero([-7, 14, 2, 4, 6, 30]) == False", "assert pairs_sum_to_zero([1, 5, 1, 12]) == False", "assert pairs_sum_to_zero([-3, 9, -1, 3, 2, 30]) == True", "assert pairs_sum_to_zero([-1, 5, -6, 8, 1, 33]) == True", "assert pairs_sum_to_zero([2, 3, 7, 4]) == False", "assert pairs_sum_to_zero([0, 14, -6, 5, 1, 35]) == False", "assert pairs_sum_to_zero([5, 4, -1, 5, 10, 6]) == False", "assert pairs_sum_to_zero([0, 13, -2, 4, 4, 28]) == False", "assert pairs_sum_to_zero([2, 2, 6, 4]) == False", "assert pairs_sum_to_zero([0, 4, -1, 5, 3, 33]) == False", "assert pairs_sum_to_zero([3, 3, 1, 4]) == False", "assert pairs_sum_to_zero([7, 5, -1, 1, 8, 10]) == True", "assert pairs_sum_to_zero([1, 3, 4, 3]) == False", "assert pairs_sum_to_zero([5, 7, 3, 4]) == False", "assert pairs_sum_to_zero([-7, 12, -3, 2, 6, 29]) == False", "assert pairs_sum_to_zero([-4, 9, -3, 6, 7, 31]) == False", "assert pairs_sum_to_zero([4, 7, -9, 5, 4, 6]) == False", "assert pairs_sum_to_zero([-4, 6, 0, 6, 3, 26]) == False", "assert pairs_sum_to_zero([4]) == False", "assert pairs_sum_to_zero([2, 7, 8, 5]) == False", "assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True", "assert pairs_sum_to_zero([1, 4, -1, 8, 8, 12]) == True", "assert pairs_sum_to_zero([-3, 8, 1, 1, 6, 31]) == False", "assert pairs_sum_to_zero([-6, 14, 1, 8, 2, 28]) == False", "assert pairs_sum_to_zero([-3, 6, -5, 7, 7, 30]) == False", "assert pairs_sum_to_zero([3, 4, -7, 1, 2, 3]) == False", "assert pairs_sum_to_zero([-8, 11, -6, 5, 7, 36]) == False", "assert pairs_sum_to_zero([-7, 14, 0, 5, 1, 28]) == False", "assert pairs_sum_to_zero([-5, 9, -1, 7, 4, 34]) == False", "assert pairs_sum_to_zero([1, 3, 3, 5]) == False", "assert pairs_sum_to_zero([-5, 10, 2, 9, 3, 33]) == False", "assert pairs_sum_to_zero([2, 4, 1, 2]) == False", "assert pairs_sum_to_zero([-3, 9, -1, 4, 2, 30]) == False", "assert pairs_sum_to_zero([1, 3, -2, 1]) == False", "assert pairs_sum_to_zero([2, 10, -2, 2, 4, 33]) == True", "assert pairs_sum_to_zero([3, 9, -8, 6, 2, 5]) == False", "assert pairs_sum_to_zero([-6, 7, -4, 4, 2, 32]) == True", "assert pairs_sum_to_zero([3, 4, 10, 1]) == False", "assert pairs_sum_to_zero([7, 8, -10, 7, 2, 4]) == False", "assert pairs_sum_to_zero([-6, 8, 0, 4, 5, 27]) == False", "assert pairs_sum_to_zero([-6, 14, -4, 5, 6, 32]) == True", "assert pairs_sum_to_zero([-5, 12, 1, 8, 6, 31]) == False", "assert pairs_sum_to_zero([-3, 12, -6, 6, 7, 29]) == True", "assert pairs_sum_to_zero([1, 5, 1, 3]) == False", "assert pairs_sum_to_zero([5, 8, -4, 5]) == False", "assert pairs_sum_to_zero([3, 2, 1, 6]) == False", "assert pairs_sum_to_zero([-5, 4, 3, 6, 2, 27]) == False", "assert pairs_sum_to_zero([-1, 11, -4, 3, 5, 28]) == False", "assert pairs_sum_to_zero([-7, 9, 2, 1, 6, 34]) == False", "assert pairs_sum_to_zero([-1, 13, -4, 6, 3, 28]) == False", "assert pairs_sum_to_zero([6, 1, 0, 3]) == False", "assert pairs_sum_to_zero([-5, 5, -2, 3, 1, 32]) == True", "assert pairs_sum_to_zero([1, 5, -1, 8, 8, 4]) == True", "assert pairs_sum_to_zero([1, 2, 2, 2]) == False", "assert pairs_sum_to_zero([6]) == False", "assert pairs_sum_to_zero([2, 8, 1, 4]) == False", "assert pairs_sum_to_zero([2, 6, 2, 5]) == False", "assert pairs_sum_to_zero([2, 14, 3, 6, 2, 29]) == False", "assert pairs_sum_to_zero([-5, 13, -2, 8, 7, 35]) == False", "assert pairs_sum_to_zero([6, 1, 3, 2]) == False", "assert pairs_sum_to_zero([5]) == False", "assert pairs_sum_to_zero([-4, 8, -1, 7, 6, 26]) == False", "assert pairs_sum_to_zero([-4, 12, 0, 1, 7, 28]) == False", "assert pairs_sum_to_zero([5, 3, 6, 7]) == False", "assert pairs_sum_to_zero([4, 6, -8, 1, 2, 8]) == True", "assert pairs_sum_to_zero([-4, 8, -3, 9, 5, 29]) == False"], "nl": "\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    ", "func": "def pairs_sum_to_zero(l):", "examples": ">>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    ", "completions": ["from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there are two distinct elements in the list that sum to zero,\n    and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n        False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n        False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n        False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n        True\n    >>> pairs_sum_to_zero([1])\n        False\n    '''\n    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input. It returns True if there are two distinct elements in the list that sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n        False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n        True\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n        False\n    '''\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there are two distinct elements in the list that sum to zero,\n    and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n        False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n        True\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n        False\n    '''\n    seen = set()\n    for number in l:\n        if -number in seen:\n            return True\n        seen.add(number)\n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there are two distinct elements in the list that sum to zero,\n    and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    '''\n    seen_numbers = set()\n    for number in l:\n        complement = 0 - number\n        if complement in seen_numbers:\n            return True\n        seen_numbers.add(number)\n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input. It returns True if there are two distinct elements in the list that sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    '''\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there are two distinct elements in the list that sum to zero,\n    and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    '''\n    seen_numbers = set()\n    \n    for number in l:\n        complement = 0 - number\n        if complement in seen_numbers:\n            return True\n        seen_numbers.add(number)\n    \n    return False\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"], "plans": ["requirement analysis:\nThe requirement is to check if there are two distinct elements in a list that sum to zero. This is a straightforward problem that can be solved efficiently using a set to track the complements of the sum needed to reach zero. The function should handle edge cases like lists with a single element or no such pairs.\nrequirement pool:\n- Implement the function to check for pairs summing to zero\n- Ensure the function handles edge cases effectively\n- Optimize the function for performance\n- Add comments and docstrings for clarity\n- Test the function with various edge cases\nWe will use a set to efficiently check for pairs of numbers in the list that sum to zero. The set will help us keep track of the numbers we've seen so far, allowing us to quickly determine if the complement (the number that, when added to the current number, equals zero) has already been encountered. This approach ensures that we only pass through the list once, making the function efficient.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distinct elements': means that the two numbers in the pair should be different\n    'sum to zero': means the sum of the two numbers should be 0\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Iterate through the list of integers.\n    (2) For each integer, calculate its complement (i.e., the number that, when added to the current number, equals zero).\n    (3) Check if this complement has already been seen (i.e., if it exists in the set of seen numbers).\n    (4) If the complement is found, return True immediately as we have found a pair that sums to zero.\n    (5) If the loop completes without finding such a pair, return False.\n\n# [edge case] \n    pairs_sum_to_zero([1]) = False\n    Explanation: Since there is only one element in the list, it's impossible to find a pair that sums to zero.\n    pairs_sum_to_zero([0, 0]) = False\n    Explanation: Although there are two elements, both are zero, and their sum is not zero.\n    pairs_sum_to_zero([-1, 1]) = True\n    Explanation: The two elements -1 and 1 sum to zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic already correctly handles the case where the list has only one element by returning False.\n", "requirement analysis:\nThe requirement is to create a function that checks if there are two distinct elements in a list of integers that sum to zero. This is a fundamental problem with practical applications in data analysis and algorithm design. The function should handle edge cases such as lists with a single element or no pairs summing to zero. The solution should be efficient and scalable, suitable for large datasets.\nrequirement pool:\n- The main code should efficiently check for pairs summing to zero.\n- The function should handle edge cases like single-element lists.\n- The solution should be optimized for performance and scalability.\n- The user interface should be simple and intuitive.\n- The system should provide clear feedback on the result.\nTo implement the function efficiently, we will use a set to keep track of the numbers we've seen so far. This allows us to check in constant time whether the complement of the current number (to reach zero when added to it) has already been seen. This approach ensures that the function runs in O(n) time complexity, where n is the number of elements in the list, making it suitable for large datasets.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distinct elements': means that the two elements in the list must be different\n    'sum to zero': means that the sum of the two elements must be 0\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Iterate through the list of integers.\n    (2) For each integer, calculate its complement to reach zero (i.e., complement = -current_integer).\n    (3) Check if this complement has already been seen (i.e., is in the set of seen numbers).\n    (4) If the complement is found in the set, return True immediately as we've found two distinct elements that sum to zero.\n    (5) If the loop completes without finding such a pair, return False.\n\n# [edge case] \n    pairs_sum_to_zero([1]) = False\n    Explanation: There is only one element in the list, so it's impossible to find two distinct elements that sum to zero.\n    pairs_sum_to_zero([1, 3, 5, 0]) = False\n    Explanation: The sum of any two distinct elements in the list does not equal zero.\n    pairs_sum_to_zero([1, 3, -2, 1]) = False\n    Explanation: The sum of any two distinct elements in the list does not equal zero.\n    pairs_sum_to_zero([1, 2, 3, 7]) = False\n    Explanation: The sum of any two distinct elements in the list does not equal zero.\n    pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) = True\n    Explanation: The pair (2, -2) sums to zero, and they are distinct elements in the list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic already correctly handles the case where there is only one element in the list.\n", "requirement analysis:\nThe requirement is to check if there are two distinct elements in a list that sum to zero. This is a common problem in algorithmic challenges and should be approached with a focus on efficiency and clarity. The function should handle edge cases such as lists with a single element or no elements that sum to zero.\nrequirement pool:\n- The main code should efficiently check for pairs that sum to zero.\n- The function should handle lists with a single element and no such pairs.\n- Ensure the function is easy to understand and maintain.\n- Optimize the function for performance, especially for larger lists.\nWe will use a set to keep track of the numbers we've seen so far. For each number in the list, we will check if the opposite of that number (to achieve a sum of zero) is already in the set. If it is, we return True. If we go through the entire list without finding such a pair, we return False. This approach ensures that we only pass through the list once, making it efficient.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the two numbers added together equal zero\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through the list and use a set to keep track of the numbers seen so far. For each number, check if the opposite of that number is in the set. If it is, return True. If the loop completes without finding such a pair, return False.\n\n# [edge case] \n    pairs_sum_to_zero([1]) = False\n    Explanation: With only one element in the list, it's impossible to find a pair that sums to zero, so the expected output is False.\n    pairs_sum_to_zero([0, 0]) = True\n    Explanation: The list contains two zeros, and their sum is zero, so the expected output is True.\n    pairs_sum_to_zero([-1, 1]) = True\n    Explanation: The list contains -1 and 1, which sum to zero, so the expected output is True.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan already correctly handles the case with only one element in the list by returning False.\n", "requirement analysis:\nThe requirement is to check if there are any two distinct elements in the list that sum to zero. This is a basic requirement that can be efficiently implemented using a set to track seen numbers and check for complements.\nrequirement pool:\n- Implement the function pairs_sum_to_zero with a time complexity of O(n).\n- Ensure the function handles edge cases such as empty lists and lists with all identical elements.\n- Optimize the function for readability and maintainability.\n- Include comments in the code to explain the logic.\nTo implement the function pairs_sum_to_zero efficiently, we will use a set to keep track of the numbers we have seen so far. For each number in the list, we will check if its complement (i.e., the number that, when added to the current number, equals zero) is already in the set. If it is, we return True. If we go through the entire list without finding such a pair, we return False. This approach ensures that we only pass through the list once, resulting in a time complexity of O(n).\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distinct elements': means that the two numbers in the pair must be different\n    'sum to zero': means the sum of the two numbers should be 0\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through the list and use a set to keep track of the numbers seen so far. For each number, check if its complement (0 - current number) is in the set. If it is, return True. If not, add the current number to the set and continue. If the loop completes without finding a pair, return False.\n\n# [edge case] \n    pairs_sum_to_zero([0, 0, 0]) = False\n    Explanation: There are no two distinct elements in the list that sum to zero.\n    pairs_sum_to_zero([-1, 1]) = True\n    Explanation: The pair (-1, 1) sums to zero and they are distinct.\n    pairs_sum_to_zero([2, -2, 3, 4]) = True\n    Explanation: The pair (2, -2) sums to zero and they are distinct.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will correctly handle the case where all elements are zero, as it will not find any pair that sums to zero.\n", "requirement analysis:\nThe requirement is to check if there are two distinct elements in the list that sum to zero. This is a basic requirement that should be efficiently handled by the function.\nrequirement pool:\n- Implement a function that checks for pairs summing to zero\n- Ensure the function is efficient and works well with large lists\n- Provide clear and concise documentation for users\n- Test the function for edge cases such as empty lists and lists with all identical elements\n- Optimize the function for performance\nTo implement the function `pairs_sum_to_zero` efficiently, we will use a set to keep track of the numbers we have seen so far. For each number in the list, we will check if the negative of that number is already in the set. If it is, we return `True`. If we go through the entire list without finding such a pair, we return `False`. This approach ensures that we only pass through the list once, making the function O(n) in time complexity.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distinct elements': means that the two elements in the list must be different\n    'sum to zero': means that the sum of the two elements must be 0\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Iterate through the list of integers.\n    (2) For each integer, check if the negative of that integer is already in the set of seen numbers.\n    (3) If such a number is found, return `True` immediately.\n    (4) If the loop completes without finding such a pair, return `False`.\n\n# [edge case] \n    pairs_sum_to_zero([0, 0, 0]) = False\n    Explanation: There are no two distinct elements in the list that sum to zero.\n    pairs_sum_to_zero([-1, 1]) = True\n    Explanation: The elements -1 and 1 are distinct and their sum is zero.\n    pairs_sum_to_zero([1, 2, 3, 4]) = False\n    Explanation: There are no two distinct elements in the list that sum to zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will correctly return `False` since there are no two distinct elements that sum to zero in the given list.\n", "requirement analysis:\nThe original requirements specify a simple function that checks if there are any two distinct elements in a list that sum to zero. This is a fundamental problem that can be used in various applications. The requirements are clear and straightforward, focusing on the functionality and efficiency of the solution.\nrequirement pool:\n- Implement the function pairs_sum_to_zero with a time complexity of O(n).\n- Ensure the function is tested for various edge cases.\n- Provide clear documentation and examples for user understanding.\n- Optimize the function for performance.\n- Design a user-friendly interface for the function.\nTo implement the function pairs_sum_to_zero efficiently, we will use a set to keep track of the numbers we have seen so far. This allows us to check in constant time whether the complement of the current number (i.e., -current_number) has already been seen. This approach ensures that the function runs in O(n) time complexity, where n is the number of elements in the list. We will also ensure that the function is tested for various edge cases to guarantee its correctness and robustness.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distinct elements': means that the two numbers in the list should be different\n    'sum to zero': means the sum of the two numbers should be 0\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through the list and use a set to keep track of the numbers seen so far. For each number, check if its complement (-number) is in the set. If it is, return True. If the loop completes without finding such a pair, return False.\n\n# [edge case] \n    pairs_sum_to_zero([0, 0]) = False\n    Explanation: There are no two distinct elements in the list that sum to zero.\n    pairs_sum_to_zero([-1, 1]) = True\n    Explanation: The list contains two distinct elements, -1 and 1, which sum to zero.\n    pairs_sum_to_zero([1, 2, 3, -3, -2]) = True\n    Explanation: The list contains two distinct elements, 2 and -2, which sum to zero, as well as 3 and -3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic is sufficient to check for the presence of two distinct elements that sum to zero.\n", "requirement analysis:\nThe requirement is to check if there are two distinct elements in a list that sum to zero. This is a common problem in algorithmic tasks and can be efficiently solved using a set to track complements of each number.\nrequirement pool:\n- Implement the function using a set to track complements.\n- Ensure the function handles edge cases like empty lists or lists with one element.\n- Optimize the function for performance, especially for large lists.\n- Include clear documentation and examples in the function's docstring.\n- Test the function with various edge cases to ensure robustness.\nWe will implement the function using a set to track complements of each number. This approach ensures that the function is efficient and can handle large lists. The set will help us quickly check if the complement of the current number exists in the list, which allows us to avoid nested loops and thus optimize the performance.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the two numbers in the list should add up to 0\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Iterate through the list and calculate the complement of each number (i.e., complement = 0 - number).\n    - Check if the complement exists in the set of seen numbers.\n    - If it exists, return True as we have found two distinct elements that sum to zero.\n    - If the loop completes without finding such a pair, return False.\n\n# [edge case] \n    pairs_sum_to_zero([0, 0, 0]) = False\n    Explanation: There are no two distinct elements that sum to zero.\n    pairs_sum_to_zero([-1, 1]) = True\n    Explanation: The elements -1 and 1 sum to zero.\n    pairs_sum_to_zero([1, 2, -3, 4, -1, -2]) = True\n    Explanation: The elements -3 and 3 sum to zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will correctly handle the case where all elements are zero, as it will not find any pair that sums to zero. For the other edge cases, the original logic will work as expected.\n", "requirement analysis:\nThe requirement is to check if there are any two distinct elements in a list that sum to zero. This is a straightforward problem that can be solved efficiently using a set to track seen numbers and check for complements.\nrequirement pool:\n- Implement a function that takes a list of integers and returns True if there are two distinct elements that sum to zero.\n- Ensure the solution is optimized for both time and space complexity.\n- Make the code easy to understand and maintain.\nTo implement the function `pairs_sum_to_zero`, we will use a set to keep track of the numbers we have seen so far. For each number in the list, we will check if the negative of that number is already in the set. If it is, we return True. If we go through the entire list without finding such a pair, we return False. This approach ensures that we only pass through the list once, making it efficient in terms of time complexity.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distinct elements': means that the two elements in the list must be different\n    'sum to zero': means that the sum of the two elements must be equal to zero\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through the list and use a set to keep track of the numbers seen so far. For each number, check if its negative is in the set. If it is, return True. If the loop completes without finding such a pair, return False.\n\n# [edge case] \n    pairs_sum_to_zero([1, 2, -1, -2]) = True\n    Explanation: The pairs (-1, 1) and (-2, 2) both sum to zero, and they are distinct.\n    pairs_sum_to_zero([1, 2, 3, 4]) = False\n    Explanation: No two distinct elements in the list sum to zero.\n    pairs_sum_to_zero([0, 0, 0]) = False\n    Explanation: Although the list contains elements that sum to zero (0 + 0 = 0), there are no distinct elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic already ensures that we check for distinct elements and their sum to zero.\n", "requirement analysis:\nThe original requirements are straightforward: check if there are two distinct elements in the list that sum to zero. This is a basic problem that can be solved efficiently using a set to track seen numbers and check for complements.\nrequirement pool:\n- Implement the function pairs_sum_to_zero with a time complexity of O(n).\n- Ensure the function handles edge cases such as empty lists and lists with one element.\n- Include clear documentation and test cases to demonstrate the function's usage.\n- Optimize the function for performance, especially for large datasets.\nTo implement the function pairs_sum_to_zero efficiently, we will use a set to keep track of the numbers we have seen so far. For each number in the list, we will check if its complement (i.e., the number that, when added to the current number, equals zero) is already in the set. If it is, we return True. If we go through the entire list without finding such a pair, we return False. This approach ensures that we only pass through the list once, resulting in a time complexity of O(n).\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distinct elements': means that the two numbers in the pair must be different\n    'sum to zero': means the sum of the two numbers should be 0\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Iterate through the list\n    - Use a set to keep track of seen numbers\n    - For each number, check if its complement (0 - number) is in the set\n    - If yes, return True\n    - If no, add the number to the set and continue\n    - If the loop ends without finding a pair, return False\n\n# [edge case] \n    pairs_sum_to_zero([0, 0, 0]) = False\n    Explanation: There are no two distinct elements that sum to zero.\n    pairs_sum_to_zero([-1, 1]) = True\n    Explanation: The elements -1 and 1 are distinct and their sum is zero.\n    pairs_sum_to_zero([1, 2, 3, 4]) = False\n    Explanation: There are no two distinct elements that sum to zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will correctly return False as there are no two distinct elements that sum to zero.\n", "requirement analysis:\nThe requirement is to check if there are two distinct elements in a list that sum to zero. This is a common problem in algorithmic challenges and has practical applications in data analysis and problem-solving. The solution should be efficient and handle edge cases such as single-element lists and lists with no pairs summing to zero.\nrequirement pool:\n- The main code should iterate through the list and check pairs of elements to see if their sum is zero.\n- The function should return False if no such pairs are found, and True if at least one pair exists.\n- The solution should be optimized for time complexity, aiming for O(n) or better.\n- The function should handle edge cases such as empty lists or lists with a single element.\nTo implement the function `pairs_sum_to_zero`, we will use a set to keep track of the numbers we have seen so far. As we iterate through the list, we will check if the negative of the current number exists in the set. If it does, we return `True`. If we finish iterating through the list without finding such a pair, we return `False`. This approach ensures that we only pass through the list once, achieving an O(n) time complexity.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the two numbers in the pair should add up to zero.\n    Explanation: This concept involves finding two distinct elements in a list that, when added together, result in zero.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `pairs_sum_to_zero`, we will use a set to keep track of the numbers we have seen so far. As we iterate through the list, we will check if the negative of the current number exists in the set. If it does, we return `True`. If we finish iterating through the list without finding such a pair, we return `False`. This approach ensures that we only pass through the list once, achieving an O(n) time complexity.\n\n# [edge case] \n    pairs_sum_to_zero([1, 3, 5, 0]) = False\n    Explanation: In this case, no two distinct elements sum to zero. The sum of any two elements is either positive or not zero.\n    pairs_sum_to_zero([1, 3, -2, 1]) = False\n    Explanation: Although there is a pair (-1, 1), they are not distinct since both are 1.\n    pairs_sum_to_zero([1, 2, 3, 7]) = False\n    Explanation: No two distinct elements sum to zero. The closest sum is 3 (1 + 2), which is not zero.\n    pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) = True\n    Explanation: The pair (-5, 5) sums to zero and are distinct.\n    pairs_sum_to_zero([1]) = False\n    Explanation: With only one element, it's impossible to have a pair that sums to zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle all cases, including lists with a single element.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [126, 126, 126, 126, 126, 126, 126, 126, 126, 126], "completion": "from typing import List\n## main.py\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n", "passed": true, "pass": true, "pass_num": 10, "round": 832, "repair_prompt": ["def pairs_sum_to_zero(l):\t\n'''pairs_sum_to_zero takes a list of integers as an input. It returns True if there are two distinct elements in the list that sum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''", " def pairs_sum_to_zero(l):\n    '''pairs_sum_to_zero takes a list of integers as an input. It returns True if there are two distinct elements in the list that sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n        False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n        False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n        False\n   ", " def pairs_sum_to_zero(l):\n    '''pairs_sum_to_zero takes a list of integers as an input. It returns True if there are two distinct elements in the list that sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n   "], "mutate_method": "condense_two2one", "parent_index": 510}
