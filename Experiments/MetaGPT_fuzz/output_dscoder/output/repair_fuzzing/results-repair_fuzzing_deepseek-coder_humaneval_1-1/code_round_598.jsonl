{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True if the list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": ["def check(monotonic):\n\tassert monotonic([6, 2, 5, 7, 4, 65]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 7, 4, 3, 64]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 8]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 7, 1, 62]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 1, 1]) == True", "def check(monotonic):\n\tassert monotonic([3, 2, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([2, 7, 7, 15]) == True", "def check(monotonic):\n\tassert monotonic([4, 7, 7, 1, 1, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 8, 13]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 8, 17]) == True", "def check(monotonic):\n\tassert monotonic([2, 22, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([2, 23, 5, 6]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 2, 18]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 2, 6]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 3, 2]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 2, -5]) == True", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 10]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 6, 18]) == False", "def check(monotonic):\n\tassert monotonic([6, 1, 7, 3, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 7, 3, 8, 61]) == False", "def check(monotonic):\n\tassert monotonic([2, 17, 7, 8]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 4, 5, 3, 59]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 5, 5, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([1, 16, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([7, 6, 2, -14]) == True", "def check(monotonic):\n\tassert monotonic([5, 6, 4, 16]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 5, -10]) == False", "def check(monotonic):\n\tassert monotonic([1, 22, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 8, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 1, 6, 4, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 7, 2, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 1, 4]) == False", "def check(monotonic):\n\tassert monotonic([4, 19, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 8, 5, 5, 56]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 6, 25]) == True", "def check(monotonic):\n\tassert monotonic([2, 3, 1, 7]) == False", "def check(monotonic):\n\tassert monotonic([8, 6, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 6, 2, 8, 62]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 6, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 6, 1, 3]) == False", "def check(monotonic):\n\tassert monotonic([4, 2, 5, 7, 6, 62]) == False", "def check(monotonic):\n\tassert monotonic([3, 7, 1, 20]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 17]) == False", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 5, 5, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 20, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 4, 14]) == False", "def check(monotonic):\n\tassert monotonic([3, 17, 2, 14]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 7, 2, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 20]) == True", "def check(monotonic):\n\tassert monotonic([3, 3, 3, -5]) == True", "def check(monotonic):\n\tassert monotonic([4, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 4, 2, 1, 60]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 7, 24]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 1, 1, 2, 61]) == False", "def check(monotonic):\n\tassert monotonic([1, 4, 3, -8]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 3, 5, 10, 63]) == False", "def check(monotonic):\n\tassert monotonic([4, 6, 3, 3, 10, 57]) == False", "def check(monotonic):\n\tassert monotonic([5, 4, 9, 14]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 5, 17]) == True", "def check(monotonic):\n\tassert monotonic([6, 7, 1, 8]) == False", "def check(monotonic):\n\tassert monotonic([9, 2, 5, -5]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 5, 1]) == False", "def check(monotonic):\n\tassert monotonic([9, 9, 9, 9]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 4, 5, 60]) == True", "def check(monotonic):\n\tassert monotonic([6, 2, 5, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 3, -9]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([1, 24, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 7, 6, 6, 61]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 1, 0]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 3, 3, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 8, 5, 9, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 16, 2, 11]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 2, 4, 2, 55]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 8, 7, 7, 65]) == False", "def check(monotonic):\n\tassert monotonic([2, 20, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 3, -10]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 4, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -12]) == True", "def check(monotonic):\n\tassert monotonic([9, 4, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([2, 15, 2, 15]) == False", "def check(monotonic):\n\tassert monotonic([6, 2, 4, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 2, 4]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 1, 3, 63]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 12]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 2, 1]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([6, 5, 7, 7, 6, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 4, 14]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 8, 5]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 1, -7]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 6, 8]) == True", "def check(monotonic):\n\tassert monotonic([9, 5, 5, -14]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 4, 4, 5, 55]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 0, -10]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 21]) == True", "def check(monotonic):\n\tassert monotonic([1, 1, 3, 18]) == True", "def check(monotonic):\n\tassert monotonic([1, 6, 4, -7]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 4, 17]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 2, 5, 60]) == False", "def check(monotonic):\n\tassert monotonic([5, 2, 5, 2]) == False", "def check(monotonic):\n\tassert monotonic([2, 3, 8, 8]) == True", "def check(monotonic):\n\tassert monotonic([5, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([8, 3, 2, -15]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 3, 19]) == False"], "test_case_list": ["assert monotonic([6, 2, 5, 7, 4, 65]) == False", "assert monotonic([3, 3, 7, 4, 3, 64]) == False", "assert monotonic([3, 1, 5, 8]) == False", "assert monotonic([4, 3, 5, 7, 1, 62]) == False", "assert monotonic([4, 4, 1, 1]) == True", "assert monotonic([3, 2, 7, 6]) == False", "assert monotonic([2, 7, 7, 15]) == True", "assert monotonic([4, 7, 7, 1, 1, 57]) == False", "assert monotonic([1, 1, 8, 13]) == True", "assert monotonic([5, 5, 8, 17]) == True", "assert monotonic([2, 22, 8, 7]) == False", "assert monotonic([2, 23, 5, 6]) == False", "assert monotonic([3, 2, 2, 18]) == False", "assert monotonic([2, 2, 2, 6]) == True", "assert monotonic([7, 5, 3, 2]) == True", "assert monotonic([7, 5, 2, -5]) == True", "assert monotonic([6, 19, 9, 12]) == False", "assert monotonic([1, 2, 4, 10]) == True", "assert monotonic([5, 4, 6, 18]) == False", "assert monotonic([6, 1, 7, 3, 4, 56]) == False", "assert monotonic([6, 3, 7, 3, 8, 61]) == False", "assert monotonic([2, 17, 7, 8]) == False", "assert monotonic([5, 1, 4, 5, 3, 59]) == False", "assert monotonic([3, 5, 5, 5, 3, 65]) == False", "assert monotonic([6, 19, 9, 7]) == False", "assert monotonic([1, 16, 9, 7]) == False", "assert monotonic([7, 6, 2, -14]) == True", "assert monotonic([5, 6, 4, 16]) == False", "assert monotonic([1, 6, 5, -10]) == False", "assert monotonic([1, 22, 4, 10]) == False", "assert monotonic([1, 6, 8, 6, 3, 62]) == False", "assert monotonic([1, 5, 1, 6, 4, 62]) == False", "assert monotonic([1, 1, 7, 2, 4, 56]) == False", "assert monotonic([2, 1, 5, 12]) == False", "assert monotonic([1, 3, 1, 4]) == False", "assert monotonic([4, 19, 8, 7]) == False", "assert monotonic([3, 5, 8, 5, 5, 56]) == False", "assert monotonic([1, 3, 6, 25]) == True", "assert monotonic([2, 3, 1, 7]) == False", "assert monotonic([8, 6, 2, 5]) == False", "assert monotonic([6, 3, 6, 2, 8, 62]) == False", "assert monotonic([6, 4, 6, 4]) == False", "assert monotonic([3, 6, 1, 3]) == False", "assert monotonic([4, 2, 5, 7, 6, 62]) == False", "assert monotonic([3, 7, 1, 20]) == False", "assert monotonic([3, 1, 5, 17]) == False", "assert monotonic([5, 5, 7, 5, 5, 57]) == False", "assert monotonic([1, 20, 4, 10]) == False", "assert monotonic([6, 16, 4, 14]) == False", "assert monotonic([3, 17, 2, 14]) == False", "assert monotonic([4, 5, 7, 2, 8, 63]) == False", "assert monotonic([1, 2, 4, 20]) == True", "assert monotonic([3, 3, 3, -5]) == True", "assert monotonic([4, 2, 3, 4]) == False", "assert monotonic([3, 5, 4, 2, 1, 60]) == False", "assert monotonic([6, 4, 7, 24]) == False", "assert monotonic([6, 3, 1, 1, 2, 61]) == False", "assert monotonic([1, 4, 3, -8]) == False", "assert monotonic([2, 6, 3, 5, 10, 63]) == False", "assert monotonic([4, 6, 3, 3, 10, 57]) == False", "assert monotonic([5, 4, 9, 14]) == False", "assert monotonic([1, 3, 5, 17]) == True", "assert monotonic([6, 7, 1, 8]) == False", "assert monotonic([9, 2, 5, -5]) == False", "assert monotonic([3, 2, 5, 1]) == False", "assert monotonic([9, 9, 9, 9]) == True", "assert monotonic([1, 2, 3, 4, 5, 60]) == True", "assert monotonic([6, 2, 5, 6, 3, 62]) == False", "assert monotonic([5, 1, 3, -9]) == False", "assert monotonic([1, 5, 7, 6]) == False", "assert monotonic([1, 24, 9, 12]) == False", "assert monotonic([2, 6, 7, 6, 6, 61]) == False", "assert monotonic([4, 1, 1, 0]) == True", "assert monotonic([2, 1, 3, 3, 3, 65]) == False", "assert monotonic([1, 2, 8, 5, 9, 55]) == False", "assert monotonic([2, 16, 2, 11]) == False", "assert monotonic([6, 16, 3, 15]) == False", "assert monotonic([1, 5, 2, 4, 2, 55]) == False", "assert monotonic([3, 1, 8, 7, 7, 65]) == False", "assert monotonic([2, 20, 2, 5]) == False", "assert monotonic([7, 2, 3, -10]) == False", "assert monotonic([4, 3, 5, 4, 8, 63]) == False", "assert monotonic([7, 2, 1, -12]) == True", "assert monotonic([9, 4, 1, -6]) == True", "assert monotonic([2, 15, 2, 15]) == False", "assert monotonic([6, 2, 4, 4]) == False", "assert monotonic([3, 3, 2, 4]) == False", "assert monotonic([2, 2, 8, 1, 3, 63]) == False", "assert monotonic([2, 2, 8, 12]) == True", "assert monotonic([3, 4, 2, 1]) == False", "assert monotonic([4, 4, 3, 15]) == False", "assert monotonic([2, 6, 5, 3]) == False", "assert monotonic([6, 5, 7, 7, 6, 55]) == False", "assert monotonic([2, 4, 4, 14]) == True", "assert monotonic([5, 4, 8, 5]) == False", "assert monotonic([4, 5, 1, -7]) == False", "assert monotonic([3, 3, 6, 8]) == True", "assert monotonic([9, 5, 5, -14]) == True", "assert monotonic([2, 1, 4, 4, 5, 55]) == False", "assert monotonic([4, 1, 0, -10]) == True", "assert monotonic([5, 5, 7, 21]) == True", "assert monotonic([1, 1, 3, 18]) == True", "assert monotonic([1, 6, 4, -7]) == False", "assert monotonic([4, 3, 4, 17]) == False", "assert monotonic([7, 2, 1, -6]) == True", "assert monotonic([1, 2, 3, 2, 5, 60]) == False", "assert monotonic([5, 2, 5, 2]) == False", "assert monotonic([2, 3, 8, 8]) == True", "assert monotonic([5, 2, 3, 4]) == False", "assert monotonic([8, 3, 2, -15]) == True", "assert monotonic([3, 4, 3, 15]) == False", "assert monotonic([2, 1, 5, 3]) == False", "assert monotonic([2, 4, 3, 19]) == False"], "nl": "Return True is list elements are monotonically increasing or decreasing.\n    ", "func": "def monotonic(l: list):", "examples": ">>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    ", "completions": ["from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n        True\n    >>> monotonic([1, 20, 4, 10])\n        False\n    >>> monotonic([4, 1, 0, -10])\n        True\n    '''\n    if len(l) <= 1:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n        True\n    >>> monotonic([1, 20, 4, 10])\n        False\n    >>> monotonic([4, 1, 0, -10])\n        True\n    '''\n    if len(l) <= 1:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n        True\n    >>> monotonic([1, 20, 4, 10])\n        False\n    >>> monotonic([4, 1, 0, -10])\n        True\n    '''\n    if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([1, 2, 2, 2])\n    True\n    >>> monotonic([5, 4, 3, 2, 1])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            decreasing = False\n        elif l[i] > l[i + 1]:\n            increasing = False\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([1, 2, 2, 2])\n    True\n    >>> monotonic([5, 4, 3, 2, 1])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Check if a list is monotonically increasing or decreasing.\n\n    Args:\n        l (list): The list to check.\n\n    Returns:\n        bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Check if a list is monotonically increasing or decreasing.\n\n    Args:\n        l (list): The list to check for monotonicity.\n\n    Returns:\n        bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Check if the list is monotonic.\n\n    A list is monotonic if it is either entirely non-decreasing or non-increasing.\n\n    Args:\n        l (list): The input list to check.\n\n    Returns:\n        bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n\n# Example usage:\n# print(monotonic([1, 2, 2, 3]))  # True\n# print(monotonic([1, 3, 2, 4]))  # False\n# print(monotonic([1, 1, 1, 1]))  # True\n# print(monotonic([5]))           # True\n# print(monotonic([10, 5, 3, 1])) # True\n"], "plans": ["requirement analysis:\nThe requirement is to determine if a list is monotonically increasing or decreasing. This involves checking if each element in the list is either greater than or equal to the previous element for increasing, or less than or equal to the previous element for decreasing. The function should return True if the list is either monotonically increasing or decreasing, and False otherwise.\nrequirement pool:\n- The main code should correctly implement the monotonic function.\n- The function should handle lists of different lengths and element types.\n- The function should be efficient and handle edge cases such as empty lists or lists with identical elements.\n- The function should be tested thoroughly to ensure it works as expected.\n- Documentation should be provided for the function.\nTo implement the monotonic function, we will use Python's built-in capabilities to iterate through the list and compare each element with the next one. We will check for both increasing and decreasing monotonicity by maintaining a flag for each type. If the list is found to be monotonic in either direction, we will return True. Otherwise, we will return False.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list elements are consistently increasing or decreasing without any fluctuations.\n    Explanation: A list is considered monotonic if it either strictly increases (each element is less than the next) or strictly decreases (each element is greater than the next) throughout the list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the monotonic function, we will follow these steps:\n    1. Check if the list is empty or has only one element. If so, it is trivially monotonic.\n    2. Iterate through the list and compare each element with the next one to check for increasing or decreasing order.\n    3. If we find any element that breaks the monotonic pattern, return False.\n    4. If the loop completes without finding any breaking elements, return True.\n\n# [edge case] \n    monotonic([1, 2, 2, 3]) = True\n    Explanation: The list is monotonically increasing as each element is less than or equal to the next, but since there are no strict inequalities, it is considered increasing.\n    monotonic([3, 2, 2, 1]) = True\n    Explanation: The list is monotonically decreasing as each element is greater than or equal to the next, but since there are no strict inequalities, it is considered decreasing.\n    monotonic([1, 3, 2, 4]) = False\n    Explanation: The list is not monotonic because it first increases (1 < 3) and then decreases (3 > 2), followed by an increase again (2 < 4).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan already covers all scenarios.\n", "requirement analysis:\nThe requirement is to determine if a list is monotonically increasing or decreasing. This involves checking if each element in the list is either greater than or equal to the previous element for increasing, or less than or equal to the previous element for decreasing. The function should return True if the list is either monotonically increasing or decreasing, and False otherwise.\nrequirement pool:\n- The main code should correctly implement the monotonic function.\n- The function should handle lists of different lengths and element types.\n- The function should be efficient and handle edge cases such as empty lists or lists with identical elements.\n- The function should be tested thoroughly to ensure it works as expected.\n- Documentation should be provided for the function.\nTo implement the `monotonic` function, we will use Python's built-in capabilities to iterate through the list and compare each element with the next one. We will check for both increasing and decreasing monotonicity by maintaining a flag for each type. If the list is found to be monotonic in either direction, we will return True; otherwise, we will return False.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list elements are consistently increasing or decreasing without any fluctuations.\n    Explanation: A list is considered monotonic if it either strictly increases or strictly decreases throughout its elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the `monotonic` function, we need to iterate through the list and compare each element with the next one. We will check for both increasing and decreasing monotonicity by maintaining a flag for each type. If the list is found to be monotonic in either direction, we will return True; otherwise, we will return False.\n\n# [edge case] \n    monotonic([1, 1, 1, 1]) = True\n    Explanation: The list is considered monotonic if it is either entirely non-decreasing or non-increasing, so a list with all identical elements is considered monotonic.\n    monotonic([10]) = True\n    Explanation: A single-element list is trivially monotonic.\n    monotonic([5, 3, 1]) = True\n    Explanation: The list is strictly decreasing, which satisfies the monotonic condition.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic already correctly handles lists with a single element or all identical elements.\n", "requirement analysis:\nThe original requirements specify a function that checks if a list is monotonically increasing or decreasing. This is a simple yet important function that can be used in various applications, including data validation and algorithm design. The function should be efficient and handle edge cases such as empty lists or lists with identical elements.\nrequirement pool:\n- The main code should accurately determine if a list is monotonically increasing or decreasing.\n- The function should handle edge cases such as empty lists and lists with identical elements.\n- The function should be optimized for performance to handle large lists efficiently.\nWe will implement the function `monotonic` to check if a list is monotonically increasing or decreasing. The function will be optimized for performance to handle large lists efficiently. We will use Python's built-in functions and a simple loop to compare adjacent elements in the list.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list elements are consistently increasing or decreasing without any reversals.\n    Explanation: A list is considered monotonic if it either strictly increases (each element is less than the next) or strictly decreases (each element is greater than the next) throughout the list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the `monotonic` function, we will follow these steps:\n    1. Check if the list has less than two elements, if so, return True since a single element or an empty list is trivially monotonic.\n    2. Iterate through the list and compare each element with the next one to determine if the list is strictly increasing or strictly decreasing.\n    3. If we find any reversal in the trend (an element that is not less than or equal to the next for increasing, or greater than or equal to the next for decreasing), return False.\n    4. If no reversals are found, return True.\n\n# [edge case] \n    monotonic([1, 2, 2, 3]) = True\n    Explanation: The list is strictly increasing, so it is monotonic.\n    monotonic([3, 2, 2, 1]) = True\n    Explanation: The list is strictly decreasing, so it is monotonic.\n    monotonic([1, 3, 2, 4]) = False\n    Explanation: The list has a reversal from increasing to decreasing (from 1 to 3), so it is not monotonic.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the logic provided in the plan already covers all scenarios. The function will return True for lists that are strictly increasing or strictly decreasing, and False otherwise.\n", "requirement analysis:\nThe requirement is to create a function that checks if a list is monotonically increasing or decreasing. This involves comparing each element with the next one to ensure the sequence follows a consistent trend. The function should handle edge cases such as lists with repeated elements and should be efficient in terms of both time and space complexity.\nrequirement pool:\n- Implement the function to check for monotonicity\n- Ensure the function works correctly for lists of varying lengths\n- Optimize the function for performance\n- Document the function clearly for maintainability\n- Test the function with various edge cases\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and a few simple loops. The function will compare each element with the next one to determine if the sequence follows a consistent trend. We will ensure the function handles edge cases such as lists with repeated elements efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list elements are consistently increasing or decreasing without any fluctuations.\n    Explanation: A list is considered monotonic if it either strictly increases or strictly decreases throughout its elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function, we will follow these steps:\n    1. Check if the list has less than 2 elements, if so, return True since a single element or an empty list is trivially monotonic.\n    2. Initialize two boolean variables, `increasing` and `decreasing`, to True.\n    3. Iterate through the list and compare each element with the next one to update the `increasing` and `decreasing` variables.\n    4. Return the result of the logical OR operation between `increasing` and `decreasing`.\n\n# [edge case] \n    monotonic([1, 2, 2, 2]) = True\n    Explanation: The list is monotonically increasing because all elements are equal, so it satisfies both increasing and decreasing conditions.\n    monotonic([5, 4, 3, 2, 1]) = True\n    Explanation: The list is monotonically decreasing as each element is greater than the next one.\n    monotonic([1, 2, 4, 20]) = True\n    Explanation: The list is monotonically increasing as each element is less than the next one.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan already covers lists with repeated elements and handles them correctly by considering both increasing and decreasing conditions.\n", "requirement analysis:\nThe requirement is to create a function that checks if a list is monotonically increasing or decreasing. This involves comparing each element with the next one to ensure the sequence follows a consistent trend. The function should handle edge cases such as lists with repeated elements and should be efficient in terms of both time and space complexity.\nrequirement pool:\n- Implement the function to check for monotonicity\n- Ensure the function works correctly for lists of varying lengths\n- Optimize the function for performance\n- Include tests to verify the function's correctness\n- Document the function and its usage\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and ensure the function is efficient and handles edge cases. We will compare each element with the next one to ensure the sequence follows a consistent trend. The function will handle lists with repeated elements and will be optimized for performance.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list elements are consistently increasing or decreasing without any fluctuations.\n    Explanation: A list is considered monotonic if it either strictly increases or strictly decreases throughout its elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function, we will follow these steps:\n    1. Check if the list has less than 2 elements, if so, return True since a single element or an empty list is trivially monotonic.\n    2. Iterate through the list and compare each element with the next one to determine if the sequence is consistently increasing or decreasing.\n    3. Return True if the sequence is monotonic, otherwise return False.\n\n# [edge case] \n    monotonic([1, 2, 2, 2]) = True\n    Explanation: The list is monotonically increasing because all elements are equal, which is a special case of being monotonic increasing.\n    monotonic([5, 4, 3, 2, 1]) = True\n    Explanation: The list is monotonically decreasing as each element is less than the next one.\n    monotonic([1, 3, 2, 4]) = False\n    Explanation: The list is not monotonic because it first increases from 1 to 3 and then decreases from 3 to 2, followed by an increase again to 4.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan already covers lists with repeated elements and multiple fluctuations.\n", "requirement analysis:\nThe requirement is to create a function that checks if a list is monotonically increasing or decreasing. This involves comparing each element with the next one to ensure the sequence follows a consistent trend. The function should handle lists of various lengths and values, including edge cases like lists with repeated elements.\nrequirement pool:\n- Implement the function to check for monotonicity\n- Ensure the function works efficiently\n- Handle edge cases and test with various inputs\n- Optimize the function for performance\n- Document the function and provide examples of usage\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and a few simple loops. This approach will ensure efficiency and readability. We will compare each element with the next one to determine the trend of the list.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list elements are consistently increasing or decreasing without any reversals.\n    Explanation: A list is considered monotonic if it either strictly increases or strictly decreases throughout its elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and a few simple loops. This approach will ensure efficiency and readability. We will compare each element with the next one to determine the trend of the list.\n\n# [edge case] \n    monotonic([1, 2, 2, 2]) = True\n    Explanation: The list is monotonically increasing because all elements are equal, so it can be considered as both increasing and decreasing.\n    monotonic([5, 4, 3, 2, 1]) = True\n    Explanation: The list is monotonically decreasing as each element is greater than the next one.\n    monotonic([1, 2, 4, 20]) = True\n    Explanation: The list is monotonically increasing as each element is less than the next one.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle lists where all elements are the same.\n", "requirement analysis:\nThe requirement is to determine if a list is monotonically increasing or decreasing. This involves checking if each element in the list is either greater than or equal to the previous element for increasing, or less than or equal to the previous element for decreasing. The function should return True if the list is either monotonically increasing or decreasing, and False otherwise.\nrequirement pool:\n- Implement the function to check for monotonicity\n- Ensure the function handles both increasing and decreasing lists\n- Optimize the function for efficiency\n- Add test cases to verify the function's correctness\n- Document the function and its usage\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and leverage a simple approach. This will involve iterating through the list and comparing each element with the next one to determine the monotonicity.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list either consistently increases or consistently decreases without any reversals.\n    Explanation: A list is considered monotonic if it either always goes up (increasing) or always goes down (decreasing).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function, we will:\n    1. Check if the list has less than 2 elements, if so, return True since a single element or an empty list is trivially monotonic.\n    2. Iterate through the list and compare each element with the next one to determine if the list is increasing or decreasing.\n    3. If at any point the direction changes (from increasing to decreasing or vice versa), return False.\n    4. If the loop completes without finding any direction change, return True.\n\n# [edge case] \n    monotonic([1, 1, 1, 1]) = True\n    Explanation: The list is considered monotonic as all elements are equal, hence it is both non-increasing and non-decreasing.\n    monotonic([1, 3, 2, 4]) = False\n    Explanation: The list is not monotonic as it changes from increasing to decreasing at some point.\n    monotonic([]) = True\n    Explanation: An empty list is trivially monotonic.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan already covers the edge case of an empty list.\n", "requirement analysis:\nThe requirement is to determine if a list is monotonically increasing or decreasing. This involves checking if each element in the list is either greater than or equal to the previous element for increasing, or less than or equal to the previous element for decreasing. The function should return True if the list is either monotonically increasing or decreasing, and False otherwise.\nrequirement pool:\n- Implement the function to check for monotonicity\n- Ensure the function handles both increasing and decreasing lists\n- Optimize the function for efficiency\n- Add test cases to verify the function's correctness\n- Document the function and its usage\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and ensure the function is efficient. We will compare each element with the next one to determine if the list is monotonic.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list elements are consistently increasing or decreasing without any reversals.\n    Explanation: A list is considered monotonic if it either strictly increases or strictly decreases throughout its elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function, we will follow these steps:\n    1. Check if the list has less than 2 elements, if so, return True since a single element or an empty list is trivially monotonic.\n    2. Iterate through the list and compare each element with the next one to determine if the list is increasing or decreasing.\n    3. If we find any reversal in the trend (e.g., increasing then decreasing), return False.\n    4. If the loop completes without finding a reversal, return True.\n\n# [edge case] \n    monotonic([1, 1, 1, 1]) = True\n    Explanation: The list is not strictly increasing or decreasing, but it is considered monotonic because it does not have any reversals.\n    monotonic([10]) = True\n    Explanation: A single element list is trivially monotonic.\n    monotonic([]) = True\n    Explanation: An empty list is also considered monotonic.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the logic provided can handle lists with fewer than 2 elements and empty lists.\n", "requirement analysis:\nThe requirement is to create a function that checks if a list is monotonically increasing or decreasing. This is a fundamental concept in data structures and algorithms, and it has practical applications in various fields including finance and statistics. The function should be easy to use and understand, making it accessible for both novice users and advanced developers.\nrequirement pool:\n- The main code should be concise and efficient.\n- The function should handle edge cases such as empty lists and lists with a single element.\n- The function should provide clear and informative error messages for invalid inputs.\n- The function should be compatible with both Python 2 and Python 3.\n- The function should be documented with examples and usage instructions.\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and leverage a simple approach to ensure efficiency. The function will compare each element with the next one to determine the trend. If the list is empty or has only one element, it will automatically return True. For lists with more than one element, we will iterate through the list and check if the elements are consistently increasing or decreasing. If the list is found to be neither increasing nor decreasing, the function will return False.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list elements are consistently increasing or decreasing without any fluctuations.\n    Explanation: A list is considered monotonic if it either strictly increases or strictly decreases throughout its elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Steps to implement the function:\n    1. Check if the list is empty or has only one element. If so, return True.\n    2. Initialize two boolean variables, `increasing` and `decreasing`, to True.\n    3. Iterate through the list and compare each element with the next one.\n    4. If the current element is greater than the next element, set `increasing` to False.\n    5. If the current element is less than the next element, set `decreasing` to False.\n    6. If both `increasing` and `decreasing` are False, return False.\n    7. After the loop, return the value of `increasing` or `decreasing` (since one of them will be True if the list is monotonic).\n\n# [edge case] \n    monotonic([1, 2, 2, 3]) = True\n    Explanation: The list is strictly increasing, so it meets the monotonic condition.\n    monotonic([3, 2, 2, 1]) = True\n    Explanation: The list is strictly decreasing, so it meets the monotonic condition.\n    monotonic([1, 3, 2, 4]) = False\n    Explanation: The list is neither strictly increasing nor strictly decreasing, so it does not meet the monotonic condition.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan already covers all scenarios, including lists with repeated elements.\n", "requirement analysis:\nThe requirement is to check if a list is monotonically increasing or decreasing. This involves comparing each element with the next one to ensure the sequence follows a consistent trend. The function should return True if the list is monotonic, and False otherwise.\nrequirement pool:\n- The main code should correctly implement the monotonic function.\n- The function should handle lists of various lengths and element types.\n- The function should be optimized for performance, especially for long lists.\n- The function should include comprehensive test cases to ensure correctness.\n- The function should be documented with clear examples and usage instructions.\nTo implement the monotonic function, we will use Python's built-in capabilities to compare elements in the list. We will check if the list is either entirely non-decreasing or non-increasing. This can be efficiently done by iterating through the list once and comparing each element with the next one.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list is either entirely non-decreasing or non-increasing.\n    Explanation: A list is considered monotonic if its elements either consistently increase or consistently decrease without any reversal in trend.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the monotonic function, we will use Python's built-in capabilities to compare elements in the list. We will check if the list is either entirely non-decreasing or non-increasing. This can be efficiently done by iterating through the list once and comparing each element with the next one.\n\n# [edge case] \n    monotonic([1, 1, 1, 1]) = True\n    Explanation: Since all elements are the same, the list is considered monotonic as it neither increases nor decreases.\n    monotonic([5]) = True\n    Explanation: A single element list is trivially monotonic.\n    monotonic([10, 5, 3, 1]) = True\n    Explanation: The list decreases consistently, so it is monotonic.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic to check monotonicity can handle lists with all identical elements or single-element lists without additional complexity.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [113, 113, 113, 113, 113, 113, 113, 113, 113, 113], "completion": "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Check if the list is monotonic.\n\n    A list is monotonic if it is either entirely non-decreasing or non-increasing.\n\n    Args:\n        l (list): The input list to check.\n\n    Returns:\n        bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n\n# Example usage:\n# print(monotonic([1, 2, 2, 3]))  # True\n# print(monotonic([1, 3, 2, 4]))  # False\n# print(monotonic([1, 1, 1, 1]))  # True\n# print(monotonic([5]))           # True\n# print(monotonic([10, 5, 3, 1])) # True\n", "passed": true, "pass": true, "pass_num": 10, "round": 598, "repair_prompt": ["def monotonic(l: list):\t\n'''Return True if the list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", " def monotonic(l: list):\t\n'''Return True if the list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([1, 2, 2, 2])\n    True\n    >>> monotonic([5, 4, 3, 2, 1])\n    True\n    >>> monotonic([", " def monotonic(l: list):\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''"], "mutate_method": "condense_two2one", "parent_index": 152}
