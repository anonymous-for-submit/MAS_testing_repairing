{"task_id": "HumanEval/58", "prompt": "def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "entry_point": "common", "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "test": ["def check(common):\n\tassert common([6, 5, 7, 10], [8, 4]) == []", "def check(common):\n\tassert common([6, 3, 2, 37, 657, 2, 6], [5, 9, 1, 6, 4, 654, 125]) == [6]", "def check(common):\n\tassert common([1, 6, 5, 9], [1, 6, 1]) == [1, 6]", "def check(common):\n\tassert common([8, 7, 6, 13], [7, 2]) == [7]", "def check(common):\n\tassert common([1, 1, 3, 11], [5, 3, 2]) == [3]", "def check(common):\n\tassert common([7, 8, 6, 11], [4, 5, 9]) == []", "def check(common):\n\tassert common([1, 6, 5, 34, 651, 3, 3], [7, 8, 1, 7, 9, 653, 121]) == [1]", "def check(common):\n\tassert common([6, 6, 4, 12], [3, 1]) == []", "def check(common):\n\tassert common([6, 1, 5, 36, 648, 1, 6], [3, 4, 2, 1, 12, 654, 123]) == [1]", "def check(common):\n\tassert common([6, 3, 7, 6], [3, 5, 7]) == [3, 7]", "def check(common):\n\tassert common([4, 8, 2, 9], [3, 1]) == []", "def check(common):\n\tassert common([3, 5, 5, 8], [7, 6]) == []", "def check(common):\n\tassert common([1, 8, 3, 4], [8, 7, 6]) == [8]", "def check(common):\n\tassert common([5, 2, 6, 30, 650, 7, 3], [7, 10, 2, 4, 4, 651, 126]) == [2, 7]", "def check(common):\n\tassert common([4, 6, 6, 7], [8, 6, 9]) == [6]", "def check(common):\n\tassert common([3, 7, 6, 3], [2, 4, 5]) == []", "def check(common):\n\tassert common([7, 4, 3, 10], [3, 1]) == [3]", "def check(common):\n\tassert common([3, 3, 1, 4], [4, 6, 4]) == [4]", "def check(common):\n\tassert common([4, 5, 2, 5], [1, 7, 5]) == [5]", "def check(common):\n\tassert common([5, 3, 4, 35, 652, 1, 1], [9, 6, 2, 8, 6, 653, 122]) == []", "def check(common):\n\tassert common([3, 1, 6, 11], [6, 6]) == [6]", "def check(common):\n\tassert common([7, 4, 7, 13], [8, 4]) == [4]", "def check(common):\n\tassert common([4, 4, 4, 34, 652, 5, 10], [8, 2, 1, 4, 5, 652, 117]) == [4, 5, 652]", "def check(common):\n\tassert common([2, 8, 3, 29, 650, 1, 7], [3, 6, 2, 3, 7, 652, 116]) == [2, 3, 7]", "def check(common):\n\tassert common([5, 8, 7, 3], [6, 4]) == []", "def check(common):\n\tassert common([2, 2, 1, 29, 650, 4, 2], [3, 10, 6, 2, 11, 651, 119]) == [2]", "def check(common):\n\tassert common([3, 3, 2, 30, 656, 3, 4], [6, 11, 2, 4, 4, 652, 123]) == [2, 4]", "def check(common):\n\tassert common([6, 1, 4, 33, 651, 4, 3], [4, 10, 1, 10, 12, 657, 126]) == [1, 4]", "def check(common):\n\tassert common([6, 6, 4, 5], [3, 3, 8]) == []", "def check(common):\n\tassert common([5, 5, 4, 34, 648, 5, 5], [3, 7, 6, 2, 10, 648, 116]) == [648]", "def check(common):\n\tassert common([2, 1, 7, 9], [6, 3]) == []", "def check(common):\n\tassert common([4, 1, 4, 12], [5, 1, 7]) == [1]", "def check(common):\n\tassert common([7, 6, 3, 9], [6, 5]) == [6]", "def check(common):\n\tassert common([2, 3, 3, 9], [5, 2]) == [2]", "def check(common):\n\tassert common([1, 4, 1, 32, 657, 7, 6], [4, 10, 2, 2, 4, 650, 124]) == [4]", "def check(common):\n\tassert common([8, 3, 4, 10], [8, 7]) == [8]", "def check(common):\n\tassert common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]", "def check(common):\n\tassert common([5, 2, 2, 30, 654, 5, 1], [3, 3, 2, 10, 6, 657, 126]) == [2]", "def check(common):\n\tassert common([2, 7, 4, 3], [8, 7, 5]) == [7]", "def check(common):\n\tassert common([4, 5, 7, 12], [7, 1]) == [7]", "def check(common):\n\tassert common([9, 3, 7, 4], [4, 2, 4]) == [4]", "def check(common):\n\tassert common([3, 1, 3, 10], [3, 3, 9]) == [3]", "def check(common):\n\tassert common([4, 4, 1, 37, 654, 7, 5], [3, 11, 2, 6, 9, 656, 120]) == []", "def check(common):\n\tassert common([2, 6, 2, 8], [5, 2]) == [2]", "def check(common):\n\tassert common([2, 4, 3, 12], [4, 5, 6]) == [4]", "def check(common):\n\tassert common([4, 4, 7, 8], [4, 4, 9]) == [4]", "def check(common):\n\tassert common([1, 6, 6, 12], [6, 2, 9]) == [6]", "def check(common):\n\tassert common([2, 7, 1, 4], [1, 2, 1]) == [1, 2]", "def check(common):\n\tassert common([2, 5, 6, 32, 649, 3, 9], [8, 6, 1, 4, 4, 658, 117]) == [6]", "def check(common):\n\tassert common([2, 1, 5, 37, 657, 7, 1], [4, 9, 3, 1, 12, 649, 122]) == [1]", "def check(common):\n\tassert common([5, 5, 7, 7], [5, 2]) == [5]", "def check(common):\n\tassert common([5, 3, 2, 8], [3, 2]) == [2, 3]", "def check(common):\n\tassert common([5, 4, 5, 32, 655, 6, 2], [2, 10, 4, 2, 14, 656, 117]) == [2, 4]", "def check(common):\n\tassert common([3, 4, 4, 8], [3, 3, 9]) == [3]", "def check(common):\n\tassert common([5, 2, 1, 3], [8, 3]) == [3]", "def check(common):\n\tassert common([3, 8, 3, 35, 651, 4, 2], [1, 12, 6, 10, 4, 654, 119]) == [4]", "def check(common):\n\tassert common([5, 6, 4, 8], [3, 7, 2]) == []", "def check(common):\n\tassert common([7, 7, 5, 11], [3, 4]) == []", "def check(common):\n\tassert common([4, 3, 2, 8], []) == []", "def check(common):\n\tassert common([7, 7, 7, 3], [2, 4]) == []", "def check(common):\n\tassert common([2, 9, 3, 36, 649, 6, 7], [10, 12, 4, 4, 14, 656, 116]) == []", "def check(common):\n\tassert common([3, 8, 6, 6], [4, 3, 3]) == [3]", "def check(common):\n\tassert common([1, 8, 7, 3], [2, 6]) == []", "def check(common):\n\tassert common([1, 4, 5, 11], [1, 6, 1]) == [1]", "def check(common):\n\tassert common([6, 2, 3, 8], [7, 6, 8]) == [6, 8]", "def check(common):\n\tassert common([1, 7, 4, 30, 653, 1, 1], [6, 9, 2, 2, 13, 650, 120]) == []", "def check(common):\n\tassert common([6, 8, 4, 32, 657, 7, 6], [4, 10, 1, 5, 14, 652, 120]) == [4]", "def check(common):\n\tassert common([2, 7, 7, 32, 650, 5, 6], [7, 2, 4, 3, 13, 654, 117]) == [2, 7]", "def check(common):\n\tassert common([1, 4, 7, 30, 658, 3, 10], [6, 7, 3, 10, 10, 658, 117]) == [3, 7, 10, 658]", "def check(common):\n\tassert common([8, 4, 1, 9], [6, 3]) == []", "def check(common):\n\tassert common([2, 1, 4, 37, 657, 3, 7], [8, 5, 5, 10, 7, 654, 121]) == [7]", "def check(common):\n\tassert common([9, 7, 7, 7], [5, 2]) == []", "def check(common):\n\tassert common([4, 6, 3, 31, 648, 7, 10], [1, 10, 4, 7, 7, 653, 117]) == [4, 7, 10]", "def check(common):\n\tassert common([6, 5, 2, 3], [3, 3, 3]) == [3]", "def check(common):\n\tassert common([4, 4, 1, 8], [1, 5, 7]) == [1]", "def check(common):\n\tassert common([8, 4, 6, 5], [1, 1]) == []", "def check(common):\n\tassert common([4, 5, 3, 10], [7, 5]) == [5]", "def check(common):\n\tassert common([7, 1, 7, 13], [3, 1]) == [1]", "def check(common):\n\tassert common([1, 5, 5, 29, 655, 4, 1], [5, 3, 2, 1, 5, 648, 118]) == [1, 5]", "def check(common):\n\tassert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "def check(common):\n\tassert common([7, 7, 1, 4], [5, 6]) == []", "def check(common):\n\tassert common([5, 4, 2, 36, 648, 7, 10], [6, 8, 1, 5, 11, 649, 126]) == [5]", "def check(common):\n\tassert common([8, 1, 1, 3], [5, 6]) == []", "def check(common):\n\tassert common([6, 3, 6, 3], [8, 5, 8]) == []", "def check(common):\n\tassert common([6, 8, 7, 32, 654, 7, 3], [7, 7, 2, 5, 10, 654, 123]) == [7, 654]", "def check(common):\n\tassert common([2, 2, 6, 11], [5, 6, 1]) == [6]", "def check(common):\n\tassert common([1, 4, 6, 39, 653, 4, 3], [6, 12, 2, 3, 14, 654, 116]) == [3, 6]", "def check(common):\n\tassert common([1, 3, 4, 9], [7, 3]) == [3]", "def check(common):\n\tassert common([9, 6, 6, 7], [7, 7, 1]) == [7]", "def check(common):\n\tassert common([5, 6, 2, 34, 654, 3, 7], [7, 9, 1, 7, 8, 650, 122]) == [7]", "def check(common):\n\tassert common([8, 2, 7, 4], [7, 7, 1]) == [7]", "def check(common):\n\tassert common([3, 2, 1, 37, 654, 7, 6], [2, 3, 2, 6, 4, 649, 123]) == [2, 3, 6]", "def check(common):\n\tassert common([9, 2, 7, 4], [5, 4, 1]) == [4]", "def check(common):\n\tassert common([8, 1, 4, 10], [4, 2]) == [4]", "def check(common):\n\tassert common([2, 8, 5, 10], [8, 4]) == [8]", "def check(common):\n\tassert common([8, 4, 4, 6], [3, 6]) == [6]", "def check(common):\n\tassert common([3, 6, 6, 7], [7, 4, 2]) == [7]", "def check(common):\n\tassert common([3, 4, 3, 11], [4, 1, 7]) == [4]", "def check(common):\n\tassert common([3, 1, 4, 5], [1, 1]) == [1]", "def check(common):\n\tassert common([3, 2, 5, 37, 652, 2, 3], [5, 4, 6, 7, 9, 651, 120]) == [5]"], "test_case_list": ["assert common([6, 5, 7, 10], [8, 4]) == []", "assert common([6, 3, 2, 37, 657, 2, 6], [5, 9, 1, 6, 4, 654, 125]) == [6]", "assert common([1, 6, 5, 9], [1, 6, 1]) == [1, 6]", "assert common([8, 7, 6, 13], [7, 2]) == [7]", "assert common([1, 1, 3, 11], [5, 3, 2]) == [3]", "assert common([7, 8, 6, 11], [4, 5, 9]) == []", "assert common([1, 6, 5, 34, 651, 3, 3], [7, 8, 1, 7, 9, 653, 121]) == [1]", "assert common([6, 6, 4, 12], [3, 1]) == []", "assert common([6, 1, 5, 36, 648, 1, 6], [3, 4, 2, 1, 12, 654, 123]) == [1]", "assert common([6, 3, 7, 6], [3, 5, 7]) == [3, 7]", "assert common([4, 8, 2, 9], [3, 1]) == []", "assert common([3, 5, 5, 8], [7, 6]) == []", "assert common([1, 8, 3, 4], [8, 7, 6]) == [8]", "assert common([5, 2, 6, 30, 650, 7, 3], [7, 10, 2, 4, 4, 651, 126]) == [2, 7]", "assert common([4, 6, 6, 7], [8, 6, 9]) == [6]", "assert common([3, 7, 6, 3], [2, 4, 5]) == []", "assert common([7, 4, 3, 10], [3, 1]) == [3]", "assert common([3, 3, 1, 4], [4, 6, 4]) == [4]", "assert common([4, 5, 2, 5], [1, 7, 5]) == [5]", "assert common([5, 3, 4, 35, 652, 1, 1], [9, 6, 2, 8, 6, 653, 122]) == []", "assert common([3, 1, 6, 11], [6, 6]) == [6]", "assert common([7, 4, 7, 13], [8, 4]) == [4]", "assert common([4, 4, 4, 34, 652, 5, 10], [8, 2, 1, 4, 5, 652, 117]) == [4, 5, 652]", "assert common([2, 8, 3, 29, 650, 1, 7], [3, 6, 2, 3, 7, 652, 116]) == [2, 3, 7]", "assert common([5, 8, 7, 3], [6, 4]) == []", "assert common([2, 2, 1, 29, 650, 4, 2], [3, 10, 6, 2, 11, 651, 119]) == [2]", "assert common([3, 3, 2, 30, 656, 3, 4], [6, 11, 2, 4, 4, 652, 123]) == [2, 4]", "assert common([6, 1, 4, 33, 651, 4, 3], [4, 10, 1, 10, 12, 657, 126]) == [1, 4]", "assert common([6, 6, 4, 5], [3, 3, 8]) == []", "assert common([5, 5, 4, 34, 648, 5, 5], [3, 7, 6, 2, 10, 648, 116]) == [648]", "assert common([2, 1, 7, 9], [6, 3]) == []", "assert common([4, 1, 4, 12], [5, 1, 7]) == [1]", "assert common([7, 6, 3, 9], [6, 5]) == [6]", "assert common([2, 3, 3, 9], [5, 2]) == [2]", "assert common([1, 4, 1, 32, 657, 7, 6], [4, 10, 2, 2, 4, 650, 124]) == [4]", "assert common([8, 3, 4, 10], [8, 7]) == [8]", "assert common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]", "assert common([5, 2, 2, 30, 654, 5, 1], [3, 3, 2, 10, 6, 657, 126]) == [2]", "assert common([2, 7, 4, 3], [8, 7, 5]) == [7]", "assert common([4, 5, 7, 12], [7, 1]) == [7]", "assert common([9, 3, 7, 4], [4, 2, 4]) == [4]", "assert common([3, 1, 3, 10], [3, 3, 9]) == [3]", "assert common([4, 4, 1, 37, 654, 7, 5], [3, 11, 2, 6, 9, 656, 120]) == []", "assert common([2, 6, 2, 8], [5, 2]) == [2]", "assert common([2, 4, 3, 12], [4, 5, 6]) == [4]", "assert common([4, 4, 7, 8], [4, 4, 9]) == [4]", "assert common([1, 6, 6, 12], [6, 2, 9]) == [6]", "assert common([2, 7, 1, 4], [1, 2, 1]) == [1, 2]", "assert common([2, 5, 6, 32, 649, 3, 9], [8, 6, 1, 4, 4, 658, 117]) == [6]", "assert common([2, 1, 5, 37, 657, 7, 1], [4, 9, 3, 1, 12, 649, 122]) == [1]", "assert common([5, 5, 7, 7], [5, 2]) == [5]", "assert common([5, 3, 2, 8], [3, 2]) == [2, 3]", "assert common([5, 4, 5, 32, 655, 6, 2], [2, 10, 4, 2, 14, 656, 117]) == [2, 4]", "assert common([3, 4, 4, 8], [3, 3, 9]) == [3]", "assert common([5, 2, 1, 3], [8, 3]) == [3]", "assert common([3, 8, 3, 35, 651, 4, 2], [1, 12, 6, 10, 4, 654, 119]) == [4]", "assert common([5, 6, 4, 8], [3, 7, 2]) == []", "assert common([7, 7, 5, 11], [3, 4]) == []", "assert common([4, 3, 2, 8], []) == []", "assert common([7, 7, 7, 3], [2, 4]) == []", "assert common([2, 9, 3, 36, 649, 6, 7], [10, 12, 4, 4, 14, 656, 116]) == []", "assert common([3, 8, 6, 6], [4, 3, 3]) == [3]", "assert common([1, 8, 7, 3], [2, 6]) == []", "assert common([1, 4, 5, 11], [1, 6, 1]) == [1]", "assert common([6, 2, 3, 8], [7, 6, 8]) == [6, 8]", "assert common([1, 7, 4, 30, 653, 1, 1], [6, 9, 2, 2, 13, 650, 120]) == []", "assert common([6, 8, 4, 32, 657, 7, 6], [4, 10, 1, 5, 14, 652, 120]) == [4]", "assert common([2, 7, 7, 32, 650, 5, 6], [7, 2, 4, 3, 13, 654, 117]) == [2, 7]", "assert common([1, 4, 7, 30, 658, 3, 10], [6, 7, 3, 10, 10, 658, 117]) == [3, 7, 10, 658]", "assert common([8, 4, 1, 9], [6, 3]) == []", "assert common([2, 1, 4, 37, 657, 3, 7], [8, 5, 5, 10, 7, 654, 121]) == [7]", "assert common([9, 7, 7, 7], [5, 2]) == []", "assert common([4, 6, 3, 31, 648, 7, 10], [1, 10, 4, 7, 7, 653, 117]) == [4, 7, 10]", "assert common([6, 5, 2, 3], [3, 3, 3]) == [3]", "assert common([4, 4, 1, 8], [1, 5, 7]) == [1]", "assert common([8, 4, 6, 5], [1, 1]) == []", "assert common([4, 5, 3, 10], [7, 5]) == [5]", "assert common([7, 1, 7, 13], [3, 1]) == [1]", "assert common([1, 5, 5, 29, 655, 4, 1], [5, 3, 2, 1, 5, 648, 118]) == [1, 5]", "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "assert common([7, 7, 1, 4], [5, 6]) == []", "assert common([5, 4, 2, 36, 648, 7, 10], [6, 8, 1, 5, 11, 649, 126]) == [5]", "assert common([8, 1, 1, 3], [5, 6]) == []", "assert common([6, 3, 6, 3], [8, 5, 8]) == []", "assert common([6, 8, 7, 32, 654, 7, 3], [7, 7, 2, 5, 10, 654, 123]) == [7, 654]", "assert common([2, 2, 6, 11], [5, 6, 1]) == [6]", "assert common([1, 4, 6, 39, 653, 4, 3], [6, 12, 2, 3, 14, 654, 116]) == [3, 6]", "assert common([1, 3, 4, 9], [7, 3]) == [3]", "assert common([9, 6, 6, 7], [7, 7, 1]) == [7]", "assert common([5, 6, 2, 34, 654, 3, 7], [7, 9, 1, 7, 8, 650, 122]) == [7]", "assert common([8, 2, 7, 4], [7, 7, 1]) == [7]", "assert common([3, 2, 1, 37, 654, 7, 6], [2, 3, 2, 6, 4, 649, 123]) == [2, 3, 6]", "assert common([9, 2, 7, 4], [5, 4, 1]) == [4]", "assert common([8, 1, 4, 10], [4, 2]) == [4]", "assert common([2, 8, 5, 10], [8, 4]) == [8]", "assert common([8, 4, 4, 6], [3, 6]) == [6]", "assert common([3, 6, 6, 7], [7, 4, 2]) == [7]", "assert common([3, 4, 3, 11], [4, 1, 7]) == [4]", "assert common([3, 1, 4, 5], [1, 1]) == [1]", "assert common([3, 2, 5, 37, 652, 2, 3], [5, 4, 6, 7, 9, 651, 120]) == [5]"], "nl": "Return sorted unique common elements for two lists.\n    ", "func": "def common(l1: list, l2: list):", "examples": ">>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    ", "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    \"\"\"\n    Returns a sorted list of unique common elements from two lists.\n    \n    Args:\n        l1 (List[int]): The first list of integers.\n        l2 (List[int]): The second list of integers.\n    \n    Returns:\n        List[int]: A sorted list of unique common elements.\n    \"\"\"\n    # Convert both lists to sets to find the intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection result back to a list\n    common_elements = list(intersection)\n    \n    # Sort the list\n    common_elements.sort()\n    \n    # Return the sorted list\n    return common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    This function takes two lists and returns a sorted list of unique common elements.\n    \n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n    \n    Returns:\n        list: A sorted list of unique common elements.\n    \"\"\"\n    # Convert both lists to sets to find the intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection result to a list\n    common_elements = list(intersection)\n    \n    # Sort the list to ensure the output is sorted\n    common_elements.sort()\n    \n    return common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Return sorted unique common elements for two lists.\n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n    Returns:\n        list: A sorted list of unique common elements.\n    Examples:\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n            [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n            [2, 3]\n    '''\n    # Convert both lists to sets to remove duplicates\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    intersection = set1 & set2\n    \n    # Convert the intersection set back to a list\n    result_list = list(intersection)\n    \n    # Sort the list\n    result_list.sort()\n    \n    # Return the sorted list\n    return result_list\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Return sorted unique common elements for two lists.\n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n    Returns:\n        list: A sorted list of unique common elements.\n    Examples:\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n    '''\n    # Convert lists to sets to find the intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection result to a sorted list\n    sorted_common_elements = sorted(list(intersection))\n    \n    return sorted_common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Return sorted unique common elements for two lists.\n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n    Returns:\n        list: A sorted list of unique common elements.\n    Examples:\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n    '''\n    # Convert lists to sets to remove duplicates and find intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    common_elements = set1.intersection(set2)\n    \n    # Convert the result back to a list and sort it\n    sorted_common_elements = sorted(list(common_elements))\n    \n    return sorted_common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    '''\n    # Convert both lists to sets to find common elements\n    set_l1 = set(l1)\n    set_l2 = set(l2)\n    \n    # Find the intersection of the two sets\n    common_elements = set_l1.intersection(set_l2)\n    \n    # Convert the set of common elements back to a list\n    common_list = list(common_elements)\n    \n    # Sort the list\n    common_list.sort()\n    \n    # Return the sorted list of unique common elements\n    return common_list\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Return sorted unique common elements for two lists.\n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n    Returns:\n        list: A sorted list of unique common elements.\n    Examples:\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n    '''\n    # Convert lists to sets to find the intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection result back to a list\n    common_elements = list(intersection)\n    \n    # Sort the list to ensure the elements are in ascending order\n    common_elements.sort()\n    \n    # Return the sorted list\n    return common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Return sorted unique common elements for two lists.\n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n    Returns:\n        list: A sorted list of unique common elements.\n    Examples:\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n    '''\n    # Convert lists to sets to find the intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection result back to a list\n    sorted_unique_common_elements = sorted(list(intersection))\n    \n    # Return the sorted list\n    return sorted_unique_common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    '''\n    # Convert lists to sets to find the intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection result back to a list\n    sorted_unique_common_elements = list(intersection)\n    \n    # Sort the list\n    sorted_unique_common_elements.sort()\n    \n    # Return the sorted list\n    return sorted_unique_common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    Finds the unique common elements between two lists and returns them sorted in ascending order.\n\n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n\n    Returns:\n        list: A sorted list of unique common elements.\n    \"\"\"\n    # Convert both lists to sets to find the intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection result back to a list\n    common_elements = list(intersection)\n    \n    # Sort the list to ensure uniqueness and ascending order\n    common_elements.sort()\n    \n    # Return the sorted list\n    return common_elements\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that returns sorted unique common elements from two lists. The function should be efficient and handle basic list operations well. The output should be sorted in ascending order and contain only unique elements.\nrequirement pool:\n- The function should return sorted unique common elements from two lists.\n- The function should handle both small and large lists efficiently.\n- The function should be easy to integrate into other projects.\n- The function should handle edge cases such as empty lists or lists with non-integer elements.\n- The function should be optimized for performance.\nTo create a function that returns sorted unique common elements from two lists, we will utilize Python's built-in set operations for efficiency. We will convert the lists to sets to find the intersection, then convert the result back to a list and sort it. This approach ensures both uniqueness and efficiency.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'unique common elements': means that the result should only include elements that appear in both lists, and each element should only be listed once.\n    'sorted': means that the result should be in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Convert both lists to sets to find the intersection.\n    (2) Convert the intersection result back to a list.\n    (3) Sort the list.\n    (4) Return the sorted list.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 1, 2, 2], [2, 2, 3, 3]) = [2]\n    explanation: The common elements are 2 and 2, but since we need unique elements, the output should be [2].\n    common([], [1, 2, 3]) = []\n    explanation: One of the lists is empty, so there are no common elements, and the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case where one of the lists is empty. The function will naturally return an empty list in this scenario.\n", "requirement analysis:\nThe requirement is to create a function that returns sorted unique common elements from two lists. The function should be efficient and handle basic list operations. The output should be sorted and contain only unique elements. The function should be tested for various inputs including edge cases.\nrequirement pool:\n- Implement the function to return sorted unique common elements from two lists.\n- Ensure the function is efficient and handles edge cases.\n- Optimize the function for performance.\n- Test the function with various inputs including edge cases.\n- Document the function clearly for easy understanding.\nTo implement the function efficiently and handle edge cases, we will use Python's built-in set operations, which are optimized for such tasks. We will convert the lists to sets to find the intersection, then convert the result back to a list and sort it to ensure the output is sorted and unique.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'unique common elements': means that the elements that appear in both lists and should not have duplicates.\n    'sorted': means that the final output list should be in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Convert both lists to sets to find the intersection.\n    - Convert the intersection result back to a list.\n    - Sort the list to ensure the output is sorted.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 1, 2, 2], [2, 2, 3, 3]) = [2]\n    explanation: The common elements are 2 and 2, but since we need unique common elements, the output should be [2].\n    common([], [1, 2, 3]) = []\n    explanation: One of the lists is empty, so there are no common elements, and the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The built-in operations for converting lists to sets and back to lists will naturally handle cases where one or both lists are empty.\n", "requirement analysis:\nThe requirement is to create a function that returns sorted unique common elements from two lists. The function should handle basic list operations efficiently and correctly. The function should be optimized for performance and usability.\nrequirement pool:\n- The function should return sorted unique common elements from two lists.\n- The function should handle lists with both integers and large numbers.\n- The function should be fast and not consume excessive memory.\n- The function should be optimized for readability and maintainability.\n- The function should handle edge cases such as empty lists or lists with None values.\nWe will use Python's built-in set operations to efficiently find the intersection of the two lists and then convert the result to a list. To ensure the function returns sorted unique elements, we will sort the result before returning it.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'unique common elements': means that the elements that appear in both lists and should not have duplicates.\n    'sorted': means that the final list should be in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Convert both lists to sets to remove duplicates.\n    (2) Find the intersection of the two sets.\n    (3) Convert the intersection set back to a list.\n    (4) Sort the list.\n    (5) Return the sorted list.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([], [1, 2, 3]) = []\n    explanation: An empty list has no elements to compare, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    explanation: The number 2 appears in both lists, but since we need unique common elements, the expected output is [2].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already covers the case where one or both lists are empty, and it will return an empty list.\n", "requirement analysis:\nThe original requirement is to return sorted unique common elements for two lists. The function should handle basic list operations efficiently. The user has not specified any specific constraints or edge cases, so the focus is on basic functionality and performance.\nrequirement pool:\n- Implement a function to find common elements between two lists.\n- Ensure the function returns unique and sorted common elements.\n- Optimize the function for handling large lists.\n- Include error handling for non-list inputs.\n- Add documentation and examples to the function.\nTo implement the function efficiently and ensure it handles edge cases, we will use Python's built-in set operations. This approach is efficient and leverages Python's strengths in handling such operations. We will convert the lists to sets to find the intersection, then convert the result back to a list and sort it to ensure uniqueness and order.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'unique common elements': means that the result should only include elements that appear in both lists, and each element should only be listed once.\n    'sorted': means that the final list should be in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Convert both lists to sets to find the intersection.\n    - Convert the intersection result back to a list.\n    - Sort the list to ensure the elements are in ascending order.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([], [1, 2, 3]) = []\n    explanation: An empty list has no elements to compare, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    explanation: The number 2 appears in both lists, but it should only be listed once in the result, so the expected output is [2].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic already covers the case where one or both lists are empty, as it will result in an empty list being returned.\n", "requirement analysis:\nThe original requirement specifies a function that returns sorted unique common elements from two lists. The function currently only includes a placeholder 'set1', which needs to be replaced with the actual logic. The requirement also includes example test cases to demonstrate expected behavior.\nrequirement pool:\n- Implement the function to return sorted unique common elements from two lists\n- Ensure the function is efficient and handles large datasets\n- Develop a user-friendly interface for easy interaction\n- Test the function with provided test cases\n- Optimize the code for performance and readability\nTo implement the function that returns sorted unique common elements from two lists, we will use Python's built-in data structures and set operations for efficiency. We will ensure the function is efficient and handles large datasets by using set operations which have an average time complexity of O(n+m), where n and m are the lengths of the two lists. This approach is optimal for this task as it avoids the need to sort the lists first, which would increase the time complexity significantly.\nPlease read and understand the following inteperation before coding\n It appears that the plan provided for the function `common` is incomplete and does not include specific steps to implement the function. Let's proceed with analyzing the requirement and plan based on the given format.\n\n# [core concept]\n    'unique common elements': means that the result should contain only one copy of each element that appears in both lists.\n    'sorted': means that the result should be in ascending order.\n\n# [phrase showing quantity relationship]\n    No specific phrase showing quantity relationship.\n\n# [degree adverb] \n    No specific degree adverb.\n\n# [code logic]\n    To implement the function `common`, we need to:\n    1. Convert both lists to sets to remove duplicates.\n    2. Find the intersection of these sets to get the common elements.\n    3. Convert the result back to a list.\n    4. Sort the list.\n    5. Return the sorted list.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    Explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([], [1, 2, 3]) = []\n    Explanation: If one of the lists is empty, there can be no common elements, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    Explanation: The common elements are 2 and 2 (note that the result should be unique and sorted).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can naturally handle these cases by returning an empty list when there are no common elements.\n\nPlease note that the plan provided in the prompt is incomplete and does not include specific steps to implement the function. The analysis above is based on the assumption that the function should return sorted unique common elements from two lists. If the plan includes specific steps, please provide it for a more accurate analysis.\n", "requirement analysis:\nThe original requirement is to return sorted unique common elements for two lists. The current implementation using 'set1' does not directly address the requirement. A more appropriate approach would involve using Python's built-in 'set' data structure to find common elements and then sorting and removing duplicates.\nrequirement pool:\n- Implement a function to find common elements between two lists\n- Ensure the common elements are sorted and unique\n- Develop a user-friendly interface for easy interaction\n- Optimize the algorithm for efficiency and scalability\nTo meet the requirements, we will use Python's built-in 'set' data structure to efficiently find common elements between two lists. After obtaining the common elements, we will convert them back to a list, sort them, and remove duplicates to ensure the output is sorted and unique. This approach is efficient and leverages Python's standard library, ensuring scalability and ease of use.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'unique common elements': means that the elements that appear in both lists and should not have duplicates.\n    'sorted': means that the final list should be in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Convert both lists to sets to find common elements.\n    - Convert the set of common elements back to a list.\n    - Sort the list.\n    - Remove duplicates to ensure uniqueness.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    Explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 1, 2, 2], [2, 2, 3, 3]) = [2]\n    Explanation: The common elements are 2 and 2, but since we need unique elements, the output should be [2].\n    common([], [1, 2, 3]) = []\n    Explanation: One of the lists is empty, so there are no common elements, and the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan already covers the case where one or both lists are empty.\n", "requirement analysis:\nThe requirement is to create a function that returns sorted unique common elements from two lists. The function should be efficient and handle large lists without performance issues. The output should be sorted and contain only unique elements. The function should be easy to integrate and use.\nrequirement pool:\n- The function should return sorted unique common elements from two lists\n- The function should handle large lists efficiently\n- The function should be optimized for performance\n- The function should be easy to integrate and use\n- The function should return results quickly\nTo create a function that returns sorted unique common elements from two lists efficiently, we will utilize Python's built-in set operations. This approach is efficient and leverages Python's strengths in handling such tasks. We will convert the lists to sets to find the intersection, then convert the result back to a list and sort it to ensure the output is sorted and unique.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'unique common elements': means that the elements that appear in both lists and should not have duplicates.\n    'sorted': means that the final list should be in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Convert both lists to sets to find the intersection.\n    (2) Convert the intersection result back to a list.\n    (3) Sort the list to ensure the elements are in ascending order.\n    (4) Return the sorted list.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 1, 2, 2, 3, 3], [2, 2, 3, 3, 4, 4]) = [2, 3]\n    explanation: The common elements are 2 and 3, and since we need unique elements, the output is [2, 3].\n    common([], [1, 2, 3]) = []\n    explanation: One of the lists is empty, so there are no common elements, and the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will return an empty list when one of the lists is empty.\n", "requirement analysis:\nThe requirement is to create a function that returns sorted unique common elements from two lists. The function should be efficient and handle basic list operations well. It should be compatible with Python's standard library and be extendable for future features.\nrequirement pool:\n- The function should return sorted unique common elements from two lists.\n- The function should handle lists with both integers and large numbers.\n- The function should be fast and not consume excessive memory.\n- The function should be compatible with Python's standard library.\n- The function should be extendable for future features.\nTo create a function that returns sorted unique common elements from two lists efficiently, we will utilize Python's built-in set operations, which are optimized for such tasks. We will convert the lists to sets to find the intersection, then convert the result back to a list and sort it to ensure the output is sorted. This approach ensures both uniqueness and order, aligning with the requirement to return sorted unique common elements.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'unique common elements': means that the elements should appear in both lists and should not repeat in the output.\n    'sorted': means that the output list should be in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Convert both lists to sets to find the intersection.\n    (2) Convert the intersection result back to a list.\n    (3) Sort the list to ensure the output is sorted.\n    (4) Return the sorted list.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 1, 2, 2], [2, 2, 3, 3]) = [2]\n    explanation: The common elements are 2 and 2, but since we need unique elements, the output should be [2].\n    common([], [1, 2, 3]) = []\n    explanation: One of the lists is empty, so there are no common elements, and the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will return an empty list when one of the input lists is empty.\n", "requirement analysis:\nThe requirement is to create a function that returns sorted unique common elements from two lists. The function should be efficient and handle basic list operations well. The output should be sorted in ascending order and contain only unique elements. The function should be compatible with Python's standard library and be easy to integrate into other projects.\nrequirement pool:\n- The function should return sorted unique common elements from two lists\n- The function should be efficient and handle basic list operations\n- The function should be easy to integrate into other projects\n- The function should handle edge cases such as empty lists or lists with non-integer elements\n- The function should be compatible with Python's standard library\nTo create a function that returns sorted unique common elements from two lists, we will utilize Python's built-in set operations for efficiency. We will convert the lists to sets to find the intersection, then convert the result back to a list and sort it. This approach ensures both uniqueness and efficiency.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'unique common elements': means that the result should only include elements that appear in both lists, and each element should only be listed once.\n    'sorted': means that the result should be in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Convert both lists to sets to find the intersection.\n    (2) Convert the intersection result back to a list.\n    (3) Sort the list.\n    (4) Return the sorted list.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 1, 2, 2], [2, 2, 3, 3]) = [2]\n    explanation: The common elements are 2 and 2, but since we need unique elements, the output should be [2].\n    common([], [1, 2, 3]) = []\n    explanation: One of the lists is empty, so there are no common elements, and the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case where one of the lists is empty. The function will naturally return an empty list in this scenario.\n", "requirement analysis:\nThe original requirements call for a function that returns sorted unique common elements from two lists. This is a common problem in data manipulation and requires a solution that is both efficient and easy to understand. The function should handle basic list operations and ensure that the output is sorted and contains only unique elements.\nrequirement pool:\n- Implement the function to return sorted unique common elements from two lists.\n- Ensure the function is efficient and can handle large lists.\n- Make the function easy to understand and use.\n- Test the function with various edge cases to ensure robustness.\n- Optimize the function for performance to handle large datasets.\nWe will use Python's built-in set operations to efficiently find the intersection of two lists and then sort the result to ensure uniqueness. This approach leverages Python's strengths in data manipulation and ensures that the function is both efficient and easy to understand.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'unique common elements': means that the result should contain only the elements that are present in both lists, and each element should appear only once in the result.\n    'sorting': means that the final result should be in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Convert both lists to sets to find the intersection.\n    - Convert the intersection result back to a list.\n    - Sort the list to ensure uniqueness and ascending order.\n    - Return the sorted list.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 1, 2, 2], [2, 2, 3, 3]) = [2]\n    explanation: The common elements are 2 and 2, but since we need unique elements, the result should contain only one instance of 2.\n    common([], [1, 2, 3]) = []\n    explanation: One of the lists is empty, so there are no common elements, and the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The built-in operations in Python will automatically handle cases where one or both lists are empty by returning an empty list.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], "completion": "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    Finds the unique common elements between two lists and returns them sorted in ascending order.\n\n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n\n    Returns:\n        list: A sorted list of unique common elements.\n    \"\"\"\n    # Convert both lists to sets to find the intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection result back to a list\n    common_elements = list(intersection)\n    \n    # Sort the list to ensure uniqueness and ascending order\n    common_elements.sort()\n    \n    # Return the sorted list\n    return common_elements\n", "passed": true, "pass": true, "pass_num": 10, "round": 560, "repair_prompt": ["def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", " def common(l1: list, l2: list):\n    '''Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    '''\n    set1", " def common(l1: list, l2: list):\n    '''Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    '''\n"], "mutate_method": "condense_two2one", "parent_index": 379}
