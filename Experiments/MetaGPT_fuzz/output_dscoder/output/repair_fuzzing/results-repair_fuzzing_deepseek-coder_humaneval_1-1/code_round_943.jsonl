{"task_id": "HumanEval/27", "prompt": "def flip_case(string: str) -> str:\t\n'''For a given string, switch lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n    'hELLO'\n    '''", "entry_point": "flip_case", "canonical_solution": "    return string.swapcase()\n", "test": ["def check(flip_case):\n\tassert flip_case(\"=Uft>^xAJt~M\") == '=uFT>^XajT~m'", "def check(flip_case):\n\tassert flip_case(\"CsgXBCATeQmYHhTMBoGuEM dGUDqazbndCFMtLL vmY\") == 'cSGxbcatEqMyhHtmbOgUem DgudQAZBNDcfmTll VMy'", "def check(flip_case):\n\tassert flip_case(\"w\") == 'W'", "def check(flip_case):\n\tassert flip_case(\"eIgaNO JtyWwkDSdVTrVoqClhNFrHNqDBl UInCVrviH\") == 'EiGAno jTYwWKdsDvtRvOQcLHnfRhnQdbL uiNcvRVIh'", "def check(flip_case):\n\tassert flip_case(\"FdR\") == 'fDr'", "def check(flip_case):\n\tassert flip_case(\"tR#Et^#\") == 'Tr#eT^#'", "def check(flip_case):\n\tassert flip_case(\"L@j:tM-_?Fgc\") == 'l@J:Tm-_?fGC'", "def check(flip_case):\n\tassert flip_case(\"ez\") == 'EZ'", "def check(flip_case):\n\tassert flip_case(\"F_LHcfxbO\") == 'f_lhCFXBo'", "def check(flip_case):\n\tassert flip_case(\"xDFZwXjexGGcNsQGWKFfWrVIoHZYFFhWCRQJpnfL\") == 'XdfzWxJEXggCnSqgwkfFwRviOhzyffHwcrqjPNFl'", "def check(flip_case):\n\tassert flip_case(\"CnpipxUmlSdCSmHdbyDoMlbssWpLHcyKnJlsulPxWNPHi\") == 'cNPIPXuMLsDcsMhDBYdOmLBSSwPlhCYkNjLSULpXwnphI'", "def check(flip_case):\n\tassert flip_case(\"vqp\") == 'VQP'", "def check(flip_case):\n\tassert flip_case(\"f<SH\") == 'F<sh'", "def check(flip_case):\n\tassert flip_case(\"tBDUC ZKFZKtFVvqmhzUltjFzOWNXldpEHOAKJIp\") == 'Tbduc zkfzkTfvVQMHZuLTJfZownxLDPehoakjiP'", "def check(flip_case):\n\tassert flip_case(\"+>gY~\") == '+>Gy~'", "def check(flip_case):\n\tassert flip_case(\"BlmIOOJIkOnKWOtKuudPt  sUUPPNZZbQKiIHsNzFe\") == 'bLMioojiKoNkwoTkUUDpT  SuuppnzzBqkIihSnZfE'", "def check(flip_case):\n\tassert flip_case(\"JXCxNsvL\") == 'jxcXnSVl'", "def check(flip_case):\n\tassert flip_case(\"gq\") == 'GQ'", "def check(flip_case):\n\tassert flip_case(\"v\") == 'V'", "def check(flip_case):\n\tassert flip_case(\"RkocroIYw pMJxfpXxLucXAIvDjwlkIeJBCXJsxMAH\") == 'rKOCROiyW PmjXFPxXlUCxaiVdJWLKiEjbcxjSXmah'", "def check(flip_case):\n\tassert flip_case(\"JVKSQnhMMEPEXaJBBgEbTmkMCSWcebmFckHoj\") == 'jvksqNHmmepexAjbbGeBtMKmcswCEBMfCKhOJ'", "def check(flip_case):\n\tassert flip_case(\"gif\") == 'GIF'", "def check(flip_case):\n\tassert flip_case(\"g gCvDFeq NvBvqUNjjIldrkmFZCCTkJACipqozhZZ\") == 'G GcVdfEQ nVbVQunJJiLDRKMfzcctKjacIPQOZHzz'", "def check(flip_case):\n\tassert flip_case(\"rPxMsdbinpIxuZkSMNhmkYSJ DaYPCubXFgtuGbdtUXBR\") == 'RpXmSDBINPiXUzKsmnHMKysj dAypcUBxfGTUgBDTuxbr'", "def check(flip_case):\n\tassert flip_case(\"vzhEUikjmBtxkJcpaTRiuEurpoJXgLCmmSGttGsfOv\") == 'VZHeuIKJMbTXKjCPAtrIUeURPOjxGlcMMsgTTgSFoV'", "def check(flip_case):\n\tassert flip_case(\"ishBtMJcStzZVLuiiCdRPaVgPIsPMZkvSjJna\") == 'ISHbTmjCsTZzvlUIIcDrpAvGpiSpmzKVsJjNA'", "def check(flip_case):\n\tassert flip_case(\"qn\") == 'QN'", "def check(flip_case):\n\tassert flip_case(\"pCKgJaaQZHzRwxdwpqCZvoRlbvqLfrtdHlSrrqyl\") == 'PckGjAAqzhZrWXDWPQczVOrLBVQlFRTDhLsRRQYL'", "def check(flip_case):\n\tassert flip_case(\"k\") == 'K'", "def check(flip_case):\n\tassert flip_case(\"xOEweGnFamRzetSvZkSCZbKrjxTcGdWzTWBsbETPk auL\") == 'XoeWEgNfAMrZETsVzKsczBkRJXtCgDwZtwbSBetpK AUl'", "def check(flip_case):\n\tassert flip_case(\"WVlvlJraPwOUwyOOhbDSADCInroOCMzpaSnUubOH\") == 'wvLVLjRApWouWYooHBdsadciNROocmZPAsNuUBoh'", "def check(flip_case):\n\tassert flip_case(\"lb\") == 'LB'", "def check(flip_case):\n\tassert flip_case(\"AjUCdQIZXemhRaQZOkgJVvpYPUDPNmjKIPhQzZmAQIX\") == 'aJucDqizxEMHrAqzoKGjvVPypudpnMJkipHqZzMaqix'", "def check(flip_case):\n\tassert flip_case(\"~S*VzmzMvqpR\") == '~s*vZMZmVQPr'", "def check(flip_case):\n\tassert flip_case(\"BBx~!|/^\") == 'bbX~!|/^'", "def check(flip_case):\n\tassert flip_case(\"zg\") == 'ZG'", "def check(flip_case):\n\tassert flip_case(\"kydGvfiOVOgOxStzNHakGRVZUzaeQtEDgWqRJJpfe\") == 'KYDgVFIovoGoXsTZnhAKgrvzuZAEqTedGwQrjjPFE'", "def check(flip_case):\n\tassert flip_case(\"lhp\") == 'LHP'", "def check(flip_case):\n\tassert flip_case(\"jfu\") == 'JFU'", "def check(flip_case):\n\tassert flip_case(\"jbTsYZxZTBwOTezydywllWFUrvTWBHXpvMsIY\") == 'JBtSyzXztbWotEZYDYWLLwfuRVtwbhxPVmSiy'", "def check(flip_case):\n\tassert flip_case(\"vVvmxSIyqihZXowcxzQxqSKxpnCpSSkCXeRBXTHyMl\") == 'VvVMXsiYQIHzxOWCXZqXQskXPNcPssKcxErbxthYmL'", "def check(flip_case):\n\tassert flip_case(\"QwnaAlMgJSZcTaBgprrbFezVmYCdMsWyxskaPqenOH\") == 'qWNAaLmGjszCtAbGPRRBfEZvMycDmSwYXSKApQENoh'", "def check(flip_case):\n\tassert flip_case(\"o=c_/?QU~q\") == 'O=C_/?qu~Q'", "def check(flip_case):\n\tassert flip_case(\"ds\") == 'DS'", "def check(flip_case):\n\tassert flip_case(\"zdp\") == 'ZDP'", "def check(flip_case):\n\tassert flip_case(\"hd\") == 'HD'", "def check(flip_case):\n\tassert flip_case(\"jBVXuMXKDuzctqITdcXyikINVSCmKdXbcxhnT\") == 'JbvxUmxkdUZCTQitDCxYIKinvscMkDxBCXHNt'", "def check(flip_case):\n\tassert flip_case(\"ugd\") == 'UGD'", "def check(flip_case):\n\tassert flip_case(\"LAszIcfMteqqYNwFzpJQolmECkmMmMLiyWgtidbdJUaaA\") == 'laSZiCFmTEQQynWfZPjqOLMecKMmMmlIYwGTIDBDjuAAa'", "def check(flip_case):\n\tassert flip_case(\"RbUFL/M\") == 'rBufl/m'", "def check(flip_case):\n\tassert flip_case('Hello!') == 'hELLO!'", "def check(flip_case):\n\tassert flip_case(\"n\") == 'N'", "def check(flip_case):\n\tassert flip_case(\"WF~h/oG^\") == 'wf~H/Og^'", "def check(flip_case):\n\tassert flip_case(\"pzp\") == 'PZP'", "def check(flip_case):\n\tassert flip_case(\"+K|eG\") == '+k|Eg'", "def check(flip_case):\n\tassert flip_case(\"dzpm pZUpHNjdpIMw BmQd otqoasshKCFtpf\") == 'DZPM PzuPhnJDPimW bMqD OTQOASSHkcfTPF'", "def check(flip_case):\n\tassert flip_case(\"xmx\") == 'XMX'", "def check(flip_case):\n\tassert flip_case(\"*~=I\") == '*~=i'", "def check(flip_case):\n\tassert flip_case(\"d!C&e?Gl\") == 'D!c&E?gL'", "def check(flip_case):\n\tassert flip_case(\"QNANcSJRDzmQFD RdGOsUHyADvXPqBWXQQuDzqlQkYucV\") == 'qnanCsjrdZMqfd rDgoSuhYadVxpQbwxqqUdZQLqKyUCv'", "def check(flip_case):\n\tassert flip_case(\"#QSfHF:$&%\") == '#qsFhf:$&%'", "def check(flip_case):\n\tassert flip_case(\"?fTt><k\") == '?FtT><K'", "def check(flip_case):\n\tassert flip_case(\"rpd\") == 'RPD'", "def check(flip_case):\n\tassert flip_case(\"PnHqJfQuNAYhthlFbMAQuoFHTWWNssJuqEsyxCgEkcDUh\") == 'pNhQjFqUnayHTHLfBmaqUOfhtwwnSSjUQeSYXcGeKCduH'", "def check(flip_case):\n\tassert flip_case(\"j\") == 'J'", "def check(flip_case):\n\tassert flip_case(\"n|gOUwY~ruFD\") == 'N|GouWy~RUfd'", "def check(flip_case):\n\tassert flip_case(\"q\") == 'Q'", "def check(flip_case):\n\tassert flip_case(\"EELIBxoyBKMKLqdqCoaxKsaHDhVSyVFZKwIUD\") == 'eelibXOYbkmklQDQcOAXkSAhdHvsYvfzkWiud'", "def check(flip_case):\n\tassert flip_case(\"bRIcNFlGQxbUHHeXuOVT ZqmqxQEmgBrvEWGTokoHY\") == 'BriCnfLgqXBuhhExUovt zQMQXqeMGbRVewgtOKOhy'", "def check(flip_case):\n\tassert flip_case(\"a\") == 'A'", "def check(flip_case):\n\tassert flip_case(\"pez\") == 'PEZ'", "def check(flip_case):\n\tassert flip_case(\" rWGZAlqccMZVGnZysgdSulExviJwKbbHiwV\") == ' RwgzaLQCCmzvgNzYSGDsULeXVIjWkBBhIWv'", "def check(flip_case):\n\tassert flip_case(\"SURWTdsMjFvXSnFJFytHymfgEiDcmZREKgXr\") == 'surwtDSmJfVxsNfjfYThYMFGeIdCMzrekGxR'", "def check(flip_case):\n\tassert flip_case(\"u\") == 'U'", "def check(flip_case):\n\tassert flip_case(\"~zUkkeFy\") == '~ZuKKEfY'", "def check(flip_case):\n\tassert flip_case(\"h*U*\") == 'H*u*'", "def check(flip_case):\n\tassert flip_case(\"yr\") == 'YR'", "def check(flip_case):\n\tassert flip_case(\"agwaVXOuq\") == 'AGWAvxoUQ'", "def check(flip_case):\n\tassert flip_case(\"p AAnXuPeBbeTnNHDDLhugfDzDoSnd KMLFYIppPFKSX\") == 'P aaNxUpEbBEtNnhddlHUGFdZdOsND kmlfyiPPpfksx'", "def check(flip_case):\n\tassert flip_case(\"d<gG\") == 'D<Gg'", "def check(flip_case):\n\tassert flip_case(\"oz\") == 'OZ'", "def check(flip_case):\n\tassert flip_case(\"fbc\") == 'FBC'", "def check(flip_case):\n\tassert flip_case(\"tu\") == 'TU'", "def check(flip_case):\n\tassert flip_case(\"NyMDTZqvnnQa TTfqNoInjRIaYeFtiLyYLvQJ\") == 'nYmdtzQVNNqA ttFQnOiNJriAyEfTIlYylVqj'", "def check(flip_case):\n\tassert flip_case(\"x\") == 'X'", "def check(flip_case):\n\tassert flip_case(\"RvQa%\") == 'rVqA%'", "def check(flip_case):\n\tassert flip_case(\"YpaJZKDmVIGTvH MGarufiqirhCbiKMToFjBUzotRH\") == 'yPAjzkdMvigtVh mgARUFIQIRHcBIkmtOfJbuZOTrh'", "def check(flip_case):\n\tassert flip_case(\"u=>c\") == 'U=>C'", "def check(flip_case):\n\tassert flip_case(\"&b_H\") == '&B_h'", "def check(flip_case):\n\tassert flip_case(\"$<y+\") == '$<Y+'", "def check(flip_case):\n\tassert flip_case(\"dWqb\") == 'DwQB'", "def check(flip_case):\n\tassert flip_case(\"xv\") == 'XV'", "def check(flip_case):\n\tassert flip_case(\"/zl\") == '/ZL'", "def check(flip_case):\n\tassert flip_case('') == ''", "def check(flip_case):\n\tassert flip_case(\"lif\") == 'LIF'", "def check(flip_case):\n\tassert flip_case(\"pgj\") == 'PGJ'", "def check(flip_case):\n\tassert flip_case(\"DyMMLvwZlYNhTOjDhnsHoTNqrTRWSrFYFWaoimDxFFaiM\") == 'dYmmlVWzLynHtoJdHNShOtnQRtrwsRfyfwAOIMdXffAIm'", "def check(flip_case):\n\tassert flip_case(\"v*qeoJBLg<t&\") == 'V*QEOjblG<T&'", "def check(flip_case):\n\tassert flip_case(\"nVVa|^lsy\") == 'NvvA|^LSY'", "def check(flip_case):\n\tassert flip_case(\"MBsxRCmHzEltumRjfTmdmbspQjxySYLAQNAZPRyV\") == 'mbSXrcMhZeLTUMrJFtMDMBSPqJXYsylaqnazprYv'", "def check(flip_case):\n\tassert flip_case(\"NpFjCypU YkPuBLEfXMThREegzPXXT IgBpeyz \") == 'nPfJcYPu yKpUbleFxmtHreEGZpxxt iGbPEYZ '", "def check(flip_case):\n\tassert flip_case(\"pG<wNz>Y/\") == 'Pg<WnZ>y/'", "def check(flip_case):\n\tassert flip_case(\"uRCphX cuIYmaTkfFCGBJrVUsjMustykG WqKcSc\") == 'UrcPHx CUiyMAtKFfcgbjRvuSJmUSTYKg wQkCsC'", "def check(flip_case):\n\tassert flip_case(\"haP!tD\") == 'HAp!Td'", "def check(flip_case):\n\tassert flip_case(\"NwHrkzMqZmOzyNBPhYuSIdBfm CjlBUkCXIeiH\") == 'nWhRKZmQzMoZYnbpHyUsiDbFM cJLbuKcxiEIh'", "def check(flip_case):\n\tassert flip_case(\"|l&:hE%&\") == '|L&:He%&'", "def check(flip_case):\n\tassert flip_case(\"wdWVLKaFVwzCSyfAbTLGDiVKlkTUSWhVBTcWaNoUaq\") == 'WDwvlkAfvWZcsYFaBtlgdIvkLKtuswHvbtCwAnOuAQ'", "def check(flip_case):\n\tassert flip_case(\"+$#d\") == '+$#D'", "def check(flip_case):\n\tassert flip_case(\"bq\") == 'BQ'", "def check(flip_case):\n\tassert flip_case('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'", "def check(flip_case):\n\tassert flip_case(\"d\") == 'D'", "def check(flip_case):\n\tassert flip_case(\"rZLVWNROgXWjbDAxzXaGYLOqVnpKiMJLXAKpM\") == 'RzlvwnroGxwJBdaXZxAgyloQvNPkImjlxakPm'", "def check(flip_case):\n\tassert flip_case(\"r\") == 'R'", "def check(flip_case):\n\tassert flip_case(\"mka\") == 'MKA'", "def check(flip_case):\n\tassert flip_case(\"dTpPnvaddXtfDXGDaEPDaGkpESXxOLdIKySLcPdpU\") == 'DtPpNVADDxTFdxgdAepdAgKPesxXolDikYslCpDPu'", "def check(flip_case):\n\tassert flip_case(\"fy\") == 'FY'", "def check(flip_case):\n\tassert flip_case(\"lW|tBEn~^ri<\") == 'Lw|TbeN~^RI<'", "def check(flip_case):\n\tassert flip_case(\"qnwYFneaoNWuSxNXocoMEXDwcqVoGZdRInOEbC\") == 'QNWyfNEAOnwUsXnxOCOmexdWCQvOgzDriNoeBc'", "def check(flip_case):\n\tassert flip_case(\"hzy\") == 'HZY'", "def check(flip_case):\n\tassert flip_case(\"sqopQROxzNCHvAlaUuwHvOMsScjnCpmswtyi\") == 'SQOPqroXZnchVaLAuUWhVomSsCJNcPMSWTYI'", "def check(flip_case):\n\tassert flip_case(\"&Py@\") == '&pY@'", "def check(flip_case):\n\tassert flip_case(\"Q<x\") == 'q<X'", "def check(flip_case):\n\tassert flip_case(\"&|EuiuG\") == '&|eUIUg'", "def check(flip_case):\n\tassert flip_case(\"gO#yDMhnV\") == 'Go#YdmHNv'", "def check(flip_case):\n\tassert flip_case(\"GRb|DCu\") == 'grB|dcU'", "def check(flip_case):\n\tassert flip_case(\"pFEAIYkn|\") == 'PfeaiyKN|'"], "test_case_list": ["assert flip_case(\"=Uft>^xAJt~M\") == '=uFT>^XajT~m'", "assert flip_case(\"CsgXBCATeQmYHhTMBoGuEM dGUDqazbndCFMtLL vmY\") == 'cSGxbcatEqMyhHtmbOgUem DgudQAZBNDcfmTll VMy'", "assert flip_case(\"w\") == 'W'", "assert flip_case(\"eIgaNO JtyWwkDSdVTrVoqClhNFrHNqDBl UInCVrviH\") == 'EiGAno jTYwWKdsDvtRvOQcLHnfRhnQdbL uiNcvRVIh'", "assert flip_case(\"FdR\") == 'fDr'", "assert flip_case(\"tR#Et^#\") == 'Tr#eT^#'", "assert flip_case(\"L@j:tM-_?Fgc\") == 'l@J:Tm-_?fGC'", "assert flip_case(\"ez\") == 'EZ'", "assert flip_case(\"F_LHcfxbO\") == 'f_lhCFXBo'", "assert flip_case(\"xDFZwXjexGGcNsQGWKFfWrVIoHZYFFhWCRQJpnfL\") == 'XdfzWxJEXggCnSqgwkfFwRviOhzyffHwcrqjPNFl'", "assert flip_case(\"CnpipxUmlSdCSmHdbyDoMlbssWpLHcyKnJlsulPxWNPHi\") == 'cNPIPXuMLsDcsMhDBYdOmLBSSwPlhCYkNjLSULpXwnphI'", "assert flip_case(\"vqp\") == 'VQP'", "assert flip_case(\"f<SH\") == 'F<sh'", "assert flip_case(\"tBDUC ZKFZKtFVvqmhzUltjFzOWNXldpEHOAKJIp\") == 'Tbduc zkfzkTfvVQMHZuLTJfZownxLDPehoakjiP'", "assert flip_case(\"+>gY~\") == '+>Gy~'", "assert flip_case(\"BlmIOOJIkOnKWOtKuudPt  sUUPPNZZbQKiIHsNzFe\") == 'bLMioojiKoNkwoTkUUDpT  SuuppnzzBqkIihSnZfE'", "assert flip_case(\"JXCxNsvL\") == 'jxcXnSVl'", "assert flip_case(\"gq\") == 'GQ'", "assert flip_case(\"v\") == 'V'", "assert flip_case(\"RkocroIYw pMJxfpXxLucXAIvDjwlkIeJBCXJsxMAH\") == 'rKOCROiyW PmjXFPxXlUCxaiVdJWLKiEjbcxjSXmah'", "assert flip_case(\"JVKSQnhMMEPEXaJBBgEbTmkMCSWcebmFckHoj\") == 'jvksqNHmmepexAjbbGeBtMKmcswCEBMfCKhOJ'", "assert flip_case(\"gif\") == 'GIF'", "assert flip_case(\"g gCvDFeq NvBvqUNjjIldrkmFZCCTkJACipqozhZZ\") == 'G GcVdfEQ nVbVQunJJiLDRKMfzcctKjacIPQOZHzz'", "assert flip_case(\"rPxMsdbinpIxuZkSMNhmkYSJ DaYPCubXFgtuGbdtUXBR\") == 'RpXmSDBINPiXUzKsmnHMKysj dAypcUBxfGTUgBDTuxbr'", "assert flip_case(\"vzhEUikjmBtxkJcpaTRiuEurpoJXgLCmmSGttGsfOv\") == 'VZHeuIKJMbTXKjCPAtrIUeURPOjxGlcMMsgTTgSFoV'", "assert flip_case(\"ishBtMJcStzZVLuiiCdRPaVgPIsPMZkvSjJna\") == 'ISHbTmjCsTZzvlUIIcDrpAvGpiSpmzKVsJjNA'", "assert flip_case(\"qn\") == 'QN'", "assert flip_case(\"pCKgJaaQZHzRwxdwpqCZvoRlbvqLfrtdHlSrrqyl\") == 'PckGjAAqzhZrWXDWPQczVOrLBVQlFRTDhLsRRQYL'", "assert flip_case(\"k\") == 'K'", "assert flip_case(\"xOEweGnFamRzetSvZkSCZbKrjxTcGdWzTWBsbETPk auL\") == 'XoeWEgNfAMrZETsVzKsczBkRJXtCgDwZtwbSBetpK AUl'", "assert flip_case(\"WVlvlJraPwOUwyOOhbDSADCInroOCMzpaSnUubOH\") == 'wvLVLjRApWouWYooHBdsadciNROocmZPAsNuUBoh'", "assert flip_case(\"lb\") == 'LB'", "assert flip_case(\"AjUCdQIZXemhRaQZOkgJVvpYPUDPNmjKIPhQzZmAQIX\") == 'aJucDqizxEMHrAqzoKGjvVPypudpnMJkipHqZzMaqix'", "assert flip_case(\"~S*VzmzMvqpR\") == '~s*vZMZmVQPr'", "assert flip_case(\"BBx~!|/^\") == 'bbX~!|/^'", "assert flip_case(\"zg\") == 'ZG'", "assert flip_case(\"kydGvfiOVOgOxStzNHakGRVZUzaeQtEDgWqRJJpfe\") == 'KYDgVFIovoGoXsTZnhAKgrvzuZAEqTedGwQrjjPFE'", "assert flip_case(\"lhp\") == 'LHP'", "assert flip_case(\"jfu\") == 'JFU'", "assert flip_case(\"jbTsYZxZTBwOTezydywllWFUrvTWBHXpvMsIY\") == 'JBtSyzXztbWotEZYDYWLLwfuRVtwbhxPVmSiy'", "assert flip_case(\"vVvmxSIyqihZXowcxzQxqSKxpnCpSSkCXeRBXTHyMl\") == 'VvVMXsiYQIHzxOWCXZqXQskXPNcPssKcxErbxthYmL'", "assert flip_case(\"QwnaAlMgJSZcTaBgprrbFezVmYCdMsWyxskaPqenOH\") == 'qWNAaLmGjszCtAbGPRRBfEZvMycDmSwYXSKApQENoh'", "assert flip_case(\"o=c_/?QU~q\") == 'O=C_/?qu~Q'", "assert flip_case(\"ds\") == 'DS'", "assert flip_case(\"zdp\") == 'ZDP'", "assert flip_case(\"hd\") == 'HD'", "assert flip_case(\"jBVXuMXKDuzctqITdcXyikINVSCmKdXbcxhnT\") == 'JbvxUmxkdUZCTQitDCxYIKinvscMkDxBCXHNt'", "assert flip_case(\"ugd\") == 'UGD'", "assert flip_case(\"LAszIcfMteqqYNwFzpJQolmECkmMmMLiyWgtidbdJUaaA\") == 'laSZiCFmTEQQynWfZPjqOLMecKMmMmlIYwGTIDBDjuAAa'", "assert flip_case(\"RbUFL/M\") == 'rBufl/m'", "assert flip_case('Hello!') == 'hELLO!'", "assert flip_case(\"n\") == 'N'", "assert flip_case(\"WF~h/oG^\") == 'wf~H/Og^'", "assert flip_case(\"pzp\") == 'PZP'", "assert flip_case(\"+K|eG\") == '+k|Eg'", "assert flip_case(\"dzpm pZUpHNjdpIMw BmQd otqoasshKCFtpf\") == 'DZPM PzuPhnJDPimW bMqD OTQOASSHkcfTPF'", "assert flip_case(\"xmx\") == 'XMX'", "assert flip_case(\"*~=I\") == '*~=i'", "assert flip_case(\"d!C&e?Gl\") == 'D!c&E?gL'", "assert flip_case(\"QNANcSJRDzmQFD RdGOsUHyADvXPqBWXQQuDzqlQkYucV\") == 'qnanCsjrdZMqfd rDgoSuhYadVxpQbwxqqUdZQLqKyUCv'", "assert flip_case(\"#QSfHF:$&%\") == '#qsFhf:$&%'", "assert flip_case(\"?fTt><k\") == '?FtT><K'", "assert flip_case(\"rpd\") == 'RPD'", "assert flip_case(\"PnHqJfQuNAYhthlFbMAQuoFHTWWNssJuqEsyxCgEkcDUh\") == 'pNhQjFqUnayHTHLfBmaqUOfhtwwnSSjUQeSYXcGeKCduH'", "assert flip_case(\"j\") == 'J'", "assert flip_case(\"n|gOUwY~ruFD\") == 'N|GouWy~RUfd'", "assert flip_case(\"q\") == 'Q'", "assert flip_case(\"EELIBxoyBKMKLqdqCoaxKsaHDhVSyVFZKwIUD\") == 'eelibXOYbkmklQDQcOAXkSAhdHvsYvfzkWiud'", "assert flip_case(\"bRIcNFlGQxbUHHeXuOVT ZqmqxQEmgBrvEWGTokoHY\") == 'BriCnfLgqXBuhhExUovt zQMQXqeMGbRVewgtOKOhy'", "assert flip_case(\"a\") == 'A'", "assert flip_case(\"pez\") == 'PEZ'", "assert flip_case(\" rWGZAlqccMZVGnZysgdSulExviJwKbbHiwV\") == ' RwgzaLQCCmzvgNzYSGDsULeXVIjWkBBhIWv'", "assert flip_case(\"SURWTdsMjFvXSnFJFytHymfgEiDcmZREKgXr\") == 'surwtDSmJfVxsNfjfYThYMFGeIdCMzrekGxR'", "assert flip_case(\"u\") == 'U'", "assert flip_case(\"~zUkkeFy\") == '~ZuKKEfY'", "assert flip_case(\"h*U*\") == 'H*u*'", "assert flip_case(\"yr\") == 'YR'", "assert flip_case(\"agwaVXOuq\") == 'AGWAvxoUQ'", "assert flip_case(\"p AAnXuPeBbeTnNHDDLhugfDzDoSnd KMLFYIppPFKSX\") == 'P aaNxUpEbBEtNnhddlHUGFdZdOsND kmlfyiPPpfksx'", "assert flip_case(\"d<gG\") == 'D<Gg'", "assert flip_case(\"oz\") == 'OZ'", "assert flip_case(\"fbc\") == 'FBC'", "assert flip_case(\"tu\") == 'TU'", "assert flip_case(\"NyMDTZqvnnQa TTfqNoInjRIaYeFtiLyYLvQJ\") == 'nYmdtzQVNNqA ttFQnOiNJriAyEfTIlYylVqj'", "assert flip_case(\"x\") == 'X'", "assert flip_case(\"RvQa%\") == 'rVqA%'", "assert flip_case(\"YpaJZKDmVIGTvH MGarufiqirhCbiKMToFjBUzotRH\") == 'yPAjzkdMvigtVh mgARUFIQIRHcBIkmtOfJbuZOTrh'", "assert flip_case(\"u=>c\") == 'U=>C'", "assert flip_case(\"&b_H\") == '&B_h'", "assert flip_case(\"$<y+\") == '$<Y+'", "assert flip_case(\"dWqb\") == 'DwQB'", "assert flip_case(\"xv\") == 'XV'", "assert flip_case(\"/zl\") == '/ZL'", "assert flip_case('') == ''", "assert flip_case(\"lif\") == 'LIF'", "assert flip_case(\"pgj\") == 'PGJ'", "assert flip_case(\"DyMMLvwZlYNhTOjDhnsHoTNqrTRWSrFYFWaoimDxFFaiM\") == 'dYmmlVWzLynHtoJdHNShOtnQRtrwsRfyfwAOIMdXffAIm'", "assert flip_case(\"v*qeoJBLg<t&\") == 'V*QEOjblG<T&'", "assert flip_case(\"nVVa|^lsy\") == 'NvvA|^LSY'", "assert flip_case(\"MBsxRCmHzEltumRjfTmdmbspQjxySYLAQNAZPRyV\") == 'mbSXrcMhZeLTUMrJFtMDMBSPqJXYsylaqnazprYv'", "assert flip_case(\"NpFjCypU YkPuBLEfXMThREegzPXXT IgBpeyz \") == 'nPfJcYPu yKpUbleFxmtHreEGZpxxt iGbPEYZ '", "assert flip_case(\"pG<wNz>Y/\") == 'Pg<WnZ>y/'", "assert flip_case(\"uRCphX cuIYmaTkfFCGBJrVUsjMustykG WqKcSc\") == 'UrcPHx CUiyMAtKFfcgbjRvuSJmUSTYKg wQkCsC'", "assert flip_case(\"haP!tD\") == 'HAp!Td'", "assert flip_case(\"NwHrkzMqZmOzyNBPhYuSIdBfm CjlBUkCXIeiH\") == 'nWhRKZmQzMoZYnbpHyUsiDbFM cJLbuKcxiEIh'", "assert flip_case(\"|l&:hE%&\") == '|L&:He%&'", "assert flip_case(\"wdWVLKaFVwzCSyfAbTLGDiVKlkTUSWhVBTcWaNoUaq\") == 'WDwvlkAfvWZcsYFaBtlgdIvkLKtuswHvbtCwAnOuAQ'", "assert flip_case(\"+$#d\") == '+$#D'", "assert flip_case(\"bq\") == 'BQ'", "assert flip_case('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'", "assert flip_case(\"d\") == 'D'", "assert flip_case(\"rZLVWNROgXWjbDAxzXaGYLOqVnpKiMJLXAKpM\") == 'RzlvwnroGxwJBdaXZxAgyloQvNPkImjlxakPm'", "assert flip_case(\"r\") == 'R'", "assert flip_case(\"mka\") == 'MKA'", "assert flip_case(\"dTpPnvaddXtfDXGDaEPDaGkpESXxOLdIKySLcPdpU\") == 'DtPpNVADDxTFdxgdAepdAgKPesxXolDikYslCpDPu'", "assert flip_case(\"fy\") == 'FY'", "assert flip_case(\"lW|tBEn~^ri<\") == 'Lw|TbeN~^RI<'", "assert flip_case(\"qnwYFneaoNWuSxNXocoMEXDwcqVoGZdRInOEbC\") == 'QNWyfNEAOnwUsXnxOCOmexdWCQvOgzDriNoeBc'", "assert flip_case(\"hzy\") == 'HZY'", "assert flip_case(\"sqopQROxzNCHvAlaUuwHvOMsScjnCpmswtyi\") == 'SQOPqroXZnchVaLAuUWhVomSsCJNcPMSWTYI'", "assert flip_case(\"&Py@\") == '&pY@'", "assert flip_case(\"Q<x\") == 'q<X'", "assert flip_case(\"&|EuiuG\") == '&|eUIUg'", "assert flip_case(\"gO#yDMhnV\") == 'Go#YdmHNv'", "assert flip_case(\"GRb|DCu\") == 'grB|dcU'", "assert flip_case(\"pFEAIYkn|\") == 'PfeaiyKN|'"], "nl": " For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    ", "func": "def flip_case(string: str) -> str:", "examples": ">>> flip_case('Hello')\n    'hELLO'\n    ", "completions": ["from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Flips the case of each character in the input string.\n\n    Args:\n        string (str): The input string to be flipped.\n\n    Returns:\n        str: A new string with the case of each character flipped.\n    \"\"\"\n    result = []\n    for char in string:\n        if char.isupper():\n            result.append(char.lower())\n        elif char.islower():\n            result.append(char.upper())\n        else:\n            result.append(char)\n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    '''For a given string, switch lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n        'hELLO'\n    '''\n    result = []\n    for char in string:\n        if char.isupper():\n            result.append(char.lower())\n        elif char.islower():\n            result.append(char.upper())\n        else:\n            result.append(char)\n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Flips the case of each character in the input string.\n    \n    Args:\n        string (str): The input string to be flipped.\n    \n    Returns:\n        str: A new string with the case of each character flipped.\n    \"\"\"\n    result = []\n    for char in string:\n        if char.isupper():\n            result.append(char.lower())\n        elif char.islower():\n            result.append(char.upper())\n        else:\n            result.append(char)\n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Flips the case of characters in the given string.\n\n    Args:\n        string (str): The input string to be flipped.\n\n    Returns:\n        str: A new string with the case of each character flipped.\n\n    Raises:\n        TypeError: If the input is not a string.\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    return string.swapcase()\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Flips the case of each character in the input string.\n    \n    Args:\n        string (str): The input string to be flipped.\n    \n    Returns:\n        str: A new string with the case of each character flipped.\n    \"\"\"\n    result = []\n    for char in string:\n        if char.isupper():\n            result.append(char.lower())\n        elif char.islower():\n            result.append(char.upper())\n        else:\n            result.append(char)\n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Flips the case of characters in the given string.\n\n    Args:\n        string (str): The input string to be flipped.\n\n    Returns:\n        str: The string with flipped case.\n    \"\"\"\n    return string.swapcase()\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    '''For a given string, switch lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n        'hELLO'\n    '''\n    result = []\n    for char in string:\n        if char.isupper():\n            result.append(char.lower())\n        elif char.islower():\n            result.append(char.upper())\n        else:\n            result.append(char)\n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Flips the case of each character in the input string.\n    \n    Args:\n        string (str): The input string to be flipped.\n    \n    Returns:\n        str: A new string with the case of each character flipped.\n    \"\"\"\n    result = []\n    for char in string:\n        if char.isupper():\n            result.append(char.lower())\n        elif char.islower():\n            result.append(char.upper())\n        else:\n            result.append(char)\n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    '''For a given string, switch lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n        'hELLO'\n    '''\n    result = []\n    for char in string:\n        if char.isupper():\n            result.append(char.lower())\n        elif char.islower():\n            result.append(char.upper())\n        else:\n            result.append(char)\n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Flips the case of characters in the given string.\n\n    Args:\n        string (str): The input string to be flipped.\n\n    Returns:\n        str: The string with flipped case.\n    \"\"\"\n    return string.swapcase()\n"], "plans": ["requirement analysis:\nThe original requirement is to create a function that flips the case of characters in a given string. This is a simple yet essential function that can be used in various applications, including data processing and string manipulation tasks.\nrequirement pool:\n- The main code should correctly flip the case of each character in the input string.\n- The function should handle both uppercase and lowercase letters.\n- The function should be efficient and handle strings of various lengths.\nWe will use Python's built-in string manipulation capabilities to create a function that flips the case of each character in the input string. This approach leverages Python's simplicity and efficiency for such tasks.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case flipping': changing lowercase characters to uppercase and vice versa.\n    Explanation: This involves switching each character in the string from its current case to the opposite case.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    To implement the function `flip_case(string: str) -> str`, we can use Python's built-in string methods. We will iterate through each character in the string, check its case, and switch it accordingly. Here's a step-by-step breakdown:\n    1. Define the function `flip_case(string: str) -> str`.\n    2. Initialize an empty string to store the result.\n    3. Iterate through each character in the input string.\n    4. Check if the character is uppercase or lowercase.\n    5. If the character is uppercase, convert it to lowercase and append to the result string.\n    6. If the character is lowercase, convert it to uppercase and append to the result string.\n    7. Return the result string.\n\n# [edge case] \n    flip_case('Python3.8') = 'pYTHON3.8'\n    Explanation: The function should switch the case of each character, leaving non-alphabetic characters unchanged.\n    flip_case('12345') = '12345'\n    Explanation: The function should not change the case of digits, so the output remains the same.\n    flip_case('') = ''\n    Explanation: If the input string is empty, the function should return an empty string.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic already covers empty strings and strings with only non-alphabetic characters.\n", "requirement analysis:\nThe original requirement is to create a function that flips the case of characters in a given string. This is a simple yet essential function that can be used in various applications, including data processing and string manipulation tasks.\nrequirement pool:\n- The main code should correctly flip the case of each character in the input string.\n- The function should handle both uppercase and lowercase letters.\n- The function should be efficient and handle large strings without performance issues.\n- The function should be tested thoroughly to ensure it works as expected.\n- The function should be documented with examples to help users understand how to use it.\nWe will implement the function by iterating through each character in the input string and checking its case. If the character is uppercase, we will convert it to lowercase, and if it is lowercase, we will convert it to uppercase. This approach ensures that the function handles both uppercase and lowercase letters correctly and efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case switching': This refers to the process of changing the case of a character from uppercase to lowercase and vice versa.\n    Explanation: The requirement asks for a function that will take a string and switch each character's case. This involves checking each character's current case and then changing it to the opposite case.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function, we will follow these steps:\n    1. Initialize an empty string to store the result.\n    2. Iterate through each character in the input string.\n    3. Check if the character is uppercase or lowercase.\n    4. If the character is uppercase, convert it to lowercase and append to the result string.\n    5. If the character is lowercase, convert it to uppercase and append to the result string.\n    6. Return the result string after the iteration is complete.\n\n# [edge case] \n    flip_case('Python3.8') = 'pYTHON3.8'\n    Explanation: The function should switch the case of each character, leaving non-alphabetic characters unchanged. In this case, 'P' becomes 'p', 'y' becomes 'Y', and '3' and '.' remain unchanged.\n    flip_case('12345') = '12345'\n    Explanation: The function should ignore non-alphabetic characters and only switch the case of alphabetic characters. Since there are no alphabetic characters in '12345', the output remains the same.\n    flip_case('Mixed123Case') = 'mIXED123cASE'\n    Explanation: The function should handle a mix of uppercase and lowercase letters, switching each one to its opposite case. Numeric and special characters remain unchanged.\n\n# [extra code for edge case]\n    No extra code is needed for the given edge cases as the core logic already handles non-alphabetic characters correctly.\n", "requirement analysis:\nThe original requirements specify a simple function that flips the case of characters in a given string. This function should be able to handle various inputs including mixed case strings, numbers, and special characters. The function should be efficient and easy to integrate into existing applications.\nrequirement pool:\n- Implement the flip_case function to switch lowercase to uppercase and vice versa.\n- Ensure the function can handle strings of varying lengths and character types.\n- Develop a user-friendly interface for easy interaction.\n- Include options for copying the result to the clipboard.\n- Optimize the function for performance and scalability.\nWe will use Python's built-in string manipulation methods to implement the flip_case function. This approach is efficient and leverages Python's simplicity and readability.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case switching': This involves changing the case of each character in the string from lowercase to uppercase and vice versa.\n    Explanation: The requirement asks for a function that will transform all lowercase letters in a string to uppercase and all uppercase letters to lowercase. Non-alphabetic characters should remain unchanged.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the `flip_case` function, we can use Python's built-in string methods. We will iterate through each character in the input string, check if it is uppercase or lowercase, and then switch its case accordingly. Here's a step-by-step breakdown:\n    1. Initialize an empty string to store the result.\n    2. Iterate through each character in the input string.\n    3. Check if the character is uppercase or lowercase using `str.isupper()` and `str.islower()`.\n    4. If the character is uppercase, convert it to lowercase and append to the result string. If it is lowercase, convert it to uppercase and append to the result string.\n    5. If the character is neither (e.g., a digit or symbol), append it unchanged to the result string.\n    6. Return the result string.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: If the input string is empty, the function should return an empty string since there are no characters to flip.\n    flip_case('Python123') = 'pYTHON123'\n    Explanation: The function should switch the case of alphabetic characters only. Non-alphabetic characters (like digits) should remain unchanged.\n    flip_case('ALLCAPS') = 'allcaps'\n    Explanation: The function should convert all uppercase characters to lowercase.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case of an empty string. The function already returns an empty string for this case. For the second edge case, we can ensure that non-alphabetic characters are not switched. This is handled by the conditionals in the iteration.\n", "requirement analysis:\nThe requirement is to create a function that flips the case of characters in a given string. This includes switching lowercase characters to uppercase and uppercase to lowercase. The function should be efficient and handle various edge cases, such as strings with numbers or mixed case characters.\nrequirement pool:\n- Implement the function to flip the case of characters in a string.\n- Ensure the function is efficient and handles edge cases.\n- Provide clear and concise documentation for the function.\n- Test the function with various inputs to ensure accuracy.\n- Design a user-friendly interface for easy use.\nTo implement the function that flips the case of characters in a given string, we will use Python's built-in string manipulation methods. Specifically, we will use the `swapcase()` method which is designed to switch the case of all characters in a string. This method is efficient and handles the basic case flipping requirements effectively. For additional robustness, we will also include error handling to manage unexpected inputs such as non-string types.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case flipping':\n    In the requirement, it means switching lowercase characters to uppercase and uppercase to lowercase.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Check if the input is a string.\n    (2) Use the `swapcase()` method to flip the case of each character in the string.\n    (3) Return the modified string.\n\n# [edge case] \n    flip_case(12345) = TypeError\n    Explanation: The input is not a string, so the function should raise a TypeError to indicate the incorrect input type.\n    flip_case('') = ''\n    Explanation: An empty string should return an empty string after flipping the case, as there are no characters to flip.\n    flip_case('Hello World!') = 'hELLO wORLD!'\n    Explanation: The function should correctly flip the case of each character in the string, including letters and possibly non-letter characters.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the input is not a string.\n        if not isinstance(string, str):\n            raise TypeError(\"Input must be a string\")\n        return string.swapcase()\n", "requirement analysis:\nThe original requirements specify a simple function that flips the case of characters in a given string. This function is essential for text manipulation tasks, making it a fundamental feature for users who need to quickly switch between uppercase and lowercase letters. The requirements are clear and concise, focusing on the functionality without delving into complex user interface or advanced text processing aspects.\nrequirement pool:\n- Implement the flip_case function to switch lowercase to uppercase and uppercase to lowercase.\n- Ensure the function handles all types of characters, including letters, numbers, and special characters.\n- Develop a user-friendly interface for easy interaction and accessibility.\n- Include examples and documentation to help users understand the functionality and how to use it.\nWe will use Python's built-in string manipulation methods to implement the flip_case function. This approach is efficient and leverages Python's simplicity and readability.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case switching': means changing the case of each character in the string from lowercase to uppercase and vice versa.\n    Explanation: The requirement involves transforming the case of each character in a given string. This includes converting all lowercase letters to uppercase and all uppercase letters to lowercase.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the `flip_case` function, we can use Python's built-in string methods. We will iterate through each character in the string and switch its case. Here's a detailed plan:\n    1. Define the function `flip_case` that takes a string as input.\n    2. Initialize an empty string to store the result.\n    3. Iterate through each character in the input string.\n    4. Check if the character is uppercase or lowercase.\n    5. If the character is uppercase, convert it to lowercase and append to the result string.\n    6. If the character is lowercase, convert it to uppercase and append to the result string.\n    7. Return the result string.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: An empty string should return an empty string after flipping the case.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case since the built-in string methods already handle empty strings gracefully.\n\n# [core concept]\n    'case switching'\n    Explanation: The core concept involves changing the case of each character in the string from lowercase to uppercase and vice versa.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the `flip_case` function, we can use Python's built-in string methods. We will iterate through each character in the string and switch its case. Here's a detailed plan:\n    1. Define the function `flip_case` that takes a string as input.\n    2. Initialize an empty string to store the result.\n    3. Iterate through each character in the input string.\n    4. Check if the character is uppercase or lowercase.\n    5. If the character is uppercase, convert it to lowercase and append to the result string.\n    6. If the character is lowercase, convert it to uppercase and append to the result string.\n    7. Return the result string.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: An empty string should return an empty string after flipping the case.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case since the built-in string methods already handle empty strings gracefully.\n", "requirement analysis:\nThe requirement is to create a function that flips the case of characters in a given string. This includes switching lowercase characters to uppercase and uppercase to lowercase. The function should handle various inputs including empty strings. The product should be efficient and user-friendly.\nrequirement pool:\n- The main code should correctly flip the case of characters in a string.\n- The function should handle empty strings and return an empty string.\n- The function should be efficient and handle any input string.\n- The user interface should be simple and intuitive.\n- The product should be tested for various edge cases.\nTo implement the function that flips the case of characters in a given string, we will use Python's built-in string manipulation methods. Specifically, we will use the `swapcase()` method which is designed to switch the case of all characters in a string. This method is efficient and directly addresses the requirement of flipping the case of characters.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case flipping': This involves switching lowercase characters to uppercase and uppercase to lowercase.\n    Explanation: The requirement is to modify the case of each character in the input string. For example, converting 'a' to 'A' and 'A' to 'a'.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The plan provided suggests using Python's built-in `swapcase()` method, which is designed to switch the case of all characters in a string. This method will be directly applied to the input string to achieve the desired outcome.\n\n# [edge case] \n    flip_case('Python3') = 'pYTHON3'\n    Explanation: The input string contains a digit which should remain unchanged. The `swapcase()` method will switch the case of all alphabetic characters ('P', 'y', 't', 'h', 'o', 'n') to their opposite cases, while the digit '3' will remain unchanged.\n\n# [extra code for edge case]\n    No extra code is needed for this specific edge case as the `swapcase()` method inherently handles all characters in the string, including non-alphabetic ones.\n", "requirement analysis:\nThe original requirement is to create a function that flips the case of characters in a given string. This is a simple yet essential function that can be used in various applications, including data processing and string manipulation tasks.\nrequirement pool:\n- The main code should correctly flip the case of each character in the input string.\n- The function should handle both uppercase and lowercase letters.\n- The function should be efficient and handle large strings without performance issues.\n- The function should be tested thoroughly to ensure it works as expected.\n- The function should be documented with examples to help users understand how to use it.\nWe will implement the function by iterating through each character in the input string and checking its case. If the character is uppercase, we will convert it to lowercase, and if it is lowercase, we will convert it to uppercase. This approach ensures that the function handles both uppercase and lowercase letters correctly and efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case switching': This refers to the process of changing the case of a character from uppercase to lowercase and vice versa.\n    Explanation: The requirement asks for a function that will take a string and switch each character's case. This involves checking each character's current case and then changing it to the opposite case.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function, we will follow these steps:\n    1. Initialize an empty string to store the result.\n    2. Iterate through each character in the input string.\n    3. Check if the character is uppercase or lowercase.\n    4. If the character is uppercase, convert it to lowercase and append to the result string.\n    5. If the character is lowercase, convert it to uppercase and append to the result string.\n    6. Return the result string after the iteration is complete.\n\n# [edge case] \n    flip_case('Python3.8') = 'pYTHON3.8'\n    Explanation: The function should switch the case of each character, leaving non-alphabetic characters unchanged. In this case, 'P' becomes 'p', 'y' becomes 'Y', and '3' and '.' remain unchanged.\n    flip_case('12345') = '12345'\n    Explanation: The function should ignore non-alphabetic characters and only switch the case of alphabetic characters. Since there are no alphabetic characters in '12345', the output remains the same.\n    flip_case('Mixed123Case') = 'mIXED123cASE'\n    Explanation: The function should handle a mix of uppercase and lowercase letters, switching each one to its opposite case. Numeric and special characters remain unchanged.\n\n# [extra code for edge case]\n    No extra code is needed for the given edge cases as the core logic already handles non-alphabetic characters correctly.\n", "requirement analysis:\nThe original requirements specify a simple function that flips the case of characters in a given string. This function is essential for text manipulation tasks, making it a fundamental feature for users who need to quickly switch between uppercase and lowercase letters. The requirements are clear and concise, focusing on the functionality without delving into complex user interface or advanced text processing aspects.\nrequirement pool:\n- Implement the flip_case function to switch lowercase to uppercase and uppercase to lowercase.\n- Ensure the function handles all types of characters, including letters, numbers, and special characters.\n- Develop a user-friendly interface for easy interaction and accessibility.\n- Include examples and documentation to help users understand the functionality and how to use it.\nWe will use Python's built-in string manipulation methods to implement the flip_case function. This approach is efficient and leverages Python's simplicity and readability.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case switching': means changing the case of each character in the string from lowercase to uppercase and vice versa.\n    Explanation: The requirement involves transforming the case of each character in a given string. This includes converting all lowercase letters to uppercase and all uppercase letters to lowercase.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the `flip_case` function, we can use Python's built-in string methods. We will iterate through each character in the string and switch its case. Here's a detailed plan:\n    1. Define the function `flip_case` that takes a string as input.\n    2. Initialize an empty string to store the result.\n    3. Iterate through each character in the input string.\n    4. Check if the character is uppercase or lowercase.\n    5. If the character is uppercase, convert it to lowercase and append to the result string.\n    6. If the character is lowercase, convert it to uppercase and append to the result string.\n    7. Return the result string.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: An empty string should return an empty string after flipping the case.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case since the built-in string methods already handle empty strings gracefully.\n\n# [core concept]\n    'case switching'\n    Explanation: The core concept involves changing the case of each character in the string from lowercase to uppercase and vice versa.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the `flip_case` function, we can use Python's built-in string methods. We will iterate through each character in the string and switch its case. Here's a detailed plan:\n    1. Define the function `flip_case` that takes a string as input.\n    2. Initialize an empty string to store the result.\n    3. Iterate through each character in the input string.\n    4. Check if the character is uppercase or lowercase.\n    5. If the character is uppercase, convert it to lowercase and append to the result string.\n    6. If the character is lowercase, convert it to uppercase and append to the result string.\n    7. Return the result string.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: An empty string should return an empty string after flipping the case.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case since the built-in string methods already handle empty strings gracefully.\n", "requirement analysis:\nThe original requirement is to create a function that flips the case of characters in a given string. This is a simple yet essential function that can be used in various applications, including data processing and string manipulation tasks.\nrequirement pool:\n- The main code should correctly flip the case of each character in the input string.\n- The function should handle both uppercase and lowercase letters.\n- The function should be efficient and handle large strings without performance issues.\n- The function should be tested thoroughly to ensure it works as expected.\n- The function should be documented with examples to help users understand how to use it.\nWe will implement the function by iterating through each character in the input string and checking its case. If the character is uppercase, we will convert it to lowercase, and if it is lowercase, we will convert it to uppercase. This approach ensures that the function handles both uppercase and lowercase letters correctly and efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case switching': This refers to the process of changing the case of a character from uppercase to lowercase and vice versa.\n    Explanation: The requirement asks for a function that will take a string and switch each character's case. This involves checking each character's current case and then changing it to the opposite case.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function, we will follow these steps:\n    1. Initialize an empty string to store the result.\n    2. Iterate through each character in the input string.\n    3. Check if the character is uppercase or lowercase.\n    4. If the character is uppercase, convert it to lowercase and append to the result string.\n    5. If the character is lowercase, convert it to uppercase and append to the result string.\n    6. Return the result string after the iteration is complete.\n\n# [edge case] \n    flip_case('Python3.8') = 'pYTHON3.8'\n    Explanation: The function should switch the case of each character, leaving non-alphabetic characters unchanged. In this case, 'P' becomes 'p', 'y' becomes 'Y', and '3' and '.' remain unchanged.\n    flip_case('12345') = '12345'\n    Explanation: The function should ignore non-alphabetic characters and only switch the case of alphabetic characters. Since there are no alphabetic characters in '12345', the output remains the same.\n    flip_case('Mixed123Case') = 'mIXED123cASE'\n    Explanation: The function should handle a mix of uppercase and lowercase letters, switching each one to its opposite case. Numeric and special characters remain unchanged.\n\n# [extra code for edge case]\n    No extra code is needed for the given edge cases as the core logic already handles non-alphabetic characters correctly.\n", "requirement analysis:\nThe requirement is to create a function that flips the case of characters in a given string. This includes switching lowercase characters to uppercase and uppercase to lowercase. The function should handle various inputs including empty strings. The product should be efficient and user-friendly.\nrequirement pool:\n- The main code should correctly flip the case of characters in a string.\n- The function should handle empty strings and return an empty string.\n- The function should be efficient and handle any input string.\n- The user interface should be simple and intuitive.\n- The product should be tested for various edge cases.\nTo implement the function that flips the case of characters in a given string, we will use Python's built-in string manipulation methods. Specifically, we will use the `swapcase()` method which is designed to switch the case of all characters in a string. This method is efficient and directly addresses the requirement of flipping the case of characters.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case flipping': This involves switching lowercase characters to uppercase and uppercase to lowercase.\n    Explanation: The requirement is to modify the case of each character in the input string. For example, converting 'a' to 'A' and 'A' to 'a'.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The plan provided suggests using Python's built-in `swapcase()` method, which is designed to switch the case of all characters in a string. This method will be directly applied to the input string to achieve the desired outcome.\n\n# [edge case] \n    flip_case('Python3') = 'pYTHON3'\n    Explanation: The input string contains a digit which should remain unchanged. The `swapcase()` method will switch the case of all alphabetic characters ('P', 'y', 't', 'h', 'o', 'n') to their opposite cases, while the digit '3' will remain unchanged.\n\n# [extra code for edge case]\n    No extra code is needed for this specific edge case as the `swapcase()` method inherently handles all characters in the string, including non-alphabetic ones.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [126, 126, 126, 126, 126, 126, 126, 126, 126, 126], "completion": "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Flips the case of characters in the given string.\n\n    Args:\n        string (str): The input string to be flipped.\n\n    Returns:\n        str: The string with flipped case.\n    \"\"\"\n    return string.swapcase()\n", "passed": true, "pass": true, "pass_num": 10, "round": 943, "repair_prompt": ["def flip_case(string: str) -> str:\t\n'''For a given string, switch lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n    'hELLO'\n    '''", " def flip_case(string: str) -> str:\n    '''For a given string, switch lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n        'hELLO'\n    >>> flip_case('Python')\n        'pYTHON'\n    >>> flip_case('12345')\n        '12345'\n    >>> flip_case('HeLLo WoRLd')\n        'hEllO wOrlD'\n    '''", " def flip_case(string: str) -> str:\n    '''For a given string, switch lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n        'hELLO'\n    >>> flip_case('Python')\n        'pYTHON'\n    >>> flip_case('123Abc')\n        '123aBC'\n    >>> flip_case('')\n        ''\n    '''"], "mutate_method": "rephrase_one", "parent_index": 590}
