{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers, and returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "entry_point": "any_int", "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n", "test": ["def check(any_int):\n\tassert any_int(8, 19, 11) == True", "def check(any_int):\n\tassert any_int(7.307, 7.071, 5.088) == False", "def check(any_int):\n\tassert any_int(6, 12, 6) == True", "def check(any_int):\n\tassert any_int(6.511, 2, 3) == False", "def check(any_int):\n\tassert any_int(12, 6, 6) == True", "def check(any_int):\n\tassert any_int(2, 2, 4) == True", "def check(any_int):\n\tassert any_int(5.114, 5, 4) == False", "def check(any_int):\n\tassert any_int(3.376, 6.953, 2.111) == False", "def check(any_int):\n\tassert any_int(2, 3, 1)==True", "def check(any_int):\n\tassert any_int(2, 5, 4) == False", "def check(any_int):\n\tassert any_int(7.194, 1.302, 7.462) == False", "def check(any_int):\n\tassert any_int(1, 7, 8) == True", "def check(any_int):\n\tassert any_int(5, 8, 3) == True", "def check(any_int):\n\tassert any_int(2.389, 9, 10) == False", "def check(any_int):\n\tassert any_int(-1, 0, 1) == True", "def check(any_int):\n\tassert any_int(9, 6, 3) == True", "def check(any_int):\n\tassert any_int(4.38, 6, 1) == False", "def check(any_int):\n\tassert any_int(3.785, 6.308, 7.367) == False", "def check(any_int):\n\tassert any_int(6, 10, 4) == True", "def check(any_int):\n\tassert any_int(1.705, 2, 6.616) == False", "def check(any_int):\n\tassert any_int(6, 4, 2) == True", "def check(any_int):\n\tassert any_int(4, 2, 2)==True", "def check(any_int):\n\tassert any_int(3.692, 2, 7.2) == False", "def check(any_int):\n\tassert any_int(2.5, 2, 3)==False", "def check(any_int):\n\tassert any_int(5, 6, 1) == True", "def check(any_int):\n\tassert any_int(1, 3, 2) == True", "def check(any_int):\n\tassert any_int(3,4,7)==True", "def check(any_int):\n\tassert any_int(6, 10, 1) == False", "def check(any_int):\n\tassert any_int(6, 2, 4) == True", "def check(any_int):\n\tassert any_int(6.155, 2.926, 1.672) == False", "def check(any_int):\n\tassert any_int(5, 2, 3) == True", "def check(any_int):\n\tassert any_int(7.829, 2, 9) == False", "def check(any_int):\n\tassert any_int(4, 6, 3) == False", "def check(any_int):\n\tassert any_int(2.583, 3.749, 4.738) == False", "def check(any_int):\n\tassert any_int(12, 11, 1) == True", "def check(any_int):\n\tassert any_int(3.211, 4, 3) == False", "def check(any_int):\n\tassert any_int(1, 1, 7) == False", "def check(any_int):\n\tassert any_int(0, 3, 3) == True", "def check(any_int):\n\tassert any_int(1.157, 8, 2) == False", "def check(any_int):\n\tassert any_int(3, 3, 6) == True", "def check(any_int):\n\tassert any_int(4.272, 6.612, 6.663) == False", "def check(any_int):\n\tassert any_int(1, 1, 2) == True", "def check(any_int):\n\tassert any_int(2.2, 2.2, 2.2)==False", "def check(any_int):\n\tassert any_int(3.158, 8, 6.135) == False", "def check(any_int):\n\tassert any_int(1.346, 5, 6) == False", "def check(any_int):\n\tassert any_int(15, 9, 6) == True", "def check(any_int):\n\tassert any_int(1, 4, 5) == True", "def check(any_int):\n\tassert any_int(7.656, 1, 7) == False", "def check(any_int):\n\tassert any_int(3.599, 5, 1) == False", "def check(any_int):\n\tassert any_int(3, 1, 2) == True", "def check(any_int):\n\tassert any_int(-3, 2, 5) == True", "def check(any_int):\n\tassert any_int(4, 11, 5) == False", "def check(any_int):\n\tassert any_int(10, 7, 3) == True", "def check(any_int):\n\tassert any_int(7, 3, 10) == True", "def check(any_int):\n\tassert any_int(3, 4, 1) == True", "def check(any_int):\n\tassert any_int(3.103, 3, 10) == False", "def check(any_int):\n\tassert any_int(6, 16, 10) == True", "def check(any_int):\n\tassert any_int(1.812, 6.567, 7.145) == False", "def check(any_int):\n\tassert any_int(6, 6, 12) == True", "def check(any_int):\n\tassert any_int(1, 7, 2) == False", "def check(any_int):\n\tassert any_int(7, 6, 1) == True", "def check(any_int):\n\tassert any_int(4, 3, 7) == True", "def check(any_int):\n\tassert any_int(4, 6, 2) == True", "def check(any_int):\n\tassert any_int(2.007, 9, 7.198) == False", "def check(any_int):\n\tassert any_int(2, 3, 5) == True", "def check(any_int):\n\tassert any_int(6.086, 4, 4) == False", "def check(any_int):\n\tassert any_int(3.754, 6, 5.044) == False", "def check(any_int):\n\tassert any_int(8, 10, 2) == True", "def check(any_int):\n\tassert any_int(7.73, 5.041, 6.418) == False", "def check(any_int):\n\tassert any_int(2, 6, 2)==False", "def check(any_int):\n\tassert any_int(3.683, 8, 1.193) == False", "def check(any_int):\n\tassert any_int(-4, 6, 2)==True", "def check(any_int):\n\tassert any_int(7, 13, 6) == True", "def check(any_int):\n\tassert any_int(2.003, 3, 11) == False", "def check(any_int):\n\tassert any_int(3.357, 7, 8.074) == False", "def check(any_int):\n\tassert any_int(3.621, 6.679, 2.542) == False", "def check(any_int):\n\tassert any_int(12, 3, 9) == True", "def check(any_int):\n\tassert any_int(7.797, 7, 4) == False", "def check(any_int):\n\tassert any_int(7, 1, 8) == True", "def check(any_int):\n\tassert any_int(5, 3, 8) == True", "def check(any_int):\n\tassert any_int(5, 7, 2) == True", "def check(any_int):\n\tassert any_int(5, 6, 11) == True", "def check(any_int):\n\tassert any_int(6.681, 8, 4.747) == False", "def check(any_int):\n\tassert any_int(3, 2, 5) == True", "def check(any_int):\n\tassert any_int(3.0,4,7)==False", "def check(any_int):\n\tassert any_int(9, 1, 10) == True", "def check(any_int):\n\tassert any_int(1.5, 5, 3.5)==False", "def check(any_int):\n\tassert any_int(2.834, 7, 9) == False", "def check(any_int):\n\tassert any_int(2, 6, 4) == True", "def check(any_int):\n\tassert any_int(6.068, 1, 3.454) == False", "def check(any_int):\n\tassert any_int(1.834, 7.255, 6.304) == False", "def check(any_int):\n\tassert any_int(1.726, 3, 1) == False", "def check(any_int):\n\tassert any_int(13, 7, 6) == True", "def check(any_int):\n\tassert any_int(6.9, 4, 12) == False", "def check(any_int):\n\tassert any_int(4.039, 5, 5.992) == False", "def check(any_int):\n\tassert any_int(4, 5, 9) == True", "def check(any_int):\n\tassert any_int(6, 2, 7) == False", "def check(any_int):\n\tassert any_int(3, 10, 7) == True", "def check(any_int):\n\tassert any_int(5.586, 1, 2) == False", "def check(any_int):\n\tassert any_int(12, 8, 4) == True", "def check(any_int):\n\tassert any_int(2.459, 5, 11) == False", "def check(any_int):\n\tassert any_int(0, 2, 2) == True", "def check(any_int):\n\tassert any_int(6.175, 9, 4) == False", "def check(any_int):\n\tassert any_int(12, 5, 7) == True", "def check(any_int):\n\tassert any_int(8.854, 2, 8) == False", "def check(any_int):\n\tassert any_int(2.858, 1, 2) == False", "def check(any_int):\n\tassert any_int(4, 3, 1) == True", "def check(any_int):\n\tassert any_int(4, 11, 1) == False", "def check(any_int):\n\tassert any_int(5, 5, 10) == True", "def check(any_int):\n\tassert any_int(10, 5, 5) == True", "def check(any_int):\n\tassert any_int(3.228, 6, 6) == False", "def check(any_int):\n\tassert any_int(2.805, 3, 6.418) == False", "def check(any_int):\n\tassert any_int(2, 1, 1) == True", "def check(any_int):\n\tassert any_int(6, 3, 3) == True", "def check(any_int):\n\tassert any_int(7, 5, 12) == True", "def check(any_int):\n\tassert any_int(-4, 11, 7) == True", "def check(any_int):\n\tassert any_int(2,1,1)==True", "def check(any_int):\n\tassert any_int(7, 2, 9) == True", "def check(any_int):\n\tassert any_int(3.445, 2, 2) == False", "def check(any_int):\n\tassert any_int(2, 7, 5) == True", "def check(any_int):\n\tassert any_int(6.254, 6, 7) == False", "def check(any_int):\n\tassert any_int(3.685, 2, 6) == False", "def check(any_int):\n\tassert any_int(5, 9, 5) == False", "def check(any_int):\n\tassert any_int(5.408, 8, 3.454) == False", "def check(any_int):\n\tassert any_int(-7, 5, -2) == True", "def check(any_int):\n\tassert any_int(4, 8, 4) == True", "def check(any_int):\n\tassert any_int(12, 7, 5) == True", "def check(any_int):\n\tassert any_int(4, 7, 3) == True", "def check(any_int):\n\tassert any_int(6.61, 1.687, 2.647) == False", "def check(any_int):\n\tassert any_int(3.033, 6.554, 7.391) == False", "def check(any_int):\n\tassert any_int(2.08, 7, 1.239) == False"], "test_case_list": ["assert any_int(8, 19, 11) == True", "assert any_int(7.307, 7.071, 5.088) == False", "assert any_int(6, 12, 6) == True", "assert any_int(6.511, 2, 3) == False", "assert any_int(12, 6, 6) == True", "assert any_int(2, 2, 4) == True", "assert any_int(5.114, 5, 4) == False", "assert any_int(3.376, 6.953, 2.111) == False", "assert any_int(2, 3, 1)==True", "assert any_int(2, 5, 4) == False", "assert any_int(7.194, 1.302, 7.462) == False", "assert any_int(1, 7, 8) == True", "assert any_int(5, 8, 3) == True", "assert any_int(2.389, 9, 10) == False", "assert any_int(-1, 0, 1) == True", "assert any_int(9, 6, 3) == True", "assert any_int(4.38, 6, 1) == False", "assert any_int(3.785, 6.308, 7.367) == False", "assert any_int(6, 10, 4) == True", "assert any_int(1.705, 2, 6.616) == False", "assert any_int(6, 4, 2) == True", "assert any_int(4, 2, 2)==True", "assert any_int(3.692, 2, 7.2) == False", "assert any_int(2.5, 2, 3)==False", "assert any_int(5, 6, 1) == True", "assert any_int(1, 3, 2) == True", "assert any_int(3,4,7)==True", "assert any_int(6, 10, 1) == False", "assert any_int(6, 2, 4) == True", "assert any_int(6.155, 2.926, 1.672) == False", "assert any_int(5, 2, 3) == True", "assert any_int(7.829, 2, 9) == False", "assert any_int(4, 6, 3) == False", "assert any_int(2.583, 3.749, 4.738) == False", "assert any_int(12, 11, 1) == True", "assert any_int(3.211, 4, 3) == False", "assert any_int(1, 1, 7) == False", "assert any_int(0, 3, 3) == True", "assert any_int(1.157, 8, 2) == False", "assert any_int(3, 3, 6) == True", "assert any_int(4.272, 6.612, 6.663) == False", "assert any_int(1, 1, 2) == True", "assert any_int(2.2, 2.2, 2.2)==False", "assert any_int(3.158, 8, 6.135) == False", "assert any_int(1.346, 5, 6) == False", "assert any_int(15, 9, 6) == True", "assert any_int(1, 4, 5) == True", "assert any_int(7.656, 1, 7) == False", "assert any_int(3.599, 5, 1) == False", "assert any_int(3, 1, 2) == True", "assert any_int(-3, 2, 5) == True", "assert any_int(4, 11, 5) == False", "assert any_int(10, 7, 3) == True", "assert any_int(7, 3, 10) == True", "assert any_int(3, 4, 1) == True", "assert any_int(3.103, 3, 10) == False", "assert any_int(6, 16, 10) == True", "assert any_int(1.812, 6.567, 7.145) == False", "assert any_int(6, 6, 12) == True", "assert any_int(1, 7, 2) == False", "assert any_int(7, 6, 1) == True", "assert any_int(4, 3, 7) == True", "assert any_int(4, 6, 2) == True", "assert any_int(2.007, 9, 7.198) == False", "assert any_int(2, 3, 5) == True", "assert any_int(6.086, 4, 4) == False", "assert any_int(3.754, 6, 5.044) == False", "assert any_int(8, 10, 2) == True", "assert any_int(7.73, 5.041, 6.418) == False", "assert any_int(2, 6, 2)==False", "assert any_int(3.683, 8, 1.193) == False", "assert any_int(-4, 6, 2)==True", "assert any_int(7, 13, 6) == True", "assert any_int(2.003, 3, 11) == False", "assert any_int(3.357, 7, 8.074) == False", "assert any_int(3.621, 6.679, 2.542) == False", "assert any_int(12, 3, 9) == True", "assert any_int(7.797, 7, 4) == False", "assert any_int(7, 1, 8) == True", "assert any_int(5, 3, 8) == True", "assert any_int(5, 7, 2) == True", "assert any_int(5, 6, 11) == True", "assert any_int(6.681, 8, 4.747) == False", "assert any_int(3, 2, 5) == True", "assert any_int(3.0,4,7)==False", "assert any_int(9, 1, 10) == True", "assert any_int(1.5, 5, 3.5)==False", "assert any_int(2.834, 7, 9) == False", "assert any_int(2, 6, 4) == True", "assert any_int(6.068, 1, 3.454) == False", "assert any_int(1.834, 7.255, 6.304) == False", "assert any_int(1.726, 3, 1) == False", "assert any_int(13, 7, 6) == True", "assert any_int(6.9, 4, 12) == False", "assert any_int(4.039, 5, 5.992) == False", "assert any_int(4, 5, 9) == True", "assert any_int(6, 2, 7) == False", "assert any_int(3, 10, 7) == True", "assert any_int(5.586, 1, 2) == False", "assert any_int(12, 8, 4) == True", "assert any_int(2.459, 5, 11) == False", "assert any_int(0, 2, 2) == True", "assert any_int(6.175, 9, 4) == False", "assert any_int(12, 5, 7) == True", "assert any_int(8.854, 2, 8) == False", "assert any_int(2.858, 1, 2) == False", "assert any_int(4, 3, 1) == True", "assert any_int(4, 11, 1) == False", "assert any_int(5, 5, 10) == True", "assert any_int(10, 5, 5) == True", "assert any_int(3.228, 6, 6) == False", "assert any_int(2.805, 3, 6.418) == False", "assert any_int(2, 1, 1) == True", "assert any_int(6, 3, 3) == True", "assert any_int(7, 5, 12) == True", "assert any_int(-4, 11, 7) == True", "assert any_int(2,1,1)==True", "assert any_int(7, 2, 9) == True", "assert any_int(3.445, 2, 2) == False", "assert any_int(2, 7, 5) == True", "assert any_int(6.254, 6, 7) == False", "assert any_int(3.685, 2, 6) == False", "assert any_int(5, 9, 5) == False", "assert any_int(5.408, 8, 3.454) == False", "assert any_int(-7, 5, -2) == True", "assert any_int(4, 8, 4) == True", "assert any_int(12, 7, 5) == True", "assert any_int(4, 7, 3) == True", "assert any_int(6.61, 1.687, 2.647) == False", "assert any_int(3.033, 6.554, 7.391) == False", "assert any_int(2.08, 7, 1.239) == False"], "nl": "\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    ", "func": "def any_int(x, y, z):", "examples": "Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    ", "completions": ["from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if any two numbers sum up to the third number and all numbers are integers.\n\n    Args:\n        x (int): The first number.\n        y (int): The second number.\n        z (int): The third number.\n\n    Returns:\n        bool: True if the sum of any two numbers equals the third number and all numbers are integers, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n\n    # Check if any two numbers sum up to the third number\n    return (x + y == z) or (x + z == y) or (y + z == x)\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if any one of the given numbers is the sum of the other two.\n\n    Args:\n        x (int): The first number.\n        y (int): The second number.\n        z (int): The third number.\n\n    Returns:\n        bool: True if any one of the numbers is the sum of the other two, otherwise False.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n\n    # Check if any one of the numbers is the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if one of the given numbers is the sum of the other two and all numbers are integers.\n\n    Args:\n        x (int): The first number.\n        y (int): The second number.\n        z (int): The third number.\n\n    Returns:\n        bool: True if one of the numbers is the sum of the other two and all numbers are integers, otherwise False.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n\n    # Check if one of the numbers is the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: (int, float), y: (int, float), z: (int, float)) -> bool:\n    '''\n    Parameters:\n    x (int, float): The first number.\n    y (int, float): The second number.\n    z (int, float): The third number.\n\n    Returns:\n    bool: True if one of the numbers is equal to the sum of the other two and all numbers are integers, False otherwise.\n    '''\n    # Check if all inputs are integers or floats\n    if not isinstance(x, (int, float)) or not isinstance(y, (int, float)) or not isinstance(z, (int, float)):\n        return False\n\n    # Check if any of the conditions are met\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: (int, float), y: (int, float), z: (int, float)) -> bool:\n    # Ensure all inputs are numbers\n    if not all(isinstance(n, (int, float)) for n in [x, y, z]):\n        return False\n    # Check if any number is the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: (int, float), y: (int, float), z: (int, float)) -> bool:\n    \"\"\"\n    Check if any one of the three numbers is equal to the sum of the other two.\n    \n    Args:\n        x (int, float): The first number.\n        y (int, float): The second number.\n        z (int, float): The third number.\n    \n    Returns:\n        bool: True if any one of the numbers is equal to the sum of the other two, otherwise False.\n    \"\"\"\n    # Ensure all inputs are integers or can be converted to integers\n    if not (isinstance(x, (int, float)) and isinstance(y, (int, float)) and isinstance(z, (int, float))):\n        return False\n    \n    # Check if any one of the numbers is equal to the sum of the other two\n    sum_of_others = x + y + z\n    return x == sum_of_others or y == sum_of_others or z == sum_of_others\n", "from typing import List\n## main.py\n\ndef any_int(x: (int, float), y: (int, float), z: (int, float)) -> bool:\n    \"\"\"\n    Checks if one of the three numbers is equal to the sum of the other two.\n    \n    Args:\n        x (int, float): The first number.\n        y (int, float): The second number.\n        z (int, float): The third number.\n    \n    Returns:\n        bool: True if any number is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are either integers or floats\n    if not (isinstance(x, (int, float)) and isinstance(y, (int, float)) and isinstance(z, (int, float))):\n        raise ValueError(\"All inputs must be integers or floats\")\n    \n    # Check if any number is equal to the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n\n# Example usage:\n# print(any_int(5, 2, 7))  # True\n# print(any_int(3, 2, 2))  # False\n# print(any_int(3, -2, 1))  # True\n# print(any_int(3.6, -2.1, 5.7))  # True\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if any one of the numbers is equal to the sum of the other two, and all numbers are integers.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if any one of the numbers is equal to the sum of the other two and all numbers are integers, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n\n    # Check if any one of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    return False\n\n# Example usage:\n# print(any_int(5, 2, 7))  # True\n# print(any_int(3, 2, 2))  # False\n# print(any_int(3, -2, 1)) # True\n", "from typing import List\n## main.py\n\ndef any_int(x: (int or float), y: (int or float), z: (int or float)) -> bool:\n    \"\"\"\n    Check if any one of the three numbers is equal to the sum of the other two and all numbers are integers.\n\n    Args:\n        x (int or float): The first number.\n        y (int or float): The second number.\n        z (int or float): The third number.\n\n    Returns:\n        bool: True if any one of the numbers is equal to the sum of the other two and all numbers are integers, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not (isinstance(x, (int, float)) and isinstance(y, (int, float)) and isinstance(z, (int, float))):\n        return False\n\n    # Check if any one of the numbers is equal to the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: (int, float), y: (int, float), z: (int, float)) -> bool:\n    # Check if all inputs are integers or floats\n    if not (isinstance(x, (int, float)) and isinstance(y, (int, float)) and isinstance(z, (int, float))):\n        return False\n    \n    # Check if any one of the numbers equals the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False\n\n# Example usage:\n# print(any_int(5, 2, 7))  # True, because 5 + 2 = 7\n# print(any_int(3, 2, 2))  # False, no number is the sum of the other two\n# print(any_int(3, -2, 1)) # True, because 3 + (-2) = 1\n# print(any_int(3.6, -2.2, 2))  # False, because inputs are not integers\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that takes three numbers and returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. The function should return false in any other cases. This includes checking if the numbers are integers and if one number is indeed the sum of the other two. The function should handle both integers and floating-point numbers to ensure robustness.\nrequirement pool:\n- The function should correctly identify if one number is the sum of the other two and ensure all numbers are integers.\n- The function should handle both integers and floating-point numbers.\n- The function should return false in any other cases where the conditions are not met.\n- The function should be efficient and handle edge cases appropriately.\n- The function should be easy to understand and maintain.\nWe will use Python's built-in capabilities to check if the numbers are integers and use simple arithmetic operations to verify if one number is the sum of the other two. This approach ensures efficiency and clarity in the implementation.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers equals a third number'\n    In the requirement, it means that the sum of any two of the given numbers should be equal to the third number, and all numbers must be integers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Check if all inputs are integers using isinstance(num, int).\n    (2) Calculate the sum of any two numbers.\n    (3) Check if this sum is equal to the third number.\n    (4) Return True if the condition is met, otherwise return False.\n\n# [edge case] \n    any_int(5, 2, 7) = True\n    Explanation: 5 + 2 = 7, and all numbers are integers.\n    any_int(3, 2, 2) = False\n    Explanation: No number is equal to the sum of the other two, and all numbers are integers.\n    any_int(3, -2, 1) = True\n    Explanation: 3 + (-2) = 1, and all numbers are integers.\n    any_int(3.6, -2.2, 2) = False\n    Explanation: The sum of 3.6 and -2.2 is approximately 1.4, which is not equal to 2, and not all numbers are integers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all necessary checks for integer inputs and the sum condition.\n", "requirement analysis:\nThe requirement is to create a function that takes three numbers and returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. The function should return false otherwise. This requirement is clear and specific, focusing on the logic and type checking of the inputs.\nrequirement pool:\n- The main code should accurately check if one number is the sum of the other two and ensure all inputs are integers.\n- Implement error handling for non-integer inputs to ensure the function does not break.\n- Optimize the function for performance to handle large datasets efficiently.\n- Ensure the function is well-documented and easy to understand for users and contributors.\n- Test the function with various edge cases to validate its correctness.\nWe will use Python's built-in capabilities to check if the inputs are integers and then use simple arithmetic operations to determine if one number is the sum of the other two. This approach leverages Python's type checking and arithmetic operations, which are both efficient and straightforward.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers equals a third number'\n    In the requirement, it means that the sum of any two of the given numbers should be equal to the third number, and all numbers must be integers.\n\n# [phrase showing quantity relationship]\n    No specific phrase showing quantity relationship.\n\n# [degree adverb] \n    No specific degree adverb.\n\n# [code logic]\n    (1) Check if all inputs are integers.\n    (2) Check if any one of the numbers is equal to the sum of the other two.\n    (3) Return True if the condition is met, otherwise return False.\n\n# [edge case] \n    any_int(5, 2, 7) = True\n    Explanation: 5 + 2 = 7, so one number is the sum of the other two, and all numbers are integers.\n    any_int(3, 2, 2) = False\n    Explanation: No number is equal to the sum of the other two, even though all numbers are integers.\n    any_int(3.6, -2.2, 2) = False\n    Explanation: The inputs are not integers, so the function should return False.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the inputs are not integers.\n        if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n            return False\n        (other code)\n", "requirement analysis:\nThe requirement is to create a function that checks if one of the three given numbers is equal to the sum of the other two, and all numbers must be integers. The function should return True if the condition is met, and False otherwise. The function should also handle cases where the numbers are floating-point numbers, returning False in such cases.\nrequirement pool:\n- The function should correctly identify if one number is the sum of the other two and all numbers are integers.\n- The function should handle floating-point numbers and return False for such cases.\n- The function should be efficient and handle edge cases appropriately.\n- The function should be easy to understand and maintain.\n- The function should be tested thoroughly to ensure it meets the requirements.\nWe will use Python's built-in capabilities to check if the numbers are integers and if one of them is the sum of the other two. The function will first ensure all inputs are integers, then perform the sum check. This approach leverages Python's type checking and arithmetic operations, ensuring efficiency and simplicity.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers equals a third number'\n    In the requirement, it means that the sum of any two of the given numbers should be equal to the third number, and all numbers must be integers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Check if all inputs are integers.\n    (2) Check if one of the numbers is equal to the sum of the other two.\n    (3) Return True if the conditions are met, otherwise return False.\n\n# [edge case] \n    any_int(5, 2, 7) \u279e True\n    Explanation: 5 + 2 = 7, so one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    any_int(3, 2, 2) \u279e False\n    Explanation: No number is equal to the sum of the other two, and all numbers are integers.\n    any_int(3.6, -2.2, 2) \u279e False\n    Explanation: The third number (2) is an integer, but 3.6 and -2.2 are not integers, so the function should return False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function already checks if all numbers are integers before performing the sum check.\n", "requirement analysis:\nThe requirement is to create a function that takes three numbers and returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. The function should return false otherwise. This requirement is clear and specific, focusing on the logic and data types involved.\nrequirement pool:\n- The main code should accurately check if one of the numbers is equal to the sum of the other two and ensure all numbers are integers.\n- The function should handle edge cases, such as all numbers being the same or the sum being zero.\n- The function should be efficient and not consume excessive resources.\n- The implementation should be clear and concise, ensuring easy understanding and maintenance.\n- The function should be tested thoroughly to ensure it meets the specified requirements and handles various inputs correctly.\nWe will use Python's built-in capabilities to create a function that checks if one of the given numbers is equal to the sum of the other two, ensuring all numbers are integers. This approach leverages Python's type checking and arithmetic operations to ensure the function meets the requirements efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers equals the third'\n    In the requirement, it means that the sum of any two of the given numbers should be equal to the third number.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n\n# [edge case] \n    any_int(5, 2, 7) \u279e True\n    Explanation: 5 + 2 = 7, so one of the numbers is equal to the sum of the other two.\n    any_int(3, 2, 2) \u279e False\n    Explanation: No number is equal to the sum of the other two.\n    any_int(3, -2, 1) \u279e True\n    Explanation: 3 + (-2) = 1, so one of the numbers is equal to the sum of the other two.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function can be implemented by checking if any of the three conditions (x == y + z, y == x + z, z == x + y) is true and ensuring all numbers are integers.\n", "requirement analysis:\nThe requirement is to create a function that takes three numbers and returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. The function should return false in any other cases. This includes handling both integers and floating-point numbers, ensuring the function is robust against various inputs. The function should be efficient and clear in its implementation.\nrequirement pool:\n- The main code should accurately check if one number is the sum of the other two and ensure all numbers are integers.\n- The function should handle both integers and floating-point numbers.\n- The function should be efficient and not consume excessive resources.\n- The function should be easy to understand and maintain.\n- The function should pass through a variety of test cases to ensure correctness.\nWe will use Python's built-in capabilities to check if the numbers are integers and to perform arithmetic operations. The function will first ensure that all inputs are integers, then it will check if any one of the numbers is equal to the sum of the other two. This approach leverages Python's type checking and arithmetic capabilities to ensure efficiency and clarity.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers equals a third number'\n    In the requirement, it means that the sum of any two of the given numbers should be equal to the third number.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The function should first check if all inputs are integers. If not, it should return False. Then, it should check if any one of the numbers is equal to the sum of the other two.\n\n# [edge case] \n    any_int(3.6, -2.4, 1.2) = False\n    Explanation: The function should return False because the inputs are not integers.\n    any_int(1, 2, 3) = True\n    Explanation: The sum of 1 and 2 is 3, which is equal to the third number.\n    any_int(0, 0, 0) = True\n    Explanation: The sum of any two 0s is 0, which is equal to the third number.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function can directly check the conditions and return the appropriate boolean value.\n", "requirement analysis:\nThe original requirement is to create a function that takes three numbers and returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. The function should return false otherwise. This requirement is clear and specific, focusing on the logic of checking if any one number equals the sum of the other two, with the added constraint that all numbers must be integers. The function should handle both integer and floating-point inputs, ensuring type checking is robust.\nrequirement pool:\n- Implement the function to check if any one number equals the sum of the other two, ensuring all numbers are integers.\n- Add type checking to ensure all inputs are integers or convert them to integers if possible.\n- Ensure the function is efficient and handles edge cases, such as non-numeric inputs.\n- Document the function clearly for easy understanding and usage.\n- Test the function with various inputs to verify its correctness and robustness.\nWe will implement the function using Python's built-in 'isinstance' function for type checking and simple arithmetic operations to check if any one of the three numbers is equal to the sum of the other two. The function will first ensure all inputs are integers or can be converted to integers, then perform the sum check, and return the appropriate boolean value.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum check': means checking if any one of the numbers is equal to the sum of the other two\n    'integer type': means all inputs must be integers or can be converted to integers\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Ensure all inputs are integers or can be converted to integers.\n    - Check if any one of the numbers is equal to the sum of the other two.\n    - Return True if the condition is met, otherwise return False.\n\n# [edge case] \n    any_int(3.6, -2.1, 5.7) = False\n    explanation: Although the sum of 3.6 and -2.1 is approximately 1.5, which is equal to 5.7, the inputs are not integers, so the function should return False.\n    any_int(1, 2, 3) = True\n    explanation: The sum of 1 and 2 is 3, so the function should return True.\n    any_int(0, 0, 0) = True\n    explanation: The sum of 0 and 0 is 0, so the function should return True, considering zero as an integer.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function already includes type checking and the sum check, which naturally handles non-integer inputs gracefully.\n", "requirement analysis:\nThe original requirements specify a function that takes three numbers and returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. The function should return false in any other cases. This includes handling both integers and floating-point numbers. The requirement is clear and specific, focusing on the logical condition to be checked.\nrequirement pool:\n- Implement the function to check if any of the three numbers is equal to the sum of the other two, considering both integers and floating-point numbers.\n- Ensure the function is efficient and handles edge cases, such as negative numbers and zero.\n- Document the function with examples to help users understand its usage and behavior.\nTo implement the function `any_int(x, y, z)` that checks if one of the three numbers is equal to the sum of the other two, considering both integers and floating-point numbers, we will use Python's built-in capabilities and ensure the function is efficient and handles edge cases. The function will first verify if all inputs are integers or floats, then check if any number equals the sum of the other two.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers': means the result of adding two of the three numbers together.\n    'integers or floating-point numbers': means the function should handle both types of numerical values.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - First, check if all inputs are either integers or floats.\n    - Then, check if any one of the numbers is equal to the sum of the other two.\n    - Return `True` if the condition is met, otherwise return `False`.\n\n# [edge case] \n    any_int(5, 2, 7) = True\n    Explanation: 7 is equal to the sum of 5 and 2.\n    any_int(3, 2, 2) = False\n    Explanation: No number is equal to the sum of the other two.\n    any_int(3, -2, 1) = True\n    Explanation: 3 is equal to the sum of -2 and 1.\n    any_int(3.6, -2.1, 5.7) = True\n    Explanation: 5.7 is equal to the sum of 3.6 and -2.1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function already checks if all inputs are numbers and if any number is equal to the sum of the other two.\n", "requirement analysis:\nThe original requirements call for a function that checks if any one of three given numbers is equal to the sum of the other two, with all numbers being integers. The function should return True if such a condition is met, and False otherwise. The requirements are clear and straightforward, focusing on the core functionality of integer validation and arithmetic operations.\nrequirement pool:\n- Implement the function to accurately check if any number is equal to the sum of the other two, ensuring all numbers are integers.\n- Ensure the function handles both positive and negative integers correctly.\n- Provide clear and concise documentation with examples to facilitate easy understanding and usage.\n- Optimize the function for efficiency and performance.\n- Test the function with various edge cases to ensure robustness.\nWe will implement the function using Python's built-in capabilities for type checking and arithmetic operations. The function will first check if all inputs are integers using the 'isinstance' function. Then, it will check if any one of the numbers is equal to the sum of the other two. This approach leverages Python's simplicity and efficiency for such tasks.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers equals a third number'\n    In the requirement, it means that the sum of any two of the given numbers should be equal to the third number, and all numbers must be integers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Check if all inputs are integers using `isinstance(x, int)`, `isinstance(y, int)`, and `isinstance(z, int)`.\n    (2) Check if any one of the numbers is equal to the sum of the other two using `x == y + z`, `y == x + z`, or `z == x + y`.\n    (3) Return `True` if any of the above conditions are met and all numbers are integers; otherwise, return `False`.\n\n# [edge case] \n    any_int(5, 2, 7) = True\n    Explanation: 5 is equal to 2 + 7. All numbers are integers.\n    any_int(3, 2, 2) = False\n    Explanation: None of the numbers is equal to the sum of the other two.\n    any_int(3, -2, 1) = True\n    Explanation: 3 is equal to -2 + 1. All numbers are integers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided covers all necessary checks.\n", "requirement analysis:\nThe original requirements specify a function that takes three numbers and returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. The function should return false otherwise. This requirement is clear and concise, focusing on the core functionality of checking integer combinations.\nrequirement pool:\n- The main code should accurately check if any one of the three numbers is equal to the sum of the other two and ensure all numbers are integers.\n- Implement error handling for non-integer inputs to ensure the function does not break.\n- Optimize the function for performance to handle large datasets efficiently.\n- Ensure the function is well-documented and easy to understand for users and contributors.\n- Test the function with various test cases to verify its correctness.\nTo implement the function `any_int(x, y, z)` that checks if any one of the three numbers is equal to the sum of the other two and all numbers are integers, we will use Python's built-in capabilities and type checking. We will ensure the function is robust by handling non-integer inputs gracefully and optimizing for performance.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers equals the third'\n    In the requirement, it means that for any three numbers, one of them should be equal to the sum of the other two.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Ensure all inputs are integers.\n    - Check if any one of the numbers is equal to the sum of the other two.\n\n# [edge case] \n    any_int(5, 2, 7) = True\n    Explanation: 7 is equal to the sum of 5 and 2.\n    any_int(3, 2, 2) = False\n    Explanation: None of the numbers is equal to the sum of the other two.\n    any_int(3, -2, 1) = True\n    Explanation: 3 is equal to the sum of -2 and 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function already checks if the inputs are integers and if any one of the numbers is equal to the sum of the other two.\n\n# [core concept]\n    'integer'\n    In the requirement, it means that all the numbers provided to the function should be whole numbers.\n\n# [phrase showing quantity relationship]\n    'equal to the sum of the other two'\n    This phrase indicates that we need to check if one number is equal to the sum of the other two numbers.\n\n# [degree adverb] \n    'one of the numbers'\n    This adverb specifies that we need to check for one specific number that meets the condition.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Ensure all inputs are integers.\n    - Check if any one of the numbers is equal to the sum of the other two.\n\n# [edge case] \n    any_int(3.6, -2.1, 5.7) = False\n    Explanation: Although the sum of 3.6 and -2.1 is approximately 1.5, which is close to 5.7, they are not exactly equal due to floating-point precision issues. Therefore, the function should return False.\n    any_int(0, 0, 0) = True\n    Explanation: All numbers are zero, and zero is equal to the sum of zero and zero.\n    any_int(1, 1, 2) = True\n    Explanation: The numbers 1 and 2 are integers, and 2 is equal to the sum of 1 and 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function already checks if the inputs are integers and if any one of the numbers is equal to the sum of the other two. However, for floating-point numbers, we need to consider the precision issue and decide if the difference is negligible.\n", "requirement analysis:\nThe requirement is to create a function that takes three numbers and returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. The function should return false in any other cases. This includes handling both integers and floating-point numbers, ensuring the function is robust against various inputs.\nrequirement pool:\n- The function should correctly identify if one number is the sum of the other two and all numbers are integers.\n- The function should handle both integers and floating-point numbers.\n- The function should return false for any other cases not meeting the specified conditions.\n- Ensure the function is efficient and handles edge cases appropriately.\n- Develop a clear and concise implementation that is easy to understand and maintain.\nWe will use Python's built-in capabilities to check if the numbers are integers and if one number is the sum of the other two. The function will first ensure all inputs are integers using the 'isinstance' function. Then, it will check if any one of the numbers equals the sum of the other two. This approach ensures efficiency and clarity in the implementation.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers equals a third number'\n    In the requirement, it means that the sum of any two of the given numbers should be equal to the third number.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Check if all inputs are integers using `isinstance`.\n    (2) Check if any one of the numbers equals the sum of the other two.\n    (3) Return `True` if the condition is met, otherwise return `False`.\n\n# [edge case] \n    any_int(5, 2, 7) = True\n    Explanation: 5 + 2 = 7, so one number is the sum of the other two.\n    any_int(3, 2, 2) = False\n    Explanation: No number is the sum of the other two.\n    any_int(3, -2, 1) = True\n    Explanation: 3 + (-2) = 1, so one number is the sum of the other two.\n    any_int(3.6, -2.2, 2) = False\n    Explanation: The inputs are not integers, so the function should return False.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the inputs are not integers.\n        if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n            return False\n        (other code)\n"], "scores": [1.0, 1.0, 1.0, 0.9847, 0.9847, 0.5115, 0.9847, 1.0, 0.9847, 0.9847], "pass_results": [true, true, true, false, false, false, false, true, false, false], "pass_test_cases_num": [131, 131, 131, 129, 129, 67, 129, 131, 129, 129], "completion": "from typing import List\n## main.py\n\ndef any_int(x: (int, float), y: (int, float), z: (int, float)) -> bool:\n    # Check if all inputs are integers or floats\n    if not (isinstance(x, (int, float)) and isinstance(y, (int, float)) and isinstance(z, (int, float))):\n        return False\n    \n    # Check if any one of the numbers equals the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False\n\n# Example usage:\n# print(any_int(5, 2, 7))  # True, because 5 + 2 = 7\n# print(any_int(3, 2, 2))  # False, no number is the sum of the other two\n# print(any_int(3, -2, 1)) # True, because 3 + (-2) = 1\n# print(any_int(3.6, -2.2, 2))  # False, because inputs are not integers\n", "passed": true, "pass": true, "pass_num": 4, "round": 734, "repair_prompt": ["def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers, and returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", " def any_int(x, y, z):\n    '''Create a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers, and returns false in any other cases.\n    Examples\n        any_int(5, 2, 7) \u279e True\n        \n        any_int(3, 2, 2) \u279e False\n\n        any_int(3, -2, 1) \u279e True\n        \n        any_int(3.6, -2.", " def any_int(x, y, z):\n    '''Create a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers, and returns false in any other cases.\n    Examples\n        any_int(5, 2, 7) \u279e True\n        \n        any_int(3, 2, 2) \u279e False\n\n        any_int(3, -2, 1) \u279e True\n        \n        any_int(3.6, -2."], "mutate_method": "condense_two2one", "parent_index": 440}
