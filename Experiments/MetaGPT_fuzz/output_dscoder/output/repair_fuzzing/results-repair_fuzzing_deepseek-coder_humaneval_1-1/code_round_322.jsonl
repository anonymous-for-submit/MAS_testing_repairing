{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True if the list elements are monotonically increasing or decreasing. A monotonically increasing list is one where each element is greater than or equal to the previous element. Similarly, a monotonically decreasing list is one where each element is less than or equal to the previous element.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": ["def check(monotonic):\n\tassert monotonic([6, 2, 5, 7, 4, 65]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 7, 4, 3, 64]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 8]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 7, 1, 62]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 1, 1]) == True", "def check(monotonic):\n\tassert monotonic([3, 2, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([2, 7, 7, 15]) == True", "def check(monotonic):\n\tassert monotonic([4, 7, 7, 1, 1, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 8, 13]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 8, 17]) == True", "def check(monotonic):\n\tassert monotonic([2, 22, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([2, 23, 5, 6]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 2, 18]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 2, 6]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 3, 2]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 2, -5]) == True", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 10]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 6, 18]) == False", "def check(monotonic):\n\tassert monotonic([6, 1, 7, 3, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 7, 3, 8, 61]) == False", "def check(monotonic):\n\tassert monotonic([2, 17, 7, 8]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 4, 5, 3, 59]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 5, 5, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([1, 16, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([7, 6, 2, -14]) == True", "def check(monotonic):\n\tassert monotonic([5, 6, 4, 16]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 5, -10]) == False", "def check(monotonic):\n\tassert monotonic([1, 22, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 8, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 1, 6, 4, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 7, 2, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 1, 4]) == False", "def check(monotonic):\n\tassert monotonic([4, 19, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 8, 5, 5, 56]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 6, 25]) == True", "def check(monotonic):\n\tassert monotonic([2, 3, 1, 7]) == False", "def check(monotonic):\n\tassert monotonic([8, 6, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 6, 2, 8, 62]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 6, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 6, 1, 3]) == False", "def check(monotonic):\n\tassert monotonic([4, 2, 5, 7, 6, 62]) == False", "def check(monotonic):\n\tassert monotonic([3, 7, 1, 20]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 17]) == False", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 5, 5, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 20, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 4, 14]) == False", "def check(monotonic):\n\tassert monotonic([3, 17, 2, 14]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 7, 2, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 20]) == True", "def check(monotonic):\n\tassert monotonic([3, 3, 3, -5]) == True", "def check(monotonic):\n\tassert monotonic([4, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 4, 2, 1, 60]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 7, 24]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 1, 1, 2, 61]) == False", "def check(monotonic):\n\tassert monotonic([1, 4, 3, -8]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 3, 5, 10, 63]) == False", "def check(monotonic):\n\tassert monotonic([4, 6, 3, 3, 10, 57]) == False", "def check(monotonic):\n\tassert monotonic([5, 4, 9, 14]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 5, 17]) == True", "def check(monotonic):\n\tassert monotonic([6, 7, 1, 8]) == False", "def check(monotonic):\n\tassert monotonic([9, 2, 5, -5]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 5, 1]) == False", "def check(monotonic):\n\tassert monotonic([9, 9, 9, 9]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 4, 5, 60]) == True", "def check(monotonic):\n\tassert monotonic([6, 2, 5, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 3, -9]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([1, 24, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 7, 6, 6, 61]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 1, 0]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 3, 3, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 8, 5, 9, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 16, 2, 11]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 2, 4, 2, 55]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 8, 7, 7, 65]) == False", "def check(monotonic):\n\tassert monotonic([2, 20, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 3, -10]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 4, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -12]) == True", "def check(monotonic):\n\tassert monotonic([9, 4, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([2, 15, 2, 15]) == False", "def check(monotonic):\n\tassert monotonic([6, 2, 4, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 2, 4]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 1, 3, 63]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 12]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 2, 1]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([6, 5, 7, 7, 6, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 4, 14]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 8, 5]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 1, -7]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 6, 8]) == True", "def check(monotonic):\n\tassert monotonic([9, 5, 5, -14]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 4, 4, 5, 55]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 0, -10]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 21]) == True", "def check(monotonic):\n\tassert monotonic([1, 1, 3, 18]) == True", "def check(monotonic):\n\tassert monotonic([1, 6, 4, -7]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 4, 17]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 2, 5, 60]) == False", "def check(monotonic):\n\tassert monotonic([5, 2, 5, 2]) == False", "def check(monotonic):\n\tassert monotonic([2, 3, 8, 8]) == True", "def check(monotonic):\n\tassert monotonic([5, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([8, 3, 2, -15]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 3, 19]) == False"], "test_case_list": ["assert monotonic([6, 2, 5, 7, 4, 65]) == False", "assert monotonic([3, 3, 7, 4, 3, 64]) == False", "assert monotonic([3, 1, 5, 8]) == False", "assert monotonic([4, 3, 5, 7, 1, 62]) == False", "assert monotonic([4, 4, 1, 1]) == True", "assert monotonic([3, 2, 7, 6]) == False", "assert monotonic([2, 7, 7, 15]) == True", "assert monotonic([4, 7, 7, 1, 1, 57]) == False", "assert monotonic([1, 1, 8, 13]) == True", "assert monotonic([5, 5, 8, 17]) == True", "assert monotonic([2, 22, 8, 7]) == False", "assert monotonic([2, 23, 5, 6]) == False", "assert monotonic([3, 2, 2, 18]) == False", "assert monotonic([2, 2, 2, 6]) == True", "assert monotonic([7, 5, 3, 2]) == True", "assert monotonic([7, 5, 2, -5]) == True", "assert monotonic([6, 19, 9, 12]) == False", "assert monotonic([1, 2, 4, 10]) == True", "assert monotonic([5, 4, 6, 18]) == False", "assert monotonic([6, 1, 7, 3, 4, 56]) == False", "assert monotonic([6, 3, 7, 3, 8, 61]) == False", "assert monotonic([2, 17, 7, 8]) == False", "assert monotonic([5, 1, 4, 5, 3, 59]) == False", "assert monotonic([3, 5, 5, 5, 3, 65]) == False", "assert monotonic([6, 19, 9, 7]) == False", "assert monotonic([1, 16, 9, 7]) == False", "assert monotonic([7, 6, 2, -14]) == True", "assert monotonic([5, 6, 4, 16]) == False", "assert monotonic([1, 6, 5, -10]) == False", "assert monotonic([1, 22, 4, 10]) == False", "assert monotonic([1, 6, 8, 6, 3, 62]) == False", "assert monotonic([1, 5, 1, 6, 4, 62]) == False", "assert monotonic([1, 1, 7, 2, 4, 56]) == False", "assert monotonic([2, 1, 5, 12]) == False", "assert monotonic([1, 3, 1, 4]) == False", "assert monotonic([4, 19, 8, 7]) == False", "assert monotonic([3, 5, 8, 5, 5, 56]) == False", "assert monotonic([1, 3, 6, 25]) == True", "assert monotonic([2, 3, 1, 7]) == False", "assert monotonic([8, 6, 2, 5]) == False", "assert monotonic([6, 3, 6, 2, 8, 62]) == False", "assert monotonic([6, 4, 6, 4]) == False", "assert monotonic([3, 6, 1, 3]) == False", "assert monotonic([4, 2, 5, 7, 6, 62]) == False", "assert monotonic([3, 7, 1, 20]) == False", "assert monotonic([3, 1, 5, 17]) == False", "assert monotonic([5, 5, 7, 5, 5, 57]) == False", "assert monotonic([1, 20, 4, 10]) == False", "assert monotonic([6, 16, 4, 14]) == False", "assert monotonic([3, 17, 2, 14]) == False", "assert monotonic([4, 5, 7, 2, 8, 63]) == False", "assert monotonic([1, 2, 4, 20]) == True", "assert monotonic([3, 3, 3, -5]) == True", "assert monotonic([4, 2, 3, 4]) == False", "assert monotonic([3, 5, 4, 2, 1, 60]) == False", "assert monotonic([6, 4, 7, 24]) == False", "assert monotonic([6, 3, 1, 1, 2, 61]) == False", "assert monotonic([1, 4, 3, -8]) == False", "assert monotonic([2, 6, 3, 5, 10, 63]) == False", "assert monotonic([4, 6, 3, 3, 10, 57]) == False", "assert monotonic([5, 4, 9, 14]) == False", "assert monotonic([1, 3, 5, 17]) == True", "assert monotonic([6, 7, 1, 8]) == False", "assert monotonic([9, 2, 5, -5]) == False", "assert monotonic([3, 2, 5, 1]) == False", "assert monotonic([9, 9, 9, 9]) == True", "assert monotonic([1, 2, 3, 4, 5, 60]) == True", "assert monotonic([6, 2, 5, 6, 3, 62]) == False", "assert monotonic([5, 1, 3, -9]) == False", "assert monotonic([1, 5, 7, 6]) == False", "assert monotonic([1, 24, 9, 12]) == False", "assert monotonic([2, 6, 7, 6, 6, 61]) == False", "assert monotonic([4, 1, 1, 0]) == True", "assert monotonic([2, 1, 3, 3, 3, 65]) == False", "assert monotonic([1, 2, 8, 5, 9, 55]) == False", "assert monotonic([2, 16, 2, 11]) == False", "assert monotonic([6, 16, 3, 15]) == False", "assert monotonic([1, 5, 2, 4, 2, 55]) == False", "assert monotonic([3, 1, 8, 7, 7, 65]) == False", "assert monotonic([2, 20, 2, 5]) == False", "assert monotonic([7, 2, 3, -10]) == False", "assert monotonic([4, 3, 5, 4, 8, 63]) == False", "assert monotonic([7, 2, 1, -12]) == True", "assert monotonic([9, 4, 1, -6]) == True", "assert monotonic([2, 15, 2, 15]) == False", "assert monotonic([6, 2, 4, 4]) == False", "assert monotonic([3, 3, 2, 4]) == False", "assert monotonic([2, 2, 8, 1, 3, 63]) == False", "assert monotonic([2, 2, 8, 12]) == True", "assert monotonic([3, 4, 2, 1]) == False", "assert monotonic([4, 4, 3, 15]) == False", "assert monotonic([2, 6, 5, 3]) == False", "assert monotonic([6, 5, 7, 7, 6, 55]) == False", "assert monotonic([2, 4, 4, 14]) == True", "assert monotonic([5, 4, 8, 5]) == False", "assert monotonic([4, 5, 1, -7]) == False", "assert monotonic([3, 3, 6, 8]) == True", "assert monotonic([9, 5, 5, -14]) == True", "assert monotonic([2, 1, 4, 4, 5, 55]) == False", "assert monotonic([4, 1, 0, -10]) == True", "assert monotonic([5, 5, 7, 21]) == True", "assert monotonic([1, 1, 3, 18]) == True", "assert monotonic([1, 6, 4, -7]) == False", "assert monotonic([4, 3, 4, 17]) == False", "assert monotonic([7, 2, 1, -6]) == True", "assert monotonic([1, 2, 3, 2, 5, 60]) == False", "assert monotonic([5, 2, 5, 2]) == False", "assert monotonic([2, 3, 8, 8]) == True", "assert monotonic([5, 2, 3, 4]) == False", "assert monotonic([8, 3, 2, -15]) == True", "assert monotonic([3, 4, 3, 15]) == False", "assert monotonic([2, 1, 5, 3]) == False", "assert monotonic([2, 4, 3, 19]) == False"], "nl": "Return True is list elements are monotonically increasing or decreasing.\n    ", "func": "def monotonic(l: list):", "examples": ">>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    ", "completions": ["from typing import List\nfrom typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    '''\n    Return True if the list elements are monotonically increasing or decreasing.\n    A monotonically increasing list is one where each element is greater than or equal to the previous element.\n    Similarly, a monotonically decreasing list is one where each element is less than or equal to the previous element.\n    '''\n    if len(l) <= 1:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if the list elements are monotonically increasing or decreasing.\n    A monotonically increasing list is one where each element is greater than or equal to the previous element.\n    Similarly, a monotonically decreasing list is one where each element is less than or equal to the previous element.\n    >>> monotonic([1, 2, 4, 20])\n        True\n    >>> monotonic([1, 20, 4, 10])\n        False\n    >>> monotonic([4, 1, 0, -10])\n        True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    if len(l) <= 1:\n        return False\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    # Input: list l\n    # Output: boolean indicating if the list is monotonically increasing or decreasing\n    \n    # Check if the list is empty or has only one element\n    if not l or len(l) == 1:\n        return True\n    \n    # Initialize flags for increasing and decreasing\n    increasing = True\n    decreasing = True\n    \n    # Iterate through the list and compare each element with the next one\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            decreasing = False\n        elif l[i] > l[i + 1]:\n            increasing = False\n    \n    # Return True if the list is either monotonically increasing or decreasing\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Check if the list is monotonically increasing or decreasing.\n\n    Args:\n        l (list): The list to check for monotonicity.\n\n    Returns:\n        bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if the list elements are monotonically increasing or decreasing.\n    A monotonically increasing list is one where each element is greater than or equal to the previous element.\n    Similarly, a monotonically decreasing list is one where each element is less than or equal to the previous element.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if the list elements are monotonically increasing or decreasing.\n    A monotonically increasing list is one where each element is greater than or equal to the previous element.\n    Similarly, a monotonically decreasing list is one where each element is less than or equal to the previous element.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if the list elements are monotonically increasing or decreasing.\n    A monotonically increasing list is one where each element is greater than or equal to the previous element.\n    Similarly, a monotonically decreasing list is one where each element is less than or equal to the previous element.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if the list elements are monotonically increasing or decreasing.\n    A monotonically increasing list is one where each element is greater than or equal to the previous element.\n    Similarly, a monotonically decreasing list is one where each element is less than or equal to the previous element.\n    >>> monotonic([1, 2, 4, 20])\n        True\n    >>> monotonic([1, 20, 4, 10])\n        False\n    >>> monotonic([4, 1, 0, -10])\n        True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n"], "plans": ["requirement analysis:\nThe requirement is to check if a list is monotonically increasing or decreasing. This involves comparing each element with the previous one to ensure the relationship holds throughout the list. The function should return True if the list is monotonic, and False otherwise. The requirements are clear and straightforward, focusing on functionality and efficiency.\nrequirement pool:\n- Implement the function to check for monotonicity\n- Ensure the function handles both increasing and decreasing lists\n- Develop a user-friendly interface for input and output\n- Optimize the function for performance, especially with large lists\n- Design a clean and intuitive user interface\nTo implement the monotonicity check function, we will use Python's built-in capabilities along with the 'typing' module for type annotations. The function will compare each element in the list with the next one to determine if the list is monotonically increasing or decreasing. We will ensure the function is efficient and can handle large lists by using Python's list processing capabilities.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list is either always increasing or always decreasing.\n    Explanation: A list is considered monotonic if it either consistently increases or consistently decreases without any reversals. This means each element must be either greater than or equal to the previous one for increasing, or less than or equal to the previous one for decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    To implement the monotonicity check, we need to iterate through the list and compare each element with the next one. We will check for both increasing and decreasing monotonicity. If either condition is met, the list is monotonic.\n\n# [edge case] \n    monotonic([1, 1, 1, 1]) = True\n    Explanation: This list is considered monotonic because all elements are equal, which satisfies both increasing and decreasing conditions.\n    monotonic([5, 4, 3, 2, 1]) = True\n    Explanation: This list is monotonic decreasing as each element is less than or equal to the previous one.\n    monotonic([1, 3, 2, 4]) = False\n    Explanation: This list is not monotonic because it does not consistently increase or decrease; it has a reversal from increasing to decreasing between elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic can handle lists with all identical elements and lists with a clear monotonic trend.\n", "requirement analysis:\nThe requirement is to create a function that checks if a list is monotonically increasing or decreasing. This involves comparing each element with the previous one to ensure the sequence follows a consistent trend. The function should handle basic lists and edge cases effectively. Performance is crucial to ensure it works well with large datasets.\nrequirement pool:\n- Implement the function to check for monotonicity\n- Handle edge cases such as empty lists and lists with equal elements\n- Optimize the function for performance\n- Ensure the function is easy to understand and use\n- Test the function with various types of lists\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and ensure the function is efficient. We will compare each element with the previous one to determine the trend. The function will handle basic lists and edge cases effectively. Performance will be optimized to handle large datasets efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list elements are consistently increasing or decreasing without any fluctuations.\n    Explanation: A list is considered monotonic if it either consistently increases (each element is greater than or equal to the previous element) or decreases (each element is less than or equal to the previous element).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function, we will follow these steps:\n    1. Check if the list has less than 2 elements, if so, return True since a single element or an empty list is trivially monotonic.\n    2. Iterate through the list starting from the second element.\n    3. Compare each element with the previous one to determine if the list is monotonically increasing or decreasing.\n    4. If at any point the trend changes (increasing becomes decreasing or vice versa), return False.\n    5. If the loop completes without finding any change in trend, return True.\n\n# [edge case] \n    monotonic([1, 2, 2, 3]) = True\n    Explanation: This list is monotonically increasing as each element is greater than or equal to the previous one.\n    monotonic([3, 2, 2, 1]) = True\n    Explanation: This list is monotonically decreasing as each element is less than or equal to the previous one.\n    monotonic([1, 3, 2, 3]) = False\n    Explanation: This list is not monotonic because the elements do not consistently follow a single trend (first increasing, then decreasing).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the logic provided covers all basic scenarios and can be applied to any list. The function will return True for lists with less than 2 elements and will correctly identify the monotonicity of the list based on the comparison of each element with the previous one.\n", "requirement analysis:\nThe requirement is to create a function that checks if a list is monotonically increasing or decreasing. This involves comparing each element with the previous one to ensure the relationship holds throughout the list. The function should handle edge cases such as empty lists or lists with a single element.\nrequirement pool:\n- The main code should define the function 'monotonic' with a list as input and return a boolean value.\n- The function should correctly identify a monotonically increasing list where each element is greater than or equal to the previous one.\n- The function should correctly identify a monotonically decreasing list where each element is less than or equal to the previous one.\n- The function should return False if the list is not strictly monotonic.\n- The function should handle edge cases such as empty lists or lists with a single element.\nTo implement the 'monotonic' function, we will use Python's built-in capabilities and leverage a simple approach to check if a list is monotonically increasing or decreasing. This involves iterating through the list and comparing each element with the next one. We will handle edge cases such as empty lists or lists with a single element by returning False immediately.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list is either always increasing or always decreasing.\n    Explanation: A list is considered monotonic if it either consistently increases (each element is greater than or equal to the previous) or decreases (each element is less than or equal to the previous) without reversing the trend.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the 'monotonic' function, we will:\n    1. Check if the list is empty or has only one element. If so, return False since a single element or an empty list cannot be monotonic.\n    2. Iterate through the list and compare each element with the next one to determine if the list is monotonically increasing or decreasing.\n    3. Return True if the list is monotonic, otherwise return False.\n\n# [edge case] \n    monotonic([]) = False\n    Explanation: An empty list does not have a trend, so it cannot be considered monotonic.\n    monotonic([5]) = False\n    Explanation: A list with a single element does not have enough data to determine if it is increasing or decreasing.\n    monotonic([1, 3, 2, 4]) = False\n    Explanation: The list starts by increasing but then decreases, so it is not monotonic.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case of an empty list or a list with a single element since the function can return False immediately for these cases. For the list [1, 3, 2, 4], we would need to add a check to see if the trend changes, but this is already part of the main logic.\n", "requirement analysis:\nThe requirement is to create a function that checks if a list is monotonically increasing or decreasing. This involves comparing each element with the next one to ensure the relationship holds for the entire list. The function should handle edge cases such as empty lists or lists with equal elements. The solution should be efficient and clear, making it easy for users to understand and use.\nrequirement pool:\n- The main code should accurately determine if the list is monotonically increasing or decreasing\n- The function should handle edge cases such as empty lists or lists with equal elements\n- The solution should be optimized for performance, especially for long lists\n- The function should be easy to understand and maintain\n- The function should be integrated into a larger system without issues\nTo create a function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and ensure the solution is efficient and clear. We will compare each element with the next one to determine the monotonicity of the list. The function will handle edge cases such as empty lists or lists with equal elements by implementing simple checks and returning appropriate results.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list is either always increasing or always decreasing.\n    Explanation: A list is considered monotonically increasing if each element is greater than or equal to the previous element, and it is considered monotonically decreasing if each element is less than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function, we will follow these steps:\n    1. Check if the list is empty or has only one element. If so, return True since a single element or an empty list is trivially monotonic.\n    2. Iterate through the list and compare each element with the next one to determine if the list is monotonically increasing or decreasing.\n    3. If we find any element that breaks the monotonic pattern, return False.\n    4. If the loop completes without finding any non-monotonic elements, return True.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonic by definition.\n    monotonic([5, 5, 5, 5]) = True\n    Explanation: A list with all identical elements is considered monotonic.\n    monotonic([1, 3, 2, 4]) = False\n    Explanation: The list is neither entirely increasing nor decreasing, so it is not monotonic.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan already covers these cases.\n", "requirement analysis:\nThe requirement is to determine if a list is monotonically increasing or decreasing. This involves checking if each element in the list is either greater than or equal to the previous element for increasing, or less than or equal to the previous element for decreasing. The function should handle various edge cases such as empty lists, lists with a single element, and lists with duplicate values.\nrequirement pool:\n- The function should correctly identify a monotonically increasing list\n- The function should correctly identify a monotonically decreasing list\n- The function should handle edge cases such as empty lists and lists with a single element\n- The function should be efficient and fast\n- The function should provide clear and concise error messages for invalid inputs\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and leverage the simplicity and efficiency of the language. The function will compare each element with the next one to determine the monotonicity. We will also handle edge cases such as empty lists and lists with a single element.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list elements are consistently increasing or decreasing without any fluctuations.\n    Explanation: A list is considered monotonic if it is either entirely non-increasing (each element is less than or equal to the next) or non-decreasing (each element is greater than or equal to the next).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function, we will follow these steps:\n    1. Check if the list is empty or has only one element. If so, return True since an empty list or a single-element list is trivially monotonic.\n    2. Iterate through the list and compare each element with the next one to check if the list is non-increasing or non-decreasing.\n    3. If we find any element that breaks the monotonic pattern, return False.\n    4. If the loop completes without finding any breaking elements, return True.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonic by definition.\n    monotonic([5]) = True\n    Explanation: A single-element list is also considered monotonic.\n    monotonic([1, 3, 2, 4]) = False\n    Explanation: The list is not monotonic as it fluctuates between increasing and decreasing values.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the logic provided can handle them correctly.\n", "requirement analysis:\nThe requirement is to check if a list is monotonically increasing or decreasing. This involves comparing each element with the next one to ensure the relationship holds for the entire list. The function should handle lists of various sizes and types of elements, including edge cases like empty lists or lists with identical elements.\nrequirement pool:\n- Implement the function to check for monotonicity\n- Ensure the function works correctly for both increasing and decreasing lists\n- Optimize the function for performance\n- Add support for handling edge cases\n- Document the function for easy understanding\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and ensure the function is efficient. We will compare each element with the next one to determine the monotonicity of the list. This approach leverages Python's simplicity and readability while maintaining efficiency.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list is either always increasing or always decreasing.\n    Explanation: A list is considered monotonic if it either consistently increases or consistently decreases without any reversals. This means each element must be either greater than or equal to the previous one (for increasing) or less than or equal to the previous one (for decreasing).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function, we will:\n    1. Check if the list has less than 2 elements, if so, return True since a single element or an empty list is trivially monotonic.\n    2. Iterate through the list and compare each element with the next one to determine if the list is increasing or decreasing.\n    3. If we find any element that breaks the monotonic pattern, return False.\n    4. If the loop completes without finding any non-monotonic elements, return True.\n\n# [edge case] \n    monotonic([1, 2, 2, 3]) = True\n    Explanation: This list is monotonically increasing because each element is greater than or equal to the previous one.\n    monotonic([3, 2, 2, 1]) = True\n    Explanation: This list is monotonically decreasing because each element is less than or equal to the previous one.\n    monotonic([1, 3, 2, 3]) = False\n    Explanation: This list is not monotonic because it does not consistently increase or decrease; it has a reversal from increasing to decreasing at some point.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan already covers all scenarios, including lists with fewer than two elements.\n", "requirement analysis:\nThe requirement is to check if a list is monotonically increasing or decreasing. This is a fundamental check in data structures and algorithms. The function should be efficient and handle edge cases well. The solution should be clear and concise, making it easy to understand and maintain.\nrequirement pool:\n- Implement the function to check if a list is monotonically increasing or decreasing\n- Ensure the function is optimized for performance\n- Write tests to cover various edge cases\n- Document the function clearly\n- Make the function compatible with Python versions\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and ensure the function is optimized for performance. We will compare each element with the next one to determine the monotonicity of the list.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list is either always increasing or always decreasing.\n    Explanation: A list is considered monotonic if it either consistently increases or consistently decreases without any reversals.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    To check if a list is monotonic, we need to compare each element with the next one. We can do this by iterating through the list and checking the relationship between consecutive elements. If we find any reversal in the relationship (e.g., an increase followed by a decrease), we can conclude that the list is not monotonic.\n\n# [edge case] \n    monotonic([1, 2, 2, 3]) = True\n    Explanation: This list is monotonically increasing because each element is greater than or equal to the previous element.\n    monotonic([3, 2, 1]) = True\n    Explanation: This list is monotonically decreasing because each element is less than or equal to the previous element.\n    monotonic([1, 3, 2, 4]) = False\n    Explanation: This list is not monotonic because it first increases (from 1 to 3) and then decreases (from 3 to 2), followed by an increase again.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the logic for checking monotonicity is straightforward and does not require special handling for these cases.\n", "requirement analysis:\nThe requirement is to check if a list is monotonically increasing or decreasing. This involves comparing each element with the next one to ensure the relationship holds throughout the list. The function should handle edge cases such as empty lists and lists with equal elements. The solution should be efficient and easy to understand.\nrequirement pool:\n- Implement the function to check for monotonicity\n- Handle edge cases such as empty lists and lists with equal elements\n- Optimize the function for performance\n- Ensure the function is easy to understand and maintain\n- Test the function with various inputs to ensure correctness\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and ensure the function is efficient and easy to understand. We will compare each element with the next one to check for the monotonicity condition. The function will handle edge cases such as empty lists and lists with equal elements.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list elements are consistently increasing or decreasing without any fluctuations.\n    Explanation: A list is considered monotonically increasing if each element is greater than or equal to the previous one, and it is considered monotonically decreasing if each element is less than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function, we will follow these steps:\n    1. Check if the list is empty or has only one element. If so, return True since a single element or an empty list is trivially monotonic.\n    2. Iterate through the list and compare each element with the next one to check if the list is monotonically increasing or decreasing.\n    3. If we find any element that breaks the monotonicity condition, return False.\n    4. If the loop completes without finding any violations, return True.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonic by definition.\n    monotonic([5, 5, 5]) = True\n    Explanation: A list with all identical elements is considered monotonic.\n    monotonic([1, 3, 2, 4]) = False\n    Explanation: The list is not monotonic because 3 is followed by 2, which is not less than or equal to 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan already covers these cases.\n", "requirement analysis:\nThe requirement is to determine if a list is monotonically increasing or decreasing. This involves checking if each element in the list is either greater than or equal to the previous element for increasing, or less than or equal to the previous element for decreasing. The function should handle various edge cases such as empty lists, lists with a single element, and lists with duplicate elements.\nrequirement pool:\n- The main function should correctly identify if a list is monotonically increasing or decreasing\n- The function should handle edge cases such as empty lists and lists with a single element\n- The function should be optimized for performance\n- The function should be easy to understand and maintain\n- The function should be compatible with Python versions 3.x\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and leverage a simple approach to ensure clarity and efficiency. The function will compare each element with the next one to determine the monotonicity of the list.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list is either always increasing or always decreasing.\n    Explanation: A list is considered monotonic if it either consistently increases or consistently decreases without any reversal in trend.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    To implement the function, we will follow these steps:\n    1. Check if the list has less than 2 elements, if so, return True since a single element or an empty list is trivially monotonic.\n    2. Iterate through the list and compare each element with the next one to determine if the list is monotonically increasing or decreasing.\n    3. Return True if the list is monotonic, otherwise return False.\n\n# [edge case] \n    monotonic([1, 1, 1, 1]) = True\n    Explanation: This list is considered monotonic because all elements are equal, satisfying both increasing and decreasing conditions.\n    monotonic([]) = True\n    Explanation: An empty list is trivially monotonic.\n    monotonic([1, 3, 2, 4]) = False\n    Explanation: The list is neither monotonically increasing (3 > 1, 2 < 3) nor monotonically decreasing (3 < 1, 2 > 3), so it is not monotonic.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the logic provided can handle lists with all identical elements and empty lists.\n", "requirement analysis:\nThe requirement is to create a function that checks if a list is monotonically increasing or decreasing. This involves comparing each element with the previous one to ensure the condition is met. The function should handle both strictly and non-strictly increasing/decreasing lists. The solution should be efficient and suitable for large lists.\nrequirement pool:\n- Implement the function to check if a list is monotonically increasing or decreasing.\n- Ensure the function handles both strictly and non-strictly cases.\n- Optimize the function for performance, especially for large lists.\n- Design a user-friendly interface for the function.\n- Include visual elements to enhance the user experience.\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and leverage a simple approach to ensure efficiency. The function will compare each element with the previous one to determine if the list is strictly increasing, strictly decreasing, or neither. This approach will be efficient and suitable for large lists.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list is either always increasing or always decreasing.\n    Explanation: A list is considered monotonic if it either consistently increases or consistently decreases without any reversals. This means each element must be either greater than or equal to the previous element in the case of increasing, or less than or equal to the previous element in the case of decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    To implement the function, we will follow these steps:\n    1. Check if the list has fewer than two elements, if so, return True since a single element or an empty list is trivially monotonic.\n    2. Iterate through the list starting from the second element.\n    3. Compare each element with the previous one to determine if the list is increasing or decreasing.\n    4. If at any point the order is not consistent, return False.\n    5. If the loop completes without finding any inconsistencies, return True.\n\n# [edge case] \n    monotonic([1, 2, 2, 3]) = True\n    Explanation: This list is monotonically increasing because each element is greater than or equal to the previous one.\n    monotonic([3, 2, 2, 1]) = True\n    Explanation: This list is monotonically decreasing because each element is less than or equal to the previous one.\n    monotonic([1, 3, 2, 4]) = False\n    Explanation: This list is not monotonic because it does not consistently increase or decrease. The element 3 is followed by 2, which breaks the monotonic pattern.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan already covers all scenarios, including lists with fewer than two elements.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [113, 113, 113, 113, 113, 113, 113, 113, 113, 113], "completion": "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if the list elements are monotonically increasing or decreasing.\n    A monotonically increasing list is one where each element is greater than or equal to the previous element.\n    Similarly, a monotonically decreasing list is one where each element is less than or equal to the previous element.\n    >>> monotonic([1, 2, 4, 20])\n        True\n    >>> monotonic([1, 20, 4, 10])\n        False\n    >>> monotonic([4, 1, 0, -10])\n        True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n", "passed": true, "pass": true, "pass_num": 10, "round": 322, "repair_prompt": ["def monotonic(l: list):\t\n'''Return True if the list elements are monotonically increasing or decreasing. A monotonically increasing list is one where each element is greater than or equal to the previous element. Similarly, a monotonically decreasing list is one where each element is less than or equal to the previous element.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", " def monotonic(l: list):\n    '''Return True if the list elements are monotonically increasing or decreasing. A monotonically increasing list is one where each element is greater than or equal to the previous element. Similarly, a monotonically decreasing list is one where each element is less than or equal to the previous element.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n   ", " def monotonic(l: list):\n    '''Return True if the list elements are monotonically increasing or decreasing. A monotonically increasing list is one where each element is greater than or equal to the previous element. Similarly, a monotonically decreasing list is one where each element is less than or equal to the previous element.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''"], "mutate_method": "expand_one2two", "parent_index": 152}
