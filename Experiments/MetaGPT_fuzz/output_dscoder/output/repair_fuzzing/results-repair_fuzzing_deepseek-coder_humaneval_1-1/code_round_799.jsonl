{"task_id": "HumanEval/117", "prompt": "def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Consider edge cases where n might be larger than the number of consonants in any word in s.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", "entry_point": "select_words", "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "test": ["def check(select_words):\n\tassert select_words('eg aqk', 2) == ['aqk']", "def check(select_words):\n\tassert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "def check(select_words):\n\tassert select_words('syk', 6) == []", "def check(select_words):\n\tassert select_words('gw', 9) == []", "def check(select_words):\n\tassert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "def check(select_words):\n\tassert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "def check(select_words):\n\tassert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "def check(select_words):\n\tassert select_words('zGMhBC', 6) == ['zGMhBC']", "def check(select_words):\n\tassert select_words('kfohjsjunakqmmsx', 1) == []", "def check(select_words):\n\tassert select_words('KbpFfWgXZoVjXV', 1) == []", "def check(select_words):\n\tassert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "def check(select_words):\n\tassert select_words('kg', 1) == []", "def check(select_words):\n\tassert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "def check(select_words):\n\tassert select_words('xrbpxpncgqufqkq', 6) == []", "def check(select_words):\n\tassert select_words('sqgikswgssxsbwkl', 7) == []", "def check(select_words):\n\tassert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "def check(select_words):\n\tassert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "def check(select_words):\n\tassert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "def check(select_words):\n\tassert select_words('bnXA AjPVh', 5) == []", "def check(select_words):\n\tassert select_words('omnivbqgmavyqdgqssas', 6) == []", "def check(select_words):\n\tassert select_words('fmjizkhknnihqioic', 4) == []", "def check(select_words):\n\tassert select_words('lINKPOlFIImtg', 3) == []", "def check(select_words):\n\tassert select_words('nPxmyTd', 7) == ['nPxmyTd']", "def check(select_words):\n\tassert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "def check(select_words):\n\tassert select_words('mehochzpausf', 2) == []", "def check(select_words):\n\tassert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "def check(select_words):\n\tassert select_words('EGiDfM', 1) == []", "def check(select_words):\n\tassert select_words('mc', 7) == []", "def check(select_words):\n\tassert select_words('wzx', 5) == []", "def check(select_words):\n\tassert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "def check(select_words):\n\tassert select_words('xwkxcjffocow', 5) == []", "def check(select_words):\n\tassert select_words('dl', 5) == []", "def check(select_words):\n\tassert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "def check(select_words):\n\tassert select_words('ABIStgq', 5) == ['ABIStgq']", "def check(select_words):\n\tassert select_words('nb', 2) == ['nb']", "def check(select_words):\n\tassert select_words('ny', 2) == ['ny']", "def check(select_words):\n\tassert select_words('HWCLBC', 6) == ['HWCLBC']", "def check(select_words):\n\tassert select_words('uuh', 6) == []", "def check(select_words):\n\tassert select_words('uoubngttn', 3) == []", "def check(select_words):\n\tassert select_words('g', 5) == []", "def check(select_words):\n\tassert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "def check(select_words):\n\tassert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "def check(select_words):\n\tassert select_words('aztxoxesjkzqebhrfzw', 3) == []", "def check(select_words):\n\tassert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "def check(select_words):\n\tassert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "def check(select_words):\n\tassert select_words('tJzO PnCT', 3) == ['tJzO']", "def check(select_words):\n\tassert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "def check(select_words):\n\tassert select_words('qhwubvrfmwy', 2) == []", "def check(select_words):\n\tassert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "def check(select_words):\n\tassert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "def check(select_words):\n\tassert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "def check(select_words):\n\tassert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "def check(select_words):\n\tassert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "def check(select_words):\n\tassert select_words('r s rhhipmt', 6) == ['rhhipmt']", "def check(select_words):\n\tassert select_words('aDqyhePv', 6) == ['aDqyhePv']", "def check(select_words):\n\tassert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "def check(select_words):\n\tassert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "def check(select_words):\n\tassert select_words('aru', 5) == []", "def check(select_words):\n\tassert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "def check(select_words):\n\tassert select_words('SNeiILCez', 4) == []", "def check(select_words):\n\tassert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "def check(select_words):\n\tassert select_words('ySmjGAg', 6) == ['ySmjGAg']", "def check(select_words):\n\tassert select_words('bRJRZC', 3) == []", "def check(select_words):\n\tassert select_words('u', 1) == []", "def check(select_words):\n\tassert select_words('djucfuuizrjfvuzzo', 4) == []", "def check(select_words):\n\tassert select_words('dvYLMt', 6) == ['dvYLMt']", "def check(select_words):\n\tassert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "def check(select_words):\n\tassert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "def check(select_words):\n\tassert select_words('yp', 6) == []", "def check(select_words):\n\tassert select_words('v', 4) == []", "def check(select_words):\n\tassert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "def check(select_words):\n\tassert select_words('afrrguc', 5) == ['afrrguc']", "def check(select_words):\n\tassert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "def check(select_words):\n\tassert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "def check(select_words):\n\tassert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "def check(select_words):\n\tassert select_words('nh vu lcakrb', 1) == ['vu']", "def check(select_words):\n\tassert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "def check(select_words):\n\tassert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "def check(select_words):\n\tassert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "def check(select_words):\n\tassert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "def check(select_words):\n\tassert select_words('MjRnAErHPguQC', 1) == []", "def check(select_words):\n\tassert select_words('tmchxmttrgfdanq', 3) == []", "def check(select_words):\n\tassert select_words('jezkeorvxnruwhhwzxm', 7) == []", "def check(select_words):\n\tassert select_words('caurfxlpkygqxoknil', 4) == []", "def check(select_words):\n\tassert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "def check(select_words):\n\tassert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "def check(select_words):\n\tassert select_words('NSjIbZV', 2) == []", "def check(select_words):\n\tassert select_words('rPKhzIot', 6) == ['rPKhzIot']", "def check(select_words):\n\tassert select_words('ASDVzOVVDEdj J', 1) == ['J']", "def check(select_words):\n\tassert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "def check(select_words):\n\tassert select_words(' siweqafqot', 5) == []", "def check(select_words):\n\tassert select_words('xdQgsAHI', 5) == []", "def check(select_words):\n\tassert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "def check(select_words):\n\tassert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "def check(select_words):\n\tassert select_words('hguHoJGaaNwX', 3) == []", "def check(select_words):\n\tassert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "def check(select_words):\n\tassert select_words('choounwx', 5) == ['choounwx']", "def check(select_words):\n\tassert select_words('yue', 2) == []", "def check(select_words):\n\tassert select_words('DDdrgPy', 4) == []", "def check(select_words):\n\tassert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "def check(select_words):\n\tassert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "def check(select_words):\n\tassert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "def check(select_words):\n\tassert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "def check(select_words):\n\tassert select_words('Reg MuZcF', 4) == ['MuZcF']", "def check(select_words):\n\tassert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "def check(select_words):\n\tassert select_words('sl', 6) == []", "def check(select_words):\n\tassert select_words('IFKqNq ', 5) == ['IFKqNq']", "def check(select_words):\n\tassert select_words('lfspeijyudniowk', 1) == []", "def check(select_words):\n\tassert select_words('kogmgdnk', 7) == ['kogmgdnk']", "def check(select_words):\n\tassert select_words('nnchatjackywoavfwfps', 5) == []", "def check(select_words):\n\tassert select_words('d', 2) == []", "def check(select_words):\n\tassert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "def check(select_words):\n\tassert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "def check(select_words):\n\tassert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "def check(select_words):\n\tassert select_words('jopfxbbvlslmluypcdt', 3) == []", "def check(select_words):\n\tassert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "def check(select_words):\n\tassert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "def check(select_words):\n\tassert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "def check(select_words):\n\tassert select_words('etdrxwybqi', 1) == []", "def check(select_words):\n\tassert select_words('aVCSziOkLCLGizHcmC', 2) == []", "def check(select_words):\n\tassert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "def check(select_words):\n\tassert select_words('txXxge', 4) == []", "def check(select_words):\n\tassert select_words('kcpieuVjAOaxdpB', 4) == []", "def check(select_words):\n\tassert select_words('oh', 8) == []", "def check(select_words):\n\tassert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "def check(select_words):\n\tassert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "def check(select_words):\n\tassert select_words('eywh qxreeexrrhyovpwl', 7) == []", "def check(select_words):\n\tassert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "def check(select_words):\n\tassert select_words('asfwxvbzdfsrymc', 3) == []", "def check(select_words):\n\tassert select_words('nBmjWxiPV', 3) == []", "def check(select_words):\n\tassert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "test_case_list": ["assert select_words('eg aqk', 2) == ['aqk']", "assert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "assert select_words('syk', 6) == []", "assert select_words('gw', 9) == []", "assert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "assert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "assert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "assert select_words('zGMhBC', 6) == ['zGMhBC']", "assert select_words('kfohjsjunakqmmsx', 1) == []", "assert select_words('KbpFfWgXZoVjXV', 1) == []", "assert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "assert select_words('kg', 1) == []", "assert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "assert select_words('xrbpxpncgqufqkq', 6) == []", "assert select_words('sqgikswgssxsbwkl', 7) == []", "assert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "assert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "assert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "assert select_words('bnXA AjPVh', 5) == []", "assert select_words('omnivbqgmavyqdgqssas', 6) == []", "assert select_words('fmjizkhknnihqioic', 4) == []", "assert select_words('lINKPOlFIImtg', 3) == []", "assert select_words('nPxmyTd', 7) == ['nPxmyTd']", "assert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "assert select_words('mehochzpausf', 2) == []", "assert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "assert select_words('EGiDfM', 1) == []", "assert select_words('mc', 7) == []", "assert select_words('wzx', 5) == []", "assert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "assert select_words('xwkxcjffocow', 5) == []", "assert select_words('dl', 5) == []", "assert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "assert select_words('ABIStgq', 5) == ['ABIStgq']", "assert select_words('nb', 2) == ['nb']", "assert select_words('ny', 2) == ['ny']", "assert select_words('HWCLBC', 6) == ['HWCLBC']", "assert select_words('uuh', 6) == []", "assert select_words('uoubngttn', 3) == []", "assert select_words('g', 5) == []", "assert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "assert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "assert select_words('aztxoxesjkzqebhrfzw', 3) == []", "assert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "assert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "assert select_words('tJzO PnCT', 3) == ['tJzO']", "assert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "assert select_words('qhwubvrfmwy', 2) == []", "assert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "assert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "assert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "assert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "assert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "assert select_words('r s rhhipmt', 6) == ['rhhipmt']", "assert select_words('aDqyhePv', 6) == ['aDqyhePv']", "assert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "assert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "assert select_words('aru', 5) == []", "assert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "assert select_words('SNeiILCez', 4) == []", "assert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "assert select_words('ySmjGAg', 6) == ['ySmjGAg']", "assert select_words('bRJRZC', 3) == []", "assert select_words('u', 1) == []", "assert select_words('djucfuuizrjfvuzzo', 4) == []", "assert select_words('dvYLMt', 6) == ['dvYLMt']", "assert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "assert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "assert select_words('yp', 6) == []", "assert select_words('v', 4) == []", "assert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "assert select_words('afrrguc', 5) == ['afrrguc']", "assert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "assert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "assert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "assert select_words('nh vu lcakrb', 1) == ['vu']", "assert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "assert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "assert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "assert select_words('MjRnAErHPguQC', 1) == []", "assert select_words('tmchxmttrgfdanq', 3) == []", "assert select_words('jezkeorvxnruwhhwzxm', 7) == []", "assert select_words('caurfxlpkygqxoknil', 4) == []", "assert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "assert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "assert select_words('NSjIbZV', 2) == []", "assert select_words('rPKhzIot', 6) == ['rPKhzIot']", "assert select_words('ASDVzOVVDEdj J', 1) == ['J']", "assert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "assert select_words(' siweqafqot', 5) == []", "assert select_words('xdQgsAHI', 5) == []", "assert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "assert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "assert select_words('hguHoJGaaNwX', 3) == []", "assert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "assert select_words('choounwx', 5) == ['choounwx']", "assert select_words('yue', 2) == []", "assert select_words('DDdrgPy', 4) == []", "assert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "assert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "assert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "assert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "assert select_words('Reg MuZcF', 4) == ['MuZcF']", "assert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "assert select_words('sl', 6) == []", "assert select_words('IFKqNq ', 5) == ['IFKqNq']", "assert select_words('lfspeijyudniowk', 1) == []", "assert select_words('kogmgdnk', 7) == ['kogmgdnk']", "assert select_words('nnchatjackywoavfwfps', 5) == []", "assert select_words('d', 2) == []", "assert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "assert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "assert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "assert select_words('jopfxbbvlslmluypcdt', 3) == []", "assert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "assert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "assert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "assert select_words('etdrxwybqi', 1) == []", "assert select_words('aVCSziOkLCLGizHcmC', 2) == []", "assert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "assert select_words('txXxge', 4) == []", "assert select_words('kcpieuVjAOaxdpB', 4) == []", "assert select_words('oh', 8) == []", "assert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "assert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "assert select_words('eywh qxreeexrrhyovpwl', 7) == []", "assert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "assert select_words('asfwxvbzdfsrymc', 3) == []", "assert select_words('nBmjWxiPV', 3) == []", "assert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "nl": "Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    ", "func": "def select_words(s, n):", "examples": "Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    ", "completions": ["from typing import List\nfrom typing import List\nimport re\n\ndef count_consonants(word: str) -> int:\n    \"\"\"\n    Count the number of consonants in a word.\n    \n    Args:\n        word (str): The word to count consonants in.\n        \n    Returns:\n        int: The number of consonants in the word.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return len([char for char in word if char.isalpha() and char not in vowels])\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filter words based on the number of consonants they contain.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants required in each word.\n        \n    Returns:\n        List[str]: A list of words that contain exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    words = re.findall(r'\\b\\w+\\b', s)\n    return [word for word in words if count_consonants(word) == n]\n\n# Example usage:\n# print(select_words('algorithm is fun', 4))  # Output: ['algorithm']\n", "from typing import List\nfrom typing import List\nimport re\n\ndef count_consonants(word: str) -> int:\n    \"\"\"\n    Count the number of consonants in a word.\n    \n    Args:\n        word (str): The word to count consonants in.\n        \n    Returns:\n        int: The number of consonants in the word.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return len([char for char in word if char.isalpha() and char not in vowels])\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants they contain.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants a word must contain.\n        \n    Returns:\n        List[str]: A list of words that contain exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    words = re.findall(r'\\b\\w+\\b', s)\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    \n    return filtered_words\n", "from typing import List\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Selects words from the input string `s` that contain exactly `n` consonants.\n    \n    Args:\n        s (str): The input string containing words.\n        n (int): The exact number of consonants that the selected words must contain.\n        \n    Returns:\n        List[str]: A list of words from the input string that contain exactly `n` consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    # Define vowels\n    vowels = \"aeiouAEIOU\"\n    \n    # Function to count consonants in a word\n    def count_consonants(word: str) -> int:\n        return sum(1 for char in word if char.isalpha() and char.lower() not in vowels)\n    \n    # Split the string into words\n    words = s.split()\n    \n    # Filter words based on consonant count\n    result = [word for word in words if count_consonants(word) == n]\n    \n    return result\n", "from typing import List\nfrom typing import List\nimport re\n\ndef count_consonants(word: str) -> int:\n    \"\"\"\n    Count the number of consonants in a given word.\n    \n    Args:\n        word (str): The word to count consonants in.\n        \n    Returns:\n        int: The number of consonants in the word.\n    \"\"\"\n    consonants = re.findall(r'[bcdfghjklmnpqrstvwxyz]', word.lower())\n    return len(consonants)\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filter words based on the number of consonants they contain.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants required in each word.\n        \n    Returns:\n        List[str]: A list of words that contain exactly n consonants.\n    \"\"\"\n    words = s.split()\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    return filtered_words\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef count_consonants(word: str) -> int:\n    \"\"\"\n    Helper function to count the number of consonants in a word.\n    \n    Args:\n        word (str): The word to count consonants in.\n        \n    Returns:\n        int: The number of consonants in the word.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return sum(1 for char in word if char.isalpha() and char not in vowels)\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants they contain.\n    \n    Args:\n        s (str): The input string containing words separated by spaces.\n        n (int): The number of consonants that words must contain.\n        \n    Returns:\n        List[str]: A list of words that contain exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    words = s.split()\n    filtered_words = []\n    \n    for word in words:\n        consonant_count = count_consonants(word)\n        if consonant_count == n:\n            filtered_words.append(word)\n    \n    return filtered_words\n\n# Example usage:\n# print(select_words('a quick brown fox jumps over the lazy dog', 5))  # Output: ['quick', 'jumps']\n", "from typing import List\nfrom typing import List\nimport re\n\ndef count_consonants(word: str) -> int:\n    \"\"\"\n    Count the number of consonants in a word.\n    Consonants are letters that are not vowels (a, e, i, o, u).\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return len([char for char in word if char.isalpha() and char not in vowels])\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filter words based on the number of consonants.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants.\n    \n    Returns:\n        List[str]: A list of words containing exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    words = re.findall(r'\\b\\w+\\b', s)\n    if n > len(max(words, key=len)):\n        return []\n    \n    return [word for word in words if count_consonants(word) == n]\n\n# Example usage:\n# print(select_words(\"hello world\", 3))  # Output: ['hello']\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants they contain.\n\n    Args:\n        s (str): The input string.\n        n (int): The number of consonants a word must contain.\n\n    Returns:\n        List[str]: A list of words that contain exactly `n` consonants.\n    \"\"\"\n    if not s:\n        return []\n\n    def count_consonants(word: str) -> int:\n        \"\"\"\n        Counts the number of consonants in a given word.\n\n        Args:\n            word (str): The word to count consonants in.\n\n        Returns:\n            int: The number of consonants in the word.\n        \"\"\"\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef count_consonants(word: str) -> int:\n    vowels = \"aeiouAEIOU\"\n    return sum(1 for char in word if char.isalpha() and char not in vowels)\n\ndef select_words(s: str, n: int) -> List[str]:\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]\n", "from typing import List\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    \n    # Define a set of consonants\n    consonants = set('bcdfghjklmnpqrstvwxyz')\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize the result list\n    result = []\n    \n    # Iterate through each word and count the consonants\n    for word in words:\n        consonant_count = sum(1 for char in word.lower() if char in consonants)\n        if consonant_count == n:\n            result.append(word)\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants they contain.\n\n    Args:\n        s (str): The input string.\n        n (int): The number of consonants a word must contain.\n\n    Returns:\n        List[str]: A list of words that contain exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n\n    # Define a set of consonants\n    consonants = set('bcdfghjklmnpqrstvwxyz')\n\n    # Split the input string into words\n    words = s.split()\n\n    # Filter words based on the number of consonants they contain\n    filtered_words = [word for word in words if count_consonants(word) == n]\n\n    return filtered_words\n\ndef count_consonants(word: str) -> int:\n    \"\"\"\n    Counts the number of consonants in a word.\n\n    Args:\n        word (str): The word to count consonants in.\n\n    Returns:\n        int: The number of consonants in the word.\n    \"\"\"\n    return sum(1 for char in word.lower() if char in consonants)\n\n# Example usage:\n# print(select_words(\"algorithm is fun\", 3))  # Output: [\"algorithm\"]\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle edge cases where the specified number of consonants is greater than the number of consonants in any word. The input string is assumed to contain only letters and spaces, making the task straightforward for the function to process.\nrequirement pool:\n- Implement the function to filter words based on consonant count\n- Handle edge cases where the specified consonant count is higher than any word\n- Ensure the function is efficient and can handle large datasets\n- Develop a user-friendly interface for easy input and output\nTo implement the function that filters words based on the number of consonants they contain, we will use Python's built-in string manipulation capabilities and regular expressions for efficient word extraction and consonant counting. The function will first split the input string into words, then filter these words based on the specified number of consonants. We will ensure the function is efficient by using list comprehensions and built-in functions that are optimized for performance.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants, no more, no less\n\n# [phrase showing quantity relationship]\n    No specific phrase showing quantity relationship\n\n# [degree adverb] \n    No specific degree adverb\n\n# [code logic]\n    (1) Split the input string into words.\n    (2) Define a function to count the consonants in a word.\n    (3) Use a list comprehension to filter words that have exactly n consonants.\n    (4) Return the filtered list of words.\n\n# [edge case] \n    select_words('', 3) = []\n    Explanation: The input string is empty, so there are no words to consider. The expected output is an empty list.\n    select_words('hello world', 3) = []\n    Explanation: There are no words in the string that contain exactly 3 consonants. The expected output is an empty list.\n    select_words('algorithm is fun', 4) = ['algorithm']\n    Explanation: The word 'algorithm' contains exactly 4 consonants (l, g, r, t, h, m). Other words do not meet the criteria.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case where n is larger than the number of consonants in any word in s. This is because the list comprehension will naturally exclude words that do not meet the criteria, including those with fewer consonants than n.\n", "requirement analysis:\nThe primary requirement is to create a function that filters words based on the number of consonants they contain. This involves understanding the input string, identifying words, and counting consonants. The function should handle edge cases such as an empty string or a number of consonants larger than any word in the string. The output should be a list of words that meet the criteria.\nrequirement pool:\n- Implement the function to select words based on the number of consonants\n- Handle edge cases where the input string is empty or the number of consonants is larger than any word\n- Ensure the application is user-friendly and efficient\n- Enhance the visual design of the user interface\nTo implement the function `select_words` that filters words based on the number of consonants they contain, we will use Python's built-in string manipulation capabilities and regular expressions for efficient word extraction and consonant counting. The function will first split the input string into words, then filter these words based on the specified number of consonants, and finally return the filtered list.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants, no more no less\n\n# [phrase showing quantity relationship]\n    'exactly': means that the word must have a specific number of consonants\n\n# [degree adverb] \n    No degree adverb specifically mentioned, but the requirement emphasizes the exact count of consonants.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Split the input string into words.\n    - Define a function to count the consonants in a word.\n    - Filter words based on the number of consonants.\n    - Return the list of words that meet the criteria.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to consider. The expected output is an empty list.\n    select_words(\"hello world\", 5) = []\n    Explanation: There are no words in the string that contain exactly 5 consonants. The function should return an empty list.\n    select_words(\"a quick brown fox jumps over the lazy dog\", 2) = ['quick', 'brown']\n    Explanation: The words \"quick\" and \"brown\" each contain exactly 2 consonants, so they are included in the output list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case where n is larger than the number of consonants in any word in s. The function will naturally return an empty list in such cases, as no word can have more consonants than its length.\n", "requirement analysis:\nThe primary requirement is to create a function that filters words based on the number of consonants they contain. This involves understanding the input string, identifying words, and counting consonants in each word. The function should handle edge cases, such as an empty string or a number of consonants larger than any word in the string. The product should be efficient and user-friendly, providing a clear output for the user.\nrequirement pool:\n- Implement a function to filter words based on consonant count\n- Handle edge cases such as empty strings and large consonant counts\n- Ensure the application is user-friendly and efficient\n- Develop a clear and concise output for the user\nWe will use Python's built-in string manipulation methods and regular expressions to identify words, count consonants, and filter based on the specified number of consonants. The function will be designed to handle edge cases gracefully.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants and no more, no less\n\n# [phrase showing quantity relationship]\n    No specific phrase showing quantity relationship\n\n# [degree adverb] \n    No specific degree adverb\n\n# [code logic]\n    (1) Split the string into words.\n    (2) Define a function to count consonants in a word.\n    (3) Iterate through each word, count its consonants, and check if it matches n.\n    (4) Collect and return the words that match the criteria.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The string is empty, so there are no words to consider.\n    select_words(\"hello world\", 5) = []\n    Explanation: The longest word \"hello world\" has only 5 letters, which cannot contain exactly 5 consonants.\n    select_words(\"the quick brown fox jumps over the lazy dog\", 3) = [\"quick\", \"brown\"]\n    Explanation: The words \"quick\" and \"brown\" each contain exactly 3 consonants.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case where n is larger than the number of consonants in any word in s, as the function will naturally return an empty list in such cases.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle edge cases such as an empty string and a large number of consonants. The output should be a list of words that meet the criteria, preserving their order in the original string.\nrequirement pool:\n- Implement the function to filter words based on consonant count\n- Handle edge cases such as an empty string and large n\n- Ensure the function is efficient and handles various inputs\n- Develop a user-friendly interface for easy input and output\n- Test the function with various inputs to ensure accuracy\nTo implement the function that filters words based on the number of consonants they contain, we will use Python's built-in string manipulation capabilities and regular expressions for efficient consonant counting. The function will first split the input string into words, then filter these words based on the specified number of consonants. The use of regular expressions will help in accurately counting consonants while ignoring vowels and other characters.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants, no more no less\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Split the input string `s` into words.\n    (2) Define a function to count the consonants in a word.\n    (3) Filter the words to include only those with exactly `n` consonants.\n    (4) Return the filtered list of words.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to consider. The expected output is an empty list.\n    select_words(\"hello world\", 5) = []\n    Explanation: There are no words in the string that contain exactly 5 consonants. The function should return an empty list.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where `n` is larger than the number of consonants in any word in `s`.\n        (1) If `n` is greater than the length of the longest word, return an empty list immediately.\n        (2) Otherwise, proceed with the filtering as per the original logic.\n\n        def count_consonants(word):\n            return len([char for char in word.lower() if char in 'bcdfghjklmnpqrstvwxyz' and char.isalpha()])\n\n        def select_words(s, n):\n            if n > len(max(s.split(), key=len)):\n                return []\n            words = s.split()\n            return [word for word in words if count_consonants(word) == n]\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants. The function should handle edge cases where n is larger than the number of consonants in any word. The input string contains only letters and spaces, so we can assume the input is clean. The function should return an empty list if the input string is empty.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Handle edge cases where n is larger than the number of consonants in any word.\n- Ensure the function is efficient and works well with large input strings.\n- Provide clear documentation and examples for user guidance.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string methods and regular expressions for efficient word extraction and filtering. The function will first split the input string into words, then filter these words based on the number of consonants they contain. We will use a helper function to count consonants in each word. The function will handle edge cases where the number of consonants specified is larger than any word in the input string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'natural number': a positive integer (1, 2, 3, ...)\n\n    Explanation: The function is designed to select words from a given string based on the exact number of consonants they contain. The input string is expected to contain only letters and spaces, and the number of consonants in each word is compared against a specified natural number.\n\n# [phrase showing quantity relationship]\n    'exactly': means that the word must contain exactly n consonants, no more no less.\n\n# [degree adverb] \n    'exactly': means that the word must contain exactly n consonants, no more no less.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Steps to implement the function:\n    1. Split the input string into words.\n    2. Define a helper function to count the number of consonants in a word.\n    3. Filter words based on the number of consonants, ensuring they match the specified natural number.\n    4. Return the list of words that meet the criteria.\n\n# [edge case] \n    select_words('', 3) = []\n    Explanation: The input string is empty, so there are no words to consider. The function should return an empty list.\n    select_words('hello world', 5) = []\n    Explanation: There are no words in the string that contain exactly 5 consonants. The function should return an empty list.\n    select_words('a quick brown fox jumps over the lazy dog', 5) = ['quick', 'jumps']\n    Explanation: The string contains several words, but only 'quick' and 'jumps' contain exactly 5 consonants. The function should return these two words in the order they appear in the string.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where n is larger than the number of consonants in any word in s.\n    To implement this, we can add a check before filtering the words to ensure that n is not larger than the maximum number of consonants in any word. If n is larger, we can return an empty list immediately.\n\n    def select_words(s, n):\n        if not s:\n            return []\n        words = s.split()\n        max_consonants = 0\n        for word in words:\n            consonant_count = count_consonants(word)\n            if consonant_count > max_consonants:\n                max_consonants = consonant_count\n        if n > max_consonants:\n            return []\n        # Continue with the rest of the logic to filter words based on n consonants\n        # ...\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle edge cases such as an empty string and a large number of consonants. The output should be a list of words that meet the criteria, preserving their order in the input string.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Handle edge cases such as an empty string and a large number of consonants.\n- Ensure the function returns a list of words in the order they appear in the input string.\n- Develop a user-friendly interface for easy input and output display.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string manipulation capabilities and regular expressions for efficient word extraction and consonant counting. The function will first split the input string into words, then filter these words based on the specified number of consonants, and finally return the filtered list in the order they appear in the input string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants, no more no less\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Split the input string into words.\n    (2) Define a function to count the number of consonants in a word.\n    (3) Filter words based on the number of consonants.\n    (4) Return the filtered list of words in the order they appear in the input string.\n\n# [edge case] \n    select_words('', 3) = []\n    Explanation: The input string is empty, so there are no words to filter. The expected output is an empty list.\n    select_words('hello world', 5) = []\n    Explanation: There are no words with exactly 5 consonants in the input string. The expected output is an empty list.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where n is larger than the number of consonants in any word in s.\n        (1) If the input string is empty, return an empty list immediately.\n        (2) If n is greater than the length of the longest word in the input string, return an empty list since it's impossible to have a word with more consonants than its length.\n\n# [code logic]\n    (1) Split the input string into words.\n    (2) Define a function to count the number of consonants in a word.\n    (3) Filter words based on the number of consonants.\n    (4) Return the filtered list of words in the order they appear in the input string.\n\n# [extra code for edge case]\n    (1) If the input string is empty, return an empty list immediately.\n    (2) If n is greater than the length of the longest word in the input string, return an empty list since it's impossible to have a word with more consonants than its length.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle edge cases such as empty strings and large inputs. The solution should be efficient and easy to understand.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Handle edge cases such as empty strings and large inputs.\n- Ensure the function is efficient and performs well with large datasets.\n- Make the code easy to understand and maintain.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string methods and regular expressions for efficient filtering. The function will first split the input string into words, then filter these words based on the number of consonants they contain. We will ensure the function handles edge cases such as empty strings and large inputs by optimizing the algorithm and using appropriate data structures.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants, no more no less\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Split the input string into words.\n    (2) Define a function to count the number of consonants in a word.\n    (3) Filter words based on the number of consonants they contain.\n    (4) Return the list of words that meet the criteria.\n\n# [edge case] \n    select_words('', 3) = []\n    Explanation: The input string is empty, so there are no words to consider. The expected output is an empty list.\n    select_words('hello world', 5) = []\n    Explanation: The input string contains no words with exactly 5 consonants. The expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function already handles the case where the input string is empty by returning an empty list.\n\n# [code logic]\n    (1) Split the input string `s` into words using the `split()` method.\n    (2) Define a helper function `count_consonants(word)` that counts the number of consonants in a given word.\n    (3) Use a list comprehension to filter words that have exactly `n` consonants.\n    (4) Return the filtered list of words.\n\n# [edge case] \n    select_words('hello world', 5) = []\n    Explanation: The input string contains no words with exactly 5 consonants. The expected output is an empty list.\n    select_words('a quick brown fox jumps over the lazy dog', 3) = ['quick', 'jumps']\n    Explanation: The input string contains words with exactly 3 consonants: 'quick' and 'jumps'. The expected output is a list containing these words.\n    select_words('the quick brown fox jumps over the lazy dog', 2) = ['quick', 'brown', 'jumps']\n    Explanation: The input string contains words with exactly 2 consonants: 'quick', 'brown', and 'jumps'. The expected output is a list containing these words.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function already handles the case where `n` might be larger than the number of consonants in any word in `s` by simply not including any words with fewer consonants than `n`.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle edge cases such as an empty string and a large number of consonants. The output should be a list of words that meet the criteria, preserving their order in the input string.\nrequirement pool:\n- Implement the function to filter words based on consonant count\n- Handle edge cases such as an empty string and large n\n- Ensure the function returns a list of words in order\n- Develop a user-friendly interface\n- Optimize performance for large datasets\nTo implement the function that filters words based on the number of consonants they contain, we will use Python's built-in string manipulation capabilities and regular expressions for efficient word extraction and consonant counting. The function will first split the input string into words, then filter these words based on the specified number of consonants, and finally return the filtered list of words.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants, no more no less\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Split the input string into words.\n    (2) Define a function to count the number of consonants in a word.\n    (3) Filter the words based on the specified number of consonants.\n    (4) Return the list of words that meet the criteria.\n\n# [edge case] \n    select_words('', 3) = []\n    Explanation: The input string is empty, so there are no words to consider. The expected output is an empty list.\n    select_words('hello world', 5) = []\n    Explanation: There are no words with exactly 5 consonants in the input string. The expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function already returns an empty list when the input string is empty.\n\n# [code logic]\n    (1) Split the input string `s` into words using the `split()` method.\n    (2) Define a helper function `count_consonants(word)` that counts the number of consonants in a given word.\n    (3) Use a list comprehension to filter words that have exactly `n` consonants.\n    (4) Return the filtered list of words.\n\n    def count_consonants(word):\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n\n    def select_words(s, n):\n        words = s.split()\n        return [word for word in words if count_consonants(word) == n]\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle edge cases such as empty strings and large inputs efficiently. The solution should be clear and easy to understand to facilitate maintenance and further development.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Handle edge cases such as empty strings and large inputs.\n- Ensure the function is efficient and performs well with large datasets.\n- Develop a clear and maintainable code structure.\n- Provide documentation and examples to assist users.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string manipulation capabilities and a simple approach to count consonants. We will define a set of consonants and then iterate through each word in the input string, counting the consonants in each word to determine if it matches the specified number 'n'. The function will handle edge cases such as empty strings by returning an empty list immediately.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly 'n' consonants\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Define a set of consonants.\n    - Split the input string into words.\n    - Iterate through each word and count the consonants.\n    - Check if the word has exactly 'n' consonants.\n    - Collect and return the words that meet the criteria.\n\n# [edge case] \n    select_words('', 3) = []\n    Explanation: The input string is empty, so there are no words to consider. The expected output is an empty list.\n    select_words('hello world', 5) = []\n    Explanation: There are no words with exactly 5 consonants in the input string. The expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will return an empty list when the input string is empty.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle edge cases such as an empty string and a number larger than the number of consonants in any word. The input string is assumed to contain only letters and spaces.\nrequirement pool:\n- Implement the function to accurately count consonants in each word.\n- Ensure the function can handle an empty string and return an empty list.\n- Develop a user-friendly interface for easy input and output.\n- Optimize the algorithm for performance, especially for long strings.\nTo implement the function `select_words(s, n)` that filters words based on the number of consonants they contain, we will use Python's built-in string manipulation methods and a simple list comprehension. We will define a set of consonants for easy checking and use the input string to extract words, then filter these words based on the specified number of consonants.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants, no more, no less\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Define a set of consonants.\n    (2) Split the input string into words.\n    (3) Filter words based on the number of consonants they contain.\n    (4) Return the filtered list of words.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to filter. The expected output is an empty list.\n    select_words(\"hello world\", 5) = []\n    Explanation: The input string contains no words with exactly 5 consonants. The expected output is an empty list.\n    select_words(\"algorithm is fun\", 3) = [\"algorithm\"]\n    Explanation: The word \"algorithm\" contains exactly 3 consonants (l, g, r, t, h, m). Other words do not meet the criteria.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case where n is larger than the number of consonants in any word in s. This is because the filtering process will naturally exclude such words, and the function will return an empty list if there are no words with the specified number of consonants.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0075], "pass_results": [true, true, true, true, true, true, true, true, true, false], "pass_test_cases_num": [133, 133, 133, 133, 133, 133, 133, 133, 133, 1], "completion": "from typing import List\n## main.py\n\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants they contain.\n\n    Args:\n        s (str): The input string.\n        n (int): The number of consonants a word must contain.\n\n    Returns:\n        List[str]: A list of words that contain exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n\n    # Define a set of consonants\n    consonants = set('bcdfghjklmnpqrstvwxyz')\n\n    # Split the input string into words\n    words = s.split()\n\n    # Filter words based on the number of consonants they contain\n    filtered_words = [word for word in words if count_consonants(word) == n]\n\n    return filtered_words\n\ndef count_consonants(word: str) -> int:\n    \"\"\"\n    Counts the number of consonants in a word.\n\n    Args:\n        word (str): The word to count consonants in.\n\n    Returns:\n        int: The number of consonants in the word.\n    \"\"\"\n    return sum(1 for char in word.lower() if char in consonants)\n\n# Example usage:\n# print(select_words(\"algorithm is fun\", 3))  # Output: [\"algorithm\"]\n", "passed": true, "pass": true, "pass_num": 9, "round": 799, "repair_prompt": ["def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Consider edge cases where n might be larger than the number of consonants in any word in s.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", " def select_words(s, n):\t\n    '''Given a string s and a natural number n, you have been tasked to implement \n        a function that returns a list of all words from string s that contain exactly \n        n consonants, in order these words appear in the string s.\n        If the string s is empty then the function should return an empty list.\n        Note: you may assume the input string contains only letters and spaces.\n        Consider edge cases where n might be larger than the number of consonants in any word in s.\n    Examples:\n        select_words(\"Mary", " def select_words(s, n):\n    '''Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Consider edge cases where n might be larger than the number of consonants in any word in s.\nExamples:\n    select_words(\"Mary had a"], "mutate_method": "add_1_sentence_at_end", "parent_index": 279}
