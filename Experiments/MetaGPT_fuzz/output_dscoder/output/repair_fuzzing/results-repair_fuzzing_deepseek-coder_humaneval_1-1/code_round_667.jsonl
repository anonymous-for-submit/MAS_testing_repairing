{"task_id": "HumanEval/117", "prompt": "def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants. The words should be returned in the order these words appear in the string s. If the string s is empty then the function should return an empty list. Note: you may assume the input string contains only letters and spaces.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", "entry_point": "select_words", "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "test": ["def check(select_words):\n\tassert select_words('eg aqk', 2) == ['aqk']", "def check(select_words):\n\tassert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "def check(select_words):\n\tassert select_words('syk', 6) == []", "def check(select_words):\n\tassert select_words('gw', 9) == []", "def check(select_words):\n\tassert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "def check(select_words):\n\tassert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "def check(select_words):\n\tassert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "def check(select_words):\n\tassert select_words('zGMhBC', 6) == ['zGMhBC']", "def check(select_words):\n\tassert select_words('kfohjsjunakqmmsx', 1) == []", "def check(select_words):\n\tassert select_words('KbpFfWgXZoVjXV', 1) == []", "def check(select_words):\n\tassert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "def check(select_words):\n\tassert select_words('kg', 1) == []", "def check(select_words):\n\tassert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "def check(select_words):\n\tassert select_words('xrbpxpncgqufqkq', 6) == []", "def check(select_words):\n\tassert select_words('sqgikswgssxsbwkl', 7) == []", "def check(select_words):\n\tassert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "def check(select_words):\n\tassert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "def check(select_words):\n\tassert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "def check(select_words):\n\tassert select_words('bnXA AjPVh', 5) == []", "def check(select_words):\n\tassert select_words('omnivbqgmavyqdgqssas', 6) == []", "def check(select_words):\n\tassert select_words('fmjizkhknnihqioic', 4) == []", "def check(select_words):\n\tassert select_words('lINKPOlFIImtg', 3) == []", "def check(select_words):\n\tassert select_words('nPxmyTd', 7) == ['nPxmyTd']", "def check(select_words):\n\tassert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "def check(select_words):\n\tassert select_words('mehochzpausf', 2) == []", "def check(select_words):\n\tassert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "def check(select_words):\n\tassert select_words('EGiDfM', 1) == []", "def check(select_words):\n\tassert select_words('mc', 7) == []", "def check(select_words):\n\tassert select_words('wzx', 5) == []", "def check(select_words):\n\tassert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "def check(select_words):\n\tassert select_words('xwkxcjffocow', 5) == []", "def check(select_words):\n\tassert select_words('dl', 5) == []", "def check(select_words):\n\tassert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "def check(select_words):\n\tassert select_words('ABIStgq', 5) == ['ABIStgq']", "def check(select_words):\n\tassert select_words('nb', 2) == ['nb']", "def check(select_words):\n\tassert select_words('ny', 2) == ['ny']", "def check(select_words):\n\tassert select_words('HWCLBC', 6) == ['HWCLBC']", "def check(select_words):\n\tassert select_words('uuh', 6) == []", "def check(select_words):\n\tassert select_words('uoubngttn', 3) == []", "def check(select_words):\n\tassert select_words('g', 5) == []", "def check(select_words):\n\tassert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "def check(select_words):\n\tassert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "def check(select_words):\n\tassert select_words('aztxoxesjkzqebhrfzw', 3) == []", "def check(select_words):\n\tassert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "def check(select_words):\n\tassert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "def check(select_words):\n\tassert select_words('tJzO PnCT', 3) == ['tJzO']", "def check(select_words):\n\tassert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "def check(select_words):\n\tassert select_words('qhwubvrfmwy', 2) == []", "def check(select_words):\n\tassert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "def check(select_words):\n\tassert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "def check(select_words):\n\tassert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "def check(select_words):\n\tassert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "def check(select_words):\n\tassert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "def check(select_words):\n\tassert select_words('r s rhhipmt', 6) == ['rhhipmt']", "def check(select_words):\n\tassert select_words('aDqyhePv', 6) == ['aDqyhePv']", "def check(select_words):\n\tassert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "def check(select_words):\n\tassert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "def check(select_words):\n\tassert select_words('aru', 5) == []", "def check(select_words):\n\tassert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "def check(select_words):\n\tassert select_words('SNeiILCez', 4) == []", "def check(select_words):\n\tassert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "def check(select_words):\n\tassert select_words('ySmjGAg', 6) == ['ySmjGAg']", "def check(select_words):\n\tassert select_words('bRJRZC', 3) == []", "def check(select_words):\n\tassert select_words('u', 1) == []", "def check(select_words):\n\tassert select_words('djucfuuizrjfvuzzo', 4) == []", "def check(select_words):\n\tassert select_words('dvYLMt', 6) == ['dvYLMt']", "def check(select_words):\n\tassert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "def check(select_words):\n\tassert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "def check(select_words):\n\tassert select_words('yp', 6) == []", "def check(select_words):\n\tassert select_words('v', 4) == []", "def check(select_words):\n\tassert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "def check(select_words):\n\tassert select_words('afrrguc', 5) == ['afrrguc']", "def check(select_words):\n\tassert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "def check(select_words):\n\tassert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "def check(select_words):\n\tassert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "def check(select_words):\n\tassert select_words('nh vu lcakrb', 1) == ['vu']", "def check(select_words):\n\tassert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "def check(select_words):\n\tassert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "def check(select_words):\n\tassert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "def check(select_words):\n\tassert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "def check(select_words):\n\tassert select_words('MjRnAErHPguQC', 1) == []", "def check(select_words):\n\tassert select_words('tmchxmttrgfdanq', 3) == []", "def check(select_words):\n\tassert select_words('jezkeorvxnruwhhwzxm', 7) == []", "def check(select_words):\n\tassert select_words('caurfxlpkygqxoknil', 4) == []", "def check(select_words):\n\tassert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "def check(select_words):\n\tassert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "def check(select_words):\n\tassert select_words('NSjIbZV', 2) == []", "def check(select_words):\n\tassert select_words('rPKhzIot', 6) == ['rPKhzIot']", "def check(select_words):\n\tassert select_words('ASDVzOVVDEdj J', 1) == ['J']", "def check(select_words):\n\tassert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "def check(select_words):\n\tassert select_words(' siweqafqot', 5) == []", "def check(select_words):\n\tassert select_words('xdQgsAHI', 5) == []", "def check(select_words):\n\tassert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "def check(select_words):\n\tassert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "def check(select_words):\n\tassert select_words('hguHoJGaaNwX', 3) == []", "def check(select_words):\n\tassert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "def check(select_words):\n\tassert select_words('choounwx', 5) == ['choounwx']", "def check(select_words):\n\tassert select_words('yue', 2) == []", "def check(select_words):\n\tassert select_words('DDdrgPy', 4) == []", "def check(select_words):\n\tassert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "def check(select_words):\n\tassert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "def check(select_words):\n\tassert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "def check(select_words):\n\tassert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "def check(select_words):\n\tassert select_words('Reg MuZcF', 4) == ['MuZcF']", "def check(select_words):\n\tassert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "def check(select_words):\n\tassert select_words('sl', 6) == []", "def check(select_words):\n\tassert select_words('IFKqNq ', 5) == ['IFKqNq']", "def check(select_words):\n\tassert select_words('lfspeijyudniowk', 1) == []", "def check(select_words):\n\tassert select_words('kogmgdnk', 7) == ['kogmgdnk']", "def check(select_words):\n\tassert select_words('nnchatjackywoavfwfps', 5) == []", "def check(select_words):\n\tassert select_words('d', 2) == []", "def check(select_words):\n\tassert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "def check(select_words):\n\tassert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "def check(select_words):\n\tassert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "def check(select_words):\n\tassert select_words('jopfxbbvlslmluypcdt', 3) == []", "def check(select_words):\n\tassert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "def check(select_words):\n\tassert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "def check(select_words):\n\tassert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "def check(select_words):\n\tassert select_words('etdrxwybqi', 1) == []", "def check(select_words):\n\tassert select_words('aVCSziOkLCLGizHcmC', 2) == []", "def check(select_words):\n\tassert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "def check(select_words):\n\tassert select_words('txXxge', 4) == []", "def check(select_words):\n\tassert select_words('kcpieuVjAOaxdpB', 4) == []", "def check(select_words):\n\tassert select_words('oh', 8) == []", "def check(select_words):\n\tassert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "def check(select_words):\n\tassert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "def check(select_words):\n\tassert select_words('eywh qxreeexrrhyovpwl', 7) == []", "def check(select_words):\n\tassert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "def check(select_words):\n\tassert select_words('asfwxvbzdfsrymc', 3) == []", "def check(select_words):\n\tassert select_words('nBmjWxiPV', 3) == []", "def check(select_words):\n\tassert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "test_case_list": ["assert select_words('eg aqk', 2) == ['aqk']", "assert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "assert select_words('syk', 6) == []", "assert select_words('gw', 9) == []", "assert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "assert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "assert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "assert select_words('zGMhBC', 6) == ['zGMhBC']", "assert select_words('kfohjsjunakqmmsx', 1) == []", "assert select_words('KbpFfWgXZoVjXV', 1) == []", "assert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "assert select_words('kg', 1) == []", "assert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "assert select_words('xrbpxpncgqufqkq', 6) == []", "assert select_words('sqgikswgssxsbwkl', 7) == []", "assert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "assert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "assert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "assert select_words('bnXA AjPVh', 5) == []", "assert select_words('omnivbqgmavyqdgqssas', 6) == []", "assert select_words('fmjizkhknnihqioic', 4) == []", "assert select_words('lINKPOlFIImtg', 3) == []", "assert select_words('nPxmyTd', 7) == ['nPxmyTd']", "assert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "assert select_words('mehochzpausf', 2) == []", "assert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "assert select_words('EGiDfM', 1) == []", "assert select_words('mc', 7) == []", "assert select_words('wzx', 5) == []", "assert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "assert select_words('xwkxcjffocow', 5) == []", "assert select_words('dl', 5) == []", "assert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "assert select_words('ABIStgq', 5) == ['ABIStgq']", "assert select_words('nb', 2) == ['nb']", "assert select_words('ny', 2) == ['ny']", "assert select_words('HWCLBC', 6) == ['HWCLBC']", "assert select_words('uuh', 6) == []", "assert select_words('uoubngttn', 3) == []", "assert select_words('g', 5) == []", "assert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "assert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "assert select_words('aztxoxesjkzqebhrfzw', 3) == []", "assert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "assert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "assert select_words('tJzO PnCT', 3) == ['tJzO']", "assert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "assert select_words('qhwubvrfmwy', 2) == []", "assert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "assert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "assert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "assert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "assert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "assert select_words('r s rhhipmt', 6) == ['rhhipmt']", "assert select_words('aDqyhePv', 6) == ['aDqyhePv']", "assert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "assert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "assert select_words('aru', 5) == []", "assert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "assert select_words('SNeiILCez', 4) == []", "assert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "assert select_words('ySmjGAg', 6) == ['ySmjGAg']", "assert select_words('bRJRZC', 3) == []", "assert select_words('u', 1) == []", "assert select_words('djucfuuizrjfvuzzo', 4) == []", "assert select_words('dvYLMt', 6) == ['dvYLMt']", "assert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "assert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "assert select_words('yp', 6) == []", "assert select_words('v', 4) == []", "assert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "assert select_words('afrrguc', 5) == ['afrrguc']", "assert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "assert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "assert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "assert select_words('nh vu lcakrb', 1) == ['vu']", "assert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "assert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "assert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "assert select_words('MjRnAErHPguQC', 1) == []", "assert select_words('tmchxmttrgfdanq', 3) == []", "assert select_words('jezkeorvxnruwhhwzxm', 7) == []", "assert select_words('caurfxlpkygqxoknil', 4) == []", "assert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "assert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "assert select_words('NSjIbZV', 2) == []", "assert select_words('rPKhzIot', 6) == ['rPKhzIot']", "assert select_words('ASDVzOVVDEdj J', 1) == ['J']", "assert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "assert select_words(' siweqafqot', 5) == []", "assert select_words('xdQgsAHI', 5) == []", "assert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "assert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "assert select_words('hguHoJGaaNwX', 3) == []", "assert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "assert select_words('choounwx', 5) == ['choounwx']", "assert select_words('yue', 2) == []", "assert select_words('DDdrgPy', 4) == []", "assert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "assert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "assert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "assert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "assert select_words('Reg MuZcF', 4) == ['MuZcF']", "assert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "assert select_words('sl', 6) == []", "assert select_words('IFKqNq ', 5) == ['IFKqNq']", "assert select_words('lfspeijyudniowk', 1) == []", "assert select_words('kogmgdnk', 7) == ['kogmgdnk']", "assert select_words('nnchatjackywoavfwfps', 5) == []", "assert select_words('d', 2) == []", "assert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "assert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "assert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "assert select_words('jopfxbbvlslmluypcdt', 3) == []", "assert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "assert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "assert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "assert select_words('etdrxwybqi', 1) == []", "assert select_words('aVCSziOkLCLGizHcmC', 2) == []", "assert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "assert select_words('txXxge', 4) == []", "assert select_words('kcpieuVjAOaxdpB', 4) == []", "assert select_words('oh', 8) == []", "assert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "assert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "assert select_words('eywh qxreeexrrhyovpwl', 7) == []", "assert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "assert select_words('asfwxvbzdfsrymc', 3) == []", "assert select_words('nBmjWxiPV', 3) == []", "assert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "nl": "Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    ", "func": "def select_words(s, n):", "examples": "Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    ", "completions": ["from typing import List\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    \n    vowels = set('aeiouAEIOU')\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    \n    words = s.split()\n    filtered_words = [word for word in words if len([char for char in word if char in consonants]) == n]\n    \n    return filtered_words\n", "from typing import List\nfrom typing import List\nimport re\n\ndef count_consonants(word: str) -> int:\n    \"\"\"\n    Count the number of consonants in a word.\n    \n    Args:\n        word (str): The word to count consonants in.\n        \n    Returns:\n        int: The number of consonants in the word.\n    \"\"\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    return sum(1 for char in word.lower() if char in consonants)\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants they contain.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants required in each word.\n        \n    Returns:\n        List[str]: A list of words from the input string that contain exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    words = re.findall(r'\\b\\w+\\b', s)\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    \n    return filtered_words\n", "from typing import List\nfrom typing import List\nimport re\n\ndef count_consonants(word: str) -> int:\n    \"\"\"\n    Count the number of consonants in a word.\n    \n    Args:\n        word (str): The word to count consonants in.\n        \n    Returns:\n        int: The number of consonants in the word.\n    \"\"\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    return sum(1 for char in word.lower() if char in consonants)\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants they contain.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants a word must contain.\n        \n    Returns:\n        List[str]: A list of words from the input string that contain exactly n consonants.\n    \"\"\"\n    if n < 0:\n        return []\n    \n    words = re.findall(r'\\b\\w+\\b', s)\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    return filtered_words\n", "from typing import List\n## main.py\nfrom typing import List\nimport re\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    \n    # Split the string into words, considering punctuation\n    words = re.findall(r'\\b\\w+\\b', s)\n    result = []\n    \n    for word in words:\n        # Count consonants in the word\n        consonant_count = sum(1 for char in word.lower() if char.isalpha() and char.lower() not in 'aeiou')\n        if consonant_count == n:\n            result.append(word)\n    \n    return result\n", "from typing import List\nfrom typing import List\nimport re\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    \n    words = re.findall(r'\\b\\w+\\b', s)\n    filtered_words = []\n    \n    for word in words:\n        consonant_count = count_consonants(word)\n        if consonant_count == n:\n            filtered_words.append(word)\n    \n    return filtered_words\n\ndef count_consonants(word: str) -> int:\n    vowels = \"aeiouAEIOU\"\n    return sum(1 for char in word if char.isalpha() and char not in vowels)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants they contain.\n\n    Args:\n        s (str): The input string containing words separated by spaces.\n        n (int): The number of consonants that the words should contain exactly.\n\n    Returns:\n        List[str]: A list of words from the input string that contain exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n\n    def count_consonants(word: str) -> int:\n        \"\"\"\n        Counts the number of consonants in a word.\n\n        Args:\n            word (str): The word to count consonants in.\n\n        Returns:\n            int: The number of consonants in the word.\n        \"\"\"\n        return sum(1 for char in word if char in consonants)\n\n    words = s.split()\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    return filtered_words\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport re\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants they contain.\n\n    Args:\n        s (str): The input string.\n        n (int): The number of consonants that the words should contain.\n\n    Returns:\n        List[str]: A list of words containing exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n\n    def count_consonants(word: str) -> int:\n        \"\"\"\n        Counts the number of consonants in a word.\n\n        Args:\n            word (str): The word to count consonants in.\n\n        Returns:\n            int: The number of consonants in the word.\n        \"\"\"\n        word = word.lower()\n        consonants = re.findall(r'[bcdfghjklmnpqrstvwxyz]', word)\n        return len(consonants)\n\n    words = s.split()\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    return filtered_words\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport re\n\ndef count_consonants(word: str) -> int:\n    \"\"\"\n    Helper function to count the number of consonants in a word.\n    \n    Args:\n        word (str): The word to count consonants in.\n        \n    Returns:\n        int: The number of consonants in the word.\n    \"\"\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    return sum(1 for char in word.lower() if char in consonants)\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants they contain.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants required in each word.\n        \n    Returns:\n        List[str]: A list of words that contain exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    words = re.findall(r'\\b\\w+\\b', s)\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    \n    return filtered_words\n", "from typing import List\nfrom typing import List\nimport re\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants they contain.\n\n    Args:\n        s (str): The input string containing words.\n        n (int): The number of consonants that the words must contain.\n\n    Returns:\n        List[str]: A list of words that contain exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n\n    # Define a set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyz\")\n\n    # Split the input string into words\n    words = s.split()\n\n    # Initialize a list to store filtered words\n    filtered_words = []\n\n    # Loop through each word and count consonants\n    for word in words:\n        # Count consonants in the word using regex\n        consonant_count = len([char for char in word.lower() if char in consonants])\n\n        # Check if the word contains exactly n consonants\n        if consonant_count == n:\n            filtered_words.append(word)\n\n    return filtered_words\n", "from typing import List\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants.\n\n    Args:\n        s (str): The input string.\n        n (int): The number of consonants that the words should contain.\n\n    Returns:\n        List[str]: A list of words containing exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n\n    # Define a set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyz\")\n\n    # Split the input string into words\n    words = s.split()\n\n    # Filter words based on the number of consonants they contain\n    filtered_words = [word for word in words if sum(1 for char in word.lower() if char in consonants) == n]\n\n    return filtered_words\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be able to handle various input strings and return the filtered list of words in the order they appear. The input string is assumed to contain only letters and spaces, making the task straightforward. The function should also handle edge cases, such as an empty input string.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function returns the words in the order they appear in the input string.\n- Handle edge cases, such as an empty input string.\n- Ensure the function is efficient and can handle various input strings.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string manipulation methods and a simple list comprehension. We will define a set of consonants and use it to check the number of consonants in each word. The function will split the input string into words, filter those words based on the specified number of consonants, and return the filtered list.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n number of consonants\n\n# [phrase showing quantity relationship]\n    'exactly': means that the word must have a specific number of consonants, not more or less\n\n# [degree adverb] \n    No degree adverb specifically mentioned, but the requirement emphasizes the exact count of consonants.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Split the input string into words.\n    - Define a set of consonants.\n    - For each word, count the number of consonants.\n    - Filter words that have exactly n consonants.\n    - Return the filtered list of words.\n\n# [edge case] \n    select_words(\"\", 4) = []\n    Explanation: The input string is empty, so there are no words to filter, and the expected output is an empty list.\n    select_words(\"Hello world\", 0) = [\"Hello\", \"world\"]\n    Explanation: If n is 0, the function should return all words since they all contain 0 consonants.\n    select_words(\"Mary had a little lamb\", 5) = []\n    Explanation: There are no words with exactly 5 consonants in the given string, so the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan already covers the case where the input string is empty. For the other edge case, the logic can be extended to handle n=0 by including all words in the result.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should return a list of words that meet this criterion, maintaining the order they appear in the input string. The input string is assumed to contain only letters and spaces, making the task straightforward.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function returns the words in the order they appear in the input string.\n- Handle edge cases, such as empty strings, gracefully.\n- Develop a user-friendly interface for input and output.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string manipulation capabilities and regular expressions. The function will first split the input string into words, then filter these words based on the number of consonants they contain, and finally return the filtered list of words in the order they appear in the input string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n number of consonants\n\n# [phrase showing quantity relationship]\n    'exactly': means that the word must have a specific number of consonants, not more or less\n\n# [degree adverb] \n    'exactly': specifies the exact number of consonants required in a word\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Split the input string into words.\n    - Define a function to count the number of consonants in a word.\n    - Filter words based on the number of consonants they contain.\n    - Return the filtered list of words.\n\n# [edge case] \n    select_words(\"\", 4) = []\n    explanation: The input string is empty, so there are no words to filter, and the expected output is an empty list.\n    select_words(\"Hello world\", 0) = [\"Hello\", \"world\"]\n    explanation: If n is 0, the function should return all words since they all contain 0 consonants.\n    select_words(\"Mary had a little lamb\", 5) = []\n    explanation: There are no words with exactly 5 consonants in the given string, so the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic can handle the case where the input string is empty by returning an empty list.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be able to handle various input strings and return the words in the order they appear. The input string is assumed to contain only letters and spaces, making the task straightforward for the function.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function returns the words in the order they appear in the input string.\n- Handle edge cases, such as empty strings, gracefully.\n- Develop a user-friendly interface for easy input and output.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string manipulation capabilities and regular expressions. The function will first split the input string into words, then filter these words based on the number of consonants they contain, and finally return the filtered list of words in the order they appear in the input string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n number of consonants\n\n# [phrase showing quantity relationship]\n    'exactly': means that the word must have a specific number of consonants, no more no less\n\n# [degree adverb] \n    No degree adverb specifically mentions the number of consonants directly\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Split the input string into words\n    - Define a function to count the number of consonants in a word\n    - Filter words based on the number of consonants\n    - Return the filtered list of words\n\n# [edge case] \n    select_words(\"\", 4) = []\n    Explanation: The input string is empty, so there are no words to filter, and the expected output is an empty list.\n    select_words(\"Hello world\", 0) = [\"Hello\", \"world\"]\n    Explanation: If n is 0, we should return all words since they all contain 0 consonants.\n    select_words(\"Mary had a little lamb\", -1) = []\n    Explanation: A negative number of consonants doesn't make sense, so the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic can handle cases where the input string is empty or where n is a non-positive number by returning an empty list.\n", "requirement analysis:\nThe requirement is to create a function that filters words from a given string based on the number of consonants they contain. The function should return these words in the order they appear in the input string. The input string is assumed to contain only letters and spaces, which simplifies the task of identifying words and counting consonants.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function returns words in the order they appear in the input string.\n- Handle edge cases such as an empty input string.\n- Optimize the function for efficiency, especially with large input strings.\nWe will use Python's built-in string manipulation functions and a simple regular expression to identify words and count consonants. The function will iterate through the input string, split it into words, and then filter these words based on the specified number of consonants. The filtered words will be returned in the order they appear in the input string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'words': means sequences of letters\n    'consonants': means letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': means the word must contain exactly n consonants and no more, no less\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Iterate through the input string to split it into words.\n    - For each word, count the number of consonants.\n    - Check if the word has exactly n consonants.\n    - If it does, add it to the result list.\n    - Return the result list.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    explanation: The input string is empty, so there are no words to process, and the function should return an empty list.\n    select_words(\"hello world\", 3) = []\n    explanation: There are no words with exactly 3 consonants in the input string.\n    select_words(\"the quick brown fox jumps over the lazy dog\", 3) = [\"quick\", \"jumps\"]\n    explanation: The words \"quick\" and \"jumps\" each contain exactly 3 consonants, and they appear in the order they appear in the input string.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will correctly return an empty list when the input string is empty.\n", "requirement analysis:\nThe requirement is to create a function that filters words from a given string based on the number of consonants they contain. This is a specific use case for text processing and does not overlap with general text analysis or language learning functionalities. The function should handle basic text inputs efficiently and return results in the order they appear in the input string.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function handles edge cases such as empty strings and strings with no words.\n- Optimize the function for performance to handle large texts without slowing down.\n- Design the function to be user-friendly and provide clear feedback.\n- Include options for customization in case the default behavior does not meet user needs.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string manipulation capabilities and regular expressions for efficient word extraction and analysis. The function will first split the input string into words, then filter these words based on the specified number of consonants. The use of regular expressions will help in accurately identifying consonants in each word.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants, no more no less\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Split the input string into words.\n    (2) Define a function to count the number of consonants in a word.\n    (3) Filter words based on the number of consonants.\n    (4) Return the list of words that meet the criteria.\n\n# [edge case] \n    select_words('', 3) = []\n    Explanation: The input string is empty, so there are no words to consider. The expected output is an empty list.\n    select_words('hello world', 3) = []\n    Explanation: There are no words with exactly 3 consonants in the given string. The expected output is an empty list.\n    select_words('algorithm is fun', 4) = ['algorithm']\n    Explanation: The word 'algorithm' contains exactly 4 consonants (l, g, r, t, h, m). Other words do not meet the criteria. The expected output is a list containing 'algorithm'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will return an empty list when the input string is empty.\n", "requirement analysis:\nThe primary requirement is to create a function that filters words based on the number of consonants they contain. This involves understanding the input string, identifying words, and counting consonants in each word. The function should return a list of words that meet the specified consonant count criteria.\nrequirement pool:\n- Implement the function to filter words based on consonant count.\n- Ensure the function handles various input strings and consonant counts effectively.\n- Develop a user-friendly interface for input and output.\n- Include error handling for invalid inputs.\n- Optimize the performance for large datasets.\nTo implement the function that filters words based on the number of consonants they contain, we will use Python's built-in string manipulation methods and a simple list processing approach. We will define a function that takes a string and a number as inputs and returns a list of words containing exactly that number of consonants. The function will first split the input string into words, then filter these words based on the consonant count, and finally return the filtered list.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n number of consonants\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n\n# [edge case] \n    select_words('', 3) = []\n    explanation: The input string is empty, so there are no words to consider, and the expected output is an empty list.\n    select_words('hello world', 3) = ['hello']\n    explanation: The word 'hello' contains exactly 3 consonants (h, l, l), while 'world' contains 2 consonants. The function should return a list containing 'hello'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function can directly return an empty list if the input string is empty.\n\n# [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n number of consonants\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n\n# [edge case] \n    select_words('', 3) = []\n    explanation: The input string is empty, so there are no words to consider, and the expected output is an empty list.\n    select_words('hello world', 3) = ['hello']\n    explanation: The word 'hello' contains exactly 3 consonants (h, l, l), while 'world' contains 2 consonants. The function should return a list containing 'hello'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function can directly return an empty list if the input string is empty.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle strings with spaces and return a list of words that meet the specified consonant count. The input string may be empty, in which case the function should return an empty list. The function should be efficient and clear in its implementation.\nrequirement pool:\n- Implement the function to accurately count and filter words based on the number of consonants.\n- Ensure the function can handle various lengths of input strings and different consonant counts.\n- Develop a user-friendly interface for easy input and output display.\n- Optimize the function for speed and efficiency to handle large datasets.\n- Test the function with various edge cases to ensure robustness.\nTo implement the function that filters words based on the number of consonants they contain, we will use Python's built-in string manipulation capabilities and regular expressions for efficient filtering. The function will first split the input string into words, then filter these words based on the specified number of consonants. The use of regular expressions will help in accurately counting consonants in each word.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'words': means individual units of language, typically starting with a capital letter and made up of letters, used with other words to form sentences and express ideas.\n    'consonants': means a speech sound that is not a vowel, typically represented by a letter of the alphabet outside of A, E, I, O, U.\n\n# [phrase showing quantity relationship]\n    'exactly': means that we need to find words with a specific number of consonants, not more or less.\n\n# [degree adverb] \n    'exactly': means that we need to find words with a specific number of consonants, not more or less.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Split the input string into words.\n    - Define a function to count consonants in a word.\n    - Filter words based on the specified number of consonants.\n    - Return the filtered list of words.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    explanation: The input string is empty, so there are no words to filter, and the expected output is an empty list.\n    select_words(\"Mary had a little lamb\", 0) = [\"Mary\", \"had\", \"a\", \"lamb\"]\n    explanation: The word \"little\" does not have any consonants, so it is not included in the output. All other words have more than 0 consonants, so they are included.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic can handle an empty string by returning an empty list.\n\n# [code logic]\n    - Split the input string into words using the split() method.\n    - Define a helper function to count consonants:\n        - Convert the word to lowercase.\n        - Use a regular expression to count consonants.\n    - Filter the words using a list comprehension:\n        - Check if the word's consonant count matches the specified number.\n    - Return the filtered list of words.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be able to handle strings with spaces and letters, and return a list of words that match the specified number of consonants. The function should also handle edge cases like empty strings by returning an empty list.\nrequirement pool:\n- Implement the function to accurately filter words based on the number of consonants.\n- Ensure the function can handle various input sizes and types.\n- Develop a user-friendly interface for easy input and output.\n- Optimize the function for efficiency and performance.\n- Include support for edge cases like empty strings.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string manipulation capabilities and regular expressions. The function will first split the input string into words, then filter these words based on the number of consonants they contain. We will use a helper function to count consonants in a word. The function will handle edge cases such as empty strings by returning an empty list.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'words': means individual units of language that, taken together, form the subject matter of a discourse or a story.\n    'consonants': means any speech sound that is not a vowel.\n    'natural number n': means a positive integer.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to consider, and the function should return an empty list.\n    select_words(\"Mary had a little lamb\", 4) = [\"little\"]\n    Explanation: The word \"little\" contains exactly 4 consonants ('l', 't', 'l', 'b'), which matches the given condition.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function can directly return an empty list if the input string is empty.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle strings with spaces and return a list of words that match the specified number of consonants. The input is assumed to be a string with only letters and spaces, making the task straightforward for processing.\nrequirement pool:\n- Implement the function to filter words based on consonant count\n- Ensure the function can handle strings with spaces\n- Develop a user-friendly interface for input and output\n- Optimize the function for efficiency and speed\n- Include a simple user guide for easy understanding\nTo implement the function that filters words based on the number of consonants they contain, we will use Python's built-in string manipulation capabilities and regular expressions for efficient filtering. The function will first split the input string into words, then filter these words based on the specified number of consonants. The use of regular expressions will help in accurately counting consonants and ensuring the function is robust against various input scenarios.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants, no more no less\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Split the input string into words.\n    - Define a function to count consonants in a word.\n    - Filter words based on the number of consonants.\n    - Return the filtered list of words.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to filter. The expected output is an empty list.\n    select_words(\"Mary had a little lamb\", 0) = [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n    Explanation: The word \"Mary\" has 0 consonants, \"had\" has 0 consonants, \"a\" has 0 consonants, \"little\" has 4 consonants, and \"lamb\" has 0 consonants. All words are returned because the requirement is to select words with exactly 0 consonants.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will correctly return an empty list for an empty input string.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be able to handle various input strings and return the words in the order they appear. The input string is assumed to contain only letters and spaces, making the task straightforward.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function returns words in the order they appear in the input string.\n- Handle edge cases, such as empty strings, gracefully.\n- Develop a user-friendly interface for input and output.\n- Optimize the function for efficiency and performance.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string manipulation methods and a simple list comprehension. We will define a set of consonants and use it to check the number of consonants in each word. The function will split the input string into words, filter those words based on the specified number of consonants, and return the filtered list.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n number of consonants\n\n# [phrase showing quantity relationship]\n    'exactly': means that the word must have a specific number of consonants, not more or less\n\n# [degree adverb] \n    No degree adverb specifically mentioned, but 'exactly' implies a specific quantity\n\n# [code logic]\n    (1) Define a set of consonants.\n    (2) Split the input string into words.\n    (3) Filter words based on the number of consonants they contain.\n    (4) Return the list of words that meet the criteria.\n\n# [edge case] \n    select_words(\"\", 4) = []\n    Explanation: The input string is empty, so there are no words to filter. The expected output is an empty list.\n    select_words(\"Hello world\", 0) = [\"Hello\", \"world\"]\n    Explanation: If n is 0, the function should return all words since they all contain 0 consonants. The expected output includes both \"Hello\" and \"world\".\n    select_words(\"Mary had a little lamb\", 5) = []\n    Explanation: No word in the string contains exactly 5 consonants. Therefore, the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case of an empty string. The function already correctly returns an empty list in this scenario.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [133, 133, 133, 133, 133, 133, 133, 133, 133, 133], "completion": "from typing import List\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants.\n\n    Args:\n        s (str): The input string.\n        n (int): The number of consonants that the words should contain.\n\n    Returns:\n        List[str]: A list of words containing exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n\n    # Define a set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyz\")\n\n    # Split the input string into words\n    words = s.split()\n\n    # Filter words based on the number of consonants they contain\n    filtered_words = [word for word in words if sum(1 for char in word.lower() if char in consonants) == n]\n\n    return filtered_words\n", "passed": true, "pass": true, "pass_num": 10, "round": 667, "repair_prompt": ["def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants. The words should be returned in the order these words appear in the string s. If the string s is empty then the function should return an empty list. Note: you may assume the input string contains only letters and spaces.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", " def select_words(s, n):\t\n    '''Given a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants. The words should be returned in the order these words appear in the string s. If the string s is empty then the function should return an empty list. Note: you may assume the input string contains only letters and spaces.\n    Examples:\n        select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n        select_words(\"Mary had a little lamb\", ", " def select_words(s, n):\n    '''Given a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants. The words should be returned in the order these words appear in the string s. If the string s is empty then the function should return an empty list. Note: you may assume the input string contains only letters and spaces.\n    Examples:\n        select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n        select_words(\"Mary had a little lamb\", 3"], "mutate_method": "expand_one2two", "parent_index": 279}
