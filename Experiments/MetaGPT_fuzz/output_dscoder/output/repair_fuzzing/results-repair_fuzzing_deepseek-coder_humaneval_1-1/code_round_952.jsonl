{"task_id": "HumanEval/117", "prompt": "def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Ensure your solution is optimized for performance.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", "entry_point": "select_words", "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "test": ["def check(select_words):\n\tassert select_words('eg aqk', 2) == ['aqk']", "def check(select_words):\n\tassert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "def check(select_words):\n\tassert select_words('syk', 6) == []", "def check(select_words):\n\tassert select_words('gw', 9) == []", "def check(select_words):\n\tassert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "def check(select_words):\n\tassert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "def check(select_words):\n\tassert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "def check(select_words):\n\tassert select_words('zGMhBC', 6) == ['zGMhBC']", "def check(select_words):\n\tassert select_words('kfohjsjunakqmmsx', 1) == []", "def check(select_words):\n\tassert select_words('KbpFfWgXZoVjXV', 1) == []", "def check(select_words):\n\tassert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "def check(select_words):\n\tassert select_words('kg', 1) == []", "def check(select_words):\n\tassert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "def check(select_words):\n\tassert select_words('xrbpxpncgqufqkq', 6) == []", "def check(select_words):\n\tassert select_words('sqgikswgssxsbwkl', 7) == []", "def check(select_words):\n\tassert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "def check(select_words):\n\tassert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "def check(select_words):\n\tassert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "def check(select_words):\n\tassert select_words('bnXA AjPVh', 5) == []", "def check(select_words):\n\tassert select_words('omnivbqgmavyqdgqssas', 6) == []", "def check(select_words):\n\tassert select_words('fmjizkhknnihqioic', 4) == []", "def check(select_words):\n\tassert select_words('lINKPOlFIImtg', 3) == []", "def check(select_words):\n\tassert select_words('nPxmyTd', 7) == ['nPxmyTd']", "def check(select_words):\n\tassert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "def check(select_words):\n\tassert select_words('mehochzpausf', 2) == []", "def check(select_words):\n\tassert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "def check(select_words):\n\tassert select_words('EGiDfM', 1) == []", "def check(select_words):\n\tassert select_words('mc', 7) == []", "def check(select_words):\n\tassert select_words('wzx', 5) == []", "def check(select_words):\n\tassert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "def check(select_words):\n\tassert select_words('xwkxcjffocow', 5) == []", "def check(select_words):\n\tassert select_words('dl', 5) == []", "def check(select_words):\n\tassert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "def check(select_words):\n\tassert select_words('ABIStgq', 5) == ['ABIStgq']", "def check(select_words):\n\tassert select_words('nb', 2) == ['nb']", "def check(select_words):\n\tassert select_words('ny', 2) == ['ny']", "def check(select_words):\n\tassert select_words('HWCLBC', 6) == ['HWCLBC']", "def check(select_words):\n\tassert select_words('uuh', 6) == []", "def check(select_words):\n\tassert select_words('uoubngttn', 3) == []", "def check(select_words):\n\tassert select_words('g', 5) == []", "def check(select_words):\n\tassert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "def check(select_words):\n\tassert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "def check(select_words):\n\tassert select_words('aztxoxesjkzqebhrfzw', 3) == []", "def check(select_words):\n\tassert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "def check(select_words):\n\tassert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "def check(select_words):\n\tassert select_words('tJzO PnCT', 3) == ['tJzO']", "def check(select_words):\n\tassert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "def check(select_words):\n\tassert select_words('qhwubvrfmwy', 2) == []", "def check(select_words):\n\tassert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "def check(select_words):\n\tassert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "def check(select_words):\n\tassert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "def check(select_words):\n\tassert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "def check(select_words):\n\tassert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "def check(select_words):\n\tassert select_words('r s rhhipmt', 6) == ['rhhipmt']", "def check(select_words):\n\tassert select_words('aDqyhePv', 6) == ['aDqyhePv']", "def check(select_words):\n\tassert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "def check(select_words):\n\tassert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "def check(select_words):\n\tassert select_words('aru', 5) == []", "def check(select_words):\n\tassert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "def check(select_words):\n\tassert select_words('SNeiILCez', 4) == []", "def check(select_words):\n\tassert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "def check(select_words):\n\tassert select_words('ySmjGAg', 6) == ['ySmjGAg']", "def check(select_words):\n\tassert select_words('bRJRZC', 3) == []", "def check(select_words):\n\tassert select_words('u', 1) == []", "def check(select_words):\n\tassert select_words('djucfuuizrjfvuzzo', 4) == []", "def check(select_words):\n\tassert select_words('dvYLMt', 6) == ['dvYLMt']", "def check(select_words):\n\tassert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "def check(select_words):\n\tassert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "def check(select_words):\n\tassert select_words('yp', 6) == []", "def check(select_words):\n\tassert select_words('v', 4) == []", "def check(select_words):\n\tassert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "def check(select_words):\n\tassert select_words('afrrguc', 5) == ['afrrguc']", "def check(select_words):\n\tassert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "def check(select_words):\n\tassert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "def check(select_words):\n\tassert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "def check(select_words):\n\tassert select_words('nh vu lcakrb', 1) == ['vu']", "def check(select_words):\n\tassert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "def check(select_words):\n\tassert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "def check(select_words):\n\tassert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "def check(select_words):\n\tassert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "def check(select_words):\n\tassert select_words('MjRnAErHPguQC', 1) == []", "def check(select_words):\n\tassert select_words('tmchxmttrgfdanq', 3) == []", "def check(select_words):\n\tassert select_words('jezkeorvxnruwhhwzxm', 7) == []", "def check(select_words):\n\tassert select_words('caurfxlpkygqxoknil', 4) == []", "def check(select_words):\n\tassert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "def check(select_words):\n\tassert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "def check(select_words):\n\tassert select_words('NSjIbZV', 2) == []", "def check(select_words):\n\tassert select_words('rPKhzIot', 6) == ['rPKhzIot']", "def check(select_words):\n\tassert select_words('ASDVzOVVDEdj J', 1) == ['J']", "def check(select_words):\n\tassert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "def check(select_words):\n\tassert select_words(' siweqafqot', 5) == []", "def check(select_words):\n\tassert select_words('xdQgsAHI', 5) == []", "def check(select_words):\n\tassert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "def check(select_words):\n\tassert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "def check(select_words):\n\tassert select_words('hguHoJGaaNwX', 3) == []", "def check(select_words):\n\tassert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "def check(select_words):\n\tassert select_words('choounwx', 5) == ['choounwx']", "def check(select_words):\n\tassert select_words('yue', 2) == []", "def check(select_words):\n\tassert select_words('DDdrgPy', 4) == []", "def check(select_words):\n\tassert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "def check(select_words):\n\tassert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "def check(select_words):\n\tassert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "def check(select_words):\n\tassert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "def check(select_words):\n\tassert select_words('Reg MuZcF', 4) == ['MuZcF']", "def check(select_words):\n\tassert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "def check(select_words):\n\tassert select_words('sl', 6) == []", "def check(select_words):\n\tassert select_words('IFKqNq ', 5) == ['IFKqNq']", "def check(select_words):\n\tassert select_words('lfspeijyudniowk', 1) == []", "def check(select_words):\n\tassert select_words('kogmgdnk', 7) == ['kogmgdnk']", "def check(select_words):\n\tassert select_words('nnchatjackywoavfwfps', 5) == []", "def check(select_words):\n\tassert select_words('d', 2) == []", "def check(select_words):\n\tassert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "def check(select_words):\n\tassert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "def check(select_words):\n\tassert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "def check(select_words):\n\tassert select_words('jopfxbbvlslmluypcdt', 3) == []", "def check(select_words):\n\tassert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "def check(select_words):\n\tassert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "def check(select_words):\n\tassert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "def check(select_words):\n\tassert select_words('etdrxwybqi', 1) == []", "def check(select_words):\n\tassert select_words('aVCSziOkLCLGizHcmC', 2) == []", "def check(select_words):\n\tassert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "def check(select_words):\n\tassert select_words('txXxge', 4) == []", "def check(select_words):\n\tassert select_words('kcpieuVjAOaxdpB', 4) == []", "def check(select_words):\n\tassert select_words('oh', 8) == []", "def check(select_words):\n\tassert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "def check(select_words):\n\tassert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "def check(select_words):\n\tassert select_words('eywh qxreeexrrhyovpwl', 7) == []", "def check(select_words):\n\tassert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "def check(select_words):\n\tassert select_words('asfwxvbzdfsrymc', 3) == []", "def check(select_words):\n\tassert select_words('nBmjWxiPV', 3) == []", "def check(select_words):\n\tassert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "test_case_list": ["assert select_words('eg aqk', 2) == ['aqk']", "assert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "assert select_words('syk', 6) == []", "assert select_words('gw', 9) == []", "assert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "assert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "assert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "assert select_words('zGMhBC', 6) == ['zGMhBC']", "assert select_words('kfohjsjunakqmmsx', 1) == []", "assert select_words('KbpFfWgXZoVjXV', 1) == []", "assert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "assert select_words('kg', 1) == []", "assert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "assert select_words('xrbpxpncgqufqkq', 6) == []", "assert select_words('sqgikswgssxsbwkl', 7) == []", "assert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "assert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "assert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "assert select_words('bnXA AjPVh', 5) == []", "assert select_words('omnivbqgmavyqdgqssas', 6) == []", "assert select_words('fmjizkhknnihqioic', 4) == []", "assert select_words('lINKPOlFIImtg', 3) == []", "assert select_words('nPxmyTd', 7) == ['nPxmyTd']", "assert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "assert select_words('mehochzpausf', 2) == []", "assert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "assert select_words('EGiDfM', 1) == []", "assert select_words('mc', 7) == []", "assert select_words('wzx', 5) == []", "assert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "assert select_words('xwkxcjffocow', 5) == []", "assert select_words('dl', 5) == []", "assert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "assert select_words('ABIStgq', 5) == ['ABIStgq']", "assert select_words('nb', 2) == ['nb']", "assert select_words('ny', 2) == ['ny']", "assert select_words('HWCLBC', 6) == ['HWCLBC']", "assert select_words('uuh', 6) == []", "assert select_words('uoubngttn', 3) == []", "assert select_words('g', 5) == []", "assert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "assert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "assert select_words('aztxoxesjkzqebhrfzw', 3) == []", "assert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "assert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "assert select_words('tJzO PnCT', 3) == ['tJzO']", "assert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "assert select_words('qhwubvrfmwy', 2) == []", "assert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "assert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "assert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "assert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "assert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "assert select_words('r s rhhipmt', 6) == ['rhhipmt']", "assert select_words('aDqyhePv', 6) == ['aDqyhePv']", "assert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "assert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "assert select_words('aru', 5) == []", "assert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "assert select_words('SNeiILCez', 4) == []", "assert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "assert select_words('ySmjGAg', 6) == ['ySmjGAg']", "assert select_words('bRJRZC', 3) == []", "assert select_words('u', 1) == []", "assert select_words('djucfuuizrjfvuzzo', 4) == []", "assert select_words('dvYLMt', 6) == ['dvYLMt']", "assert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "assert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "assert select_words('yp', 6) == []", "assert select_words('v', 4) == []", "assert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "assert select_words('afrrguc', 5) == ['afrrguc']", "assert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "assert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "assert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "assert select_words('nh vu lcakrb', 1) == ['vu']", "assert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "assert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "assert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "assert select_words('MjRnAErHPguQC', 1) == []", "assert select_words('tmchxmttrgfdanq', 3) == []", "assert select_words('jezkeorvxnruwhhwzxm', 7) == []", "assert select_words('caurfxlpkygqxoknil', 4) == []", "assert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "assert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "assert select_words('NSjIbZV', 2) == []", "assert select_words('rPKhzIot', 6) == ['rPKhzIot']", "assert select_words('ASDVzOVVDEdj J', 1) == ['J']", "assert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "assert select_words(' siweqafqot', 5) == []", "assert select_words('xdQgsAHI', 5) == []", "assert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "assert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "assert select_words('hguHoJGaaNwX', 3) == []", "assert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "assert select_words('choounwx', 5) == ['choounwx']", "assert select_words('yue', 2) == []", "assert select_words('DDdrgPy', 4) == []", "assert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "assert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "assert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "assert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "assert select_words('Reg MuZcF', 4) == ['MuZcF']", "assert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "assert select_words('sl', 6) == []", "assert select_words('IFKqNq ', 5) == ['IFKqNq']", "assert select_words('lfspeijyudniowk', 1) == []", "assert select_words('kogmgdnk', 7) == ['kogmgdnk']", "assert select_words('nnchatjackywoavfwfps', 5) == []", "assert select_words('d', 2) == []", "assert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "assert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "assert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "assert select_words('jopfxbbvlslmluypcdt', 3) == []", "assert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "assert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "assert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "assert select_words('etdrxwybqi', 1) == []", "assert select_words('aVCSziOkLCLGizHcmC', 2) == []", "assert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "assert select_words('txXxge', 4) == []", "assert select_words('kcpieuVjAOaxdpB', 4) == []", "assert select_words('oh', 8) == []", "assert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "assert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "assert select_words('eywh qxreeexrrhyovpwl', 7) == []", "assert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "assert select_words('asfwxvbzdfsrymc', 3) == []", "assert select_words('nBmjWxiPV', 3) == []", "assert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "nl": "Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    ", "func": "def select_words(s, n):", "examples": "Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    ", "completions": ["from typing import List\nfrom typing import List\nimport re\n\ndef count_consonants(word: str) -> int:\n    \"\"\"\n    Count the number of consonants in a word.\n    \n    Args:\n        word (str): The word to count consonants in.\n        \n    Returns:\n        int: The number of consonants in the word.\n    \"\"\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    return sum(1 for char in word.lower() if char in consonants)\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants they contain.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants a word must contain.\n        \n    Returns:\n        List[str]: A list of words that contain exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    words = re.findall(r'\\b\\w+\\b', s)\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    \n    return filtered_words\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef count_consonants(word: str) -> int:\n    \"\"\"\n    Counts the number of consonants in a given word.\n    \n    Args:\n        word (str): The word to count consonants in.\n        \n    Returns:\n        int: The number of consonants in the word.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return sum(1 for char in word if char.isalpha() and char not in vowels)\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants they contain.\n    \n    Args:\n        s (str): The input string containing words separated by spaces.\n        n (int): The number of consonants a word must contain.\n        \n    Returns:\n        List[str]: A list of words that contain exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef count_consonants(word: str) -> int:\n    \"\"\"\n    Count the number of consonants in a given word.\n    \n    Args:\n        word (str): The word to count consonants in.\n        \n    Returns:\n        int: The number of consonants in the word.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return sum(1 for char in word if char.isalpha() and char not in vowels)\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Select words from the input string `s` that contain exactly `n` consonants.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants the selected words must contain.\n        \n    Returns:\n        List[str]: A list of words from the input string that contain exactly `n` consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "from typing import List\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    \n    vowels = set('aeiouAEIOU')\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    \n    def count_consonants(word: str) -> int:\n        return sum(1 for char in word if char in consonants)\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words from the input string based on the number of consonants they contain.\n\n    Args:\n        s (str): The input string containing words separated by spaces.\n        n (int): The number of consonants that each word must contain.\n\n    Returns:\n        List[str]: A list of words from the input string that contain exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n\n    # Define a set of vowels for easy lookup\n    vowels = set('aeiouAEIOU')\n\n    # Helper function to count consonants in a word\n    def count_consonants(word: str) -> int:\n        return sum(1 for char in word if char.lower() not in vowels)\n\n    # Split the input string into words\n    words = s.split()\n\n    # Use list comprehension to filter words with exactly n consonants\n    filtered_words = [word for word in words if count_consonants(word) == n]\n\n    return filtered_words\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    \n    def count_consonants(word: str) -> int:\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for char in word if char.isalpha() and char.lower() not in vowels)\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "from typing import List\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Selects words from the input string `s` that contain exactly `n` consonants.\n    \n    Args:\n        s (str): The input string containing words separated by spaces.\n        n (int): The exact number of consonants that the selected words must contain.\n    \n    Returns:\n        List[str]: A list of words from the input string that contain exactly `n` consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    # Define a set of consonants\n    consonants = set('bcdfghjklmnpqrstvwxyz')\n    \n    # Split the string into words\n    words = s.split()\n    \n    # Filter words that have exactly n consonants\n    filtered_words = [word for word in words if sum(1 for char in word.lower() if char in consonants) == n]\n    \n    return filtered_words\n", "from typing import List\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    # Define a set of consonants for quick lookup\n    consonants = set('bcdfghjklmnpqrstvwxyz')\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Filter words that contain exactly n consonants\n    def has_exactly_n_consonants(word):\n        count = sum(1 for char in word.lower() if char in consonants)\n        return count == n\n    \n    filtered_words = [word for word in words if has_exactly_n_consonants(word)]\n    \n    return filtered_words\n", "from typing import List\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    \n    vowels = set('aeiouAEIOU')\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    \n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = sum(1 for char in word if char in consonants)\n        if consonant_count == n:\n            result.append(word)\n    \n    return result\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef count_consonants(word: str) -> int:\n    vowels = \"aeiouAEIOU\"\n    return sum(1 for char in word if char.isalpha() and char.lower() not in vowels)\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    \n    words = s.split()\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    return filtered_words\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be optimized for performance and handle edge cases such as empty strings and strings with no words meeting the criteria. The solution should be clear and efficient, providing a seamless user experience.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants they contain.\n- Ensure the function is optimized for performance to handle large inputs effectively.\n- Handle edge cases such as empty strings and strings with no words meeting the criteria.\n- Provide a clear and efficient solution that ensures a seamless user experience.\nTo implement the function that filters words based on the number of consonants they contain, we will use Python's built-in string manipulation capabilities and regular expressions for efficient word extraction and filtering. The function will first split the input string into words, then filter these words based on the number of consonants they contain, and finally return the filtered list of words.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants, no more, no less\n\n# [phrase showing quantity relationship]\n    'exactly': means that the word must have a specific number of consonants, not more or less\n\n# [degree adverb] \n    No degree adverb specifically mentioned, but the requirement emphasizes the exact count of consonants.\n\n# [code logic]\n    To implement the function, we will follow these steps:\n    1. Split the input string into words.\n    2. Define a function to count the consonants in a word.\n    3. Filter the words based on the number of consonants they contain.\n    4. Return the filtered list of words.\n\n# [edge case] \n    select_words(\"\", 4) = []\n    Explanation: The input string is empty, so there are no words to filter. The expected output is an empty list.\n    select_words(\"Hello world\", 5) = []\n    Explanation: There are no words with exactly 5 consonants in the input string. The expected output is an empty list.\n    select_words(\"Mary had a little lamb\", 1) = [\"had\", \"lamb\"]\n    Explanation: Both \"had\" and \"lamb\" contain exactly one consonant each, which are 'h' and 'l' respectively. The expected output is a list containing these two words.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case where the input string is empty, as the function already returns an empty list in such cases. For the second edge case, where no words with the exact number of consonants exist, the function will naturally return an empty list, so no extra code is needed for this scenario.\n", "requirement analysis:\nThe requirement is to filter words based on the number of consonants they contain. The function should be optimized for performance and handle edge cases like empty strings and strings with no words meeting the criteria. The solution should be clear and efficient.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function handles empty strings and returns an empty list.\n- Optimize the function for performance to handle large inputs efficiently.\n- Include detailed documentation and tests to ensure reliability.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string manipulation methods and a simple list comprehension. We will define a helper function to count consonants in a word and then use this function within our main function to filter the words based on the specified number of consonants.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants\n\n# [phrase showing quantity relationship]\n    'exactly': means that the word must have a specific number of consonants\n\n# [degree adverb] \n    No degree adverb specifically mentioned, but the requirement emphasizes the need for optimization in performance.\n\n# [code logic]\n    (1) Define a function to count consonants in a word.\n    (2) Use a list comprehension to filter words based on the number of consonants.\n    (3) Return the filtered list of words.\n\n# [edge case] \n    select_words(\"\", 4) = []\n    Explanation: The string is empty, so there are no words to consider, and the function should return an empty list.\n    select_words(\"Hello world\", 0) = [\"Hello\", \"world\"]\n    Explanation: Words with zero consonants are \"Hello\" and \"world\" as they contain no vowels.\n    select_words(\"Mary had a little lamb\", 1) = [\"had\", \"a\", \"lamb\"]\n    Explanation: Words with exactly one consonant are \"had\", \"a\", and \"lamb\".\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case of an empty string. The function already correctly returns an empty list.\n\n# [code logic]\n(1) Define a function to count consonants in a word:\n```python\ndef count_consonants(word):\n    vowels = \"aeiouAEIOU\"\n    return sum(1 for char in word if char.isalpha() and char not in vowels)\n```\n(2) Use a list comprehension to filter words based on the number of consonants:\n```python\ndef select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]\n```\n", "requirement analysis:\nThe requirement is to filter words based on the number of consonants they contain. The function should be optimized for performance and handle various input scenarios. The order of words in the output list should match their order in the input string. The function should return an empty list if there are no words with the specified number of consonants.\nrequirement pool:\n- Implement a function that filters words based on the number of consonants.\n- Ensure the function is optimized for performance.\n- Maintain the order of words as they appear in the original string.\n- Handle different lengths of input strings efficiently.\n- Return an empty list if there are no words with the specified number of consonants.\nTo implement the function `select_words` efficiently, we will use Python's built-in string manipulation methods and a custom function to count consonants. The function will first split the input string into words, then filter these words based on the number of consonants they contain. The order of words in the output list will be maintained as they appear in the original string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants\n\n# [phrase showing quantity relationship]\n    'exactly': means that the word must have a specific number of consonants\n\n# [degree adverb] \n    No degree adverb specifically mentioned, but the requirement emphasizes the need for optimization and efficiency.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Split the input string into words.\n    - Define a function to count consonants in a word.\n    - Filter words based on the number of consonants.\n    - Return the filtered list of words.\n\n# [edge case] \n    select_words(\"\", 4) = []\n    Explanation: The input string is empty, so there are no words to consider. The expected output is an empty list.\n    select_words(\"Mary had a little lamb\", 0) = [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n    Explanation: If n is 0, we are looking for words with zero consonants. All words contain at least one vowel, so all words are included in the output.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic already correctly handles the case where the input string is empty.\n\n# [code logic]\n    Here's a detailed implementation of the `select_words` function:\n\n    ```python\n    def count_consonants(word):\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n\n    def select_words(s, n):\n        if not s:\n            return []\n        \n        words = s.split()\n        result = [word for word in words if count_consonants(word) == n]\n        return result\n    ```\n\n    This code defines a helper function `count_consonants` to count the number of consonants in a word and then uses this function to filter the words in the input string `s` that have exactly `n` consonants.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be optimized for performance and handle edge cases like empty strings. The solution should be clear and maintainable.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function is optimized for performance.\n- Handle edge cases such as empty strings.\n- Ensure the function is easy to read and maintain.\n- Test the function with various inputs to ensure it works as expected.\nTo implement the function efficiently, we will use Python's built-in string manipulation methods and a set for quick membership testing. We will define a function that takes a string and a number as inputs and returns a list of words containing exactly that number of consonants. We will ensure the function is optimized for performance by minimizing unnecessary computations and leveraging Python's data structures.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants and no more, no less\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Split the string into words\n    - Define a function to count consonants in a word\n    - Iterate through each word, count consonants, and check if it matches n\n    - Collect matching words in a list\n    - Return the list\n\n# [edge case] \n    select_words(\"\", 4) = []\n    explanation: The string is empty, so there are no words to consider. The expected output is an empty list.\n    select_words(\"Mary had a little lamb\", 0) = [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n    explanation: The number of consonants in each word is counted and only words with exactly 0 consonants are selected. In this case, all words have at least one consonant, so the expected output is the list of all words.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will correctly return an empty list for an empty string.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be optimized for performance and handle various lengths of input strings. The order of words in the output should match their order in the input string. The function should also handle spaces correctly and return an empty list if the input string is empty.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants\n- Ensure the function is optimized for performance\n- Maintain the order of words as they appear in the input string\n- Handle spaces correctly in the input string\n- Return an empty list if the input string is empty\nTo implement the function efficiently, we will use Python's built-in string manipulation methods and a list comprehension to filter words based on the number of consonants. We will define a helper function to count consonants in a word. This approach ensures that the function is optimized for performance and handles various lengths of input strings effectively.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function efficiently, we will use Python's built-in string manipulation methods and a list comprehension to filter words based on the number of consonants. We will define a helper function to count consonants in a word.\n\n    Steps:\n    1. Define a set of vowels for easy lookup.\n    2. Define a helper function to count consonants in a word.\n    3. Split the input string into words.\n    4. Use a list comprehension to filter words that have exactly n consonants.\n    5. Return the filtered list of words.\n\n# [edge case] \n    select_words(\"\", 4) = []\n    Explanation: The input string is empty, so there are no words to consider, and the function should return an empty list.\n\n    select_words(\"Mary had a little lamb\", 0) = [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n    Explanation: If n is 0, the function should return all words since they all contain 0 consonants.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case of an empty string. The function already returns an empty list as expected.\n", "requirement analysis:\nThe requirement is to implement a function that filters words based on the number of consonants they contain. The function should be optimized for performance and should return the words in the order they appear in the input string. The input string is assumed to contain only letters and spaces.\nrequirement pool:\n- Implement the function to filter words with exactly n consonants\n- Ensure the function is optimized for performance\n- Maintain the order of words as they appear in the input string\n- Handle edge cases such as empty strings\n- Provide clear documentation and examples\nTo implement the function `select_words` efficiently, we will use Python's built-in string manipulation methods and a custom function to count consonants. The function will first split the input string into words, then filter these words based on the number of consonants they contain, and finally return them in the order they appear in the input string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Split the input string into words.\n    - Define a function to count consonants in a word.\n    - Filter words based on the number of consonants.\n    - Return the filtered words in the order they appear in the input string.\n\n# [edge case] \n    select_words(\"\", 4) = []\n    explanation: The input string is empty, so there are no words to consider.\n    select_words(\"Mary had a little lamb\", 0) = [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n    explanation: If n is 0, we should return all words since they all contain 0 consonants.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will correctly return an empty list for an empty string.\n\n# [code logic]\n    - Split the input string into words using `split()`.\n    - Define a helper function `count_consonants(word)` to count consonants in a word.\n    - Use a list comprehension to filter words with exactly `n` consonants.\n    - Return the filtered list.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be optimized for performance to handle large strings efficiently. The input string contains only letters and spaces, which simplifies the task of identifying words and counting consonants.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function is optimized for performance to handle large input strings.\n- Develop a user-friendly interface for easy input and output.\n- Test the function with various input strings to ensure accuracy and reliability.\nTo implement the function efficiently, we will use Python's built-in string manipulation methods and a simple list comprehension. We will define a set of consonants and use this to count the consonants in each word. The function will then filter words based on the specified number of consonants.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants, no more no less\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Define a set of consonants.\n    (2) Split the string into words.\n    (3) Filter words that have exactly n consonants.\n    (4) Return the filtered list of words.\n\n# [edge case] \n    select_words(\"\", 4) = []\n    Explanation: The string is empty, so there are no words to consider.\n    select_words(\"Mary had a little lamb\", 0) = [\"Mary\", \"had\", \"a\", \"lamb\"]\n    Explanation: Words with exactly 0 consonants are \"Mary\", \"had\", \"a\", and \"lamb\".\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case since the original logic can handle an empty string by returning an empty list.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be optimized for performance to handle large strings efficiently. The input string contains only letters and spaces, which simplifies the task of identifying words and counting consonants.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function is optimized for performance to handle large input strings.\n- Develop a user-friendly interface for easy input and output.\n- Test the function with various inputs to ensure it works as expected.\nTo implement the function efficiently, we will use Python's built-in string manipulation methods and a simple list comprehension. We will define a set of consonants for quick lookup and use the input string to identify words, then filter these words based on the number of consonants they contain.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants, no more no less\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Define a set of consonants for quick lookup.\n    (2) Split the input string into words.\n    (3) Filter words that contain exactly n consonants.\n    (4) Return the filtered list of words.\n\n# [edge case] \n    select_words(\"\", 4) = []\n    Explanation: The input string is empty, so there are no words to consider. The expected output is an empty list.\n    select_words(\"Mary had a little lamb\", 0) = [\"Mary\", \"had\", \"a\", \"lamb\"]\n    Explanation: If n is 0, we are looking for words with no consonants. \"Mary\", \"had\", \"a\", and \"lamb\" all have 0 consonants.\n    select_words(\"Mary had a little lamb\", 10) = []\n    Explanation: There are no words with exactly 10 consonants in the given string. The expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will correctly return an empty list when the input string is empty.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be optimized for performance to handle large strings efficiently. The input string contains only letters and spaces, which simplifies the task of identifying consonants.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function is optimized for performance.\n- Develop a user-friendly interface for easy input and output.\n- Test the function with various inputs to ensure accuracy and robustness.\nTo implement the function efficiently, we will use Python's built-in string manipulation capabilities and optimize for performance. The function will first split the input string into words, then filter these words based on the number of consonants they contain. We will use a set for quick lookup of consonants to ensure the function runs efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants, no more no less\n\n# [phrase showing quantity relationship]\n    No specific phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Split the input string into words.\n    (2) Define a set of consonants.\n    (3) Iterate through each word, count the number of consonants it contains.\n    (4) Filter words that have exactly n consonants.\n    (5) Return the filtered list of words.\n\n# [edge case] \n    select_words(\"\", 4) = []\n    Explanation: The input string is empty, so there are no words to consider. The expected output is an empty list.\n    select_words(\"Mary had a little lamb\", 0) = [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n    Explanation: If n is 0, we should return all words since they all contain 0 consonants. The expected output includes all words in the input string.\n    select_words(\"Python programming is fun\", 5) = []\n    Explanation: There are no words in the input string that contain exactly 5 consonants. The expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case where the input string is empty. The function already returns an empty list in this scenario. For other edge cases, the provided logic should suffice.\n", "requirement analysis:\nThe requirement is to filter words based on the number of consonants they contain. The function should be optimized for performance and handle edge cases such as empty strings and strings with no words meeting the criteria. The input string is assumed to contain only letters and spaces.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants\n- Ensure the function is optimized for performance\n- Handle edge cases such as empty strings and no matching words\n- Maintain readability and clarity in the code\nTo implement the function `select_words` efficiently, we will use Python's built-in string manipulation methods and a custom function to count consonants. We will split the input string into words, filter those words based on the number of consonants, and return the filtered list. This approach ensures that the function is both readable and optimized for performance.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants\n\n# [phrase showing quantity relationship]\n    'exactly': means that the word must have a specific number of consonants\n\n# [degree adverb] \n    No degree adverb specifically mentioned, but 'exactly' implies a specific quantity\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Split the input string into words.\n    - Define a function to count consonants in a word.\n    - Filter words based on the number of consonants.\n    - Return the filtered list of words.\n\n# [edge case] \n    select_words(\"\", 4) = []\n    Explanation: The input string is empty, so there are no words to consider. The expected output is an empty list.\n    select_words(\"Mary had a little lamb\", 0) = [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n    Explanation: If n is 0, we should return all words since they all contain 0 consonants.\n    select_words(\"Hello world\", 5) = []\n    Explanation: The word \"Hello\" has 2 consonants, \"world\" has 3 consonants. No word contains exactly 5 consonants.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic can handle the case where the input string is empty by returning an empty list. For n=0, we can simply return all words without filtering based on the number of consonants.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [133, 133, 133, 133, 133, 133, 133, 133, 133, 133], "completion": "from typing import List\n## main.py\nfrom typing import List\n\ndef count_consonants(word: str) -> int:\n    vowels = \"aeiouAEIOU\"\n    return sum(1 for char in word if char.isalpha() and char.lower() not in vowels)\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    \n    words = s.split()\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    return filtered_words\n", "passed": true, "pass": true, "pass_num": 10, "round": 952, "repair_prompt": ["def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Ensure your solution is optimized for performance.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", " def select_words(s, n):\t\n    '''Given a string s and a natural number n, you have been tasked to implement \n        a function that returns a list of all words from string s that contain exactly \n        n consonants, in order these words appear in the string s.\n        If the string s is empty then the function should return an empty list.\n        Note: you may assume the input string contains only letters and spaces.\n        Ensure your solution is optimized for performance.\n    Examples:\n        select_words(\"Mary had a little lamb\", 4) ==> [\"little", " def select_words(s, n):\n    '''Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Ensure your solution is optimized for performance.\n    Examples:\n        select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]"], "mutate_method": "add_1_sentence_at_end", "parent_index": 279}
