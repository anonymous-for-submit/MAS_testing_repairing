{"task_id": "HumanEval/117", "prompt": "def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement a function. This function should return a list of all words from string s that contain exactly n consonants, in order these words appear in the string s. If the string s is empty then the function should return an empty list. Note: you may assume the input string contains only letters and spaces.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", "entry_point": "select_words", "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "test": ["def check(select_words):\n\tassert select_words('eg aqk', 2) == ['aqk']", "def check(select_words):\n\tassert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "def check(select_words):\n\tassert select_words('syk', 6) == []", "def check(select_words):\n\tassert select_words('gw', 9) == []", "def check(select_words):\n\tassert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "def check(select_words):\n\tassert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "def check(select_words):\n\tassert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "def check(select_words):\n\tassert select_words('zGMhBC', 6) == ['zGMhBC']", "def check(select_words):\n\tassert select_words('kfohjsjunakqmmsx', 1) == []", "def check(select_words):\n\tassert select_words('KbpFfWgXZoVjXV', 1) == []", "def check(select_words):\n\tassert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "def check(select_words):\n\tassert select_words('kg', 1) == []", "def check(select_words):\n\tassert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "def check(select_words):\n\tassert select_words('xrbpxpncgqufqkq', 6) == []", "def check(select_words):\n\tassert select_words('sqgikswgssxsbwkl', 7) == []", "def check(select_words):\n\tassert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "def check(select_words):\n\tassert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "def check(select_words):\n\tassert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "def check(select_words):\n\tassert select_words('bnXA AjPVh', 5) == []", "def check(select_words):\n\tassert select_words('omnivbqgmavyqdgqssas', 6) == []", "def check(select_words):\n\tassert select_words('fmjizkhknnihqioic', 4) == []", "def check(select_words):\n\tassert select_words('lINKPOlFIImtg', 3) == []", "def check(select_words):\n\tassert select_words('nPxmyTd', 7) == ['nPxmyTd']", "def check(select_words):\n\tassert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "def check(select_words):\n\tassert select_words('mehochzpausf', 2) == []", "def check(select_words):\n\tassert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "def check(select_words):\n\tassert select_words('EGiDfM', 1) == []", "def check(select_words):\n\tassert select_words('mc', 7) == []", "def check(select_words):\n\tassert select_words('wzx', 5) == []", "def check(select_words):\n\tassert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "def check(select_words):\n\tassert select_words('xwkxcjffocow', 5) == []", "def check(select_words):\n\tassert select_words('dl', 5) == []", "def check(select_words):\n\tassert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "def check(select_words):\n\tassert select_words('ABIStgq', 5) == ['ABIStgq']", "def check(select_words):\n\tassert select_words('nb', 2) == ['nb']", "def check(select_words):\n\tassert select_words('ny', 2) == ['ny']", "def check(select_words):\n\tassert select_words('HWCLBC', 6) == ['HWCLBC']", "def check(select_words):\n\tassert select_words('uuh', 6) == []", "def check(select_words):\n\tassert select_words('uoubngttn', 3) == []", "def check(select_words):\n\tassert select_words('g', 5) == []", "def check(select_words):\n\tassert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "def check(select_words):\n\tassert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "def check(select_words):\n\tassert select_words('aztxoxesjkzqebhrfzw', 3) == []", "def check(select_words):\n\tassert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "def check(select_words):\n\tassert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "def check(select_words):\n\tassert select_words('tJzO PnCT', 3) == ['tJzO']", "def check(select_words):\n\tassert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "def check(select_words):\n\tassert select_words('qhwubvrfmwy', 2) == []", "def check(select_words):\n\tassert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "def check(select_words):\n\tassert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "def check(select_words):\n\tassert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "def check(select_words):\n\tassert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "def check(select_words):\n\tassert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "def check(select_words):\n\tassert select_words('r s rhhipmt', 6) == ['rhhipmt']", "def check(select_words):\n\tassert select_words('aDqyhePv', 6) == ['aDqyhePv']", "def check(select_words):\n\tassert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "def check(select_words):\n\tassert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "def check(select_words):\n\tassert select_words('aru', 5) == []", "def check(select_words):\n\tassert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "def check(select_words):\n\tassert select_words('SNeiILCez', 4) == []", "def check(select_words):\n\tassert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "def check(select_words):\n\tassert select_words('ySmjGAg', 6) == ['ySmjGAg']", "def check(select_words):\n\tassert select_words('bRJRZC', 3) == []", "def check(select_words):\n\tassert select_words('u', 1) == []", "def check(select_words):\n\tassert select_words('djucfuuizrjfvuzzo', 4) == []", "def check(select_words):\n\tassert select_words('dvYLMt', 6) == ['dvYLMt']", "def check(select_words):\n\tassert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "def check(select_words):\n\tassert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "def check(select_words):\n\tassert select_words('yp', 6) == []", "def check(select_words):\n\tassert select_words('v', 4) == []", "def check(select_words):\n\tassert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "def check(select_words):\n\tassert select_words('afrrguc', 5) == ['afrrguc']", "def check(select_words):\n\tassert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "def check(select_words):\n\tassert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "def check(select_words):\n\tassert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "def check(select_words):\n\tassert select_words('nh vu lcakrb', 1) == ['vu']", "def check(select_words):\n\tassert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "def check(select_words):\n\tassert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "def check(select_words):\n\tassert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "def check(select_words):\n\tassert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "def check(select_words):\n\tassert select_words('MjRnAErHPguQC', 1) == []", "def check(select_words):\n\tassert select_words('tmchxmttrgfdanq', 3) == []", "def check(select_words):\n\tassert select_words('jezkeorvxnruwhhwzxm', 7) == []", "def check(select_words):\n\tassert select_words('caurfxlpkygqxoknil', 4) == []", "def check(select_words):\n\tassert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "def check(select_words):\n\tassert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "def check(select_words):\n\tassert select_words('NSjIbZV', 2) == []", "def check(select_words):\n\tassert select_words('rPKhzIot', 6) == ['rPKhzIot']", "def check(select_words):\n\tassert select_words('ASDVzOVVDEdj J', 1) == ['J']", "def check(select_words):\n\tassert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "def check(select_words):\n\tassert select_words(' siweqafqot', 5) == []", "def check(select_words):\n\tassert select_words('xdQgsAHI', 5) == []", "def check(select_words):\n\tassert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "def check(select_words):\n\tassert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "def check(select_words):\n\tassert select_words('hguHoJGaaNwX', 3) == []", "def check(select_words):\n\tassert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "def check(select_words):\n\tassert select_words('choounwx', 5) == ['choounwx']", "def check(select_words):\n\tassert select_words('yue', 2) == []", "def check(select_words):\n\tassert select_words('DDdrgPy', 4) == []", "def check(select_words):\n\tassert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "def check(select_words):\n\tassert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "def check(select_words):\n\tassert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "def check(select_words):\n\tassert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "def check(select_words):\n\tassert select_words('Reg MuZcF', 4) == ['MuZcF']", "def check(select_words):\n\tassert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "def check(select_words):\n\tassert select_words('sl', 6) == []", "def check(select_words):\n\tassert select_words('IFKqNq ', 5) == ['IFKqNq']", "def check(select_words):\n\tassert select_words('lfspeijyudniowk', 1) == []", "def check(select_words):\n\tassert select_words('kogmgdnk', 7) == ['kogmgdnk']", "def check(select_words):\n\tassert select_words('nnchatjackywoavfwfps', 5) == []", "def check(select_words):\n\tassert select_words('d', 2) == []", "def check(select_words):\n\tassert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "def check(select_words):\n\tassert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "def check(select_words):\n\tassert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "def check(select_words):\n\tassert select_words('jopfxbbvlslmluypcdt', 3) == []", "def check(select_words):\n\tassert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "def check(select_words):\n\tassert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "def check(select_words):\n\tassert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "def check(select_words):\n\tassert select_words('etdrxwybqi', 1) == []", "def check(select_words):\n\tassert select_words('aVCSziOkLCLGizHcmC', 2) == []", "def check(select_words):\n\tassert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "def check(select_words):\n\tassert select_words('txXxge', 4) == []", "def check(select_words):\n\tassert select_words('kcpieuVjAOaxdpB', 4) == []", "def check(select_words):\n\tassert select_words('oh', 8) == []", "def check(select_words):\n\tassert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "def check(select_words):\n\tassert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "def check(select_words):\n\tassert select_words('eywh qxreeexrrhyovpwl', 7) == []", "def check(select_words):\n\tassert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "def check(select_words):\n\tassert select_words('asfwxvbzdfsrymc', 3) == []", "def check(select_words):\n\tassert select_words('nBmjWxiPV', 3) == []", "def check(select_words):\n\tassert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "test_case_list": ["assert select_words('eg aqk', 2) == ['aqk']", "assert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "assert select_words('syk', 6) == []", "assert select_words('gw', 9) == []", "assert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "assert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "assert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "assert select_words('zGMhBC', 6) == ['zGMhBC']", "assert select_words('kfohjsjunakqmmsx', 1) == []", "assert select_words('KbpFfWgXZoVjXV', 1) == []", "assert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "assert select_words('kg', 1) == []", "assert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "assert select_words('xrbpxpncgqufqkq', 6) == []", "assert select_words('sqgikswgssxsbwkl', 7) == []", "assert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "assert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "assert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "assert select_words('bnXA AjPVh', 5) == []", "assert select_words('omnivbqgmavyqdgqssas', 6) == []", "assert select_words('fmjizkhknnihqioic', 4) == []", "assert select_words('lINKPOlFIImtg', 3) == []", "assert select_words('nPxmyTd', 7) == ['nPxmyTd']", "assert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "assert select_words('mehochzpausf', 2) == []", "assert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "assert select_words('EGiDfM', 1) == []", "assert select_words('mc', 7) == []", "assert select_words('wzx', 5) == []", "assert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "assert select_words('xwkxcjffocow', 5) == []", "assert select_words('dl', 5) == []", "assert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "assert select_words('ABIStgq', 5) == ['ABIStgq']", "assert select_words('nb', 2) == ['nb']", "assert select_words('ny', 2) == ['ny']", "assert select_words('HWCLBC', 6) == ['HWCLBC']", "assert select_words('uuh', 6) == []", "assert select_words('uoubngttn', 3) == []", "assert select_words('g', 5) == []", "assert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "assert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "assert select_words('aztxoxesjkzqebhrfzw', 3) == []", "assert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "assert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "assert select_words('tJzO PnCT', 3) == ['tJzO']", "assert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "assert select_words('qhwubvrfmwy', 2) == []", "assert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "assert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "assert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "assert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "assert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "assert select_words('r s rhhipmt', 6) == ['rhhipmt']", "assert select_words('aDqyhePv', 6) == ['aDqyhePv']", "assert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "assert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "assert select_words('aru', 5) == []", "assert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "assert select_words('SNeiILCez', 4) == []", "assert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "assert select_words('ySmjGAg', 6) == ['ySmjGAg']", "assert select_words('bRJRZC', 3) == []", "assert select_words('u', 1) == []", "assert select_words('djucfuuizrjfvuzzo', 4) == []", "assert select_words('dvYLMt', 6) == ['dvYLMt']", "assert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "assert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "assert select_words('yp', 6) == []", "assert select_words('v', 4) == []", "assert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "assert select_words('afrrguc', 5) == ['afrrguc']", "assert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "assert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "assert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "assert select_words('nh vu lcakrb', 1) == ['vu']", "assert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "assert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "assert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "assert select_words('MjRnAErHPguQC', 1) == []", "assert select_words('tmchxmttrgfdanq', 3) == []", "assert select_words('jezkeorvxnruwhhwzxm', 7) == []", "assert select_words('caurfxlpkygqxoknil', 4) == []", "assert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "assert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "assert select_words('NSjIbZV', 2) == []", "assert select_words('rPKhzIot', 6) == ['rPKhzIot']", "assert select_words('ASDVzOVVDEdj J', 1) == ['J']", "assert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "assert select_words(' siweqafqot', 5) == []", "assert select_words('xdQgsAHI', 5) == []", "assert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "assert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "assert select_words('hguHoJGaaNwX', 3) == []", "assert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "assert select_words('choounwx', 5) == ['choounwx']", "assert select_words('yue', 2) == []", "assert select_words('DDdrgPy', 4) == []", "assert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "assert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "assert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "assert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "assert select_words('Reg MuZcF', 4) == ['MuZcF']", "assert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "assert select_words('sl', 6) == []", "assert select_words('IFKqNq ', 5) == ['IFKqNq']", "assert select_words('lfspeijyudniowk', 1) == []", "assert select_words('kogmgdnk', 7) == ['kogmgdnk']", "assert select_words('nnchatjackywoavfwfps', 5) == []", "assert select_words('d', 2) == []", "assert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "assert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "assert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "assert select_words('jopfxbbvlslmluypcdt', 3) == []", "assert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "assert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "assert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "assert select_words('etdrxwybqi', 1) == []", "assert select_words('aVCSziOkLCLGizHcmC', 2) == []", "assert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "assert select_words('txXxge', 4) == []", "assert select_words('kcpieuVjAOaxdpB', 4) == []", "assert select_words('oh', 8) == []", "assert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "assert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "assert select_words('eywh qxreeexrrhyovpwl', 7) == []", "assert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "assert select_words('asfwxvbzdfsrymc', 3) == []", "assert select_words('nBmjWxiPV', 3) == []", "assert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "nl": "Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    ", "func": "def select_words(s, n):", "examples": "Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    ", "completions": ["from typing import List\n## main.py\n\nfrom typing import List\nimport re\n\ndef count_consonants(word: str) -> int:\n    \"\"\"\n    Helper function to count the number of consonants in a word.\n    \n    Args:\n        word (str): The word to count consonants in.\n        \n    Returns:\n        int: The number of consonants in the word.\n    \"\"\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    return len([char for char in word.lower() if char in consonants])\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants they contain.\n    \n    Args:\n        s (str): The input string.\n        n (int): The exact number of consonants the words should contain.\n        \n    Returns:\n        List[str]: A list of words that contain exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    words = re.findall(r'\\b\\w+\\b', s)\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants they contain.\n\n    Args:\n        s (str): The input string.\n        n (int): The exact number of consonants a word must contain.\n\n    Returns:\n        List[str]: A list of words that contain exactly `n` consonants.\n    \"\"\"\n    if not s:\n        return []\n\n    def count_consonants(word: str) -> int:\n        \"\"\"\n        Counts the number of consonants in a word.\n\n        Args:\n            word (str): The word to count consonants in.\n\n        Returns:\n            int: The number of consonants in the word.\n        \"\"\"\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef count_consonants(word: str) -> int:\n    \"\"\"\n    Helper function to count the number of consonants in a word.\n    \n    Args:\n        word (str): The word to count consonants in.\n        \n    Returns:\n        int: The number of consonants in the word.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return sum(1 for char in word if char.isalpha() and char not in vowels)\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants the words must have.\n        \n    Returns:\n        List[str]: A list of words that have exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport re\n\ndef count_consonants(word: str) -> int:\n    \"\"\"\n    Count the number of consonants in a word.\n    \n    Args:\n        word (str): The word to count consonants in.\n        \n    Returns:\n        int: The number of consonants in the word.\n    \"\"\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    return sum(1 for char in word.lower() if char in consonants)\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants they contain.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants the words should contain.\n        \n    Returns:\n        List[str]: A list of words containing exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    words = re.findall(r'\\b\\w+\\b', s)\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    \n    return filtered_words\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef count_consonants(word: str) -> int:\n    \"\"\"Helper function to count the number of consonants in a word.\"\"\"\n    vowels = \"aeiouAEIOU\"\n    return sum(1 for char in word if char.isalpha() and char not in vowels)\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Function to select words with exactly n consonants from a given string.\"\"\"\n    if not s:\n        return []\n    \n    words = s.split()\n    result = []\n    \n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n    \n    return result\n", "from typing import List\nfrom typing import List\nimport re\n\ndef count_consonants(word: str) -> int:\n    \"\"\"\n    Count the number of consonants in a word.\n    \n    Args:\n        word (str): The word to count consonants in.\n        \n    Returns:\n        int: The number of consonants in the word.\n    \"\"\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    return sum(1 for char in word.lower() if char in consonants)\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants they contain.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants a word must contain.\n        \n    Returns:\n        List[str]: A list of words that contain exactly `n` consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    words = re.findall(r'\\b\\w+\\b', s)\n    result = []\n    \n    for word in words:\n        consonant_count = count_consonants(word)\n        if consonant_count == n:\n            result.append(word)\n    \n    return result\n", "from typing import List\nfrom typing import List\n\ndef count_consonants(word: str) -> int:\n    \"\"\"\n    Helper function to count the number of consonants in a word.\n    Consonants are all alphabetic characters that are not vowels.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return sum(1 for char in word if char.isalpha() and char not in vowels)\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants the words must contain.\n    \n    Returns:\n        List[str]: A list of words that contain exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    words = s.split()\n    result = []\n    \n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n    \n    return result\n", "from typing import List\nfrom typing import List\nimport re\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    \n    def count_consonants(word: str) -> int:\n        word = word.lower()\n        consonants = re.findall(r'[bcdfghjklmnpqrstvwxyz]', word)\n        return len(consonants)\n    \n    words = s.split()\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    return filtered_words\n", "from typing import List\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    \n    def count_consonants(word: str) -> int:\n        vowels = \"aeiou\"\n        return sum(1 for char in word.lower() if char.isalpha() and char not in vowels)\n    \n    words = s.split()\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    \n    return filtered_words\n", "from typing import List\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    \n    def count_consonants(word: str) -> int:\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n    \n    words = s.split()\n    result = []\n    \n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n            break  # Return the first word that matches the criteria\n    \n    return result\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle basic string manipulation and return a list of words that meet the criteria. The input string may contain multiple words separated by spaces, and the function should return an empty list if no words match the specified number of consonants.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function can handle various input strings and edge cases.\n- Develop a user-friendly interface for easy input and output.\n- Optimize the function for efficiency and performance.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string manipulation capabilities and regular expressions. The function will first split the input string into words, then filter these words based on the number of consonants they contain. We will use a helper function to count the consonants in each word. The function will be designed to handle edge cases such as empty strings and strings with no words that match the criteria.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants, no more, no less\n\n# [phrase showing quantity relationship]\n    'exactly': means that the word must have a specific number of consonants, not more or less\n\n# [degree adverb] \n    No degree adverb specifically mentioned, but the requirement emphasizes the exact count of consonants\n\n# [code logic]\n    To implement the function, we will follow these steps:\n    1. Split the input string into words.\n    2. Define a helper function to count the consonants in a word.\n    3. Filter the words based on the number of consonants they contain.\n    4. Return the filtered list of words.\n\n# [edge case] \n    select_words(\"\", 4) = []\n    Explanation: The string is empty, so there are no words to consider. The expected output is an empty list.\n    select_words(\"Hello world\", 4) = [\"world\"]\n    Explanation: The word \"world\" contains exactly 4 consonants (w, r, l, d). Other words do not meet the criteria.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case of an empty string. The function will naturally return an empty list.\n\n# [code logic]\n    Here's a detailed implementation of the function:\n\n    ```python\n    import re\n\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return len([char for char in word.lower() if char in consonants])\n\n    def select_words(s, n):\n        if not s:\n            return []\n        \n        words = re.findall(r'\\b\\w+\\b', s)\n        result = [word for word in words if count_consonants(word) == n]\n        return result\n    ```\n\n    This code uses regular expressions to split the string into words and then filters them based on the number of consonants they contain. The `count_consonants` helper function counts the consonants in a word by checking each character against a string of consonants.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle strings with spaces and ensure that the input is only letters and spaces. The function should return an empty list if the input string is empty. The function should be efficient and handle various input sizes.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function can handle strings with spaces and only letters.\n- Return an empty list if the input string is empty.\n- Optimize the function for efficiency and handling various input sizes.\n- Develop a user-friendly interface for easy input and output.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string manipulation capabilities and regular expressions. The function will first split the input string into words, then filter these words based on the number of consonants they contain. We will use a helper function to count the consonants in each word. The function will be optimized to handle various input sizes efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants, no more, no less\n\n# [phrase showing quantity relationship]\n    'exactly': means that the word must have a specific number of consonants, not more or less\n\n# [degree adverb] \n    No degree adverb specifically mentioned, but the requirement emphasizes the exact count of consonants\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Split the input string into words.\n    - Define a function to count the consonants in a word.\n    - Filter words based on the number of consonants they contain.\n    - Return the list of words that meet the criteria.\n\n# [edge case] \n    select_words(\"\", 4) = []\n    explanation: The string is empty, so there are no words to consider. The expected output is an empty list.\n    select_words(\"Hello world\", 0) = [\"Hello\", \"world\"]\n    explanation: Words with exactly 0 consonants are \"Hello\" and \"world\" as they contain no consonants.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will correctly return an empty list when the input string is empty.\n\n# [code logic]\n    - Split the input string `s` into words using `split()`.\n    - Define a helper function `count_consonants(word)` to count the consonants in a word.\n    - Use a list comprehension to filter words with exactly `n` consonants.\n    - Return the filtered list.\n\n# [edge case] \n    select_words(\"Mary had a little lamb\", 4) = [\"little\"]\n    Explanation: The word \"little\" is the only word with exactly 4 consonants in the given string.\n    select_words(\"Mary had a little lamb\", 3) = [\"Mary\", \"lamb\"]\n    Explanation: Both \"Mary\" and \"lamb\" have exactly 3 consonants in the given string.\n    select_words(\"simple white space\", 2) = []\n    Explanation: No word in the string has exactly 2 consonants.\n    select_words(\"Hello world\", 4) = [\"world\"]\n    Explanation: The word \"world\" is the only word with exactly 4 consonants in the given string.\n    select_words(\"Uncle sam\", 3) = [\"Uncle\"]\n    Explanation: The word \"Uncle\" is the only word with exactly 3 consonants in the given string.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle strings with spaces and return words in the order they appear. The input string contains only letters and spaces, which simplifies the task of identifying words.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function can handle empty strings and return an empty list.\n- Maintain the order of words as they appear in the input string.\n- Optimize the function for efficiency and scalability.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string manipulation methods and a simple list comprehension. We will define a helper function to count consonants in a word. The main function will split the input string into words, filter those that have the specified number of consonants, and return them in the order they appear.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants, no more, no less\n\n# [phrase showing quantity relationship]\n    'exactly n consonants': means that the word must have a specific number of consonants, and no more, no less\n\n# [degree adverb] \n    No degree adverb specifically mentioned, but the requirement emphasizes the exact count of consonants.\n\n# [code logic]\n    (1) Define a function to count consonants in a word.\n    (2) Split the input string into words.\n    (3) Filter words that have exactly n consonants.\n    (4) Return the filtered list of words.\n\n# [edge case] \n    select_words(\"\", 4) = []\n    Explanation: The input string is empty, so there are no words to consider, and the function should return an empty list.\n    select_words(\"Hello world\", 0) = [\"Hello\", \"world\"]\n    Explanation: Both \"Hello\" and \"world\" have 0 consonants, so they should be included in the output list.\n\n# [extra code for edge case]\n    We do not need extra code to handle this edge case since the function already correctly returns an empty list for an empty input string.\n\n# [code logic]\n(1) Define a helper function to count consonants:\n    ```python\n    def count_consonants(word):\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n    ```\n(2) Split the input string into words:\n    ```python\n    words = s.split()\n    ```\n(3) Filter words that have exactly n consonants:\n    ```python\n    result = [word for word in words if count_consonants(word) == n]\n    ```\n(4) Return the filtered list of words:\n    ```python\n    return result\n    ```\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle strings with spaces and return a list of words that meet the specified criteria. The input string may be empty, in which case the function should return an empty list.\nrequirement pool:\n- Implement the function to filter words based on consonant count.\n- Ensure the function handles empty strings gracefully.\n- Develop a user-friendly interface for input and output.\n- Optimize the function for efficiency and performance.\nTo implement the function that filters words based on the number of consonants they contain, we will use Python's built-in string manipulation capabilities and regular expressions for efficient word extraction and filtering. The function will first split the input string into words, then filter these words based on the specified number of consonants. The use of regular expressions will help in accurately counting consonants and ensuring the function is robust against various input scenarios.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants, no more no less\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Split the input string into words.\n    (2) Define a function to count the number of consonants in a word.\n    (3) Filter words based on the number of consonants they contain.\n    (4) Return the list of words that meet the criteria.\n\n# [edge case] \n    select_words('', 3) = []\n    explanation: The input string is empty, so there are no words to consider. The expected output is an empty list.\n    select_words('hello world', 3) = []\n    explanation: There are no words with exactly 3 consonants in the given string. The expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will return an empty list when the input string is empty.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be able to handle various inputs, including empty strings, and return results efficiently. The function should be user-friendly and easy to understand.\nrequirement pool:\n- The main code should accurately filter words based on the number of consonants.\n- The function should handle different types of input gracefully.\n- The function should be efficient and return results quickly.\n- The function should have a user-friendly interface.\n- The function should be easy to understand and maintain.\nTo implement the function, we will use Python's built-in string manipulation capabilities and a simple approach to count consonants. We will define a helper function to check the number of consonants in a word and then filter the words based on this count. The function will be designed to be user-friendly and efficient.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants, no more, no less\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Define a helper function to count consonants in a word.\n    (2) Iterate through each word in the string.\n    (3) Use the helper function to check if the word has exactly n consonants.\n    (4) Collect and return the words that meet the criteria.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The string is empty, so there are no words to select.\n    select_words(\"hello world\", 3) = []\n    Explanation: There are no words with exactly 3 consonants in the given string.\n    select_words(\"the quick brown fox jumps over the lazy dog\", 5) = [\"quick\"]\n    Explanation: \"quick\" is the only word with exactly 5 consonants in the given string.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function can simply return an empty list if the input string is empty.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. This is a specific and clear requirement that directly addresses a common need in text analysis and language processing. The function should handle basic text inputs and return results in a list, maintaining the order of appearance of the words in the input string.\nrequirement pool:\n- Implement the function to count consonants in each word and filter based on the specified number.\n- Ensure the function can handle various text inputs, including spaces and different sentence structures.\n- Design the function to return results in the order the words appear in the input string.\n- Include error handling for empty input strings to avoid crashes.\n- Optimize the function for performance, especially for longer texts.\nTo implement the function `select_words(s, n)` that filters words based on the number of consonants they contain, we will use Python's built-in string manipulation capabilities and regular expressions for efficient word extraction and consonant counting. The function will iterate through the words in the input string, count the consonants in each word, and filter those that match the specified number `n`. The results will be returned in the order they appear in the input string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants, no more no less\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Split the input string into words.\n    (2) Define a function to count the consonants in a word.\n    (3) Iterate through each word, count its consonants, and check if it matches the specified number `n`.\n    (4) Collect and return the words that match the criteria.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    explanation: The input string is empty, so there are no words to process, and the function should return an empty list.\n    select_words(\"hello world\", 3) = [\"hello\"]\n    explanation: The word \"hello\" contains exactly 3 consonants (h, l, l), while \"world\" contains only 2 consonants. Therefore, only \"hello\" is included in the result.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will correctly return an empty list when the input string is empty.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. This involves parsing the input string to extract words, then checking each word for the specified number of consonants. The function should handle edge cases like empty strings and spaces.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function can handle various input cases, including empty strings.\n- Develop a user-friendly interface for easy input and output.\n- Test the function with different inputs to ensure accuracy and efficiency.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string manipulation methods and a simple approach to count consonants. We will define a helper function to check the number of consonants in a word and then use this function to filter the words in the input string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants, no more no less\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function, we will follow these steps:\n    1. Define a helper function to count the number of consonants in a word.\n    2. Split the input string into words.\n    3. Filter the words that have exactly n consonants.\n    4. Return the filtered list of words.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to filter. The expected output is an empty list.\n    select_words(\"Mary had a little lamb\", 4) = [\"little\"]\n    Explanation: The word \"little\" is the only word in the string that contains exactly 4 consonants (l, t, t, l).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic can handle the case where the input string is empty by returning an empty list.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle strings with spaces and return a list of words that meet the specified condition. The input string may be empty, in which case the function should return an empty list. The function should be efficient and easy to use.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function handles empty strings gracefully.\n- Develop a user-friendly interface for easy interaction.\n- Optimize the function for efficiency and performance.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string manipulation capabilities and regular expressions for efficient filtering. The function will first split the input string into words, then filter these words based on the specified number of consonants. The use of regular expressions will help in identifying consonants efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants, no more no less\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Split the input string into words.\n    (2) Define a function to count the number of consonants in a word.\n    (3) Filter words based on the number of consonants.\n    (4) Return the list of words that meet the criteria.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    explanation: The input string is empty, so there are no words to consider. The expected output is an empty list.\n    select_words(\"Mary had a little lamb\", 0) = [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n    explanation: All words contain 0 consonants, so all words are included in the output.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic can handle an empty string by returning an empty list.\n\n# [code logic]\n    (1) Split the input string into words using the split() method.\n    (2) Define a helper function to count consonants:\n        - Convert the word to lowercase.\n        - Use a regular expression to count consonants.\n    (3) Filter the words using a list comprehension:\n        - Check if the word's consonant count matches the specified number.\n    (4) Return the filtered list of words.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be able to handle various input strings and return the words in the order they appear in the input string. The function should also handle edge cases such as empty strings.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function can handle various input strings and return words in order.\n- Develop a user-friendly interface for easy interaction.\n- Test the function for efficiency and accuracy.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string manipulation capabilities and regular expressions. The function will first split the input string into words, then filter these words based on the specified number of consonants. The function will return the filtered words in the order they appear in the input string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants, no more no less\n\n# [phrase showing quantity relationship]\n    'exactly n consonants': means the word must have a specific count of consonants\n\n# [degree adverb] \n    No degree adverb specifically mentioned\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Split the input string into words.\n    - Define a function to count the consonants in a word.\n    - Filter words based on the number of consonants.\n    - Return the filtered list of words.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    explanation: The input string is empty, so there are no words to filter. The expected output is an empty list.\n    select_words(\"Mary had a little lamb\", 0) = [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n    explanation: If n is 0, the function should return all words since the condition is trivially satisfied. The expected output includes all words in the input string.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic can handle the case where the input string is empty by returning an empty list.\n\n# [code logic]\n    - Split the input string into words using the split() method.\n    - Define a helper function to count consonants:\n        - Convert the word to lowercase.\n        - Count the consonants by iterating through the word and checking if each character is a consonant.\n    - Filter the words using a list comprehension:\n        - Check if the word's consonant count matches the specified number n.\n    - Return the filtered list of words.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle strings with spaces and ensure that the order of words is preserved. The input string contains only letters and spaces, making the parsing of words straightforward. The function should return an empty list if the input string is empty.\nrequirement pool:\n- Implement the function to count consonants in each word and filter based on the specified number.\n- Ensure the function handles edge cases, such as empty strings and strings with no matching words.\n- Develop a user-friendly interface for easy input and output.\n- Test the function with various inputs to ensure accuracy and efficiency.\nTo implement the function, we will use Python's built-in string manipulation methods and a simple approach to count consonants in each word. We will split the input string into words, then filter these words based on the number of consonants they contain. The function will return an empty list if the input string is empty.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n number of consonants\n\n# [phrase showing quantity relationship]\n    'exactly n consonants': means that we need to count the consonants in each word and check if they match the given number n\n\n# [degree adverb] \n    No degree adverb specifically mentioned, but the requirement emphasizes the exact count of consonants.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Split the input string into words.\n    - Define a function to count consonants in a word.\n    - Filter words based on the number of consonants they contain.\n    - Return the list of words that meet the criteria.\n\n# [edge case] \n    select_words(\"\", 4) = []\n    Explanation: The input string is empty, so the function should return an empty list.\n    select_words(\"Hello world\", 4) = [\"world\"]\n    Explanation: The word \"world\" contains 3 consonants, but the function should return the first word that matches the criteria.\n    select_words(\"Mary had a little lamb\", 4) = [\"little\"]\n    Explanation: The word \"little\" contains exactly 4 consonants, so it is the only word that matches the criteria.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic can handle the case where the input string is empty by returning an empty list.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9774], "pass_results": [true, true, true, true, true, true, true, true, true, false], "pass_test_cases_num": [133, 133, 133, 133, 133, 133, 133, 133, 133, 130], "completion": "from typing import List\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    \n    def count_consonants(word: str) -> int:\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n    \n    words = s.split()\n    result = []\n    \n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n            break  # Return the first word that matches the criteria\n    \n    return result\n", "passed": true, "pass": true, "pass_num": 9, "round": 256, "repair_prompt": ["def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement a function. This function should return a list of all words from string s that contain exactly n consonants, in order these words appear in the string s. If the string s is empty then the function should return an empty list. Note: you may assume the input string contains only letters and spaces.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", " def select_words(s, n):\t\n    '''Given a string s and a natural number n, you have been tasked to implement a function. This function should return a list of all words from string s that contain exactly n consonants, in order these words appear in the string s. If the string s is empty then the function should return an empty list. Note: you may assume the input string contains only letters and spaces.\n    Examples:\n        select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n        select_words(\"Mary had a little lamb\", 3) ==>", " def select_words(s, n):\n    '''Given a string s and a natural number n, you have been tasked to implement a function. This function should return a list of all words from string s that contain exactly n consonants, in order these words appear in the string s. If the string s is empty then the function should return an empty list. Note: you may assume the input string contains only letters and spaces.\n    Examples:\n        select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n        select_words(\"Mary had a little lamb\", 3) ==> [\""], "mutate_method": "expand_one2two", "parent_index": 279}
