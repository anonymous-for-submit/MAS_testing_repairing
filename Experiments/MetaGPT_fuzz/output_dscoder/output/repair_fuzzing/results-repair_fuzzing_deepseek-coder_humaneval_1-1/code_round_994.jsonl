{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\nEnsure that the function handles negative integers appropriately.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "entry_point": "any_int", "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n", "test": ["def check(any_int):\n\tassert any_int(8, 19, 11) == True", "def check(any_int):\n\tassert any_int(7.307, 7.071, 5.088) == False", "def check(any_int):\n\tassert any_int(6, 12, 6) == True", "def check(any_int):\n\tassert any_int(6.511, 2, 3) == False", "def check(any_int):\n\tassert any_int(12, 6, 6) == True", "def check(any_int):\n\tassert any_int(2, 2, 4) == True", "def check(any_int):\n\tassert any_int(5.114, 5, 4) == False", "def check(any_int):\n\tassert any_int(3.376, 6.953, 2.111) == False", "def check(any_int):\n\tassert any_int(2, 3, 1)==True", "def check(any_int):\n\tassert any_int(2, 5, 4) == False", "def check(any_int):\n\tassert any_int(7.194, 1.302, 7.462) == False", "def check(any_int):\n\tassert any_int(1, 7, 8) == True", "def check(any_int):\n\tassert any_int(5, 8, 3) == True", "def check(any_int):\n\tassert any_int(2.389, 9, 10) == False", "def check(any_int):\n\tassert any_int(-1, 0, 1) == True", "def check(any_int):\n\tassert any_int(9, 6, 3) == True", "def check(any_int):\n\tassert any_int(4.38, 6, 1) == False", "def check(any_int):\n\tassert any_int(3.785, 6.308, 7.367) == False", "def check(any_int):\n\tassert any_int(6, 10, 4) == True", "def check(any_int):\n\tassert any_int(1.705, 2, 6.616) == False", "def check(any_int):\n\tassert any_int(6, 4, 2) == True", "def check(any_int):\n\tassert any_int(4, 2, 2)==True", "def check(any_int):\n\tassert any_int(3.692, 2, 7.2) == False", "def check(any_int):\n\tassert any_int(2.5, 2, 3)==False", "def check(any_int):\n\tassert any_int(5, 6, 1) == True", "def check(any_int):\n\tassert any_int(1, 3, 2) == True", "def check(any_int):\n\tassert any_int(3,4,7)==True", "def check(any_int):\n\tassert any_int(6, 10, 1) == False", "def check(any_int):\n\tassert any_int(6, 2, 4) == True", "def check(any_int):\n\tassert any_int(6.155, 2.926, 1.672) == False", "def check(any_int):\n\tassert any_int(5, 2, 3) == True", "def check(any_int):\n\tassert any_int(7.829, 2, 9) == False", "def check(any_int):\n\tassert any_int(4, 6, 3) == False", "def check(any_int):\n\tassert any_int(2.583, 3.749, 4.738) == False", "def check(any_int):\n\tassert any_int(12, 11, 1) == True", "def check(any_int):\n\tassert any_int(3.211, 4, 3) == False", "def check(any_int):\n\tassert any_int(1, 1, 7) == False", "def check(any_int):\n\tassert any_int(0, 3, 3) == True", "def check(any_int):\n\tassert any_int(1.157, 8, 2) == False", "def check(any_int):\n\tassert any_int(3, 3, 6) == True", "def check(any_int):\n\tassert any_int(4.272, 6.612, 6.663) == False", "def check(any_int):\n\tassert any_int(1, 1, 2) == True", "def check(any_int):\n\tassert any_int(2.2, 2.2, 2.2)==False", "def check(any_int):\n\tassert any_int(3.158, 8, 6.135) == False", "def check(any_int):\n\tassert any_int(1.346, 5, 6) == False", "def check(any_int):\n\tassert any_int(15, 9, 6) == True", "def check(any_int):\n\tassert any_int(1, 4, 5) == True", "def check(any_int):\n\tassert any_int(7.656, 1, 7) == False", "def check(any_int):\n\tassert any_int(3.599, 5, 1) == False", "def check(any_int):\n\tassert any_int(3, 1, 2) == True", "def check(any_int):\n\tassert any_int(-3, 2, 5) == True", "def check(any_int):\n\tassert any_int(4, 11, 5) == False", "def check(any_int):\n\tassert any_int(10, 7, 3) == True", "def check(any_int):\n\tassert any_int(7, 3, 10) == True", "def check(any_int):\n\tassert any_int(3, 4, 1) == True", "def check(any_int):\n\tassert any_int(3.103, 3, 10) == False", "def check(any_int):\n\tassert any_int(6, 16, 10) == True", "def check(any_int):\n\tassert any_int(1.812, 6.567, 7.145) == False", "def check(any_int):\n\tassert any_int(6, 6, 12) == True", "def check(any_int):\n\tassert any_int(1, 7, 2) == False", "def check(any_int):\n\tassert any_int(7, 6, 1) == True", "def check(any_int):\n\tassert any_int(4, 3, 7) == True", "def check(any_int):\n\tassert any_int(4, 6, 2) == True", "def check(any_int):\n\tassert any_int(2.007, 9, 7.198) == False", "def check(any_int):\n\tassert any_int(2, 3, 5) == True", "def check(any_int):\n\tassert any_int(6.086, 4, 4) == False", "def check(any_int):\n\tassert any_int(3.754, 6, 5.044) == False", "def check(any_int):\n\tassert any_int(8, 10, 2) == True", "def check(any_int):\n\tassert any_int(7.73, 5.041, 6.418) == False", "def check(any_int):\n\tassert any_int(2, 6, 2)==False", "def check(any_int):\n\tassert any_int(3.683, 8, 1.193) == False", "def check(any_int):\n\tassert any_int(-4, 6, 2)==True", "def check(any_int):\n\tassert any_int(7, 13, 6) == True", "def check(any_int):\n\tassert any_int(2.003, 3, 11) == False", "def check(any_int):\n\tassert any_int(3.357, 7, 8.074) == False", "def check(any_int):\n\tassert any_int(3.621, 6.679, 2.542) == False", "def check(any_int):\n\tassert any_int(12, 3, 9) == True", "def check(any_int):\n\tassert any_int(7.797, 7, 4) == False", "def check(any_int):\n\tassert any_int(7, 1, 8) == True", "def check(any_int):\n\tassert any_int(5, 3, 8) == True", "def check(any_int):\n\tassert any_int(5, 7, 2) == True", "def check(any_int):\n\tassert any_int(5, 6, 11) == True", "def check(any_int):\n\tassert any_int(6.681, 8, 4.747) == False", "def check(any_int):\n\tassert any_int(3, 2, 5) == True", "def check(any_int):\n\tassert any_int(3.0,4,7)==False", "def check(any_int):\n\tassert any_int(9, 1, 10) == True", "def check(any_int):\n\tassert any_int(1.5, 5, 3.5)==False", "def check(any_int):\n\tassert any_int(2.834, 7, 9) == False", "def check(any_int):\n\tassert any_int(2, 6, 4) == True", "def check(any_int):\n\tassert any_int(6.068, 1, 3.454) == False", "def check(any_int):\n\tassert any_int(1.834, 7.255, 6.304) == False", "def check(any_int):\n\tassert any_int(1.726, 3, 1) == False", "def check(any_int):\n\tassert any_int(13, 7, 6) == True", "def check(any_int):\n\tassert any_int(6.9, 4, 12) == False", "def check(any_int):\n\tassert any_int(4.039, 5, 5.992) == False", "def check(any_int):\n\tassert any_int(4, 5, 9) == True", "def check(any_int):\n\tassert any_int(6, 2, 7) == False", "def check(any_int):\n\tassert any_int(3, 10, 7) == True", "def check(any_int):\n\tassert any_int(5.586, 1, 2) == False", "def check(any_int):\n\tassert any_int(12, 8, 4) == True", "def check(any_int):\n\tassert any_int(2.459, 5, 11) == False", "def check(any_int):\n\tassert any_int(0, 2, 2) == True", "def check(any_int):\n\tassert any_int(6.175, 9, 4) == False", "def check(any_int):\n\tassert any_int(12, 5, 7) == True", "def check(any_int):\n\tassert any_int(8.854, 2, 8) == False", "def check(any_int):\n\tassert any_int(2.858, 1, 2) == False", "def check(any_int):\n\tassert any_int(4, 3, 1) == True", "def check(any_int):\n\tassert any_int(4, 11, 1) == False", "def check(any_int):\n\tassert any_int(5, 5, 10) == True", "def check(any_int):\n\tassert any_int(10, 5, 5) == True", "def check(any_int):\n\tassert any_int(3.228, 6, 6) == False", "def check(any_int):\n\tassert any_int(2.805, 3, 6.418) == False", "def check(any_int):\n\tassert any_int(2, 1, 1) == True", "def check(any_int):\n\tassert any_int(6, 3, 3) == True", "def check(any_int):\n\tassert any_int(7, 5, 12) == True", "def check(any_int):\n\tassert any_int(-4, 11, 7) == True", "def check(any_int):\n\tassert any_int(2,1,1)==True", "def check(any_int):\n\tassert any_int(7, 2, 9) == True", "def check(any_int):\n\tassert any_int(3.445, 2, 2) == False", "def check(any_int):\n\tassert any_int(2, 7, 5) == True", "def check(any_int):\n\tassert any_int(6.254, 6, 7) == False", "def check(any_int):\n\tassert any_int(3.685, 2, 6) == False", "def check(any_int):\n\tassert any_int(5, 9, 5) == False", "def check(any_int):\n\tassert any_int(5.408, 8, 3.454) == False", "def check(any_int):\n\tassert any_int(-7, 5, -2) == True", "def check(any_int):\n\tassert any_int(4, 8, 4) == True", "def check(any_int):\n\tassert any_int(12, 7, 5) == True", "def check(any_int):\n\tassert any_int(4, 7, 3) == True", "def check(any_int):\n\tassert any_int(6.61, 1.687, 2.647) == False", "def check(any_int):\n\tassert any_int(3.033, 6.554, 7.391) == False", "def check(any_int):\n\tassert any_int(2.08, 7, 1.239) == False"], "test_case_list": ["assert any_int(8, 19, 11) == True", "assert any_int(7.307, 7.071, 5.088) == False", "assert any_int(6, 12, 6) == True", "assert any_int(6.511, 2, 3) == False", "assert any_int(12, 6, 6) == True", "assert any_int(2, 2, 4) == True", "assert any_int(5.114, 5, 4) == False", "assert any_int(3.376, 6.953, 2.111) == False", "assert any_int(2, 3, 1)==True", "assert any_int(2, 5, 4) == False", "assert any_int(7.194, 1.302, 7.462) == False", "assert any_int(1, 7, 8) == True", "assert any_int(5, 8, 3) == True", "assert any_int(2.389, 9, 10) == False", "assert any_int(-1, 0, 1) == True", "assert any_int(9, 6, 3) == True", "assert any_int(4.38, 6, 1) == False", "assert any_int(3.785, 6.308, 7.367) == False", "assert any_int(6, 10, 4) == True", "assert any_int(1.705, 2, 6.616) == False", "assert any_int(6, 4, 2) == True", "assert any_int(4, 2, 2)==True", "assert any_int(3.692, 2, 7.2) == False", "assert any_int(2.5, 2, 3)==False", "assert any_int(5, 6, 1) == True", "assert any_int(1, 3, 2) == True", "assert any_int(3,4,7)==True", "assert any_int(6, 10, 1) == False", "assert any_int(6, 2, 4) == True", "assert any_int(6.155, 2.926, 1.672) == False", "assert any_int(5, 2, 3) == True", "assert any_int(7.829, 2, 9) == False", "assert any_int(4, 6, 3) == False", "assert any_int(2.583, 3.749, 4.738) == False", "assert any_int(12, 11, 1) == True", "assert any_int(3.211, 4, 3) == False", "assert any_int(1, 1, 7) == False", "assert any_int(0, 3, 3) == True", "assert any_int(1.157, 8, 2) == False", "assert any_int(3, 3, 6) == True", "assert any_int(4.272, 6.612, 6.663) == False", "assert any_int(1, 1, 2) == True", "assert any_int(2.2, 2.2, 2.2)==False", "assert any_int(3.158, 8, 6.135) == False", "assert any_int(1.346, 5, 6) == False", "assert any_int(15, 9, 6) == True", "assert any_int(1, 4, 5) == True", "assert any_int(7.656, 1, 7) == False", "assert any_int(3.599, 5, 1) == False", "assert any_int(3, 1, 2) == True", "assert any_int(-3, 2, 5) == True", "assert any_int(4, 11, 5) == False", "assert any_int(10, 7, 3) == True", "assert any_int(7, 3, 10) == True", "assert any_int(3, 4, 1) == True", "assert any_int(3.103, 3, 10) == False", "assert any_int(6, 16, 10) == True", "assert any_int(1.812, 6.567, 7.145) == False", "assert any_int(6, 6, 12) == True", "assert any_int(1, 7, 2) == False", "assert any_int(7, 6, 1) == True", "assert any_int(4, 3, 7) == True", "assert any_int(4, 6, 2) == True", "assert any_int(2.007, 9, 7.198) == False", "assert any_int(2, 3, 5) == True", "assert any_int(6.086, 4, 4) == False", "assert any_int(3.754, 6, 5.044) == False", "assert any_int(8, 10, 2) == True", "assert any_int(7.73, 5.041, 6.418) == False", "assert any_int(2, 6, 2)==False", "assert any_int(3.683, 8, 1.193) == False", "assert any_int(-4, 6, 2)==True", "assert any_int(7, 13, 6) == True", "assert any_int(2.003, 3, 11) == False", "assert any_int(3.357, 7, 8.074) == False", "assert any_int(3.621, 6.679, 2.542) == False", "assert any_int(12, 3, 9) == True", "assert any_int(7.797, 7, 4) == False", "assert any_int(7, 1, 8) == True", "assert any_int(5, 3, 8) == True", "assert any_int(5, 7, 2) == True", "assert any_int(5, 6, 11) == True", "assert any_int(6.681, 8, 4.747) == False", "assert any_int(3, 2, 5) == True", "assert any_int(3.0,4,7)==False", "assert any_int(9, 1, 10) == True", "assert any_int(1.5, 5, 3.5)==False", "assert any_int(2.834, 7, 9) == False", "assert any_int(2, 6, 4) == True", "assert any_int(6.068, 1, 3.454) == False", "assert any_int(1.834, 7.255, 6.304) == False", "assert any_int(1.726, 3, 1) == False", "assert any_int(13, 7, 6) == True", "assert any_int(6.9, 4, 12) == False", "assert any_int(4.039, 5, 5.992) == False", "assert any_int(4, 5, 9) == True", "assert any_int(6, 2, 7) == False", "assert any_int(3, 10, 7) == True", "assert any_int(5.586, 1, 2) == False", "assert any_int(12, 8, 4) == True", "assert any_int(2.459, 5, 11) == False", "assert any_int(0, 2, 2) == True", "assert any_int(6.175, 9, 4) == False", "assert any_int(12, 5, 7) == True", "assert any_int(8.854, 2, 8) == False", "assert any_int(2.858, 1, 2) == False", "assert any_int(4, 3, 1) == True", "assert any_int(4, 11, 1) == False", "assert any_int(5, 5, 10) == True", "assert any_int(10, 5, 5) == True", "assert any_int(3.228, 6, 6) == False", "assert any_int(2.805, 3, 6.418) == False", "assert any_int(2, 1, 1) == True", "assert any_int(6, 3, 3) == True", "assert any_int(7, 5, 12) == True", "assert any_int(-4, 11, 7) == True", "assert any_int(2,1,1)==True", "assert any_int(7, 2, 9) == True", "assert any_int(3.445, 2, 2) == False", "assert any_int(2, 7, 5) == True", "assert any_int(6.254, 6, 7) == False", "assert any_int(3.685, 2, 6) == False", "assert any_int(5, 9, 5) == False", "assert any_int(5.408, 8, 3.454) == False", "assert any_int(-7, 5, -2) == True", "assert any_int(4, 8, 4) == True", "assert any_int(12, 7, 5) == True", "assert any_int(4, 7, 3) == True", "assert any_int(6.61, 1.687, 2.647) == False", "assert any_int(3.033, 6.554, 7.391) == False", "assert any_int(2.08, 7, 1.239) == False"], "nl": "\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    ", "func": "def any_int(x, y, z):", "examples": "Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    ", "completions": ["from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if any one of the three given numbers is equal to the sum of the other two.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if any one of the numbers is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Ensure all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n\n    # Check if any one of the numbers is equal to the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Checks if any of the three numbers is equal to the sum of the other two and all numbers are integers.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if any number is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        raise ValueError(\"All inputs must be integers.\")\n\n    # Calculate the sums of pairs\n    sum_xy = x + y\n    sum_xz = x + z\n    sum_yz = y + z\n\n    # Check if any number is equal to the sum of the other two\n    return x == sum_xy or x == sum_xz or x == sum_yz or \\\n           y == sum_xy or y == sum_xz or y == sum_yz or \\\n           z == sum_xy or z == sum_xz or z == sum_yz\n\n# Example usage:\n# print(any_int(5, 2, 7))  # \u279e True\n# print(any_int(3, 2, 2))  # \u279e False\n# print(any_int(3, -2, 1))  # \u279e True\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if any one of the three numbers is equal to the sum of the other two.\n\n    Args:\n        x (int): The first number.\n        y (int): The second number.\n        z (int): The third number.\n\n    Returns:\n        bool: True if any one of the numbers is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n\n    # Calculate the sum of any two numbers\n    sum_xy = x + y\n    sum_xz = x + z\n    sum_yz = y + z\n\n    # Check if any one of the numbers is equal to the sum of the other two\n    return x == sum_xy or x == sum_xz or x == sum_yz or y == sum_xy or y == sum_xz or y == sum_yz or z == sum_xy or z == sum_xz or z == sum_yz\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if any one of the three given numbers is equal to the sum of the other two.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if any one of the numbers is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(n, int) for n in [x, y, z]):\n        return False\n\n    # Calculate the sum of any two numbers\n    sums = [x + y, y + z, z + x]\n\n    # Check if any sum is equal to the third number\n    return any(s == x or s == y or s == z for s in sums)\n\n# Example usage:\n# print(any_int(1, -1, 0))  # True\n# print(any_int(0, 0, 0))   # False\n# print(any_int(2**31 - 1, 2**31 - 1, 2**31))  # True\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if any one of the three given numbers is equal to the sum of the other two.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if any one of the numbers is equal to the sum of the other two, otherwise False.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n\n    # Check if any one of the numbers is equal to the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if one of the three given numbers is equal to the sum of the other two.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if one of the numbers is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Verify that all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        raise ValueError(\"All inputs must be integers.\")\n\n    # Check if any one number is equal to the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if any one of the three numbers is equal to the sum of the other two.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if any one of the numbers is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        raise ValueError(\"All inputs must be integers.\")\n\n    # Check if any one of the numbers is equal to the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if one of the given numbers is the sum of the other two.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if one number is the sum of the other two, otherwise False.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        raise ValueError(\"All inputs must be integers.\")\n\n    # Check if one number is the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if any one of the given numbers is equal to the sum of the other two.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if any one of the numbers is equal to the sum of the other two, otherwise False.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n\n    # Check if any one of the numbers is equal to the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if any of the three numbers is equal to the sum of the other two.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if any number is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n\n    # Check if any one of the numbers is equal to the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n"], "plans": ["requirement analysis:\nThe function needs to check if any of the three given numbers is equal to the sum of the other two. It must handle both positive and negative integers. The function should return false if any of the inputs is not an integer. The requirements are clear and straightforward, focusing on the core functionality of checking sums.\nrequirement pool:\n- The function should check if any of the three numbers is equal to the sum of the other two.\n- The function should handle negative integers correctly.\n- The function should return false if any of the inputs is not an integer.\n- The function should be efficient and fast in execution.\n- The function should be easy to understand and use.\nWe will implement the function using Python's built-in capabilities and type checking. The function will first ensure all inputs are integers and then check if any of the three numbers is equal to the sum of the other two. This approach leverages Python's type hints and built-in functions to ensure clarity and simplicity.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers equals a third number'\n    In the requirement, it means that the sum of any two of the three given numbers should be equal to the third number.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Ensure all inputs are integers.\n    - Check if any one of the numbers is equal to the sum of the other two.\n\n# [edge case] \n    any_int(5, 2, 7) \u279e True\n    Explanation: 5 + 2 = 7, so one of the numbers is equal to the sum of the other two.\n    any_int(3, 2, 2) \u279e False\n    Explanation: No number is equal to the sum of the other two.\n    any_int(3, -2, 1) \u279e True\n    Explanation: 3 + (-2) = 1, so one of the numbers is equal to the sum of the other two.\n    any_int(3.6, -2.2, 2) \u279e False\n    Explanation: The inputs are not integers, so the function should return False.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the inputs are not integers.\n        if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n            return False\n        (other code)\n", "requirement analysis:\nThe function needs to check if any of the three numbers is equal to the sum of the other two, and all numbers must be integers. It should also handle negative integers appropriately. The function should return false if any of the numbers is not an integer. The implementation should be clear and efficient.\nrequirement pool:\n- The function should accurately check if any number is the sum of the other two and ensure all numbers are integers.\n- The function should handle negative integers correctly.\n- The function should return false if any number is not an integer.\n- The function should be implemented in a clear and efficient manner.\nTo implement the function `any_int(x, y, z)` that checks if any of the three numbers is equal to the sum of the other two and all numbers are integers, we will use Python's built-in capabilities to ensure type checking and arithmetic operations. The function will first verify that all inputs are integers and then check if any one of the numbers matches the sum of the other two.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers': means the result of adding two of the numbers together\n    'integer': means the numbers are whole numbers without any decimal parts\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Ensure all inputs are integers using `isinstance(num, int)`\n    - Check if any one of the numbers is equal to the sum of the other two\n\n# [edge case] \n    any_int(5, 2, 7) \u279e True\n    Explanation: 7 is equal to 5 + 2, and all numbers are integers.\n    any_int(3, 2, 2) \u279e False\n    Explanation: None of the numbers is equal to the sum of the other two, and all numbers are integers.\n    any_int(3, -2, 1) \u279e True\n    Explanation: 3 is equal to -2 + 1, and all numbers are integers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function already checks for all necessary conditions.\n", "requirement analysis:\nThe function should take three numbers as input and check if any one of them is equal to the sum of the other two. It should return true if the condition is met and all numbers are integers. It should return false otherwise. The function should handle negative integers appropriately. The examples provided illustrate the expected behavior of the function.\nrequirement pool:\n- The function should take three numbers as input.\n- The function should return true if one of the numbers is equal to the sum of the other two and all numbers are integers.\n- The function should return false if any of the numbers is not an integer or if the condition is not met.\n- The function should handle negative integers appropriately.\n- The function should be easy to understand and use.\nWe will implement the function using Python, leveraging basic arithmetic operations and type checking to ensure all inputs are integers. The function will check if any one of the three numbers is equal to the sum of the other two, and return the appropriate boolean value based on this condition.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers equals a third number'\n    This means that for any three numbers, one of them should be equal to the sum of the other two.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Check if all inputs are integers using the `isinstance` function.\n    (2) Calculate the sum of any two numbers.\n    (3) Check if any one of the numbers is equal to this sum.\n    (4) Return `True` if the condition is met, otherwise return `False`.\n\n# [edge case] \n    any_int(5, 2, 7) = True\n    Explanation: 7 is equal to 5 + 2. All numbers are integers.\n    any_int(3, 2, 2) = False\n    Explanation: No number is equal to the sum of the other two.\n    any_int(3, -2, 1) = True\n    Explanation: 3 is equal to -2 + 1. All numbers are integers.\n    any_int(3.6, -2.2, 2) = False\n    Explanation: The function should return `False` because one of the inputs is not an integer.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where one of the inputs is not an integer.\n        if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n            return False\n        (other code)\n", "requirement analysis:\nThe function should take three numbers as input and return True if one of the numbers is equal to the sum of the other two, and all numbers are integers. It should return False otherwise. The function should handle negative integers appropriately. The requirements are clear and straightforward, focusing on the functionality and correctness of the mathematical operation.\nrequirement pool:\n- The main code should accurately determine if one number is the sum of the other two and ensure all numbers are integers.\n- The function should handle negative integers correctly.\n- The function should be efficient and easy to understand.\n- The function should return False if any of the inputs are not integers.\n- The function should include appropriate error handling for unexpected inputs.\nWe will implement the function `any_int` by checking if any one of the three given numbers is equal to the sum of the other two. To ensure all numbers are integers and handle negative integers correctly, we will use type checking and mathematical operations. The function will return `True` if the condition is met, and `False` otherwise.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers equals a third number'\n    In the requirement, it means that the sum of any two of the given numbers should be equal to the third number.\n\n# [phrase showing quantity relationship]\n    No specific phrase showing quantity relationship.\n\n# [degree adverb] \n    No specific degree adverb.\n\n# [code logic]\n    (1) Check if all inputs are integers.\n    (2) Calculate the sum of any two numbers.\n    (3) Check if this sum is equal to the third number.\n    (4) Return `True` if the condition is met, otherwise return `False`.\n\n# [edge case] \n    any_int(0, 0, 0) = False\n    Explanation: All numbers are zero, and zero is not considered positive in this context. The function should return `False` because there is no positive integer that can be the sum of zero and zero.\n    any_int(1, -1, 0) = True\n    Explanation: One of the numbers is zero, and the sum of the other two numbers (1 and -1) is also zero. The function should return `True` because all numbers are integers and the condition is met.\n    any_int(2**31 - 1, 2**31 - 1, 2**31) = True\n    Explanation: The function should return `True` because the sum of the two large integers is equal to the third number, and all numbers are integers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic already checks for the conditions and returns the correct output for all edge cases.\n", "requirement analysis:\nThe requirement is to create a function that checks if one of the three given numbers is equal to the sum of the other two, and all numbers must be integers. The function should handle negative integers appropriately. The examples provided give clear scenarios to test the function.\nrequirement pool:\n- The function should accurately determine if one number is the sum of the other two.\n- The function should handle negative integers correctly.\n- The function should be efficient in its operations.\n- The function should be easy to understand and implement.\n- The function should be tested thoroughly to ensure reliability.\nTo implement the function 'any_int' that checks if one of the three given numbers is equal to the sum of the other two, and all numbers must be integers, we will use Python's built-in capabilities and ensure it handles negative integers correctly. The function will first verify that all inputs are integers and then check if any one of the numbers matches the sum of the other two.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers equals a third number'\n    In the requirement, it means that the sum of any two of the given numbers should be equal to the third number.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Check if all inputs are integers.\n    (2) Check if any one of the numbers is equal to the sum of the other two.\n    (3) Return True if the condition is met, otherwise return False.\n\n# [edge case] \n    any_int(0, 0, 0) = False\n    Explanation: All numbers are zero, and zero is not considered positive in this context.\n    any_int(1, -1, 0) = True\n    Explanation: One of the numbers (1) is equal to the sum of the other two (-1 + 0 = -1).\n    any_int(2.5, 1.5, 4) = False\n    Explanation: The inputs are not integers, so the function should return False.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the inputs are not integers.\n        if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n            return False\n        (other code)\n", "requirement analysis:\nThe requirement is to create a function that checks if one of the three given numbers is equal to the sum of the other two, and all numbers must be integers. The function should handle negative integers appropriately. The examples provided give clear guidance on the expected outputs for specific inputs.\nrequirement pool:\n- The main code should accurately determine if one number is the sum of the other two and ensure all numbers are integers.\n- The function should handle negative integers correctly.\n- The function should be efficient and fast in determining the condition.\n- The function should be easy to understand and implement.\n- The function should be tested thoroughly to ensure reliability.\nWe will use Python's built-in capabilities to create a function that checks if one of the three given numbers is equal to the sum of the other two, ensuring all numbers are integers. The function will first verify that all inputs are integers and then check if any one number meets the condition. This approach leverages Python's type checking and arithmetic operations, ensuring efficiency and clarity.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers equals the third number'\n    In the requirement, it means that the sum of any two of the three given numbers should be equal to the third number.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests creating a function that checks if one of the numbers is equal to the sum of the other two, ensuring all numbers are integers. This can be implemented by:\n    1. Verifying that all inputs are integers.\n    2. Checking if any one number is equal to the sum of the other two.\n\n# [edge case] \n    any_int(5, 2, 7) \u279e True\n    Explanation: 5 + 2 = 7, so one of the numbers is equal to the sum of the other two.\n    any_int(3, 2, 2) \u279e False\n    Explanation: No number is equal to the sum of the other two.\n    any_int(3, -2, 1) \u279e True\n    Explanation: 3 + (-2) = 1, so one of the numbers is equal to the sum of the other two.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The function already checks for integer types and the sum condition, which covers all edge cases.\n", "requirement analysis:\nThe function should take three numbers as input and return True if one of the numbers is equal to the sum of the other two, and all numbers are integers. It should return False otherwise. The function should handle negative integers appropriately. The requirements are clear and straightforward, focusing on the functionality and correctness of the function.\nrequirement pool:\n- The main code should accurately determine if one number is the sum of the other two and ensure all numbers are integers.\n- The function should handle negative integers correctly.\n- The function should be efficient and return results quickly.\n- The function should be easy to understand and maintain.\n- The function should be tested thoroughly to ensure it meets all specified requirements.\nWe will implement the function using Python, leveraging basic arithmetic operations and type checking to ensure all inputs are integers. The function will check if any one of the three numbers is equal to the sum of the other two. We will use a simple and efficient approach to handle the requirements effectively.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers equals a third number'\n    This means that for any three numbers, one of them should be equal to the sum of the other two.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The function should:\n    1. Check if all inputs are integers.\n    2. Check if any one of the numbers is equal to the sum of the other two.\n\n# [edge case] \n    any_int(0, 0, 0) = False\n    Explanation: All numbers are zero, and zero is not considered positive in this context. Therefore, none of the numbers can be equal to the sum of the other two.\n    any_int(1, -1, 0) = True\n    Explanation: One of the numbers (1) is equal to the sum of the other two (-1 + 0 = -1).\n    any_int(2**31 - 1, 2**31 - 1, 2**31 - 2) = True\n    Explanation: The largest 32-bit integer (2**31 - 1) is equal to the sum of the other two (2**31 - 1 + 2**31 - 2 = 2**31 - 1).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic can handle the edge cases by checking if any one of the numbers is equal to the sum of the other two, which naturally covers cases where all numbers are zero or very large integers.\n", "requirement analysis:\nThe function should take three numbers as input and return True if one of the numbers is equal to the sum of the other two, and all numbers are integers. It should return False otherwise. The function should handle negative integers appropriately. The examples provided illustrate the expected behavior of the function.\nrequirement pool:\n- The main code should accurately determine if one number is the sum of the other two and ensure all numbers are integers.\n- The function should handle negative integers correctly.\n- The function should be efficient and return results quickly.\n- The function should be easy to understand and implement.\n- The function should be tested thoroughly to ensure it meets all requirements.\nWe will use a simple and efficient approach to implement the function. The main challenge is to ensure that the function correctly identifies if one number is the sum of the other two and handles negative integers appropriately. We will use Python's built-in type checking to ensure all inputs are integers and use basic arithmetic operations to check the sum condition.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers equals a third number'\n    In the requirement, it means that the sum of any two of the given numbers should be equal to the third number.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Check if all inputs are integers.\n    - Check if one number is equal to the sum of the other two.\n\n# [edge case] \n    any_int(5, 2, 7) \u279e True\n    Explanation: 5 + 2 = 7, so the function should return True.\n    any_int(3, 2, 2) \u279e False\n    Explanation: No number is equal to the sum of the other two, so the function should return False.\n    any_int(3, -2, 1) \u279e True\n    Explanation: 3 + (-2) = 1, so the function should return True.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic already checks for the sum condition and ensures all inputs are integers.\n", "requirement analysis:\nThe requirement is to create a function that takes three numbers and checks if one of them is equal to the sum of the other two, with all numbers being integers. The function should handle negative integers appropriately. This requirement is clear and specific, focusing on the functionality of the function and its ability to process integers correctly.\nrequirement pool:\n- The main code should accurately determine if one number is the sum of the other two, and all numbers are integers.\n- The function should handle negative integers correctly.\n- The function should be efficient and fast in its operations.\n- The function should be easy to understand and implement.\n- The function should be tested thoroughly to ensure it meets the specified requirements.\nWe will use Python's built-in capabilities to check if a number is an integer and to perform arithmetic operations. The function will first verify that all inputs are integers, then it will check if any one of the numbers is equal to the sum of the other two.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers equals a third number'\n    This means that the sum of any two of the given numbers should be equal to the third number.\n\n# [phrase showing quantity relationship]\n    No specific phrase showing quantity relationship.\n\n# [degree adverb] \n    No specific degree adverb.\n\n# [code logic]\n    (1) Check if all inputs are integers.\n    (2) Check if any one of the numbers is equal to the sum of the other two.\n    (3) Return True if the condition is met, otherwise return False.\n\n# [edge case] \n    any_int(0, 0, 0) = False\n    Explanation: All numbers are zero, and zero is not considered positive in this context. The function should return False as per the requirement.\n    any_int(1, -1, 0) = True\n    Explanation: The sum of 1 and -1 is 0, and 0 is one of the numbers. The function should return True as per the requirement.\n    any_int(2, 2, 4) = True\n    Explanation: The sum of the first two numbers (2 + 2) equals the third number (4). The function should return True as per the requirement.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic can handle the cases where all numbers are zero or where the sum of two numbers equals the third.\n", "requirement analysis:\nThe function needs to check if any one of the three given numbers is equal to the sum of the other two. It must handle both positive and negative integers and return false for non-integer inputs. The function should be efficient and easy to understand.\nrequirement pool:\n- The function should correctly identify if any number is the sum of the other two.\n- The function should handle negative integers appropriately.\n- The function should return false for non-integer inputs.\n- The function should be efficient and easy to understand.\n- The function should be compatible with Python's standard library.\nWe will implement the function using Python's built-in capabilities and ensure it checks if any of the three numbers is equal to the sum of the other two. The function will first verify that all inputs are integers and then perform the sum check. This approach leverages Python's type checking and arithmetic operations, ensuring efficiency and simplicity.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers equals the third number'\n    In the requirement, it means that the sum of any two of the three given numbers should be equal to the third number.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The function should first check if all inputs are integers. If not, it should return False. Then, it should check if any one of the numbers is equal to the sum of the other two.\n\n# [edge case] \n    any_int(5, 2, 7) = True\n    Explanation: 5 + 2 = 7, so one of the numbers is equal to the sum of the other two.\n    any_int(3, 2, 2) = False\n    Explanation: No number is equal to the sum of the other two.\n    any_int(3, -2, 1) = True\n    Explanation: 3 + (-2) = 1, so one of the numbers is equal to the sum of the other two.\n    any_int(3.6, -2.2, 2) = False\n    Explanation: The inputs are not integers, so the function should return False.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the inputs are not integers.\n        if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n            return False\n        (other code)\n"], "scores": [1.0, 0.5725, 1.0, 1.0, 1.0, 0.5725, 0.5725, 0.5725, 1.0, 1.0], "pass_results": [true, false, true, true, true, false, false, false, true, true], "pass_test_cases_num": [131, 75, 131, 131, 131, 75, 75, 75, 131, 131], "completion": "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if any of the three numbers is equal to the sum of the other two.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if any number is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n\n    # Check if any one of the numbers is equal to the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "passed": true, "pass": true, "pass_num": 6, "round": 994, "repair_prompt": ["def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\nEnsure that the function handles negative integers appropriately.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", " def any_int(x, y, z):\n    '''Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    Ensure that the function handles negative integers appropriately.\n    Examples\n        any_int(5, 2, 7) \u279e True\n        \n        any_int(3, 2, 2) \u279e False\n\n        any_int(3, -2, 1) \u279e True", " def any_int(x, y, z):\n    '''Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    Ensure that the function handles negative integers appropriately.\n    Examples\n        any_int(5, 2, 7) \u279e True\n        \n        any_int(3, 2, 2) \u279e False\n\n        any_int(3, -2, 1) \u279e True"], "mutate_method": "add_1_sentence_at_end", "parent_index": 726}
