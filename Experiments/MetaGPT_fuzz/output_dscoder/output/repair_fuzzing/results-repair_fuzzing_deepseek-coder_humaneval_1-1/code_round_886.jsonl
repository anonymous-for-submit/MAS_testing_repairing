{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True is list elements are monotonically increasing or decreasing. If the elements in the list increase in value consistently, it is considered monotonically increasing. Similarly, if the elements decrease continuously, it is monotonically decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": ["def check(monotonic):\n\tassert monotonic([6, 2, 5, 7, 4, 65]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 7, 4, 3, 64]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 8]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 7, 1, 62]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 1, 1]) == True", "def check(monotonic):\n\tassert monotonic([3, 2, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([2, 7, 7, 15]) == True", "def check(monotonic):\n\tassert monotonic([4, 7, 7, 1, 1, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 8, 13]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 8, 17]) == True", "def check(monotonic):\n\tassert monotonic([2, 22, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([2, 23, 5, 6]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 2, 18]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 2, 6]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 3, 2]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 2, -5]) == True", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 10]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 6, 18]) == False", "def check(monotonic):\n\tassert monotonic([6, 1, 7, 3, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 7, 3, 8, 61]) == False", "def check(monotonic):\n\tassert monotonic([2, 17, 7, 8]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 4, 5, 3, 59]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 5, 5, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([1, 16, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([7, 6, 2, -14]) == True", "def check(monotonic):\n\tassert monotonic([5, 6, 4, 16]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 5, -10]) == False", "def check(monotonic):\n\tassert monotonic([1, 22, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 8, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 1, 6, 4, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 7, 2, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 1, 4]) == False", "def check(monotonic):\n\tassert monotonic([4, 19, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 8, 5, 5, 56]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 6, 25]) == True", "def check(monotonic):\n\tassert monotonic([2, 3, 1, 7]) == False", "def check(monotonic):\n\tassert monotonic([8, 6, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 6, 2, 8, 62]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 6, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 6, 1, 3]) == False", "def check(monotonic):\n\tassert monotonic([4, 2, 5, 7, 6, 62]) == False", "def check(monotonic):\n\tassert monotonic([3, 7, 1, 20]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 17]) == False", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 5, 5, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 20, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 4, 14]) == False", "def check(monotonic):\n\tassert monotonic([3, 17, 2, 14]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 7, 2, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 20]) == True", "def check(monotonic):\n\tassert monotonic([3, 3, 3, -5]) == True", "def check(monotonic):\n\tassert monotonic([4, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 4, 2, 1, 60]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 7, 24]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 1, 1, 2, 61]) == False", "def check(monotonic):\n\tassert monotonic([1, 4, 3, -8]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 3, 5, 10, 63]) == False", "def check(monotonic):\n\tassert monotonic([4, 6, 3, 3, 10, 57]) == False", "def check(monotonic):\n\tassert monotonic([5, 4, 9, 14]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 5, 17]) == True", "def check(monotonic):\n\tassert monotonic([6, 7, 1, 8]) == False", "def check(monotonic):\n\tassert monotonic([9, 2, 5, -5]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 5, 1]) == False", "def check(monotonic):\n\tassert monotonic([9, 9, 9, 9]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 4, 5, 60]) == True", "def check(monotonic):\n\tassert monotonic([6, 2, 5, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 3, -9]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([1, 24, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 7, 6, 6, 61]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 1, 0]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 3, 3, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 8, 5, 9, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 16, 2, 11]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 2, 4, 2, 55]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 8, 7, 7, 65]) == False", "def check(monotonic):\n\tassert monotonic([2, 20, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 3, -10]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 4, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -12]) == True", "def check(monotonic):\n\tassert monotonic([9, 4, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([2, 15, 2, 15]) == False", "def check(monotonic):\n\tassert monotonic([6, 2, 4, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 2, 4]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 1, 3, 63]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 12]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 2, 1]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([6, 5, 7, 7, 6, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 4, 14]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 8, 5]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 1, -7]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 6, 8]) == True", "def check(monotonic):\n\tassert monotonic([9, 5, 5, -14]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 4, 4, 5, 55]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 0, -10]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 21]) == True", "def check(monotonic):\n\tassert monotonic([1, 1, 3, 18]) == True", "def check(monotonic):\n\tassert monotonic([1, 6, 4, -7]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 4, 17]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 2, 5, 60]) == False", "def check(monotonic):\n\tassert monotonic([5, 2, 5, 2]) == False", "def check(monotonic):\n\tassert monotonic([2, 3, 8, 8]) == True", "def check(monotonic):\n\tassert monotonic([5, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([8, 3, 2, -15]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 3, 19]) == False"], "test_case_list": ["assert monotonic([6, 2, 5, 7, 4, 65]) == False", "assert monotonic([3, 3, 7, 4, 3, 64]) == False", "assert monotonic([3, 1, 5, 8]) == False", "assert monotonic([4, 3, 5, 7, 1, 62]) == False", "assert monotonic([4, 4, 1, 1]) == True", "assert monotonic([3, 2, 7, 6]) == False", "assert monotonic([2, 7, 7, 15]) == True", "assert monotonic([4, 7, 7, 1, 1, 57]) == False", "assert monotonic([1, 1, 8, 13]) == True", "assert monotonic([5, 5, 8, 17]) == True", "assert monotonic([2, 22, 8, 7]) == False", "assert monotonic([2, 23, 5, 6]) == False", "assert monotonic([3, 2, 2, 18]) == False", "assert monotonic([2, 2, 2, 6]) == True", "assert monotonic([7, 5, 3, 2]) == True", "assert monotonic([7, 5, 2, -5]) == True", "assert monotonic([6, 19, 9, 12]) == False", "assert monotonic([1, 2, 4, 10]) == True", "assert monotonic([5, 4, 6, 18]) == False", "assert monotonic([6, 1, 7, 3, 4, 56]) == False", "assert monotonic([6, 3, 7, 3, 8, 61]) == False", "assert monotonic([2, 17, 7, 8]) == False", "assert monotonic([5, 1, 4, 5, 3, 59]) == False", "assert monotonic([3, 5, 5, 5, 3, 65]) == False", "assert monotonic([6, 19, 9, 7]) == False", "assert monotonic([1, 16, 9, 7]) == False", "assert monotonic([7, 6, 2, -14]) == True", "assert monotonic([5, 6, 4, 16]) == False", "assert monotonic([1, 6, 5, -10]) == False", "assert monotonic([1, 22, 4, 10]) == False", "assert monotonic([1, 6, 8, 6, 3, 62]) == False", "assert monotonic([1, 5, 1, 6, 4, 62]) == False", "assert monotonic([1, 1, 7, 2, 4, 56]) == False", "assert monotonic([2, 1, 5, 12]) == False", "assert monotonic([1, 3, 1, 4]) == False", "assert monotonic([4, 19, 8, 7]) == False", "assert monotonic([3, 5, 8, 5, 5, 56]) == False", "assert monotonic([1, 3, 6, 25]) == True", "assert monotonic([2, 3, 1, 7]) == False", "assert monotonic([8, 6, 2, 5]) == False", "assert monotonic([6, 3, 6, 2, 8, 62]) == False", "assert monotonic([6, 4, 6, 4]) == False", "assert monotonic([3, 6, 1, 3]) == False", "assert monotonic([4, 2, 5, 7, 6, 62]) == False", "assert monotonic([3, 7, 1, 20]) == False", "assert monotonic([3, 1, 5, 17]) == False", "assert monotonic([5, 5, 7, 5, 5, 57]) == False", "assert monotonic([1, 20, 4, 10]) == False", "assert monotonic([6, 16, 4, 14]) == False", "assert monotonic([3, 17, 2, 14]) == False", "assert monotonic([4, 5, 7, 2, 8, 63]) == False", "assert monotonic([1, 2, 4, 20]) == True", "assert monotonic([3, 3, 3, -5]) == True", "assert monotonic([4, 2, 3, 4]) == False", "assert monotonic([3, 5, 4, 2, 1, 60]) == False", "assert monotonic([6, 4, 7, 24]) == False", "assert monotonic([6, 3, 1, 1, 2, 61]) == False", "assert monotonic([1, 4, 3, -8]) == False", "assert monotonic([2, 6, 3, 5, 10, 63]) == False", "assert monotonic([4, 6, 3, 3, 10, 57]) == False", "assert monotonic([5, 4, 9, 14]) == False", "assert monotonic([1, 3, 5, 17]) == True", "assert monotonic([6, 7, 1, 8]) == False", "assert monotonic([9, 2, 5, -5]) == False", "assert monotonic([3, 2, 5, 1]) == False", "assert monotonic([9, 9, 9, 9]) == True", "assert monotonic([1, 2, 3, 4, 5, 60]) == True", "assert monotonic([6, 2, 5, 6, 3, 62]) == False", "assert monotonic([5, 1, 3, -9]) == False", "assert monotonic([1, 5, 7, 6]) == False", "assert monotonic([1, 24, 9, 12]) == False", "assert monotonic([2, 6, 7, 6, 6, 61]) == False", "assert monotonic([4, 1, 1, 0]) == True", "assert monotonic([2, 1, 3, 3, 3, 65]) == False", "assert monotonic([1, 2, 8, 5, 9, 55]) == False", "assert monotonic([2, 16, 2, 11]) == False", "assert monotonic([6, 16, 3, 15]) == False", "assert monotonic([1, 5, 2, 4, 2, 55]) == False", "assert monotonic([3, 1, 8, 7, 7, 65]) == False", "assert monotonic([2, 20, 2, 5]) == False", "assert monotonic([7, 2, 3, -10]) == False", "assert monotonic([4, 3, 5, 4, 8, 63]) == False", "assert monotonic([7, 2, 1, -12]) == True", "assert monotonic([9, 4, 1, -6]) == True", "assert monotonic([2, 15, 2, 15]) == False", "assert monotonic([6, 2, 4, 4]) == False", "assert monotonic([3, 3, 2, 4]) == False", "assert monotonic([2, 2, 8, 1, 3, 63]) == False", "assert monotonic([2, 2, 8, 12]) == True", "assert monotonic([3, 4, 2, 1]) == False", "assert monotonic([4, 4, 3, 15]) == False", "assert monotonic([2, 6, 5, 3]) == False", "assert monotonic([6, 5, 7, 7, 6, 55]) == False", "assert monotonic([2, 4, 4, 14]) == True", "assert monotonic([5, 4, 8, 5]) == False", "assert monotonic([4, 5, 1, -7]) == False", "assert monotonic([3, 3, 6, 8]) == True", "assert monotonic([9, 5, 5, -14]) == True", "assert monotonic([2, 1, 4, 4, 5, 55]) == False", "assert monotonic([4, 1, 0, -10]) == True", "assert monotonic([5, 5, 7, 21]) == True", "assert monotonic([1, 1, 3, 18]) == True", "assert monotonic([1, 6, 4, -7]) == False", "assert monotonic([4, 3, 4, 17]) == False", "assert monotonic([7, 2, 1, -6]) == True", "assert monotonic([1, 2, 3, 2, 5, 60]) == False", "assert monotonic([5, 2, 5, 2]) == False", "assert monotonic([2, 3, 8, 8]) == True", "assert monotonic([5, 2, 3, 4]) == False", "assert monotonic([8, 3, 2, -15]) == True", "assert monotonic([3, 4, 3, 15]) == False", "assert monotonic([2, 1, 5, 3]) == False", "assert monotonic([2, 4, 3, 19]) == False"], "nl": "Return True is list elements are monotonically increasing or decreasing.\n    ", "func": "def monotonic(l: list):", "examples": ">>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    ", "completions": ["from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if the list elements are monotonically increasing or decreasing.\n    Args:\n        l (list): The input list of numbers.\n    Returns:\n        bool: True if the list is monotonic, False otherwise.\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if the list elements are monotonically increasing or decreasing.\n    :param l: list of numbers\n    :return: bool\n    '''\n    if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Check if the list is monotonically increasing or decreasing.\n\n    Args:\n        l (list): The input list to check.\n\n    Returns:\n        bool: True if the list is monotonically increasing or decreasing, False otherwise.\n    \"\"\"\n    if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Checks if a list is monotonically increasing or decreasing.\n\n    Args:\n        l (list): The input list to check.\n\n    Returns:\n        bool: True if the list is monotonically increasing or decreasing, False otherwise.\n    \"\"\"\n    if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Check if a list is monotonically increasing or decreasing.\n\n    Args:\n        l (list): A list of numbers.\n\n    Returns:\n        bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    Args:\n        l (list): The list of numbers to check.\n    Returns:\n        bool: True if the list is monotonically increasing or decreasing, False otherwise.\n    '''\n    if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Check if a list is monotonically increasing or decreasing.\n\n    Args:\n        l (list): The input list to check for monotonicity.\n\n    Returns:\n        bool: True if the list is monotonically increasing or decreasing, False otherwise.\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(l) <= 1:\n        return True\n    \n    # Determine if the list is monotonically increasing or decreasing\n    increasing = all(l[i] <= l[i+1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    Args:\n        l (list): A list of numbers.\n    Returns:\n        bool: True if the list is monotonically increasing or decreasing, False otherwise.\n    Examples:\n        >>> monotonic([1, 2, 4, 20])\n        True\n        >>> monotonic([1, 20, 4, 10])\n        False\n        >>> monotonic([4, 1, 0, -10])\n        True\n    '''\n    if len(l) <= 1:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if the list elements are monotonically increasing or decreasing.\n    :param l: list of numbers\n    :return: bool\n    '''\n    if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that determines if a list is monotonically increasing or decreasing. This is a fundamental operation in data analysis and should be efficient and user-friendly. The function should handle both increasing and decreasing lists correctly and should be able to process lists of various sizes.\nrequirement pool:\n- The main code should accurately determine if a list is monotonically increasing or decreasing.\n- The function should be optimized for performance, especially for large lists.\n- The user interface should be simple and intuitive, making it easy for users to input lists and view results.\n- The application should handle edge cases, such as lists with equal elements.\n- The system should be cross-platform compatible, supporting both desktop and mobile devices.\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and leverage a simple approach to ensure efficiency. The function will compare each element with the next one to determine the trend. If the list is either entirely non-decreasing or non-increasing, it will return True; otherwise, it will return False. We will also handle edge cases, such as lists with equal elements, by considering them as neither increasing nor decreasing.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list elements are consistently increasing or decreasing without any fluctuations.\n    Explanation: Monotonicity in a list refers to the property where the elements are either always increasing or always decreasing. This can be either strictly increasing (each element is greater than the previous one) or strictly decreasing (each element is less than the previous one).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function, we will follow these steps:\n    1. Check if the list has less than two elements, if so, return True since a single element or an empty list is trivially monotonic.\n    2. Initialize two boolean variables, `increasing` and `decreasing`, to True.\n    3. Iterate through the list and compare each element with the next one.\n    4. If any element is greater than the next, set `increasing` to False.\n    5. If any element is less than the next, set `decreasing` to False.\n    6. If both `increasing` and `decreasing` are False, return False.\n    7. If only one of them is False, return True.\n    8. If the loop completes without setting either `increasing` or `decreasing` to False, return True.\n\n# [edge case] \n    monotonic([1, 1, 1, 1]) = True\n    Explanation: The list has all elements equal, so it is considered neither strictly increasing nor strictly decreasing.\n    monotonic([1, 3, 2, 4]) = False\n    Explanation: The list has elements that increase and then decrease, so it is not monotonic.\n    monotonic([]) = True\n    Explanation: An empty list is trivially monotonic.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided covers the edge case of an empty list.\n", "requirement analysis:\nThe requirement is to determine if a list is monotonically increasing or decreasing. This involves checking if each element in the list is either less than or equal to the next element for increasing, or greater than or equal to the next element for decreasing. The function should return True if the list is either monotonically increasing or decreasing, and False otherwise.\nrequirement pool:\n- The main code should correctly determine if a list is monotonically increasing or decreasing\n- The function should handle edge cases such as empty lists or lists with a single element\n- The function should be optimized for performance, especially for large lists\n- The function should provide clear and concise documentation\n- The function should be tested thoroughly to ensure accuracy and reliability\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and leverage a simple approach to ensure efficiency. The function will compare each element with the next one to determine the monotonicity of the list.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list is either consistently increasing or decreasing.\n    Explanation: A list is considered monotonically increasing if each element is less than or equal to the next element, and it is monotonically decreasing if each element is greater than or equal to the next element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function, we will:\n    1. Check if the list has less than 2 elements, if so, return True since a single element or an empty list is trivially monotonic.\n    2. Iterate through the list and compare each element with the next one to determine if the list is increasing or decreasing.\n    3. If at any point the order is not consistent, return False.\n    4. If the loop completes without finding any inconsistencies, return True.\n\n# [edge case] \n    monotonic([1, 2, 2, 3]) = True\n    Explanation: The list is monotonically increasing as each element is less than or equal to the next element.\n    monotonic([3, 2, 2, 1]) = True\n    Explanation: The list is monotonically decreasing as each element is greater than or equal to the next element.\n    monotonic([1, 3, 2, 4]) = False\n    Explanation: The list is not monotonic because the elements do not consistently increase or decrease.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the logic provided covers the basic and edge cases of a monotonic list.\n", "requirement analysis:\nThe requirement is to create a function that checks if a list is monotonically increasing or decreasing. Monotonically increasing means each element is greater than or equal to the previous one, while monotonically decreasing means each element is less than or equal to the previous one. The function should return True if the list is either monotonically increasing or decreasing, and False otherwise. The function should handle edge cases like empty lists and lists with equal elements.\nrequirement pool:\n- The main code should define the function 'monotonic' with a list as input and return a boolean value.\n- The function should check if the list is monotonically increasing.\n- The function should check if the list is monotonically decreasing.\n- The function should return True if the list is either monotonically increasing or decreasing, and False otherwise.\n- The function should handle edge cases like empty lists and lists with equal elements.\nTo implement the 'monotonic' function, we will use Python's built-in capabilities and leverage a simple approach to check if a list is monotonically increasing or decreasing. This will involve comparing each element with the next one in the list to determine the trend.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list elements are consistently increasing or decreasing.\n    Explanation: A list is considered monotonically increasing if each element is less than or equal to the next element. Conversely, it is monotonically decreasing if each element is greater than or equal to the next element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the 'monotonic' function, we will:\n    1. Check if the list is monotonically increasing.\n    2. Check if the list is monotonically decreasing.\n    3. Return True if either condition is met, otherwise return False.\n\n# [edge case] \n    monotonic([1, 2, 2, 3]) = True\n    Explanation: The list is monotonically increasing because each element is less than or equal to the next element.\n    monotonic([3, 2, 1]) = True\n    Explanation: The list is monotonically decreasing because each element is greater than or equal to the next element.\n    monotonic([1, 3, 2, 4]) = False\n    Explanation: The list is not monotonic because the elements do not consistently increase or decrease.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can handle lists with repeated elements and lists with elements that do not change.\n", "requirement analysis:\nThe requirement is to determine if a list is monotonically increasing or decreasing. This involves checking if each element in the list is either greater than or equal to the previous element for increasing, or less than or equal to the previous element for decreasing. The function should return True if the list is either monotonically increasing or decreasing, and False otherwise.\nrequirement pool:\n- Implement the function to check for monotonicity\n- Ensure the function handles both increasing and decreasing lists correctly\n- Develop a user-friendly interface for easy interaction\n- Provide clear feedback on the result\n- Optimize performance for large lists\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and leverage a simple approach to ensure clarity and efficiency. The function will compare each element with the next one to determine the monotonicity of the list.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list is either always increasing or always decreasing.\n    Explanation: A list is considered monotonically increasing if each element is less than or equal to the next element, and it is monotonically decreasing if each element is greater than or equal to the next element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function, we will:\n    1. Check if the list has less than 2 elements, if so, return True since a single element or an empty list is trivially monotonic.\n    2. Iterate through the list and compare each element with the next one to determine if the list is increasing or decreasing.\n    3. If at any point the order is not consistent, return False.\n    4. If the loop completes without finding any inconsistencies, return True.\n\n# [edge case] \n    monotonic([1, 2, 2, 3]) = True\n    Explanation: The list is monotonically increasing as each element is less than or equal to the next element.\n    monotonic([3, 2, 1]) = True\n    Explanation: The list is monotonically decreasing as each element is greater than or equal to the next element.\n    monotonic([1, 3, 2, 4]) = False\n    Explanation: The list is not monotonic because the elements do not consistently increase or decrease.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the logic provided covers all scenarios.\n", "requirement analysis:\nThe requirement is to create a function that checks if a list is monotonically increasing or decreasing. Monotonically increasing means each element is greater than or equal to the previous one, while monotonically decreasing means each element is less than or equal to the previous one. The function should return True if the list is either monotonically increasing or decreasing, and False otherwise. The function should be efficient and handle various list sizes.\nrequirement pool:\n- Implement the function to check for monotonicity\n- Ensure the function is efficient and handles large lists\n- Provide clear documentation and examples for user guidance\n- Test the function with various edge cases\n- Optimize the function for performance\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and leverage a simple approach to ensure efficiency. The function will compare each element with the next one to determine if the list is either entirely increasing or entirely decreasing. This method avoids unnecessary computations and ensures the function can handle large lists efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonically increasing or decreasing'\n    In the requirement, it means that the list's elements consistently increase or decrease without any reversal in trend.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function, we will follow these steps:\n    1. Check if the list has less than 2 elements, if so, return True since a single element or an empty list is trivially monotonic.\n    2. Iterate through the list and compare each element with the next one to determine if the list is increasing or decreasing.\n    3. If at any point the order changes (from increasing to decreasing or vice versa), return False.\n    4. If the loop completes without finding any order change, return True.\n\n# [edge case] \n    monotonic([1, 1, 1, 1]) = True\n    Explanation: The list has all identical elements, so it is considered monotonically increasing and decreasing.\n    monotonic([]) = True\n    Explanation: An empty list is trivially monotonic.\n    monotonic([1, 3, 2, 4]) = False\n    Explanation: The list starts by increasing but then decreases, so it is not monotonic.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan already covers these scenarios.\n", "requirement analysis:\nThe requirement is to determine if a list is monotonically increasing or decreasing. This involves checking if each element in the list is either greater than or equal to the previous element for increasing lists, or less than or equal to the previous element for decreasing lists. The function should return True if the list is either monotonically increasing or decreasing, and False otherwise.\nrequirement pool:\n- Implement a function to check if a list is monotonically increasing or decreasing\n- Ensure the function handles both increasing and decreasing lists correctly\n- Create a user-friendly interface for easy interaction\n- Optimize the function for high performance\n- Enhance the visual appeal of the application\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and leverage a simple approach to ensure clarity and efficiency. The function will compare each element with the next one to determine the monotonicity of the list.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list is either consistently increasing or decreasing without any reversals.\n    Explanation: Monotonicity in a list refers to the property where the elements are either always increasing or always decreasing. This can be either strictly increasing (each element is greater than the previous one) or strictly decreasing (each element is less than the previous one).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To check if a list is monotonic, we can iterate through the list and compare each element with the next one. If we find any reversal in the trend (e.g., an increase followed by a decrease), we can immediately conclude that the list is not monotonic.\n\n# [edge case] \n    monotonic([1, 1, 1, 1]) = True\n    Explanation: This list is considered monotonic because all elements are equal, which means it is both non-decreasing and non-increasing.\n    monotonic([10]) = True\n    Explanation: A single-element list is trivially monotonic.\n    monotonic([5, 3, 2, 8]) = False\n    Explanation: This list is not monotonic because it first decreases from 5 to 3 and then increases again to 8.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic to check monotonicity can be applied to single-element lists without any additional checks.\n", "requirement analysis:\nThe requirement is to create a function that checks if a list is monotonically increasing or decreasing. This is a fundamental requirement that should be efficiently implemented to meet the needs of users who require such a functionality.\nrequirement pool:\n- Implement the function to check for monotonicity in lists\n- Ensure the function is efficient and handles edge cases\n- Develop a user-friendly interface for easy interaction\n- Test the function for robustness and reliability\n- Integrate the function into a Python library for easy use in other projects\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and leverage the simplicity and efficiency of the language. The function will compare each element with the next one to determine if the sequence is consistently increasing or decreasing. This approach ensures both performance and clarity.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonically increasing or decreasing'\n    In the requirement, it means that the elements in the list either consistently increase or consistently decrease in value.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The function should compare each element with the next one to determine if the sequence is consistently increasing or decreasing.\n\n# [edge case] \n    monotonic([1, 2, 2, 3]) = True\n    Explanation: The list is monotonically increasing because each element is less than or equal to the next one.\n    monotonic([3, 2, 1]) = True\n    Explanation: The list is monotonically decreasing because each element is greater than or equal to the next one.\n    monotonic([1, 3, 2, 3]) = False\n    Explanation: The list is not monotonic because it does not consistently increase or decrease; it has both increasing and decreasing segments.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan should be sufficient to handle these cases.\n", "requirement analysis:\nThe requirement is to determine if a list is monotonically increasing or decreasing. This involves checking if each element in the list is either greater than or equal to the previous element for increasing, or less than or equal to the previous element for decreasing. The function should be efficient and handle edge cases such as empty lists or lists with a single element.\nrequirement pool:\n- The main code should efficiently determine if the list is monotonically increasing or decreasing\n- The function should handle edge cases such as empty lists or lists with a single element\n- The function should be simple and easy to understand\n- The function should be tested for various inputs to ensure robustness\n- The function should be integrated into a larger application if necessary\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and leverage a simple approach to ensure efficiency. The function will compare each element with the next one to determine the monotonicity of the list.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list is either always increasing or always decreasing.\n    Explanation: A list is considered monotonically increasing if each element is less than or equal to the next element, and it is monotonically decreasing if each element is greater than or equal to the next element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function, we will:\n    1. Check if the list has less than 2 elements, if so, return True since a single element or an empty list is trivially monotonic.\n    2. Iterate through the list and compare each element with the next one to determine if the list is increasing or decreasing.\n    3. If at any point the order is not consistent, return False.\n    4. If the loop completes without finding any inconsistencies, return True.\n\n# [edge case] \n    monotonic([1, 2, 2, 3]) = True\n    Explanation: The list is monotonically increasing because each element is less than or equal to the next element.\n    monotonic([3, 2, 2, 1]) = True\n    Explanation: The list is monotonically decreasing because each element is greater than or equal to the next element.\n    monotonic([1, 3, 2, 3]) = False\n    Explanation: The list is not monotonic because the elements do not consistently increase or decrease.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan already covers all cases, including lists with fewer than two elements.\n", "requirement analysis:\nThe requirement is to create a function that checks if a list is monotonically increasing or decreasing. This is a fundamental requirement in data structures and algorithms, and it has direct applications in various fields such as finance, statistics, and computer science. The function should be efficient and handle edge cases such as empty lists, lists with a single element, and lists with duplicate values.\nrequirement pool:\n- The main code should accurately determine if a list is monotonically increasing or decreasing\n- The function should handle edge cases efficiently\n- The user interface should be simple and intuitive\n- The product should be compatible with both desktop and mobile platforms\n- The function should be easily integrable into existing projects\nTo create a function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and leverage a simple approach to ensure efficiency. The function will compare each element with the next one to determine if the sequence is consistently increasing or decreasing. We will also handle edge cases such as empty lists and lists with a single element.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonically increasing or decreasing'\n    In the requirement, it means that the elements in the list either consistently increase or consistently decrease in value.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The function should compare each element with the next one to determine if the sequence is consistently increasing or decreasing.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonic as there are no elements to violate the monotonicity.\n    monotonic([5]) = True\n    Explanation: A list with a single element is considered monotonic since there are no other elements to compare.\n    monotonic([1, 3, 2, 4]) = False\n    Explanation: The list is neither monotonically increasing (3 to 2) nor monotonically decreasing (3 to 2), so it is not monotonic.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function can return `True` for empty lists and lists with a single element by default.\n", "requirement analysis:\nThe requirement is to determine if a list is monotonically increasing or decreasing. This involves checking if each element in the list is either greater than or equal to the previous element for increasing, or less than or equal to the previous element for decreasing. The function should return True if the list is either monotonically increasing or decreasing, and False otherwise.\nrequirement pool:\n- Implement the function to check for monotonicity\n- Ensure the function handles both increasing and decreasing lists correctly\n- Create a user-friendly interface for input and output\n- Provide clear feedback on the monotonicity of the list\n- Optimize the function for performance and efficiency\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and leverage a simple approach to ensure clarity and efficiency. The function will compare each element with the next one to determine if the sequence is consistently increasing or decreasing. This will be achieved by iterating through the list and using simple conditional checks.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonically increasing or decreasing'\n    In the requirement, it means that the list's elements either consistently increase or consistently decrease without any reversals.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The function should:\n    1. Check if the list is monotonically increasing.\n    2. Check if the list is monotonically decreasing.\n    3. Return True if either condition is met, otherwise return False.\n\n# [edge case] \n    monotonic([1, 2, 2, 3]) = True\n    Explanation: The list is monotonically increasing because each element is less than or equal to the next element.\n    monotonic([3, 2, 1]) = True\n    Explanation: The list is monotonically decreasing because each element is greater than or equal to the next element.\n    monotonic([1, 3, 2, 3]) = False\n    Explanation: The list is not monotonic because it first increases (from 1 to 3) and then decreases (from 3 to 2), with a repeated element 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can handle lists with repeated elements and non-strictly monotonic sequences.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [113, 113, 113, 113, 113, 113, 113, 113, 113, 113], "completion": "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if the list elements are monotonically increasing or decreasing.\n    :param l: list of numbers\n    :return: bool\n    '''\n    if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "passed": true, "pass": true, "pass_num": 10, "round": 886, "repair_prompt": ["def monotonic(l: list):\t\n'''Return True is list elements are monotonically increasing or decreasing. If the elements in the list increase in value consistently, it is considered monotonically increasing. Similarly, if the elements decrease continuously, it is monotonically decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", " def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing. If the elements in the list increase in value consistently, it is considered monotonically increasing. Similarly, if the elements decrease continuously, it is monotonically decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", " def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. If the elements in the list increase in value consistently, it is considered monotonically increasing. Similarly, if the elements decrease continuously, it is monotonically decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''"], "mutate_method": "expand_one2two", "parent_index": 152}
