{"task_id": "HumanEval/43", "prompt": "def pairs_sum_to_zero(l):\t\n'''    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    Consider edge cases, such as an empty list or a list with one element.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''", "entry_point": "pairs_sum_to_zero", "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n", "test": ["def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 11, -3, 6, 7, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 7, -4, 1, 1, 11]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 11, 0, 3, 6, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 14, 0, 5, 2, 34]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 2, 3, 7]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 2, 9, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 4, 2, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 14, 1, 8, 6, 36]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 9, 0, 8, 5, 9]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 4, -6, 7, 1, 32]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 8, -2, 3]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-2, 10, 0, 6, 5, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 1, -2, 2]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 2, -1, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 4, -2, 5, 5, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 5, -3, 3]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 3, -4, 5]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-2, 4, -5, 4, 1, 25]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 6, -4, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 5, 2, 4, 1, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 14, 0, 1, 7, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 8, -5, 3, 7, 35]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 9, -9, 2, 7, 11]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 7, -1, 2, 1, 28]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 3, 2, 31]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 6, -7, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 9, 2, 3, 4, 30]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 6, 1, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 1, 3, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 5, 8, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 7, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 8, 10, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 13, -5, 7, 7, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 5, -10, 2, 10, 9]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 3, 1, 8]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 7, 4, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 9, -5, 4, 6, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 6, 2, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 2, 1, 11]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 2, 7, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 5, 2, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 14, -2, 8, 2, 35]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, 5, 0]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 8, 4, 3, 7, 29]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 12, 1, 9, 6, 33]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 11, 1, 6, 6, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 11, -3, 8, 7, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 10, -4, 8, 6, 26]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 3, 7, 1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 1, -4, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-2, 12, -4, 7, 1, 36]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 12, 1, 6, 7, 25]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 11, -3, 6, 2, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 13, -2, 7, 3, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 4, -10, 5, 10, 9]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 1, 3, 7]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 8, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 14, 2, 4, 6, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 5, 1, 12]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 3, 2, 30]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 5, -6, 8, 1, 33]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 3, 7, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 14, -6, 5, 1, 35]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 4, -1, 5, 10, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 13, -2, 4, 4, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 2, 6, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 4, -1, 5, 3, 33]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 3, 1, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([7, 5, -1, 1, 8, 10]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, 4, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 7, 3, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 12, -3, 2, 6, 29]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 9, -3, 6, 7, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 7, -9, 5, 4, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 6, 0, 6, 3, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 7, 8, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 4, -1, 8, 8, 12]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 8, 1, 1, 6, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 14, 1, 8, 2, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 6, -5, 7, 7, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 4, -7, 1, 2, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 11, -6, 5, 7, 36]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 14, 0, 5, 1, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 9, -1, 7, 4, 34]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, 3, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 10, 2, 9, 3, 33]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 4, 1, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 4, 2, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, -2, 1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 10, -2, 2, 4, 33]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 9, -8, 6, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 7, -4, 4, 2, 32]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 4, 10, 1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([7, 8, -10, 7, 2, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 8, 0, 4, 5, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 14, -4, 5, 6, 32]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 12, 1, 8, 6, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 12, -6, 6, 7, 29]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 5, 1, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 8, -4, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 2, 1, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 4, 3, 6, 2, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 11, -4, 3, 5, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 9, 2, 1, 6, 34]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 13, -4, 6, 3, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 1, 0, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 5, -2, 3, 1, 32]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 5, -1, 8, 8, 4]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 2, 2, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 8, 1, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 6, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 14, 3, 6, 2, 29]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 13, -2, 8, 7, 35]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 1, 3, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 8, -1, 7, 6, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 12, 0, 1, 7, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 3, 6, 7]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 6, -8, 1, 2, 8]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 8, -3, 9, 5, 29]) == False"], "test_case_list": ["assert pairs_sum_to_zero([1, 11, -3, 6, 7, 30]) == False", "assert pairs_sum_to_zero([3, 7, -4, 1, 1, 11]) == False", "assert pairs_sum_to_zero([-8, 11, 0, 3, 6, 26]) == False", "assert pairs_sum_to_zero([1, 14, 0, 5, 2, 34]) == False", "assert pairs_sum_to_zero([1, 2, 3, 7]) == False", "assert pairs_sum_to_zero([4, 2, 9, 3]) == False", "assert pairs_sum_to_zero([-3, 9, -1, 4, 2, 31]) == False", "assert pairs_sum_to_zero([3]) == False", "assert pairs_sum_to_zero([-1, 14, 1, 8, 6, 36]) == True", "assert pairs_sum_to_zero([3, 9, 0, 8, 5, 9]) == False", "assert pairs_sum_to_zero([1, 4, -6, 7, 1, 32]) == False", "assert pairs_sum_to_zero([2, 8, -2, 3]) == True", "assert pairs_sum_to_zero([-2, 10, 0, 6, 5, 30]) == False", "assert pairs_sum_to_zero([3, 1, -2, 2]) == True", "assert pairs_sum_to_zero([3, 2, -1, 2]) == False", "assert pairs_sum_to_zero([-1, 4, -2, 5, 5, 27]) == False", "assert pairs_sum_to_zero([1]) == False", "assert pairs_sum_to_zero([6, 5, -3, 3]) == True", "assert pairs_sum_to_zero([4, 3, -4, 5]) == True", "assert pairs_sum_to_zero([-2, 4, -5, 4, 1, 25]) == False", "assert pairs_sum_to_zero([2, 6, -4, 5]) == False", "assert pairs_sum_to_zero([-7, 5, 2, 4, 1, 26]) == False", "assert pairs_sum_to_zero([-8, 14, 0, 1, 7, 30]) == False", "assert pairs_sum_to_zero([1, 8, -5, 3, 7, 35]) == False", "assert pairs_sum_to_zero([6, 9, -9, 2, 7, 11]) == True", "assert pairs_sum_to_zero([-8, 7, -1, 2, 1, 28]) == True", "assert pairs_sum_to_zero([-3, 9, -1, 3, 2, 31]) == True", "assert pairs_sum_to_zero([6, 6, -7, 6]) == False", "assert pairs_sum_to_zero([-4, 9, 2, 3, 4, 30]) == True", "assert pairs_sum_to_zero([1, 6, 1, 2]) == False", "assert pairs_sum_to_zero([5, 1, 3, 5]) == False", "assert pairs_sum_to_zero([4, 5, 8, 3]) == False", "assert pairs_sum_to_zero([6, 7, 2, 5]) == False", "assert pairs_sum_to_zero([2, 8, 10, 3]) == False", "assert pairs_sum_to_zero([1, 13, -5, 7, 7, 27]) == False", "assert pairs_sum_to_zero([4, 5, -10, 2, 10, 9]) == True", "assert pairs_sum_to_zero([2, 3, 1, 8]) == False", "assert pairs_sum_to_zero([1, 7, 4, 6]) == False", "assert pairs_sum_to_zero([2, 9, -5, 4, 6, 30]) == False", "assert pairs_sum_to_zero([4, 6, 2, 4]) == False", "assert pairs_sum_to_zero([5, 2, 1, 11]) == False", "assert pairs_sum_to_zero([5, 2, 7, 3]) == False", "assert pairs_sum_to_zero([5, 5, 2, 2]) == False", "assert pairs_sum_to_zero([-8, 14, -2, 8, 2, 35]) == True", "assert pairs_sum_to_zero([1, 3, 5, 0]) == False", "assert pairs_sum_to_zero([-1, 8, 4, 3, 7, 29]) == False", "assert pairs_sum_to_zero([2, 12, 1, 9, 6, 33]) == False", "assert pairs_sum_to_zero([-4, 11, 1, 6, 6, 28]) == False", "assert pairs_sum_to_zero([0, 11, -3, 8, 7, 26]) == False", "assert pairs_sum_to_zero([-8, 10, -4, 8, 6, 26]) == True", "assert pairs_sum_to_zero([2]) == False", "assert pairs_sum_to_zero([2, 3, 7, 1]) == False", "assert pairs_sum_to_zero([6, 1, -4, 6]) == False", "assert pairs_sum_to_zero([-2, 12, -4, 7, 1, 36]) == False", "assert pairs_sum_to_zero([2, 12, 1, 6, 7, 25]) == False", "assert pairs_sum_to_zero([-4, 11, -3, 6, 2, 27]) == False", "assert pairs_sum_to_zero([0, 13, -2, 7, 3, 31]) == False", "assert pairs_sum_to_zero([1, 4, -10, 5, 10, 9]) == True", "assert pairs_sum_to_zero([4, 1, 3, 7]) == False", "assert pairs_sum_to_zero([6, 8, 2, 5]) == False", "assert pairs_sum_to_zero([-7, 14, 2, 4, 6, 30]) == False", "assert pairs_sum_to_zero([1, 5, 1, 12]) == False", "assert pairs_sum_to_zero([-3, 9, -1, 3, 2, 30]) == True", "assert pairs_sum_to_zero([-1, 5, -6, 8, 1, 33]) == True", "assert pairs_sum_to_zero([2, 3, 7, 4]) == False", "assert pairs_sum_to_zero([0, 14, -6, 5, 1, 35]) == False", "assert pairs_sum_to_zero([5, 4, -1, 5, 10, 6]) == False", "assert pairs_sum_to_zero([0, 13, -2, 4, 4, 28]) == False", "assert pairs_sum_to_zero([2, 2, 6, 4]) == False", "assert pairs_sum_to_zero([0, 4, -1, 5, 3, 33]) == False", "assert pairs_sum_to_zero([3, 3, 1, 4]) == False", "assert pairs_sum_to_zero([7, 5, -1, 1, 8, 10]) == True", "assert pairs_sum_to_zero([1, 3, 4, 3]) == False", "assert pairs_sum_to_zero([5, 7, 3, 4]) == False", "assert pairs_sum_to_zero([-7, 12, -3, 2, 6, 29]) == False", "assert pairs_sum_to_zero([-4, 9, -3, 6, 7, 31]) == False", "assert pairs_sum_to_zero([4, 7, -9, 5, 4, 6]) == False", "assert pairs_sum_to_zero([-4, 6, 0, 6, 3, 26]) == False", "assert pairs_sum_to_zero([4]) == False", "assert pairs_sum_to_zero([2, 7, 8, 5]) == False", "assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True", "assert pairs_sum_to_zero([1, 4, -1, 8, 8, 12]) == True", "assert pairs_sum_to_zero([-3, 8, 1, 1, 6, 31]) == False", "assert pairs_sum_to_zero([-6, 14, 1, 8, 2, 28]) == False", "assert pairs_sum_to_zero([-3, 6, -5, 7, 7, 30]) == False", "assert pairs_sum_to_zero([3, 4, -7, 1, 2, 3]) == False", "assert pairs_sum_to_zero([-8, 11, -6, 5, 7, 36]) == False", "assert pairs_sum_to_zero([-7, 14, 0, 5, 1, 28]) == False", "assert pairs_sum_to_zero([-5, 9, -1, 7, 4, 34]) == False", "assert pairs_sum_to_zero([1, 3, 3, 5]) == False", "assert pairs_sum_to_zero([-5, 10, 2, 9, 3, 33]) == False", "assert pairs_sum_to_zero([2, 4, 1, 2]) == False", "assert pairs_sum_to_zero([-3, 9, -1, 4, 2, 30]) == False", "assert pairs_sum_to_zero([1, 3, -2, 1]) == False", "assert pairs_sum_to_zero([2, 10, -2, 2, 4, 33]) == True", "assert pairs_sum_to_zero([3, 9, -8, 6, 2, 5]) == False", "assert pairs_sum_to_zero([-6, 7, -4, 4, 2, 32]) == True", "assert pairs_sum_to_zero([3, 4, 10, 1]) == False", "assert pairs_sum_to_zero([7, 8, -10, 7, 2, 4]) == False", "assert pairs_sum_to_zero([-6, 8, 0, 4, 5, 27]) == False", "assert pairs_sum_to_zero([-6, 14, -4, 5, 6, 32]) == True", "assert pairs_sum_to_zero([-5, 12, 1, 8, 6, 31]) == False", "assert pairs_sum_to_zero([-3, 12, -6, 6, 7, 29]) == True", "assert pairs_sum_to_zero([1, 5, 1, 3]) == False", "assert pairs_sum_to_zero([5, 8, -4, 5]) == False", "assert pairs_sum_to_zero([3, 2, 1, 6]) == False", "assert pairs_sum_to_zero([-5, 4, 3, 6, 2, 27]) == False", "assert pairs_sum_to_zero([-1, 11, -4, 3, 5, 28]) == False", "assert pairs_sum_to_zero([-7, 9, 2, 1, 6, 34]) == False", "assert pairs_sum_to_zero([-1, 13, -4, 6, 3, 28]) == False", "assert pairs_sum_to_zero([6, 1, 0, 3]) == False", "assert pairs_sum_to_zero([-5, 5, -2, 3, 1, 32]) == True", "assert pairs_sum_to_zero([1, 5, -1, 8, 8, 4]) == True", "assert pairs_sum_to_zero([1, 2, 2, 2]) == False", "assert pairs_sum_to_zero([6]) == False", "assert pairs_sum_to_zero([2, 8, 1, 4]) == False", "assert pairs_sum_to_zero([2, 6, 2, 5]) == False", "assert pairs_sum_to_zero([2, 14, 3, 6, 2, 29]) == False", "assert pairs_sum_to_zero([-5, 13, -2, 8, 7, 35]) == False", "assert pairs_sum_to_zero([6, 1, 3, 2]) == False", "assert pairs_sum_to_zero([5]) == False", "assert pairs_sum_to_zero([-4, 8, -1, 7, 6, 26]) == False", "assert pairs_sum_to_zero([-4, 12, 0, 1, 7, 28]) == False", "assert pairs_sum_to_zero([5, 3, 6, 7]) == False", "assert pairs_sum_to_zero([4, 6, -8, 1, 2, 8]) == True", "assert pairs_sum_to_zero([-4, 8, -3, 9, 5, 29]) == False"], "nl": "\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    ", "func": "def pairs_sum_to_zero(l):", "examples": ">>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    ", "completions": ["from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    if len(l) < 2:\n        return False\n    \n    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    \n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    '''\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    '''\n    if len(l) < 2:\n        return False\n    \n    seen = set()\n    \n    for number in l:\n        complement = -number\n        if complement in seen:\n            return True\n        seen.add(number)\n    \n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    '''\n    if len(l) < 2:\n        return False\n    \n    seen = set()\n    \n    for number in l:\n        complement = 0 - number\n        if complement in seen:\n            return True\n        seen.add(number)\n    \n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    '''\n    if len(l) < 2:\n        return False\n    \n    seen = set()\n    \n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    \n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    '''\n    seen = set()\n    for number in l:\n        complement = -number\n        if complement in seen:\n            return True\n        seen.add(number)\n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    if len(l) < 2:\n        return False\n    \n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n", "from typing import List\n## main.py\n\ndef pairs_sum_to_zero(l: list[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    '''\n    if len(l) < 2:\n        return False\n    \n    seen_numbers = set()\n    \n    for number in l:\n        if -number in seen_numbers:\n            return True\n        seen_numbers.add(number)\n    \n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    '''\n    if len(l) < 2:\n        return False\n    \n    seen_numbers = set()\n    \n    for number in l:\n        complement = 0 - number\n        if complement in seen_numbers:\n            return True\n        seen_numbers.add(number)\n    \n    return False\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that checks if there are two distinct elements in a list that sum to zero. The function should handle edge cases such as an empty list or a list with one element. The solution should be efficient and handle basic cases quickly.\nrequirement pool:\n- The main code should efficiently check for pairs summing to zero.\n- The function should handle edge cases like an empty list or a list with one element.\n- The solution should be optimized for performance.\n- The function should return False if no pairs are found.\n- The function should return True if pairs are found.\nTo implement the function efficiently, we will use a set to keep track of the numbers we've seen so far. This allows us to check in constant time whether the complement of the current number (i.e., the number that, when added to the current number, equals zero) has already been seen. This approach ensures that we only pass through the list once, making the solution both simple and performant.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the addition of two numbers in the list equals zero\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Iterate through the list of integers.\n    (2) For each integer, calculate its complement (i.e., the number that, when added to the current number, equals zero).\n    (3) Check if this complement has already been seen (i.e., is in the set of seen numbers).\n    (4) If the complement is found in the set, return `True` as we've found two distinct elements that sum to zero.\n    (5) If the iteration completes without finding such a pair, return `False`.\n\n# [edge case] \n    pairs_sum_to_zero([]) = False\n    Explanation: An empty list does not contain any elements, so there are no pairs to sum to zero.\n    pairs_sum_to_zero([0]) = False\n    Explanation: A list with one element (0) cannot have two distinct elements that sum to zero.\n    pairs_sum_to_zero([-1, 1]) = True\n    Explanation: The list contains two distinct elements, -1 and 1, which sum to zero.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(l) < 2:\n            return False\n        seen = set()\n        for num in l:\n            complement = -num\n            if complement in seen:\n                return True\n            seen.add(num)\n        return False\n", "requirement analysis:\nThe requirement is to check if there are two distinct elements in a list that sum to zero. The function should handle edge cases such as an empty list or a list with one element. The solution should be simple and efficient to ensure robustness and ease of use.\nrequirement pool:\n- The main code should efficiently check for pairs summing to zero.\n- The function should handle edge cases effectively.\n- Ensure the code is easy to understand and maintain.\n- Optimize the performance for large lists.\n- Include comments and docstrings for clarity.\nWe will use a set to keep track of the numbers we've seen so far. For each number in the list, we will check if the opposite of that number (to sum to zero) is already in the set. If it is, we return True. If we go through the whole list without finding such a pair, we return False. This approach ensures that we efficiently check for pairs summing to zero and handle edge cases effectively.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the two numbers added together equal zero\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Iterate through the list of integers.\n    (2) For each integer, calculate its opposite (to check if it sums to zero).\n    (3) Use a set to keep track of the integers we've seen so far.\n    (4) If the opposite of the current integer is in the set, return True.\n    (5) If the loop completes without finding such a pair, return False.\n\n# [edge case] \n    pairs_sum_to_zero([]) = False\n    Explanation: An empty list does not contain any pairs, so the expected output is False.\n    pairs_sum_to_zero([0]) = False\n    Explanation: A list with one element does not have two distinct elements to sum to zero, so the expected output is False.\n    pairs_sum_to_zero([-1, 1]) = False\n    Explanation: The list contains two elements that sum to zero (i.e., -1 and 1), but they are not distinct since they are the same element, so the expected output is False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic already covers the edge cases of an empty list and a list with one element.\n", "requirement analysis:\nThe requirement is to create a function that checks if there are two distinct elements in a list that sum to zero. The function should handle edge cases such as an empty list or a list with one element. The solution should be efficient and handle basic cases effectively.\nrequirement pool:\n- The main code should efficiently check for pairs that sum to zero.\n- The function should handle edge cases like an empty list or a list with one element.\n- Ensure the function is optimized for performance.\n- Provide clear and concise documentation for the function.\nTo implement the function efficiently, we will use a set to keep track of the numbers we have seen so far. This allows us to check in constant time whether the complement of the current number (i.e., the number that, when added to the current number, equals zero) has already been seen. This approach ensures that we can handle the list in linear time, making it efficient for large inputs.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the two numbers in the list should add up to 0\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through the list and use a set to keep track of the numbers seen so far. For each number, check if its complement (i.e., -number) is in the set. If it is, return True. If the loop completes without finding such a pair, return False.\n\n# [edge case] \n    pairs_sum_to_zero([]) = False\n    Explanation: An empty list cannot contain pairs, so the output is False.\n    pairs_sum_to_zero([0]) = False\n    Explanation: A list with one element cannot have two distinct elements that sum to zero, so the output is False.\n    pairs_sum_to_zero([-1, 1]) = False\n    Explanation: The list contains two elements that sum to zero (i.e., -1 and 1), but they are not distinct since they are the same element, so the output is False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan already covers these cases by checking the length of the list and ensuring there are at least two distinct elements.\n", "requirement analysis:\nThe requirement is to create a function that checks if there are two distinct elements in a list that sum to zero. The function should handle edge cases such as an empty list or a list with one element. The solution should be optimized to run in O(n) time complexity using a hash set for efficiency.\nrequirement pool:\n- Implement the function to check for pairs summing to zero\n- Ensure the function handles edge cases\n- Optimize the function for O(n) time complexity using a hash set\n- Enhance readability and maintainability of the code\nTo implement the function `pairs_sum_to_zero` efficiently, we will use a hash set to track the complements of each number in the list. This approach allows us to check for pairs in O(n) time complexity. We will also handle edge cases such as an empty list or a list with one element by returning appropriate boolean values.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the two numbers in the pair should add up to 0.\n    'distinct elements': means the two numbers in the pair should be different.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests using a hash set to track the complements of each number. Here's the detailed logic:\n    1. Initialize an empty hash set.\n    2. Iterate through the list of numbers.\n    3. For each number, calculate its complement (i.e., 0 - number).\n    4. Check if the complement is already in the hash set.\n    5. If it is, return True because we've found a pair that sums to zero.\n    6. If it is not, add the number to the hash set.\n    7. If the loop completes without finding such a pair, return False.\n\n# [edge case] \n    pairs_sum_to_zero([]) = False\n    Explanation: An empty list does not contain any pairs, so the function should return False.\n    pairs_sum_to_zero([0]) = False\n    Explanation: A list with one element does not contain any distinct pairs, so the function should return False.\n    pairs_sum_to_zero([1, -1]) = True\n    Explanation: The list contains the pair (1, -1) which sums to zero, so the function should return True.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan already covers these cases by checking the length of the list and returning False if the list is too short to contain a pair.\n", "requirement analysis:\nThe requirement is to check if there are any two distinct elements in the list that sum to zero. The function should handle edge cases such as an empty list or a list with one element. Optimization is suggested to achieve O(n) time complexity using a hash set.\nrequirement pool:\n- Implement the function to check for pairs summing to zero\n- Ensure the function handles edge cases\n- Optimize the function for large lists\n- Enhance readability and maintainability of the code\n- Include comments and docstrings for better understanding\nTo implement the function pairs_sum_to_zero, we will use a hash set to optimize the search for pairs of integers that sum to zero. This approach will ensure that the function runs in O(n) time complexity, making it efficient for large lists. We will also handle edge cases such as an empty list or a list with one element by returning False or checking the length of the list accordingly.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the two numbers added together equal zero\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests using a hash set to optimize the search for pairs of integers that sum to zero. This involves:\n    1. Checking if the list is empty or has only one element.\n    2. Using a hash set to store the complement of each number (i.e., `-number`).\n    3. Iterating through the list to check if any number exists in the hash set, indicating a pair that sums to zero.\n\n# [edge case] \n    pairs_sum_to_zero([]) = False\n    Explanation: An empty list does not contain any elements, so there are no pairs that can sum to zero.\n    pairs_sum_to_zero([0]) = False\n    Explanation: A list with one element (0) cannot have two distinct elements that sum to zero.\n    pairs_sum_to_zero([1, -1, 2, -2, 3]) = True\n    Explanation: The pairs (-1, 1), (-2, 2), and (3, -3) all sum to zero, with the pair (1, -1) being the first found.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The function can return False for empty lists and single-element lists directly from the initial checks.\n", "requirement analysis:\nThe requirement is to create a function that checks if there are two distinct elements in a list that sum to zero. The function should handle edge cases such as an empty list or a list with one element. Optimization to O(n) time complexity using a hash set is suggested for better performance.\nrequirement pool:\n- The main code should efficiently check for pairs summing to zero.\n- The function should handle edge cases effectively.\n- Optimize the function to run in O(n) time complexity.\nTo implement the function efficiently, we will use a hash set to keep track of the numbers we have seen so far. This approach allows us to check in constant time whether the complement of the current number (i.e., the number that, when added to the current number, equals zero) has already been seen. This method ensures that the function runs in O(n) time complexity, which is optimal for this problem.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the addition of two numbers in the list equals zero\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests using a hash set to keep track of the numbers seen so far. The steps include:\n    1. Iterate through the list of integers.\n    2. For each integer, calculate its complement (i.e., the number that, when added to the current number, equals zero).\n    3. Check if the complement has already been seen (i.e., exists in the hash set).\n    4. If the complement is found, return `True` as there are two distinct elements that sum to zero.\n    5. If the iteration completes without finding such a pair, return `False`.\n\n# [edge case] \n    pairs_sum_to_zero([]) = False\n    Explanation: An empty list does not contain any elements, so there are no pairs to sum to zero.\n    pairs_sum_to_zero([0]) = False\n    Explanation: A list with one element (0) cannot have two distinct elements that sum to zero.\n    pairs_sum_to_zero([1, -1]) = True\n    Explanation: The list contains two distinct elements, 1 and -1, which sum to zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan already covers these cases by checking the length of the list and ensuring there are at least two elements for a valid pair to sum to zero.\n", "requirement analysis:\nThe requirement is to create a function that checks if there are two distinct elements in a list that sum to zero. The function should handle edge cases such as an empty list or a list with one element. The solution should be efficient and easy to understand.\nrequirement pool:\n- The main code should efficiently check for pairs that sum to zero.\n- The function should handle edge cases such as an empty list or a list with one element.\n- The code should be well-documented for easy understanding and maintenance.\n- The function should be optimized for performance.\n- The user interface should be simple and intuitive.\nTo implement the function `pairs_sum_to_zero`, we will use a set to keep track of the numbers we have seen so far. This will allow us to check in constant time whether the complement of the current number (i.e., the number that, when added to the current number, equals zero) has already been seen. This approach ensures that the function is both efficient and easy to understand.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the sum of two numbers in the list equals zero\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n\n# [edge case] \n    pairs_sum_to_zero([]) = False\n    explanation: An empty list does not contain any elements, so it is impossible to find a pair that sums to zero.\n    pairs_sum_to_zero([0]) = False\n    explanation: A list with one element (0) cannot have two distinct elements that sum to zero.\n    pairs_sum_to_zero([-1, 1]) = True\n    explanation: The list contains two distinct elements, -1 and 1, which sum to zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic can handle them by checking the length of the list and iterating through the list to find the pairs.\n", "requirement analysis:\nThe requirement is to create a function that checks if there are two distinct elements in a list that sum to zero. This involves iterating through the list and checking each pair. The function should handle edge cases such as an empty list or a list with a single element. The solution should be efficient and robust.\nrequirement pool:\n- The main code should efficiently check for pairs that sum to zero.\n- The function should handle edge cases like empty lists and lists with one element.\n- Ensure the solution is optimized for performance.\n- Provide clear and concise documentation for the function.\nTo implement the function efficiently, we will use a set to keep track of the numbers we've seen so far. This allows us to check in constant time whether the complement of the current number (to sum to zero) has already been seen. This approach ensures that we only pass through the list once, making the solution O(n) in time complexity.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the two numbers in the list should add up to 0\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Iterate through the list and for each element, calculate its complement (i.e., 0 - element).\n    (2) Check if this complement is already in the set of seen numbers.\n    (3) If it is, return True because we've found two distinct elements that sum to zero.\n    (4) If it is not, add the current element to the set and continue.\n    (5) If the loop completes without finding such a pair, return False.\n\n# [edge case] \n    pairs_sum_to_zero([]) = False\n    Explanation: An empty list does not contain any elements, so there are no pairs to sum to zero.\n    pairs_sum_to_zero([0]) = False\n    Explanation: A list with one element does not have two distinct elements to sum to zero.\n    pairs_sum_to_zero([1, -1]) = True\n    Explanation: The list contains two distinct elements, 1 and -1, which sum to zero.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(l) < 2:\n            return False\n        (other code)\n", "requirement analysis:\nThe requirement is to check if there are any two distinct elements in the list that sum to zero. This is a common problem in coding challenges and should be approached with efficiency and clarity. Edge cases to consider include an empty list or a list with a single element.\nrequirement pool:\n- Implement the function to check for pairs summing to zero\n- Handle edge cases such as empty lists and lists with one element\n- Ensure the function is optimized for performance\n- Document the code for easy understanding and maintenance\n- Test the function with various inputs to ensure correctness\nTo implement the function `pairs_sum_to_zero`, we will use a straightforward approach that leverages Python's built-in list operations and a set for efficient lookups. The function will iterate through the list, checking if the negative of each element exists in a set to find pairs that sum to zero. This method ensures both simplicity and efficiency.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the two numbers added together equal zero\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n\n# [edge case] \n    pairs_sum_to_zero([]) = False\n    Explanation: An empty list cannot contain pairs, so the expected output is False.\n    pairs_sum_to_zero([0]) = False\n    Explanation: A list with one element cannot have two distinct elements that sum to zero, so the expected output is False.\n    pairs_sum_to_zero([-1, 1]) = False\n    Explanation: The list contains two elements that sum to zero, but they are not distinct since they are the same element, so the expected output is False.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(l) < 2:\n            return False\n        (other code)\n", "requirement analysis:\nThe requirement is to check if there are two distinct elements in a list that sum to zero. The function should handle edge cases such as an empty list or a list with one element. The solution should be efficient and handle basic cases effectively.\nrequirement pool:\n- Implement the function to check for pairs summing to zero\n- Ensure the function handles edge cases\n- Optimize the function for performance\n- Add documentation and tests for the function\n- Consider adding optional parameters for different sum values\nTo implement the function `pairs_sum_to_zero`, we will use a set to keep track of the numbers we have seen so far. This will allow us to check in constant time whether the complement of the current number (i.e., the number that, when added to the current number, equals zero) has already been seen. This approach ensures that we can efficiently check for pairs summing to zero without unnecessary computations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum to zero': means the two numbers in the list should add up to 0\n\n    'distinct elements': means the two numbers should be different in the list\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Iterate through the list of integers.\n    (2) For each integer, calculate its complement (i.e., the number that, when added to the current number, equals zero).\n    (3) Check if this complement has already been seen (i.e., if it exists in the set of seen numbers).\n    (4) If the complement has been seen, return `True` because we have found two distinct elements that sum to zero.\n    (5) If the loop completes without finding such a pair, return `False`.\n\n# [edge case] \n    pairs_sum_to_zero([]) = False\n    Explanation: An empty list does not contain any elements, so it's impossible to find a pair summing to zero.\n    pairs_sum_to_zero([0]) = False\n    Explanation: A list with one element (0) cannot have two distinct elements that sum to zero.\n    pairs_sum_to_zero([-1, 1]) = True\n    Explanation: The list contains two distinct elements, -1 and 1, which sum to zero.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(l) < 2:\n            return False\n        (other code)\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [126, 126, 126, 126, 126, 126, 126, 126, 126, 126], "completion": "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    '''\n    if len(l) < 2:\n        return False\n    \n    seen_numbers = set()\n    \n    for number in l:\n        complement = 0 - number\n        if complement in seen_numbers:\n            return True\n        seen_numbers.add(number)\n    \n    return False\n", "passed": true, "pass": true, "pass_num": 10, "round": 708, "repair_prompt": ["def pairs_sum_to_zero(l):\t\n'''    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    Consider edge cases, such as an empty list or a list with one element.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''", " def pairs_sum_to_zero(l):\n    '''    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    Consider edge cases, such as an empty list or a list with one element.\n    This function can be optimized to run in O(n) time complexity by using a hash set.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to", " def pairs_sum_to_zero(l):\n    '''    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    Consider edge cases, such as an empty list or a list with one element.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_"], "mutate_method": "add_1_sentence_at_end", "parent_index": 433}
