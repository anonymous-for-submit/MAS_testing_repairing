{"task_id": "HumanEval/27", "prompt": "def flip_case(string: str) -> str:\t\n'''For a specified string, invert lowercase letters to uppercase and uppercase letters to lowercase.\n>>> flip_case('Hello')\n    'hELLO'\n    '''", "entry_point": "flip_case", "canonical_solution": "    return string.swapcase()\n", "test": ["def check(flip_case):\n\tassert flip_case(\"=Uft>^xAJt~M\") == '=uFT>^XajT~m'", "def check(flip_case):\n\tassert flip_case(\"CsgXBCATeQmYHhTMBoGuEM dGUDqazbndCFMtLL vmY\") == 'cSGxbcatEqMyhHtmbOgUem DgudQAZBNDcfmTll VMy'", "def check(flip_case):\n\tassert flip_case(\"w\") == 'W'", "def check(flip_case):\n\tassert flip_case(\"eIgaNO JtyWwkDSdVTrVoqClhNFrHNqDBl UInCVrviH\") == 'EiGAno jTYwWKdsDvtRvOQcLHnfRhnQdbL uiNcvRVIh'", "def check(flip_case):\n\tassert flip_case(\"FdR\") == 'fDr'", "def check(flip_case):\n\tassert flip_case(\"tR#Et^#\") == 'Tr#eT^#'", "def check(flip_case):\n\tassert flip_case(\"L@j:tM-_?Fgc\") == 'l@J:Tm-_?fGC'", "def check(flip_case):\n\tassert flip_case(\"ez\") == 'EZ'", "def check(flip_case):\n\tassert flip_case(\"F_LHcfxbO\") == 'f_lhCFXBo'", "def check(flip_case):\n\tassert flip_case(\"xDFZwXjexGGcNsQGWKFfWrVIoHZYFFhWCRQJpnfL\") == 'XdfzWxJEXggCnSqgwkfFwRviOhzyffHwcrqjPNFl'", "def check(flip_case):\n\tassert flip_case(\"CnpipxUmlSdCSmHdbyDoMlbssWpLHcyKnJlsulPxWNPHi\") == 'cNPIPXuMLsDcsMhDBYdOmLBSSwPlhCYkNjLSULpXwnphI'", "def check(flip_case):\n\tassert flip_case(\"vqp\") == 'VQP'", "def check(flip_case):\n\tassert flip_case(\"f<SH\") == 'F<sh'", "def check(flip_case):\n\tassert flip_case(\"tBDUC ZKFZKtFVvqmhzUltjFzOWNXldpEHOAKJIp\") == 'Tbduc zkfzkTfvVQMHZuLTJfZownxLDPehoakjiP'", "def check(flip_case):\n\tassert flip_case(\"+>gY~\") == '+>Gy~'", "def check(flip_case):\n\tassert flip_case(\"BlmIOOJIkOnKWOtKuudPt  sUUPPNZZbQKiIHsNzFe\") == 'bLMioojiKoNkwoTkUUDpT  SuuppnzzBqkIihSnZfE'", "def check(flip_case):\n\tassert flip_case(\"JXCxNsvL\") == 'jxcXnSVl'", "def check(flip_case):\n\tassert flip_case(\"gq\") == 'GQ'", "def check(flip_case):\n\tassert flip_case(\"v\") == 'V'", "def check(flip_case):\n\tassert flip_case(\"RkocroIYw pMJxfpXxLucXAIvDjwlkIeJBCXJsxMAH\") == 'rKOCROiyW PmjXFPxXlUCxaiVdJWLKiEjbcxjSXmah'", "def check(flip_case):\n\tassert flip_case(\"JVKSQnhMMEPEXaJBBgEbTmkMCSWcebmFckHoj\") == 'jvksqNHmmepexAjbbGeBtMKmcswCEBMfCKhOJ'", "def check(flip_case):\n\tassert flip_case(\"gif\") == 'GIF'", "def check(flip_case):\n\tassert flip_case(\"g gCvDFeq NvBvqUNjjIldrkmFZCCTkJACipqozhZZ\") == 'G GcVdfEQ nVbVQunJJiLDRKMfzcctKjacIPQOZHzz'", "def check(flip_case):\n\tassert flip_case(\"rPxMsdbinpIxuZkSMNhmkYSJ DaYPCubXFgtuGbdtUXBR\") == 'RpXmSDBINPiXUzKsmnHMKysj dAypcUBxfGTUgBDTuxbr'", "def check(flip_case):\n\tassert flip_case(\"vzhEUikjmBtxkJcpaTRiuEurpoJXgLCmmSGttGsfOv\") == 'VZHeuIKJMbTXKjCPAtrIUeURPOjxGlcMMsgTTgSFoV'", "def check(flip_case):\n\tassert flip_case(\"ishBtMJcStzZVLuiiCdRPaVgPIsPMZkvSjJna\") == 'ISHbTmjCsTZzvlUIIcDrpAvGpiSpmzKVsJjNA'", "def check(flip_case):\n\tassert flip_case(\"qn\") == 'QN'", "def check(flip_case):\n\tassert flip_case(\"pCKgJaaQZHzRwxdwpqCZvoRlbvqLfrtdHlSrrqyl\") == 'PckGjAAqzhZrWXDWPQczVOrLBVQlFRTDhLsRRQYL'", "def check(flip_case):\n\tassert flip_case(\"k\") == 'K'", "def check(flip_case):\n\tassert flip_case(\"xOEweGnFamRzetSvZkSCZbKrjxTcGdWzTWBsbETPk auL\") == 'XoeWEgNfAMrZETsVzKsczBkRJXtCgDwZtwbSBetpK AUl'", "def check(flip_case):\n\tassert flip_case(\"WVlvlJraPwOUwyOOhbDSADCInroOCMzpaSnUubOH\") == 'wvLVLjRApWouWYooHBdsadciNROocmZPAsNuUBoh'", "def check(flip_case):\n\tassert flip_case(\"lb\") == 'LB'", "def check(flip_case):\n\tassert flip_case(\"AjUCdQIZXemhRaQZOkgJVvpYPUDPNmjKIPhQzZmAQIX\") == 'aJucDqizxEMHrAqzoKGjvVPypudpnMJkipHqZzMaqix'", "def check(flip_case):\n\tassert flip_case(\"~S*VzmzMvqpR\") == '~s*vZMZmVQPr'", "def check(flip_case):\n\tassert flip_case(\"BBx~!|/^\") == 'bbX~!|/^'", "def check(flip_case):\n\tassert flip_case(\"zg\") == 'ZG'", "def check(flip_case):\n\tassert flip_case(\"kydGvfiOVOgOxStzNHakGRVZUzaeQtEDgWqRJJpfe\") == 'KYDgVFIovoGoXsTZnhAKgrvzuZAEqTedGwQrjjPFE'", "def check(flip_case):\n\tassert flip_case(\"lhp\") == 'LHP'", "def check(flip_case):\n\tassert flip_case(\"jfu\") == 'JFU'", "def check(flip_case):\n\tassert flip_case(\"jbTsYZxZTBwOTezydywllWFUrvTWBHXpvMsIY\") == 'JBtSyzXztbWotEZYDYWLLwfuRVtwbhxPVmSiy'", "def check(flip_case):\n\tassert flip_case(\"vVvmxSIyqihZXowcxzQxqSKxpnCpSSkCXeRBXTHyMl\") == 'VvVMXsiYQIHzxOWCXZqXQskXPNcPssKcxErbxthYmL'", "def check(flip_case):\n\tassert flip_case(\"QwnaAlMgJSZcTaBgprrbFezVmYCdMsWyxskaPqenOH\") == 'qWNAaLmGjszCtAbGPRRBfEZvMycDmSwYXSKApQENoh'", "def check(flip_case):\n\tassert flip_case(\"o=c_/?QU~q\") == 'O=C_/?qu~Q'", "def check(flip_case):\n\tassert flip_case(\"ds\") == 'DS'", "def check(flip_case):\n\tassert flip_case(\"zdp\") == 'ZDP'", "def check(flip_case):\n\tassert flip_case(\"hd\") == 'HD'", "def check(flip_case):\n\tassert flip_case(\"jBVXuMXKDuzctqITdcXyikINVSCmKdXbcxhnT\") == 'JbvxUmxkdUZCTQitDCxYIKinvscMkDxBCXHNt'", "def check(flip_case):\n\tassert flip_case(\"ugd\") == 'UGD'", "def check(flip_case):\n\tassert flip_case(\"LAszIcfMteqqYNwFzpJQolmECkmMmMLiyWgtidbdJUaaA\") == 'laSZiCFmTEQQynWfZPjqOLMecKMmMmlIYwGTIDBDjuAAa'", "def check(flip_case):\n\tassert flip_case(\"RbUFL/M\") == 'rBufl/m'", "def check(flip_case):\n\tassert flip_case('Hello!') == 'hELLO!'", "def check(flip_case):\n\tassert flip_case(\"n\") == 'N'", "def check(flip_case):\n\tassert flip_case(\"WF~h/oG^\") == 'wf~H/Og^'", "def check(flip_case):\n\tassert flip_case(\"pzp\") == 'PZP'", "def check(flip_case):\n\tassert flip_case(\"+K|eG\") == '+k|Eg'", "def check(flip_case):\n\tassert flip_case(\"dzpm pZUpHNjdpIMw BmQd otqoasshKCFtpf\") == 'DZPM PzuPhnJDPimW bMqD OTQOASSHkcfTPF'", "def check(flip_case):\n\tassert flip_case(\"xmx\") == 'XMX'", "def check(flip_case):\n\tassert flip_case(\"*~=I\") == '*~=i'", "def check(flip_case):\n\tassert flip_case(\"d!C&e?Gl\") == 'D!c&E?gL'", "def check(flip_case):\n\tassert flip_case(\"QNANcSJRDzmQFD RdGOsUHyADvXPqBWXQQuDzqlQkYucV\") == 'qnanCsjrdZMqfd rDgoSuhYadVxpQbwxqqUdZQLqKyUCv'", "def check(flip_case):\n\tassert flip_case(\"#QSfHF:$&%\") == '#qsFhf:$&%'", "def check(flip_case):\n\tassert flip_case(\"?fTt><k\") == '?FtT><K'", "def check(flip_case):\n\tassert flip_case(\"rpd\") == 'RPD'", "def check(flip_case):\n\tassert flip_case(\"PnHqJfQuNAYhthlFbMAQuoFHTWWNssJuqEsyxCgEkcDUh\") == 'pNhQjFqUnayHTHLfBmaqUOfhtwwnSSjUQeSYXcGeKCduH'", "def check(flip_case):\n\tassert flip_case(\"j\") == 'J'", "def check(flip_case):\n\tassert flip_case(\"n|gOUwY~ruFD\") == 'N|GouWy~RUfd'", "def check(flip_case):\n\tassert flip_case(\"q\") == 'Q'", "def check(flip_case):\n\tassert flip_case(\"EELIBxoyBKMKLqdqCoaxKsaHDhVSyVFZKwIUD\") == 'eelibXOYbkmklQDQcOAXkSAhdHvsYvfzkWiud'", "def check(flip_case):\n\tassert flip_case(\"bRIcNFlGQxbUHHeXuOVT ZqmqxQEmgBrvEWGTokoHY\") == 'BriCnfLgqXBuhhExUovt zQMQXqeMGbRVewgtOKOhy'", "def check(flip_case):\n\tassert flip_case(\"a\") == 'A'", "def check(flip_case):\n\tassert flip_case(\"pez\") == 'PEZ'", "def check(flip_case):\n\tassert flip_case(\" rWGZAlqccMZVGnZysgdSulExviJwKbbHiwV\") == ' RwgzaLQCCmzvgNzYSGDsULeXVIjWkBBhIWv'", "def check(flip_case):\n\tassert flip_case(\"SURWTdsMjFvXSnFJFytHymfgEiDcmZREKgXr\") == 'surwtDSmJfVxsNfjfYThYMFGeIdCMzrekGxR'", "def check(flip_case):\n\tassert flip_case(\"u\") == 'U'", "def check(flip_case):\n\tassert flip_case(\"~zUkkeFy\") == '~ZuKKEfY'", "def check(flip_case):\n\tassert flip_case(\"h*U*\") == 'H*u*'", "def check(flip_case):\n\tassert flip_case(\"yr\") == 'YR'", "def check(flip_case):\n\tassert flip_case(\"agwaVXOuq\") == 'AGWAvxoUQ'", "def check(flip_case):\n\tassert flip_case(\"p AAnXuPeBbeTnNHDDLhugfDzDoSnd KMLFYIppPFKSX\") == 'P aaNxUpEbBEtNnhddlHUGFdZdOsND kmlfyiPPpfksx'", "def check(flip_case):\n\tassert flip_case(\"d<gG\") == 'D<Gg'", "def check(flip_case):\n\tassert flip_case(\"oz\") == 'OZ'", "def check(flip_case):\n\tassert flip_case(\"fbc\") == 'FBC'", "def check(flip_case):\n\tassert flip_case(\"tu\") == 'TU'", "def check(flip_case):\n\tassert flip_case(\"NyMDTZqvnnQa TTfqNoInjRIaYeFtiLyYLvQJ\") == 'nYmdtzQVNNqA ttFQnOiNJriAyEfTIlYylVqj'", "def check(flip_case):\n\tassert flip_case(\"x\") == 'X'", "def check(flip_case):\n\tassert flip_case(\"RvQa%\") == 'rVqA%'", "def check(flip_case):\n\tassert flip_case(\"YpaJZKDmVIGTvH MGarufiqirhCbiKMToFjBUzotRH\") == 'yPAjzkdMvigtVh mgARUFIQIRHcBIkmtOfJbuZOTrh'", "def check(flip_case):\n\tassert flip_case(\"u=>c\") == 'U=>C'", "def check(flip_case):\n\tassert flip_case(\"&b_H\") == '&B_h'", "def check(flip_case):\n\tassert flip_case(\"$<y+\") == '$<Y+'", "def check(flip_case):\n\tassert flip_case(\"dWqb\") == 'DwQB'", "def check(flip_case):\n\tassert flip_case(\"xv\") == 'XV'", "def check(flip_case):\n\tassert flip_case(\"/zl\") == '/ZL'", "def check(flip_case):\n\tassert flip_case('') == ''", "def check(flip_case):\n\tassert flip_case(\"lif\") == 'LIF'", "def check(flip_case):\n\tassert flip_case(\"pgj\") == 'PGJ'", "def check(flip_case):\n\tassert flip_case(\"DyMMLvwZlYNhTOjDhnsHoTNqrTRWSrFYFWaoimDxFFaiM\") == 'dYmmlVWzLynHtoJdHNShOtnQRtrwsRfyfwAOIMdXffAIm'", "def check(flip_case):\n\tassert flip_case(\"v*qeoJBLg<t&\") == 'V*QEOjblG<T&'", "def check(flip_case):\n\tassert flip_case(\"nVVa|^lsy\") == 'NvvA|^LSY'", "def check(flip_case):\n\tassert flip_case(\"MBsxRCmHzEltumRjfTmdmbspQjxySYLAQNAZPRyV\") == 'mbSXrcMhZeLTUMrJFtMDMBSPqJXYsylaqnazprYv'", "def check(flip_case):\n\tassert flip_case(\"NpFjCypU YkPuBLEfXMThREegzPXXT IgBpeyz \") == 'nPfJcYPu yKpUbleFxmtHreEGZpxxt iGbPEYZ '", "def check(flip_case):\n\tassert flip_case(\"pG<wNz>Y/\") == 'Pg<WnZ>y/'", "def check(flip_case):\n\tassert flip_case(\"uRCphX cuIYmaTkfFCGBJrVUsjMustykG WqKcSc\") == 'UrcPHx CUiyMAtKFfcgbjRvuSJmUSTYKg wQkCsC'", "def check(flip_case):\n\tassert flip_case(\"haP!tD\") == 'HAp!Td'", "def check(flip_case):\n\tassert flip_case(\"NwHrkzMqZmOzyNBPhYuSIdBfm CjlBUkCXIeiH\") == 'nWhRKZmQzMoZYnbpHyUsiDbFM cJLbuKcxiEIh'", "def check(flip_case):\n\tassert flip_case(\"|l&:hE%&\") == '|L&:He%&'", "def check(flip_case):\n\tassert flip_case(\"wdWVLKaFVwzCSyfAbTLGDiVKlkTUSWhVBTcWaNoUaq\") == 'WDwvlkAfvWZcsYFaBtlgdIvkLKtuswHvbtCwAnOuAQ'", "def check(flip_case):\n\tassert flip_case(\"+$#d\") == '+$#D'", "def check(flip_case):\n\tassert flip_case(\"bq\") == 'BQ'", "def check(flip_case):\n\tassert flip_case('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'", "def check(flip_case):\n\tassert flip_case(\"d\") == 'D'", "def check(flip_case):\n\tassert flip_case(\"rZLVWNROgXWjbDAxzXaGYLOqVnpKiMJLXAKpM\") == 'RzlvwnroGxwJBdaXZxAgyloQvNPkImjlxakPm'", "def check(flip_case):\n\tassert flip_case(\"r\") == 'R'", "def check(flip_case):\n\tassert flip_case(\"mka\") == 'MKA'", "def check(flip_case):\n\tassert flip_case(\"dTpPnvaddXtfDXGDaEPDaGkpESXxOLdIKySLcPdpU\") == 'DtPpNVADDxTFdxgdAepdAgKPesxXolDikYslCpDPu'", "def check(flip_case):\n\tassert flip_case(\"fy\") == 'FY'", "def check(flip_case):\n\tassert flip_case(\"lW|tBEn~^ri<\") == 'Lw|TbeN~^RI<'", "def check(flip_case):\n\tassert flip_case(\"qnwYFneaoNWuSxNXocoMEXDwcqVoGZdRInOEbC\") == 'QNWyfNEAOnwUsXnxOCOmexdWCQvOgzDriNoeBc'", "def check(flip_case):\n\tassert flip_case(\"hzy\") == 'HZY'", "def check(flip_case):\n\tassert flip_case(\"sqopQROxzNCHvAlaUuwHvOMsScjnCpmswtyi\") == 'SQOPqroXZnchVaLAuUWhVomSsCJNcPMSWTYI'", "def check(flip_case):\n\tassert flip_case(\"&Py@\") == '&pY@'", "def check(flip_case):\n\tassert flip_case(\"Q<x\") == 'q<X'", "def check(flip_case):\n\tassert flip_case(\"&|EuiuG\") == '&|eUIUg'", "def check(flip_case):\n\tassert flip_case(\"gO#yDMhnV\") == 'Go#YdmHNv'", "def check(flip_case):\n\tassert flip_case(\"GRb|DCu\") == 'grB|dcU'", "def check(flip_case):\n\tassert flip_case(\"pFEAIYkn|\") == 'PfeaiyKN|'"], "test_case_list": ["assert flip_case(\"=Uft>^xAJt~M\") == '=uFT>^XajT~m'", "assert flip_case(\"CsgXBCATeQmYHhTMBoGuEM dGUDqazbndCFMtLL vmY\") == 'cSGxbcatEqMyhHtmbOgUem DgudQAZBNDcfmTll VMy'", "assert flip_case(\"w\") == 'W'", "assert flip_case(\"eIgaNO JtyWwkDSdVTrVoqClhNFrHNqDBl UInCVrviH\") == 'EiGAno jTYwWKdsDvtRvOQcLHnfRhnQdbL uiNcvRVIh'", "assert flip_case(\"FdR\") == 'fDr'", "assert flip_case(\"tR#Et^#\") == 'Tr#eT^#'", "assert flip_case(\"L@j:tM-_?Fgc\") == 'l@J:Tm-_?fGC'", "assert flip_case(\"ez\") == 'EZ'", "assert flip_case(\"F_LHcfxbO\") == 'f_lhCFXBo'", "assert flip_case(\"xDFZwXjexGGcNsQGWKFfWrVIoHZYFFhWCRQJpnfL\") == 'XdfzWxJEXggCnSqgwkfFwRviOhzyffHwcrqjPNFl'", "assert flip_case(\"CnpipxUmlSdCSmHdbyDoMlbssWpLHcyKnJlsulPxWNPHi\") == 'cNPIPXuMLsDcsMhDBYdOmLBSSwPlhCYkNjLSULpXwnphI'", "assert flip_case(\"vqp\") == 'VQP'", "assert flip_case(\"f<SH\") == 'F<sh'", "assert flip_case(\"tBDUC ZKFZKtFVvqmhzUltjFzOWNXldpEHOAKJIp\") == 'Tbduc zkfzkTfvVQMHZuLTJfZownxLDPehoakjiP'", "assert flip_case(\"+>gY~\") == '+>Gy~'", "assert flip_case(\"BlmIOOJIkOnKWOtKuudPt  sUUPPNZZbQKiIHsNzFe\") == 'bLMioojiKoNkwoTkUUDpT  SuuppnzzBqkIihSnZfE'", "assert flip_case(\"JXCxNsvL\") == 'jxcXnSVl'", "assert flip_case(\"gq\") == 'GQ'", "assert flip_case(\"v\") == 'V'", "assert flip_case(\"RkocroIYw pMJxfpXxLucXAIvDjwlkIeJBCXJsxMAH\") == 'rKOCROiyW PmjXFPxXlUCxaiVdJWLKiEjbcxjSXmah'", "assert flip_case(\"JVKSQnhMMEPEXaJBBgEbTmkMCSWcebmFckHoj\") == 'jvksqNHmmepexAjbbGeBtMKmcswCEBMfCKhOJ'", "assert flip_case(\"gif\") == 'GIF'", "assert flip_case(\"g gCvDFeq NvBvqUNjjIldrkmFZCCTkJACipqozhZZ\") == 'G GcVdfEQ nVbVQunJJiLDRKMfzcctKjacIPQOZHzz'", "assert flip_case(\"rPxMsdbinpIxuZkSMNhmkYSJ DaYPCubXFgtuGbdtUXBR\") == 'RpXmSDBINPiXUzKsmnHMKysj dAypcUBxfGTUgBDTuxbr'", "assert flip_case(\"vzhEUikjmBtxkJcpaTRiuEurpoJXgLCmmSGttGsfOv\") == 'VZHeuIKJMbTXKjCPAtrIUeURPOjxGlcMMsgTTgSFoV'", "assert flip_case(\"ishBtMJcStzZVLuiiCdRPaVgPIsPMZkvSjJna\") == 'ISHbTmjCsTZzvlUIIcDrpAvGpiSpmzKVsJjNA'", "assert flip_case(\"qn\") == 'QN'", "assert flip_case(\"pCKgJaaQZHzRwxdwpqCZvoRlbvqLfrtdHlSrrqyl\") == 'PckGjAAqzhZrWXDWPQczVOrLBVQlFRTDhLsRRQYL'", "assert flip_case(\"k\") == 'K'", "assert flip_case(\"xOEweGnFamRzetSvZkSCZbKrjxTcGdWzTWBsbETPk auL\") == 'XoeWEgNfAMrZETsVzKsczBkRJXtCgDwZtwbSBetpK AUl'", "assert flip_case(\"WVlvlJraPwOUwyOOhbDSADCInroOCMzpaSnUubOH\") == 'wvLVLjRApWouWYooHBdsadciNROocmZPAsNuUBoh'", "assert flip_case(\"lb\") == 'LB'", "assert flip_case(\"AjUCdQIZXemhRaQZOkgJVvpYPUDPNmjKIPhQzZmAQIX\") == 'aJucDqizxEMHrAqzoKGjvVPypudpnMJkipHqZzMaqix'", "assert flip_case(\"~S*VzmzMvqpR\") == '~s*vZMZmVQPr'", "assert flip_case(\"BBx~!|/^\") == 'bbX~!|/^'", "assert flip_case(\"zg\") == 'ZG'", "assert flip_case(\"kydGvfiOVOgOxStzNHakGRVZUzaeQtEDgWqRJJpfe\") == 'KYDgVFIovoGoXsTZnhAKgrvzuZAEqTedGwQrjjPFE'", "assert flip_case(\"lhp\") == 'LHP'", "assert flip_case(\"jfu\") == 'JFU'", "assert flip_case(\"jbTsYZxZTBwOTezydywllWFUrvTWBHXpvMsIY\") == 'JBtSyzXztbWotEZYDYWLLwfuRVtwbhxPVmSiy'", "assert flip_case(\"vVvmxSIyqihZXowcxzQxqSKxpnCpSSkCXeRBXTHyMl\") == 'VvVMXsiYQIHzxOWCXZqXQskXPNcPssKcxErbxthYmL'", "assert flip_case(\"QwnaAlMgJSZcTaBgprrbFezVmYCdMsWyxskaPqenOH\") == 'qWNAaLmGjszCtAbGPRRBfEZvMycDmSwYXSKApQENoh'", "assert flip_case(\"o=c_/?QU~q\") == 'O=C_/?qu~Q'", "assert flip_case(\"ds\") == 'DS'", "assert flip_case(\"zdp\") == 'ZDP'", "assert flip_case(\"hd\") == 'HD'", "assert flip_case(\"jBVXuMXKDuzctqITdcXyikINVSCmKdXbcxhnT\") == 'JbvxUmxkdUZCTQitDCxYIKinvscMkDxBCXHNt'", "assert flip_case(\"ugd\") == 'UGD'", "assert flip_case(\"LAszIcfMteqqYNwFzpJQolmECkmMmMLiyWgtidbdJUaaA\") == 'laSZiCFmTEQQynWfZPjqOLMecKMmMmlIYwGTIDBDjuAAa'", "assert flip_case(\"RbUFL/M\") == 'rBufl/m'", "assert flip_case('Hello!') == 'hELLO!'", "assert flip_case(\"n\") == 'N'", "assert flip_case(\"WF~h/oG^\") == 'wf~H/Og^'", "assert flip_case(\"pzp\") == 'PZP'", "assert flip_case(\"+K|eG\") == '+k|Eg'", "assert flip_case(\"dzpm pZUpHNjdpIMw BmQd otqoasshKCFtpf\") == 'DZPM PzuPhnJDPimW bMqD OTQOASSHkcfTPF'", "assert flip_case(\"xmx\") == 'XMX'", "assert flip_case(\"*~=I\") == '*~=i'", "assert flip_case(\"d!C&e?Gl\") == 'D!c&E?gL'", "assert flip_case(\"QNANcSJRDzmQFD RdGOsUHyADvXPqBWXQQuDzqlQkYucV\") == 'qnanCsjrdZMqfd rDgoSuhYadVxpQbwxqqUdZQLqKyUCv'", "assert flip_case(\"#QSfHF:$&%\") == '#qsFhf:$&%'", "assert flip_case(\"?fTt><k\") == '?FtT><K'", "assert flip_case(\"rpd\") == 'RPD'", "assert flip_case(\"PnHqJfQuNAYhthlFbMAQuoFHTWWNssJuqEsyxCgEkcDUh\") == 'pNhQjFqUnayHTHLfBmaqUOfhtwwnSSjUQeSYXcGeKCduH'", "assert flip_case(\"j\") == 'J'", "assert flip_case(\"n|gOUwY~ruFD\") == 'N|GouWy~RUfd'", "assert flip_case(\"q\") == 'Q'", "assert flip_case(\"EELIBxoyBKMKLqdqCoaxKsaHDhVSyVFZKwIUD\") == 'eelibXOYbkmklQDQcOAXkSAhdHvsYvfzkWiud'", "assert flip_case(\"bRIcNFlGQxbUHHeXuOVT ZqmqxQEmgBrvEWGTokoHY\") == 'BriCnfLgqXBuhhExUovt zQMQXqeMGbRVewgtOKOhy'", "assert flip_case(\"a\") == 'A'", "assert flip_case(\"pez\") == 'PEZ'", "assert flip_case(\" rWGZAlqccMZVGnZysgdSulExviJwKbbHiwV\") == ' RwgzaLQCCmzvgNzYSGDsULeXVIjWkBBhIWv'", "assert flip_case(\"SURWTdsMjFvXSnFJFytHymfgEiDcmZREKgXr\") == 'surwtDSmJfVxsNfjfYThYMFGeIdCMzrekGxR'", "assert flip_case(\"u\") == 'U'", "assert flip_case(\"~zUkkeFy\") == '~ZuKKEfY'", "assert flip_case(\"h*U*\") == 'H*u*'", "assert flip_case(\"yr\") == 'YR'", "assert flip_case(\"agwaVXOuq\") == 'AGWAvxoUQ'", "assert flip_case(\"p AAnXuPeBbeTnNHDDLhugfDzDoSnd KMLFYIppPFKSX\") == 'P aaNxUpEbBEtNnhddlHUGFdZdOsND kmlfyiPPpfksx'", "assert flip_case(\"d<gG\") == 'D<Gg'", "assert flip_case(\"oz\") == 'OZ'", "assert flip_case(\"fbc\") == 'FBC'", "assert flip_case(\"tu\") == 'TU'", "assert flip_case(\"NyMDTZqvnnQa TTfqNoInjRIaYeFtiLyYLvQJ\") == 'nYmdtzQVNNqA ttFQnOiNJriAyEfTIlYylVqj'", "assert flip_case(\"x\") == 'X'", "assert flip_case(\"RvQa%\") == 'rVqA%'", "assert flip_case(\"YpaJZKDmVIGTvH MGarufiqirhCbiKMToFjBUzotRH\") == 'yPAjzkdMvigtVh mgARUFIQIRHcBIkmtOfJbuZOTrh'", "assert flip_case(\"u=>c\") == 'U=>C'", "assert flip_case(\"&b_H\") == '&B_h'", "assert flip_case(\"$<y+\") == '$<Y+'", "assert flip_case(\"dWqb\") == 'DwQB'", "assert flip_case(\"xv\") == 'XV'", "assert flip_case(\"/zl\") == '/ZL'", "assert flip_case('') == ''", "assert flip_case(\"lif\") == 'LIF'", "assert flip_case(\"pgj\") == 'PGJ'", "assert flip_case(\"DyMMLvwZlYNhTOjDhnsHoTNqrTRWSrFYFWaoimDxFFaiM\") == 'dYmmlVWzLynHtoJdHNShOtnQRtrwsRfyfwAOIMdXffAIm'", "assert flip_case(\"v*qeoJBLg<t&\") == 'V*QEOjblG<T&'", "assert flip_case(\"nVVa|^lsy\") == 'NvvA|^LSY'", "assert flip_case(\"MBsxRCmHzEltumRjfTmdmbspQjxySYLAQNAZPRyV\") == 'mbSXrcMhZeLTUMrJFtMDMBSPqJXYsylaqnazprYv'", "assert flip_case(\"NpFjCypU YkPuBLEfXMThREegzPXXT IgBpeyz \") == 'nPfJcYPu yKpUbleFxmtHreEGZpxxt iGbPEYZ '", "assert flip_case(\"pG<wNz>Y/\") == 'Pg<WnZ>y/'", "assert flip_case(\"uRCphX cuIYmaTkfFCGBJrVUsjMustykG WqKcSc\") == 'UrcPHx CUiyMAtKFfcgbjRvuSJmUSTYKg wQkCsC'", "assert flip_case(\"haP!tD\") == 'HAp!Td'", "assert flip_case(\"NwHrkzMqZmOzyNBPhYuSIdBfm CjlBUkCXIeiH\") == 'nWhRKZmQzMoZYnbpHyUsiDbFM cJLbuKcxiEIh'", "assert flip_case(\"|l&:hE%&\") == '|L&:He%&'", "assert flip_case(\"wdWVLKaFVwzCSyfAbTLGDiVKlkTUSWhVBTcWaNoUaq\") == 'WDwvlkAfvWZcsYFaBtlgdIvkLKtuswHvbtCwAnOuAQ'", "assert flip_case(\"+$#d\") == '+$#D'", "assert flip_case(\"bq\") == 'BQ'", "assert flip_case('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'", "assert flip_case(\"d\") == 'D'", "assert flip_case(\"rZLVWNROgXWjbDAxzXaGYLOqVnpKiMJLXAKpM\") == 'RzlvwnroGxwJBdaXZxAgyloQvNPkImjlxakPm'", "assert flip_case(\"r\") == 'R'", "assert flip_case(\"mka\") == 'MKA'", "assert flip_case(\"dTpPnvaddXtfDXGDaEPDaGkpESXxOLdIKySLcPdpU\") == 'DtPpNVADDxTFdxgdAepdAgKPesxXolDikYslCpDPu'", "assert flip_case(\"fy\") == 'FY'", "assert flip_case(\"lW|tBEn~^ri<\") == 'Lw|TbeN~^RI<'", "assert flip_case(\"qnwYFneaoNWuSxNXocoMEXDwcqVoGZdRInOEbC\") == 'QNWyfNEAOnwUsXnxOCOmexdWCQvOgzDriNoeBc'", "assert flip_case(\"hzy\") == 'HZY'", "assert flip_case(\"sqopQROxzNCHvAlaUuwHvOMsScjnCpmswtyi\") == 'SQOPqroXZnchVaLAuUWhVomSsCJNcPMSWTYI'", "assert flip_case(\"&Py@\") == '&pY@'", "assert flip_case(\"Q<x\") == 'q<X'", "assert flip_case(\"&|EuiuG\") == '&|eUIUg'", "assert flip_case(\"gO#yDMhnV\") == 'Go#YdmHNv'", "assert flip_case(\"GRb|DCu\") == 'grB|dcU'", "assert flip_case(\"pFEAIYkn|\") == 'PfeaiyKN|'"], "nl": " For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    ", "func": "def flip_case(string: str) -> str:", "examples": ">>> flip_case('Hello')\n    'hELLO'\n    ", "completions": ["from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Flips the case of each character in the input string.\n    \n    Args:\n        string (str): The input string to be flipped.\n    \n    Returns:\n        str: A new string with the case of each character flipped.\n    \"\"\"\n    flipped_string = \"\"\n    for char in string:\n        if char.isupper():\n            flipped_string += char.lower()\n        elif char.islower():\n            flipped_string += char.upper()\n        else:\n            flipped_string += char\n    return flipped_string\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Flips the case of each letter in the input string.\n    \n    Args:\n        string (str): The input string to be flipped.\n        \n    Returns:\n        str: A new string with the case of each letter flipped.\n    \"\"\"\n    result = []\n    for char in string:\n        if char.isupper():\n            result.append(char.lower())\n        elif char.islower():\n            result.append(char.upper())\n        else:\n            result.append(char)\n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Inverts the case of letters in the given string.\n    \n    Args:\n        string (str): The input string to be processed.\n    \n    Returns:\n        str: A new string with the case of letters inverted.\n    \"\"\"\n    result = []\n    for char in string:\n        if char.isupper():\n            result.append(char.lower())\n        elif char.islower():\n            result.append(char.upper())\n        else:\n            result.append(char)\n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Inverts the case of letters in a given string.\n    \n    Args:\n        string (str): The input string to be processed.\n    \n    Returns:\n        str: A new string with the case of letters inverted.\n    \"\"\"\n    result = []\n    for char in string:\n        if char.isupper():\n            result.append(char.lower())\n        elif char.islower():\n            result.append(char.upper())\n        else:\n            result.append(char)\n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    result = ''  # type: str\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Inverts the case of letters in the given string.\n    \n    Args:\n        string (str): The input string to be processed.\n    \n    Returns:\n        str: A new string with the case of letters inverted.\n    \"\"\"\n    result = []\n    for char in string:\n        if char.isupper():\n            result.append(char.lower())\n        elif char.islower():\n            result.append(char.upper())\n        else:\n            result.append(char)\n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Flips the case of each character in the input string.\n    \n    Args:\n        string (str): The input string to be flipped.\n    \n    Returns:\n        str: A new string with the case of each character flipped.\n    \"\"\"\n    flipped_string = \"\"\n    for char in string:\n        if char.isupper():\n            flipped_string += char.lower()\n        elif char.islower():\n            flipped_string += char.upper()\n        else:\n            flipped_string += char\n    return flipped_string\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Inverts the case of letters in a given string.\n    \n    Args:\n        string (str): The input string to be processed.\n    \n    Returns:\n        str: A new string with the case of letters inverted.\n    \"\"\"\n    result = []\n    for char in string:\n        if char.isupper():\n            result.append(char.lower())\n        elif char.islower():\n            result.append(char.upper())\n        else:\n            result.append(char)\n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Inverts the case of letters in the given string.\n    \n    Args:\n        string (str): The input string to be processed.\n    \n    Returns:\n        str: A new string with the case of letters inverted.\n    \"\"\"\n    result = []\n    for char in string:\n        if char.isupper():\n            result.append(char.lower())\n        elif char.islower():\n            result.append(char.upper())\n        else:\n            result.append(char)\n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Inverts the case of letters in the given string.\n    \n    Args:\n        string (str): The input string to be processed.\n    \n    Returns:\n        str: A new string with the case of letters inverted.\n    \"\"\"\n    result = []\n    for char in string:\n        if char.isupper():\n            result.append(char.lower())\n        elif char.islower():\n            result.append(char.upper())\n        else:\n            result.append(char)\n    return ''.join(result)\n"], "plans": ["requirement analysis:\nThe original requirement is to create a function that flips the case of letters in a given string. This is a simple yet useful function that can be used in various applications, including data processing and string manipulation tasks.\nrequirement pool:\n- The main code should correctly flip the case of each letter in the input string.\n- The function should handle both uppercase and lowercase letters.\n- The function should be efficient and handle large input strings.\n- The function should be tested for edge cases, such as empty strings or strings with only one type of letter.\n- The function should be documented with examples to help users understand how to use it.\nWe will implement the function `flip_case` using Python's built-in string manipulation capabilities. The function will iterate through each character in the input string, check if it is uppercase or lowercase, and then flip its case accordingly. This approach is efficient and leverages Python's simplicity and readability.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case inversion': This involves changing the case of each letter in the string from uppercase to lowercase and vice versa.\n    Explanation: The requirement asks for a function that will take a string and return a new string where all lowercase letters are converted to uppercase and all uppercase letters are converted to lowercase.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function `flip_case` can be implemented by iterating through each character in the input string, checking if it is uppercase or lowercase, and then flipping its case using Python's built-in string methods. Here's a possible implementation:\n\n    ```python\n    def flip_case(string: str) -> str:\n        flipped_string = \"\"\n        for char in string:\n            if char.isupper():\n                flipped_string += char.lower()\n            elif char.islower():\n                flipped_string += char.upper()\n            else:\n                flipped_string += char\n        return flipped_string\n    ```\n\n# [edge case] \n    flip_case('Python3.8') = 'pYTHON3.8'\n    Explanation: The function should handle non-alphabetic characters by leaving them unchanged. In this case, '3' and '8' remain as they are.\n    flip_case('') = ''\n    Explanation: An empty string should return an empty string, as there are no characters to flip.\n    flip_case('12345') = '12345'\n    Explanation: Numbers are not affected by the case inversion, so the function should return the string with all digits unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases, as the provided implementation already covers them. The function will return an empty string for an empty input and leave non-alphabetic characters unchanged.\n", "requirement analysis:\nThe original requirement is to create a function that flips the case of letters in a given string. This is a simple yet useful function that can be integrated into various applications. The function should handle both uppercase and lowercase letters, converting each to its opposite case.\nrequirement pool:\n- The main code should include a function named flip_case that takes a string as input and returns a new string with flipped cases.\n- The function should correctly invert lowercase letters to uppercase and uppercase letters to lowercase.\n- The function should handle edge cases such as empty strings or strings with no alphabetic characters.\n- The function should be tested with various inputs to ensure it works as expected.\nWe will implement the flip_case function using Python's built-in string manipulation capabilities. This approach is simple and leverages Python's flexibility to handle both uppercase and lowercase letters.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case inversion': This involves changing the case of each letter in the string from lowercase to uppercase and vice versa.\n    Explanation: The requirement asks for a function that will convert all lowercase letters to uppercase and all uppercase letters to lowercase in a given string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the `flip_case` function, we can use Python's built-in string methods. We will iterate through each character in the string, check if it is uppercase or lowercase, and then flip its case accordingly. Here's a step-by-step breakdown:\n    1. Initialize an empty string to store the result.\n    2. Iterate through each character in the input string.\n    3. Check if the character is uppercase or lowercase using the `isupper()` and `islower()` methods.\n    4. If the character is uppercase, convert it to lowercase and append to the result string. If it is lowercase, convert it to uppercase and append to the result string.\n    5. Return the result string.\n\n# [edge case] \n    flip_case('Python3.8') = 'pYTHON3.8'\n    Explanation: The function should handle mixed case letters and digits. The digits '3' and '8' remain unchanged as they are not letters.\n    flip_case('12345') = '12345'\n    Explanation: The function should ignore non-letter characters. Numbers in the string are not affected by the case inversion.\n    flip_case('@#$%^&*()') = '@#$%^&*()'\n    Explanation: The function should handle special characters without changing their case. Special characters are not letters and thus are not affected.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic already accounts for non-letter characters by leaving them unchanged.\n", "requirement analysis:\nThe requirement is to create a function that inverts the case of letters in a given string. This includes converting lowercase letters to uppercase and vice versa. The function should handle various types of input strings, including those with numbers and mixed cases. The output should be a new string with the case of each letter flipped.\nrequirement pool:\n- The main code should correctly flip the case of letters in a given string.\n- The function should handle strings with numbers and special characters without errors.\n- The output should be a new string with the case of each letter flipped.\n- The function should be efficient and handle large strings quickly.\n- The user interface should be simple and easy to use.\nWe will use Python's built-in string manipulation methods to create a function that inverts the case of letters in a given string. This approach is efficient and leverages Python's simplicity and readability.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case inversion': This involves changing lowercase letters to uppercase and uppercase letters to lowercase.\n    Explanation: The requirement asks for a function that will switch the case of each letter in a given string. This includes both alphabetic characters and leaves numeric characters unchanged.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `flip_case(string: str) -> str`, we can use Python's built-in string methods. We will iterate through each character in the string, check if it is uppercase or lowercase, and then switch its case accordingly. Here's a step-by-step breakdown:\n    1. Initialize an empty string to store the result.\n    2. Iterate through each character in the input string.\n    3. Check if the character is uppercase or lowercase using `str.isupper()` and `str.islower()`.\n    4. If the character is uppercase, convert it to lowercase and append to the result string. If it is lowercase, convert it to uppercase and append to the result string.\n    5. If the character is neither (e.g., a digit or symbol), append it as is to the result string.\n    6. Return the result string.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: If the input string is empty, the function should return an empty string since there are no characters to flip.\n    flip_case('Python123') = 'pYTHON123'\n    Explanation: The function should flip the case of alphabetic characters and leave numeric characters unchanged.\n    flip_case('ALLCAPS') = 'allcaps'\n    Explanation: The function should convert all uppercase letters to lowercase.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case of an empty string. The logic provided in the plan already covers this scenario by returning an empty string. For the other edge case, the provided logic will correctly handle the mixing of alphabetic characters and numeric characters.\n", "requirement analysis:\nThe requirement is to create a function that inverts the case of letters in a given string. This includes converting lowercase letters to uppercase and vice versa. The function should handle strings containing a mix of uppercase and lowercase letters, as well as strings with numbers or special characters. The function should be efficient and handle edge cases such as empty strings.\nrequirement pool:\n- The main code should correctly flip the case of letters in a string.\n- The function should handle strings with mixed case letters, numbers, and special characters.\n- The function should be efficient and handle edge cases, including empty strings.\nWe will use Python's built-in string manipulation methods to create a function that inverts the case of letters in a given string. This approach is efficient and leverages Python's simplicity and readability.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case inversion': This involves changing lowercase letters to uppercase and uppercase letters to lowercase.\n    Explanation: The requirement asks for a function that will switch the case of each letter in a given string. This includes both alphabetic characters and leaves numeric characters unchanged.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `flip_case(string: str) -> str`, we can use Python's built-in string methods. We will iterate through each character in the string, check if it is uppercase or lowercase, and then switch its case accordingly. Here's a step-by-step breakdown:\n    1. Initialize an empty string to store the result.\n    2. Iterate through each character in the input string.\n    3. Check if the character is uppercase or lowercase using `str.isupper()` and `str.islower()`.\n    4. If the character is uppercase, convert it to lowercase and append to the result string. If it is lowercase, convert it to uppercase and append to the result string.\n    5. If the character is neither (e.g., a digit or symbol), append it as is to the result string.\n    6. Return the result string.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: If the input string is empty, the function should return an empty string since there are no characters to flip.\n    flip_case('Python123') = 'pYTHON123'\n    Explanation: The function should invert the case of alphabetic characters and leave numeric characters unchanged.\n    flip_case('ALLCAPS') = 'allcaps'\n    Explanation: The function should convert all uppercase letters to lowercase.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case of an empty string. The logic provided in the plan already covers this case by returning an empty string if the input is empty. For the other edge case, the provided logic will correctly handle it by switching the case of alphabetic characters and leaving numeric characters unchanged.\n", "requirement analysis:\nThe original requirement is to create a function that flips the case of letters in a given string. This is a simple yet essential function that can be used in various applications, including data processing and string manipulation tasks.\nrequirement pool:\n- The main code should correctly flip the case of each letter in the input string.\n- The function should handle both uppercase and lowercase letters.\n- The function should be efficient and handle large input strings.\n- The function should be tested for edge cases, such as empty strings and strings with only one type of letter.\n- The function should be compatible with Python versions 3.x.\nWe will implement the function by iterating through each character in the input string and checking if it is uppercase or lowercase. Based on the check, we will convert the character to its opposite case. This approach ensures that the function handles both uppercase and lowercase letters correctly and efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case inversion': This refers to the process of converting uppercase letters to lowercase and vice versa.\n    Explanation: The requirement asks for a function that will take a string and return a new string where each letter's case is inverted. For example, 'A' becomes 'a' and 'b' becomes 'B'.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function, we will iterate through each character in the input string. For each character, we will check if it is uppercase or lowercase using the `isupper()` and `islower()` string methods. Based on the check, we will convert the character to its opposite case using the `upper()` and `lower()` methods.\n\n# [edge case] \n    flip_case('Python3.8') = 'pYTHON3.8'\n    Explanation: The function should invert the case of each letter while leaving non-letter characters unchanged. In this case, 'P' becomes 'p', 'y' becomes 'Y', and '3' and '8' remain the same.\n    flip_case('12345') = '12345'\n    Explanation: Since the input string contains only digits, none of the characters need to be inverted, so the output is the same as the input.\n    flip_case('Mixed123Case!') = 'mIXED123cASE!'\n    Explanation: The function will invert the case of each letter, leaving the digits and special characters unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the logic provided in the plan already covers all characters in the input string, including letters, digits, and special characters.\n", "requirement analysis:\nThe requirement is to create a function that inverts the case of letters in a given string. This includes converting lowercase letters to uppercase and vice versa. The function should handle various types of input strings, including those with numbers and mixed cases. The output should be a new string with the case of each letter flipped.\nrequirement pool:\n- The main code should correctly flip the case of letters in a given string.\n- The function should handle strings with numbers and special characters without errors.\n- The output should be a new string with the case of each letter flipped.\n- The function should be efficient and handle large strings quickly.\n- The user interface should be simple and easy to use.\nWe will use Python's built-in string manipulation methods to create a function that inverts the case of letters in a given string. This approach is efficient and leverages Python's simplicity and readability.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case inversion': This involves changing lowercase letters to uppercase and uppercase letters to lowercase.\n    Explanation: The requirement asks for a function that will switch the case of each letter in a given string. This includes both alphabetic characters and leaves numeric characters unchanged.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `flip_case(string: str) -> str`, we can use Python's built-in string methods. We will iterate through each character in the string, check if it is uppercase or lowercase, and then switch its case accordingly. Here's a step-by-step breakdown:\n    1. Initialize an empty string to store the result.\n    2. Iterate through each character in the input string.\n    3. Check if the character is uppercase or lowercase using `str.isupper()` and `str.islower()`.\n    4. If the character is uppercase, convert it to lowercase and append to the result string. If it is lowercase, convert it to uppercase and append to the result string.\n    5. If the character is neither (e.g., a digit or symbol), append it as is to the result string.\n    6. Return the result string.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: If the input string is empty, the function should return an empty string since there are no characters to flip.\n    flip_case('Python123') = 'pYTHON123'\n    Explanation: The function should flip the case of alphabetic characters and leave numeric characters unchanged.\n    flip_case('ALLCAPS') = 'allcaps'\n    Explanation: The function should convert all uppercase letters to lowercase.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case of an empty string. The logic provided in the plan already covers this scenario by returning an empty string. For the other edge case, the provided logic will correctly handle the mixing of alphabetic characters and numeric characters.\n", "requirement analysis:\nThe original requirement is to create a function that flips the case of letters in a given string. This is a simple yet useful function that can be used in various applications, including data processing and string manipulation tasks.\nrequirement pool:\n- The main code should correctly flip the case of each letter in the input string.\n- The function should handle both uppercase and lowercase letters.\n- The function should be efficient and handle large input strings.\n- The function should be tested for edge cases, such as empty strings or strings with only one type of letter.\n- The function should be documented with examples to help users understand how to use it.\nWe will implement the function `flip_case` using Python's built-in string manipulation capabilities. The function will iterate through each character in the input string, check if it is uppercase or lowercase, and then flip its case accordingly. This approach is efficient and leverages Python's simplicity and readability.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case inversion': This involves changing the case of each letter in the string from uppercase to lowercase and vice versa.\n    Explanation: The requirement asks for a function that will take a string and return a new string where all lowercase letters are converted to uppercase and all uppercase letters are converted to lowercase.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function `flip_case` can be implemented by iterating through each character in the input string, checking if it is uppercase or lowercase, and then flipping its case using Python's built-in string methods. Here's a possible implementation:\n\n    ```python\n    def flip_case(string: str) -> str:\n        flipped_string = \"\"\n        for char in string:\n            if char.isupper():\n                flipped_string += char.lower()\n            elif char.islower():\n                flipped_string += char.upper()\n            else:\n                flipped_string += char\n        return flipped_string\n    ```\n\n# [edge case] \n    flip_case('Python3.8') = 'pYTHON3.8'\n    Explanation: The function should handle non-alphabetic characters by leaving them unchanged. In this case, '3' and '8' remain as they are.\n    flip_case('') = ''\n    Explanation: An empty string should return an empty string, as there are no characters to flip.\n    flip_case('12345') = '12345'\n    Explanation: Numbers are not affected by the case inversion, so the function should return the string with all digits unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases, as the provided implementation already covers them. The function will return an empty string for an empty input and leave non-alphabetic characters unchanged.\n", "requirement analysis:\nThe requirement is to create a function that inverts the case of letters in a given string. This includes converting lowercase letters to uppercase and vice versa. The function should handle strings containing a mix of uppercase and lowercase letters, as well as strings with numbers or special characters. The function should be efficient and handle edge cases such as empty strings.\nrequirement pool:\n- The main code should correctly flip the case of letters in a string.\n- The function should handle strings with mixed case letters, numbers, and special characters.\n- The function should be efficient and handle edge cases, including empty strings.\nWe will use Python's built-in string manipulation methods to create a function that inverts the case of letters in a given string. This approach is efficient and leverages Python's simplicity and readability.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case inversion': This involves changing lowercase letters to uppercase and uppercase letters to lowercase.\n    Explanation: The requirement asks for a function that will switch the case of each letter in a given string. This includes both alphabetic characters and leaves numeric characters unchanged.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `flip_case(string: str) -> str`, we can use Python's built-in string methods. We will iterate through each character in the string, check if it is uppercase or lowercase, and then switch its case accordingly. Here's a step-by-step breakdown:\n    1. Initialize an empty string to store the result.\n    2. Iterate through each character in the input string.\n    3. Check if the character is uppercase or lowercase using `str.isupper()` and `str.islower()`.\n    4. If the character is uppercase, convert it to lowercase and append to the result string. If it is lowercase, convert it to uppercase and append to the result string.\n    5. If the character is neither (e.g., a digit or symbol), append it as is to the result string.\n    6. Return the result string.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: If the input string is empty, the function should return an empty string since there are no characters to flip.\n    flip_case('Python123') = 'pYTHON123'\n    Explanation: The function should invert the case of alphabetic characters and leave numeric characters unchanged.\n    flip_case('ALLCAPS') = 'allcaps'\n    Explanation: The function should convert all uppercase letters to lowercase.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case of an empty string. The logic provided in the plan already covers this case by returning an empty string if the input is empty. For the other edge case, the provided logic will correctly handle it by switching the case of alphabetic characters and leaving numeric characters unchanged.\n", "requirement analysis:\nThe requirement is to create a function that inverts the case of letters in a given string. This includes converting lowercase letters to uppercase and vice versa. The function should handle various types of input strings, including those with numbers and mixed cases. The output should be a new string with the case of each letter flipped.\nrequirement pool:\n- The main code should correctly flip the case of letters in a given string.\n- The function should handle strings with numbers and special characters without errors.\n- The output should be a new string with the case of each letter flipped.\n- The function should be efficient and handle large strings quickly.\n- The user interface should be simple and easy to use.\nWe will use Python's built-in string manipulation methods to create a function that inverts the case of letters in a given string. This approach is efficient and leverages Python's simplicity and readability.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case inversion': This involves changing lowercase letters to uppercase and uppercase letters to lowercase.\n    Explanation: The requirement asks for a function that will switch the case of each letter in a given string. This includes both alphabetic characters and leaves numeric characters unchanged.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `flip_case(string: str) -> str`, we can use Python's built-in string methods. We will iterate through each character in the string, check if it is uppercase or lowercase, and then switch its case accordingly. Here's a step-by-step breakdown:\n    1. Initialize an empty string to store the result.\n    2. Iterate through each character in the input string.\n    3. Check if the character is uppercase or lowercase using `str.isupper()` and `str.islower()`.\n    4. If the character is uppercase, convert it to lowercase and append to the result string. If it is lowercase, convert it to uppercase and append to the result string.\n    5. If the character is neither (e.g., a digit or symbol), append it as is to the result string.\n    6. Return the result string.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: If the input string is empty, the function should return an empty string since there are no characters to flip.\n    flip_case('Python123') = 'pYTHON123'\n    Explanation: The function should flip the case of alphabetic characters and leave numeric characters unchanged.\n    flip_case('ALLCAPS') = 'allcaps'\n    Explanation: The function should convert all uppercase letters to lowercase.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case of an empty string. The logic provided in the plan already covers this scenario by returning an empty string. For the other edge case, the provided logic will correctly handle the mixing of alphabetic characters and numeric characters.\n", "requirement analysis:\nThe requirement is to create a function that inverts the case of letters in a given string. This includes converting lowercase letters to uppercase and vice versa. The function should handle various types of input strings, including those with numbers and mixed cases. The output should be a new string with the case of each letter flipped.\nrequirement pool:\n- The main code should correctly flip the case of letters in a given string.\n- The function should handle strings with numbers and special characters without errors.\n- The output should be a new string with the case of each letter flipped.\n- The function should be efficient and handle large strings quickly.\n- The user interface should be simple and easy to use.\nWe will use Python's built-in string manipulation methods to create a function that inverts the case of letters in a given string. This approach is efficient and leverages Python's simplicity and readability.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case inversion': This involves changing lowercase letters to uppercase and uppercase letters to lowercase.\n    Explanation: The requirement asks for a function that will switch the case of each letter in a given string. This includes both alphabetic characters and leaves numeric characters unchanged.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `flip_case(string: str) -> str`, we can use Python's built-in string methods. We will iterate through each character in the string, check if it is uppercase or lowercase, and then switch its case accordingly. Here's a step-by-step breakdown:\n    1. Initialize an empty string to store the result.\n    2. Iterate through each character in the input string.\n    3. Check if the character is uppercase or lowercase using `str.isupper()` and `str.islower()`.\n    4. If the character is uppercase, convert it to lowercase and append to the result string. If it is lowercase, convert it to uppercase and append to the result string.\n    5. If the character is neither (e.g., a digit or symbol), append it as is to the result string.\n    6. Return the result string.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: If the input string is empty, the function should return an empty string since there are no characters to flip.\n    flip_case('Python123') = 'pYTHON123'\n    Explanation: The function should flip the case of alphabetic characters and leave numeric characters unchanged.\n    flip_case('ALLCAPS') = 'allcaps'\n    Explanation: The function should convert all uppercase letters to lowercase.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case of an empty string. The logic provided in the plan already covers this scenario by returning an empty string. For the other edge case, the provided logic will correctly handle the mixing of alphabetic characters and numeric characters.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [126, 126, 126, 126, 126, 126, 126, 126, 126, 126], "completion": "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Inverts the case of letters in the given string.\n    \n    Args:\n        string (str): The input string to be processed.\n    \n    Returns:\n        str: A new string with the case of letters inverted.\n    \"\"\"\n    result = []\n    for char in string:\n        if char.isupper():\n            result.append(char.lower())\n        elif char.islower():\n            result.append(char.upper())\n        else:\n            result.append(char)\n    return ''.join(result)\n", "passed": true, "pass": true, "pass_num": 10, "round": 577, "repair_prompt": ["def flip_case(string: str) -> str:\t\n'''For a specified string, invert lowercase letters to uppercase and uppercase letters to lowercase.\n>>> flip_case('Hello')\n    'hELLO'\n    '''", " def flip_case(string: str) -> str:\n    '''For a specified string, invert lowercase letters to uppercase and uppercase letters to lowercase.\n    >>> flip_case('Hello')\n        'hELLO'\n    >>> flip_case('Python')\n        'pYTHON'\n    >>> flip_case('12345')\n        '12345'\n    >>> flip_case('HeLLo WoRLd')\n        'hEllO wOrlD'\n    '''", " def flip_case(string: str) -> str:\n    '''For a specified string, invert lowercase letters to uppercase and uppercase letters to lowercase.\n    >>> flip_case('Hello')\n        'hELLO'\n    >>> flip_case('Python')\n        'pYTHON'\n    >>> flip_case('12345')\n        '12345'\n    >>> flip_case('HeLLo WoRLd')\n        'hEllO wOrlD'\n    '''"], "mutate_method": "rephrase_one", "parent_index": 265}
