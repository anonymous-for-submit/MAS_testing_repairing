{"task_id": "HumanEval/117", "prompt": "def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Make sure your function handles both uppercase and lowercase letters effectively.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", "entry_point": "select_words", "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "test": ["def check(select_words):\n\tassert select_words('eg aqk', 2) == ['aqk']", "def check(select_words):\n\tassert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "def check(select_words):\n\tassert select_words('syk', 6) == []", "def check(select_words):\n\tassert select_words('gw', 9) == []", "def check(select_words):\n\tassert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "def check(select_words):\n\tassert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "def check(select_words):\n\tassert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "def check(select_words):\n\tassert select_words('zGMhBC', 6) == ['zGMhBC']", "def check(select_words):\n\tassert select_words('kfohjsjunakqmmsx', 1) == []", "def check(select_words):\n\tassert select_words('KbpFfWgXZoVjXV', 1) == []", "def check(select_words):\n\tassert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "def check(select_words):\n\tassert select_words('kg', 1) == []", "def check(select_words):\n\tassert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "def check(select_words):\n\tassert select_words('xrbpxpncgqufqkq', 6) == []", "def check(select_words):\n\tassert select_words('sqgikswgssxsbwkl', 7) == []", "def check(select_words):\n\tassert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "def check(select_words):\n\tassert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "def check(select_words):\n\tassert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "def check(select_words):\n\tassert select_words('bnXA AjPVh', 5) == []", "def check(select_words):\n\tassert select_words('omnivbqgmavyqdgqssas', 6) == []", "def check(select_words):\n\tassert select_words('fmjizkhknnihqioic', 4) == []", "def check(select_words):\n\tassert select_words('lINKPOlFIImtg', 3) == []", "def check(select_words):\n\tassert select_words('nPxmyTd', 7) == ['nPxmyTd']", "def check(select_words):\n\tassert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "def check(select_words):\n\tassert select_words('mehochzpausf', 2) == []", "def check(select_words):\n\tassert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "def check(select_words):\n\tassert select_words('EGiDfM', 1) == []", "def check(select_words):\n\tassert select_words('mc', 7) == []", "def check(select_words):\n\tassert select_words('wzx', 5) == []", "def check(select_words):\n\tassert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "def check(select_words):\n\tassert select_words('xwkxcjffocow', 5) == []", "def check(select_words):\n\tassert select_words('dl', 5) == []", "def check(select_words):\n\tassert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "def check(select_words):\n\tassert select_words('ABIStgq', 5) == ['ABIStgq']", "def check(select_words):\n\tassert select_words('nb', 2) == ['nb']", "def check(select_words):\n\tassert select_words('ny', 2) == ['ny']", "def check(select_words):\n\tassert select_words('HWCLBC', 6) == ['HWCLBC']", "def check(select_words):\n\tassert select_words('uuh', 6) == []", "def check(select_words):\n\tassert select_words('uoubngttn', 3) == []", "def check(select_words):\n\tassert select_words('g', 5) == []", "def check(select_words):\n\tassert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "def check(select_words):\n\tassert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "def check(select_words):\n\tassert select_words('aztxoxesjkzqebhrfzw', 3) == []", "def check(select_words):\n\tassert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "def check(select_words):\n\tassert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "def check(select_words):\n\tassert select_words('tJzO PnCT', 3) == ['tJzO']", "def check(select_words):\n\tassert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "def check(select_words):\n\tassert select_words('qhwubvrfmwy', 2) == []", "def check(select_words):\n\tassert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "def check(select_words):\n\tassert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "def check(select_words):\n\tassert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "def check(select_words):\n\tassert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "def check(select_words):\n\tassert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "def check(select_words):\n\tassert select_words('r s rhhipmt', 6) == ['rhhipmt']", "def check(select_words):\n\tassert select_words('aDqyhePv', 6) == ['aDqyhePv']", "def check(select_words):\n\tassert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "def check(select_words):\n\tassert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "def check(select_words):\n\tassert select_words('aru', 5) == []", "def check(select_words):\n\tassert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "def check(select_words):\n\tassert select_words('SNeiILCez', 4) == []", "def check(select_words):\n\tassert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "def check(select_words):\n\tassert select_words('ySmjGAg', 6) == ['ySmjGAg']", "def check(select_words):\n\tassert select_words('bRJRZC', 3) == []", "def check(select_words):\n\tassert select_words('u', 1) == []", "def check(select_words):\n\tassert select_words('djucfuuizrjfvuzzo', 4) == []", "def check(select_words):\n\tassert select_words('dvYLMt', 6) == ['dvYLMt']", "def check(select_words):\n\tassert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "def check(select_words):\n\tassert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "def check(select_words):\n\tassert select_words('yp', 6) == []", "def check(select_words):\n\tassert select_words('v', 4) == []", "def check(select_words):\n\tassert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "def check(select_words):\n\tassert select_words('afrrguc', 5) == ['afrrguc']", "def check(select_words):\n\tassert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "def check(select_words):\n\tassert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "def check(select_words):\n\tassert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "def check(select_words):\n\tassert select_words('nh vu lcakrb', 1) == ['vu']", "def check(select_words):\n\tassert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "def check(select_words):\n\tassert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "def check(select_words):\n\tassert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "def check(select_words):\n\tassert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "def check(select_words):\n\tassert select_words('MjRnAErHPguQC', 1) == []", "def check(select_words):\n\tassert select_words('tmchxmttrgfdanq', 3) == []", "def check(select_words):\n\tassert select_words('jezkeorvxnruwhhwzxm', 7) == []", "def check(select_words):\n\tassert select_words('caurfxlpkygqxoknil', 4) == []", "def check(select_words):\n\tassert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "def check(select_words):\n\tassert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "def check(select_words):\n\tassert select_words('NSjIbZV', 2) == []", "def check(select_words):\n\tassert select_words('rPKhzIot', 6) == ['rPKhzIot']", "def check(select_words):\n\tassert select_words('ASDVzOVVDEdj J', 1) == ['J']", "def check(select_words):\n\tassert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "def check(select_words):\n\tassert select_words(' siweqafqot', 5) == []", "def check(select_words):\n\tassert select_words('xdQgsAHI', 5) == []", "def check(select_words):\n\tassert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "def check(select_words):\n\tassert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "def check(select_words):\n\tassert select_words('hguHoJGaaNwX', 3) == []", "def check(select_words):\n\tassert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "def check(select_words):\n\tassert select_words('choounwx', 5) == ['choounwx']", "def check(select_words):\n\tassert select_words('yue', 2) == []", "def check(select_words):\n\tassert select_words('DDdrgPy', 4) == []", "def check(select_words):\n\tassert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "def check(select_words):\n\tassert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "def check(select_words):\n\tassert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "def check(select_words):\n\tassert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "def check(select_words):\n\tassert select_words('Reg MuZcF', 4) == ['MuZcF']", "def check(select_words):\n\tassert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "def check(select_words):\n\tassert select_words('sl', 6) == []", "def check(select_words):\n\tassert select_words('IFKqNq ', 5) == ['IFKqNq']", "def check(select_words):\n\tassert select_words('lfspeijyudniowk', 1) == []", "def check(select_words):\n\tassert select_words('kogmgdnk', 7) == ['kogmgdnk']", "def check(select_words):\n\tassert select_words('nnchatjackywoavfwfps', 5) == []", "def check(select_words):\n\tassert select_words('d', 2) == []", "def check(select_words):\n\tassert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "def check(select_words):\n\tassert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "def check(select_words):\n\tassert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "def check(select_words):\n\tassert select_words('jopfxbbvlslmluypcdt', 3) == []", "def check(select_words):\n\tassert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "def check(select_words):\n\tassert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "def check(select_words):\n\tassert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "def check(select_words):\n\tassert select_words('etdrxwybqi', 1) == []", "def check(select_words):\n\tassert select_words('aVCSziOkLCLGizHcmC', 2) == []", "def check(select_words):\n\tassert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "def check(select_words):\n\tassert select_words('txXxge', 4) == []", "def check(select_words):\n\tassert select_words('kcpieuVjAOaxdpB', 4) == []", "def check(select_words):\n\tassert select_words('oh', 8) == []", "def check(select_words):\n\tassert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "def check(select_words):\n\tassert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "def check(select_words):\n\tassert select_words('eywh qxreeexrrhyovpwl', 7) == []", "def check(select_words):\n\tassert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "def check(select_words):\n\tassert select_words('asfwxvbzdfsrymc', 3) == []", "def check(select_words):\n\tassert select_words('nBmjWxiPV', 3) == []", "def check(select_words):\n\tassert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "test_case_list": ["assert select_words('eg aqk', 2) == ['aqk']", "assert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "assert select_words('syk', 6) == []", "assert select_words('gw', 9) == []", "assert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "assert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "assert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "assert select_words('zGMhBC', 6) == ['zGMhBC']", "assert select_words('kfohjsjunakqmmsx', 1) == []", "assert select_words('KbpFfWgXZoVjXV', 1) == []", "assert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "assert select_words('kg', 1) == []", "assert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "assert select_words('xrbpxpncgqufqkq', 6) == []", "assert select_words('sqgikswgssxsbwkl', 7) == []", "assert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "assert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "assert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "assert select_words('bnXA AjPVh', 5) == []", "assert select_words('omnivbqgmavyqdgqssas', 6) == []", "assert select_words('fmjizkhknnihqioic', 4) == []", "assert select_words('lINKPOlFIImtg', 3) == []", "assert select_words('nPxmyTd', 7) == ['nPxmyTd']", "assert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "assert select_words('mehochzpausf', 2) == []", "assert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "assert select_words('EGiDfM', 1) == []", "assert select_words('mc', 7) == []", "assert select_words('wzx', 5) == []", "assert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "assert select_words('xwkxcjffocow', 5) == []", "assert select_words('dl', 5) == []", "assert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "assert select_words('ABIStgq', 5) == ['ABIStgq']", "assert select_words('nb', 2) == ['nb']", "assert select_words('ny', 2) == ['ny']", "assert select_words('HWCLBC', 6) == ['HWCLBC']", "assert select_words('uuh', 6) == []", "assert select_words('uoubngttn', 3) == []", "assert select_words('g', 5) == []", "assert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "assert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "assert select_words('aztxoxesjkzqebhrfzw', 3) == []", "assert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "assert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "assert select_words('tJzO PnCT', 3) == ['tJzO']", "assert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "assert select_words('qhwubvrfmwy', 2) == []", "assert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "assert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "assert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "assert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "assert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "assert select_words('r s rhhipmt', 6) == ['rhhipmt']", "assert select_words('aDqyhePv', 6) == ['aDqyhePv']", "assert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "assert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "assert select_words('aru', 5) == []", "assert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "assert select_words('SNeiILCez', 4) == []", "assert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "assert select_words('ySmjGAg', 6) == ['ySmjGAg']", "assert select_words('bRJRZC', 3) == []", "assert select_words('u', 1) == []", "assert select_words('djucfuuizrjfvuzzo', 4) == []", "assert select_words('dvYLMt', 6) == ['dvYLMt']", "assert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "assert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "assert select_words('yp', 6) == []", "assert select_words('v', 4) == []", "assert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "assert select_words('afrrguc', 5) == ['afrrguc']", "assert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "assert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "assert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "assert select_words('nh vu lcakrb', 1) == ['vu']", "assert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "assert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "assert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "assert select_words('MjRnAErHPguQC', 1) == []", "assert select_words('tmchxmttrgfdanq', 3) == []", "assert select_words('jezkeorvxnruwhhwzxm', 7) == []", "assert select_words('caurfxlpkygqxoknil', 4) == []", "assert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "assert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "assert select_words('NSjIbZV', 2) == []", "assert select_words('rPKhzIot', 6) == ['rPKhzIot']", "assert select_words('ASDVzOVVDEdj J', 1) == ['J']", "assert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "assert select_words(' siweqafqot', 5) == []", "assert select_words('xdQgsAHI', 5) == []", "assert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "assert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "assert select_words('hguHoJGaaNwX', 3) == []", "assert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "assert select_words('choounwx', 5) == ['choounwx']", "assert select_words('yue', 2) == []", "assert select_words('DDdrgPy', 4) == []", "assert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "assert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "assert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "assert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "assert select_words('Reg MuZcF', 4) == ['MuZcF']", "assert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "assert select_words('sl', 6) == []", "assert select_words('IFKqNq ', 5) == ['IFKqNq']", "assert select_words('lfspeijyudniowk', 1) == []", "assert select_words('kogmgdnk', 7) == ['kogmgdnk']", "assert select_words('nnchatjackywoavfwfps', 5) == []", "assert select_words('d', 2) == []", "assert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "assert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "assert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "assert select_words('jopfxbbvlslmluypcdt', 3) == []", "assert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "assert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "assert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "assert select_words('etdrxwybqi', 1) == []", "assert select_words('aVCSziOkLCLGizHcmC', 2) == []", "assert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "assert select_words('txXxge', 4) == []", "assert select_words('kcpieuVjAOaxdpB', 4) == []", "assert select_words('oh', 8) == []", "assert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "assert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "assert select_words('eywh qxreeexrrhyovpwl', 7) == []", "assert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "assert select_words('asfwxvbzdfsrymc', 3) == []", "assert select_words('nBmjWxiPV', 3) == []", "assert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "nl": "Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    ", "func": "def select_words(s, n):", "examples": "Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    ", "completions": ["from typing import List\nimport re\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Selects words from the input string `s` that have exactly `n` consonants.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants the selected words must have.\n        \n    Returns:\n        List[str]: A list of words from `s` that have exactly `n` consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    # Normalize the case of the input string to ensure case-insensitivity\n    s = s.lower()\n    \n    # Define a regular expression to match words\n    word_pattern = re.compile(r'\\b\\w+\\b')\n    \n    # Find all words in the string\n    words = word_pattern.findall(s)\n    \n    # Function to count consonants in a word\n    def count_consonants(word: str) -> int:\n        vowels = 'aeiou'\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n    \n    # Filter words with exactly n consonants\n    result = [word for word in words if count_consonants(word) == n]\n    \n    return result\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words from the input string based on the number of consonants they contain.\n\n    Args:\n        s (str): The input string containing words.\n        n (int): The exact number of consonants that the words must contain.\n\n    Returns:\n        List[str]: A list of words from the input string that contain exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n\n    # Define a set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyz\")\n\n    # Split the string into words\n    words = s.split()\n\n    # Initialize an empty list to store result words\n    result_words = []\n\n    # Iterate through each word in the list\n    for word in words:\n        # Count the consonants in each word\n        consonant_count = sum(1 for char in word.lower() if char in consonants)\n\n        # Check if the count matches n\n        if consonant_count == n:\n            # If match, add the word to the result list\n            result_words.append(word)\n\n    # Return the filtered list\n    return result_words\n", "from typing import List\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    \n    def count_consonants(word: str) -> int:\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "from typing import List\n## main.py\nfrom typing import List\nimport re\n\ndef count_consonants(word: str) -> int:\n    \"\"\"\n    Count the number of consonants in a word.\n    \n    Args:\n        word (str): The word to count consonants in.\n        \n    Returns:\n        int: The number of consonants in the word.\n    \"\"\"\n    vowels = \"aeiou\"\n    return len([char for char in word.lower() if char.isalpha() and char not in vowels])\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants required in each word.\n        \n    Returns:\n        List[str]: A list of words that contain exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    words = re.findall(r'\\b\\w+\\b', s.lower())\n    return [word for word in words if count_consonants(word) == n]\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants.\n\n    Args:\n        s (str): The input string containing words.\n        n (int): The number of consonants that the words must contain.\n\n    Returns:\n        List[str]: A list of words that contain exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n\n    # Define the set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyz\")\n\n    # Convert the input string to lowercase\n    s = s.lower()\n\n    # Split the input string into words\n    words = s.split()\n\n    # Filter words with exactly n consonants\n    filtered_words = [word for word in words if sum(1 for char in word if char in consonants) == n]\n\n    return filtered_words\n", "from typing import List\n## main.py\n\nimport re\n\ndef count_consonants(word: str) -> int:\n    \"\"\"\n    Count the number of consonants in a word.\n    \n    Args:\n        word (str): The word to count consonants in.\n        \n    Returns:\n        int: The number of consonants in the word.\n    \"\"\"\n    vowels = \"aeiou\"\n    return len([char for char in word.lower() if char.isalpha() and char not in vowels])\n\ndef select_words(s: str, n: int) -> list[str]:\n    \"\"\"\n    Filters words based on the number of consonants they contain.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants a word must contain.\n        \n    Returns:\n        list[str]: A list of words that contain exactly `n` consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    words = re.findall(r'\\b\\w+\\b', s)\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    return filtered_words\n", "from typing import List\n## main.py\n\nimport re\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants they contain.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants a word must contain.\n        \n    Returns:\n        List[str]: A list of words from the input string that contain exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    # Define vowels and consonants\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    # Normalize the case of the input string\n    s = s.lower()\n    \n    # Split the string into words\n    words = s.split()\n    \n    # Filter words based on the number of consonants\n    filtered_words = []\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in word if char in consonants)\n        \n        # Check if the word contains exactly n consonants\n        if consonant_count == n:\n            filtered_words.append(word)\n    \n    return filtered_words\n", "from typing import List\n## main.py\n\nimport string\n\ndef select_words(s: str, n: int) -> list:\n    \"\"\"\n    Filters words based on the number of consonants.\n\n    Args:\n        s (str): The input string.\n        n (int): The number of consonants required in each word.\n\n    Returns:\n        list: A list of words that contain exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n\n    # Define a set of consonants\n    consonants = set(string.ascii_lowercase.replace('a', '').replace('e', '').replace('i', '').replace('o', '').replace('u', ''))\n\n    # Split the string into words\n    words = s.split()\n\n    # Filter words based on the number of consonants\n    filtered_words = [word for word in words if len([char for char in word.lower() if char in consonants]) == n]\n\n    return filtered_words\n", "from typing import List\n## main.py\n\ndef select_words(s: str, n: int) -> list:\n    \"\"\"\n    Filters words based on the number of consonants in the input string.\n\n    Args:\n        s (str): The input string containing words separated by spaces.\n        n (int): The number of consonants that a word must contain.\n\n    Returns:\n        list: A list of words from the input string that contain exactly `n` consonants.\n    \"\"\"\n    if not s:\n        return []\n\n    # Define a set of consonants\n    consonants = set('bcdfghjklmnpqrstvwxyz')\n\n    # Split the string into words\n    words = s.split()\n\n    # Filter words with exactly n consonants\n    filtered_words = [word for word in words if len([c for c in word.lower() if c in consonants]) == n]\n\n    return filtered_words\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words from the input string based on the number of consonants they contain.\n    \n    Args:\n        s (str): The input string containing words.\n        n (int): The exact number of consonants that the words must contain.\n        \n    Returns:\n        List[str]: A list of words from the input string that contain exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    # Define vowels\n    vowels = \"aeiou\"\n    \n    # Function to count consonants in a word\n    def count_consonants(word: str) -> int:\n        return sum(1 for char in word.lower() if char.isalpha() and char not in vowels)\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Filter words based on the number of consonants\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    \n    return filtered_words\n\n# Example usage:\n# print(select_words(\"Mary had a little lamb\", 5))  # Output: []\n# print(select_words(\"Hello world\", 0))  # Output: [\"Hello\", \"world\"]\n# print(select_words(\"\", 4))  # Output: []\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be able to handle both uppercase and lowercase letters and should return an empty list if the input string is empty. The function should be efficient and easy to understand.\nrequirement pool:\n- The main code should filter words based on the number of consonants.\n- The function should handle both uppercase and lowercase letters.\n- The function should return an empty list if the input string is empty.\n- The function should be efficient and easy to understand.\nTo implement the function `select_words(s, n)` efficiently and effectively, we will use Python's built-in capabilities along with the `re` module for regular expressions. The function will first normalize the case of the input string to ensure case-insensitivity. It will then use a regular expression to identify words and count the consonants in each word. Finally, it will filter and return the words that match the specified number of consonants.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case-insensitive': means that the function should treat uppercase and lowercase letters as the same.\n    'consonants': means the letters that are not vowels (a, e, i, o, u) in the English alphabet.\n\n# [phrase showing quantity relationship]\n    'exactly': means that the number of consonants in a word must match the given number n.\n\n# [degree adverb] \n    No degree adverb specifically mentioned, but the requirement emphasizes the importance of handling both uppercase and lowercase letters effectively.\n\n# [code logic]\n    To implement the function `select_words(s, n)`, we will follow these steps:\n    1. Normalize the case of the input string to ensure case-insensitivity.\n    2. Use a regular expression to identify words in the string.\n    3. Count the consonants in each word.\n    4. Filter and return the words that have exactly n consonants.\n\n# [edge case] \n    select_words(\"\", 4) = []\n    Explanation: The input string is empty, so there are no words to consider, and the function should return an empty list.\n\n    select_words(\"Hello world\", 4) = [\"world\"]\n    Explanation: The word \"world\" contains 3 consonants, but there is no word with exactly 4 consonants. The function should return an empty list.\n\n    select_words(\"Uncle sam\", 3) = [\"Uncle\"]\n    Explanation: The word \"Uncle\" contains 2 consonants, and \"sam\" contains 1 consonant. There is no word with exactly 3 consonants. The function should return [\"Uncle\"].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case of an empty string. The function already returns an empty list as expected.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle both uppercase and lowercase letters and return the words in the order they appear in the input string. The function should also return an empty list if the input string is empty.\nrequirement pool:\n- Implement the function to filter words by consonant count.\n- Ensure the function handles both uppercase and lowercase letters.\n- Return the words in the order they appear in the input string.\n- Handle the case where the input string is empty by returning an empty list.\n- Optimize the function for efficiency and performance.\nWe will use Python's built-in string manipulation methods and a simple function to filter words based on the number of consonants they contain. The function will iterate through the words in the input string, count the consonants in each word, and then return a list of words that match the specified consonant count.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants\n\n# [phrase showing quantity relationship]\n    'exactly': means that the word must have a specific number of consonants\n\n# [degree adverb] \n    No degree adverb specifically mentioned, but 'exactly' implies a specific quantity\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Split the string into words\n    - Count the consonants in each word\n    - Filter words based on the specified number of consonants\n    - Return the filtered list of words\n\n# [edge case] \n    select_words(\"\", 4) = []\n    Explanation: The string is empty, so there are no words to consider.\n    select_words(\"Hello world\", 0) = [\"Hello\", \"world\"]\n    Explanation: Words with zero consonants are \"Hello\" and \"world\" as they contain no vowels.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic can handle the case where the string is empty by returning an empty list.\n\n# [code logic]\n    - Split the string into words using `split()`\n    - Define a function to count consonants in a word\n    - Filter words using the consonant counting function\n    - Return the filtered list\n\n# [edge case] \n    select_words(\"Mary had a little lamb\", 4) = [\"little\"]\n    Explanation: \"little\" is the only word with exactly 4 consonants.\n    select_words(\"Mary had a little lamb\", 3) = [\"Mary\", \"lamb\"]\n    Explanation: \"Mary\" and \"lamb\" are the words with exactly 3 consonants.\n    select_words(\"simple white space\", 2) = []\n    Explanation: No word contains exactly 2 consonants.\n    select_words(\"Hello world\", 4) = [\"world\"]\n    Explanation: \"world\" is the only word with exactly 4 consonants.\n    select_words(\"Uncle sam\", 3) = [\"Uncle\"]\n    Explanation: \"Uncle\" is the only word with exactly 3 consonants.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic can handle the case where the string is empty by returning an empty list.\n", "requirement analysis:\nThe requirement is to create a function that filters words from a given string based on the number of consonants they contain. The function should be case-insensitive and should return the words in the order they appear in the input string. The function should also handle edge cases such as an empty input string.\nrequirement pool:\n- The main code should accurately filter words based on the number of consonants.\n- The function should be case-insensitive.\n- The function should return words in the order they appear in the input string.\n- The function should handle an empty input string and return an empty list.\n- The function should be efficient and handle edge cases.\nTo implement the function `select_words` that filters words based on the number of consonants they contain, we will use Python's built-in string manipulation methods and a simple list comprehension. The function will be case-insensitive and will return the words in the order they appear in the input string. We will also handle the edge case of an empty input string by returning an empty list.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants\n\n# [phrase showing quantity relationship]\n    'exactly': means that the word must have a specific number of consonants\n\n# [degree adverb] \n    No degree adverb specifically mentioned, but 'exactly' implies a specific quantity\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Split the string into words\n    - Define a function to count consonants in a word\n    - Use a list comprehension to filter words with exactly n consonants\n    - Return the filtered list\n\n# [edge case] \n    select_words(\"\", 4) = []\n    Explanation: The input string is empty, so there are no words to consider. The expected output is an empty list.\n    select_words(\"Hello world\", 0) = [\"Hello\", \"world\"]\n    Explanation: If n is 0, the function should return all words since they all contain 0 consonants. This includes words with no consonants, which is a valid case.\n    select_words(\"Mary had a little lamb\", 5) = []\n    Explanation: There are no words with exactly 5 consonants in the given string. The expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case of an empty string. The function already returns an empty list for such cases.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle both uppercase and lowercase letters and return an empty list if the input string is empty. The function should be efficient and easy to use.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function handles both uppercase and lowercase letters.\n- Return an empty list if the input string is empty.\n- Optimize the function for efficiency.\n- Develop a user-friendly interface for easy integration.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string manipulation capabilities and regular expressions for efficient filtering. The function will first split the input string into words, then filter these words based on the specified number of consonants. We will ensure that the function handles both uppercase and lowercase letters correctly by converting the input string to lowercase before processing.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants\n\n# [phrase showing quantity relationship]\n    'exactly': means that the word must have a specific number of consonants\n\n# [degree adverb] \n    No degree adverb specifically mentioned\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Steps to implement the function:\n    1. Split the input string into words.\n    2. Define a function to count the consonants in a word.\n    3. Filter words based on the number of consonants.\n    4. Return the filtered list of words.\n\n# [edge case] \n    select_words(\"\", 4) = []\n    Explanation: The input string is empty, so there are no words to filter. The expected output is an empty list.\n    select_words(\"Hello World\", 3) = [\"Hello\"]\n    Explanation: The word \"Hello\" contains exactly 3 consonants (H, l, l). Other words do not meet the criteria.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic can handle the case where the input string is empty by returning an empty list.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle both uppercase and lowercase letters and return an empty list if the input string is empty. The function should be efficient and easy to use.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function handles both uppercase and lowercase letters.\n- Return an empty list if the input string is empty.\n- Optimize the function for efficiency.\n- Develop a user-friendly interface for easy integration and usage.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string manipulation methods and a simple list comprehension. We will define a set of consonants and use it to check the number of consonants in each word. The function will handle both uppercase and lowercase letters by converting the input string to lowercase before processing.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n\n# [edge case] \n    select_words(\"\", 4) = []\n    explanation: The input string is empty, so there are no words to select.\n    select_words(\"Mary had a little lamb\", 4) = ['little']\n    explanation: The word 'little' contains exactly 4 consonants (l, t, t, l).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function will naturally return an empty list if the input string is empty.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle both uppercase and lowercase letters and return an empty list if the input string is empty. The function should be efficient and easy to use.\nrequirement pool:\n- The main code should accurately filter words based on the number of consonants.\n- The function should handle both uppercase and lowercase letters correctly.\n- The function should return an empty list if the input string is empty.\n- Ensure the function is efficient and works well with various input sizes.\n- Develop a user-friendly interface for easy integration and usage.\nTo implement the function `select_words(s, n)` that filters words based on the number of consonants they contain, we will use Python's built-in string manipulation capabilities and regular expressions for efficient filtering. The function will first split the input string into words, then filter these words based on the specified number of consonants. The function will handle both uppercase and lowercase letters effectively by converting the input string to lowercase before processing.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants and no more, no less\n\n# [phrase showing quantity relationship]\n    'exactly': means that the word must have a specific number of consonants, not more or less\n\n# [degree adverb] \n    No degree adverb specifically mentioned, but the requirement emphasizes the exact count of consonants\n\n# [code logic]\n    (1) Split the input string `s` into words.\n    (2) Convert the entire string to lowercase to handle both uppercase and lowercase letters uniformly.\n    (3) Define a function to count the consonants in a word.\n    (4) Filter the words to include only those with exactly `n` consonants.\n    (5) Return the list of filtered words.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to process, and the function should return an empty list.\n    select_words(\"Hello World\", 3) = [\"hello\"]\n    Explanation: The word \"hello\" contains exactly 3 consonants (h, l, l), while \"world\" contains 2 consonants. The function should return a list containing \"hello\" as it meets the criteria.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case of an empty string, as the function correctly returns an empty list.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be able to handle both uppercase and lowercase letters and should return an empty list if the input string is empty. The function should be efficient and easy to use.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function handles both uppercase and lowercase letters.\n- Return an empty list if the input string is empty.\n- Make the function efficient and easy to use.\n- Test the function with various inputs to ensure it works as expected.\nTo implement the function `select_words(s, n)` that filters words based on the number of consonants they contain, we will use Python's built-in string manipulation capabilities and regular expressions for efficient filtering. The function will first normalize the case of the input string to ensure case-insensitivity, then split the string into words, and finally filter these words based on the number of consonants they contain.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case-insensitive': means that the function should treat uppercase and lowercase letters as the same.\n    'consonants': means the letters that are not vowels (a, e, i, o, u) in the English alphabet.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n\n# [edge case] \n    select_words(\"\", 4) = []\n    explanation: The input string is empty, so there are no words to select.\n    select_words(\"Hello world\", 3) = []\n    explanation: There are no words in the string that contain exactly 3 consonants.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function will naturally return an empty list if the input string is empty.\n\nPlease provide the specific requirement and coding plan for the next prompt, and I will generate the detailed analysis based on the given format.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be able to handle both uppercase and lowercase letters and should return an empty list if the input string is empty. The function should be efficient and user-friendly.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function handles both uppercase and lowercase letters.\n- Return an empty list if the input string is empty.\n- Optimize the function for efficiency.\n- Develop a user-friendly interface for easy interaction.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string manipulation methods and a simple list comprehension. We will define a set of consonants and use it to count the consonants in each word. The function will be case-insensitive, handling both uppercase and lowercase letters effectively. It will return an empty list if the input string is empty.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'case-insensitivity': the function should treat uppercase and lowercase letters as the same\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Define a set of consonants\n    - Split the string into words\n    - Filter words based on the number of consonants\n    - Return the filtered list of words\n\n# [edge case] \n    select_words(\"\", 4) = []\n    explanation: The input string is empty, so the function should return an empty list.\n    select_words(\"Mary had a little lamb\", 4) = ['little']\n    explanation: The word 'little' contains exactly 4 consonants ('l', 't', 't', 'l').\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function will naturally return an empty list if the input string is empty.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should be able to handle both uppercase and lowercase letters and should return an empty list if the input string is empty. The function should be efficient and user-friendly.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function handles both uppercase and lowercase letters.\n- Return an empty list if the input string is empty.\n- Optimize the function for efficiency.\n- Develop a user-friendly interface for easy interaction.\nTo implement the function that filters words based on the number of consonants, we will use Python's built-in string manipulation methods and a simple list comprehension. We will define a set of consonants and use it to count the consonants in each word. The function will be case-insensitive, handling both uppercase and lowercase letters effectively. It will return an empty list if the input string is empty.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'case-insensitivity': the function should treat uppercase and lowercase letters as the same\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Split the string into words\n    - Define a set of consonants\n    - Use a list comprehension to filter words with exactly n consonants\n    - Ensure the function is case-insensitive by converting words to lowercase\n\n# [edge case] \n    select_words(\"\", 4) = []\n    explanation: The input string is empty, so the function should return an empty list.\n    select_words(\"Mary had a little lamb\", 4) = ['little']\n    explanation: The word 'little' contains exactly 4 consonants ('l', 't', 't', 'l'). Other words do not meet the criteria.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function will naturally return an empty list if the input string is empty.\n\n# [code logic]\n    - Split the string into words using `split()`\n    - Define a set of consonants `consonants = set('bcdfghjklmnpqrstvwxyz')`\n    - Use a list comprehension to filter words:\n        ```python\n        [word for word in words if len([c for c in word.lower() if c in consonants]) == n]\n        ```\n    - This comprehension counts the consonants in each word, converts the word to lowercase, and checks if the count matches `n`.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle both uppercase and lowercase letters and return the words in the order they appear in the input string. The function should also handle an empty string by returning an empty list.\nrequirement pool:\n- Implement the function to filter words by consonant count.\n- Ensure the function handles both uppercase and lowercase letters.\n- Return the words in the order they appear in the input string.\n- Handle an empty string by returning an empty list.\n- Optimize the function for efficiency.\nWe will use Python's built-in string manipulation methods and a simple list comprehension to filter words based on the number of consonants they contain. The function will first split the input string into words, then filter these words based on the specified number of consonants. The function will handle both uppercase and lowercase letters by converting the input string to lowercase before processing.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'consonants': letters that are not vowels (a, e, i, o, u)\n    'exactly n consonants': the word must contain exactly n consonants, no more, no less\n\n# [phrase showing quantity relationship]\n    'exactly': means that the word must have a specific number of consonants, not more or less\n\n# [degree adverb] \n    No degree adverb specifically mentioned, but the requirement emphasizes the exact count of consonants\n\n# [code logic]\n    (1) Split the input string into words.\n    (2) Convert the entire string to lowercase to handle case insensitivity.\n    (3) Define a function to count the number of consonants in a word.\n    (4) Use a list comprehension to filter words that have exactly n consonants.\n    (5) Return the filtered list of words.\n\n# [edge case] \n    select_words(\"\", 4) = []\n    Explanation: The input string is empty, so there are no words to process, and the function should return an empty list.\n    select_words(\"Hello world\", 0) = [\"Hello\", \"world\"]\n    Explanation: Words with zero consonants are allowed by the requirement. Both \"Hello\" and \"world\" have no consonants.\n    select_words(\"Mary had a little lamb\", 5) = []\n    Explanation: The word \"little\" has only 3 consonants, not 5. Therefore, it should not be included in the output list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case of an empty string. The function already correctly returns an empty list for such cases.\n"], "scores": [0.6466, 1.0, 1.0, 0.6466, 0.6466, 1.0, 0.6466, 1.0, 1.0, 1.0], "pass_results": [false, true, true, false, false, true, false, true, true, true], "pass_test_cases_num": [86, 133, 133, 86, 86, 133, 86, 133, 133, 133], "completion": "from typing import List\n## main.py\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words from the input string based on the number of consonants they contain.\n    \n    Args:\n        s (str): The input string containing words.\n        n (int): The exact number of consonants that the words must contain.\n        \n    Returns:\n        List[str]: A list of words from the input string that contain exactly n consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    # Define vowels\n    vowels = \"aeiou\"\n    \n    # Function to count consonants in a word\n    def count_consonants(word: str) -> int:\n        return sum(1 for char in word.lower() if char.isalpha() and char not in vowels)\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Filter words based on the number of consonants\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    \n    return filtered_words\n\n# Example usage:\n# print(select_words(\"Mary had a little lamb\", 5))  # Output: []\n# print(select_words(\"Hello world\", 0))  # Output: [\"Hello\", \"world\"]\n# print(select_words(\"\", 4))  # Output: []\n", "passed": true, "pass": true, "pass_num": 6, "round": 393, "repair_prompt": ["def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Make sure your function handles both uppercase and lowercase letters effectively.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", " def select_words(s, n):\t\n    '''Given a string s and a natural number n, you have been tasked to implement \n        a function that returns a list of all words from string s that contain exactly \n        n consonants, in order these words appear in the string s.\n        If the string s is empty then the function should return an empty list.\n        Note: you may assume the input string contains only letters and spaces.\n        Make sure your function handles both uppercase and lowercase letters effectively.\n    Examples:\n        select_words(\"Mary had a little lamb\", 4", " def select_words(s, n):\n    '''Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Make sure your function handles both uppercase and lowercase letters effectively.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==>"], "mutate_method": "add_1_sentence_at_end", "parent_index": 279}
