{"task_id": "HumanEval/27", "prompt": "def flip_case(string: str) -> str:\t\n'''For a given string, flip lowercase characters to uppercase and uppercase to lowercase. Ensure that all non-letter characters in the string remain unchanged after the transformation.\n>>> flip_case('Hello')\n    'hELLO'\n    '''", "entry_point": "flip_case", "canonical_solution": "    return string.swapcase()\n", "test": ["def check(flip_case):\n\tassert flip_case(\"=Uft>^xAJt~M\") == '=uFT>^XajT~m'", "def check(flip_case):\n\tassert flip_case(\"CsgXBCATeQmYHhTMBoGuEM dGUDqazbndCFMtLL vmY\") == 'cSGxbcatEqMyhHtmbOgUem DgudQAZBNDcfmTll VMy'", "def check(flip_case):\n\tassert flip_case(\"w\") == 'W'", "def check(flip_case):\n\tassert flip_case(\"eIgaNO JtyWwkDSdVTrVoqClhNFrHNqDBl UInCVrviH\") == 'EiGAno jTYwWKdsDvtRvOQcLHnfRhnQdbL uiNcvRVIh'", "def check(flip_case):\n\tassert flip_case(\"FdR\") == 'fDr'", "def check(flip_case):\n\tassert flip_case(\"tR#Et^#\") == 'Tr#eT^#'", "def check(flip_case):\n\tassert flip_case(\"L@j:tM-_?Fgc\") == 'l@J:Tm-_?fGC'", "def check(flip_case):\n\tassert flip_case(\"ez\") == 'EZ'", "def check(flip_case):\n\tassert flip_case(\"F_LHcfxbO\") == 'f_lhCFXBo'", "def check(flip_case):\n\tassert flip_case(\"xDFZwXjexGGcNsQGWKFfWrVIoHZYFFhWCRQJpnfL\") == 'XdfzWxJEXggCnSqgwkfFwRviOhzyffHwcrqjPNFl'", "def check(flip_case):\n\tassert flip_case(\"CnpipxUmlSdCSmHdbyDoMlbssWpLHcyKnJlsulPxWNPHi\") == 'cNPIPXuMLsDcsMhDBYdOmLBSSwPlhCYkNjLSULpXwnphI'", "def check(flip_case):\n\tassert flip_case(\"vqp\") == 'VQP'", "def check(flip_case):\n\tassert flip_case(\"f<SH\") == 'F<sh'", "def check(flip_case):\n\tassert flip_case(\"tBDUC ZKFZKtFVvqmhzUltjFzOWNXldpEHOAKJIp\") == 'Tbduc zkfzkTfvVQMHZuLTJfZownxLDPehoakjiP'", "def check(flip_case):\n\tassert flip_case(\"+>gY~\") == '+>Gy~'", "def check(flip_case):\n\tassert flip_case(\"BlmIOOJIkOnKWOtKuudPt  sUUPPNZZbQKiIHsNzFe\") == 'bLMioojiKoNkwoTkUUDpT  SuuppnzzBqkIihSnZfE'", "def check(flip_case):\n\tassert flip_case(\"JXCxNsvL\") == 'jxcXnSVl'", "def check(flip_case):\n\tassert flip_case(\"gq\") == 'GQ'", "def check(flip_case):\n\tassert flip_case(\"v\") == 'V'", "def check(flip_case):\n\tassert flip_case(\"RkocroIYw pMJxfpXxLucXAIvDjwlkIeJBCXJsxMAH\") == 'rKOCROiyW PmjXFPxXlUCxaiVdJWLKiEjbcxjSXmah'", "def check(flip_case):\n\tassert flip_case(\"JVKSQnhMMEPEXaJBBgEbTmkMCSWcebmFckHoj\") == 'jvksqNHmmepexAjbbGeBtMKmcswCEBMfCKhOJ'", "def check(flip_case):\n\tassert flip_case(\"gif\") == 'GIF'", "def check(flip_case):\n\tassert flip_case(\"g gCvDFeq NvBvqUNjjIldrkmFZCCTkJACipqozhZZ\") == 'G GcVdfEQ nVbVQunJJiLDRKMfzcctKjacIPQOZHzz'", "def check(flip_case):\n\tassert flip_case(\"rPxMsdbinpIxuZkSMNhmkYSJ DaYPCubXFgtuGbdtUXBR\") == 'RpXmSDBINPiXUzKsmnHMKysj dAypcUBxfGTUgBDTuxbr'", "def check(flip_case):\n\tassert flip_case(\"vzhEUikjmBtxkJcpaTRiuEurpoJXgLCmmSGttGsfOv\") == 'VZHeuIKJMbTXKjCPAtrIUeURPOjxGlcMMsgTTgSFoV'", "def check(flip_case):\n\tassert flip_case(\"ishBtMJcStzZVLuiiCdRPaVgPIsPMZkvSjJna\") == 'ISHbTmjCsTZzvlUIIcDrpAvGpiSpmzKVsJjNA'", "def check(flip_case):\n\tassert flip_case(\"qn\") == 'QN'", "def check(flip_case):\n\tassert flip_case(\"pCKgJaaQZHzRwxdwpqCZvoRlbvqLfrtdHlSrrqyl\") == 'PckGjAAqzhZrWXDWPQczVOrLBVQlFRTDhLsRRQYL'", "def check(flip_case):\n\tassert flip_case(\"k\") == 'K'", "def check(flip_case):\n\tassert flip_case(\"xOEweGnFamRzetSvZkSCZbKrjxTcGdWzTWBsbETPk auL\") == 'XoeWEgNfAMrZETsVzKsczBkRJXtCgDwZtwbSBetpK AUl'", "def check(flip_case):\n\tassert flip_case(\"WVlvlJraPwOUwyOOhbDSADCInroOCMzpaSnUubOH\") == 'wvLVLjRApWouWYooHBdsadciNROocmZPAsNuUBoh'", "def check(flip_case):\n\tassert flip_case(\"lb\") == 'LB'", "def check(flip_case):\n\tassert flip_case(\"AjUCdQIZXemhRaQZOkgJVvpYPUDPNmjKIPhQzZmAQIX\") == 'aJucDqizxEMHrAqzoKGjvVPypudpnMJkipHqZzMaqix'", "def check(flip_case):\n\tassert flip_case(\"~S*VzmzMvqpR\") == '~s*vZMZmVQPr'", "def check(flip_case):\n\tassert flip_case(\"BBx~!|/^\") == 'bbX~!|/^'", "def check(flip_case):\n\tassert flip_case(\"zg\") == 'ZG'", "def check(flip_case):\n\tassert flip_case(\"kydGvfiOVOgOxStzNHakGRVZUzaeQtEDgWqRJJpfe\") == 'KYDgVFIovoGoXsTZnhAKgrvzuZAEqTedGwQrjjPFE'", "def check(flip_case):\n\tassert flip_case(\"lhp\") == 'LHP'", "def check(flip_case):\n\tassert flip_case(\"jfu\") == 'JFU'", "def check(flip_case):\n\tassert flip_case(\"jbTsYZxZTBwOTezydywllWFUrvTWBHXpvMsIY\") == 'JBtSyzXztbWotEZYDYWLLwfuRVtwbhxPVmSiy'", "def check(flip_case):\n\tassert flip_case(\"vVvmxSIyqihZXowcxzQxqSKxpnCpSSkCXeRBXTHyMl\") == 'VvVMXsiYQIHzxOWCXZqXQskXPNcPssKcxErbxthYmL'", "def check(flip_case):\n\tassert flip_case(\"QwnaAlMgJSZcTaBgprrbFezVmYCdMsWyxskaPqenOH\") == 'qWNAaLmGjszCtAbGPRRBfEZvMycDmSwYXSKApQENoh'", "def check(flip_case):\n\tassert flip_case(\"o=c_/?QU~q\") == 'O=C_/?qu~Q'", "def check(flip_case):\n\tassert flip_case(\"ds\") == 'DS'", "def check(flip_case):\n\tassert flip_case(\"zdp\") == 'ZDP'", "def check(flip_case):\n\tassert flip_case(\"hd\") == 'HD'", "def check(flip_case):\n\tassert flip_case(\"jBVXuMXKDuzctqITdcXyikINVSCmKdXbcxhnT\") == 'JbvxUmxkdUZCTQitDCxYIKinvscMkDxBCXHNt'", "def check(flip_case):\n\tassert flip_case(\"ugd\") == 'UGD'", "def check(flip_case):\n\tassert flip_case(\"LAszIcfMteqqYNwFzpJQolmECkmMmMLiyWgtidbdJUaaA\") == 'laSZiCFmTEQQynWfZPjqOLMecKMmMmlIYwGTIDBDjuAAa'", "def check(flip_case):\n\tassert flip_case(\"RbUFL/M\") == 'rBufl/m'", "def check(flip_case):\n\tassert flip_case('Hello!') == 'hELLO!'", "def check(flip_case):\n\tassert flip_case(\"n\") == 'N'", "def check(flip_case):\n\tassert flip_case(\"WF~h/oG^\") == 'wf~H/Og^'", "def check(flip_case):\n\tassert flip_case(\"pzp\") == 'PZP'", "def check(flip_case):\n\tassert flip_case(\"+K|eG\") == '+k|Eg'", "def check(flip_case):\n\tassert flip_case(\"dzpm pZUpHNjdpIMw BmQd otqoasshKCFtpf\") == 'DZPM PzuPhnJDPimW bMqD OTQOASSHkcfTPF'", "def check(flip_case):\n\tassert flip_case(\"xmx\") == 'XMX'", "def check(flip_case):\n\tassert flip_case(\"*~=I\") == '*~=i'", "def check(flip_case):\n\tassert flip_case(\"d!C&e?Gl\") == 'D!c&E?gL'", "def check(flip_case):\n\tassert flip_case(\"QNANcSJRDzmQFD RdGOsUHyADvXPqBWXQQuDzqlQkYucV\") == 'qnanCsjrdZMqfd rDgoSuhYadVxpQbwxqqUdZQLqKyUCv'", "def check(flip_case):\n\tassert flip_case(\"#QSfHF:$&%\") == '#qsFhf:$&%'", "def check(flip_case):\n\tassert flip_case(\"?fTt><k\") == '?FtT><K'", "def check(flip_case):\n\tassert flip_case(\"rpd\") == 'RPD'", "def check(flip_case):\n\tassert flip_case(\"PnHqJfQuNAYhthlFbMAQuoFHTWWNssJuqEsyxCgEkcDUh\") == 'pNhQjFqUnayHTHLfBmaqUOfhtwwnSSjUQeSYXcGeKCduH'", "def check(flip_case):\n\tassert flip_case(\"j\") == 'J'", "def check(flip_case):\n\tassert flip_case(\"n|gOUwY~ruFD\") == 'N|GouWy~RUfd'", "def check(flip_case):\n\tassert flip_case(\"q\") == 'Q'", "def check(flip_case):\n\tassert flip_case(\"EELIBxoyBKMKLqdqCoaxKsaHDhVSyVFZKwIUD\") == 'eelibXOYbkmklQDQcOAXkSAhdHvsYvfzkWiud'", "def check(flip_case):\n\tassert flip_case(\"bRIcNFlGQxbUHHeXuOVT ZqmqxQEmgBrvEWGTokoHY\") == 'BriCnfLgqXBuhhExUovt zQMQXqeMGbRVewgtOKOhy'", "def check(flip_case):\n\tassert flip_case(\"a\") == 'A'", "def check(flip_case):\n\tassert flip_case(\"pez\") == 'PEZ'", "def check(flip_case):\n\tassert flip_case(\" rWGZAlqccMZVGnZysgdSulExviJwKbbHiwV\") == ' RwgzaLQCCmzvgNzYSGDsULeXVIjWkBBhIWv'", "def check(flip_case):\n\tassert flip_case(\"SURWTdsMjFvXSnFJFytHymfgEiDcmZREKgXr\") == 'surwtDSmJfVxsNfjfYThYMFGeIdCMzrekGxR'", "def check(flip_case):\n\tassert flip_case(\"u\") == 'U'", "def check(flip_case):\n\tassert flip_case(\"~zUkkeFy\") == '~ZuKKEfY'", "def check(flip_case):\n\tassert flip_case(\"h*U*\") == 'H*u*'", "def check(flip_case):\n\tassert flip_case(\"yr\") == 'YR'", "def check(flip_case):\n\tassert flip_case(\"agwaVXOuq\") == 'AGWAvxoUQ'", "def check(flip_case):\n\tassert flip_case(\"p AAnXuPeBbeTnNHDDLhugfDzDoSnd KMLFYIppPFKSX\") == 'P aaNxUpEbBEtNnhddlHUGFdZdOsND kmlfyiPPpfksx'", "def check(flip_case):\n\tassert flip_case(\"d<gG\") == 'D<Gg'", "def check(flip_case):\n\tassert flip_case(\"oz\") == 'OZ'", "def check(flip_case):\n\tassert flip_case(\"fbc\") == 'FBC'", "def check(flip_case):\n\tassert flip_case(\"tu\") == 'TU'", "def check(flip_case):\n\tassert flip_case(\"NyMDTZqvnnQa TTfqNoInjRIaYeFtiLyYLvQJ\") == 'nYmdtzQVNNqA ttFQnOiNJriAyEfTIlYylVqj'", "def check(flip_case):\n\tassert flip_case(\"x\") == 'X'", "def check(flip_case):\n\tassert flip_case(\"RvQa%\") == 'rVqA%'", "def check(flip_case):\n\tassert flip_case(\"YpaJZKDmVIGTvH MGarufiqirhCbiKMToFjBUzotRH\") == 'yPAjzkdMvigtVh mgARUFIQIRHcBIkmtOfJbuZOTrh'", "def check(flip_case):\n\tassert flip_case(\"u=>c\") == 'U=>C'", "def check(flip_case):\n\tassert flip_case(\"&b_H\") == '&B_h'", "def check(flip_case):\n\tassert flip_case(\"$<y+\") == '$<Y+'", "def check(flip_case):\n\tassert flip_case(\"dWqb\") == 'DwQB'", "def check(flip_case):\n\tassert flip_case(\"xv\") == 'XV'", "def check(flip_case):\n\tassert flip_case(\"/zl\") == '/ZL'", "def check(flip_case):\n\tassert flip_case('') == ''", "def check(flip_case):\n\tassert flip_case(\"lif\") == 'LIF'", "def check(flip_case):\n\tassert flip_case(\"pgj\") == 'PGJ'", "def check(flip_case):\n\tassert flip_case(\"DyMMLvwZlYNhTOjDhnsHoTNqrTRWSrFYFWaoimDxFFaiM\") == 'dYmmlVWzLynHtoJdHNShOtnQRtrwsRfyfwAOIMdXffAIm'", "def check(flip_case):\n\tassert flip_case(\"v*qeoJBLg<t&\") == 'V*QEOjblG<T&'", "def check(flip_case):\n\tassert flip_case(\"nVVa|^lsy\") == 'NvvA|^LSY'", "def check(flip_case):\n\tassert flip_case(\"MBsxRCmHzEltumRjfTmdmbspQjxySYLAQNAZPRyV\") == 'mbSXrcMhZeLTUMrJFtMDMBSPqJXYsylaqnazprYv'", "def check(flip_case):\n\tassert flip_case(\"NpFjCypU YkPuBLEfXMThREegzPXXT IgBpeyz \") == 'nPfJcYPu yKpUbleFxmtHreEGZpxxt iGbPEYZ '", "def check(flip_case):\n\tassert flip_case(\"pG<wNz>Y/\") == 'Pg<WnZ>y/'", "def check(flip_case):\n\tassert flip_case(\"uRCphX cuIYmaTkfFCGBJrVUsjMustykG WqKcSc\") == 'UrcPHx CUiyMAtKFfcgbjRvuSJmUSTYKg wQkCsC'", "def check(flip_case):\n\tassert flip_case(\"haP!tD\") == 'HAp!Td'", "def check(flip_case):\n\tassert flip_case(\"NwHrkzMqZmOzyNBPhYuSIdBfm CjlBUkCXIeiH\") == 'nWhRKZmQzMoZYnbpHyUsiDbFM cJLbuKcxiEIh'", "def check(flip_case):\n\tassert flip_case(\"|l&:hE%&\") == '|L&:He%&'", "def check(flip_case):\n\tassert flip_case(\"wdWVLKaFVwzCSyfAbTLGDiVKlkTUSWhVBTcWaNoUaq\") == 'WDwvlkAfvWZcsYFaBtlgdIvkLKtuswHvbtCwAnOuAQ'", "def check(flip_case):\n\tassert flip_case(\"+$#d\") == '+$#D'", "def check(flip_case):\n\tassert flip_case(\"bq\") == 'BQ'", "def check(flip_case):\n\tassert flip_case('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'", "def check(flip_case):\n\tassert flip_case(\"d\") == 'D'", "def check(flip_case):\n\tassert flip_case(\"rZLVWNROgXWjbDAxzXaGYLOqVnpKiMJLXAKpM\") == 'RzlvwnroGxwJBdaXZxAgyloQvNPkImjlxakPm'", "def check(flip_case):\n\tassert flip_case(\"r\") == 'R'", "def check(flip_case):\n\tassert flip_case(\"mka\") == 'MKA'", "def check(flip_case):\n\tassert flip_case(\"dTpPnvaddXtfDXGDaEPDaGkpESXxOLdIKySLcPdpU\") == 'DtPpNVADDxTFdxgdAepdAgKPesxXolDikYslCpDPu'", "def check(flip_case):\n\tassert flip_case(\"fy\") == 'FY'", "def check(flip_case):\n\tassert flip_case(\"lW|tBEn~^ri<\") == 'Lw|TbeN~^RI<'", "def check(flip_case):\n\tassert flip_case(\"qnwYFneaoNWuSxNXocoMEXDwcqVoGZdRInOEbC\") == 'QNWyfNEAOnwUsXnxOCOmexdWCQvOgzDriNoeBc'", "def check(flip_case):\n\tassert flip_case(\"hzy\") == 'HZY'", "def check(flip_case):\n\tassert flip_case(\"sqopQROxzNCHvAlaUuwHvOMsScjnCpmswtyi\") == 'SQOPqroXZnchVaLAuUWhVomSsCJNcPMSWTYI'", "def check(flip_case):\n\tassert flip_case(\"&Py@\") == '&pY@'", "def check(flip_case):\n\tassert flip_case(\"Q<x\") == 'q<X'", "def check(flip_case):\n\tassert flip_case(\"&|EuiuG\") == '&|eUIUg'", "def check(flip_case):\n\tassert flip_case(\"gO#yDMhnV\") == 'Go#YdmHNv'", "def check(flip_case):\n\tassert flip_case(\"GRb|DCu\") == 'grB|dcU'", "def check(flip_case):\n\tassert flip_case(\"pFEAIYkn|\") == 'PfeaiyKN|'"], "test_case_list": ["assert flip_case(\"=Uft>^xAJt~M\") == '=uFT>^XajT~m'", "assert flip_case(\"CsgXBCATeQmYHhTMBoGuEM dGUDqazbndCFMtLL vmY\") == 'cSGxbcatEqMyhHtmbOgUem DgudQAZBNDcfmTll VMy'", "assert flip_case(\"w\") == 'W'", "assert flip_case(\"eIgaNO JtyWwkDSdVTrVoqClhNFrHNqDBl UInCVrviH\") == 'EiGAno jTYwWKdsDvtRvOQcLHnfRhnQdbL uiNcvRVIh'", "assert flip_case(\"FdR\") == 'fDr'", "assert flip_case(\"tR#Et^#\") == 'Tr#eT^#'", "assert flip_case(\"L@j:tM-_?Fgc\") == 'l@J:Tm-_?fGC'", "assert flip_case(\"ez\") == 'EZ'", "assert flip_case(\"F_LHcfxbO\") == 'f_lhCFXBo'", "assert flip_case(\"xDFZwXjexGGcNsQGWKFfWrVIoHZYFFhWCRQJpnfL\") == 'XdfzWxJEXggCnSqgwkfFwRviOhzyffHwcrqjPNFl'", "assert flip_case(\"CnpipxUmlSdCSmHdbyDoMlbssWpLHcyKnJlsulPxWNPHi\") == 'cNPIPXuMLsDcsMhDBYdOmLBSSwPlhCYkNjLSULpXwnphI'", "assert flip_case(\"vqp\") == 'VQP'", "assert flip_case(\"f<SH\") == 'F<sh'", "assert flip_case(\"tBDUC ZKFZKtFVvqmhzUltjFzOWNXldpEHOAKJIp\") == 'Tbduc zkfzkTfvVQMHZuLTJfZownxLDPehoakjiP'", "assert flip_case(\"+>gY~\") == '+>Gy~'", "assert flip_case(\"BlmIOOJIkOnKWOtKuudPt  sUUPPNZZbQKiIHsNzFe\") == 'bLMioojiKoNkwoTkUUDpT  SuuppnzzBqkIihSnZfE'", "assert flip_case(\"JXCxNsvL\") == 'jxcXnSVl'", "assert flip_case(\"gq\") == 'GQ'", "assert flip_case(\"v\") == 'V'", "assert flip_case(\"RkocroIYw pMJxfpXxLucXAIvDjwlkIeJBCXJsxMAH\") == 'rKOCROiyW PmjXFPxXlUCxaiVdJWLKiEjbcxjSXmah'", "assert flip_case(\"JVKSQnhMMEPEXaJBBgEbTmkMCSWcebmFckHoj\") == 'jvksqNHmmepexAjbbGeBtMKmcswCEBMfCKhOJ'", "assert flip_case(\"gif\") == 'GIF'", "assert flip_case(\"g gCvDFeq NvBvqUNjjIldrkmFZCCTkJACipqozhZZ\") == 'G GcVdfEQ nVbVQunJJiLDRKMfzcctKjacIPQOZHzz'", "assert flip_case(\"rPxMsdbinpIxuZkSMNhmkYSJ DaYPCubXFgtuGbdtUXBR\") == 'RpXmSDBINPiXUzKsmnHMKysj dAypcUBxfGTUgBDTuxbr'", "assert flip_case(\"vzhEUikjmBtxkJcpaTRiuEurpoJXgLCmmSGttGsfOv\") == 'VZHeuIKJMbTXKjCPAtrIUeURPOjxGlcMMsgTTgSFoV'", "assert flip_case(\"ishBtMJcStzZVLuiiCdRPaVgPIsPMZkvSjJna\") == 'ISHbTmjCsTZzvlUIIcDrpAvGpiSpmzKVsJjNA'", "assert flip_case(\"qn\") == 'QN'", "assert flip_case(\"pCKgJaaQZHzRwxdwpqCZvoRlbvqLfrtdHlSrrqyl\") == 'PckGjAAqzhZrWXDWPQczVOrLBVQlFRTDhLsRRQYL'", "assert flip_case(\"k\") == 'K'", "assert flip_case(\"xOEweGnFamRzetSvZkSCZbKrjxTcGdWzTWBsbETPk auL\") == 'XoeWEgNfAMrZETsVzKsczBkRJXtCgDwZtwbSBetpK AUl'", "assert flip_case(\"WVlvlJraPwOUwyOOhbDSADCInroOCMzpaSnUubOH\") == 'wvLVLjRApWouWYooHBdsadciNROocmZPAsNuUBoh'", "assert flip_case(\"lb\") == 'LB'", "assert flip_case(\"AjUCdQIZXemhRaQZOkgJVvpYPUDPNmjKIPhQzZmAQIX\") == 'aJucDqizxEMHrAqzoKGjvVPypudpnMJkipHqZzMaqix'", "assert flip_case(\"~S*VzmzMvqpR\") == '~s*vZMZmVQPr'", "assert flip_case(\"BBx~!|/^\") == 'bbX~!|/^'", "assert flip_case(\"zg\") == 'ZG'", "assert flip_case(\"kydGvfiOVOgOxStzNHakGRVZUzaeQtEDgWqRJJpfe\") == 'KYDgVFIovoGoXsTZnhAKgrvzuZAEqTedGwQrjjPFE'", "assert flip_case(\"lhp\") == 'LHP'", "assert flip_case(\"jfu\") == 'JFU'", "assert flip_case(\"jbTsYZxZTBwOTezydywllWFUrvTWBHXpvMsIY\") == 'JBtSyzXztbWotEZYDYWLLwfuRVtwbhxPVmSiy'", "assert flip_case(\"vVvmxSIyqihZXowcxzQxqSKxpnCpSSkCXeRBXTHyMl\") == 'VvVMXsiYQIHzxOWCXZqXQskXPNcPssKcxErbxthYmL'", "assert flip_case(\"QwnaAlMgJSZcTaBgprrbFezVmYCdMsWyxskaPqenOH\") == 'qWNAaLmGjszCtAbGPRRBfEZvMycDmSwYXSKApQENoh'", "assert flip_case(\"o=c_/?QU~q\") == 'O=C_/?qu~Q'", "assert flip_case(\"ds\") == 'DS'", "assert flip_case(\"zdp\") == 'ZDP'", "assert flip_case(\"hd\") == 'HD'", "assert flip_case(\"jBVXuMXKDuzctqITdcXyikINVSCmKdXbcxhnT\") == 'JbvxUmxkdUZCTQitDCxYIKinvscMkDxBCXHNt'", "assert flip_case(\"ugd\") == 'UGD'", "assert flip_case(\"LAszIcfMteqqYNwFzpJQolmECkmMmMLiyWgtidbdJUaaA\") == 'laSZiCFmTEQQynWfZPjqOLMecKMmMmlIYwGTIDBDjuAAa'", "assert flip_case(\"RbUFL/M\") == 'rBufl/m'", "assert flip_case('Hello!') == 'hELLO!'", "assert flip_case(\"n\") == 'N'", "assert flip_case(\"WF~h/oG^\") == 'wf~H/Og^'", "assert flip_case(\"pzp\") == 'PZP'", "assert flip_case(\"+K|eG\") == '+k|Eg'", "assert flip_case(\"dzpm pZUpHNjdpIMw BmQd otqoasshKCFtpf\") == 'DZPM PzuPhnJDPimW bMqD OTQOASSHkcfTPF'", "assert flip_case(\"xmx\") == 'XMX'", "assert flip_case(\"*~=I\") == '*~=i'", "assert flip_case(\"d!C&e?Gl\") == 'D!c&E?gL'", "assert flip_case(\"QNANcSJRDzmQFD RdGOsUHyADvXPqBWXQQuDzqlQkYucV\") == 'qnanCsjrdZMqfd rDgoSuhYadVxpQbwxqqUdZQLqKyUCv'", "assert flip_case(\"#QSfHF:$&%\") == '#qsFhf:$&%'", "assert flip_case(\"?fTt><k\") == '?FtT><K'", "assert flip_case(\"rpd\") == 'RPD'", "assert flip_case(\"PnHqJfQuNAYhthlFbMAQuoFHTWWNssJuqEsyxCgEkcDUh\") == 'pNhQjFqUnayHTHLfBmaqUOfhtwwnSSjUQeSYXcGeKCduH'", "assert flip_case(\"j\") == 'J'", "assert flip_case(\"n|gOUwY~ruFD\") == 'N|GouWy~RUfd'", "assert flip_case(\"q\") == 'Q'", "assert flip_case(\"EELIBxoyBKMKLqdqCoaxKsaHDhVSyVFZKwIUD\") == 'eelibXOYbkmklQDQcOAXkSAhdHvsYvfzkWiud'", "assert flip_case(\"bRIcNFlGQxbUHHeXuOVT ZqmqxQEmgBrvEWGTokoHY\") == 'BriCnfLgqXBuhhExUovt zQMQXqeMGbRVewgtOKOhy'", "assert flip_case(\"a\") == 'A'", "assert flip_case(\"pez\") == 'PEZ'", "assert flip_case(\" rWGZAlqccMZVGnZysgdSulExviJwKbbHiwV\") == ' RwgzaLQCCmzvgNzYSGDsULeXVIjWkBBhIWv'", "assert flip_case(\"SURWTdsMjFvXSnFJFytHymfgEiDcmZREKgXr\") == 'surwtDSmJfVxsNfjfYThYMFGeIdCMzrekGxR'", "assert flip_case(\"u\") == 'U'", "assert flip_case(\"~zUkkeFy\") == '~ZuKKEfY'", "assert flip_case(\"h*U*\") == 'H*u*'", "assert flip_case(\"yr\") == 'YR'", "assert flip_case(\"agwaVXOuq\") == 'AGWAvxoUQ'", "assert flip_case(\"p AAnXuPeBbeTnNHDDLhugfDzDoSnd KMLFYIppPFKSX\") == 'P aaNxUpEbBEtNnhddlHUGFdZdOsND kmlfyiPPpfksx'", "assert flip_case(\"d<gG\") == 'D<Gg'", "assert flip_case(\"oz\") == 'OZ'", "assert flip_case(\"fbc\") == 'FBC'", "assert flip_case(\"tu\") == 'TU'", "assert flip_case(\"NyMDTZqvnnQa TTfqNoInjRIaYeFtiLyYLvQJ\") == 'nYmdtzQVNNqA ttFQnOiNJriAyEfTIlYylVqj'", "assert flip_case(\"x\") == 'X'", "assert flip_case(\"RvQa%\") == 'rVqA%'", "assert flip_case(\"YpaJZKDmVIGTvH MGarufiqirhCbiKMToFjBUzotRH\") == 'yPAjzkdMvigtVh mgARUFIQIRHcBIkmtOfJbuZOTrh'", "assert flip_case(\"u=>c\") == 'U=>C'", "assert flip_case(\"&b_H\") == '&B_h'", "assert flip_case(\"$<y+\") == '$<Y+'", "assert flip_case(\"dWqb\") == 'DwQB'", "assert flip_case(\"xv\") == 'XV'", "assert flip_case(\"/zl\") == '/ZL'", "assert flip_case('') == ''", "assert flip_case(\"lif\") == 'LIF'", "assert flip_case(\"pgj\") == 'PGJ'", "assert flip_case(\"DyMMLvwZlYNhTOjDhnsHoTNqrTRWSrFYFWaoimDxFFaiM\") == 'dYmmlVWzLynHtoJdHNShOtnQRtrwsRfyfwAOIMdXffAIm'", "assert flip_case(\"v*qeoJBLg<t&\") == 'V*QEOjblG<T&'", "assert flip_case(\"nVVa|^lsy\") == 'NvvA|^LSY'", "assert flip_case(\"MBsxRCmHzEltumRjfTmdmbspQjxySYLAQNAZPRyV\") == 'mbSXrcMhZeLTUMrJFtMDMBSPqJXYsylaqnazprYv'", "assert flip_case(\"NpFjCypU YkPuBLEfXMThREegzPXXT IgBpeyz \") == 'nPfJcYPu yKpUbleFxmtHreEGZpxxt iGbPEYZ '", "assert flip_case(\"pG<wNz>Y/\") == 'Pg<WnZ>y/'", "assert flip_case(\"uRCphX cuIYmaTkfFCGBJrVUsjMustykG WqKcSc\") == 'UrcPHx CUiyMAtKFfcgbjRvuSJmUSTYKg wQkCsC'", "assert flip_case(\"haP!tD\") == 'HAp!Td'", "assert flip_case(\"NwHrkzMqZmOzyNBPhYuSIdBfm CjlBUkCXIeiH\") == 'nWhRKZmQzMoZYnbpHyUsiDbFM cJLbuKcxiEIh'", "assert flip_case(\"|l&:hE%&\") == '|L&:He%&'", "assert flip_case(\"wdWVLKaFVwzCSyfAbTLGDiVKlkTUSWhVBTcWaNoUaq\") == 'WDwvlkAfvWZcsYFaBtlgdIvkLKtuswHvbtCwAnOuAQ'", "assert flip_case(\"+$#d\") == '+$#D'", "assert flip_case(\"bq\") == 'BQ'", "assert flip_case('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'", "assert flip_case(\"d\") == 'D'", "assert flip_case(\"rZLVWNROgXWjbDAxzXaGYLOqVnpKiMJLXAKpM\") == 'RzlvwnroGxwJBdaXZxAgyloQvNPkImjlxakPm'", "assert flip_case(\"r\") == 'R'", "assert flip_case(\"mka\") == 'MKA'", "assert flip_case(\"dTpPnvaddXtfDXGDaEPDaGkpESXxOLdIKySLcPdpU\") == 'DtPpNVADDxTFdxgdAepdAgKPesxXolDikYslCpDPu'", "assert flip_case(\"fy\") == 'FY'", "assert flip_case(\"lW|tBEn~^ri<\") == 'Lw|TbeN~^RI<'", "assert flip_case(\"qnwYFneaoNWuSxNXocoMEXDwcqVoGZdRInOEbC\") == 'QNWyfNEAOnwUsXnxOCOmexdWCQvOgzDriNoeBc'", "assert flip_case(\"hzy\") == 'HZY'", "assert flip_case(\"sqopQROxzNCHvAlaUuwHvOMsScjnCpmswtyi\") == 'SQOPqroXZnchVaLAuUWhVomSsCJNcPMSWTYI'", "assert flip_case(\"&Py@\") == '&pY@'", "assert flip_case(\"Q<x\") == 'q<X'", "assert flip_case(\"&|EuiuG\") == '&|eUIUg'", "assert flip_case(\"gO#yDMhnV\") == 'Go#YdmHNv'", "assert flip_case(\"GRb|DCu\") == 'grB|dcU'", "assert flip_case(\"pFEAIYkn|\") == 'PfeaiyKN|'"], "nl": " For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    ", "func": "def flip_case(string: str) -> str:", "examples": ">>> flip_case('Hello')\n    'hELLO'\n    ", "completions": ["from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Flips the case of all alphabetic characters in the input string.\n    \n    Args:\n        string (str): The input string to be processed.\n        \n    Returns:\n        str: A new string with the case of alphabetic characters flipped.\n    \"\"\"\n    result = []\n    \n    for char in string:\n        if char.islower():\n            result.append(char.upper())\n        elif char.isupper():\n            result.append(char.lower())\n        else:\n            result.append(char)\n    \n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    result = []\n    for char in string:\n        if char.islower():\n            result.append(char.upper())\n        elif char.isupper():\n            result.append(char.lower())\n        else:\n            result.append(char)\n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    result = []\n    for char in string:\n        if char.islower():\n            result.append(char.upper())\n        elif char.isupper():\n            result.append(char.lower())\n        else:\n            result.append(char)\n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Flips the case of characters in the input string.\n\n    Args:\n        string (str): The input string to be processed.\n\n    Returns:\n        str: The string with flipped cases of alphabetic characters.\n    \"\"\"\n    result = []\n    for char in string:\n        if char.islower():\n            result.append(char.upper())\n        elif char.isupper():\n            result.append(char.lower())\n        else:\n            result.append(char)\n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Flips the case of each letter in the input string.\n    \n    Args:\n        string (str): The input string to be flipped.\n    \n    Returns:\n        str: The string with flipped cases.\n    \"\"\"\n    result = []\n    for char in string:\n        if char.islower():\n            result.append(char.upper())\n        elif char.isupper():\n            result.append(char.lower())\n        else:\n            result.append(char)\n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    '''Flips the case of characters in the input string. Non-letter characters remain unchanged.'''\n    result = []\n    for char in string:\n        if char.isalpha():\n            result.append(char.swapcase())\n        else:\n            result.append(char)\n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    result = []\n    for char in string:\n        if char.islower():\n            result.append(char.upper())\n        elif char.isupper():\n            result.append(char.lower())\n        else:\n            result.append(char)\n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    '''Flips the case of characters in the input string. Non-letter characters remain unchanged.'''\n    result = []\n    for char in string:\n        if char.isalpha():\n            result.append(char.swapcase())\n        else:\n            result.append(char)\n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    '''Flips the case of characters in the input string. Non-letter characters remain unchanged.'''\n    result = []\n    for char in string:\n        if char.isalpha():\n            result.append(char.swapcase())\n        else:\n            result.append(char)\n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Flips the case of characters in the input string.\n\n    Args:\n        string (str): The input string to be processed.\n\n    Returns:\n        str: The string with flipped cases of alphabetic characters.\n    \"\"\"\n    result = []\n    for char in string:\n        if char.islower():\n            result.append(char.upper())\n        elif char.isupper():\n            result.append(char.lower())\n        else:\n            result.append(char)\n    return ''.join(result)\n"], "plans": ["requirement analysis:\nThe original requirement is to flip the case of characters in a string, leaving non-letter characters unchanged. This is a straightforward task that involves checking each character and flipping its case if it's a letter. The requirement is clear and concise, providing a clear example of expected output.\nrequirement pool:\n- Implement the function to flip the case of characters in a string\n- Ensure non-letter characters remain unchanged\n- Test the function with various inputs to ensure it works as expected\nWe will use Python's built-in string manipulation methods to flip the case of characters in a string. Specifically, we will iterate through each character in the string, check if it's a letter, and then flip its case accordingly. Non-letter characters will remain unchanged.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case flipping': This involves changing lowercase characters to uppercase and uppercase characters to lowercase, while leaving non-letter characters unchanged.\n    Explanation: The requirement specifies that the function should transform the case of alphabetic characters in the input string, leaving all other characters (non-letters) untouched.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `flip_case(string: str) -> str`, we can follow these steps:\n    1. Initialize an empty string to store the result.\n    2. Iterate through each character in the input string.\n    3. Check if the character is a letter.\n        - If it's lowercase, convert it to uppercase.\n        - If it's uppercase, convert it to lowercase.\n        - If it's not a letter, leave it unchanged.\n    4. Append the transformed character to the result string.\n    5. Return the result string after the iteration is complete.\n\n# [edge case] \n    flip_case('Python3.8') = 'pYTHON3.8'\n    Explanation: The input string contains a number '3' and a period '.', which are not letters. They should remain unchanged in the output.\n    flip_case('12345') = '12345'\n    Explanation: The input string contains only digits, so no characters need to be flipped.\n    flip_case('@#$%^&*()') = '@#$%^&*()'\n    Explanation: The input string contains only special characters, none of which are letters. Therefore, they remain unchanged in the output.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases, as the core logic already accounts for non-letter characters by leaving them unchanged.\n", "requirement analysis:\nThe original requirement is to flip the case of characters in a string, leaving non-letter characters unchanged. This is a straightforward task that involves checking each character and flipping its case if it's a letter. The requirement is clear and concise, providing a clear example of expected output.\nrequirement pool:\n- Implement the function to flip the case of characters in a string\n- Ensure non-letter characters remain unchanged\n- Test the function with various inputs to ensure it works as expected\n- Design a simple and responsive UI for the game\n- Include difficulty level selection in the game\nWe will implement the `flip_case` function by iterating through each character in the input string, checking if it's a letter, and then flipping its case. Non-letter characters will remain unchanged.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case flipping': This involves changing lowercase characters to uppercase and uppercase to lowercase, while leaving non-letter characters unchanged.\n    Explanation: The requirement specifies that the function should transform the case of alphabetic characters in the input string, leaving all other characters unaffected.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the `flip_case` function, we will follow these steps:\n    1. Iterate through each character in the input string.\n    2. Check if the character is a letter.\n    3. If it is a letter, flip its case.\n    4. If it is not a letter, leave it unchanged.\n    5. Concatenate the transformed characters to form the output string.\n\n# [edge case] \n    flip_case('Python3.8') = 'pYTHON3.8'\n    Explanation: The input string contains a number '3' and a period '.', which are not letters. These characters remain unchanged in the output. The case of the letter characters ('P', 'y', 't', 'h', 'o', 'n') is flipped as specified.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic already ensures that non-letter characters are left unchanged, which is consistent with the requirement.\n", "requirement analysis:\nThe original requirement is to flip the case of characters in a string, leaving non-letter characters unchanged. This is a straightforward task that involves iterating through each character in the string and flipping its case if it's a letter. The requirement is clear and concise, providing a clear example of expected output.\nrequirement pool:\n- Implement the function to flip the case of characters in a string\n- Ensure non-letter characters remain unchanged\n- Test the function with various inputs to ensure it works as expected\nWe will implement the function to flip the case of characters in a string by iterating through each character in the input string. For each character, we will check if it is a lowercase letter, and if so, we will convert it to uppercase, and vice versa. Non-letter characters will remain unchanged.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case flipping': This involves changing the case of each character in a string, with non-letter characters remaining unchanged.\n    Explanation: The requirement specifies that the function should change lowercase characters to uppercase and uppercase to lowercase, while leaving non-letter characters untouched.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through each character in the input string.\n    Check if the character is lowercase or uppercase.\n    Flip the case of the character if it is a letter.\n    Return the transformed string.\n\n# [edge case] \n    flip_case('Python3.8') = 'pYTHON3.8'\n    Explanation: The string contains numbers and non-letter characters, so they remain unchanged. The letters 'P', 'y', 't', 'h', 'o', and 'n' are flipped in case.\n    flip_case('12345') = '12345'\n    Explanation: The string contains only digits, so no case flipping is needed, and the original string is returned unchanged.\n    flip_case('Mixed123Case') = 'mIXED123cASE'\n    Explanation: The string contains a mix of lowercase, uppercase letters, and digits. The letters are flipped in case, while the digits remain unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for non-letter characters and ensures they remain unchanged.\n", "requirement analysis:\nThe requirement is to create a function that flips the case of characters in a given string. The function should handle both uppercase and lowercase letters, leaving non-letter characters unchanged. The function should be efficient and user-friendly, suitable for various use cases including text manipulation and learning.\nrequirement pool:\n- Implement the function to flip the case of characters in a string.\n- Ensure non-letter characters remain unchanged.\n- Optimize the function for high performance and efficiency.\n- Develop a user-friendly interface for easy interaction.\nTo implement the function that flips the case of characters in a string, we will use Python's built-in string manipulation methods. We will iterate through each character in the input string, check if it is a letter, and then flip its case. Non-letter characters will remain unchanged.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case flipping': means changing lowercase characters to uppercase and uppercase to lowercase, while leaving non-letter characters unchanged.\n    Explanation: The requirement involves transforming the case of alphabetic characters in a string, specifically converting lowercase to uppercase and vice versa, while ensuring that non-alphabetic characters remain unaffected.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Steps to implement the function:\n    1. Iterate through each character in the input string.\n    2. Check if the character is a letter.\n    3. If the character is a letter, flip its case.\n    4. If the character is not a letter, keep it unchanged.\n    5. Concatenate the transformed characters to form the final string.\n    6. Return the final string.\n\n# [edge case] \n    flip_case('Hello') = 'hELLO'\n    Explanation: The function should convert all lowercase letters to uppercase and all uppercase letters to lowercase. Non-letter characters remain unchanged.\n    flip_case('Python3.8') = 'pYTHON3.8'\n    Explanation: The function should convert 'P' to 'p', 'y' to 'Y', 't' to 'T', 'h' to 'h', 'o' to 'O', 'n' to 'N', and leave '3', '.', and '8' unchanged.\n    flip_case('12345') = '12345'\n    Explanation: The function should leave all non-letter characters unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic already ensures that non-letter characters remain unchanged.\n", "requirement analysis:\nThe original requirement is to flip the case of characters in a string, leaving non-letter characters unchanged. This is a straightforward task that involves iterating through each character in the string and flipping its case if it's a letter. The requirement is clear and concise, providing a clear example of expected output.\nrequirement pool:\n- Implement the function to flip the case of characters in a string\n- Ensure non-letter characters remain unchanged\n- Test the function with various inputs to ensure it works as expected\n- Design a simple and responsive UI for the game\n- Include difficulty level selection in the game\nWe will implement the function to flip the case of characters in a string by iterating through each character in the input string. For each character, we will check if it is a letter and then flip its case. Non-letter characters will remain unchanged.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case flipping': This involves changing the case of each character in the string, specifically converting lowercase characters to uppercase and vice versa, while leaving non-letter characters unchanged.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `flip_case(string: str) -> str`, we will follow these steps:\n    1. Initialize an empty string to store the result.\n    2. Iterate through each character in the input string.\n    3. Check if the character is a letter.\n        - If it is lowercase, convert it to uppercase.\n        - If it is uppercase, convert it to lowercase.\n        - If it is not a letter, leave it unchanged.\n    4. Append the transformed character to the result string.\n    5. Return the result string.\n\n# [edge case] \n    flip_case('Python3.8') = 'pYTHON3.8'\n    Explanation: The function should leave non-letter characters unchanged. In this case, '3' and '8' remain as they are.\n    flip_case('12345') = '12345'\n    Explanation: The function should leave non-letter characters unchanged. In this case, all characters are digits, so they remain unchanged.\n    flip_case('@#$%^&*()') = '@#$%^&*()'\n    Explanation: The function should leave non-letter characters unchanged. In this case, all characters are special characters, so they remain unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already ensures that non-letter characters remain unchanged.\n", "requirement analysis:\nThe original requirement is to flip the case of characters in a string, leaving non-letter characters unchanged. This is a straightforward task that involves iterating through each character in the string and flipping its case if it's a letter. The requirement is clear and concise, providing a clear example of expected output.\nrequirement pool:\n- Implement the function to flip the case of characters in a string\n- Ensure non-letter characters remain unchanged\n- Test the function with various inputs to ensure it works as expected\nTo implement the function that flips the case of characters in a string while leaving non-letter characters unchanged, we will use Python's built-in string manipulation methods. Specifically, we will use the `swapcase()` method which is designed to flip the case of all characters in a string. This method will be applied to all characters in the input string, and non-letter characters will naturally remain unchanged as they are not affected by the `swapcase()` method.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case flipping': This involves changing lowercase characters to uppercase and vice versa, while leaving non-letter characters unchanged.\n    Explanation: The requirement specifies that the function should transform all lowercase characters to uppercase and all uppercase characters to lowercase. Non-letter characters should remain the same.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function, we can use Python's built-in `swapcase()` method which is designed to flip the case of all characters in a string. This method will be applied to the entire input string, ensuring that all characters, including non-letter characters, are flipped or remain unchanged as needed.\n\n# [edge case] \n    flip_case('Python3.8') = 'pYTHON3.8'\n    Explanation: The string contains a number '3' which is not a letter. According to the requirement, non-letter characters should remain unchanged. Therefore, the number '3' remains as '3' after the case flipping.\n    flip_case('12345') = '12345'\n    Explanation: The string contains only digits, which are non-letter characters. These characters should remain unchanged, so the output is the same as the input.\n    flip_case('@#$%^&*()') = '@#$%^&*()'\n    Explanation: The string contains only special characters, which are non-letter characters. These characters should remain unchanged, so the output is the same as the input.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the `swapcase()` method inherently leaves non-letter characters unchanged.\n", "requirement analysis:\nThe requirement is to flip the case of characters in a given string. Non-letter characters should remain unchanged. This is a straightforward task that involves iterating through each character in the string, checking its case, and flipping it accordingly.\nrequirement pool:\n- Implement the function to flip the case of characters in a string\n- Ensure non-letter characters remain unchanged\n- Test the function with various inputs to ensure it works correctly\n- Optimize the code for efficiency\n- Document the function with examples\nTo implement the function that flips the case of characters in a given string while ensuring non-letter characters remain unchanged, we can utilize Python's built-in string manipulation capabilities. We will iterate through each character in the input string, check if it is a letter, and then flip its case. Non-letter characters will be appended to the result string as they are.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case flipping': This involves changing lowercase characters to uppercase and uppercase to lowercase, while leaving non-letter characters unchanged.\n    Explanation: The requirement specifies that the function should transform the case of alphabetic characters in the input string, but leave all other characters (non-alphabetic) unchanged.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function, we will:\n    1. Iterate through each character in the input string.\n    2. Check if the character is a letter.\n    3. If it is a letter, flip its case.\n    4. If it is not a letter, leave it unchanged.\n    5. Concatenate the transformed characters to form the result string.\n\n# [edge case] \n    flip_case('Python3.8') = 'pYTHON3.8'\n    Explanation: The input string contains a number '3' and a period '.', which are not letters. These characters remain unchanged in the output. The case of the letter characters ('P', 'y', 't', 'h', 'o', 'n') is flipped as specified.\n    flip_case('12345') = '12345'\n    Explanation: The input string consists entirely of digits, which are non-letter characters. Therefore, they remain unchanged in the output.\n    flip_case('@#$%^&*()') = '@#$%^&*()'\n    Explanation: The input string contains only special characters, none of which are letters. Hence, they remain unchanged in the output.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases, as the logic for flipping cases of letters and leaving non-letter characters unchanged is straightforward and does not require additional handling for these specific edge cases.\n", "requirement analysis:\nThe original requirement is to flip the case of characters in a string, leaving non-letter characters unchanged. This is a straightforward task that involves iterating through each character in the string and flipping its case if it's a letter. The requirement is clear and concise, providing a clear example of expected output.\nrequirement pool:\n- Implement the function to flip the case of characters in a string\n- Ensure non-letter characters remain unchanged\n- Test the function with various inputs to ensure it works as expected\nTo implement the function that flips the case of characters in a string while leaving non-letter characters unchanged, we will use Python's built-in string manipulation methods. Specifically, we will use the `swapcase()` method which is designed to flip the case of all characters in a string. This method will be applied to all characters in the input string, and non-letter characters will naturally remain unchanged as they are not affected by the `swapcase()` method.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case flipping': This involves changing lowercase characters to uppercase and vice versa, while leaving non-letter characters unchanged.\n    Explanation: The requirement specifies that the function should transform all lowercase characters to uppercase and all uppercase characters to lowercase. Non-letter characters should remain the same.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function, we can use Python's built-in `swapcase()` method which is designed to flip the case of all characters in a string. This method will be applied to the entire input string, ensuring that all characters, including non-letter characters, are flipped or remain unchanged as needed.\n\n# [edge case] \n    flip_case('Python3.8') = 'pYTHON3.8'\n    Explanation: The string contains a number '3' which is not a letter. According to the requirement, non-letter characters should remain unchanged. Therefore, the number '3' remains as '3' after the case flipping.\n    flip_case('12345') = '12345'\n    Explanation: The string contains only digits, which are non-letter characters. These characters should remain unchanged, so the output is the same as the input.\n    flip_case('@#$%^&*()') = '@#$%^&*()'\n    Explanation: The string contains only special characters, which are non-letter characters. These characters should remain unchanged, so the output is the same as the input.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the `swapcase()` method inherently leaves non-letter characters unchanged.\n", "requirement analysis:\nThe original requirement is to flip the case of characters in a string, leaving non-letter characters unchanged. This is a straightforward task that involves iterating through each character in the string and flipping its case if it's a letter. The requirement is clear and concise, providing a clear example of expected output.\nrequirement pool:\n- Implement the function to flip the case of characters in a string\n- Ensure non-letter characters remain unchanged\n- Test the function with various inputs to ensure it works as expected\nTo implement the function that flips the case of characters in a string while leaving non-letter characters unchanged, we will use Python's built-in string manipulation methods. Specifically, we will use the `swapcase()` method which is designed to flip the case of all characters in a string. This method will be applied to all characters in the input string, and non-letter characters will naturally remain unchanged as they are not affected by the `swapcase()` method.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case flipping': This involves changing lowercase characters to uppercase and vice versa, while leaving non-letter characters unchanged.\n    Explanation: The requirement specifies that the function should transform all lowercase characters to uppercase and all uppercase characters to lowercase. Non-letter characters should remain the same.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function, we can use Python's built-in `swapcase()` method which is designed to flip the case of all characters in a string. This method will be applied to the entire input string, ensuring that all characters, including non-letter characters, are flipped or remain unchanged as needed.\n\n# [edge case] \n    flip_case('Python3.8') = 'pYTHON3.8'\n    Explanation: The string contains a number '3' which is not a letter. According to the requirement, non-letter characters should remain unchanged. Therefore, the number '3' remains as '3' after the case flipping.\n    flip_case('12345') = '12345'\n    Explanation: The string contains only digits, which are non-letter characters. These characters should remain unchanged, so the output is the same as the input.\n    flip_case('@#$%^&*()') = '@#$%^&*()'\n    Explanation: The string contains only special characters, which are non-letter characters. These characters should remain unchanged, so the output is the same as the input.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the `swapcase()` method inherently leaves non-letter characters unchanged.\n", "requirement analysis:\nThe requirement is to create a function that flips the case of characters in a given string. The function should handle both uppercase and lowercase letters, leaving non-letter characters unchanged. The function should be efficient and user-friendly, suitable for various use cases including text manipulation and learning.\nrequirement pool:\n- Implement the function to flip the case of characters in a string.\n- Ensure non-letter characters remain unchanged.\n- Optimize the function for high performance and efficiency.\n- Develop a user-friendly interface for easy interaction.\nTo implement the function that flips the case of characters in a string, we will use Python's built-in string manipulation methods. We will iterate through each character in the input string, check if it is a letter, and then flip its case. Non-letter characters will remain unchanged.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'case flipping': means changing lowercase characters to uppercase and uppercase to lowercase, while leaving non-letter characters unchanged.\n    Explanation: The requirement involves transforming the case of alphabetic characters in a string, specifically converting lowercase to uppercase and vice versa, while ensuring that non-alphabetic characters remain unaffected.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Steps to implement the function:\n    1. Iterate through each character in the input string.\n    2. Check if the character is a letter.\n    3. If the character is a letter, flip its case.\n    4. If the character is not a letter, keep it unchanged.\n    5. Concatenate the transformed characters to form the final string.\n    6. Return the final string.\n\n# [edge case] \n    flip_case('Hello') = 'hELLO'\n    Explanation: The function should convert all lowercase letters to uppercase and all uppercase letters to lowercase. Non-letter characters remain unchanged.\n    flip_case('Python3.8') = 'pYTHON3.8'\n    Explanation: The function should convert 'P' to 'p', 'y' to 'Y', 't' to 'T', 'h' to 'h', 'o' to 'O', 'n' to 'N', and leave '3', '.', and '8' unchanged.\n    flip_case('12345') = '12345'\n    Explanation: The function should leave all non-letter characters unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic already ensures that non-letter characters remain unchanged.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [126, 126, 126, 126, 126, 126, 126, 126, 126, 126], "completion": "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Flips the case of characters in the input string.\n\n    Args:\n        string (str): The input string to be processed.\n\n    Returns:\n        str: The string with flipped cases of alphabetic characters.\n    \"\"\"\n    result = []\n    for char in string:\n        if char.islower():\n            result.append(char.upper())\n        elif char.isupper():\n            result.append(char.lower())\n        else:\n            result.append(char)\n    return ''.join(result)\n", "passed": true, "pass": true, "pass_num": 10, "round": 23, "repair_prompt": ["def flip_case(string: str) -> str:\t\n'''For a given string, flip lowercase characters to uppercase and uppercase to lowercase. Ensure that all non-letter characters in the string remain unchanged after the transformation.\n>>> flip_case('Hello')\n    'hELLO'\n    '''", " def flip_case(string: str) -> str:\n    '''For a given string, flip lowercase characters to uppercase and uppercase to lowercase. Ensure that all non-letter characters in the string remain unchanged after the transformation.\n    >>> flip_case('Hello')\n        'hELLO'\n    >>> flip_case('Python3.8')\n        'pYTHON3.8'\n    >>> flip_case('12345')\n        '12345'\n    >>> flip_case('Python! 123')\n        'pYTHON! ", " def flip_case(string: str) -> str:\n'''For a given string, flip lowercase characters to uppercase and uppercase to lowercase. Ensure that all non-letter characters in the string remain unchanged after the transformation.\n>>> flip_case('Hello')\n    'hELLO'\n    '''"], "mutate_method": "add_1_sentence_at_end", "parent_index": 23}
