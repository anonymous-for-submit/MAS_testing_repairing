{"task_id": "HumanEval/58", "prompt": "def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for two lists. You need to identify the elements that appear in both lists. Then ensure these elements are unique.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "entry_point": "common", "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "test": ["def check(common):\n\tassert common([6, 5, 7, 10], [8, 4]) == []", "def check(common):\n\tassert common([6, 3, 2, 37, 657, 2, 6], [5, 9, 1, 6, 4, 654, 125]) == [6]", "def check(common):\n\tassert common([1, 6, 5, 9], [1, 6, 1]) == [1, 6]", "def check(common):\n\tassert common([8, 7, 6, 13], [7, 2]) == [7]", "def check(common):\n\tassert common([1, 1, 3, 11], [5, 3, 2]) == [3]", "def check(common):\n\tassert common([7, 8, 6, 11], [4, 5, 9]) == []", "def check(common):\n\tassert common([1, 6, 5, 34, 651, 3, 3], [7, 8, 1, 7, 9, 653, 121]) == [1]", "def check(common):\n\tassert common([6, 6, 4, 12], [3, 1]) == []", "def check(common):\n\tassert common([6, 1, 5, 36, 648, 1, 6], [3, 4, 2, 1, 12, 654, 123]) == [1]", "def check(common):\n\tassert common([6, 3, 7, 6], [3, 5, 7]) == [3, 7]", "def check(common):\n\tassert common([4, 8, 2, 9], [3, 1]) == []", "def check(common):\n\tassert common([3, 5, 5, 8], [7, 6]) == []", "def check(common):\n\tassert common([1, 8, 3, 4], [8, 7, 6]) == [8]", "def check(common):\n\tassert common([5, 2, 6, 30, 650, 7, 3], [7, 10, 2, 4, 4, 651, 126]) == [2, 7]", "def check(common):\n\tassert common([4, 6, 6, 7], [8, 6, 9]) == [6]", "def check(common):\n\tassert common([3, 7, 6, 3], [2, 4, 5]) == []", "def check(common):\n\tassert common([7, 4, 3, 10], [3, 1]) == [3]", "def check(common):\n\tassert common([3, 3, 1, 4], [4, 6, 4]) == [4]", "def check(common):\n\tassert common([4, 5, 2, 5], [1, 7, 5]) == [5]", "def check(common):\n\tassert common([5, 3, 4, 35, 652, 1, 1], [9, 6, 2, 8, 6, 653, 122]) == []", "def check(common):\n\tassert common([3, 1, 6, 11], [6, 6]) == [6]", "def check(common):\n\tassert common([7, 4, 7, 13], [8, 4]) == [4]", "def check(common):\n\tassert common([4, 4, 4, 34, 652, 5, 10], [8, 2, 1, 4, 5, 652, 117]) == [4, 5, 652]", "def check(common):\n\tassert common([2, 8, 3, 29, 650, 1, 7], [3, 6, 2, 3, 7, 652, 116]) == [2, 3, 7]", "def check(common):\n\tassert common([5, 8, 7, 3], [6, 4]) == []", "def check(common):\n\tassert common([2, 2, 1, 29, 650, 4, 2], [3, 10, 6, 2, 11, 651, 119]) == [2]", "def check(common):\n\tassert common([3, 3, 2, 30, 656, 3, 4], [6, 11, 2, 4, 4, 652, 123]) == [2, 4]", "def check(common):\n\tassert common([6, 1, 4, 33, 651, 4, 3], [4, 10, 1, 10, 12, 657, 126]) == [1, 4]", "def check(common):\n\tassert common([6, 6, 4, 5], [3, 3, 8]) == []", "def check(common):\n\tassert common([5, 5, 4, 34, 648, 5, 5], [3, 7, 6, 2, 10, 648, 116]) == [648]", "def check(common):\n\tassert common([2, 1, 7, 9], [6, 3]) == []", "def check(common):\n\tassert common([4, 1, 4, 12], [5, 1, 7]) == [1]", "def check(common):\n\tassert common([7, 6, 3, 9], [6, 5]) == [6]", "def check(common):\n\tassert common([2, 3, 3, 9], [5, 2]) == [2]", "def check(common):\n\tassert common([1, 4, 1, 32, 657, 7, 6], [4, 10, 2, 2, 4, 650, 124]) == [4]", "def check(common):\n\tassert common([8, 3, 4, 10], [8, 7]) == [8]", "def check(common):\n\tassert common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]", "def check(common):\n\tassert common([5, 2, 2, 30, 654, 5, 1], [3, 3, 2, 10, 6, 657, 126]) == [2]", "def check(common):\n\tassert common([2, 7, 4, 3], [8, 7, 5]) == [7]", "def check(common):\n\tassert common([4, 5, 7, 12], [7, 1]) == [7]", "def check(common):\n\tassert common([9, 3, 7, 4], [4, 2, 4]) == [4]", "def check(common):\n\tassert common([3, 1, 3, 10], [3, 3, 9]) == [3]", "def check(common):\n\tassert common([4, 4, 1, 37, 654, 7, 5], [3, 11, 2, 6, 9, 656, 120]) == []", "def check(common):\n\tassert common([2, 6, 2, 8], [5, 2]) == [2]", "def check(common):\n\tassert common([2, 4, 3, 12], [4, 5, 6]) == [4]", "def check(common):\n\tassert common([4, 4, 7, 8], [4, 4, 9]) == [4]", "def check(common):\n\tassert common([1, 6, 6, 12], [6, 2, 9]) == [6]", "def check(common):\n\tassert common([2, 7, 1, 4], [1, 2, 1]) == [1, 2]", "def check(common):\n\tassert common([2, 5, 6, 32, 649, 3, 9], [8, 6, 1, 4, 4, 658, 117]) == [6]", "def check(common):\n\tassert common([2, 1, 5, 37, 657, 7, 1], [4, 9, 3, 1, 12, 649, 122]) == [1]", "def check(common):\n\tassert common([5, 5, 7, 7], [5, 2]) == [5]", "def check(common):\n\tassert common([5, 3, 2, 8], [3, 2]) == [2, 3]", "def check(common):\n\tassert common([5, 4, 5, 32, 655, 6, 2], [2, 10, 4, 2, 14, 656, 117]) == [2, 4]", "def check(common):\n\tassert common([3, 4, 4, 8], [3, 3, 9]) == [3]", "def check(common):\n\tassert common([5, 2, 1, 3], [8, 3]) == [3]", "def check(common):\n\tassert common([3, 8, 3, 35, 651, 4, 2], [1, 12, 6, 10, 4, 654, 119]) == [4]", "def check(common):\n\tassert common([5, 6, 4, 8], [3, 7, 2]) == []", "def check(common):\n\tassert common([7, 7, 5, 11], [3, 4]) == []", "def check(common):\n\tassert common([4, 3, 2, 8], []) == []", "def check(common):\n\tassert common([7, 7, 7, 3], [2, 4]) == []", "def check(common):\n\tassert common([2, 9, 3, 36, 649, 6, 7], [10, 12, 4, 4, 14, 656, 116]) == []", "def check(common):\n\tassert common([3, 8, 6, 6], [4, 3, 3]) == [3]", "def check(common):\n\tassert common([1, 8, 7, 3], [2, 6]) == []", "def check(common):\n\tassert common([1, 4, 5, 11], [1, 6, 1]) == [1]", "def check(common):\n\tassert common([6, 2, 3, 8], [7, 6, 8]) == [6, 8]", "def check(common):\n\tassert common([1, 7, 4, 30, 653, 1, 1], [6, 9, 2, 2, 13, 650, 120]) == []", "def check(common):\n\tassert common([6, 8, 4, 32, 657, 7, 6], [4, 10, 1, 5, 14, 652, 120]) == [4]", "def check(common):\n\tassert common([2, 7, 7, 32, 650, 5, 6], [7, 2, 4, 3, 13, 654, 117]) == [2, 7]", "def check(common):\n\tassert common([1, 4, 7, 30, 658, 3, 10], [6, 7, 3, 10, 10, 658, 117]) == [3, 7, 10, 658]", "def check(common):\n\tassert common([8, 4, 1, 9], [6, 3]) == []", "def check(common):\n\tassert common([2, 1, 4, 37, 657, 3, 7], [8, 5, 5, 10, 7, 654, 121]) == [7]", "def check(common):\n\tassert common([9, 7, 7, 7], [5, 2]) == []", "def check(common):\n\tassert common([4, 6, 3, 31, 648, 7, 10], [1, 10, 4, 7, 7, 653, 117]) == [4, 7, 10]", "def check(common):\n\tassert common([6, 5, 2, 3], [3, 3, 3]) == [3]", "def check(common):\n\tassert common([4, 4, 1, 8], [1, 5, 7]) == [1]", "def check(common):\n\tassert common([8, 4, 6, 5], [1, 1]) == []", "def check(common):\n\tassert common([4, 5, 3, 10], [7, 5]) == [5]", "def check(common):\n\tassert common([7, 1, 7, 13], [3, 1]) == [1]", "def check(common):\n\tassert common([1, 5, 5, 29, 655, 4, 1], [5, 3, 2, 1, 5, 648, 118]) == [1, 5]", "def check(common):\n\tassert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "def check(common):\n\tassert common([7, 7, 1, 4], [5, 6]) == []", "def check(common):\n\tassert common([5, 4, 2, 36, 648, 7, 10], [6, 8, 1, 5, 11, 649, 126]) == [5]", "def check(common):\n\tassert common([8, 1, 1, 3], [5, 6]) == []", "def check(common):\n\tassert common([6, 3, 6, 3], [8, 5, 8]) == []", "def check(common):\n\tassert common([6, 8, 7, 32, 654, 7, 3], [7, 7, 2, 5, 10, 654, 123]) == [7, 654]", "def check(common):\n\tassert common([2, 2, 6, 11], [5, 6, 1]) == [6]", "def check(common):\n\tassert common([1, 4, 6, 39, 653, 4, 3], [6, 12, 2, 3, 14, 654, 116]) == [3, 6]", "def check(common):\n\tassert common([1, 3, 4, 9], [7, 3]) == [3]", "def check(common):\n\tassert common([9, 6, 6, 7], [7, 7, 1]) == [7]", "def check(common):\n\tassert common([5, 6, 2, 34, 654, 3, 7], [7, 9, 1, 7, 8, 650, 122]) == [7]", "def check(common):\n\tassert common([8, 2, 7, 4], [7, 7, 1]) == [7]", "def check(common):\n\tassert common([3, 2, 1, 37, 654, 7, 6], [2, 3, 2, 6, 4, 649, 123]) == [2, 3, 6]", "def check(common):\n\tassert common([9, 2, 7, 4], [5, 4, 1]) == [4]", "def check(common):\n\tassert common([8, 1, 4, 10], [4, 2]) == [4]", "def check(common):\n\tassert common([2, 8, 5, 10], [8, 4]) == [8]", "def check(common):\n\tassert common([8, 4, 4, 6], [3, 6]) == [6]", "def check(common):\n\tassert common([3, 6, 6, 7], [7, 4, 2]) == [7]", "def check(common):\n\tassert common([3, 4, 3, 11], [4, 1, 7]) == [4]", "def check(common):\n\tassert common([3, 1, 4, 5], [1, 1]) == [1]", "def check(common):\n\tassert common([3, 2, 5, 37, 652, 2, 3], [5, 4, 6, 7, 9, 651, 120]) == [5]"], "test_case_list": ["assert common([6, 5, 7, 10], [8, 4]) == []", "assert common([6, 3, 2, 37, 657, 2, 6], [5, 9, 1, 6, 4, 654, 125]) == [6]", "assert common([1, 6, 5, 9], [1, 6, 1]) == [1, 6]", "assert common([8, 7, 6, 13], [7, 2]) == [7]", "assert common([1, 1, 3, 11], [5, 3, 2]) == [3]", "assert common([7, 8, 6, 11], [4, 5, 9]) == []", "assert common([1, 6, 5, 34, 651, 3, 3], [7, 8, 1, 7, 9, 653, 121]) == [1]", "assert common([6, 6, 4, 12], [3, 1]) == []", "assert common([6, 1, 5, 36, 648, 1, 6], [3, 4, 2, 1, 12, 654, 123]) == [1]", "assert common([6, 3, 7, 6], [3, 5, 7]) == [3, 7]", "assert common([4, 8, 2, 9], [3, 1]) == []", "assert common([3, 5, 5, 8], [7, 6]) == []", "assert common([1, 8, 3, 4], [8, 7, 6]) == [8]", "assert common([5, 2, 6, 30, 650, 7, 3], [7, 10, 2, 4, 4, 651, 126]) == [2, 7]", "assert common([4, 6, 6, 7], [8, 6, 9]) == [6]", "assert common([3, 7, 6, 3], [2, 4, 5]) == []", "assert common([7, 4, 3, 10], [3, 1]) == [3]", "assert common([3, 3, 1, 4], [4, 6, 4]) == [4]", "assert common([4, 5, 2, 5], [1, 7, 5]) == [5]", "assert common([5, 3, 4, 35, 652, 1, 1], [9, 6, 2, 8, 6, 653, 122]) == []", "assert common([3, 1, 6, 11], [6, 6]) == [6]", "assert common([7, 4, 7, 13], [8, 4]) == [4]", "assert common([4, 4, 4, 34, 652, 5, 10], [8, 2, 1, 4, 5, 652, 117]) == [4, 5, 652]", "assert common([2, 8, 3, 29, 650, 1, 7], [3, 6, 2, 3, 7, 652, 116]) == [2, 3, 7]", "assert common([5, 8, 7, 3], [6, 4]) == []", "assert common([2, 2, 1, 29, 650, 4, 2], [3, 10, 6, 2, 11, 651, 119]) == [2]", "assert common([3, 3, 2, 30, 656, 3, 4], [6, 11, 2, 4, 4, 652, 123]) == [2, 4]", "assert common([6, 1, 4, 33, 651, 4, 3], [4, 10, 1, 10, 12, 657, 126]) == [1, 4]", "assert common([6, 6, 4, 5], [3, 3, 8]) == []", "assert common([5, 5, 4, 34, 648, 5, 5], [3, 7, 6, 2, 10, 648, 116]) == [648]", "assert common([2, 1, 7, 9], [6, 3]) == []", "assert common([4, 1, 4, 12], [5, 1, 7]) == [1]", "assert common([7, 6, 3, 9], [6, 5]) == [6]", "assert common([2, 3, 3, 9], [5, 2]) == [2]", "assert common([1, 4, 1, 32, 657, 7, 6], [4, 10, 2, 2, 4, 650, 124]) == [4]", "assert common([8, 3, 4, 10], [8, 7]) == [8]", "assert common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]", "assert common([5, 2, 2, 30, 654, 5, 1], [3, 3, 2, 10, 6, 657, 126]) == [2]", "assert common([2, 7, 4, 3], [8, 7, 5]) == [7]", "assert common([4, 5, 7, 12], [7, 1]) == [7]", "assert common([9, 3, 7, 4], [4, 2, 4]) == [4]", "assert common([3, 1, 3, 10], [3, 3, 9]) == [3]", "assert common([4, 4, 1, 37, 654, 7, 5], [3, 11, 2, 6, 9, 656, 120]) == []", "assert common([2, 6, 2, 8], [5, 2]) == [2]", "assert common([2, 4, 3, 12], [4, 5, 6]) == [4]", "assert common([4, 4, 7, 8], [4, 4, 9]) == [4]", "assert common([1, 6, 6, 12], [6, 2, 9]) == [6]", "assert common([2, 7, 1, 4], [1, 2, 1]) == [1, 2]", "assert common([2, 5, 6, 32, 649, 3, 9], [8, 6, 1, 4, 4, 658, 117]) == [6]", "assert common([2, 1, 5, 37, 657, 7, 1], [4, 9, 3, 1, 12, 649, 122]) == [1]", "assert common([5, 5, 7, 7], [5, 2]) == [5]", "assert common([5, 3, 2, 8], [3, 2]) == [2, 3]", "assert common([5, 4, 5, 32, 655, 6, 2], [2, 10, 4, 2, 14, 656, 117]) == [2, 4]", "assert common([3, 4, 4, 8], [3, 3, 9]) == [3]", "assert common([5, 2, 1, 3], [8, 3]) == [3]", "assert common([3, 8, 3, 35, 651, 4, 2], [1, 12, 6, 10, 4, 654, 119]) == [4]", "assert common([5, 6, 4, 8], [3, 7, 2]) == []", "assert common([7, 7, 5, 11], [3, 4]) == []", "assert common([4, 3, 2, 8], []) == []", "assert common([7, 7, 7, 3], [2, 4]) == []", "assert common([2, 9, 3, 36, 649, 6, 7], [10, 12, 4, 4, 14, 656, 116]) == []", "assert common([3, 8, 6, 6], [4, 3, 3]) == [3]", "assert common([1, 8, 7, 3], [2, 6]) == []", "assert common([1, 4, 5, 11], [1, 6, 1]) == [1]", "assert common([6, 2, 3, 8], [7, 6, 8]) == [6, 8]", "assert common([1, 7, 4, 30, 653, 1, 1], [6, 9, 2, 2, 13, 650, 120]) == []", "assert common([6, 8, 4, 32, 657, 7, 6], [4, 10, 1, 5, 14, 652, 120]) == [4]", "assert common([2, 7, 7, 32, 650, 5, 6], [7, 2, 4, 3, 13, 654, 117]) == [2, 7]", "assert common([1, 4, 7, 30, 658, 3, 10], [6, 7, 3, 10, 10, 658, 117]) == [3, 7, 10, 658]", "assert common([8, 4, 1, 9], [6, 3]) == []", "assert common([2, 1, 4, 37, 657, 3, 7], [8, 5, 5, 10, 7, 654, 121]) == [7]", "assert common([9, 7, 7, 7], [5, 2]) == []", "assert common([4, 6, 3, 31, 648, 7, 10], [1, 10, 4, 7, 7, 653, 117]) == [4, 7, 10]", "assert common([6, 5, 2, 3], [3, 3, 3]) == [3]", "assert common([4, 4, 1, 8], [1, 5, 7]) == [1]", "assert common([8, 4, 6, 5], [1, 1]) == []", "assert common([4, 5, 3, 10], [7, 5]) == [5]", "assert common([7, 1, 7, 13], [3, 1]) == [1]", "assert common([1, 5, 5, 29, 655, 4, 1], [5, 3, 2, 1, 5, 648, 118]) == [1, 5]", "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "assert common([7, 7, 1, 4], [5, 6]) == []", "assert common([5, 4, 2, 36, 648, 7, 10], [6, 8, 1, 5, 11, 649, 126]) == [5]", "assert common([8, 1, 1, 3], [5, 6]) == []", "assert common([6, 3, 6, 3], [8, 5, 8]) == []", "assert common([6, 8, 7, 32, 654, 7, 3], [7, 7, 2, 5, 10, 654, 123]) == [7, 654]", "assert common([2, 2, 6, 11], [5, 6, 1]) == [6]", "assert common([1, 4, 6, 39, 653, 4, 3], [6, 12, 2, 3, 14, 654, 116]) == [3, 6]", "assert common([1, 3, 4, 9], [7, 3]) == [3]", "assert common([9, 6, 6, 7], [7, 7, 1]) == [7]", "assert common([5, 6, 2, 34, 654, 3, 7], [7, 9, 1, 7, 8, 650, 122]) == [7]", "assert common([8, 2, 7, 4], [7, 7, 1]) == [7]", "assert common([3, 2, 1, 37, 654, 7, 6], [2, 3, 2, 6, 4, 649, 123]) == [2, 3, 6]", "assert common([9, 2, 7, 4], [5, 4, 1]) == [4]", "assert common([8, 1, 4, 10], [4, 2]) == [4]", "assert common([2, 8, 5, 10], [8, 4]) == [8]", "assert common([8, 4, 4, 6], [3, 6]) == [6]", "assert common([3, 6, 6, 7], [7, 4, 2]) == [7]", "assert common([3, 4, 3, 11], [4, 1, 7]) == [4]", "assert common([3, 1, 4, 5], [1, 1]) == [1]", "assert common([3, 2, 5, 37, 652, 2, 3], [5, 4, 6, 7, 9, 651, 120]) == [5]"], "nl": "Return sorted unique common elements for two lists.\n    ", "func": "def common(l1: list, l2: list):", "examples": ">>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    ", "completions": ["from typing import List\n## main.py\n\ndef common(l1: list[int], l2: list[int]) -> list[int]:\n    \"\"\"\n    Returns a sorted list of unique common elements from two lists.\n\n    Args:\n        l1 (list[int]): The first list of integers.\n        l2 (list[int]): The second list of integers.\n\n    Returns:\n        list[int]: A sorted list of unique common elements.\n    \"\"\"\n    # Convert both lists to sets to find the intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection result back to a list to ensure uniqueness\n    unique_common_elements = list(intersection)\n    \n    # Sort the list to meet the ascending order requirement\n    unique_common_elements.sort()\n    \n    # Return the sorted list of unique common elements\n    return unique_common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted unique common elements for two lists.\n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n    Returns:\n        list: A sorted list of unique common elements.\n    Examples:\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n    '''\n    # Convert both lists to sets to find the intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection result back to a list\n    common_elements = list(intersection)\n    \n    # Sort the list of common elements\n    common_elements.sort()\n    \n    # Return the sorted list\n    return common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted unique common elements for two lists.\n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n    Returns:\n        list: A sorted list of unique common elements.\n    Examples:\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n            [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n            [2, 3]\n    '''\n    # Convert lists to sets to find the intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection result back to a list\n    result_list = list(intersection)\n    \n    # Sort the list to ensure the elements are in ascending order\n    result_list.sort()\n    \n    # Return the sorted list\n    return result_list\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Return sorted unique common elements for two lists.'''\n    # Convert both lists to sets to find the intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection result back to a list and sort it\n    sorted_common_elements = sorted(list(intersection))\n    \n    return sorted_common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Return sorted unique common elements for two lists.'''\n    # Convert lists to sets to find intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the result to a list\n    result_list = list(intersection)\n    \n    # Sort the list\n    result_list.sort()\n    \n    # Remove duplicates\n    unique_result_list = list(dict.fromkeys(result_list))\n    \n    return unique_result_list\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted unique common elements for two lists.\n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n    Returns:\n        list: A sorted list of unique common elements.\n    '''\n    # Convert both lists to sets to remove duplicates\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of these sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the result to a sorted list\n    sorted_common_elements = sorted(list(common_elements))\n    \n    # Return the sorted list\n    return sorted_common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted unique common elements for two lists. You need to identify the elements that appear in both lists. Then ensure these elements are unique.\n    '''\n    # Convert both lists to sets to find common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    common_elements = set1.intersection(set2)\n    \n    # Convert the set of common elements back to a list\n    common_list = list(common_elements)\n    \n    # Sort the list to ensure the output is in ascending order\n    common_list.sort()\n    \n    # Return the sorted list\n    return common_list\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted unique common elements for two lists.\n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n    Returns:\n        list: A sorted list of unique common elements.\n    '''\n    # Convert both lists to sets to find the intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection result to a list\n    common_elements = list(intersection)\n    \n    # Sort the list\n    common_elements.sort()\n    \n    return common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    Finds the unique common elements between two lists and returns them sorted.\n\n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n\n    Returns:\n        list: A sorted list of unique common elements.\n    \"\"\"\n    # Convert lists to sets to remove duplicates\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    common_elements = set1.intersection(set2)\n    \n    # Convert the set of common elements back to a list\n    common_list = list(common_elements)\n    \n    # Sort the list to ensure the elements are in ascending order\n    common_list.sort()\n    \n    return common_list\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted unique common elements for two lists.\n    Args:\n        l1 (list): First list of elements\n        l2 (list): Second list of elements\n    Returns:\n        list: Sorted list of unique common elements\n    Examples:\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n            [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n            [2, 3]\n    '''\n    # Convert lists to sets to find the intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection result back to a list\n    result_list = list(intersection)\n    \n    # Sort the list to ensure the elements are in ascending order\n    result_list.sort()\n    \n    return result_list\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that returns sorted unique common elements from two lists. This is a common task in data processing and should be efficient and easy to use. The function should handle basic list operations and ensure that the result contains only unique elements, sorted in ascending order.\nrequirement pool:\n- The function should correctly identify common elements between two lists.\n- The function should ensure that the result contains only unique elements.\n- The function should return the elements sorted in ascending order.\n- The function should handle edge cases such as empty lists or lists with no common elements.\n- The function should be optimized for performance and scalability.\nTo create a function that returns sorted unique common elements from two lists, we will utilize Python's built-in set operations, which are both efficient and readable. The function will first convert the lists to sets to efficiently find the intersection, then convert the result back to a list to ensure uniqueness, and finally sort the list to meet the ascending order requirement.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'unique common elements': means that the elements should appear in both lists and should not repeat.\n    'sorted': means the elements should be in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Convert both lists to sets to find the intersection.\n    (2) Convert the intersection result back to a list to ensure uniqueness.\n    (3) Sort the list to meet the ascending order requirement.\n    (4) Return the sorted list of unique common elements.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    explanation: The number 2 appears in both lists, but since we need unique common elements, the expected output is [2].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will return an empty list if there are no common elements.\n\n# [core concept]\n    'unique common elements': means that the elements should appear in both lists and should not repeat.\n    'sorted': means the elements should be in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Convert both lists to sets to find the intersection.\n    (2) Convert the intersection result back to a list to ensure uniqueness.\n    (3) Sort the list to meet the ascending order requirement.\n    (4) Return the sorted list of unique common elements.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    explanation: The number 2 appears in both lists, but since we need unique common elements, the expected output is [2].\n", "requirement analysis:\nThe original requirements specify the need to find common elements between two lists, ensuring the result is unique and sorted. This is a common task in data manipulation and requires a function that is both efficient and easy to understand.\nrequirement pool:\n- Implement a function that takes two lists and returns a sorted list of unique common elements.\n- Ensure the function handles both numerical and non-numerical data types.\n- Optimize the function for performance to handle large datasets efficiently.\n- Document the function with clear examples and usage guidelines.\n- Test the function with various edge cases to ensure robustness.\nTo implement the function efficiently, we will use Python's built-in data structures and set operations. The function will first convert the lists to sets to find the intersection, then convert the result back to a list and sort it. This approach ensures both uniqueness and sorting of the common elements.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'unique elements': means that the final list should not have any duplicate values.\n    'sorted order': means that the final list should be in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Convert both lists to sets to find the intersection.\n    - Convert the intersection result back to a list.\n    - Sort the list of common elements.\n    - Return the sorted list.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    explanation: The number 2 is the only common element, and it appears more than once, so it should be listed once in the output.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will return an empty list when there are no common elements.\n\n# [core concept]\n    'unique elements': means that the final list should not have any duplicate values.\n    'sorted order': means that the final list should be in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Convert both lists to sets to find the intersection.\n    - Convert the intersection result back to a list.\n    - Sort the list of common elements.\n    - Return the sorted list.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    explanation: The number 2 is the only common element, and it appears more than once, so it should be listed once in the output.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will return an empty list when there are no common elements.\n", "requirement analysis:\nThe original requirements call for a function that returns sorted unique common elements from two lists. This involves identifying elements that appear in both lists, ensuring these elements are unique, and then sorting the result. The function should be efficient and handle both small and large lists.\nrequirement pool:\n- Implement the function to identify common elements and ensure uniqueness.\n- Ensure the function returns results in sorted order.\n- Optimize the function for performance, especially for large lists.\n- Document the function clearly for easy understanding and use.\n- Test the function with various edge cases to ensure robustness.\nTo implement the function efficiently and ensure it handles both small and large lists, we will use Python's built-in set operations, which are optimized for performance. We will convert the lists to sets to find the intersection, then convert the result back to a list and sort it to meet the sorted requirement. This approach leverages Python's efficient handling of sets and lists.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'unique common elements': means that the elements should appear in both lists and should not be repeated in the result.\n    'sorted': means that the final list should be in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Convert both lists to sets to find the intersection.\n    - Convert the intersection result back to a list.\n    - Sort the list to ensure the elements are in ascending order.\n    - Return the sorted list.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    Explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    Explanation: The number 2 appears in both lists, but since we need unique common elements, the result should only include one instance of 2.\n    common([1, 2, 3, 4], [4, 3, 2, 1]) = [1, 2, 3, 4]\n    Explanation: All elements are common between the two lists, and since we need unique elements, the result includes each element only once, but the order should be sorted.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic already ensures that the result is unique and sorted.\n", "requirement analysis:\nThe original requirement is to create a function that returns sorted unique common elements from two lists. This is a common task in data processing and requires a function that is both efficient and easy to understand. The function should handle lists of various sizes and types, ensuring it can be used in different contexts.\nrequirement pool:\n- Implement the function to return sorted unique common elements from two lists\n- Ensure the function is optimized for performance\n- Make the function adaptable for different data types\n- Include error handling for non-list inputs\n- Document the function with examples and usage guidelines\nTo implement the function efficiently and clearly, we will use Python's built-in set operations, which are optimized for performance and readability. The function will first convert the input lists to sets to find the intersection, then convert the result back to a list and sort it to ensure the output is sorted. This approach leverages Python's strengths in handling sets and lists, ensuring the function is both efficient and easy to understand.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'unique common elements': means that the elements should appear in both lists and should not repeat.\n    'sorted': means that the final list should be in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Convert both lists to sets to find the intersection.\n    - Convert the intersection result back to a list.\n    - Sort the list to ensure the output is sorted.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    Explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    Explanation: The number 2 appears in both lists, but since we need unique common elements, the expected output is [2].\n    common([1, 2, 3, 4], [4, 3, 2, 1]) = [1, 2, 3, 4]\n    Explanation: All elements appear in both lists, and since we need unique common elements, the expected output is [1, 2, 3, 4].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic already ensures that the output is unique and sorted.\n", "requirement analysis:\nThe requirement is to create a function that returns sorted unique common elements from two lists. This is a common task in programming and can be efficiently handled using Python's built-in data structures and operations. The function should be efficient, easy to understand, and capable of handling typical list sizes.\nrequirement pool:\n- The function should return sorted unique common elements from two lists.\n- The function should handle both small and large lists efficiently.\n- The function should be easy to understand and use.\n- The function should be capable of handling typical list sizes.\n- The function should be easily integrable into other projects.\nWe will use Python's built-in set operations to efficiently find the intersection of the two lists. This approach is both simple and efficient for this task. We will then convert the result back to a list, sort it, and ensure all elements are unique before returning it.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'intersection': means finding elements that appear in both lists\n    'unique': means the elements should not repeat in the result\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Use set intersection to find common elements.\n    - Convert the result to a list.\n    - Sort the list.\n    - Remove duplicates.\n    - Return the sorted unique list.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    Explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    Explanation: The number 2 appears in both lists, but since we need unique elements, the output is [2].\n    common([1, 2, 3, 4], [3, 4, 5, 6]) = [3, 4]\n    Explanation: Both 3 and 4 appear in both lists, and since we need unique elements, the output is [3, 4].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The built-in set operations in Python will automatically handle the case where there are no common elements.\n", "requirement analysis:\nThe requirement is to create a function that returns sorted unique common elements from two lists. This function should be efficient and handle basic list operations. The function should be compatible with Python's standard library and should work well with typical data sizes.\nrequirement pool:\n- The function should correctly identify common elements between two lists.\n- The function should ensure the common elements are unique.\n- The function should return the common elements in sorted order.\n- The function should handle lists of varying lengths and types.\n- The function should be optimized for performance, especially for large datasets.\nTo create a function that returns sorted unique common elements from two lists, we will utilize Python's built-in set operations, which are efficient and well-suited for this task. The function will first convert the lists to sets to eliminate duplicates and then find the intersection of these sets. Finally, the result will be converted back to a list, sorted, and returned.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'unique common elements': means that the elements should appear in both lists and should not repeat in the result.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Convert both lists to sets to remove duplicates.\n    - Find the intersection of these sets to get common elements.\n    - Convert the result back to a list.\n    - Sort the list.\n    - Return the sorted list.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    explanation: The number 2 appears in both lists, but since we need unique common elements, the result should only include one instance of 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic already ensures that only unique common elements are considered.\n\n# [core concept]\n    'unique common elements'\n    Explanation: This concept refers to elements that appear in both lists without repetition.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Convert both lists to sets to remove duplicates.\n    - Find the intersection of these sets to get common elements.\n    - Convert the result back to a list.\n    - Sort the list.\n    - Return the sorted list.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    explanation: The number 2 appears in both lists, but since we need unique common elements, the result should only include one instance of 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic already ensures that only unique common elements are considered.\n", "requirement analysis:\nThe requirement is to create a function that returns sorted unique common elements from two lists. The function should handle basic list inputs and ensure that the output is sorted and contains only unique elements. The function should also be efficient and clear in its implementation.\nrequirement pool:\n- The function should return sorted unique common elements from two lists\n- The function should handle basic list inputs\n- The function should be efficient in its implementation\n- The function should be clear and readable\n- The function should handle edge cases effectively\nTo create a function that returns sorted unique common elements from two lists, we will utilize Python's built-in set operations, which are both efficient and clear. We will convert the lists to sets to efficiently find common elements, then convert the result back to a list and sort it to ensure the output is sorted and unique.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common elements': elements that appear in both lists\n    'unique elements': elements that appear only once in the result\n    'sorted order': elements should be in ascending order\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Convert both lists to sets to find common elements.\n    - Convert the set of common elements back to a list.\n    - Sort the list to ensure the output is in ascending order.\n    - Return the sorted list.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    explanation: The number 2 is the only common element, and it appears more than once, so it should be listed only once in the output.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will return an empty list when there are no common elements.\n\n# [core concept]\n    'common elements': elements that appear in both lists\n    'unique elements': elements that appear only once in the result\n    'sorted order': elements should be in ascending order\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Convert both lists to sets to find common elements.\n    - Convert the set of common elements back to a list.\n    - Sort the list to ensure the output is in ascending order.\n    - Return the sorted list.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    explanation: The number 2 is the only common element, and it appears more than once, so it should be listed only once in the output.\n", "requirement analysis:\nThe requirement is to create a function that returns sorted unique common elements from two lists. The function should be efficient and handle various types of input gracefully. The output should be sorted in ascending order to ensure readability and usability.\nrequirement pool:\n- The function should return sorted unique common elements from two lists.\n- The function should handle various types of input gracefully.\n- The function should be efficient in terms of performance.\n- The function should be easy to integrate into existing projects.\nTo create a function that returns sorted unique common elements from two lists, we will use Python's built-in set operations, which are efficient and straightforward. We will convert the lists to sets to find the intersection, then convert the result back to a list and sort it.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'unique common elements': means that the elements should appear in both lists and should not repeat.\n    'sorted': means that the final list should be in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Convert both lists to sets to find the intersection.\n    - Convert the intersection result back to a list.\n    - Sort the list.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    Explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    Explanation: The number 2 appears in both lists, but since we need unique common elements, the output is [2].\n    common([1, 2, 3, 4], [4, 3, 2, 1]) = [1, 2, 3, 4]\n    Explanation: All elements are common, and since they are unique, the output is the sorted list of all elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic already ensures that the common elements are unique and the list is sorted.\n", "requirement analysis:\nThe requirement is to create a function that returns sorted unique common elements from two lists. This is a common operation in data processing and should be efficient and easy to use. The function should handle basic list types and be compatible with Python's standard library.\nrequirement pool:\n- The function should return a list of common elements that are unique.\n- The function should handle lists of varying sizes efficiently.\n- The function should be compatible with Python's standard library.\n- The function should handle edge cases such as empty lists or lists with no common elements.\nWe will use Python's built-in set operations to efficiently find the intersection of the two lists, then convert the result to a list and sort it to ensure the elements are unique and sorted.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'unique common elements': means that the elements should appear in both lists and should not repeat.\n    'sorted': means that the final list should be in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `common(l1, l2)`, we can follow these steps:\n    1. Convert both lists to sets to remove duplicates.\n    2. Find the intersection of these two sets to get the common elements.\n    3. Convert the resulting set back to a list.\n    4. Sort the list to ensure the elements are in ascending order.\n    5. Return the sorted list.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    explanation: The number 2 is the only common element, and it appears more than once in both lists, so it should only be listed once in the output.\n    common([], [1, 2, 3]) = []\n    explanation: One of the lists is empty, so there are no common elements, and the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The built-in set operations will automatically handle cases where one or both lists are empty, as they will result in an empty intersection.\n", "requirement analysis:\nThe requirement is to find common elements between two lists, ensuring the result is unique and sorted. This is a common task in data manipulation and should be implemented efficiently. The function should handle basic list operations and be easy to integrate into other projects.\nrequirement pool:\n- Implement a function to find common elements between two lists.\n- Ensure the result contains only unique elements.\n- Return the result in sorted order.\n- Optimize the function for performance, especially for large lists.\n- Include clear documentation and examples for easy integration.\nTo implement the function efficiently, we will utilize Python's built-in set operations, which are both fast and easy to understand. We will convert the lists to sets to find the intersection, then convert the result back to a list to ensure uniqueness and sorting.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'unique elements': means that the final list should not have any duplicate values.\n    'sorted order': means that the final list should be in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Convert both lists to sets to find the intersection.\n    - Convert the intersection result back to a list.\n    - Sort the list to ensure the elements are in ascending order.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 2, 2, 3], [2, 2, 4, 5]) = [2]\n    explanation: The number 2 appears in both lists, but since we need unique elements, the output should only include one instance of 2.\n    common([], [1, 2, 3]) = []\n    explanation: One of the lists is empty, so there are no common elements, and the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan already covers the case where one or both lists are empty.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], "completion": "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted unique common elements for two lists.\n    Args:\n        l1 (list): First list of elements\n        l2 (list): Second list of elements\n    Returns:\n        list: Sorted list of unique common elements\n    Examples:\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n            [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n            [2, 3]\n    '''\n    # Convert lists to sets to find the intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection result back to a list\n    result_list = list(intersection)\n    \n    # Sort the list to ensure the elements are in ascending order\n    result_list.sort()\n    \n    return result_list\n", "passed": true, "pass": true, "pass_num": 10, "round": 454, "repair_prompt": ["def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for two lists. You need to identify the elements that appear in both lists. Then ensure these elements are unique.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", " def common(l1: list, l2: list):\n    '''Return sorted unique common elements for two lists. You need to identify the elements that appear in both lists. Then ensure these elements are unique.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3", " def common(l1: list, l2: list):\n    '''Return sorted unique common elements for two lists. You need to identify the elements that appear in both lists. Then ensure these elements are unique.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3"], "mutate_method": "expand_one2two", "parent_index": 379}
