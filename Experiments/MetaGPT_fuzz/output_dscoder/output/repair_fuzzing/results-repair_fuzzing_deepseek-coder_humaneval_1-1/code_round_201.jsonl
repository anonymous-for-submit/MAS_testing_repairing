{"task_id": "HumanEval/7", "prompt": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter an input list of strings so that it only contains strings that have a given substring. You need to scan through each string element in the list carefully. Then, identify those that include the specified substring.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''", "entry_point": "filter_by_substring", "canonical_solution": "    return [x for x in strings if substring in x]\n", "test": ["def check(filter_by_substring):\n\tassert filter_by_substring(['ugk', 'lxpl', 'dofffwbjmkjs', 'dakolixjey', 'EKbFGGOve', 'jcu'], 'ak') == ['dakolixjey']", "def check(filter_by_substring):\n\tassert filter_by_substring(['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj'], '') == ['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj']", "def check(filter_by_substring):\n\tassert filter_by_substring(['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej'], '') == ['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn'], '') == ['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn']", "def check(filter_by_substring):\n\tassert filter_by_substring(['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq'], '') == ['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp'], '') == ['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp']", "def check(filter_by_substring):\n\tassert filter_by_substring(['vuk', 'miq', 'lpogymr', 'dwxkxx', 'zpZrzWLRQz', 'iygu'], 'yg') == ['iygu']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn'], '') == ['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kdtqsykk', 'bgykpzt', 'tkht', 'bgr'], 't') == ['kdtqsykk', 'bgykpzt', 'tkht']", "def check(filter_by_substring):\n\tassert filter_by_substring(['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg'], '') == ['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['oni', 'zleaohlkif', 'grzeqgllx', 'xsavijydab'], 'sa') == ['xsavijydab']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kqox', 'knr', 'qlaaxt', 'pst', 'XduWEmb', 'egaqop'], 'ps') == ['pst']", "def check(filter_by_substring):\n\tassert filter_by_substring(['rdce', 'pepwrjoo', 'ozdnanxsiqj', ' jclyvgb', 'sfsgenBWtFR', 'ozpzyu'], 's') == ['ozdnanxsiqj', 'sfsgenBWtFR']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fot', 'eum', 'pxgsbphx', 'gzaorjz', 'KFVOhWwpoC', 'leht'], 'le') == ['leht']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tconue', 'mlney', 'akxtnzl', 'edrad'], 'on') == ['tconue']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'john') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje'], '') == ['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje']", "def check(filter_by_substring):\n\tassert filter_by_substring(['eilf', 'mpj', 'nhqktxlz', 'tafvngt', 'rgP', 'lqedsgz'], 'h') == ['nhqktxlz']", "def check(filter_by_substring):\n\tassert filter_by_substring(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']", "def check(filter_by_substring):\n\tassert filter_by_substring(['exkbpmyod', 'wafdw', 'essen', 'gycuxrrp'], 'af') == ['wafdw']", "def check(filter_by_substring):\n\tassert filter_by_substring(['sxivcdjg', 'npgx', 'inpeumlqwmth', 'fckeci', 'LsDtYSsBmG', 'qicaol'], 'c') == ['sxivcdjg', 'fckeci', 'qicaol']", "def check(filter_by_substring):\n\tassert filter_by_substring(['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw'], '') == ['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw']", "def check(filter_by_substring):\n\tassert filter_by_substring(['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd'], '') == ['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd']", "def check(filter_by_substring):\n\tassert filter_by_substring(['rei', 'lfmvyvcl', 'uodn', 'bwbaijeudy'], 'od') == ['uodn']", "def check(filter_by_substring):\n\tassert filter_by_substring(['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh'], '') == ['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh']", "def check(filter_by_substring):\n\tassert filter_by_substring(['usqvhbm', 'igpyd', 'gszactxzm', 'vqiyslsqnfe', 'vOhpjWbUu', 'awuwl'], 'w') == ['awuwl']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig'], '') == ['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig']", "def check(filter_by_substring):\n\tassert filter_by_substring(['rzlmq', 'nypmkzsg', 'aqngjmg', 'hldubutw', 'ZoTIDt', 'fgohcqf'], 'zl') == ['rzlmq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['puma', 'ahtk', 'glkv', 'vkdc'], 'um') == ['puma']", "def check(filter_by_substring):\n\tassert filter_by_substring(['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb'], 's') == ['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb']", "def check(filter_by_substring):\n\tassert filter_by_substring(['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf'], '') == ['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fekndc', 'bey', 'xhysf', 'pwobsqo l', 'OSx', 'ftpidu'], 'p') == ['pwobsqo l', 'ftpidu']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tjbhxevmk', 'lutcztrn', 'vzwocf', 'lxmhqfqzcidl'], 'zw') == ['vzwocf']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'agw') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr'], '') == ['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jfrgxtn', 'emgcjlv', 'kzfda', 'wsgvtzsoe', 'ALCGgsNR', 'ryv'], 'e') == ['emgcjlv', 'wsgvtzsoe']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'y') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['btfesq', 'rkagnsvsnzrs', 'eubbokyrm', 'gaxepuosip'], 'ga') == ['gaxepuosip']", "def check(filter_by_substring):\n\tassert filter_by_substring(['zupqmk', 'rwsqpdth', 'nlocbgvg', 'icfuzakjtknb', 'hyo', 'bqtjtn'], 'oc') == ['nlocbgvg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['shxzctwmk', 'sdwufvy', 'olicmd', ' qjur', 'zTRvOovqTV', 'ehumiisy'], 'ol') == ['olicmd']", "def check(filter_by_substring):\n\tassert filter_by_substring(['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz'], '') == ['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jfgi', 'exrlzppdsje', 'tdpgsobl', 'yjok'], 't') == ['tdpgsobl']", "def check(filter_by_substring):\n\tassert filter_by_substring(['gfikjrgy', 'onqcptegu', 'eyzyby', 'wbixoc ym', 'FHqsfXhbS', 'ark'], 'yz') == ['eyzyby']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'ii') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['augunz', 'fsyn', 'rzbjmi', 'nesckl', 'oCjPtbazAEsA', 'eyxtyx'], 'b') == ['rzbjmi', 'oCjPtbazAEsA']", "def check(filter_by_substring):\n\tassert filter_by_substring(['scuasnve', 'yydy', 'fbjkc', 'syqw', 'zvO', 'pdlry'], 'y') == ['yydy', 'syqw', 'pdlry']", "def check(filter_by_substring):\n\tassert filter_by_substring(['xjp', 'mpsdixcyw', 'mfqlwxatj', 'fiorka', 'kJUIVY', 'dekjfnmm'], 'ek') == ['dekjfnmm']", "def check(filter_by_substring):\n\tassert filter_by_substring(['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq'], '') == ['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'hm') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag'], '') == ['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag']", "def check(filter_by_substring):\n\tassert filter_by_substring(['onw', 'vxqogmm', 'igoksz', 'sug xjoxjadz', 'PDxYMxKzL', 'caez'], 'P') == ['PDxYMxKzL']", "def check(filter_by_substring):\n\tassert filter_by_substring(['oxmaldkqp', 'oksz', 'mjo', 'hlyomadtjj'], 'ma') == ['oxmaldkqp', 'hlyomadtjj']", "def check(filter_by_substring):\n\tassert filter_by_substring(['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq'], '') == ['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['avdkvxgq', 'tcln', 'vvvmj', 'hgidnvs'], 'v') == ['avdkvxgq', 'vvvmj', 'hgidnvs']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fjtbhk', 'zagej', 'ecstspbf', 'dpftwhjpsdon', 'RcVDi', 'mmrqfzoed'], 'ag') == ['zagej']", "def check(filter_by_substring):\n\tassert filter_by_substring(['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt'], '') == ['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'u') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo'], '') == ['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo']", "def check(filter_by_substring):\n\tassert filter_by_substring(['vlzqs', 'vaa', 'jyokyuek', 'blq'], 'va') == ['vaa']", "def check(filter_by_substring):\n\tassert filter_by_substring(['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym'], '') == ['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym']", "def check(filter_by_substring):\n\tassert filter_by_substring(['yrbqlzt', 'yoljy', 'hgnst', 'egwkaepxkr', 'pHPzwAlLi', 'jnzsvjnqd'], 'j') == ['yoljy', 'jnzsvjnqd']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf'], '') == ['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf']", "def check(filter_by_substring):\n\tassert filter_by_substring(['eqthk', 'hnfe', 'ywjz', 'pntutudpdu', 'yJmt', 'eufmcif'], 'nf') == ['hnfe']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jwzdw', 'cft', 'tvleiwn', 'wnbp', 'yQfFUrje', 'uhg'], 'bp') == ['wnbp']", "def check(filter_by_substring):\n\tassert filter_by_substring(['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj'], '') == ['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jmftlg', 'svpf', 'ahstcm', 'ulxugoklqs'], 's') == ['svpf', 'ahstcm', 'ulxugoklqs']", "def check(filter_by_substring):\n\tassert filter_by_substring(['wfvacvya', 'rrz', 'vgsagcsb', 'mvn', 'aDs', 'mphoywuq'], 'fv') == ['wfvacvya']", "def check(filter_by_substring):\n\tassert filter_by_substring(['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv'], '') == ['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv']", "def check(filter_by_substring):\n\tassert filter_by_substring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']", "def check(filter_by_substring):\n\tassert filter_by_substring(['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg'], '') == ['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['potgjni', 'snwj', 'pzzoklax', 'wnxdznip', 'JTlXExklWu', 'wgb'], 'n') == ['potgjni', 'snwj', 'wnxdznip']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'p') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']", "def check(filter_by_substring):\n\tassert filter_by_substring(['usmxmm', 'lewsordxonk', 'ozdow', 'fgacbnf'], 'u') == ['usmxmm']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ysuub', 'ebnfgbery', 'scgbpwkjl', 'adenslpxeqwf'], 'u') == ['ysuub']", "def check(filter_by_substring):\n\tassert filter_by_substring(['sftm', 'dioyco', 'iuuqfi', 'rbqlkpykbbzf', 'bWJjEcloelv', 'bfbjmgjql'], 'W') == ['bWJjEcloelv']", "def check(filter_by_substring):\n\tassert filter_by_substring(['oqoinujt', 'rkikbewjm', 'zpgfpdmyn', 'dmwxjss', 'qcgDNg', 'rmpqswrd'], 'ki') == ['rkikbewjm']", "def check(filter_by_substring):\n\tassert filter_by_substring(['gnu', 'qounpksy', 'atrzxeqfp', 'lurboel', 'RjIGVEs', 'nwiq'], 'qo') == ['qounpksy']", "def check(filter_by_substring):\n\tassert filter_by_substring(['dkgduwon', 'gxku', 'dou', 'yuidgjkbxe'], 'id') == ['yuidgjkbxe']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jaqamxam', 'racvaeu', 'gpshdiwef', 'gmcaonpp'], 'ps') == ['gpshdiwef']", "def check(filter_by_substring):\n\tassert filter_by_substring(['dgscqyaz', 'dykyill', 'lvher', 'ibqz', 'SmsHmLTEgw', 'keisthr'], 'e') == ['lvher', 'keisthr']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jqbhage', 'ydq', 'ddcagpb', 'edvnjuevted', 'DZcBCg', 'hyrsi'], 'q') == ['jqbhage', 'ydq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['dhpuhk', 'cmayyfjgv', 'grutd', ' tu hovh', 'QGCCvFPAXHHQ', 'mbxovs'], 'm') == ['cmayyfjgv', 'mbxovs']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp'], '') == ['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp']", "def check(filter_by_substring):\n\tassert filter_by_substring(['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz'], '') == ['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ffq', 'ymkokonn', 'vtu', 'nzghjgyk'], 'm') == ['ymkokonn']", "def check(filter_by_substring):\n\tassert filter_by_substring(['qsut', 'igzl', 'zpaen', 'yphoctvqw'], 'yp') == ['yphoctvqw']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd'], '') == ['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ntbtue', 'xfmvt', 'wtrzaz', 'wuyjr ldgwwm', 'RxIxdKCol', 'hmt'], 'xf') == ['xfmvt']", "def check(filter_by_substring):\n\tassert filter_by_substring(['hvoihyj', 'ulmqpwdl', 'crhrgo', 'ukcsrdksd', 'jsNWfXSsxHE', 'mla'], 'a') == ['mla']", "def check(filter_by_substring):\n\tassert filter_by_substring(['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy'], '') == ['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fimum', 'xmnmw', 'chbdrhlkt', 'difxuhc', 'gTlhU', 'qdikcnl'], 'im') == ['fimum']", "def check(filter_by_substring):\n\tassert filter_by_substring(['cst', 'akmh', 'lva', 'fpy fm', 'gfqijgxkhm', 'jkriy'], 'k') == ['akmh', 'gfqijgxkhm', 'jkriy']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk'], '') == ['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk']", "def check(filter_by_substring):\n\tassert filter_by_substring(['qaplgtthu', 'ylkvtgeipq', 'qseb', 'ghigzmkfxss'], 'qa') == ['qaplgtthu']", "def check(filter_by_substring):\n\tassert filter_by_substring(['smcse', 'gxzwz', 'olbea', 'yukag', 'JaDjvdHbtfLM', 'kncvrbzg'], 'yu') == ['yukag']", "def check(filter_by_substring):\n\tassert filter_by_substring(['mskf', 'qltsxwf', 'vuxg', 'jty', 'rnyqYyDjQ', 'opmcslazf'], 'pm') == ['opmcslazf']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ygndao', 'umazijg', 'ujv', 'i kyrfjq', 'nyXNlvWstDr', 'kioxvagx'], 'u') == ['umazijg', 'ujv']", "def check(filter_by_substring):\n\tassert filter_by_substring(['dmnu', 'snp', 'khydvutwhm', 'cgv', 'LClfX', 'wihfwkg'], 'ih') == ['wihfwkg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq'], '') == ['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tbbahnqmx', 'yaw', 'upedb', 'bwz', 'xptoH', 'wxhm'], 'pe') == ['upedb']", "def check(filter_by_substring):\n\tassert filter_by_substring(['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg'], '') == ['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['nkvfmcpka', 'iugtl', 'tvjvei', 'vnhwdmwc i', 'ZzXH', 'bbh'], 'n') == ['nkvfmcpka', 'vnhwdmwc i']", "def check(filter_by_substring):\n\tassert filter_by_substring(['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh'], '') == ['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tcvb', 'idguap', 'ukgtnfzqj', 'vfwmburpzqgg', 'jDFfcfd', 'cfbauoso'], 'c') == ['tcvb', 'jDFfcfd', 'cfbauoso']", "def check(filter_by_substring):\n\tassert filter_by_substring(['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx'], '') == ['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx']"], "test_case_list": ["assert filter_by_substring(['ugk', 'lxpl', 'dofffwbjmkjs', 'dakolixjey', 'EKbFGGOve', 'jcu'], 'ak') == ['dakolixjey']", "assert filter_by_substring(['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj'], '') == ['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj']", "assert filter_by_substring(['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej'], '') == ['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej']", "assert filter_by_substring(['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn'], '') == ['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn']", "assert filter_by_substring(['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq'], '') == ['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq']", "assert filter_by_substring(['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp'], '') == ['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp']", "assert filter_by_substring(['vuk', 'miq', 'lpogymr', 'dwxkxx', 'zpZrzWLRQz', 'iygu'], 'yg') == ['iygu']", "assert filter_by_substring(['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn'], '') == ['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn']", "assert filter_by_substring(['kdtqsykk', 'bgykpzt', 'tkht', 'bgr'], 't') == ['kdtqsykk', 'bgykpzt', 'tkht']", "assert filter_by_substring(['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg'], '') == ['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg']", "assert filter_by_substring(['oni', 'zleaohlkif', 'grzeqgllx', 'xsavijydab'], 'sa') == ['xsavijydab']", "assert filter_by_substring(['kqox', 'knr', 'qlaaxt', 'pst', 'XduWEmb', 'egaqop'], 'ps') == ['pst']", "assert filter_by_substring(['rdce', 'pepwrjoo', 'ozdnanxsiqj', ' jclyvgb', 'sfsgenBWtFR', 'ozpzyu'], 's') == ['ozdnanxsiqj', 'sfsgenBWtFR']", "assert filter_by_substring(['fot', 'eum', 'pxgsbphx', 'gzaorjz', 'KFVOhWwpoC', 'leht'], 'le') == ['leht']", "assert filter_by_substring(['tconue', 'mlney', 'akxtnzl', 'edrad'], 'on') == ['tconue']", "assert filter_by_substring([], 'john') == []", "assert filter_by_substring(['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje'], '') == ['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje']", "assert filter_by_substring(['eilf', 'mpj', 'nhqktxlz', 'tafvngt', 'rgP', 'lqedsgz'], 'h') == ['nhqktxlz']", "assert filter_by_substring(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']", "assert filter_by_substring(['exkbpmyod', 'wafdw', 'essen', 'gycuxrrp'], 'af') == ['wafdw']", "assert filter_by_substring(['sxivcdjg', 'npgx', 'inpeumlqwmth', 'fckeci', 'LsDtYSsBmG', 'qicaol'], 'c') == ['sxivcdjg', 'fckeci', 'qicaol']", "assert filter_by_substring(['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw'], '') == ['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw']", "assert filter_by_substring(['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd'], '') == ['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd']", "assert filter_by_substring(['rei', 'lfmvyvcl', 'uodn', 'bwbaijeudy'], 'od') == ['uodn']", "assert filter_by_substring(['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh'], '') == ['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh']", "assert filter_by_substring(['usqvhbm', 'igpyd', 'gszactxzm', 'vqiyslsqnfe', 'vOhpjWbUu', 'awuwl'], 'w') == ['awuwl']", "assert filter_by_substring(['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig'], '') == ['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig']", "assert filter_by_substring(['rzlmq', 'nypmkzsg', 'aqngjmg', 'hldubutw', 'ZoTIDt', 'fgohcqf'], 'zl') == ['rzlmq']", "assert filter_by_substring(['puma', 'ahtk', 'glkv', 'vkdc'], 'um') == ['puma']", "assert filter_by_substring(['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb'], 's') == ['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb']", "assert filter_by_substring(['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf'], '') == ['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf']", "assert filter_by_substring(['fekndc', 'bey', 'xhysf', 'pwobsqo l', 'OSx', 'ftpidu'], 'p') == ['pwobsqo l', 'ftpidu']", "assert filter_by_substring(['tjbhxevmk', 'lutcztrn', 'vzwocf', 'lxmhqfqzcidl'], 'zw') == ['vzwocf']", "assert filter_by_substring([], 'agw') == []", "assert filter_by_substring(['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr'], '') == ['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr']", "assert filter_by_substring(['jfrgxtn', 'emgcjlv', 'kzfda', 'wsgvtzsoe', 'ALCGgsNR', 'ryv'], 'e') == ['emgcjlv', 'wsgvtzsoe']", "assert filter_by_substring([], 'y') == []", "assert filter_by_substring(['btfesq', 'rkagnsvsnzrs', 'eubbokyrm', 'gaxepuosip'], 'ga') == ['gaxepuosip']", "assert filter_by_substring(['zupqmk', 'rwsqpdth', 'nlocbgvg', 'icfuzakjtknb', 'hyo', 'bqtjtn'], 'oc') == ['nlocbgvg']", "assert filter_by_substring(['shxzctwmk', 'sdwufvy', 'olicmd', ' qjur', 'zTRvOovqTV', 'ehumiisy'], 'ol') == ['olicmd']", "assert filter_by_substring(['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz'], '') == ['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz']", "assert filter_by_substring(['jfgi', 'exrlzppdsje', 'tdpgsobl', 'yjok'], 't') == ['tdpgsobl']", "assert filter_by_substring(['gfikjrgy', 'onqcptegu', 'eyzyby', 'wbixoc ym', 'FHqsfXhbS', 'ark'], 'yz') == ['eyzyby']", "assert filter_by_substring([], 'ii') == []", "assert filter_by_substring(['augunz', 'fsyn', 'rzbjmi', 'nesckl', 'oCjPtbazAEsA', 'eyxtyx'], 'b') == ['rzbjmi', 'oCjPtbazAEsA']", "assert filter_by_substring(['scuasnve', 'yydy', 'fbjkc', 'syqw', 'zvO', 'pdlry'], 'y') == ['yydy', 'syqw', 'pdlry']", "assert filter_by_substring(['xjp', 'mpsdixcyw', 'mfqlwxatj', 'fiorka', 'kJUIVY', 'dekjfnmm'], 'ek') == ['dekjfnmm']", "assert filter_by_substring(['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq'], '') == ['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq']", "assert filter_by_substring([], 'hm') == []", "assert filter_by_substring(['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag'], '') == ['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag']", "assert filter_by_substring(['onw', 'vxqogmm', 'igoksz', 'sug xjoxjadz', 'PDxYMxKzL', 'caez'], 'P') == ['PDxYMxKzL']", "assert filter_by_substring(['oxmaldkqp', 'oksz', 'mjo', 'hlyomadtjj'], 'ma') == ['oxmaldkqp', 'hlyomadtjj']", "assert filter_by_substring(['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq'], '') == ['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq']", "assert filter_by_substring(['avdkvxgq', 'tcln', 'vvvmj', 'hgidnvs'], 'v') == ['avdkvxgq', 'vvvmj', 'hgidnvs']", "assert filter_by_substring(['fjtbhk', 'zagej', 'ecstspbf', 'dpftwhjpsdon', 'RcVDi', 'mmrqfzoed'], 'ag') == ['zagej']", "assert filter_by_substring(['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt'], '') == ['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt']", "assert filter_by_substring([], 'u') == []", "assert filter_by_substring(['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo'], '') == ['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo']", "assert filter_by_substring(['vlzqs', 'vaa', 'jyokyuek', 'blq'], 'va') == ['vaa']", "assert filter_by_substring(['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym'], '') == ['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym']", "assert filter_by_substring(['yrbqlzt', 'yoljy', 'hgnst', 'egwkaepxkr', 'pHPzwAlLi', 'jnzsvjnqd'], 'j') == ['yoljy', 'jnzsvjnqd']", "assert filter_by_substring(['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf'], '') == ['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf']", "assert filter_by_substring(['eqthk', 'hnfe', 'ywjz', 'pntutudpdu', 'yJmt', 'eufmcif'], 'nf') == ['hnfe']", "assert filter_by_substring(['jwzdw', 'cft', 'tvleiwn', 'wnbp', 'yQfFUrje', 'uhg'], 'bp') == ['wnbp']", "assert filter_by_substring(['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj'], '') == ['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj']", "assert filter_by_substring(['jmftlg', 'svpf', 'ahstcm', 'ulxugoklqs'], 's') == ['svpf', 'ahstcm', 'ulxugoklqs']", "assert filter_by_substring(['wfvacvya', 'rrz', 'vgsagcsb', 'mvn', 'aDs', 'mphoywuq'], 'fv') == ['wfvacvya']", "assert filter_by_substring(['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv'], '') == ['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv']", "assert filter_by_substring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']", "assert filter_by_substring(['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg'], '') == ['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg']", "assert filter_by_substring(['potgjni', 'snwj', 'pzzoklax', 'wnxdznip', 'JTlXExklWu', 'wgb'], 'n') == ['potgjni', 'snwj', 'wnxdznip']", "assert filter_by_substring([], 'p') == []", "assert filter_by_substring(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']", "assert filter_by_substring(['usmxmm', 'lewsordxonk', 'ozdow', 'fgacbnf'], 'u') == ['usmxmm']", "assert filter_by_substring(['ysuub', 'ebnfgbery', 'scgbpwkjl', 'adenslpxeqwf'], 'u') == ['ysuub']", "assert filter_by_substring(['sftm', 'dioyco', 'iuuqfi', 'rbqlkpykbbzf', 'bWJjEcloelv', 'bfbjmgjql'], 'W') == ['bWJjEcloelv']", "assert filter_by_substring(['oqoinujt', 'rkikbewjm', 'zpgfpdmyn', 'dmwxjss', 'qcgDNg', 'rmpqswrd'], 'ki') == ['rkikbewjm']", "assert filter_by_substring(['gnu', 'qounpksy', 'atrzxeqfp', 'lurboel', 'RjIGVEs', 'nwiq'], 'qo') == ['qounpksy']", "assert filter_by_substring(['dkgduwon', 'gxku', 'dou', 'yuidgjkbxe'], 'id') == ['yuidgjkbxe']", "assert filter_by_substring(['jaqamxam', 'racvaeu', 'gpshdiwef', 'gmcaonpp'], 'ps') == ['gpshdiwef']", "assert filter_by_substring(['dgscqyaz', 'dykyill', 'lvher', 'ibqz', 'SmsHmLTEgw', 'keisthr'], 'e') == ['lvher', 'keisthr']", "assert filter_by_substring(['jqbhage', 'ydq', 'ddcagpb', 'edvnjuevted', 'DZcBCg', 'hyrsi'], 'q') == ['jqbhage', 'ydq']", "assert filter_by_substring(['dhpuhk', 'cmayyfjgv', 'grutd', ' tu hovh', 'QGCCvFPAXHHQ', 'mbxovs'], 'm') == ['cmayyfjgv', 'mbxovs']", "assert filter_by_substring(['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp'], '') == ['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp']", "assert filter_by_substring(['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz'], '') == ['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz']", "assert filter_by_substring(['ffq', 'ymkokonn', 'vtu', 'nzghjgyk'], 'm') == ['ymkokonn']", "assert filter_by_substring(['qsut', 'igzl', 'zpaen', 'yphoctvqw'], 'yp') == ['yphoctvqw']", "assert filter_by_substring(['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd'], '') == ['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd']", "assert filter_by_substring(['ntbtue', 'xfmvt', 'wtrzaz', 'wuyjr ldgwwm', 'RxIxdKCol', 'hmt'], 'xf') == ['xfmvt']", "assert filter_by_substring(['hvoihyj', 'ulmqpwdl', 'crhrgo', 'ukcsrdksd', 'jsNWfXSsxHE', 'mla'], 'a') == ['mla']", "assert filter_by_substring(['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy'], '') == ['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy']", "assert filter_by_substring(['fimum', 'xmnmw', 'chbdrhlkt', 'difxuhc', 'gTlhU', 'qdikcnl'], 'im') == ['fimum']", "assert filter_by_substring(['cst', 'akmh', 'lva', 'fpy fm', 'gfqijgxkhm', 'jkriy'], 'k') == ['akmh', 'gfqijgxkhm', 'jkriy']", "assert filter_by_substring(['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk'], '') == ['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk']", "assert filter_by_substring(['qaplgtthu', 'ylkvtgeipq', 'qseb', 'ghigzmkfxss'], 'qa') == ['qaplgtthu']", "assert filter_by_substring(['smcse', 'gxzwz', 'olbea', 'yukag', 'JaDjvdHbtfLM', 'kncvrbzg'], 'yu') == ['yukag']", "assert filter_by_substring(['mskf', 'qltsxwf', 'vuxg', 'jty', 'rnyqYyDjQ', 'opmcslazf'], 'pm') == ['opmcslazf']", "assert filter_by_substring(['ygndao', 'umazijg', 'ujv', 'i kyrfjq', 'nyXNlvWstDr', 'kioxvagx'], 'u') == ['umazijg', 'ujv']", "assert filter_by_substring(['dmnu', 'snp', 'khydvutwhm', 'cgv', 'LClfX', 'wihfwkg'], 'ih') == ['wihfwkg']", "assert filter_by_substring(['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq'], '') == ['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq']", "assert filter_by_substring(['tbbahnqmx', 'yaw', 'upedb', 'bwz', 'xptoH', 'wxhm'], 'pe') == ['upedb']", "assert filter_by_substring(['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg'], '') == ['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg']", "assert filter_by_substring(['nkvfmcpka', 'iugtl', 'tvjvei', 'vnhwdmwc i', 'ZzXH', 'bbh'], 'n') == ['nkvfmcpka', 'vnhwdmwc i']", "assert filter_by_substring(['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh'], '') == ['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh']", "assert filter_by_substring(['tcvb', 'idguap', 'ukgtnfzqj', 'vfwmburpzqgg', 'jDFfcfd', 'cfbauoso'], 'c') == ['tcvb', 'jDFfcfd', 'cfbauoso']", "assert filter_by_substring(['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx'], '') == ['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx']"], "nl": " Filter an input list of strings only for ones that contain given substring\n    ", "func": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:", "examples": ">>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    ", "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filters a list of strings to include only those that contain a specific substring.\n\n    Args:\n        strings (List[str]): The list of strings to filter.\n        substring (str): The substring to look for within the strings.\n\n    Returns:\n        List[str]: A list of strings that contain the specified substring.\n    \"\"\"\n    if not strings:\n        return []\n    \n    result = [string for string in strings if substring in string]\n    return result\n", "from typing import List\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filters a list of strings to include only those that contain the specified substring.\n\n    Args:\n        strings (List[str]): The list of strings to filter.\n        substring (str): The substring to look for within the strings.\n\n    Returns:\n        List[str]: A list of strings that contain the specified substring.\n    \"\"\"\n    return [string for string in strings if substring in string]\n", "from typing import List\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filters a list of strings to include only those that contain a specified substring.\n\n    Args:\n        strings (List[str]): The list of strings to filter.\n        substring (str): The substring to look for within the strings.\n\n    Returns:\n        List[str]: A list of strings that contain the specified substring.\n    \"\"\"\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n", "from typing import List\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filters a list of strings to include only those that contain the specified substring.\n\n    Args:\n        strings (List[str]): The list of strings to filter.\n        substring (str): The substring to search for within the strings.\n\n    Returns:\n        List[str]: A list of strings that contain the specified substring.\n    \"\"\"\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n", "from typing import List\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filters a list of strings to include only those that contain a specific substring.\n\n    Args:\n        strings (List[str]): The list of strings to filter.\n        substring (str): The substring to look for within the strings.\n\n    Returns:\n        List[str]: A list of strings that contain the specified substring.\n    \"\"\"\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n", "from typing import List\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filters a list of strings to include only those that contain the specified substring.\n\n    Args:\n        strings (List[str]): The list of strings to filter.\n        substring (str): The substring to look for within the strings.\n\n    Returns:\n        List[str]: A list of strings that contain the specified substring.\n    \"\"\"\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filters a list of strings to include only those that contain the specified substring.\n\n    Args:\n        strings (List[str]): A list of strings to be filtered.\n        substring (str): The substring to search for within each string.\n\n    Returns:\n        List[str]: A list of strings that contain the specified substring.\n    \"\"\"\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n", "from typing import List\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filters a list of strings to include only those that contain a specific substring.\n\n    Args:\n        strings (List[str]): The list of strings to filter.\n        substring (str): The substring to look for within the strings.\n\n    Returns:\n        List[str]: A list of strings that contain the specified substring.\n    \"\"\"\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n", "from typing import List\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filters a list of strings to include only those that contain the specified substring.\n\n    Args:\n        strings (List[str]): A list of strings to be filtered.\n        substring (str): The substring that must be present in the strings to be included in the result.\n\n    Returns:\n        List[str]: A list of strings that contain the specified substring.\n    \"\"\"\n    return [string for string in strings if substring in string]\n", "from typing import List\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filters a list of strings to include only those that contain the specified substring.\n\n    Args:\n        strings (List[str]): The list of strings to filter.\n        substring (str): The substring to search for within the strings.\n\n    Returns:\n        List[str]: A list of strings that contain the specified substring.\n    \"\"\"\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n"], "plans": ["requirement analysis:\nThe requirement is to filter a list of strings based on a given substring. The function should be able to handle various edge cases such as empty lists, case sensitivity, and different types of input strings. The solution should be efficient and user-friendly.\nrequirement pool:\n- The main code should efficiently filter strings based on the given substring\n- The application should handle edge cases such as empty lists and case sensitivity\n- The user interface should be intuitive and easy to use\n- The application should be optimized for performance and scalability\nWe will use Python's built-in capabilities to create a simple and efficient function that filters a list of strings based on a given substring. The function will be designed to handle edge cases such as empty lists and case sensitivity. The implementation will be straightforward, focusing on readability and performance.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': a sequence of characters within a string.\n    Explanation: In the requirement, the function is designed to filter a list of strings to include only those that contain a specific substring. This means that the function will check each string in the list to see if it includes the given substring.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests iterating through each string in the list and checking if it contains the specified substring. This can be done using Python's `in` keyword for string membership testing.\n\n# [edge case] \n    filter_by_substring([], 'a') = []\n    Explanation: An empty list should return an empty list because there are no strings to check.\n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') = ['abc', 'bacd', 'array']\n    Explanation: The function should return a list containing only those strings that include the substring 'a'. In this case, 'abc', 'bacd', and 'array' are the strings that include 'a'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The built-in functionality of Python's list comprehension and the `in` keyword will handle the edge case of an empty list correctly.\n\n# [core concept]\n    'list comprehension': a concise way to create lists based on existing lists.\n    Explanation: The function uses list comprehension to filter the list of strings based on the presence of the specified substring.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests using list comprehension to filter the list of strings. This is a straightforward and efficient way to achieve the desired functionality.\n\n# [edge case] \n    filter_by_substring([], 'a') = []\n    Explanation: An empty list should return an empty list because there are no strings to check.\n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') = ['abc', 'bacd', 'array']\n    Explanation: The function should return a list containing only those strings that include the substring 'a'. In this case, 'abc', 'bacd', and 'array' are the strings that include 'a'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The built-in functionality of Python's list comprehension and the `in` keyword will handle the edge case of an empty list correctly.\n", "requirement analysis:\nThe original requirements specify a function that filters a list of strings based on the presence of a specified substring. The function should be efficient and handle edge cases such as empty lists and strings. The requirements are clear and straightforward, focusing on functionality and user experience.\nrequirement pool:\n- Implement the filter_by_substring function with efficiency and accuracy\n- Ensure the function handles all edge cases as specified\n- Develop a user-friendly interface for easy input and output\n- Optimize performance for handling large datasets\nWe will implement the `filter_by_substring` function using Python's built-in capabilities to ensure efficiency and simplicity. The function will iterate through each string in the input list and check if it contains the specified substring. If it does, the string will be included in the output list. This approach leverages Python's strong support for list comprehensions, which are both elegant and performant for this task.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a sequence of characters within a string\n    'list comprehension': a concise way to create lists based on existing lists\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The plan suggests using list comprehension to filter the list of strings. The function will iterate through each string in the input list and check if it contains the specified substring. If it does, the string will be included in the output list.\n\n# [edge case] \n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') = ['abc', 'bacd', 'array']\n    Explanation: The substring 'a' is found in all the strings in the input list, so all strings are included in the output list.\n    filter_by_substring(['hello', 'world', 'python'], 'o') = ['hello', 'world']\n    Explanation: The substring 'o' is found in 'hello' and 'world', but not in 'python', so only these two strings are included in the output list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The list comprehension will naturally handle the case where the input list is empty, as it will just return an empty list.\n\n# [extra code for edge case]\n    No extra code needed for edge cases as list comprehension handles empty list and substring not found cases.\n", "requirement analysis:\nThe requirement is to filter a list of strings based on the presence of a specified substring. The function should be efficient and handle various edge cases. The user stories and competitive analysis will help in understanding the user needs and market offerings.\nrequirement pool:\n- Implement a function that filters strings based on a given substring.\n- Ensure the function is efficient and can handle large lists of strings.\n- Include support for edge cases such as empty lists or substrings not present in any string.\n- Provide a user-friendly interface for easy interaction with the filtering function.\n- Offer flexibility in filtering options to cater to different user needs.\nTo implement the function efficiently, we will utilize Python's built-in capabilities and leverage the 'typing' module for type annotations. The function will iterate through each string in the input list and check if the substring is present. This approach ensures that the function is both simple and efficient, making it suitable for handling large lists of strings.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a sequence of characters within a string.\n    Explanation: In the requirement, the function is designed to filter a list of strings to include only those that contain a specified substring. This involves checking each string for the presence of the substring.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests iterating through each string in the list and checking if the substring is present. This can be done using the `in` operator in Python, which checks for the presence of a substring within a string.\n\n# [edge case] \n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') = ['abc', 'bacd', 'array']\n    Explanation: The substring 'a' is present in all the strings in the input list, so all strings are included in the output list.\n    filter_by_substring(['hello', 'world', 'python'], 'o') = ['hello', 'world']\n    Explanation: The substring 'o' is present in the first two strings but not in the third string, so only the first two strings are included in the output list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic already correctly handles the case where the input list is empty or contains no strings that include the specified substring.\n\n# [core concept]\n    'presence of a substring': means checking if a specific sequence of characters is found within a string.\n    Explanation: In the requirement, the function needs to identify whether a given substring is present in each string of the input list. This is a fundamental operation in string manipulation.\n\n# [phrase showing quantity relationship]\n    'more than': means that the function should return strings that contain the substring more than once.\n    Explanation: If the requirement specifies that the function should return strings where the substring appears more than once, this phrase indicates that the function should count the occurrences of the substring and include the string in the output if it appears more than once.\n\n# [degree adverb] \n    'most': means that the function should return strings where the substring appears the most times.\n    Explanation: If the requirement specifies that the function should return strings where the substring appears the most times, this phrase indicates that the function should count the occurrences of the substring and include the string in the output if it appears the most times compared to other strings in the list.\n\n# [code logic]\n    provide detailed logic to implement the code\n\n# [edge case] \n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') = ['abc', 'bacd', 'array']\n    Explanation: The substring 'a' is present in all the strings in the input list, so all strings are included in the output list.\n    filter_by_substring(['hello', 'world', 'python'], 'o') = ['hello', 'world']\n    Explanation: The substring 'o' is present in the first two strings but not in the third string, so only the first two strings are included in the output list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic already correctly handles the case where the input list is empty or contains no strings that include the specified substring.\n", "requirement analysis:\nThe requirement is to filter a list of strings based on a given substring. The function should be able to handle empty lists and return an empty list in such cases. The function should also be able to handle various lengths and types of strings, ensuring it can be used in a wide range of applications.\nrequirement pool:\n- The main code should filter the list of strings based on the given substring\n- The function should handle empty lists and return an empty list\n- Ensure the function is efficient and can handle large datasets\n- Develop a user-friendly interface for easy input and output\n- Implement error handling to inform users if the application is processing or if it has encountered an error\nWe will use Python's built-in capabilities to create a simple and efficient function that filters a list of strings based on a given substring. The function will iterate through each string in the list and check if it contains the specified substring. If it does, the string will be added to the result list. The function will handle edge cases such as empty lists by returning an empty list immediately.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring search': the process of identifying and extracting specific sequences of characters within a larger string.\n    Explanation: In this requirement, the core concept is to search for a specific substring within a list of strings and return only those strings that contain the substring.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through each string in the list and check if the substring is present. If the substring is found, add the string to the result list.\n\n# [edge case] \n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') = ['abc', 'bacd', 'array']\n    Explanation: The substring 'a' is present in all the strings in the list, so all strings are included in the result.\n    filter_by_substring([], 'a') = []\n    Explanation: The input list is empty, so the function should return an empty list immediately.\n    filter_by_substring(['hello', 'world'], 'o') = ['hello', 'world']\n    Explanation: The substring 'o' is present in both 'hello' and 'world', so both are included in the result.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic already covers the case of an empty list by returning an empty list immediately.\n", "requirement analysis:\nThe original requirements call for a function that filters a list of strings based on the presence of a specified substring. The function should be efficient and handle edge cases such as empty lists and strings. The requirements are clear and straightforward, focusing on functionality and performance.\nrequirement pool:\n- Implement the filter_by_substring function to accurately filter strings based on a given substring.\n- Ensure the function is optimized for performance to handle large lists of strings efficiently.\n- Develop a user-friendly interface for easy input and output of strings and substrings.\n- Include error handling for unexpected inputs such as non-string elements in the list.\nWe will use Python's built-in capabilities to implement the function efficiently. The function will iterate through each string in the list and check if the substring is present. This approach ensures simplicity and performance.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': a sequence of characters within a string.\n    Explanation: In the requirement, the function is designed to filter a list of strings to include only those that contain a specific substring. This means that the function will check each string in the list to see if it includes the given substring.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests iterating through each string in the list and checking if it contains the substring. This can be done using a simple loop and the `in` keyword in Python, which checks for the presence of a substring within a string.\n\n# [edge case] \n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') = ['abc', 'bacd', 'array']\n    Explanation: The input list contains strings that include the substring 'a'. The function should return all strings that meet this criterion.\n    filter_by_substring(['no matches', 'no substring here'], 'a') = []\n    Explanation: The input list does not contain any strings that include the substring 'a'. The function should return an empty list.\n    filter_by_substring(['test', 'example'], '') = ['test', 'example']\n    Explanation: The substring is an empty string, which means every string in the list will be included since an empty string is a substring of any string.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic already correctly handles cases where the input list is empty or where the substring is an empty string.\n", "requirement analysis:\nThe original requirements call for a function that filters a list of strings based on the presence of a specified substring. The function should be efficient and easy to use, with clear examples and documentation. The competitive analysis shows a range of products with varying strengths in performance and user experience.\nrequirement pool:\n- Implement a function that accurately filters strings based on a given substring.\n- Ensure the function is optimized for performance, handling large lists efficiently.\n- Develop a user-friendly interface for easy interaction and understanding.\n- Include clear documentation and examples to guide users through the filtering process.\n- Consider additional features for customization and advanced filtering options.\nWe will use Python's built-in capabilities to implement the function efficiently. The function will iterate through each string in the list and check if the substring is present. This approach ensures simplicity and performance, which are crucial for handling large lists of strings efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': a sequence of characters within a string.\n    Explanation: In the requirement, the function is designed to filter a list of strings to include only those that contain a specific substring. This means the function will check each string in the list to see if it includes the given substring.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests iterating through each string in the list and checking if it contains the specified substring. This can be done using a simple loop and the `in` keyword in Python, which checks for the presence of a substring within a string.\n\n# [edge case] \n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') = ['abc', 'bacd', 'array']\n    Explanation: The input list contains strings that include the substring 'a'. The function should return a list of these strings.\n    filter_by_substring(['no matches', 'no substring here'], 'a') = []\n    Explanation: The input list does not contain any strings that include the substring 'a'. The function should return an empty list.\n    filter_by_substring(['single', 'match', 'found'], 'm') = ['match', 'found']\n    Explanation: The input list contains strings that include the substring 'm'. The function should return a list of these strings.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic in the plan is sufficient to handle cases where the input list is empty or contains no strings that include the specified substring.\n", "requirement analysis:\nThe requirement is to filter a list of strings based on a given substring. The function should be efficient and handle various edge cases such as empty lists and substrings not present in any string. The solution should be simple and easy to understand, suitable for integration into other projects.\nrequirement pool:\n- The main code should efficiently filter strings containing the specified substring.\n- The function should handle edge cases such as empty lists and substrings not found in any string.\n- The solution should be easy to understand and integrate into other projects.\n- The function should be tested for performance with large lists of strings.\nWe will use Python's built-in capabilities to create a simple and efficient function that filters a list of strings based on a given substring. The function will iterate through each string in the list and check if it contains the specified substring. If it does, the string will be included in the output list. This approach ensures simplicity and efficiency, making it suitable for both small and large datasets.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': a sequence of characters within a string.\n    Explanation: In the requirement, the function is designed to filter a list of strings to include only those that contain a specific substring. This means the function will check each string in the list to see if it has the specified substring.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests iterating through each string in the list and checking if it contains the specified substring. This can be done using a simple loop and the `in` keyword in Python, which checks for the presence of a substring within a string.\n\n# [edge case] \n    filter_by_substring([], 'a') = []\n    Explanation: When the input list is empty, the function should return an empty list, as there are no strings to check.\n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') = ['abc', 'bacd', 'array']\n    Explanation: The function will check each string in the list to see if it contains the substring 'a'. Only the strings 'abc', 'bacd', and 'array' contain 'a', so these are the ones that will be included in the output list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic already correctly handles the case where the input list is empty.\n\n# [core concept]\n    'filtering': the process of selecting a subset of data from a larger dataset based on specific criteria.\n    Explanation: In the requirement, the function is designed to filter a list of strings to include only those that contain a specific substring. This is a common data processing task in programming.\n\n# [phrase showing quantity relationship]\n    'more than': means that we need to find integers greater than zero.\n    'at least as many times': means that we need to find the integer whose frequency is greater than or equal to its value.\n\n# [degree adverb] \n    'largest': means that we need the largest integer that appears more than or equal to its value.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests creating a dictionary to store the frequency of each integer in the list, iterating through the list to update the frequency, and then iterating through the dictionary to find the largest integer that meets the condition.\n\n# [edge case] \n    search([2,2,3,3,3]) = 3\n    Explanation: Both 2 and 3 appear more than or equal to their values, but 3 is the largest number.\n    search([3,3,2,4,4,4]) = -1\n    Explanation: Number 2 appears one time, number 3 appears two times, number 4 appears three times, none of them appear more than or equal to their values, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We can set the initial return value to -1 and then find the largest integer that meets the condition.\n\n# [core concept]\n    'substring': a sequence of characters within a string.\n    Explanation: In the requirement, the function is designed to filter a list of strings to include only those that contain a specific substring. This means the function will check each string in the list to see if it has the specified substring.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests iterating through each string in the list and checking if it contains the specified substring. This can be done using a simple loop and the `in` keyword in Python, which checks for the presence of a substring within a string.\n\n# [edge case] \n    filter_by_substring([], 'a') = []\n    Explanation: When the input list is empty, the function should return an empty list, as there are no strings to check.\n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') = ['abc', 'bacd', 'array']\n    Explanation: The function will check each string in the list to see if it contains the substring 'a'. Only the strings 'abc', 'bacd', and 'array' contain 'a', so these are the ones that will be included in the output list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic already correctly handles the case where the input list is empty.\n", "requirement analysis:\nThe requirement is to filter a list of strings based on a given substring. The function should be able to handle both empty lists and lists with various string lengths. The solution should be efficient and easy to use, providing immediate feedback to the user.\nrequirement pool:\n- Implement a function that filters strings based on a given substring\n- Ensure the function can handle empty lists\n- Optimize performance for large lists of strings\n- Develop a user-friendly interface for easy substring input\n- Include error handling for invalid inputs\nWe will implement the function using Python's built-in capabilities and the 'filter' function for simplicity and efficiency. The function will iterate through each string in the list and check if the substring is present. This approach ensures that the function is both easy to understand and maintain.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': a sequence of characters within a string.\n    Explanation: In the requirement, the function is designed to filter a list of strings to include only those that contain a specific substring. This means that the function will check each string in the list to see if it includes the specified substring.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The plan suggests using Python's built-in capabilities to implement the function. The function will iterate through each string in the list and check if the substring is present using the `in` operator. If the substring is found, the string will be included in the output list.\n\n# [edge case] \n    filter_by_substring(['abc', 'def', 'ghi'], 'd') = ['def']\n    Explanation: The substring 'd' is present in the string 'def', so it should be included in the output list.\n    filter_by_substring(['abc', 'def', 'ghi'], 'x') = []\n    Explanation: The substring 'x' is not present in any of the strings in the input list, so the output list should be empty.\n    filter_by_substring(['hello world', 'world peace', 'peace in the world'], 'world') = ['hello world', 'world peace']\n    Explanation: The substring 'world' is present in both 'hello world' and 'world peace', so both should be included in the output list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic will correctly handle cases where the input list is empty or where the substring is not found in any of the strings.\n", "requirement analysis:\nThe requirement is to filter a list of strings based on a given substring. The solution should be efficient and handle both empty lists and cases with multiple strings effectively. The user interface should be simple and intuitive to use.\nrequirement pool:\n- Implement a function that filters strings based on a given substring\n- Ensure the function works efficiently even with large lists\n- Develop a user-friendly interface for easy interaction\n- Test the product for robustness and performance\nWe will implement the function using Python's built-in capabilities, specifically leveraging list comprehension for efficient filtering. This approach ensures simplicity and performance, aligning with the goal of creating an efficient and easy-to-use filtering tool.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': a sequence of characters within a string.\n    Explanation: In the requirement, the substring is a part of the string that we are looking for within other strings.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests using list comprehension to filter the list of strings. This approach is efficient and aligns with the goal of simplicity and performance.\n\n# [edge case] \n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') = ['abc', 'bacd', 'array']\n    Explanation: The substring 'a' is found in all the given strings, so they are included in the filtered list.\n    filter_by_substring(['hello', 'world', 'python'], 'o') = ['hello', 'world']\n    Explanation: The substring 'o' is found in 'hello' and 'world', but not in 'python'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The list comprehension will naturally return an empty list if the input list is empty.\n\n    ```python\n    if not strings:\n        return []\n    ```\n", "requirement analysis:\nThe original requirements call for a function that filters a list of strings based on a specified substring. The function should be efficient and handle various edge cases. The user stories and competitive analysis will guide the development of a user-friendly and feature-rich application.\nrequirement pool:\n- Implement a function that filters strings based on a given substring.\n- Ensure the function is efficient and can handle large datasets.\n- Develop a user-friendly interface for easy input and output.\n- Include error handling for invalid inputs.\n- Optimize the application for performance and scalability.\nWe will implement the function using Python's built-in capabilities, ensuring it is efficient and handles large datasets effectively. The function will iterate through each string in the list and check if it contains the specified substring. If it does, the string will be included in the result list. The function will also include basic error handling to manage cases where the input lists or substrings are invalid.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a sequence of characters within a string\n    Explanation: In the requirement, the function is designed to filter a list of strings to include only those that contain a specific substring. This concept is crucial for understanding how the function will operate on the input data.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The function should iterate through each string in the list and check if it contains the specified substring. If it does, the string will be included in the result list.\n\n# [edge case] \n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') = ['abc', 'bacd', 'array']\n    Explanation: The input list contains strings that include the substring 'a', so all these strings are included in the output list.\n    filter_by_substring([], 'a') = []\n    Explanation: The input list is empty, so the output list is also empty.\n    filter_by_substring(['hello', 'world'], 'x') = []\n    Explanation: None of the strings in the input list contain the substring 'x', so the output list is empty.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The function already handles the case where the input list is empty by returning an empty list. For the other edge case, where no strings contain the specified substring, the function correctly returns an empty list.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [106, 106, 106, 106, 106, 106, 106, 106, 106, 106], "completion": "from typing import List\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filters a list of strings to include only those that contain the specified substring.\n\n    Args:\n        strings (List[str]): The list of strings to filter.\n        substring (str): The substring to search for within the strings.\n\n    Returns:\n        List[str]: A list of strings that contain the specified substring.\n    \"\"\"\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n", "passed": true, "pass": true, "pass_num": 10, "round": 201, "repair_prompt": ["def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter an input list of strings so that it only contains strings that have a given substring. You need to scan through each string element in the list carefully. Then, identify those that include the specified substring.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''", " def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings so that it only contains strings that have a given substring. You need to scan through each string element in the list carefully. Then, identify those that include the specified substring.\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''\n    result = []\n", " def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings so that it only contains strings that have a given substring. You need to scan through each string element in the list carefully. Then, identify those that include the specified substring.\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''"], "mutate_method": "expand_one2two", "parent_index": 6}
