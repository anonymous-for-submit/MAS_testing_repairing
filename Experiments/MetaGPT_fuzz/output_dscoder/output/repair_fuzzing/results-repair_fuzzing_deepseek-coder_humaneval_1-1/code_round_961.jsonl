{"task_id": "HumanEval/161", "prompt": "def solve(s):\t\n'''You have a string s.   \n    if s[i] is a letter, change its casing from lowercase to uppercase or vice versa,   \n    otherwise keep it as it is.   \n    If the string contains no letters, reverse the string.   \n    The function should return the resulted string.\nExamples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    '''", "entry_point": "solve", "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "test": ["def check(solve):\n\tassert solve(\"#ryv@$l*\") == '#RYV@$L*'", "def check(solve):\n\tassert solve(\"BjdhsNs\") == 'bJDHSnS'", "def check(solve):\n\tassert solve(\"$883%3/\") == '/3%388$'", "def check(solve):\n\tassert solve(\"QnNQfv\") == 'qNnqFV'", "def check(solve):\n\tassert solve(\"o3LWaIl4\") == 'O3lwAiL4'", "def check(solve):\n\tassert solve(\"zt*#m&v\") == 'ZT*#M&V'", "def check(solve):\n\tassert solve(\"wDgT\") == 'WdGt'", "def check(solve):\n\tassert solve(\"ab\") == \"AB\"", "def check(solve):\n\tassert solve(\"=E!NyLi\") == '=e!nYlI'", "def check(solve):\n\tassert solve(\"jZVuQ\") == 'JzvUq'", "def check(solve):\n\tassert solve(\"UKg@xpM~G\") == 'ukG@XPm~g'", "def check(solve):\n\tassert solve(\"%cCcq#\") == '%CcCQ#'", "def check(solve):\n\tassert solve(\"++A^/?xV\") == '++a^/?Xv'", "def check(solve):\n\tassert solve(\"7_%\") == '%_7'", "def check(solve):\n\tassert solve(\"qon\") == 'QON'", "def check(solve):\n\tassert solve(\"giiqdy\") == 'GIIQDY'", "def check(solve):\n\tassert solve(\"~@8%\") == '%8@~'", "def check(solve):\n\tassert solve(\"^@B\") == '^@b'", "def check(solve):\n\tassert solve(\"?UGciW\") == '?ugCIw'", "def check(solve):\n\tassert solve(\"17000556\") == '65500071'", "def check(solve):\n\tassert solve(\"nfl*&=+$@\") == 'NFL*&=+$@'", "def check(solve):\n\tassert solve(\"wSdcA\") == 'WsDCa'", "def check(solve):\n\tassert solve(\"luG9*?%\") == 'LUg9*?%'", "def check(solve):\n\tassert solve(\"5$0!@\") == '@!0$5'", "def check(solve):\n\tassert solve(\"sxFaMa\") == 'SXfAmA'", "def check(solve):\n\tassert solve(\"?ao\") == '?AO'", "def check(solve):\n\tassert solve(\"k&!_\") == 'K&!_'", "def check(solve):\n\tassert solve(\"-|MSfK\") == '-|msFk'", "def check(solve):\n\tassert solve(\"5%@\") == '@%5'", "def check(solve):\n\tassert solve(\"=epet*orq\") == '=EPET*ORQ'", "def check(solve):\n\tassert solve(\"^dHUM-y\") == '^Dhum-Y'", "def check(solve):\n\tassert solve(\"npKwSAD\") == 'NPkWsad'", "def check(solve):\n\tassert solve(\"55=9/9\") == '9/9=55'", "def check(solve):\n\tassert solve(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:", "def check(solve):\n\tassert solve(\"*^JOyeSI\") == '*^joYEsi'", "def check(solve):\n\tassert solve(\"yzzdc\") == 'YZZDC'", "def check(solve):\n\tassert solve(\"i!X&/T\") == 'I!x&/t'", "def check(solve):\n\tassert solve(\"mlB-*F\") == 'MLb-*f'", "def check(solve):\n\tassert solve(\"856\") == '658'", "def check(solve):\n\tassert solve(\"ifafP-OoTK%\") == 'IFAFp-oOtk%'", "def check(solve):\n\tassert solve(\"Xug\") == 'xUG'", "def check(solve):\n\tassert solve(\"~2~@0\") == '0@~2~'", "def check(solve):\n\tassert solve(\"UMm:m\") == 'umM:M'", "def check(solve):\n\tassert solve(\"6812832\") == '2382186'", "def check(solve):\n\tassert solve(\"QDF:CXB\") == 'qdf:cxb'", "def check(solve):\n\tassert solve(\"5-=@&*\") == '*&@=-5'", "def check(solve):\n\tassert solve(\"761~^_%~4\") == '4~%_^~167'", "def check(solve):\n\tassert solve(\"#$a^D\") == \"#$A^d\"", "def check(solve):\n\tassert solve(\"4hzTAP_e\") == '4HZtap_E'", "def check(solve):\n\tassert solve(\"2058786\") == '6878502'", "def check(solve):\n\tassert solve(\"yErHfPuhE\") == 'YeRhFpUHe'", "def check(solve):\n\tassert solve(\"*u~\") == '*U~'", "def check(solve):\n\tassert solve(\"g*chm\") == 'G*CHM'", "def check(solve):\n\tassert solve(\"enxhq\") == 'ENXHQ'", "def check(solve):\n\tassert solve(\"ctpx\") == 'CTPX'", "def check(solve):\n\tassert solve(\"j$&Wd\") == 'J$&wD'", "def check(solve):\n\tassert solve(\"ji$rpiwCJ\") == 'JI$RPIWcj'", "def check(solve):\n\tassert solve(\"cjG~zXx\") == 'CJg~ZxX'", "def check(solve):\n\tassert solve(\"dgksb\") == 'DGKSB'", "def check(solve):\n\tassert solve(\"827_~+=6:\") == ':6=+~_728'", "def check(solve):\n\tassert solve(\"vr_d$kBQ\") == 'VR_D$Kbq'", "def check(solve):\n\tassert solve(\"389627754\") == '457726983'", "def check(solve):\n\tassert solve(\"+:#\") == '#:+'", "def check(solve):\n\tassert solve(\"prytYOIw\") == 'PRYTyoiW'", "def check(solve):\n\tassert solve(\"+1/05*!?+\") == '+?!*50/1+'", "def check(solve):\n\tassert solve(\"$u%lZTsz\") == '$U%LztSZ'", "def check(solve):\n\tassert solve(\"qyAKc\") == 'QYakC'", "def check(solve):\n\tassert solve(\"/@-\") == '-@/'", "def check(solve):\n\tassert solve(\"iiyw\") == 'IIYW'", "def check(solve):\n\tassert solve(\"#a@C\") == \"#A@c\"", "def check(solve):\n\tassert solve(\"49623838\") == '83832694'", "def check(solve):\n\tassert solve(\"u:kx!*\") == 'U:KX!*'", "def check(solve):\n\tassert solve(\"gsl\") == 'GSL'", "def check(solve):\n\tassert solve(\"jlycko\") == 'JLYCKO'", "def check(solve):\n\tassert solve(\"MUSKIE\") == 'muskie'", "def check(solve):\n\tassert solve(\":TDr\") == ':tdR'", "def check(solve):\n\tassert solve(\"bkd\") == 'BKD'", "def check(solve):\n\tassert solve(\"DNOZ2XKDMJZSwC$\") == 'dnoz2xkdmjzsWc$'", "def check(solve):\n\tassert solve(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.", "def check(solve):\n\tassert solve(\"n$tkw\") == 'N$TKW'", "def check(solve):\n\tassert solve(\"48954\") == '45984'", "def check(solve):\n\tassert solve(\"LlWj5FD\") == 'lLwJ5fd'", "def check(solve):\n\tassert solve(\"AsDf\") == \"aSdF\"", "def check(solve):\n\tassert solve(\"@!93/5**@\") == '@**5/39!@'", "def check(solve):\n\tassert solve(\"VmVDPkI\") == 'vMvdpKi'", "def check(solve):\n\tassert solve(\"mOn\") == 'MoN'", "def check(solve):\n\tassert solve(\"059646105\") == '501646950'", "def check(solve):\n\tassert solve(\"huo^\") == 'HUO^'", "def check(solve):\n\tassert solve(\"ghgnw\") == 'GHGNW'", "def check(solve):\n\tassert solve(\"gne\") == 'GNE'", "def check(solve):\n\tassert solve(\"~~%==41\") == '14==%~~'", "def check(solve):\n\tassert solve(\"%_uoz/#?L\") == '%_UOZ/#?l'", "def check(solve):\n\tassert solve(\"w@l+zd\") == 'W@L+ZD'", "def check(solve):\n\tassert solve(\"1234\") == \"4321\"", "def check(solve):\n\tassert solve(\"EsvNrg\") == 'eSVnRG'", "def check(solve):\n\tassert solve(\"pstVx\") == 'PSTvX'", "def check(solve):\n\tassert solve(\"kLA#y:NC\") == 'Kla#Y:nc'", "def check(solve):\n\tassert solve(\"ePOjFeuu\") == 'EpoJfEUU'", "def check(solve):\n\tassert solve(\"GPJae+?*a\") == 'gpjAE+?*A'", "def check(solve):\n\tassert solve(\"Uc$$xCSQ0cN~\") == 'uC$$Xcsq0Cn~'", "def check(solve):\n\tassert solve(\"gtvtsr\") == 'GTVTSR'", "def check(solve):\n\tassert solve(\"#AsdfW^45\") == \"#aSDFw^45\"", "def check(solve):\n\tassert solve(\"6971168\") == '8611796'", "def check(solve):\n\tassert solve(\"??rwE\") == '??RWe'", "def check(solve):\n\tassert solve(\"HMYxK\") == 'hmyXk'", "def check(solve):\n\tassert solve(\"gcflna\") == 'GCFLNA'", "def check(solve):\n\tassert solve(\"~+/#\") == '#/+~'", "def check(solve):\n\tassert solve(\"glgh\") == 'GLGH'", "def check(solve):\n\tassert solve(\"?gn~\") == '?GN~'", "def check(solve):\n\tassert solve(\"73713138\") == '83131737'", "def check(solve):\n\tassert solve(\"54138\") == '83145'", "def check(solve):\n\tassert solve(\"oGzZO!NOb@Lty\") == 'OgZzo!noB@lTY'", "def check(solve):\n\tassert solve(\"Q&LKD*BmV\") == 'q&lkd*bMv'", "def check(solve):\n\tassert solve(\"13431299\") == '99213431'", "def check(solve):\n\tassert solve(\"~/uc/@p^h\") == '~/UC/@P^H'", "def check(solve):\n\tassert solve(\"4kqV&&/6+Lc\") == '4KQv&&/6+lC'", "def check(solve):\n\tassert solve(\"fqY\") == 'FQy'", "def check(solve):\n\tassert solve(\"|n*e~bx-\") == '|N*E~BX-'", "def check(solve):\n\tassert solve(\"Pj+3w:31N!s6\") == 'pJ+3W:31n!S6'", "def check(solve):\n\tassert solve(\"++skzZ\") == '++SKZz'", "def check(solve):\n\tassert solve(\"%kmlC*s\") == '%KMLc*S'", "def check(solve):\n\tassert solve(\"232948\") == '849232'", "def check(solve):\n\tassert solve(\"613\") == '316'", "def check(solve):\n\tassert solve(\"!tmFhu\") == '!TMfHU'", "def check(solve):\n\tassert solve(\"+fDs:f\") == '+FdS:F'", "def check(solve):\n\tassert solve(\"XAdrNtUNr\") == 'xaDRnTunR'", "def check(solve):\n\tassert solve(\"cqiau\") == 'CQIAU'", "def check(solve):\n\tassert solve(\"340988\") == '889043'"], "test_case_list": ["assert solve(\"#ryv@$l*\") == '#RYV@$L*'", "assert solve(\"BjdhsNs\") == 'bJDHSnS'", "assert solve(\"$883%3/\") == '/3%388$'", "assert solve(\"QnNQfv\") == 'qNnqFV'", "assert solve(\"o3LWaIl4\") == 'O3lwAiL4'", "assert solve(\"zt*#m&v\") == 'ZT*#M&V'", "assert solve(\"wDgT\") == 'WdGt'", "assert solve(\"ab\") == \"AB\"", "assert solve(\"=E!NyLi\") == '=e!nYlI'", "assert solve(\"jZVuQ\") == 'JzvUq'", "assert solve(\"UKg@xpM~G\") == 'ukG@XPm~g'", "assert solve(\"%cCcq#\") == '%CcCQ#'", "assert solve(\"++A^/?xV\") == '++a^/?Xv'", "assert solve(\"7_%\") == '%_7'", "assert solve(\"qon\") == 'QON'", "assert solve(\"giiqdy\") == 'GIIQDY'", "assert solve(\"~@8%\") == '%8@~'", "assert solve(\"^@B\") == '^@b'", "assert solve(\"?UGciW\") == '?ugCIw'", "assert solve(\"17000556\") == '65500071'", "assert solve(\"nfl*&=+$@\") == 'NFL*&=+$@'", "assert solve(\"wSdcA\") == 'WsDCa'", "assert solve(\"luG9*?%\") == 'LUg9*?%'", "assert solve(\"5$0!@\") == '@!0$5'", "assert solve(\"sxFaMa\") == 'SXfAmA'", "assert solve(\"?ao\") == '?AO'", "assert solve(\"k&!_\") == 'K&!_'", "assert solve(\"-|MSfK\") == '-|msFk'", "assert solve(\"5%@\") == '@%5'", "assert solve(\"=epet*orq\") == '=EPET*ORQ'", "assert solve(\"^dHUM-y\") == '^Dhum-Y'", "assert solve(\"npKwSAD\") == 'NPkWsad'", "assert solve(\"55=9/9\") == '9/9=55'", "assert solve(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:", "assert solve(\"*^JOyeSI\") == '*^joYEsi'", "assert solve(\"yzzdc\") == 'YZZDC'", "assert solve(\"i!X&/T\") == 'I!x&/t'", "assert solve(\"mlB-*F\") == 'MLb-*f'", "assert solve(\"856\") == '658'", "assert solve(\"ifafP-OoTK%\") == 'IFAFp-oOtk%'", "assert solve(\"Xug\") == 'xUG'", "assert solve(\"~2~@0\") == '0@~2~'", "assert solve(\"UMm:m\") == 'umM:M'", "assert solve(\"6812832\") == '2382186'", "assert solve(\"QDF:CXB\") == 'qdf:cxb'", "assert solve(\"5-=@&*\") == '*&@=-5'", "assert solve(\"761~^_%~4\") == '4~%_^~167'", "assert solve(\"#$a^D\") == \"#$A^d\"", "assert solve(\"4hzTAP_e\") == '4HZtap_E'", "assert solve(\"2058786\") == '6878502'", "assert solve(\"yErHfPuhE\") == 'YeRhFpUHe'", "assert solve(\"*u~\") == '*U~'", "assert solve(\"g*chm\") == 'G*CHM'", "assert solve(\"enxhq\") == 'ENXHQ'", "assert solve(\"ctpx\") == 'CTPX'", "assert solve(\"j$&Wd\") == 'J$&wD'", "assert solve(\"ji$rpiwCJ\") == 'JI$RPIWcj'", "assert solve(\"cjG~zXx\") == 'CJg~ZxX'", "assert solve(\"dgksb\") == 'DGKSB'", "assert solve(\"827_~+=6:\") == ':6=+~_728'", "assert solve(\"vr_d$kBQ\") == 'VR_D$Kbq'", "assert solve(\"389627754\") == '457726983'", "assert solve(\"+:#\") == '#:+'", "assert solve(\"prytYOIw\") == 'PRYTyoiW'", "assert solve(\"+1/05*!?+\") == '+?!*50/1+'", "assert solve(\"$u%lZTsz\") == '$U%LztSZ'", "assert solve(\"qyAKc\") == 'QYakC'", "assert solve(\"/@-\") == '-@/'", "assert solve(\"iiyw\") == 'IIYW'", "assert solve(\"#a@C\") == \"#A@c\"", "assert solve(\"49623838\") == '83832694'", "assert solve(\"u:kx!*\") == 'U:KX!*'", "assert solve(\"gsl\") == 'GSL'", "assert solve(\"jlycko\") == 'JLYCKO'", "assert solve(\"MUSKIE\") == 'muskie'", "assert solve(\":TDr\") == ':tdR'", "assert solve(\"bkd\") == 'BKD'", "assert solve(\"DNOZ2XKDMJZSwC$\") == 'dnoz2xkdmjzsWc$'", "assert solve(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.", "assert solve(\"n$tkw\") == 'N$TKW'", "assert solve(\"48954\") == '45984'", "assert solve(\"LlWj5FD\") == 'lLwJ5fd'", "assert solve(\"AsDf\") == \"aSdF\"", "assert solve(\"@!93/5**@\") == '@**5/39!@'", "assert solve(\"VmVDPkI\") == 'vMvdpKi'", "assert solve(\"mOn\") == 'MoN'", "assert solve(\"059646105\") == '501646950'", "assert solve(\"huo^\") == 'HUO^'", "assert solve(\"ghgnw\") == 'GHGNW'", "assert solve(\"gne\") == 'GNE'", "assert solve(\"~~%==41\") == '14==%~~'", "assert solve(\"%_uoz/#?L\") == '%_UOZ/#?l'", "assert solve(\"w@l+zd\") == 'W@L+ZD'", "assert solve(\"1234\") == \"4321\"", "assert solve(\"EsvNrg\") == 'eSVnRG'", "assert solve(\"pstVx\") == 'PSTvX'", "assert solve(\"kLA#y:NC\") == 'Kla#Y:nc'", "assert solve(\"ePOjFeuu\") == 'EpoJfEUU'", "assert solve(\"GPJae+?*a\") == 'gpjAE+?*A'", "assert solve(\"Uc$$xCSQ0cN~\") == 'uC$$Xcsq0Cn~'", "assert solve(\"gtvtsr\") == 'GTVTSR'", "assert solve(\"#AsdfW^45\") == \"#aSDFw^45\"", "assert solve(\"6971168\") == '8611796'", "assert solve(\"??rwE\") == '??RWe'", "assert solve(\"HMYxK\") == 'hmyXk'", "assert solve(\"gcflna\") == 'GCFLNA'", "assert solve(\"~+/#\") == '#/+~'", "assert solve(\"glgh\") == 'GLGH'", "assert solve(\"?gn~\") == '?GN~'", "assert solve(\"73713138\") == '83131737'", "assert solve(\"54138\") == '83145'", "assert solve(\"oGzZO!NOb@Lty\") == 'OgZzo!noB@lTY'", "assert solve(\"Q&LKD*BmV\") == 'q&lkd*bMv'", "assert solve(\"13431299\") == '99213431'", "assert solve(\"~/uc/@p^h\") == '~/UC/@P^H'", "assert solve(\"4kqV&&/6+Lc\") == '4KQv&&/6+lC'", "assert solve(\"fqY\") == 'FQy'", "assert solve(\"|n*e~bx-\") == '|N*E~BX-'", "assert solve(\"Pj+3w:31N!s6\") == 'pJ+3W:31n!S6'", "assert solve(\"++skzZ\") == '++SKZz'", "assert solve(\"%kmlC*s\") == '%KMLc*S'", "assert solve(\"232948\") == '849232'", "assert solve(\"613\") == '316'", "assert solve(\"!tmFhu\") == '!TMfHU'", "assert solve(\"+fDs:f\") == '+FdS:F'", "assert solve(\"XAdrNtUNr\") == 'xaDRnTunR'", "assert solve(\"cqiau\") == 'CQIAU'", "assert solve(\"340988\") == '889043'"], "nl": "You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    ", "func": "def solve(s):", "examples": "Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    ", "completions": ["from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function takes a string as input and performs the following operations:\n    1. Iterates through each character in the string.\n    2. Checks if the character is a letter.\n    3. If it is a letter, toggles its casing.\n    4. If no letters are found, reverses the string.\n    5. Returns the resulting string.\n    \n    Args:\n        s (str): The input string to be processed.\n    \n    Returns:\n        str: The processed string after applying the casing manipulation and string reversal logic.\n    \"\"\"\n    # Check if the string contains any letters\n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        # Toggle casing of each letter\n        result = []\n        for char in s:\n            if char.islower():\n                result.append(char.upper())\n            elif char.isupper():\n                result.append(char.lower())\n            else:\n                result.append(char)\n        return ''.join(result)\n    else:\n        # Reverse the string if no letters are found\n        return s[::-1]\n\n# Example usage:\n# print(solve('a1B2'))  # Output: 'A1b2'\n# print(solve('123'))   # Output: '321'\n# print(solve('XYZ'))   # Output: 'xyz'\n", "from typing import List\n## main.py\n\nimport string\n\ndef solve(s: str) -> str:\n    def is_letter(c: str) -> bool:\n        return c.isalpha()\n\n    def toggle_case(c: str) -> str:\n        return c.lower() if c.isupper() else c.upper() if c.islower() else c\n\n    if any(is_letter(char) for char in s):\n        # Toggle case of each letter\n        result = []\n        for char in s:\n            if is_letter(char):\n                result.append(toggle_case(char))\n            else:\n                result.append(char)\n        return ''.join(result)\n    else:\n        # Reverse the string\n        return s[::-1]\n\n# Example usage:\n# print(solve('a1B2'))  # Output: 'A1b2'\n# print(solve('123'))   # Output: '321'\n# print(solve('Python'))  # Output: 'pYTHON'\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    def is_letter(c: str) -> bool:\n        return c.isalpha()\n\n    def toggle_case(c: str) -> str:\n        return c.lower() if c.isupper() else c.upper()\n\n    if any(is_letter(char) for char in s):\n        result = []\n        for char in s:\n            if is_letter(char):\n                result.append(toggle_case(char))\n            else:\n                result.append(char)\n        return ''.join(result)\n    else:\n        return s[::-1]\n\n# Example usage:\n# print(solve('a1B2'))  # Output: 'A1b2'\n# print(solve('123'))   # Output: '321'\n# print(solve('Python'))  # Output: 'pYTHON'\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    Toggles the casing of letters in a string based on their current casing.\n    Non-letter characters remain unchanged. If the string contains no letters, it is reversed.\n    \n    Args:\n        s (str): The input string.\n    \n    Returns:\n        str: The modified string.\n    \"\"\"\n    # Check if the string contains any letters\n    has_letters = any(char.isalpha() for char in s)\n    \n    if not has_letters:\n        # If no letters, reverse the string\n        return s[::-1]\n    \n    # Otherwise, toggle the casing of each letter\n    result = []\n    for char in s:\n        if char.islower():\n            result.append(char.upper())\n        elif char.isupper():\n            result.append(char.lower())\n        else:\n            result.append(char)\n    \n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    Manipulates the input string based on the presence of letters.\n    \n    Args:\n        s (str): The input string to be manipulated.\n    \n    Returns:\n        str: The manipulated string.\n    \"\"\"\n    has_letters = False\n    \n    # Check if the string contains any letters\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            break\n    \n    if not has_letters:\n        # If no letters are found, reverse the string\n        return s[::-1]\n    else:\n        # If letters are found, toggle their casing\n        result = []\n        for char in s:\n            if char.islower():\n                result.append(char.upper())\n            elif char.isupper():\n                result.append(char.lower())\n            else:\n                result.append(char)\n        return ''.join(result)\n\n# Example usage:\n# print(solve(\"abc\"))  # Output: \"ABC\"\n# print(solve(\"123\"))  # Output: \"321\"\n# print(solve(\"#$%\"))  # Output: \"#$%\"\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    # Check if the string contains any letters\n    contains_letters = any(char.isalpha() for char in s)\n    \n    if contains_letters:\n        # Toggle the case of each letter in the string\n        result = []\n        for char in s:\n            if char.isupper():\n                result.append(char.lower())\n            elif char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char)\n        return ''.join(result)\n    else:\n        # Reverse the string\n        return s[::-1]\n", "from typing import List\ndef solve(s: str) -> str:\n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        result = []\n        for char in s:\n            if char.islower():\n                result.append(char.upper())\n            elif char.isupper():\n                result.append(char.lower())\n            else:\n                result.append(char)\n        return ''.join(result)\n    else:\n        return s[::-1]\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    # Check if the string contains any letters\n    contains_letters = any(char.isalpha() for char in s)\n    \n    if contains_letters:\n        # Toggle the case of each letter in the string\n        result = []\n        for char in s:\n            if char.isupper():\n                result.append(char.lower())\n            elif char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char)\n        return ''.join(result)\n    else:\n        # Reverse the string\n        return s[::-1]\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    # Check if the string contains any letters\n    contains_letters = any(char.isalpha() for char in s)\n    \n    if contains_letters:\n        # Toggle the case of each letter in the string\n        result = []\n        for char in s:\n            if char.isupper():\n                result.append(char.lower())\n            elif char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char)\n        return ''.join(result)\n    else:\n        # Reverse the string\n        return s[::-1]\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    Manipulates the input string based on the presence of letters.\n    \n    Args:\n        s (str): The input string to be manipulated.\n    \n    Returns:\n        str: The manipulated string.\n    \"\"\"\n    has_letters = False\n    \n    # Check if the string contains any letters\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            break\n    \n    if not has_letters:\n        # If no letters are found, reverse the string\n        return s[::-1]\n    else:\n        # If letters are found, toggle their casing\n        result = []\n        for char in s:\n            if char.islower():\n                result.append(char.upper())\n            elif char.isupper():\n                result.append(char.lower())\n            else:\n                result.append(char)\n        return ''.join(result)\n\n# Example usage:\n# print(solve(\"abc\"))  # Output: \"ABC\"\n# print(solve(\"123\"))  # Output: \"321\"\n# print(solve(\"#$%\"))  # Output: \"#$%\"\n"], "plans": ["requirement analysis:\nThe requirement involves creating a function that can manipulate the casing of letters in a string and reverse the string if it contains no letters. The function should be user-friendly and provide a clear user experience.\nrequirement pool:\n- Implement a function that toggles the casing of letters in a string\n- Implement a feature to reverse the string if it contains no letters\n- Ensure the application is user-friendly and provides clear instructions\n- Design a responsive UI that is easy to navigate\n- Include accessibility features to support a wide range of users\nWe will use Python's built-in string manipulation functions and a simple UI approach to achieve the desired functionality. The function will check each character in the input string, toggle its casing if it's a letter, and reverse the string if there are no letters.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'casing manipulation': changing the case of a character from lowercase to uppercase or vice versa.\n    'string manipulation': reversing the string if no letters are present.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Iterate through each character in the string.\n    - Check if the character is a letter.\n    - If it is a letter, toggle its casing.\n    - If no letters are found, reverse the string.\n    - Return the resulting string.\n\n# [edge case] \n    solve('123') = '321'\n    explanation: The string contains no letters, so it is reversed.\n    solve('a1B2') = 'A1b2'\n    explanation: Each letter's casing is toggled, and non-letter characters remain unchanged.\n    solve('XYZ') = 'xyz'\n    explanation: Each letter's casing is toggled, and non-letter characters remain unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic already includes the functionality to reverse the string if no letters are found.\n", "requirement analysis:\nThe requirement involves creating a function that can manipulate the case of letters in a string and handle cases where the string contains no letters by reversing it. This function should be versatile and adaptable to different user inputs, ensuring a smooth user experience.\nrequirement pool:\n- The main code should correctly toggle the case of letters in the string\n- The function should handle strings without any letters by reversing them\n- Ensure the application is user-friendly and easy to use\n- Implement responsive design for better user interaction\n- Include basic UI elements for user interaction\nWe will use Python's built-in string manipulation methods and a simple conditional check to determine if the string contains any letters. If it does, we will toggle the case of each letter. If it does not, we will reverse the string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'string manipulation': This includes changing the casing of letters and reversing the string.\n    'conditional check': To determine if the string contains any letters.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Check if the string contains any letters.\n    (2) If it does, iterate through each character in the string:\n        - If the character is a letter, toggle its casing.\n        - Otherwise, keep it as it is.\n    (3) If the string does not contain any letters, reverse the string.\n    (4) Return the resulted string.\n\n# [edge case] \n    solve('123') = '321'\n    Explanation: The string contains no letters, so we reverse the string.\n    solve('a1B2') = 'A1b2'\n    Explanation: The string contains letters, so we toggle the casing of each letter.\n    solve('Python') = 'pYTHON'\n    Explanation: The string contains letters, so we toggle the casing of each letter.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided covers both scenarios: handling strings with and without letters.\n", "requirement analysis:\nThe original requirements specify a function that processes a string based on the type of its characters. It should toggle the case of letters, and if there are no letters, it should reverse the string. This aligns with the goal of creating a versatile string manipulation tool.\nrequirement pool:\n- The main code should correctly identify and process letters, leaving non-letter characters unchanged.\n- The function should handle cases where the string contains no letters, in which case it should reverse the string.\n- Ensure the function is efficient and handles edge cases, such as empty strings or strings with only non-letter characters.\n- Develop a user-friendly interface for easy interaction with the function.\nWe will use Python's built-in string manipulation methods and a simple conditional check to determine if the string contains letters. If it does, we will toggle the case of each letter. If it does not, we will reverse the string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'string manipulation': This includes changing the casing of letters and reversing the string.\n    Explanation: The requirement involves manipulating the characters in a string based on whether they are letters or not. If there are letters, we need to toggle their casing. If there are no letters, we need to reverse the string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Check if the string contains any letters.\n    (2) If it does, iterate through each character in the string:\n        - If the character is a letter, toggle its casing.\n        - Otherwise, keep it as it is.\n    (3) If the string does not contain any letters, reverse the string.\n    (4) Return the resulting string.\n\n# [edge case] \n    solve('123') = '321'\n    Explanation: The string '123' contains no letters, so we reverse it to get '321'.\n    solve('a1B2') = 'A1b2'\n    Explanation: The string contains letters, so we toggle the casing of each letter: 'a' becomes 'A', '1' remains '1', 'B' becomes 'b', and '2' remains '2'. The final string is 'A1b2'.\n    solve('Python') = 'pYTHON'\n    Explanation: The string contains letters, so we toggle the casing of each letter: 'P' becomes 'p', 'y' becomes 'Y', 't' remains 't', 'h' becomes 'H', 'o' remains 'o', and 'n' becomes 'N'. The final string is 'pYTHON'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can handle both cases (string with and without letters) correctly.\n", "requirement analysis:\nThe original requirements specify a function that manipulates the casing of letters in a string based on their current casing, while leaving non-letter characters unchanged. If the string contains no letters, it should be reversed. The function should return the modified string. This requirement is clear and concise, providing a clear path for implementation.\nrequirement pool:\n- Implement the function to toggle the casing of letters.\n- Handle non-letter characters appropriately.\n- Ensure the function works correctly when the input string contains no letters.\n- Optimize the function for performance and user experience.\nWe will implement the function to toggle the casing of letters in a string based on their current casing. Non-letter characters will remain unchanged. If the string contains no letters, it will be reversed. This will be achieved using Python's built-in string manipulation methods and conditional logic.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'casing toggle': changing the case of a letter from lowercase to uppercase or vice versa.\n    'no letters': the string does not contain any alphabetic characters.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    (1) Check if the string contains any letters.\n    (2) If it does, iterate through each character in the string:\n        - If the character is a letter, toggle its casing.\n        - If the character is not a letter, leave it unchanged.\n    (3) If the string contains no letters, reverse the string.\n    (4) Return the resulting string.\n\n# [edge case] \n    solve(\"1234\") = \"4321\"\n    Explanation: The string contains no letters, so it is reversed.\n    solve(\"ab\") = \"AB\"\n    Explanation: The string contains letters, so their casing is toggled.\n    solve(\"#a@C\") = \"#A@c\"\n    Explanation: The string contains letters, so their casing is toggled. Non-letter characters remain unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan already covers the case where the string contains no letters by reversing it.\n", "requirement analysis:\nThe original requirements specify a function that manipulates the casing of letters in a string based on their current casing, while leaving non-letter characters unchanged. If the string contains no letters, it should be reversed. The function should return the modified string. This requirement is clear and specific, focusing on string manipulation and handling different character types.\nrequirement pool:\n- Implement the function to toggle the casing of letters.\n- Handle non-letter characters appropriately.\n- Ensure the function works correctly when the input string contains no letters.\n- Optimize the function for performance and readability.\nWe will use Python's built-in string manipulation functions and a simple conditional check to determine if a character is a letter. If the string contains no letters, we will reverse it. This approach ensures simplicity and efficiency.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'casing change': changing the case of a letter from lowercase to uppercase or vice versa.\n    'no letters': the string does not contain any alphabetic characters.\n    'reverse': reversing the string when there are no letters.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    The function will iterate through each character in the string. If the character is a letter, it will toggle its case. If no letters are found after the iteration, the string will be reversed.\n\n# [edge case] \n    solve(\"abc\") = \"ABC\"\n    Explanation: The string contains letters, so their cases are toggled, resulting in \"ABC\".\n    solve(\"123\") = \"321\"\n    Explanation: The string contains no letters, so it is reversed, resulting in \"321\".\n    solve(\"#$%\") = \"#$%\"\n    Explanation: The string contains no letters, but since there are no letters, the original string is returned.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case since the logic already covers the scenario of no letters by reversing the string.\n", "requirement analysis:\nThe function 'solve' needs to handle different cases of letters and non-letter characters in a string. It should also handle the scenario where the string contains no letters, in which case it should reverse the string. The requirements are clear and specific, focusing on string manipulation and user experience.\nrequirement pool:\n- Implement a function that can toggle the case of letters in a string\n- Handle strings without any letters by reversing the string\n- Ensure the application is responsive and works well on various devices\n- Develop a user-friendly interface for easy interaction\nWe will implement the function 'solve' by using Python's built-in string manipulation methods and a simple conditional check to determine if the string contains any letters. If the string contains letters, we will iterate through each character, toggling its case. If the string does not contain any letters, we will reverse the string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'string manipulation': includes changing the casing of characters and reversing the string.\n    'conditional check': to determine if the string contains any letters.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Iterate through each character in the string.\n    - Check if the character is a letter.\n    - If it is a letter, toggle its casing.\n    - If the string contains no letters, reverse the string.\n\n# [edge case] \n    solve(\"abc\") = \"ABC\"\n    Explanation: The string contains letters, so we toggle their casing.\n    solve(\"123\") = \"321\"\n    Explanation: The string contains no letters, so we reverse it.\n    solve(\"#$%\") = \"#$%\"\n    Explanation: The string contains no letters, so we reverse it, but since it doesn't contain any letters, the result is the same as the input.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan already covers the edge cases.\n", "requirement analysis:\nThe requirement is to create a function that manipulates a string based on the content of the string. If the string contains letters, it should toggle their casing. If the string contains no letters, it should reverse the string. This requirement is clear and straightforward, focusing on string manipulation and basic string operations.\nrequirement pool:\n- Implement the function to toggle casing of letters and reverse the string if no letters are present\n- Ensure the application is responsive and works well on various devices\n- Design a simple and intuitive user interface\nWe will implement the function by checking each character in the string to determine if it is a letter. If it is, we will toggle its casing. If the string contains no letters, we will reverse the string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'casing toggling': changing the case of a letter from lowercase to uppercase or vice versa.\n    'reversing a string': flipping the order of characters in a string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Iterate through each character in the string.\n    - Check if the character is a letter.\n    - If it is a letter, toggle its casing.\n    - If the string contains no letters, reverse the string.\n    - Return the resulted string.\n\n# [edge case] \n    solve(\"abc\") = \"ABC\"\n    explanation: The string contains only letters, so we toggle the casing of each letter, resulting in \"ABC\".\n    solve(\"123\") = \"321\"\n    explanation: The string contains no letters, so we reverse the string, resulting in \"321\".\n    solve(\"#$%\") = \"#$%\"\n    explanation: The string contains no letters, but it also doesn't contain any letters to toggle, so we return the string as it is, resulting in \"#$%\".\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan already covers the case where the string contains no letters by reversing the string.\n", "requirement analysis:\nThe function 'solve' needs to handle different cases of letters and non-letter characters in a string. It should also handle the scenario where the string contains no letters, in which case it should reverse the string. The requirements are clear and specific, focusing on string manipulation and user experience.\nrequirement pool:\n- Implement a function that can toggle the case of letters in a string\n- Handle strings without any letters by reversing the string\n- Ensure the application is responsive and works well on various devices\n- Develop a user-friendly interface for easy interaction\nWe will implement the function 'solve' by using Python's built-in string manipulation methods and a simple conditional check to determine if the string contains any letters. If the string contains letters, we will iterate through each character, toggling its case. If the string does not contain any letters, we will reverse the string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'string manipulation': includes changing the casing of characters and reversing the string.\n    'conditional check': to determine if the string contains any letters.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Iterate through each character in the string.\n    - Check if the character is a letter.\n    - If it is a letter, toggle its casing.\n    - If the string contains no letters, reverse the string.\n\n# [edge case] \n    solve(\"abc\") = \"ABC\"\n    Explanation: The string contains letters, so we toggle their casing.\n    solve(\"123\") = \"321\"\n    Explanation: The string contains no letters, so we reverse it.\n    solve(\"#$%\") = \"#$%\"\n    Explanation: The string contains no letters, so we reverse it, but since it doesn't contain any letters, the result is the same as the input.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan already covers the edge cases.\n", "requirement analysis:\nThe function 'solve' needs to handle different cases of letters and non-letter characters in a string. It should also handle the scenario where the string contains no letters, in which case it should reverse the string. The requirements are clear and specific, focusing on string manipulation and user experience.\nrequirement pool:\n- Implement a function that can toggle the case of letters in a string\n- Handle strings without any letters by reversing the string\n- Ensure the application is responsive and works well on various devices\n- Develop a user-friendly interface for easy interaction\nWe will implement the function 'solve' by using Python's built-in string manipulation methods and a simple conditional check to determine if the string contains any letters. If the string contains letters, we will iterate through each character, toggling its case. If the string does not contain any letters, we will reverse the string.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'string manipulation': includes changing the casing of characters and reversing the string.\n    'conditional check': to determine if the string contains any letters.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Iterate through each character in the string.\n    - Check if the character is a letter.\n    - If it is a letter, toggle its casing.\n    - If the string contains no letters, reverse the string.\n\n# [edge case] \n    solve(\"abc\") = \"ABC\"\n    Explanation: The string contains letters, so we toggle their casing.\n    solve(\"123\") = \"321\"\n    Explanation: The string contains no letters, so we reverse it.\n    solve(\"#$%\") = \"#$%\"\n    Explanation: The string contains no letters, so we reverse it, but since it doesn't contain any letters, the result is the same as the input.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan already covers the edge cases.\n", "requirement analysis:\nThe original requirements specify a function that manipulates the casing of letters in a string based on their current casing, while leaving non-letter characters unchanged. If the string contains no letters, it should be reversed. The function should return the modified string. This requirement is clear and specific, focusing on string manipulation and handling different character types.\nrequirement pool:\n- Implement the function to toggle the casing of letters.\n- Handle non-letter characters appropriately.\n- Ensure the function works correctly when the input string contains no letters.\n- Optimize the function for performance and readability.\nWe will use Python's built-in string manipulation functions and a simple conditional check to determine if a character is a letter. If the string contains no letters, we will reverse it. This approach ensures simplicity and efficiency.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'casing change': changing the case of a letter from lowercase to uppercase or vice versa.\n    'no letters': the string does not contain any alphabetic characters.\n    'reverse': reversing the string when there are no letters.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    The function will iterate through each character in the string. If the character is a letter, it will toggle its case. If no letters are found after the iteration, the string will be reversed.\n\n# [edge case] \n    solve(\"abc\") = \"ABC\"\n    Explanation: The string contains letters, so their cases are toggled, resulting in \"ABC\".\n    solve(\"123\") = \"321\"\n    Explanation: The string contains no letters, so it is reversed, resulting in \"321\".\n    solve(\"#$%\") = \"#$%\"\n    Explanation: The string contains no letters, but since there are no letters, the original string is returned.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case since the logic already covers the scenario of no letters by reversing the string.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [128, 128, 128, 128, 128, 128, 128, 128, 128, 128], "completion": "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    Manipulates the input string based on the presence of letters.\n    \n    Args:\n        s (str): The input string to be manipulated.\n    \n    Returns:\n        str: The manipulated string.\n    \"\"\"\n    has_letters = False\n    \n    # Check if the string contains any letters\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            break\n    \n    if not has_letters:\n        # If no letters are found, reverse the string\n        return s[::-1]\n    else:\n        # If letters are found, toggle their casing\n        result = []\n        for char in s:\n            if char.islower():\n                result.append(char.upper())\n            elif char.isupper():\n                result.append(char.lower())\n            else:\n                result.append(char)\n        return ''.join(result)\n\n# Example usage:\n# print(solve(\"abc\"))  # Output: \"ABC\"\n# print(solve(\"123\"))  # Output: \"321\"\n# print(solve(\"#$%\"))  # Output: \"#$%\"\n", "passed": true, "pass": true, "pass_num": 10, "round": 961, "repair_prompt": ["def solve(s):\t\n'''You have a string s.   \n    if s[i] is a letter, change its casing from lowercase to uppercase or vice versa,   \n    otherwise keep it as it is.   \n    If the string contains no letters, reverse the string.   \n    The function should return the resulted string.\nExamples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    '''", " def solve(s):\t\n    '''You have a string s.   \n        if s[i] is a letter, change its casing from lowercase to uppercase or vice versa,   \n        otherwise keep it as it is.   \n        If the string contains no letters, reverse the string.   \n        The function should return the resulted string.\n    Examples\n        solve(\"1234\") = \"4321\"\n        solve(\"ab\") = \"AB\"\n        solve(\"#a@C\") = \"#A@c\"\n        '''\n", " def solve(s):\n    '''You have a string s.\n    if s[i] is a letter, change its casing from lowercase to uppercase or vice versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\nExamples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    '''"], "mutate_method": "rephrase_one", "parent_index": 722}
