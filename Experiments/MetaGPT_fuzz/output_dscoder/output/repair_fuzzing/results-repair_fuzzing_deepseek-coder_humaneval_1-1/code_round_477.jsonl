{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that accepts three numbers as input. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "entry_point": "any_int", "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n", "test": ["def check(any_int):\n\tassert any_int(8, 19, 11) == True", "def check(any_int):\n\tassert any_int(7.307, 7.071, 5.088) == False", "def check(any_int):\n\tassert any_int(6, 12, 6) == True", "def check(any_int):\n\tassert any_int(6.511, 2, 3) == False", "def check(any_int):\n\tassert any_int(12, 6, 6) == True", "def check(any_int):\n\tassert any_int(2, 2, 4) == True", "def check(any_int):\n\tassert any_int(5.114, 5, 4) == False", "def check(any_int):\n\tassert any_int(3.376, 6.953, 2.111) == False", "def check(any_int):\n\tassert any_int(2, 3, 1)==True", "def check(any_int):\n\tassert any_int(2, 5, 4) == False", "def check(any_int):\n\tassert any_int(7.194, 1.302, 7.462) == False", "def check(any_int):\n\tassert any_int(1, 7, 8) == True", "def check(any_int):\n\tassert any_int(5, 8, 3) == True", "def check(any_int):\n\tassert any_int(2.389, 9, 10) == False", "def check(any_int):\n\tassert any_int(-1, 0, 1) == True", "def check(any_int):\n\tassert any_int(9, 6, 3) == True", "def check(any_int):\n\tassert any_int(4.38, 6, 1) == False", "def check(any_int):\n\tassert any_int(3.785, 6.308, 7.367) == False", "def check(any_int):\n\tassert any_int(6, 10, 4) == True", "def check(any_int):\n\tassert any_int(1.705, 2, 6.616) == False", "def check(any_int):\n\tassert any_int(6, 4, 2) == True", "def check(any_int):\n\tassert any_int(4, 2, 2)==True", "def check(any_int):\n\tassert any_int(3.692, 2, 7.2) == False", "def check(any_int):\n\tassert any_int(2.5, 2, 3)==False", "def check(any_int):\n\tassert any_int(5, 6, 1) == True", "def check(any_int):\n\tassert any_int(1, 3, 2) == True", "def check(any_int):\n\tassert any_int(3,4,7)==True", "def check(any_int):\n\tassert any_int(6, 10, 1) == False", "def check(any_int):\n\tassert any_int(6, 2, 4) == True", "def check(any_int):\n\tassert any_int(6.155, 2.926, 1.672) == False", "def check(any_int):\n\tassert any_int(5, 2, 3) == True", "def check(any_int):\n\tassert any_int(7.829, 2, 9) == False", "def check(any_int):\n\tassert any_int(4, 6, 3) == False", "def check(any_int):\n\tassert any_int(2.583, 3.749, 4.738) == False", "def check(any_int):\n\tassert any_int(12, 11, 1) == True", "def check(any_int):\n\tassert any_int(3.211, 4, 3) == False", "def check(any_int):\n\tassert any_int(1, 1, 7) == False", "def check(any_int):\n\tassert any_int(0, 3, 3) == True", "def check(any_int):\n\tassert any_int(1.157, 8, 2) == False", "def check(any_int):\n\tassert any_int(3, 3, 6) == True", "def check(any_int):\n\tassert any_int(4.272, 6.612, 6.663) == False", "def check(any_int):\n\tassert any_int(1, 1, 2) == True", "def check(any_int):\n\tassert any_int(2.2, 2.2, 2.2)==False", "def check(any_int):\n\tassert any_int(3.158, 8, 6.135) == False", "def check(any_int):\n\tassert any_int(1.346, 5, 6) == False", "def check(any_int):\n\tassert any_int(15, 9, 6) == True", "def check(any_int):\n\tassert any_int(1, 4, 5) == True", "def check(any_int):\n\tassert any_int(7.656, 1, 7) == False", "def check(any_int):\n\tassert any_int(3.599, 5, 1) == False", "def check(any_int):\n\tassert any_int(3, 1, 2) == True", "def check(any_int):\n\tassert any_int(-3, 2, 5) == True", "def check(any_int):\n\tassert any_int(4, 11, 5) == False", "def check(any_int):\n\tassert any_int(10, 7, 3) == True", "def check(any_int):\n\tassert any_int(7, 3, 10) == True", "def check(any_int):\n\tassert any_int(3, 4, 1) == True", "def check(any_int):\n\tassert any_int(3.103, 3, 10) == False", "def check(any_int):\n\tassert any_int(6, 16, 10) == True", "def check(any_int):\n\tassert any_int(1.812, 6.567, 7.145) == False", "def check(any_int):\n\tassert any_int(6, 6, 12) == True", "def check(any_int):\n\tassert any_int(1, 7, 2) == False", "def check(any_int):\n\tassert any_int(7, 6, 1) == True", "def check(any_int):\n\tassert any_int(4, 3, 7) == True", "def check(any_int):\n\tassert any_int(4, 6, 2) == True", "def check(any_int):\n\tassert any_int(2.007, 9, 7.198) == False", "def check(any_int):\n\tassert any_int(2, 3, 5) == True", "def check(any_int):\n\tassert any_int(6.086, 4, 4) == False", "def check(any_int):\n\tassert any_int(3.754, 6, 5.044) == False", "def check(any_int):\n\tassert any_int(8, 10, 2) == True", "def check(any_int):\n\tassert any_int(7.73, 5.041, 6.418) == False", "def check(any_int):\n\tassert any_int(2, 6, 2)==False", "def check(any_int):\n\tassert any_int(3.683, 8, 1.193) == False", "def check(any_int):\n\tassert any_int(-4, 6, 2)==True", "def check(any_int):\n\tassert any_int(7, 13, 6) == True", "def check(any_int):\n\tassert any_int(2.003, 3, 11) == False", "def check(any_int):\n\tassert any_int(3.357, 7, 8.074) == False", "def check(any_int):\n\tassert any_int(3.621, 6.679, 2.542) == False", "def check(any_int):\n\tassert any_int(12, 3, 9) == True", "def check(any_int):\n\tassert any_int(7.797, 7, 4) == False", "def check(any_int):\n\tassert any_int(7, 1, 8) == True", "def check(any_int):\n\tassert any_int(5, 3, 8) == True", "def check(any_int):\n\tassert any_int(5, 7, 2) == True", "def check(any_int):\n\tassert any_int(5, 6, 11) == True", "def check(any_int):\n\tassert any_int(6.681, 8, 4.747) == False", "def check(any_int):\n\tassert any_int(3, 2, 5) == True", "def check(any_int):\n\tassert any_int(3.0,4,7)==False", "def check(any_int):\n\tassert any_int(9, 1, 10) == True", "def check(any_int):\n\tassert any_int(1.5, 5, 3.5)==False", "def check(any_int):\n\tassert any_int(2.834, 7, 9) == False", "def check(any_int):\n\tassert any_int(2, 6, 4) == True", "def check(any_int):\n\tassert any_int(6.068, 1, 3.454) == False", "def check(any_int):\n\tassert any_int(1.834, 7.255, 6.304) == False", "def check(any_int):\n\tassert any_int(1.726, 3, 1) == False", "def check(any_int):\n\tassert any_int(13, 7, 6) == True", "def check(any_int):\n\tassert any_int(6.9, 4, 12) == False", "def check(any_int):\n\tassert any_int(4.039, 5, 5.992) == False", "def check(any_int):\n\tassert any_int(4, 5, 9) == True", "def check(any_int):\n\tassert any_int(6, 2, 7) == False", "def check(any_int):\n\tassert any_int(3, 10, 7) == True", "def check(any_int):\n\tassert any_int(5.586, 1, 2) == False", "def check(any_int):\n\tassert any_int(12, 8, 4) == True", "def check(any_int):\n\tassert any_int(2.459, 5, 11) == False", "def check(any_int):\n\tassert any_int(0, 2, 2) == True", "def check(any_int):\n\tassert any_int(6.175, 9, 4) == False", "def check(any_int):\n\tassert any_int(12, 5, 7) == True", "def check(any_int):\n\tassert any_int(8.854, 2, 8) == False", "def check(any_int):\n\tassert any_int(2.858, 1, 2) == False", "def check(any_int):\n\tassert any_int(4, 3, 1) == True", "def check(any_int):\n\tassert any_int(4, 11, 1) == False", "def check(any_int):\n\tassert any_int(5, 5, 10) == True", "def check(any_int):\n\tassert any_int(10, 5, 5) == True", "def check(any_int):\n\tassert any_int(3.228, 6, 6) == False", "def check(any_int):\n\tassert any_int(2.805, 3, 6.418) == False", "def check(any_int):\n\tassert any_int(2, 1, 1) == True", "def check(any_int):\n\tassert any_int(6, 3, 3) == True", "def check(any_int):\n\tassert any_int(7, 5, 12) == True", "def check(any_int):\n\tassert any_int(-4, 11, 7) == True", "def check(any_int):\n\tassert any_int(2,1,1)==True", "def check(any_int):\n\tassert any_int(7, 2, 9) == True", "def check(any_int):\n\tassert any_int(3.445, 2, 2) == False", "def check(any_int):\n\tassert any_int(2, 7, 5) == True", "def check(any_int):\n\tassert any_int(6.254, 6, 7) == False", "def check(any_int):\n\tassert any_int(3.685, 2, 6) == False", "def check(any_int):\n\tassert any_int(5, 9, 5) == False", "def check(any_int):\n\tassert any_int(5.408, 8, 3.454) == False", "def check(any_int):\n\tassert any_int(-7, 5, -2) == True", "def check(any_int):\n\tassert any_int(4, 8, 4) == True", "def check(any_int):\n\tassert any_int(12, 7, 5) == True", "def check(any_int):\n\tassert any_int(4, 7, 3) == True", "def check(any_int):\n\tassert any_int(6.61, 1.687, 2.647) == False", "def check(any_int):\n\tassert any_int(3.033, 6.554, 7.391) == False", "def check(any_int):\n\tassert any_int(2.08, 7, 1.239) == False"], "test_case_list": ["assert any_int(8, 19, 11) == True", "assert any_int(7.307, 7.071, 5.088) == False", "assert any_int(6, 12, 6) == True", "assert any_int(6.511, 2, 3) == False", "assert any_int(12, 6, 6) == True", "assert any_int(2, 2, 4) == True", "assert any_int(5.114, 5, 4) == False", "assert any_int(3.376, 6.953, 2.111) == False", "assert any_int(2, 3, 1)==True", "assert any_int(2, 5, 4) == False", "assert any_int(7.194, 1.302, 7.462) == False", "assert any_int(1, 7, 8) == True", "assert any_int(5, 8, 3) == True", "assert any_int(2.389, 9, 10) == False", "assert any_int(-1, 0, 1) == True", "assert any_int(9, 6, 3) == True", "assert any_int(4.38, 6, 1) == False", "assert any_int(3.785, 6.308, 7.367) == False", "assert any_int(6, 10, 4) == True", "assert any_int(1.705, 2, 6.616) == False", "assert any_int(6, 4, 2) == True", "assert any_int(4, 2, 2)==True", "assert any_int(3.692, 2, 7.2) == False", "assert any_int(2.5, 2, 3)==False", "assert any_int(5, 6, 1) == True", "assert any_int(1, 3, 2) == True", "assert any_int(3,4,7)==True", "assert any_int(6, 10, 1) == False", "assert any_int(6, 2, 4) == True", "assert any_int(6.155, 2.926, 1.672) == False", "assert any_int(5, 2, 3) == True", "assert any_int(7.829, 2, 9) == False", "assert any_int(4, 6, 3) == False", "assert any_int(2.583, 3.749, 4.738) == False", "assert any_int(12, 11, 1) == True", "assert any_int(3.211, 4, 3) == False", "assert any_int(1, 1, 7) == False", "assert any_int(0, 3, 3) == True", "assert any_int(1.157, 8, 2) == False", "assert any_int(3, 3, 6) == True", "assert any_int(4.272, 6.612, 6.663) == False", "assert any_int(1, 1, 2) == True", "assert any_int(2.2, 2.2, 2.2)==False", "assert any_int(3.158, 8, 6.135) == False", "assert any_int(1.346, 5, 6) == False", "assert any_int(15, 9, 6) == True", "assert any_int(1, 4, 5) == True", "assert any_int(7.656, 1, 7) == False", "assert any_int(3.599, 5, 1) == False", "assert any_int(3, 1, 2) == True", "assert any_int(-3, 2, 5) == True", "assert any_int(4, 11, 5) == False", "assert any_int(10, 7, 3) == True", "assert any_int(7, 3, 10) == True", "assert any_int(3, 4, 1) == True", "assert any_int(3.103, 3, 10) == False", "assert any_int(6, 16, 10) == True", "assert any_int(1.812, 6.567, 7.145) == False", "assert any_int(6, 6, 12) == True", "assert any_int(1, 7, 2) == False", "assert any_int(7, 6, 1) == True", "assert any_int(4, 3, 7) == True", "assert any_int(4, 6, 2) == True", "assert any_int(2.007, 9, 7.198) == False", "assert any_int(2, 3, 5) == True", "assert any_int(6.086, 4, 4) == False", "assert any_int(3.754, 6, 5.044) == False", "assert any_int(8, 10, 2) == True", "assert any_int(7.73, 5.041, 6.418) == False", "assert any_int(2, 6, 2)==False", "assert any_int(3.683, 8, 1.193) == False", "assert any_int(-4, 6, 2)==True", "assert any_int(7, 13, 6) == True", "assert any_int(2.003, 3, 11) == False", "assert any_int(3.357, 7, 8.074) == False", "assert any_int(3.621, 6.679, 2.542) == False", "assert any_int(12, 3, 9) == True", "assert any_int(7.797, 7, 4) == False", "assert any_int(7, 1, 8) == True", "assert any_int(5, 3, 8) == True", "assert any_int(5, 7, 2) == True", "assert any_int(5, 6, 11) == True", "assert any_int(6.681, 8, 4.747) == False", "assert any_int(3, 2, 5) == True", "assert any_int(3.0,4,7)==False", "assert any_int(9, 1, 10) == True", "assert any_int(1.5, 5, 3.5)==False", "assert any_int(2.834, 7, 9) == False", "assert any_int(2, 6, 4) == True", "assert any_int(6.068, 1, 3.454) == False", "assert any_int(1.834, 7.255, 6.304) == False", "assert any_int(1.726, 3, 1) == False", "assert any_int(13, 7, 6) == True", "assert any_int(6.9, 4, 12) == False", "assert any_int(4.039, 5, 5.992) == False", "assert any_int(4, 5, 9) == True", "assert any_int(6, 2, 7) == False", "assert any_int(3, 10, 7) == True", "assert any_int(5.586, 1, 2) == False", "assert any_int(12, 8, 4) == True", "assert any_int(2.459, 5, 11) == False", "assert any_int(0, 2, 2) == True", "assert any_int(6.175, 9, 4) == False", "assert any_int(12, 5, 7) == True", "assert any_int(8.854, 2, 8) == False", "assert any_int(2.858, 1, 2) == False", "assert any_int(4, 3, 1) == True", "assert any_int(4, 11, 1) == False", "assert any_int(5, 5, 10) == True", "assert any_int(10, 5, 5) == True", "assert any_int(3.228, 6, 6) == False", "assert any_int(2.805, 3, 6.418) == False", "assert any_int(2, 1, 1) == True", "assert any_int(6, 3, 3) == True", "assert any_int(7, 5, 12) == True", "assert any_int(-4, 11, 7) == True", "assert any_int(2,1,1)==True", "assert any_int(7, 2, 9) == True", "assert any_int(3.445, 2, 2) == False", "assert any_int(2, 7, 5) == True", "assert any_int(6.254, 6, 7) == False", "assert any_int(3.685, 2, 6) == False", "assert any_int(5, 9, 5) == False", "assert any_int(5.408, 8, 3.454) == False", "assert any_int(-7, 5, -2) == True", "assert any_int(4, 8, 4) == True", "assert any_int(12, 7, 5) == True", "assert any_int(4, 7, 3) == True", "assert any_int(6.61, 1.687, 2.647) == False", "assert any_int(3.033, 6.554, 7.391) == False", "assert any_int(2.08, 7, 1.239) == False"], "nl": "\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    ", "func": "def any_int(x, y, z):", "examples": "Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    ", "completions": ["from typing import List\n## main.py\n\ndef any_int(x: (int, float), y: (int, float), z: (int, float)) -> bool:\n    '''\n    Accepts three numbers as input.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers or floats.\n    Returns false in any other cases.\n    '''\n    # Check if all inputs are integers or floats\n    if not isinstance(x, (int, float)) or not isinstance(y, (int, float)) or not isinstance(z, (int, float)):\n        return False\n    \n    # Calculate the sum of any two numbers\n    sum_xy = x + y\n    sum_xz = x + z\n    sum_yz = y + z\n    \n    # Check if any one of the numbers is equal to the sum of the other two\n    if x == sum_xy or y == sum_xz or z == sum_yz:\n        return True\n    \n    return False\n", "from typing import List\nfrom typing import Union\n\ndef any_int(x: Union[int, float], y: Union[int, float], z: Union[int, float]) -> bool:\n    \"\"\"\n    The function checks if any one of the three input numbers is equal to the sum of the other two.\n    \n    Args:\n        x (Union[int, float]): The first number, which can be an integer or a floating-point number.\n        y (Union[int, float]): The second number, which can be an integer or a floating-point number.\n        z (Union[int, float]): The third number, which can be an integer or a floating-point number.\n    \n    Returns:\n        bool: True if any one of the numbers is equal to the sum of the other two, otherwise False.\n    \"\"\"\n    if not all(isinstance(n, (int, float)) for n in [x, y, z]):\n        return False\n    \n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\nfrom typing import Union\n\ndef any_int(x: Union[int, float], y: Union[int, float], z: Union[int, float]) -> bool:\n    \"\"\"\n    Check if any of the three inputs is equal to the sum of the other two and ensure all inputs are integers or floats.\n    \n    Args:\n        x (Union[int, float]): The first number.\n        y (Union[int, float]): The second number.\n        z (Union[int, float]): The third number.\n    \n    Returns:\n        bool: True if any of the inputs is equal to the sum of the other two and all inputs are integers or floats, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers or floats\n    if not isinstance(x, (int, float)) or not isinstance(y, (int, float)) or not isinstance(z, (int, float)):\n        return False\n    \n    # Check if any one of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    \n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if any of the three numbers is equal to the sum of the other two.\n\n    Args:\n        x (int): The first number.\n        y (int): The second number.\n        z (int): The third number.\n\n    Returns:\n        bool: True if any one of the numbers is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n\n    # Check if one number is equal to the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: (int, float), y: (int, float), z: (int, float)) -> bool:\n    \"\"\"\n    Check if any of the three inputs is equal to the sum of the other two and ensure all inputs are integers.\n    \n    Args:\n        x (int, float): The first number.\n        y (int, float): The second number.\n        z (int, float): The third number.\n    \n    Returns:\n        bool: True if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n              False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not (isinstance(x, (int, float)) and isinstance(y, (int, float)) and isinstance(z, (int, float))):\n        return False\n    \n    # Check if any number is equal to the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Checks if the sum of the first two numbers equals the third number and if all inputs are integers.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if the sum of the first two numbers equals the third number and all inputs are integers, otherwise False.\n    \"\"\"\n    # Check if all inputs are integers\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n\n    # Calculate the sum of the first two numbers\n    sum_xy = x + y\n\n    # Check if the sum of the first two numbers equals the third number\n    return sum_xy == z\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if any one of the three input numbers is equal to the sum of the other two.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if any one of the numbers is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n\n    # Calculate the sum of any two numbers and check if any one of the numbers is equal to this sum\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False\n\n# Example usage:\n# print(any_int(5, 2, 7))  # Output: True\n# print(any_int(3, 2, 2))  # Output: False\n# print(any_int(3, -2, 1)) # Output: True\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if any of the three numbers is equal to the sum of the other two.\n\n    Args:\n        x (int): The first number.\n        y (int): The second number.\n        z (int): The third number.\n\n    Returns:\n        bool: True if any number is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        raise ValueError(\"All inputs must be integers.\")\n\n    # Check if any number is equal to the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if any one of the numbers is the sum of the other two.\n\n    Args:\n        x (int): The first number.\n        y (int): The second number.\n        z (int): The third number.\n\n    Returns:\n        bool: True if any one of the numbers is the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n\n    # Check if any one of the numbers is the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False\n", "from typing import List\n## main.py\n\ndef any_int(x: (int, float), y: (int, float), z: (int, float)) -> bool:\n    \"\"\"\n    Check if any of the three inputs is equal to the sum of the other two.\n\n    Args:\n        x (int, float): The first input number.\n        y (int, float): The second input number.\n        z (int, float): The third input number.\n\n    Returns:\n        bool: True if any of the inputs is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers or floats\n    if not isinstance(x, (int, float)) or not isinstance(y, (int, float)) or not isinstance(z, (int, float)):\n        return False\n\n    # Calculate the sum of any two numbers\n    sum_xy = x + y\n    sum_xz = x + z\n    sum_yz = y + z\n\n    # Check if any of the numbers is equal to the sum of the other two\n    if x == sum_xy or y == sum_xy or z == sum_xy:\n        return True\n    if x == sum_xz or y == sum_xz or z == sum_xz:\n        return True\n    if x == sum_yz or y == sum_yz or z == sum_yz:\n        return True\n\n    # If no number is equal to the sum of the other two, return False\n    return False\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that checks if any one of the three input numbers is equal to the sum of the other two. The function should handle both integers and floating-point numbers. The solution should be clear, efficient, and easy to understand. The function should return true if the condition is met, and false otherwise.\nrequirement pool:\n- The function should accept three numbers as input.\n- The function should return true if one of the numbers is equal to the sum of the other two.\n- The function should handle both integers and floating-point numbers.\n- The function should return false if the condition is not met.\n- The function should be optimized for performance.\nWe will implement the function using basic Python constructs to ensure clarity and simplicity. The function will check if any one of the three input numbers is equal to the sum of the other two. To handle both integers and floating-point numbers, we will use type checking with 'isinstance'. This approach is straightforward and leverages Python's built-in capabilities for type checking.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers': means the result of adding two of the three numbers together.\n    'integers': means the numbers are whole numbers and not fractions or decimals.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The function should:\n    1. Check if all inputs are integers using isinstance.\n    2. Calculate the sum of any two numbers.\n    3. Check if any one of the numbers is equal to the sum of the other two.\n    4. Return True if the condition is met, otherwise return False.\n\n# [edge case] \n    any_int(5, 2, 7) = True\n    Explanation: 5 is equal to 2 + 7. All numbers are integers.\n    any_int(3, 2, 2) = False\n    Explanation: None of the numbers is equal to the sum of the other two.\n    any_int(3.6, -2.2, 2) = False\n    Explanation: The input includes a floating-point number, which does not meet the requirement of all numbers being integers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function already includes type checking for integers, which automatically handles cases where floating-point numbers are involved.\n", "requirement analysis:\nThe original requirement is to create a function that checks if any one of the three input numbers is equal to the sum of the other two, and all numbers must be integers. The function should return true if the condition is met, and false otherwise. The requirement also specifies that the function should handle both integers and floating-point numbers, but the examples provided only show integer inputs. This means the function should be designed to work with both types of numbers. The requirement is clear and specific, focusing on the functionality of checking sums and ensuring the inputs are integers.\nrequirement pool:\n- Implement the function to check if any one of the three numbers is equal to the sum of the other two.\n- Ensure the function returns true only if all numbers are integers.\n- Allow the function to handle both integers and floating-point numbers.\n- Provide clear and concise documentation for the function.\n- Test the function with various inputs to ensure it works as expected.\nWe will implement the function using Python's built-in capabilities and the 'typing' module to ensure type checking. The function will check if any one of the three input numbers is equal to the sum of the other two, and it will ensure all numbers are integers or floating-point numbers. We will use type hints to enforce the expected data types.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers equals the third'\n    In the requirement, it means that the sum of any two of the three input numbers should be equal to the third number.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The function should:\n    1. Check if all inputs are integers or floats.\n    2. Check if any one of the numbers is equal to the sum of the other two.\n\n# [edge case] \n    any_int(5, 2, 7) = True\n    Explanation: 5 + 2 = 7, so one of the numbers is equal to the sum of the other two.\n    any_int(3, 2, 2) = False\n    Explanation: No number is equal to the sum of the other two.\n    any_int(3, -2, 1) = True\n    Explanation: 3 + (-2) = 1, so one of the numbers is equal to the sum of the other two.\n    any_int(3.6, -2.2, 2) = False\n    Explanation: The inputs are not integers, so the function should return False.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the inputs are not integers or floats.\n        if not all(isinstance(n, (int, float)) for n in [x, y, z]):\n            return False\n        (other code)\n", "requirement analysis:\nThe function should accept three inputs, check if any of the numbers is equal to the sum of the other two, and ensure all inputs are integers. The function should return true if the condition is met, and false otherwise. The function should also handle floating-point numbers correctly.\nrequirement pool:\n- The function should accept three inputs and check if any of the numbers is equal to the sum of the other two.\n- The function should ensure all inputs are integers.\n- The function should return true if the condition is met, and false otherwise.\n- The function should handle floating-point numbers correctly.\n- The function should be easy to understand and use.\nWe will implement the function using Python's built-in capabilities and the 'typing' module to ensure type checking. The function will check if any of the three inputs is equal to the sum of the other two and ensure all inputs are integers. We will use the 'typing' module to define the expected types for the function's parameters and return value.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers': means the result of adding two of the three numbers together.\n    'integers': means the numbers must be whole numbers without any decimal parts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The function should:\n    1. Check if all inputs are integers.\n    2. Check if any one of the numbers is equal to the sum of the other two.\n\n# [edge case] \n    any_int(5, 2, 7) = True\n    Explanation: 7 is equal to 5 + 2. All numbers are integers.\n    any_int(3, 2, 2) = False\n    Explanation: No number is equal to the sum of the other two.\n    any_int(3, -2, 1) = True\n    Explanation: 3 is equal to -2 + 1. All numbers are integers.\n    any_int(3.6, -2.2, 2) = False\n    Explanation: The function should return False because not all numbers are integers.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where not all numbers are integers. This can be done using the 'isinstance' function from the 'typing' module to check the type of each input.\n        if not isinstance(x, (int, float)) or not isinstance(y, (int, float)) or not isinstance(z, (int, float)):\n            return False\n        (other code)\n", "requirement analysis:\nThe requirement is to create a function that checks if any one of the three input numbers is equal to the sum of the other two, and all numbers must be integers. The function should return true if the condition is met, and false otherwise. The function should also handle edge cases such as non-integer inputs.\nrequirement pool:\n- The function should check if any one of the three numbers is equal to the sum of the other two.\n- The function should ensure all numbers are integers.\n- The function should return true if the condition is met, and false otherwise.\n- The function should handle non-integer inputs and return false.\n- The function should be efficient and handle edge cases effectively.\nWe will use Python's built-in capabilities to check if the numbers are integers and if one number is equal to the sum of the other two. The function will first validate that all inputs are integers and then check the sum condition.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers equals the third number'\n    In the requirement, it means that the sum of any two of the three input numbers should be equal to the third number.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Check if all inputs are integers.\n    - Check if one number is equal to the sum of the other two.\n\n# [edge case] \n    any_int(1, 1, 2) = True\n    Explanation: The sum of 1 and 1 is 2, which is equal to the third number. All numbers are integers.\n    any_int(1, 2, 3) = True\n    Explanation: The sum of 1 and 2 is 3, which is equal to the third number. All numbers are integers.\n    any_int(1, 2, 4) = False\n    Explanation: None of the numbers is equal to the sum of the other two, and all numbers are integers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already checks for the sum condition and integer validation.\n", "requirement analysis:\nThe requirement is to create a function that checks if any of the three input numbers is equal to the sum of the other two, and all numbers are integers. This involves checking the type of the inputs and performing a simple arithmetic operation. The function should return True if the condition is met, and False otherwise. The function should handle both integers and floating-point numbers, but since the condition involves integer arithmetic, only integer inputs should return True.\nrequirement pool:\n- The function should accept three inputs and check if any one of them is equal to the sum of the other two.\n- The function should ensure all inputs are integers.\n- The function should return True if the condition is met, otherwise return False.\n- The function should handle both integers and floating-point numbers.\nWe will implement the function using Python's built-in capabilities and type checking. The function will check if any of the three inputs is equal to the sum of the other two and ensure all inputs are integers. This will involve type checking and simple arithmetic operations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers': means the result of adding two of the three numbers together.\n    'integers': means the numbers must be whole numbers without any decimal parts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n\n# [edge case] \n    any_int(5, 2, 7) \u279e True\n    Explanation: 5 + 2 = 7, so one of the numbers is equal to the sum of the other two. All numbers are integers.\n    any_int(3, 2, 2) \u279e False\n    Explanation: No number is equal to the sum of the other two, even though all numbers are integers.\n    any_int(3, -2, 1) \u279e True\n    Explanation: 3 + (-2) = 1, so one of the numbers is equal to the sum of the other two. All numbers are integers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function will return the correct boolean value based on the given conditions.\n", "requirement analysis:\nThe original requirements call for a function that checks if one of the three input numbers is equal to the sum of the other two, and all numbers must be integers. The function should return true if the condition is met, and false otherwise. The requirements are clear and straightforward, focusing on the functionality of checking integer sums.\nrequirement pool:\n- Implement the function to check if one number is the sum of the other two and ensure all inputs are integers.\n- Handle edge cases such as non-integer inputs gracefully.\n- Ensure the function is efficient and suitable for use in various programming contexts.\n- Test the function with a variety of inputs to verify its correctness.\n- Document the function and provide examples of its usage.\nWe will implement the function using Python's built-in 'isinstance' function to check if the inputs are integers. The function will sum the first two numbers and check if the third number matches this sum. If all inputs are integers and the condition is met, the function will return True; otherwise, it will return False.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers equals the third number'\n    Explanation: This means that for any three numbers, one of them should be equal to the sum of the other two.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Check if all inputs are integers using the 'isinstance' function.\n    (2) Sum the first two numbers.\n    (3) Check if the sum is equal to the third number.\n    (4) Return True if all conditions are met, otherwise return False.\n\n# [edge case] \n    any_int(5, 2, 7) = True\n    Explanation: 5 + 2 = 7, so one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    any_int(3, 2, 2) = False\n    Explanation: The sum of 3 and 2 is 5, which is not equal to 2.\n    any_int(3, -2, 1) = True\n    Explanation: 3 + (-2) = 1, so one of the numbers is equal to the sum of the other two, and all numbers are integers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan already covers all necessary checks.\n", "requirement analysis:\nThe original requirements call for a function that checks if one of the three input numbers is equal to the sum of the other two, and all numbers are integers. The function should return true if the condition is met, and false otherwise. The requirements are clear and straightforward, focusing on the core functionality and constraints.\nrequirement pool:\n- The main code should accurately check if one of the numbers is the sum of the other two and all numbers are integers.\n- Ensure the function handles both integer and non-integer inputs correctly.\n- Develop a simple and efficient implementation of the function.\n- Test the function with various inputs to ensure it meets the requirements.\n- Document the function clearly for easy understanding and maintenance.\nWe will implement the function using Python's built-in capabilities to ensure simplicity and efficiency. The function will check if any one of the three input numbers is equal to the sum of the other two, and it will also ensure all numbers are integers. This will involve type checking and basic arithmetic operations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers equals a third number'\n    This means that for any three numbers, one of them should be equal to the sum of the other two.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `any_int(x, y, z)`, we need to check if any one of the three numbers is equal to the sum of the other two. Additionally, we need to ensure all numbers are integers. Here's the detailed logic:\n\n    1. Check if all inputs are integers using the `isinstance` function.\n    2. Calculate the sum of any two numbers.\n    3. Check if any one of the numbers is equal to this sum.\n    4. Return `True` if the condition is met, otherwise return `False`.\n\n# [edge case] \n    any_int(5, 2, 7) = True\n    Explanation: 7 is equal to the sum of 5 and 2. All numbers are integers.\n    any_int(3, 2, 2) = False\n    Explanation: None of the numbers is equal to the sum of the other two, even though 2 appears twice.\n    any_int(3, -2, 1) = True\n    Explanation: 3 is equal to the sum of -2 and 1. All numbers are integers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic already ensures that all numbers are integers and checks if any one of them is equal to the sum of the other two.\n", "requirement analysis:\nThe requirement is to create a function that checks if any of the three given numbers is equal to the sum of the other two and all numbers are integers. The function should return true if the condition is met, and false otherwise. The function should handle various inputs including integers and non-integers to ensure robustness.\nrequirement pool:\n- The main code should accurately check if one of the numbers is equal to the sum of the other two and all numbers are integers.\n- The function should handle various inputs including integers and non-integers.\n- Ensure the function is efficient and handles edge cases.\n- Develop a clear and concise function documentation.\n- Test the function with various inputs to ensure it works correctly.\nWe will use Python's built-in capabilities to check if the provided numbers are integers and then verify if any of the numbers is equal to the sum of the other two. This approach leverages Python's type checking and arithmetic operations, ensuring efficiency and simplicity.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers': means the result of adding two of the three numbers together.\n    'integers': means the numbers must be whole numbers without any decimal parts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `any_int(x, y, z)`, we need to follow these steps:\n    1. Check if all inputs are integers.\n    2. Check if any of the numbers is equal to the sum of the other two.\n\n# [edge case] \n    any_int(5, 2, 7) = True\n    Explanation: The sum of 5 and 2 is 7, and 7 is one of the input numbers. All numbers are integers.\n\n    any_int(3, 2, 2) = False\n    Explanation: None of the numbers is equal to the sum of the other two, and all numbers are integers.\n\n    any_int(3, -2, 1) = True\n    Explanation: The sum of 3 and -2 is 1, and 1 is one of the input numbers. All numbers are integers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The function already checks if the numbers are integers and if any number is equal to the sum of the other two.\n", "requirement analysis:\nThe original requirements call for a function that checks if any one of the three input numbers is equal to the sum of the other two, and all numbers must be integers. The function should return true if the condition is met and false otherwise. The requirements are clear and straightforward, focusing on the core functionality and constraints.\nrequirement pool:\n- The main code should accurately check if one number is the sum of the other two and ensure all inputs are integers.\n- The function should return false if any of the inputs is not an integer.\n- The implementation should be efficient and handle edge cases effectively.\n- The function should be simple and easy to understand.\n- The function should be tested for various inputs to ensure robustness.\nWe will use Python's built-in capabilities to check if the inputs are integers and if one number is the sum of the other two. The function will first validate that all inputs are integers using the 'isinstance' function. Then, it will check if any one of the numbers is equal to the sum of the other two.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers': means the result of adding two of the three numbers together.\n    'integers': means the numbers must be whole numbers without any decimal parts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    (1) Check if all inputs are integers using the 'isinstance' function.\n    (2) Check if any one of the numbers is equal to the sum of the other two.\n    (3) Return True if the conditions are met, otherwise return False.\n\n# [edge case] \n    any_int(3.6, -2, 5.6) = False\n    Explanation: Although 5.6 is the sum of 3.6 and -2, the function should return False because not all inputs are integers.\n    any_int(1, 2, -3) = True\n    Explanation: Although 1 is not the sum of 2 and -3, the function should return True because all inputs are integers and -3 is the sum of 1 and -2.\n    any_int(0, 0, 0) = True\n    Explanation: The sum of any two 0's is 0, and all numbers are integers, so the function should return True.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic already checks for integer inputs and the condition for the sum.\n", "requirement analysis:\nThe function needs to check if any one of the three inputs is equal to the sum of the other two. It should also ensure that all inputs are integers. The function should return true if the condition is met and false otherwise. The function should be versatile enough to handle both integers and floating-point numbers, but it should clearly indicate if any input is not an integer.\nrequirement pool:\n- The function should check if any one of the three inputs is equal to the sum of the other two.\n- The function should ensure all inputs are integers.\n- The function should return true if the condition is met and false otherwise.\n- The function should handle both integers and floating-point numbers.\n- The function should clearly indicate if any input is not an integer.\nWe will implement the function using Python's built-in capabilities and type checking. The function will check if any of the three inputs is equal to the sum of the other two and ensure all inputs are integers. We will use Python's 'isinstance' function for type checking.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of two numbers'\n    In the requirement, it refers to the addition of two of the three input numbers.\n    Explanation: The function checks if any one of the three input numbers is equal to the sum of the other two.\n\n# [phrase showing quantity relationship]\n    'as much as': means that the number should be equal to the sum of the other two numbers.\n\n# [degree adverb] \n    No degree adverb specifically mentioned.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Steps to implement the function:\n    1. Check if all inputs are integers using `isinstance(x, int)`, `isinstance(y, int)`, and `isinstance(z, int)`.\n    2. Calculate the sum of any two numbers (e.g., `x + y`).\n    3. Check if any of the numbers is equal to this sum.\n    4. Return `True` if any number is equal to the sum and all numbers are integers, otherwise return `False`.\n\n# [edge case] \n    any_int(5, 2, 7) = True\n    Explanation: 7 is equal to the sum of 5 and 2.\n    any_int(3, 2, 2) = False\n    Explanation: None of the numbers is equal to the sum of the other two.\n    any_int(3, -2, 1) = True\n    Explanation: 1 is equal to the sum of 3 and -2.\n    any_int(3.6, -2.2, 2) = False\n    Explanation: The input includes non-integer values, so the function returns False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The function already checks for integer types and compares the sum of two numbers to determine the output.\n"], "scores": [0.6641, 0.9847, 0.9847, 1.0, 0.9847, 0.687, 1.0, 0.5725, 1.0, 0.9847], "pass_results": [false, false, false, true, false, false, true, false, true, false], "pass_test_cases_num": [87, 129, 129, 131, 129, 90, 131, 75, 131, 129], "completion": "from typing import List\n## main.py\n\ndef any_int(x: (int, float), y: (int, float), z: (int, float)) -> bool:\n    \"\"\"\n    Check if any of the three inputs is equal to the sum of the other two.\n\n    Args:\n        x (int, float): The first input number.\n        y (int, float): The second input number.\n        z (int, float): The third input number.\n\n    Returns:\n        bool: True if any of the inputs is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers or floats\n    if not isinstance(x, (int, float)) or not isinstance(y, (int, float)) or not isinstance(z, (int, float)):\n        return False\n\n    # Calculate the sum of any two numbers\n    sum_xy = x + y\n    sum_xz = x + z\n    sum_yz = y + z\n\n    # Check if any of the numbers is equal to the sum of the other two\n    if x == sum_xy or y == sum_xy or z == sum_xy:\n        return True\n    if x == sum_xz or y == sum_xz or z == sum_xz:\n        return True\n    if x == sum_yz or y == sum_yz or z == sum_yz:\n        return True\n\n    # If no number is equal to the sum of the other two, return False\n    return False\n", "passed": true, "pass": true, "pass_num": 3, "round": 477, "repair_prompt": ["def any_int(x, y, z):\t\n'''Create a function that accepts three numbers as input. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", " def any_int(x, y, z):\n    '''Create a function that accepts three numbers as input. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases.\n    Examples\n        any_int(5, 2, 7) \u279e True\n        \n        any_int(3, 2, 2) \u279e False\n    \n        any_int(3, -2, 1) \u279e True\n        \n        any_int(3.6, -", " def any_int(x, y, z):\n    '''Create a function that accepts three numbers as input. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases.\n    Examples\n        any_int(5, 2, 7) \u279e True\n        \n        any_int(3, 2, 2) \u279e False\n\n        any_int(3, -2, 1) \u279e True\n        \n        any_int(3.6, -2"], "mutate_method": "rephrase_one", "parent_index": 298}
