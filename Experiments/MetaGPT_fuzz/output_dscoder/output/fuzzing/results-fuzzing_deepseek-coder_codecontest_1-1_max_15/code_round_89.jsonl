{"name": "1591_A. Life of a Flower", "description": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "tags": ["implementation"], "difficulty": 7, "id": 1591, "sample_io": [{"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}], "test_list": [{"input": "1\n10\n1 1 1 1 1 1 1 1 1 1\n", "output": ["47\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n7\n3\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 0\n", "output": ["33\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 1\n", "output": ["29\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n-1\n8\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 0 1 1 1 1 1\n", "output": ["24\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["7\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n12\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n7\n8\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["7\n-1\n8\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 0 1 1\n", "output": ["20\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["12\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["-1\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["12\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 1 1 1\n1\n1\n", "output": ["3\n7\n12\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n3\n17\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n7\n8\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 0\n", "output": ["28\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n7\n17\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["2\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["7\n-1\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n3\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n1\n", "output": ["3\n7\n3\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["12\n12\n-1\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n3\n12\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 0 1\n", "output": ["15\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n1\n", "output": ["3\n-1\n17\n2\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 1 1\n", "output": ["42\n"]}, {"input": "4\n3\n0 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n-1\n3\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n2\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["3\n2\n8\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["2\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n2\n-1\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n3\n8\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["12\n-1\n17\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 0\n", "output": ["19\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n1\n", "output": ["3\n-1\n7\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n2\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n3\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 0\n1\n0\n", "output": ["-1\n7\n3\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n1\n", "output": ["-1\n-1\n7\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 1\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n12\n17\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n3\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n7\n17\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["12\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 0\n1\n1\n", "output": ["3\n-1\n12\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 1 0 1\n1\n0\n", "output": ["3\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n7\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n12\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["12\n7\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n3\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["12\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["-1\n7\n17\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["-1\n12\n-1\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 0\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 1 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 0 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 2 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n2 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 -1 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 1\n", "output": ["29\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 0\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 0 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "1\n10\n0 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 1\n", "output": ["15\n"]}, {"input": "1\n10\n1 0 0 1 0 2 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "1\n10\n0 1 0 0 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 2 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 3 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 2 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 1 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 0 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 -1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 0\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 0\n", "output": ["24\n"]}, {"input": "1\n10\n1 1 0 1 1 1 0 0 0 0\n", "output": ["-1\n"]}], "task_id": "codecontest/45", "prompt": "Petya has got an interesting flower and is a busy person. Therefore, he sometimes forgets to water it. You are given n days from Petya's life and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "repair_prompt": ["Petya has got an interesting flower and is a busy person. Therefore, he sometimes forgets to water it. You are given n days from Petya's life and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\nfrom typing import List\n\ndef calculate_flower_height(n: int, watering_days: List[int]) -> int:\n    height = 1\n    died = False\n    \n    for day in range(n):\n        if watering_days[day] == 0 and (day == 0 or watering_days[day - 1] == 0):\n            died = True\n            break\n        elif watering_days[day] == 1:\n            height += 1 if day == 0 or watering_days[day - 1] == 0 else 5\n    \n    return -1 if died else height\n\n# Provide the Interface\nn = int(input())\nwatering_days = list(map(int, input().split()))\nresult = calculate_flower_height(n, watering_days)\nprint(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(days: int, watering_schedule: list[int]) -> int:\n    \"\"\"\n    Calculate the final height of Petya's flower based on the watering schedule.\n\n    Args:\n        days (int): The number of days.\n        watering_schedule (list[int]): A list of 0s and 1s where 1 indicates watering on that day.\n\n    Returns:\n        int: The final height of the flower or -1 if it has died.\n    \"\"\"\n    height = 1  # The initial height of the flower\n    watered_twice = False  # Flag to check if the flower was watered in the last two days\n\n    for i in range(days):\n        if watering_schedule[i] == 0:\n            # If the flower is not watered, it does not grow\n            watered_twice = False\n        else:\n            if watered_twice:\n                # If the flower was watered in the last two days, it grows by 5 cm\n                height += 5\n            else:\n                # If the flower was watered just once, it grows by 1 cm\n                height += 1\n            watered_twice = True\n\n        # Check if the flower has died\n        if watered_twice and i < days - 1 and watering_schedule[i + 1] == 0:\n            # If the flower was watered but not watered the next day, it will die\n            return -1\n\n    return height\n\n# Read the number of test cases\nn = int(input())\n\n# Process each test case\nfor _ in range(n):\n    days = int(input())\n    watering_schedule = list(map(int, input().split()))\n    result = calculate_flower_height(days, watering_schedule)\n    print(result)\n", "from typing import List\nfrom typing import List\n\ndef calculate_flower_height(days: int, watering_days: List[int]) -> int:\n    if days == 1 and watering_days[0] == 0:\n        return 1\n    \n    height = 1\n    consecutive_unwatering_days = 0\n    \n    for i in range(days):\n        if watering_days[i] == 1:\n            consecutive_unwatering_days = 0\n            height += 1 if i == 0 or watering_days[i - 1] == 0 else 5\n        else:\n            consecutive_unwatering_days += 1\n            if consecutive_unwatering_days == 2:\n                return -1\n    \n    return height\n\n# Provide the Interface\nn = int(input())\nfor _ in range(n):\n    days = int(input())\n    watering_days = list(map(int, input().split()))\n    result = calculate_flower_height(days, watering_days)\n    print(result)\n", "from typing import List\nfrom typing import List\n\ndef calculate_flower_height(days: int, watering_schedule: List[int]) -> int:\n    if days == 1 and watering_schedule[0] == 0:\n        return -1\n    \n    height = 1\n    consecutive_unwatered_days = 0\n    \n    for i in range(days):\n        if watering_schedule[i] == 0:\n            consecutive_unwatered_days += 1\n            if consecutive_unwatered_days == 2:\n                return -1\n        else:\n            height += 5\n            consecutive_unwatered_days = 0\n    \n    return height\n\n# Provide the Interface\nn = int(input())\nfor _ in range(n):\n    days = int(input())\n    watering_schedule = list(map(int, input().split()))\n    result = calculate_flower_height(days, watering_schedule)\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(days: int, watering_days: List[int]) -> int:\n    \"\"\"\n    Calculate the height of the flower after a given number of days, considering its watering schedule.\n\n    Args:\n        days (int): The number of days.\n        watering_days (List[int]): A list of integers where each integer represents a day the flower was watered.\n\n    Returns:\n        int: The height of the flower after the given days. If the flower dies, return -1.\n    \"\"\"\n    # Initialize the flower height to 1 centimeter\n    height = 1\n    \n    # Check if the flower is dead by comparing the watering days\n    is_dead = False\n    \n    # Iterate through each day\n    for i in range(1, days):\n        # Check if the flower is watered today or the day before\n        if i in watering_days and (i - 1) in watering_days:\n            # Grow by 5 centimeters if watered both today and the day before\n            height += 5\n        elif i in watering_days:\n            # Grow by 1 centimeter if watered today\n            height += 1\n        else:\n            # If not watered for two consecutive days, the flower is dead\n            is_dead = True\n            break\n    \n    # If the flower is dead, return -1, otherwise return the height\n    return -1 if is_dead else height\n\n# Read input from the user\nn = int(input())\nwatering_days = list(map(int, input().split()))\n\n# Calculate the result\nresult = calculate_flower_height(n, watering_days)\n\n# Print the result\nprint(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(days: int, watering_days: list[int]) -> int:\n    if days == 0:\n        return -1\n    \n    height = 1  # The flower starts at 1 centimeter tall.\n    consecutive_dry_days = 0  # To keep track of consecutive dry days.\n    \n    for i in range(days):\n        if watering_days[i] == 1:\n            consecutive_dry_days = 0  # Reset consecutive dry days if watered.\n            if i > 0 and watering_days[i - 1] == 1:\n                height += 5  # Grow by 5 cm if watered on the previous day.\n            else:\n                height += 1  # Grow by 1 cm if not watered on the previous day.\n        else:\n            consecutive_dry_days += 1  # Increment consecutive dry days.\n            if consecutive_dry_days == 2:\n                return -1  # Flower dies if not watered for 2 consecutive days.\n    \n    return height\n\n# Interface\nn = int(input())\nfor _ in range(n):\n    days = int(input())\n    watering_days = list(map(int, input().split()))\n    result = calculate_flower_height(days, watering_days)\n    print(result)\n", "from typing import List\nfrom typing import List\n\ndef calculate_flower_height(days: int, watering_schedule: List[int]) -> int:\n    height = 1  # The initial height of the flower\n    consecutive_unwatered_days = 0  # Counter for consecutive unwatered days\n\n    for i in range(days):\n        if watering_schedule[i] == 0:\n            consecutive_unwatered_days += 1\n            if consecutive_unwatered_days >= 2:\n                return -1  # Flower dies if not watered for two consecutive days\n        else:\n            consecutive_unwatered_days = 0  # Reset the counter if watered\n            if i > 0 and watering_schedule[i - 1] == 1:\n                height += 5  # Grow by 5 cm if watered on the current and previous day\n            else:\n                height += 1  # Grow by 1 cm if only watered on the current day\n\n    return height\n\n# Interface\nn = int(input())\nfor _ in range(n):\n    days = int(input())\n    watering_schedule = list(map(int, input().split()))\n    result = calculate_flower_height(days, watering_schedule)\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(days: int, watering_days: List[int]) -> int:\n    \"\"\"\n    Calculate the height of the flower after a given number of days based on the rules provided.\n\n    Args:\n        days (int): The number of days.\n        watering_days (List[int]): A list of integers where each integer represents a day the flower was watered.\n\n    Returns:\n        int: The final height of the flower or -1 if it dies.\n    \"\"\"\n    # Initialize the flower height to 1 centimeter\n    height = 1\n    # Initialize the previous watering day to -1 (indicating no watering on the first day)\n    previous_watering_day = -1\n\n    for day in range(days):\n        # Check if the flower was watered today or the previous day\n        if day in watering_days or (previous_watering_day == day - 1 and day in watering_days):\n            # If the flower is watered today and the previous day, it grows by 5 centimeters\n            if day in watering_days and previous_watering_day + 1 in watering_days:\n                height += 5\n            else:\n                # Otherwise, it grows by 1 centimeter\n                height += 1\n        # Update the previous watering day\n        previous_watering_day = day\n\n        # Check if the flower dies due to lack of watering for two consecutive days\n        if day > 0 and day not in watering_days and (day - 1) not in watering_days:\n            return -1\n\n    return height\n\n# Provide the Interface\nn = int(input())\nwatering_days = list(map(int, input().split()))\nresult = calculate_flower_height(n, watering_days)\nprint(result)\n", "from typing import List\nfrom typing import List\n\ndef calculate_flower_height(days: int, watering_days: List[int]) -> int:\n    if days == 0 or not watering_days:\n        return -1\n    \n    height = 1\n    was_watered_yesterday = False\n    \n    for i in range(days):\n        if watering_days[i] == 1:\n            if was_watered_yesterday:\n                height += 5\n            else:\n                height += 1\n            was_watered_yesterday = True\n        else:\n            was_watered_yesterday = False\n    \n    return height if height > 0 else -1\n\n# Provide the Interface\nn = int(input())\nwatering_days = list(map(int, input().split()))\nresult = calculate_flower_height(n, watering_days)\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(days: int, watering_schedule: List[int]) -> int:\n    \"\"\"\n    Calculate the height of the flower after a given number of days based on the watering schedule.\n\n    Args:\n        days (int): The number of days.\n        watering_schedule (List[int]): A list of integers where 1 indicates the flower was watered on that day, and 0 indicates it was not.\n\n    Returns:\n        int: The final height of the flower or -1 if it dies.\n    \"\"\"\n    # Initialize the flower height to 1 centimeter\n    flower_height = 1\n    # Initialize the previous watering day to -1 (indicating no watering on the first day)\n    previous_watering_day = -1\n\n    for day in range(days):\n        # Check if the flower was watered today\n        is_watered_today = watering_schedule[day] == 1\n\n        # Check if the flower was not watered today and the previous day was also not watered\n        if not is_watered_today and previous_watering_day == day - 1:\n            # The flower dies\n            return -1\n\n        # If the flower is watered today\n        if is_watered_today:\n            # Calculate growth based on consecutive watering\n            if previous_watering_day == day - 1:\n                # The flower grew by 5 centimeters\n                flower_height += 5\n            else:\n                # The flower grew by 1 centimeter\n                flower_height += 1\n\n        # Update the previous watering day\n        if is_watered_today:\n            previous_watering_day = day\n\n    return flower_height\n\n# Read input from the user\nn = int(input())\nwatering_schedule = list(map(int, input().split()))\n\n# Calculate and print the result\nresult = calculate_flower_height(n, watering_schedule)\nprint(result)\n"], "plans": ["requirement analysis:\nThe requirements specify a simple program to calculate the growth of a flower based on watering days. The program needs to handle multiple test cases and output the final height of the flower or -1 if it dies. The input is straightforward, and the output should be clear and concise.\nrequirement pool:\n- The main code should handle multiple test cases efficiently.\n- The program should correctly calculate the flower's height based on the given rules.\n- The output should indicate -1 if the flower dies.\n- The program should be able to handle up to 100 days of watering data.\nWe will use a simple and efficient approach to handle the flower growth calculation based on the given rules. The program will iterate through each day, checking the watering status and updating the flower's height accordingly. We will use a list to store the watering status for each day and then calculate the final height.\n", "requirement analysis:\nThe requirements specify a simple simulation of a plant's growth based on watering days. The plant can grow 1 cm per day if watered, 5 cm if watered on consecutive days, and does not grow if not watered. The plant starts at 1 cm and dies if not watered for two consecutive days. The output is the height of the plant after n days or -1 if it has died.\nrequirement pool:\n- The main code should read the number of test cases and for each test case, read the number of days and the watering schedule.\n- The code should simulate the plant's growth based on the watering schedule and output the final height or -1 if the plant has died.\n- Ensure the code is efficient and can handle up to 100 test cases with up to 100 days each.\n- Implement a clear and user-friendly output format for the results.\nWe will use a simple Python script to simulate the growth of Petya's flower based on the given watering schedule. The script will read the number of test cases and for each test case, it will read the number of days and the watering schedule. It will then simulate the growth of the flower and output the final height or -1 if the flower has died.\n", "requirement analysis:\nThe requirements specify a simple program to calculate the growth of a flower based on watering days. The program needs to handle multiple test cases and output the final height of the flower or -1 if it dies. The constraints are relatively low, with a maximum of 100 days and 100 test cases, making the program feasible to run on standard hardware.\nrequirement pool:\n- The main code should handle multiple test cases efficiently.\n- The program should correctly calculate the flower's height based on the given rules.\n- The output should indicate -1 if the flower dies.\n- The program should be able to handle up to 100 test cases and 100 days.\nWe will use a straightforward approach to solve this problem. The program will read multiple test cases, each containing a number of days and a sequence of watering days. For each test case, the program will simulate the growth of the flower based on the given rules. If the flower is not watered for two consecutive days, it will die, and the program will output -1 for that test case. Otherwise, it will output the final height of the flower.\n", "requirement analysis:\nThe requirements specify a simple program to calculate the growth of a flower based on watering days. The program needs to handle multiple test cases and output the final height of the flower or -1 if it dies. The constraints are relatively low, with a maximum of 100 days and 100 test cases, making the program feasible to run on standard hardware.\nrequirement pool:\n- The main code should handle multiple test cases efficiently.\n- The program should correctly calculate the flower's height based on watering days.\n- The output should indicate -1 if the flower dies.\n- The program should be able to handle up to 100 test cases and 100 days.\nWe will use a straightforward approach to solve this problem. The program will iterate through each day, checking if the flower was watered or not. Based on the watering schedule, it will calculate the growth of the flower. If the flower is not watered for two consecutive days, it will die, and the program will output -1 for that test case. Otherwise, it will output the final height of the flower.\n", "requirement analysis:\nThe requirements specify a simple program to calculate the growth of a flower based on watering days. The program needs to handle multiple test cases and output the final height of the flower or -1 if it dies. The flower's growth is influenced by whether it was watered on consecutive days or not.\nrequirement pool:\n- The main code should handle multiple test cases efficiently.\n- The program should correctly calculate the flower's height based on watering days.\n- The output should indicate -1 if the flower dies due to lack of watering for two consecutive days.\n- The user interface should be simple and easy to use.\n- The program should be optimized for performance to handle up to 100 test cases efficiently.\nWe will use a simple and efficient approach to handle the flower growth simulation based on watering days. The program will iterate through each day, checking the watering status and updating the flower's height accordingly. If the flower is not watered for two consecutive days, it will be marked as dead.\n", "requirement analysis:\nThe requirements specify a simple simulation of a plant's growth based on watering days. The plant can grow 1 cm per day if watered, 5 cm if watered on consecutive days, and does not grow if not watered. The plant starts at 1 cm and dies if not watered for two consecutive days. The output is the height of the plant after n days or -1 if it has died.\nrequirement pool:\n- The main code must correctly simulate the plant's growth based on watering days.\n- The program must handle multiple test cases efficiently.\n- The output must indicate the final height of the plant or -1 if it has died.\n- Implement a user-friendly interface for inputting the number of test cases and the watering days.\n- Design a responsive UI that adapts to different screen sizes and device types.\nWe will use a simple Python script to simulate the growth of Petya's flower based on the given watering days. The script will handle multiple test cases efficiently and output the final height of the flower or -1 if it has died.\n", "requirement analysis:\nThe requirements specify a simple program to calculate the growth of a flower based on watering days. The program needs to handle multiple test cases and output the final height of the flower or -1 if it dies. The constraints are relatively low, with a maximum of 100 days and 100 test cases, making the program feasible to run on standard hardware.\nrequirement pool:\n- The main code should handle multiple test cases efficiently.\n- The program should correctly calculate the flower's height based on the given rules.\n- The output should indicate -1 if the flower dies.\n- The program should be able to handle up to 100 test cases and 100 days.\nWe will use a straightforward approach to solve this problem. The program will iterate through each day, checking if the flower was watered or not. Based on the watering schedule, it will calculate the growth of the flower. If the flower is not watered for two consecutive days, it will die, and the program will output -1 for that test case. Otherwise, it will output the final height of the flower.\n", "requirement analysis:\nThe requirements specify a simple program to calculate the growth of a flower based on watering days. The program needs to handle multiple test cases and output the final height of the flower or -1 if it dies. The flower's growth depends on whether it was watered on consecutive days or not.\nrequirement pool:\n- The main code should handle multiple test cases efficiently.\n- The program should correctly calculate the flower's height based on the given rules.\n- The output should indicate -1 if the flower dies due to lack of watering for two consecutive days.\n- The program should be able to handle up to 100 days of watering data.\nWe will use a simple and efficient approach to handle the flower growth calculation based on the given rules. The program will iterate through each day, checking if the flower was watered or not, and calculate the height accordingly. If the flower is not watered for two consecutive days, it will die, and the program will output -1 for that test case.\n", "requirement analysis:\nThe requirements specify a simple program to calculate the growth of a flower based on watering days. The program needs to handle multiple test cases and output the final height of the flower or -1 if it dies. The flower's growth is influenced by whether it was watered on consecutive days or not.\nrequirement pool:\n- The main code should handle multiple test cases efficiently.\n- The program should correctly calculate the flower's height based on watering days.\n- The output should indicate -1 if the flower dies due to lack of watering for two consecutive days.\n- The program should be able to handle up to 100 days of watering data.\nWe will use a straightforward approach to solve this problem. The program will iterate through each day, checking if the flower was watered on that day and the previous day. Based on this information, it will calculate the height of the flower accordingly. If the flower is not watered for two consecutive days, it will die, and the program will output -1 for that test case.\n", "requirement analysis:\nThe requirements specify a simple program to calculate the growth of a flower based on watering days. The program needs to handle multiple test cases and output the final height of the flower or -1 if it dies. The flower's growth is influenced by whether it was watered on consecutive days or not.\nrequirement pool:\n- The main code should handle multiple test cases efficiently.\n- The program should correctly calculate the flower's height based on watering days.\n- The output should indicate -1 if the flower dies due to lack of watering for two consecutive days.\n- The program should be able to handle up to 100 days of watering data.\nWe will use a straightforward approach to solve the problem. The program will iterate through each day, checking if the flower was watered or not. It will keep track of the flower's growth based on the watering schedule. If the flower is not watered for two consecutive days, it will die, and the program will output -1. Otherwise, it will output the final height of the flower.\n"], "scores": [], "pass_results": [false, false, false, false, true, false, true, true, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 89, "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "mutate_method": "condense_two2one", "parent_index": 82}
