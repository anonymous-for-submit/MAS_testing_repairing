{"name": "1575_A. Another Sorting Problem", "description": "Andi and Budi were given an assignment to tidy up their bookshelf of n books. Each book is represented by the book title \u2014 a string s_i numbered from 1 to n, each with length m. Andi really wants to sort the book lexicographically ascending, while Budi wants to sort it lexicographically descending.\n\nSettling their fight, they decided to combine their idea and sort it asc-desc-endingly, where the odd-indexed characters will be compared ascendingly, and the even-indexed characters will be compared descendingly.\n\nA string a occurs before a string b in asc-desc-ending order if and only if in the first position where a and b differ, the following holds:\n\n  * if it is an odd position, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b; \n  * if it is an even position, the string a has a letter that appears later in the alphabet than the corresponding letter in b. \n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n \u22c5 m \u2264 10^6).\n\nThe i-th of the next n lines contains a string s_i consisting of m uppercase Latin letters \u2014 the book title. The strings are pairwise distinct.\n\nOutput\n\nOutput n integers \u2014 the indices of the strings after they are sorted asc-desc-endingly.\n\nExample\n\nInput\n\n\n5 2\nAA\nAB\nBB\nBA\nAZ\n\n\nOutput\n\n\n5 2 1 3 4\n", "tags": ["data structures", "sortings", "strings"], "difficulty": 7, "id": 1575, "sample_io": [{"input": "5 2\nAA\nAB\nBB\nBA\nAZ\n", "output": ["5 2 1 3 4 \n"]}], "test_list": [{"input": "5 2\nAA\nAB\nBB\nBA\nZA\n", "output": ["2 1 3 4 5\n"]}, {"input": "5 2\nAA\nAB\nCB\nBA\nAZ\n", "output": ["5 2 1 4 3\n"]}, {"input": "2 2\nAA\nAB\nCB\nBA\nAZ\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nBC\nCB\nAB\nAZ\n", "output": ["1 2\n"]}, {"input": "1 2\nAA\nAC\nBC\nBA\nZA\n", "output": ["1\n"]}, {"input": "5 2\nAA\nAB\nBC\nBA\nAZ\n", "output": ["5 2 1 3 4\n"]}, {"input": "3 2\nAA\nAB\nCB\nAB\nAZ\n", "output": ["2 1 3\n"]}, {"input": "4 2\nBA\nAC\nEA\nAA\nZ@\n", "output": ["2 4 1 3\n"]}, {"input": "3 2\nAA\nBA\nCB\nAB\nAZ\n", "output": ["1 2 3\n"]}, {"input": "4 2\nAA\nAC\nCB\nBA\nAZ\n", "output": ["2 1 4 3\n"]}, {"input": "4 2\nBA\nBC\nEA\nAB\nZ@\n", "output": ["4 2 1 3\n"]}, {"input": "3 2\nBA\nAD\nAB\nBA\nC[\n", "output": ["2 3 1\n"]}, {"input": "3 2\nAA\nBA\nBC\nAB\nAZ\n", "output": ["1 3 2\n"]}, {"input": "5 2\nAA\nBA\nCC\nBB\nAZ\n", "output": ["5 1 4 2 3\n"]}, {"input": "2 2\nAA\nAB\nCB\nAB\nAZ\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nAC\nCB\nAB\nAZ\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nBC\nCB\nAB\nZA\n", "output": ["1 2\n"]}, {"input": "2 2\nAA\nBC\nBC\nAB\nZA\n", "output": ["1 2\n"]}, {"input": "2 2\nAA\nAC\nBC\nAB\nZA\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nAC\nBC\nBA\nZA\n", "output": ["2 1\n"]}, {"input": "1 2\nAA\nAC\nBC\nAA\nZA\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAC\nCB\nAA\nZA\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAC\nCB\nAA\nZ@\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAC\nCB\nAA\nZ@\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nAC\nCA\nAA\nZ@\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nAC\nCA\nAA\nZ@\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nAC\nCA\nBA\nZ@\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nAC\nCA\nAB\nZ@\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nAC\nCA\nAB\n@Z\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nAC\nCA\nAB\n@Y\n", "output": ["2 1\n"]}, {"input": "5 2\nAA\nAB\nBB\nBA\nZB\n", "output": ["2 1 3 4 5\n"]}, {"input": "2 2\nAA\nAD\nCB\nAB\nAZ\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nBC\nBB\nAB\nAZ\n", "output": ["1 2\n"]}, {"input": "2 2\nBA\nBC\nCB\nAB\nZA\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nBC\nBD\nAB\nZA\n", "output": ["1 2\n"]}, {"input": "2 2\nAA\nAC\nBC\nAB\n[A\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nAC\nBC\nBA\nAZ\n", "output": ["2 1\n"]}, {"input": "1 2\nAA\nAB\nBC\nBA\nZA\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAC\nBC\nAA\nAZ\n", "output": ["1\n"]}, {"input": "1 2\nBA\nAC\nCB\nAA\nZ@\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAC\nBC\nAA\nZ@\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nAC\nDA\nAA\nZ@\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nAC\nCA\nAA\n[@\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nCA\nCA\nBA\nZ@\n", "output": ["1 2\n"]}, {"input": "2 2\nAB\nAC\nAC\nAB\nZ@\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nAC\nBA\nAB\n@Z\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nCA\nCA\nAB\n@Y\n", "output": ["1 2\n"]}, {"input": "5 2\nAA\nAB\nCC\nBA\nAZ\n", "output": ["5 2 1 4 3\n"]}, {"input": "2 2\nBA\nBC\nBB\nAB\nZA\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nAC\nAC\nAB\n[A\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nAC\nCB\nBA\nAZ\n", "output": ["2 1\n"]}, {"input": "1 2\nAA\nAB\nBC\nBA\nAZ\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAC\nBC\nAA\n@Z\n", "output": ["1\n"]}, {"input": "1 2\nBA\nAC\nCA\nAA\nZ@\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAC\nBC\nAA\nZ?\n", "output": ["2 1\n"]}, {"input": "3 2\nAA\nAC\nDA\nAA\nZ@\n", "output": ["2 1 3\n"]}, {"input": "2 2\nBA\nAC\nCA\nAA\n[@\n", "output": ["2 1\n"]}, {"input": "1 2\nAB\nCA\nCA\nBA\nZ@\n", "output": ["1\n"]}, {"input": "2 2\nAB\nCA\nAC\nAB\nZ@\n", "output": ["1 2\n"]}, {"input": "2 2\nAB\nAC\nBA\nBB\n@Z\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nCB\nCA\nAB\n@Y\n", "output": ["1 2\n"]}, {"input": "3 2\nAA\nAB\nCC\nBA\nAZ\n", "output": ["2 1 3\n"]}, {"input": "1 2\nBA\nBC\nBB\nAB\nZA\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAC\nAC\nAC\n[A\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nAB\nCB\nCA\nAZ\n", "output": ["2 1\n"]}, {"input": "1 2\nAA\nAB\nBC\nBA\nA[\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAC\nBC\nAB\n@Z\n", "output": ["1\n"]}, {"input": "1 2\nBA\nAC\nCA\nAA\n@Z\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAC\nBC\nAA\n?Z\n", "output": ["2 1\n"]}, {"input": "3 2\nAA\nAC\nEA\nAA\nZ@\n", "output": ["2 1 3\n"]}, {"input": "2 2\nBA\nAC\nAC\nAA\n[@\n", "output": ["2 1\n"]}, {"input": "1 2\nBB\nCA\nCA\nBA\nZ@\n", "output": ["1\n"]}, {"input": "2 2\nAB\nBA\nAC\nAB\nZ@\n", "output": ["1 2\n"]}, {"input": "2 2\nAB\nAC\nBA\nBB\n?Z\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nCB\nCA\nAC\n@Y\n", "output": ["1 2\n"]}, {"input": "1 2\nBA\nCB\nBB\nAB\nZA\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAC\nAC\nAC\n[B\n", "output": ["2 1\n"]}, {"input": "1 2\nAA\nAC\nCB\nBA\nAZ\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAB\nBC\nBA\nA[\n", "output": ["2 1\n"]}, {"input": "1 2\nAA\nAC\nCB\nAB\n@Z\n", "output": ["1\n"]}, {"input": "1 2\nBA\nAC\nCA\nAB\n@Z\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAC\nBC\nA@\n?Z\n", "output": ["2 1\n"]}, {"input": "3 2\nBA\nAC\nEA\nAA\nZ@\n", "output": ["2 1 3\n"]}, {"input": "1 2\nBB\nAC\nCA\nBA\nZ@\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAC\nBA\nBB\n?Z\n", "output": ["2 1\n"]}, {"input": "2 2\nBA\nCB\nCA\nAC\n@Y\n", "output": ["1 2\n"]}, {"input": "2 2\nBA\nCB\nBB\nAB\nZA\n", "output": ["1 2\n"]}, {"input": "1 2\nAA\nAC\nAC\nAC\n[B\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAC\nCB\nBA\nZA\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAB\nCB\nBA\nA[\n", "output": ["2 1\n"]}, {"input": "1 2\nAA\nAC\nCB\nAB\nZ@\n", "output": ["1\n"]}, {"input": "1 2\nBA\nAC\nCB\nAB\n@Z\n", "output": ["1\n"]}, {"input": "2 2\nBA\nAC\nBC\nA@\n?Z\n", "output": ["2 1\n"]}, {"input": "1 2\nBB\nAC\nCA\nAB\nZ@\n", "output": ["1\n"]}, {"input": "2 2\nAA\nBC\nBA\nBB\n?Z\n", "output": ["1 2\n"]}, {"input": "2 2\nBA\nBC\nCA\nAC\n@Y\n", "output": ["2 1\n"]}, {"input": "1 2\nAA\nAC\nAC\nAC\n[C\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAC\nCB\nBA\nA[\n", "output": ["2 1\n"]}, {"input": "1 2\nAA\nAC\nDB\nAB\nZ@\n", "output": ["1\n"]}, {"input": "2 2\nBA\nAD\nBC\nA@\n?Z\n", "output": ["2 1\n"]}, {"input": "4 2\nBA\nAC\nEA\nAB\nZ@\n", "output": ["2 4 1 3\n"]}, {"input": "1 2\nCB\nAC\nCA\nAB\nZ@\n", "output": ["1\n"]}, {"input": "2 2\nAA\nBC\nBA\nBB\nZ?\n", "output": ["1 2\n"]}, {"input": "2 2\nBA\nBB\nCA\nAC\n@Y\n", "output": ["2 1\n"]}, {"input": "1 2\nAA\nAC\nAC\nAD\n[C\n", "output": ["1\n"]}, {"input": "2 2\nAA\nCA\nCB\nBA\nA[\n", "output": ["1 2\n"]}, {"input": "2 2\nBA\nAD\nBC\nA?\n?Z\n", "output": ["2 1\n"]}, {"input": "1 2\nCB\nCA\nCA\nAB\nZ@\n", "output": ["1\n"]}, {"input": "2 2\nAA\nBC\nBB\nBB\nZ?\n", "output": ["1 2\n"]}, {"input": "2 2\nBA\nBB\nCA\nCA\n@Y\n", "output": ["2 1\n"]}, {"input": "1 2\nAA\nCA\nAC\nAD\n[C\n", "output": ["1\n"]}, {"input": "2 2\nAA\nCA\nBB\nBA\nA[\n", "output": ["1 2\n"]}, {"input": "2 2\nBA\nAD\nBB\nA?\n?Z\n", "output": ["2 1\n"]}, {"input": "2 2\nBA\nBB\nCA\nDA\n@Y\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nCA\nBB\nAB\nA[\n", "output": ["1 2\n"]}, {"input": "2 2\nBA\nDA\nBB\nA?\n?Z\n", "output": ["1 2\n"]}, {"input": "2 2\nAB\nBB\nCA\nDA\n@Y\n", "output": ["1 2\n"]}, {"input": "2 2\nAA\nCA\nBB\nAA\nA[\n", "output": ["1 2\n"]}, {"input": "2 2\nBA\nAD\nBB\nA?\n?Y\n", "output": ["2 1\n"]}, {"input": "2 2\nBA\nBB\nCA\nD@\n@Y\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nDA\nBB\nBA\nA[\n", "output": ["1 2\n"]}, {"input": "2 2\nAB\nAD\nBB\nA?\n?Y\n", "output": ["2 1\n"]}, {"input": "2 2\nBA\nBB\nAC\nD@\n@Y\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nDA\nBB\nAB\nA[\n", "output": ["1 2\n"]}, {"input": "2 2\nAB\nAD\nBA\nA?\n?Y\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nDA\nAB\nAB\nA[\n", "output": ["1 2\n"]}, {"input": "2 2\nAB\nAD\nAB\nA?\n?Y\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nDA\nAB\nBA\nA[\n", "output": ["1 2\n"]}, {"input": "2 2\nAB\nAD\nCA\nA?\n?Y\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nDA\nAB\nBA\nB[\n", "output": ["1 2\n"]}, {"input": "2 2\nAB\nAD\nCA\nA>\n?Y\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nDA\nAB\nCA\nB[\n", "output": ["1 2\n"]}, {"input": "1 2\nAA\nDA\nAB\nCA\nB[\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAD\nAB\nCA\nB[\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAD\nAB\nAC\nB[\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAD\nAB\nAC\nC[\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAD\nAB\nCA\nC[\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAD\nAB\nBA\nC[\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAD\nAB\nBA\nC[\n", "output": ["2 1\n"]}, {"input": "2 2\nBA\nAD\nAB\nBA\nC[\n", "output": ["2 1\n"]}, {"input": "2 2\nBA\nAE\nAB\nBA\nC[\n", "output": ["2 1\n"]}, {"input": "2 2\nBA\nAE\nAB\nBA\n[C\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nAB\nCB\nAC\nAZ\n", "output": ["2 1\n"]}, {"input": "3 2\nAA\nAC\nCB\nAB\nAZ\n", "output": ["2 1 3\n"]}, {"input": "2 2\nAA\nBC\nDB\nAB\nAZ\n", "output": ["1 2\n"]}, {"input": "2 2\nAA\nBC\nCB\nBA\nZA\n", "output": ["1 2\n"]}, {"input": "2 2\nAA\nBC\nBC\nAC\nZA\n", "output": ["1 2\n"]}, {"input": "2 2\nAA\nAC\nCB\nAB\nZA\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nAC\nCC\nBA\nZA\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nCA\nBC\nBA\nZA\n", "output": ["1 2\n"]}, {"input": "1 2\nAA\nAB\nBC\nAA\nZA\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAC\nCC\nAA\nZA\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAD\nCB\nAA\nZ@\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAC\nCB\n@A\nZ@\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nCA\nCA\nAB\nZ@\n", "output": ["1 2\n"]}, {"input": "2 2\nAA\nAC\nCA\nAB\nZ@\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nAC\nAC\nAB\n@Z\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nAC\nAC\nAB\n@Y\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nBC\nBD\nAB\nYA\n", "output": ["1 2\n"]}, {"input": "3 2\nAA\nAC\nBC\nAB\n[A\n", "output": ["2 1 3\n"]}, {"input": "2 2\nAA\nAC\nAC\nBA\nAZ\n", "output": ["2 1\n"]}, {"input": "1 1\nAA\nAC\nBC\nAA\nAZ\n", "output": ["1\n"]}, {"input": "1 2\nBA\nAC\nCB\nAA\n@Z\n", "output": ["1\n"]}, {"input": "2 2\nAB\nAC\nDA\nAA\nZ@\n", "output": ["2 1\n"]}, {"input": "2 2\nBA\nAC\nCB\nAA\n[@\n", "output": ["2 1\n"]}, {"input": "2 1\nAB\nCA\nCA\nBA\nZ@\n", "output": ["1 2\n"]}, {"input": "2 2\nBA\nAC\nCA\nAB\n@Z\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nBC\nBA\nAB\n@Z\n", "output": ["1 2\n"]}, {"input": "2 2\nAB\nCA\nAC\nAB\n@Y\n", "output": ["1 2\n"]}, {"input": "5 2\nAA\nAB\nCC\nBB\nAZ\n", "output": ["5 2 1 4 3\n"]}, {"input": "2 2\nBA\nCB\nBB\nAB\nAZ\n", "output": ["1 2\n"]}, {"input": "1 2\nAA\nAB\nBC\nBA\nAY\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAC\nBC\nBA\n@Z\n", "output": ["1\n"]}, {"input": "2 2\nAB\nAC\nCB\nAA\n[@\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nCA\nAD\nAB\nZ@\n", "output": ["1 2\n"]}, {"input": "2 2\nAB\nCB\nCB\nAB\n@Y\n", "output": ["1 2\n"]}, {"input": "3 2\nAA\nAB\nCC\nBA\nAY\n", "output": ["2 1 3\n"]}, {"input": "1 2\nBA\nBC\nBB\nBB\nZA\n", "output": ["1\n"]}, {"input": "2 2\nAA\nCA\nAC\nAC\n[A\n", "output": ["1 2\n"]}, {"input": "2 2\nAA\nAB\nBC\nBA\nAZ\n", "output": ["2 1\n"]}, {"input": "1 2\nAA\nAB\nBB\nBA\nA[\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAC\nBC\nAB\n@[\n", "output": ["1\n"]}, {"input": "1 2\nBA\nBC\nCA\nAA\nZ@\n", "output": ["1\n"]}, {"input": "2 2\nAA\nCA\nBC\nAA\n?Z\n", "output": ["1 2\n"]}, {"input": "3 2\nAB\nAC\nEA\nAA\nZ@\n", "output": ["2 1 3\n"]}, {"input": "2 2\nBA\nAC\nAC\nAA\nZ@\n", "output": ["2 1\n"]}, {"input": "1 2\nBB\nCA\nCA\nBA\n@Z\n", "output": ["1\n"]}, {"input": "2 2\nAB\nBA\nAC\nBA\nZ@\n", "output": ["1 2\n"]}, {"input": "2 2\nBB\nCB\nCA\nAC\n@Y\n", "output": ["1 2\n"]}, {"input": "1 2\nBA\nCB\nBB\nBA\nZA\n", "output": ["1\n"]}, {"input": "2 2\nBA\nAC\nAC\nAC\n[B\n", "output": ["2 1\n"]}, {"input": "1 2\nAA\nAC\nCB\nAA\nAZ\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAB\nBC\nB@\nA[\n", "output": ["2 1\n"]}, {"input": "1 2\nAA\nAC\nCB\nAA\n@Z\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAC\nCA\nBB\n?Z\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nCB\nBB\nAB\nZA\n", "output": ["1 2\n"]}, {"input": "1 2\nAA\nCA\nAC\nAC\n[B\n", "output": ["1\n"]}, {"input": "3 2\nAA\nAB\nCB\nBA\nA[\n", "output": ["2 1 3\n"]}, {"input": "1 1\nAA\nAC\nCB\nAB\nZ@\n", "output": ["1\n"]}, {"input": "1 2\nBA\nAC\nCC\nAB\n@Z\n", "output": ["1\n"]}], "task_id": "codecontest/0", "prompt": "Andi and Budi were given an assignment to tidy up their bookshelf of n books. Each book is represented by the book title \u2014 a string s_i numbered from 1 to n, each with length m. Andi has a preference to sort the book lexicographically ascending. Budi, on the other hand, wants to sort it lexicographically descending.\n\nSettling their fight, they decided to combine their idea and sort it asc-desc-endingly, where the odd-indexed characters will be compared ascendingly, and the even-indexed characters will be compared descendingly.\n\nA string a occurs before a string b in asc-desc-ending order if and only if in the first position where a and b differ, the following holds:\n\n  * if it is an odd position, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b; \n  * if it is an even position, the string a has a letter that appears later in the alphabet than the corresponding letter in b. \n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n \u22c5 m \u2264 10^6).\n\nThe i-th of the next n lines contains a string s_i consisting of m uppercase Latin letters \u2014 the book title. The strings are pairwise distinct.\n\nOutput\n\nOutput n integers \u2014 the indices of the strings after they are sorted asc-desc-endingly.\n\nExample\n\nInput\n\n\n5 2\nAA\nAB\nBB\nBA\nAZ\n\n\nOutput\n\n\n5 2 1 3 4\n", "repair_prompt": ["Andi and Budi were given an assignment to tidy up their bookshelf of n books. Each book is represented by the book title \u2014 a string s_i numbered from 1 to n, each with length m. Andi has a preference to sort the book lexicographically ascending. Budi, on the other hand, wants to sort it lexicographically descending.\n\nSettling their fight, they decided to combine their idea and sort it asc-desc-endingly, where the odd-indexed characters will be compared ascendingly, and the even-indexed characters will be compared descendingly.\n\nA string a occurs before a string b in asc-desc-ending order if and only if in the first position where a and b differ, the following holds:\n\n  * if it is an odd position, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b; \n  * if it is an even position, the string a has a letter that appears later in the alphabet than the corresponding letter in b. \n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n \u22c5 m \u2264 10^6).\n\nThe i-th of the next n lines contains a string s_i consisting of m uppercase Latin letters \u2014 the book title. The strings are pairwise distinct.\n\nOutput\n\nOutput n integers \u2014 the indices of the strings after they are sorted asc-desc-endingly.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5 2\nAA\nAB\nBB\nBA\nAZ\n\n\nOutput\n\n\n5 2 1 3 4\n\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\nfrom typing import List\n\ndef custom_sort(book_titles: List[str], n: int, m: int) -> List[int]:\n    def sort_key(index: int) -> tuple:\n        title = book_titles[index]\n        odd_chars = [title[i] for i in range(0, m, 2)]\n        even_chars = [title[i] for i in range(1, m, 2)]\n        return (''.join(sorted(odd_chars)), ''.join(sorted(even_chars, reverse=True)))\n    \n    return sorted(range(n), key=sort_key)\n\n# Interface\nn, m = map(int, input().split())\nbook_titles = [input().strip() for _ in range(n)]\nresult = custom_sort(book_titles, n, m)\nfor index in result:\n    print(index)\n", "from typing import List\nfrom typing import List\n\ndef custom_sort(books: List[str], n: int, m: int) -> List[int]:\n    def sort_key(index: int) -> tuple:\n        book = books[index]\n        odd_chars = [book[i] for i in range(0, m, 2)]\n        even_chars = [book[i] for i in range(1, m, 2)]\n        return (''.join(sorted(odd_chars)), ''.join(sorted(even_chars, reverse=True)))\n    \n    return sorted(range(n), key=sort_key)\n\n# Interface\nn, m = map(int, input().split())\nbooks = [input().strip() for _ in range(n)]\nresult = custom_sort(books, n, m)\nfor index in result:\n    print(index)\n", "from typing import List\n## main.py\nimport sys\n\ndef custom_sort(n, m, books):\n    \"\"\"\n    Custom sorting function to sort books based on the specified rules.\n\n    Args:\n        n (int): Number of books.\n        m (int): Length of each book title.\n        books (list of str): List of book titles.\n\n    Returns:\n        list of int: List of indices of the books after sorting.\n    \"\"\"\n    # Create a list of indices\n    indices = list(range(n))\n\n    # Define the custom key function for sorting\n    def custom_key(idx):\n        title = books[idx]\n        odd_chars = [title[i] for i in range(0, m, 2)]\n        even_chars = [title[i] for i in range(1, m, 2)]\n        odd_chars.sort()\n        even_chars.sort(reverse=True)\n        return (odd_chars, even_chars)\n\n    # Sort indices based on the custom key function\n    indices.sort(key=custom_key)\n\n    return indices\n\n# Read input\nn, m = map(int, sys.stdin.readline().split())\nbooks = [sys.stdin.readline().strip() for _ in range(n)]\n\n# Call the custom_sort function\nresult = custom_sort(n, m, books)\n\n# Output the sorted indices\nprint(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sort_books(n: int, m: int, books: List[str]) -> List[int]:\n    def custom_key(book: str, index: int) -> tuple:\n        odd_chars = [book[i] for i in range(0, m, 2)]\n        even_chars = [book[i] for i in range(1, m, 2)]\n        return (''.join(sorted(odd_chars)), ''.join(sorted(even_chars, reverse=True)))\n    \n    indexed_books = [(book, index + 1) for index, book in enumerate(books)]\n    sorted_books = sorted(indexed_books, key=lambda x: custom_key(x[0], x[1]))\n    return [index for book, index in sorted_books]\n\n# Interface\nn, m = map(int, input().split())\nbooks = [input().strip() for _ in range(n)]\nresult = sort_books(n, m, books)\nfor index in result:\n    print(index)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef custom_sort(n: int, m: int, books: List[str]) -> List[int]:\n    def sort_key(index: int) -> tuple:\n        book = books[index]\n        odd_chars = [book[i] for i in range(0, m, 2)]\n        even_chars = [book[i] for i in range(1, m, 2)]\n        return (''.join(sorted(odd_chars)), ''.join(sorted(even_chars, reverse=True)))\n    \n    indices = list(range(n))\n    indices.sort(key=sort_key)\n    return indices\n\n# Interface\nn, m = map(int, input().split())\nbooks = [input().strip() for _ in range(n)]\nresult = custom_sort(n, m, books)\nfor index in result:\n    print(index)\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef custom_sort(books: List[str], n: int, m: int) -> List[int]:\n    def compare(book1: str, book2: str, position: int) -> int:\n        if position % 2 == 0:\n            # Even position: compare in descending order\n            return ord(book2[position]) - ord(book1[position])\n        else:\n            # Odd position: compare in ascending order\n            return ord(book1[position]) - ord(book2[position])\n\n    # Create a list of indices\n    indices = list(range(n))\n\n    # Sort the indices based on the custom comparison function\n    indices.sort(key=lambda i: [books[i][j] for j in range(m)])\n\n    return indices\n\n# Read input\nn, m = map(int, input().split())\nbooks = [input().strip() for _ in range(n)]\n\n# Call the custom_sort function\nresult = custom_sort(books, n, m)\n\n# Output the sorted indices\nfor index in result:\n    print(index)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef custom_sort(books: List[str], n: int, m: int) -> List[int]:\n    def compare(a: str, b: str, index: int) -> int:\n        if index % 2 == 0:\n            # Even index: compare in descending order\n            return ord(b[index]) - ord(a[index])\n        else:\n            # Odd index: compare in ascending order\n            return ord(a[index]) - ord(b[index])\n\n    # Create a list of indices\n    indices = list(range(n))\n\n    # Sort using the custom comparison function\n    indices.sort(key=lambda i: [books[i][j] for j in range(m)])\n\n    return indices\n\n# Read input\nn, m = map(int, input().split())\nbooks = [input().strip() for _ in range(n)]\n\n# Call the custom_sort function\nresult = custom_sort(books, n, m)\n\n# Output the sorted indices\nfor index in result:\n    print(index)\n", "from typing import List\nfrom typing import List\n\ndef custom_sort(book_titles: List[str], n: int, m: int) -> List[int]:\n    def compare_strings(a: str, b: str, index: int) -> int:\n        if a[index] < b[index]:\n            return -1\n        elif a[index] > b[index]:\n            return 1\n        else:\n            return 0\n\n    indices = list(range(n))\n\n    def custom_key(index: int) -> tuple:\n        string = book_titles[index]\n        odd_chars = [string[i] for i in range(0, m, 2)]\n        even_chars = [string[i] for i in range(1, m, 2)]\n        odd_chars.sort()\n        even_chars.sort(reverse=True)\n        return (odd_chars, even_chars)\n\n    indices.sort(key=lambda index: custom_key(index))\n    return indices\n\n# Read input\nn, m = map(int, input().split())\nbook_titles = [input().strip() for _ in range(n)]\n\n# Call the custom_sort function\nresult = custom_sort(book_titles, n, m)\n\n# Output the sorted indices\nfor index in result:\n    print(index)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef func(n: int, m: int, books: List[str]) -> List[int]:\n    def custom_key(book: str, index: int) -> tuple:\n        odd_chars = [book[i] for i in range(0, m, 2)]\n        even_chars = [book[i] for i in range(1, m, 2)]\n        return (''.join(sorted(odd_chars)), ''.join(sorted(even_chars, reverse=True)))\n\n    indexed_books = list(enumerate(books, start=1))\n    indexed_books.sort(key=lambda x: custom_key(x[1], x[0]))\n    return [index for index, _ in indexed_books]\n\n# Interface\nn, m = map(int, input().split())\nbooks = [input().strip() for _ in range(n)]\nresult = func(n, m, books)\nfor index in result:\n    print(index)\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef custom_sort(books: List[str], n: int, m: int) -> List[int]:\n    def compare(a: str, b: str, index: int) -> int:\n        if index % 2 == 0:\n            return ord(a[index]) - ord(b[index])\n        else:\n            return ord(b[index]) - ord(a[index])\n\n    indices = list(range(n))\n    indices.sort(key=lambda i: [compare(books[i][j], books[i][k], j) for j in range(m) for k in range(j + 1, m)])\n    return indices\n\n# Read input\nn, m = map(int, input().split())\nbooks = [input().strip() for _ in range(n)]\n\n# Call custom_sort function\nresult = custom_sort(books, n, m)\n\n# Output sorted indices\nfor index in result:\n    print(index)\n"], "plans": ["requirement analysis:\nThe requirements specify a custom sorting method that combines both ascending and descending lexicographical sorting, with specific rules for odd and even indexed characters. The input is a list of book titles, and the output should be the indices of these titles after sorting according to the specified method. The system must be able to handle large inputs efficiently.\nrequirement pool:\n- Implement the custom asc-desc-ending sorting algorithm\n- Ensure the system can handle inputs up to 10^6 characters\n- Provide clear and accurate output\n- Optimize the sorting algorithm for performance\nTo implement the custom asc-desc-ending sorting algorithm, we will use Python's built-in sorting capabilities with a custom key function. This key function will handle the specific sorting rules for odd and even indexed characters. We will also ensure that the algorithm is optimized to handle large inputs efficiently by leveraging Python's efficient list operations and avoiding unnecessary computations.\n", "requirement analysis:\nThe requirements specify a custom sorting algorithm that combines both ascending and descending lexicographical sorting, with specific rules for odd and even indexed characters. The input is a list of book titles, and the output should be the indices of these titles after sorting according to the custom rules. The algorithm must be efficient enough to handle large inputs, and the output must be clear and accurate.\nrequirement pool:\n- Implement a custom sorting algorithm that meets the specified requirements\n- Ensure the algorithm is optimized for large datasets\n- Provide clear and accurate output\n- Test the algorithm with various inputs to ensure correctness\n- Optimize the code for readability and maintainability\nTo implement the custom sorting algorithm as described, we will use Python's built-in sorting capabilities, customizing the key function to handle the specific sorting rules for odd and even indexed characters. This approach leverages Python's efficiency and the ease of implementing custom sorting logic.\n", "requirement analysis:\nThe requirements specify the need for a sorting algorithm that can handle large inputs and provide a custom sorting order based on specific rules. The algorithm should be efficient and provide clear output. The sorting order involves comparing characters at odd and even positions differently, which adds a layer of complexity to the sorting logic.\nrequirement pool:\n- Implement a custom sorting algorithm that sorts strings based on the given rules.\n- Ensure the algorithm can handle large inputs efficiently.\n- Provide clear and easy-to-read output of sorted indices.\n- Optimize the code for performance and readability.\n- Test the algorithm with various edge cases to ensure robustness.\nTo implement the custom sorting algorithm as described, we will use Python's built-in sorting capabilities with a custom key function. The key function will handle the comparison of strings based on the rules for odd and even indexed characters. This approach leverages Python's efficiency and the ease of use of built-in functions.\n", "requirement analysis:\nThe requirements involve creating a sorting algorithm that can handle both ascending and descending lexicographical sorting, with a specific focus on odd and even indexed characters. The algorithm should be efficient enough to handle large datasets and provide clear and concise output. The user interface should be user-friendly, allowing users to easily input their book titles and view the sorted results.\nrequirement pool:\n- Implement a sorting algorithm that supports asc-desc lexicographical sorting.\n- Ensure the algorithm can handle large datasets efficiently.\n- Develop a user-friendly interface for inputting and viewing book titles and their sorted positions.\n- Provide clear and concise output that is easy to read and understand.\n- Test and validate the system with various test cases to ensure accuracy and reliability.\nTo implement the asc-desc lexicographical sorting, we will use Python's built-in sorting capabilities, leveraging its flexibility to customize the sorting order. We will define a custom key function that will handle the sorting logic based on the specified rules for odd and even indexed characters. This approach ensures efficiency and leverages Python's powerful standard library.\n", "requirement analysis:\nThe primary requirement is to sort the books in a custom order that combines both ascending and descending lexicographical sorting, with odd-indexed characters sorted ascendingly and even-indexed characters sorted descendingly. The solution must be efficient and capable of handling large inputs efficiently.\nrequirement pool:\n- Implement a custom sorting algorithm that sorts strings based on the specified rules\n- Ensure the algorithm is optimized for large datasets\n- Provide clear and accurate output of the sorted indices\n- Make the user interface simple and easy to use\nTo implement the custom sorting algorithm, we will use Python's built-in sorting capabilities with a custom key function. The key function will handle the sorting based on the specified rules for odd and even indexed characters. We will optimize the algorithm to handle large datasets efficiently by leveraging Python's efficient list operations and avoiding unnecessary computations.\n", "requirement analysis:\nThe requirements specify a custom sorting algorithm that combines both ascending and descending lexicographical sorting, with specific rules for odd and even indexed characters. The input is a list of book titles, and the output should be the indices of these titles sorted according to the custom rules. The system must be efficient enough to handle large inputs, and the output must be clear and easy to understand.\nrequirement pool:\n- Implement a custom sorting algorithm that meets the specified rules\n- Ensure the system can handle large inputs efficiently\n- Provide clear and accurate output indices for the sorted book titles\n- Include user-friendly interface for easy interaction\n- Optimize the code for better performance\nTo implement the custom sorting algorithm as described, we will use Python's built-in sorting capabilities, leveraging its flexibility to define custom comparison functions. The algorithm will compare characters at odd and even positions separately, applying ascending and descending rules respectively. This approach allows us to handle the sorting efficiently even for large datasets.\n", "requirement analysis:\nThe requirements specify the need for a custom sorting algorithm that combines both ascending and descending lexicographical sorting, with specific rules for odd and even indexed characters. The solution must be efficient and scalable to handle large datasets.\nrequirement pool:\n- Implement a custom sorting algorithm that meets the specified requirements.\n- Ensure the solution is efficient and can handle large inputs.\n- Provide clear and accurate output of sorted indices.\n- Allow for easy input and output handling.\n- Ensure the solution is user-friendly and easy to understand.\nTo implement the custom sorting algorithm as described, we will use Python's built-in sorting capabilities, leveraging its flexibility to define custom comparison functions. The algorithm will compare characters at odd and even positions separately, applying ascending and descending rules respectively. This approach allows us to handle the sorting efficiently while maintaining clarity and scalability.\n", "requirement analysis:\nThe requirements specify a custom sorting algorithm that combines both ascending and descending lexicographical sorting, with specific rules for odd and even indexed characters. The input is a list of book titles, and the output should be the indices of these titles after sorting according to the specified rules. The system must be able to handle large inputs efficiently.\nrequirement pool:\n- Implement the custom asc-desc-ending sorting algorithm\n- Ensure the system can handle large inputs efficiently\n- Provide clear and accurate output\n- Optimize the sorting algorithm for performance\n- Ensure user-friendly input and output formats\nTo implement the custom asc-desc-ending sorting algorithm, we will use Python's built-in sorting capabilities with a custom key function. This key function will handle the specific sorting rules for odd and even indexed characters. We will also ensure that the algorithm is optimized to handle large inputs efficiently by leveraging Python's efficient data structures and avoiding unnecessary computations.\n", "requirement analysis:\nThe requirements specify the need for a sorting algorithm that sorts strings based on a unique lexicographical order, combining both ascending and descending characteristics. The algorithm must be efficient and capable of handling large inputs efficiently. The output should be clear and accurate, providing the indices of the strings after sorting.\nrequirement pool:\n- Implement a sorting algorithm that supports asc-desc lexicographical order\n- Ensure the algorithm is efficient and can handle large inputs\n- Provide clear and accurate output of sorted indices\n- Test and validate the algorithm with various test cases\n- Optimize the algorithm for better performance\nTo implement the required sorting algorithm, we will use Python's built-in sorting capabilities, customizing the key function to handle the asc-desc lexicographical order. The key function will be designed to sort odd-indexed characters in ascending order and even-indexed characters in descending order. This approach leverages Python's flexibility and efficiency in handling such tasks.\n", "requirement analysis:\nThe requirements specify the need for a custom sorting algorithm that combines both ascending and descending lexicographical sorting, with specific rules for odd and even indexed characters. The solution must be efficient and scalable to handle large inputs.\nrequirement pool:\n- Implement a custom sorting algorithm that meets the specified requirements.\n- Ensure the solution is efficient and can handle large inputs.\n- Provide clear and accurate output as specified.\n- Ensure the solution is scalable and can handle large datasets.\n- Improve the user interface for better readability of output.\nTo implement the custom sorting algorithm as described, we will use Python's built-in sorting capabilities, leveraging its flexibility to define custom comparison functions. The algorithm will compare characters at odd and even positions separately, applying ascending and descending rules respectively. This approach allows us to handle the sorting efficiently while maintaining clarity and scalability.\n"], "scores": [], "pass_results": [false, false, false, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": false, "pass": false, "pass_num": 0, "round": 0, "examples": "\nInput\n\nThe first line contains two integers n and m (1 \u2264 n \u22c5 m \u2264 10^6).\n\nThe i-th of the next n lines contains a string s_i consisting of m uppercase Latin letters \u2014 the book title. The strings are pairwise distinct.\n\nOutput\n\nOutput n integers \u2014 the indices of the strings after they are sorted asc-desc-endingly.\n\nExample\n\nInput\n\n\n5 2\nAA\nAB\nBB\nBA\nAZ\n\n\nOutput\n\n\n5 2 1 3 4\n", "mutate_method": "expand_one2two", "parent_index": 0}
