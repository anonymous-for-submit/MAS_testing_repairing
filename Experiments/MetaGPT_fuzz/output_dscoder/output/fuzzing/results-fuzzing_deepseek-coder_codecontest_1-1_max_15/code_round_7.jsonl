{"name": "1591_A. Life of a Flower", "description": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "tags": ["implementation"], "difficulty": 7, "id": 1591, "sample_io": [{"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}], "test_list": [{"input": "1\n10\n1 1 1 1 1 1 1 1 1 1\n", "output": ["47\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n7\n3\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 0\n", "output": ["33\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 1\n", "output": ["29\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n-1\n8\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 0 1 1 1 1 1\n", "output": ["24\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["7\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n12\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n7\n8\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["7\n-1\n8\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 0 1 1\n", "output": ["20\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["12\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["-1\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["12\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 1 1 1\n1\n1\n", "output": ["3\n7\n12\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n3\n17\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n7\n8\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 0\n", "output": ["28\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n7\n17\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["2\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["7\n-1\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n3\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n1\n", "output": ["3\n7\n3\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["12\n12\n-1\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n3\n12\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 0 1\n", "output": ["15\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n1\n", "output": ["3\n-1\n17\n2\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 1 1\n", "output": ["42\n"]}, {"input": "4\n3\n0 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n-1\n3\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n2\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["3\n2\n8\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["2\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n2\n-1\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n3\n8\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["12\n-1\n17\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 0\n", "output": ["19\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n1\n", "output": ["3\n-1\n7\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n2\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n3\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 0\n1\n0\n", "output": ["-1\n7\n3\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n1\n", "output": ["-1\n-1\n7\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 1\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n12\n17\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n3\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n7\n17\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["12\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 0\n1\n1\n", "output": ["3\n-1\n12\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 1 0 1\n1\n0\n", "output": ["3\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n7\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n12\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["12\n7\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n3\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["12\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["-1\n7\n17\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["-1\n12\n-1\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 0\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 1 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 0 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 2 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n2 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 -1 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 1\n", "output": ["29\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 0\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 0 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "1\n10\n0 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 1\n", "output": ["15\n"]}, {"input": "1\n10\n1 0 0 1 0 2 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "1\n10\n0 1 0 0 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 2 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 3 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 2 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 1 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 0 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 -1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 0\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 0\n", "output": ["24\n"]}, {"input": "1\n10\n1 1 0 1 1 1 0 0 0 0\n", "output": ["-1\n"]}], "task_id": "codecontest/45", "prompt": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's life. You have to determine what happened with his flower in the end.\n\nThe flower grows as follows:\n\n  * If the flower isn't watered for two days in a row, it dies.\n  * If the flower is watered in the i-th day, it grows by 1 centimeter.\n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1.\n  * If the flower is not watered in the i-th day, it does not grow.\n\nAt the beginning of the 1-st day, the flower is 1 centimeter tall. You need to determine what its height is after n days.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "repair_prompt": ["Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's life. You have to determine what happened with his flower in the end.\n\nThe flower grows as follows:\n\n  * If the flower isn't watered for two days in a row, it dies.\n  * If the flower is watered in the i-th day, it grows by 1 centimeter.\n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1.\n  * If the flower is not watered in the i-th day, it does not grow.\n\nAt the beginning of the 1-st day, the flower is 1 centimeter tall. You need to determine what its height is after n days.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\n\ndef calculate_flower_height(days: int, watering_schedule: list) -> int:\n    \"\"\"\n    Calculate the height of the flower after a given number of days based on the watering schedule.\n\n    Args:\n        days (int): The number of days.\n        watering_schedule (list): A list of integers where 1 indicates the flower was watered on that day, and 0 indicates it was not.\n\n    Returns:\n        int: The final height of the flower, or -1 if the flower has died.\n    \"\"\"\n    # Initialize the flower's height at the beginning of the first day\n    height = 1\n    # Initialize the status of the flower (alive or dead)\n    alive = True\n\n    # Iterate over each day to update the flower's height and check if it is dead\n    for i in range(days):\n        if not alive:\n            break\n\n        if watering_schedule[i] == 1:\n            # If the flower was watered today\n            height += 1\n            if i > 0 and watering_schedule[i - 1] == 1:\n                # If the flower was also watered the previous day\n                height += 4\n        else:\n            # If the flower was not watered today\n            # Check if it was not watered for two days in a row\n            if i > 0 and watering_schedule[i - 1] == 0:\n                alive = False\n\n    # If the flower is still alive, return its final height, otherwise return -1\n    return height if alive else -1\n\n# Read input from the user\nn = int(input())\nwatering_schedule = list(map(int, input().split()))\n\n# Calculate the final height of the flower\nresult = calculate_flower_height(n, watering_schedule)\n\n# Print the result\nprint(result)\n", "from typing import List\n## main.py\n\nimport sys\n\ndef calculate_flower_height(n: int, watering_schedule: list) -> int:\n    # Initialize the flower height\n    height = 1\n    # Initialize the last watering day\n    last_watered = -1\n    \n    for i in range(n):\n        if watering_schedule[i] == 1:\n            if i - last_watered == 1:\n                height += 5\n            else:\n                height += 1\n            last_watered = i\n        \n        # Check if the flower has died\n        if i - last_watered >= 2:\n            return -1\n    \n    return height\n\n# Read input\nn = int(input().strip())\nwatering_schedule = list(map(int, input().strip().split()))\n\n# Calculate and print the result\nresult = calculate_flower_height(n, watering_schedule)\nprint(result)\n", "from typing import List\n## main.py\n\ndef flower_growth(n: int, watering_schedule: list[int]) -> int:\n    \"\"\"\n    Simulates the growth of a flower over n days based on the watering schedule.\n    \n    Args:\n        n (int): The number of days.\n        watering_schedule (list[int]): A list of integers where 1 indicates the flower was watered on that day, and 0 indicates it was not.\n        \n    Returns:\n        int: The final height of the flower after n days, or -1 if the flower dies.\n    \"\"\"\n    if n == 0 or not watering_schedule:\n        return -1\n    \n    height = 1  # The initial height of the flower\n    consecutive_dry_days = 0  # Counter for consecutive dry days\n    \n    for i in range(n):\n        if watering_schedule[i] == 1:\n            if i > 0 and watering_schedule[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n            consecutive_dry_days = 0  # Reset the counter since it was watered\n        else:\n            consecutive_dry_days += 1\n            if consecutive_dry_days == 2:\n                return -1  # The flower dies if not watered for two consecutive days\n    \n    return height\n\n# Interface for the function\nn = int(input())\nfor _ in range(n):\n    days = int(input())\n    watering_schedule = list(map(int, input().split()))\n    result = flower_growth(days, watering_schedule)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_plant_height(n: int, watering_schedule: list[int]) -> int:\n    # Initialize the plant's height\n    height = 1\n    # Initialize the status of watering for the last two days\n    last_watered = [0, 0]\n    \n    for i in range(n):\n        # Check if the plant is watered today\n        if watering_schedule[i] == 1:\n            # Check if the plant was watered yesterday\n            if last_watered[0] == 1:\n                # Grow by 5 centimeters\n                height += 5\n            else:\n                # Grow by 1 centimeter\n                height += 1\n            # Update the status of watering for the last two days\n            last_watered = [1, 0]\n        else:\n            # Update the status of watering for the last two days\n            last_watered = [0, last_watered[0]]\n            # Check if the plant has died\n            if last_watered == [0, 0]:\n                return -1\n    \n    return height\n\n# Read input\nn = int(input().strip())\nwatering_schedule = list(map(int, input().strip().split()))\n\n# Calculate and print the result\nresult = calculate_plant_height(n, watering_schedule)\nprint(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(days: int, watering_schedule: list) -> int:\n    \"\"\"\n    Calculate the height of the flower after a given number of days based on the watering schedule.\n\n    Args:\n        days (int): The number of days.\n        watering_schedule (list): A list of integers where 1 indicates the flower was watered on that day, and 0 indicates it was not.\n\n    Returns:\n        int: The final height of the flower or -1 if it dies.\n    \"\"\"\n    # Initialize the flower's height to 1 cm\n    height = 1\n    # Initialize a variable to track if the flower is dead\n    is_dead = False\n\n    # Loop through each day\n    for i in range(days):\n        # Check if the flower is dead\n        if is_dead:\n            break\n\n        # Check if the flower was watered the previous day\n        if i > 0 and watering_schedule[i - 1] == 0:\n            # Check if the flower was not watered for two days in a row\n            if watering_schedule[i] == 0:\n                is_dead = True\n        else:\n            # Increase flower height by 1 cm or 5 cm based on watering schedule\n            if watering_schedule[i] == 1:\n                height += 5 if i > 0 and watering_schedule[i - 1] == 1 else 1\n\n    # Return the final flower height or -1 if the flower is dead\n    return -1 if is_dead else height\n\n# Provide the Interface\nn = int(input())\nwatering_schedule = list(map(int, input().split()))\nresult = calculate_flower_height(n, watering_schedule)\nprint(result)\n", "from typing import List\n## main.py\n\nimport sys\n\ndef calculate_flower_height(days: int, watering_schedule: list) -> int:\n    \"\"\"\n    Calculate the height of the flower after a given number of days based on the watering schedule.\n\n    Args:\n        days (int): The number of days.\n        watering_schedule (list): A list of integers where 1 indicates the flower was watered on that day, and 0 indicates it was not.\n\n    Returns:\n        int: The final height of the flower, or -1 if it has died.\n    \"\"\"\n    # Initialize the flower height to 1 centimeter\n    height = 1\n    # Initialize the previous watering day to -1 (indicating no watering on the first day)\n    previous_watering_day = -1\n\n    for day in range(days):\n        # Check if the flower is watered today or the previous day\n        if watering_schedule[day] == 1 or (day > 0 and watering_schedule[day - 1] == 1):\n            # Update flower height based on the condition\n            if day > 0 and watering_schedule[day - 1] == 1:\n                height += 5\n            else:\n                height += 1\n        # Update previous watering day\n        previous_watering_day = day\n        # Check if the flower has not been watered for two days\n        if day > 0 and watering_schedule[day - 1] == 0 and watering_schedule[day] == 0:\n            # If not watered for two days, set flower status to dead\n            return -1\n\n    return height\n\n# Read input from the user\nn = int(input())\nwatering_schedule = list(map(int, input().split()))\n\n# Calculate and print the result\nresult = calculate_flower_height(n, watering_schedule)\nprint(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(n: int, watering_days: list[int]) -> int:\n    \"\"\"\n    Calculate the height of the flower based on the given watering days.\n\n    Args:\n        n (int): The number of days.\n        watering_days (list[int]): A list of integers where 1 indicates the flower was watered on that day, and 0 indicates it was not.\n\n    Returns:\n        int: The height of the flower after n days, or -1 if it dies.\n    \"\"\"\n    if n == 0 or not watering_days:\n        return -1\n\n    height = 1  # The initial height of the flower\n    consecutive_dry_days = 0  # Counter for consecutive dry days\n\n    for i in range(n):\n        if watering_days[i] == 1:\n            if i > 0 and watering_days[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n            consecutive_dry_days = 0  # Reset the counter since it was watered\n        else:\n            consecutive_dry_days += 1\n            if consecutive_dry_days == 2:\n                return -1  # The flower dies\n\n    return height\n\n# Interface\nn = int(input())\nwatering_days = list(map(int, input().split()))\nresult = calculate_flower_height(n, watering_days)\nprint(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(n: int, watering_days: list[int]) -> int:\n    # Initialize the flower height and death status\n    height = 1\n    dead = False\n    \n    # Iterate through each day\n    for i in range(n):\n        # Check if the flower is dead\n        if dead:\n            break\n        \n        # Check if the flower is watered on the current day\n        if watering_days[i] == 1:\n            # Check if the flower was watered the previous day\n            if i > 0 and watering_days[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n        else:\n            # Check if the flower was not watered for two consecutive days\n            if i > 0 and watering_days[i - 1] == 0:\n                dead = True\n    \n    # Return the final height or -1 if the flower is dead\n    return -1 if dead else height\n\n# Read input\nn = int(input())\nwatering_days = list(map(int, input().split()))\n\n# Calculate and print the result\nresult = calculate_flower_height(n, watering_days)\nprint(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(days: int, watering_schedule: list[int]) -> int:\n    \"\"\"\n    Calculate the height of the flower based on the given days and watering schedule.\n    \n    Args:\n        days (int): The number of days.\n        watering_schedule (list[int]): A list of integers where 1 indicates the flower was watered on that day, and 0 indicates it was not.\n    \n    Returns:\n        int: The height of the flower after the given days, or -1 if the flower dies.\n    \"\"\"\n    if days == 0 or len(watering_schedule) != days:\n        return -1\n    \n    height = 1  # The initial height of the flower\n    consecutive_days_not_watered = 0  # Counter for consecutive days not watered\n    \n    for i in range(days):\n        if watering_schedule[i] == 1:\n            if i > 0 and watering_schedule[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n            consecutive_days_not_watered = 0  # Reset the counter if watered\n        else:\n            consecutive_days_not_watered += 1\n            if consecutive_days_not_watered == 2:\n                return -1  # Flower dies if not watered for two consecutive days\n    \n    return height\n\n# Interface\nn = int(input())\nfor _ in range(n):\n    days = int(input())\n    watering_schedule = list(map(int, input().split()))\n    result = calculate_flower_height(days, watering_schedule)\n    print(result)\n", "from typing import List\nfrom typing import List\n\ndef calculate_flower_height(days: List[int], n: int) -> int:\n    \"\"\"\n    Calculate the height of the flower after n days based on the watering schedule.\n    \n    Args:\n        days (List[int]): List of integers representing the watering schedule (0 for not watered, 1 for watered).\n        n (int): Number of days.\n        \n    Returns:\n        int: The final height of the flower or -1 if it dies.\n    \"\"\"\n    height = 1  # Initial height of the flower\n    consecutive_unwatered_days = 0  # Counter for consecutive unwatered days\n    \n    for i in range(n):\n        if days[i] == 0:\n            consecutive_unwatered_days += 1\n            if consecutive_unwatered_days >= 2:\n                return -1  # Flower dies if not watered for two consecutive days\n        else:\n            consecutive_unwatered_days = 0  # Reset counter if watered\n            if i > 0 and days[i - 1] == 1:\n                height += 5  # Grow by 5 cm if watered today and yesterday\n            else:\n                height += 1  # Grow by 1 cm if watered today\n    \n    return height\n\n# Read input\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    days = list(map(int, input().split()))\n    result = calculate_flower_height(days, n)\n    print(result)\n"], "plans": ["requirement analysis:\nThe requirements specify the behavior of the flower's growth based on watering days. The product must be able to handle multiple test cases and calculate the final height of the flower or determine if it has died. The input includes the number of test cases and for each test case, the number of days and the watering schedule.\nrequirement pool:\n- Implement the logic for flower growth based on watering days.\n- Handle multiple test cases efficiently.\n- Ensure the application is user-friendly and provides clear output.\n- Include basic error handling for invalid inputs.\nWe will use Python for the implementation due to its simplicity and readability. The main challenge is to accurately simulate the growth of the flower based on the given watering schedule. We will use a simple list to keep track of the flower's growth status over the days.\n", "requirement analysis:\nThe requirements specify that the program should calculate the height of a flower based on its watering schedule over a given number of days. The program should also handle multiple test cases efficiently. The input includes the number of test cases, followed by the number of days and the watering schedule for each test case. The output should provide the final height of the flower or indicate if it has died.\nrequirement pool:\n- Implement the logic to calculate flower growth based on watering schedule.\n- Handle multiple test cases efficiently.\n- Ensure the program is user-friendly and provides clear output.\n- Implement a simple and intuitive user interface.\nTo implement the flower growth simulation, we will use a simple Python function that calculates the height of the flower based on the given watering schedule. The function will iterate through each day, checking the watering status and applying the growth rules accordingly. We will use a list to store the growth of the flower for each day, and then return the final height or indicate that the flower has died.\n", "requirement analysis:\nThe requirements specify the behavior of the flower based on watering days and the need to output the final height or indicate if the flower has died. The product must handle multiple test cases and provide clear output for each case.\nrequirement pool:\n- Implement the logic for flower growth based on watering days.\n- Handle multiple test cases efficiently.\n- Ensure the product provides clear output for each test case.\n- Develop a user-friendly interface for input and output.\nWe will implement the flower growth simulation using a simple Python function that takes into account the watering schedule for each day and calculates the final height of the flower based on the given rules. The function will handle multiple test cases efficiently and provide clear output for each case.\n", "requirement analysis:\nThe requirements for this project are clear and straightforward. The main objective is to simulate the growth of a plant based on the watering schedule provided by the user. The application should be able to handle multiple test cases and provide the correct output for each case. The user interface should be simple and intuitive, allowing users to input their watering schedule and receive the plant's height after a specified number of days.\nrequirement pool:\n- Implement the plant growth logic based on the watering schedule.\n- Handle multiple test cases and provide the correct output for each.\n- Ensure the application is user-friendly and provides clear feedback.\n- Allow users to input their watering schedule easily.\n- Provide a simple interface to display the plant's height after a specified number of days.\nWe will use a simple Python script to simulate the plant's growth based on the given watering schedule. The script will iterate through each day, checking the watering status and updating the plant's height accordingly. If the plant is not watered for two consecutive days, it will die, and the script will output -1 for that case.\n", "requirement analysis:\nThe requirements specify the need for a program that calculates the final height of a flower based on its watering schedule over a given number of days. The program must handle multiple test cases and provide clear output indicating the flower's final height or if it has died. The user interface should be straightforward, allowing users to input the necessary data easily.\nrequirement pool:\n- Implement a function to calculate the flower's growth based on the watering schedule.\n- Handle multiple test cases efficiently.\n- Ensure the program provides clear and accurate results.\n- Develop a user-friendly interface for easy input and output.\n- Include features for handling edge cases, such as the flower not being watered for two days in a row.\nWe will use Python for this task as it provides a simple and efficient way to handle the requirements. The main challenge is to calculate the flower's growth based on the watering schedule and handle edge cases where the flower does not get watered for two days in a row. We will use a list to represent the days the flower is watered and calculate the growth accordingly.\n", "requirement analysis:\nThe requirements specify the need to simulate the growth of a flower based on user input of watering days. The product must handle multiple test cases and determine the final height of the flower or if it has died. The output should clearly indicate the height or if the flower has died.\nrequirement pool:\n- Implement the logic to calculate the flower's height based on watering days.\n- Handle multiple test cases efficiently.\n- Ensure the flower dies if not watered for two consecutive days.\n- Develop a user-friendly interface for input and output.\n- Include error handling for invalid inputs.\nWe will use a simple and straightforward approach to implement the flower growth simulation. The main challenge is to handle the logic for calculating the flower's height based on the watering days and to ensure that the flower dies if not watered for two consecutive days. We will use Python, leveraging its simplicity and the availability of libraries for handling list operations.\n", "requirement analysis:\nThe requirements specify the need to simulate the growth of a flower based on user input of watering days. The product must handle multiple test cases and output the final height of the flower or indicate if it has died. The user interface should be straightforward, allowing users to input data and receive results clearly.\nrequirement pool:\n- Implement the flower growth logic based on watering days.\n- Handle multiple test cases and output results accordingly.\n- Ensure the user interface is simple and intuitive.\n- Include error handling for invalid inputs.\nTo implement the flower growth simulation, we will use a simple Python script that handles multiple test cases. The script will calculate the height of the flower based on the given watering days, considering the rules provided. We will use basic data structures like lists to manage the days the flower is watered and the final height.\n", "requirement analysis:\nThe requirements specify the need to simulate the growth of a plant over a given number of days based on user input indicating whether the plant was watered on each day. The product must handle multiple test cases and output the final height of the plant or indicate if it has died. The user interface should be simple and intuitive to facilitate easy input and clear results.\nrequirement pool:\n- Implement a function to calculate the plant's height based on user input.\n- Handle multiple test cases efficiently.\n- Provide clear output indicating the final height or if the plant has died.\n- Develop a user-friendly interface for easy input of watering days.\n- Include advanced features like growth charts and plant health status.\nTo implement the flower growth simulation, we will use a simple Python function that takes into account the rules provided for the flower's growth. The function will iterate through each day, checking the watering status and applying the corresponding growth rules. If the flower is not watered for two consecutive days, it will be considered dead, and the function will return -1. Otherwise, it will return the final height of the flower.\n", "requirement analysis:\nThe requirements specify the need to simulate the growth of a flower based on user input of watering days. The flower's growth depends on whether it was watered on consecutive days or not. The product must handle multiple test cases and output the final height of the flower or indicate if it has died. The user interface should be simple and intuitive, allowing users to input data easily.\nrequirement pool:\n- Implement the logic for flower growth based on watering days.\n- Handle multiple test cases and output the results accordingly.\n- Ensure the user interface is simple and easy to use.\n- Add functionality to handle edge cases, such as the flower dying due to lack of watering.\n- Develop a responsive and visually appealing user interface.\nTo implement the flower growth simulation, we will use a simple Python script that handles multiple test cases. The script will calculate the height of the flower based on the given days and watering schedule. We will use a straightforward approach to handle the growth logic, ensuring that the flower grows by 1 centimeter if watered on a given day and by 5 centimeters if watered on consecutive days. If the flower is not watered for two consecutive days, it will die, and the script will output -1 for that test case.\n", "requirement analysis:\nThe requirements for this project are clear and straightforward. The main objective is to simulate the growth of a plant based on the watering schedule provided by the user. The application should be able to handle multiple test cases and provide the correct output for each case. The user interface should be simple and intuitive, allowing users to input their watering schedule and view the results.\nrequirement pool:\n- Implement a function to calculate the plant's height based on the watering schedule.\n- Handle multiple test cases and provide the correct output for each.\n- Develop a user-friendly interface for inputting the watering schedule.\n- Ensure the application is responsive and works well on both desktop and mobile devices.\n- Implement a feature to display the plant's growth over time.\nTo implement the solution, we will use a simple Python script that processes the watering schedule for each test case. The script will iterate through each day, checking the watering status and calculating the plant's height accordingly. If the plant is not watered for two consecutive days, it will be considered dead, and the script will output -1 for that test case.\n"], "scores": [], "pass_results": [false, true, true, false, false, false, true, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 7, "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "mutate_method": "expand_one2two", "parent_index": 7}
