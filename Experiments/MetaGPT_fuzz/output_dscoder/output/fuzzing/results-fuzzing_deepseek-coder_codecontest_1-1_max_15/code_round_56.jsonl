{"name": "1591_A. Life of a Flower", "description": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "tags": ["implementation"], "difficulty": 7, "id": 1591, "sample_io": [{"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}], "test_list": [{"input": "1\n10\n1 1 1 1 1 1 1 1 1 1\n", "output": ["47\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n7\n3\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 0\n", "output": ["33\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 1\n", "output": ["29\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n-1\n8\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 0 1 1 1 1 1\n", "output": ["24\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["7\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n12\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n7\n8\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["7\n-1\n8\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 0 1 1\n", "output": ["20\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["12\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["-1\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["12\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 1 1 1\n1\n1\n", "output": ["3\n7\n12\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n3\n17\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n7\n8\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 0\n", "output": ["28\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n7\n17\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["2\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["7\n-1\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n3\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n1\n", "output": ["3\n7\n3\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["12\n12\n-1\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n3\n12\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 0 1\n", "output": ["15\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n1\n", "output": ["3\n-1\n17\n2\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 1 1\n", "output": ["42\n"]}, {"input": "4\n3\n0 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n-1\n3\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n2\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["3\n2\n8\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["2\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n2\n-1\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n3\n8\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["12\n-1\n17\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 0\n", "output": ["19\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n1\n", "output": ["3\n-1\n7\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n2\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n3\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 0\n1\n0\n", "output": ["-1\n7\n3\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n1\n", "output": ["-1\n-1\n7\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 1\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n12\n17\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n3\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n7\n17\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["12\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 0\n1\n1\n", "output": ["3\n-1\n12\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 1 0 1\n1\n0\n", "output": ["3\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n7\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n12\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["12\n7\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n3\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["12\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["-1\n7\n17\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["-1\n12\n-1\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 0\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 1 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 0 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 2 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n2 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 -1 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 1\n", "output": ["29\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 0\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 0 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "1\n10\n0 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 1\n", "output": ["15\n"]}, {"input": "1\n10\n1 0 0 1 0 2 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "1\n10\n0 1 0 0 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 2 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 3 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 2 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 1 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 0 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 -1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 0\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 0\n", "output": ["24\n"]}, {"input": "1\n10\n1 1 0 1 1 1 0 0 0 0\n", "output": ["-1\n"]}], "task_id": "codecontest/45", "prompt": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's life. You have to determine what happened with his flower in the end.\n\nThe flower grows as follows:\n\n  * If the flower isn't watered for two days in a row, it dies. When the flower is not nourished for consecutive days, the result is lethal. Its demise indicates a failure in maintaining the necessary routine care.\n  * If the flower is watered in the i-th day, it grows by 1 centimeter.\n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1.\n  * If the flower is not watered in the i-th day, it does not grow.\n\nAt the beginning of the 1-st day, the flower is 1 centimeter tall. You need to determine what its height is after n days. Ensure you handle edge cases appropriately in your solution.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "repair_prompt": ["Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's life. You have to determine what happened with his flower in the end.\n\nThe flower grows as follows:\n\n  * If the flower isn't watered for two days in a row, it dies. When the flower is not nourished for consecutive days, the result is lethal. Its demise indicates a failure in maintaining the necessary routine care.\n  * If the flower is watered in the i-th day, it grows by 1 centimeter.\n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1.\n  * If the flower is not watered in the i-th day, it does not grow.\n\nAt the beginning of the 1-st day, the flower is 1 centimeter tall. You need to determine what its height is after n days. Ensure you handle edge cases appropriately in your solution.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\nfrom typing import List\n\ndef calculate_flower_height(n: int, watering_days: List[int]) -> int:\n    if n == 0:\n        return -1\n    \n    height = 1  # The flower starts at 1 cm tall\n    consecutive_non_watering_days = 0  # Counter for consecutive non-watering days\n\n    for i in range(n):\n        if watering_days[i] == 0:\n            consecutive_non_watering_days += 1\n            if consecutive_non_watering_days == 2:\n                return -1  # The flower dies\n        else:\n            if i > 0 and watering_days[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n            consecutive_non_watering_days = 0  # Reset the counter\n\n    return height\n\n# Interface\nn = int(input())\nwatering_days = list(map(int, input().split()))\nresult = calculate_flower_height(n, watering_days)\nprint(result)\n", "from typing import List\n## main.py\n\ndef flower_growth(days: int, watering_pattern: list[int]) -> int:\n    # Initialize the flower's height to 1 centimeter\n    height = 1\n    # Initialize the previous day's watering status to False\n    previous_watered = False\n    \n    for i in range(days):\n        # Check if the flower is watered today\n        if watering_pattern[i] == 1:\n            # If the flower is watered today, check the previous day's watering status\n            if previous_watered:\n                # If the flower was watered the previous day, it grows by 5 centimeters\n                height += 5\n            else:\n                # If the flower was not watered the previous day, it grows by 1 centimeter\n                height += 1\n            # Update the previous day's watering status to True\n            previous_watered = True\n        else:\n            # If the flower is not watered today, set the previous day's watering status to False\n            previous_watered = False\n    \n    # Check if the flower is dead (not watered for two days in a row)\n    if not previous_watered:\n        return -1\n    else:\n        return height\n\n# Read input from the user\nn = int(input())\nwatering_pattern = list(map(int, input().split()))\n\n# Call the function and print the result\nresult = flower_growth(n, watering_pattern)\nprint(result)\n", "from typing import List\n## main.py\n\ndef flower_growth(n: int, watering_days: list[int]) -> int:\n    # Initialize the flower height and days without water\n    height = 1\n    days_without_water = 0\n    \n    for i in range(n):\n        if watering_days[i] == 1:\n            if i > 0 and watering_days[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n            days_without_water = 0\n        else:\n            days_without_water += 1\n            if days_without_water == 2:\n                return -1\n    \n    return height\n\n# Read input\nn = int(input())\nwatering_days = list(map(int, input().split()))\n\n# Call the function and print the result\nresult = flower_growth(n, watering_days)\nprint(result)\n", "from typing import List\nfrom typing import List\n\ndef calculate_flower_height(n: int, watering_days: List[int]) -> int:\n    if n == 0:\n        return -1\n    \n    height = 1  # The initial height of the flower\n    consecutive_dry_days = 0  # To keep track of consecutive dry days\n    \n    for day in watering_days:\n        if day == 1:\n            if consecutive_dry_days >= 2:\n                return -1  # Flower dies if not watered for 2 consecutive days\n            if consecutive_dry_days == 1:\n                height += 4  # Grow by 5 cm if watered the previous day\n            else:\n                height += 1  # Grow by 1 cm if not watered the previous day\n            consecutive_dry_days = 0  # Reset consecutive dry days counter\n        else:\n            consecutive_dry_days += 1  # Increment consecutive dry days counter\n    \n    return height\n\n# Interface\nn = int(input())\nfor _ in range(n):\n    days = int(input())\n    watering_days = list(map(int, input().split()))\n    result = calculate_flower_height(days, watering_days)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(n: int, watering_schedule: list[int]) -> int:\n    # Initialize the flower's height to 1 centimeter\n    height = 1\n    # Initialize a flag to track if the flower was watered the previous day\n    was_watered_yesterday = False\n    \n    for i in range(n):\n        # Check if the flower is watered today\n        if watering_schedule[i] == 1:\n            # If the flower was not watered yesterday, it grows by 1 centimeter\n            if not was_watered_yesterday:\n                height += 1\n            # If the flower was watered yesterday, it grows by 5 centimeters\n            else:\n                height += 5\n            # Update the flag to indicate that the flower was watered today\n            was_watered_yesterday = True\n        else:\n            # If the flower is not watered today, it does not grow\n            was_watered_yesterday = False\n    \n    # Check if the flower died due to lack of watering\n    if not was_watered_yesterday:\n        return -1\n    \n    return height\n\n# Read input from the user\nn = int(input())\nwatering_schedule = list(map(int, input().split()))\n\n# Calculate the final height of the flower\nresult = calculate_flower_height(n, watering_schedule)\n\n# Print the result\nprint(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(n: int, watering_schedule: list[int]) -> int:\n    # Initialize the flower height and the previous watering day\n    flower_height = 1\n    previous_watering_day = -1\n    \n    # Loop through each day\n    for i in range(n):\n        # Check if the flower is watered today or yesterday\n        if watering_schedule[i] == 1:\n            if i > 0 and watering_schedule[i - 1] == 1:\n                flower_height += 5\n            else:\n                flower_height += 1\n            previous_watering_day = i\n        else:\n            # Check if the flower hasn't been watered for two days\n            if i - previous_watering_day >= 2:\n                flower_height = -1\n                break\n    \n    return flower_height\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    # Read the number of days and the watering schedule\n    n = int(input())\n    watering_schedule = list(map(int, input().split()))\n    \n    # Calculate the flower height\n    result = calculate_flower_height(n, watering_schedule)\n    \n    # Output the result\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(days: int, watering_schedule: list) -> int:\n    # Initialize the flower height and the previous watering day\n    flower_height = 1\n    previous_watering_day = -1\n    \n    # Initialize a flag to check if the flower has died\n    flower_died = False\n    \n    # Loop through each day\n    for i in range(days):\n        # Check if the flower is watered today or the previous day\n        if watering_schedule[i] == 1 or (i > 0 and watering_schedule[i - 1] == 1):\n            # Update the flower height based on the check\n            if i - previous_watering_day >= 2:\n                flower_height += 1\n            else:\n                flower_height += 5\n            # Update the previous watering day\n            previous_watering_day = i\n        else:\n            # Check for consecutive non-watering days\n            if i > 0 and watering_schedule[i - 1] == 0:\n                flower_died = True\n                break\n    \n    # If the flower has died, return -1, otherwise return the final flower height\n    return -1 if flower_died else flower_height\n\n# Read input\nn = int(input())\nwatering_schedule = list(map(int, input().split()))\n\n# Calculate the result\nresult = calculate_flower_height(n, watering_schedule)\n\n# Print the result\nprint(result)\n", "from typing import List\n## main.py\n\ndef flower_growth(n: int, watering_days: list[int]) -> int:\n    height = 1  # The initial height of the flower\n    days_without_water = 0  # Counter for consecutive days without watering\n\n    for i in range(n):\n        if watering_days[i] == 1:\n            if i > 0 and watering_days[i - 1] == 1:\n                height += 5  # Grow by 5 cm if watered the previous day\n            else:\n                height += 1  # Grow by 1 cm if not watered the previous day\n            days_without_water = 0  # Reset the counter if watered today\n        else:\n            days_without_water += 1  # Increment the counter if not watered today\n            if days_without_water == 2:\n                return -1  # Flower dies if not watered for two consecutive days\n\n    return height\n\n# Interface\nn = int(input())\nwatering_days = list(map(int, input().split()))\nresult = flower_growth(n, watering_days)\nprint(result)\n", "from typing import List\n## main.py\n\ndef flower_growth(n: int, watering_days: list[int]) -> int:\n    # Initialize the flower's height to 1 centimeter\n    height = 1\n    # Initialize the previous watering day to -1 (indicating no previous watering)\n    previous_watered = -1\n    \n    for day in range(n):\n        # Check if the flower is watered on the current day\n        current_watered = 1 if day < len(watering_days) and watering_days[day] == 1 else 0\n        \n        # If the flower is not watered for two consecutive days, it dies\n        if current_watered == 0 and previous_watered == 0:\n            return -1\n        \n        # Update the flower's height based on the watering schedule\n        if current_watered == 1 and previous_watered == 1:\n            height += 5\n        else:\n            height += 1\n        \n        # Update the previous watering day\n        previous_watered = current_watered\n    \n    return height\n\n# Read input from the user\nn = int(input())\nwatering_days = list(map(int, input().split()))\n\n# Call the function and print the result\nresult = flower_growth(n, watering_days)\nprint(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(n: int, watering_schedule: list[int]) -> int:\n    \"\"\"\n    Calculate the height of the flower based on the watering schedule.\n\n    Args:\n        n (int): The number of days.\n        watering_schedule (list[int]): A list of integers where 1 indicates the flower was watered on that day, and 0 indicates it was not.\n\n    Returns:\n        int: The height of the flower after n days, or -1 if the flower dies.\n    \"\"\"\n    if n == 0 or watering_schedule is None:\n        return -1\n\n    height = 1  # The initial height of the flower\n    consecutive_days_not_watered = 0  # Counter for consecutive days not watered\n\n    for i in range(n):\n        if watering_schedule[i] == 0:\n            consecutive_days_not_watered += 1\n            if consecutive_days_not_watered >= 2:\n                return -1  # The flower dies if not watered for 2 consecutive days\n        else:\n            consecutive_days_not_watered = 0  # Reset the counter if watered\n            height += 5 if i > 0 and watering_schedule[i - 1] == 1 else 1\n\n    return height\n\n# Read input from stdin\nn = int(input())\nwatering_schedule = list(map(int, input().split()))\n\n# Calculate and print the result\nresult = calculate_flower_height(n, watering_schedule)\nprint(result)\n"], "plans": ["requirement analysis:\nThe requirements involve simulating the growth of a plant based on a sequence of watering days over a given number of days. The solution must handle edge cases such as consecutive non-watering days that lead to the plant's death. The output should be a single integer representing the final height of the plant or -1 if it has died.\nrequirement pool:\n- Implement the logic to determine the plant's height based on watering days.\n- Handle the edge case where the plant dies due to consecutive non-watering days.\n- Ensure the solution is efficient and can handle up to 100 test cases.\n- Provide a user-friendly interface for input and output.\n- Include optional features like reminders for watering the plant.\nWe will use a simple and efficient approach to simulate the plant's growth based on the given watering days. The main challenge is to handle the edge case where the plant dies due to consecutive non-watering days. We will use a list to keep track of the plant's growth status and iterate through the days to update the growth accordingly.\n", "requirement analysis:\nThe requirements specify the behavior of the flower's growth based on watering days. The product must handle multiple test cases, each with a different number of days and watering patterns. The output should indicate the final height of the flower or -1 if it dies due to lack of watering. The product should be user-friendly and handle edge cases effectively.\nrequirement pool:\n- Implement the logic for flower growth based on watering days.\n- Handle multiple test cases with varying numbers of days and watering patterns.\n- Provide a clear output indicating the final height of the flower or -1 if it dies.\n- Implement a user-friendly interface for easy input and output.\n- Include features to handle edge cases, such as not watering for two days in a row.\nTo implement the flower growth simulation, we will use a simple Python function that takes into account the number of days and the watering pattern. The function will iterate through each day, checking the watering status and updating the flower's height accordingly. If the flower is not watered for two consecutive days, it will die, and the function will return -1. Otherwise, it will return the final height of the flower.\n", "requirement analysis:\nThe requirements specify the behavior of the flower based on watering days and the need to handle edge cases. The input includes multiple test cases, and each case has a specific number of days and a sequence of watering days. The output should provide the final height of the flower or indicate if it has died.\nrequirement pool:\n- Implement the logic for flower growth based on watering days.\n- Handle edge cases where the flower doesn't get watered for two consecutive days.\n- Ensure the solution can process multiple test cases efficiently.\n- Provide a clear and user-friendly output format for each test case.\n- Optimize the code to handle up to 100 test cases within reasonable time limits.\nWe will use a simple Python function to simulate the growth of Petya's flower based on the given watering schedule. The function will iterate through each day, checking the watering history to determine the flower's growth. If the flower is not watered for two consecutive days, it will die, and the function will return -1.\n", "requirement analysis:\nThe requirements specify the behavior of the flower's growth based on watering days. The product must handle multiple test cases and provide the final height of the flower or indicate if it has died. The solution should be user-friendly and handle edge cases effectively.\nrequirement pool:\n- Implement the logic for flower growth based on watering days.\n- Handle multiple test cases efficiently.\n- Provide clear output for each test case, indicating the final height or if the flower has died.\n- Add reminders or notifications for users to water their flowers.\n- Include advanced features like historical data tracking and plant diagnosis.\nWe will use a simple Python script to simulate the growth of Petya's flower based on the given watering days. The script will handle multiple test cases efficiently and provide clear output for each test case.\n", "requirement analysis:\nThe requirements specify a simple simulation of a plant's growth based on a user's watering schedule. The product must handle edge cases such as consecutive days without watering and determine the final height of the plant. The output should indicate if the plant has died due to lack of watering.\nrequirement pool:\n- Implement a function to calculate the plant's height based on the watering schedule.\n- Handle the case where the plant does not grow for consecutive days.\n- Provide an output indicating the final height of the plant or if it has died.\n- Allow the user to input the number of test cases and their respective watering schedules.\n- Implement a user interface to display the results of each test case.\nWe will use a simple Python function to simulate the growth of Petya's flower based on the given watering schedule. The function will iterate through each day, checking the watering status and updating the flower's height accordingly. If the flower is not watered for two consecutive days, it will be considered dead, and the function will return -1.\n", "requirement analysis:\nThe requirements specify the need to simulate the growth of a flower based on its watering schedule over a given number of days. The solution should handle edge cases such as consecutive days without watering leading to the flower's death. The output should clearly indicate the final height of the flower or indicate if it has died.\nrequirement pool:\n- Implement the logic for flower growth based on watering schedule.\n- Handle edge cases where the flower does not grow for two consecutive days.\n- Ensure the output is either the final height of the flower or -1 if it has died.\n- Allow the user to input multiple test cases to check the growth of multiple flowers.\n- Provide a user-friendly interface for easy input and output of results.\nWe will use a simple Python script to simulate the growth of Petya's flower based on the given watering schedule. The script will handle each test case separately, checking the flower's growth day by day and determining if it dies due to lack of watering.\n", "requirement analysis:\nThe requirements for this project are clear and focused on creating a functional application that simulates the growth of a plant based on user input. The application needs to handle multiple test cases, each with a different number of days and watering schedules. The output should indicate the final height of the plant or if it has died due to lack of care.\nrequirement pool:\n- Implement a function to calculate the plant's height based on the watering schedule.\n- Handle edge cases where the plant does not get watered for two consecutive days.\n- Ensure the application can process multiple test cases efficiently.\n- Provide a user-friendly interface for inputting the number of days and the watering schedule.\n- Implement a feature to display the final height of the plant or indicate if it has died.\nWe will use Python for the implementation as it provides a simple and efficient way to handle the requirements. The main challenge is to simulate the plant's growth based on the watering schedule and check if it dies due to lack of care. We will use a list to keep track of the plant's growth and check for consecutive days without watering.\n", "requirement analysis:\nThe requirements specify the behavior of the flower based on watering days and the need to handle edge cases such as consecutive non-watering days that lead to the flower's death. The input includes multiple test cases, and the output should provide the final height of the flower or indicate if it has died.\nrequirement pool:\n- Implement the logic for flower growth based on watering days.\n- Handle edge cases where the flower dies due to non-watering for two consecutive days.\n- Ensure the solution can handle multiple test cases efficiently.\n- Provide a user-friendly output format for each test case.\n- Include a feature to display the final height of the flower or indicate if it has died.\nWe will use a simple Python function to simulate the growth of Petya's flower based on the given watering days. The function will iterate through each day, checking the watering status and updating the flower's height accordingly. If the flower is not watered for two consecutive days, it will be considered dead, and the function will return -1.\n", "requirement analysis:\nThe requirements specify the need to simulate the growth of a flower based on its watering schedule over a given number of days. The solution should handle edge cases such as consecutive days without watering that lead to the flower's death. The output should clearly indicate the final height of the flower or indicate if it has died.\nrequirement pool:\n- Implement the logic for flower growth based on watering days.\n- Handle edge cases where the flower does not grow for two consecutive days.\n- Ensure the output is either the final height of the flower or -1 if it has died.\n- Provide a user-friendly interface for inputting the watering schedule.\n- Optimize the algorithm for efficiency, especially for large values of n.\nWe will use a simple Python function to simulate the growth of Petya's flower based on the given watering schedule. The function will iterate through each day, checking the watering status and updating the flower's height accordingly. If the flower is not watered for two consecutive days, it will die, and the function will return -1.\n", "requirement analysis:\nThe requirements for this project are clear and straightforward. The main objective is to simulate the growth of a plant based on the user's watering schedule over a given number of days. The product should handle edge cases such as consecutive days without watering, which would lead to the plant's death. The output should be a single integer representing the plant's height or -1 if the plant dies.\nrequirement pool:\n- Implement the plant growth logic based on watering schedule.\n- Handle edge cases where the plant does not get watered for consecutive days.\n- Output the final height of the plant or -1 if it dies.\n- Allow user to input the number of test cases and their respective watering schedules.\n- Provide a user-friendly interface for easy input and output.\nWe will use a simple Python script to simulate the growth of a plant based on the user's watering schedule. The script will handle edge cases where the plant does not get watered for consecutive days, which would lead to the plant's death. The output will be a single integer representing the plant's height or -1 if the plant dies.\n"], "scores": [], "pass_results": [false, false, false, false, false, false, false, false, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 56, "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "mutate_method": "expand_one2two", "parent_index": 45}
