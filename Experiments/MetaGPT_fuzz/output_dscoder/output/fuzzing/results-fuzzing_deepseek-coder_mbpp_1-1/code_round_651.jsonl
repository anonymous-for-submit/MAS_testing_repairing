{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 724, "prompt": "Write a function that receives base and power as inputs to calculate the sum of all digits of the base raised to the specified power. The function should take two arguments. These arguments are the base and the power.", "code": "def power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])", "test_imports": [], "test_list": ["assert power_base_sum(2,100)==115", "assert power_base_sum(8,10)==37", "assert power_base_sum(8,15)==62", "assert power_base_sum(3, 103) == 225", "assert power_base_sum(6, 101) == 351", "assert power_base_sum(2, 96) == 127", "assert power_base_sum(5, 100) == 283", "assert power_base_sum(5, 103) == 338", "assert power_base_sum(2, 103) == 110", "assert power_base_sum(7, 95) == 364", "assert power_base_sum(6, 105) == 369", "assert power_base_sum(3, 103) == 225", "assert power_base_sum(4, 99) == 262", "assert power_base_sum(2, 97) == 137", "assert power_base_sum(5, 100) == 283", "assert power_base_sum(2, 96) == 127", "assert power_base_sum(6, 101) == 351", "assert power_base_sum(2, 98) == 112", "assert power_base_sum(2, 104) == 121", "assert power_base_sum(4, 103) == 283", "assert power_base_sum(3, 103) == 225", "assert power_base_sum(6, 101) == 351", "assert power_base_sum(2, 102) == 118", "assert power_base_sum(3, 100) == 153", "assert power_base_sum(4, 102) == 253", "assert power_base_sum(1, 100) == 1", "assert power_base_sum(1, 100) == 1", "assert power_base_sum(2, 99) == 107", "assert power_base_sum(2, 96) == 127", "assert power_base_sum(4, 98) == 241", "assert power_base_sum(5, 105) == 350", "assert power_base_sum(6, 103) == 306", "assert power_base_sum(2, 98) == 112", "assert power_base_sum(1, 96) == 1", "assert power_base_sum(1, 103) == 1", "assert power_base_sum(6, 100) == 342", "assert power_base_sum(10, 5) == 1", "assert power_base_sum(3, 14) == 45", "assert power_base_sum(11, 10) == 43", "assert power_base_sum(4, 10) == 31", "assert power_base_sum(4, 7) == 22", "assert power_base_sum(4, 14) == 43", "assert power_base_sum(3, 15) == 36", "assert power_base_sum(4, 14) == 43", "assert power_base_sum(7, 15) == 64", "assert power_base_sum(13, 11) == 52", "assert power_base_sum(7, 9) == 28", "assert power_base_sum(9, 15) == 63", "assert power_base_sum(8, 7) == 26", "assert power_base_sum(5, 12) == 28", "assert power_base_sum(8, 10) == 37", "assert power_base_sum(5, 9) == 26", "assert power_base_sum(7, 7) == 25", "assert power_base_sum(9, 7) == 45", "assert power_base_sum(12, 6) == 45", "assert power_base_sum(11, 6) == 28", "assert power_base_sum(3, 14) == 45", "assert power_base_sum(5, 10) == 40", "assert power_base_sum(5, 6) == 19", "assert power_base_sum(9, 11) == 45", "assert power_base_sum(9, 15) == 63", "assert power_base_sum(4, 15) == 37", "assert power_base_sum(11, 14) == 76", "assert power_base_sum(13, 5) == 25", "assert power_base_sum(3, 14) == 45", "assert power_base_sum(6, 12) == 45", "assert power_base_sum(8, 8) == 37", "assert power_base_sum(10, 10) == 1", "assert power_base_sum(10, 10) == 1", "assert power_base_sum(3, 10) == 27", "assert power_base_sum(9, 19) == 90", "assert power_base_sum(3, 12) == 18", "assert power_base_sum(10, 13) == 1", "assert power_base_sum(12, 17) == 72", "assert power_base_sum(8, 16) == 73", "assert power_base_sum(3, 15) == 36", "assert power_base_sum(11, 19) == 83", "assert power_base_sum(10, 15) == 1", "assert power_base_sum(3, 19) == 36", "assert power_base_sum(9, 19) == 90", "assert power_base_sum(8, 14) == 46", "assert power_base_sum(11, 10) == 43", "assert power_base_sum(8, 11) == 62", "assert power_base_sum(11, 16) == 88", "assert power_base_sum(11, 19) == 83", "assert power_base_sum(11, 13) == 47", "assert power_base_sum(9, 16) == 63", "assert power_base_sum(9, 17) == 99", "assert power_base_sum(12, 18) == 81", "assert power_base_sum(7, 15) == 64", "assert power_base_sum(5, 14) == 34", "assert power_base_sum(12, 15) == 72", "assert power_base_sum(4, 10) == 31", "assert power_base_sum(5, 12) == 28", "assert power_base_sum(7, 13) == 52", "assert power_base_sum(4, 10) == 31", "assert power_base_sum(13, 16) == 85", "assert power_base_sum(13, 18) == 91", "assert power_base_sum(7, 16) == 52", "assert power_base_sum(8, 17) == 80", "assert power_base_sum(5, 12) == 28", "assert power_base_sum(9, 17) == 99"], "entry_point": "power_base_sum", "repair_prompt": ["Write a function power_base_sum that receives base and power as inputs to calculate the sum of all digits of the base raised to the specified power. The function should take two arguments. These arguments are the base and the power.\npower_base_sum(2,100)==115\n"], "completions": ["from typing import List\n## main.py\n\ndef power_base_sum(base: int, power: int) -> int:\n    \"\"\"\n    Calculates the sum of all digits of the base raised to the specified power.\n\n    Args:\n        base (int): The base number.\n        power (int): The power to which the base is raised.\n\n    Returns:\n        int: The sum of all digits of the result.\n    \"\"\"\n    # Compute the base raised to the power\n    result = base ** power\n    \n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n    \n    # Sum up all the digits\n    digit_sum = sum(int(digit) for digit in result_str)\n    \n    return digit_sum\n", "from typing import List\n## main.py\n\ndef power_base_sum(base: int, power: int) -> int:\n    \"\"\"\n    Computes the sum of the digits of the base raised to the power.\n\n    Args:\n        base (int): The base number.\n        power (int): The power to which the base is raised.\n\n    Returns:\n        int: The sum of the digits of the result.\n    \"\"\"\n    # Compute the result of raising the base to the power\n    result = base ** power\n    \n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n    \n    # Sum the digits of the result\n    digit_sum = sum(int(digit) for digit in result_str)\n    \n    return digit_sum\n", "from typing import List\n## main.py\n\nimport math\n\ndef power_base_sum(base: int, power: int) -> int:\n    \"\"\"\n    Calculates the sum of the digits of the base raised to the power.\n\n    Args:\n        base (int): The base number.\n        power (int): The power to which the base is raised.\n\n    Returns:\n        int: The sum of the digits of the result.\n    \"\"\"\n    # Calculate the base raised to the power\n    result = pow(base, power)\n    \n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n    \n    # Sum the digits\n    digit_sum = sum(int(digit) for digit in result_str)\n    \n    return digit_sum\n", "from typing import List\n## main.py\n\ndef power_base_sum(base: int, power: int) -> int:\n    \"\"\"\n    Calculates the sum of the digits of the base raised to the power.\n    \n    Args:\n        base (int): The base number.\n        power (int): The power to which the base is raised.\n        \n    Returns:\n        int: The sum of the digits of the result.\n    \"\"\"\n    result = pow(base, power)\n    return sum(int(digit) for digit in str(result))\n", "from typing import List\n## main.py\n\nimport math\n\ndef power_base_sum(base: int, power: int) -> int:\n    \"\"\"\n    Calculates the sum of the digits of the base raised to the power.\n\n    Args:\n        base (int): The base number.\n        power (int): The power to which the base is raised.\n\n    Returns:\n        int: The sum of the digits of the result.\n    \"\"\"\n    # Calculate the result of base raised to the power\n    result = base ** power\n    \n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n    \n    # Sum the digits by converting each character back to an integer\n    digit_sum = sum(int(digit) for digit in result_str)\n    \n    return digit_sum\n", "from typing import List\n## main.py\n\ndef power_base_sum(base: int, power: int) -> int:\n    \"\"\"\n    Calculates the sum of all digits of the base raised to the specified power.\n\n    Args:\n        base (int): The base number.\n        power (int): The power to which the base is raised.\n\n    Returns:\n        int: The sum of all digits of the result.\n    \"\"\"\n    # Calculate the result of base raised to power\n    result = base ** power\n    \n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n    \n    # Initialize the sum of digits\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the result\n    for char in result_str:\n        # Convert each character back to an integer and add it to the sum\n        digit_sum += int(char)\n    \n    # Return the sum of the digits\n    return digit_sum\n", "from typing import List\n## main.py\n\ndef power_base_sum(base: int, power: int) -> int:\n    \"\"\"\n    Calculates the sum of the digits of a number raised to a specified power.\n\n    Args:\n        base (int): The base number.\n        power (int): The power to which the base number is raised.\n\n    Returns:\n        int: The sum of the digits of the result of base raised to the power.\n    \"\"\"\n    result = base ** power\n    result_str = str(result)\n    digit_sum = sum(int(digit) for digit in result_str)\n    return digit_sum\n", "from typing import List\n## main.py\n\ndef power_base_sum(base: int, power: int) -> int:\n    \"\"\"\n    Calculates the sum of the digits of a number obtained by raising a base to a given power.\n\n    Args:\n        base (int): The base number.\n        power (int): The exponent to which the base is raised.\n\n    Returns:\n        int: The sum of the digits of the result of base raised to power.\n    \"\"\"\n    # Compute the power of the base\n    result = base ** power\n    \n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n    \n    # Sum the digits\n    digit_sum = sum(int(digit) for digit in result_str)\n    \n    return digit_sum\n\n# Example usage:\n# print(power_base_sum(2, 1000))  # Should print the sum of the digits of 2^1000\n", "from typing import List\n## main.py\n\ndef power_base_sum(base: int, power: int) -> int:\n    \"\"\"\n    Calculates the sum of the digits of the base raised to the power.\n\n    Args:\n        base (int): The base number.\n        power (int): The power to which the base is raised.\n\n    Returns:\n        int: The sum of the digits of the result.\n    \"\"\"\n    # Calculate the base raised to the power\n    result = pow(base, power)\n    \n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n    \n    # Sum the digits\n    digit_sum = sum(int(digit) for digit in result_str)\n    \n    return digit_sum\n", "from typing import List\n## main.py\n\ndef power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum(int(digit) for digit in str(result))\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that calculates the sum of the digits of a number raised to a specified power. This involves handling large numbers and performing arithmetic operations efficiently. The function should be robust and able to handle various inputs without errors. Clarifications are needed on the expected performance benchmarks and any specific edge cases that need to be handled.\nrequirement pool:\n- Implement the function to accurately calculate the sum of digits of a number raised to a power.\n- Ensure the function can handle large inputs efficiently.\n- Develop a user-friendly interface for easy integration.\n- Test the function for accuracy and performance.\n- Document the function and provide examples of usage.\nTo implement the function `power_base_sum` that calculates the sum of all digits of the base raised to the specified power, we will use Python's built-in capabilities for handling large integers. This approach leverages Python's ability to manage arbitrary-precision arithmetic, ensuring that the function can handle very large numbers without overflow. The function will first compute the power of the base, then convert the result to a string to iterate over each digit, converting each digit back to an integer to sum them up.\n", "requirement analysis:\nThe requirement is to create a function that calculates the sum of the digits of a number raised to a specified power. This involves handling large numbers and summing their digits. The function should be efficient and able to handle various inputs without performance issues. Clarifications are needed on the expected behavior for edge cases, such as negative bases or non-integer powers, and whether the function should handle complex numbers.\nrequirement pool:\n- The main code should accurately calculate the sum of digits of a number raised to a power.\n- The function should be efficient and handle large inputs without performance issues.\n- The function should be easy to integrate into other applications.\n- The function should handle edge cases such as negative bases or non-integer powers.\n- The function should be able to handle complex numbers if applicable.\nTo implement the function `power_base_sum` efficiently, we will use Python's built-in capabilities to handle large integers. The function will first compute the result of raising the base to the power, then convert this result to a string to iterate over each digit, converting each digit back to an integer to sum them up. This approach ensures that the function can handle very large numbers without running into performance issues.\n", "requirement analysis:\nThe function needs to handle the calculation of a large number raised to a power and then sum its digits. This involves using Python's built-in capabilities for handling large numbers and ensuring the function is efficient. The function should be able to handle inputs where the power results in a very large number, and the sum of its digits should be computed accurately.\nrequirement pool:\n- Implement the function to calculate the sum of digits of a number raised to a power.\n- Ensure the function can handle large numbers efficiently.\n- Include error handling for invalid inputs.\n- Optimize the function for performance on large inputs.\n- Provide documentation and examples for user guidance.\nTo implement the function `power_base_sum` efficiently, we will utilize Python's built-in capabilities for handling large numbers. Specifically, we will use the `pow` function to compute the base raised to the power, and then convert the result to a string to iterate over each digit, summing them up. This approach ensures that we can handle large powers without running into performance issues.\n", "requirement analysis:\nThe function 'power_base_sum' needs to handle the calculation of a base raised to a power and then sum the digits of the resulting number. This involves using Python's built-in arithmetic operations and possibly converting numbers to strings to iterate over digits. The function should be robust enough to handle large numbers efficiently.\nrequirement pool:\n- Implement the function to calculate the power of a base and sum its digits.\n- Ensure the function can handle large numbers efficiently.\n- Add error handling for invalid inputs such as negative bases or non-integer powers.\n- Optimize the function for performance, especially for large inputs.\n- Include documentation and examples to guide users on how to use the function correctly.\nTo implement the 'power_base_sum' function efficiently, we will use Python's built-in capabilities for handling large integers. The function will first calculate the result of raising the base to the power using the `pow` function, which is optimized for handling large numbers. After obtaining the result, we will convert it to a string to iterate over each digit, summing them up. This approach ensures that the function can handle large inputs efficiently without the need for external libraries.\n", "requirement analysis:\nThe requirement is to create a function that calculates the sum of the digits of a number raised to a specified power. This involves handling large numbers and summing their digits. The function should be efficient and able to handle various base and power combinations.\nrequirement pool:\n- Implement the function to calculate the sum of digits of a number raised to a power.\n- Ensure the function can handle large numbers efficiently.\n- Include error handling for invalid inputs.\n- Provide clear documentation and examples for user guidance.\n- Optimize the function for performance, especially with large inputs.\nTo implement the function power_base_sum, we will use Python's built-in capabilities to handle large integers and the math module for mathematical operations. The function will first calculate the result of raising the base to the power, then convert this result to a string to iterate over each digit, converting each digit back to an integer to sum them up. This approach ensures efficiency and accuracy even for very large numbers.\n", "requirement analysis:\nThe function needs to handle large numbers efficiently, which requires a good understanding of Python's handling of large integers. The user interface should be simple and intuitive, allowing users to input base and power values easily and view the result.\nrequirement pool:\n- Implement the function to calculate the sum of digits of a number raised to a power.\n- Ensure the function can handle large numbers without performance issues.\n- Develop a user-friendly interface for easy interaction with the function.\n- Test the function with various edge cases to ensure robustness.\n- Optimize the function for efficiency and scalability.\nTo implement the function `power_base_sum` that calculates the sum of all digits of the base raised to the specified power, we will leverage Python's built-in capabilities for handling large integers. This will allow us to efficiently compute the result even for very large powers. The function will take two arguments: `base` and `power`. The function will compute `base` raised to `power`, convert the result to a string to iterate over each digit, convert each digit back to an integer, and sum these integers to produce the final result.\n", "requirement analysis:\nThe requirement is to create a function that calculates the sum of the digits of a number raised to a specified power. This involves handling large numbers and performing arithmetic operations efficiently. The function should be robust and able to handle various inputs without crashing or producing incorrect results. Clarifications are needed on the expected behavior for edge cases, such as negative bases or non-integer powers, and the need for optimization for large datasets.\nrequirement pool:\n- The main code should accurately calculate the sum of digits of a number raised to a power.\n- The function should be optimized for handling large inputs efficiently.\n- The function should handle edge cases such as negative bases or non-integer powers gracefully.\n- The user interface should be simple and intuitive for easy integration.\n- The product should include comprehensive documentation and examples for user guidance.\nTo implement the function `power_base_sum` that calculates the sum of the digits of a number raised to a specified power, we will use Python's built-in capabilities for handling large integers. This approach leverages Python's ability to manage arbitrary-precision arithmetic, ensuring that the function can handle large inputs without performance issues. The function will convert the result of the power operation to a string to easily iterate over each digit, summing them up to produce the final result.\n", "requirement analysis:\nThe requirement is to create a function that calculates the sum of the digits of a number obtained by raising a base to a given power. This involves handling large numbers and summing their digits, which can be computationally intensive. The function should be robust and efficient, capable of handling inputs that are beyond the range of typical desktop calculators.\nrequirement pool:\n- Implement the function to accurately calculate the power of a base and sum its digits.\n- Ensure the function can handle large inputs efficiently.\n- Develop a user-friendly interface for easy interaction.\n- Test the function for accuracy and performance across a wide range of inputs.\n- Optimize the code for better performance and scalability.\nTo implement the function power_base_sum that calculates the sum of the digits of a number obtained by raising a base to a given power, we will use Python's built-in capabilities to handle large integers. This approach leverages Python's ability to manage arbitrary-precision integers, ensuring that the function can handle very large powers without overflow. The function will first compute the power of the base, then convert the result to a string to iterate over each digit, summing them up. This method ensures both accuracy and efficiency in handling large numbers.\n", "requirement analysis:\nThe function needs to handle the calculation of a large number raised to a power and then sum its digits. This involves using Python's built-in capabilities for handling large numbers and ensuring the function is efficient. The function should be able to handle inputs where the power results in a very large number, and the sum of its digits should be computed accurately.\nrequirement pool:\n- Implement the function to calculate the sum of digits of a number raised to a specified power.\n- Ensure the function can handle large numbers efficiently.\n- Include error handling for invalid inputs like negative powers or non-integer bases.\n- Optimize the function for performance, especially for large inputs.\n- Provide clear documentation and examples of usage.\nTo implement the function `power_base_sum` efficiently, we will use Python's built-in capabilities for handling large numbers. Specifically, we will use the `pow` function to calculate the base raised to the power, and then convert the result to a string to iterate over each digit, summing them up. This approach ensures that we can handle very large numbers without running into performance issues.\n", "requirement analysis:\nThe function needs to handle the calculation of a large number raised to a power and then sum its digits. This involves using Python's built-in capabilities for handling large integers and ensuring the function is efficient. The user should be able to input a base and a power, and get the result quickly and accurately.\nrequirement pool:\n- Implement the function to calculate the sum of digits of a number raised to a specified power.\n- Ensure the function can handle large numbers efficiently.\n- Develop a user interface for easy input and display of results.\n- Include error handling for invalid inputs.\n- Optimize the function for performance, especially with large inputs.\nTo implement the function power_base_sum, we will use Python's built-in capabilities for handling large integers. The function will take two arguments: base and power. It will calculate the base raised to the power and then sum all the digits of the resulting number. Python's int type can handle very large numbers, which is suitable for this requirement.\n"], "test": ["def check(power_base_sum):\n\tassert power_base_sum(2,100)==115", "def check(power_base_sum):\n\tassert power_base_sum(8,10)==37", "def check(power_base_sum):\n\tassert power_base_sum(8,15)==62", "def check(power_base_sum):\n\tassert power_base_sum(3, 103) == 225", "def check(power_base_sum):\n\tassert power_base_sum(6, 101) == 351", "def check(power_base_sum):\n\tassert power_base_sum(2, 96) == 127", "def check(power_base_sum):\n\tassert power_base_sum(5, 100) == 283", "def check(power_base_sum):\n\tassert power_base_sum(5, 103) == 338", "def check(power_base_sum):\n\tassert power_base_sum(2, 103) == 110", "def check(power_base_sum):\n\tassert power_base_sum(7, 95) == 364", "def check(power_base_sum):\n\tassert power_base_sum(6, 105) == 369", "def check(power_base_sum):\n\tassert power_base_sum(3, 103) == 225", "def check(power_base_sum):\n\tassert power_base_sum(4, 99) == 262", "def check(power_base_sum):\n\tassert power_base_sum(2, 97) == 137", "def check(power_base_sum):\n\tassert power_base_sum(5, 100) == 283", "def check(power_base_sum):\n\tassert power_base_sum(2, 96) == 127", "def check(power_base_sum):\n\tassert power_base_sum(6, 101) == 351", "def check(power_base_sum):\n\tassert power_base_sum(2, 98) == 112", "def check(power_base_sum):\n\tassert power_base_sum(2, 104) == 121", "def check(power_base_sum):\n\tassert power_base_sum(4, 103) == 283", "def check(power_base_sum):\n\tassert power_base_sum(3, 103) == 225", "def check(power_base_sum):\n\tassert power_base_sum(6, 101) == 351", "def check(power_base_sum):\n\tassert power_base_sum(2, 102) == 118", "def check(power_base_sum):\n\tassert power_base_sum(3, 100) == 153", "def check(power_base_sum):\n\tassert power_base_sum(4, 102) == 253", "def check(power_base_sum):\n\tassert power_base_sum(1, 100) == 1", "def check(power_base_sum):\n\tassert power_base_sum(1, 100) == 1", "def check(power_base_sum):\n\tassert power_base_sum(2, 99) == 107", "def check(power_base_sum):\n\tassert power_base_sum(2, 96) == 127", "def check(power_base_sum):\n\tassert power_base_sum(4, 98) == 241", "def check(power_base_sum):\n\tassert power_base_sum(5, 105) == 350", "def check(power_base_sum):\n\tassert power_base_sum(6, 103) == 306", "def check(power_base_sum):\n\tassert power_base_sum(2, 98) == 112", "def check(power_base_sum):\n\tassert power_base_sum(1, 96) == 1", "def check(power_base_sum):\n\tassert power_base_sum(1, 103) == 1", "def check(power_base_sum):\n\tassert power_base_sum(6, 100) == 342", "def check(power_base_sum):\n\tassert power_base_sum(10, 5) == 1", "def check(power_base_sum):\n\tassert power_base_sum(3, 14) == 45", "def check(power_base_sum):\n\tassert power_base_sum(11, 10) == 43", "def check(power_base_sum):\n\tassert power_base_sum(4, 10) == 31", "def check(power_base_sum):\n\tassert power_base_sum(4, 7) == 22", "def check(power_base_sum):\n\tassert power_base_sum(4, 14) == 43", "def check(power_base_sum):\n\tassert power_base_sum(3, 15) == 36", "def check(power_base_sum):\n\tassert power_base_sum(4, 14) == 43", "def check(power_base_sum):\n\tassert power_base_sum(7, 15) == 64", "def check(power_base_sum):\n\tassert power_base_sum(13, 11) == 52", "def check(power_base_sum):\n\tassert power_base_sum(7, 9) == 28", "def check(power_base_sum):\n\tassert power_base_sum(9, 15) == 63", "def check(power_base_sum):\n\tassert power_base_sum(8, 7) == 26", "def check(power_base_sum):\n\tassert power_base_sum(5, 12) == 28", "def check(power_base_sum):\n\tassert power_base_sum(8, 10) == 37", "def check(power_base_sum):\n\tassert power_base_sum(5, 9) == 26", "def check(power_base_sum):\n\tassert power_base_sum(7, 7) == 25", "def check(power_base_sum):\n\tassert power_base_sum(9, 7) == 45", "def check(power_base_sum):\n\tassert power_base_sum(12, 6) == 45", "def check(power_base_sum):\n\tassert power_base_sum(11, 6) == 28", "def check(power_base_sum):\n\tassert power_base_sum(3, 14) == 45", "def check(power_base_sum):\n\tassert power_base_sum(5, 10) == 40", "def check(power_base_sum):\n\tassert power_base_sum(5, 6) == 19", "def check(power_base_sum):\n\tassert power_base_sum(9, 11) == 45", "def check(power_base_sum):\n\tassert power_base_sum(9, 15) == 63", "def check(power_base_sum):\n\tassert power_base_sum(4, 15) == 37", "def check(power_base_sum):\n\tassert power_base_sum(11, 14) == 76", "def check(power_base_sum):\n\tassert power_base_sum(13, 5) == 25", "def check(power_base_sum):\n\tassert power_base_sum(3, 14) == 45", "def check(power_base_sum):\n\tassert power_base_sum(6, 12) == 45", "def check(power_base_sum):\n\tassert power_base_sum(8, 8) == 37", "def check(power_base_sum):\n\tassert power_base_sum(10, 10) == 1", "def check(power_base_sum):\n\tassert power_base_sum(10, 10) == 1", "def check(power_base_sum):\n\tassert power_base_sum(3, 10) == 27", "def check(power_base_sum):\n\tassert power_base_sum(9, 19) == 90", "def check(power_base_sum):\n\tassert power_base_sum(3, 12) == 18", "def check(power_base_sum):\n\tassert power_base_sum(10, 13) == 1", "def check(power_base_sum):\n\tassert power_base_sum(12, 17) == 72", "def check(power_base_sum):\n\tassert power_base_sum(8, 16) == 73", "def check(power_base_sum):\n\tassert power_base_sum(3, 15) == 36", "def check(power_base_sum):\n\tassert power_base_sum(11, 19) == 83", "def check(power_base_sum):\n\tassert power_base_sum(10, 15) == 1", "def check(power_base_sum):\n\tassert power_base_sum(3, 19) == 36", "def check(power_base_sum):\n\tassert power_base_sum(9, 19) == 90", "def check(power_base_sum):\n\tassert power_base_sum(8, 14) == 46", "def check(power_base_sum):\n\tassert power_base_sum(11, 10) == 43", "def check(power_base_sum):\n\tassert power_base_sum(8, 11) == 62", "def check(power_base_sum):\n\tassert power_base_sum(11, 16) == 88", "def check(power_base_sum):\n\tassert power_base_sum(11, 19) == 83", "def check(power_base_sum):\n\tassert power_base_sum(11, 13) == 47", "def check(power_base_sum):\n\tassert power_base_sum(9, 16) == 63", "def check(power_base_sum):\n\tassert power_base_sum(9, 17) == 99", "def check(power_base_sum):\n\tassert power_base_sum(12, 18) == 81", "def check(power_base_sum):\n\tassert power_base_sum(7, 15) == 64", "def check(power_base_sum):\n\tassert power_base_sum(5, 14) == 34", "def check(power_base_sum):\n\tassert power_base_sum(12, 15) == 72", "def check(power_base_sum):\n\tassert power_base_sum(4, 10) == 31", "def check(power_base_sum):\n\tassert power_base_sum(5, 12) == 28", "def check(power_base_sum):\n\tassert power_base_sum(7, 13) == 52", "def check(power_base_sum):\n\tassert power_base_sum(4, 10) == 31", "def check(power_base_sum):\n\tassert power_base_sum(13, 16) == 85", "def check(power_base_sum):\n\tassert power_base_sum(13, 18) == 91", "def check(power_base_sum):\n\tassert power_base_sum(7, 16) == 52", "def check(power_base_sum):\n\tassert power_base_sum(8, 17) == 80", "def check(power_base_sum):\n\tassert power_base_sum(5, 12) == 28", "def check(power_base_sum):\n\tassert power_base_sum(9, 17) == 99"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum(int(digit) for digit in str(result))\n", "passed": true, "pass": true, "pass_num": 10, "round": 651, "mutate_method": "expand_one2two", "parent_index": 511}
