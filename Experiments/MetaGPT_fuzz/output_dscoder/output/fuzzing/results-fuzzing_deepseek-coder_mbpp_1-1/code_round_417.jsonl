{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 754, "prompt": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Therefore, write a function to find common elements from three lists. The function should return a list.", "code": "def extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result", "test_imports": [], "test_list": ["assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]", "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]", "assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]", "assert extract_index_list([4, 6, 5, 3, 6, 8, 2], [1, 6, 1, 8, 6, 7, 2], [3, 2, 5, 3, 5, 7, 7]) == []", "assert extract_index_list([1, 6, 5, 9, 1, 2, 3], [3, 1, 1, 7, 8, 1, 5], [5, 1, 5, 1, 7, 9, 10]) == []", "assert extract_index_list([6, 3, 8, 7, 6, 5, 5], [3, 2, 5, 5, 1, 5, 10], [5, 6, 5, 7, 7, 3, 12]) == []", "assert extract_index_list([5, 2, 2, 8, 2, 7, 12], [5, 3, 4, 4, 2, 10, 4], [5, 6, 7, 2, 3, 8, 11]) == [5]", "assert extract_index_list([3, 5, 8, 9, 2, 6, 9], [4, 1, 4, 1, 1, 8, 11], [3, 6, 7, 6, 1, 6, 2]) == []", "assert extract_index_list([6, 2, 5, 7, 6, 11, 7], [5, 6, 7, 7, 9, 3, 3], [1, 3, 2, 3, 4, 10, 8]) == []", "assert extract_index_list([4, 6, 5, 6, 5, 4, 8], [3, 2, 4, 5, 5, 6, 12], [1, 3, 6, 4, 7, 7, 4]) == []", "assert extract_index_list([3, 3, 3, 4, 9, 10, 6], [5, 4, 3, 7, 6, 8, 10], [4, 3, 4, 3, 1, 4, 2]) == []", "assert extract_index_list([4, 1, 6, 2, 8, 8, 4], [5, 6, 7, 8, 1, 2, 2], [5, 2, 5, 6, 1, 9, 3]) == []", "assert extract_index_list([5, 1, 4, 8, 2, 9, 2], [4, 2, 4, 4, 3, 9, 11], [4, 6, 7, 8, 4, 6, 5]) == []", "assert extract_index_list([2, 2, 1, 1, 8, 6, 9], [1, 4, 5, 1, 9, 3, 7], [4, 5, 4, 7, 3, 5, 8]) == []", "assert extract_index_list([2, 1, 3, 8, 4, 7, 2], [2, 1, 7, 5, 2, 10, 4], [1, 4, 3, 4, 9, 3, 11]) == []", "assert extract_index_list([3, 4, 8, 7, 3, 4, 8], [4, 3, 5, 8, 2, 2, 9], [4, 3, 7, 3, 6, 5, 3]) == []", "assert extract_index_list([1, 2, 5, 9, 2, 5, 11], [4, 6, 7, 6, 2, 4, 12], [2, 4, 6, 6, 5, 1, 7]) == []", "assert extract_index_list([4, 5, 5, 9, 6, 2, 4], [5, 2, 3, 8, 4, 6, 11], [1, 2, 2, 1, 3, 8, 10]) == []", "assert extract_index_list([5, 1, 8, 3, 9, 10, 4], [5, 4, 2, 2, 4, 1, 5], [1, 5, 7, 6, 6, 7, 6]) == []", "assert extract_index_list([2, 2, 6, 9, 8, 11, 11], [5, 4, 2, 1, 8, 4, 7], [3, 4, 2, 6, 6, 6, 6]) == []", "assert extract_index_list([5, 1, 6, 9, 10, 1, 8], [2, 2, 7, 8, 9, 7, 11], [5, 2, 2, 1, 6, 1, 9]) == []", "assert extract_index_list([5, 3, 7, 4, 1, 5, 8], [4, 6, 2, 7, 6, 7, 7], [4, 3, 5, 1, 1, 7, 5]) == []", "assert extract_index_list([1, 5, 7, 7, 5, 11, 9], [2, 4, 6, 1, 5, 1, 3], [1, 2, 2, 2, 3, 6, 9]) == []", "assert extract_index_list([4, 3, 1, 2, 9, 10, 5], [5, 3, 7, 6, 9, 2, 8], [1, 6, 3, 2, 8, 8, 12]) == []", "assert extract_index_list([1, 5, 1, 2, 6, 6, 4], [2, 3, 3, 5, 4, 5, 8], [4, 5, 3, 4, 5, 5, 8]) == []", "assert extract_index_list([2, 6, 5, 8, 9, 3, 5], [5, 5, 5, 2, 9, 1, 4], [3, 5, 4, 8, 3, 6, 3]) == []", "assert extract_index_list([5, 5, 4, 9, 9, 4, 5], [2, 4, 1, 1, 7, 7, 9], [4, 4, 3, 2, 3, 1, 7]) == []", "assert extract_index_list([1, 5, 2, 3, 5, 1, 12], [2, 1, 2, 5, 7, 6, 11], [1, 6, 4, 2, 4, 8, 7]) == []", "assert extract_index_list([4, 1, 4, 4, 6, 4, 9], [4, 2, 5, 2, 5, 1, 2], [2, 5, 7, 4, 5, 2, 10]) == []", "assert extract_index_list([5, 3, 1, 8, 8, 7, 12], [3, 3, 3, 7, 8, 2, 2], [1, 6, 1, 2, 1, 8, 12]) == []", "assert extract_index_list([4, 5, 2, 3, 1, 10, 6], [2, 2, 5, 5, 8, 5, 9], [4, 1, 3, 1, 9, 2, 2]) == []", "assert extract_index_list([4, 4, 2, 7, 10, 6, 3], [4, 3, 6, 3, 4, 10, 9], [5, 6, 2, 3, 9, 3, 10]) == []", "assert extract_index_list([6, 1, 6, 4, 4, 10, 6], [4, 6, 1, 4, 6, 9, 9], [2, 6, 2, 7, 9, 5, 3]) == []", "assert extract_index_list([4, 5, 7, 2, 9, 1, 7], [3, 6, 1, 2, 8, 8, 2], [3, 1, 5, 5, 9, 3, 3]) == []", "assert extract_index_list([6, 6, 5, 4, 10, 6, 5], [4, 6, 2, 2, 2, 7, 6], [5, 1, 1, 3, 2, 9, 6]) == []", "assert extract_index_list([6, 4, 3, 3, 1, 6, 4], [3, 2, 6, 3, 9, 1, 3], [4, 3, 1, 8, 4, 7, 6]) == []", "assert extract_index_list([1, 5, 3, 7, 8, 9, 6], [4, 5, 1, 7, 2, 7, 4], [5, 5, 1, 6, 1, 8, 11]) == [5]", "assert extract_index_list([4, 3, 2, 2, 5, 7, 2], [2, 4, 7, 6, 9, 4, 3], [2, 1, 6, 2, 5, 1, 8]) == []", "assert extract_index_list([1, 1, 2, 8, 5, 2, 7], [5, 4, 4, 5, 6, 3, 9], [2, 2, 6, 1, 8, 10, 8]) == []", "assert extract_index_list([4, 1, 6, 2, 2, 11, 12], [1, 6, 4, 4, 6, 5, 2], [4, 1, 6, 6, 7, 5, 11]) == []", "assert extract_index_list([4, 6, 2, 9, 1, 9, 11], [4, 1, 1, 5, 6, 7, 8], [2, 6, 4, 3, 6, 8, 5]) == []", "assert extract_index_list([2, 3, 3, 2, 7, 11, 10], [3, 5, 2, 5, 4, 11, 5], [1, 2, 5, 7, 7, 1, 12]) == []", "assert extract_index_list([5, 1, 5, 7, 4, 9, 4], [2, 3, 3, 8, 4, 11, 5], [3, 4, 4, 8, 8, 8, 12]) == []", "assert extract_index_list([2, 1, 7, 1, 7, 1, 8], [3, 2, 4, 5, 5, 10, 5], [4, 4, 2, 8, 4, 10, 12]) == []", "assert extract_index_list([1, 6, 4, 6, 8, 11, 10], [3, 4, 3, 1, 8, 2, 9], [3, 6, 7, 3, 6, 6, 11]) == []", "assert extract_index_list([2, 4, 8, 8, 2, 3, 3], [2, 2, 2, 5, 1, 9, 2], [4, 1, 4, 4, 6, 1, 8]) == []", "assert extract_index_list([4, 1, 8, 3, 6, 7, 9], [4, 3, 6, 3, 4, 8, 10], [3, 6, 1, 1, 5, 1, 4]) == []", "assert extract_index_list([3, 3, 4, 8, 10, 6, 3], [3, 6, 1, 4, 4, 10, 2], [2, 4, 7, 4, 8, 3, 12]) == []", "assert extract_index_list([2, 1, 3, 7, 7, 1, 3], [2, 1, 6, 3, 4, 2, 8], [1, 2, 6, 1, 5, 3, 7]) == []", "assert extract_index_list([3, 4, 2, 5, 4, 3, 10], [3, 5, 7, 3, 1, 3, 8], [5, 1, 4, 4, 3, 4, 4]) == []", "assert extract_index_list([3, 2, 6, 2, 10, 3, 7], [4, 3, 2, 1, 1, 5, 9], [3, 5, 4, 8, 5, 11, 2]) == []", "assert extract_index_list([1, 6, 2, 6, 8, 4, 8], [4, 1, 1, 1, 7, 5, 4], [5, 3, 6, 3, 4, 7, 9]) == []", "assert extract_index_list([2, 1, 1, 7, 2, 7, 2], [5, 6, 2, 7, 2, 6, 10], [5, 1, 7, 4, 2, 8, 5]) == [2]", "assert extract_index_list([6, 2, 3, 7, 6, 8, 12], [2, 4, 5, 6, 9, 2, 8], [4, 4, 2, 6, 8, 6, 9]) == []", "assert extract_index_list([6, 4, 5, 3, 8, 3, 3], [4, 2, 2, 4, 7, 1, 1], [3, 4, 5, 6, 5, 7, 5]) == []", "assert extract_index_list([5, 2, 3, 6, 4, 4, 3], [2, 5, 1, 2, 8, 9, 8], [2, 3, 5, 1, 9, 10, 10]) == []", "assert extract_index_list([2, 2, 5, 1, 10, 3, 8], [4, 4, 7, 6, 5, 3, 7], [2, 5, 5, 8, 2, 9, 5]) == []", "assert extract_index_list([1, 3, 7, 4, 4, 8, 10], [2, 5, 6, 5, 6, 7, 9], [5, 6, 3, 2, 8, 10, 5]) == []", "assert extract_index_list([1, 3, 8, 6, 8, 6, 12], [5, 1, 6, 3, 1, 10, 2], [5, 6, 1, 8, 7, 2, 10]) == []", "assert extract_index_list([1, 6, 8, 2, 5, 3, 9], [4, 3, 3, 2, 9, 11, 2], [5, 1, 5, 4, 1, 4, 6]) == []", "assert extract_index_list([5, 6, 8, 8, 2, 9, 2], [5, 4, 7, 1, 8, 11, 7], [2, 5, 7, 1, 1, 8, 6]) == []", "assert extract_index_list([3, 6, 8, 3, 4, 11, 6], [1, 5, 6, 3, 1, 2, 3], [4, 3, 5, 3, 7, 5, 8]) == [3]", "assert extract_index_list([5, 5, 1, 7, 8, 3, 3], [4, 5, 3, 4, 8, 9, 8], [3, 2, 6, 5, 4, 9, 3]) == []", "assert extract_index_list([2, 3, 1, 8, 8, 8, 2], [4, 5, 2, 3, 7, 6, 1], [5, 2, 5, 6, 2, 7, 5]) == []", "assert extract_index_list([4, 6, 4, 8, 1, 6, 5], [5, 2, 2, 8, 8, 3, 6], [2, 5, 5, 2, 9, 10, 12]) == []", "assert extract_index_list([5, 3, 4, 8, 3, 9, 4], [2, 4, 3, 4, 3, 1, 1], [3, 2, 6, 1, 2, 4, 9]) == []", "assert extract_index_list([2, 4, 4, 8, 2, 2, 10], [4, 2, 5, 5, 6, 6, 6], [4, 6, 1, 7, 6, 8, 6]) == []", "assert extract_index_list([6, 3, 6, 6, 1, 3, 10], [2, 5, 2, 8, 1, 7, 10], [3, 1, 7, 5, 5, 8, 7]) == []", "assert extract_index_list([2, 1, 2, 6, 2, 1, 4], [5, 3, 2, 4, 2, 3, 5], [4, 5, 2, 3, 6, 2, 9]) == [2]", "assert extract_index_list([4, 3, 2, 5, 11, 1, 7], [5, 6, 6, 2, 7, 9, 11], [4, 2, 3, 6, 3, 6, 6]) == []", "assert extract_index_list([5, 2, 3, 2, 4, 9, 4], [1, 2, 1, 1, 5, 6, 7], [4, 4, 2, 2, 1, 7, 7]) == []", "assert extract_index_list([2, 3, 7, 9, 7, 7, 3], [4, 4, 3, 8, 8, 9, 11], [3, 5, 6, 4, 4, 9, 12]) == []", "assert extract_index_list([3, 2, 4, 8, 7, 4, 7], [2, 3, 1, 1, 1, 2, 9], [1, 3, 4, 3, 3, 3, 11]) == []", "assert extract_index_list([3, 1, 4, 6, 2, 9, 10], [3, 4, 3, 6, 7, 10, 12], [1, 2, 2, 8, 3, 3, 3]) == []", "assert extract_index_list([6, 4, 2, 9, 7, 1, 5], [2, 5, 1, 1, 5, 10, 6], [2, 4, 1, 6, 2, 8, 9]) == []", "assert extract_index_list([4, 5, 2, 6, 8, 9, 6], [1, 6, 3, 4, 7, 3, 6], [1, 4, 7, 2, 4, 5, 10]) == []", "assert extract_index_list([3, 5, 1, 5, 5, 7, 11], [4, 2, 5, 4, 6, 8, 8], [5, 4, 1, 1, 6, 4, 3]) == []", "assert extract_index_list([6, 6, 3, 4, 8, 8, 10], [2, 2, 4, 1, 8, 8, 11], [1, 5, 1, 6, 4, 4, 12]) == []", "assert extract_index_list([3, 2, 5, 5, 8, 5, 7], [1, 2, 5, 2, 4, 4, 10], [3, 5, 6, 3, 5, 9, 6]) == []", "assert extract_index_list([4, 3, 7, 3, 10, 1, 3], [5, 3, 2, 5, 2, 9, 3], [1, 6, 5, 6, 4, 9, 7]) == []", "assert extract_index_list([1, 3, 1, 6, 3, 5, 10], [1, 1, 6, 7, 7, 6, 11], [5, 3, 7, 4, 2, 9, 12]) == []", "assert extract_index_list([5, 6, 8, 4, 2, 1, 2], [4, 4, 2, 4, 5, 2, 5], [4, 3, 6, 7, 7, 9, 6]) == []", "assert extract_index_list([2, 4, 1, 4, 4, 9, 5], [2, 4, 7, 3, 5, 2, 6], [4, 6, 1, 2, 7, 6, 4]) == []", "assert extract_index_list([3, 1, 6, 8, 3, 10, 2], [4, 2, 2, 8, 9, 8, 10], [2, 6, 3, 2, 7, 1, 5]) == []", "assert extract_index_list([6, 2, 7, 4, 7, 2, 1], [5, 6, 5, 2, 6, 3, 2], [1, 5, 5, 3, 2, 4, 4]) == []", "assert extract_index_list([3, 6, 7, 6, 4, 4, 1], [5, 1, 5, 6, 9, 7, 11], [1, 3, 6, 5, 6, 9, 6]) == []", "assert extract_index_list([1, 6, 1, 1, 3, 5, 4], [3, 6, 5, 2, 7, 5, 7], [1, 6, 1, 7, 4, 5, 8]) == [6, 5]", "assert extract_index_list([4, 4, 1, 3, 5, 8, 9], [3, 5, 2, 8, 5, 1, 3], [4, 5, 5, 1, 8, 10, 7]) == []", "assert extract_index_list([1, 5, 3, 4, 11, 6, 8], [3, 1, 6, 3, 8, 8, 5], [5, 5, 4, 8, 6, 10, 9]) == []", "assert extract_index_list([1, 3, 6, 1, 5, 2, 10], [5, 3, 2, 4, 2, 2, 4], [2, 5, 4, 7, 2, 2, 2]) == [2]", "assert extract_index_list([1, 2, 6, 2, 2, 8, 1], [3, 3, 4, 1, 2, 6, 6], [5, 1, 6, 5, 4, 8, 9]) == []", "assert extract_index_list([4, 5, 4, 7, 3, 2, 4], [1, 3, 7, 5, 3, 2, 9], [5, 1, 5, 3, 6, 8, 8]) == []", "assert extract_index_list([6, 3, 5, 7, 3, 2, 8], [3, 5, 3, 8, 8, 5, 5], [5, 3, 3, 5, 8, 3, 11]) == []", "assert extract_index_list([3, 6, 8, 3, 5, 10, 3], [1, 3, 6, 8, 6, 6, 11], [3, 1, 6, 7, 6, 5, 4]) == []", "assert extract_index_list([4, 4, 8, 8, 5, 1, 4], [1, 6, 3, 7, 7, 1, 9], [4, 1, 5, 8, 1, 9, 10]) == []", "assert extract_index_list([2, 2, 2, 5, 10, 7, 11], [3, 6, 2, 5, 4, 6, 6], [3, 5, 1, 2, 6, 6, 2]) == []", "assert extract_index_list([4, 2, 5, 2, 6, 5, 6], [5, 2, 2, 2, 3, 9, 8], [2, 2, 7, 1, 5, 1, 4]) == [2]", "assert extract_index_list([2, 3, 8, 9, 11, 3, 10], [4, 5, 7, 3, 3, 9, 3], [5, 1, 4, 7, 9, 10, 7]) == []", "assert extract_index_list([2, 2, 8, 1, 7, 2, 10], [5, 5, 4, 7, 2, 9, 10], [5, 2, 3, 4, 2, 8, 2]) == []", "assert extract_index_list([4, 1, 2, 7, 3, 9, 7], [2, 6, 4, 2, 4, 8, 2], [4, 1, 1, 5, 6, 2, 9]) == []", "assert extract_index_list([6, 5, 3, 8, 9, 10, 11], [4, 1, 2, 4, 3, 7, 9], [3, 6, 4, 1, 5, 4, 12]) == []", "assert extract_index_list([2, 6, 6, 4, 11, 1, 8], [3, 4, 7, 5, 8, 8, 9], [5, 4, 6, 7, 5, 4, 11]) == []"], "entry_point": "extract_index_list", "repair_prompt": ["We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Therefore, write a function extract_index_list to find common elements from three lists. The function should return a list.\nextract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef extract_index_list(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    \"\"\"\n    Extracts elements that have the same index in all three input lists.\n\n    Args:\n        list1 (List[int]): The first list of integers.\n        list2 (List[int]): The second list of integers.\n        list3 (List[int]): The third list of integers.\n\n    Returns:\n        List[int]: A list of integers that are common across all three lists based on their indices.\n    \"\"\"\n    result = []\n    min_length = min(len(list1), len(list2), len(list3))\n    \n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            result.append(list1[i])\n    \n    return result\n", "from typing import List\n## main.py\n\ndef extract_index_list(list1: list, list2: list, list3: list) -> list:\n    \"\"\"\n    Extracts common elements across three lists based on their indices.\n\n    Args:\n        list1 (list): The first list of integers.\n        list2 (list): The second list of integers.\n        list3 (list): The third list of integers.\n\n    Returns:\n        list: A list of common elements.\n    \"\"\"\n    common_elements = []\n    \n    # Find the length of the shortest list to avoid index out of range\n    min_length = min(len(list1), len(list2), len(list3))\n    \n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            common_elements.append(list1[i])\n    \n    return common_elements\n", "from typing import List\nfrom typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    \"\"\"\n    Extracts common elements across three lists based on their indices.\n\n    Args:\n        l1 (List[int]): The first list of integers.\n        l2 (List[int]): The second list of integers.\n        l3 (List[int]): The third list of integers.\n\n    Returns:\n        List[int]: A list of integers that are common across all three lists at the same index.\n    \"\"\"\n    # Initialize the result list\n    result = []\n\n    # Validate inputs\n    if not all(isinstance(l, list) and all(isinstance(i, int) for i in l) for l in [l1, l2, l3]):\n        raise ValueError(\"All inputs must be lists of integers.\")\n\n    # Get the length of the shortest list\n    min_length = min(len(l1), len(l2), len(l3))\n\n    # Iterate through the lists up to the length of the shortest list\n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n\n    return result\n", "from typing import List\nfrom typing import List\n\ndef extract_index_list(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    \"\"\"\n    Extracts common elements across three lists based on their indices.\n\n    Args:\n        list1 (List[int]): The first list of integers.\n        list2 (List[int]): The second list of integers.\n        list3 (List[int]): The third list of integers.\n\n    Returns:\n        List[int]: A list of integers that are common across all three lists at the same index.\n    \"\"\"\n    result = []\n    min_length = min(len(list1), len(list2), len(list3))\n    \n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            result.append(list1[i])\n    \n    return result\n", "from typing import List\n## main.py\n\ndef extract_index_list(list1: list, list2: list, list3: list) -> list:\n    \"\"\"\n    This function takes three lists as input and returns a list of common elements based on their indices.\n    \n    Args:\n        list1 (list): The first list of elements.\n        list2 (list): The second list of elements.\n        list3 (list): The third list of elements.\n    \n    Returns:\n        list: A list of common elements across the three lists based on their indices.\n    \"\"\"\n    result = []\n    min_length = min(len(list1), len(list2), len(list3))\n    \n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            if list1[i] not in result:\n                result.append(list1[i])\n    \n    return result\n", "from typing import List\n## main.py\n\nimport typing\n\ndef extract_index_list(l1: list, l2: list, l3: list) -> list:\n    \"\"\"\n    Extracts common elements across three lists based on their indices.\n\n    Args:\n        l1 (list): The first input list.\n        l2 (list): The second input list.\n        l3 (list): The third input list.\n\n    Returns:\n        list: A list of common elements found at the same indices in all three lists.\n    \"\"\"\n    result = []\n    unique_result = set()\n\n    # Find the shortest list to avoid unnecessary comparisons\n    min_length = min(len(l1), len(l2), len(l3))\n\n    # Iterate through the elements of the shortest list\n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            unique_result.add(l1[i])\n\n    # Convert the set to a list\n    result = list(unique_result)\n    return result\n", "from typing import List\n## main.py\n\nimport typing\n\ndef extract_index_list(list1: list, list2: list, list3: list) -> list:\n    \"\"\"\n    Extracts elements that are common across three lists based on their indices.\n\n    Args:\n        list1 (list): The first list of elements.\n        list2 (list): The second list of elements.\n        list3 (list): The third list of elements.\n\n    Returns:\n        list: A list of common elements without duplicates.\n    \"\"\"\n    common_elements = []\n    \n    # Iterate through the indices of the lists\n    for i in range(min(len(list1), len(list2), len(list3))):\n        # Check if the element at the current index in all three lists are the same\n        if list1[i] == list2[i] == list3[i]:\n            # If they are the same, add the element to the common elements list if not already added\n            if list1[i] not in common_elements:\n                common_elements.append(list1[i])\n    \n    return common_elements\n", "from typing import List\nfrom typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    \"\"\"\n    Extracts common elements across three lists based on their indices.\n\n    Args:\n        l1 (List[int]): The first list of integers.\n        l2 (List[int]): The second list of integers.\n        l3 (List[int]): The third list of integers.\n\n    Returns:\n        List[int]: A list of integers that are common across all three lists at the same index.\n    \"\"\"\n    result = []\n    \n    # Determine the length of the shortest list to avoid index out of range\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    \n    return result\n", "from typing import List\n## main.py\n\nimport typing\n\ndef extract_index_list(list1: list, list2: list, list3: list) -> list:\n    \"\"\"\n    This function takes three lists as input and returns a list of common elements based on their indices.\n    \n    Args:\n        list1 (list): The first list of elements.\n        list2 (list): The second list of elements.\n        list3 (list): The third list of elements.\n    \n    Returns:\n        list: A list of common elements across the three lists based on their indices.\n    \"\"\"\n    # Validate inputs to ensure they are lists\n    if not all(isinstance(lst, list) for lst in [list1, list2, list3]):\n        raise ValueError(\"All inputs must be lists\")\n    \n    # Initialize the result list to store common elements\n    result = []\n    \n    # Determine the length of the shortest list to avoid index out of range\n    min_length = min(len(list1), len(list2), len(list3))\n    \n    # Iterate through the lists to compare elements at each index\n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            result.append(list1[i])\n    \n    return result\n", "from typing import List\nfrom typing import List\n\ndef extract_index_list(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    \"\"\"\n    Extracts common elements across three lists based on their indices.\n\n    Args:\n        list1 (List[int]): The first list of integers.\n        list2 (List[int]): The second list of integers.\n        list3 (List[int]): The third list of integers.\n\n    Returns:\n        List[int]: A list of common elements.\n    \"\"\"\n    # Initialize an empty list to store common elements\n    common_elements = []\n\n    # Determine the length of the shortest list to avoid index out of range\n    min_length = min(len(list1), len(list2), len(list3))\n\n    # Iterate through the lists up to the length of the shortest list\n    for i in range(min_length):\n        # Compare elements at the current index across all three lists\n        if list1[i] == list2[i] == list3[i]:\n            # If elements match and not already in result, add to result\n            if list1[i] not in common_elements:\n                common_elements.append(list1[i])\n\n    return common_elements\n"], "plans": ["requirement analysis:\nThe requirement is to find common elements in three lists based on their indices. This is a specific and straightforward task that requires basic list processing capabilities. The function should be efficient and handle lists of various sizes without significant performance degradation.\nrequirement pool:\n- The main code should accurately find common elements across three lists based on their indices.\n- The function should be optimized for performance, handling large lists without delays.\n- The output should be a list containing all common elements found at the same indices across the three lists.\n- The user interface should be simple and intuitive, making it easy for users to input lists and view results.\nTo implement the function `extract_index_list` that finds common elements from three lists based on their indices, we will use Python's built-in capabilities and the `itertools` library for efficient list processing. The function will iterate through the lists, comparing elements at each index across all three lists. If elements match at the same index across all lists, they will be added to the result list.\n", "requirement analysis:\nThe requirement is to find common elements in three lists based on their indices. This is a straightforward task that requires basic list manipulation and comparison skills. The function should be efficient and return accurate results without errors. The user expects a simple and intuitive interface for this functionality.\nrequirement pool:\n- The main code should efficiently find common elements across three lists.\n- The function should handle edge cases and errors gracefully.\n- The user interface should be clean and easy to understand.\n- The system should provide feedback on the results.\n- The product should be compatible with a variety of devices and platforms.\nTo implement the function `extract_index_list` that finds common elements across three lists based on their indices, we will use Python's built-in list manipulation capabilities. This approach is efficient and straightforward, leveraging the simplicity and power of Python's standard library.\n", "requirement analysis:\nThe requirement is to create a function that identifies common elements across three lists based on their indices. This is a straightforward task that requires basic list manipulation and comparison skills. The function should be efficient and handle lists of varying lengths without performance degradation.\nrequirement pool:\n- The main code should be concise and readable, making it easy for users to understand and implement.\n- The function should handle edge cases such as lists of different lengths gracefully.\n- Ensure the function is optimized for performance, especially when dealing with large lists.\n- Implement error handling to manage cases where the input is not a list or contains non-integer elements.\n- Include detailed documentation and examples to assist users in understanding how to use the function.\nTo create a function that identifies common elements across three lists based on their indices, we will use Python's built-in capabilities for list manipulation and comparison. The function will iterate through the lists, comparing elements at each index across all three lists. If an element matches across all lists at the same index, it will be added to the result list. The function will handle edge cases such as lists of different lengths gracefully and include error handling to manage cases where the input is not a list or contains non-integer elements.\n", "requirement analysis:\nThe requirement is to create a function that identifies common elements across three lists based on their indices. This is a straightforward task that requires basic list manipulation and comparison skills. The function should be efficient and handle lists of varying lengths without performance degradation.\nrequirement pool:\n- The main code should be concise and readable, using Pythonic practices.\n- The function should handle edge cases such as lists of different lengths.\n- Ensure the function is optimized for performance, especially with large lists.\n- Implement error handling to manage cases where the lists do not have common elements.\n- Include documentation and test cases to ensure the function works as expected.\nTo create a function that identifies common elements across three lists based on their indices, we will use Python's built-in capabilities for list manipulation and comparison. The function will iterate through the lists, comparing elements at each index across all three lists. If an element matches across all lists at the same index, it will be added to the result list. The function will also handle edge cases such as lists of different lengths by ensuring that the function only considers indices that exist in all lists.\n", "requirement analysis:\nThe requirement is to create a function that identifies common elements across three lists based on their indices. This function should be efficient and return a list of common elements. The user expects the function to handle various list sizes and ensure the output is accurate and free of duplicates.\nrequirement pool:\n- The main code should efficiently find common elements across three lists.\n- The function should return a list of common elements.\n- Ensure the function handles lists of different sizes.\n- Implement checks to avoid duplicates in the output.\n- Optimize the function for performance, especially with large lists.\nTo create a function that identifies common elements across three lists based on their indices, we will use Python's built-in capabilities and leverage the power of list comprehensions for simplicity and efficiency. The function will iterate through the lists, comparing elements at each index across all three lists. If an element matches across all lists at the same index, it will be added to the result list. We will ensure the function handles lists of different sizes and implement checks to avoid duplicates in the output.\n", "requirement analysis:\nThe requirement is to create a function that identifies common elements across three lists based on their indices. This is a straightforward task that requires basic list manipulation and comparison skills. The function should be efficient and handle lists of varying lengths.\nrequirement pool:\n- The main code should efficiently find common elements across three lists.\n- The function should handle lists of different lengths.\n- The output should be a list of common elements.\n- The function should be easy to understand and use.\n- The function should handle edge cases such as empty lists.\nTo create a function that identifies common elements across three lists based on their indices, we will use Python's built-in list manipulation capabilities. The function will iterate through the lists, comparing elements at each index across all three lists. If an element matches across all lists at the same index, it will be added to the result list. The function will ensure that the output list contains no duplicates by using a set to store the results before converting it back to a list.\n", "requirement analysis:\nThe requirement is to find common elements in three lists based on their indices. This is a straightforward task that can be efficiently implemented using basic Python list operations. The function should return a list of elements that are common across all three lists at the same index.\nrequirement pool:\n- The main code should efficiently find common elements across three lists.\n- The function should handle lists of varying lengths.\n- The output should be a list of common elements without duplicates.\n- Implement error handling for non-list inputs.\n- Optimize the function for performance on large datasets.\nTo efficiently find common elements across three lists based on their indices, we will use basic Python list operations. The function will iterate through the lists, comparing elements at each index across all three lists. We will ensure that the output is a list of common elements without duplicates.\n", "requirement analysis:\nThe requirement is to create a function that identifies common elements across three lists based on their indices. This is a straightforward task that requires basic list manipulation and comparison skills. The function should be efficient and handle lists of varying lengths.\nrequirement pool:\n- The main code should efficiently find common elements across three lists.\n- The function should handle lists of different lengths gracefully.\n- Ensure the output is a list of common elements.\n- Implement error handling for non-list inputs.\n- Optimize the function for performance on large datasets.\nTo create a function that identifies common elements across three lists based on their indices, we will use Python's built-in capabilities for list manipulation and comparison. The function will iterate through the lists, comparing elements at each index across all three lists. If an element matches across all lists at the same index, it will be added to the result list. The function will also include error handling to ensure that the inputs are lists.\n", "requirement analysis:\nThe requirement is to create a function that identifies common elements across three lists based on their indices. This is a straightforward task that requires basic list manipulation and comparison skills. The function should be efficient and handle lists of varying lengths.\nrequirement pool:\n- The main code should be concise and readable.\n- The function should handle edge cases such as lists of different lengths.\n- Ensure the function returns results quickly even for large lists.\n- Implement error handling for non-list inputs.\n- Include documentation and test cases to ensure reliability.\nTo create a function that identifies common elements across three lists based on their indices, we will use Python's built-in capabilities for list manipulation and comparison. The function will iterate through the lists, comparing elements at each index across all three lists. If an element matches across all lists at the same index, it will be added to the result list. The function will also include error handling to ensure that the inputs are lists and will be efficient enough to handle large lists.\n", "requirement analysis:\nThe requirement is to create a function that identifies common elements across three lists based on their indices. This is a straightforward task that requires basic list manipulation and comparison skills. The function should be efficient and handle lists of varying lengths.\nrequirement pool:\n- The main code should be concise and readable, using Pythonic practices.\n- The function should handle edge cases such as lists of different lengths.\n- Ensure the function returns a list of common elements found at the same indices in all three lists.\n- Optimize the function for performance, especially for large lists.\nTo create a function that identifies common elements across three lists based on their indices, we will use Python's built-in capabilities for list manipulation and comparison. The function will iterate through the lists, comparing elements at each index across all three lists. We will ensure that the function handles edge cases such as lists of different lengths and is optimized for performance, especially for large lists.\n"], "test": ["def check(extract_index_list):\n\tassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]", "def check(extract_index_list):\n\tassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]", "def check(extract_index_list):\n\tassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]", "def check(extract_index_list):\n\tassert extract_index_list([4, 6, 5, 3, 6, 8, 2], [1, 6, 1, 8, 6, 7, 2], [3, 2, 5, 3, 5, 7, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 6, 5, 9, 1, 2, 3], [3, 1, 1, 7, 8, 1, 5], [5, 1, 5, 1, 7, 9, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 3, 8, 7, 6, 5, 5], [3, 2, 5, 5, 1, 5, 10], [5, 6, 5, 7, 7, 3, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 2, 2, 8, 2, 7, 12], [5, 3, 4, 4, 2, 10, 4], [5, 6, 7, 2, 3, 8, 11]) == [5]", "def check(extract_index_list):\n\tassert extract_index_list([3, 5, 8, 9, 2, 6, 9], [4, 1, 4, 1, 1, 8, 11], [3, 6, 7, 6, 1, 6, 2]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 2, 5, 7, 6, 11, 7], [5, 6, 7, 7, 9, 3, 3], [1, 3, 2, 3, 4, 10, 8]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 6, 5, 6, 5, 4, 8], [3, 2, 4, 5, 5, 6, 12], [1, 3, 6, 4, 7, 7, 4]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 3, 3, 4, 9, 10, 6], [5, 4, 3, 7, 6, 8, 10], [4, 3, 4, 3, 1, 4, 2]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 1, 6, 2, 8, 8, 4], [5, 6, 7, 8, 1, 2, 2], [5, 2, 5, 6, 1, 9, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 1, 4, 8, 2, 9, 2], [4, 2, 4, 4, 3, 9, 11], [4, 6, 7, 8, 4, 6, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 2, 1, 1, 8, 6, 9], [1, 4, 5, 1, 9, 3, 7], [4, 5, 4, 7, 3, 5, 8]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 1, 3, 8, 4, 7, 2], [2, 1, 7, 5, 2, 10, 4], [1, 4, 3, 4, 9, 3, 11]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 4, 8, 7, 3, 4, 8], [4, 3, 5, 8, 2, 2, 9], [4, 3, 7, 3, 6, 5, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 2, 5, 9, 2, 5, 11], [4, 6, 7, 6, 2, 4, 12], [2, 4, 6, 6, 5, 1, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 5, 5, 9, 6, 2, 4], [5, 2, 3, 8, 4, 6, 11], [1, 2, 2, 1, 3, 8, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 1, 8, 3, 9, 10, 4], [5, 4, 2, 2, 4, 1, 5], [1, 5, 7, 6, 6, 7, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 2, 6, 9, 8, 11, 11], [5, 4, 2, 1, 8, 4, 7], [3, 4, 2, 6, 6, 6, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 1, 6, 9, 10, 1, 8], [2, 2, 7, 8, 9, 7, 11], [5, 2, 2, 1, 6, 1, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 3, 7, 4, 1, 5, 8], [4, 6, 2, 7, 6, 7, 7], [4, 3, 5, 1, 1, 7, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 5, 7, 7, 5, 11, 9], [2, 4, 6, 1, 5, 1, 3], [1, 2, 2, 2, 3, 6, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 3, 1, 2, 9, 10, 5], [5, 3, 7, 6, 9, 2, 8], [1, 6, 3, 2, 8, 8, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 5, 1, 2, 6, 6, 4], [2, 3, 3, 5, 4, 5, 8], [4, 5, 3, 4, 5, 5, 8]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 6, 5, 8, 9, 3, 5], [5, 5, 5, 2, 9, 1, 4], [3, 5, 4, 8, 3, 6, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 5, 4, 9, 9, 4, 5], [2, 4, 1, 1, 7, 7, 9], [4, 4, 3, 2, 3, 1, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 5, 2, 3, 5, 1, 12], [2, 1, 2, 5, 7, 6, 11], [1, 6, 4, 2, 4, 8, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 1, 4, 4, 6, 4, 9], [4, 2, 5, 2, 5, 1, 2], [2, 5, 7, 4, 5, 2, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 3, 1, 8, 8, 7, 12], [3, 3, 3, 7, 8, 2, 2], [1, 6, 1, 2, 1, 8, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 5, 2, 3, 1, 10, 6], [2, 2, 5, 5, 8, 5, 9], [4, 1, 3, 1, 9, 2, 2]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 4, 2, 7, 10, 6, 3], [4, 3, 6, 3, 4, 10, 9], [5, 6, 2, 3, 9, 3, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 1, 6, 4, 4, 10, 6], [4, 6, 1, 4, 6, 9, 9], [2, 6, 2, 7, 9, 5, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 5, 7, 2, 9, 1, 7], [3, 6, 1, 2, 8, 8, 2], [3, 1, 5, 5, 9, 3, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 6, 5, 4, 10, 6, 5], [4, 6, 2, 2, 2, 7, 6], [5, 1, 1, 3, 2, 9, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 4, 3, 3, 1, 6, 4], [3, 2, 6, 3, 9, 1, 3], [4, 3, 1, 8, 4, 7, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 5, 3, 7, 8, 9, 6], [4, 5, 1, 7, 2, 7, 4], [5, 5, 1, 6, 1, 8, 11]) == [5]", "def check(extract_index_list):\n\tassert extract_index_list([4, 3, 2, 2, 5, 7, 2], [2, 4, 7, 6, 9, 4, 3], [2, 1, 6, 2, 5, 1, 8]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 1, 2, 8, 5, 2, 7], [5, 4, 4, 5, 6, 3, 9], [2, 2, 6, 1, 8, 10, 8]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 1, 6, 2, 2, 11, 12], [1, 6, 4, 4, 6, 5, 2], [4, 1, 6, 6, 7, 5, 11]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 6, 2, 9, 1, 9, 11], [4, 1, 1, 5, 6, 7, 8], [2, 6, 4, 3, 6, 8, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 3, 3, 2, 7, 11, 10], [3, 5, 2, 5, 4, 11, 5], [1, 2, 5, 7, 7, 1, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 1, 5, 7, 4, 9, 4], [2, 3, 3, 8, 4, 11, 5], [3, 4, 4, 8, 8, 8, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 1, 7, 1, 7, 1, 8], [3, 2, 4, 5, 5, 10, 5], [4, 4, 2, 8, 4, 10, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 6, 4, 6, 8, 11, 10], [3, 4, 3, 1, 8, 2, 9], [3, 6, 7, 3, 6, 6, 11]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 4, 8, 8, 2, 3, 3], [2, 2, 2, 5, 1, 9, 2], [4, 1, 4, 4, 6, 1, 8]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 1, 8, 3, 6, 7, 9], [4, 3, 6, 3, 4, 8, 10], [3, 6, 1, 1, 5, 1, 4]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 3, 4, 8, 10, 6, 3], [3, 6, 1, 4, 4, 10, 2], [2, 4, 7, 4, 8, 3, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 1, 3, 7, 7, 1, 3], [2, 1, 6, 3, 4, 2, 8], [1, 2, 6, 1, 5, 3, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 4, 2, 5, 4, 3, 10], [3, 5, 7, 3, 1, 3, 8], [5, 1, 4, 4, 3, 4, 4]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 2, 6, 2, 10, 3, 7], [4, 3, 2, 1, 1, 5, 9], [3, 5, 4, 8, 5, 11, 2]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 6, 2, 6, 8, 4, 8], [4, 1, 1, 1, 7, 5, 4], [5, 3, 6, 3, 4, 7, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 1, 1, 7, 2, 7, 2], [5, 6, 2, 7, 2, 6, 10], [5, 1, 7, 4, 2, 8, 5]) == [2]", "def check(extract_index_list):\n\tassert extract_index_list([6, 2, 3, 7, 6, 8, 12], [2, 4, 5, 6, 9, 2, 8], [4, 4, 2, 6, 8, 6, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 4, 5, 3, 8, 3, 3], [4, 2, 2, 4, 7, 1, 1], [3, 4, 5, 6, 5, 7, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 2, 3, 6, 4, 4, 3], [2, 5, 1, 2, 8, 9, 8], [2, 3, 5, 1, 9, 10, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 2, 5, 1, 10, 3, 8], [4, 4, 7, 6, 5, 3, 7], [2, 5, 5, 8, 2, 9, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 3, 7, 4, 4, 8, 10], [2, 5, 6, 5, 6, 7, 9], [5, 6, 3, 2, 8, 10, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 3, 8, 6, 8, 6, 12], [5, 1, 6, 3, 1, 10, 2], [5, 6, 1, 8, 7, 2, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 6, 8, 2, 5, 3, 9], [4, 3, 3, 2, 9, 11, 2], [5, 1, 5, 4, 1, 4, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 6, 8, 8, 2, 9, 2], [5, 4, 7, 1, 8, 11, 7], [2, 5, 7, 1, 1, 8, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 6, 8, 3, 4, 11, 6], [1, 5, 6, 3, 1, 2, 3], [4, 3, 5, 3, 7, 5, 8]) == [3]", "def check(extract_index_list):\n\tassert extract_index_list([5, 5, 1, 7, 8, 3, 3], [4, 5, 3, 4, 8, 9, 8], [3, 2, 6, 5, 4, 9, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 3, 1, 8, 8, 8, 2], [4, 5, 2, 3, 7, 6, 1], [5, 2, 5, 6, 2, 7, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 6, 4, 8, 1, 6, 5], [5, 2, 2, 8, 8, 3, 6], [2, 5, 5, 2, 9, 10, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 3, 4, 8, 3, 9, 4], [2, 4, 3, 4, 3, 1, 1], [3, 2, 6, 1, 2, 4, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 4, 4, 8, 2, 2, 10], [4, 2, 5, 5, 6, 6, 6], [4, 6, 1, 7, 6, 8, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 3, 6, 6, 1, 3, 10], [2, 5, 2, 8, 1, 7, 10], [3, 1, 7, 5, 5, 8, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 1, 2, 6, 2, 1, 4], [5, 3, 2, 4, 2, 3, 5], [4, 5, 2, 3, 6, 2, 9]) == [2]", "def check(extract_index_list):\n\tassert extract_index_list([4, 3, 2, 5, 11, 1, 7], [5, 6, 6, 2, 7, 9, 11], [4, 2, 3, 6, 3, 6, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 2, 3, 2, 4, 9, 4], [1, 2, 1, 1, 5, 6, 7], [4, 4, 2, 2, 1, 7, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 3, 7, 9, 7, 7, 3], [4, 4, 3, 8, 8, 9, 11], [3, 5, 6, 4, 4, 9, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 2, 4, 8, 7, 4, 7], [2, 3, 1, 1, 1, 2, 9], [1, 3, 4, 3, 3, 3, 11]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 1, 4, 6, 2, 9, 10], [3, 4, 3, 6, 7, 10, 12], [1, 2, 2, 8, 3, 3, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 4, 2, 9, 7, 1, 5], [2, 5, 1, 1, 5, 10, 6], [2, 4, 1, 6, 2, 8, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 5, 2, 6, 8, 9, 6], [1, 6, 3, 4, 7, 3, 6], [1, 4, 7, 2, 4, 5, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 5, 1, 5, 5, 7, 11], [4, 2, 5, 4, 6, 8, 8], [5, 4, 1, 1, 6, 4, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 6, 3, 4, 8, 8, 10], [2, 2, 4, 1, 8, 8, 11], [1, 5, 1, 6, 4, 4, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 2, 5, 5, 8, 5, 7], [1, 2, 5, 2, 4, 4, 10], [3, 5, 6, 3, 5, 9, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 3, 7, 3, 10, 1, 3], [5, 3, 2, 5, 2, 9, 3], [1, 6, 5, 6, 4, 9, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 3, 1, 6, 3, 5, 10], [1, 1, 6, 7, 7, 6, 11], [5, 3, 7, 4, 2, 9, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 6, 8, 4, 2, 1, 2], [4, 4, 2, 4, 5, 2, 5], [4, 3, 6, 7, 7, 9, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 4, 1, 4, 4, 9, 5], [2, 4, 7, 3, 5, 2, 6], [4, 6, 1, 2, 7, 6, 4]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 1, 6, 8, 3, 10, 2], [4, 2, 2, 8, 9, 8, 10], [2, 6, 3, 2, 7, 1, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 2, 7, 4, 7, 2, 1], [5, 6, 5, 2, 6, 3, 2], [1, 5, 5, 3, 2, 4, 4]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 6, 7, 6, 4, 4, 1], [5, 1, 5, 6, 9, 7, 11], [1, 3, 6, 5, 6, 9, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 6, 1, 1, 3, 5, 4], [3, 6, 5, 2, 7, 5, 7], [1, 6, 1, 7, 4, 5, 8]) == [6, 5]", "def check(extract_index_list):\n\tassert extract_index_list([4, 4, 1, 3, 5, 8, 9], [3, 5, 2, 8, 5, 1, 3], [4, 5, 5, 1, 8, 10, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 5, 3, 4, 11, 6, 8], [3, 1, 6, 3, 8, 8, 5], [5, 5, 4, 8, 6, 10, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 3, 6, 1, 5, 2, 10], [5, 3, 2, 4, 2, 2, 4], [2, 5, 4, 7, 2, 2, 2]) == [2]", "def check(extract_index_list):\n\tassert extract_index_list([1, 2, 6, 2, 2, 8, 1], [3, 3, 4, 1, 2, 6, 6], [5, 1, 6, 5, 4, 8, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 5, 4, 7, 3, 2, 4], [1, 3, 7, 5, 3, 2, 9], [5, 1, 5, 3, 6, 8, 8]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 3, 5, 7, 3, 2, 8], [3, 5, 3, 8, 8, 5, 5], [5, 3, 3, 5, 8, 3, 11]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 6, 8, 3, 5, 10, 3], [1, 3, 6, 8, 6, 6, 11], [3, 1, 6, 7, 6, 5, 4]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 4, 8, 8, 5, 1, 4], [1, 6, 3, 7, 7, 1, 9], [4, 1, 5, 8, 1, 9, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 2, 2, 5, 10, 7, 11], [3, 6, 2, 5, 4, 6, 6], [3, 5, 1, 2, 6, 6, 2]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 2, 5, 2, 6, 5, 6], [5, 2, 2, 2, 3, 9, 8], [2, 2, 7, 1, 5, 1, 4]) == [2]", "def check(extract_index_list):\n\tassert extract_index_list([2, 3, 8, 9, 11, 3, 10], [4, 5, 7, 3, 3, 9, 3], [5, 1, 4, 7, 9, 10, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 2, 8, 1, 7, 2, 10], [5, 5, 4, 7, 2, 9, 10], [5, 2, 3, 4, 2, 8, 2]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 1, 2, 7, 3, 9, 7], [2, 6, 4, 2, 4, 8, 2], [4, 1, 1, 5, 6, 2, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 5, 3, 8, 9, 10, 11], [4, 1, 2, 4, 3, 7, 9], [3, 6, 4, 1, 5, 4, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 6, 6, 4, 11, 1, 8], [3, 4, 7, 5, 8, 8, 9], [5, 4, 6, 7, 5, 4, 11]) == []"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 0.9902, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, false, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 101, 102, 102, 102, 102], "completion": "from typing import List\nfrom typing import List\n\ndef extract_index_list(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    \"\"\"\n    Extracts common elements across three lists based on their indices.\n\n    Args:\n        list1 (List[int]): The first list of integers.\n        list2 (List[int]): The second list of integers.\n        list3 (List[int]): The third list of integers.\n\n    Returns:\n        List[int]: A list of common elements.\n    \"\"\"\n    # Initialize an empty list to store common elements\n    common_elements = []\n\n    # Determine the length of the shortest list to avoid index out of range\n    min_length = min(len(list1), len(list2), len(list3))\n\n    # Iterate through the lists up to the length of the shortest list\n    for i in range(min_length):\n        # Compare elements at the current index across all three lists\n        if list1[i] == list2[i] == list3[i]:\n            # If elements match and not already in result, add to result\n            if list1[i] not in common_elements:\n                common_elements.append(list1[i])\n\n    return common_elements\n", "passed": true, "pass": true, "pass_num": 9, "round": 417, "mutate_method": "expand_one2two", "parent_index": 429}
