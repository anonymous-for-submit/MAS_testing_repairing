{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 778, "prompt": "Write a function to pack consecutive duplicates of a given list elements into sublists. Consider edge cases where the list is empty or contains a single element, as these may require special handling.", "code": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]", "test_imports": [], "test_list": ["assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]", "assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]", "assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]", "assert pack_consecutive_duplicates([1, 4, 2, 4, 5, 8, 8, 1, 3, 1, 6, 9, 8, 14, 9, 4]) == [[1], [4], [2], [4], [5], [8, 8], [1], [3], [1], [6], [9], [8], [14], [9], [4]]", "assert pack_consecutive_duplicates([4, 1, 2, 7, 8, 5, 7, 4, 2, 4, 7, 3, 13, 7, 3, 9]) == [[4], [1], [2], [7], [8], [5], [7], [4], [2], [4], [7], [3], [13], [7], [3], [9]]", "assert pack_consecutive_duplicates([5, 5, 5, 3, 5, 3, 1, 1, 8, 5, 4, 2, 13, 4, 6, 4]) == [[5, 5, 5], [3], [5], [3], [1, 1], [8], [5], [4], [2], [13], [4], [6], [4]]", "assert pack_consecutive_duplicates([2, 4, 2, 6, 1, 7, 6, 2, 8, 6, 1, 2, 11, 11, 9, 3]) == [[2], [4], [2], [6], [1], [7], [6], [2], [8], [6], [1], [2], [11, 11], [9], [3]]", "assert pack_consecutive_duplicates([1, 1, 2, 5, 5, 2, 9, 5, 5, 10, 7, 11, 12, 14, 7, 3]) == [[1, 1], [2], [5, 5], [2], [9], [5, 5], [10], [7], [11], [12], [14], [7], [3]]", "assert pack_consecutive_duplicates([3, 2, 4, 6, 5, 3, 1, 5, 9, 4, 10, 11, 10, 13, 2, 7]) == [[3], [2], [4], [6], [5], [3], [1], [5], [9], [4], [10], [11], [10], [13], [2], [7]]", "assert pack_consecutive_duplicates([1, 2, 6, 6, 7, 5, 3, 8, 11, 11, 10, 8, 4, 13, 3, 8]) == [[1], [2], [6, 6], [7], [5], [3], [8], [11, 11], [10], [8], [4], [13], [3], [8]]", "assert pack_consecutive_duplicates([4, 5, 5, 1, 5, 3, 6, 7, 5, 7, 3, 9, 9, 9, 5, 8]) == [[4], [5, 5], [1], [5], [3], [6], [7], [5], [7], [3], [9, 9, 9], [5], [8]]", "assert pack_consecutive_duplicates([5, 4, 5, 1, 5, 4, 2, 1, 4, 8, 11, 6, 9, 10, 7, 9]) == [[5], [4], [5], [1], [5], [4], [2], [1], [4], [8], [11], [6], [9], [10], [7], [9]]", "assert pack_consecutive_duplicates([4, 4, 5, 1, 6, 9, 3, 7, 10, 2, 7, 3, 5, 6, 6, 2]) == [[4, 4], [5], [1], [6], [9], [3], [7], [10], [2], [7], [3], [5], [6, 6], [2]]", "assert pack_consecutive_duplicates([2, 5, 4, 4, 2, 1, 1, 8, 3, 9, 11, 5, 5, 5, 8, 7]) == [[2], [5], [4, 4], [2], [1, 1], [8], [3], [9], [11], [5, 5, 5], [8], [7]]", "assert pack_consecutive_duplicates([2, 1, 5, 3, 3, 9, 3, 1, 1, 7, 9, 10, 4, 5, 8, 6]) == [[2], [1], [5], [3, 3], [9], [3], [1, 1], [7], [9], [10], [4], [5], [8], [6]]", "assert pack_consecutive_duplicates([1, 3, 1, 5, 4, 4, 8, 9, 10, 1, 7, 3, 6, 14, 7, 8]) == [[1], [3], [1], [5], [4, 4], [8], [9], [10], [1], [7], [3], [6], [14], [7], [8]]", "assert pack_consecutive_duplicates([4, 3, 2, 5, 4, 9, 9, 8, 8, 9, 5, 6, 4, 4, 8, 2]) == [[4], [3], [2], [5], [4], [9, 9], [8, 8], [9], [5], [6], [4, 4], [8], [2]]", "assert pack_consecutive_duplicates([5, 4, 1, 5, 1, 2, 5, 4, 5, 1, 7, 9, 9, 7, 2, 3]) == [[5], [4], [1], [5], [1], [2], [5], [4], [5], [1], [7], [9, 9], [7], [2], [3]]", "assert pack_consecutive_duplicates([2, 1, 4, 4, 1, 4, 5, 8, 6, 6, 7, 12, 8, 6, 3, 5]) == [[2], [1], [4, 4], [1], [4], [5], [8], [6, 6], [7], [12], [8], [6], [3], [5]]", "assert pack_consecutive_duplicates([3, 5, 3, 5, 6, 3, 3, 1, 6, 2, 5, 8, 9, 5, 5, 5]) == [[3], [5], [3], [5], [6], [3, 3], [1], [6], [2], [5], [8], [9], [5, 5, 5]]", "assert pack_consecutive_duplicates([3, 5, 6, 2, 2, 7, 8, 10, 9, 1, 1, 10, 8, 10, 4, 1]) == [[3], [5], [6], [2, 2], [7], [8], [10], [9], [1, 1], [10], [8], [10], [4], [1]]", "assert pack_consecutive_duplicates([1, 5, 5, 5, 1, 1, 8, 1, 2, 5, 4, 7, 13, 9, 5, 3]) == [[1], [5, 5, 5], [1, 1], [8], [1], [2], [5], [4], [7], [13], [9], [5], [3]]", "assert pack_consecutive_duplicates([1, 4, 5, 3, 2, 5, 5, 1, 8, 9, 10, 4, 5, 13, 4, 1]) == [[1], [4], [5], [3], [2], [5, 5], [1], [8], [9], [10], [4], [5], [13], [4], [1]]", "assert pack_consecutive_duplicates([5, 1, 3, 3, 2, 3, 7, 9, 8, 4, 9, 6, 8, 10, 4, 8]) == [[5], [1], [3, 3], [2], [3], [7], [9], [8], [4], [9], [6], [8], [10], [4], [8]]", "assert pack_consecutive_duplicates([3, 4, 2, 1, 5, 5, 7, 7, 6, 1, 3, 8, 6, 7, 2, 7]) == [[3], [4], [2], [1], [5, 5], [7, 7], [6], [1], [3], [8], [6], [7], [2], [7]]", "assert pack_consecutive_duplicates([2, 4, 4, 4, 2, 7, 1, 9, 11, 11, 2, 6, 12, 9, 5, 5]) == [[2], [4, 4, 4], [2], [7], [1], [9], [11, 11], [2], [6], [12], [9], [5, 5]]", "assert pack_consecutive_duplicates([4, 1, 2, 4, 6, 2, 3, 3, 2, 4, 10, 8, 6, 8, 2, 9]) == [[4], [1], [2], [4], [6], [2], [3, 3], [2], [4], [10], [8], [6], [8], [2], [9]]", "assert pack_consecutive_duplicates([5, 2, 5, 5, 6, 8, 9, 7, 2, 4, 7, 2, 7, 12, 5, 9]) == [[5], [2], [5, 5], [6], [8], [9], [7], [2], [4], [7], [2], [7], [12], [5], [9]]", "assert pack_consecutive_duplicates([4, 4, 3, 3, 4, 8, 9, 3, 4, 11, 3, 9, 9, 8, 7, 6]) == [[4, 4], [3, 3], [4], [8], [9], [3], [4], [11], [3], [9, 9], [8], [7], [6]]", "assert pack_consecutive_duplicates([4, 5, 6, 7, 5, 8, 2, 10, 11, 8, 7, 12, 11, 13, 8, 4]) == [[4], [5], [6], [7], [5], [8], [2], [10], [11], [8], [7], [12], [11], [13], [8], [4]]", "assert pack_consecutive_duplicates([2, 5, 4, 2, 6, 9, 6, 2, 4, 2, 4, 5, 3, 9, 3, 5]) == [[2], [5], [4], [2], [6], [9], [6], [2], [4], [2], [4], [5], [3], [9], [3], [5]]", "assert pack_consecutive_duplicates([5, 2, 4, 6, 6, 7, 1, 1, 1, 10, 11, 9, 10, 5, 2, 1]) == [[5], [2], [4], [6, 6], [7], [1, 1, 1], [10], [11], [9], [10], [5], [2], [1]]", "assert pack_consecutive_duplicates([4, 2, 4, 2, 8, 9, 2, 4, 6, 3, 4, 12, 5, 6, 6, 3]) == [[4], [2], [4], [2], [8], [9], [2], [4], [6], [3], [4], [12], [5], [6, 6], [3]]", "assert pack_consecutive_duplicates([4, 3, 1, 4, 4, 4, 1, 8, 10, 6, 9, 5, 3, 6, 7, 7]) == [[4], [3], [1], [4, 4, 4], [1], [8], [10], [6], [9], [5], [3], [6], [7, 7]]", "assert pack_consecutive_duplicates([2, 3, 4, 4, 3, 6, 8, 2, 2, 10, 8, 3, 10, 14, 8, 8]) == [[2], [3], [4, 4], [3], [6], [8], [2, 2], [10], [8], [3], [10], [14], [8, 8]]", "assert pack_consecutive_duplicates([2, 2, 2, 6, 6, 4, 6, 3, 2, 1, 10, 3, 5, 8, 7, 4]) == [[2, 2, 2], [6, 6], [4], [6], [3], [2], [1], [10], [3], [5], [8], [7], [4]]", "assert pack_consecutive_duplicates([14, 13, 13, 22, 15, 14, 13, 21, 22, 15, 14, 6]) == [[14], [13, 13], [22], [15], [14], [13], [21], [22], [15], [14], [6]]", "assert pack_consecutive_duplicates([14, 8, 20, 14, 15, 18, 13, 26, 27, 17, 21, 13]) == [[14], [8], [20], [14], [15], [18], [13], [26], [27], [17], [21], [13]]", "assert pack_consecutive_duplicates([15, 8, 14, 22, 22, 19, 18, 26, 23, 17, 13, 10]) == [[15], [8], [14], [22, 22], [19], [18], [26], [23], [17], [13], [10]]", "assert pack_consecutive_duplicates([13, 13, 16, 24, 21, 20, 19, 26, 27, 12, 19, 7]) == [[13, 13], [16], [24], [21], [20], [19], [26], [27], [12], [19], [7]]", "assert pack_consecutive_duplicates([10, 6, 13, 20, 18, 14, 12, 22, 21, 22, 14, 8]) == [[10], [6], [13], [20], [18], [14], [12], [22], [21], [22], [14], [8]]", "assert pack_consecutive_duplicates([8, 8, 20, 16, 21, 22, 21, 22, 28, 13, 15, 15]) == [[8, 8], [20], [16], [21], [22], [21], [22], [28], [13], [15, 15]]", "assert pack_consecutive_duplicates([6, 11, 12, 22, 19, 14, 21, 28, 26, 16, 13, 11]) == [[6], [11], [12], [22], [19], [14], [21], [28], [26], [16], [13], [11]]", "assert pack_consecutive_duplicates([10, 15, 13, 22, 20, 18, 13, 28, 26, 16, 14, 11]) == [[10], [15], [13], [22], [20], [18], [13], [28], [26], [16], [14], [11]]", "assert pack_consecutive_duplicates([11, 14, 16, 17, 22, 18, 14, 24, 27, 20, 19, 13]) == [[11], [14], [16], [17], [22], [18], [14], [24], [27], [20], [19], [13]]", "assert pack_consecutive_duplicates([13, 5, 19, 21, 14, 21, 21, 26, 31, 16, 17, 10]) == [[13], [5], [19], [21], [14], [21, 21], [26], [31], [16], [17], [10]]", "assert pack_consecutive_duplicates([8, 15, 12, 22, 14, 21, 18, 25, 29, 12, 20, 9]) == [[8], [15], [12], [22], [14], [21], [18], [25], [29], [12], [20], [9]]", "assert pack_consecutive_duplicates([6, 13, 12, 15, 21, 18, 15, 28, 24, 22, 21, 11]) == [[6], [13], [12], [15], [21], [18], [15], [28], [24], [22], [21], [11]]", "assert pack_consecutive_duplicates([14, 7, 15, 19, 22, 16, 20, 24, 31, 13, 22, 10]) == [[14], [7], [15], [19], [22], [16], [20], [24], [31], [13], [22], [10]]", "assert pack_consecutive_duplicates([6, 14, 14, 15, 17, 23, 22, 30, 25, 21, 17, 11]) == [[6], [14, 14], [15], [17], [23], [22], [30], [25], [21], [17], [11]]", "assert pack_consecutive_duplicates([5, 8, 11, 15, 19, 23, 12, 30, 21, 20, 22, 11]) == [[5], [8], [11], [15], [19], [23], [12], [30], [21], [20], [22], [11]]", "assert pack_consecutive_duplicates([10, 10, 12, 22, 16, 19, 20, 30, 22, 12, 14, 12]) == [[10, 10], [12], [22], [16], [19], [20], [30], [22], [12], [14], [12]]", "assert pack_consecutive_duplicates([13, 14, 15, 17, 13, 23, 17, 23, 31, 15, 17, 11]) == [[13], [14], [15], [17], [13], [23], [17], [23], [31], [15], [17], [11]]", "assert pack_consecutive_duplicates([5, 15, 20, 14, 20, 20, 15, 26, 25, 15, 16, 11]) == [[5], [15], [20], [14], [20, 20], [15], [26], [25], [15], [16], [11]]", "assert pack_consecutive_duplicates([7, 6, 19, 24, 17, 22, 17, 29, 29, 14, 21, 14]) == [[7], [6], [19], [24], [17], [22], [17], [29, 29], [14], [21], [14]]", "assert pack_consecutive_duplicates([11, 5, 19, 21, 18, 18, 19, 31, 28, 17, 18, 12]) == [[11], [5], [19], [21], [18, 18], [19], [31], [28], [17], [18], [12]]", "assert pack_consecutive_duplicates([12, 12, 14, 17, 21, 19, 22, 27, 26, 19, 19, 6]) == [[12, 12], [14], [17], [21], [19], [22], [27], [26], [19, 19], [6]]", "assert pack_consecutive_duplicates([11, 6, 15, 14, 16, 21, 17, 22, 27, 16, 14, 7]) == [[11], [6], [15], [14], [16], [21], [17], [22], [27], [16], [14], [7]]", "assert pack_consecutive_duplicates([11, 11, 18, 16, 14, 15, 15, 21, 27, 18, 16, 9]) == [[11, 11], [18], [16], [14], [15, 15], [21], [27], [18], [16], [9]]", "assert pack_consecutive_duplicates([11, 5, 14, 15, 22, 20, 15, 31, 23, 15, 17, 15]) == [[11], [5], [14], [15], [22], [20], [15], [31], [23], [15], [17], [15]]", "assert pack_consecutive_duplicates([13, 7, 11, 17, 19, 22, 19, 23, 26, 16, 19, 7]) == [[13], [7], [11], [17], [19], [22], [19], [23], [26], [16], [19], [7]]", "assert pack_consecutive_duplicates([15, 15, 19, 17, 22, 14, 18, 28, 22, 18, 13, 13]) == [[15, 15], [19], [17], [22], [14], [18], [28], [22], [18], [13, 13]]", "assert pack_consecutive_duplicates([15, 10, 12, 24, 19, 20, 19, 23, 29, 22, 20, 6]) == [[15], [10], [12], [24], [19], [20], [19], [23], [29], [22], [20], [6]]", "assert pack_consecutive_duplicates([8, 13, 19, 21, 23, 13, 18, 22, 24, 22, 13, 8]) == [[8], [13], [19], [21], [23], [13], [18], [22], [24], [22], [13], [8]]", "assert pack_consecutive_duplicates([10, 15, 16, 20, 19, 23, 13, 22, 23, 17, 20, 15]) == [[10], [15], [16], [20], [19], [23], [13], [22], [23], [17], [20], [15]]", "assert pack_consecutive_duplicates([14, 15, 17, 16, 19, 22, 17, 31, 27, 16, 14, 15]) == [[14], [15], [17], [16], [19], [22], [17], [31], [27], [16], [14], [15]]", "assert pack_consecutive_duplicates([14, 5, 10, 19, 18, 19, 22, 25, 29, 19, 14, 14]) == [[14], [5], [10], [19], [18], [19], [22], [25], [29], [19], [14, 14]]", "assert pack_consecutive_duplicates([14, 9, 19, 21, 13, 22, 15, 30, 30, 19, 16, 6]) == [[14], [9], [19], [21], [13], [22], [15], [30, 30], [19], [16], [6]]", "assert pack_consecutive_duplicates([10, 7, 17, 22, 23, 16, 15, 30, 21, 12, 23, 11]) == [[10], [7], [17], [22], [23], [16], [15], [30], [21], [12], [23], [11]]", "assert pack_consecutive_duplicates(['o', 'q', 'b', 'l', 'a', 'x']) == [['o'], ['q'], ['b'], ['l'], ['a'], ['x']]", "assert pack_consecutive_duplicates(['z', 'v', 'd', 'c', 'w', 'e']) == [['z'], ['v'], ['d'], ['c'], ['w'], ['e']]", "assert pack_consecutive_duplicates(['j', 'u', 'o', 'm', 'y', 't']) == [['j'], ['u'], ['o'], ['m'], ['y'], ['t']]", "assert pack_consecutive_duplicates(['q', 'v', 'z', 'd', 'l', 'i']) == [['q'], ['v'], ['z'], ['d'], ['l'], ['i']]", "assert pack_consecutive_duplicates(['e', 't', 'q', 'y', 'x', 'j']) == [['e'], ['t'], ['q'], ['y'], ['x'], ['j']]", "assert pack_consecutive_duplicates(['t', 'o', 'u', 'x', 'n', 'z']) == [['t'], ['o'], ['u'], ['x'], ['n'], ['z']]", "assert pack_consecutive_duplicates(['x', 'd', 'n', 'o', 'l', 'z']) == [['x'], ['d'], ['n'], ['o'], ['l'], ['z']]", "assert pack_consecutive_duplicates(['m', 'l', 'l', 'x', 'c', 'n']) == [['m'], ['l', 'l'], ['x'], ['c'], ['n']]", "assert pack_consecutive_duplicates(['j', 'j', 'n', 'f', 'v', 'd']) == [['j', 'j'], ['n'], ['f'], ['v'], ['d']]", "assert pack_consecutive_duplicates(['m', 'f', 'z', 'j', 'i', 'k']) == [['m'], ['f'], ['z'], ['j'], ['i'], ['k']]", "assert pack_consecutive_duplicates(['f', 'z', 'u', 'k', 'z', 'v']) == [['f'], ['z'], ['u'], ['k'], ['z'], ['v']]", "assert pack_consecutive_duplicates(['a', 'n', 'y', 'w', 'q', 'm']) == [['a'], ['n'], ['y'], ['w'], ['q'], ['m']]", "assert pack_consecutive_duplicates(['y', 'o', 'r', 'o', 'r', 'u']) == [['y'], ['o'], ['r'], ['o'], ['r'], ['u']]", "assert pack_consecutive_duplicates(['m', 'p', 't', 't', 'f', 'v']) == [['m'], ['p'], ['t', 't'], ['f'], ['v']]", "assert pack_consecutive_duplicates(['n', 's', 'n', 'i', 'g', 'b']) == [['n'], ['s'], ['n'], ['i'], ['g'], ['b']]", "assert pack_consecutive_duplicates(['l', 'l', 'v', 'v', 'x', 'r']) == [['l', 'l'], ['v', 'v'], ['x'], ['r']]", "assert pack_consecutive_duplicates(['y', 'l', 'l', 'w', 'c', 'v']) == [['y'], ['l', 'l'], ['w'], ['c'], ['v']]", "assert pack_consecutive_duplicates(['h', 't', 'z', 'k', 's', 'r']) == [['h'], ['t'], ['z'], ['k'], ['s'], ['r']]", "assert pack_consecutive_duplicates(['v', 'g', 'c', 'k', 'w', 'l']) == [['v'], ['g'], ['c'], ['k'], ['w'], ['l']]", "assert pack_consecutive_duplicates(['k', 'e', 'm', 'o', 'e', 'v']) == [['k'], ['e'], ['m'], ['o'], ['e'], ['v']]", "assert pack_consecutive_duplicates(['f', 'h', 'j', 'q', 'n', 'g']) == [['f'], ['h'], ['j'], ['q'], ['n'], ['g']]", "assert pack_consecutive_duplicates(['e', 'v', 'w', 'j', 'a', 'u']) == [['e'], ['v'], ['w'], ['j'], ['a'], ['u']]", "assert pack_consecutive_duplicates(['p', 'm', 'x', 'o', 'i', 'a']) == [['p'], ['m'], ['x'], ['o'], ['i'], ['a']]", "assert pack_consecutive_duplicates(['y', 'c', 'd', 'p', 'x', 'a']) == [['y'], ['c'], ['d'], ['p'], ['x'], ['a']]", "assert pack_consecutive_duplicates(['q', 'p', 'v', 'j', 'k', 'q']) == [['q'], ['p'], ['v'], ['j'], ['k'], ['q']]", "assert pack_consecutive_duplicates(['p', 'j', 'z', 't', 'g', 'q']) == [['p'], ['j'], ['z'], ['t'], ['g'], ['q']]", "assert pack_consecutive_duplicates(['l', 'c', 'j', 'q', 'n', 'a']) == [['l'], ['c'], ['j'], ['q'], ['n'], ['a']]", "assert pack_consecutive_duplicates(['d', 'w', 'r', 'g', 'h', 'y']) == [['d'], ['w'], ['r'], ['g'], ['h'], ['y']]", "assert pack_consecutive_duplicates(['j', 'a', 'z', 'p', 'b', 'u']) == [['j'], ['a'], ['z'], ['p'], ['b'], ['u']]", "assert pack_consecutive_duplicates(['j', 'e', 'l', 'u', 't', 'x']) == [['j'], ['e'], ['l'], ['u'], ['t'], ['x']]", "assert pack_consecutive_duplicates(['c', 'g', 'z', 'f', 'g', 'a']) == [['c'], ['g'], ['z'], ['f'], ['g'], ['a']]", "assert pack_consecutive_duplicates(['j', 'r', 's', 'f', 'g', 'u']) == [['j'], ['r'], ['s'], ['f'], ['g'], ['u']]", "assert pack_consecutive_duplicates(['w', 'g', 'o', 'b', 'i', 'f']) == [['w'], ['g'], ['o'], ['b'], ['i'], ['f']]"], "entry_point": "pack_consecutive_duplicates", "repair_prompt": ["Write a function pack_consecutive_duplicates to pack consecutive duplicates of a given list elements into sublists. Consider edge cases where the list is empty or contains a single element, as these may require special handling.\npack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n"], "completions": ["from typing import List\nfrom typing import List, Any\n\ndef pack_consecutive_duplicates(lst: List[Any]) -> List[List[Any]]:\n    if not lst:\n        return []\n    \n    result = []\n    current_group = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            current_group.append(lst[i])\n        else:\n            result.append(current_group)\n            current_group = [lst[i]]\n    \n    result.append(current_group)\n    return result\n", "from typing import List\nfrom typing import List, Any\n\ndef pack_consecutive_duplicates(input_list: List[Any]) -> List[List[Any]]:\n    \"\"\"\n    Packs consecutive duplicates into sublists.\n    \n    Args:\n        input_list (List[Any]): The input list containing elements.\n        \n    Returns:\n        List[List[Any]]: A list of lists where each sublist contains consecutive duplicates.\n    \"\"\"\n    if not input_list:\n        return [[]]\n    \n    result = []\n    temp_list = []\n    \n    for i in range(len(input_list)):\n        if i == 0 or input_list[i] == input_list[i - 1]:\n            temp_list.append(input_list[i])\n        else:\n            result.append(temp_list)\n            temp_list = [input_list[i]]\n    \n    result.append(temp_list)\n    return result\n", "from typing import List\nfrom typing import List, Any\n\ndef pack_consecutive_duplicates(input_list: List[Any]) -> List[List[Any]]:\n    if not input_list:\n        return []\n    \n    result = []\n    temp_sublist = [input_list[0]]\n    \n    for i in range(1, len(input_list)):\n        if input_list[i] == input_list[i - 1]:\n            temp_sublist.append(input_list[i])\n        else:\n            result.append(temp_sublist)\n            temp_sublist = [input_list[i]]\n    \n    result.append(temp_sublist)\n    return result\n", "from typing import List\nfrom typing import List, Any\n\ndef pack_consecutive_duplicates(lst: List[Any]) -> List[List[Any]]:\n    if not lst:\n        return []\n    \n    result = []\n    current_sublist = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            current_sublist.append(lst[i])\n        else:\n            result.append(current_sublist)\n            current_sublist = [lst[i]]\n    \n    result.append(current_sublist)\n    return result\n", "from typing import List\n## main.py\n\ndef pack_consecutive_duplicates(lst: list) -> list:\n    \"\"\"\n    Packs consecutive duplicates into sublists.\n\n    Args:\n        lst (list): The input list containing elements.\n\n    Returns:\n        list: A list of lists where each sublist contains consecutive duplicates.\n    \"\"\"\n    if not lst:\n        return []\n    if len(lst) == 1:\n        return [lst]\n    \n    result = []\n    current_sublist = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            current_sublist.append(lst[i])\n        else:\n            result.append(current_sublist)\n            current_sublist = [lst[i]]\n    \n    result.append(current_sublist)\n    return result\n", "from typing import List\nfrom typing import List\n\ndef pack_consecutive_duplicates(lst: List[int]) -> List[List[int]]:\n    \"\"\"\n    The function takes a list of integers and returns a list of lists containing consecutive duplicates.\n    \n    Args:\n        lst (List[int]): A list of integers.\n    \n    Returns:\n        List[List[int]]: A list of lists containing consecutive duplicates.\n    \"\"\"\n    if not lst:\n        return []\n\n    result = []\n    current_element = None\n    current_count = 0\n\n    for i in range(len(lst)):\n        if current_element is None:\n            current_element = lst[i]\n            current_count = 1\n            result.append([current_element])\n        elif lst[i] == current_element:\n            current_count += 1\n            result[-1].append(current_element)\n        else:\n            current_element = lst[i]\n            current_count = 1\n            result.append([current_element])\n\n    return result\n", "from typing import List\nfrom typing import List, Any\n\ndef pack_consecutive_duplicates(lst: List[Any]) -> List[List[Any]]:\n    if not lst:\n        return []\n    \n    result = []\n    current_sublist = []\n    \n    for i in range(len(lst)):\n        if not current_sublist or lst[i] != current_sublist[-1]:\n            if current_sublist:\n                result.append(current_sublist)\n            current_sublist = [lst[i]]\n        else:\n            current_sublist.append(lst[i])\n    \n    if current_sublist:\n        result.append(current_sublist)\n    \n    return result\n", "from typing import List\nfrom typing import List, Any\n\ndef pack_consecutive_duplicates(input_list: List[Any]) -> List[List[Any]]:\n    if not input_list:\n        return []\n    \n    result = []\n    current_sublist = [input_list[0]]\n    \n    for i in range(1, len(input_list)):\n        if input_list[i] == input_list[i - 1]:\n            current_sublist.append(input_list[i])\n        else:\n            result.append(current_sublist)\n            current_sublist = [input_list[i]]\n    \n    result.append(current_sublist)\n    return result\n", "from typing import List\nfrom typing import List, Any\n\ndef pack_consecutive_duplicates(input_list: List[Any]) -> List[List[Any]]:\n    if not input_list:\n        return []\n    \n    result = []\n    current_group = []\n    \n    for i in range(len(input_list)):\n        if not current_group or input_list[i] == current_group[-1]:\n            current_group.append(input_list[i])\n        else:\n            result.append(current_group)\n            current_group = [input_list[i]]\n    \n    if current_group:\n        result.append(current_group)\n    \n    return result\n", "from typing import List\n## main.py\n\ndef pack_consecutive_duplicates(lst: list) -> list:\n    if not lst:\n        return [[x] for x in lst]\n    if len(lst) == 1:\n        return lst\n    \n    packed_list = []\n    current_pack = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            current_pack.append(lst[i])\n        else:\n            packed_list.append(current_pack)\n            current_pack = [lst[i]]\n    \n    packed_list.append(current_pack)\n    return packed_list\n"], "plans": ["requirement analysis:\nThe function 'pack_consecutive_duplicates' needs to group consecutive duplicates in a list into sublists. This function should handle edge cases such as an empty list or a list with a single element. The output should be a list of lists, where each sublist contains consecutive duplicates.\nrequirement pool:\n- Implement the function 'pack_consecutive_duplicates' to meet the original requirements.\n- Ensure the function handles edge cases such as empty lists and lists with a single element.\n- Design a user-friendly interface for the application.\nTo implement the 'pack_consecutive_duplicates' function, we will use a simple and efficient approach. We will iterate through the list, compare each element with the next one, and group consecutive duplicates into sublists. Special handling will be added for edge cases such as an empty list or a list with a single element.\n", "requirement analysis:\nThe function should take a list as input and return a list of sublists where each sublist contains consecutive duplicates of the elements from the input list. Special handling is required for empty lists and lists with a single element to ensure the function does not produce unnecessary output.\nrequirement pool:\n- The main code should efficiently handle consecutive duplicates and return the correct output.\n- Special handling for edge cases such as empty lists and lists with a single element.\n- Ensure the function is user-friendly and the output is easy to understand.\nTo implement the function `pack_consecutive_duplicates`, we will use a simple and efficient approach. We will iterate through the input list and compare each element with the next one. If they are the same, we will add them to a temporary sublist. If they are different, we will finalize the current sublist and start a new one. Special handling will be added for edge cases such as empty lists and lists with a single element.\n", "requirement analysis:\nThe function should take a list as input and return a list of sublists where each sublist contains consecutive duplicates of the elements. Special handling is required for empty lists and lists with a single element to ensure the function does not fail or return incorrect results.\nrequirement pool:\n- The main code should correctly pack consecutive duplicates into sublists.\n- The function should handle edge cases such as empty lists and lists with a single element.\n- The function should be efficient and perform well even with large lists.\nTo implement the function `pack_consecutive_duplicates`, we will use a simple and efficient approach. We will iterate through the input list and compare each element with the next one. If they are the same, we will add them to a temporary sublist. If they are different, we will finalize the current sublist and start a new one. This approach ensures that we correctly pack consecutive duplicates into sublists. For edge cases, we will handle empty lists and lists with a single element separately to avoid unnecessary processing.\n", "requirement analysis:\nThe function should take a list as input and return a list of sublists where each sublist contains consecutive duplicates of the elements. Special handling is required for empty lists and lists with a single element to ensure the function does not fail or return incorrect results.\nrequirement pool:\n- The main code should correctly pack consecutive duplicates into sublists.\n- Special handling for empty lists and lists with a single element.\n- Ensure the function is efficient and can handle large lists.\nTo implement the function `pack_consecutive_duplicates`, we will use a simple and efficient approach. We will iterate through the input list and compare each element with the next one. If they are the same, we will add them to a temporary sublist. If they are different, we will finalize the current sublist and start a new one. Special handling will be added for empty lists and lists with a single element to ensure the function does not fail or return incorrect results.\n", "requirement analysis:\nThe function 'pack_consecutive_duplicates' is designed to group consecutive duplicates in a list into sublists. This is a common task in data processing and should be handled efficiently. Special attention should be given to handling edge cases such as an empty list or a list with a single element.\nrequirement pool:\n- The main code should handle the packing of consecutive duplicates efficiently.\n- Special handling for edge cases such as empty lists and lists with a single element.\n- Ensure the function is optimized for performance.\n- Implement a clear and user-friendly interface for the function.\nTo implement the 'pack_consecutive_duplicates' function efficiently, we will use Python's built-in data structures and itertools module. The function will iterate through the list, compare each element with the next one, and group them into sublists whenever a duplicate is found. Special handling for edge cases such as empty lists and lists with a single element will be included to ensure robustness.\n", "requirement analysis:\nThe function should efficiently group consecutive duplicates into sublists. It should handle edge cases such as an empty list or a list with a single element. The output should be clear and easy to understand, providing a list of lists where each sublist contains consecutive duplicates.\nrequirement pool:\n- The main code should efficiently group consecutive duplicates into sublists.\n- Special handling for edge cases such as an empty list or a single element list.\n- Ensure the output is clear and easy to understand.\n- Optimize the function for both time and space complexity.\nTo implement the function `pack_consecutive_duplicates`, we will use a simple approach that iterates through the list while keeping track of the current element and its count. We will use a list to store the result and another list to temporarily store sublists of consecutive duplicates. This approach ensures efficiency in both time and space complexity.\n", "requirement analysis:\nThe function should take a list as input and return a list of sublists where each sublist contains consecutive duplicates of the elements. Special handling is required for empty lists and lists with a single element to ensure the function does not fail or return incorrect results.\nrequirement pool:\n- The main code should correctly pack consecutive duplicates into sublists.\n- The function should handle edge cases such as empty lists and lists with a single element.\n- The function should be efficient and handle large lists without performance issues.\nTo implement the function `pack_consecutive_duplicates`, we will use a straightforward approach that iterates through the input list and groups consecutive duplicates into sublists. This will involve checking each element against the previous one to determine if a new sublist should be started. Special handling will be added for empty lists and lists with a single element to ensure the function does not fail or return incorrect results.\n", "requirement analysis:\nThe function should take a list as input and return a list of sublists where each sublist contains consecutive duplicates of the elements. Special handling is required for empty lists and lists with a single element to ensure the function does not fail or return incorrect results.\nrequirement pool:\n- The main code should correctly pack consecutive duplicates into sublists.\n- The function should handle edge cases such as empty lists and lists with a single element.\n- The function should be efficient and perform well even with large lists.\nTo implement the function `pack_consecutive_duplicates`, we will use a simple and efficient approach. We will iterate through the input list and compare each element with the next one. If they are the same, we will add them to a temporary sublist. If they are different, we will finalize the current sublist and start a new one. This approach ensures that we correctly pack consecutive duplicates into sublists. Special handling for edge cases such as empty lists and lists with a single element will be added to ensure robustness.\n", "requirement analysis:\nThe function should take a list as input and return a list of sublists where each sublist contains consecutive duplicates of the elements. Special handling is required for empty lists and lists with a single element to ensure the function does not produce unnecessary output.\nrequirement pool:\n- The main code should efficiently pack consecutive duplicates into sublists.\n- Special handling for edge cases such as empty lists and lists with a single element.\n- Ensure the function is user-friendly and easy to understand.\n- Optimize the function for performance to handle large lists.\n- Design a clean and responsive UI for the function.\nTo implement the function `pack_consecutive_duplicates`, we will use Python's built-in data structures and simple iteration. The function will iterate through the input list, compare each element with the next one, and group them into sublists whenever a duplicate is found. Special handling will be added for edge cases such as empty lists and lists with a single element.\n", "requirement analysis:\nThe function should take a list as input and return a list of sublists where each sublist contains consecutive duplicates of the elements. Special handling is required for empty lists and lists with a single element to ensure the function does not fail or return incorrect results.\nrequirement pool:\n- The main code should correctly pack consecutive duplicates into sublists.\n- Special handling for empty lists and lists with a single element.\n- Ensure the function is efficient and can handle large lists.\n- Provide clear and concise documentation for the function.\n- Implement unit tests to verify the correctness of the function.\nTo implement the function `pack_consecutive_duplicates`, we will use Python's built-in data structures and simple logic to iterate through the input list and group consecutive duplicates. We will handle edge cases such as empty lists and lists with a single element by providing specific checks and return values.\n"], "test": ["def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([1, 4, 2, 4, 5, 8, 8, 1, 3, 1, 6, 9, 8, 14, 9, 4]) == [[1], [4], [2], [4], [5], [8, 8], [1], [3], [1], [6], [9], [8], [14], [9], [4]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([4, 1, 2, 7, 8, 5, 7, 4, 2, 4, 7, 3, 13, 7, 3, 9]) == [[4], [1], [2], [7], [8], [5], [7], [4], [2], [4], [7], [3], [13], [7], [3], [9]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([5, 5, 5, 3, 5, 3, 1, 1, 8, 5, 4, 2, 13, 4, 6, 4]) == [[5, 5, 5], [3], [5], [3], [1, 1], [8], [5], [4], [2], [13], [4], [6], [4]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([2, 4, 2, 6, 1, 7, 6, 2, 8, 6, 1, 2, 11, 11, 9, 3]) == [[2], [4], [2], [6], [1], [7], [6], [2], [8], [6], [1], [2], [11, 11], [9], [3]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([1, 1, 2, 5, 5, 2, 9, 5, 5, 10, 7, 11, 12, 14, 7, 3]) == [[1, 1], [2], [5, 5], [2], [9], [5, 5], [10], [7], [11], [12], [14], [7], [3]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([3, 2, 4, 6, 5, 3, 1, 5, 9, 4, 10, 11, 10, 13, 2, 7]) == [[3], [2], [4], [6], [5], [3], [1], [5], [9], [4], [10], [11], [10], [13], [2], [7]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([1, 2, 6, 6, 7, 5, 3, 8, 11, 11, 10, 8, 4, 13, 3, 8]) == [[1], [2], [6, 6], [7], [5], [3], [8], [11, 11], [10], [8], [4], [13], [3], [8]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([4, 5, 5, 1, 5, 3, 6, 7, 5, 7, 3, 9, 9, 9, 5, 8]) == [[4], [5, 5], [1], [5], [3], [6], [7], [5], [7], [3], [9, 9, 9], [5], [8]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([5, 4, 5, 1, 5, 4, 2, 1, 4, 8, 11, 6, 9, 10, 7, 9]) == [[5], [4], [5], [1], [5], [4], [2], [1], [4], [8], [11], [6], [9], [10], [7], [9]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([4, 4, 5, 1, 6, 9, 3, 7, 10, 2, 7, 3, 5, 6, 6, 2]) == [[4, 4], [5], [1], [6], [9], [3], [7], [10], [2], [7], [3], [5], [6, 6], [2]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([2, 5, 4, 4, 2, 1, 1, 8, 3, 9, 11, 5, 5, 5, 8, 7]) == [[2], [5], [4, 4], [2], [1, 1], [8], [3], [9], [11], [5, 5, 5], [8], [7]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([2, 1, 5, 3, 3, 9, 3, 1, 1, 7, 9, 10, 4, 5, 8, 6]) == [[2], [1], [5], [3, 3], [9], [3], [1, 1], [7], [9], [10], [4], [5], [8], [6]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([1, 3, 1, 5, 4, 4, 8, 9, 10, 1, 7, 3, 6, 14, 7, 8]) == [[1], [3], [1], [5], [4, 4], [8], [9], [10], [1], [7], [3], [6], [14], [7], [8]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([4, 3, 2, 5, 4, 9, 9, 8, 8, 9, 5, 6, 4, 4, 8, 2]) == [[4], [3], [2], [5], [4], [9, 9], [8, 8], [9], [5], [6], [4, 4], [8], [2]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([5, 4, 1, 5, 1, 2, 5, 4, 5, 1, 7, 9, 9, 7, 2, 3]) == [[5], [4], [1], [5], [1], [2], [5], [4], [5], [1], [7], [9, 9], [7], [2], [3]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([2, 1, 4, 4, 1, 4, 5, 8, 6, 6, 7, 12, 8, 6, 3, 5]) == [[2], [1], [4, 4], [1], [4], [5], [8], [6, 6], [7], [12], [8], [6], [3], [5]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([3, 5, 3, 5, 6, 3, 3, 1, 6, 2, 5, 8, 9, 5, 5, 5]) == [[3], [5], [3], [5], [6], [3, 3], [1], [6], [2], [5], [8], [9], [5, 5, 5]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([3, 5, 6, 2, 2, 7, 8, 10, 9, 1, 1, 10, 8, 10, 4, 1]) == [[3], [5], [6], [2, 2], [7], [8], [10], [9], [1, 1], [10], [8], [10], [4], [1]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([1, 5, 5, 5, 1, 1, 8, 1, 2, 5, 4, 7, 13, 9, 5, 3]) == [[1], [5, 5, 5], [1, 1], [8], [1], [2], [5], [4], [7], [13], [9], [5], [3]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([1, 4, 5, 3, 2, 5, 5, 1, 8, 9, 10, 4, 5, 13, 4, 1]) == [[1], [4], [5], [3], [2], [5, 5], [1], [8], [9], [10], [4], [5], [13], [4], [1]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([5, 1, 3, 3, 2, 3, 7, 9, 8, 4, 9, 6, 8, 10, 4, 8]) == [[5], [1], [3, 3], [2], [3], [7], [9], [8], [4], [9], [6], [8], [10], [4], [8]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([3, 4, 2, 1, 5, 5, 7, 7, 6, 1, 3, 8, 6, 7, 2, 7]) == [[3], [4], [2], [1], [5, 5], [7, 7], [6], [1], [3], [8], [6], [7], [2], [7]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([2, 4, 4, 4, 2, 7, 1, 9, 11, 11, 2, 6, 12, 9, 5, 5]) == [[2], [4, 4, 4], [2], [7], [1], [9], [11, 11], [2], [6], [12], [9], [5, 5]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([4, 1, 2, 4, 6, 2, 3, 3, 2, 4, 10, 8, 6, 8, 2, 9]) == [[4], [1], [2], [4], [6], [2], [3, 3], [2], [4], [10], [8], [6], [8], [2], [9]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([5, 2, 5, 5, 6, 8, 9, 7, 2, 4, 7, 2, 7, 12, 5, 9]) == [[5], [2], [5, 5], [6], [8], [9], [7], [2], [4], [7], [2], [7], [12], [5], [9]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([4, 4, 3, 3, 4, 8, 9, 3, 4, 11, 3, 9, 9, 8, 7, 6]) == [[4, 4], [3, 3], [4], [8], [9], [3], [4], [11], [3], [9, 9], [8], [7], [6]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([4, 5, 6, 7, 5, 8, 2, 10, 11, 8, 7, 12, 11, 13, 8, 4]) == [[4], [5], [6], [7], [5], [8], [2], [10], [11], [8], [7], [12], [11], [13], [8], [4]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([2, 5, 4, 2, 6, 9, 6, 2, 4, 2, 4, 5, 3, 9, 3, 5]) == [[2], [5], [4], [2], [6], [9], [6], [2], [4], [2], [4], [5], [3], [9], [3], [5]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([5, 2, 4, 6, 6, 7, 1, 1, 1, 10, 11, 9, 10, 5, 2, 1]) == [[5], [2], [4], [6, 6], [7], [1, 1, 1], [10], [11], [9], [10], [5], [2], [1]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([4, 2, 4, 2, 8, 9, 2, 4, 6, 3, 4, 12, 5, 6, 6, 3]) == [[4], [2], [4], [2], [8], [9], [2], [4], [6], [3], [4], [12], [5], [6, 6], [3]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([4, 3, 1, 4, 4, 4, 1, 8, 10, 6, 9, 5, 3, 6, 7, 7]) == [[4], [3], [1], [4, 4, 4], [1], [8], [10], [6], [9], [5], [3], [6], [7, 7]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([2, 3, 4, 4, 3, 6, 8, 2, 2, 10, 8, 3, 10, 14, 8, 8]) == [[2], [3], [4, 4], [3], [6], [8], [2, 2], [10], [8], [3], [10], [14], [8, 8]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([2, 2, 2, 6, 6, 4, 6, 3, 2, 1, 10, 3, 5, 8, 7, 4]) == [[2, 2, 2], [6, 6], [4], [6], [3], [2], [1], [10], [3], [5], [8], [7], [4]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([14, 13, 13, 22, 15, 14, 13, 21, 22, 15, 14, 6]) == [[14], [13, 13], [22], [15], [14], [13], [21], [22], [15], [14], [6]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([14, 8, 20, 14, 15, 18, 13, 26, 27, 17, 21, 13]) == [[14], [8], [20], [14], [15], [18], [13], [26], [27], [17], [21], [13]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([15, 8, 14, 22, 22, 19, 18, 26, 23, 17, 13, 10]) == [[15], [8], [14], [22, 22], [19], [18], [26], [23], [17], [13], [10]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([13, 13, 16, 24, 21, 20, 19, 26, 27, 12, 19, 7]) == [[13, 13], [16], [24], [21], [20], [19], [26], [27], [12], [19], [7]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([10, 6, 13, 20, 18, 14, 12, 22, 21, 22, 14, 8]) == [[10], [6], [13], [20], [18], [14], [12], [22], [21], [22], [14], [8]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([8, 8, 20, 16, 21, 22, 21, 22, 28, 13, 15, 15]) == [[8, 8], [20], [16], [21], [22], [21], [22], [28], [13], [15, 15]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([6, 11, 12, 22, 19, 14, 21, 28, 26, 16, 13, 11]) == [[6], [11], [12], [22], [19], [14], [21], [28], [26], [16], [13], [11]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([10, 15, 13, 22, 20, 18, 13, 28, 26, 16, 14, 11]) == [[10], [15], [13], [22], [20], [18], [13], [28], [26], [16], [14], [11]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([11, 14, 16, 17, 22, 18, 14, 24, 27, 20, 19, 13]) == [[11], [14], [16], [17], [22], [18], [14], [24], [27], [20], [19], [13]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([13, 5, 19, 21, 14, 21, 21, 26, 31, 16, 17, 10]) == [[13], [5], [19], [21], [14], [21, 21], [26], [31], [16], [17], [10]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([8, 15, 12, 22, 14, 21, 18, 25, 29, 12, 20, 9]) == [[8], [15], [12], [22], [14], [21], [18], [25], [29], [12], [20], [9]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([6, 13, 12, 15, 21, 18, 15, 28, 24, 22, 21, 11]) == [[6], [13], [12], [15], [21], [18], [15], [28], [24], [22], [21], [11]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([14, 7, 15, 19, 22, 16, 20, 24, 31, 13, 22, 10]) == [[14], [7], [15], [19], [22], [16], [20], [24], [31], [13], [22], [10]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([6, 14, 14, 15, 17, 23, 22, 30, 25, 21, 17, 11]) == [[6], [14, 14], [15], [17], [23], [22], [30], [25], [21], [17], [11]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([5, 8, 11, 15, 19, 23, 12, 30, 21, 20, 22, 11]) == [[5], [8], [11], [15], [19], [23], [12], [30], [21], [20], [22], [11]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([10, 10, 12, 22, 16, 19, 20, 30, 22, 12, 14, 12]) == [[10, 10], [12], [22], [16], [19], [20], [30], [22], [12], [14], [12]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([13, 14, 15, 17, 13, 23, 17, 23, 31, 15, 17, 11]) == [[13], [14], [15], [17], [13], [23], [17], [23], [31], [15], [17], [11]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([5, 15, 20, 14, 20, 20, 15, 26, 25, 15, 16, 11]) == [[5], [15], [20], [14], [20, 20], [15], [26], [25], [15], [16], [11]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([7, 6, 19, 24, 17, 22, 17, 29, 29, 14, 21, 14]) == [[7], [6], [19], [24], [17], [22], [17], [29, 29], [14], [21], [14]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([11, 5, 19, 21, 18, 18, 19, 31, 28, 17, 18, 12]) == [[11], [5], [19], [21], [18, 18], [19], [31], [28], [17], [18], [12]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([12, 12, 14, 17, 21, 19, 22, 27, 26, 19, 19, 6]) == [[12, 12], [14], [17], [21], [19], [22], [27], [26], [19, 19], [6]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([11, 6, 15, 14, 16, 21, 17, 22, 27, 16, 14, 7]) == [[11], [6], [15], [14], [16], [21], [17], [22], [27], [16], [14], [7]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([11, 11, 18, 16, 14, 15, 15, 21, 27, 18, 16, 9]) == [[11, 11], [18], [16], [14], [15, 15], [21], [27], [18], [16], [9]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([11, 5, 14, 15, 22, 20, 15, 31, 23, 15, 17, 15]) == [[11], [5], [14], [15], [22], [20], [15], [31], [23], [15], [17], [15]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([13, 7, 11, 17, 19, 22, 19, 23, 26, 16, 19, 7]) == [[13], [7], [11], [17], [19], [22], [19], [23], [26], [16], [19], [7]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([15, 15, 19, 17, 22, 14, 18, 28, 22, 18, 13, 13]) == [[15, 15], [19], [17], [22], [14], [18], [28], [22], [18], [13, 13]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([15, 10, 12, 24, 19, 20, 19, 23, 29, 22, 20, 6]) == [[15], [10], [12], [24], [19], [20], [19], [23], [29], [22], [20], [6]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([8, 13, 19, 21, 23, 13, 18, 22, 24, 22, 13, 8]) == [[8], [13], [19], [21], [23], [13], [18], [22], [24], [22], [13], [8]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([10, 15, 16, 20, 19, 23, 13, 22, 23, 17, 20, 15]) == [[10], [15], [16], [20], [19], [23], [13], [22], [23], [17], [20], [15]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([14, 15, 17, 16, 19, 22, 17, 31, 27, 16, 14, 15]) == [[14], [15], [17], [16], [19], [22], [17], [31], [27], [16], [14], [15]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([14, 5, 10, 19, 18, 19, 22, 25, 29, 19, 14, 14]) == [[14], [5], [10], [19], [18], [19], [22], [25], [29], [19], [14, 14]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([14, 9, 19, 21, 13, 22, 15, 30, 30, 19, 16, 6]) == [[14], [9], [19], [21], [13], [22], [15], [30, 30], [19], [16], [6]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates([10, 7, 17, 22, 23, 16, 15, 30, 21, 12, 23, 11]) == [[10], [7], [17], [22], [23], [16], [15], [30], [21], [12], [23], [11]]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['o', 'q', 'b', 'l', 'a', 'x']) == [['o'], ['q'], ['b'], ['l'], ['a'], ['x']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['z', 'v', 'd', 'c', 'w', 'e']) == [['z'], ['v'], ['d'], ['c'], ['w'], ['e']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['j', 'u', 'o', 'm', 'y', 't']) == [['j'], ['u'], ['o'], ['m'], ['y'], ['t']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['q', 'v', 'z', 'd', 'l', 'i']) == [['q'], ['v'], ['z'], ['d'], ['l'], ['i']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['e', 't', 'q', 'y', 'x', 'j']) == [['e'], ['t'], ['q'], ['y'], ['x'], ['j']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['t', 'o', 'u', 'x', 'n', 'z']) == [['t'], ['o'], ['u'], ['x'], ['n'], ['z']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['x', 'd', 'n', 'o', 'l', 'z']) == [['x'], ['d'], ['n'], ['o'], ['l'], ['z']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['m', 'l', 'l', 'x', 'c', 'n']) == [['m'], ['l', 'l'], ['x'], ['c'], ['n']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['j', 'j', 'n', 'f', 'v', 'd']) == [['j', 'j'], ['n'], ['f'], ['v'], ['d']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['m', 'f', 'z', 'j', 'i', 'k']) == [['m'], ['f'], ['z'], ['j'], ['i'], ['k']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['f', 'z', 'u', 'k', 'z', 'v']) == [['f'], ['z'], ['u'], ['k'], ['z'], ['v']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['a', 'n', 'y', 'w', 'q', 'm']) == [['a'], ['n'], ['y'], ['w'], ['q'], ['m']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['y', 'o', 'r', 'o', 'r', 'u']) == [['y'], ['o'], ['r'], ['o'], ['r'], ['u']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['m', 'p', 't', 't', 'f', 'v']) == [['m'], ['p'], ['t', 't'], ['f'], ['v']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['n', 's', 'n', 'i', 'g', 'b']) == [['n'], ['s'], ['n'], ['i'], ['g'], ['b']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['l', 'l', 'v', 'v', 'x', 'r']) == [['l', 'l'], ['v', 'v'], ['x'], ['r']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['y', 'l', 'l', 'w', 'c', 'v']) == [['y'], ['l', 'l'], ['w'], ['c'], ['v']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['h', 't', 'z', 'k', 's', 'r']) == [['h'], ['t'], ['z'], ['k'], ['s'], ['r']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['v', 'g', 'c', 'k', 'w', 'l']) == [['v'], ['g'], ['c'], ['k'], ['w'], ['l']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['k', 'e', 'm', 'o', 'e', 'v']) == [['k'], ['e'], ['m'], ['o'], ['e'], ['v']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['f', 'h', 'j', 'q', 'n', 'g']) == [['f'], ['h'], ['j'], ['q'], ['n'], ['g']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['e', 'v', 'w', 'j', 'a', 'u']) == [['e'], ['v'], ['w'], ['j'], ['a'], ['u']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['p', 'm', 'x', 'o', 'i', 'a']) == [['p'], ['m'], ['x'], ['o'], ['i'], ['a']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['y', 'c', 'd', 'p', 'x', 'a']) == [['y'], ['c'], ['d'], ['p'], ['x'], ['a']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['q', 'p', 'v', 'j', 'k', 'q']) == [['q'], ['p'], ['v'], ['j'], ['k'], ['q']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['p', 'j', 'z', 't', 'g', 'q']) == [['p'], ['j'], ['z'], ['t'], ['g'], ['q']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['l', 'c', 'j', 'q', 'n', 'a']) == [['l'], ['c'], ['j'], ['q'], ['n'], ['a']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['d', 'w', 'r', 'g', 'h', 'y']) == [['d'], ['w'], ['r'], ['g'], ['h'], ['y']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['j', 'a', 'z', 'p', 'b', 'u']) == [['j'], ['a'], ['z'], ['p'], ['b'], ['u']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['j', 'e', 'l', 'u', 't', 'x']) == [['j'], ['e'], ['l'], ['u'], ['t'], ['x']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['c', 'g', 'z', 'f', 'g', 'a']) == [['c'], ['g'], ['z'], ['f'], ['g'], ['a']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['j', 'r', 's', 'f', 'g', 'u']) == [['j'], ['r'], ['s'], ['f'], ['g'], ['u']]", "def check(pack_consecutive_duplicates):\n\tassert pack_consecutive_duplicates(['w', 'g', 'o', 'b', 'i', 'f']) == [['w'], ['g'], ['o'], ['b'], ['i'], ['f']]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef pack_consecutive_duplicates(lst: list) -> list:\n    if not lst:\n        return [[x] for x in lst]\n    if len(lst) == 1:\n        return lst\n    \n    packed_list = []\n    current_pack = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            current_pack.append(lst[i])\n        else:\n            packed_list.append(current_pack)\n            current_pack = [lst[i]]\n    \n    packed_list.append(current_pack)\n    return packed_list\n", "passed": true, "pass": true, "pass_num": 10, "round": 243, "mutate_method": "add_1_sentence_at_end", "parent_index": 243}
