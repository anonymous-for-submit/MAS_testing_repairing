{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 266, "prompt": "Write a function to find the lateral surface area of a cube given its side length.", "code": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA", "test_imports": [], "test_list": ["assert lateralsurface_cube(5)==100", "assert lateralsurface_cube(9)==324", "assert lateralsurface_cube(10)==400", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(3) == 36", "assert lateralsurface_cube(1) == 4", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(6) == 144", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(1) == 4", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(3) == 36", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(2) == 16", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(6) == 144", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(6) == 144", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(6) == 144", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(12) == 576", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(12) == 576", "assert lateralsurface_cube(12) == 576", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(12) == 576", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(6) == 144", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(12) == 576", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(13) == 676"], "entry_point": "lateralsurface_cube", "repair_prompt": ["Write a function lateralsurface_cube to find the lateral surface area of a cube given its side length.\nlateralsurface_cube(5)==100\n"], "completions": ["from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be positive\")\n    \n    return 4 * side_length**2\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n\n    Raises:\n        ValueError: If the side_length is negative.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length must be non-negative.\")\n    \n    return 4 * side_length**2\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n    \"\"\"\n    if not isinstance(side_length, (int, float)):\n        raise ValueError(\"side_length must be a number\")\n    \n    return 4 * side_length**2\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length must be non-negative\")\n    \n    return 4 * side_length**2\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    \n    return 4 * side_length**2\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n    \"\"\"\n    if not isinstance(side_length, float):\n        raise ValueError(\"side_length must be a float\")\n    \n    return 4 * side_length**2\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"side_length must be positive\")\n    \n    return 4 * side_length**2\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive float.\")\n    \n    return 4 * side_length**2\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n\n    Raises:\n        ValueError: If the side length is negative.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length must be non-negative.\")\n    \n    return 4 * side_length**2\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: (int, float)) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube given the side length.\n\n    Args:\n        side_length (int or float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be positive.\")\n    \n    return 4 * side_length**2\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube. The formula for the lateral surface area of a cube is 4 times the square of the side length. The function should take one parameter, the side length of the cube, and return the lateral surface area.\nrequirement pool:\n- The main code should include the function lateralsurface_cube\n- The function should correctly calculate the lateral surface area using the formula 4 * side_length^2\n- The function should return the correct result for the given side length\n- Implement error handling for invalid input (non-integer or negative values)\n- Include unit tests to verify the correctness of the function\nWe will implement the function `lateralsurface_cube` using Python, which will calculate the lateral surface area of a cube given its side length. The function will use a simple mathematical formula: 4 * side_length^2. This approach ensures the function is efficient and easy to understand.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube. The formula for the lateral surface area of a cube is 4 times the square of the side length. The function should take one parameter, the side length of the cube, and return the lateral surface area.\nrequirement pool:\n- The main code should include the function lateralsurface_cube\n- The function should correctly calculate the lateral surface area using the formula 4 * side_length^2\n- The function should handle edge cases such as negative side lengths\n- The function should be tested with various side lengths to ensure accuracy\nTo implement the function lateralsurface_cube, we will use Python, a popular programming language known for its simplicity and readability. The function will calculate the lateral surface area of a cube using the formula 4 * side_length^2. We will ensure the function handles edge cases such as negative side lengths by validating the input before performing the calculation.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube. The formula for the lateral surface area of a cube is 4 times the square of the side length. The function should take one parameter, the side length of the cube, and return the lateral surface area.\nrequirement pool:\n- The main code should include the function lateralsurface_cube\n- The function should correctly calculate the lateral surface area using the formula 4 * side_length^2\n- The function should handle edge cases such as negative side lengths\n- The function should be tested with various side lengths to ensure accuracy\nWe will implement the function `lateralsurface_cube` using Python, leveraging a simple and straightforward approach. The function will calculate the lateral surface area of a cube given its side length using the formula 4 * side_length^2. This approach ensures efficiency and ease of understanding.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube. The formula for the lateral surface area of a cube is 4 times the square of the side length. The function should take one parameter, the side length of the cube, and return the lateral surface area.\nrequirement pool:\n- The main code should include the function lateralsurface_cube\n- The function should correctly calculate the lateral surface area using the formula 4 * side_length^2\n- The function should handle edge cases such as negative side lengths\n- The function should be tested with various side lengths to ensure accuracy\nWe will implement the function `lateralsurface_cube` using Python, leveraging a simple and straightforward approach. The function will take one parameter, the side length of the cube, and return the lateral surface area calculated using the formula 4 * side_length^2. This approach ensures clarity and ease of use, aligning with the UI design draft.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube. The formula for the lateral surface area of a cube is 4 times the square of the side length. The function should take one parameter, the side length of the cube, and return the lateral surface area.\nrequirement pool:\n- The main code should include the function lateralsurface_cube\n- The function should correctly calculate the lateral surface area using the formula 4 * side_length^2\n- The function should return the correct result for the given side length\n- Implement error handling for invalid input (non-integer or negative values)\n- Include unit tests to verify the correctness of the function\nWe will implement the function `lateralsurface_cube` using Python, which will calculate the lateral surface area of a cube given its side length. The function will use a simple mathematical formula: 4 * side_length^2. This approach ensures the function is efficient and easy to understand.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube. The formula for the lateral surface area of a cube is 4 times the square of the side length. The function should take one parameter, the side length of the cube, and return the lateral surface area.\nrequirement pool:\n- The main code should include the function lateralsurface_cube\n- The function should correctly calculate the lateral surface area using the formula 4 * side_length^2\n- The function should handle edge cases such as negative side lengths\n- The function should be tested with various side lengths to ensure accuracy\nWe will implement the function `lateralsurface_cube` using Python, leveraging a simple and straightforward approach. The function will take one parameter, `side_length`, and return the lateral surface area of a cube using the formula 4 * side_length^2.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube. The formula for the lateral surface area of a cube is 4 times the square of the side length. The function should take one parameter, the side length of the cube, and return the lateral surface area.\nrequirement pool:\n- The main code should include the function lateralsurface_cube\n- The function should correctly calculate the lateral surface area using the formula 4 * side_length^2\n- The function should handle edge cases such as negative side lengths\n- The function should be tested with various side lengths to ensure accuracy\nWe will implement the function `lateralsurface_cube` using Python, leveraging a simple and straightforward approach. The function will take one parameter, `side_length`, and return the lateral surface area of a cube using the formula 4 * side_length^2.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube. The formula for the lateral surface area of a cube is 4 times the square of the side length. The function should take one parameter, the side length of the cube, and return the lateral surface area.\nrequirement pool:\n- The main code should include the function lateralsurface_cube\n- The function should correctly calculate the lateral surface area using the formula 4 * side_length^2\n- The function should handle edge cases such as negative side lengths\n- The function should be tested with various side lengths to ensure accuracy\nWe will implement the function `lateralsurface_cube` using Python, which will calculate the lateral surface area of a cube given its side length. The function will use the formula 4 * side_length^2 to compute the result. This approach ensures simplicity and efficiency.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube. The formula for the lateral surface area of a cube is 4 times the square of the side length. The function should take one parameter, the side length of the cube, and return the lateral surface area.\nrequirement pool:\n- The main code should include the function lateralsurface_cube\n- The function should correctly calculate the lateral surface area using the formula 4 * side_length^2\n- The function should handle edge cases such as negative side lengths\n- The function should be tested with various side lengths to ensure accuracy\nTo implement the function lateralsurface_cube, we will use Python, a popular programming language known for its simplicity and readability. The function will calculate the lateral surface area of a cube using the formula 4 * side_length^2. We will ensure the function handles edge cases such as negative side lengths by validating the input before performing the calculation.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube. The formula for the lateral surface area of a cube is 4 times the square of the side length. The function should take one parameter, the side length of the cube, and return the lateral surface area.\nrequirement pool:\n- The main code should include the function lateralsurface_cube\n- The function should correctly calculate the lateral surface area using the formula 4 * side_length^2\n- The function should handle edge cases such as negative side lengths\n- The function should be tested with various side lengths to ensure accuracy\nWe will implement the function `lateralsurface_cube` using Python, leveraging basic arithmetic operations to calculate the lateral surface area of a cube based on its side length. The function will take an integer or float as input and return the calculated lateral surface area.\n"], "test": ["def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5)==100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9)==324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10)==400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(3) == 36", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(1) == 4", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(6) == 144", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(1) == 4", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(3) == 36", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(2) == 16", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(6) == 144", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(6) == 144", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(6) == 144", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(12) == 576", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(12) == 576", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(12) == 576", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(12) == 576", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(6) == 144", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(12) == 576", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, false, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 0, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: (int, float)) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube given the side length.\n\n    Args:\n        side_length (int or float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be positive.\")\n    \n    return 4 * side_length**2\n", "passed": true, "pass": true, "pass_num": 9, "round": 101, "mutate_method": "condense_two2one", "parent_index": 101}
