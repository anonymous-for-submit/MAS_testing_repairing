{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 227, "prompt": "Write a function to find the minimum of three numbers.", "code": "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest ", "test_imports": [], "test_list": ["assert min_of_three(10,20,0)==0", "assert min_of_three(19,15,18)==15", "assert min_of_three(-10,-20,-30)==-30", "assert min_of_three(9, 25, 4) == 4", "assert min_of_three(11, 19, 5) == 5", "assert min_of_three(12, 17, 4) == 4", "assert min_of_three(13, 15, 5) == 5", "assert min_of_three(6, 24, 2) == 2", "assert min_of_three(15, 16, 4) == 4", "assert min_of_three(10, 18, 4) == 4", "assert min_of_three(7, 23, 5) == 5", "assert min_of_three(12, 15, 2) == 2", "assert min_of_three(11, 24, 4) == 4", "assert min_of_three(7, 25, 1) == 1", "assert min_of_three(10, 24, 3) == 3", "assert min_of_three(11, 22, 5) == 5", "assert min_of_three(12, 24, 3) == 3", "assert min_of_three(7, 17, 5) == 5", "assert min_of_three(10, 23, 5) == 5", "assert min_of_three(7, 18, 4) == 4", "assert min_of_three(8, 19, 4) == 4", "assert min_of_three(6, 23, 2) == 2", "assert min_of_three(9, 24, 3) == 3", "assert min_of_three(10, 22, 2) == 2", "assert min_of_three(9, 19, 2) == 2", "assert min_of_three(6, 16, 2) == 2", "assert min_of_three(15, 18, 5) == 5", "assert min_of_three(6, 15, 3) == 3", "assert min_of_three(5, 20, 5) == 5", "assert min_of_three(8, 21, 1) == 1", "assert min_of_three(7, 21, 2) == 2", "assert min_of_three(9, 16, 1) == 1", "assert min_of_three(5, 24, 3) == 3", "assert min_of_three(13, 21, 5) == 5", "assert min_of_three(15, 18, 3) == 3", "assert min_of_three(11, 17, 5) == 5", "assert min_of_three(20, 19, 18) == 18", "assert min_of_three(21, 11, 19) == 11", "assert min_of_three(14, 17, 17) == 14", "assert min_of_three(24, 15, 16) == 15", "assert min_of_three(18, 16, 13) == 13", "assert min_of_three(23, 19, 18) == 18", "assert min_of_three(20, 12, 21) == 12", "assert min_of_three(20, 17, 21) == 17", "assert min_of_three(17, 15, 13) == 13", "assert min_of_three(19, 12, 17) == 12", "assert min_of_three(20, 12, 17) == 12", "assert min_of_three(21, 13, 16) == 13", "assert min_of_three(18, 17, 18) == 17", "assert min_of_three(24, 18, 14) == 14", "assert min_of_three(20, 10, 17) == 10", "assert min_of_three(24, 20, 16) == 16", "assert min_of_three(17, 19, 19) == 17", "assert min_of_three(16, 11, 23) == 11", "assert min_of_three(20, 12, 15) == 12", "assert min_of_three(19, 17, 21) == 17", "assert min_of_three(21, 18, 22) == 18", "assert min_of_three(19, 12, 19) == 12", "assert min_of_three(20, 20, 20) == 20", "assert min_of_three(14, 17, 14) == 14", "assert min_of_three(23, 18, 21) == 18", "assert min_of_three(20, 19, 16) == 16", "assert min_of_three(14, 12, 23) == 12", "assert min_of_three(14, 14, 13) == 13", "assert min_of_three(19, 15, 17) == 15", "assert min_of_three(22, 12, 18) == 12", "assert min_of_three(24, 10, 22) == 10", "assert min_of_three(18, 10, 14) == 10", "assert min_of_three(24, 20, 23) == 20", "assert min_of_three(-14, -18, -32) == -32", "assert min_of_three(-14, -20, -34) == -34", "assert min_of_three(-6, -22, -32) == -32", "assert min_of_three(-13, -19, -32) == -32", "assert min_of_three(-8, -23, -31) == -31", "assert min_of_three(-10, -19, -33) == -33", "assert min_of_three(-13, -24, -27) == -27", "assert min_of_three(-14, -22, -31) == -31", "assert min_of_three(-8, -24, -26) == -26", "assert min_of_three(-13, -22, -25) == -25", "assert min_of_three(-5, -25, -35) == -35", "assert min_of_three(-8, -18, -26) == -26", "assert min_of_three(-13, -22, -28) == -28", "assert min_of_three(-15, -23, -28) == -28", "assert min_of_three(-8, -15, -34) == -34", "assert min_of_three(-12, -21, -34) == -34", "assert min_of_three(-8, -16, -27) == -27", "assert min_of_three(-6, -21, -27) == -27", "assert min_of_three(-7, -23, -34) == -34", "assert min_of_three(-5, -15, -33) == -33", "assert min_of_three(-6, -21, -26) == -26", "assert min_of_three(-6, -15, -33) == -33", "assert min_of_three(-11, -16, -30) == -30", "assert min_of_three(-8, -24, -35) == -35", "assert min_of_three(-10, -21, -31) == -31", "assert min_of_three(-5, -17, -30) == -30", "assert min_of_three(-13, -15, -32) == -32", "assert min_of_three(-15, -24, -31) == -31", "assert min_of_three(-12, -20, -28) == -28", "assert min_of_three(-14, -17, -30) == -30", "assert min_of_three(-6, -19, -31) == -31", "assert min_of_three(-14, -21, -25) == -25", "assert min_of_three(-13, -22, -35) == -35"], "entry_point": "min_of_three", "repair_prompt": ["Write a function min_of_three to find the minimum of three numbers.\nmin_of_three(10,20,0)==0\n"], "completions": ["from typing import List\n## main.py\n\ndef min_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n    This function takes three integers as input and returns the minimum of the three.\n    \n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        c (int): The third integer.\n    \n    Returns:\n        int: The minimum of the three integers.\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n\n# Example usage:\n# result = min_of_three(10, 20, 0)\n# print(result)  # Output: 0\n", "from typing import List\n## main.py\n\ndef min_of_three(a: int | float, b: int | float, c: int | float) -> int | float:\n    \"\"\"\n    Returns the minimum of three numbers.\n\n    Args:\n        a (int | float): The first number.\n        b (int | float): The second number.\n        c (int | float): The third number.\n\n    Returns:\n        int | float: The smallest of the three numbers.\n\n    Raises:\n        TypeError: If any of the inputs are not numbers.\n    \"\"\"\n    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)) or not isinstance(c, (int, float)):\n        raise TypeError(\"All inputs must be numbers\")\n    \n    return min(a, b, c)\n\n# Example usage:\n# print(min_of_three(10, 20, 0))  # Output: 0\n", "from typing import List\n## main.py\n\ndef min_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Function to find the minimum of three numbers.\n\n    Args:\n        a (int): The first number.\n        b (int): The second number.\n        c (int): The third number.\n\n    Returns:\n        int: The smallest of the three numbers.\n\n    Examples:\n        >>> min_of_three(1, 2, 3)\n        1\n        >>> min_of_three(3, 2, 1)\n        1\n        >>> min_of_three(2, 2, 2)\n        2\n    \"\"\"\n    return min(a, b, c)\n", "from typing import List\n## main.py\n\ndef min_of_three(a: int | float, b: int | float, c: int | float) -> int | float:\n    \"\"\"\n    This function takes three numbers of the same type (either int or float) and returns the smallest one.\n    \n    Args:\n        a (int | float): The first number.\n        b (int | float): The second number.\n        c (int | float): The third number.\n    \n    Returns:\n        int | float: The smallest of the three numbers.\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n\n# Example usage:\n# result = min_of_three(10, 20, 0)\n# print(result)  # Output: 0\n", "from typing import List\n## main.py\n\ndef min_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Returns the minimum of three integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        c (int): The third integer.\n\n    Returns:\n        int: The smallest of the three integers.\n    \"\"\"\n    # Basic error handling for non-integer inputs\n    if not isinstance(a, int) or not isinstance(b, int) or not isinstance(c, int):\n        raise ValueError(\"All inputs must be integers.\")\n\n    # Compare the three numbers and return the minimum\n    return min(a, b, c)\n\n# Example usage:\n# print(min_of_three(5, 3, 8))  # Output: 3\n", "from typing import List\n## main.py\n\ndef min_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Returns the minimum of three integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        c (int): The third integer.\n\n    Returns:\n        int: The smallest of the three integers.\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n\n# Example usage:\n# result = min_of_three(10, 20, 0)\n# print(result)  # Output: 0\n", "from typing import List\n## main.py\n\ndef min_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Function to find the minimum of three numbers.\n\n    Args:\n        a (int): The first number.\n        b (int): The second number.\n        c (int): The third number.\n\n    Returns:\n        int: The smallest of the three numbers.\n    \"\"\"\n    return min(a, b, c)\n", "from typing import List\n## main.py\n\ndef min_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Returns the minimum of three integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        c (int): The third integer.\n\n    Returns:\n        int: The smallest of the three integers.\n    \"\"\"\n    return min(min(a, b), c)\n", "from typing import List\n## main.py\n\ndef min_of_three(a: (int, float), b: (int, float), c: (int, float)) -> (int, float):\n    \"\"\"\n    This function takes three arguments of type int or float and returns the smallest one.\n    \n    Args:\n        a (int, float): The first number.\n        b (int, float): The second number.\n        c (int, float): The third number.\n    \n    Returns:\n        int, float: The smallest of the three numbers.\n    \"\"\"\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(min_of_three(10, 20, 0))  # Output: 0\n", "from typing import List\n## main.py\n\ndef min_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Returns the minimum of three numbers.\n\n    Args:\n        a (int): The first number.\n        b (int): The second number.\n        c (int): The third number.\n\n    Returns:\n        int: The minimum of the three numbers.\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n\n# Example usage:\n# result = min_of_three(10, 20, 0)\n# print(result)  # Output: 0\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that can find the minimum of three numbers. This is a fundamental operation in many programming tasks and should be simple, efficient, and reliable. The function should handle basic numbers including positive, negative, and zero values.\nrequirement pool:\n- The main code should be clear and concise\n- The function should accurately determine the minimum of three numbers\n- Include support for negative numbers\n- Ensure the function is optimized for performance\n- Include error handling for unexpected inputs\nTo create a function that finds the minimum of three numbers efficiently and accurately, we will use Python's built-in functions and standard library. This approach ensures simplicity and leverages Python's performance characteristics.\n", "requirement analysis:\nThe requirement is to create a function that finds the minimum of three numbers. This is a fundamental function that should be both efficient and easy to use. The function should handle basic cases well and be extendable to more complex scenarios if needed.\nrequirement pool:\n- The function should take three arguments and return the smallest one.\n- The function should handle both positive and negative numbers.\n- The function should be optimized for performance.\n- The function should include error handling for non-numeric inputs.\n- The function should be documented and include examples of usage.\nTo create a function that finds the minimum of three numbers efficiently and with clear error handling, we will use Python's built-in capabilities and ensure the function is simple and easy to understand. We will handle basic cases well and include error handling for non-numeric inputs to ensure robustness.\n", "requirement analysis:\nThe requirement is to create a function that finds the minimum of three numbers. This is a fundamental operation in many programming tasks and should be available in a basic form for users. The function should be simple to use and integrate, handling edge cases like negative numbers and zeros effectively.\nrequirement pool:\n- Implement min_of_three function to find the minimum of three numbers\n- Ensure the function is easy to use and understand\n- Handle edge cases like negative numbers and zeros\n- Optimize the function for performance\n- Include documentation and examples for user guidance\nTo implement the min_of_three function efficiently and accurately, we will leverage Python's built-in min function, which is optimized for performance. This function will directly compare three numbers and return the smallest one. We will ensure the function is easy to use and understand by providing clear documentation and examples.\n", "requirement analysis:\nThe requirement is to create a function that finds the minimum of three numbers. This is a fundamental operation in many programming tasks and should be efficient and easy to use. The function should handle basic numerical inputs and return the smallest number among the three provided.\nrequirement pool:\n- The main code should be clear and concise, using standard Python practices.\n- The function should handle all types of numerical inputs without errors.\n- The function should be optimized for performance to handle large datasets efficiently.\n- The function should include proper documentation and comments for easy understanding and integration.\n- The function should be tested thoroughly to ensure accuracy and reliability in various scenarios.\nWe will use Python's built-in functions and standard library to create a clear and concise function that finds the minimum of three numbers. The function will be optimized for simplicity and performance, ensuring it handles all types of numerical inputs correctly and efficiently.\n", "requirement analysis:\nThe requirement is to create a function that finds the minimum of three numbers. This is a fundamental function that should be both efficient and easy to use. The function should handle basic cases well and be extendable to more complex scenarios.\nrequirement pool:\n- The main code should be clear and concise\n- The function should handle all integer inputs\n- The function should be optimized for speed\n- The function should include basic error handling\n- The function should be documented with examples\nTo create a function that finds the minimum of three numbers efficiently and with basic error handling, we will use Python's built-in capabilities. The function will be simple and easy to understand, making it suitable for both developers and users. We will ensure it handles all integer inputs and includes basic error handling to manage unexpected inputs gracefully.\n", "requirement analysis:\nThe requirement is to create a function that finds the minimum of three numbers. This is a basic function that should be efficient and reliable. The function should handle edge cases and be compatible with Python's standard library.\nrequirement pool:\n- The function should correctly identify the minimum of three numbers\n- The function should handle both positive and negative numbers\n- The function should be optimized for performance\n- The function should be compatible with Python's standard library\n- The function should include error handling for invalid inputs\nTo create a function that finds the minimum of three numbers efficiently and reliably, we will utilize Python's built-in capabilities. The function will be simple and directly compare the three numbers to determine the smallest. This approach ensures compatibility with Python's standard library and leverages its performance characteristics.\n", "requirement analysis:\nThe requirement is to create a function that finds the minimum of three numbers. This is a fundamental function in programming and should be simple, efficient, and easy to understand. The function should handle basic integer inputs and return the smallest number.\nrequirement pool:\n- The function should correctly identify the minimum of three numbers\n- The function should be optimized for performance\n- The function should include comments for better understanding\n- The function should handle edge cases such as negative numbers\n- The function should be tested with various inputs to ensure accuracy\nWe will use Python's built-in functions and a simple approach to create a function that finds the minimum of three numbers. This will ensure efficiency and readability. The function will take three arguments and return the smallest one using Python's min function.\n", "requirement analysis:\nThe requirement to create a function that finds the minimum of three numbers is fundamental in programming tasks. This function is a basic building block in many applications, including data processing, algorithm design, and general programming exercises. The function should be simple, efficient, and capable of handling edge cases to ensure reliability.\nrequirement pool:\n- Implement min_of_three function with clear and concise code\n- Ensure the function handles all types of input including negative numbers and zeros\n- Optimize the function for performance to handle large datasets efficiently\n- Include detailed documentation and examples for user guidance\n- Test the function with various edge cases to ensure accuracy\nTo implement the min_of_three function efficiently and accurately, we will use Python's built-in min function which can find the minimum of two numbers. We will apply this function twice to compare three numbers. This approach ensures simplicity and efficiency, leveraging Python's standard library for basic operations.\n", "requirement analysis:\nThe requirement is to create a function that finds the minimum of three numbers. This is a fundamental operation in programming and should be simple, efficient, and easy to use. The function should handle basic integer and floating-point numbers.\nrequirement pool:\n- The function should take three arguments and return the smallest one.\n- The function should handle both integers and floating-point numbers.\n- The function should be optimized for performance to handle large datasets efficiently.\n- The function should include error handling to manage unexpected inputs gracefully.\n- The function should be documented and include examples of usage.\nTo create a function that finds the minimum of three numbers efficiently and with clear error handling, we will use Python's built-in capabilities. The function will be simple and easy to understand, making it suitable for both developers and users. We will ensure it handles both integers and floating-point numbers correctly.\n", "requirement analysis:\nThe requirement is to create a function that finds the minimum of three numbers. This is a basic function that should be both efficient and easy to use. The function should handle basic numerical inputs and edge cases like negative numbers and zeros. It should be compatible with Python, which is widely used in data analysis and scripting.\nrequirement pool:\n- The main code should be simple and readable\n- The function should accurately find the minimum of three numbers\n- The function should handle edge cases like negative numbers and zeros\n- The function should be optimized for performance\n- The function should be easily integrated into other Python projects\nTo create a function that finds the minimum of three numbers efficiently and accurately, we will utilize Python's built-in capabilities. The function will be simple and readable, making it easy to integrate into other projects. We will ensure it handles edge cases like negative numbers and zeros, and we will optimize the code for performance.\n"], "test": ["def check(min_of_three):\n\tassert min_of_three(10,20,0)==0", "def check(min_of_three):\n\tassert min_of_three(19,15,18)==15", "def check(min_of_three):\n\tassert min_of_three(-10,-20,-30)==-30", "def check(min_of_three):\n\tassert min_of_three(9, 25, 4) == 4", "def check(min_of_three):\n\tassert min_of_three(11, 19, 5) == 5", "def check(min_of_three):\n\tassert min_of_three(12, 17, 4) == 4", "def check(min_of_three):\n\tassert min_of_three(13, 15, 5) == 5", "def check(min_of_three):\n\tassert min_of_three(6, 24, 2) == 2", "def check(min_of_three):\n\tassert min_of_three(15, 16, 4) == 4", "def check(min_of_three):\n\tassert min_of_three(10, 18, 4) == 4", "def check(min_of_three):\n\tassert min_of_three(7, 23, 5) == 5", "def check(min_of_three):\n\tassert min_of_three(12, 15, 2) == 2", "def check(min_of_three):\n\tassert min_of_three(11, 24, 4) == 4", "def check(min_of_three):\n\tassert min_of_three(7, 25, 1) == 1", "def check(min_of_three):\n\tassert min_of_three(10, 24, 3) == 3", "def check(min_of_three):\n\tassert min_of_three(11, 22, 5) == 5", "def check(min_of_three):\n\tassert min_of_three(12, 24, 3) == 3", "def check(min_of_three):\n\tassert min_of_three(7, 17, 5) == 5", "def check(min_of_three):\n\tassert min_of_three(10, 23, 5) == 5", "def check(min_of_three):\n\tassert min_of_three(7, 18, 4) == 4", "def check(min_of_three):\n\tassert min_of_three(8, 19, 4) == 4", "def check(min_of_three):\n\tassert min_of_three(6, 23, 2) == 2", "def check(min_of_three):\n\tassert min_of_three(9, 24, 3) == 3", "def check(min_of_three):\n\tassert min_of_three(10, 22, 2) == 2", "def check(min_of_three):\n\tassert min_of_three(9, 19, 2) == 2", "def check(min_of_three):\n\tassert min_of_three(6, 16, 2) == 2", "def check(min_of_three):\n\tassert min_of_three(15, 18, 5) == 5", "def check(min_of_three):\n\tassert min_of_three(6, 15, 3) == 3", "def check(min_of_three):\n\tassert min_of_three(5, 20, 5) == 5", "def check(min_of_three):\n\tassert min_of_three(8, 21, 1) == 1", "def check(min_of_three):\n\tassert min_of_three(7, 21, 2) == 2", "def check(min_of_three):\n\tassert min_of_three(9, 16, 1) == 1", "def check(min_of_three):\n\tassert min_of_three(5, 24, 3) == 3", "def check(min_of_three):\n\tassert min_of_three(13, 21, 5) == 5", "def check(min_of_three):\n\tassert min_of_three(15, 18, 3) == 3", "def check(min_of_three):\n\tassert min_of_three(11, 17, 5) == 5", "def check(min_of_three):\n\tassert min_of_three(20, 19, 18) == 18", "def check(min_of_three):\n\tassert min_of_three(21, 11, 19) == 11", "def check(min_of_three):\n\tassert min_of_three(14, 17, 17) == 14", "def check(min_of_three):\n\tassert min_of_three(24, 15, 16) == 15", "def check(min_of_three):\n\tassert min_of_three(18, 16, 13) == 13", "def check(min_of_three):\n\tassert min_of_three(23, 19, 18) == 18", "def check(min_of_three):\n\tassert min_of_three(20, 12, 21) == 12", "def check(min_of_three):\n\tassert min_of_three(20, 17, 21) == 17", "def check(min_of_three):\n\tassert min_of_three(17, 15, 13) == 13", "def check(min_of_three):\n\tassert min_of_three(19, 12, 17) == 12", "def check(min_of_three):\n\tassert min_of_three(20, 12, 17) == 12", "def check(min_of_three):\n\tassert min_of_three(21, 13, 16) == 13", "def check(min_of_three):\n\tassert min_of_three(18, 17, 18) == 17", "def check(min_of_three):\n\tassert min_of_three(24, 18, 14) == 14", "def check(min_of_three):\n\tassert min_of_three(20, 10, 17) == 10", "def check(min_of_three):\n\tassert min_of_three(24, 20, 16) == 16", "def check(min_of_three):\n\tassert min_of_three(17, 19, 19) == 17", "def check(min_of_three):\n\tassert min_of_three(16, 11, 23) == 11", "def check(min_of_three):\n\tassert min_of_three(20, 12, 15) == 12", "def check(min_of_three):\n\tassert min_of_three(19, 17, 21) == 17", "def check(min_of_three):\n\tassert min_of_three(21, 18, 22) == 18", "def check(min_of_three):\n\tassert min_of_three(19, 12, 19) == 12", "def check(min_of_three):\n\tassert min_of_three(20, 20, 20) == 20", "def check(min_of_three):\n\tassert min_of_three(14, 17, 14) == 14", "def check(min_of_three):\n\tassert min_of_three(23, 18, 21) == 18", "def check(min_of_three):\n\tassert min_of_three(20, 19, 16) == 16", "def check(min_of_three):\n\tassert min_of_three(14, 12, 23) == 12", "def check(min_of_three):\n\tassert min_of_three(14, 14, 13) == 13", "def check(min_of_three):\n\tassert min_of_three(19, 15, 17) == 15", "def check(min_of_three):\n\tassert min_of_three(22, 12, 18) == 12", "def check(min_of_three):\n\tassert min_of_three(24, 10, 22) == 10", "def check(min_of_three):\n\tassert min_of_three(18, 10, 14) == 10", "def check(min_of_three):\n\tassert min_of_three(24, 20, 23) == 20", "def check(min_of_three):\n\tassert min_of_three(-14, -18, -32) == -32", "def check(min_of_three):\n\tassert min_of_three(-14, -20, -34) == -34", "def check(min_of_three):\n\tassert min_of_three(-6, -22, -32) == -32", "def check(min_of_three):\n\tassert min_of_three(-13, -19, -32) == -32", "def check(min_of_three):\n\tassert min_of_three(-8, -23, -31) == -31", "def check(min_of_three):\n\tassert min_of_three(-10, -19, -33) == -33", "def check(min_of_three):\n\tassert min_of_three(-13, -24, -27) == -27", "def check(min_of_three):\n\tassert min_of_three(-14, -22, -31) == -31", "def check(min_of_three):\n\tassert min_of_three(-8, -24, -26) == -26", "def check(min_of_three):\n\tassert min_of_three(-13, -22, -25) == -25", "def check(min_of_three):\n\tassert min_of_three(-5, -25, -35) == -35", "def check(min_of_three):\n\tassert min_of_three(-8, -18, -26) == -26", "def check(min_of_three):\n\tassert min_of_three(-13, -22, -28) == -28", "def check(min_of_three):\n\tassert min_of_three(-15, -23, -28) == -28", "def check(min_of_three):\n\tassert min_of_three(-8, -15, -34) == -34", "def check(min_of_three):\n\tassert min_of_three(-12, -21, -34) == -34", "def check(min_of_three):\n\tassert min_of_three(-8, -16, -27) == -27", "def check(min_of_three):\n\tassert min_of_three(-6, -21, -27) == -27", "def check(min_of_three):\n\tassert min_of_three(-7, -23, -34) == -34", "def check(min_of_three):\n\tassert min_of_three(-5, -15, -33) == -33", "def check(min_of_three):\n\tassert min_of_three(-6, -21, -26) == -26", "def check(min_of_three):\n\tassert min_of_three(-6, -15, -33) == -33", "def check(min_of_three):\n\tassert min_of_three(-11, -16, -30) == -30", "def check(min_of_three):\n\tassert min_of_three(-8, -24, -35) == -35", "def check(min_of_three):\n\tassert min_of_three(-10, -21, -31) == -31", "def check(min_of_three):\n\tassert min_of_three(-5, -17, -30) == -30", "def check(min_of_three):\n\tassert min_of_three(-13, -15, -32) == -32", "def check(min_of_three):\n\tassert min_of_three(-15, -24, -31) == -31", "def check(min_of_three):\n\tassert min_of_three(-12, -20, -28) == -28", "def check(min_of_three):\n\tassert min_of_three(-14, -17, -30) == -30", "def check(min_of_three):\n\tassert min_of_three(-6, -19, -31) == -31", "def check(min_of_three):\n\tassert min_of_three(-14, -21, -25) == -25", "def check(min_of_three):\n\tassert min_of_three(-13, -22, -35) == -35"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef min_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Returns the minimum of three numbers.\n\n    Args:\n        a (int): The first number.\n        b (int): The second number.\n        c (int): The third number.\n\n    Returns:\n        int: The minimum of the three numbers.\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n\n# Example usage:\n# result = min_of_three(10, 20, 0)\n# print(result)  # Output: 0\n", "passed": true, "pass": true, "pass_num": 10, "round": 78, "mutate_method": "condense_two2one", "parent_index": 78}
