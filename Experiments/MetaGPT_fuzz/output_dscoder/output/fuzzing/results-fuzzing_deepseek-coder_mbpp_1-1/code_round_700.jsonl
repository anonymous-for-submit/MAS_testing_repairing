{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 17, "prompt": "Write a function that returns the perimeter of a square given its side length as input. Make certain that the function deals with special cases such as zero or negative side lengths smoothly.", "code": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter", "test_imports": [], "test_list": ["assert square_perimeter(10)==40", "assert square_perimeter(5)==20", "assert square_perimeter(4)==16", "assert square_perimeter(8) == 32", "assert square_perimeter(12) == 48", "assert square_perimeter(15) == 60", "assert square_perimeter(14) == 56", "assert square_perimeter(9) == 36", "assert square_perimeter(7) == 28", "assert square_perimeter(13) == 52", "assert square_perimeter(6) == 24", "assert square_perimeter(9) == 36", "assert square_perimeter(6) == 24", "assert square_perimeter(11) == 44", "assert square_perimeter(5) == 20", "assert square_perimeter(11) == 44", "assert square_perimeter(10) == 40", "assert square_perimeter(14) == 56", "assert square_perimeter(6) == 24", "assert square_perimeter(6) == 24", "assert square_perimeter(11) == 44", "assert square_perimeter(15) == 60", "assert square_perimeter(8) == 32", "assert square_perimeter(12) == 48", "assert square_perimeter(15) == 60", "assert square_perimeter(11) == 44", "assert square_perimeter(15) == 60", "assert square_perimeter(8) == 32", "assert square_perimeter(11) == 44", "assert square_perimeter(9) == 36", "assert square_perimeter(10) == 40", "assert square_perimeter(9) == 36", "assert square_perimeter(11) == 44", "assert square_perimeter(15) == 60", "assert square_perimeter(6) == 24", "assert square_perimeter(13) == 52", "assert square_perimeter(5) == 20", "assert square_perimeter(9) == 36", "assert square_perimeter(5) == 20", "assert square_perimeter(7) == 28", "assert square_perimeter(7) == 28", "assert square_perimeter(7) == 28", "assert square_perimeter(4) == 16", "assert square_perimeter(5) == 20", "assert square_perimeter(10) == 40", "assert square_perimeter(7) == 28", "assert square_perimeter(10) == 40", "assert square_perimeter(2) == 8", "assert square_perimeter(7) == 28", "assert square_perimeter(2) == 8", "assert square_perimeter(1) == 4", "assert square_perimeter(4) == 16", "assert square_perimeter(9) == 36", "assert square_perimeter(7) == 28", "assert square_perimeter(7) == 28", "assert square_perimeter(4) == 16", "assert square_perimeter(4) == 16", "assert square_perimeter(8) == 32", "assert square_perimeter(9) == 36", "assert square_perimeter(9) == 36", "assert square_perimeter(8) == 32", "assert square_perimeter(4) == 16", "assert square_perimeter(10) == 40", "assert square_perimeter(8) == 32", "assert square_perimeter(4) == 16", "assert square_perimeter(9) == 36", "assert square_perimeter(2) == 8", "assert square_perimeter(2) == 8", "assert square_perimeter(4) == 16", "assert square_perimeter(9) == 36", "assert square_perimeter(1) == 4", "assert square_perimeter(2) == 8", "assert square_perimeter(6) == 24", "assert square_perimeter(4) == 16", "assert square_perimeter(3) == 12", "assert square_perimeter(9) == 36", "assert square_perimeter(2) == 8", "assert square_perimeter(6) == 24", "assert square_perimeter(1) == 4", "assert square_perimeter(7) == 28", "assert square_perimeter(2) == 8", "assert square_perimeter(5) == 20", "assert square_perimeter(7) == 28", "assert square_perimeter(8) == 32", "assert square_perimeter(1) == 4", "assert square_perimeter(6) == 24", "assert square_perimeter(7) == 28", "assert square_perimeter(3) == 12", "assert square_perimeter(9) == 36", "assert square_perimeter(9) == 36", "assert square_perimeter(7) == 28", "assert square_perimeter(1) == 4", "assert square_perimeter(6) == 24", "assert square_perimeter(5) == 20", "assert square_perimeter(5) == 20", "assert square_perimeter(4) == 16", "assert square_perimeter(8) == 32", "assert square_perimeter(6) == 24", "assert square_perimeter(3) == 12", "assert square_perimeter(8) == 32", "assert square_perimeter(2) == 8", "assert square_perimeter(2) == 8"], "entry_point": "square_perimeter", "repair_prompt": ["Write a function square_perimeter that returns the perimeter of a square given its side length as input. Make certain that the function deals with special cases such as zero or negative side lengths smoothly.\nsquare_perimeter(10)==40\n"], "completions": ["from typing import List\n## main.py\n\nimport typing\n\ndef square_perimeter(side_length: float) -> typing.Union[float, str]:\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n\n    Args:\n        side_length (float): The length of a side of the square.\n\n    Returns:\n        Union[float, str]: The perimeter of the square if the side length is valid,\n                           otherwise a string indicating the error.\n    \"\"\"\n    if side_length <= 0:\n        return 'Invalid side length. Please provide a positive number.'\n    else:\n        return 4 * side_length\n", "from typing import List\n## main.py\n\nimport typing\n\ndef square_perimeter(side_length: float) -> typing.Union[int, str]:\n    \"\"\"\n    Calculate the perimeter of a square given the side length.\n\n    Args:\n        side_length (float): The length of a side of the square.\n\n    Returns:\n        int: The perimeter of the square.\n        str: An error message if the input is invalid.\n    \"\"\"\n    if side_length <= 0:\n        return 'Invalid input'\n    \n    perimeter = 4 * side_length\n    return int(perimeter)\n", "from typing import List\n## main.py\n\ndef square_perimeter(side_length: float) -> float:\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n\n    Args:\n        side_length (float): The length of one side of the square.\n\n    Returns:\n        float: The perimeter of the square.\n\n    Raises:\n        ValueError: If the side length is zero or negative.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be positive.\")\n    \n    return 4 * side_length\n", "from typing import List\n## main.py\n\nimport typing\n\ndef square_perimeter(side_length: float) -> typing.Union[float, str]:\n    \"\"\"\n    Calculate the perimeter of a square given the side length.\n\n    Args:\n        side_length (float): The length of a side of the square.\n\n    Returns:\n        float: The perimeter of the square if the input is valid.\n        str: An error message if the input is invalid.\n    \"\"\"\n    if side_length <= 0:\n        return \"Invalid input: side_length must be a positive number.\"\n    \n    perimeter = 4 * side_length\n    return perimeter\n", "from typing import List\n## main.py\n\ndef square_perimeter(side_length: float) -> float:\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n\n    Args:\n        side_length (float): The length of one side of the square.\n\n    Returns:\n        float: The perimeter of the square.\n\n    Raises:\n        ValueError: If the side length is not a positive number.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    \n    perimeter = 4 * side_length\n    return perimeter\n", "from typing import List\n## main.py\n\ndef square_perimeter(side_length: float) -> float:\n    \"\"\"\n    Calculate the perimeter of a square given the side length.\n\n    Args:\n        side_length (float): The length of one side of the square.\n\n    Returns:\n        float: The perimeter of the square.\n\n    Raises:\n        ValueError: If the side length is less than or equal to zero.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be positive.\")\n    \n    return 4 * side_length\n", "from typing import List\n## main.py\n\nimport typing\n\ndef square_perimeter(side_length: float) -> typing.Union[int, str]:\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n\n    Args:\n        side_length (float): The length of a side of the square.\n\n    Returns:\n        int: The perimeter of the square if the input is valid.\n        str: An error message if the input is zero or negative.\n    \"\"\"\n    if side_length <= 0:\n        return \"Error: Side length must be a positive number.\"\n    else:\n        perimeter = 4 * side_length\n        return int(perimeter)\n\n# Example usage:\n# print(square_perimeter(5))  # Output: 20\n# print(square_perimeter(-1)) # Output: Error message\n", "from typing import List\n## main.py\n\nimport typing\n\ndef square_perimeter(side_length: float) -> typing.Union[int, str]:\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n\n    Args:\n        side_length (float): The length of a side of the square.\n\n    Returns:\n        int: The perimeter of the square if the input is valid.\n        str: 'Invalid side length' if the input is zero or negative.\n    \"\"\"\n    if side_length <= 0:\n        return 'Invalid side length'\n    else:\n        return int(4 * side_length)\n", "from typing import List\n## main.py\n\nimport typing\n\ndef square_perimeter(side_length: float) -> typing.Union[float, str]:\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n\n    Args:\n        side_length (float): The length of a side of the square.\n\n    Returns:\n        float: The perimeter of the square if the input is valid.\n        str: An error message if the input is invalid.\n    \"\"\"\n    if not isinstance(side_length, (int, float)) or side_length <= 0:\n        return \"Invalid side length: must be a positive number.\"\n    \n    perimeter = 4 * side_length\n    return perimeter\n", "from typing import List\n## main.py\n\ndef square_perimeter(side_length: float) -> float:\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n\n    Args:\n        side_length (float): The length of one side of the square.\n\n    Returns:\n        float: The perimeter of the square.\n\n    Raises:\n        ValueError: If the side length is zero or negative.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be positive\")\n    \n    return 4 * side_length\n"], "plans": ["requirement analysis:\nThe function should return the perimeter of a square given its side length. Special attention should be given to handling cases where the side length is zero or negative, ensuring the function does not break and returns a meaningful result in such scenarios.\nrequirement pool:\n- Implement the function to calculate the perimeter of a square\n- Handle zero and negative side lengths gracefully\n- Ensure the function is efficient and performs well\n- Provide clear and concise code\n- Test the function with various inputs to ensure accuracy\nTo implement the function `square_perimeter` that calculates the perimeter of a square given its side length, we will use a simple and efficient approach. The function will check if the input side length is valid (positive) and then calculate the perimeter using the formula: perimeter = 4 * side_length. We will handle edge cases such as zero or negative side lengths by returning a meaningful message or result.\n", "requirement analysis:\nThe function should take a single input, which is the side length of a square. It should return the perimeter of the square. Special attention should be given to handling cases where the side length is zero or negative, as these are not valid inputs for a square. The function should return an error message or handle these cases gracefully to avoid program crashes.\nrequirement pool:\n- The function should take a single input and return the perimeter of a square.\n- The function should handle zero and negative side lengths gracefully.\n- The function should be efficient and perform well.\n- The function should be easy to understand and use.\n- The function should be integrated into a larger application if necessary.\nWe will implement the function using basic Python constructs to ensure clarity and simplicity. The function will validate the input to ensure it is a positive number, and then it will calculate the perimeter of the square using the formula '4 * side_length'. If the input is zero or negative, the function will return an error message indicating that the input is invalid.\n", "requirement analysis:\nThe function should take a single input, which is the side length of a square. It should return the perimeter of the square. Special attention should be given to handling cases where the side length is zero or negative, as these are invalid inputs. The function should return an error message or handle these cases gracefully to avoid crashes or incorrect results.\nrequirement pool:\n- The function should take a single input and return the perimeter of a square\n- The function should handle zero and negative side lengths gracefully\n- Ensure the function is efficient and performs well\n- Maintain clarity and simplicity in the code\nTo create a function that calculates the perimeter of a square given its side length, we need to ensure the function handles zero and negative side lengths gracefully. We will use a simple approach to maintain clarity and simplicity in the code.\n", "requirement analysis:\nThe function should take a single input, which is the side length of a square. It should return the perimeter of the square. Special attention should be given to handling cases where the side length is zero or negative, as these are not valid inputs for a square. The function should return an error message or handle these cases gracefully to avoid crashes or incorrect results.\nrequirement pool:\n- The function should take a single input and return the perimeter of a square.\n- The function should handle zero and negative side lengths gracefully.\n- The function should be efficient and perform well.\n- The function should be easy to understand and use.\n- The function should be integrated into a larger application if possible.\nWe will implement the function using a simple and straightforward approach. The function will check if the input is a valid positive number. If the input is valid, it will calculate the perimeter of the square using the formula '4 * side_length'. If the input is zero or negative, it will return an error message indicating that the input is invalid.\n", "requirement analysis:\nThe function should take a single input, which is the side length of a square. It should return the perimeter of the square. Special attention should be given to handling cases where the side length is zero or negative, as these are not valid inputs for a square. The function should return an error message or handle these cases gracefully to avoid unexpected behavior.\nrequirement pool:\n- The function should take a single input and return the perimeter of a square\n- The function should handle zero and negative side lengths gracefully\n- The function should be efficient and perform well\n- The function should be easy to understand and use\n- The function should be integrated into a larger application if possible\nTo create a function that calculates the perimeter of a square given its side length, we will use Python's built-in capabilities to handle basic mathematical operations. The function will validate the input to ensure it is a positive number, as negative or zero values are not valid for a square's side length. We will use basic error handling to manage these cases gracefully.\n", "requirement analysis:\nThe function should take a single input, the side length of a square, and return the perimeter. Special attention should be given to handling cases where the side length is zero or negative, as these are not valid inputs for a square. The function should return an error or a message indicating the invalid input if such a case is encountered.\nrequirement pool:\n- The function should correctly calculate the perimeter of a square given a valid side length.\n- The function should handle zero and negative side lengths gracefully, returning an error or message.\n- The function should be easy to understand and use, with clear documentation or comments.\n- The function should be implemented in a language that matches the user's requirement language.\n- The function should be tested thoroughly to ensure accuracy and robustness.\nWe will implement the function using Python, leveraging basic arithmetic operations to calculate the perimeter of a square. The function will check for valid input and handle edge cases such as zero or negative side lengths gracefully.\n", "requirement analysis:\nThe function should take a single input, which is the side length of a square. It should return the perimeter of the square. Special attention should be given to handling cases where the side length is zero or negative, as these are not valid inputs for a square. The function should return an error or a message indicating the invalid input if such a case is encountered.\nrequirement pool:\n- The function should correctly calculate the perimeter of a square given a valid side length.\n- The function should handle zero and negative side lengths gracefully.\n- The function should be efficient and perform well with a wide range of inputs.\n- The function should be easy to integrate into other projects.\n- The function should be documented and include examples of usage.\nTo create a function that calculates the perimeter of a square given its side length, we will use Python's built-in capabilities and ensure it handles edge cases effectively. The function will check if the input is valid (positive number) and then compute the perimeter using the formula: perimeter = 4 * side_length. If the input is zero or negative, the function will return an error message.\n", "requirement analysis:\nThe function should take a single input, which is the side length of a square. It should return the perimeter of the square. Special cases to consider include zero or negative side lengths, which should be handled gracefully by returning an error message or a special value indicating invalid input.\nrequirement pool:\n- The function should correctly calculate the perimeter of a square for valid positive side lengths.\n- The function should handle zero and negative side lengths gracefully.\n- The function should be easy to understand and use.\nWe will implement the function using a simple and clear approach. The function will take a single input, which is the side length of a square. It will return the perimeter of the square. To handle special cases such as zero or negative side lengths, we will use conditional statements to check the input and return an appropriate message or value for invalid inputs.\n", "requirement analysis:\nThe function should take a single input, the side length of a square, and return the perimeter. Special attention should be given to handling cases where the side length is zero or negative, as these are not valid inputs for a square. The function should return an error or a specific value indicating invalid input for these cases.\nrequirement pool:\n- Implement the function to calculate the perimeter of a square.\n- Handle invalid inputs (zero or negative side lengths) gracefully.\n- Ensure the function is efficient and performs well.\n- Provide clear and concise documentation for the function.\n- Test the function with a variety of inputs to ensure accuracy and robustness.\nTo implement the function `square_perimeter` that calculates the perimeter of a square given its side length, we will use a simple and efficient approach. The function will validate the input to ensure it is a positive number, and then it will compute the perimeter using the formula `4 * side_length`. If the input is invalid (zero or negative), the function will return a specific value indicating the error.\n", "requirement analysis:\nThe function should take a single input, the side length of a square, and return the perimeter. Special attention should be given to handling cases where the side length is zero or negative, as these are not valid inputs for a square. The function should return an error or a specific value indicating invalid input for these cases.\nrequirement pool:\n- The function should correctly calculate the perimeter of a square for valid side lengths.\n- The function should handle zero and negative side lengths gracefully, returning an error or a specific value.\n- The function should be efficient and perform well even with large inputs.\n- The function should be easy to understand and implement.\n- The function should be integrated into a larger application if necessary.\nWe will implement the function using a simple and efficient approach. The function will take a single input, the side length of a square, and return the perimeter. To handle special cases like zero or negative side lengths, we will include error handling to ensure the function returns an appropriate value for invalid inputs.\n"], "test": ["def check(square_perimeter):\n\tassert square_perimeter(10)==40", "def check(square_perimeter):\n\tassert square_perimeter(5)==20", "def check(square_perimeter):\n\tassert square_perimeter(4)==16", "def check(square_perimeter):\n\tassert square_perimeter(8) == 32", "def check(square_perimeter):\n\tassert square_perimeter(12) == 48", "def check(square_perimeter):\n\tassert square_perimeter(15) == 60", "def check(square_perimeter):\n\tassert square_perimeter(14) == 56", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(13) == 52", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(11) == 44", "def check(square_perimeter):\n\tassert square_perimeter(5) == 20", "def check(square_perimeter):\n\tassert square_perimeter(11) == 44", "def check(square_perimeter):\n\tassert square_perimeter(10) == 40", "def check(square_perimeter):\n\tassert square_perimeter(14) == 56", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(11) == 44", "def check(square_perimeter):\n\tassert square_perimeter(15) == 60", "def check(square_perimeter):\n\tassert square_perimeter(8) == 32", "def check(square_perimeter):\n\tassert square_perimeter(12) == 48", "def check(square_perimeter):\n\tassert square_perimeter(15) == 60", "def check(square_perimeter):\n\tassert square_perimeter(11) == 44", "def check(square_perimeter):\n\tassert square_perimeter(15) == 60", "def check(square_perimeter):\n\tassert square_perimeter(8) == 32", "def check(square_perimeter):\n\tassert square_perimeter(11) == 44", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(10) == 40", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(11) == 44", "def check(square_perimeter):\n\tassert square_perimeter(15) == 60", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(13) == 52", "def check(square_perimeter):\n\tassert square_perimeter(5) == 20", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(5) == 20", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(4) == 16", "def check(square_perimeter):\n\tassert square_perimeter(5) == 20", "def check(square_perimeter):\n\tassert square_perimeter(10) == 40", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(10) == 40", "def check(square_perimeter):\n\tassert square_perimeter(2) == 8", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(2) == 8", "def check(square_perimeter):\n\tassert square_perimeter(1) == 4", "def check(square_perimeter):\n\tassert square_perimeter(4) == 16", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(4) == 16", "def check(square_perimeter):\n\tassert square_perimeter(4) == 16", "def check(square_perimeter):\n\tassert square_perimeter(8) == 32", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(8) == 32", "def check(square_perimeter):\n\tassert square_perimeter(4) == 16", "def check(square_perimeter):\n\tassert square_perimeter(10) == 40", "def check(square_perimeter):\n\tassert square_perimeter(8) == 32", "def check(square_perimeter):\n\tassert square_perimeter(4) == 16", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(2) == 8", "def check(square_perimeter):\n\tassert square_perimeter(2) == 8", "def check(square_perimeter):\n\tassert square_perimeter(4) == 16", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(1) == 4", "def check(square_perimeter):\n\tassert square_perimeter(2) == 8", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(4) == 16", "def check(square_perimeter):\n\tassert square_perimeter(3) == 12", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(2) == 8", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(1) == 4", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(2) == 8", "def check(square_perimeter):\n\tassert square_perimeter(5) == 20", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(8) == 32", "def check(square_perimeter):\n\tassert square_perimeter(1) == 4", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(3) == 12", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(1) == 4", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(5) == 20", "def check(square_perimeter):\n\tassert square_perimeter(5) == 20", "def check(square_perimeter):\n\tassert square_perimeter(4) == 16", "def check(square_perimeter):\n\tassert square_perimeter(8) == 32", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(3) == 12", "def check(square_perimeter):\n\tassert square_perimeter(8) == 32", "def check(square_perimeter):\n\tassert square_perimeter(2) == 8", "def check(square_perimeter):\n\tassert square_perimeter(2) == 8"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef square_perimeter(side_length: float) -> float:\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n\n    Args:\n        side_length (float): The length of one side of the square.\n\n    Returns:\n        float: The perimeter of the square.\n\n    Raises:\n        ValueError: If the side length is zero or negative.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be positive\")\n    \n    return 4 * side_length\n", "passed": true, "pass": true, "pass_num": 10, "round": 700, "mutate_method": "rephrase_one", "parent_index": 564}
