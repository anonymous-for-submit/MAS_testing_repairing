{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 266, "prompt": "Write a function to find the lateral surface area of a cube. The lateral surface area is calculated given the side length of the cube.", "code": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA", "test_imports": [], "test_list": ["assert lateralsurface_cube(5)==100", "assert lateralsurface_cube(9)==324", "assert lateralsurface_cube(10)==400", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(3) == 36", "assert lateralsurface_cube(1) == 4", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(6) == 144", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(1) == 4", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(3) == 36", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(2) == 16", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(6) == 144", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(6) == 144", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(6) == 144", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(12) == 576", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(12) == 576", "assert lateralsurface_cube(12) == 576", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(12) == 576", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(6) == 144", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(12) == 576", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(13) == 676"], "entry_point": "lateralsurface_cube", "repair_prompt": ["Write a function lateralsurface_cube to find the lateral surface area of a cube. The lateral surface area is calculated given the side length of the cube.\nlateralsurface_cube(5)==100\n"], "completions": ["from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be positive\")\n    \n    lateral_surface_area = 4 * (side_length ** 2)\n    return lateral_surface_area\n\n# Example usage:\n# side_length = 5\n# print(lateralsurface_cube(side_length))  # Output: 100\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    \n    lateral_surface_area = 4 * side_length ** 2\n    return lateral_surface_area\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n\n    Raises:\n        ValueError: If the side_length is not a positive float.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive float.\")\n    \n    return 4 * side_length**2\n", "from typing import List\n## main.py\n\nimport typing\n\ndef lateralsurface_cube(side_length: float) -> typing.Union[float, str]:\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        Union[float, str]: The lateral surface area of the cube if the input is valid,\n                           otherwise a string indicating an error.\n    \"\"\"\n    # Validate the side length\n    if side_length <= 0:\n        return \"Invalid side length: must be positive\"\n    \n    # Calculate the lateral surface area\n    lateral_surface_area = 4 * (side_length ** 2)\n    \n    return lateral_surface_area\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length must be non-negative\")\n    \n    lateral_surface_area = 4 * side_length * side_length\n    return lateral_surface_area\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> int:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    The lateral surface area is calculated as four times the square of the side length.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        int: The lateral surface area of the cube.\n\n    Raises:\n        ValueError: If the input is not a number.\n    \"\"\"\n    if not isinstance(side_length, (int, float)):\n        raise ValueError(\"side_length must be a number\")\n    \n    lateral_surface_area = 4 * (side_length ** 2)\n    return int(lateral_surface_area)\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube given the side length.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length must be non-negative\")\n    \n    return 4 * side_length**2\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be positive\")\n    \n    return 4 * side_length**2\n", "from typing import List\n## main.py\n\nimport typing\n\ndef lateralsurface_cube(side_length: float) -> typing.Union[float, str]:\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        Union[float, str]: The lateral surface area of the cube if the input is valid,\n                           otherwise a string indicating an error.\n    \"\"\"\n    # Validate the side length\n    if side_length <= 0:\n        return \"Invalid side length: must be positive\"\n    \n    # Calculate the lateral surface area\n    lateral_surface_area = 4 * side_length ** 2\n    return lateral_surface_area\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n\n    Raises:\n        ValueError: If the side_length is not a positive float.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive float.\")\n    \n    return 4 * side_length**2\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube. The formula for the lateral surface area of a cube is 4 times the square of the side length. The function should be named lateralsurface_cube and should take one parameter, the side length of the cube, and return the lateral surface area.\nrequirement pool:\n- The main code should accurately calculate the lateral surface area of a cube.\n- The function should be easy to use and understand.\n- The application should have a user-friendly interface.\n- The function should handle different side lengths accurately.\n- The application should be optimized for both mobile and desktop use.\nWe will use Python's simplicity and readability to create a function that calculates the lateral surface area of a cube. The function will take one parameter, the side length of the cube, and return the lateral surface area, which is calculated using the formula 4 times the square of the side length.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube. The formula for the lateral surface area of a cube is 4 times the square of the side length. The function should be named lateralsurface_cube and should take one parameter, the side length of the cube, and return the lateral surface area.\nrequirement pool:\n- The main code should be simple and easy to understand.\n- The function should accurately calculate the lateral surface area.\n- The function should be user-friendly and easy to use.\n- The function should be compatible with different programming languages.\n- The function should include error handling for invalid inputs.\nTo create a simple and accurate function for calculating the lateral surface area of a cube, we will use Python, leveraging its simplicity and readability. The function will take a single parameter, the side length of the cube, and return the calculated lateral surface area using the formula 4 * side_length^2.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube. The formula for the lateral surface area of a cube is 4 times the square of the side length. The function should be able to handle different side lengths and return accurate results. The function should be user-friendly and efficient.\nrequirement pool:\n- The main code should accurately calculate the lateral surface area of a cube using the formula 4 * side_length^2.\n- The function should be able to handle different side lengths and return accurate results.\n- The function should be user-friendly and easy to use.\n- Implement error handling to manage invalid inputs such as negative side lengths.\n- Optimize the function for performance and scalability.\nWe will use Python to create a simple function that calculates the lateral surface area of a cube. The function will take the side length of the cube as input and return the lateral surface area using the formula 4 * side_length^2. The function will include error handling to manage invalid inputs such as negative side lengths.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube. The lateral surface area is the sum of the areas of the four vertical faces of the cube. Given the side length of the cube, the formula for the lateral surface area is 4 times the square of the side length.\nrequirement pool:\n- The main code should include a function lateralsurface_cube that takes one parameter, side_length, and returns the lateral surface area of a cube.\n- The function should correctly calculate the lateral surface area using the formula 4 * side_length^2.\n- The function should handle edge cases such as negative side lengths by returning an error message or a specific value indicating an invalid input.\n- The function should be tested with various side lengths to ensure it provides accurate results.\nTo implement the function lateralsurface_cube, we will use Python, a popular programming language known for its simplicity and readability. The function will calculate the lateral surface area of a cube given its side length. The formula for the lateral surface area of a cube is 4 times the square of the side length. We will ensure the function handles edge cases such as negative side lengths by returning an error message or a specific value indicating an invalid input.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube given its side length. The function should be simple and easy to use, with a clear output. The user should be able to input the side length of the cube, and the function should return the calculated lateral surface area. The product should be reliable and accurate in its calculations.\nrequirement pool:\n- The main code should be simple and easy to understand.\n- The function should accurately calculate the lateral surface area of a cube.\n- The user interface should be intuitive and user-friendly.\n- The output should be clear and easy to read.\n- The product should be available in multiple platforms for easy access.\nWe will use a simple and straightforward approach to create a function that calculates the lateral surface area of a cube. The function will take the side length of the cube as input and return the calculated lateral surface area. The function will be easy to understand and use, ensuring a clear and accurate output.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube. The lateral surface area is four times the square of the side length. The function should be simple and efficient, suitable for various programming environments.\nrequirement pool:\n- The function should take one parameter, the side length of the cube.\n- The function should return the lateral surface area as an integer.\n- Include error handling for non-integer inputs.\n- Provide a clear and concise documentation for the function.\n- Optimize the function for performance and simplicity.\nWe will implement the function `lateralsurface_cube` to calculate the lateral surface area of a cube. The lateral surface area is calculated as four times the square of the side length. The function will handle potential errors such as non-integer inputs by raising a `ValueError`.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube. The lateral surface area is a fundamental concept in geometry and is crucial for understanding the properties of a cube. The function should be simple, efficient, and user-friendly, making it accessible for users with varying levels of technical expertise.\nrequirement pool:\n- The main code should be simple and easy to understand.\n- The function should accurately calculate the lateral surface area of a cube.\n- The user interface should be intuitive and user-friendly.\n- The function should be optimized for performance and efficiency.\n- Additional features like unit conversion or more complex geometric calculations can be added later.\nWe will use a simple and straightforward approach to implement the function. The function will take the side length of a cube as input and return its lateral surface area. The formula for the lateral surface area of a cube is 4 times the square of the side length. We will use Python's built-in functions and a simple function structure to achieve this.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube. The formula for the lateral surface area of a cube is 4 times the square of the side length. The function should be named lateralsurface_cube and should take one parameter, the side length of the cube, and return the calculated lateral surface area.\nrequirement pool:\n- Function to calculate lateral surface area of a cube\n- User-friendly interface for input and output\n- Integration with existing applications\n- Mobile compatibility\n- Advanced mathematical functions\nWe will use Python to create a simple function that calculates the lateral surface area of a cube. The function will take one parameter, the side length of the cube, and return the calculated lateral surface area using the formula 4 * side_length^2.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube. The lateral surface area is the sum of the areas of the four vertical faces of the cube. Given the side length of the cube, the formula for the lateral surface area is 4 times the square of the side length.\nrequirement pool:\n- The main code should include a function lateralsurface_cube that takes one parameter, side_length, and returns the lateral surface area of a cube.\n- The function should correctly calculate the lateral surface area using the formula 4 * side_length^2.\n- The function should handle edge cases such as negative side lengths by returning an error message or a specific value indicating an invalid input.\n- The function should be tested with various side lengths to ensure it provides accurate results.\nTo implement the function lateralsurface_cube, we will use Python, a popular programming language known for its simplicity and readability. The function will calculate the lateral surface area of a cube given its side length. The formula for the lateral surface area of a cube is 4 times the square of the side length. We will ensure the function handles edge cases such as negative side lengths by returning an error message or a specific value indicating an invalid input.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube. The formula for the lateral surface area of a cube is 4 times the square of the side length. The function should be able to handle different side lengths and return accurate results. The function should be user-friendly and efficient.\nrequirement pool:\n- The main code should accurately calculate the lateral surface area of a cube using the formula 4 * side_length^2.\n- The function should be able to handle different side lengths and return accurate results.\n- The function should be user-friendly and easy to use.\n- Implement error handling to manage invalid inputs such as negative side lengths.\n- Optimize the function for performance and scalability.\nWe will use Python to create a simple function that calculates the lateral surface area of a cube. The function will take the side length of the cube as input and return the lateral surface area using the formula 4 * side_length^2. The function will include error handling to manage invalid inputs such as negative side lengths.\n"], "test": ["def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5)==100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9)==324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10)==400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(3) == 36", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(1) == 4", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(6) == 144", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(1) == 4", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(3) == 36", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(2) == 16", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(6) == 144", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(6) == 144", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(6) == 144", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(12) == 576", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(12) == 576", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(12) == 576", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(12) == 576", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(6) == 144", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(12) == 576", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n\n    Raises:\n        ValueError: If the side_length is not a positive float.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive float.\")\n    \n    return 4 * side_length**2\n", "passed": true, "pass": true, "pass_num": 10, "round": 429, "mutate_method": "expand_one2two", "parent_index": 348}
