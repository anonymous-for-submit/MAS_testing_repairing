{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 738, "prompt": "Write a function to calculate the geometric sum of n-1. You can find more details about the problem at this link. The link provided is https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php.", "code": "def geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)", "test_imports": [], "test_list": ["assert geometric_sum(7) == 1.9921875", "assert geometric_sum(4) == 1.9375", "assert geometric_sum(8) == 1.99609375", "assert geometric_sum(4) == 1.9375", "assert geometric_sum(4) == 1.9375", "assert geometric_sum(5) == 1.96875", "assert geometric_sum(4) == 1.9375", "assert geometric_sum(9) == 1.998046875", "assert geometric_sum(2) == 1.75", "assert geometric_sum(7) == 1.9921875", "assert geometric_sum(5) == 1.96875", "assert geometric_sum(3) == 1.875", "assert geometric_sum(6) == 1.984375", "assert geometric_sum(10) == 1.9990234375", "assert geometric_sum(2) == 1.75", "assert geometric_sum(6) == 1.984375", "assert geometric_sum(12) == 1.999755859375", "assert geometric_sum(10) == 1.9990234375", "assert geometric_sum(9) == 1.998046875", "assert geometric_sum(5) == 1.96875", "assert geometric_sum(2) == 1.75", "assert geometric_sum(12) == 1.999755859375", "assert geometric_sum(8) == 1.99609375", "assert geometric_sum(4) == 1.9375", "assert geometric_sum(3) == 1.875", "assert geometric_sum(11) == 1.99951171875", "assert geometric_sum(8) == 1.99609375", "assert geometric_sum(11) == 1.99951171875", "assert geometric_sum(7) == 1.9921875", "assert geometric_sum(3) == 1.875", "assert geometric_sum(7) == 1.9921875", "assert geometric_sum(10) == 1.9990234375", "assert geometric_sum(10) == 1.9990234375", "assert geometric_sum(8) == 1.99609375", "assert geometric_sum(12) == 1.999755859375", "assert geometric_sum(11) == 1.99951171875", "assert geometric_sum(1) == 1.5", "assert geometric_sum(6) == 1.984375", "assert geometric_sum(2) == 1.75", "assert geometric_sum(7) == 1.9921875", "assert geometric_sum(7) == 1.9921875", "assert geometric_sum(6) == 1.984375", "assert geometric_sum(7) == 1.9921875", "assert geometric_sum(3) == 1.875", "assert geometric_sum(9) == 1.998046875", "assert geometric_sum(2) == 1.75", "assert geometric_sum(4) == 1.9375", "assert geometric_sum(3) == 1.875", "assert geometric_sum(6) == 1.984375", "assert geometric_sum(1) == 1.5", "assert geometric_sum(4) == 1.9375", "assert geometric_sum(5) == 1.96875", "assert geometric_sum(9) == 1.998046875", "assert geometric_sum(1) == 1.5", "assert geometric_sum(4) == 1.9375", "assert geometric_sum(8) == 1.99609375", "assert geometric_sum(7) == 1.9921875", "assert geometric_sum(9) == 1.998046875", "assert geometric_sum(3) == 1.875", "assert geometric_sum(4) == 1.9375", "assert geometric_sum(7) == 1.9921875", "assert geometric_sum(4) == 1.9375", "assert geometric_sum(2) == 1.75", "assert geometric_sum(4) == 1.9375", "assert geometric_sum(5) == 1.96875", "assert geometric_sum(6) == 1.984375", "assert geometric_sum(1) == 1.5", "assert geometric_sum(8) == 1.99609375", "assert geometric_sum(6) == 1.984375", "assert geometric_sum(12) == 1.999755859375", "assert geometric_sum(6) == 1.984375", "assert geometric_sum(13) == 1.9998779296875", "assert geometric_sum(5) == 1.96875", "assert geometric_sum(5) == 1.96875", "assert geometric_sum(12) == 1.999755859375", "assert geometric_sum(3) == 1.875", "assert geometric_sum(7) == 1.9921875", "assert geometric_sum(9) == 1.998046875", "assert geometric_sum(11) == 1.99951171875", "assert geometric_sum(3) == 1.875", "assert geometric_sum(10) == 1.9990234375", "assert geometric_sum(3) == 1.875", "assert geometric_sum(9) == 1.998046875", "assert geometric_sum(8) == 1.99609375", "assert geometric_sum(6) == 1.984375", "assert geometric_sum(3) == 1.875", "assert geometric_sum(8) == 1.99609375", "assert geometric_sum(9) == 1.998046875", "assert geometric_sum(5) == 1.96875", "assert geometric_sum(3) == 1.875", "assert geometric_sum(3) == 1.875", "assert geometric_sum(11) == 1.99951171875", "assert geometric_sum(13) == 1.9998779296875", "assert geometric_sum(7) == 1.9921875", "assert geometric_sum(12) == 1.999755859375", "assert geometric_sum(10) == 1.9990234375", "assert geometric_sum(11) == 1.99951171875", "assert geometric_sum(12) == 1.999755859375", "assert geometric_sum(3) == 1.875", "assert geometric_sum(13) == 1.9998779296875", "assert geometric_sum(12) == 1.999755859375", "assert geometric_sum(12) == 1.999755859375"], "entry_point": "geometric_sum", "repair_prompt": ["Write a function geometric_sum to calculate the geometric sum of n-1. You can find more details about the problem at this link. The link provided is https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php.\ngeometric_sum(7) == 1.9921875\n"], "completions": ["from typing import List\n## main.py\n\ndef geometric_sum(n: int) -> float:\n    \"\"\"\n    Calculate the geometric sum of a series up to the nth term.\n    \n    The geometric sum is defined as 1 + 1/2 + 1/4 + 1/8 + ... + 1/2^(n-1).\n    \n    Args:\n        n (int): The number of terms in the series.\n        \n    Returns:\n        float: The sum of the geometric series up to the nth term.\n    \"\"\"\n    if n == 0:\n        return 0.0\n    else:\n        return 1 / (2 ** (n - 1)) + geometric_sum(n - 1)\n", "from typing import List\n## main.py\n\ndef geometric_sum(n: int) -> float:\n    \"\"\"\n    Calculate the geometric sum of n-1 terms.\n\n    The geometric sum is defined as 1 + 1/2 + 1/4 + 1/8 + ... + 1/2^(n-1).\n\n    Args:\n        n (int): The number of terms in the geometric series.\n\n    Returns:\n        float: The sum of the geometric series up to the n-1 term.\n    \"\"\"\n    if n == 0:\n        return 0.0\n    else:\n        return geometric_sum(n - 1) + 1 / (2 ** (n - 1))\n", "from typing import List\n## main.py\n\ndef geometric_sum(n: int) -> float:\n    \"\"\"\n    Calculate the geometric sum of n-1 recursively.\n\n    Args:\n        n (int): A positive integer representing the number of terms in the geometric series.\n\n    Returns:\n        float: The geometric sum of n-1.\n    \"\"\"\n    if n == 0:\n        return 0.0\n    return geometric_sum(n - 1) + (1 / (2 ** n))\n\n# Example usage:\n# print(geometric_sum(5))  # This would calculate the geometric sum of 4\n", "from typing import List\n## main.py\n\ndef geometric_sum(n: int) -> float:\n    \"\"\"\n    Calculate the geometric sum of the series 1 + 1/2 + 1/4 + 1/8 + ... + 1/2^(n-1).\n\n    Args:\n        n (int): The number of terms in the series.\n\n    Returns:\n        float: The sum of the geometric series.\n    \"\"\"\n    if n <= 0:\n        return 0\n    return 1 / (2 ** (n - 1)) + geometric_sum(n - 1)\n\n# Example usage:\n# print(geometric_sum(5))  # Should output the sum of the series up to 1/2^4\n", "from typing import List\n## main.py\n\ndef geometric_sum(n: int) -> float:\n    \"\"\"\n    Calculate the sum of the first n terms of a geometric series.\n    \n    The geometric series is defined as 1 + 1/2 + 1/4 + 1/8 + ... + 1/2^(n-1).\n    \n    Args:\n        n (int): The number of terms in the series.\n        \n    Returns:\n        float: The sum of the geometric series.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return geometric_sum(n - 1) + 1 / (2 ** (n - 1))\n", "from typing import List\n## main.py\n\ndef geometric_sum(n: int) -> float:\n    # Function to calculate the geometric sum\n    if n == 0:\n        return 0\n    else:\n        return 1 / (2 ** (n - 1)) + geometric_sum(n - 1)\n", "from typing import List\n## main.py\n\ndef geometric_sum(n: int) -> float:\n    \"\"\"\n    Calculate the geometric sum of n-1 terms.\n\n    The geometric sum is defined as 1 + 1/2 + 1/4 + 1/8 + ... + 1/2^(n-1).\n\n    Args:\n        n (int): The number of terms in the geometric series.\n\n    Returns:\n        float: The sum of the geometric series up to the n-1 term.\n    \"\"\"\n    if n == 0:\n        return 0.0\n    else:\n        return 1 / (2 ** (n - 1)) + geometric_sum(n - 1)\n", "from typing import List\n## main.py\n\ndef geometric_sum(n: int) -> float:\n    \"\"\"\n    Calculate the sum of a geometric series using a recursive approach.\n    \n    Args:\n        n (int): The number of terms in the series.\n        \n    Returns:\n        float: The sum of the geometric series.\n    \"\"\"\n    if n == 0:\n        return 0.0\n    else:\n        return geometric_sum(n - 1) + 1 / (2 ** n)\n", "from typing import List\n## main.py\n\ndef geometric_sum(n: int) -> float:\n    \"\"\"\n    Calculate the geometric sum of n-1.\n\n    The geometric sum is the sum of the terms of the geometric series until the nth term.\n    \n    Args:\n        n (int): The term number in the geometric series.\n        \n    Returns:\n        float: The geometric sum of n-1.\n    \"\"\"\n    if n == 0:\n        return 0.0\n    elif n == 1:\n        return 1.0\n    \n    sum_value = 0.0\n    for i in range(n):\n        term = 1 / (2 ** i)\n        sum_value += term\n    \n    return sum_value\n", "from typing import List\n## main.py\n\ndef geometric_sum(n: int) -> float:\n    \"\"\"\n    Calculate the sum of a geometric series.\n\n    The function calculates the sum of a geometric series defined as 1 + 1/2 + 1/4 + 1/8 + ... + 1/2^(n-1).\n    \n    Args:\n        n (int): The number of terms in the series.\n    \n    Returns:\n        float: The sum of the geometric series.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return 1 / (2 ** (n - 1)) + geometric_sum(n - 1)\n"], "plans": ["requirement analysis:\nThe function geometric_sum requires a recursive approach to calculate the sum of a geometric series. The series is defined as 1 + 1/2 + 1/4 + 1/8 + ... + 1/2^(n-1). The function should handle the base case where n is 0, returning 0, and for other values of n, it should recursively calculate the sum.\nrequirement pool:\n- Implement the geometric_sum function using recursion\n- Handle the base case where n is 0\n- Ensure the function calculates the sum correctly for any positive integer n\n- Optimize the function for efficiency\nTo implement the geometric_sum function, we will use a simple recursive approach. The function will calculate the sum of a geometric series defined as 1 + 1/2 + 1/4 + 1/8 + ... + 1/2^(n-1). The base case for the recursion will be when n is 0, returning 0. For other values of n, the function will recursively calculate the sum by adding 1 divided by 2 raised to the power of (n-1) to the result of the recursive call with n-1.\n", "requirement analysis:\nThe function geometric_sum requires a recursive approach to calculate the sum of a geometric series. The series is defined as 1 + 1/2 + 1/4 + 1/8 + ... + 1/2^(n-1). The function should handle the base case where n is 0, returning 0, and for other values of n, it should recursively calculate the sum.\nrequirement pool:\n- Implement the geometric_sum function using recursion.\n- Handle the base case where n is 0.\n- Ensure the function calculates the sum of the geometric series correctly.\n- Optimize the function for efficiency.\nTo implement the geometric_sum function, we will use a simple recursive approach. The function will calculate the sum of a geometric series defined as 1 + 1/2 + 1/4 + 1/8 + ... + 1/2^(n-1). The base case for the recursion will be when n is 0, in which case the function will return 0. For other values of n, the function will recursively calculate the sum by adding 1 divided by 2 raised to the power of (n-1) to the result of the recursive call with n-1.\n", "requirement analysis:\nThe requirement is to create a function that calculates the geometric sum of n-1. The geometric sum is the sum of a geometric series, which is a series where each term after the first is found by multiplying the previous term by a constant ratio. The function should be efficient and easy to understand. The user can input any positive integer to get the geometric sum.\nrequirement pool:\n- Implement the function to calculate the geometric sum of n-1\n- Ensure the function is optimized for performance\n- Provide clear documentation and examples for user understanding\n- Test the function with various inputs to ensure accuracy\n- Create a user-friendly interface for input and output\nTo implement the geometric sum calculator, we will use a simple and efficient approach using Python's built-in capabilities. The geometric sum of n-1 is the sum of a geometric series, which can be calculated recursively. We will define a function that takes an integer n as input and returns the geometric sum of n-1. The function will use a helper function to compute the geometric sum recursively.\n", "requirement analysis:\nThe geometric sum is calculated using a recursive function. The function takes an integer n and calculates the sum of the series 1 + 1/2 + 1/4 + 1/8 + ... + 1/2^(n-1). This is a classic example of recursion and is a good exercise for understanding how recursion works in Python.\nrequirement pool:\n- Implement the geometric_sum function\n- Ensure the function handles edge cases\n- Add user input for the value of n\n- Include a simple UI for input and result display\n- Optimize the function for large values of n\nWe will implement the geometric_sum function using a recursive approach. This function will calculate the sum of the series 1 + 1/2 + 1/4 + 1/8 + ... + 1/2^(n-1). The function will handle edge cases such as when n is less than or equal to 0 by returning 0. For large values of n, we will optimize the function to ensure it runs efficiently.\n", "requirement analysis:\nThe function geometric_sum requires a recursive approach to calculate the sum of a geometric series. The series is defined as 1 + 1/2 + 1/4 + 1/8 + ... + 1/2^(n-1). The function should handle the base case where n is 0, returning 0, and for other values of n, it should recursively calculate the sum.\nrequirement pool:\n- Implement the geometric_sum function using recursion.\n- Ensure the function handles the base case where n is 0.\n- Optimize the function for efficiency.\n- Include error handling for invalid inputs.\nTo implement the geometric_sum function, we will use a recursive approach to calculate the sum of a geometric series. The series is defined as 1 + 1/2 + 1/4 + 1/8 + ... + 1/2^(n-1). The function will handle the base case where n is 0, returning 0, and for other values of n, it will recursively calculate the sum.\n", "requirement analysis:\nThe function geometric_sum requires a recursive approach to calculate the sum of a geometric series. The series is defined as 1 + 1/2 + 1/4 + 1/8 + ... + 1/2^(n-1). The function should handle the base case where n is 0, returning 0, and for other values of n, it should recursively calculate the sum.\nrequirement pool:\n- Implement the geometric_sum function using recursion.\n- Ensure the function handles the base case where n is 0.\n- Optimize the function for efficiency.\n- Include error handling for invalid inputs.\nTo implement the geometric_sum function, we will use a recursive approach to calculate the sum of a geometric series. The series is defined as 1 + 1/2 + 1/4 + 1/8 + ... + 1/2^(n-1). The function will handle the base case where n is 0, returning 0, and for other values of n, it will recursively calculate the sum.\n", "requirement analysis:\nThe function geometric_sum requires a recursive approach to calculate the sum of a geometric series. The series is defined as 1 + 1/2 + 1/4 + 1/8 + ... + 1/2^(n-1). The function should handle the base case where n is 0, returning 0, and for other values of n, it should recursively calculate the sum.\nrequirement pool:\n- Implement the geometric_sum function using recursion.\n- Handle the base case where n is 0.\n- Ensure the function calculates the sum of the geometric series correctly.\n- Optimize the function for efficiency.\nTo implement the geometric_sum function, we will use a simple recursive approach. The function will calculate the sum of a geometric series defined as 1 + 1/2 + 1/4 + 1/8 + ... + 1/2^(n-1). The base case for the recursion will be when n is 0, in which case the function will return 0. For other values of n, the function will recursively calculate the sum by adding 1 divided by 2 raised to the power of (n-1) to the result of the recursive call with n-1.\n", "requirement analysis:\nThe requirement is to create a function that calculates the geometric sum of n-1. The geometric sum is the sum of a geometric series, which can be calculated using a recursive approach. The function should handle the base case where n is 0, returning 0, and for other values of n, it should recursively calculate the sum of the series.\nrequirement pool:\n- The main code should accurately calculate the geometric sum using recursion.\n- The function should handle edge cases, such as when n is 0.\n- Implement a simple and clear user interface for the function.\n- Ensure the function is optimized for performance and efficiency.\n- Include comments in the code to explain the logic and steps.\nTo implement the geometric_sum function, we will use a simple recursive approach to calculate the sum of a geometric series. The function will handle the base case where n is 0, returning 0, and for other values of n, it will recursively calculate the sum of the series.\n", "requirement analysis:\nThe requirement is to create a function that calculates the geometric sum of n-1. The geometric sum is the sum of a geometric series. This function will be used in various mathematical and computational applications. The function should be efficient and handle both small and large values of n.\nrequirement pool:\n- The main code should be written in Python.\n- The function should take an integer n as input.\n- The function should return the geometric sum of n-1.\n- The function should handle edge cases such as n=0 and n=1.\n- The function should be optimized for large values of n.\nWe will implement the geometric sum calculation using a recursive approach. This method is suitable for handling both small and large values of n efficiently. The geometric sum of n-1 is calculated by summing the terms of the geometric series until the nth term. The function will handle edge cases such as n=0 and n=1 by returning appropriate values.\n", "requirement analysis:\nThe function geometric_sum requires a recursive approach to calculate the sum of a geometric series. The series is defined as 1 + 1/2 + 1/4 + 1/8 + ... + 1/2^(n-1). The function should handle the base case where n is 0, returning 0, and for other values of n, it should recursively calculate the sum.\nrequirement pool:\n- Implement the geometric_sum function using recursion.\n- Handle the base case where n is 0.\n- Ensure the function calculates the sum of the geometric series correctly.\n- Optimize the function for efficiency.\nTo implement the geometric_sum function, we will use a simple recursive approach. The function will calculate the sum of a geometric series defined as 1 + 1/2 + 1/4 + 1/8 + ... + 1/2^(n-1). The base case for the recursion will be when n is 0, returning 0. For other values of n, the function will recursively calculate the sum by adding 1 divided by 2 raised to the power of (n-1) to the result of the recursive call with n-1.\n"], "test": ["def check(geometric_sum):\n\tassert geometric_sum(7) == 1.9921875", "def check(geometric_sum):\n\tassert geometric_sum(4) == 1.9375", "def check(geometric_sum):\n\tassert geometric_sum(8) == 1.99609375", "def check(geometric_sum):\n\tassert geometric_sum(4) == 1.9375", "def check(geometric_sum):\n\tassert geometric_sum(4) == 1.9375", "def check(geometric_sum):\n\tassert geometric_sum(5) == 1.96875", "def check(geometric_sum):\n\tassert geometric_sum(4) == 1.9375", "def check(geometric_sum):\n\tassert geometric_sum(9) == 1.998046875", "def check(geometric_sum):\n\tassert geometric_sum(2) == 1.75", "def check(geometric_sum):\n\tassert geometric_sum(7) == 1.9921875", "def check(geometric_sum):\n\tassert geometric_sum(5) == 1.96875", "def check(geometric_sum):\n\tassert geometric_sum(3) == 1.875", "def check(geometric_sum):\n\tassert geometric_sum(6) == 1.984375", "def check(geometric_sum):\n\tassert geometric_sum(10) == 1.9990234375", "def check(geometric_sum):\n\tassert geometric_sum(2) == 1.75", "def check(geometric_sum):\n\tassert geometric_sum(6) == 1.984375", "def check(geometric_sum):\n\tassert geometric_sum(12) == 1.999755859375", "def check(geometric_sum):\n\tassert geometric_sum(10) == 1.9990234375", "def check(geometric_sum):\n\tassert geometric_sum(9) == 1.998046875", "def check(geometric_sum):\n\tassert geometric_sum(5) == 1.96875", "def check(geometric_sum):\n\tassert geometric_sum(2) == 1.75", "def check(geometric_sum):\n\tassert geometric_sum(12) == 1.999755859375", "def check(geometric_sum):\n\tassert geometric_sum(8) == 1.99609375", "def check(geometric_sum):\n\tassert geometric_sum(4) == 1.9375", "def check(geometric_sum):\n\tassert geometric_sum(3) == 1.875", "def check(geometric_sum):\n\tassert geometric_sum(11) == 1.99951171875", "def check(geometric_sum):\n\tassert geometric_sum(8) == 1.99609375", "def check(geometric_sum):\n\tassert geometric_sum(11) == 1.99951171875", "def check(geometric_sum):\n\tassert geometric_sum(7) == 1.9921875", "def check(geometric_sum):\n\tassert geometric_sum(3) == 1.875", "def check(geometric_sum):\n\tassert geometric_sum(7) == 1.9921875", "def check(geometric_sum):\n\tassert geometric_sum(10) == 1.9990234375", "def check(geometric_sum):\n\tassert geometric_sum(10) == 1.9990234375", "def check(geometric_sum):\n\tassert geometric_sum(8) == 1.99609375", "def check(geometric_sum):\n\tassert geometric_sum(12) == 1.999755859375", "def check(geometric_sum):\n\tassert geometric_sum(11) == 1.99951171875", "def check(geometric_sum):\n\tassert geometric_sum(1) == 1.5", "def check(geometric_sum):\n\tassert geometric_sum(6) == 1.984375", "def check(geometric_sum):\n\tassert geometric_sum(2) == 1.75", "def check(geometric_sum):\n\tassert geometric_sum(7) == 1.9921875", "def check(geometric_sum):\n\tassert geometric_sum(7) == 1.9921875", "def check(geometric_sum):\n\tassert geometric_sum(6) == 1.984375", "def check(geometric_sum):\n\tassert geometric_sum(7) == 1.9921875", "def check(geometric_sum):\n\tassert geometric_sum(3) == 1.875", "def check(geometric_sum):\n\tassert geometric_sum(9) == 1.998046875", "def check(geometric_sum):\n\tassert geometric_sum(2) == 1.75", "def check(geometric_sum):\n\tassert geometric_sum(4) == 1.9375", "def check(geometric_sum):\n\tassert geometric_sum(3) == 1.875", "def check(geometric_sum):\n\tassert geometric_sum(6) == 1.984375", "def check(geometric_sum):\n\tassert geometric_sum(1) == 1.5", "def check(geometric_sum):\n\tassert geometric_sum(4) == 1.9375", "def check(geometric_sum):\n\tassert geometric_sum(5) == 1.96875", "def check(geometric_sum):\n\tassert geometric_sum(9) == 1.998046875", "def check(geometric_sum):\n\tassert geometric_sum(1) == 1.5", "def check(geometric_sum):\n\tassert geometric_sum(4) == 1.9375", "def check(geometric_sum):\n\tassert geometric_sum(8) == 1.99609375", "def check(geometric_sum):\n\tassert geometric_sum(7) == 1.9921875", "def check(geometric_sum):\n\tassert geometric_sum(9) == 1.998046875", "def check(geometric_sum):\n\tassert geometric_sum(3) == 1.875", "def check(geometric_sum):\n\tassert geometric_sum(4) == 1.9375", "def check(geometric_sum):\n\tassert geometric_sum(7) == 1.9921875", "def check(geometric_sum):\n\tassert geometric_sum(4) == 1.9375", "def check(geometric_sum):\n\tassert geometric_sum(2) == 1.75", "def check(geometric_sum):\n\tassert geometric_sum(4) == 1.9375", "def check(geometric_sum):\n\tassert geometric_sum(5) == 1.96875", "def check(geometric_sum):\n\tassert geometric_sum(6) == 1.984375", "def check(geometric_sum):\n\tassert geometric_sum(1) == 1.5", "def check(geometric_sum):\n\tassert geometric_sum(8) == 1.99609375", "def check(geometric_sum):\n\tassert geometric_sum(6) == 1.984375", "def check(geometric_sum):\n\tassert geometric_sum(12) == 1.999755859375", "def check(geometric_sum):\n\tassert geometric_sum(6) == 1.984375", "def check(geometric_sum):\n\tassert geometric_sum(13) == 1.9998779296875", "def check(geometric_sum):\n\tassert geometric_sum(5) == 1.96875", "def check(geometric_sum):\n\tassert geometric_sum(5) == 1.96875", "def check(geometric_sum):\n\tassert geometric_sum(12) == 1.999755859375", "def check(geometric_sum):\n\tassert geometric_sum(3) == 1.875", "def check(geometric_sum):\n\tassert geometric_sum(7) == 1.9921875", "def check(geometric_sum):\n\tassert geometric_sum(9) == 1.998046875", "def check(geometric_sum):\n\tassert geometric_sum(11) == 1.99951171875", "def check(geometric_sum):\n\tassert geometric_sum(3) == 1.875", "def check(geometric_sum):\n\tassert geometric_sum(10) == 1.9990234375", "def check(geometric_sum):\n\tassert geometric_sum(3) == 1.875", "def check(geometric_sum):\n\tassert geometric_sum(9) == 1.998046875", "def check(geometric_sum):\n\tassert geometric_sum(8) == 1.99609375", "def check(geometric_sum):\n\tassert geometric_sum(6) == 1.984375", "def check(geometric_sum):\n\tassert geometric_sum(3) == 1.875", "def check(geometric_sum):\n\tassert geometric_sum(8) == 1.99609375", "def check(geometric_sum):\n\tassert geometric_sum(9) == 1.998046875", "def check(geometric_sum):\n\tassert geometric_sum(5) == 1.96875", "def check(geometric_sum):\n\tassert geometric_sum(3) == 1.875", "def check(geometric_sum):\n\tassert geometric_sum(3) == 1.875", "def check(geometric_sum):\n\tassert geometric_sum(11) == 1.99951171875", "def check(geometric_sum):\n\tassert geometric_sum(13) == 1.9998779296875", "def check(geometric_sum):\n\tassert geometric_sum(7) == 1.9921875", "def check(geometric_sum):\n\tassert geometric_sum(12) == 1.999755859375", "def check(geometric_sum):\n\tassert geometric_sum(10) == 1.9990234375", "def check(geometric_sum):\n\tassert geometric_sum(11) == 1.99951171875", "def check(geometric_sum):\n\tassert geometric_sum(12) == 1.999755859375", "def check(geometric_sum):\n\tassert geometric_sum(3) == 1.875", "def check(geometric_sum):\n\tassert geometric_sum(13) == 1.9998779296875", "def check(geometric_sum):\n\tassert geometric_sum(12) == 1.999755859375", "def check(geometric_sum):\n\tassert geometric_sum(12) == 1.999755859375"], "scores": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "pass_results": [false, false, false, false, false, false, false, false, false, false], "pass_test_cases_num": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "completion": "from typing import List\n## main.py\n\ndef geometric_sum(n: int) -> float:\n    \"\"\"\n    Calculate the sum of a geometric series.\n\n    The function calculates the sum of a geometric series defined as 1 + 1/2 + 1/4 + 1/8 + ... + 1/2^(n-1).\n    \n    Args:\n        n (int): The number of terms in the series.\n    \n    Returns:\n        float: The sum of the geometric series.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return 1 / (2 ** (n - 1)) + geometric_sum(n - 1)\n", "passed": false, "pass": false, "pass_num": 0, "round": 220, "mutate_method": "expand_one2two", "parent_index": 220}
