{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 63, "prompt": "Write a function to find the largest difference among possible pairs in the given list of tuples.", "code": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ", "test_imports": [], "test_list": ["assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7", "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15", "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23", "assert max_difference([(7, 8), (2, 8), (13, 2), (5, 1)]) == 11", "assert max_difference([(3, 7), (6, 12), (15, 1), (6, 2)]) == 14", "assert max_difference([(1, 3), (6, 11), (10, 2), (6, 4)]) == 8", "assert max_difference([(3, 5), (4, 10), (14, 8), (5, 6)]) == 6", "assert max_difference([(5, 6), (4, 9), (8, 3), (3, 6)]) == 5", "assert max_difference([(2, 6), (6, 6), (13, 2), (3, 4)]) == 11", "assert max_difference([(2, 4), (1, 7), (7, 2), (3, 7)]) == 6", "assert max_difference([(1, 8), (2, 12), (7, 4), (2, 3)]) == 10", "assert max_difference([(3, 5), (4, 10), (11, 8), (2, 7)]) == 6", "assert max_difference([(4, 1), (6, 7), (7, 2), (6, 3)]) == 5", "assert max_difference([(1, 10), (6, 12), (7, 3), (4, 2)]) == 9", "assert max_difference([(7, 1), (1, 9), (8, 5), (2, 6)]) == 8", "assert max_difference([(3, 2), (1, 12), (13, 2), (1, 5)]) == 11", "assert max_difference([(2, 7), (4, 2), (10, 8), (6, 3)]) == 5", "assert max_difference([(6, 8), (4, 8), (9, 6), (5, 3)]) == 4", "assert max_difference([(5, 10), (1, 2), (13, 7), (4, 4)]) == 6", "assert max_difference([(1, 8), (5, 2), (13, 4), (2, 7)]) == 9", "assert max_difference([(4, 1), (4, 7), (8, 2), (3, 1)]) == 6", "assert max_difference([(6, 1), (4, 11), (9, 2), (2, 4)]) == 7", "assert max_difference([(5, 2), (4, 9), (11, 1), (6, 6)]) == 10", "assert max_difference([(5, 5), (2, 6), (6, 4), (1, 5)]) == 4", "assert max_difference([(3, 8), (4, 5), (12, 2), (2, 7)]) == 10", "assert max_difference([(4, 5), (6, 6), (12, 8), (2, 3)]) == 4", "assert max_difference([(8, 10), (5, 9), (15, 4), (2, 2)]) == 11", "assert max_difference([(2, 9), (4, 8), (11, 5), (1, 2)]) == 7", "assert max_difference([(2, 9), (1, 12), (13, 1), (1, 7)]) == 12", "assert max_difference([(3, 8), (6, 8), (13, 4), (6, 1)]) == 9", "assert max_difference([(7, 2), (5, 5), (12, 5), (5, 3)]) == 7", "assert max_difference([(6, 8), (4, 3), (10, 6), (3, 2)]) == 4", "assert max_difference([(3, 5), (2, 8), (5, 3), (5, 2)]) == 6", "assert max_difference([(7, 5), (4, 12), (15, 1), (1, 2)]) == 14", "assert max_difference([(3, 5), (3, 12), (13, 3), (2, 3)]) == 10", "assert max_difference([(2, 7), (5, 5), (10, 3), (1, 7)]) == 7", "assert max_difference([(5, 10), (2, 19), (7, 8), (8, 12)]) == 17", "assert max_difference([(7, 1), (7, 17), (10, 13), (11, 13)]) == 10", "assert max_difference([(8, 2), (3, 19), (11, 9), (12, 16)]) == 16", "assert max_difference([(7, 9), (7, 17), (10, 18), (7, 7)]) == 10", "assert max_difference([(4, 4), (5, 22), (9, 8), (6, 8)]) == 17", "assert max_difference([(6, 6), (5, 18), (11, 11), (9, 16)]) == 13", "assert max_difference([(5, 2), (3, 16), (5, 11), (9, 10)]) == 13", "assert max_difference([(6, 3), (1, 12), (10, 8), (16, 12)]) == 11", "assert max_difference([(7, 7), (3, 12), (8, 16), (16, 17)]) == 9", "assert max_difference([(8, 7), (5, 19), (12, 11), (13, 11)]) == 14", "assert max_difference([(8, 4), (3, 17), (6, 10), (10, 11)]) == 14", "assert max_difference([(1, 4), (5, 19), (9, 12), (10, 17)]) == 14", "assert max_difference([(3, 3), (5, 22), (5, 9), (14, 15)]) == 17", "assert max_difference([(4, 4), (7, 18), (4, 11), (9, 16)]) == 11", "assert max_difference([(2, 9), (1, 14), (13, 12), (14, 16)]) == 13", "assert max_difference([(3, 2), (2, 16), (8, 12), (6, 15)]) == 14", "assert max_difference([(4, 8), (3, 22), (5, 8), (13, 16)]) == 19", "assert max_difference([(9, 2), (1, 20), (9, 16), (8, 11)]) == 19", "assert max_difference([(4, 6), (5, 18), (8, 13), (6, 14)]) == 13", "assert max_difference([(9, 5), (4, 17), (11, 15), (16, 8)]) == 13", "assert max_difference([(1, 10), (4, 21), (9, 12), (12, 13)]) == 17", "assert max_difference([(6, 9), (6, 21), (12, 13), (9, 9)]) == 15", "assert max_difference([(1, 7), (2, 12), (11, 9), (13, 14)]) == 10", "assert max_difference([(3, 9), (4, 12), (8, 17), (16, 8)]) == 9", "assert max_difference([(1, 8), (3, 17), (6, 18), (8, 16)]) == 14", "assert max_difference([(5, 10), (3, 12), (7, 8), (15, 9)]) == 9", "assert max_difference([(4, 5), (7, 13), (12, 8), (13, 8)]) == 6", "assert max_difference([(1, 2), (4, 22), (6, 18), (8, 12)]) == 18", "assert max_difference([(2, 10), (3, 21), (12, 8), (14, 15)]) == 18", "assert max_difference([(3, 6), (2, 15), (9, 11), (8, 13)]) == 13", "assert max_difference([(3, 10), (5, 19), (14, 17), (13, 11)]) == 14", "assert max_difference([(7, 11), (6, 15), (11, 16), (12, 7)]) == 9", "assert max_difference([(1, 5), (2, 18), (13, 17), (16, 12)]) == 16", "assert max_difference([(7, 35), (25, 23), (13, 23), (39, 23)]) == 28", "assert max_difference([(12, 32), (19, 25), (11, 21), (46, 23)]) == 23", "assert max_difference([(13, 36), (18, 24), (9, 27), (42, 20)]) == 23", "assert max_difference([(13, 37), (21, 26), (18, 21), (43, 23)]) == 24", "assert max_difference([(16, 39), (17, 32), (16, 18), (43, 24)]) == 23", "assert max_difference([(8, 36), (26, 24), (17, 26), (44, 19)]) == 28", "assert max_difference([(9, 38), (24, 23), (14, 27), (40, 27)]) == 29", "assert max_difference([(16, 38), (25, 28), (16, 18), (42, 18)]) == 24", "assert max_difference([(11, 39), (25, 29), (8, 24), (43, 17)]) == 28", "assert max_difference([(13, 37), (18, 28), (13, 20), (40, 24)]) == 24", "assert max_difference([(13, 30), (20, 22), (9, 20), (45, 18)]) == 27", "assert max_difference([(11, 36), (23, 24), (17, 19), (46, 24)]) == 25", "assert max_difference([(17, 33), (22, 29), (17, 23), (42, 23)]) == 19", "assert max_difference([(11, 34), (16, 27), (16, 26), (42, 22)]) == 23", "assert max_difference([(16, 40), (26, 30), (18, 24), (37, 18)]) == 24", "assert max_difference([(15, 32), (17, 25), (9, 24), (41, 19)]) == 22", "assert max_difference([(12, 37), (21, 29), (13, 25), (36, 24)]) == 25", "assert max_difference([(14, 31), (19, 24), (15, 20), (45, 20)]) == 25", "assert max_difference([(16, 33), (22, 26), (11, 18), (38, 23)]) == 17", "assert max_difference([(14, 31), (24, 23), (16, 21), (44, 21)]) == 23", "assert max_difference([(10, 34), (23, 25), (11, 24), (38, 23)]) == 24", "assert max_difference([(10, 34), (25, 31), (13, 28), (45, 17)]) == 28", "assert max_difference([(8, 30), (16, 22), (10, 22), (38, 17)]) == 22", "assert max_difference([(8, 40), (19, 32), (8, 21), (38, 27)]) == 32", "assert max_difference([(17, 37), (20, 26), (18, 21), (40, 24)]) == 20", "assert max_difference([(16, 32), (18, 25), (18, 25), (38, 22)]) == 16", "assert max_difference([(8, 40), (18, 27), (17, 18), (40, 23)]) == 32", "assert max_difference([(10, 36), (25, 28), (10, 25), (37, 20)]) == 26", "assert max_difference([(10, 30), (26, 28), (11, 20), (45, 19)]) == 26", "assert max_difference([(16, 30), (24, 23), (9, 19), (40, 18)]) == 22", "assert max_difference([(13, 35), (21, 26), (18, 19), (46, 25)]) == 22", "assert max_difference([(13, 38), (26, 26), (10, 26), (44, 26)]) == 25", "assert max_difference([(11, 33), (22, 27), (14, 21), (42, 23)]) == 22"], "entry_point": "max_difference", "repair_prompt": ["Write a function max_difference to find the largest difference among possible pairs in the given list of tuples.\nmax_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n"], "completions": ["from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(tuples: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum difference between the maximum and minimum values in each tuple of the given list.\n    \n    Args:\n        tuples (List[Tuple[int, int]]): A list of tuples, where each tuple contains two integers.\n    \n    Returns:\n        int: The maximum difference found between the maximum and minimum values in the tuples.\n    \"\"\"\n    if not tuples:\n        raise ValueError(\"The input list of tuples is empty.\")\n    \n    max_diff = 0\n    \n    for t in tuples:\n        if not isinstance(t, tuple) or len(t) != 2 or not all(isinstance(n, int) for n in t):\n            raise ValueError(\"Each tuple must contain exactly two integers.\")\n        \n        current_diff = max(t) - min(t)\n        if current_diff > max_diff:\n            max_diff = current_diff\n    \n    return max_diff\n\n# Example usage:\n# print(max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]))  # Output: 7\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_difference(tuples_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the largest difference among tuples in a list.\n    \n    Args:\n        tuples_list (List[Tuple[int, int]]): A list of tuples, each containing exactly two integers.\n        \n    Returns:\n        int: The largest difference among the tuples.\n    \"\"\"\n    if not tuples_list:\n        raise ValueError(\"The input list is empty\")\n    \n    max_diff = 0\n    \n    for t in tuples_list:\n        if len(t) != 2:\n            raise ValueError(\"Each tuple must contain exactly two elements\")\n        diff = max(t) - min(t)\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n", "from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(tuples: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Finds the largest difference among possible pairs in a list of tuples.\n\n    Args:\n        tuples (List[Tuple[int, int]]): A list of tuples, where each tuple contains two integers.\n\n    Returns:\n        int: The largest difference found between any two numbers in the list of tuples.\n    \"\"\"\n    if not tuples:\n        raise ValueError(\"The input list of tuples is empty.\")\n\n    max_diff = 0\n    for a, b in tuples:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff\n\n# Example usage:\n# tuples = [(3, 5), (1, 7), (10, 3), (1, 2)]\n# print(max_difference(tuples))  # Output: 7\n", "from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(lst: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum difference between the maximum and minimum values in each tuple of the list.\n    \n    Args:\n        lst (List[Tuple[int, int]]): A list of tuples, each containing two integers.\n        \n    Returns:\n        int: The maximum difference among all tuples.\n    \"\"\"\n    if not lst:\n        return 0\n    \n    max_diff = 0\n    \n    for a, b in lst:\n        current_diff = max(a, b) - min(a, b)\n        if current_diff > max_diff:\n            max_diff = current_diff\n    \n    return max_diff\n", "from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(pairs: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the largest difference between the elements of pairs in a list of tuples.\n\n    Args:\n        pairs (List[Tuple[int, int]]): A list of tuples, each containing two integers.\n\n    Returns:\n        int: An integer representing the largest difference.\n    \"\"\"\n    max_diff = 0\n    for pair in pairs:\n        diff = max(pair) - min(pair)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n", "from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(pairs: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum difference between the elements of pairs in a list of tuples.\n\n    Args:\n        pairs (List[Tuple[int, int]]): A list of tuples, where each tuple contains two integers.\n\n    Returns:\n        int: The maximum difference between the maximum and minimum values in the pairs.\n    \"\"\"\n    if not pairs:\n        raise ValueError(\"The input list of pairs is empty.\")\n\n    max_diff = 0\n\n    for pair in pairs:\n        if not isinstance(pair, tuple) or len(pair) != 2 or not all(isinstance(num, int) for num in pair):\n            raise ValueError(\"Each pair must be a tuple of two integers.\")\n\n        max_val = max(pair)\n        min_val = min(pair)\n        diff = max_val - min_val\n\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff\n", "from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(tuples_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the largest difference between the elements of tuples within a list.\n\n    Args:\n        tuples_list (List[Tuple[int, int]]): A list of tuples, each containing two integers.\n\n    Returns:\n        int: An integer representing the largest difference.\n    \"\"\"\n    max_diff = 0\n    for t in tuples_list:\n        if t[0] > t[1]:\n            diff = t[0] - t[1]\n        else:\n            diff = t[1] - t[0]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n", "from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(pairs: List[Tuple[int, int]]) -> int:\n    max_diff = 0\n    for pair in pairs:\n        max_val = max(pair)\n        min_val = min(pair)\n        diff = max_val - min_val\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n", "from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(tuples_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum difference between the maximum and minimum values in a list of tuples.\n\n    Args:\n        tuples_list (List[Tuple[int, int]]): A list of tuples, where each tuple contains two integers.\n\n    Returns:\n        int: The maximum difference between the maximum and minimum values in the list of tuples.\n    \"\"\"\n    max_diff = 0\n    for t in tuples_list:\n        if t[0] > t[1]:\n            diff = t[0] - t[1]\n        else:\n            diff = t[1] - t[0]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n", "from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(lst: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum difference between the elements of tuples within a list.\n\n    Args:\n        lst (List[Tuple[int, int]]): A list of tuples, each containing two integers.\n\n    Returns:\n        int: The maximum difference between the maximum and minimum values in the tuples.\n    \"\"\"\n    max_diff = 0\n    for tup in lst:\n        if tup[0] > tup[1]:\n            diff = tup[0] - tup[1]\n        else:\n            diff = tup[1] - tup[0]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"], "plans": ["requirement analysis:\nThe function needs to be able to handle a list of tuples, where each tuple contains two integers. The goal is to find the largest difference between the two numbers in each tuple. This requires iterating through the list, calculating the difference for each pair, and keeping track of the maximum difference found.\nrequirement pool:\n- Implement the function to calculate the maximum difference between pairs in a list of tuples\n- Ensure the function is optimized for performance\n- Make the code readable and maintainable\n- Test the function with various inputs to ensure accuracy\n- Compare the function's performance with existing solutions\nTo implement the function `max_difference` efficiently, we will use Python's built-in capabilities and optimize for performance. The function will iterate through the list of tuples, calculate the difference between the maximum and minimum values in each tuple, and keep track of the maximum difference found. This approach leverages Python's simplicity and the efficiency of built-in functions.\n", "requirement analysis:\nThe requirement is to create a function that calculates the largest difference between the elements of tuples within a list. This involves understanding the difference between the maximum and minimum values in each tuple and then finding the largest of these differences. The function should be robust enough to handle lists with varying lengths of tuples and should return the correct result efficiently.\nrequirement pool:\n- The main code should accurately calculate the largest difference among tuples in a list\n- The function should handle tuples of different lengths\n- The function should be optimized for performance\n- The function should provide clear and concise error messages for incorrect inputs\n- The function should be user-friendly, with a simple interface\nTo create a function that calculates the largest difference among tuples in a list, we will use Python's built-in functions and standard library. The function will iterate through each tuple in the list, calculate the difference between the maximum and minimum values, and then find the largest difference among these values.\n", "requirement analysis:\nThe function needs to be able to handle a list of tuples, where each tuple contains two integers. The goal is to find the largest difference between the two numbers in each tuple. This requires a clear understanding of how to iterate through the list, compare the values, and calculate the differences. The function should be efficient and handle edge cases such as empty lists or lists with negative numbers.\nrequirement pool:\n- The main code should be clear and concise\n- The function should handle tuples with negative numbers\n- The function should be optimized for performance\n- The function should provide detailed error messages for invalid inputs\n- The function should be compatible with both Python 2 and Python 3\nTo create a function that finds the largest difference among possible pairs in a list of tuples, we will use Python's built-in capabilities and optimize for simplicity and performance. The function will iterate through each tuple, calculate the difference between the two numbers, and keep track of the maximum difference found. This approach ensures clarity and efficiency.\n", "requirement analysis:\nThe requirement is to create a function that calculates the maximum difference between the elements of tuples within a list. This involves understanding the difference between the maximum and minimum values in each tuple and then finding the maximum of these differences. The function should be efficient and handle basic Python lists.\nrequirement pool:\n- Implement the function to calculate the maximum difference\n- Ensure the function is optimized for performance\n- Make the code readable and maintainable\n- Test the function with various inputs to ensure accuracy\n- Consider edge cases such as empty lists or lists with non-numeric tuples\nTo implement the function `max_difference` efficiently and accurately, we will use Python's built-in functions and standard library features. The function will iterate through each tuple in the list, calculate the difference between the maximum and minimum values, and then find the maximum difference among all tuples. This approach leverages Python's simplicity and performance for this specific task.\n", "requirement analysis:\nThe requirement is to create a function that calculates the largest difference between the elements of pairs in a list of tuples. The function should be efficient and handle various inputs, including empty lists or lists with single tuples. The function should also be easy to understand and use.\nrequirement pool:\n- The function should correctly calculate the largest difference for any given list of tuples.\n- The function should be efficient and handle large lists of tuples.\n- The function should be easy to understand and use.\n- The function should handle edge cases such as empty lists or lists with single tuples.\n- The function should be optimized for performance.\nTo create a function that calculates the largest difference between the elements of pairs in a list of tuples, we will use Python's built-in functions and standard library. The function will iterate through each tuple in the list, calculate the difference between the maximum and minimum values, and keep track of the largest difference found. This approach ensures efficiency and simplicity.\n", "requirement analysis:\nThe requirement is to create a function that calculates the maximum difference between the elements of pairs in a list of tuples. The function should be efficient and handle basic to moderate-sized datasets effectively. It should also be easy to understand and integrate into other projects.\nrequirement pool:\n- The main code should be optimized for performance\n- The function should handle edge cases correctly\n- The function should be easy to understand and use\n- The function should be flexible and adaptable to different data structures\n- The function should be tested for large datasets to ensure efficiency\nTo create a function that calculates the maximum difference between the elements of pairs in a list of tuples, we will use Python's built-in functions and standard libraries. The function will iterate through each tuple, calculate the difference between the maximum and minimum values, and keep track of the largest difference found. This approach ensures efficiency and simplicity.\n", "requirement analysis:\nThe requirement is to create a function that calculates the largest difference between the elements of tuples within a list. The function should be efficient and handle various lengths of tuples. It should also be easy to understand and use.\nrequirement pool:\n- The main code should be clear and concise\n- The function should handle tuples of different lengths\n- Ensure the function is optimized for performance\n- Include comments to explain the code\n- Test the function with edge cases\nTo create a function that calculates the largest difference between the elements of tuples within a list, we will use Python's built-in capabilities and optimize for performance. The function will iterate through each tuple in the list, calculate the difference between the maximum and minimum values, and keep track of the largest difference found. This approach ensures clarity and simplicity in the code.\n", "requirement analysis:\nThe function 'max_difference' needs to find the largest difference between the elements of pairs in a list of tuples. This involves comparing the maximum and minimum values within each tuple and then determining the maximum difference among all tuples. The function should handle various input sizes and types, ensuring it's robust and efficient.\nrequirement pool:\n- Implement the function to handle tuples of varying lengths\n- Ensure the function calculates the maximum difference accurately\n- Optimize the function for performance, especially for large lists\n- Add error handling for non-tuple inputs\n- Include documentation and examples for user guidance\nTo implement the 'max_difference' function efficiently, we will use Python's built-in functions and standard library modules. The function will iterate through each tuple in the list, calculate the difference between the maximum and minimum values, and then find the maximum difference among all tuples. This approach ensures simplicity and performance.\n", "requirement analysis:\nThe function 'max_difference' needs to be efficient in calculating the largest difference between the elements of tuples within a list. It should handle various sizes of input lists and return the correct maximum difference. The function should be simple and easy to understand, suitable for both novice and experienced users.\nrequirement pool:\n- Implement the function to calculate the maximum difference between elements of tuples in a list.\n- Ensure the function works correctly for lists of tuples of different lengths.\n- Optimize the function for performance, especially for large lists.\n- Include error handling for non-tuple elements in the list.\n- Document the function with examples and usage instructions.\nTo implement the 'max_difference' function efficiently, we will use Python's built-in capabilities and optimize for performance. The function will iterate through the list of tuples, calculate the difference between the maximum and minimum values in each tuple, and return the maximum difference found.\n", "requirement analysis:\nThe requirement is to create a function that calculates the maximum difference between the elements of tuples within a list. The function should be efficient and handle various lengths of tuples. It should also be easy to understand and use.\nrequirement pool:\n- The main code should be clear and concise\n- The function should handle tuples of different lengths\n- The function should be optimized for performance\n- The function should include error handling for invalid inputs\n- The function should be documented with examples and usage instructions\nTo create a function that calculates the maximum difference between the elements of tuples within a list, we will use Python's built-in functions and standard library. The function will iterate through each tuple in the list, calculate the difference between the maximum and minimum values, and keep track of the largest difference found. This approach ensures clarity and simplicity in the implementation.\n"], "test": ["def check(max_difference):\n\tassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7", "def check(max_difference):\n\tassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15", "def check(max_difference):\n\tassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23", "def check(max_difference):\n\tassert max_difference([(7, 8), (2, 8), (13, 2), (5, 1)]) == 11", "def check(max_difference):\n\tassert max_difference([(3, 7), (6, 12), (15, 1), (6, 2)]) == 14", "def check(max_difference):\n\tassert max_difference([(1, 3), (6, 11), (10, 2), (6, 4)]) == 8", "def check(max_difference):\n\tassert max_difference([(3, 5), (4, 10), (14, 8), (5, 6)]) == 6", "def check(max_difference):\n\tassert max_difference([(5, 6), (4, 9), (8, 3), (3, 6)]) == 5", "def check(max_difference):\n\tassert max_difference([(2, 6), (6, 6), (13, 2), (3, 4)]) == 11", "def check(max_difference):\n\tassert max_difference([(2, 4), (1, 7), (7, 2), (3, 7)]) == 6", "def check(max_difference):\n\tassert max_difference([(1, 8), (2, 12), (7, 4), (2, 3)]) == 10", "def check(max_difference):\n\tassert max_difference([(3, 5), (4, 10), (11, 8), (2, 7)]) == 6", "def check(max_difference):\n\tassert max_difference([(4, 1), (6, 7), (7, 2), (6, 3)]) == 5", "def check(max_difference):\n\tassert max_difference([(1, 10), (6, 12), (7, 3), (4, 2)]) == 9", "def check(max_difference):\n\tassert max_difference([(7, 1), (1, 9), (8, 5), (2, 6)]) == 8", "def check(max_difference):\n\tassert max_difference([(3, 2), (1, 12), (13, 2), (1, 5)]) == 11", "def check(max_difference):\n\tassert max_difference([(2, 7), (4, 2), (10, 8), (6, 3)]) == 5", "def check(max_difference):\n\tassert max_difference([(6, 8), (4, 8), (9, 6), (5, 3)]) == 4", "def check(max_difference):\n\tassert max_difference([(5, 10), (1, 2), (13, 7), (4, 4)]) == 6", "def check(max_difference):\n\tassert max_difference([(1, 8), (5, 2), (13, 4), (2, 7)]) == 9", "def check(max_difference):\n\tassert max_difference([(4, 1), (4, 7), (8, 2), (3, 1)]) == 6", "def check(max_difference):\n\tassert max_difference([(6, 1), (4, 11), (9, 2), (2, 4)]) == 7", "def check(max_difference):\n\tassert max_difference([(5, 2), (4, 9), (11, 1), (6, 6)]) == 10", "def check(max_difference):\n\tassert max_difference([(5, 5), (2, 6), (6, 4), (1, 5)]) == 4", "def check(max_difference):\n\tassert max_difference([(3, 8), (4, 5), (12, 2), (2, 7)]) == 10", "def check(max_difference):\n\tassert max_difference([(4, 5), (6, 6), (12, 8), (2, 3)]) == 4", "def check(max_difference):\n\tassert max_difference([(8, 10), (5, 9), (15, 4), (2, 2)]) == 11", "def check(max_difference):\n\tassert max_difference([(2, 9), (4, 8), (11, 5), (1, 2)]) == 7", "def check(max_difference):\n\tassert max_difference([(2, 9), (1, 12), (13, 1), (1, 7)]) == 12", "def check(max_difference):\n\tassert max_difference([(3, 8), (6, 8), (13, 4), (6, 1)]) == 9", "def check(max_difference):\n\tassert max_difference([(7, 2), (5, 5), (12, 5), (5, 3)]) == 7", "def check(max_difference):\n\tassert max_difference([(6, 8), (4, 3), (10, 6), (3, 2)]) == 4", "def check(max_difference):\n\tassert max_difference([(3, 5), (2, 8), (5, 3), (5, 2)]) == 6", "def check(max_difference):\n\tassert max_difference([(7, 5), (4, 12), (15, 1), (1, 2)]) == 14", "def check(max_difference):\n\tassert max_difference([(3, 5), (3, 12), (13, 3), (2, 3)]) == 10", "def check(max_difference):\n\tassert max_difference([(2, 7), (5, 5), (10, 3), (1, 7)]) == 7", "def check(max_difference):\n\tassert max_difference([(5, 10), (2, 19), (7, 8), (8, 12)]) == 17", "def check(max_difference):\n\tassert max_difference([(7, 1), (7, 17), (10, 13), (11, 13)]) == 10", "def check(max_difference):\n\tassert max_difference([(8, 2), (3, 19), (11, 9), (12, 16)]) == 16", "def check(max_difference):\n\tassert max_difference([(7, 9), (7, 17), (10, 18), (7, 7)]) == 10", "def check(max_difference):\n\tassert max_difference([(4, 4), (5, 22), (9, 8), (6, 8)]) == 17", "def check(max_difference):\n\tassert max_difference([(6, 6), (5, 18), (11, 11), (9, 16)]) == 13", "def check(max_difference):\n\tassert max_difference([(5, 2), (3, 16), (5, 11), (9, 10)]) == 13", "def check(max_difference):\n\tassert max_difference([(6, 3), (1, 12), (10, 8), (16, 12)]) == 11", "def check(max_difference):\n\tassert max_difference([(7, 7), (3, 12), (8, 16), (16, 17)]) == 9", "def check(max_difference):\n\tassert max_difference([(8, 7), (5, 19), (12, 11), (13, 11)]) == 14", "def check(max_difference):\n\tassert max_difference([(8, 4), (3, 17), (6, 10), (10, 11)]) == 14", "def check(max_difference):\n\tassert max_difference([(1, 4), (5, 19), (9, 12), (10, 17)]) == 14", "def check(max_difference):\n\tassert max_difference([(3, 3), (5, 22), (5, 9), (14, 15)]) == 17", "def check(max_difference):\n\tassert max_difference([(4, 4), (7, 18), (4, 11), (9, 16)]) == 11", "def check(max_difference):\n\tassert max_difference([(2, 9), (1, 14), (13, 12), (14, 16)]) == 13", "def check(max_difference):\n\tassert max_difference([(3, 2), (2, 16), (8, 12), (6, 15)]) == 14", "def check(max_difference):\n\tassert max_difference([(4, 8), (3, 22), (5, 8), (13, 16)]) == 19", "def check(max_difference):\n\tassert max_difference([(9, 2), (1, 20), (9, 16), (8, 11)]) == 19", "def check(max_difference):\n\tassert max_difference([(4, 6), (5, 18), (8, 13), (6, 14)]) == 13", "def check(max_difference):\n\tassert max_difference([(9, 5), (4, 17), (11, 15), (16, 8)]) == 13", "def check(max_difference):\n\tassert max_difference([(1, 10), (4, 21), (9, 12), (12, 13)]) == 17", "def check(max_difference):\n\tassert max_difference([(6, 9), (6, 21), (12, 13), (9, 9)]) == 15", "def check(max_difference):\n\tassert max_difference([(1, 7), (2, 12), (11, 9), (13, 14)]) == 10", "def check(max_difference):\n\tassert max_difference([(3, 9), (4, 12), (8, 17), (16, 8)]) == 9", "def check(max_difference):\n\tassert max_difference([(1, 8), (3, 17), (6, 18), (8, 16)]) == 14", "def check(max_difference):\n\tassert max_difference([(5, 10), (3, 12), (7, 8), (15, 9)]) == 9", "def check(max_difference):\n\tassert max_difference([(4, 5), (7, 13), (12, 8), (13, 8)]) == 6", "def check(max_difference):\n\tassert max_difference([(1, 2), (4, 22), (6, 18), (8, 12)]) == 18", "def check(max_difference):\n\tassert max_difference([(2, 10), (3, 21), (12, 8), (14, 15)]) == 18", "def check(max_difference):\n\tassert max_difference([(3, 6), (2, 15), (9, 11), (8, 13)]) == 13", "def check(max_difference):\n\tassert max_difference([(3, 10), (5, 19), (14, 17), (13, 11)]) == 14", "def check(max_difference):\n\tassert max_difference([(7, 11), (6, 15), (11, 16), (12, 7)]) == 9", "def check(max_difference):\n\tassert max_difference([(1, 5), (2, 18), (13, 17), (16, 12)]) == 16", "def check(max_difference):\n\tassert max_difference([(7, 35), (25, 23), (13, 23), (39, 23)]) == 28", "def check(max_difference):\n\tassert max_difference([(12, 32), (19, 25), (11, 21), (46, 23)]) == 23", "def check(max_difference):\n\tassert max_difference([(13, 36), (18, 24), (9, 27), (42, 20)]) == 23", "def check(max_difference):\n\tassert max_difference([(13, 37), (21, 26), (18, 21), (43, 23)]) == 24", "def check(max_difference):\n\tassert max_difference([(16, 39), (17, 32), (16, 18), (43, 24)]) == 23", "def check(max_difference):\n\tassert max_difference([(8, 36), (26, 24), (17, 26), (44, 19)]) == 28", "def check(max_difference):\n\tassert max_difference([(9, 38), (24, 23), (14, 27), (40, 27)]) == 29", "def check(max_difference):\n\tassert max_difference([(16, 38), (25, 28), (16, 18), (42, 18)]) == 24", "def check(max_difference):\n\tassert max_difference([(11, 39), (25, 29), (8, 24), (43, 17)]) == 28", "def check(max_difference):\n\tassert max_difference([(13, 37), (18, 28), (13, 20), (40, 24)]) == 24", "def check(max_difference):\n\tassert max_difference([(13, 30), (20, 22), (9, 20), (45, 18)]) == 27", "def check(max_difference):\n\tassert max_difference([(11, 36), (23, 24), (17, 19), (46, 24)]) == 25", "def check(max_difference):\n\tassert max_difference([(17, 33), (22, 29), (17, 23), (42, 23)]) == 19", "def check(max_difference):\n\tassert max_difference([(11, 34), (16, 27), (16, 26), (42, 22)]) == 23", "def check(max_difference):\n\tassert max_difference([(16, 40), (26, 30), (18, 24), (37, 18)]) == 24", "def check(max_difference):\n\tassert max_difference([(15, 32), (17, 25), (9, 24), (41, 19)]) == 22", "def check(max_difference):\n\tassert max_difference([(12, 37), (21, 29), (13, 25), (36, 24)]) == 25", "def check(max_difference):\n\tassert max_difference([(14, 31), (19, 24), (15, 20), (45, 20)]) == 25", "def check(max_difference):\n\tassert max_difference([(16, 33), (22, 26), (11, 18), (38, 23)]) == 17", "def check(max_difference):\n\tassert max_difference([(14, 31), (24, 23), (16, 21), (44, 21)]) == 23", "def check(max_difference):\n\tassert max_difference([(10, 34), (23, 25), (11, 24), (38, 23)]) == 24", "def check(max_difference):\n\tassert max_difference([(10, 34), (25, 31), (13, 28), (45, 17)]) == 28", "def check(max_difference):\n\tassert max_difference([(8, 30), (16, 22), (10, 22), (38, 17)]) == 22", "def check(max_difference):\n\tassert max_difference([(8, 40), (19, 32), (8, 21), (38, 27)]) == 32", "def check(max_difference):\n\tassert max_difference([(17, 37), (20, 26), (18, 21), (40, 24)]) == 20", "def check(max_difference):\n\tassert max_difference([(16, 32), (18, 25), (18, 25), (38, 22)]) == 16", "def check(max_difference):\n\tassert max_difference([(8, 40), (18, 27), (17, 18), (40, 23)]) == 32", "def check(max_difference):\n\tassert max_difference([(10, 36), (25, 28), (10, 25), (37, 20)]) == 26", "def check(max_difference):\n\tassert max_difference([(10, 30), (26, 28), (11, 20), (45, 19)]) == 26", "def check(max_difference):\n\tassert max_difference([(16, 30), (24, 23), (9, 19), (40, 18)]) == 22", "def check(max_difference):\n\tassert max_difference([(13, 35), (21, 26), (18, 19), (46, 25)]) == 22", "def check(max_difference):\n\tassert max_difference([(13, 38), (26, 26), (10, 26), (44, 26)]) == 25", "def check(max_difference):\n\tassert max_difference([(11, 33), (22, 27), (14, 21), (42, 23)]) == 22"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(lst: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum difference between the elements of tuples within a list.\n\n    Args:\n        lst (List[Tuple[int, int]]): A list of tuples, each containing two integers.\n\n    Returns:\n        int: The maximum difference between the maximum and minimum values in the tuples.\n    \"\"\"\n    max_diff = 0\n    for tup in lst:\n        if tup[0] > tup[1]:\n            diff = tup[0] - tup[1]\n        else:\n            diff = tup[1] - tup[0]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n", "passed": true, "pass": true, "pass_num": 10, "round": 402, "mutate_method": "rephrase_one", "parent_index": 301}
