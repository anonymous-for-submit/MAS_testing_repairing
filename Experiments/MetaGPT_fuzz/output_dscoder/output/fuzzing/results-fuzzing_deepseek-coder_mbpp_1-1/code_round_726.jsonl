{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 566, "prompt": "Write a function to get the sum of the digits of a non-negative integer. Ensure your function handles edge cases, such as when the input is zero, correctly.", "code": "def sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))", "test_imports": [], "test_list": ["assert sum_digits(345)==12", "assert sum_digits(12)==3", "assert sum_digits(97)==16", "assert sum_digits(344) == 11", "assert sum_digits(350) == 8", "assert sum_digits(342) == 9", "assert sum_digits(342) == 9", "assert sum_digits(341) == 8", "assert sum_digits(347) == 14", "assert sum_digits(345) == 12", "assert sum_digits(343) == 10", "assert sum_digits(341) == 8", "assert sum_digits(345) == 12", "assert sum_digits(340) == 7", "assert sum_digits(345) == 12", "assert sum_digits(347) == 14", "assert sum_digits(350) == 8", "assert sum_digits(344) == 11", "assert sum_digits(343) == 10", "assert sum_digits(344) == 11", "assert sum_digits(340) == 7", "assert sum_digits(341) == 8", "assert sum_digits(350) == 8", "assert sum_digits(344) == 11", "assert sum_digits(343) == 10", "assert sum_digits(347) == 14", "assert sum_digits(349) == 16", "assert sum_digits(348) == 15", "assert sum_digits(347) == 14", "assert sum_digits(341) == 8", "assert sum_digits(343) == 10", "assert sum_digits(343) == 10", "assert sum_digits(346) == 13", "assert sum_digits(350) == 8", "assert sum_digits(340) == 7", "assert sum_digits(349) == 16", "assert sum_digits(15) == 6", "assert sum_digits(9) == 9", "assert sum_digits(10) == 1", "assert sum_digits(12) == 3", "assert sum_digits(11) == 2", "assert sum_digits(15) == 6", "assert sum_digits(10) == 1", "assert sum_digits(14) == 5", "assert sum_digits(17) == 8", "assert sum_digits(10) == 1", "assert sum_digits(13) == 4", "assert sum_digits(7) == 7", "assert sum_digits(9) == 9", "assert sum_digits(16) == 7", "assert sum_digits(15) == 6", "assert sum_digits(16) == 7", "assert sum_digits(9) == 9", "assert sum_digits(13) == 4", "assert sum_digits(10) == 1", "assert sum_digits(16) == 7", "assert sum_digits(16) == 7", "assert sum_digits(7) == 7", "assert sum_digits(13) == 4", "assert sum_digits(10) == 1", "assert sum_digits(10) == 1", "assert sum_digits(9) == 9", "assert sum_digits(14) == 5", "assert sum_digits(17) == 8", "assert sum_digits(12) == 3", "assert sum_digits(16) == 7", "assert sum_digits(7) == 7", "assert sum_digits(8) == 8", "assert sum_digits(13) == 4", "assert sum_digits(100) == 1", "assert sum_digits(98) == 17", "assert sum_digits(94) == 13", "assert sum_digits(92) == 11", "assert sum_digits(101) == 2", "assert sum_digits(102) == 3", "assert sum_digits(93) == 12", "assert sum_digits(98) == 17", "assert sum_digits(101) == 2", "assert sum_digits(92) == 11", "assert sum_digits(95) == 14", "assert sum_digits(102) == 3", "assert sum_digits(96) == 15", "assert sum_digits(93) == 12", "assert sum_digits(96) == 15", "assert sum_digits(98) == 17", "assert sum_digits(92) == 11", "assert sum_digits(102) == 3", "assert sum_digits(100) == 1", "assert sum_digits(95) == 14", "assert sum_digits(93) == 12", "assert sum_digits(98) == 17", "assert sum_digits(102) == 3", "assert sum_digits(92) == 11", "assert sum_digits(98) == 17", "assert sum_digits(97) == 16", "assert sum_digits(95) == 14", "assert sum_digits(101) == 2", "assert sum_digits(97) == 16", "assert sum_digits(100) == 1", "assert sum_digits(92) == 11", "assert sum_digits(97) == 16", "assert sum_digits(93) == 12"], "entry_point": "sum_digits", "repair_prompt": ["Write a function sum_digits to get the sum of the digits of a non-negative integer. Ensure your function handles edge cases, such as when the input is zero, correctly.\nsum_digits(345)==12\n"], "completions": ["from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    This function takes an integer n as input and returns the sum of its digits.\n    \n    Args:\n        n (int): A non-negative integer whose digits are to be summed.\n    \n    Returns:\n        int: The sum of the digits of the input integer.\n    \"\"\"\n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Initialize the sum of digits\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the number\n    for char in str_n:\n        # Convert each character back to an integer and add it to the sum\n        digit_sum += int(char)\n    \n    # Return the sum of the digits\n    return digit_sum\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Sums the digits of a given non-negative integer.\n\n    Args:\n        n (int): A non-negative integer whose digits are to be summed.\n\n    Returns:\n        int: The sum of the digits of the input integer.\n    \"\"\"\n    # Handle the edge case where n is 0\n    if n == 0:\n        return 0\n    \n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Sum the digits\n    digit_sum = 0\n    for char in str_n:\n        digit_sum += int(char)\n    \n    return digit_sum\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    This function takes a non-negative integer and returns the sum of its digits.\n    \n    Args:\n        n (int): A non-negative integer whose digits are to be summed.\n        \n    Returns:\n        int: The sum of the digits of the input integer.\n    \"\"\"\n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Initialize the sum to 0\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the number\n    for char in str_n:\n        # Convert the character back to an integer and add it to the sum\n        digit_sum += int(char)\n    \n    # Return the sum of the digits\n    return digit_sum\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    This function takes an integer n and returns the sum of its digits.\n    \n    Args:\n        n (int): A non-negative integer whose digits are to be summed.\n    \n    Returns:\n        int: The sum of the digits of the input integer.\n    \"\"\"\n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Initialize the sum of digits\n    digit_sum = 0\n    \n    # Iterate over each character in the string, convert to int, and sum\n    for char in str_n:\n        digit_sum += int(char)\n    \n    return digit_sum\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    This function takes an integer n and returns the sum of its digits.\n    \n    Args:\n        n (int): A non-negative integer whose digits are to be summed.\n    \n    Returns:\n        int: The sum of the digits of the input integer.\n    \"\"\"\n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Initialize the sum variable\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the number\n    for char in str_n:\n        # Convert each character back to an integer and add it to the sum\n        digit_sum += int(char)\n    \n    # Return the final sum of the digits\n    return digit_sum\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    This function takes an integer n as input and returns the sum of its digits.\n    \n    Args:\n        n (int): A non-negative integer whose digits are to be summed.\n        \n    Returns:\n        int: The sum of the digits of the input integer.\n    \"\"\"\n    # If the input is zero, return zero immediately\n    if n == 0:\n        return 0\n    \n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Sum the digits\n    digit_sum = 0\n    for digit in str_n:\n        digit_sum += int(digit)\n    \n    return digit_sum\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Sums the digits of a given integer.\n\n    Args:\n        n (int): The integer whose digits are to be summed.\n\n    Returns:\n        int: The sum of the digits of the integer.\n    \"\"\"\n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Iterate over each character in the string\n    for char in str_n:\n        # Convert the character to an integer and add it to the sum\n        total_sum += int(char)\n    \n    # Return the total sum of the digits\n    return total_sum\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    This function takes an integer and returns the sum of its digits.\n    \n    Args:\n        n (int): A non-negative integer whose digits need to be summed.\n    \n    Returns:\n        int: The sum of the digits of the input integer.\n    \"\"\"\n    # Convert the integer to a string to iterate over its digits\n    str_n = str(n)\n    \n    # Initialize the sum variable\n    digit_sum = 0\n    \n    # Iterate over each character in the string\n    for char in str_n:\n        # Convert the character back to an integer and add it to the sum\n        digit_sum += int(char)\n    \n    # Return the sum of the digits\n    return digit_sum\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    This function takes an integer and returns the sum of its digits.\n    \n    Args:\n        n (int): A non-negative integer whose digits are to be summed.\n    \n    Returns:\n        int: The sum of the digits of the input integer.\n    \"\"\"\n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Initialize the sum\n    total_sum = 0\n    \n    # Iterate over each character in the string\n    for char in str_n:\n        # Convert the character back to an integer and add it to the sum\n        total_sum += int(char)\n    \n    # Return the total sum of the digits\n    return total_sum\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    This function takes an integer and returns the sum of its digits.\n    \n    Args:\n        n (int): A non-negative integer whose digits need to be summed.\n    \n    Returns:\n        int: The sum of the digits of the input integer.\n    \"\"\"\n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Initialize the sum variable\n    total_sum = 0\n    \n    # Iterate over each character in the string\n    for char in str_n:\n        # Convert character to integer and add to the sum\n        total_sum += int(char)\n    \n    # Return the sum of the digits\n    return total_sum\n"], "plans": ["requirement analysis:\nThe primary requirement is to create a function that can accurately calculate the sum of digits of a given non-negative integer. This includes handling the edge case of zero correctly. The function should be simple and easy to use, suitable for users who may not be tech-savvy. The design should be clean and intuitive to ensure a seamless user experience.\nrequirement pool:\n- Implement the function to accurately calculate the sum of digits.\n- Ensure the function handles zero correctly without errors.\n- Design a user-friendly interface for easy input and output.\n- Include error handling for invalid inputs.\n- Optimize the function for performance and efficiency.\nWe will implement the function using Python's built-in capabilities to ensure simplicity and efficiency. The function will convert the integer to a string to iterate over each digit, convert each digit back to an integer, and sum them up. This approach ensures that the function is both easy to understand and maintain.\n", "requirement analysis:\nThe requirement is to create a function that takes a non-negative integer and returns the sum of its digits. The function should handle the edge case of zero correctly. The product should be efficient and easy to understand, suitable for users who need to sum digits frequently.\nrequirement pool:\n- Implement the function sum_digits to correctly sum the digits of a non-negative integer\n- Ensure the function handles zero correctly\n- Optimize the function for performance\n- Include clear documentation and examples for user understanding\n- Test the function with various edge cases\nWe will implement the function `sum_digits` using a straightforward approach. The function will convert the integer to a string to easily iterate over each digit, then sum these digits. This approach ensures simplicity and ease of understanding. We will also handle the edge case of zero by returning zero directly.\n", "requirement analysis:\nThe requirement is to create a function that takes a non-negative integer and returns the sum of its digits. The function should handle the edge case of zero correctly. This is a fundamental mathematical operation that should be simple yet robust. The function should be easy to integrate into any Python project.\nrequirement pool:\n- Implement the sum_digits function to correctly calculate the sum of digits of a non-negative integer.\n- Ensure the function handles zero correctly without errors or infinite loops.\n- Optimize the function for performance, especially for large numbers.\n- Document the function with clear examples and usage instructions.\n- Test the function with various edge cases to ensure accuracy and robustness.\nWe will implement the sum_digits function using a simple and efficient approach. The function will convert the integer to a string to easily iterate over each digit, then convert each digit back to an integer to sum them up. This method ensures that the function handles zero correctly and efficiently.\n", "requirement analysis:\nThe requirement is to create a function that sums the digits of a non-negative integer. The function should handle zero correctly. This is a basic requirement that should be straightforward to implement. However, ensuring the function is efficient and handles edge cases like zero correctly is important for user satisfaction.\nrequirement pool:\n- Implement the sum_digits function to correctly sum the digits of a non-negative integer\n- Ensure the function handles zero correctly\n- Optimize the function for performance\n- Add documentation and tests for the function\n- Consider adding error handling for non-integer inputs\nWe will implement the sum_digits function using a simple and efficient approach. The function will convert the integer to a string to easily iterate over each digit, sum them up, and return the result. This method ensures that the function is easy to understand and maintain.\n", "requirement analysis:\nThe requirement is to create a function that sums the digits of a non-negative integer. The function should handle the edge case of zero correctly. The product should be efficient and easy to understand. Competitive analysis shows that there is a need for a product that offers both accuracy and simplicity.\nrequirement pool:\n- The main code should be efficient and handle all non-negative integers correctly\n- The function should handle zero correctly\n- The product should be easy to understand and use\n- The product should be optimized for performance\n- The product should have a user-friendly interface\nTo create a function that sums the digits of a non-negative integer efficiently and correctly, we will use Python's built-in capabilities. The function will convert the integer to a string to iterate over each digit, convert each digit back to an integer, and sum them up. This approach ensures simplicity and efficiency.\n", "requirement analysis:\nThe requirement is to create a function that sums the digits of a non-negative integer. The function should handle zero correctly and be efficient. The edge cases to consider include very large numbers to ensure the function does not run into performance issues.\nrequirement pool:\n- The main code should be clear and concise\n- The function should handle zero correctly\n- Optimize the function for performance\n- Include tests to cover various edge cases\n- Provide documentation for the function\nTo implement the sum_digits function efficiently and correctly, we will use Python's built-in capabilities to handle the conversion of numbers to strings and back to integers. This approach will allow us to easily iterate over each digit of the number and sum them up. We will also ensure that the function handles the edge case of zero correctly by immediately returning zero for any input that is zero.\n", "requirement analysis:\nThe requirement is to create a function that calculates the sum of digits of a non-negative integer. The function should handle the edge case of zero correctly. This is a fundamental requirement that should be implemented efficiently.\nrequirement pool:\n- Implement the sum_digits function to correctly calculate the sum of digits.\n- Ensure the function handles zero correctly.\n- Optimize the function for performance.\n- Design a simple and intuitive user interface.\n- Ensure the application is responsive and works well on different devices.\nTo implement the sum_digits function efficiently, we will use Python's built-in capabilities to handle the conversion of the integer to a string and then iterate over each character to sum the digits. This approach ensures simplicity and performance, aligning with the goal of creating an engaging user experience.\n", "requirement analysis:\nThe requirement is to create a function that sums the digits of a non-negative integer. The function should handle zero correctly and be efficient. The user should be able to input any non-negative integer and get the sum of its digits instantly. The function should be simple and straightforward to use.\nrequirement pool:\n- Implement the function to sum the digits of a non-negative integer.\n- Ensure the function handles zero correctly.\n- Optimize the function for efficiency and performance.\n- Design a user-friendly interface for easy input and output.\n- Include clear instructions and examples for user guidance.\nWe will implement the function using Python, leveraging its built-in capabilities to handle integers and strings. The function will convert the integer to a string, iterate over each character, convert each character back to an integer, and sum these integers. This approach ensures simplicity and efficiency.\n", "requirement analysis:\nThe requirement is to create a function that takes a non-negative integer and returns the sum of its digits. This is a common problem in programming exercises and should be straightforward to implement. The function should handle the edge case of zero correctly.\nrequirement pool:\n- Implement the sum_digits function to correctly calculate the sum of digits of a non-negative integer.\n- Ensure the function handles zero correctly without errors or infinite loops.\n- Optimize the function for efficiency, especially for large numbers.\n- Add documentation and comments to explain the code for easy understanding.\n- Test the function with various inputs to ensure accuracy and robustness.\nWe will implement the `sum_digits` function using a simple and straightforward approach. The function will convert the integer to a string to iterate over each digit, convert each digit back to an integer, and sum them up. This method ensures that the function handles zero correctly and efficiently.\n", "requirement analysis:\nThe primary requirement is to create a function that can accurately sum the digits of a non-negative integer. This includes handling the edge case of zero correctly. The function should be simple and efficient, suitable for users who need a quick result without complex features.\nrequirement pool:\n- Implement the function to accurately sum the digits of a non-negative integer.\n- Ensure the function handles zero correctly without errors or exceptions.\n- Develop a user-friendly interface for easy input and output.\n- Optimize the function for performance and efficiency.\n- Include basic error handling for unexpected inputs.\nWe will implement the function using a straightforward approach to ensure simplicity and efficiency. The function will convert the integer to a string to easily iterate over each digit, sum them, and return the result. This method avoids the need for complex data structures or external libraries, focusing on basic Python functionalities.\n"], "test": ["def check(sum_digits):\n\tassert sum_digits(345)==12", "def check(sum_digits):\n\tassert sum_digits(12)==3", "def check(sum_digits):\n\tassert sum_digits(97)==16", "def check(sum_digits):\n\tassert sum_digits(344) == 11", "def check(sum_digits):\n\tassert sum_digits(350) == 8", "def check(sum_digits):\n\tassert sum_digits(342) == 9", "def check(sum_digits):\n\tassert sum_digits(342) == 9", "def check(sum_digits):\n\tassert sum_digits(341) == 8", "def check(sum_digits):\n\tassert sum_digits(347) == 14", "def check(sum_digits):\n\tassert sum_digits(345) == 12", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(341) == 8", "def check(sum_digits):\n\tassert sum_digits(345) == 12", "def check(sum_digits):\n\tassert sum_digits(340) == 7", "def check(sum_digits):\n\tassert sum_digits(345) == 12", "def check(sum_digits):\n\tassert sum_digits(347) == 14", "def check(sum_digits):\n\tassert sum_digits(350) == 8", "def check(sum_digits):\n\tassert sum_digits(344) == 11", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(344) == 11", "def check(sum_digits):\n\tassert sum_digits(340) == 7", "def check(sum_digits):\n\tassert sum_digits(341) == 8", "def check(sum_digits):\n\tassert sum_digits(350) == 8", "def check(sum_digits):\n\tassert sum_digits(344) == 11", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(347) == 14", "def check(sum_digits):\n\tassert sum_digits(349) == 16", "def check(sum_digits):\n\tassert sum_digits(348) == 15", "def check(sum_digits):\n\tassert sum_digits(347) == 14", "def check(sum_digits):\n\tassert sum_digits(341) == 8", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(346) == 13", "def check(sum_digits):\n\tassert sum_digits(350) == 8", "def check(sum_digits):\n\tassert sum_digits(340) == 7", "def check(sum_digits):\n\tassert sum_digits(349) == 16", "def check(sum_digits):\n\tassert sum_digits(15) == 6", "def check(sum_digits):\n\tassert sum_digits(9) == 9", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(12) == 3", "def check(sum_digits):\n\tassert sum_digits(11) == 2", "def check(sum_digits):\n\tassert sum_digits(15) == 6", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(14) == 5", "def check(sum_digits):\n\tassert sum_digits(17) == 8", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(13) == 4", "def check(sum_digits):\n\tassert sum_digits(7) == 7", "def check(sum_digits):\n\tassert sum_digits(9) == 9", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(15) == 6", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(9) == 9", "def check(sum_digits):\n\tassert sum_digits(13) == 4", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(7) == 7", "def check(sum_digits):\n\tassert sum_digits(13) == 4", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(9) == 9", "def check(sum_digits):\n\tassert sum_digits(14) == 5", "def check(sum_digits):\n\tassert sum_digits(17) == 8", "def check(sum_digits):\n\tassert sum_digits(12) == 3", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(7) == 7", "def check(sum_digits):\n\tassert sum_digits(8) == 8", "def check(sum_digits):\n\tassert sum_digits(13) == 4", "def check(sum_digits):\n\tassert sum_digits(100) == 1", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(94) == 13", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(101) == 2", "def check(sum_digits):\n\tassert sum_digits(102) == 3", "def check(sum_digits):\n\tassert sum_digits(93) == 12", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(101) == 2", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(95) == 14", "def check(sum_digits):\n\tassert sum_digits(102) == 3", "def check(sum_digits):\n\tassert sum_digits(96) == 15", "def check(sum_digits):\n\tassert sum_digits(93) == 12", "def check(sum_digits):\n\tassert sum_digits(96) == 15", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(102) == 3", "def check(sum_digits):\n\tassert sum_digits(100) == 1", "def check(sum_digits):\n\tassert sum_digits(95) == 14", "def check(sum_digits):\n\tassert sum_digits(93) == 12", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(102) == 3", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(97) == 16", "def check(sum_digits):\n\tassert sum_digits(95) == 14", "def check(sum_digits):\n\tassert sum_digits(101) == 2", "def check(sum_digits):\n\tassert sum_digits(97) == 16", "def check(sum_digits):\n\tassert sum_digits(100) == 1", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(97) == 16", "def check(sum_digits):\n\tassert sum_digits(93) == 12"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    This function takes an integer and returns the sum of its digits.\n    \n    Args:\n        n (int): A non-negative integer whose digits need to be summed.\n    \n    Returns:\n        int: The sum of the digits of the input integer.\n    \"\"\"\n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Initialize the sum variable\n    total_sum = 0\n    \n    # Iterate over each character in the string\n    for char in str_n:\n        # Convert character to integer and add to the sum\n        total_sum += int(char)\n    \n    # Return the sum of the digits\n    return total_sum\n", "passed": true, "pass": true, "pass_num": 10, "round": 726, "mutate_method": "condense_two2one", "parent_index": 449}
