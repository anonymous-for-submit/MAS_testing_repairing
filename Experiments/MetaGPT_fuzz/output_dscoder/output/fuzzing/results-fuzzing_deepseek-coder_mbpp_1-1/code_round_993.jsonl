{"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 475, "prompt": "Build a function that organizes a dictionary in sequence according to its values.", "code": "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter", "test_imports": [], "test_list": ["assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]", "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]", "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]", "assert sort_counter({'EGy': 83, 'IDpLCrDje': 88, 'vsIwaTKCiNWbmJ': 86}) == [('IDpLCrDje', 88), ('vsIwaTKCiNWbmJ', 86), ('EGy', 83)]", "assert sort_counter({'dGMB': 86, 'lrxKJapDhjc': 81, 'rEkkSpmPKF': 88}) == [('rEkkSpmPKF', 88), ('dGMB', 86), ('lrxKJapDhjc', 81)]", "assert sort_counter({'tVR': 86, 'jNSgqE': 86, 'PYBXLDyCBLkJjMk': 82}) == [('tVR', 86), ('jNSgqE', 86), ('PYBXLDyCBLkJjMk', 82)]", "assert sort_counter({'Foorv': 79, 'krHAqZCh': 87, 'RwZWFfO': 90}) == [('RwZWFfO', 90), ('krHAqZCh', 87), ('Foorv', 79)]", "assert sort_counter({'mARRd': 77, 'fVZgvFh': 83, 'oUAAwIktbCrtt': 83}) == [('fVZgvFh', 83), ('oUAAwIktbCrtt', 83), ('mARRd', 77)]", "assert sort_counter({'plHdp': 77, 'BZdLpxYHcT': 80, 'sDRotxmLBy': 89}) == [('sDRotxmLBy', 89), ('BZdLpxYHcT', 80), ('plHdp', 77)]", "assert sort_counter({'fabSYg': 84, 'tbXS': 79, 'pqSxFoJgyQ': 92}) == [('pqSxFoJgyQ', 92), ('fabSYg', 84), ('tbXS', 79)]", "assert sort_counter({'fxhI': 84, 'ZMbslS': 80, 'QotuleHKEANhc': 88}) == [('QotuleHKEANhc', 88), ('fxhI', 84), ('ZMbslS', 80)]", "assert sort_counter({'Ufa': 85, 'YqZwmV': 86, 'AWiSvXyFBsWXn': 82}) == [('YqZwmV', 86), ('Ufa', 85), ('AWiSvXyFBsWXn', 82)]", "assert sort_counter({'GgD': 78, 'nSnzBjCeqMmw': 84, 'gQoxILIHMgxXPIq': 90}) == [('gQoxILIHMgxXPIq', 90), ('nSnzBjCeqMmw', 84), ('GgD', 78)]", "assert sort_counter({'AFyWwwg': 76, 'AkcPqUa': 78, 'gNexiwNfc': 90}) == [('gNexiwNfc', 90), ('AkcPqUa', 78), ('AFyWwwg', 76)]", "assert sort_counter({'fPBua': 86, 'QLlQmGhgwnu': 81, 'WTOldP': 91}) == [('WTOldP', 91), ('fPBua', 86), ('QLlQmGhgwnu', 81)]", "assert sort_counter({'BpOS': 86, 'hiPU': 78, 'YpXsWbDOUhE': 86}) == [('BpOS', 86), ('YpXsWbDOUhE', 86), ('hiPU', 78)]", "assert sort_counter({'MkLBhOSpg': 77, 'JUptshTkwT': 82, 'YFvcPKnUQlXCIMT': 86}) == [('YFvcPKnUQlXCIMT', 86), ('JUptshTkwT', 82), ('MkLBhOSpg', 77)]", "assert sort_counter({'FvGoUcxo': 81, 'AsjBQtgCMKZ': 79, 'esNFOrG': 87}) == [('esNFOrG', 87), ('FvGoUcxo', 81), ('AsjBQtgCMKZ', 79)]", "assert sort_counter({'OVoHnf': 76, 'FHxQYcIXJUj': 86, 'EwvhnoorkwcAgWf': 82}) == [('FHxQYcIXJUj', 86), ('EwvhnoorkwcAgWf', 82), ('OVoHnf', 76)]", "assert sort_counter({'KiWAiA': 81, 'zFoxAeoBYRu': 88, 'RvLVLYSNWgBOPZu': 89}) == [('RvLVLYSNWgBOPZu', 89), ('zFoxAeoBYRu', 88), ('KiWAiA', 81)]", "assert sort_counter({'UUTPNmDRR': 86, 'JivdHYh': 83, 'TUgXbA': 82}) == [('UUTPNmDRR', 86), ('JivdHYh', 83), ('TUgXbA', 82)]", "assert sort_counter({'DSkHcATe': 76, 'BjHm': 85, 'vBSRShzEBQIujz': 90}) == [('vBSRShzEBQIujz', 90), ('BjHm', 85), ('DSkHcATe', 76)]", "assert sort_counter({'VbKQJWTXf': 86, 'BEqvKj': 88, 'KECaIFti': 86}) == [('BEqvKj', 88), ('VbKQJWTXf', 86), ('KECaIFti', 86)]", "assert sort_counter({'vjkSYUy': 76, 'ucbAOcIBLDj': 81, 'IIOGdZ': 83}) == [('IIOGdZ', 83), ('ucbAOcIBLDj', 81), ('vjkSYUy', 76)]", "assert sort_counter({'lxVC': 80, 'eTEAkVL': 81, 'AcLdiUyZ': 88}) == [('AcLdiUyZ', 88), ('eTEAkVL', 81), ('lxVC', 80)]", "assert sort_counter({'USo': 76, 'ciQKTCE': 83, 'dbGIQB': 90}) == [('dbGIQB', 90), ('ciQKTCE', 83), ('USo', 76)]", "assert sort_counter({'IdGF': 78, 'CwCCaqHZTI': 80, 'iKtKhZTnKq': 87}) == [('iKtKhZTnKq', 87), ('CwCCaqHZTI', 80), ('IdGF', 78)]", "assert sort_counter({'XZwCimh': 77, 'aulKQzbNZG': 81, 'vmKYvUseiC': 87}) == [('vmKYvUseiC', 87), ('aulKQzbNZG', 81), ('XZwCimh', 77)]", "assert sort_counter({'AFvr': 84, 'hhDwK': 82, 'DxRmIcPzYq': 89}) == [('DxRmIcPzYq', 89), ('AFvr', 84), ('hhDwK', 82)]", "assert sort_counter({'PpAvQTQ': 78, 'hFopd': 86, 'PpUzmZWXYQS': 82}) == [('hFopd', 86), ('PpUzmZWXYQS', 82), ('PpAvQTQ', 78)]", "assert sort_counter({'plU': 79, 'hRoyQc': 87, 'YXqpQdtWWyF': 89}) == [('YXqpQdtWWyF', 89), ('hRoyQc', 87), ('plU', 79)]", "assert sort_counter({'AZt': 76, 'MUvaNvTRw': 78, 'OyDTdX': 82}) == [('OyDTdX', 82), ('MUvaNvTRw', 78), ('AZt', 76)]", "assert sort_counter({'fMGgwPDQk': 86, 'ZxPAQMKPHV': 88, 'yGzBnQJYy': 87}) == [('ZxPAQMKPHV', 88), ('yGzBnQJYy', 87), ('fMGgwPDQk', 86)]", "assert sort_counter({'MmLQGIR': 83, 'xEysbWhzQ': 85, 'xHYdTlaKf': 87}) == [('xHYdTlaKf', 87), ('xEysbWhzQ', 85), ('MmLQGIR', 83)]", "assert sort_counter({'juEtxnIHW': 82, 'IjjqgXHU': 87, 'jIlFWj': 86}) == [('IjjqgXHU', 87), ('jIlFWj', 86), ('juEtxnIHW', 82)]", "assert sort_counter({'KhsSr': 76, 'mqdazZkkC': 80, 'qvEXiHRIJMmv': 90}) == [('qvEXiHRIJMmv', 90), ('mqdazZkkC', 80), ('KhsSr', 76)]", "assert sort_counter({'ZBnM': 396, 'eZJZuW': 297, 'mYBlwVoF': 250}) == [('ZBnM', 396), ('eZJZuW', 297), ('mYBlwVoF', 250)]", "assert sort_counter({'YXKsjcdfo': 400, 'ecWuqVXsJiR': 302, 'KMoPvSQwzpXikY': 252}) == [('YXKsjcdfo', 400), ('ecWuqVXsJiR', 302), ('KMoPvSQwzpXikY', 252)]", "assert sort_counter({'ALUOeynG': 398, 'wUoHFU': 301, 'cEAtagt': 247}) == [('ALUOeynG', 398), ('wUoHFU', 301), ('cEAtagt', 247)]", "assert sort_counter({'pxslz': 397, 'hmzw': 305, 'xOnFurFlUrAgln': 249}) == [('pxslz', 397), ('hmzw', 305), ('xOnFurFlUrAgln', 249)]", "assert sort_counter({'guTWuFpy': 403, 'xoNuEce': 302, 'PImZyFoZ': 245}) == [('guTWuFpy', 403), ('xoNuEce', 302), ('PImZyFoZ', 245)]", "assert sort_counter({'ZKg': 405, 'DabqvpGiWC': 303, 'VqFSXnmFymwpGi': 254}) == [('ZKg', 405), ('DabqvpGiWC', 303), ('VqFSXnmFymwpGi', 254)]", "assert sort_counter({'CeyeHBKx': 404, 'QuPc': 302, 'vsHPixshtGcDm': 248}) == [('CeyeHBKx', 404), ('QuPc', 302), ('vsHPixshtGcDm', 248)]", "assert sort_counter({'qhLra': 397, 'DmIpejzqbU': 299, 'pdYPlGjknU': 247}) == [('qhLra', 397), ('DmIpejzqbU', 299), ('pdYPlGjknU', 247)]", "assert sort_counter({'TxCenm': 399, 'RONN': 299, 'POmgpqcwHglYizL': 245}) == [('TxCenm', 399), ('RONN', 299), ('POmgpqcwHglYizL', 245)]", "assert sort_counter({'VoSRQWm': 397, 'BdFcZ': 300, 'BxpCTbq': 252}) == [('VoSRQWm', 397), ('BdFcZ', 300), ('BxpCTbq', 252)]", "assert sort_counter({'zQaJl': 398, 'pssqZPdnSb': 295, 'tEufyuA': 246}) == [('zQaJl', 398), ('pssqZPdnSb', 295), ('tEufyuA', 246)]", "assert sort_counter({'mwUMgN': 396, 'AMpT': 296, 'qFcLuYOf': 245}) == [('mwUMgN', 396), ('AMpT', 296), ('qFcLuYOf', 245)]", "assert sort_counter({'TngaryK': 397, 'PWOVGv': 299, 'MpFEgJ': 245}) == [('TngaryK', 397), ('PWOVGv', 299), ('MpFEgJ', 245)]", "assert sort_counter({'Xlh': 397, 'yDS': 295, 'nmxlDGLzCY': 255}) == [('Xlh', 397), ('yDS', 295), ('nmxlDGLzCY', 255)]", "assert sort_counter({'nFTdMEi': 396, 'jjgBMO': 295, 'uUmTzPecmfWZ': 251}) == [('nFTdMEi', 396), ('jjgBMO', 295), ('uUmTzPecmfWZ', 251)]", "assert sort_counter({'PLBOsitPt': 399, 'bpWkZtYp': 302, 'ayYDfbWOKfHgnvj': 249}) == [('PLBOsitPt', 399), ('bpWkZtYp', 302), ('ayYDfbWOKfHgnvj', 249)]", "assert sort_counter({'YPyme': 400, 'KjigwKuvCMc': 297, 'MRLvzKmxTkWp': 245}) == [('YPyme', 400), ('KjigwKuvCMc', 297), ('MRLvzKmxTkWp', 245)]", "assert sort_counter({'qpqecc': 400, 'xMtqI': 304, 'SQsuEGidXdzPFks': 245}) == [('qpqecc', 400), ('xMtqI', 304), ('SQsuEGidXdzPFks', 245)]", "assert sort_counter({'XFRnu': 400, 'bJrJEuJ': 305, 'hRHxdX': 254}) == [('XFRnu', 400), ('bJrJEuJ', 305), ('hRHxdX', 254)]", "assert sort_counter({'YCFifmGlg': 396, 'bfAThWT': 295, 'bxTMLY': 251}) == [('YCFifmGlg', 396), ('bfAThWT', 295), ('bxTMLY', 251)]", "assert sort_counter({'TnqT': 399, 'QHOQagkzBc': 295, 'hliwXA': 247}) == [('TnqT', 399), ('QHOQagkzBc', 295), ('hliwXA', 247)]", "assert sort_counter({'ABky': 395, 'SDQCBTNoREok': 299, 'uZPInrJ': 245}) == [('ABky', 395), ('SDQCBTNoREok', 299), ('uZPInrJ', 245)]", "assert sort_counter({'elg': 397, 'GpeRqXbTUn': 299, 'EvnTluN': 248}) == [('elg', 397), ('GpeRqXbTUn', 299), ('EvnTluN', 248)]", "assert sort_counter({'kjvpx': 395, 'gEvU': 303, 'mCBhcjXdadBc': 245}) == [('kjvpx', 395), ('gEvU', 303), ('mCBhcjXdadBc', 245)]", "assert sort_counter({'Wmh': 397, 'MtfMWqayB': 295, 'TINqnZlbtGKSLzJ': 249}) == [('Wmh', 397), ('MtfMWqayB', 295), ('TINqnZlbtGKSLzJ', 249)]", "assert sort_counter({'SfYnMZyru': 405, 'ogDTsJt': 303, 'CmMxxCHt': 251}) == [('SfYnMZyru', 405), ('ogDTsJt', 303), ('CmMxxCHt', 251)]", "assert sort_counter({'thkXWz': 399, 'wrTg': 299, 'dtdcaoGqsmjILCx': 245}) == [('thkXWz', 399), ('wrTg', 299), ('dtdcaoGqsmjILCx', 245)]", "assert sort_counter({'RqITlpCry': 400, 'XxfyjfIow': 303, 'jzAdPCDSgSTsf': 253}) == [('RqITlpCry', 400), ('XxfyjfIow', 303), ('jzAdPCDSgSTsf', 253)]", "assert sort_counter({'DnEhfkQ': 400, 'cyPZI': 305, 'XzxtwbXpJ': 248}) == [('DnEhfkQ', 400), ('cyPZI', 305), ('XzxtwbXpJ', 248)]", "assert sort_counter({'UDfwS': 404, 'IqRg': 305, 'oSXmuvisu': 248}) == [('UDfwS', 404), ('IqRg', 305), ('oSXmuvisu', 248)]", "assert sort_counter({'JBAeAUQiR': 402, 'kduyUUSJhP': 305, 'OZwYHFnrJdNy': 254}) == [('JBAeAUQiR', 402), ('kduyUUSJhP', 305), ('OZwYHFnrJdNy', 254)]", "assert sort_counter({'EogKo': 399, 'bMnjPuDGCtGv': 305, 'kzPLbtqFSuURFA': 253}) == [('EogKo', 399), ('bMnjPuDGCtGv', 305), ('kzPLbtqFSuURFA', 253)]", "assert sort_counter({'vXK': 403, 'XybJj': 297, 'GNtTPtPHD': 248}) == [('vXK', 403), ('XybJj', 297), ('GNtTPtPHD', 248)]", "assert sort_counter({'IlX': 902, 'jkEHOn': 1005, 'LqHVvZz': 1357}) == [('LqHVvZz', 1357), ('jkEHOn', 1005), ('IlX', 902)]", "assert sort_counter({'rVRqU': 900, 'bSsxPuGj': 1000, 'QgCLGXXvwVa': 1727}) == [('QgCLGXXvwVa', 1727), ('bSsxPuGj', 1000), ('rVRqU', 900)]", "assert sort_counter({'abuyMpEd': 901, 'fsfFOHpxKx': 1000, 'fWhGlJfNU': 1303}) == [('fWhGlJfNU', 1303), ('fsfFOHpxKx', 1000), ('abuyMpEd', 901)]", "assert sort_counter({'iEOu': 900, 'WKuuWUJskB': 1004, 'pksMeKojCDwn': 1652}) == [('pksMeKojCDwn', 1652), ('WKuuWUJskB', 1004), ('iEOu', 900)]", "assert sort_counter({'mnqx': 899, 'CmmlO': 1000, 'UvZfCgOKlkKV': 1692}) == [('UvZfCgOKlkKV', 1692), ('CmmlO', 1000), ('mnqx', 899)]", "assert sort_counter({'ryP': 901, 'OPBckDp': 1002, 'PkEvarjpFs': 284}) == [('OPBckDp', 1002), ('ryP', 901), ('PkEvarjpFs', 284)]", "assert sort_counter({'VYXSEeE': 898, 'HfyvB': 1000, 'JuMiurGvGWfD': 1733}) == [('JuMiurGvGWfD', 1733), ('HfyvB', 1000), ('VYXSEeE', 898)]", "assert sort_counter({'SJWKOTt': 895, 'BFFJoZbRRc': 1005, 'fkxYJVLomqQuR': 1019}) == [('fkxYJVLomqQuR', 1019), ('BFFJoZbRRc', 1005), ('SJWKOTt', 895)]", "assert sort_counter({'pyRXwHO': 905, 'icBDgs': 996, 'hoKvkLn': 985}) == [('icBDgs', 996), ('hoKvkLn', 985), ('pyRXwHO', 905)]", "assert sort_counter({'kPLCp': 903, 'QWySltVcNQw': 1000, 'mvCJUGmXlYOf': 518}) == [('QWySltVcNQw', 1000), ('kPLCp', 903), ('mvCJUGmXlYOf', 518)]", "assert sort_counter({'WxXWlRFIv': 900, 'rhoWiYAlCT': 997, 'qcUkhcBAkbJiFP': 679}) == [('rhoWiYAlCT', 997), ('WxXWlRFIv', 900), ('qcUkhcBAkbJiFP', 679)]", "assert sort_counter({'wgkEw': 901, 'FjSWgH': 995, 'OWiyirEHVjBX': 1017}) == [('OWiyirEHVjBX', 1017), ('FjSWgH', 995), ('wgkEw', 901)]", "assert sort_counter({'srQXEQoZz': 896, 'AxEBYgTubhnn': 997, 'eTpqkzAg': 710}) == [('AxEBYgTubhnn', 997), ('srQXEQoZz', 896), ('eTpqkzAg', 710)]", "assert sort_counter({'eAnJjG': 897, 'iideMRfTxs': 995, 'fWqufPXxcj': 547}) == [('iideMRfTxs', 995), ('eAnJjG', 897), ('fWqufPXxcj', 547)]", "assert sort_counter({'jBRBpO': 897, 'BIC': 1002, 'VCNiJHLOk': 1506}) == [('VCNiJHLOk', 1506), ('BIC', 1002), ('jBRBpO', 897)]", "assert sort_counter({'mdXgDYptr': 897, 'XZX': 999, 'aqqkNzqndR': 663}) == [('XZX', 999), ('mdXgDYptr', 897), ('aqqkNzqndR', 663)]", "assert sort_counter({'XRvUTm': 900, 'szUUlAp': 1000, 'zASLGpo': 1728}) == [('zASLGpo', 1728), ('szUUlAp', 1000), ('XRvUTm', 900)]", "assert sort_counter({'hRPqRB': 899, 'PdRRJ': 1000, 'VTtarhaseMuJWAx': 487}) == [('PdRRJ', 1000), ('hRPqRB', 899), ('VTtarhaseMuJWAx', 487)]", "assert sort_counter({'QLEHLdYsc': 896, 'fmbqwjNIJBe': 1004, 'lzUpgIXPCJzPzeU': 1677}) == [('lzUpgIXPCJzPzeU', 1677), ('fmbqwjNIJBe', 1004), ('QLEHLdYsc', 896)]", "assert sort_counter({'nLBYlk': 897, 'aBMZZtDBeRX': 1001, 'TPdScsGHLdjxcm': 384}) == [('aBMZZtDBeRX', 1001), ('nLBYlk', 897), ('TPdScsGHLdjxcm', 384)]", "assert sort_counter({'MhHAVGGIa': 896, 'URMXwoCQ': 995, 'ZYevWt': 1855}) == [('ZYevWt', 1855), ('URMXwoCQ', 995), ('MhHAVGGIa', 896)]", "assert sort_counter({'Zcqz': 900, 'zdaBBj': 1004, 'qYlSODIYvpwIGWv': 1990}) == [('qYlSODIYvpwIGWv', 1990), ('zdaBBj', 1004), ('Zcqz', 900)]", "assert sort_counter({'yjT': 897, 'fKDUhj': 995, 'rvkJJpT': 2094}) == [('rvkJJpT', 2094), ('fKDUhj', 995), ('yjT', 897)]", "assert sort_counter({'tanGEM': 901, 'KQl': 997, 'GrKcngCTsjHjR': 428}) == [('KQl', 997), ('tanGEM', 901), ('GrKcngCTsjHjR', 428)]", "assert sort_counter({'ftVqzH': 902, 'qaSnTRVml': 1001, 'ZUvquKGTa': 2162}) == [('ZUvquKGTa', 2162), ('qaSnTRVml', 1001), ('ftVqzH', 902)]", "assert sort_counter({'UisvTUTo': 902, 'csflNHtRwFf': 999, 'JWEvzf': 1307}) == [('JWEvzf', 1307), ('csflNHtRwFf', 999), ('UisvTUTo', 902)]", "assert sort_counter({'XdLkwIZD': 904, 'wBgveQSAp': 1002, 'BVyokraZ': 1223}) == [('BVyokraZ', 1223), ('wBgveQSAp', 1002), ('XdLkwIZD', 904)]", "assert sort_counter({'gwG': 897, 'cOYctLXJapw': 1003, 'qhbFrGrQdu': 1973}) == [('qhbFrGrQdu', 1973), ('cOYctLXJapw', 1003), ('gwG', 897)]", "assert sort_counter({'xPpdjxu': 895, 'PfnfrRkq': 996, 'jCfIxqGAtelLCW': 412}) == [('PfnfrRkq', 996), ('xPpdjxu', 895), ('jCfIxqGAtelLCW', 412)]", "assert sort_counter({'KdVqqiyR': 903, 'pBMDoFJE': 997, 'fMtWWdUByQzPJ': 633}) == [('pBMDoFJE', 997), ('KdVqqiyR', 903), ('fMtWWdUByQzPJ', 633)]", "assert sort_counter({'wByeBL': 897, 'MERWmhgOVKW': 996, 'eUxEWwQBh': 351}) == [('MERWmhgOVKW', 996), ('wByeBL', 897), ('eUxEWwQBh', 351)]", "assert sort_counter({'qbZERPqZ': 895, 'LVjCBBZmbiMh': 1003, 'fAwNDh': 742}) == [('LVjCBBZmbiMh', 1003), ('qbZERPqZ', 895), ('fAwNDh', 742)]", "assert sort_counter({'uAkxvYJG': 899, 'MLd': 1000, 'chYCKOzFknpqVEk': 1645}) == [('chYCKOzFknpqVEk', 1645), ('MLd', 1000), ('uAkxvYJG', 899)]"], "entry_point": "sort_counter", "repair_prompt": ["Build a function sort_counter that organizes a dictionary in sequence according to its values.\nsort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef sort_counter(dictionary: dict) -> List[Tuple[str, int]]:\n    \"\"\"\n    The function takes a dictionary with string keys and integer values, and returns a list of tuples sorted by the values.\n    \n    Args:\n        dictionary (dict): A dictionary with string keys and integer values.\n        \n    Returns:\n        List[Tuple[str, int]]: A list of tuples sorted by the values.\n    \"\"\"\n    # Convert the dictionary to a list of tuples\n    dict_list = [(key, value) for key, value in dictionary.items()]\n    \n    # Sort the list of tuples by the second element (value)\n    sorted_list = sorted(dict_list, key=lambda x: x[1])\n    \n    return sorted_list\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple, Dict\n\ndef sort_counter(counter: Dict[str, int]) -> List[Tuple[str, int]]:\n    \"\"\"\n    Sorts a dictionary by its values in descending order and returns a list of tuples.\n    \n    Args:\n        counter (Dict[str, int]): A dictionary with string keys and integer values.\n        \n    Returns:\n        List[Tuple[str, int]]: A list of tuples sorted by the values in descending order.\n    \"\"\"\n    # Convert the dictionary to a list of tuples\n    counter_list = [(key, value) for key, value in counter.items()]\n    \n    # Sort the list of tuples by the values in descending order\n    sorted_counter = sorted(counter_list, key=lambda x: x[1], reverse=True)\n    \n    return sorted_counter\n", "from typing import List\n## main.py\n\ndef sort_counter(dictionary: dict) -> list[tuple[str, int]]:\n    \"\"\"\n    Sorts a dictionary by its values in descending order and returns a list of tuples.\n\n    Args:\n        dictionary (dict): The input dictionary to be sorted.\n\n    Returns:\n        list[tuple[str, int]]: A list of tuples sorted by the dictionary values in descending order.\n    \"\"\"\n    # Sort the dictionary by values in descending order\n    sorted_list = sorted(dictionary.items(), key=lambda item: item[1], reverse=True)\n    return sorted_list\n", "from typing import List\n## main.py\n\ndef sort_counter(dictionary: dict) -> list[tuple[str, int]]:\n    \"\"\"\n    Sorts a dictionary by its values and returns a list of tuples sorted by the dictionary's values.\n\n    Args:\n        dictionary (dict): A dictionary where keys are strings and values are integers.\n\n    Returns:\n        list[tuple[str, int]]: A list of tuples sorted by the dictionary's values in ascending order.\n    \"\"\"\n    # Sort the dictionary by values\n    sorted_list = sorted(dictionary.items(), key=lambda item: item[1])\n    return sorted_list\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple, Any\n\ndef sort_counter(dictionary: dict) -> List[Tuple[str, Any]]:\n    \"\"\"\n    Sorts a dictionary by its values and returns a list of tuples sorted by value.\n\n    Args:\n        dictionary (dict): The input dictionary to be sorted.\n\n    Returns:\n        List[Tuple[str, Any]]: A list of tuples sorted by the dictionary values.\n    \"\"\"\n    # Convert the dictionary items to a list of tuples\n    dict_items = list(dictionary.items())\n    \n    # Sort the list of tuples based on the values\n    sorted_items = sorted(dict_items, key=lambda item: item[1])\n    \n    return sorted_items\n", "from typing import List\n## main.py\n\nfrom typing import Dict, List, Tuple\n\ndef sort_counter(dictionary: Dict[str, int]) -> List[Tuple[str, int]]:\n    \"\"\"\n    Sorts a dictionary by its values and returns a list of tuples.\n\n    Args:\n        dictionary (Dict[str, int]): The input dictionary to be sorted.\n\n    Returns:\n        List[Tuple[str, int]]: A list of tuples sorted by the dictionary's values.\n    \"\"\"\n    # Sort the dictionary by its values\n    sorted_items = sorted(dictionary.items(), key=lambda item: item[1])\n    return sorted_items\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_dict = {'apple': 3, 'banana': 1, 'cherry': 2}\n    sorted_dict = sort_counter(example_dict)\n    print(sorted_dict)  # Output: [('banana', 1), ('cherry', 2), ('apple', 3)]\n", "from typing import List\n## main.py\n\nfrom typing import Dict, List, Tuple\n\ndef sort_counter(dictionary: Dict[str, int]) -> List[Tuple[str, int]]:\n    \"\"\"\n    Sorts a dictionary by its values and returns a list of tuples.\n\n    Args:\n        dictionary (Dict[str, int]): The input dictionary to be sorted.\n\n    Returns:\n        List[Tuple[str, int]]: A list of tuples sorted by the dictionary values.\n    \"\"\"\n    # Sort the dictionary by its values\n    sorted_list = sorted(dictionary.items(), key=lambda item: item[1])\n    return sorted_list\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_dict = {'apple': 3, 'banana': 2, 'cherry': 1}\n    sorted_dict = sort_counter(example_dict)\n    print(sorted_dict)  # Output: [('cherry', 1), ('banana', 2), ('apple', 3)]\n", "from typing import List\n## main.py\n\ndef sort_counter(dictionary: dict) -> list[tuple[str, int]]:\n    \"\"\"\n    Sorts a dictionary by its values and returns a list of tuples sorted by the values.\n\n    Args:\n        dictionary (dict): A dictionary with string keys and integer values.\n\n    Returns:\n        list[tuple[str, int]]: A list of tuples sorted by the values in ascending order.\n    \"\"\"\n    # Sort the dictionary by values\n    sorted_list = sorted(dictionary.items(), key=lambda item: item[1])\n    return sorted_list\n\n# Example usage:\n# sorted_dict = sort_counter({'Math': 81, 'Physics': 83, 'Chemistry': 87})\n# print(sorted_dict)  # Output: [('Math', 81), ('Physics', 83), ('Chemistry', 87)]\n", "from typing import List\n## main.py\n\ndef sort_counter(dictionary: dict) -> list[tuple[str, int]]:\n    \"\"\"\n    Sorts a dictionary by its values in descending order and returns a list of tuples.\n\n    Args:\n        dictionary (dict): The input dictionary to be sorted.\n\n    Returns:\n        list[tuple[str, int]]: A list of tuples sorted by the values in descending order.\n    \"\"\"\n    # Sort the dictionary by values in descending order\n    sorted_list = sorted(dictionary.items(), key=lambda item: item[1], reverse=True)\n    return sorted_list\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple, Dict\n\ndef sort_counter(dictionary: Dict[str, int]) -> List[Tuple[str, int]]:\n    \"\"\"\n    Sorts a dictionary by its values and returns a list of tuples.\n\n    Args:\n        dictionary (dict): A dictionary with string keys and integer values.\n\n    Returns:\n        list[tuple[str, int]]: A sorted list of tuples (key, value) from the input dictionary.\n\n    Example:\n        >>> sort_counter({'Math': 81, 'Physics': 83, 'Chemistry': 87})\n        [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    \"\"\"\n    # Sort the dictionary by values\n    sorted_list = sorted(dictionary.items(), key=lambda item: item[1])\n    return sorted_list\n\n# Example usage\nif __name__ == \"__main__\":\n    example_dict = {'Math': 81, 'Physics': 83, 'Chemistry': 87}\n    sorted_dict = sort_counter(example_dict)\n    print(sorted_dict)  # Output: [('Math', 81), ('Physics', 83), ('Chemistry', 87)]\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that sorts a dictionary by its values. This is a common task in data manipulation and requires a function that can handle dictionaries and sort them based on their values. The function should be efficient and easy to use, making it suitable for users with varying levels of technical expertise.\nrequirement pool:\n- The main code should be efficient in sorting the dictionary values.\n- The function should be user-friendly and easy to understand.\n- The sorting should be accurate and handle various data types.\n- The function should be compatible with different programming environments.\n- The documentation should be clear and include examples.\nWe will use Python's built-in `sorted` function along with a lambda function to sort the dictionary by its values. This approach is efficient and leverages Python's standard library, ensuring ease of use and accuracy.\n", "requirement analysis:\nThe requirement is to create a function that sorts a dictionary by its values. This is a common task in data manipulation and requires the function to handle both string and integer values. The function should be efficient and easy to understand. The output should be a list of tuples sorted by the values in descending order.\nrequirement pool:\n- The main code should be efficient and handle both string and integer values.\n- The function should be easy to understand and use.\n- The output should be a list of tuples sorted by the values in descending order.\n- The function should handle dictionaries with both string and integer values.\nTo create the `sort_counter` function efficiently, we will use Python's built-in `sorted` function which is optimized for sorting dictionaries by their values. This function will handle both string and integer values, ensuring flexibility in data types. The output will be a list of tuples sorted by the values in descending order.\n", "requirement analysis:\nThe requirement is to create a function that sorts a dictionary by its values. This is a common task in data manipulation and requires the function to be efficient and easy to use. The function should handle any dictionary input and return a list of tuples sorted by value in descending order.\nrequirement pool:\n- The main code should be efficient and handle large dictionaries\n- The function should be easy to use and understand\n- The results should be visually appealing and easy to read\n- The function should handle any dictionary input\n- The function should return a list of tuples sorted by value in descending order\nTo create a function that sorts a dictionary by its values efficiently and easily, we will use Python's built-in `sorted` function along with a lambda function to specify sorting by dictionary values. This approach is efficient and leverages Python's standard library for simplicity and readability.\n", "requirement analysis:\nThe requirement is to create a function that sorts a dictionary by its values. This is a common task in data manipulation and requires the function to handle key-value pairs, sort them based on the values, and return the results in a list of tuples. The function should be efficient and handle various sizes of dictionaries.\nrequirement pool:\n- The main code should be efficient and handle dictionaries of any size.\n- The function should return a list of tuples sorted by the dictionary's values.\n- The UI should be clean and easy to understand.\n- The function should be easily integrable into existing projects.\n- The sorting algorithm should be optimized for performance.\nTo create a function that sorts a dictionary by its values efficiently, we will use Python's built-in `sorted()` function which is optimized for performance. This function can take a dictionary and sort it based on the values, returning a list of tuples sorted in ascending order by default. We will ensure that the function can handle dictionaries of any size without performance degradation.\n", "requirement analysis:\nThe requirement is to create a function that sorts a dictionary by its values. This is a common task in data processing and should be efficient and easy to use. The function should handle dictionaries with various data types and return a list of tuples sorted by value.\nrequirement pool:\n- The main code should be efficient and handle large dictionaries\n- The function should return a list of tuples sorted by value\n- The UI should be simple and easy to use\n- The function should be easily integrable into existing projects\n- The function should handle various data types in the dictionary\nTo create a function that sorts a dictionary by its values efficiently, we will use Python's built-in `sorted` function which is optimized for such tasks. This function can take a key function as an argument, allowing us to sort based on the dictionary values. We will ensure the function handles various data types by leveraging Python's dynamic typing capabilities.\n", "requirement analysis:\nThe requirement is to create a function that sorts a dictionary by its values. This is a common task in data processing and requires the function to be efficient and easy to use. The function should handle dictionaries with various data types and return the sorted list of tuples.\nrequirement pool:\n- The main code should be efficient and handle large dictionaries\n- The function should return a list of tuples sorted by dictionary values\n- The UI should be user-friendly and visually appealing\n- The function should be easily integrable into existing projects\n- The product should include documentation and examples for easy understanding\nTo create a function that sorts a dictionary by its values efficiently, we will use Python's built-in `sorted` function which is optimized for such tasks. This function is efficient and handles large datasets well. We will ensure the function is easy to use and integrate into existing projects by providing clear documentation and examples.\n", "requirement analysis:\nThe requirement is to create a function that sorts a dictionary by its values. This is a common task in data manipulation and requires the function to be efficient and easy to use. The function should handle dictionaries with various data types and return the sorted list of tuples.\nrequirement pool:\n- The main code should be efficient and handle large dictionaries\n- The function should return a list of tuples sorted by dictionary values\n- The UI should be user-friendly and visually appealing\n- The function should be easily integrable into existing projects\n- The product should include documentation and examples for easy understanding\nTo create a function that sorts a dictionary by its values efficiently, we will use Python's built-in `sorted` function which is optimized for such tasks. This function is efficient and handles large datasets well. We will ensure the function is easy to use and integrate into existing projects by providing clear documentation and examples.\n", "requirement analysis:\nThe requirement is to create a function that sorts a dictionary by its values. This is a common task in data manipulation and requires the function to handle key-value pairs, sort them based on the values, and return the results in a list of tuples. The function should be efficient and handle various sizes of dictionaries.\nrequirement pool:\n- The main code should be efficient and handle large dictionaries\n- The function should return results in a list of tuples sorted by value\n- The UI should be user-friendly and visually appealing\n- The function should be easily integrable into existing projects\nTo create a function that sorts a dictionary by its values efficiently, we will use Python's built-in `sorted` function which is optimized for such tasks. This function can take a dictionary and sort it based on the values, returning a list of tuples sorted in ascending order of the values. This approach ensures efficiency and handles large dictionaries effectively.\n", "requirement analysis:\nThe requirement is to create a function that sorts a dictionary by its values. This is a common task in data manipulation and requires the function to be efficient and easy to use. The function should handle any dictionary input and return a list of tuples sorted by the values in descending order.\nrequirement pool:\n- The main code should be efficient and handle large dictionaries\n- The function should be easy to use and understand\n- The results should be visually appealing and easy to read\n- The function should handle any dictionary input\n- The function should return a list of tuples sorted by the values in descending order\nTo create a function that sorts a dictionary by its values efficiently and easily, we will utilize Python's built-in libraries. Specifically, we will use the `sorted` function which is optimized for sorting in Python. This function is efficient and handles large datasets well. The function will take a dictionary as input and return a list of tuples sorted by the values in descending order.\n", "requirement analysis:\nThe requirement is to create a function that sorts a dictionary by its values. This is a common task in data manipulation and requires a function that can take a dictionary, sort it based on the values, and return the sorted items as a list of tuples.\nrequirement pool:\n- The main code should be efficient and handle various types of input dictionaries.\n- The function should be user-friendly and easy to integrate into existing projects.\n- The sorting should be stable and maintain the order of items with equal values.\n- The function should handle edge cases such as empty dictionaries and dictionaries with non-integer values.\n- The documentation should be clear and include examples of usage.\nTo create a function that sorts a dictionary by its values efficiently and accurately, we will use Python's built-in `sorted` function which is optimized for such tasks. This function is stable, meaning it preserves the order of items with equal values, which aligns with requirement P1. We will ensure the function is user-friendly by providing clear documentation and examples of usage, as per requirement P0. The function will handle various types of input dictionaries, including those with non-integer values, as required by P0.\n"], "test": ["def check(sort_counter):\n\tassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]", "def check(sort_counter):\n\tassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]", "def check(sort_counter):\n\tassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]", "def check(sort_counter):\n\tassert sort_counter({'EGy': 83, 'IDpLCrDje': 88, 'vsIwaTKCiNWbmJ': 86}) == [('IDpLCrDje', 88), ('vsIwaTKCiNWbmJ', 86), ('EGy', 83)]", "def check(sort_counter):\n\tassert sort_counter({'dGMB': 86, 'lrxKJapDhjc': 81, 'rEkkSpmPKF': 88}) == [('rEkkSpmPKF', 88), ('dGMB', 86), ('lrxKJapDhjc', 81)]", "def check(sort_counter):\n\tassert sort_counter({'tVR': 86, 'jNSgqE': 86, 'PYBXLDyCBLkJjMk': 82}) == [('tVR', 86), ('jNSgqE', 86), ('PYBXLDyCBLkJjMk', 82)]", "def check(sort_counter):\n\tassert sort_counter({'Foorv': 79, 'krHAqZCh': 87, 'RwZWFfO': 90}) == [('RwZWFfO', 90), ('krHAqZCh', 87), ('Foorv', 79)]", "def check(sort_counter):\n\tassert sort_counter({'mARRd': 77, 'fVZgvFh': 83, 'oUAAwIktbCrtt': 83}) == [('fVZgvFh', 83), ('oUAAwIktbCrtt', 83), ('mARRd', 77)]", "def check(sort_counter):\n\tassert sort_counter({'plHdp': 77, 'BZdLpxYHcT': 80, 'sDRotxmLBy': 89}) == [('sDRotxmLBy', 89), ('BZdLpxYHcT', 80), ('plHdp', 77)]", "def check(sort_counter):\n\tassert sort_counter({'fabSYg': 84, 'tbXS': 79, 'pqSxFoJgyQ': 92}) == [('pqSxFoJgyQ', 92), ('fabSYg', 84), ('tbXS', 79)]", "def check(sort_counter):\n\tassert sort_counter({'fxhI': 84, 'ZMbslS': 80, 'QotuleHKEANhc': 88}) == [('QotuleHKEANhc', 88), ('fxhI', 84), ('ZMbslS', 80)]", "def check(sort_counter):\n\tassert sort_counter({'Ufa': 85, 'YqZwmV': 86, 'AWiSvXyFBsWXn': 82}) == [('YqZwmV', 86), ('Ufa', 85), ('AWiSvXyFBsWXn', 82)]", "def check(sort_counter):\n\tassert sort_counter({'GgD': 78, 'nSnzBjCeqMmw': 84, 'gQoxILIHMgxXPIq': 90}) == [('gQoxILIHMgxXPIq', 90), ('nSnzBjCeqMmw', 84), ('GgD', 78)]", "def check(sort_counter):\n\tassert sort_counter({'AFyWwwg': 76, 'AkcPqUa': 78, 'gNexiwNfc': 90}) == [('gNexiwNfc', 90), ('AkcPqUa', 78), ('AFyWwwg', 76)]", "def check(sort_counter):\n\tassert sort_counter({'fPBua': 86, 'QLlQmGhgwnu': 81, 'WTOldP': 91}) == [('WTOldP', 91), ('fPBua', 86), ('QLlQmGhgwnu', 81)]", "def check(sort_counter):\n\tassert sort_counter({'BpOS': 86, 'hiPU': 78, 'YpXsWbDOUhE': 86}) == [('BpOS', 86), ('YpXsWbDOUhE', 86), ('hiPU', 78)]", "def check(sort_counter):\n\tassert sort_counter({'MkLBhOSpg': 77, 'JUptshTkwT': 82, 'YFvcPKnUQlXCIMT': 86}) == [('YFvcPKnUQlXCIMT', 86), ('JUptshTkwT', 82), ('MkLBhOSpg', 77)]", "def check(sort_counter):\n\tassert sort_counter({'FvGoUcxo': 81, 'AsjBQtgCMKZ': 79, 'esNFOrG': 87}) == [('esNFOrG', 87), ('FvGoUcxo', 81), ('AsjBQtgCMKZ', 79)]", "def check(sort_counter):\n\tassert sort_counter({'OVoHnf': 76, 'FHxQYcIXJUj': 86, 'EwvhnoorkwcAgWf': 82}) == [('FHxQYcIXJUj', 86), ('EwvhnoorkwcAgWf', 82), ('OVoHnf', 76)]", "def check(sort_counter):\n\tassert sort_counter({'KiWAiA': 81, 'zFoxAeoBYRu': 88, 'RvLVLYSNWgBOPZu': 89}) == [('RvLVLYSNWgBOPZu', 89), ('zFoxAeoBYRu', 88), ('KiWAiA', 81)]", "def check(sort_counter):\n\tassert sort_counter({'UUTPNmDRR': 86, 'JivdHYh': 83, 'TUgXbA': 82}) == [('UUTPNmDRR', 86), ('JivdHYh', 83), ('TUgXbA', 82)]", "def check(sort_counter):\n\tassert sort_counter({'DSkHcATe': 76, 'BjHm': 85, 'vBSRShzEBQIujz': 90}) == [('vBSRShzEBQIujz', 90), ('BjHm', 85), ('DSkHcATe', 76)]", "def check(sort_counter):\n\tassert sort_counter({'VbKQJWTXf': 86, 'BEqvKj': 88, 'KECaIFti': 86}) == [('BEqvKj', 88), ('VbKQJWTXf', 86), ('KECaIFti', 86)]", "def check(sort_counter):\n\tassert sort_counter({'vjkSYUy': 76, 'ucbAOcIBLDj': 81, 'IIOGdZ': 83}) == [('IIOGdZ', 83), ('ucbAOcIBLDj', 81), ('vjkSYUy', 76)]", "def check(sort_counter):\n\tassert sort_counter({'lxVC': 80, 'eTEAkVL': 81, 'AcLdiUyZ': 88}) == [('AcLdiUyZ', 88), ('eTEAkVL', 81), ('lxVC', 80)]", "def check(sort_counter):\n\tassert sort_counter({'USo': 76, 'ciQKTCE': 83, 'dbGIQB': 90}) == [('dbGIQB', 90), ('ciQKTCE', 83), ('USo', 76)]", "def check(sort_counter):\n\tassert sort_counter({'IdGF': 78, 'CwCCaqHZTI': 80, 'iKtKhZTnKq': 87}) == [('iKtKhZTnKq', 87), ('CwCCaqHZTI', 80), ('IdGF', 78)]", "def check(sort_counter):\n\tassert sort_counter({'XZwCimh': 77, 'aulKQzbNZG': 81, 'vmKYvUseiC': 87}) == [('vmKYvUseiC', 87), ('aulKQzbNZG', 81), ('XZwCimh', 77)]", "def check(sort_counter):\n\tassert sort_counter({'AFvr': 84, 'hhDwK': 82, 'DxRmIcPzYq': 89}) == [('DxRmIcPzYq', 89), ('AFvr', 84), ('hhDwK', 82)]", "def check(sort_counter):\n\tassert sort_counter({'PpAvQTQ': 78, 'hFopd': 86, 'PpUzmZWXYQS': 82}) == [('hFopd', 86), ('PpUzmZWXYQS', 82), ('PpAvQTQ', 78)]", "def check(sort_counter):\n\tassert sort_counter({'plU': 79, 'hRoyQc': 87, 'YXqpQdtWWyF': 89}) == [('YXqpQdtWWyF', 89), ('hRoyQc', 87), ('plU', 79)]", "def check(sort_counter):\n\tassert sort_counter({'AZt': 76, 'MUvaNvTRw': 78, 'OyDTdX': 82}) == [('OyDTdX', 82), ('MUvaNvTRw', 78), ('AZt', 76)]", "def check(sort_counter):\n\tassert sort_counter({'fMGgwPDQk': 86, 'ZxPAQMKPHV': 88, 'yGzBnQJYy': 87}) == [('ZxPAQMKPHV', 88), ('yGzBnQJYy', 87), ('fMGgwPDQk', 86)]", "def check(sort_counter):\n\tassert sort_counter({'MmLQGIR': 83, 'xEysbWhzQ': 85, 'xHYdTlaKf': 87}) == [('xHYdTlaKf', 87), ('xEysbWhzQ', 85), ('MmLQGIR', 83)]", "def check(sort_counter):\n\tassert sort_counter({'juEtxnIHW': 82, 'IjjqgXHU': 87, 'jIlFWj': 86}) == [('IjjqgXHU', 87), ('jIlFWj', 86), ('juEtxnIHW', 82)]", "def check(sort_counter):\n\tassert sort_counter({'KhsSr': 76, 'mqdazZkkC': 80, 'qvEXiHRIJMmv': 90}) == [('qvEXiHRIJMmv', 90), ('mqdazZkkC', 80), ('KhsSr', 76)]", "def check(sort_counter):\n\tassert sort_counter({'ZBnM': 396, 'eZJZuW': 297, 'mYBlwVoF': 250}) == [('ZBnM', 396), ('eZJZuW', 297), ('mYBlwVoF', 250)]", "def check(sort_counter):\n\tassert sort_counter({'YXKsjcdfo': 400, 'ecWuqVXsJiR': 302, 'KMoPvSQwzpXikY': 252}) == [('YXKsjcdfo', 400), ('ecWuqVXsJiR', 302), ('KMoPvSQwzpXikY', 252)]", "def check(sort_counter):\n\tassert sort_counter({'ALUOeynG': 398, 'wUoHFU': 301, 'cEAtagt': 247}) == [('ALUOeynG', 398), ('wUoHFU', 301), ('cEAtagt', 247)]", "def check(sort_counter):\n\tassert sort_counter({'pxslz': 397, 'hmzw': 305, 'xOnFurFlUrAgln': 249}) == [('pxslz', 397), ('hmzw', 305), ('xOnFurFlUrAgln', 249)]", "def check(sort_counter):\n\tassert sort_counter({'guTWuFpy': 403, 'xoNuEce': 302, 'PImZyFoZ': 245}) == [('guTWuFpy', 403), ('xoNuEce', 302), ('PImZyFoZ', 245)]", "def check(sort_counter):\n\tassert sort_counter({'ZKg': 405, 'DabqvpGiWC': 303, 'VqFSXnmFymwpGi': 254}) == [('ZKg', 405), ('DabqvpGiWC', 303), ('VqFSXnmFymwpGi', 254)]", "def check(sort_counter):\n\tassert sort_counter({'CeyeHBKx': 404, 'QuPc': 302, 'vsHPixshtGcDm': 248}) == [('CeyeHBKx', 404), ('QuPc', 302), ('vsHPixshtGcDm', 248)]", "def check(sort_counter):\n\tassert sort_counter({'qhLra': 397, 'DmIpejzqbU': 299, 'pdYPlGjknU': 247}) == [('qhLra', 397), ('DmIpejzqbU', 299), ('pdYPlGjknU', 247)]", "def check(sort_counter):\n\tassert sort_counter({'TxCenm': 399, 'RONN': 299, 'POmgpqcwHglYizL': 245}) == [('TxCenm', 399), ('RONN', 299), ('POmgpqcwHglYizL', 245)]", "def check(sort_counter):\n\tassert sort_counter({'VoSRQWm': 397, 'BdFcZ': 300, 'BxpCTbq': 252}) == [('VoSRQWm', 397), ('BdFcZ', 300), ('BxpCTbq', 252)]", "def check(sort_counter):\n\tassert sort_counter({'zQaJl': 398, 'pssqZPdnSb': 295, 'tEufyuA': 246}) == [('zQaJl', 398), ('pssqZPdnSb', 295), ('tEufyuA', 246)]", "def check(sort_counter):\n\tassert sort_counter({'mwUMgN': 396, 'AMpT': 296, 'qFcLuYOf': 245}) == [('mwUMgN', 396), ('AMpT', 296), ('qFcLuYOf', 245)]", "def check(sort_counter):\n\tassert sort_counter({'TngaryK': 397, 'PWOVGv': 299, 'MpFEgJ': 245}) == [('TngaryK', 397), ('PWOVGv', 299), ('MpFEgJ', 245)]", "def check(sort_counter):\n\tassert sort_counter({'Xlh': 397, 'yDS': 295, 'nmxlDGLzCY': 255}) == [('Xlh', 397), ('yDS', 295), ('nmxlDGLzCY', 255)]", "def check(sort_counter):\n\tassert sort_counter({'nFTdMEi': 396, 'jjgBMO': 295, 'uUmTzPecmfWZ': 251}) == [('nFTdMEi', 396), ('jjgBMO', 295), ('uUmTzPecmfWZ', 251)]", "def check(sort_counter):\n\tassert sort_counter({'PLBOsitPt': 399, 'bpWkZtYp': 302, 'ayYDfbWOKfHgnvj': 249}) == [('PLBOsitPt', 399), ('bpWkZtYp', 302), ('ayYDfbWOKfHgnvj', 249)]", "def check(sort_counter):\n\tassert sort_counter({'YPyme': 400, 'KjigwKuvCMc': 297, 'MRLvzKmxTkWp': 245}) == [('YPyme', 400), ('KjigwKuvCMc', 297), ('MRLvzKmxTkWp', 245)]", "def check(sort_counter):\n\tassert sort_counter({'qpqecc': 400, 'xMtqI': 304, 'SQsuEGidXdzPFks': 245}) == [('qpqecc', 400), ('xMtqI', 304), ('SQsuEGidXdzPFks', 245)]", "def check(sort_counter):\n\tassert sort_counter({'XFRnu': 400, 'bJrJEuJ': 305, 'hRHxdX': 254}) == [('XFRnu', 400), ('bJrJEuJ', 305), ('hRHxdX', 254)]", "def check(sort_counter):\n\tassert sort_counter({'YCFifmGlg': 396, 'bfAThWT': 295, 'bxTMLY': 251}) == [('YCFifmGlg', 396), ('bfAThWT', 295), ('bxTMLY', 251)]", "def check(sort_counter):\n\tassert sort_counter({'TnqT': 399, 'QHOQagkzBc': 295, 'hliwXA': 247}) == [('TnqT', 399), ('QHOQagkzBc', 295), ('hliwXA', 247)]", "def check(sort_counter):\n\tassert sort_counter({'ABky': 395, 'SDQCBTNoREok': 299, 'uZPInrJ': 245}) == [('ABky', 395), ('SDQCBTNoREok', 299), ('uZPInrJ', 245)]", "def check(sort_counter):\n\tassert sort_counter({'elg': 397, 'GpeRqXbTUn': 299, 'EvnTluN': 248}) == [('elg', 397), ('GpeRqXbTUn', 299), ('EvnTluN', 248)]", "def check(sort_counter):\n\tassert sort_counter({'kjvpx': 395, 'gEvU': 303, 'mCBhcjXdadBc': 245}) == [('kjvpx', 395), ('gEvU', 303), ('mCBhcjXdadBc', 245)]", "def check(sort_counter):\n\tassert sort_counter({'Wmh': 397, 'MtfMWqayB': 295, 'TINqnZlbtGKSLzJ': 249}) == [('Wmh', 397), ('MtfMWqayB', 295), ('TINqnZlbtGKSLzJ', 249)]", "def check(sort_counter):\n\tassert sort_counter({'SfYnMZyru': 405, 'ogDTsJt': 303, 'CmMxxCHt': 251}) == [('SfYnMZyru', 405), ('ogDTsJt', 303), ('CmMxxCHt', 251)]", "def check(sort_counter):\n\tassert sort_counter({'thkXWz': 399, 'wrTg': 299, 'dtdcaoGqsmjILCx': 245}) == [('thkXWz', 399), ('wrTg', 299), ('dtdcaoGqsmjILCx', 245)]", "def check(sort_counter):\n\tassert sort_counter({'RqITlpCry': 400, 'XxfyjfIow': 303, 'jzAdPCDSgSTsf': 253}) == [('RqITlpCry', 400), ('XxfyjfIow', 303), ('jzAdPCDSgSTsf', 253)]", "def check(sort_counter):\n\tassert sort_counter({'DnEhfkQ': 400, 'cyPZI': 305, 'XzxtwbXpJ': 248}) == [('DnEhfkQ', 400), ('cyPZI', 305), ('XzxtwbXpJ', 248)]", "def check(sort_counter):\n\tassert sort_counter({'UDfwS': 404, 'IqRg': 305, 'oSXmuvisu': 248}) == [('UDfwS', 404), ('IqRg', 305), ('oSXmuvisu', 248)]", "def check(sort_counter):\n\tassert sort_counter({'JBAeAUQiR': 402, 'kduyUUSJhP': 305, 'OZwYHFnrJdNy': 254}) == [('JBAeAUQiR', 402), ('kduyUUSJhP', 305), ('OZwYHFnrJdNy', 254)]", "def check(sort_counter):\n\tassert sort_counter({'EogKo': 399, 'bMnjPuDGCtGv': 305, 'kzPLbtqFSuURFA': 253}) == [('EogKo', 399), ('bMnjPuDGCtGv', 305), ('kzPLbtqFSuURFA', 253)]", "def check(sort_counter):\n\tassert sort_counter({'vXK': 403, 'XybJj': 297, 'GNtTPtPHD': 248}) == [('vXK', 403), ('XybJj', 297), ('GNtTPtPHD', 248)]", "def check(sort_counter):\n\tassert sort_counter({'IlX': 902, 'jkEHOn': 1005, 'LqHVvZz': 1357}) == [('LqHVvZz', 1357), ('jkEHOn', 1005), ('IlX', 902)]", "def check(sort_counter):\n\tassert sort_counter({'rVRqU': 900, 'bSsxPuGj': 1000, 'QgCLGXXvwVa': 1727}) == [('QgCLGXXvwVa', 1727), ('bSsxPuGj', 1000), ('rVRqU', 900)]", "def check(sort_counter):\n\tassert sort_counter({'abuyMpEd': 901, 'fsfFOHpxKx': 1000, 'fWhGlJfNU': 1303}) == [('fWhGlJfNU', 1303), ('fsfFOHpxKx', 1000), ('abuyMpEd', 901)]", "def check(sort_counter):\n\tassert sort_counter({'iEOu': 900, 'WKuuWUJskB': 1004, 'pksMeKojCDwn': 1652}) == [('pksMeKojCDwn', 1652), ('WKuuWUJskB', 1004), ('iEOu', 900)]", "def check(sort_counter):\n\tassert sort_counter({'mnqx': 899, 'CmmlO': 1000, 'UvZfCgOKlkKV': 1692}) == [('UvZfCgOKlkKV', 1692), ('CmmlO', 1000), ('mnqx', 899)]", "def check(sort_counter):\n\tassert sort_counter({'ryP': 901, 'OPBckDp': 1002, 'PkEvarjpFs': 284}) == [('OPBckDp', 1002), ('ryP', 901), ('PkEvarjpFs', 284)]", "def check(sort_counter):\n\tassert sort_counter({'VYXSEeE': 898, 'HfyvB': 1000, 'JuMiurGvGWfD': 1733}) == [('JuMiurGvGWfD', 1733), ('HfyvB', 1000), ('VYXSEeE', 898)]", "def check(sort_counter):\n\tassert sort_counter({'SJWKOTt': 895, 'BFFJoZbRRc': 1005, 'fkxYJVLomqQuR': 1019}) == [('fkxYJVLomqQuR', 1019), ('BFFJoZbRRc', 1005), ('SJWKOTt', 895)]", "def check(sort_counter):\n\tassert sort_counter({'pyRXwHO': 905, 'icBDgs': 996, 'hoKvkLn': 985}) == [('icBDgs', 996), ('hoKvkLn', 985), ('pyRXwHO', 905)]", "def check(sort_counter):\n\tassert sort_counter({'kPLCp': 903, 'QWySltVcNQw': 1000, 'mvCJUGmXlYOf': 518}) == [('QWySltVcNQw', 1000), ('kPLCp', 903), ('mvCJUGmXlYOf', 518)]", "def check(sort_counter):\n\tassert sort_counter({'WxXWlRFIv': 900, 'rhoWiYAlCT': 997, 'qcUkhcBAkbJiFP': 679}) == [('rhoWiYAlCT', 997), ('WxXWlRFIv', 900), ('qcUkhcBAkbJiFP', 679)]", "def check(sort_counter):\n\tassert sort_counter({'wgkEw': 901, 'FjSWgH': 995, 'OWiyirEHVjBX': 1017}) == [('OWiyirEHVjBX', 1017), ('FjSWgH', 995), ('wgkEw', 901)]", "def check(sort_counter):\n\tassert sort_counter({'srQXEQoZz': 896, 'AxEBYgTubhnn': 997, 'eTpqkzAg': 710}) == [('AxEBYgTubhnn', 997), ('srQXEQoZz', 896), ('eTpqkzAg', 710)]", "def check(sort_counter):\n\tassert sort_counter({'eAnJjG': 897, 'iideMRfTxs': 995, 'fWqufPXxcj': 547}) == [('iideMRfTxs', 995), ('eAnJjG', 897), ('fWqufPXxcj', 547)]", "def check(sort_counter):\n\tassert sort_counter({'jBRBpO': 897, 'BIC': 1002, 'VCNiJHLOk': 1506}) == [('VCNiJHLOk', 1506), ('BIC', 1002), ('jBRBpO', 897)]", "def check(sort_counter):\n\tassert sort_counter({'mdXgDYptr': 897, 'XZX': 999, 'aqqkNzqndR': 663}) == [('XZX', 999), ('mdXgDYptr', 897), ('aqqkNzqndR', 663)]", "def check(sort_counter):\n\tassert sort_counter({'XRvUTm': 900, 'szUUlAp': 1000, 'zASLGpo': 1728}) == [('zASLGpo', 1728), ('szUUlAp', 1000), ('XRvUTm', 900)]", "def check(sort_counter):\n\tassert sort_counter({'hRPqRB': 899, 'PdRRJ': 1000, 'VTtarhaseMuJWAx': 487}) == [('PdRRJ', 1000), ('hRPqRB', 899), ('VTtarhaseMuJWAx', 487)]", "def check(sort_counter):\n\tassert sort_counter({'QLEHLdYsc': 896, 'fmbqwjNIJBe': 1004, 'lzUpgIXPCJzPzeU': 1677}) == [('lzUpgIXPCJzPzeU', 1677), ('fmbqwjNIJBe', 1004), ('QLEHLdYsc', 896)]", "def check(sort_counter):\n\tassert sort_counter({'nLBYlk': 897, 'aBMZZtDBeRX': 1001, 'TPdScsGHLdjxcm': 384}) == [('aBMZZtDBeRX', 1001), ('nLBYlk', 897), ('TPdScsGHLdjxcm', 384)]", "def check(sort_counter):\n\tassert sort_counter({'MhHAVGGIa': 896, 'URMXwoCQ': 995, 'ZYevWt': 1855}) == [('ZYevWt', 1855), ('URMXwoCQ', 995), ('MhHAVGGIa', 896)]", "def check(sort_counter):\n\tassert sort_counter({'Zcqz': 900, 'zdaBBj': 1004, 'qYlSODIYvpwIGWv': 1990}) == [('qYlSODIYvpwIGWv', 1990), ('zdaBBj', 1004), ('Zcqz', 900)]", "def check(sort_counter):\n\tassert sort_counter({'yjT': 897, 'fKDUhj': 995, 'rvkJJpT': 2094}) == [('rvkJJpT', 2094), ('fKDUhj', 995), ('yjT', 897)]", "def check(sort_counter):\n\tassert sort_counter({'tanGEM': 901, 'KQl': 997, 'GrKcngCTsjHjR': 428}) == [('KQl', 997), ('tanGEM', 901), ('GrKcngCTsjHjR', 428)]", "def check(sort_counter):\n\tassert sort_counter({'ftVqzH': 902, 'qaSnTRVml': 1001, 'ZUvquKGTa': 2162}) == [('ZUvquKGTa', 2162), ('qaSnTRVml', 1001), ('ftVqzH', 902)]", "def check(sort_counter):\n\tassert sort_counter({'UisvTUTo': 902, 'csflNHtRwFf': 999, 'JWEvzf': 1307}) == [('JWEvzf', 1307), ('csflNHtRwFf', 999), ('UisvTUTo', 902)]", "def check(sort_counter):\n\tassert sort_counter({'XdLkwIZD': 904, 'wBgveQSAp': 1002, 'BVyokraZ': 1223}) == [('BVyokraZ', 1223), ('wBgveQSAp', 1002), ('XdLkwIZD', 904)]", "def check(sort_counter):\n\tassert sort_counter({'gwG': 897, 'cOYctLXJapw': 1003, 'qhbFrGrQdu': 1973}) == [('qhbFrGrQdu', 1973), ('cOYctLXJapw', 1003), ('gwG', 897)]", "def check(sort_counter):\n\tassert sort_counter({'xPpdjxu': 895, 'PfnfrRkq': 996, 'jCfIxqGAtelLCW': 412}) == [('PfnfrRkq', 996), ('xPpdjxu', 895), ('jCfIxqGAtelLCW', 412)]", "def check(sort_counter):\n\tassert sort_counter({'KdVqqiyR': 903, 'pBMDoFJE': 997, 'fMtWWdUByQzPJ': 633}) == [('pBMDoFJE', 997), ('KdVqqiyR', 903), ('fMtWWdUByQzPJ', 633)]", "def check(sort_counter):\n\tassert sort_counter({'wByeBL': 897, 'MERWmhgOVKW': 996, 'eUxEWwQBh': 351}) == [('MERWmhgOVKW', 996), ('wByeBL', 897), ('eUxEWwQBh', 351)]", "def check(sort_counter):\n\tassert sort_counter({'qbZERPqZ': 895, 'LVjCBBZmbiMh': 1003, 'fAwNDh': 742}) == [('LVjCBBZmbiMh', 1003), ('qbZERPqZ', 895), ('fAwNDh', 742)]", "def check(sort_counter):\n\tassert sort_counter({'uAkxvYJG': 899, 'MLd': 1000, 'chYCKOzFknpqVEk': 1645}) == [('chYCKOzFknpqVEk', 1645), ('MLd', 1000), ('uAkxvYJG', 899)]"], "scores": [0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], "pass_results": [false, true, true, false, false, false, false, false, true, false], "pass_test_cases_num": [0, 102, 102, 0, 0, 0, 0, 0, 102, 0], "completion": "from typing import List\n## main.py\n\nfrom typing import List, Tuple, Dict\n\ndef sort_counter(dictionary: Dict[str, int]) -> List[Tuple[str, int]]:\n    \"\"\"\n    Sorts a dictionary by its values and returns a list of tuples.\n\n    Args:\n        dictionary (dict): A dictionary with string keys and integer values.\n\n    Returns:\n        list[tuple[str, int]]: A sorted list of tuples (key, value) from the input dictionary.\n\n    Example:\n        >>> sort_counter({'Math': 81, 'Physics': 83, 'Chemistry': 87})\n        [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    \"\"\"\n    # Sort the dictionary by values\n    sorted_list = sorted(dictionary.items(), key=lambda item: item[1])\n    return sorted_list\n\n# Example usage\nif __name__ == \"__main__\":\n    example_dict = {'Math': 81, 'Physics': 83, 'Chemistry': 87}\n    sorted_dict = sort_counter(example_dict)\n    print(sorted_dict)  # Output: [('Math', 81), ('Physics', 83), ('Chemistry', 87)]\n", "passed": true, "pass": true, "pass_num": 3, "round": 993, "mutate_method": "rephrase_one", "parent_index": 397}
