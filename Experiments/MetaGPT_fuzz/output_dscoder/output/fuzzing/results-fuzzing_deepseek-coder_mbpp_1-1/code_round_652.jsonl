{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 728, "prompt": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n], returning [a_1+b_1,...,a_n+b_n].", "code": "def sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list", "test_imports": [], "test_list": ["assert sum_list([10,20,30],[15,25,35])==[25,45,65]", "assert sum_list([1,2,3],[5,6,7])==[6,8,10]", "assert sum_list([15,20,30],[15,45,75])==[30,65,105]", "assert sum_list([11, 19, 31], [20, 29, 39]) == [31, 48, 70]", "assert sum_list([15, 19, 31], [18, 26, 30]) == [33, 45, 61]", "assert sum_list([11, 23, 29], [15, 20, 40]) == [26, 43, 69]", "assert sum_list([11, 25, 35], [13, 27, 32]) == [24, 52, 67]", "assert sum_list([6, 20, 25], [11, 29, 36]) == [17, 49, 61]", "assert sum_list([10, 18, 26], [11, 27, 30]) == [21, 45, 56]", "assert sum_list([6, 16, 31], [19, 21, 36]) == [25, 37, 67]", "assert sum_list([8, 17, 30], [17, 30, 40]) == [25, 47, 70]", "assert sum_list([12, 22, 26], [17, 27, 32]) == [29, 49, 58]", "assert sum_list([12, 20, 34], [14, 22, 37]) == [26, 42, 71]", "assert sum_list([8, 21, 26], [15, 23, 36]) == [23, 44, 62]", "assert sum_list([5, 19, 27], [13, 22, 39]) == [18, 41, 66]", "assert sum_list([6, 15, 25], [15, 28, 32]) == [21, 43, 57]", "assert sum_list([8, 22, 27], [11, 28, 35]) == [19, 50, 62]", "assert sum_list([5, 25, 33], [13, 30, 38]) == [18, 55, 71]", "assert sum_list([12, 18, 34], [17, 23, 36]) == [29, 41, 70]", "assert sum_list([5, 20, 30], [20, 28, 39]) == [25, 48, 69]", "assert sum_list([12, 21, 30], [15, 22, 36]) == [27, 43, 66]", "assert sum_list([14, 15, 27], [18, 25, 36]) == [32, 40, 63]", "assert sum_list([7, 15, 33], [16, 30, 35]) == [23, 45, 68]", "assert sum_list([7, 22, 33], [12, 27, 30]) == [19, 49, 63]", "assert sum_list([13, 25, 35], [18, 21, 35]) == [31, 46, 70]", "assert sum_list([9, 23, 35], [11, 28, 35]) == [20, 51, 70]", "assert sum_list([14, 24, 27], [11, 26, 37]) == [25, 50, 64]", "assert sum_list([9, 24, 34], [20, 23, 35]) == [29, 47, 69]", "assert sum_list([11, 24, 33], [14, 29, 31]) == [25, 53, 64]", "assert sum_list([13, 24, 28], [10, 25, 34]) == [23, 49, 62]", "assert sum_list([15, 21, 28], [10, 20, 30]) == [25, 41, 58]", "assert sum_list([9, 17, 28], [17, 22, 32]) == [26, 39, 60]", "assert sum_list([7, 25, 28], [13, 29, 31]) == [20, 54, 59]", "assert sum_list([6, 25, 26], [12, 26, 34]) == [18, 51, 60]", "assert sum_list([9, 21, 34], [10, 26, 40]) == [19, 47, 74]", "assert sum_list([13, 18, 25], [12, 26, 39]) == [25, 44, 64]", "assert sum_list([2, 1, 2], [10, 8, 6]) == [12, 9, 8]", "assert sum_list([1, 7, 5], [1, 9, 2]) == [2, 16, 7]", "assert sum_list([1, 2, 6], [4, 11, 2]) == [5, 13, 8]", "assert sum_list([4, 6, 4], [1, 6, 6]) == [5, 12, 10]", "assert sum_list([6, 3, 2], [3, 8, 7]) == [9, 11, 9]", "assert sum_list([5, 3, 2], [10, 4, 7]) == [15, 7, 9]", "assert sum_list([2, 5, 5], [7, 10, 3]) == [9, 15, 8]", "assert sum_list([6, 7, 4], [9, 5, 8]) == [15, 12, 12]", "assert sum_list([4, 3, 1], [8, 11, 7]) == [12, 14, 8]", "assert sum_list([1, 7, 8], [1, 10, 4]) == [2, 17, 12]", "assert sum_list([5, 2, 1], [2, 9, 9]) == [7, 11, 10]", "assert sum_list([1, 5, 2], [2, 4, 9]) == [3, 9, 11]", "assert sum_list([1, 4, 2], [8, 5, 7]) == [9, 9, 9]", "assert sum_list([4, 4, 1], [4, 5, 5]) == [8, 9, 6]", "assert sum_list([6, 2, 4], [5, 10, 12]) == [11, 12, 16]", "assert sum_list([3, 2, 6], [7, 1, 4]) == [10, 3, 10]", "assert sum_list([2, 7, 3], [9, 5, 2]) == [11, 12, 5]", "assert sum_list([2, 3, 4], [9, 6, 12]) == [11, 9, 16]", "assert sum_list([2, 6, 6], [1, 3, 10]) == [3, 9, 16]", "assert sum_list([4, 7, 7], [6, 7, 8]) == [10, 14, 15]", "assert sum_list([1, 3, 7], [10, 8, 6]) == [11, 11, 13]", "assert sum_list([1, 3, 6], [3, 1, 6]) == [4, 4, 12]", "assert sum_list([2, 7, 1], [9, 4, 4]) == [11, 11, 5]", "assert sum_list([4, 2, 1], [8, 2, 5]) == [12, 4, 6]", "assert sum_list([6, 2, 5], [3, 4, 10]) == [9, 6, 15]", "assert sum_list([5, 3, 2], [5, 1, 4]) == [10, 4, 6]", "assert sum_list([4, 5, 5], [9, 10, 8]) == [13, 15, 13]", "assert sum_list([3, 4, 3], [3, 5, 11]) == [6, 9, 14]", "assert sum_list([1, 5, 2], [5, 1, 11]) == [6, 6, 13]", "assert sum_list([2, 3, 8], [3, 7, 3]) == [5, 10, 11]", "assert sum_list([3, 5, 7], [5, 8, 8]) == [8, 13, 15]", "assert sum_list([4, 3, 6], [8, 11, 11]) == [12, 14, 17]", "assert sum_list([3, 7, 8], [6, 9, 2]) == [9, 16, 10]", "assert sum_list([14, 18, 32], [14, 49, 80]) == [28, 67, 112]", "assert sum_list([15, 21, 33], [13, 47, 78]) == [28, 68, 111]", "assert sum_list([14, 15, 27], [17, 49, 79]) == [31, 64, 106]", "assert sum_list([10, 20, 33], [19, 41, 75]) == [29, 61, 108]", "assert sum_list([19, 21, 32], [11, 48, 80]) == [30, 69, 112]", "assert sum_list([18, 18, 28], [10, 50, 76]) == [28, 68, 104]", "assert sum_list([19, 17, 25], [19, 44, 79]) == [38, 61, 104]", "assert sum_list([16, 21, 26], [15, 44, 72]) == [31, 65, 98]", "assert sum_list([11, 19, 32], [10, 44, 77]) == [21, 63, 109]", "assert sum_list([20, 21, 34], [14, 50, 74]) == [34, 71, 108]", "assert sum_list([18, 23, 34], [10, 41, 72]) == [28, 64, 106]", "assert sum_list([17, 23, 28], [20, 49, 71]) == [37, 72, 99]", "assert sum_list([16, 17, 33], [12, 41, 74]) == [28, 58, 107]", "assert sum_list([13, 16, 29], [19, 40, 70]) == [32, 56, 99]", "assert sum_list([19, 18, 29], [12, 46, 79]) == [31, 64, 108]", "assert sum_list([20, 16, 33], [13, 47, 80]) == [33, 63, 113]", "assert sum_list([16, 24, 34], [17, 41, 76]) == [33, 65, 110]", "assert sum_list([19, 24, 34], [11, 50, 80]) == [30, 74, 114]", "assert sum_list([14, 24, 28], [18, 43, 76]) == [32, 67, 104]", "assert sum_list([11, 15, 29], [19, 46, 80]) == [30, 61, 109]", "assert sum_list([14, 18, 31], [11, 41, 78]) == [25, 59, 109]", "assert sum_list([16, 18, 32], [13, 46, 72]) == [29, 64, 104]", "assert sum_list([13, 23, 30], [19, 41, 78]) == [32, 64, 108]", "assert sum_list([16, 18, 33], [17, 44, 80]) == [33, 62, 113]", "assert sum_list([13, 22, 33], [12, 48, 77]) == [25, 70, 110]", "assert sum_list([13, 18, 29], [14, 50, 76]) == [27, 68, 105]", "assert sum_list([15, 18, 29], [12, 43, 80]) == [27, 61, 109]", "assert sum_list([12, 16, 35], [11, 46, 74]) == [23, 62, 109]", "assert sum_list([14, 16, 32], [18, 40, 75]) == [32, 56, 107]", "assert sum_list([14, 21, 29], [10, 41, 80]) == [24, 62, 109]", "assert sum_list([13, 18, 25], [16, 45, 75]) == [29, 63, 100]", "assert sum_list([18, 25, 35], [19, 47, 79]) == [37, 72, 114]", "assert sum_list([18, 25, 29], [16, 48, 73]) == [34, 73, 102]"], "entry_point": "sum_list", "repair_prompt": ["Write a function sum_list takes as input two lists [a_1,...,a_n], [b_1,...,b_n], returning [a_1+b_1,...,a_n+b_n].\nsum_list([10,20,30],[15,25,35])==[25,45,65]\n"], "completions": ["from typing import List\nfrom typing import List\n\ndef sum_list(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Sums corresponding elements of two lists of integers.\n\n    Args:\n        list1 (List[int]): The first list of integers.\n        list2 (List[int]): The second list of integers.\n\n    Returns:\n        List[int]: A new list containing the sum of corresponding elements from list1 and list2.\n\n    Raises:\n        ValueError: If the lists are of unequal lengths.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length\")\n    \n    result = []\n    for a, b in zip(list1, list2):\n        result.append(a + b)\n    \n    return result\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Takes two lists of numbers and returns a new list with their sums.\n    \n    Args:\n        list1 (list): The first list of numbers.\n        list2 (list): The second list of numbers.\n    \n    Returns:\n        list: A new list containing the sum of corresponding elements from list1 and list2.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length\")\n    \n    result = []\n    for num1, num2 in zip(list1, list2):\n        result.append(num1 + num2)\n    \n    return result\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Sums two lists of numbers element-wise.\n\n    Args:\n        list1 (list): The first list of numbers.\n        list2 (list): The second list of numbers.\n\n    Returns:\n        list: A new list containing the sums of the corresponding elements from list1 and list2.\n    \"\"\"\n    # Validate that both lists are of the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must be of the same length\")\n    \n    # Initialize the result list\n    result = []\n    \n    # Sum corresponding elements from both lists\n    for num1, num2 in zip(list1, list2):\n        result.append(num1 + num2)\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List, Number\n\ndef sum_list(list1: List[Number], list2: List[Number]) -> List[Number]:\n    \"\"\"\n    Takes two lists of numbers and returns a new list where each element is the sum of the corresponding elements from the input lists.\n    \n    Args:\n        list1 (List[Number]): The first list of numbers.\n        list2 (List[Number]): The second list of numbers.\n    \n    Returns:\n        List[Number]: A new list containing the sum of corresponding elements from list1 and list2.\n    \"\"\"\n    # Validate input lengths\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length\")\n    \n    # Initialize result list\n    result = []\n    \n    # Sum corresponding elements\n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i])\n    \n    return result\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Takes two lists of numbers and returns a new list of sums.\n    \n    Args:\n        list1 (list): The first list of numbers.\n        list2 (list): The second list of numbers.\n    \n    Returns:\n        list: A new list containing the sums of corresponding elements from list1 and list2.\n    \n    Raises:\n        ValueError: If the lists are of different lengths and cannot be summed element-wise.\n    \"\"\"\n    # Validate that the lists are of the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length to sum element-wise.\")\n    \n    # Initialize the result list\n    result = []\n    \n    # Use list comprehension to sum elements\n    for num1, num2 in zip(list1, list2):\n        result.append(num1 + num2)\n    \n    return result\n", "from typing import List\nimport numpy as np\n\ndef sum_list(list1: list, list2: list) -> list:\n    # Ensure both lists are of the same length\n    if len(list1) != len(list2):\n        raise ValueError('Lists must be of the same length')\n    \n    # Convert lists to NumPy arrays\n    array1 = np.array(list1)\n    array2 = np.array(list2)\n    \n    # Sum the corresponding elements\n    result_array = array1 + array2\n    \n    # Convert the result back to a list\n    return result_array.tolist()\n", "from typing import List\nimport numpy as np\n\ndef sum_list(list1: list[float], list2: list[float]) -> list[float]:\n    \"\"\"\n    Sums two lists of floats element-wise.\n\n    Args:\n        list1 (list[float]): The first list of floats.\n        list2 (list[float]): The second list of floats.\n\n    Returns:\n        list[float]: A new list of floats representing the element-wise sum of the input lists.\n\n    Raises:\n        ValueError: If the input lists are not of the same length.\n    \"\"\"\n    # Validate that the lists are of the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must be of the same length\")\n\n    # Convert lists to numpy arrays for efficient element-wise operations\n    array1 = np.array(list1)\n    array2 = np.array(list2)\n\n    # Sum the arrays element-wise\n    result_array = array1 + array2\n\n    # Convert the result back to a list\n    result_list = result_array.tolist()\n\n    return result_list\n", "from typing import List\n## main.py\n\nfrom typing import List, Number\n\ndef sum_list(list1: List[Number], list2: List[Number]) -> List[Number]:\n    \"\"\"\n    Sums corresponding elements from two lists of numbers.\n    \n    Args:\n        list1 (List[Number]): The first list of numbers.\n        list2 (List[Number]): The second list of numbers.\n    \n    Returns:\n        List[Number]: A new list containing the sum of corresponding elements from list1 and list2.\n    \n    Raises:\n        ValueError: If the lists are not of the same length, are empty, or contain non-numeric elements.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length\")\n    \n    if not list1 or not list2:\n        raise ValueError(\"Lists must not be empty\")\n    \n    for x in list1 + list2:\n        if not isinstance(x, (int, float)):\n            raise ValueError(f\"Element {x} is not a numeric element\")\n    \n    result = [x + y for x, y in zip(list1, list2)]\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List, Number\n\ndef sum_list(list1: List[Number], list2: List[Number]) -> List[Number]:\n    \"\"\"\n    Takes two lists of numbers and returns a new list where each element is the sum of the corresponding elements from the input lists.\n    \n    Args:\n        list1 (List[Number]): The first list of numbers.\n        list2 (List[Number]): The second list of numbers.\n    \n    Returns:\n        List[Number]: A new list containing the sum of corresponding elements from list1 and list2.\n    \"\"\"\n    # Validate input lengths\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length\")\n    \n    # Initialize result list\n    result = []\n    \n    # Sum corresponding elements\n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i])\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List, Number\n\ndef sum_list(list1: List[Number], list2: List[Number]) -> List[Number]:\n    \"\"\"\n    Takes two lists of numbers and returns a new list where each element is the sum of the corresponding elements from the input lists.\n    \n    Args:\n        list1 (List[Number]): The first list of numbers.\n        list2 (List[Number]): The second list of numbers.\n    \n    Returns:\n        List[Number]: A new list containing the sum of corresponding elements from list1 and list2.\n    \"\"\"\n    # Validate input lengths\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length\")\n    \n    # Initialize result list\n    result = []\n    \n    # Sum corresponding elements\n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i])\n    \n    return result\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that takes two lists of numbers and returns a new list where each element is the sum of the corresponding elements from the input lists. The function should handle lists of different lengths by either ignoring the extra elements or providing an error message. The function should be efficient and easy to understand.\nrequirement pool:\n- Implement the function to sum corresponding elements of two lists.\n- Handle cases where lists are of unequal lengths.\n- Ensure the function is efficient and handles large datasets.\n- Provide clear and concise documentation and examples.\n- Test the function for edge cases and performance.\nTo implement the function efficiently and accurately, we will use Python's built-in capabilities, specifically focusing on list operations. This approach will ensure simplicity and performance suitable for handling both small and large datasets. We will also handle edge cases where the input lists are of unequal lengths by either ignoring extra elements or returning an error, depending on the desired behavior.\n", "requirement analysis:\nThe requirement is to create a function that takes two lists and returns their sum element-wise. This is a basic operation in many programming tasks and should be straightforward to implement. The function should handle lists of equal length and return a new list with the sums.\nrequirement pool:\n- The main code should be clear and concise\n- The function should handle lists of different lengths gracefully\n- The product should be optimized for performance\n- The UI should be user-friendly and aesthetically pleasing\n- The product should be compatible with a variety of devices\nWe will implement the function `sum_list` using Python, leveraging its built-in capabilities to handle lists and perform element-wise addition. This approach is straightforward and leverages Python's simplicity and readability, which aligns with the user's requirement to create an engaging user experience.\n", "requirement analysis:\nThe requirement is to create a function that takes two lists of numbers and returns a new list where each element is the sum of the corresponding elements from the input lists. The function should handle cases where the lists are of different lengths by either truncating to the shortest length or providing a clear error message.\nrequirement pool:\n- The main code should be efficient and handle basic list operations.\n- The function should return a new list with the sums of corresponding elements.\n- Implement error handling for lists of different lengths.\n- Optimize the function for performance, especially for large datasets.\n- Ensure the function is compatible with different programming environments.\nTo create a function that efficiently sums two lists of numbers, we will use Python's built-in capabilities. This approach will ensure simplicity and ease of use while maintaining performance. We will leverage Python's list comprehension feature to iterate through both lists simultaneously and sum their corresponding elements.\n", "requirement analysis:\nThe function 'sum_list' is a straightforward request to sum corresponding elements of two lists. This is a basic operation that should be included in any utility or mathematical toolset. The requirement is clear and does not require extensive analysis beyond basic list manipulation.\nrequirement pool:\n- Implement the sum_list function as described\n- Ensure the function works correctly for any pair of input lists\n- Develop a user-friendly interface for easy interaction\n- Include basic styling to make the interface visually appealing\n- Add accessibility features to support a wide range of users\nWe will implement the 'sum_list' function using Python, leveraging its built-in capabilities for list operations. This function will take two lists of numbers as input and return a new list where each element is the sum of the corresponding elements from the input lists. We will ensure the function is robust and can handle lists of any length and any numeric types.\n", "requirement analysis:\nThe requirement is to create a function that takes two lists of numbers and returns a new list where each element is the sum of the corresponding elements from the input lists. The function should handle cases where the lists are of different lengths by either ignoring extra elements or raising an error, depending on the use case.\nrequirement pool:\n- Implement the sum_list function to handle two lists of numbers.\n- Ensure the function can handle lists of different lengths.\n- Optimize the function for performance, especially for large datasets.\n- Include error handling for lists of different lengths.\n- Document the function clearly for easy understanding and use.\nTo implement the `sum_list` function efficiently and accurately, we will leverage Python's built-in capabilities and optimize for performance. The function will handle lists of different lengths by either ignoring extra elements or raising an error, depending on the use case. We will use basic Python loops and list comprehensions to ensure simplicity and readability.\n", "requirement analysis:\nThe requirement is to create a function that takes two lists of numbers and returns a new list where each element is the sum of the corresponding elements from the input lists. The function should handle lists of different lengths by either ignoring the extra elements or raising an error, depending on the use case. The function should be efficient and easy to use.\nrequirement pool:\n- The main code should be efficient in handling the addition of two lists.\n- The function should return a new list with the sums of corresponding elements.\n- The function should handle lists of different lengths gracefully.\n- The function should be optimized for performance, especially for large datasets.\n- The function should include clear documentation and examples for user guidance.\nTo create an efficient and easy-to-use function that sums two lists of numbers, we will leverage Python's built-in capabilities and the NumPy library. Python's built-in functions are simple and easy to use, but they lack performance for large datasets. NumPy, on the other hand, is optimized for numerical computations and can handle large datasets efficiently. We will use NumPy's array operations to sum corresponding elements of the two input lists.\n", "requirement analysis:\nThe requirement is to create a function that takes two lists of numbers and returns a new list where each element is the sum of the corresponding elements from the input lists. The function should handle lists of different lengths by either ignoring the extra elements or raising an error, depending on the use case. The function should be efficient and easy to use, suitable for both novice and experienced users.\nrequirement pool:\n- The main code should be concise and readable.\n- The function should handle lists of different lengths gracefully.\n- The function should be optimized for performance.\n- The function should provide clear error messages for invalid inputs.\n- The function should be documented with examples and usage instructions.\nTo create a function that efficiently sums two lists of numbers element-wise, we will leverage Python's built-in capabilities and the NumPy library. NumPy is chosen for its high performance and efficiency in numerical operations, which aligns well with our goal of optimizing performance for large datasets.\n", "requirement analysis:\nThe requirement is to create a function that takes two lists of numbers and returns a new list where each element is the sum of the corresponding elements from the input lists. The function should handle cases where the lists are of different lengths by either truncating the longer list or padding the shorter list with zeros. The function should be efficient and easy to use, suitable for both novice and experienced users.\nrequirement pool:\n- Implement the sum_list function to handle two lists of numbers.\n- Ensure the function can handle lists of different lengths.\n- Optimize the function for performance, especially for large datasets.\n- Include error handling for non-numeric data in the input lists.\n- Document the function with examples and usage instructions.\nTo implement the `sum_list` function efficiently and accurately, we will use Python's built-in capabilities along with the NumPy library for enhanced performance when dealing with large datasets. The function will first check if the input lists are of the same length, and if not, it will truncate the longer list to match the length of the shorter one. Then, it will sum the corresponding elements from both lists. If the lists contain non-numeric elements, the function will handle these cases by raising an error, ensuring data integrity.\n", "requirement analysis:\nThe function 'sum_list' is a straightforward request to sum corresponding elements of two lists. This is a basic operation that should be included in any utility or mathematical toolset. The requirement is clear and does not require extensive analysis beyond basic list manipulation.\nrequirement pool:\n- Implement the sum_list function as described\n- Ensure the function works correctly for any pair of input lists\n- Develop a user-friendly interface for easy interaction\n- Include basic styling to make the interface visually appealing\n- Add accessibility features to support a wide range of users\nWe will implement the 'sum_list' function using Python, leveraging its built-in capabilities for list operations. This function will take two lists of numbers as input and return a new list where each element is the sum of the corresponding elements from the input lists. We will ensure the function is robust and can handle lists of any length and any numeric types.\n", "requirement analysis:\nThe function 'sum_list' is a straightforward request to sum corresponding elements of two lists. This is a basic operation that should be included in any utility or mathematical toolset. The requirement is clear and does not require extensive analysis beyond basic list manipulation.\nrequirement pool:\n- Implement the sum_list function as described\n- Ensure the function works correctly for any pair of input lists\n- Develop a user-friendly interface for easy interaction\n- Include basic styling to make the interface visually appealing\n- Add accessibility features to support a wide range of users\nWe will implement the 'sum_list' function using Python, leveraging its built-in capabilities for list operations. This function will take two lists of numbers as input and return a new list where each element is the sum of the corresponding elements from the input lists. We will ensure the function is robust and can handle lists of any length and any numeric types.\n"], "test": ["def check(sum_list):\n\tassert sum_list([10,20,30],[15,25,35])==[25,45,65]", "def check(sum_list):\n\tassert sum_list([1,2,3],[5,6,7])==[6,8,10]", "def check(sum_list):\n\tassert sum_list([15,20,30],[15,45,75])==[30,65,105]", "def check(sum_list):\n\tassert sum_list([11, 19, 31], [20, 29, 39]) == [31, 48, 70]", "def check(sum_list):\n\tassert sum_list([15, 19, 31], [18, 26, 30]) == [33, 45, 61]", "def check(sum_list):\n\tassert sum_list([11, 23, 29], [15, 20, 40]) == [26, 43, 69]", "def check(sum_list):\n\tassert sum_list([11, 25, 35], [13, 27, 32]) == [24, 52, 67]", "def check(sum_list):\n\tassert sum_list([6, 20, 25], [11, 29, 36]) == [17, 49, 61]", "def check(sum_list):\n\tassert sum_list([10, 18, 26], [11, 27, 30]) == [21, 45, 56]", "def check(sum_list):\n\tassert sum_list([6, 16, 31], [19, 21, 36]) == [25, 37, 67]", "def check(sum_list):\n\tassert sum_list([8, 17, 30], [17, 30, 40]) == [25, 47, 70]", "def check(sum_list):\n\tassert sum_list([12, 22, 26], [17, 27, 32]) == [29, 49, 58]", "def check(sum_list):\n\tassert sum_list([12, 20, 34], [14, 22, 37]) == [26, 42, 71]", "def check(sum_list):\n\tassert sum_list([8, 21, 26], [15, 23, 36]) == [23, 44, 62]", "def check(sum_list):\n\tassert sum_list([5, 19, 27], [13, 22, 39]) == [18, 41, 66]", "def check(sum_list):\n\tassert sum_list([6, 15, 25], [15, 28, 32]) == [21, 43, 57]", "def check(sum_list):\n\tassert sum_list([8, 22, 27], [11, 28, 35]) == [19, 50, 62]", "def check(sum_list):\n\tassert sum_list([5, 25, 33], [13, 30, 38]) == [18, 55, 71]", "def check(sum_list):\n\tassert sum_list([12, 18, 34], [17, 23, 36]) == [29, 41, 70]", "def check(sum_list):\n\tassert sum_list([5, 20, 30], [20, 28, 39]) == [25, 48, 69]", "def check(sum_list):\n\tassert sum_list([12, 21, 30], [15, 22, 36]) == [27, 43, 66]", "def check(sum_list):\n\tassert sum_list([14, 15, 27], [18, 25, 36]) == [32, 40, 63]", "def check(sum_list):\n\tassert sum_list([7, 15, 33], [16, 30, 35]) == [23, 45, 68]", "def check(sum_list):\n\tassert sum_list([7, 22, 33], [12, 27, 30]) == [19, 49, 63]", "def check(sum_list):\n\tassert sum_list([13, 25, 35], [18, 21, 35]) == [31, 46, 70]", "def check(sum_list):\n\tassert sum_list([9, 23, 35], [11, 28, 35]) == [20, 51, 70]", "def check(sum_list):\n\tassert sum_list([14, 24, 27], [11, 26, 37]) == [25, 50, 64]", "def check(sum_list):\n\tassert sum_list([9, 24, 34], [20, 23, 35]) == [29, 47, 69]", "def check(sum_list):\n\tassert sum_list([11, 24, 33], [14, 29, 31]) == [25, 53, 64]", "def check(sum_list):\n\tassert sum_list([13, 24, 28], [10, 25, 34]) == [23, 49, 62]", "def check(sum_list):\n\tassert sum_list([15, 21, 28], [10, 20, 30]) == [25, 41, 58]", "def check(sum_list):\n\tassert sum_list([9, 17, 28], [17, 22, 32]) == [26, 39, 60]", "def check(sum_list):\n\tassert sum_list([7, 25, 28], [13, 29, 31]) == [20, 54, 59]", "def check(sum_list):\n\tassert sum_list([6, 25, 26], [12, 26, 34]) == [18, 51, 60]", "def check(sum_list):\n\tassert sum_list([9, 21, 34], [10, 26, 40]) == [19, 47, 74]", "def check(sum_list):\n\tassert sum_list([13, 18, 25], [12, 26, 39]) == [25, 44, 64]", "def check(sum_list):\n\tassert sum_list([2, 1, 2], [10, 8, 6]) == [12, 9, 8]", "def check(sum_list):\n\tassert sum_list([1, 7, 5], [1, 9, 2]) == [2, 16, 7]", "def check(sum_list):\n\tassert sum_list([1, 2, 6], [4, 11, 2]) == [5, 13, 8]", "def check(sum_list):\n\tassert sum_list([4, 6, 4], [1, 6, 6]) == [5, 12, 10]", "def check(sum_list):\n\tassert sum_list([6, 3, 2], [3, 8, 7]) == [9, 11, 9]", "def check(sum_list):\n\tassert sum_list([5, 3, 2], [10, 4, 7]) == [15, 7, 9]", "def check(sum_list):\n\tassert sum_list([2, 5, 5], [7, 10, 3]) == [9, 15, 8]", "def check(sum_list):\n\tassert sum_list([6, 7, 4], [9, 5, 8]) == [15, 12, 12]", "def check(sum_list):\n\tassert sum_list([4, 3, 1], [8, 11, 7]) == [12, 14, 8]", "def check(sum_list):\n\tassert sum_list([1, 7, 8], [1, 10, 4]) == [2, 17, 12]", "def check(sum_list):\n\tassert sum_list([5, 2, 1], [2, 9, 9]) == [7, 11, 10]", "def check(sum_list):\n\tassert sum_list([1, 5, 2], [2, 4, 9]) == [3, 9, 11]", "def check(sum_list):\n\tassert sum_list([1, 4, 2], [8, 5, 7]) == [9, 9, 9]", "def check(sum_list):\n\tassert sum_list([4, 4, 1], [4, 5, 5]) == [8, 9, 6]", "def check(sum_list):\n\tassert sum_list([6, 2, 4], [5, 10, 12]) == [11, 12, 16]", "def check(sum_list):\n\tassert sum_list([3, 2, 6], [7, 1, 4]) == [10, 3, 10]", "def check(sum_list):\n\tassert sum_list([2, 7, 3], [9, 5, 2]) == [11, 12, 5]", "def check(sum_list):\n\tassert sum_list([2, 3, 4], [9, 6, 12]) == [11, 9, 16]", "def check(sum_list):\n\tassert sum_list([2, 6, 6], [1, 3, 10]) == [3, 9, 16]", "def check(sum_list):\n\tassert sum_list([4, 7, 7], [6, 7, 8]) == [10, 14, 15]", "def check(sum_list):\n\tassert sum_list([1, 3, 7], [10, 8, 6]) == [11, 11, 13]", "def check(sum_list):\n\tassert sum_list([1, 3, 6], [3, 1, 6]) == [4, 4, 12]", "def check(sum_list):\n\tassert sum_list([2, 7, 1], [9, 4, 4]) == [11, 11, 5]", "def check(sum_list):\n\tassert sum_list([4, 2, 1], [8, 2, 5]) == [12, 4, 6]", "def check(sum_list):\n\tassert sum_list([6, 2, 5], [3, 4, 10]) == [9, 6, 15]", "def check(sum_list):\n\tassert sum_list([5, 3, 2], [5, 1, 4]) == [10, 4, 6]", "def check(sum_list):\n\tassert sum_list([4, 5, 5], [9, 10, 8]) == [13, 15, 13]", "def check(sum_list):\n\tassert sum_list([3, 4, 3], [3, 5, 11]) == [6, 9, 14]", "def check(sum_list):\n\tassert sum_list([1, 5, 2], [5, 1, 11]) == [6, 6, 13]", "def check(sum_list):\n\tassert sum_list([2, 3, 8], [3, 7, 3]) == [5, 10, 11]", "def check(sum_list):\n\tassert sum_list([3, 5, 7], [5, 8, 8]) == [8, 13, 15]", "def check(sum_list):\n\tassert sum_list([4, 3, 6], [8, 11, 11]) == [12, 14, 17]", "def check(sum_list):\n\tassert sum_list([3, 7, 8], [6, 9, 2]) == [9, 16, 10]", "def check(sum_list):\n\tassert sum_list([14, 18, 32], [14, 49, 80]) == [28, 67, 112]", "def check(sum_list):\n\tassert sum_list([15, 21, 33], [13, 47, 78]) == [28, 68, 111]", "def check(sum_list):\n\tassert sum_list([14, 15, 27], [17, 49, 79]) == [31, 64, 106]", "def check(sum_list):\n\tassert sum_list([10, 20, 33], [19, 41, 75]) == [29, 61, 108]", "def check(sum_list):\n\tassert sum_list([19, 21, 32], [11, 48, 80]) == [30, 69, 112]", "def check(sum_list):\n\tassert sum_list([18, 18, 28], [10, 50, 76]) == [28, 68, 104]", "def check(sum_list):\n\tassert sum_list([19, 17, 25], [19, 44, 79]) == [38, 61, 104]", "def check(sum_list):\n\tassert sum_list([16, 21, 26], [15, 44, 72]) == [31, 65, 98]", "def check(sum_list):\n\tassert sum_list([11, 19, 32], [10, 44, 77]) == [21, 63, 109]", "def check(sum_list):\n\tassert sum_list([20, 21, 34], [14, 50, 74]) == [34, 71, 108]", "def check(sum_list):\n\tassert sum_list([18, 23, 34], [10, 41, 72]) == [28, 64, 106]", "def check(sum_list):\n\tassert sum_list([17, 23, 28], [20, 49, 71]) == [37, 72, 99]", "def check(sum_list):\n\tassert sum_list([16, 17, 33], [12, 41, 74]) == [28, 58, 107]", "def check(sum_list):\n\tassert sum_list([13, 16, 29], [19, 40, 70]) == [32, 56, 99]", "def check(sum_list):\n\tassert sum_list([19, 18, 29], [12, 46, 79]) == [31, 64, 108]", "def check(sum_list):\n\tassert sum_list([20, 16, 33], [13, 47, 80]) == [33, 63, 113]", "def check(sum_list):\n\tassert sum_list([16, 24, 34], [17, 41, 76]) == [33, 65, 110]", "def check(sum_list):\n\tassert sum_list([19, 24, 34], [11, 50, 80]) == [30, 74, 114]", "def check(sum_list):\n\tassert sum_list([14, 24, 28], [18, 43, 76]) == [32, 67, 104]", "def check(sum_list):\n\tassert sum_list([11, 15, 29], [19, 46, 80]) == [30, 61, 109]", "def check(sum_list):\n\tassert sum_list([14, 18, 31], [11, 41, 78]) == [25, 59, 109]", "def check(sum_list):\n\tassert sum_list([16, 18, 32], [13, 46, 72]) == [29, 64, 104]", "def check(sum_list):\n\tassert sum_list([13, 23, 30], [19, 41, 78]) == [32, 64, 108]", "def check(sum_list):\n\tassert sum_list([16, 18, 33], [17, 44, 80]) == [33, 62, 113]", "def check(sum_list):\n\tassert sum_list([13, 22, 33], [12, 48, 77]) == [25, 70, 110]", "def check(sum_list):\n\tassert sum_list([13, 18, 29], [14, 50, 76]) == [27, 68, 105]", "def check(sum_list):\n\tassert sum_list([15, 18, 29], [12, 43, 80]) == [27, 61, 109]", "def check(sum_list):\n\tassert sum_list([12, 16, 35], [11, 46, 74]) == [23, 62, 109]", "def check(sum_list):\n\tassert sum_list([14, 16, 32], [18, 40, 75]) == [32, 56, 107]", "def check(sum_list):\n\tassert sum_list([14, 21, 29], [10, 41, 80]) == [24, 62, 109]", "def check(sum_list):\n\tassert sum_list([13, 18, 25], [16, 45, 75]) == [29, 63, 100]", "def check(sum_list):\n\tassert sum_list([18, 25, 35], [19, 47, 79]) == [37, 72, 114]", "def check(sum_list):\n\tassert sum_list([18, 25, 29], [16, 48, 73]) == [34, 73, 102]"], "scores": [1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0], "pass_results": [true, true, true, false, true, true, true, false, false, false], "pass_test_cases_num": [102, 102, 102, 0, 102, 102, 102, 0, 0, 0], "completion": "from typing import List\n## main.py\n\nfrom typing import List, Number\n\ndef sum_list(list1: List[Number], list2: List[Number]) -> List[Number]:\n    \"\"\"\n    Takes two lists of numbers and returns a new list where each element is the sum of the corresponding elements from the input lists.\n    \n    Args:\n        list1 (List[Number]): The first list of numbers.\n        list2 (List[Number]): The second list of numbers.\n    \n    Returns:\n        List[Number]: A new list containing the sum of corresponding elements from list1 and list2.\n    \"\"\"\n    # Validate input lengths\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length\")\n    \n    # Initialize result list\n    result = []\n    \n    # Sum corresponding elements\n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i])\n    \n    return result\n", "passed": true, "pass": true, "pass_num": 6, "round": 652, "mutate_method": "condense_two2one", "parent_index": 415}
