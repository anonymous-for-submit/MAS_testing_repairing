{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 397, "prompt": "Write a function to find the median. The median is the middle value when the numbers are sorted from least to greatest. of three numbers.", "code": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median", "test_imports": [], "test_list": ["assert median_numbers(25,55,65)==55.0", "assert median_numbers(20,10,30)==20.0", "assert median_numbers(15,45,75)==45.0", "assert median_numbers(22, 54, 68) == 54", "assert median_numbers(22, 57, 66) == 57", "assert median_numbers(22, 54, 61) == 54", "assert median_numbers(30, 53, 63) == 53", "assert median_numbers(22, 55, 61) == 55", "assert median_numbers(25, 60, 61) == 60", "assert median_numbers(22, 56, 68) == 56", "assert median_numbers(29, 53, 70) == 53", "assert median_numbers(23, 53, 66) == 53", "assert median_numbers(29, 58, 67) == 58", "assert median_numbers(27, 52, 64) == 52", "assert median_numbers(29, 60, 61) == 60", "assert median_numbers(25, 57, 61) == 57", "assert median_numbers(20, 50, 66) == 50", "assert median_numbers(21, 51, 65) == 51", "assert median_numbers(29, 51, 67) == 51", "assert median_numbers(26, 55, 69) == 55", "assert median_numbers(24, 53, 64) == 53", "assert median_numbers(28, 55, 65) == 55", "assert median_numbers(27, 57, 66) == 57", "assert median_numbers(20, 58, 70) == 58", "assert median_numbers(23, 56, 67) == 56", "assert median_numbers(28, 55, 69) == 55", "assert median_numbers(23, 58, 70) == 58", "assert median_numbers(26, 54, 62) == 54", "assert median_numbers(27, 51, 64) == 51", "assert median_numbers(28, 50, 65) == 50", "assert median_numbers(29, 55, 69) == 55", "assert median_numbers(22, 57, 70) == 57", "assert median_numbers(27, 52, 69) == 52", "assert median_numbers(30, 58, 61) == 58", "assert median_numbers(20, 58, 63) == 58", "assert median_numbers(27, 51, 69) == 51", "assert median_numbers(21, 12, 26) == 21", "assert median_numbers(18, 6, 28) == 18", "assert median_numbers(19, 7, 27) == 19", "assert median_numbers(21, 14, 25) == 21", "assert median_numbers(20, 7, 29) == 20", "assert median_numbers(15, 7, 31) == 15", "assert median_numbers(15, 8, 32) == 15", "assert median_numbers(20, 6, 34) == 20", "assert median_numbers(20, 7, 28) == 20", "assert median_numbers(21, 8, 31) == 21", "assert median_numbers(23, 6, 31) == 23", "assert median_numbers(20, 10, 34) == 20", "assert median_numbers(16, 14, 29) == 16", "assert median_numbers(16, 7, 30) == 16", "assert median_numbers(23, 9, 32) == 23", "assert median_numbers(15, 7, 28) == 15", "assert median_numbers(18, 5, 26) == 18", "assert median_numbers(22, 8, 26) == 22", "assert median_numbers(19, 6, 26) == 19", "assert median_numbers(15, 11, 30) == 15", "assert median_numbers(18, 5, 31) == 18", "assert median_numbers(19, 6, 32) == 19", "assert median_numbers(20, 5, 31) == 20", "assert median_numbers(21, 13, 26) == 21", "assert median_numbers(19, 5, 33) == 19", "assert median_numbers(24, 8, 25) == 24", "assert median_numbers(21, 15, 34) == 21", "assert median_numbers(17, 14, 31) == 17", "assert median_numbers(17, 8, 30) == 17", "assert median_numbers(21, 13, 34) == 21", "assert median_numbers(19, 5, 34) == 19", "assert median_numbers(15, 8, 30) == 15", "assert median_numbers(21, 12, 31) == 21", "assert median_numbers(19, 40, 78) == 40", "assert median_numbers(19, 50, 78) == 50", "assert median_numbers(11, 44, 73) == 44", "assert median_numbers(18, 42, 70) == 42", "assert median_numbers(11, 48, 72) == 48", "assert median_numbers(10, 48, 79) == 48", "assert median_numbers(17, 48, 79) == 48", "assert median_numbers(17, 46, 74) == 46", "assert median_numbers(20, 49, 78) == 49", "assert median_numbers(12, 40, 71) == 40", "assert median_numbers(16, 40, 79) == 40", "assert median_numbers(17, 40, 80) == 40", "assert median_numbers(15, 50, 78) == 50", "assert median_numbers(11, 41, 76) == 41", "assert median_numbers(20, 47, 73) == 47", "assert median_numbers(19, 50, 71) == 50", "assert median_numbers(10, 42, 77) == 42", "assert median_numbers(20, 44, 70) == 44", "assert median_numbers(16, 41, 78) == 41", "assert median_numbers(20, 49, 70) == 49", "assert median_numbers(11, 50, 75) == 50", "assert median_numbers(20, 42, 72) == 42", "assert median_numbers(15, 48, 74) == 48", "assert median_numbers(15, 49, 72) == 49", "assert median_numbers(10, 42, 80) == 42", "assert median_numbers(17, 43, 78) == 43", "assert median_numbers(18, 44, 73) == 44", "assert median_numbers(13, 50, 80) == 50", "assert median_numbers(14, 40, 75) == 40", "assert median_numbers(11, 48, 72) == 48", "assert median_numbers(10, 42, 75) == 42", "assert median_numbers(10, 42, 74) == 42", "assert median_numbers(15, 41, 74) == 41"], "entry_point": "median_numbers", "repair_prompt": ["Write a function median_numbers to find the median. The median is the middle value when the numbers are sorted from least to greatest. of three numbers.\nmedian_numbers(25,55,65)==55.0\n"], "completions": ["from typing import List\n## main.py\n\ndef median_numbers(a: (int, float), b: (int, float), c: (int, float)) -> float:\n    \"\"\"\n    Calculate the median of three numbers.\n\n    Args:\n        a (int, float): The first number.\n        b (int, float): The second number.\n        c (int, float): The third number.\n\n    Returns:\n        float: The median of the three numbers.\n    \"\"\"\n    # Sort the numbers\n    numbers = [a, b, c]\n    numbers.sort()\n    \n    # Return the middle value\n    return numbers[1]\n", "from typing import List\n## main.py\n\ndef median_numbers(a: (int, float), b: (int, float), c: (int, float)) -> float:\n    \"\"\"\n    Calculate the median of three numbers.\n\n    Args:\n        a (int, float): The first number.\n        b (int, float): The second number.\n        c (int, float): The third number.\n\n    Returns:\n        float: The median of the three numbers.\n    \"\"\"\n    # Sort the numbers to find the median\n    numbers = [a, b, c]\n    numbers.sort()\n    \n    # The median is the middle value in the sorted list\n    return numbers[1]\n\n# Example usage:\n# print(median_numbers(25, 55, 65))  # Output: 55.0\n", "from typing import List\n## main.py\n\ndef median_numbers(a: float, b: float, c: float) -> float:\n    \"\"\"\n    Calculate the median of three numbers.\n\n    Args:\n        a (float): The first number.\n        b (float): The second number.\n        c (float): The third number.\n\n    Returns:\n        float: The median of the three numbers.\n    \"\"\"\n    # Sort the numbers\n    numbers = [a, b, c]\n    numbers.sort()\n    \n    # Return the middle value\n    return numbers[1]\n", "from typing import List\n## main.py\n\ndef median_numbers(a: float, b: float, c: float) -> float:\n    \"\"\"\n    Calculate the median of three numbers.\n\n    Args:\n        a (float): The first number.\n        b (float): The second number.\n        c (float): The third number.\n\n    Returns:\n        float: The median of the three numbers.\n    \"\"\"\n    # Sort the numbers\n    numbers = [a, b, c]\n    numbers.sort()\n    \n    # Return the middle value\n    return numbers[1]\n", "from typing import List\n## main.py\n\ndef median_numbers(a: (int, float), b: (int, float), c: (int, float)) -> float:\n    \"\"\"\n    Calculate the median of three numbers.\n\n    Args:\n        a (int, float): The first number.\n        b (int, float): The second number.\n        c (int, float): The third number.\n\n    Returns:\n        float: The median of the three numbers.\n    \"\"\"\n    # Sort the numbers to find the median\n    numbers = [a, b, c]\n    numbers.sort()\n    \n    # The median is the middle value in the sorted list\n    median_value = numbers[1]\n    \n    return median_value\n", "from typing import List\n## main.py\n\ndef median_numbers(a: (int, float), b: (int, float), c: (int, float)) -> float:\n    \"\"\"\n    Calculate the median of three numbers.\n\n    Args:\n        a (int, float): The first number.\n        b (int, float): The second number.\n        c (int, float): The third number.\n\n    Returns:\n        float: The median of the three numbers.\n    \"\"\"\n    # Sort the numbers\n    numbers = [a, b, c]\n    numbers.sort()\n    \n    # Return the median\n    return numbers[1]\n", "from typing import List\n## main.py\n\ndef median_numbers(a: float, b: float, c: float) -> float:\n    \"\"\"\n    Calculate the median of three numbers.\n\n    Args:\n        a (float): The first number.\n        b (float): The second number.\n        c (float): The third number.\n\n    Returns:\n        float: The median of the three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]\n", "from typing import List\n## main.py\n\ndef median_numbers(a: float, b: float, c: float) -> float:\n    \"\"\"\n    Calculate the median of three numbers.\n\n    Args:\n        a (float): The first number.\n        b (float): The second number.\n        c (float): The third number.\n\n    Returns:\n        float: The median number.\n    \"\"\"\n    # Sort the numbers\n    numbers = [a, b, c]\n    numbers.sort()\n    \n    # Return the median\n    return numbers[1]\n\n# Example usage:\n# median = median_numbers(25, 55, 65)\n# print(median)  # Output: 55.0\n", "from typing import List\n## main.py\n\ndef median_numbers(a: (int, float), b: (int, float), c: (int, float)) -> float:\n    \"\"\"\n    Calculate the median of three numbers.\n\n    Args:\n        a (int, float): The first number.\n        b (int, float): The second number.\n        c (int, float): The third number.\n\n    Returns:\n        float: The median of the three numbers.\n    \"\"\"\n    # Convert inputs to a list for easy sorting\n    numbers = [a, b, c]\n    \n    # Sort the list\n    numbers.sort()\n    \n    # Return the middle value\n    return numbers[1]\n\n# Example usage:\n# print(median_numbers(3, 1, 2))  # Output: 2\n# print(median_numbers(5.5, 3.2, 4.8))  # Output: 4.8\n", "from typing import List\n## main.py\n\ndef median_numbers(a: float, b: float, c: float) -> float:\n    \"\"\"\n    Calculate the median of three numbers.\n\n    Args:\n        a (float): The first number.\n        b (float): The second number.\n        c (float): The third number.\n\n    Returns:\n        float: The median of the three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]\n\n# Example usage:\n# print(median_numbers(25, 55, 65))  # Output: 55.0\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that calculates the median of three numbers. The median is the middle value when the numbers are sorted. This is a fundamental statistical operation that should be simple and efficient. The function should handle both integers and floating-point numbers.\nrequirement pool:\n- The function should correctly identify the median of three numbers\n- The function should handle both integers and floating-point numbers\n- The function should be optimized for readability and simplicity\n- The function should be compatible with various programming environments\n- The function should include basic error handling\nTo create a function that calculates the median of three numbers efficiently and accurately, we will use a simple and straightforward approach. The function will take three numeric inputs, sort them, and then return the middle value as the median. This approach ensures readability and simplicity, making it easy to understand and maintain.\n", "requirement analysis:\nThe requirement is to create a function that calculates the median of three numbers. The function should handle both integers and floating-point numbers. The solution should be simple and efficient, suitable for various programming environments.\nrequirement pool:\n- The function should correctly calculate the median of three numbers\n- The function should handle both integers and floating-point numbers\n- The function should be optimized for readability and simplicity\n- The function should be compatible with different programming environments\n- The function should be tested for edge cases\nTo create a function that calculates the median of three numbers efficiently and accurately, we will use Python's built-in capabilities. The function will be simple and easy to understand, making it suitable for various programming environments. We will ensure compatibility and handle both integers and floating-point numbers correctly.\n", "requirement analysis:\nThe requirement is to create a function that calculates the median of three numbers. The median is the middle value when the numbers are sorted. This is a fundamental mathematical operation that is commonly used in various applications. The function should be simple, efficient, and handle basic cases well. It should also be easy to understand and use.\nrequirement pool:\n- The main code should be simple and easy to understand.\n- The function should accurately calculate the median.\n- Implement error handling for unexpected inputs.\n- Optimize the function for performance.\n- Include comments to explain the code.\nWe will implement the function using Python, leveraging its built-in capabilities to handle basic operations efficiently. The function will take three numerical inputs and return their median. The approach will be straightforward to ensure clarity and ease of use.\n", "requirement analysis:\nThe requirement is to create a function that calculates the median of three numbers. The median is the middle value when the numbers are sorted. This is a fundamental mathematical operation that should be simple to implement and understand. The function should handle basic cases well and be extendable to more complex scenarios.\nrequirement pool:\n- Implement the function to calculate the median of three numbers\n- Ensure the function is efficient and handles edge cases\n- Add documentation and examples for user understanding\n- Optimize the function for performance\n- Consider adding support for floating-point numbers\nTo implement the function `median_numbers` that calculates the median of three numbers, we will use a simple and straightforward approach. The function will take three numeric inputs, sort them, and return the middle value. This approach ensures efficiency and ease of understanding. We will not use any external libraries for this specific task.\n", "requirement analysis:\nThe requirement is to create a function that calculates the median of three numbers. The function should handle basic use cases and be easy to understand and use. It should be compatible with standard Python environments and support both integers and floating-point numbers.\nrequirement pool:\n- The function should correctly calculate the median of three numbers\n- The function should handle both integers and floating-point numbers\n- The function should be simple and easy to understand\n- The function should be compatible with standard Python environments\n- The function should be optimized for performance\nTo create a function that calculates the median of three numbers efficiently and accurately, we will use Python's built-in capabilities. This approach ensures simplicity and compatibility with standard Python environments. The function will handle both integers and floating-point numbers, making it versatile for various use cases.\n", "requirement analysis:\nThe requirement is to create a function that calculates the median of three numbers. The function should handle both integers and floating-point numbers. The solution should be simple and efficient, suitable for various programming environments.\nrequirement pool:\n- The function should correctly calculate the median of three numbers\n- The function should handle both integers and floating-point numbers\n- The function should be optimized for readability and simplicity\n- The function should be compatible with different programming languages\n- The function should be tested for edge cases and performance\nTo create a function that calculates the median of three numbers efficiently and accurately, we will use Python's built-in capabilities. The function will be simple and easy to understand, making it suitable for various programming environments. We will ensure compatibility with different programming languages and test the function for edge cases and performance.\n", "requirement analysis:\nThe requirement is to create a function that calculates the median of three numbers. The function should handle both integers and floating-point numbers. The solution should be simple and efficient, suitable for beginners and experienced developers alike.\nrequirement pool:\n- The function should correctly calculate the median of three numbers.\n- The function should handle both integers and floating-point numbers.\n- The function should be easy to understand and implement.\n- The function should be optimized for performance.\n- The function should be well-documented with examples.\nTo create a function that calculates the median of three numbers efficiently and accurately, we will use Python's built-in sorting capabilities. This approach is simple, efficient, and leverages Python's standard library, making it easy to understand and use.\n", "requirement analysis:\nThe requirement is to create a function that calculates the median of three numbers. The function should be simple, efficient, and accurate. It should work correctly for any set of three numbers and be compatible with various programming environments. Performance is crucial as it will be used in different projects.\nrequirement pool:\n- The function should correctly calculate the median of three numbers\n- The function should be efficient and fast\n- The function should be compatible with different programming languages\n- The function should handle edge cases and negative numbers\n- The function should be easy to integrate into existing projects\nTo create a function that calculates the median of three numbers efficiently and accurately, we will use Python's built-in capabilities. The function will be simple and easy to integrate into existing projects. We will ensure compatibility with different programming environments and handle edge cases, including negative numbers.\n", "requirement analysis:\nThe requirement is to create a function that calculates the median of three numbers. The median is the middle value when the numbers are sorted. This is a fundamental statistical operation that is commonly used in various applications, including data analysis, finance, and everyday calculations. The function should be simple, efficient, and handle both integer and floating-point numbers.\nrequirement pool:\n- The main code should be concise and easy to understand.\n- The function should handle all three numbers regardless of their order.\n- The function should return a floating-point result.\n- The function should include basic error handling for non-numeric inputs.\n- The function should be optimized for performance.\nWe will implement the function using Python, leveraging its built-in capabilities to handle sorting and basic arithmetic operations. The function will be designed to accept three numeric inputs and return their median. The approach will ensure simplicity and efficiency, adhering to the requirement of handling both integers and floating-point numbers.\n", "requirement analysis:\nThe requirement is to create a function that calculates the median of three numbers. The function should handle both integers and floating-point numbers. The solution should be simple and efficient, suitable for various programming environments.\nrequirement pool:\n- Implement the function to calculate the median of three numbers\n- Ensure the function works correctly with both integers and floating-point numbers\n- Optimize the function for performance and readability\n- Test the function with various inputs to ensure accuracy\n- Document the function clearly for easy understanding\nTo implement the function `median_numbers` that calculates the median of three numbers, we will use Python's built-in sorting capabilities. This approach is simple, efficient, and leverages Python's standard library, ensuring compatibility across various environments. The function will sort the three numbers and then return the middle value, which is the median.\n"], "test": ["def check(median_numbers):\n\tassert median_numbers(25,55,65)==55.0", "def check(median_numbers):\n\tassert median_numbers(20,10,30)==20.0", "def check(median_numbers):\n\tassert median_numbers(15,45,75)==45.0", "def check(median_numbers):\n\tassert median_numbers(22, 54, 68) == 54", "def check(median_numbers):\n\tassert median_numbers(22, 57, 66) == 57", "def check(median_numbers):\n\tassert median_numbers(22, 54, 61) == 54", "def check(median_numbers):\n\tassert median_numbers(30, 53, 63) == 53", "def check(median_numbers):\n\tassert median_numbers(22, 55, 61) == 55", "def check(median_numbers):\n\tassert median_numbers(25, 60, 61) == 60", "def check(median_numbers):\n\tassert median_numbers(22, 56, 68) == 56", "def check(median_numbers):\n\tassert median_numbers(29, 53, 70) == 53", "def check(median_numbers):\n\tassert median_numbers(23, 53, 66) == 53", "def check(median_numbers):\n\tassert median_numbers(29, 58, 67) == 58", "def check(median_numbers):\n\tassert median_numbers(27, 52, 64) == 52", "def check(median_numbers):\n\tassert median_numbers(29, 60, 61) == 60", "def check(median_numbers):\n\tassert median_numbers(25, 57, 61) == 57", "def check(median_numbers):\n\tassert median_numbers(20, 50, 66) == 50", "def check(median_numbers):\n\tassert median_numbers(21, 51, 65) == 51", "def check(median_numbers):\n\tassert median_numbers(29, 51, 67) == 51", "def check(median_numbers):\n\tassert median_numbers(26, 55, 69) == 55", "def check(median_numbers):\n\tassert median_numbers(24, 53, 64) == 53", "def check(median_numbers):\n\tassert median_numbers(28, 55, 65) == 55", "def check(median_numbers):\n\tassert median_numbers(27, 57, 66) == 57", "def check(median_numbers):\n\tassert median_numbers(20, 58, 70) == 58", "def check(median_numbers):\n\tassert median_numbers(23, 56, 67) == 56", "def check(median_numbers):\n\tassert median_numbers(28, 55, 69) == 55", "def check(median_numbers):\n\tassert median_numbers(23, 58, 70) == 58", "def check(median_numbers):\n\tassert median_numbers(26, 54, 62) == 54", "def check(median_numbers):\n\tassert median_numbers(27, 51, 64) == 51", "def check(median_numbers):\n\tassert median_numbers(28, 50, 65) == 50", "def check(median_numbers):\n\tassert median_numbers(29, 55, 69) == 55", "def check(median_numbers):\n\tassert median_numbers(22, 57, 70) == 57", "def check(median_numbers):\n\tassert median_numbers(27, 52, 69) == 52", "def check(median_numbers):\n\tassert median_numbers(30, 58, 61) == 58", "def check(median_numbers):\n\tassert median_numbers(20, 58, 63) == 58", "def check(median_numbers):\n\tassert median_numbers(27, 51, 69) == 51", "def check(median_numbers):\n\tassert median_numbers(21, 12, 26) == 21", "def check(median_numbers):\n\tassert median_numbers(18, 6, 28) == 18", "def check(median_numbers):\n\tassert median_numbers(19, 7, 27) == 19", "def check(median_numbers):\n\tassert median_numbers(21, 14, 25) == 21", "def check(median_numbers):\n\tassert median_numbers(20, 7, 29) == 20", "def check(median_numbers):\n\tassert median_numbers(15, 7, 31) == 15", "def check(median_numbers):\n\tassert median_numbers(15, 8, 32) == 15", "def check(median_numbers):\n\tassert median_numbers(20, 6, 34) == 20", "def check(median_numbers):\n\tassert median_numbers(20, 7, 28) == 20", "def check(median_numbers):\n\tassert median_numbers(21, 8, 31) == 21", "def check(median_numbers):\n\tassert median_numbers(23, 6, 31) == 23", "def check(median_numbers):\n\tassert median_numbers(20, 10, 34) == 20", "def check(median_numbers):\n\tassert median_numbers(16, 14, 29) == 16", "def check(median_numbers):\n\tassert median_numbers(16, 7, 30) == 16", "def check(median_numbers):\n\tassert median_numbers(23, 9, 32) == 23", "def check(median_numbers):\n\tassert median_numbers(15, 7, 28) == 15", "def check(median_numbers):\n\tassert median_numbers(18, 5, 26) == 18", "def check(median_numbers):\n\tassert median_numbers(22, 8, 26) == 22", "def check(median_numbers):\n\tassert median_numbers(19, 6, 26) == 19", "def check(median_numbers):\n\tassert median_numbers(15, 11, 30) == 15", "def check(median_numbers):\n\tassert median_numbers(18, 5, 31) == 18", "def check(median_numbers):\n\tassert median_numbers(19, 6, 32) == 19", "def check(median_numbers):\n\tassert median_numbers(20, 5, 31) == 20", "def check(median_numbers):\n\tassert median_numbers(21, 13, 26) == 21", "def check(median_numbers):\n\tassert median_numbers(19, 5, 33) == 19", "def check(median_numbers):\n\tassert median_numbers(24, 8, 25) == 24", "def check(median_numbers):\n\tassert median_numbers(21, 15, 34) == 21", "def check(median_numbers):\n\tassert median_numbers(17, 14, 31) == 17", "def check(median_numbers):\n\tassert median_numbers(17, 8, 30) == 17", "def check(median_numbers):\n\tassert median_numbers(21, 13, 34) == 21", "def check(median_numbers):\n\tassert median_numbers(19, 5, 34) == 19", "def check(median_numbers):\n\tassert median_numbers(15, 8, 30) == 15", "def check(median_numbers):\n\tassert median_numbers(21, 12, 31) == 21", "def check(median_numbers):\n\tassert median_numbers(19, 40, 78) == 40", "def check(median_numbers):\n\tassert median_numbers(19, 50, 78) == 50", "def check(median_numbers):\n\tassert median_numbers(11, 44, 73) == 44", "def check(median_numbers):\n\tassert median_numbers(18, 42, 70) == 42", "def check(median_numbers):\n\tassert median_numbers(11, 48, 72) == 48", "def check(median_numbers):\n\tassert median_numbers(10, 48, 79) == 48", "def check(median_numbers):\n\tassert median_numbers(17, 48, 79) == 48", "def check(median_numbers):\n\tassert median_numbers(17, 46, 74) == 46", "def check(median_numbers):\n\tassert median_numbers(20, 49, 78) == 49", "def check(median_numbers):\n\tassert median_numbers(12, 40, 71) == 40", "def check(median_numbers):\n\tassert median_numbers(16, 40, 79) == 40", "def check(median_numbers):\n\tassert median_numbers(17, 40, 80) == 40", "def check(median_numbers):\n\tassert median_numbers(15, 50, 78) == 50", "def check(median_numbers):\n\tassert median_numbers(11, 41, 76) == 41", "def check(median_numbers):\n\tassert median_numbers(20, 47, 73) == 47", "def check(median_numbers):\n\tassert median_numbers(19, 50, 71) == 50", "def check(median_numbers):\n\tassert median_numbers(10, 42, 77) == 42", "def check(median_numbers):\n\tassert median_numbers(20, 44, 70) == 44", "def check(median_numbers):\n\tassert median_numbers(16, 41, 78) == 41", "def check(median_numbers):\n\tassert median_numbers(20, 49, 70) == 49", "def check(median_numbers):\n\tassert median_numbers(11, 50, 75) == 50", "def check(median_numbers):\n\tassert median_numbers(20, 42, 72) == 42", "def check(median_numbers):\n\tassert median_numbers(15, 48, 74) == 48", "def check(median_numbers):\n\tassert median_numbers(15, 49, 72) == 49", "def check(median_numbers):\n\tassert median_numbers(10, 42, 80) == 42", "def check(median_numbers):\n\tassert median_numbers(17, 43, 78) == 43", "def check(median_numbers):\n\tassert median_numbers(18, 44, 73) == 44", "def check(median_numbers):\n\tassert median_numbers(13, 50, 80) == 50", "def check(median_numbers):\n\tassert median_numbers(14, 40, 75) == 40", "def check(median_numbers):\n\tassert median_numbers(11, 48, 72) == 48", "def check(median_numbers):\n\tassert median_numbers(10, 42, 75) == 42", "def check(median_numbers):\n\tassert median_numbers(10, 42, 74) == 42", "def check(median_numbers):\n\tassert median_numbers(15, 41, 74) == 41"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef median_numbers(a: float, b: float, c: float) -> float:\n    \"\"\"\n    Calculate the median of three numbers.\n\n    Args:\n        a (float): The first number.\n        b (float): The second number.\n        c (float): The third number.\n\n    Returns:\n        float: The median of the three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]\n\n# Example usage:\n# print(median_numbers(25, 55, 65))  # Output: 55.0\n", "passed": true, "pass": true, "pass_num": 10, "round": 502, "mutate_method": "expand_one2two", "parent_index": 137}
