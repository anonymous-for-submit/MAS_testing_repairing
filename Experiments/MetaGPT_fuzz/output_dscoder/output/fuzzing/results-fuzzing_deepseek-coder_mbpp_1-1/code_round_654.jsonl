{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 753, "prompt": "Write a function to find minimum k records from tuple list. Refer to the following link for test cases: https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/. In this case, they provide a verbatim copy of test cases.", "code": "def min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) ", "test_imports": [], "test_list": ["assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]", "assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]", "assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]", "assert min_k([('RbIyTB', 7), ('afQBBtcAunI', 5), ('sSx', 7), ('iDVqlJvlL', 5)], 2) == [('afQBBtcAunI', 5), ('iDVqlJvlL', 5)]", "assert min_k([('KcGgI', 5), ('JjlvhisJZ', 2), ('ErxKt', 5), ('wjo', 4)], 1) == [('JjlvhisJZ', 2)]", "assert min_k([('TVNUTs', 14), ('yqMSpMJ', 9), ('zbqyGgf', 4), ('HGoxBS', 5)], 3) == [('zbqyGgf', 4), ('HGoxBS', 5), ('yqMSpMJ', 9)]", "assert min_k([('NKtmwkpgknNf', 10), ('AlKioD', 7), ('QjX', 2), ('SnwkbmaSGr', 3)], 2) == [('QjX', 2), ('SnwkbmaSGr', 3)]", "assert min_k([('pqQpNnTLpxK', 8), ('ziLwmxgT', 5), ('InZG', 6), ('iiNEYeeodmw', 13)], 1) == [('ziLwmxgT', 5)]", "assert min_k([('IkzAHAMMOsfQ', 7), ('CqqPoohYqAh', 7), ('SSDKwj', 4), ('wTEjEnmwPt', 8)], 6) == [('SSDKwj', 4), ('IkzAHAMMOsfQ', 7), ('CqqPoohYqAh', 7), ('wTEjEnmwPt', 8)]", "assert min_k([('svX', 8), ('iXOhkxlmttI', 3), ('RvOHtVeo', 3), ('OlykPqR', 10)], 5) == [('iXOhkxlmttI', 3), ('RvOHtVeo', 3), ('svX', 8), ('OlykPqR', 10)]", "assert min_k([('ygsQuEh', 7), ('dyeGqrhXjGij', 3), ('WTLB', 4), ('lRyjP', 12)], 6) == [('dyeGqrhXjGij', 3), ('WTLB', 4), ('ygsQuEh', 7), ('lRyjP', 12)]", "assert min_k([('IsnE', 12), ('AcUSgTArhaQx', 3), ('gLtErwYkp', 6), ('dlVXb', 10)], 3) == [('AcUSgTArhaQx', 3), ('gLtErwYkp', 6), ('dlVXb', 10)]", "assert min_k([('nehvDW', 9), ('QzXTYtIAa', 8), ('VFotMmAvj', 7), ('uVLvNPaxOrRl', 9)], 5) == [('VFotMmAvj', 7), ('QzXTYtIAa', 8), ('nehvDW', 9), ('uVLvNPaxOrRl', 9)]", "assert min_k([('qFBiCHdKny', 14), ('zdkUbY', 2), ('UWzOAJrgp', 1), ('lNQySDW', 10)], 7) == [('UWzOAJrgp', 1), ('zdkUbY', 2), ('lNQySDW', 10), ('qFBiCHdKny', 14)]", "assert min_k([('oOys', 14), ('dBcwkDXwvUcE', 8), ('xolIbPUR', 7), ('pmIRmfG', 6)], 3) == [('pmIRmfG', 6), ('xolIbPUR', 7), ('dBcwkDXwvUcE', 8)]", "assert min_k([('QgPX', 9), ('bBFtMb', 1), ('iVbBoBJ', 7), ('KRmZS', 9)], 4) == [('bBFtMb', 1), ('iVbBoBJ', 7), ('QgPX', 9), ('KRmZS', 9)]", "assert min_k([('RczfioETzzbY', 6), ('gFMhCybPt', 9), ('FbrKWSA', 5), ('HIwjLIr', 9)], 2) == [('FbrKWSA', 5), ('RczfioETzzbY', 6)]", "assert min_k([('tcUYsVEH', 14), ('pWWoXjvR', 4), ('UNm', 3), ('JBEW', 12)], 3) == [('UNm', 3), ('pWWoXjvR', 4), ('JBEW', 12)]", "assert min_k([('Fsa', 5), ('gGq', 9), ('bhWLD', 6), ('odW', 6)], 3) == [('Fsa', 5), ('bhWLD', 6), ('odW', 6)]", "assert min_k([('dYHCMtDRkHty', 11), ('buyh', 3), ('spi', 2), ('ChJwbevL', 10)], 5) == [('spi', 2), ('buyh', 3), ('ChJwbevL', 10), ('dYHCMtDRkHty', 11)]", "assert min_k([('MJNEKLdb', 5), ('cjQT', 8), ('YDMTNet', 1), ('tuVnFFfvF', 7)], 6) == [('YDMTNet', 1), ('MJNEKLdb', 5), ('tuVnFFfvF', 7), ('cjQT', 8)]", "assert min_k([('YZDNO', 12), ('YNZLjietHF', 8), ('BKSdtocIv', 3), ('ePKMYjBiLz', 8)], 1) == [('BKSdtocIv', 3)]", "assert min_k([('hVzqFMajYwqc', 11), ('ThSWkINSzyez', 2), ('NEdbqt', 6), ('CaeeU', 13)], 3) == [('ThSWkINSzyez', 2), ('NEdbqt', 6), ('hVzqFMajYwqc', 11)]", "assert min_k([('WYtVvoTHMl', 14), ('zWVFHCezs', 2), ('dGjkHzwD', 3), ('rpOLnzicQ', 8)], 3) == [('zWVFHCezs', 2), ('dGjkHzwD', 3), ('rpOLnzicQ', 8)]", "assert min_k([('JNuW', 15), ('soeYGonagVZo', 2), ('AIWNGQzS', 2), ('xxSuHyUj', 13)], 1) == [('soeYGonagVZo', 2)]", "assert min_k([('vtGJfukspqJU', 7), ('QtxgZDGpEDdP', 3), ('aVTpwN', 6), ('OUJhGgyVG', 11)], 6) == [('QtxgZDGpEDdP', 3), ('aVTpwN', 6), ('vtGJfukspqJU', 7), ('OUJhGgyVG', 11)]", "assert min_k([('muvmfis', 8), ('PnXqocesMsd', 8), ('sBHQiw', 4), ('jkmzdo', 9)], 5) == [('sBHQiw', 4), ('muvmfis', 8), ('PnXqocesMsd', 8), ('jkmzdo', 9)]", "assert min_k([('SFpQQOTOhO', 11), ('fYJrPty', 8), ('KmbGyMmI', 6), ('wkyKNU', 6)], 6) == [('KmbGyMmI', 6), ('wkyKNU', 6), ('fYJrPty', 8), ('SFpQQOTOhO', 11)]", "assert min_k([('IfKMBMFN', 6), ('lBu', 5), ('SRThvT', 5), ('sDMTvvchDxh', 4)], 6) == [('sDMTvvchDxh', 4), ('lBu', 5), ('SRThvT', 5), ('IfKMBMFN', 6)]", "assert min_k([('xVBNkvA', 13), ('rGxpSEbPCSW', 5), ('TbWF', 5), ('QEp', 5)], 4) == [('rGxpSEbPCSW', 5), ('TbWF', 5), ('QEp', 5), ('xVBNkvA', 13)]", "assert min_k([('DzFKxmpXEM', 9), ('MSWIiEzdRHX', 1), ('PLaPL', 3), ('YvsZ', 12)], 6) == [('MSWIiEzdRHX', 1), ('PLaPL', 3), ('DzFKxmpXEM', 9), ('YvsZ', 12)]", "assert min_k([('xHxAujZSd', 10), ('etUP', 7), ('DDOWo', 6), ('zaiXZ', 12)], 4) == [('DDOWo', 6), ('etUP', 7), ('xHxAujZSd', 10), ('zaiXZ', 12)]", "assert min_k([('MoHGEullsph', 9), ('gqmdynAYfpRM', 1), ('icJKPsUTC', 2), ('prpwwf', 3)], 2) == [('gqmdynAYfpRM', 1), ('icJKPsUTC', 2)]", "assert min_k([('ByxvXLxTRbRE', 10), ('acV', 8), ('SQaHr', 7), ('dOahHjX', 11)], 2) == [('SQaHr', 7), ('acV', 8)]", "assert min_k([('BuUNwTGfHLQZ', 11), ('ZMAm', 6), ('rEq', 5), ('wgwZMWmW', 13)], 3) == [('rEq', 5), ('ZMAm', 6), ('BuUNwTGfHLQZ', 11)]", "assert min_k([('XQttCC', 9), ('qtPIpTLejD', 3), ('fIxarTVy', 1), ('sRBAQixwSO', 3)], 5) == [('fIxarTVy', 1), ('qtPIpTLejD', 3), ('sRBAQixwSO', 3), ('XQttCC', 9)]", "assert min_k([('Dphr', 15), ('oHCRljs', 4), ('UMOUgPc', 7), ('HQZjyU', 13)], 6) == [('oHCRljs', 4), ('UMOUgPc', 7), ('HQZjyU', 13), ('Dphr', 15)]", "assert min_k([('ymMuqZz', 9), ('rQW', 6), ('lNhWCd', 7), ('IxQarKChz', 5)], 7) == [('IxQarKChz', 5), ('rQW', 6), ('lNhWCd', 7), ('ymMuqZz', 9)]", "assert min_k([('xkbLVVMlwk', 9), ('AsrmM', 4), ('QGxqU', 7), ('VtKvtV', 10)], 3) == [('AsrmM', 4), ('QGxqU', 7), ('xkbLVVMlwk', 9)]", "assert min_k([('MeFLPRXsHM', 12), ('DLuNA', 8), ('pJikZH', 5), ('FDDpvzH', 7)], 1) == [('pJikZH', 5)]", "assert min_k([('gTjJL', 16), ('PqLdY', 6), ('CQwfkMF', 4), ('kYE', 10)], 1) == [('CQwfkMF', 4)]", "assert min_k([('nstngIsTcAl', 13), ('kYSMyc', 8), ('Wlvv', 5), ('eQw', 6)], 1) == [('Wlvv', 5)]", "assert min_k([('snNMLou', 10), ('Amb', 4), ('ICyJZkk', 4), ('kmOydH', 12)], 4) == [('Amb', 4), ('ICyJZkk', 4), ('snNMLou', 10), ('kmOydH', 12)]", "assert min_k([('jCwhTQuZ', 11), ('PsAJSpgy', 3), ('sbJ', 6), ('xSvrVSZud', 5)], 4) == [('PsAJSpgy', 3), ('xSvrVSZud', 5), ('sbJ', 6), ('jCwhTQuZ', 11)]", "assert min_k([('jMEsrMrNJ', 15), ('hjYoN', 4), ('vbz', 2), ('vDHye', 10)], 8) == [('vbz', 2), ('hjYoN', 4), ('vDHye', 10), ('jMEsrMrNJ', 15)]", "assert min_k([('hYRvNXUkYQO', 9), ('oGgUKWZ', 6), ('VnV', 8), ('UtP', 4)], 7) == [('UtP', 4), ('oGgUKWZ', 6), ('VnV', 8), ('hYRvNXUkYQO', 9)]", "assert min_k([('FOrZFvCx', 8), ('fhMRPiBcz', 2), ('NjSOE', 5), ('Pvg', 4)], 2) == [('fhMRPiBcz', 2), ('Pvg', 4)]", "assert min_k([('BBZFlnlkphS', 16), ('hhYEsI', 9), ('GmaklmF', 4), ('TMDqcIBeY', 9)], 3) == [('GmaklmF', 4), ('hhYEsI', 9), ('TMDqcIBeY', 9)]", "assert min_k([('pRiohidCRYO', 13), ('ZjuWqekk', 4), ('PRkw', 6), ('xlKL', 6)], 6) == [('ZjuWqekk', 4), ('PRkw', 6), ('xlKL', 6), ('pRiohidCRYO', 13)]", "assert min_k([('eUcwKy', 6), ('Ryaytyltk', 1), ('KyXjUDZUm', 3), ('ORY', 7)], 8) == [('Ryaytyltk', 1), ('KyXjUDZUm', 3), ('eUcwKy', 6), ('ORY', 7)]", "assert min_k([('PlAnkLNnsoSi', 10), ('haCNyh', 5), ('gqNb', 3), ('tFyaCPM', 11)], 1) == [('gqNb', 3)]", "assert min_k([('onvhLK', 15), ('uEfxHvNdu', 3), ('SgKHESvlL', 8), ('WdOZZg', 14)], 2) == [('uEfxHvNdu', 3), ('SgKHESvlL', 8)]", "assert min_k([('mvDkOjaGOLRU', 10), ('xQxkk', 4), ('kEsmqspK', 2), ('IwL', 14)], 8) == [('kEsmqspK', 2), ('xQxkk', 4), ('mvDkOjaGOLRU', 10), ('IwL', 14)]", "assert min_k([('aNsRtAvWi', 10), ('KijUAFfs', 2), ('fbVADwaw', 3), ('uxyole', 5)], 1) == [('KijUAFfs', 2)]", "assert min_k([('deKA', 13), ('LwXJ', 10), ('EPUqJeIe', 3), ('pwRvJBGQI', 7)], 1) == [('EPUqJeIe', 3)]", "assert min_k([('YDoZjbKcaTb', 11), ('DVUZUUzX', 10), ('nAbmL', 4), ('CgIdCuG', 13)], 4) == [('nAbmL', 4), ('DVUZUUzX', 10), ('YDoZjbKcaTb', 11), ('CgIdCuG', 13)]", "assert min_k([('DFHuDLgMA', 8), ('ckZxjZj', 8), ('iUVJI', 4), ('WzfckBi', 4)], 5) == [('iUVJI', 4), ('WzfckBi', 4), ('DFHuDLgMA', 8), ('ckZxjZj', 8)]", "assert min_k([('FPKvJVDieb', 16), ('Mvjunj', 4), ('IxvnGItc', 5), ('XvOhUyF', 14)], 5) == [('Mvjunj', 4), ('IxvnGItc', 5), ('XvOhUyF', 14), ('FPKvJVDieb', 16)]", "assert min_k([('LRkskfEHkQsm', 13), ('IdOglFJ', 8), ('aTanw', 4), ('JZDpuV', 11)], 2) == [('aTanw', 4), ('IdOglFJ', 8)]", "assert min_k([('EZMYPvC', 9), ('LgZJjd', 2), ('pLtomnHm', 3), ('neoHc', 13)], 8) == [('LgZJjd', 2), ('pLtomnHm', 3), ('EZMYPvC', 9), ('neoHc', 13)]", "assert min_k([('RTBtkLxOYry', 13), ('cgvRofaUy', 10), ('kfgnx', 1), ('MeWtsRxY', 7)], 6) == [('kfgnx', 1), ('MeWtsRxY', 7), ('cgvRofaUy', 10), ('RTBtkLxOYry', 13)]", "assert min_k([('FLw', 12), ('eoRlkcfs', 5), ('sjcyddya', 7), ('bVVcsx', 12)], 8) == [('eoRlkcfs', 5), ('sjcyddya', 7), ('FLw', 12), ('bVVcsx', 12)]", "assert min_k([('TIE', 10), ('klCkQ', 8), ('oBui', 1), ('XQqvcC', 5)], 4) == [('oBui', 1), ('XQqvcC', 5), ('klCkQ', 8), ('TIE', 10)]", "assert min_k([('dUMsgf', 16), ('DkNR', 8), ('JFUZLiD', 7), ('pae', 12)], 1) == [('JFUZLiD', 7)]", "assert min_k([('qbWYTeVudGi', 16), ('PNag', 6), ('GZHXan', 5), ('ZEBACkSYj', 7)], 6) == [('GZHXan', 5), ('PNag', 6), ('ZEBACkSYj', 7), ('qbWYTeVudGi', 16)]", "assert min_k([('kTVGCiC', 13), ('oEdDsrFT', 8), ('JclnO', 8), ('euiGGYnkN', 6)], 5) == [('euiGGYnkN', 6), ('oEdDsrFT', 8), ('JclnO', 8), ('kTVGCiC', 13)]", "assert min_k([('YRGOBlbz', 16), ('htljPrA', 7), ('BRZTr', 1), ('dqH', 10)], 2) == [('BRZTr', 1), ('htljPrA', 7)]", "assert min_k([('xHGVKuyvOo', 6), ('dOYEFx', 6), ('ceaqNv', 8), ('WZeStYTy', 12)], 6) == [('xHGVKuyvOo', 6), ('dOYEFx', 6), ('ceaqNv', 8), ('WZeStYTy', 12)]", "assert min_k([('EZqliKkx', 14), ('OXDBDmhsd', 6), ('zUdMda', 4), ('TEiFXixK', 7)], 4) == [('zUdMda', 4), ('OXDBDmhsd', 6), ('TEiFXixK', 7), ('EZqliKkx', 14)]", "assert min_k([('odhrxltby', 10), ('AoGYrBS', 10), ('cKeJrZsnbfY', 5), ('GNNWGC', 21)], 4) == [('cKeJrZsnbfY', 5), ('odhrxltby', 10), ('AoGYrBS', 10), ('GNNWGC', 21)]", "assert min_k([('vwkns', 14), ('hfDyEOO', 11), ('yhLR', 6), ('UERL', 11)], 4) == [('yhLR', 6), ('hfDyEOO', 11), ('UERL', 11), ('vwkns', 14)]", "assert min_k([('zymqmuppxx', 13), ('uhrI', 13), ('svBFir', 10), ('SKYWI', 12)], 1) == [('svBFir', 10)]", "assert min_k([('xqrucmh', 11), ('MLLBJr', 10), ('YvtZJs', 11), ('ZZMS', 19)], 6) == [('MLLBJr', 10), ('xqrucmh', 11), ('YvtZJs', 11), ('ZZMS', 19)]", "assert min_k([('glytxkmu', 16), ('iODozF', 16), ('lyJCnLZGCP', 10), ('HUK', 11)], 2) == [('lyJCnLZGCP', 10), ('HUK', 11)]", "assert min_k([('nkisdxfimcx', 18), ('HPflV', 10), ('TyoxvP', 9), ('WUZFLH', 13)], 4) == [('TyoxvP', 9), ('HPflV', 10), ('WUZFLH', 13), ('nkisdxfimcx', 18)]", "assert min_k([('fubekvw', 13), ('tbPycb', 8), ('faYmycaZBsF', 4), ('DPWNWYPNN', 12)], 4) == [('faYmycaZBsF', 4), ('tbPycb', 8), ('DPWNWYPNN', 12), ('fubekvw', 13)]", "assert min_k([('kquzreiygdbk', 18), ('azWmeb', 11), ('rpYuVjfjYp', 10), ('DRHOQLCF', 11)], 4) == [('rpYuVjfjYp', 10), ('azWmeb', 11), ('DRHOQLCF', 11), ('kquzreiygdbk', 18)]", "assert min_k([('nzosjzuxfba', 14), ('gVr', 6), ('uksjLnl', 5), ('WVMCXP', 11)], 6) == [('uksjLnl', 5), ('gVr', 6), ('WVMCXP', 11), ('nzosjzuxfba', 14)]", "assert min_k([('hdqevwjzl', 16), ('Jwd', 14), ('qWMmyjTmsbdK', 6), ('TNQQO', 11)], 2) == [('qWMmyjTmsbdK', 6), ('TNQQO', 11)]", "assert min_k([('wapmbbmyvpp', 19), ('TGJUC', 6), ('GMNmhQsYBdP', 13), ('FCFFFW', 20)], 6) == [('TGJUC', 6), ('GMNmhQsYBdP', 13), ('wapmbbmyvpp', 19), ('FCFFFW', 20)]", "assert min_k([('zgdn', 19), ('rny', 7), ('MlTn', 10), ('XQDIPS', 15)], 6) == [('rny', 7), ('MlTn', 10), ('XQDIPS', 15), ('zgdn', 19)]", "assert min_k([('egyrl', 11), ('zdWCQ', 7), ('HssvOFnAysLM', 14), ('QOCNJJQP', 21)], 2) == [('zdWCQ', 7), ('egyrl', 11)]", "assert min_k([('rwrlrdjdoot', 11), ('cxjxTP', 13), ('YeuusaVuZoq', 12), ('UMPICFJZG', 12)], 1) == [('rwrlrdjdoot', 11)]", "assert min_k([('txbpgsu', 11), ('MmIEZQr', 12), ('Dis', 5), ('UBTZN', 18)], 1) == [('Dis', 5)]", "assert min_k([('sitvv', 18), ('HtgKGZhLA', 6), ('Hib', 14), ('WNOMAXBD', 20)], 1) == [('HtgKGZhLA', 6)]", "assert min_k([('jgfyde', 12), ('uyyBnilv', 7), ('vYPX', 9), ('IZQ', 14)], 4) == [('uyyBnilv', 7), ('vYPX', 9), ('jgfyde', 12), ('IZQ', 14)]", "assert min_k([('xmuhfbo', 9), ('WiCTHux', 12), ('CnNBfBV', 11), ('JGASH', 21)], 5) == [('xmuhfbo', 9), ('CnNBfBV', 11), ('WiCTHux', 12), ('JGASH', 21)]", "assert min_k([('cofudvl', 16), ('YRgE', 12), ('JKcVXQ', 8), ('ZRYUIS', 19)], 5) == [('JKcVXQ', 8), ('YRgE', 12), ('cofudvl', 16), ('ZRYUIS', 19)]", "assert min_k([('frximti', 10), ('UNu', 9), ('AxbbkOcw', 14), ('EZF', 14)], 1) == [('UNu', 9)]", "assert min_k([('tumylzayrb', 19), ('pgezGqqD', 12), ('ewO', 6), ('PAV', 16)], 2) == [('ewO', 6), ('pgezGqqD', 12)]", "assert min_k([('lortjrlpjien', 17), ('SUBq', 7), ('BEKMTUu', 12), ('YCROAV', 16)], 3) == [('SUBq', 7), ('BEKMTUu', 12), ('YCROAV', 16)]", "assert min_k([('bicocwqdjbg', 15), ('aqA', 15), ('opbrvnd', 14), ('QVG', 19)], 6) == [('opbrvnd', 14), ('bicocwqdjbg', 15), ('aqA', 15), ('QVG', 19)]", "assert min_k([('urpmr', 17), ('prxp', 12), ('ctEptqEhMkx', 12), ('VFYR', 17)], 3) == [('prxp', 12), ('ctEptqEhMkx', 12), ('urpmr', 17)]", "assert min_k([('ojxsf', 13), ('WLapvuCZc', 9), ('lVmxuxl', 10), ('XBWZMSCM', 12)], 5) == [('WLapvuCZc', 9), ('lVmxuxl', 10), ('XBWZMSCM', 12), ('ojxsf', 13)]", "assert min_k([('vqei', 10), ('oFQfUfZ', 10), ('vWFdWMIQIVja', 4), ('JXDJUML', 11)], 5) == [('vWFdWMIQIVja', 4), ('vqei', 10), ('oFQfUfZ', 10), ('JXDJUML', 11)]", "assert min_k([('zmbmucyawl', 19), ('oBSLsl', 8), ('dMC', 5), ('PFJDVNS', 14)], 1) == [('dMC', 5)]", "assert min_k([('xjmtpubqleic', 13), ('IfLch', 10), ('biO', 11), ('UFCUNSM', 17)], 6) == [('IfLch', 10), ('biO', 11), ('xjmtpubqleic', 13), ('UFCUNSM', 17)]", "assert min_k([('qhalrxbivb', 9), ('AAOJ', 9), ('KNE', 11), ('RJDYORKD', 16)], 5) == [('qhalrxbivb', 9), ('AAOJ', 9), ('KNE', 11), ('RJDYORKD', 16)]", "assert min_k([('giddosqxrih', 16), ('DYmY', 12), ('ryfdHNqYfVNH', 10), ('YSPAG', 20)], 4) == [('ryfdHNqYfVNH', 10), ('DYmY', 12), ('giddosqxrih', 16), ('YSPAG', 20)]", "assert min_k([('mue', 14), ('rdcJG', 11), ('SEsTqJfwEbPp', 7), ('JRXGHL', 15)], 3) == [('SEsTqJfwEbPp', 7), ('rdcJG', 11), ('mue', 14)]", "assert min_k([('iruqm', 13), ('yLZmPXRPF', 8), ('ZeeP', 7), ('MHTJOGU', 21)], 5) == [('ZeeP', 7), ('yLZmPXRPF', 8), ('iruqm', 13), ('MHTJOGU', 21)]", "assert min_k([('vsuy', 15), ('Jbe', 10), ('dZzaolVaAa', 6), ('VORSC', 18)], 3) == [('dZzaolVaAa', 6), ('Jbe', 10), ('vsuy', 15)]"], "entry_point": "min_k", "repair_prompt": ["Write a function min_k to find minimum k records from tuple list. Refer to the following link for test cases: https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/. In this case, they provide a verbatim copy of test cases.\nmin_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n"], "completions": ["from typing import List\nfrom typing import List, Tuple, Any\n\ndef min_k(records: List[Tuple[Any, int]], k: int) -> List[Tuple[Any, int]]:\n    \"\"\"\n    Finds the minimum k records from a list of tuples based on the second element of each tuple.\n    \n    Args:\n        records (List[Tuple[Any, int]]): A list of tuples where the first element is any type and the second is an integer.\n        k (int): The number of minimum records to return.\n    \n    Returns:\n        List[Tuple[Any, int]]: A list of the minimum k records sorted by their second element.\n    \"\"\"\n    # Sort the records by the second element (score) in ascending order\n    sorted_records = sorted(records, key=lambda record: record[1])\n    \n    # Return the first k records from the sorted list\n    return sorted_records[:k]\n", "from typing import List\nfrom typing import List, Tuple, Any\n\ndef min_k(records: List[Tuple[Any, int]], k: int) -> List[Tuple[Any, int]]:\n    \"\"\"\n    Returns the minimum k records based on the second element of each tuple.\n    \n    Args:\n        records (List[Tuple[Any, int]]): A list of tuples where each tuple contains two elements.\n        k (int): The number of minimum records to return.\n        \n    Returns:\n        List[Tuple[Any, int]]: A list of the minimum k records based on the second element.\n    \"\"\"\n    # Sort the records by the second element of each tuple\n    sorted_records = sorted(records, key=lambda x: x[1])\n    \n    # Slice the sorted list to get the first k elements\n    min_k_records = sorted_records[:k]\n    \n    return min_k_records\n", "from typing import List\n## main.py\n\ndef min_k(records: list[tuple[str, int]], k: int) -> list[tuple[str, int]]:\n    # Sort the records by the score in descending order\n    sorted_records = sorted(records, key=lambda record: record[1], reverse=True)\n    \n    # Extract the first k records from the sorted list\n    min_k_records = sorted_records[:k]\n    \n    return min_k_records\n", "from typing import List\n## main.py\n\ndef min_k(records: list[tuple[str, int]], k: int) -> list[tuple[str, int]]:\n    \"\"\"\n    Extracts the minimum k records from a list of tuples based on the integer value.\n\n    Args:\n        records (list[tuple[str, int]]): A list of tuples where each tuple contains a string and an integer.\n        k (int): The number of minimum records to extract.\n\n    Returns:\n        list[tuple[str, int]]: A list of the minimum k records based on the integer value.\n    \"\"\"\n    if k <= 0:\n        return []\n\n    # Sort the records based on the integer value\n    sorted_records = sorted(records, key=lambda x: x[1])\n\n    # Slice the first k elements from the sorted list\n    return sorted_records[:k]\n", "from typing import List\nfrom typing import List, Tuple, Any\nimport heapq\n\ndef min_k(records: List[Tuple[Any, int]], k: int) -> List[Tuple[Any, int]]:\n    \"\"\"\n    This function takes a list of tuples and an integer k, and returns the first k smallest elements based on the second element of each tuple.\n    \n    Args:\n        records (List[Tuple[Any, int]]): A list of tuples where each tuple contains two elements. The first element is arbitrary, and the second element is an integer.\n        k (int): The number of smallest elements to return.\n    \n    Returns:\n        List[Tuple[Any, int]]: A list of the first k smallest elements based on the second element of each tuple.\n    \"\"\"\n    if k == 0:\n        return []\n    \n    # Use heapq to find the k smallest elements\n    heapq.heapify(records)\n    return heapq.nsmallest(k, records)\n\n# Example usage:\n# print(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2))\n# Output: [('Akash', 2), ('Akshat', 4)]\n", "from typing import List\nfrom typing import List, Tuple, Any\n\ndef min_k(records: List[Tuple[Any, int]], k: int) -> List[Tuple[Any, int]]:\n    \"\"\"\n    Returns the minimum k records based on the second element of each tuple.\n    \n    Args:\n        records (List[Tuple[Any, int]]): List of tuples where each tuple contains two elements.\n        k (int): Number of minimum records to return.\n        \n    Returns:\n        List[Tuple[Any, int]]: List of the minimum k tuples based on the second element.\n    \"\"\"\n    # Sort the records by the second element of each tuple\n    sorted_records = sorted(records, key=lambda x: x[1])\n    \n    # Slice the sorted list to get the first k elements\n    min_k_records = sorted_records[:k]\n    \n    return min_k_records\n", "from typing import List\n## main.py\n\ndef min_k(tuples: list[tuple[str, int]], k: int) -> list[tuple[str, int]]:\n    \"\"\"\n    Finds the minimum k records from a list of tuples based on the second element of each tuple.\n\n    Args:\n        tuples (list[tuple[str, int]]): A list of tuples where each tuple contains a string and an integer.\n        k (int): The number of minimum tuples to return.\n\n    Returns:\n        list[tuple[str, int]]: A list of the minimum k tuples based on the second element.\n    \"\"\"\n    # Sort the list of tuples based on the second element\n    sorted_tuples = sorted(tuples, key=lambda x: x[1])\n    \n    # Slice the sorted list to get the first k elements\n    min_k_tuples = sorted_tuples[:k]\n    \n    return min_k_tuples\n", "from typing import List\nfrom typing import List, Tuple\n\ndef min_k(records: List[Tuple[str, int]], k: int) -> List[Tuple[str, int]]:\n    \"\"\"\n    Returns the minimum k records from a list of tuples based on the second element (score).\n    \n    Args:\n        records (List[Tuple[str, int]]): A list of tuples where each tuple contains a string and an integer.\n        k (int): The number of records to return.\n        \n    Returns:\n        List[Tuple[str, int]]: A list of the minimum k records sorted by the second element (score).\n    \"\"\"\n    # Sort the records by the second element (score)\n    sorted_records = sorted(records, key=lambda x: x[1])\n    \n    # Return the first k records from the sorted list\n    return sorted_records[:k]\n", "from typing import List\n## main.py\n\ndef min_k(records: list[tuple[str, int]], k: int) -> list[tuple[str, int]]:\n    \"\"\"\n    This function takes a list of tuples, where each tuple contains a string and an integer,\n    and returns the first k smallest elements based on the integer value.\n    \n    Args:\n        records (list[tuple[str, int]]): A list of tuples where each tuple contains a string and an integer.\n        k (int): The number of smallest elements to return.\n    \n    Returns:\n        list[tuple[str, int]]: A list of the k smallest tuples based on the integer value.\n    \"\"\"\n    # Sort the records based on the second element of each tuple\n    sorted_records = sorted(records, key=lambda x: x[1])\n    \n    # Slice the first k elements from the sorted list\n    return sorted_records[:k]\n", "from typing import List\n## main.py\n\ndef min_k(records: list[tuple[str, int]], k: int) -> list[tuple[str, int]]:\n    \"\"\"\n    Finds the minimum k records from a list of tuples based on the score.\n\n    Args:\n        records (list[tuple[str, int]]): List of tuples where each tuple contains a name (str) and a score (int).\n        k (int): The number of minimum records to return.\n\n    Returns:\n        list[tuple[str, int]]: List of tuples containing the names and scores of the minimum k records.\n    \"\"\"\n    if k <= 0:\n        raise ValueError(\"k must be a positive integer\")\n    \n    # Sort the records by score in ascending order\n    sorted_records = sorted(records, key=lambda x: x[1])\n    \n    # Return the first k records\n    return sorted_records[:k]\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that can find the minimum k records from a list of tuples. The function should be efficient and handle various data sizes. The solution should be clear and easy to understand. The function should be compatible with Python's standard library and should not rely on external libraries unless necessary.\nrequirement pool:\n- The main code should be efficient in finding the minimum k records.\n- The function should handle different data sizes and types.\n- The function should be easy to understand and implement.\n- The function should be compatible with Python's standard library.\n- The function should be tested with various edge cases.\nTo create a function that efficiently finds the minimum k records from a list of tuples, we will utilize Python's built-in sorted function for its simplicity and performance. This approach ensures that the function is both clear and easy to understand, aligning with the goal of user-friendliness. We will sort the list based on the tuple's second element (the score) and then slice the first k elements from the sorted list. This method is efficient and leverages Python's standard library, fulfilling the requirement to be compatible with Python's standard library.\n", "requirement analysis:\nThe requirement is to create a function that extracts the minimum k records from a list of tuples. The function should be efficient and handle various data sizes. The solution should be clear and easy to understand, ensuring it can be easily integrated into larger projects.\nrequirement pool:\n- Implement the function to find the minimum k records efficiently.\n- Ensure the function can handle different data sizes and types.\n- Optimize the function for performance and readability.\n- Include comprehensive testing to verify the function's correctness.\n- Document the function and provide examples of usage.\nTo implement the function `min_k` efficiently, we will utilize Python's built-in sorted function combined with slicing. This approach is chosen for its simplicity and efficiency in handling small to medium-sized datasets. For larger datasets or real-time processing, we might consider using the heapq module for better performance. The function will take a list of tuples and an integer k as input and return the minimum k records based on the tuple's second element.\n", "requirement analysis:\nThe requirement is to create a function that can find the minimum k records from a list of tuples. The function should be efficient and handle various dataset sizes. The solution should be clear and easy to understand, suitable for both beginners and experienced developers.\nrequirement pool:\n- Implement the function using Python's built-in sorted() function for simplicity and efficiency.\n- Ensure the function can handle large datasets efficiently using optimized algorithms.\n- Provide clear documentation and examples to help users understand and use the function effectively.\n- Test the function with various edge cases to ensure robustness.\n- Optimize the function for performance to handle large datasets without significant slowdowns.\nTo implement the function efficiently, we will use Python's built-in sorted() function combined with slicing. This approach is simple and leverages Python's built-in capabilities to handle sorting and data extraction efficiently. We will ensure that the function can handle large datasets by optimizing the sorting process and minimizing unnecessary operations.\n", "requirement analysis:\nThe requirement is to create a function that extracts the minimum k records from a list of tuples. This function should be efficient and easy to use. The function should handle basic cases and be extendable for more complex scenarios. Clarity and simplicity are key to ensure the function is easily understandable and maintainable.\nrequirement pool:\n- The main code should be clear and concise\n- The function should handle edge cases effectively\n- Optimize for performance\n- Ensure the function is extendable for future needs\n- Include detailed documentation and examples\nTo create a function that extracts the minimum k records from a list of tuples, we will use Python's built-in sorted function for simplicity and efficiency. This approach leverages Python's ability to handle lists and tuples directly, ensuring the function is both clear and concise. We will ensure the function handles edge cases effectively and is extendable for future needs.\n", "requirement analysis:\nThe requirement is to create a function that can find the minimum k records from a list of tuples. The function should be efficient and handle various data sizes. The solution should be clear and easy to understand, suitable for both beginners and experienced developers.\nrequirement pool:\n- Implement the function using Python's built-in sorted function for simplicity and readability.\n- Optimize the function using the heapq module for better performance on large datasets.\n- Provide detailed documentation and examples to help users understand and use the function effectively.\n- Test the function with various edge cases to ensure robustness.\n- Ensure the function is optimized for both time and space complexity.\nTo implement the function efficiently, we will utilize Python's built-in sorted function for its simplicity and readability. However, for handling large datasets, we will optimize the function using the heapq module, which is optimized for priority queue operations. This combination will ensure both clarity and performance.\n", "requirement analysis:\nThe requirement is to create a function that can find the minimum k records from a list of tuples. The function should be efficient and handle various data sizes. The solution should be clear and easy to understand, suitable for both beginners and experienced developers.\nrequirement pool:\n- Implement the function to find the minimum k records efficiently.\n- Ensure the function can handle different data sizes and types.\n- Provide clear documentation and examples for user guidance.\n- Optimize the function for performance and scalability.\n- Test the function with various edge cases to ensure robustness.\nTo implement the function `min_k` efficiently, we will utilize Python's built-in sorted function combined with slicing. This approach is efficient and leverages Python's strengths in handling list operations. The function will take a list of tuples and an integer k as input, then return the minimum k records based on the tuple's second element.\n", "requirement analysis:\nThe requirement is to create a function that extracts the minimum k records from a list of tuples. This involves sorting or using a selection method to find the smallest k elements. The function should be efficient and easy to understand. The test case provided is a good starting point to verify the correctness of the function.\nrequirement pool:\n- The main code should be clear and concise\n- The function should handle edge cases like k being larger than the list size\n- Implement the function using a method that is efficient\n- Ensure the function is optimized for performance\n- Include comments to explain the logic\nTo create a function that finds the minimum k records from a list of tuples, we will use Python's built-in sorting capabilities. This approach is efficient and leverages Python's strengths in handling lists and tuples. We will ensure the function is optimized for performance and maintain clarity and simplicity in the code.\n", "requirement analysis:\nThe requirement is to create a function that can find the minimum k records from a list of tuples. The function should be efficient and handle various dataset sizes. The solution should be clear and easy to understand. The function should be compatible with Python's standard library and any additional modules.\nrequirement pool:\n- Implement the function using Python's built-in sorted function for simplicity and efficiency.\n- Ensure the function can handle large datasets efficiently using Python's heapq module.\n- Provide clear documentation and examples to help users understand and use the function effectively.\n- Optimize the function for performance to handle large datasets without significant slowdowns.\n- Test the function with various datasets to ensure it performs well in different scenarios.\nTo implement the function efficiently, we will utilize Python's built-in sorted function combined with slicing to find the minimum k records from a list of tuples. This approach is simple and leverages Python's standard library, ensuring both efficiency and clarity. The sorted function will be used to sort the tuples based on the second element (score), and then we will slice the first k elements from the sorted list.\n", "requirement analysis:\nThe requirement is to create a function that extracts the minimum k records from a list of tuples. The function should be efficient and handle various data sizes. The solution should be clear and easy to understand, suitable for both beginners and experienced developers.\nrequirement pool:\n- Implement the function to extract minimum k records efficiently.\n- Ensure the function can handle different data sizes and types.\n- Optimize the function for performance and readability.\n- Include error handling for unexpected input data.\n- Provide documentation and examples for easy integration.\nTo implement the function efficiently, we will utilize Python's built-in sorted function combined with slicing. This approach is efficient and leverages Python's strengths in handling lists and tuples. We will ensure that the function is optimized for performance and readability, making it suitable for both beginners and experienced developers.\n", "requirement analysis:\nThe requirement is to create a function that can find the minimum k records from a list of tuples. This is a common task in data processing and requires the function to be efficient and easy to use. The function should handle various data sizes and provide clear results.\nrequirement pool:\n- The main code should be optimized for performance.\n- The function should handle edge cases and errors gracefully.\n- The function should be documented and easy to understand.\n- The function should be tested for different data types and sizes.\n- The function should be integrated into a larger application if necessary.\nTo create a function that finds the minimum k records from a list of tuples efficiently, we will utilize Python's built-in sorted function combined with slicing. This approach is efficient and leverages Python's standard library capabilities, ensuring clarity and simplicity in the code. We will also ensure the function handles edge cases and errors gracefully to meet the performance and usability goals.\n"], "test": ["def check(min_k):\n\tassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]", "def check(min_k):\n\tassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]", "def check(min_k):\n\tassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]", "def check(min_k):\n\tassert min_k([('RbIyTB', 7), ('afQBBtcAunI', 5), ('sSx', 7), ('iDVqlJvlL', 5)], 2) == [('afQBBtcAunI', 5), ('iDVqlJvlL', 5)]", "def check(min_k):\n\tassert min_k([('KcGgI', 5), ('JjlvhisJZ', 2), ('ErxKt', 5), ('wjo', 4)], 1) == [('JjlvhisJZ', 2)]", "def check(min_k):\n\tassert min_k([('TVNUTs', 14), ('yqMSpMJ', 9), ('zbqyGgf', 4), ('HGoxBS', 5)], 3) == [('zbqyGgf', 4), ('HGoxBS', 5), ('yqMSpMJ', 9)]", "def check(min_k):\n\tassert min_k([('NKtmwkpgknNf', 10), ('AlKioD', 7), ('QjX', 2), ('SnwkbmaSGr', 3)], 2) == [('QjX', 2), ('SnwkbmaSGr', 3)]", "def check(min_k):\n\tassert min_k([('pqQpNnTLpxK', 8), ('ziLwmxgT', 5), ('InZG', 6), ('iiNEYeeodmw', 13)], 1) == [('ziLwmxgT', 5)]", "def check(min_k):\n\tassert min_k([('IkzAHAMMOsfQ', 7), ('CqqPoohYqAh', 7), ('SSDKwj', 4), ('wTEjEnmwPt', 8)], 6) == [('SSDKwj', 4), ('IkzAHAMMOsfQ', 7), ('CqqPoohYqAh', 7), ('wTEjEnmwPt', 8)]", "def check(min_k):\n\tassert min_k([('svX', 8), ('iXOhkxlmttI', 3), ('RvOHtVeo', 3), ('OlykPqR', 10)], 5) == [('iXOhkxlmttI', 3), ('RvOHtVeo', 3), ('svX', 8), ('OlykPqR', 10)]", "def check(min_k):\n\tassert min_k([('ygsQuEh', 7), ('dyeGqrhXjGij', 3), ('WTLB', 4), ('lRyjP', 12)], 6) == [('dyeGqrhXjGij', 3), ('WTLB', 4), ('ygsQuEh', 7), ('lRyjP', 12)]", "def check(min_k):\n\tassert min_k([('IsnE', 12), ('AcUSgTArhaQx', 3), ('gLtErwYkp', 6), ('dlVXb', 10)], 3) == [('AcUSgTArhaQx', 3), ('gLtErwYkp', 6), ('dlVXb', 10)]", "def check(min_k):\n\tassert min_k([('nehvDW', 9), ('QzXTYtIAa', 8), ('VFotMmAvj', 7), ('uVLvNPaxOrRl', 9)], 5) == [('VFotMmAvj', 7), ('QzXTYtIAa', 8), ('nehvDW', 9), ('uVLvNPaxOrRl', 9)]", "def check(min_k):\n\tassert min_k([('qFBiCHdKny', 14), ('zdkUbY', 2), ('UWzOAJrgp', 1), ('lNQySDW', 10)], 7) == [('UWzOAJrgp', 1), ('zdkUbY', 2), ('lNQySDW', 10), ('qFBiCHdKny', 14)]", "def check(min_k):\n\tassert min_k([('oOys', 14), ('dBcwkDXwvUcE', 8), ('xolIbPUR', 7), ('pmIRmfG', 6)], 3) == [('pmIRmfG', 6), ('xolIbPUR', 7), ('dBcwkDXwvUcE', 8)]", "def check(min_k):\n\tassert min_k([('QgPX', 9), ('bBFtMb', 1), ('iVbBoBJ', 7), ('KRmZS', 9)], 4) == [('bBFtMb', 1), ('iVbBoBJ', 7), ('QgPX', 9), ('KRmZS', 9)]", "def check(min_k):\n\tassert min_k([('RczfioETzzbY', 6), ('gFMhCybPt', 9), ('FbrKWSA', 5), ('HIwjLIr', 9)], 2) == [('FbrKWSA', 5), ('RczfioETzzbY', 6)]", "def check(min_k):\n\tassert min_k([('tcUYsVEH', 14), ('pWWoXjvR', 4), ('UNm', 3), ('JBEW', 12)], 3) == [('UNm', 3), ('pWWoXjvR', 4), ('JBEW', 12)]", "def check(min_k):\n\tassert min_k([('Fsa', 5), ('gGq', 9), ('bhWLD', 6), ('odW', 6)], 3) == [('Fsa', 5), ('bhWLD', 6), ('odW', 6)]", "def check(min_k):\n\tassert min_k([('dYHCMtDRkHty', 11), ('buyh', 3), ('spi', 2), ('ChJwbevL', 10)], 5) == [('spi', 2), ('buyh', 3), ('ChJwbevL', 10), ('dYHCMtDRkHty', 11)]", "def check(min_k):\n\tassert min_k([('MJNEKLdb', 5), ('cjQT', 8), ('YDMTNet', 1), ('tuVnFFfvF', 7)], 6) == [('YDMTNet', 1), ('MJNEKLdb', 5), ('tuVnFFfvF', 7), ('cjQT', 8)]", "def check(min_k):\n\tassert min_k([('YZDNO', 12), ('YNZLjietHF', 8), ('BKSdtocIv', 3), ('ePKMYjBiLz', 8)], 1) == [('BKSdtocIv', 3)]", "def check(min_k):\n\tassert min_k([('hVzqFMajYwqc', 11), ('ThSWkINSzyez', 2), ('NEdbqt', 6), ('CaeeU', 13)], 3) == [('ThSWkINSzyez', 2), ('NEdbqt', 6), ('hVzqFMajYwqc', 11)]", "def check(min_k):\n\tassert min_k([('WYtVvoTHMl', 14), ('zWVFHCezs', 2), ('dGjkHzwD', 3), ('rpOLnzicQ', 8)], 3) == [('zWVFHCezs', 2), ('dGjkHzwD', 3), ('rpOLnzicQ', 8)]", "def check(min_k):\n\tassert min_k([('JNuW', 15), ('soeYGonagVZo', 2), ('AIWNGQzS', 2), ('xxSuHyUj', 13)], 1) == [('soeYGonagVZo', 2)]", "def check(min_k):\n\tassert min_k([('vtGJfukspqJU', 7), ('QtxgZDGpEDdP', 3), ('aVTpwN', 6), ('OUJhGgyVG', 11)], 6) == [('QtxgZDGpEDdP', 3), ('aVTpwN', 6), ('vtGJfukspqJU', 7), ('OUJhGgyVG', 11)]", "def check(min_k):\n\tassert min_k([('muvmfis', 8), ('PnXqocesMsd', 8), ('sBHQiw', 4), ('jkmzdo', 9)], 5) == [('sBHQiw', 4), ('muvmfis', 8), ('PnXqocesMsd', 8), ('jkmzdo', 9)]", "def check(min_k):\n\tassert min_k([('SFpQQOTOhO', 11), ('fYJrPty', 8), ('KmbGyMmI', 6), ('wkyKNU', 6)], 6) == [('KmbGyMmI', 6), ('wkyKNU', 6), ('fYJrPty', 8), ('SFpQQOTOhO', 11)]", "def check(min_k):\n\tassert min_k([('IfKMBMFN', 6), ('lBu', 5), ('SRThvT', 5), ('sDMTvvchDxh', 4)], 6) == [('sDMTvvchDxh', 4), ('lBu', 5), ('SRThvT', 5), ('IfKMBMFN', 6)]", "def check(min_k):\n\tassert min_k([('xVBNkvA', 13), ('rGxpSEbPCSW', 5), ('TbWF', 5), ('QEp', 5)], 4) == [('rGxpSEbPCSW', 5), ('TbWF', 5), ('QEp', 5), ('xVBNkvA', 13)]", "def check(min_k):\n\tassert min_k([('DzFKxmpXEM', 9), ('MSWIiEzdRHX', 1), ('PLaPL', 3), ('YvsZ', 12)], 6) == [('MSWIiEzdRHX', 1), ('PLaPL', 3), ('DzFKxmpXEM', 9), ('YvsZ', 12)]", "def check(min_k):\n\tassert min_k([('xHxAujZSd', 10), ('etUP', 7), ('DDOWo', 6), ('zaiXZ', 12)], 4) == [('DDOWo', 6), ('etUP', 7), ('xHxAujZSd', 10), ('zaiXZ', 12)]", "def check(min_k):\n\tassert min_k([('MoHGEullsph', 9), ('gqmdynAYfpRM', 1), ('icJKPsUTC', 2), ('prpwwf', 3)], 2) == [('gqmdynAYfpRM', 1), ('icJKPsUTC', 2)]", "def check(min_k):\n\tassert min_k([('ByxvXLxTRbRE', 10), ('acV', 8), ('SQaHr', 7), ('dOahHjX', 11)], 2) == [('SQaHr', 7), ('acV', 8)]", "def check(min_k):\n\tassert min_k([('BuUNwTGfHLQZ', 11), ('ZMAm', 6), ('rEq', 5), ('wgwZMWmW', 13)], 3) == [('rEq', 5), ('ZMAm', 6), ('BuUNwTGfHLQZ', 11)]", "def check(min_k):\n\tassert min_k([('XQttCC', 9), ('qtPIpTLejD', 3), ('fIxarTVy', 1), ('sRBAQixwSO', 3)], 5) == [('fIxarTVy', 1), ('qtPIpTLejD', 3), ('sRBAQixwSO', 3), ('XQttCC', 9)]", "def check(min_k):\n\tassert min_k([('Dphr', 15), ('oHCRljs', 4), ('UMOUgPc', 7), ('HQZjyU', 13)], 6) == [('oHCRljs', 4), ('UMOUgPc', 7), ('HQZjyU', 13), ('Dphr', 15)]", "def check(min_k):\n\tassert min_k([('ymMuqZz', 9), ('rQW', 6), ('lNhWCd', 7), ('IxQarKChz', 5)], 7) == [('IxQarKChz', 5), ('rQW', 6), ('lNhWCd', 7), ('ymMuqZz', 9)]", "def check(min_k):\n\tassert min_k([('xkbLVVMlwk', 9), ('AsrmM', 4), ('QGxqU', 7), ('VtKvtV', 10)], 3) == [('AsrmM', 4), ('QGxqU', 7), ('xkbLVVMlwk', 9)]", "def check(min_k):\n\tassert min_k([('MeFLPRXsHM', 12), ('DLuNA', 8), ('pJikZH', 5), ('FDDpvzH', 7)], 1) == [('pJikZH', 5)]", "def check(min_k):\n\tassert min_k([('gTjJL', 16), ('PqLdY', 6), ('CQwfkMF', 4), ('kYE', 10)], 1) == [('CQwfkMF', 4)]", "def check(min_k):\n\tassert min_k([('nstngIsTcAl', 13), ('kYSMyc', 8), ('Wlvv', 5), ('eQw', 6)], 1) == [('Wlvv', 5)]", "def check(min_k):\n\tassert min_k([('snNMLou', 10), ('Amb', 4), ('ICyJZkk', 4), ('kmOydH', 12)], 4) == [('Amb', 4), ('ICyJZkk', 4), ('snNMLou', 10), ('kmOydH', 12)]", "def check(min_k):\n\tassert min_k([('jCwhTQuZ', 11), ('PsAJSpgy', 3), ('sbJ', 6), ('xSvrVSZud', 5)], 4) == [('PsAJSpgy', 3), ('xSvrVSZud', 5), ('sbJ', 6), ('jCwhTQuZ', 11)]", "def check(min_k):\n\tassert min_k([('jMEsrMrNJ', 15), ('hjYoN', 4), ('vbz', 2), ('vDHye', 10)], 8) == [('vbz', 2), ('hjYoN', 4), ('vDHye', 10), ('jMEsrMrNJ', 15)]", "def check(min_k):\n\tassert min_k([('hYRvNXUkYQO', 9), ('oGgUKWZ', 6), ('VnV', 8), ('UtP', 4)], 7) == [('UtP', 4), ('oGgUKWZ', 6), ('VnV', 8), ('hYRvNXUkYQO', 9)]", "def check(min_k):\n\tassert min_k([('FOrZFvCx', 8), ('fhMRPiBcz', 2), ('NjSOE', 5), ('Pvg', 4)], 2) == [('fhMRPiBcz', 2), ('Pvg', 4)]", "def check(min_k):\n\tassert min_k([('BBZFlnlkphS', 16), ('hhYEsI', 9), ('GmaklmF', 4), ('TMDqcIBeY', 9)], 3) == [('GmaklmF', 4), ('hhYEsI', 9), ('TMDqcIBeY', 9)]", "def check(min_k):\n\tassert min_k([('pRiohidCRYO', 13), ('ZjuWqekk', 4), ('PRkw', 6), ('xlKL', 6)], 6) == [('ZjuWqekk', 4), ('PRkw', 6), ('xlKL', 6), ('pRiohidCRYO', 13)]", "def check(min_k):\n\tassert min_k([('eUcwKy', 6), ('Ryaytyltk', 1), ('KyXjUDZUm', 3), ('ORY', 7)], 8) == [('Ryaytyltk', 1), ('KyXjUDZUm', 3), ('eUcwKy', 6), ('ORY', 7)]", "def check(min_k):\n\tassert min_k([('PlAnkLNnsoSi', 10), ('haCNyh', 5), ('gqNb', 3), ('tFyaCPM', 11)], 1) == [('gqNb', 3)]", "def check(min_k):\n\tassert min_k([('onvhLK', 15), ('uEfxHvNdu', 3), ('SgKHESvlL', 8), ('WdOZZg', 14)], 2) == [('uEfxHvNdu', 3), ('SgKHESvlL', 8)]", "def check(min_k):\n\tassert min_k([('mvDkOjaGOLRU', 10), ('xQxkk', 4), ('kEsmqspK', 2), ('IwL', 14)], 8) == [('kEsmqspK', 2), ('xQxkk', 4), ('mvDkOjaGOLRU', 10), ('IwL', 14)]", "def check(min_k):\n\tassert min_k([('aNsRtAvWi', 10), ('KijUAFfs', 2), ('fbVADwaw', 3), ('uxyole', 5)], 1) == [('KijUAFfs', 2)]", "def check(min_k):\n\tassert min_k([('deKA', 13), ('LwXJ', 10), ('EPUqJeIe', 3), ('pwRvJBGQI', 7)], 1) == [('EPUqJeIe', 3)]", "def check(min_k):\n\tassert min_k([('YDoZjbKcaTb', 11), ('DVUZUUzX', 10), ('nAbmL', 4), ('CgIdCuG', 13)], 4) == [('nAbmL', 4), ('DVUZUUzX', 10), ('YDoZjbKcaTb', 11), ('CgIdCuG', 13)]", "def check(min_k):\n\tassert min_k([('DFHuDLgMA', 8), ('ckZxjZj', 8), ('iUVJI', 4), ('WzfckBi', 4)], 5) == [('iUVJI', 4), ('WzfckBi', 4), ('DFHuDLgMA', 8), ('ckZxjZj', 8)]", "def check(min_k):\n\tassert min_k([('FPKvJVDieb', 16), ('Mvjunj', 4), ('IxvnGItc', 5), ('XvOhUyF', 14)], 5) == [('Mvjunj', 4), ('IxvnGItc', 5), ('XvOhUyF', 14), ('FPKvJVDieb', 16)]", "def check(min_k):\n\tassert min_k([('LRkskfEHkQsm', 13), ('IdOglFJ', 8), ('aTanw', 4), ('JZDpuV', 11)], 2) == [('aTanw', 4), ('IdOglFJ', 8)]", "def check(min_k):\n\tassert min_k([('EZMYPvC', 9), ('LgZJjd', 2), ('pLtomnHm', 3), ('neoHc', 13)], 8) == [('LgZJjd', 2), ('pLtomnHm', 3), ('EZMYPvC', 9), ('neoHc', 13)]", "def check(min_k):\n\tassert min_k([('RTBtkLxOYry', 13), ('cgvRofaUy', 10), ('kfgnx', 1), ('MeWtsRxY', 7)], 6) == [('kfgnx', 1), ('MeWtsRxY', 7), ('cgvRofaUy', 10), ('RTBtkLxOYry', 13)]", "def check(min_k):\n\tassert min_k([('FLw', 12), ('eoRlkcfs', 5), ('sjcyddya', 7), ('bVVcsx', 12)], 8) == [('eoRlkcfs', 5), ('sjcyddya', 7), ('FLw', 12), ('bVVcsx', 12)]", "def check(min_k):\n\tassert min_k([('TIE', 10), ('klCkQ', 8), ('oBui', 1), ('XQqvcC', 5)], 4) == [('oBui', 1), ('XQqvcC', 5), ('klCkQ', 8), ('TIE', 10)]", "def check(min_k):\n\tassert min_k([('dUMsgf', 16), ('DkNR', 8), ('JFUZLiD', 7), ('pae', 12)], 1) == [('JFUZLiD', 7)]", "def check(min_k):\n\tassert min_k([('qbWYTeVudGi', 16), ('PNag', 6), ('GZHXan', 5), ('ZEBACkSYj', 7)], 6) == [('GZHXan', 5), ('PNag', 6), ('ZEBACkSYj', 7), ('qbWYTeVudGi', 16)]", "def check(min_k):\n\tassert min_k([('kTVGCiC', 13), ('oEdDsrFT', 8), ('JclnO', 8), ('euiGGYnkN', 6)], 5) == [('euiGGYnkN', 6), ('oEdDsrFT', 8), ('JclnO', 8), ('kTVGCiC', 13)]", "def check(min_k):\n\tassert min_k([('YRGOBlbz', 16), ('htljPrA', 7), ('BRZTr', 1), ('dqH', 10)], 2) == [('BRZTr', 1), ('htljPrA', 7)]", "def check(min_k):\n\tassert min_k([('xHGVKuyvOo', 6), ('dOYEFx', 6), ('ceaqNv', 8), ('WZeStYTy', 12)], 6) == [('xHGVKuyvOo', 6), ('dOYEFx', 6), ('ceaqNv', 8), ('WZeStYTy', 12)]", "def check(min_k):\n\tassert min_k([('EZqliKkx', 14), ('OXDBDmhsd', 6), ('zUdMda', 4), ('TEiFXixK', 7)], 4) == [('zUdMda', 4), ('OXDBDmhsd', 6), ('TEiFXixK', 7), ('EZqliKkx', 14)]", "def check(min_k):\n\tassert min_k([('odhrxltby', 10), ('AoGYrBS', 10), ('cKeJrZsnbfY', 5), ('GNNWGC', 21)], 4) == [('cKeJrZsnbfY', 5), ('odhrxltby', 10), ('AoGYrBS', 10), ('GNNWGC', 21)]", "def check(min_k):\n\tassert min_k([('vwkns', 14), ('hfDyEOO', 11), ('yhLR', 6), ('UERL', 11)], 4) == [('yhLR', 6), ('hfDyEOO', 11), ('UERL', 11), ('vwkns', 14)]", "def check(min_k):\n\tassert min_k([('zymqmuppxx', 13), ('uhrI', 13), ('svBFir', 10), ('SKYWI', 12)], 1) == [('svBFir', 10)]", "def check(min_k):\n\tassert min_k([('xqrucmh', 11), ('MLLBJr', 10), ('YvtZJs', 11), ('ZZMS', 19)], 6) == [('MLLBJr', 10), ('xqrucmh', 11), ('YvtZJs', 11), ('ZZMS', 19)]", "def check(min_k):\n\tassert min_k([('glytxkmu', 16), ('iODozF', 16), ('lyJCnLZGCP', 10), ('HUK', 11)], 2) == [('lyJCnLZGCP', 10), ('HUK', 11)]", "def check(min_k):\n\tassert min_k([('nkisdxfimcx', 18), ('HPflV', 10), ('TyoxvP', 9), ('WUZFLH', 13)], 4) == [('TyoxvP', 9), ('HPflV', 10), ('WUZFLH', 13), ('nkisdxfimcx', 18)]", "def check(min_k):\n\tassert min_k([('fubekvw', 13), ('tbPycb', 8), ('faYmycaZBsF', 4), ('DPWNWYPNN', 12)], 4) == [('faYmycaZBsF', 4), ('tbPycb', 8), ('DPWNWYPNN', 12), ('fubekvw', 13)]", "def check(min_k):\n\tassert min_k([('kquzreiygdbk', 18), ('azWmeb', 11), ('rpYuVjfjYp', 10), ('DRHOQLCF', 11)], 4) == [('rpYuVjfjYp', 10), ('azWmeb', 11), ('DRHOQLCF', 11), ('kquzreiygdbk', 18)]", "def check(min_k):\n\tassert min_k([('nzosjzuxfba', 14), ('gVr', 6), ('uksjLnl', 5), ('WVMCXP', 11)], 6) == [('uksjLnl', 5), ('gVr', 6), ('WVMCXP', 11), ('nzosjzuxfba', 14)]", "def check(min_k):\n\tassert min_k([('hdqevwjzl', 16), ('Jwd', 14), ('qWMmyjTmsbdK', 6), ('TNQQO', 11)], 2) == [('qWMmyjTmsbdK', 6), ('TNQQO', 11)]", "def check(min_k):\n\tassert min_k([('wapmbbmyvpp', 19), ('TGJUC', 6), ('GMNmhQsYBdP', 13), ('FCFFFW', 20)], 6) == [('TGJUC', 6), ('GMNmhQsYBdP', 13), ('wapmbbmyvpp', 19), ('FCFFFW', 20)]", "def check(min_k):\n\tassert min_k([('zgdn', 19), ('rny', 7), ('MlTn', 10), ('XQDIPS', 15)], 6) == [('rny', 7), ('MlTn', 10), ('XQDIPS', 15), ('zgdn', 19)]", "def check(min_k):\n\tassert min_k([('egyrl', 11), ('zdWCQ', 7), ('HssvOFnAysLM', 14), ('QOCNJJQP', 21)], 2) == [('zdWCQ', 7), ('egyrl', 11)]", "def check(min_k):\n\tassert min_k([('rwrlrdjdoot', 11), ('cxjxTP', 13), ('YeuusaVuZoq', 12), ('UMPICFJZG', 12)], 1) == [('rwrlrdjdoot', 11)]", "def check(min_k):\n\tassert min_k([('txbpgsu', 11), ('MmIEZQr', 12), ('Dis', 5), ('UBTZN', 18)], 1) == [('Dis', 5)]", "def check(min_k):\n\tassert min_k([('sitvv', 18), ('HtgKGZhLA', 6), ('Hib', 14), ('WNOMAXBD', 20)], 1) == [('HtgKGZhLA', 6)]", "def check(min_k):\n\tassert min_k([('jgfyde', 12), ('uyyBnilv', 7), ('vYPX', 9), ('IZQ', 14)], 4) == [('uyyBnilv', 7), ('vYPX', 9), ('jgfyde', 12), ('IZQ', 14)]", "def check(min_k):\n\tassert min_k([('xmuhfbo', 9), ('WiCTHux', 12), ('CnNBfBV', 11), ('JGASH', 21)], 5) == [('xmuhfbo', 9), ('CnNBfBV', 11), ('WiCTHux', 12), ('JGASH', 21)]", "def check(min_k):\n\tassert min_k([('cofudvl', 16), ('YRgE', 12), ('JKcVXQ', 8), ('ZRYUIS', 19)], 5) == [('JKcVXQ', 8), ('YRgE', 12), ('cofudvl', 16), ('ZRYUIS', 19)]", "def check(min_k):\n\tassert min_k([('frximti', 10), ('UNu', 9), ('AxbbkOcw', 14), ('EZF', 14)], 1) == [('UNu', 9)]", "def check(min_k):\n\tassert min_k([('tumylzayrb', 19), ('pgezGqqD', 12), ('ewO', 6), ('PAV', 16)], 2) == [('ewO', 6), ('pgezGqqD', 12)]", "def check(min_k):\n\tassert min_k([('lortjrlpjien', 17), ('SUBq', 7), ('BEKMTUu', 12), ('YCROAV', 16)], 3) == [('SUBq', 7), ('BEKMTUu', 12), ('YCROAV', 16)]", "def check(min_k):\n\tassert min_k([('bicocwqdjbg', 15), ('aqA', 15), ('opbrvnd', 14), ('QVG', 19)], 6) == [('opbrvnd', 14), ('bicocwqdjbg', 15), ('aqA', 15), ('QVG', 19)]", "def check(min_k):\n\tassert min_k([('urpmr', 17), ('prxp', 12), ('ctEptqEhMkx', 12), ('VFYR', 17)], 3) == [('prxp', 12), ('ctEptqEhMkx', 12), ('urpmr', 17)]", "def check(min_k):\n\tassert min_k([('ojxsf', 13), ('WLapvuCZc', 9), ('lVmxuxl', 10), ('XBWZMSCM', 12)], 5) == [('WLapvuCZc', 9), ('lVmxuxl', 10), ('XBWZMSCM', 12), ('ojxsf', 13)]", "def check(min_k):\n\tassert min_k([('vqei', 10), ('oFQfUfZ', 10), ('vWFdWMIQIVja', 4), ('JXDJUML', 11)], 5) == [('vWFdWMIQIVja', 4), ('vqei', 10), ('oFQfUfZ', 10), ('JXDJUML', 11)]", "def check(min_k):\n\tassert min_k([('zmbmucyawl', 19), ('oBSLsl', 8), ('dMC', 5), ('PFJDVNS', 14)], 1) == [('dMC', 5)]", "def check(min_k):\n\tassert min_k([('xjmtpubqleic', 13), ('IfLch', 10), ('biO', 11), ('UFCUNSM', 17)], 6) == [('IfLch', 10), ('biO', 11), ('xjmtpubqleic', 13), ('UFCUNSM', 17)]", "def check(min_k):\n\tassert min_k([('qhalrxbivb', 9), ('AAOJ', 9), ('KNE', 11), ('RJDYORKD', 16)], 5) == [('qhalrxbivb', 9), ('AAOJ', 9), ('KNE', 11), ('RJDYORKD', 16)]", "def check(min_k):\n\tassert min_k([('giddosqxrih', 16), ('DYmY', 12), ('ryfdHNqYfVNH', 10), ('YSPAG', 20)], 4) == [('ryfdHNqYfVNH', 10), ('DYmY', 12), ('giddosqxrih', 16), ('YSPAG', 20)]", "def check(min_k):\n\tassert min_k([('mue', 14), ('rdcJG', 11), ('SEsTqJfwEbPp', 7), ('JRXGHL', 15)], 3) == [('SEsTqJfwEbPp', 7), ('rdcJG', 11), ('mue', 14)]", "def check(min_k):\n\tassert min_k([('iruqm', 13), ('yLZmPXRPF', 8), ('ZeeP', 7), ('MHTJOGU', 21)], 5) == [('ZeeP', 7), ('yLZmPXRPF', 8), ('iruqm', 13), ('MHTJOGU', 21)]", "def check(min_k):\n\tassert min_k([('vsuy', 15), ('Jbe', 10), ('dZzaolVaAa', 6), ('VORSC', 18)], 3) == [('dZzaolVaAa', 6), ('Jbe', 10), ('vsuy', 15)]"], "scores": [1.0, 1.0, 0.0, 1.0, 0.098, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, false, true, false, true, true, true, true, true], "pass_test_cases_num": [102, 102, 0, 102, 10, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef min_k(records: list[tuple[str, int]], k: int) -> list[tuple[str, int]]:\n    \"\"\"\n    Finds the minimum k records from a list of tuples based on the score.\n\n    Args:\n        records (list[tuple[str, int]]): List of tuples where each tuple contains a name (str) and a score (int).\n        k (int): The number of minimum records to return.\n\n    Returns:\n        list[tuple[str, int]]: List of tuples containing the names and scores of the minimum k records.\n    \"\"\"\n    if k <= 0:\n        raise ValueError(\"k must be a positive integer\")\n    \n    # Sort the records by score in ascending order\n    sorted_records = sorted(records, key=lambda x: x[1])\n    \n    # Return the first k records\n    return sorted_records[:k]\n", "passed": true, "pass": true, "pass_num": 8, "round": 654, "mutate_method": "expand_one2two", "parent_index": 230}
