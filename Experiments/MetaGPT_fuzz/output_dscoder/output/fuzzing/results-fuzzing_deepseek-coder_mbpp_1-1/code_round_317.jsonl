{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 279, "prompt": "Write a function to find the nth decagonal number. Ensure that your implementation efficiently handles large values of n without significant performance degradation. Consider edge cases and input validation as part of your solution.", "code": "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n ", "test_imports": [], "test_list": ["assert is_num_decagonal(3) == 27", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(10) == 370", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(1) == 1", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(1) == 1", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(1) == 1", "assert is_num_decagonal(1) == 1", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(1) == 1", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(10) == 370", "assert is_num_decagonal(11) == 451", "assert is_num_decagonal(6) == 126", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(12) == 540", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(6) == 126", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(10) == 370", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(11) == 451", "assert is_num_decagonal(12) == 540", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(12) == 540", "assert is_num_decagonal(6) == 126", "assert is_num_decagonal(10) == 370", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(15) == 855", "assert is_num_decagonal(12) == 540", "assert is_num_decagonal(15) == 855", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(14) == 742", "assert is_num_decagonal(13) == 637", "assert is_num_decagonal(6) == 126", "assert is_num_decagonal(10) == 370", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(10) == 370", "assert is_num_decagonal(15) == 855", "assert is_num_decagonal(9) == 297", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(14) == 742", "assert is_num_decagonal(6) == 126", "assert is_num_decagonal(12) == 540", "assert is_num_decagonal(11) == 451", "assert is_num_decagonal(11) == 451", "assert is_num_decagonal(11) == 451", "assert is_num_decagonal(13) == 637", "assert is_num_decagonal(10) == 370", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(15) == 855", "assert is_num_decagonal(13) == 637", "assert is_num_decagonal(13) == 637", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(10) == 370"], "entry_point": "is_num_decagonal", "repair_prompt": ["Write a function is_num_decagonal to find the nth decagonal number. Ensure that your implementation efficiently handles large values of n without significant performance degradation. Consider edge cases and input validation as part of your solution.\nis_num_decagonal(3) == 27\n"], "completions": ["from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number.\n\n    Args:\n        n (int): A positive integer representing the position in the decagonal sequence.\n\n    Returns:\n        int: The nth decagonal number.\n\n    Raises:\n        ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return (3 * n * n - n) // 2\n\n# Example usage:\n# print(is_num_decagonal(5))  # Output: 35\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula (4n^2 - 3n) / 2.\n    \n    Args:\n        n (int): The position in the decagonal sequence.\n        \n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return (4 * n**2 - 3 * n) // 2\n\n# Example usage:\n# print(is_num_decagonal(1))  # Output: 1\n# print(is_num_decagonal(2))  # Output: 7\n# print(is_num_decagonal(3))  # Output: 19\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula: (3 * n * n - 2 * n) / 2.\n    \n    Args:\n        n (int): The position in the decagonal sequence.\n        \n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return (3 * n * n - 2 * n) // 2\n\n# Example usage:\n# print(is_num_decagonal(5))  # Output: 55\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula (3n^2 - 2n).\n\n    Args:\n        n (int): The position in the decagonal sequence.\n\n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return 3 * n**2 - 2 * n\n\n# Example usage:\n# print(is_num_decagonal(5))  # Output: 55\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number.\n\n    Args:\n        n (int): The position in the decagonal sequence.\n\n    Returns:\n        int: The nth decagonal number.\n\n    Raises:\n        ValueError: If the input is not a valid integer.\n    \"\"\"\n    if not isinstance(n, int) or isinstance(n, bool):\n        raise ValueError(\"Input must be a valid integer.\")\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # The formula for the nth decagonal number is:\n    # D_n = 4n^2 - 3n\n    return 4 * n**2 - 3 * n\n\n# Example usage:\n# print(is_num_decagonal(1))  # Output: 1\n# print(is_num_decagonal(2))  # Output: 10\n# print(is_num_decagonal(3))  # Output: 27\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number.\n\n    Args:\n        n (int): The position in the decagonal sequence.\n\n    Returns:\n        int: The nth decagonal number.\n\n    Raises:\n        ValueError: If the input is not a valid integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    # The formula for the nth decagonal number is:\n    # D_n = 4n^2 - 3n\n    return 4 * n**2 - 3 * n\n\n# Example usage:\n# print(is_num_decagonal(5))  # Output: 82\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula (4n^2 - 3n) / 2.\n\n    Args:\n        n (int): The position in the sequence of decagonal numbers.\n\n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return (4 * n**2 - 3 * n) // 2\n\n# Example usage:\n# print(is_num_decagonal(1))  # Output: 1\n# print(is_num_decagonal(2))  # Output: 10\n# print(is_num_decagonal(3))  # Output: 27\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula (3n^2 - 2n).\n\n    Args:\n        n (int): The position in the sequence, must be a positive integer.\n\n    Returns:\n        int: The nth decagonal number.\n\n    Raises:\n        ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return 3 * n**2 - 2 * n\n\n# Example usage:\n# print(is_num_decagonal(5))  # Output: 52\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number.\n\n    Args:\n        n (int): The position in the decagonal sequence.\n\n    Returns:\n        int: The nth decagonal number.\n\n    Raises:\n        ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # The formula to calculate the nth decagonal number\n    return 4 * n * (2 * n - 1)\n\n# Example usage:\n# print(is_num_decagonal(5))  # Output: 70\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula: (4n^2 - 3n).\n    \n    Args:\n        n (int): A non-negative integer representing the position in the decagonal sequence.\n    \n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    return 4 * n**2 - 3 * n\n\n# Example usage:\n# print(is_num_decagonal(5))  # Output: 82\n"], "plans": ["requirement analysis:\nThe primary requirement is to create a function that calculates the nth decagonal number accurately and efficiently. This involves understanding the mathematical formula for decagonal numbers and implementing it in a way that supports large values of n without performance issues. Additionally, input validation is crucial to ensure the function handles only valid inputs correctly.\nrequirement pool:\n- Implement the mathematical formula for decagonal numbers.\n- Ensure the function can handle large values of n efficiently.\n- Implement input validation to handle edge cases.\n- Design a user-friendly interface for easy input and output.\n- Include error handling for unexpected inputs.\nTo efficiently calculate the nth decagonal number, we will use a mathematical formula that directly computes the value without the need for iterative calculations. This approach ensures high performance and scalability. We will also implement input validation to handle edge cases and ensure the function handles only valid inputs correctly.\n", "requirement analysis:\nThe primary requirement is to create a function that calculates the nth decagonal number accurately and efficiently. This involves understanding the mathematical formula for decagonal numbers and implementing it in a way that handles large values of n without performance issues. Additionally, input validation is crucial to ensure the function can handle various edge cases and invalid inputs gracefully.\nrequirement pool:\n- Implement the formula for the nth decagonal number.\n- Ensure the function can handle large values of n efficiently.\n- Implement input validation to handle invalid inputs.\n- Design a user-friendly interface for input and output.\n- Optimize the function for performance and scalability.\nTo implement the function is_num_decagonal, we will use a mathematical formula for decagonal numbers. The nth decagonal number can be calculated using the formula: (4n^2 - 3n) / 2. This formula is efficient and avoids the need for complex iterative processes, ensuring it can handle large values of n without significant performance degradation. We will also implement input validation to ensure the function can handle various edge cases and invalid inputs gracefully.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth decagonal number. The function should handle large values of n efficiently and provide input validation to ensure the input is a positive integer. The product should be user-friendly and performant.\nrequirement pool:\n- Implement the function to calculate the nth decagonal number.\n- Ensure the function handles large values of n efficiently.\n- Implement input validation to ensure the input is a positive integer.\n- Design a user-friendly interface for easy interaction.\n- Optimize the performance of the function to handle large inputs.\nTo implement the function is_num_decagonal, we will use a mathematical formula to calculate the nth decagonal number directly. This approach ensures efficiency and avoids the need for iterative calculations, which are prone to performance degradation with large values of n. We will also implement input validation to ensure the input is a positive integer.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth decagonal number. The function should handle large values of n efficiently and provide input validation to ensure the input is a positive integer. The product should be user-friendly and performant.\nrequirement pool:\n- Implement the function to calculate the nth decagonal number.\n- Ensure the function handles large values of n efficiently.\n- Implement input validation to ensure the input is a positive integer.\n- Design a user-friendly interface for easy interaction.\n- Optimize the performance of the application to handle large data sets.\nTo implement the function is_num_decagonal, we will use a mathematical formula to calculate the nth decagonal number directly. This approach ensures efficiency and avoids the need for iterative calculations, which can be slow for large values of n. The formula for the nth decagonal number is given by (3n^2 - 2n). We will implement input validation to ensure that the input is a positive integer, and we will handle edge cases such as non-integer or negative inputs.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth decagonal number. The function should handle large values of n efficiently and include input validation to ensure the input is a valid integer. The function should also be able to handle edge cases such as negative numbers or non-integer inputs.\nrequirement pool:\n- Implement the function to calculate the nth decagonal number.\n- Ensure the function handles large values of n efficiently.\n- Include input validation to ensure the input is a valid integer.\n- Handle edge cases such as negative numbers or non-integer inputs.\n- Enhance the user interface for better user experience.\nTo implement the function `is_num_decagonal` efficiently, we will use a mathematical formula to directly compute the nth decagonal number. This approach avoids the need for iterative calculations, making it suitable for handling large values of n. We will also include input validation to ensure the input is a valid integer and handle edge cases such as negative numbers or non-integer inputs.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth decagonal number. The function should handle large values of n efficiently and include input validation to ensure the input is a valid integer. The function should also be able to handle edge cases such as negative numbers or non-integer inputs.\nrequirement pool:\n- Implement the function to calculate the nth decagonal number.\n- Ensure the function handles large values of n efficiently.\n- Include input validation to ensure the input is a valid integer.\n- Handle edge cases such as negative numbers or non-integer inputs.\n- Design a user-friendly interface for easy input and output.\nTo implement the function is_num_decagonal, we will use a mathematical formula to directly calculate the nth decagonal number. This approach ensures efficiency even for large values of n. We will also include input validation to ensure the input is a valid integer and handle edge cases such as negative numbers or non-integer inputs.\n", "requirement analysis:\nThe primary requirement is to create a function that calculates the nth decagonal number accurately and efficiently. This involves understanding the mathematical formula for decagonal numbers and implementing it in a way that handles large values of n without performance issues. Additionally, input validation is crucial to ensure the function can handle various edge cases and invalid inputs gracefully.\nrequirement pool:\n- Implement the formula for the nth decagonal number.\n- Ensure the function can handle large values of n efficiently.\n- Implement input validation to handle invalid inputs gracefully.\n- Design a user-friendly interface for input and output.\n- Optimize the function for performance and scalability.\nTo implement the function is_num_decagonal, we will use a mathematical formula for decagonal numbers. The nth decagonal number can be calculated using the formula: (4n^2 - 3n) / 2. This formula is efficient and avoids the need for complex iterative processes, ensuring it can handle large values of n without significant performance degradation. We will also implement input validation to ensure the function can handle various edge cases and invalid inputs gracefully.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth decagonal number. The function should handle large values of n efficiently and validate inputs to ensure they are valid integers. The product should be user-friendly and provide quick results.\nrequirement pool:\n- Implement the function to calculate the nth decagonal number.\n- Ensure the function handles large values of n efficiently.\n- Implement input validation to ensure only valid integers are accepted.\n- Design a user-friendly interface for easy input and output.\n- Optimize the performance and scalability of the application.\nTo implement the function is_num_decagonal, we will use a mathematical formula to directly calculate the nth decagonal number. This approach ensures efficiency and avoids the need for complex data structures or algorithms. The formula for the nth decagonal number is given by (3n^2 - 2n). We will implement input validation to ensure that the input is a positive integer. The function will handle large values of n efficiently by leveraging Python's built-in support for large integers.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth decagonal number. The function should handle large values of n efficiently without significant performance degradation. Edge cases such as negative numbers and non-integer inputs should also be considered and handled appropriately.\nrequirement pool:\n- Implement the function to calculate the nth decagonal number accurately.\n- Ensure the function can handle large values of n efficiently.\n- Include input validation to handle edge cases such as negative numbers and non-integer inputs.\n- Design the function to be user-friendly and provide clear, concise results.\n- Optimize the function for high performance and scalability.\nTo efficiently calculate the nth decagonal number, we will use a mathematical formula that directly computes the decagonal number without the need for iterative calculations. This approach ensures high performance and scalability. We will also implement input validation to handle edge cases such as negative numbers and non-integer inputs, ensuring the function is robust and user-friendly.\n", "requirement analysis:\nThe primary requirement is to create a function that calculates the nth decagonal number accurately and efficiently. This involves understanding the mathematical formula for decagonal numbers and implementing it in a way that supports large values of n without performance issues. Additionally, input validation is crucial to ensure the function handles only valid inputs and provides meaningful error messages for invalid inputs.\nrequirement pool:\n- Implement the formula for the nth decagonal number.\n- Ensure the function can handle large values of n without significant performance degradation.\n- Implement input validation to handle invalid inputs gracefully.\n- Design an intuitive user interface for easy input and output.\n- Optimize the code for better readability and maintainability.\nTo implement the function is_num_decagonal, we will use a mathematical formula for decagonal numbers. The nth decagonal number can be calculated using the formula: (4n^2 - 3n). This formula is efficient and will handle large values of n well. We will also implement input validation to ensure that the function only processes non-negative integers.\n"], "test": ["def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(1) == 1", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(1) == 1", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(1) == 1", "def check(is_num_decagonal):\n\tassert is_num_decagonal(1) == 1", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(1) == 1", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370", "def check(is_num_decagonal):\n\tassert is_num_decagonal(11) == 451", "def check(is_num_decagonal):\n\tassert is_num_decagonal(6) == 126", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(12) == 540", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(6) == 126", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(11) == 451", "def check(is_num_decagonal):\n\tassert is_num_decagonal(12) == 540", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(12) == 540", "def check(is_num_decagonal):\n\tassert is_num_decagonal(6) == 126", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(15) == 855", "def check(is_num_decagonal):\n\tassert is_num_decagonal(12) == 540", "def check(is_num_decagonal):\n\tassert is_num_decagonal(15) == 855", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(14) == 742", "def check(is_num_decagonal):\n\tassert is_num_decagonal(13) == 637", "def check(is_num_decagonal):\n\tassert is_num_decagonal(6) == 126", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370", "def check(is_num_decagonal):\n\tassert is_num_decagonal(15) == 855", "def check(is_num_decagonal):\n\tassert is_num_decagonal(9) == 297", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(14) == 742", "def check(is_num_decagonal):\n\tassert is_num_decagonal(6) == 126", "def check(is_num_decagonal):\n\tassert is_num_decagonal(12) == 540", "def check(is_num_decagonal):\n\tassert is_num_decagonal(11) == 451", "def check(is_num_decagonal):\n\tassert is_num_decagonal(11) == 451", "def check(is_num_decagonal):\n\tassert is_num_decagonal(11) == 451", "def check(is_num_decagonal):\n\tassert is_num_decagonal(13) == 637", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(15) == 855", "def check(is_num_decagonal):\n\tassert is_num_decagonal(13) == 637", "def check(is_num_decagonal):\n\tassert is_num_decagonal(13) == 637", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370"], "scores": [0.049, 0.0, 0.0, 0.049, 1.0, 1.0, 0.0, 0.049, 0.0, 1.0], "pass_results": [false, false, false, false, true, true, false, false, false, true], "pass_test_cases_num": [5, 0, 0, 5, 102, 102, 0, 5, 0, 102], "completion": "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula: (4n^2 - 3n).\n    \n    Args:\n        n (int): A non-negative integer representing the position in the decagonal sequence.\n    \n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    return 4 * n**2 - 3 * n\n\n# Example usage:\n# print(is_num_decagonal(5))  # Output: 82\n", "passed": true, "pass": true, "pass_num": 3, "round": 317, "mutate_method": "add_1_sentence_at_end", "parent_index": 355}
