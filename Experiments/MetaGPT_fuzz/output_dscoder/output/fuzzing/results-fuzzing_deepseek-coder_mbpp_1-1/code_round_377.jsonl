{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 162, "prompt": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0). Ensure your solution is efficient and handles large values of n. Consider edge cases such as when n is negative or zero.", "code": "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)", "test_imports": [], "test_list": ["assert sum_series(6)==12", "assert sum_series(10)==30", "assert sum_series(9)==25", "assert sum_series(5) == 9", "assert sum_series(6) == 12", "assert sum_series(3) == 4", "assert sum_series(5) == 9", "assert sum_series(7) == 16", "assert sum_series(8) == 20", "assert sum_series(8) == 20", "assert sum_series(11) == 36", "assert sum_series(1) == 1", "assert sum_series(4) == 6", "assert sum_series(4) == 6", "assert sum_series(8) == 20", "assert sum_series(10) == 30", "assert sum_series(10) == 30", "assert sum_series(11) == 36", "assert sum_series(10) == 30", "assert sum_series(6) == 12", "assert sum_series(6) == 12", "assert sum_series(3) == 4", "assert sum_series(8) == 20", "assert sum_series(9) == 25", "assert sum_series(10) == 30", "assert sum_series(5) == 9", "assert sum_series(3) == 4", "assert sum_series(1) == 1", "assert sum_series(11) == 36", "assert sum_series(3) == 4", "assert sum_series(10) == 30", "assert sum_series(8) == 20", "assert sum_series(10) == 30", "assert sum_series(9) == 25", "assert sum_series(3) == 4", "assert sum_series(6) == 12", "assert sum_series(12) == 42", "assert sum_series(8) == 20", "assert sum_series(5) == 9", "assert sum_series(13) == 49", "assert sum_series(6) == 12", "assert sum_series(11) == 36", "assert sum_series(13) == 49", "assert sum_series(12) == 42", "assert sum_series(8) == 20", "assert sum_series(8) == 20", "assert sum_series(15) == 64", "assert sum_series(13) == 49", "assert sum_series(12) == 42", "assert sum_series(6) == 12", "assert sum_series(13) == 49", "assert sum_series(15) == 64", "assert sum_series(15) == 64", "assert sum_series(12) == 42", "assert sum_series(11) == 36", "assert sum_series(11) == 36", "assert sum_series(15) == 64", "assert sum_series(11) == 36", "assert sum_series(7) == 16", "assert sum_series(11) == 36", "assert sum_series(7) == 16", "assert sum_series(5) == 9", "assert sum_series(10) == 30", "assert sum_series(12) == 42", "assert sum_series(7) == 16", "assert sum_series(15) == 64", "assert sum_series(9) == 25", "assert sum_series(14) == 56", "assert sum_series(7) == 16", "assert sum_series(13) == 49", "assert sum_series(4) == 6", "assert sum_series(7) == 16", "assert sum_series(7) == 16", "assert sum_series(7) == 16", "assert sum_series(7) == 16", "assert sum_series(8) == 20", "assert sum_series(5) == 9", "assert sum_series(8) == 20", "assert sum_series(11) == 36", "assert sum_series(6) == 12", "assert sum_series(11) == 36", "assert sum_series(12) == 42", "assert sum_series(4) == 6", "assert sum_series(11) == 36", "assert sum_series(10) == 30", "assert sum_series(8) == 20", "assert sum_series(5) == 9", "assert sum_series(12) == 42", "assert sum_series(10) == 30", "assert sum_series(4) == 6", "assert sum_series(6) == 12", "assert sum_series(13) == 49", "assert sum_series(4) == 6", "assert sum_series(9) == 25", "assert sum_series(12) == 42", "assert sum_series(5) == 9", "assert sum_series(7) == 16", "assert sum_series(11) == 36", "assert sum_series(13) == 49", "assert sum_series(13) == 49", "assert sum_series(8) == 20", "assert sum_series(9) == 25"], "entry_point": "sum_series", "repair_prompt": ["Write a function sum_series to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0). Ensure your solution is efficient and handles large values of n. Consider edge cases such as when n is negative or zero.\nsum_series(6)==12\n"], "completions": ["from typing import List\n## main.py\n\nimport typing\n\ndef sum_series(n: int) -> typing.Union[int, str]:\n    \"\"\"\n    Calculate the sum of the series where each term is calculated as n - 2*i for i in range(n//2 + 1).\n    \n    Args:\n        n (int): The input integer.\n        \n    Returns:\n        int: The sum of the series.\n        str: A message indicating invalid input if n is less than 0.\n    \"\"\"\n    if n < 0:\n        return \"Input must be a non-negative integer.\"\n    \n    total_sum = 0\n    for i in range(n // 2 + 1):\n        total_sum += n - 2 * i\n    \n    return total_sum\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series where each term is n - 2*i for i in range(n//2 + 1).\n    \n    Args:\n        n (int): The input integer.\n        \n    Returns:\n        int: The sum of the series.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    total_sum = 0\n    for i in range(n // 2 + 1):\n        term = n - 2 * i\n        total_sum += term\n    \n    return total_sum\n\n# Example usage:\n# print(sum_series(10))  # Output should be 30\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculates the sum of the series where each term is the value of n - 2*i for i in range from 0 to n//2.\n    \n    Args:\n        n (int): The input integer for which the series sum is calculated.\n    \n    Returns:\n        int: The sum of the series.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    series_sum = 0\n    for i in range(n // 2 + 1):\n        series_sum += n - 2 * i\n    \n    return series_sum\n\n# Example usage:\n# print(sum_series(10))  # Output should be 30\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series where each term is the sum of (n - 2*i) for i in range(n//2 + 1).\n\n    Args:\n        n (int): The input integer.\n\n    Returns:\n        int: The sum of the series.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    total_sum = 0\n    for i in range(n // 2 + 1):\n        total_sum += (n - 2 * i)\n    \n    return total_sum\n\n# Example usage:\n# print(sum_series(5))  # Output should be 9 (3 + 2 + 1)\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    series_sum = 0\n    for i in range(n // 2 + 1):\n        series_sum += (n - 2 * i)\n    return series_sum\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series.\n\n    Args:\n        n (int): The positive integer input.\n\n    Returns:\n        int: The sum of the series.\n\n    Raises:\n        ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Generate the series and sum it up\n    series_sum = sum(i for i in range(1, n + 1))\n    return series_sum\n\n# Example usage:\n# try:\n#     result = sum_series(10)\n#     print(f\"The sum of the series is: {result}\")\n# except ValueError as e:\n#     print(e)\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series where each term is the difference between the current index and twice the index.\n    \n    Args:\n        n (int): The upper limit of the series.\n    \n    Returns:\n        int: The sum of the series.\n    \"\"\"\n    if n <= 0:\n        return 0  # Return 0 for non-positive inputs as per the requirement\n\n    series_sum = 0\n    for i in range(n // 2 + 1):\n        term = n - 2 * i\n        series_sum += term\n\n    return series_sum\n\n# Example usage:\n# print(sum_series(5))  # Should output 9 (3 + 1 + 0)\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series.\n\n    Args:\n        n (int): The input integer.\n\n    Returns:\n        int: The sum of the series.\n\n    Raises:\n        ValueError: If n is negative or zero, the function raises a ValueError.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # Initialize the sum\n    total_sum = 0\n    \n    # Calculate the sum of the series\n    for i in range(1, n + 1):\n        total_sum += i\n    \n    return total_sum\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series.\n\n    Args:\n        n (int): The integer input for the series.\n\n    Returns:\n        int: The sum of the series.\n    \"\"\"\n    if n <= 0:\n        return 0  # Return 0 for non-positive integers as per the problem statement\n\n    # Calculate the sum of the series using the formula for the sum of the first n natural numbers\n    return (n * (n + 1)) // 2\n\n# Example usage:\n# print(sum_series(10))  # Should return 55\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series where each term is (n - 2*i) for i in range(n//2 + 1).\n    \n    Args:\n        n (int): The upper limit of the series.\n    \n    Returns:\n        int: The sum of the series.\n    \"\"\"\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        term = n - 2 * i\n        total_sum += term\n    return total_sum\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that calculates the sum of a series where each term is n - 2*i, with i ranging from 0 to n//2. The function should handle edge cases such as negative or zero inputs efficiently. The product should be scalable and provide a good user experience.\nrequirement pool:\n- The main code should be efficient and handle large values of n.\n- The function should handle edge cases such as negative or zero inputs.\n- The product should be scalable and provide a good user experience.\n- Ensure the product is easy to use and understand.\n- Develop a user-friendly interface for easy interaction.\nTo create an efficient sum series calculator in Python, we will use a straightforward approach that avoids unnecessary complexity. The function will iterate from 0 to n//2, calculating each term as n - 2*i, and summing these values. This method ensures that the function is both efficient and easy to understand. We will also handle edge cases such as negative or zero inputs by returning a clear message.\n", "requirement analysis:\nThe requirement is to create a function that calculates the sum of a series where each term is n - 2*i, starting from i=0 to n//2. The function should handle edge cases such as negative or zero inputs efficiently. The solution should be scalable and capable of handling large numbers.\nrequirement pool:\n- Implement the sum series calculation efficiently.\n- Ensure the function handles edge cases like negative and zero inputs.\n- Develop a user-friendly interface for easy input and result display.\n- Optimize the function for handling large numbers.\n- Add input validation to ensure the function works correctly with invalid inputs.\nTo implement the sum_series function efficiently, we will use Python's built-in capabilities and ensure the function handles edge cases such as negative or zero inputs. The function will iterate from i=0 to n//2, calculating each term as n - 2*i, and summing these values. This approach ensures simplicity and efficiency, making it suitable for handling large numbers.\n", "requirement analysis:\nThe requirement is to create a function that calculates the sum of a series where each term is n - 2*i, starting from i=0 to n//2. The function should handle edge cases such as negative or zero inputs efficiently. The product should be user-friendly and scalable for large numbers.\nrequirement pool:\n- Implement the sum_series function to calculate the series accurately.\n- Ensure the function handles large numbers efficiently.\n- Include error handling for negative and zero inputs.\n- Develop a user-friendly interface for easy input and output.\n- Optimize the code for performance and scalability.\nTo implement the sum_series function efficiently, we will use Python's built-in capabilities and leverage its handling of large integers. The function will iterate from i=0 to n//2, summing the values of n - 2*i. We will also include error handling to manage cases where the input is negative or zero.\n", "requirement analysis:\nThe requirement is to create a function that calculates the sum of a series where each term is n - 2*i, starting from i=0 to n//2. The function should handle edge cases such as negative or zero inputs efficiently. The solution should be scalable and suitable for large numbers.\nrequirement pool:\n- Implement the sum_series function to calculate the series efficiently.\n- Ensure the function handles edge cases such as negative and zero inputs.\n- Develop a user-friendly interface for easy interaction.\n- Optimize the function for handling large numbers.\n- Test the function for accuracy and performance.\nTo implement the sum_series function efficiently, we will use Python's built-in capabilities and ensure the function handles edge cases such as negative or zero inputs. The function will iterate from i=0 to n//2, summing the series (n - 2*i). We will also optimize the function for handling large numbers by using an iterative approach rather than a recursive one, which could lead to stack overflow issues with large inputs.\n", "requirement analysis:\nThe requirement is to create a function that calculates the sum of a series where each term is obtained by subtracting 2 times the current index from the initial number 'n'. The function should handle both positive and negative values of 'n', with special attention to efficiency and edge cases. The series should terminate when the term becomes less than or equal to zero.\nrequirement pool:\n- Implement the function sum_series(n) to calculate the series sum.\n- Ensure the function handles large values of n efficiently.\n- Include error handling for invalid inputs (e.g., non-integer values, negative numbers).\n- Develop a user-friendly interface for easy interaction.\n- Optimize the code for performance and readability.\nTo implement the sum_series function efficiently, we will use Python's built-in capabilities and ensure the function handles large values of n effectively. The function will include error handling for invalid inputs such as non-integer values and negative numbers. The series sum will be calculated by iterating from 0 to n // 2 and summing the terms (n - 2*i).\n", "requirement analysis:\nThe requirement is to create a function that calculates the sum of a series where each term is the result of subtracting 2 times the current index from the initial number n, up to the point where the result is less than or equal to zero. The function should handle both positive and negative values of n, including zero, and should be efficient enough to handle large values of n.\nrequirement pool:\n- Implement the sum_series function to calculate the series as described.\n- Ensure the function can handle edge cases such as negative and zero values of n.\n- Optimize the function for performance, especially for large values of n.\n- Develop a user-friendly interface for inputting n and displaying the result.\n- Include error handling for invalid inputs such as non-integer values.\nTo implement the sum_series function efficiently, we will use Python's built-in capabilities and leverage the power of list comprehensions to generate the series and sum them up. This approach ensures that the function handles large values of n effectively. We will also include error handling to manage cases where the input is not a positive integer.\n", "requirement analysis:\nThe requirement is to create a function that calculates the sum of a series where each term is obtained by subtracting 2 times the current index from the initial number n, iterating up to n // 2. The function should handle edge cases such as negative or zero inputs efficiently. The product should be efficient and scalable to handle large values of n.\nrequirement pool:\n- Implement the sum_series function to calculate the series sum as per the given requirements.\n- Ensure the function handles edge cases such as negative and zero inputs correctly.\n- Optimize the function to handle large values of n efficiently.\n- Develop a user-friendly interface for easy interaction with the function.\n- Test the function for accuracy and performance, ensuring it meets the requirements.\nTo implement the sum_series function efficiently, we will use Python's built-in capabilities and ensure the function handles large values of n effectively. We will avoid complex libraries and focus on simplicity and performance. The function will iterate through the series, summing the terms as it goes, and handle edge cases such as negative and zero inputs.\n", "requirement analysis:\nThe requirement is to create a function that calculates the sum of a series where each term is n - 2*i, with i ranging from 0 to n//2. The function should handle edge cases such as negative or zero inputs efficiently. The product should be scalable and suitable for large numbers, providing accurate results quickly.\nrequirement pool:\n- The main code should be efficient and handle large values of n.\n- The function should consider edge cases such as negative or zero inputs.\n- The product should provide a user-friendly interface for easy interaction.\n- The product should be scalable and suitable for large numbers.\n- The product should offer detailed analytics if possible.\nTo implement the sum_series function efficiently, we will use Python's built-in capabilities and ensure the function handles large values of n by leveraging its efficient arithmetic operations. The function will also handle edge cases such as negative or zero inputs by providing clear error messages or appropriate default behaviors.\n", "requirement analysis:\nThe requirement is to create a function that calculates the sum of a series where each term is obtained by subtracting 2 times the current index from the initial number n, up to the point where the term is less than or equal to zero. The function should handle edge cases such as negative or zero inputs efficiently. The product should be scalable and suitable for large numbers.\nrequirement pool:\n- The main code should be efficient and handle large values of n.\n- The function should consider edge cases such as negative or zero inputs.\n- The interface should be user-friendly and easy to use.\n- The product should be scalable and suitable for large numbers.\n- The product should provide clear and detailed results.\nTo implement the sum_series function efficiently, we will use Python's built-in capabilities and ensure the function handles large values of n by leveraging its efficient arithmetic operations. The function will also handle edge cases such as negative or zero inputs by implementing simple checks at the beginning.\n", "requirement analysis:\nThe requirement is to create a function that calculates the sum of a series where each term is obtained by subtracting 2 times the current index from the initial number n, up to the point where the term is less than or equal to zero. The function should handle both positive and negative values of n, including zero. Efficiency is crucial, especially for large values of n.\nrequirement pool:\n- The main code should be efficient and handle large values of n.\n- The function should consider edge cases such as negative and zero values of n.\n- Ensure the user interface is simple and easy to use.\n- Provide clear feedback on the result based on the input value.\n- Optimize the performance for handling large numbers.\nTo create an efficient sum series calculator in Python, we will use a straightforward approach that avoids unnecessary complexity. The function will iterate from 0 to n//2, calculating the term (n - 2*i) for each iteration and summing these terms. This approach ensures that the function handles large values of n efficiently by limiting the number of iterations to n//2.\n"], "test": ["def check(sum_series):\n\tassert sum_series(6)==12", "def check(sum_series):\n\tassert sum_series(10)==30", "def check(sum_series):\n\tassert sum_series(9)==25", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(1) == 1", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(9) == 25", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(1) == 1", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(9) == 25", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(9) == 25", "def check(sum_series):\n\tassert sum_series(14) == 56", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(9) == 25", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(9) == 25"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 0.0196, 1.0, 0.0196, 0.0196, 1.0], "pass_results": [true, true, true, true, true, false, true, false, false, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 2, 102, 2, 2, 102], "completion": "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series where each term is (n - 2*i) for i in range(n//2 + 1).\n    \n    Args:\n        n (int): The upper limit of the series.\n    \n    Returns:\n        int: The sum of the series.\n    \"\"\"\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        term = n - 2 * i\n        total_sum += term\n    return total_sum\n", "passed": true, "pass": true, "pass_num": 7, "round": 377, "mutate_method": "add_1_sentence_at_end", "parent_index": 326}
