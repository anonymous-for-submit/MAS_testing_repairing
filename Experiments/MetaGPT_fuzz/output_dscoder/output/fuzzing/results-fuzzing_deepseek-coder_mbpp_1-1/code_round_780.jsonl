{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 86, "prompt": "Write a function to find nth centered hexagonal number. Centered hexagonal numbers are integers representing a hexagon with a dot in the center and all other surrounding dots forming hexagonal layers.", "code": "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1", "test_imports": [], "test_list": ["assert centered_hexagonal_number(10) == 271", "assert centered_hexagonal_number(2) == 7", "assert centered_hexagonal_number(9) == 217", "assert centered_hexagonal_number(8) == 169", "assert centered_hexagonal_number(7) == 127", "assert centered_hexagonal_number(11) == 331", "assert centered_hexagonal_number(6) == 91", "assert centered_hexagonal_number(11) == 331", "assert centered_hexagonal_number(9) == 217", "assert centered_hexagonal_number(7) == 127", "assert centered_hexagonal_number(7) == 127", "assert centered_hexagonal_number(15) == 631", "assert centered_hexagonal_number(14) == 547", "assert centered_hexagonal_number(10) == 271", "assert centered_hexagonal_number(9) == 217", "assert centered_hexagonal_number(9) == 217", "assert centered_hexagonal_number(13) == 469", "assert centered_hexagonal_number(8) == 169", "assert centered_hexagonal_number(7) == 127", "assert centered_hexagonal_number(10) == 271", "assert centered_hexagonal_number(15) == 631", "assert centered_hexagonal_number(7) == 127", "assert centered_hexagonal_number(15) == 631", "assert centered_hexagonal_number(10) == 271", "assert centered_hexagonal_number(10) == 271", "assert centered_hexagonal_number(12) == 397", "assert centered_hexagonal_number(9) == 217", "assert centered_hexagonal_number(7) == 127", "assert centered_hexagonal_number(13) == 469", "assert centered_hexagonal_number(5) == 61", "assert centered_hexagonal_number(10) == 271", "assert centered_hexagonal_number(9) == 217", "assert centered_hexagonal_number(8) == 169", "assert centered_hexagonal_number(12) == 397", "assert centered_hexagonal_number(14) == 547", "assert centered_hexagonal_number(13) == 469", "assert centered_hexagonal_number(4) == 37", "assert centered_hexagonal_number(5) == 61", "assert centered_hexagonal_number(2) == 7", "assert centered_hexagonal_number(2) == 7", "assert centered_hexagonal_number(2) == 7", "assert centered_hexagonal_number(6) == 91", "assert centered_hexagonal_number(5) == 61", "assert centered_hexagonal_number(7) == 127", "assert centered_hexagonal_number(1) == 1", "assert centered_hexagonal_number(4) == 37", "assert centered_hexagonal_number(5) == 61", "assert centered_hexagonal_number(5) == 61", "assert centered_hexagonal_number(5) == 61", "assert centered_hexagonal_number(1) == 1", "assert centered_hexagonal_number(2) == 7", "assert centered_hexagonal_number(6) == 91", "assert centered_hexagonal_number(1) == 1", "assert centered_hexagonal_number(6) == 91", "assert centered_hexagonal_number(2) == 7", "assert centered_hexagonal_number(7) == 127", "assert centered_hexagonal_number(5) == 61", "assert centered_hexagonal_number(6) == 91", "assert centered_hexagonal_number(5) == 61", "assert centered_hexagonal_number(1) == 1", "assert centered_hexagonal_number(3) == 19", "assert centered_hexagonal_number(2) == 7", "assert centered_hexagonal_number(7) == 127", "assert centered_hexagonal_number(2) == 7", "assert centered_hexagonal_number(6) == 91", "assert centered_hexagonal_number(2) == 7", "assert centered_hexagonal_number(5) == 61", "assert centered_hexagonal_number(3) == 19", "assert centered_hexagonal_number(5) == 61", "assert centered_hexagonal_number(13) == 469", "assert centered_hexagonal_number(11) == 331", "assert centered_hexagonal_number(8) == 169", "assert centered_hexagonal_number(9) == 217", "assert centered_hexagonal_number(4) == 37", "assert centered_hexagonal_number(10) == 271", "assert centered_hexagonal_number(12) == 397", "assert centered_hexagonal_number(12) == 397", "assert centered_hexagonal_number(10) == 271", "assert centered_hexagonal_number(11) == 331", "assert centered_hexagonal_number(8) == 169", "assert centered_hexagonal_number(12) == 397", "assert centered_hexagonal_number(6) == 91", "assert centered_hexagonal_number(8) == 169", "assert centered_hexagonal_number(13) == 469", "assert centered_hexagonal_number(5) == 61", "assert centered_hexagonal_number(14) == 547", "assert centered_hexagonal_number(7) == 127", "assert centered_hexagonal_number(12) == 397", "assert centered_hexagonal_number(14) == 547", "assert centered_hexagonal_number(9) == 217", "assert centered_hexagonal_number(13) == 469", "assert centered_hexagonal_number(7) == 127", "assert centered_hexagonal_number(8) == 169", "assert centered_hexagonal_number(11) == 331", "assert centered_hexagonal_number(8) == 169", "assert centered_hexagonal_number(14) == 547", "assert centered_hexagonal_number(14) == 547", "assert centered_hexagonal_number(11) == 331", "assert centered_hexagonal_number(13) == 469", "assert centered_hexagonal_number(9) == 217", "assert centered_hexagonal_number(4) == 37", "assert centered_hexagonal_number(13) == 469"], "entry_point": "centered_hexagonal_number", "repair_prompt": ["Write a function centered_hexagonal_number to find nth centered hexagonal number. Centered hexagonal numbers are integers representing a hexagon with a dot in the center and all other surrounding dots forming hexagonal layers.\ncentered_hexagonal_number(10) == 271\n"], "completions": ["from typing import List\n## main.py\n\ndef centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n\n    A centered hexagonal number is a centered figurate number that represents a hexagon with a dot in the center\n    and all other dots surrounding it in a hexagonal lattice. The nth centered hexagonal number is given by the formula:\n    H_n = 3n(n - 1) + 1\n\n    Args:\n        n (int): The position in the sequence, where n >= 0.\n\n    Returns:\n        int: The nth centered hexagonal number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    return 3 * n * (n - 1) + 1\n", "from typing import List\n## main.py\n\ndef centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n\n    The nth centered hexagonal number is given by the formula:\n    3n^2 - 3n + 1\n\n    Args:\n        n (int): The position in the sequence, must be a positive integer.\n\n    Returns:\n        int: The nth centered hexagonal number.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return 3 * n**2 - 3 * n + 1\n", "from typing import List\n## main.py\n\ndef centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n\n    Args:\n        n (int): The position in the sequence, where n >= 1.\n\n    Returns:\n        int: The nth centered hexagonal number.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return 3 * n * n - 3 * n + 1\n", "from typing import List\n## main.py\n\ndef centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n\n    Args:\n        n (int): The position in the sequence, where n >= 1.\n\n    Returns:\n        int: The nth centered hexagonal number.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return 3 * n * n - 3 * n + 1\n", "from typing import List\n## main.py\n\ndef centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n\n    Args:\n        n (int): The position in the sequence, must be a non-negative integer.\n\n    Returns:\n        int: The nth centered hexagonal number.\n\n    Raises:\n        ValueError: If the input is not a non-negative integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    return 3 * n * n - 3 * n + 1\n", "from typing import List\n## main.py\n\ndef centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n\n    Args:\n        n (int): The position in the sequence, where n >= 1.\n\n    Returns:\n        int: The nth centered hexagonal number.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n**2 - (n - 1)**2\n\n# Example usage:\n# print(centered_hexagonal_number(1))  # Output: 1\n# print(centered_hexagonal_number(2))  # Output: 7\n# print(centered_hexagonal_number(3))  # Output: 19\n", "from typing import List\n## main.py\n\ndef centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n\n    The nth centered hexagonal number is given by the formula:\n    3n^2 - 3n + 1\n\n    Args:\n        n (int): The position in the sequence, must be a positive integer.\n\n    Returns:\n        int: The nth centered hexagonal number.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return 3 * n**2 - 3 * n + 1\n", "from typing import List\n## main.py\n\ndef centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n\n    The nth centered hexagonal number is given by the formula:\n    3n^2 - 3n + 1\n\n    Args:\n        n (int): The position in the sequence, must be a positive integer.\n\n    Returns:\n        int: The nth centered hexagonal number.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return 3 * n**2 - 3 * n + 1\n", "from typing import List\n## main.py\n\ndef centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n\n    The nth centered hexagonal number can be calculated using the formula:\n    3n^2 - 3n + 1\n\n    Args:\n        n (int): The position in the sequence, must be a positive integer.\n\n    Returns:\n        int: The nth centered hexagonal number.\n\n    Raises:\n        ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return 3 * n**2 - 3 * n + 1\n", "from typing import List\n## main.py\n\ndef centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n\n    The nth centered hexagonal number is given by the formula:\n    3n^2 - 3n + 1\n\n    Args:\n        n (int): The position in the sequence, where n >= 1.\n\n    Returns:\n        int: The nth centered hexagonal number.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return 3 * n**2 - 3 * n + 1\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that calculates the nth centered hexagonal number. This number represents a hexagonal pattern with a central dot and surrounding dots forming layers. The function should be efficient and accurate in computing the nth number.\nrequirement pool:\n- The main code should accurately calculate the nth centered hexagonal number.\n- The function should be optimized for performance.\n- Implement user input for the number of the hexagonal layer to calculate.\n- Ensure the function is clear and easy to understand.\n- Include basic error handling for invalid inputs.\nTo create a function that calculates the nth centered hexagonal number, we can use a mathematical formula that directly computes the number based on the layer input. This approach is efficient and straightforward, leveraging basic arithmetic operations.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth centered hexagonal number. Centered hexagonal numbers represent a hexagonal pattern with a central dot and surrounding dots forming layers. This is a mathematical sequence that can be calculated using a specific formula.\nrequirement pool:\n- The main code should include a function to calculate the nth centered hexagonal number.\n- The function should be efficient and handle edge cases such as very large values of n.\n- Implement error handling to manage invalid inputs like non-integer values for n.\n- Ensure the function is well-documented and includes comments explaining the logic.\n- Include unit tests to verify the correctness of the function.\nTo implement the function centered_hexagonal_number, we will use a mathematical formula that calculates the nth centered hexagonal number. The formula for the nth centered hexagonal number is given by (3n^2 - 3n + 1). This formula is efficient and can handle large values of n without significant performance issues.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth centered hexagonal number. Centered hexagonal numbers represent a hexagonal pattern with a central dot and surrounding dots forming layers. This is a mathematical sequence that can be calculated using a specific formula.\nrequirement pool:\n- The main code should include a function to calculate the nth centered hexagonal number.\n- The function should be efficient and handle edge cases such as very large values of n.\n- Implement error handling to manage invalid inputs like non-integer values for n.\n- Ensure the function is well-documented and includes comments explaining the logic.\n- Include unit tests to verify the correctness of the function.\nTo implement the function centered_hexagonal_number, we will use a mathematical formula that calculates the nth centered hexagonal number. The formula is based on the sequence of centered hexagonal numbers, which can be represented as 1, 7, 19, 37, 61, etc. The formula to calculate the nth centered hexagonal number is (3n^2 - 3n + 1). This formula is efficient and can handle large values of n without significant performance issues.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth centered hexagonal number. Centered hexagonal numbers are a sequence of numbers that can be represented in a hexagonal pattern with a dot in the center and surrounding dots forming hexagonal layers. This sequence has practical applications in geometry and pattern design.\nrequirement pool:\n- The main code should accurately calculate the nth centered hexagonal number using a mathematical formula.\n- The function should be optimized for performance to handle large values of n efficiently.\n- The function should include error handling to manage invalid inputs such as non-integer values for n.\n- The function should be documented with clear comments and a proper docstring.\n- The function should be tested with various test cases to ensure accuracy and robustness.\nTo create a function that calculates the nth centered hexagonal number, we will use a mathematical formula that directly computes the nth term in the sequence. This formula is based on the hexagonal tiling pattern, where each layer adds more dots in a hexagonal shape around the central dot. The formula for the nth centered hexagonal number is (3n^2 - 3n + 1). This approach ensures efficiency and accuracy in calculating large numbers without the need for complex data structures or external libraries.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth centered hexagonal number. Centered hexagonal numbers represent a hexagonal pattern with a central dot and surrounding dots forming layers. This is a mathematical sequence that can be calculated using a specific formula.\nrequirement pool:\n- The main code should include a function to calculate the nth centered hexagonal number.\n- The function should be efficient and handle edge cases such as negative numbers or large values of n.\n- Implement error handling to manage invalid inputs like non-integer values for n.\n- Ensure the function is well-documented and includes comments explaining the logic.\n- Include unit tests to verify the correctness of the function.\nTo implement the function centered_hexagonal_number, we will use a mathematical formula that calculates the nth centered hexagonal number. The formula for the nth centered hexagonal number is given by (3n^2 - 3n + 1). This formula is straightforward and efficient for our purpose. We will implement this formula in a Python function and handle potential edge cases such as non-integer inputs by raising an error.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth centered hexagonal number. Centered hexagonal numbers represent a hexagonal pattern with a central dot and surrounding dots forming layers. This is a mathematical sequence that can be calculated using a specific formula.\nrequirement pool:\n- The main code should include a function to calculate the nth centered hexagonal number.\n- The function should be efficient and handle edge cases such as very large values of n.\n- Implement error handling to manage invalid inputs like non-integer values for n.\n- Ensure the function is well-documented and includes comments explaining the logic.\n- Include unit tests to verify the correctness of the function.\nTo implement the function centered_hexagonal_number, we will use a mathematical formula that calculates the nth centered hexagonal number. The formula is based on the sequence of centered hexagonal numbers, which can be represented as n^2 - (n-1)^2. This formula efficiently computes the nth number in the sequence without the need for complex data structures or external libraries.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth centered hexagonal number. Centered hexagonal numbers represent a hexagonal pattern with a central dot and surrounding dots forming layers. This is a mathematical sequence that can be calculated using a specific formula.\nrequirement pool:\n- The main code should include a function to calculate the nth centered hexagonal number.\n- The function should be efficient and handle edge cases such as negative numbers or non-integer inputs.\n- Implement error handling to manage invalid inputs gracefully.\n- Ensure the function is well-documented and easy to understand.\n- Include unit tests to verify the correctness of the function.\nTo implement the function centered_hexagonal_number, we will use a mathematical formula that calculates the nth centered hexagonal number. The formula for the nth centered hexagonal number is given by (3n^2 - 3n + 1). This formula directly computes the number based on the input integer n.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth centered hexagonal number. Centered hexagonal numbers represent a hexagonal pattern with a central dot and surrounding dots forming layers. This is a mathematical sequence that can be calculated using a specific formula.\nrequirement pool:\n- The main code should include a function to calculate the nth centered hexagonal number.\n- The function should be efficient and handle edge cases such as negative numbers or large values of n.\n- Implement error handling to manage invalid inputs like non-integer values for n.\n- Ensure the function is well-documented and includes comments explaining the logic.\n- Include unit tests to verify the correctness of the function.\nTo implement the function centered_hexagonal_number, we will use a mathematical formula that calculates the nth centered hexagonal number. The formula for the nth centered hexagonal number is given by (3n^2 - 3n + 1). This formula is straightforward and efficient for our purpose.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth centered hexagonal number. Centered hexagonal numbers are a sequence of numbers that form a hexagonal pattern with a dot in the center and surrounding dots forming hexagonal layers. The function should be efficient and able to handle a range of inputs.\nrequirement pool:\n- The main code should accurately calculate the nth centered hexagonal number.\n- The function should be optimized for performance to handle larger inputs efficiently.\n- The function should be well-documented for easy understanding and usage.\n- The function should include error handling to manage unexpected inputs.\n- The function should be tested with various edge cases to ensure accuracy.\nTo create a function that calculates the nth centered hexagonal number, we will use a mathematical formula that directly computes the nth term of the sequence. This approach ensures efficiency and accuracy. The formula for the nth centered hexagonal number is given by (3n^2 - 3n + 1). We will implement this formula in a Python function, ensuring it handles basic error checking for non-integer inputs.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth centered hexagonal number. Centered hexagonal numbers represent a hexagonal pattern with a central dot and surrounding dots forming layers. This is a mathematical sequence that can be calculated using a specific formula.\nrequirement pool:\n- The main code should include a function to calculate the nth centered hexagonal number.\n- The function should be efficient and handle edge cases such as negative numbers or large values of n.\n- Implement error handling to manage invalid inputs like non-integer values for n.\n- Ensure the function is well-documented and includes comments explaining the logic.\n- Include unit tests to verify the correctness of the function.\nTo implement the function centered_hexagonal_number, we will use a mathematical formula that calculates the nth centered hexagonal number. The formula for the nth centered hexagonal number is given by (3n^2 - 3n + 1). This formula is straightforward and efficient for our purpose.\n"], "test": ["def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(10) == 271", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(2) == 7", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(9) == 217", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(8) == 169", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(7) == 127", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(11) == 331", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(6) == 91", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(11) == 331", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(9) == 217", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(7) == 127", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(7) == 127", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(15) == 631", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(14) == 547", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(10) == 271", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(9) == 217", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(9) == 217", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(13) == 469", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(8) == 169", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(7) == 127", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(10) == 271", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(15) == 631", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(7) == 127", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(15) == 631", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(10) == 271", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(10) == 271", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(12) == 397", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(9) == 217", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(7) == 127", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(13) == 469", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(5) == 61", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(10) == 271", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(9) == 217", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(8) == 169", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(12) == 397", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(14) == 547", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(13) == 469", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(4) == 37", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(5) == 61", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(2) == 7", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(2) == 7", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(2) == 7", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(6) == 91", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(5) == 61", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(7) == 127", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(1) == 1", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(4) == 37", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(5) == 61", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(5) == 61", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(5) == 61", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(1) == 1", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(2) == 7", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(6) == 91", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(1) == 1", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(6) == 91", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(2) == 7", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(7) == 127", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(5) == 61", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(6) == 91", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(5) == 61", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(1) == 1", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(3) == 19", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(2) == 7", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(7) == 127", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(2) == 7", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(6) == 91", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(2) == 7", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(5) == 61", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(3) == 19", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(5) == 61", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(13) == 469", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(11) == 331", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(8) == 169", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(9) == 217", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(4) == 37", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(10) == 271", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(12) == 397", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(12) == 397", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(10) == 271", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(11) == 331", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(8) == 169", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(12) == 397", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(6) == 91", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(8) == 169", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(13) == 469", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(5) == 61", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(14) == 547", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(7) == 127", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(12) == 397", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(14) == 547", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(9) == 217", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(13) == 469", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(7) == 127", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(8) == 169", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(11) == 331", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(8) == 169", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(14) == 547", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(14) == 547", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(11) == 331", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(13) == 469", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(9) == 217", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(4) == 37", "def check(centered_hexagonal_number):\n\tassert centered_hexagonal_number(13) == 469"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 0.0392, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, false, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 4, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n\n    The nth centered hexagonal number is given by the formula:\n    3n^2 - 3n + 1\n\n    Args:\n        n (int): The position in the sequence, where n >= 1.\n\n    Returns:\n        int: The nth centered hexagonal number.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return 3 * n**2 - 3 * n + 1\n", "passed": true, "pass": true, "pass_num": 9, "round": 780, "mutate_method": "add_1_sentence_at_end", "parent_index": 31}
