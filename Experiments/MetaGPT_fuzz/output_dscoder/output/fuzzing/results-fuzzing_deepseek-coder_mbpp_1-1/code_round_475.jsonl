{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 130, "prompt": "Create a function to identify the element that appears most frequently in a specified list.", "code": "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]", "test_imports": [], "test_list": ["assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)", "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)", "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)", "assert max_occurrences([3, 2, 8, 3, 11, 10, 5, 1, 3, 3, 4, 6, 2, 5, 6, 7, 6, 2, 4, 6, 7]) == (3, 4)", "assert max_occurrences([5, 6, 7, 8, 12, 14, 13, 2, 10, 3, 2, 5, 5, 3, 7, 7, 1, 10, 4, 1, 2]) == (5, 3)", "assert max_occurrences([7, 8, 13, 5, 12, 13, 3, 4, 10, 6, 1, 4, 4, 1, 6, 5, 6, 2, 14, 3, 3]) == (3, 3)", "assert max_occurrences([5, 2, 5, 7, 6, 8, 10, 1, 2, 2, 5, 6, 2, 1, 6, 4, 8, 8, 9, 5, 2]) == (2, 5)", "assert max_occurrences([7, 4, 6, 6, 6, 5, 6, 3, 10, 4, 6, 2, 3, 7, 8, 3, 4, 3, 5, 6, 2]) == (6, 6)", "assert max_occurrences([5, 1, 3, 4, 6, 14, 10, 3, 8, 1, 3, 9, 4, 3, 5, 2, 4, 1, 11, 6, 6]) == (3, 4)", "assert max_occurrences([6, 5, 8, 3, 4, 4, 9, 2, 11, 4, 2, 6, 4, 5, 7, 2, 4, 1, 14, 4, 5]) == (4, 6)", "assert max_occurrences([2, 6, 7, 3, 7, 7, 8, 2, 9, 3, 4, 4, 2, 7, 6, 1, 1, 7, 12, 5, 2]) == (7, 5)", "assert max_occurrences([5, 4, 9, 1, 3, 7, 9, 1, 7, 5, 5, 2, 6, 4, 1, 7, 1, 5, 6, 4, 4]) == (5, 4)", "assert max_occurrences([6, 8, 9, 8, 8, 8, 11, 6, 11, 9, 6, 9, 5, 1, 4, 5, 1, 5, 13, 4, 6]) == (6, 4)", "assert max_occurrences([7, 6, 7, 5, 7, 10, 3, 6, 2, 9, 2, 1, 4, 6, 5, 7, 9, 7, 4, 4, 5]) == (7, 5)", "assert max_occurrences([7, 3, 9, 8, 12, 6, 8, 4, 10, 7, 2, 6, 6, 3, 1, 1, 6, 10, 7, 2, 6]) == (6, 5)", "assert max_occurrences([5, 3, 10, 7, 10, 8, 7, 1, 11, 3, 3, 6, 1, 2, 8, 5, 2, 3, 9, 4, 2]) == (3, 4)", "assert max_occurrences([4, 1, 5, 3, 10, 12, 10, 4, 9, 7, 3, 8, 2, 5, 6, 5, 3, 11, 10, 6, 7]) == (5, 3)", "assert max_occurrences([7, 4, 9, 7, 8, 10, 11, 3, 11, 9, 6, 9, 5, 7, 7, 7, 9, 10, 11, 6, 3]) == (7, 5)", "assert max_occurrences([4, 8, 4, 5, 4, 13, 13, 2, 10, 7, 6, 7, 2, 5, 5, 6, 2, 7, 13, 6, 5]) == (5, 4)", "assert max_occurrences([7, 7, 8, 3, 2, 6, 5, 3, 8, 2, 2, 10, 6, 2, 8, 4, 8, 4, 5, 3, 4]) == (8, 4)", "assert max_occurrences([6, 4, 3, 6, 10, 7, 8, 4, 4, 10, 5, 11, 4, 5, 8, 3, 2, 8, 6, 3, 6]) == (6, 4)", "assert max_occurrences([6, 3, 7, 1, 2, 10, 10, 7, 3, 7, 2, 6, 2, 2, 1, 5, 8, 9, 14, 1, 7]) == (7, 4)", "assert max_occurrences([5, 7, 6, 7, 11, 14, 5, 5, 1, 10, 3, 7, 1, 7, 4, 7, 2, 7, 14, 4, 2]) == (7, 6)", "assert max_occurrences([5, 6, 11, 7, 3, 11, 7, 2, 9, 5, 6, 1, 1, 6, 4, 7, 8, 10, 6, 2, 1]) == (6, 4)", "assert max_occurrences([2, 4, 6, 9, 5, 8, 3, 1, 11, 7, 5, 11, 5, 2, 2, 3, 7, 5, 6, 6, 2]) == (2, 4)", "assert max_occurrences([1, 4, 6, 8, 6, 5, 7, 6, 10, 3, 1, 2, 4, 4, 7, 2, 2, 6, 11, 5, 1]) == (6, 4)", "assert max_occurrences([3, 8, 12, 8, 6, 7, 6, 1, 8, 6, 3, 7, 1, 2, 1, 6, 9, 10, 13, 4, 2]) == (6, 4)", "assert max_occurrences([3, 3, 13, 8, 10, 14, 10, 3, 4, 8, 5, 1, 2, 4, 8, 4, 2, 7, 8, 4, 7]) == (8, 4)", "assert max_occurrences([4, 2, 11, 3, 9, 4, 8, 6, 4, 1, 4, 4, 5, 4, 4, 5, 7, 7, 14, 1, 4]) == (4, 8)", "assert max_occurrences([6, 3, 4, 4, 6, 7, 10, 5, 3, 6, 4, 2, 4, 6, 3, 6, 9, 9, 14, 1, 4]) == (6, 5)", "assert max_occurrences([3, 1, 5, 2, 4, 8, 8, 7, 5, 10, 1, 7, 2, 2, 8, 5, 8, 5, 6, 6, 1]) == (5, 4)", "assert max_occurrences([7, 6, 8, 4, 6, 12, 11, 2, 9, 3, 1, 10, 4, 5, 6, 7, 8, 1, 13, 6, 2]) == (6, 4)", "assert max_occurrences([6, 8, 12, 1, 10, 12, 5, 2, 7, 4, 3, 5, 3, 2, 2, 2, 5, 8, 12, 2, 4]) == (2, 5)", "assert max_occurrences([4, 2, 8, 8, 3, 9, 7, 5, 3, 9, 4, 6, 1, 1, 8, 1, 6, 1, 11, 6, 1]) == (1, 5)", "assert max_occurrences([7, 2, 7, 1, 9, 5, 4, 1, 2, 3, 6, 5, 5, 2, 2, 5, 9, 10, 12, 1, 1]) == (2, 4)", "assert max_occurrences([5, 8, 4, 7, 3, 4, 12, 6, 4, 7, 6, 10, 4, 7, 8, 4, 7, 8, 7, 2, 5]) == (4, 5)", "assert max_occurrences([5, 3, 8, 2, 10, 14, 9, 4, 11, 17, 10, 9, 10, 17, 13, 17, 16]) == (10, 3)", "assert max_occurrences([4, 5, 4, 5, 3, 4, 13, 12, 13, 10, 16, 14, 14, 18, 12, 14, 14]) == (14, 4)", "assert max_occurrences([6, 4, 11, 8, 5, 11, 6, 5, 6, 18, 9, 14, 10, 9, 20, 14, 18]) == (6, 3)", "assert max_occurrences([2, 7, 9, 5, 2, 4, 11, 3, 8, 14, 11, 14, 14, 8, 20, 20, 21]) == (14, 3)", "assert max_occurrences([4, 1, 12, 6, 5, 10, 5, 2, 7, 10, 13, 7, 7, 13, 16, 14, 18]) == (7, 3)", "assert max_occurrences([3, 6, 12, 6, 6, 5, 5, 9, 11, 14, 19, 14, 11, 12, 11, 17, 16]) == (6, 3)", "assert max_occurrences([1, 2, 4, 3, 4, 14, 11, 10, 10, 12, 13, 13, 11, 15, 14, 11, 18]) == (11, 3)", "assert max_occurrences([7, 6, 7, 8, 4, 13, 11, 3, 10, 20, 9, 5, 7, 8, 20, 18, 21]) == (7, 3)", "assert max_occurrences([1, 3, 12, 6, 3, 10, 7, 6, 4, 20, 19, 5, 15, 8, 20, 18, 15]) == (3, 2)", "assert max_occurrences([5, 5, 5, 8, 2, 8, 12, 11, 7, 11, 11, 10, 9, 11, 12, 17, 16]) == (11, 4)", "assert max_occurrences([3, 6, 8, 4, 7, 13, 11, 5, 6, 13, 9, 12, 17, 18, 12, 20, 13]) == (13, 3)", "assert max_occurrences([5, 1, 3, 5, 9, 14, 10, 9, 4, 12, 12, 5, 13, 11, 13, 17, 22]) == (5, 3)", "assert max_occurrences([5, 1, 5, 4, 4, 9, 12, 9, 4, 14, 11, 11, 7, 16, 18, 15, 23]) == (4, 3)", "assert max_occurrences([7, 2, 10, 1, 3, 11, 4, 12, 13, 11, 13, 10, 15, 16, 19, 20, 23]) == (10, 2)", "assert max_occurrences([6, 7, 8, 9, 6, 11, 4, 10, 10, 15, 19, 11, 11, 16, 19, 20, 15]) == (11, 3)", "assert max_occurrences([7, 4, 13, 9, 11, 14, 5, 3, 13, 14, 18, 7, 17, 13, 14, 14, 13]) == (13, 4)", "assert max_occurrences([7, 2, 12, 9, 2, 11, 10, 5, 7, 17, 10, 7, 16, 8, 20, 13, 19]) == (7, 3)", "assert max_occurrences([5, 2, 4, 3, 6, 8, 9, 5, 9, 13, 18, 8, 17, 9, 21, 18, 14]) == (9, 3)", "assert max_occurrences([2, 7, 8, 9, 3, 7, 9, 8, 5, 16, 10, 7, 15, 15, 17, 19, 18]) == (7, 3)", "assert max_occurrences([2, 8, 5, 6, 9, 4, 13, 6, 13, 13, 14, 11, 7, 11, 15, 21, 15]) == (13, 3)", "assert max_occurrences([1, 6, 10, 8, 8, 9, 9, 8, 9, 20, 17, 14, 16, 17, 12, 15, 16]) == (8, 3)", "assert max_occurrences([6, 6, 10, 3, 2, 12, 6, 7, 11, 16, 19, 11, 10, 15, 18, 20, 19]) == (6, 3)", "assert max_occurrences([4, 8, 13, 2, 8, 14, 3, 10, 6, 20, 16, 9, 16, 10, 13, 14, 21]) == (8, 2)", "assert max_occurrences([6, 8, 8, 1, 2, 13, 3, 8, 11, 18, 9, 10, 8, 14, 15, 17, 18]) == (8, 4)", "assert max_occurrences([5, 3, 7, 8, 12, 9, 10, 6, 14, 19, 18, 5, 8, 18, 21, 17, 21]) == (5, 2)", "assert max_occurrences([6, 4, 10, 1, 12, 8, 12, 3, 14, 19, 9, 6, 17, 14, 17, 11, 19]) == (6, 2)", "assert max_occurrences([2, 6, 12, 5, 7, 13, 5, 8, 11, 11, 11, 6, 11, 13, 15, 14, 19]) == (11, 4)", "assert max_occurrences([7, 4, 9, 2, 10, 13, 12, 12, 13, 18, 17, 8, 17, 12, 18, 14, 13]) == (13, 3)", "assert max_occurrences([7, 2, 5, 3, 10, 13, 8, 9, 7, 18, 12, 10, 10, 15, 18, 20, 18]) == (10, 3)", "assert max_occurrences([5, 5, 13, 3, 12, 12, 8, 4, 4, 20, 18, 11, 17, 8, 13, 19, 22]) == (5, 2)", "assert max_occurrences([1, 5, 12, 9, 9, 9, 11, 7, 11, 14, 12, 8, 13, 13, 12, 18, 22]) == (12, 3)", "assert max_occurrences([5, 4, 3, 6, 6, 9, 9, 2, 12, 13, 10, 15, 17, 14, 17, 13, 20]) == (6, 2)", "assert max_occurrences([3, 1, 7, 4, 9, 12, 11, 3, 13, 20, 13, 10, 12, 18, 15, 20, 15]) == (3, 2)", "assert max_occurrences([7, 20, 22, 31, 35, 87, 85, 48, 30, 18, 54, 13]) == (7, 1)", "assert max_occurrences([14, 18, 16, 27, 36, 91, 78, 50, 27, 15, 51, 5]) == (27, 2)", "assert max_occurrences([8, 23, 15, 27, 45, 89, 79, 47, 35, 16, 47, 14]) == (47, 2)", "assert max_occurrences([5, 20, 25, 29, 45, 95, 84, 51, 32, 19, 50, 10]) == (5, 1)", "assert max_occurrences([13, 15, 16, 28, 40, 94, 76, 54, 29, 25, 50, 11]) == (13, 1)", "assert max_occurrences([11, 22, 21, 25, 35, 88, 82, 52, 34, 21, 53, 14]) == (21, 2)", "assert max_occurrences([11, 24, 22, 25, 41, 86, 80, 48, 30, 21, 55, 7]) == (11, 1)", "assert max_occurrences([5, 16, 23, 26, 43, 91, 75, 51, 27, 20, 49, 15]) == (5, 1)", "assert max_occurrences([11, 21, 16, 33, 36, 85, 82, 54, 34, 16, 49, 6]) == (16, 2)", "assert max_occurrences([10, 17, 21, 28, 38, 92, 75, 55, 35, 16, 49, 9]) == (10, 1)", "assert max_occurrences([12, 20, 20, 27, 38, 91, 80, 51, 29, 21, 52, 10]) == (20, 2)", "assert max_occurrences([8, 22, 19, 31, 43, 87, 78, 48, 27, 21, 46, 11]) == (8, 1)", "assert max_occurrences([10, 19, 17, 26, 44, 90, 82, 51, 31, 15, 53, 10]) == (10, 2)", "assert max_occurrences([12, 19, 19, 34, 39, 93, 83, 51, 33, 21, 47, 7]) == (19, 2)", "assert max_occurrences([9, 24, 22, 30, 40, 91, 85, 50, 33, 20, 52, 7]) == (9, 1)", "assert max_occurrences([10, 18, 22, 25, 40, 92, 77, 51, 31, 21, 46, 13]) == (10, 1)", "assert max_occurrences([15, 25, 25, 35, 35, 88, 80, 51, 28, 20, 45, 6]) == (25, 2)", "assert max_occurrences([14, 23, 23, 25, 43, 93, 79, 51, 31, 25, 52, 7]) == (23, 2)", "assert max_occurrences([10, 21, 17, 33, 45, 87, 79, 45, 35, 21, 45, 14]) == (45, 3)", "assert max_occurrences([15, 16, 16, 32, 44, 93, 79, 49, 33, 17, 53, 13]) == (16, 2)", "assert max_occurrences([12, 19, 24, 35, 39, 89, 78, 47, 35, 17, 50, 11]) == (35, 2)", "assert max_occurrences([11, 23, 22, 25, 45, 93, 84, 46, 28, 18, 54, 13]) == (11, 1)", "assert max_occurrences([12, 25, 17, 26, 35, 87, 84, 52, 35, 19, 49, 11]) == (35, 2)", "assert max_occurrences([10, 25, 23, 25, 38, 93, 79, 51, 34, 17, 45, 14]) == (25, 2)", "assert max_occurrences([9, 22, 18, 26, 39, 88, 81, 49, 26, 17, 47, 15]) == (26, 2)", "assert max_occurrences([14, 17, 19, 34, 36, 89, 84, 55, 25, 22, 46, 8]) == (14, 1)", "assert max_occurrences([13, 15, 19, 26, 43, 93, 80, 52, 34, 20, 49, 11]) == (13, 1)", "assert max_occurrences([6, 25, 21, 26, 38, 86, 76, 54, 30, 18, 45, 11]) == (6, 1)", "assert max_occurrences([14, 25, 17, 35, 41, 86, 83, 48, 28, 18, 46, 12]) == (14, 1)", "assert max_occurrences([7, 25, 23, 26, 39, 92, 85, 51, 25, 18, 46, 6]) == (25, 2)", "assert max_occurrences([9, 15, 19, 35, 44, 94, 78, 47, 30, 15, 48, 9]) == (9, 2)", "assert max_occurrences([11, 17, 18, 26, 37, 88, 79, 52, 25, 15, 53, 7]) == (11, 1)", "assert max_occurrences([13, 24, 24, 35, 37, 89, 79, 50, 28, 20, 46, 14]) == (24, 2)"], "entry_point": "max_occurrences", "repair_prompt": ["Create a function max_occurrences to identify the element that appears most frequently in a specified list.\nmax_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n"], "completions": ["from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List, Optional, Tuple\n\ndef max_occurrences(lst: List[int]) -> Optional[Tuple[int, int]]:\n    \"\"\"\n    Returns the most frequent element along with its count from the given list.\n    \n    Args:\n        lst (List[int]): The list of integers to analyze.\n        \n    Returns:\n        Optional[Tuple[int, int]]: A tuple containing the most frequent element and its count,\n                                   or None if the list is empty.\n    \"\"\"\n    if not lst:\n        return None, 0\n    \n    most_common = Counter(lst).most_common(1)\n    if most_common:\n        return most_common[0]\n    else:\n        return None, 0\n", "from typing import List\n## main.py\n\nfrom collections import Counter\n\ndef max_occurrences(lst: list) -> tuple:\n    \"\"\"\n    Returns a tuple containing the most frequent element and its frequency from the given list.\n    \n    Args:\n        lst (list): The input list of elements.\n        \n    Returns:\n        tuple: A tuple where the first element is the most frequent element and the second element is its frequency.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"The input list is empty\")\n    \n    counter = Counter(lst)\n    most_common, frequency = counter.most_common(1)[0]\n    \n    return (most_common, frequency)\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List, Tuple\n\ndef max_occurrences(lst: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    Returns a tuple representing the most frequent element and its count in the list.\n    \n    Args:\n        lst (List[int]): The input list of integers.\n        \n    Returns:\n        Tuple[int, int]: A tuple where the first element is the most frequent element and the second element is its count.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"The input list is empty\")\n    \n    counter = Counter(lst)\n    most_common, count = counter.most_common(1)[0]\n    \n    return (most_common, count)\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List, Tuple\n\ndef max_occurrences(lst: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    Returns a tuple containing the most frequent element and its count from the input list.\n    \n    Args:\n        lst (List[int]): The input list of integers.\n        \n    Returns:\n        Tuple[int, int]: A tuple where the first element is the most frequent element and the second element is its count.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"The input list is empty\")\n    \n    counter = Counter(lst)\n    most_common, most_count = counter.most_common(1)[0]\n    \n    return most_common, most_count\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_occurrences(lst: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    This function takes a list of integers and returns a tuple containing the most frequent element and its count.\n    \n    Args:\n        lst (List[int]): The list of integers to analyze.\n        \n    Returns:\n        Tuple[int, int]: A tuple where the first element is the most frequent element and the second element is its count.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"The input list is empty\")\n    \n    # Dictionary to count occurrences of each element\n    count_dict = {}\n    \n    # Count occurrences of each element\n    for element in lst:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    \n    # Find the element with the maximum count\n    max_element = None\n    max_count = 0\n    for element, count in count_dict.items():\n        if count > max_count:\n            max_element = element\n            max_count = count\n    \n    if max_element is None:\n        raise ValueError(\"All elements in the list are the same\")\n    \n    return (max_element, max_count)\n\n# Example usage:\n# result = max_occurrences([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2])\n# print(result)  # Output: (2, 4)\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List, Tuple\n\ndef max_occurrences(lst: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    Returns a tuple representing the most frequent element and its count in the list.\n    \n    Args:\n        lst (List[int]): The input list of integers.\n        \n    Returns:\n        Tuple[int, int]: A tuple where the first element is the most frequent element and the second element is its count.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"The input list is empty\")\n    \n    counter = Counter(lst)\n    most_common, count = counter.most_common(1)[0]\n    \n    return (most_common, count)\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List, Tuple\n\ndef max_occurrences(lst: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    Returns a tuple representing the most frequent element and its count in the list.\n    \n    Args:\n        lst (List[int]): The input list of integers.\n        \n    Returns:\n        Tuple[int, int]: A tuple where the first element is the most frequent element and the second element is its count.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"The input list is empty\")\n    \n    counter = Counter(lst)\n    most_common, count = counter.most_common(1)[0]\n    \n    return (most_common, count)\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List, Tuple\n\ndef max_occurrences(lst: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    Returns a tuple representing the most frequent element and its count in the list.\n    \n    Args:\n        lst (List[int]): The input list of integers.\n        \n    Returns:\n        Tuple[int, int]: A tuple where the first element is the most frequent element and the second element is its count.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"The input list is empty\")\n    \n    counter = Counter(lst)\n    most_common, count = counter.most_common(1)[0]\n    \n    return (most_common, count)\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List, Tuple\n\ndef max_occurrences(lst: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    Returns a tuple containing the most frequent element and its frequency from the input list.\n    \n    Args:\n        lst (List[int]): The input list of integers.\n        \n    Returns:\n        Tuple[int, int]: A tuple where the first element is the most frequent element and the second element is its frequency.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"The input list is empty\")\n    \n    counter = Counter(lst)\n    most_common, frequency = counter.most_common(1)[0]\n    \n    return (most_common, frequency)\n", "from typing import List\n## main.py\n\nfrom collections import Counter\n\ndef max_occurrences(lst: list) -> tuple:\n    \"\"\"\n    The function takes a list and returns a tuple (element, count) where element is the most frequent and count is the number of times it appears.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"The input list must not be empty\")\n    \n    counter = Counter(lst)\n    most_common = counter.most_common(1)[0]\n    \n    return most_common\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that identifies the most frequent element in a list along with its count. This is a common problem in data analysis and should be implemented efficiently.\nrequirement pool:\n- The main code should be clear and concise.\n- The function should handle lists of various sizes efficiently.\n- The function should return a tuple containing the most frequent element and its count.\n- The function should handle edge cases such as empty lists or lists with no most frequent element.\nTo create a function that identifies the most frequent element in a list along with its count efficiently, we will use Python's built-in libraries and data structures. Specifically, we will utilize the 'collections.Counter' class from the Python standard library, which is designed to count hashable objects and is highly optimized for this purpose.\n", "requirement analysis:\nThe requirement is to create a function that identifies the element that appears most frequently in a list. This is a common problem in data analysis and can be efficiently solved using Python's collections module.\nrequirement pool:\n- The main code should be efficient and use Python's built-in functions for clarity and simplicity.\n- The function should handle lists of various sizes efficiently.\n- The function should return a tuple containing the most frequent element and its count.\nTo create a function that identifies the element that appears most frequently in a list, we will utilize Python's built-in functions for clarity and simplicity. Specifically, we will use the 'collections.Counter' class from the 'collections' module, which efficiently counts the frequency of elements in a list.\n", "requirement analysis:\nThe requirement is to create a function that identifies the element that appears most frequently in a list. This is a common problem in data analysis and can be efficiently solved using Python's collections module.\nrequirement pool:\n- The main code should be efficient and use Python's built-in functions for clarity and simplicity.\n- The function should handle lists of various sizes efficiently.\n- The function should return a tuple containing the most frequent element and its count.\nTo create a function that identifies the element that appears most frequently in a list, we will utilize Python's built-in functions for clarity and simplicity. Specifically, we will use the 'collections.Counter' class from the 'collections' module, which efficiently counts the frequency of elements in a list.\n", "requirement analysis:\nThe requirement is to create a function that identifies the element that appears most frequently in a list. This is a common problem in data analysis and can be efficiently solved using Python's collections module.\nrequirement pool:\n- The main code should be efficient and use Python's built-in functions for clarity and performance.\n- The function should handle lists of various sizes efficiently.\n- The function should return a tuple containing the most frequent element and its count.\nTo create a function that identifies the element that appears most frequently in a list, we will utilize Python's built-in functions for clarity and performance. Specifically, we will use the 'collections.Counter' class from the 'collections' module, which is designed to count hashable objects. This approach is efficient and leverages Python's standard library for optimal performance.\n", "requirement analysis:\nThe requirement is to create a function that identifies the most frequent element in a list. This is a common problem in data analysis and should be implemented efficiently. The function should return a tuple containing the element and its count.\nrequirement pool:\n- The main code should be clear and concise.\n- The function should handle lists of various sizes efficiently.\n- The function should be able to handle edge cases such as empty lists or lists with no most frequent element.\n- The function should be tested for performance and accuracy.\nTo create a function that identifies the most frequent element in a list efficiently, we will use Python's built-in data structures and libraries. The function will utilize a dictionary to count the occurrences of each element, and then find the element with the maximum count. This approach ensures both clarity and efficiency.\n", "requirement analysis:\nThe requirement is to create a function that identifies the element that appears most frequently in a list. This is a common problem in data analysis and can be efficiently solved using Python's collections module.\nrequirement pool:\n- The main code should be efficient and use Python's built-in functions for clarity and simplicity.\n- The function should handle lists of various sizes efficiently.\n- The function should return a tuple containing the most frequent element and its count.\nTo create a function that identifies the element that appears most frequently in a list, we will utilize Python's built-in functions for clarity and simplicity. Specifically, we will use the 'collections.Counter' class from the 'collections' module, which efficiently counts the frequency of elements in a list.\n", "requirement analysis:\nThe requirement is to create a function that identifies the element that appears most frequently in a list. This is a common problem in data analysis and can be efficiently solved using Python's collections module.\nrequirement pool:\n- The main code should be efficient and use Python's built-in functions for clarity and simplicity.\n- The function should handle lists of various sizes efficiently.\n- The function should return a tuple containing the most frequent element and its count.\nTo create a function that identifies the element that appears most frequently in a list, we will utilize Python's built-in functions for clarity and simplicity. Specifically, we will use the 'collections.Counter' class from the 'collections' module, which efficiently counts the frequency of elements in a list.\n", "requirement analysis:\nThe requirement is to create a function that identifies the element that appears most frequently in a list. This is a common problem in data analysis and can be efficiently solved using Python's collections module.\nrequirement pool:\n- The main code should be efficient and use Python's built-in functions for clarity and simplicity.\n- The function should handle lists of various sizes efficiently.\n- The function should return a tuple containing the most frequent element and its count.\nTo create a function that identifies the element that appears most frequently in a list, we will utilize Python's built-in functions for clarity and simplicity. Specifically, we will use the 'collections.Counter' class from the 'collections' module, which efficiently counts the frequency of elements in a list.\n", "requirement analysis:\nThe requirement is to create a function that identifies the element that appears most frequently in a list. This is a common problem in data analysis and can be efficiently solved using Python's collections module. The function should return a tuple containing the element and its frequency.\nrequirement pool:\n- The main code should be efficient and utilize Python's built-in functions for clarity and simplicity.\n- The function should handle lists of various sizes efficiently.\n- The function should be tested with different types of input to ensure robustness.\nTo create a function that identifies the element that appears most frequently in a list, we will utilize Python's built-in functions for clarity and simplicity. Specifically, we will use the 'collections.Counter' class from the 'collections' module, which efficiently counts the frequency of elements in a list.\n", "requirement analysis:\nThe requirement is to create a function that identifies the element that appears most frequently in a list. This is a common problem in data analysis and can be efficiently solved using Python's collections module.\nrequirement pool:\n- The main code should include a function max_occurrences that takes a list as input and returns a tuple containing the most frequent element and its count.\n- The function should handle edge cases such as empty lists or lists with no most frequent element.\n- The function should be optimized for performance, especially for large lists.\nTo create the function max_occurrences, we will utilize Python's collections module, specifically the Counter class from this module. This class will help us count the occurrences of each element in the list efficiently. We will then find the element with the maximum count using the max function combined with a lambda function to extract the count from the items of the Counter object.\n"], "test": ["def check(max_occurrences):\n\tassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)", "def check(max_occurrences):\n\tassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)", "def check(max_occurrences):\n\tassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)", "def check(max_occurrences):\n\tassert max_occurrences([3, 2, 8, 3, 11, 10, 5, 1, 3, 3, 4, 6, 2, 5, 6, 7, 6, 2, 4, 6, 7]) == (3, 4)", "def check(max_occurrences):\n\tassert max_occurrences([5, 6, 7, 8, 12, 14, 13, 2, 10, 3, 2, 5, 5, 3, 7, 7, 1, 10, 4, 1, 2]) == (5, 3)", "def check(max_occurrences):\n\tassert max_occurrences([7, 8, 13, 5, 12, 13, 3, 4, 10, 6, 1, 4, 4, 1, 6, 5, 6, 2, 14, 3, 3]) == (3, 3)", "def check(max_occurrences):\n\tassert max_occurrences([5, 2, 5, 7, 6, 8, 10, 1, 2, 2, 5, 6, 2, 1, 6, 4, 8, 8, 9, 5, 2]) == (2, 5)", "def check(max_occurrences):\n\tassert max_occurrences([7, 4, 6, 6, 6, 5, 6, 3, 10, 4, 6, 2, 3, 7, 8, 3, 4, 3, 5, 6, 2]) == (6, 6)", "def check(max_occurrences):\n\tassert max_occurrences([5, 1, 3, 4, 6, 14, 10, 3, 8, 1, 3, 9, 4, 3, 5, 2, 4, 1, 11, 6, 6]) == (3, 4)", "def check(max_occurrences):\n\tassert max_occurrences([6, 5, 8, 3, 4, 4, 9, 2, 11, 4, 2, 6, 4, 5, 7, 2, 4, 1, 14, 4, 5]) == (4, 6)", "def check(max_occurrences):\n\tassert max_occurrences([2, 6, 7, 3, 7, 7, 8, 2, 9, 3, 4, 4, 2, 7, 6, 1, 1, 7, 12, 5, 2]) == (7, 5)", "def check(max_occurrences):\n\tassert max_occurrences([5, 4, 9, 1, 3, 7, 9, 1, 7, 5, 5, 2, 6, 4, 1, 7, 1, 5, 6, 4, 4]) == (5, 4)", "def check(max_occurrences):\n\tassert max_occurrences([6, 8, 9, 8, 8, 8, 11, 6, 11, 9, 6, 9, 5, 1, 4, 5, 1, 5, 13, 4, 6]) == (6, 4)", "def check(max_occurrences):\n\tassert max_occurrences([7, 6, 7, 5, 7, 10, 3, 6, 2, 9, 2, 1, 4, 6, 5, 7, 9, 7, 4, 4, 5]) == (7, 5)", "def check(max_occurrences):\n\tassert max_occurrences([7, 3, 9, 8, 12, 6, 8, 4, 10, 7, 2, 6, 6, 3, 1, 1, 6, 10, 7, 2, 6]) == (6, 5)", "def check(max_occurrences):\n\tassert max_occurrences([5, 3, 10, 7, 10, 8, 7, 1, 11, 3, 3, 6, 1, 2, 8, 5, 2, 3, 9, 4, 2]) == (3, 4)", "def check(max_occurrences):\n\tassert max_occurrences([4, 1, 5, 3, 10, 12, 10, 4, 9, 7, 3, 8, 2, 5, 6, 5, 3, 11, 10, 6, 7]) == (5, 3)", "def check(max_occurrences):\n\tassert max_occurrences([7, 4, 9, 7, 8, 10, 11, 3, 11, 9, 6, 9, 5, 7, 7, 7, 9, 10, 11, 6, 3]) == (7, 5)", "def check(max_occurrences):\n\tassert max_occurrences([4, 8, 4, 5, 4, 13, 13, 2, 10, 7, 6, 7, 2, 5, 5, 6, 2, 7, 13, 6, 5]) == (5, 4)", "def check(max_occurrences):\n\tassert max_occurrences([7, 7, 8, 3, 2, 6, 5, 3, 8, 2, 2, 10, 6, 2, 8, 4, 8, 4, 5, 3, 4]) == (8, 4)", "def check(max_occurrences):\n\tassert max_occurrences([6, 4, 3, 6, 10, 7, 8, 4, 4, 10, 5, 11, 4, 5, 8, 3, 2, 8, 6, 3, 6]) == (6, 4)", "def check(max_occurrences):\n\tassert max_occurrences([6, 3, 7, 1, 2, 10, 10, 7, 3, 7, 2, 6, 2, 2, 1, 5, 8, 9, 14, 1, 7]) == (7, 4)", "def check(max_occurrences):\n\tassert max_occurrences([5, 7, 6, 7, 11, 14, 5, 5, 1, 10, 3, 7, 1, 7, 4, 7, 2, 7, 14, 4, 2]) == (7, 6)", "def check(max_occurrences):\n\tassert max_occurrences([5, 6, 11, 7, 3, 11, 7, 2, 9, 5, 6, 1, 1, 6, 4, 7, 8, 10, 6, 2, 1]) == (6, 4)", "def check(max_occurrences):\n\tassert max_occurrences([2, 4, 6, 9, 5, 8, 3, 1, 11, 7, 5, 11, 5, 2, 2, 3, 7, 5, 6, 6, 2]) == (2, 4)", "def check(max_occurrences):\n\tassert max_occurrences([1, 4, 6, 8, 6, 5, 7, 6, 10, 3, 1, 2, 4, 4, 7, 2, 2, 6, 11, 5, 1]) == (6, 4)", "def check(max_occurrences):\n\tassert max_occurrences([3, 8, 12, 8, 6, 7, 6, 1, 8, 6, 3, 7, 1, 2, 1, 6, 9, 10, 13, 4, 2]) == (6, 4)", "def check(max_occurrences):\n\tassert max_occurrences([3, 3, 13, 8, 10, 14, 10, 3, 4, 8, 5, 1, 2, 4, 8, 4, 2, 7, 8, 4, 7]) == (8, 4)", "def check(max_occurrences):\n\tassert max_occurrences([4, 2, 11, 3, 9, 4, 8, 6, 4, 1, 4, 4, 5, 4, 4, 5, 7, 7, 14, 1, 4]) == (4, 8)", "def check(max_occurrences):\n\tassert max_occurrences([6, 3, 4, 4, 6, 7, 10, 5, 3, 6, 4, 2, 4, 6, 3, 6, 9, 9, 14, 1, 4]) == (6, 5)", "def check(max_occurrences):\n\tassert max_occurrences([3, 1, 5, 2, 4, 8, 8, 7, 5, 10, 1, 7, 2, 2, 8, 5, 8, 5, 6, 6, 1]) == (5, 4)", "def check(max_occurrences):\n\tassert max_occurrences([7, 6, 8, 4, 6, 12, 11, 2, 9, 3, 1, 10, 4, 5, 6, 7, 8, 1, 13, 6, 2]) == (6, 4)", "def check(max_occurrences):\n\tassert max_occurrences([6, 8, 12, 1, 10, 12, 5, 2, 7, 4, 3, 5, 3, 2, 2, 2, 5, 8, 12, 2, 4]) == (2, 5)", "def check(max_occurrences):\n\tassert max_occurrences([4, 2, 8, 8, 3, 9, 7, 5, 3, 9, 4, 6, 1, 1, 8, 1, 6, 1, 11, 6, 1]) == (1, 5)", "def check(max_occurrences):\n\tassert max_occurrences([7, 2, 7, 1, 9, 5, 4, 1, 2, 3, 6, 5, 5, 2, 2, 5, 9, 10, 12, 1, 1]) == (2, 4)", "def check(max_occurrences):\n\tassert max_occurrences([5, 8, 4, 7, 3, 4, 12, 6, 4, 7, 6, 10, 4, 7, 8, 4, 7, 8, 7, 2, 5]) == (4, 5)", "def check(max_occurrences):\n\tassert max_occurrences([5, 3, 8, 2, 10, 14, 9, 4, 11, 17, 10, 9, 10, 17, 13, 17, 16]) == (10, 3)", "def check(max_occurrences):\n\tassert max_occurrences([4, 5, 4, 5, 3, 4, 13, 12, 13, 10, 16, 14, 14, 18, 12, 14, 14]) == (14, 4)", "def check(max_occurrences):\n\tassert max_occurrences([6, 4, 11, 8, 5, 11, 6, 5, 6, 18, 9, 14, 10, 9, 20, 14, 18]) == (6, 3)", "def check(max_occurrences):\n\tassert max_occurrences([2, 7, 9, 5, 2, 4, 11, 3, 8, 14, 11, 14, 14, 8, 20, 20, 21]) == (14, 3)", "def check(max_occurrences):\n\tassert max_occurrences([4, 1, 12, 6, 5, 10, 5, 2, 7, 10, 13, 7, 7, 13, 16, 14, 18]) == (7, 3)", "def check(max_occurrences):\n\tassert max_occurrences([3, 6, 12, 6, 6, 5, 5, 9, 11, 14, 19, 14, 11, 12, 11, 17, 16]) == (6, 3)", "def check(max_occurrences):\n\tassert max_occurrences([1, 2, 4, 3, 4, 14, 11, 10, 10, 12, 13, 13, 11, 15, 14, 11, 18]) == (11, 3)", "def check(max_occurrences):\n\tassert max_occurrences([7, 6, 7, 8, 4, 13, 11, 3, 10, 20, 9, 5, 7, 8, 20, 18, 21]) == (7, 3)", "def check(max_occurrences):\n\tassert max_occurrences([1, 3, 12, 6, 3, 10, 7, 6, 4, 20, 19, 5, 15, 8, 20, 18, 15]) == (3, 2)", "def check(max_occurrences):\n\tassert max_occurrences([5, 5, 5, 8, 2, 8, 12, 11, 7, 11, 11, 10, 9, 11, 12, 17, 16]) == (11, 4)", "def check(max_occurrences):\n\tassert max_occurrences([3, 6, 8, 4, 7, 13, 11, 5, 6, 13, 9, 12, 17, 18, 12, 20, 13]) == (13, 3)", "def check(max_occurrences):\n\tassert max_occurrences([5, 1, 3, 5, 9, 14, 10, 9, 4, 12, 12, 5, 13, 11, 13, 17, 22]) == (5, 3)", "def check(max_occurrences):\n\tassert max_occurrences([5, 1, 5, 4, 4, 9, 12, 9, 4, 14, 11, 11, 7, 16, 18, 15, 23]) == (4, 3)", "def check(max_occurrences):\n\tassert max_occurrences([7, 2, 10, 1, 3, 11, 4, 12, 13, 11, 13, 10, 15, 16, 19, 20, 23]) == (10, 2)", "def check(max_occurrences):\n\tassert max_occurrences([6, 7, 8, 9, 6, 11, 4, 10, 10, 15, 19, 11, 11, 16, 19, 20, 15]) == (11, 3)", "def check(max_occurrences):\n\tassert max_occurrences([7, 4, 13, 9, 11, 14, 5, 3, 13, 14, 18, 7, 17, 13, 14, 14, 13]) == (13, 4)", "def check(max_occurrences):\n\tassert max_occurrences([7, 2, 12, 9, 2, 11, 10, 5, 7, 17, 10, 7, 16, 8, 20, 13, 19]) == (7, 3)", "def check(max_occurrences):\n\tassert max_occurrences([5, 2, 4, 3, 6, 8, 9, 5, 9, 13, 18, 8, 17, 9, 21, 18, 14]) == (9, 3)", "def check(max_occurrences):\n\tassert max_occurrences([2, 7, 8, 9, 3, 7, 9, 8, 5, 16, 10, 7, 15, 15, 17, 19, 18]) == (7, 3)", "def check(max_occurrences):\n\tassert max_occurrences([2, 8, 5, 6, 9, 4, 13, 6, 13, 13, 14, 11, 7, 11, 15, 21, 15]) == (13, 3)", "def check(max_occurrences):\n\tassert max_occurrences([1, 6, 10, 8, 8, 9, 9, 8, 9, 20, 17, 14, 16, 17, 12, 15, 16]) == (8, 3)", "def check(max_occurrences):\n\tassert max_occurrences([6, 6, 10, 3, 2, 12, 6, 7, 11, 16, 19, 11, 10, 15, 18, 20, 19]) == (6, 3)", "def check(max_occurrences):\n\tassert max_occurrences([4, 8, 13, 2, 8, 14, 3, 10, 6, 20, 16, 9, 16, 10, 13, 14, 21]) == (8, 2)", "def check(max_occurrences):\n\tassert max_occurrences([6, 8, 8, 1, 2, 13, 3, 8, 11, 18, 9, 10, 8, 14, 15, 17, 18]) == (8, 4)", "def check(max_occurrences):\n\tassert max_occurrences([5, 3, 7, 8, 12, 9, 10, 6, 14, 19, 18, 5, 8, 18, 21, 17, 21]) == (5, 2)", "def check(max_occurrences):\n\tassert max_occurrences([6, 4, 10, 1, 12, 8, 12, 3, 14, 19, 9, 6, 17, 14, 17, 11, 19]) == (6, 2)", "def check(max_occurrences):\n\tassert max_occurrences([2, 6, 12, 5, 7, 13, 5, 8, 11, 11, 11, 6, 11, 13, 15, 14, 19]) == (11, 4)", "def check(max_occurrences):\n\tassert max_occurrences([7, 4, 9, 2, 10, 13, 12, 12, 13, 18, 17, 8, 17, 12, 18, 14, 13]) == (13, 3)", "def check(max_occurrences):\n\tassert max_occurrences([7, 2, 5, 3, 10, 13, 8, 9, 7, 18, 12, 10, 10, 15, 18, 20, 18]) == (10, 3)", "def check(max_occurrences):\n\tassert max_occurrences([5, 5, 13, 3, 12, 12, 8, 4, 4, 20, 18, 11, 17, 8, 13, 19, 22]) == (5, 2)", "def check(max_occurrences):\n\tassert max_occurrences([1, 5, 12, 9, 9, 9, 11, 7, 11, 14, 12, 8, 13, 13, 12, 18, 22]) == (12, 3)", "def check(max_occurrences):\n\tassert max_occurrences([5, 4, 3, 6, 6, 9, 9, 2, 12, 13, 10, 15, 17, 14, 17, 13, 20]) == (6, 2)", "def check(max_occurrences):\n\tassert max_occurrences([3, 1, 7, 4, 9, 12, 11, 3, 13, 20, 13, 10, 12, 18, 15, 20, 15]) == (3, 2)", "def check(max_occurrences):\n\tassert max_occurrences([7, 20, 22, 31, 35, 87, 85, 48, 30, 18, 54, 13]) == (7, 1)", "def check(max_occurrences):\n\tassert max_occurrences([14, 18, 16, 27, 36, 91, 78, 50, 27, 15, 51, 5]) == (27, 2)", "def check(max_occurrences):\n\tassert max_occurrences([8, 23, 15, 27, 45, 89, 79, 47, 35, 16, 47, 14]) == (47, 2)", "def check(max_occurrences):\n\tassert max_occurrences([5, 20, 25, 29, 45, 95, 84, 51, 32, 19, 50, 10]) == (5, 1)", "def check(max_occurrences):\n\tassert max_occurrences([13, 15, 16, 28, 40, 94, 76, 54, 29, 25, 50, 11]) == (13, 1)", "def check(max_occurrences):\n\tassert max_occurrences([11, 22, 21, 25, 35, 88, 82, 52, 34, 21, 53, 14]) == (21, 2)", "def check(max_occurrences):\n\tassert max_occurrences([11, 24, 22, 25, 41, 86, 80, 48, 30, 21, 55, 7]) == (11, 1)", "def check(max_occurrences):\n\tassert max_occurrences([5, 16, 23, 26, 43, 91, 75, 51, 27, 20, 49, 15]) == (5, 1)", "def check(max_occurrences):\n\tassert max_occurrences([11, 21, 16, 33, 36, 85, 82, 54, 34, 16, 49, 6]) == (16, 2)", "def check(max_occurrences):\n\tassert max_occurrences([10, 17, 21, 28, 38, 92, 75, 55, 35, 16, 49, 9]) == (10, 1)", "def check(max_occurrences):\n\tassert max_occurrences([12, 20, 20, 27, 38, 91, 80, 51, 29, 21, 52, 10]) == (20, 2)", "def check(max_occurrences):\n\tassert max_occurrences([8, 22, 19, 31, 43, 87, 78, 48, 27, 21, 46, 11]) == (8, 1)", "def check(max_occurrences):\n\tassert max_occurrences([10, 19, 17, 26, 44, 90, 82, 51, 31, 15, 53, 10]) == (10, 2)", "def check(max_occurrences):\n\tassert max_occurrences([12, 19, 19, 34, 39, 93, 83, 51, 33, 21, 47, 7]) == (19, 2)", "def check(max_occurrences):\n\tassert max_occurrences([9, 24, 22, 30, 40, 91, 85, 50, 33, 20, 52, 7]) == (9, 1)", "def check(max_occurrences):\n\tassert max_occurrences([10, 18, 22, 25, 40, 92, 77, 51, 31, 21, 46, 13]) == (10, 1)", "def check(max_occurrences):\n\tassert max_occurrences([15, 25, 25, 35, 35, 88, 80, 51, 28, 20, 45, 6]) == (25, 2)", "def check(max_occurrences):\n\tassert max_occurrences([14, 23, 23, 25, 43, 93, 79, 51, 31, 25, 52, 7]) == (23, 2)", "def check(max_occurrences):\n\tassert max_occurrences([10, 21, 17, 33, 45, 87, 79, 45, 35, 21, 45, 14]) == (45, 3)", "def check(max_occurrences):\n\tassert max_occurrences([15, 16, 16, 32, 44, 93, 79, 49, 33, 17, 53, 13]) == (16, 2)", "def check(max_occurrences):\n\tassert max_occurrences([12, 19, 24, 35, 39, 89, 78, 47, 35, 17, 50, 11]) == (35, 2)", "def check(max_occurrences):\n\tassert max_occurrences([11, 23, 22, 25, 45, 93, 84, 46, 28, 18, 54, 13]) == (11, 1)", "def check(max_occurrences):\n\tassert max_occurrences([12, 25, 17, 26, 35, 87, 84, 52, 35, 19, 49, 11]) == (35, 2)", "def check(max_occurrences):\n\tassert max_occurrences([10, 25, 23, 25, 38, 93, 79, 51, 34, 17, 45, 14]) == (25, 2)", "def check(max_occurrences):\n\tassert max_occurrences([9, 22, 18, 26, 39, 88, 81, 49, 26, 17, 47, 15]) == (26, 2)", "def check(max_occurrences):\n\tassert max_occurrences([14, 17, 19, 34, 36, 89, 84, 55, 25, 22, 46, 8]) == (14, 1)", "def check(max_occurrences):\n\tassert max_occurrences([13, 15, 19, 26, 43, 93, 80, 52, 34, 20, 49, 11]) == (13, 1)", "def check(max_occurrences):\n\tassert max_occurrences([6, 25, 21, 26, 38, 86, 76, 54, 30, 18, 45, 11]) == (6, 1)", "def check(max_occurrences):\n\tassert max_occurrences([14, 25, 17, 35, 41, 86, 83, 48, 28, 18, 46, 12]) == (14, 1)", "def check(max_occurrences):\n\tassert max_occurrences([7, 25, 23, 26, 39, 92, 85, 51, 25, 18, 46, 6]) == (25, 2)", "def check(max_occurrences):\n\tassert max_occurrences([9, 15, 19, 35, 44, 94, 78, 47, 30, 15, 48, 9]) == (9, 2)", "def check(max_occurrences):\n\tassert max_occurrences([11, 17, 18, 26, 37, 88, 79, 52, 25, 15, 53, 7]) == (11, 1)", "def check(max_occurrences):\n\tassert max_occurrences([13, 24, 24, 35, 37, 89, 79, 50, 28, 20, 46, 14]) == (24, 2)"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\nfrom collections import Counter\n\ndef max_occurrences(lst: list) -> tuple:\n    \"\"\"\n    The function takes a list and returns a tuple (element, count) where element is the most frequent and count is the number of times it appears.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"The input list must not be empty\")\n    \n    counter = Counter(lst)\n    most_common = counter.most_common(1)[0]\n    \n    return most_common\n", "passed": true, "pass": true, "pass_num": 10, "round": 475, "mutate_method": "rephrase_one", "parent_index": 58}
