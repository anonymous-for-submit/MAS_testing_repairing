{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 279, "prompt": "Write a function to calculate the nth decagonal number. The decagonal number is the number of dots in a pattern that forms a decagon.", "code": "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n ", "test_imports": [], "test_list": ["assert is_num_decagonal(3) == 27", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(10) == 370", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(1) == 1", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(1) == 1", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(1) == 1", "assert is_num_decagonal(1) == 1", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(1) == 1", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(10) == 370", "assert is_num_decagonal(11) == 451", "assert is_num_decagonal(6) == 126", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(12) == 540", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(6) == 126", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(10) == 370", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(11) == 451", "assert is_num_decagonal(12) == 540", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(12) == 540", "assert is_num_decagonal(6) == 126", "assert is_num_decagonal(10) == 370", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(15) == 855", "assert is_num_decagonal(12) == 540", "assert is_num_decagonal(15) == 855", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(14) == 742", "assert is_num_decagonal(13) == 637", "assert is_num_decagonal(6) == 126", "assert is_num_decagonal(10) == 370", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(10) == 370", "assert is_num_decagonal(15) == 855", "assert is_num_decagonal(9) == 297", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(14) == 742", "assert is_num_decagonal(6) == 126", "assert is_num_decagonal(12) == 540", "assert is_num_decagonal(11) == 451", "assert is_num_decagonal(11) == 451", "assert is_num_decagonal(11) == 451", "assert is_num_decagonal(13) == 637", "assert is_num_decagonal(10) == 370", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(15) == 855", "assert is_num_decagonal(13) == 637", "assert is_num_decagonal(13) == 637", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(10) == 370"], "entry_point": "is_num_decagonal", "repair_prompt": ["Write a function is_num_decagonal to calculate the nth decagonal number. The decagonal number is the number of dots in a pattern that forms a decagon.\nis_num_decagonal(3) == 27\n"], "completions": ["from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula: 4n^2 - 3n.\n\n    Args:\n        n (int): The position in the decagonal sequence.\n\n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    return 4 * n**2 - 3 * n\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula (3n^2 - 2n).\n\n    Args:\n        n (int): A positive integer representing the position in the decagonal sequence.\n\n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return 3 * n**2 - 2 * n\n\n# Example usage:\n# print(is_num_decagonal(5))  # Output: 55\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula 4n^2 - 3n.\n\n    Args:\n        n (int): The position in the decagonal sequence.\n\n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer.\")\n    \n    return 4 * n**2 - 3 * n\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula 4n^2 - 3n.\n\n    Args:\n        n (int): The position in the sequence.\n\n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return 4 * n**2 - 3 * n\n\n# Example usage:\n# print(is_num_decagonal(5))  # Output: 82\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    return 4 * n**2 - 3 * n\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula 4n^2 - 3n.\n\n    Args:\n        n (int): The position in the sequence.\n\n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return 4 * n**2 - 3 * n\n\n# Example usage:\n# print(is_num_decagonal(5))  # Output: 82\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula 4n^2 - 3n.\n\n    Args:\n        n (int): The position in the sequence of decagonal numbers.\n\n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return 4 * n**2 - 3 * n\n\n# Example usage:\n# print(is_num_decagonal(5))  # Output: 82\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula 4n^2 - 3n.\n\n    Args:\n        n (int): The position in the sequence.\n\n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return 4 * n**2 - 3 * n\n\n# Example usage:\n# print(is_num_decagonal(5))  # Output: 82\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula 4n^2 - 3n.\n\n    Args:\n        n (int): The position in the sequence.\n\n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return 4 * n**2 - 3 * n\n\n# Example usage:\n# print(is_num_decagonal(5))  # Output: 82\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula 4n^2 - 3n.\n\n    Args:\n        n (int): The position in the sequence.\n\n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return 4 * n**2 - 3 * n\n\n# Example usage:\n# print(is_num_decagonal(5))  # Output: 82\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that calculates the nth decagonal number. The decagonal number is a figurate number that represents the number of dots in a pattern that forms a decagon. The formula for the nth decagonal number is given by 4n^2 - 3n. This formula will be implemented in the function to compute the nth decagonal number.\nrequirement pool:\n- Implement the function is_num_decagonal to calculate the nth decagonal number using the formula 4n^2 - 3n.\nTo implement the function is_num_decagonal, we will use Python's mathematical capabilities to compute the nth decagonal number based on the given formula: 4n^2 - 3n. This calculation will be straightforward using Python's arithmetic operations and a simple function.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth decagonal number. The decagonal number is a figurate number that represents the number of dots in a decagon pattern. The formula for the nth decagonal number is given by (3n^2 - 2n). This function should be efficient and handle basic input validation.\nrequirement pool:\n- The main code should calculate the nth decagonal number using the formula (3n^2 - 2n).\n- The function should handle basic input validation to ensure the input is a positive integer.\n- Implement the function in Python, ensuring it is efficient and easy to understand.\n- Include comments in the code to explain the logic and steps.\nTo implement the function is_num_decagonal, we will use Python, leveraging its simplicity and efficiency. The function will calculate the nth decagonal number using the formula (3n^2 - 2n). We will ensure the function handles basic input validation to ensure the input is a positive integer.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth decagonal number. This number represents the number of dots in a decagon pattern. The formula for the nth decagonal number is given by 4n^2 - 3n. The function should be able to handle basic integer inputs and return the correct decagonal number.\nrequirement pool:\n- The main code should include a function is_num_decagonal that takes an integer n and returns the nth decagonal number.\n- The function should use the formula 4n^2 - 3n to calculate the decagonal number.\n- Ensure the function is tested with various inputs to verify its accuracy.\n- Include error handling to manage non-integer inputs gracefully.\n- Optimize the function for efficiency, especially for large values of n.\nTo implement the function is_num_decagonal, we will use Python's mathematical capabilities to compute the nth decagonal number based on the formula 4n^2 - 3n. This approach leverages basic arithmetic operations which are both efficient and straightforward.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth decagonal number. The decagonal number is a figurate number that represents the number of dots in a pattern that forms a decagon. The formula for the nth decagonal number is given by 4n^2 - 3n. This formula will be implemented in the function to compute the nth decagonal number.\nrequirement pool:\n- Implement the function to calculate the nth decagonal number using the formula 4n^2 - 3n.\n- Ensure the function is tested with various values of n to verify its accuracy.\n- Integrate the function into a user interface where users can input the value of n and get the corresponding decagonal number.\nWe will implement the function using Python, leveraging mathematical operations to compute the nth decagonal number based on the formula 4n^2 - 3n. This approach is straightforward and avoids the need for complex data structures or external libraries.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth decagonal number. The decagonal number is a figurate number that represents the number of dots in a pattern that forms a decagon. The formula for the nth decagonal number is given by 4n^2 - 3n. This formula will be implemented in the function to compute the nth decagonal number.\nrequirement pool:\n- Implement the function is_num_decagonal to calculate the nth decagonal number using the formula 4n^2 - 3n.\nTo implement the function is_num_decagonal, we will use Python, leveraging its simplicity and powerful standard library. The function will calculate the nth decagonal number using the formula 4n^2 - 3n. This calculation is straightforward and does not require complex data structures or external libraries.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth decagonal number. The decagonal number is a figurate number that represents the number of dots in a pattern that forms a decagon. The formula for the nth decagonal number is given by 4n^2 - 3n. This formula will be implemented in the function to compute the nth decagonal number.\nrequirement pool:\n- Implement the function to calculate the nth decagonal number using the formula 4n^2 - 3n.\n- Ensure the function is tested with various values of n to verify its accuracy.\n- Integrate the function into a user interface where users can input the value of n and get the corresponding decagonal number.\nWe will implement the function using Python, leveraging mathematical operations to compute the nth decagonal number based on the formula 4n^2 - 3n. This approach is straightforward and avoids the need for complex data structures or external libraries.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth decagonal number. The decagonal number is a figurate number that represents the number of dots in a decagon pattern. The formula for the nth decagonal number is given by 4n^2 - 3n. This function should be efficient and handle basic input validation.\nrequirement pool:\n- The main code should calculate the nth decagonal number using the formula 4n^2 - 3n.\n- The function should handle basic input validation to ensure the input is a positive integer.\n- Implement error handling to manage non-integer or negative inputs gracefully.\n- Ensure the function is optimized for performance, especially for large values of n.\n- Include comments in the code to explain the logic and steps for better understanding.\nTo implement the function is_num_decagonal, we will use Python's mathematical capabilities to compute the nth decagonal number using the formula 4n^2 - 3n. This approach leverages Python's strong support for arithmetic operations and ensures efficiency in calculation.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth decagonal number. The decagonal number is a figurate number that represents the number of dots in a pattern that forms a decagon. The formula for the nth decagonal number is given by 4n^2 - 3n. This formula will be implemented in the function to compute the nth decagonal number.\nrequirement pool:\n- Implement the function is_num_decagonal to calculate the nth decagonal number using the formula 4n^2 - 3n.\nWe will implement the function is_num_decagonal using Python, leveraging mathematical operations to compute the nth decagonal number based on the formula 4n^2 - 3n. This approach ensures simplicity and efficiency in calculation.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth decagonal number. The decagonal number is a figurate number that represents the number of dots in a decagon pattern. The formula for the nth decagonal number is given by 4n^2 - 3n. This formula will be implemented in the function to compute the nth decagonal number.\nrequirement pool:\n- Implement the function is_num_decagonal to calculate the nth decagonal number using the formula 4n^2 - 3n.\nTo implement the function is_num_decagonal, we will use Python, leveraging its simplicity and powerful standard library. The function will calculate the nth decagonal number using the formula 4n^2 - 3n. This calculation is straightforward and does not require complex data structures or external libraries.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth decagonal number. The decagonal number is a figurate number that represents the number of dots in a pattern that forms a decagon. The formula for the nth decagonal number is given by 4n^2 - 3n. This formula will be implemented in the function to compute the nth decagonal number.\nrequirement pool:\n- Implement the function is_num_decagonal to calculate the nth decagonal number using the formula 4n^2 - 3n.\nTo implement the function is_num_decagonal, we will use Python's mathematical capabilities to compute the nth decagonal number based on the formula 4n^2 - 3n. This calculation is straightforward and can be efficiently handled by Python's built-in arithmetic operations.\n"], "test": ["def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(1) == 1", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(1) == 1", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(1) == 1", "def check(is_num_decagonal):\n\tassert is_num_decagonal(1) == 1", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(1) == 1", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370", "def check(is_num_decagonal):\n\tassert is_num_decagonal(11) == 451", "def check(is_num_decagonal):\n\tassert is_num_decagonal(6) == 126", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(12) == 540", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(6) == 126", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(11) == 451", "def check(is_num_decagonal):\n\tassert is_num_decagonal(12) == 540", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(12) == 540", "def check(is_num_decagonal):\n\tassert is_num_decagonal(6) == 126", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(15) == 855", "def check(is_num_decagonal):\n\tassert is_num_decagonal(12) == 540", "def check(is_num_decagonal):\n\tassert is_num_decagonal(15) == 855", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(14) == 742", "def check(is_num_decagonal):\n\tassert is_num_decagonal(13) == 637", "def check(is_num_decagonal):\n\tassert is_num_decagonal(6) == 126", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370", "def check(is_num_decagonal):\n\tassert is_num_decagonal(15) == 855", "def check(is_num_decagonal):\n\tassert is_num_decagonal(9) == 297", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(14) == 742", "def check(is_num_decagonal):\n\tassert is_num_decagonal(6) == 126", "def check(is_num_decagonal):\n\tassert is_num_decagonal(12) == 540", "def check(is_num_decagonal):\n\tassert is_num_decagonal(11) == 451", "def check(is_num_decagonal):\n\tassert is_num_decagonal(11) == 451", "def check(is_num_decagonal):\n\tassert is_num_decagonal(11) == 451", "def check(is_num_decagonal):\n\tassert is_num_decagonal(13) == 637", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(15) == 855", "def check(is_num_decagonal):\n\tassert is_num_decagonal(13) == 637", "def check(is_num_decagonal):\n\tassert is_num_decagonal(13) == 637", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370"], "scores": [1.0, 0.049, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, false, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 5, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula 4n^2 - 3n.\n\n    Args:\n        n (int): The position in the sequence.\n\n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return 4 * n**2 - 3 * n\n\n# Example usage:\n# print(is_num_decagonal(5))  # Output: 82\n", "passed": true, "pass": true, "pass_num": 9, "round": 968, "mutate_method": "expand_one2two", "parent_index": 111}
