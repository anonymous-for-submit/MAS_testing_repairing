{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 641, "prompt": "Write a function to find the nth nonagonal number. The nonagonal number is part of a sequence of numbers. These numbers are part of the pattern or sequence known as nonagonal numbers.", "code": "def is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) ", "test_imports": [], "test_list": ["assert is_nonagonal(10) == 325", "assert is_nonagonal(15) == 750", "assert is_nonagonal(18) == 1089", "assert is_nonagonal(9) == 261", "assert is_nonagonal(5) == 75", "assert is_nonagonal(6) == 111", "assert is_nonagonal(14) == 651", "assert is_nonagonal(10) == 325", "assert is_nonagonal(15) == 750", "assert is_nonagonal(10) == 325", "assert is_nonagonal(5) == 75", "assert is_nonagonal(15) == 750", "assert is_nonagonal(13) == 559", "assert is_nonagonal(13) == 559", "assert is_nonagonal(12) == 474", "assert is_nonagonal(10) == 325", "assert is_nonagonal(5) == 75", "assert is_nonagonal(11) == 396", "assert is_nonagonal(13) == 559", "assert is_nonagonal(13) == 559", "assert is_nonagonal(14) == 651", "assert is_nonagonal(10) == 325", "assert is_nonagonal(15) == 750", "assert is_nonagonal(11) == 396", "assert is_nonagonal(15) == 750", "assert is_nonagonal(15) == 750", "assert is_nonagonal(7) == 154", "assert is_nonagonal(11) == 396", "assert is_nonagonal(7) == 154", "assert is_nonagonal(13) == 559", "assert is_nonagonal(6) == 111", "assert is_nonagonal(8) == 204", "assert is_nonagonal(9) == 261", "assert is_nonagonal(8) == 204", "assert is_nonagonal(15) == 750", "assert is_nonagonal(5) == 75", "assert is_nonagonal(19) == 1216", "assert is_nonagonal(16) == 856", "assert is_nonagonal(15) == 750", "assert is_nonagonal(19) == 1216", "assert is_nonagonal(11) == 396", "assert is_nonagonal(19) == 1216", "assert is_nonagonal(12) == 474", "assert is_nonagonal(11) == 396", "assert is_nonagonal(13) == 559", "assert is_nonagonal(12) == 474", "assert is_nonagonal(14) == 651", "assert is_nonagonal(19) == 1216", "assert is_nonagonal(11) == 396", "assert is_nonagonal(19) == 1216", "assert is_nonagonal(20) == 1350", "assert is_nonagonal(10) == 325", "assert is_nonagonal(18) == 1089", "assert is_nonagonal(12) == 474", "assert is_nonagonal(12) == 474", "assert is_nonagonal(14) == 651", "assert is_nonagonal(18) == 1089", "assert is_nonagonal(15) == 750", "assert is_nonagonal(13) == 559", "assert is_nonagonal(16) == 856", "assert is_nonagonal(10) == 325", "assert is_nonagonal(18) == 1089", "assert is_nonagonal(20) == 1350", "assert is_nonagonal(10) == 325", "assert is_nonagonal(19) == 1216", "assert is_nonagonal(16) == 856", "assert is_nonagonal(20) == 1350", "assert is_nonagonal(18) == 1089", "assert is_nonagonal(12) == 474", "assert is_nonagonal(20) == 1350", "assert is_nonagonal(14) == 651", "assert is_nonagonal(22) == 1639", "assert is_nonagonal(21) == 1491", "assert is_nonagonal(15) == 750", "assert is_nonagonal(20) == 1350", "assert is_nonagonal(22) == 1639", "assert is_nonagonal(21) == 1491", "assert is_nonagonal(23) == 1794", "assert is_nonagonal(20) == 1350", "assert is_nonagonal(16) == 856", "assert is_nonagonal(18) == 1089", "assert is_nonagonal(15) == 750", "assert is_nonagonal(15) == 750", "assert is_nonagonal(22) == 1639", "assert is_nonagonal(19) == 1216", "assert is_nonagonal(18) == 1089", "assert is_nonagonal(18) == 1089", "assert is_nonagonal(20) == 1350", "assert is_nonagonal(23) == 1794", "assert is_nonagonal(19) == 1216", "assert is_nonagonal(18) == 1089", "assert is_nonagonal(15) == 750", "assert is_nonagonal(19) == 1216", "assert is_nonagonal(20) == 1350", "assert is_nonagonal(15) == 750", "assert is_nonagonal(21) == 1491", "assert is_nonagonal(23) == 1794", "assert is_nonagonal(17) == 969", "assert is_nonagonal(22) == 1639", "assert is_nonagonal(17) == 969", "assert is_nonagonal(22) == 1639", "assert is_nonagonal(15) == 750"], "entry_point": "is_nonagonal", "repair_prompt": ["Write a function is_nonagonal to find the nth nonagonal number. The nonagonal number is part of a sequence of numbers. These numbers are part of the pattern or sequence known as nonagonal numbers.\nis_nonagonal(10) == 325\n"], "completions": ["from typing import List\n## main.py\n\ndef is_nonagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth nonagonal number using the formula (n * (7 * n - 5)) / 2.\n\n    Args:\n        n (int): The position in the nonagonal sequence.\n\n    Returns:\n        int: The nth nonagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return (n * (7 * n - 5)) // 2\n\n# Example usage:\n# print(is_nonagonal(1))  # Output: 1\n# print(is_nonagonal(2))  # Output: 12\n# print(is_nonagonal(3))  # Output: 27\n", "from typing import List\n## main.py\n\ndef is_nonagonal(n: int) -> int:\n    return (n * (7 * n - 5)) // 2\n", "from typing import List\n## main.py\n\ndef is_nonagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth nonagonal number using the formula (5n^2 - 5n + 2) / 2.\n\n    Args:\n        n (int): The position in the nonagonal sequence starting from 1.\n\n    Returns:\n        int: The nth nonagonal number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return (5 * n**2 - 5 * n + 2) // 2\n\n# Example usage:\n# print(is_nonagonal(1))  # Output: 1\n# print(is_nonagonal(2))  # Output: 6\n# print(is_nonagonal(3))  # Output: 15\n", "from typing import List\n## main.py\n\ndef is_nonagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth nonagonal number using the formula (5n^2 - 5n + 2) / 2.\n\n    Args:\n        n (int): The position in the nonagonal sequence starting from 1.\n\n    Returns:\n        int: The nth nonagonal number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return (5 * n**2 - 5 * n + 2) // 2\n\n# Example usage:\n# print(is_nonagonal(1))  # Output: 1\n# print(is_nonagonal(2))  # Output: 6\n# print(is_nonagonal(3))  # Output: 15\n", "from typing import List\n## main.py\n\ndef is_nonagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth nonagonal number using the formula (n * (7 * n - 5)) / 2.\n\n    Args:\n        n (int): The position in the nonagonal sequence.\n\n    Returns:\n        int: The nth nonagonal number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return (n * (7 * n - 5)) // 2\n\n# Example usage:\n# print(is_nonagonal(5))  # Output: 75\n", "from typing import List\n## main.py\n\ndef is_nonagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth nonagonal number.\n\n    Args:\n        n (int): The position in the nonagonal sequence.\n\n    Returns:\n        int: The nth nonagonal number.\n\n    Raises:\n        ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return (n * (7 * n - 5)) // 2\n\n# Example usage:\n# print(is_nonagonal(5))  # Output: 75\n", "from typing import List\n## main.py\n\ndef is_nonagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth nonagonal number.\n\n    Args:\n        n (int): The position in the nonagonal sequence.\n\n    Returns:\n        int: The nth nonagonal number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return (n * (7 * n - 5)) // 2\n\n# Example usage:\n# print(is_nonagonal(1))  # Output: 1\n# print(is_nonagonal(2))  # Output: 12\n# print(is_nonagonal(3))  # Output: 27\n", "from typing import List\n## main.py\n\nimport math\n\ndef is_nonagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth nonagonal number using the formula (5n^2 - 5n + 2) / 2.\n\n    Args:\n        n (int): The position in the nonagonal sequence.\n\n    Returns:\n        int: The nth nonagonal number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return (5 * n**2 - 5 * n + 2) // 2\n\n# Example usage:\n# print(is_nonagonal(1))  # Output: 1\n# print(is_nonagonal(2))  # Output: 6\n# print(is_nonagonal(3))  # Output: 15\n", "from typing import List\n## main.py\n\ndef is_nonagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth nonagonal number.\n\n    Args:\n        n (int): The position in the nonagonal sequence.\n\n    Returns:\n        int: The nth nonagonal number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return (n * (7 * n - 5)) // 2\n\n# Example usage:\n# print(is_nonagonal(5))  # Output: 75\n", "from typing import List\n## main.py\n\nimport typing\n\ndef is_nonagonal(n: int) -> typing.Union[int, str]:\n    \"\"\"\n    Calculate the nth nonagonal number using the formula (n * (7 * n - 5)) / 2.\n    Returns the nth nonagonal number if n is a positive integer, otherwise returns an error message.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        return \"Error: Input must be a positive integer.\"\n    \n    return (n * (7 * n - 5)) // 2\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that calculates the nth nonagonal number. Nonagonal numbers follow a specific mathematical sequence where each number is calculated using the formula (n * (7 * n - 5)) / 2. This formula is used to generate the nth nonagonal number.\nrequirement pool:\n- Implement the nonagonal number calculation formula.\n- Ensure the function is_nonagonal(n) returns the correct nonagonal number for a given n.\n- Develop a user-friendly interface for easy input of n.\n- Include a results display to show the calculated nonagonal number.\n- Optimize the UI for better user experience and responsiveness.\nWe will implement the nonagonal number calculation using a simple Python function that follows the given formula (n * (7 * n - 5)) / 2. This function will take an integer n as input and return the nth nonagonal number.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth nonagonal number. Nonagonal numbers follow a specific mathematical sequence where each number is calculated using the formula (n * (7 * n - 5)) / 2. This formula is used to generate the nth nonagonal number.\nrequirement pool:\n- The main code should include a function is_nonagonal(n) that calculates the nth nonagonal number using the formula (n * (7 * n - 5)) / 2.\nTo implement the function is_nonagonal(n) that calculates the nth nonagonal number, we will use Python's mathematical capabilities. The nonagonal number sequence can be generated using the formula (n * (7 * n - 5)) / 2. This formula directly translates into a simple arithmetic operation in Python, making the implementation straightforward.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth nonagonal number. Nonagonal numbers are part of a sequence where each number is generated by a specific formula. This sequence is useful in various mathematical and computational applications.\nrequirement pool:\n- The main code to calculate the nth nonagonal number\nTo calculate the nth nonagonal number, we will use a mathematical formula that generates nonagonal numbers. The formula for the nth nonagonal number is given by (5n^2 - 5n + 2) / 2, where n is the position in the sequence starting from 1.\n", "requirement analysis:\nThe requirement to create a function that calculates the nth nonagonal number is clear and specific. The function should be able to handle various values of n efficiently. The product should be user-friendly and provide accurate results. The performance should be optimized for large values of n to ensure smooth operation.\nrequirement pool:\n- Implement the formula to calculate the nth nonagonal number.\n- Ensure the function is optimized for performance.\n- Develop a user-friendly interface for easy interaction.\n- Include error handling to manage invalid inputs.\n- Provide documentation and examples to assist users.\nTo implement the function is_nonagonal, we will use a mathematical formula to calculate the nth nonagonal number directly. This approach ensures efficiency and accuracy. The formula for the nth nonagonal number is given by (5n^2 - 5n + 2) / 2, where n is the position in the sequence starting from 1.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth nonagonal number. Nonagonal numbers follow a specific mathematical sequence where each number is generated using the formula: (n * (7 * n - 5)) / 2. The function should be able to handle both small and large values of n efficiently.\nrequirement pool:\n- Implement the nonagonal number formula accurately\n- Ensure the function is optimized for performance\n- Include error handling for invalid inputs\n- Provide clear documentation and examples\n- Develop a user-friendly interface for easy interaction\nTo implement the function is_nonagonal, we will use Python's mathematical capabilities to directly compute the nth nonagonal number using the formula (n * (7 * n - 5)) / 2. This approach ensures both accuracy and efficiency in calculation.\n", "requirement analysis:\nThe primary requirement is to create a function that calculates the nth nonagonal number accurately. Secondary requirements include ensuring the function is user-friendly and efficient for large values of n. The function should be simple to understand and use, making it accessible for both mathematicians and students.\nrequirement pool:\n- The main code should accurately calculate the nth nonagonal number using the formula: (n * (7 * n - 5)) / 2.\n- The function should handle errors gracefully, such as non-integer inputs.\n- Implement a user-friendly interface for easy interaction and understanding.\n- Optimize the function to handle large values of n efficiently.\n- Include detailed documentation and examples to help users understand how to use the function.\nTo create a function that calculates the nth nonagonal number accurately and efficiently, we will use Python's mathematical capabilities. The nonagonal number formula is given by (n * (7 * n - 5)) / 2. This formula will be implemented directly in the function. The function will also include error handling to manage non-integer inputs.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth nonagonal number. Nonagonal numbers follow a specific mathematical sequence where each number is calculated using the formula (n * (7 * n - 5)) / 2. This formula is used to generate the nth nonagonal number.\nrequirement pool:\n- The main code should include a function is_nonagonal(n) that calculates the nth nonagonal number using the formula (n * (7 * n - 5)) / 2.\nTo implement the function is_nonagonal(n) that calculates the nth nonagonal number, we will use Python's mathematical capabilities. The nonagonal number sequence can be generated using the formula (n * (7 * n - 5)) / 2. This formula directly translates into a simple arithmetic operation in Python, making the implementation straightforward.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth nonagonal number. Nonagonal numbers are part of a sequence where each number is generated by a specific formula. This sequence is useful in various mathematical and computational applications.\nrequirement pool:\n- The main code should include a function to calculate the nth nonagonal number.\n- The function should be efficient and handle edge cases such as negative numbers or large values of n.\n- The UI should include a clear display of the result and a simple interface for user input.\n- The game should be responsive and work well on both desktop and mobile devices.\n- The product should have a beautiful and intuitive UI that enhances user experience.\nTo create a function that calculates the nth nonagonal number, we will use a mathematical formula that generates nonagonal numbers. The formula for the nth nonagonal number is given by (5n^2 - 5n + 2) / 2, where n is the position in the sequence starting from 1.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth nonagonal number. Nonagonal numbers follow a specific mathematical sequence where each number is calculated using the formula (n * (7 * n - 5)) / 2. This formula is used to generate the nth nonagonal number.\nrequirement pool:\n- The main code should include a function is_nonagonal(n) that calculates the nth nonagonal number using the formula (n * (7 * n - 5)) / 2.\nTo implement the function is_nonagonal(n) that calculates the nth nonagonal number, we will use Python's mathematical capabilities. The formula for the nth nonagonal number is given by (n * (7 * n - 5)) / 2. This formula will be directly translated into a Python function.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth nonagonal number. Nonagonal numbers follow a specific mathematical sequence where each number is calculated using the formula (n * (7 * n - 5)) / 2. This formula is used to generate the nth nonagonal number.\nrequirement pool:\n- Implement the nonagonal number calculation formula.\n- Ensure the function is_nonagonal(n) returns the correct nth nonagonal number.\n- Optimize the function for efficiency.\n- Include error handling for invalid inputs.\nTo implement the function is_nonagonal(n) that calculates the nth nonagonal number, we will use a straightforward approach. The nonagonal number sequence can be generated using the formula (n * (7 * n - 5)) / 2. This formula directly translates into a simple mathematical calculation that can be implemented in Python. The function will validate the input to ensure it is a positive integer, and it will return the calculated nonagonal number or an error message for invalid inputs.\n"], "test": ["def check(is_nonagonal):\n\tassert is_nonagonal(10) == 325", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750", "def check(is_nonagonal):\n\tassert is_nonagonal(18) == 1089", "def check(is_nonagonal):\n\tassert is_nonagonal(9) == 261", "def check(is_nonagonal):\n\tassert is_nonagonal(5) == 75", "def check(is_nonagonal):\n\tassert is_nonagonal(6) == 111", "def check(is_nonagonal):\n\tassert is_nonagonal(14) == 651", "def check(is_nonagonal):\n\tassert is_nonagonal(10) == 325", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750", "def check(is_nonagonal):\n\tassert is_nonagonal(10) == 325", "def check(is_nonagonal):\n\tassert is_nonagonal(5) == 75", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750", "def check(is_nonagonal):\n\tassert is_nonagonal(13) == 559", "def check(is_nonagonal):\n\tassert is_nonagonal(13) == 559", "def check(is_nonagonal):\n\tassert is_nonagonal(12) == 474", "def check(is_nonagonal):\n\tassert is_nonagonal(10) == 325", "def check(is_nonagonal):\n\tassert is_nonagonal(5) == 75", "def check(is_nonagonal):\n\tassert is_nonagonal(11) == 396", "def check(is_nonagonal):\n\tassert is_nonagonal(13) == 559", "def check(is_nonagonal):\n\tassert is_nonagonal(13) == 559", "def check(is_nonagonal):\n\tassert is_nonagonal(14) == 651", "def check(is_nonagonal):\n\tassert is_nonagonal(10) == 325", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750", "def check(is_nonagonal):\n\tassert is_nonagonal(11) == 396", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750", "def check(is_nonagonal):\n\tassert is_nonagonal(7) == 154", "def check(is_nonagonal):\n\tassert is_nonagonal(11) == 396", "def check(is_nonagonal):\n\tassert is_nonagonal(7) == 154", "def check(is_nonagonal):\n\tassert is_nonagonal(13) == 559", "def check(is_nonagonal):\n\tassert is_nonagonal(6) == 111", "def check(is_nonagonal):\n\tassert is_nonagonal(8) == 204", "def check(is_nonagonal):\n\tassert is_nonagonal(9) == 261", "def check(is_nonagonal):\n\tassert is_nonagonal(8) == 204", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750", "def check(is_nonagonal):\n\tassert is_nonagonal(5) == 75", "def check(is_nonagonal):\n\tassert is_nonagonal(19) == 1216", "def check(is_nonagonal):\n\tassert is_nonagonal(16) == 856", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750", "def check(is_nonagonal):\n\tassert is_nonagonal(19) == 1216", "def check(is_nonagonal):\n\tassert is_nonagonal(11) == 396", "def check(is_nonagonal):\n\tassert is_nonagonal(19) == 1216", "def check(is_nonagonal):\n\tassert is_nonagonal(12) == 474", "def check(is_nonagonal):\n\tassert is_nonagonal(11) == 396", "def check(is_nonagonal):\n\tassert is_nonagonal(13) == 559", "def check(is_nonagonal):\n\tassert is_nonagonal(12) == 474", "def check(is_nonagonal):\n\tassert is_nonagonal(14) == 651", "def check(is_nonagonal):\n\tassert is_nonagonal(19) == 1216", "def check(is_nonagonal):\n\tassert is_nonagonal(11) == 396", "def check(is_nonagonal):\n\tassert is_nonagonal(19) == 1216", "def check(is_nonagonal):\n\tassert is_nonagonal(20) == 1350", "def check(is_nonagonal):\n\tassert is_nonagonal(10) == 325", "def check(is_nonagonal):\n\tassert is_nonagonal(18) == 1089", "def check(is_nonagonal):\n\tassert is_nonagonal(12) == 474", "def check(is_nonagonal):\n\tassert is_nonagonal(12) == 474", "def check(is_nonagonal):\n\tassert is_nonagonal(14) == 651", "def check(is_nonagonal):\n\tassert is_nonagonal(18) == 1089", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750", "def check(is_nonagonal):\n\tassert is_nonagonal(13) == 559", "def check(is_nonagonal):\n\tassert is_nonagonal(16) == 856", "def check(is_nonagonal):\n\tassert is_nonagonal(10) == 325", "def check(is_nonagonal):\n\tassert is_nonagonal(18) == 1089", "def check(is_nonagonal):\n\tassert is_nonagonal(20) == 1350", "def check(is_nonagonal):\n\tassert is_nonagonal(10) == 325", "def check(is_nonagonal):\n\tassert is_nonagonal(19) == 1216", "def check(is_nonagonal):\n\tassert is_nonagonal(16) == 856", "def check(is_nonagonal):\n\tassert is_nonagonal(20) == 1350", "def check(is_nonagonal):\n\tassert is_nonagonal(18) == 1089", "def check(is_nonagonal):\n\tassert is_nonagonal(12) == 474", "def check(is_nonagonal):\n\tassert is_nonagonal(20) == 1350", "def check(is_nonagonal):\n\tassert is_nonagonal(14) == 651", "def check(is_nonagonal):\n\tassert is_nonagonal(22) == 1639", "def check(is_nonagonal):\n\tassert is_nonagonal(21) == 1491", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750", "def check(is_nonagonal):\n\tassert is_nonagonal(20) == 1350", "def check(is_nonagonal):\n\tassert is_nonagonal(22) == 1639", "def check(is_nonagonal):\n\tassert is_nonagonal(21) == 1491", "def check(is_nonagonal):\n\tassert is_nonagonal(23) == 1794", "def check(is_nonagonal):\n\tassert is_nonagonal(20) == 1350", "def check(is_nonagonal):\n\tassert is_nonagonal(16) == 856", "def check(is_nonagonal):\n\tassert is_nonagonal(18) == 1089", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750", "def check(is_nonagonal):\n\tassert is_nonagonal(22) == 1639", "def check(is_nonagonal):\n\tassert is_nonagonal(19) == 1216", "def check(is_nonagonal):\n\tassert is_nonagonal(18) == 1089", "def check(is_nonagonal):\n\tassert is_nonagonal(18) == 1089", "def check(is_nonagonal):\n\tassert is_nonagonal(20) == 1350", "def check(is_nonagonal):\n\tassert is_nonagonal(23) == 1794", "def check(is_nonagonal):\n\tassert is_nonagonal(19) == 1216", "def check(is_nonagonal):\n\tassert is_nonagonal(18) == 1089", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750", "def check(is_nonagonal):\n\tassert is_nonagonal(19) == 1216", "def check(is_nonagonal):\n\tassert is_nonagonal(20) == 1350", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750", "def check(is_nonagonal):\n\tassert is_nonagonal(21) == 1491", "def check(is_nonagonal):\n\tassert is_nonagonal(23) == 1794", "def check(is_nonagonal):\n\tassert is_nonagonal(17) == 969", "def check(is_nonagonal):\n\tassert is_nonagonal(22) == 1639", "def check(is_nonagonal):\n\tassert is_nonagonal(17) == 969", "def check(is_nonagonal):\n\tassert is_nonagonal(22) == 1639", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750"], "scores": [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0], "pass_results": [true, true, false, false, true, true, true, false, true, true], "pass_test_cases_num": [102, 102, 0, 0, 102, 102, 102, 0, 102, 102], "completion": "from typing import List\n## main.py\n\nimport typing\n\ndef is_nonagonal(n: int) -> typing.Union[int, str]:\n    \"\"\"\n    Calculate the nth nonagonal number using the formula (n * (7 * n - 5)) / 2.\n    Returns the nth nonagonal number if n is a positive integer, otherwise returns an error message.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        return \"Error: Input must be a positive integer.\"\n    \n    return (n * (7 * n - 5)) // 2\n", "passed": true, "pass": true, "pass_num": 7, "round": 205, "mutate_method": "expand_one2two", "parent_index": 205}
