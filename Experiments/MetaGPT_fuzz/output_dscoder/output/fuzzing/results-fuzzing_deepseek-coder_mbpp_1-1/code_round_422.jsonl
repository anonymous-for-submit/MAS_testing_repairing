{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 641, "prompt": "Write a function to find the nth nonagonal number. The nonagonal number is part of a sequence of numbers. These numbers follow a specific pattern. The pattern is a sequence known as nonagonal numbers.", "code": "def is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) ", "test_imports": [], "test_list": ["assert is_nonagonal(10) == 325", "assert is_nonagonal(15) == 750", "assert is_nonagonal(18) == 1089", "assert is_nonagonal(9) == 261", "assert is_nonagonal(5) == 75", "assert is_nonagonal(6) == 111", "assert is_nonagonal(14) == 651", "assert is_nonagonal(10) == 325", "assert is_nonagonal(15) == 750", "assert is_nonagonal(10) == 325", "assert is_nonagonal(5) == 75", "assert is_nonagonal(15) == 750", "assert is_nonagonal(13) == 559", "assert is_nonagonal(13) == 559", "assert is_nonagonal(12) == 474", "assert is_nonagonal(10) == 325", "assert is_nonagonal(5) == 75", "assert is_nonagonal(11) == 396", "assert is_nonagonal(13) == 559", "assert is_nonagonal(13) == 559", "assert is_nonagonal(14) == 651", "assert is_nonagonal(10) == 325", "assert is_nonagonal(15) == 750", "assert is_nonagonal(11) == 396", "assert is_nonagonal(15) == 750", "assert is_nonagonal(15) == 750", "assert is_nonagonal(7) == 154", "assert is_nonagonal(11) == 396", "assert is_nonagonal(7) == 154", "assert is_nonagonal(13) == 559", "assert is_nonagonal(6) == 111", "assert is_nonagonal(8) == 204", "assert is_nonagonal(9) == 261", "assert is_nonagonal(8) == 204", "assert is_nonagonal(15) == 750", "assert is_nonagonal(5) == 75", "assert is_nonagonal(19) == 1216", "assert is_nonagonal(16) == 856", "assert is_nonagonal(15) == 750", "assert is_nonagonal(19) == 1216", "assert is_nonagonal(11) == 396", "assert is_nonagonal(19) == 1216", "assert is_nonagonal(12) == 474", "assert is_nonagonal(11) == 396", "assert is_nonagonal(13) == 559", "assert is_nonagonal(12) == 474", "assert is_nonagonal(14) == 651", "assert is_nonagonal(19) == 1216", "assert is_nonagonal(11) == 396", "assert is_nonagonal(19) == 1216", "assert is_nonagonal(20) == 1350", "assert is_nonagonal(10) == 325", "assert is_nonagonal(18) == 1089", "assert is_nonagonal(12) == 474", "assert is_nonagonal(12) == 474", "assert is_nonagonal(14) == 651", "assert is_nonagonal(18) == 1089", "assert is_nonagonal(15) == 750", "assert is_nonagonal(13) == 559", "assert is_nonagonal(16) == 856", "assert is_nonagonal(10) == 325", "assert is_nonagonal(18) == 1089", "assert is_nonagonal(20) == 1350", "assert is_nonagonal(10) == 325", "assert is_nonagonal(19) == 1216", "assert is_nonagonal(16) == 856", "assert is_nonagonal(20) == 1350", "assert is_nonagonal(18) == 1089", "assert is_nonagonal(12) == 474", "assert is_nonagonal(20) == 1350", "assert is_nonagonal(14) == 651", "assert is_nonagonal(22) == 1639", "assert is_nonagonal(21) == 1491", "assert is_nonagonal(15) == 750", "assert is_nonagonal(20) == 1350", "assert is_nonagonal(22) == 1639", "assert is_nonagonal(21) == 1491", "assert is_nonagonal(23) == 1794", "assert is_nonagonal(20) == 1350", "assert is_nonagonal(16) == 856", "assert is_nonagonal(18) == 1089", "assert is_nonagonal(15) == 750", "assert is_nonagonal(15) == 750", "assert is_nonagonal(22) == 1639", "assert is_nonagonal(19) == 1216", "assert is_nonagonal(18) == 1089", "assert is_nonagonal(18) == 1089", "assert is_nonagonal(20) == 1350", "assert is_nonagonal(23) == 1794", "assert is_nonagonal(19) == 1216", "assert is_nonagonal(18) == 1089", "assert is_nonagonal(15) == 750", "assert is_nonagonal(19) == 1216", "assert is_nonagonal(20) == 1350", "assert is_nonagonal(15) == 750", "assert is_nonagonal(21) == 1491", "assert is_nonagonal(23) == 1794", "assert is_nonagonal(17) == 969", "assert is_nonagonal(22) == 1639", "assert is_nonagonal(17) == 969", "assert is_nonagonal(22) == 1639", "assert is_nonagonal(15) == 750"], "entry_point": "is_nonagonal", "repair_prompt": ["Write a function is_nonagonal to find the nth nonagonal number. The nonagonal number is part of a sequence of numbers. These numbers follow a specific pattern. The pattern is a sequence known as nonagonal numbers.\nis_nonagonal(10) == 325\n"], "completions": ["from typing import List\n## main.py\n\ndef is_nonagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth nonagonal number.\n\n    The nth nonagonal number is calculated using the formula:\n    (n * (7 * n - 5)) / 2\n\n    Args:\n        n (int): The position in the sequence, where n >= 1.\n\n    Returns:\n        int: The nth nonagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be at least 1\")\n    \n    return (n * (7 * n - 5)) // 2\n\n# Example usage:\n# print(is_nonagonal(5))  # Output: 75\n", "from typing import List\n## main.py\n\ndef is_nonagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth nonagonal number.\n\n    Args:\n        n (int): The position in the nonagonal sequence.\n\n    Returns:\n        int: The nth nonagonal number.\n\n    Raises:\n        ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return (n * (7 * n - 5)) // 2\n\n# Example usage:\n# print(is_nonagonal(5))  # Output: 75\n", "from typing import List\n## main.py\n\ndef is_nonagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth nonagonal number.\n\n    Args:\n        n (int): The position in the nonagonal sequence.\n\n    Returns:\n        int: The nth nonagonal number.\n\n    Raises:\n        ValueError: If the input is not a valid integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return (n * (7 * n - 5)) // 2\n\n# Example usage:\n# print(is_nonagonal(5))  # Output: 75\n", "from typing import List\n## main.py\n\ndef is_nonagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth nonagonal number.\n\n    Args:\n        n (int): The position in the nonagonal sequence.\n\n    Returns:\n        int: The nth nonagonal number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return (n * (7 * n - 5)) // 2\n\n# Example usage:\n# print(is_nonagonal(5))  # Output: 75\n", "from typing import List\n## main.py\n\ndef is_nonagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth nonagonal number.\n\n    The nth nonagonal number is calculated using the formula:\n    (5n^2 - 5n + 2) / 2\n\n    Args:\n        n (int): The position in the nonagonal sequence.\n\n    Returns:\n        int: The nth nonagonal number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return (5 * n**2 - 5 * n + 2) // 2\n\n# Example usage:\n# print(is_nonagonal(1))  # Output: 1\n# print(is_nonagonal(2))  # Output: 6\n# print(is_nonagonal(3))  # Output: 15\n", "from typing import List\n## main.py\n\ndef is_nonagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth nonagonal number.\n\n    The nth nonagonal number is calculated using the formula:\n    P_n = n * (7 * n - 5) / 2\n\n    Args:\n        n (int): The position in the nonagonal sequence.\n\n    Returns:\n        int: The nth nonagonal number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return n * (7 * n - 5) // 2\n\n# Example usage:\n# print(is_nonagonal(5))  # Output: 75\n", "from typing import List\n## main.py\n\ndef is_nonagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth nonagonal number.\n\n    Args:\n        n (int): The position in the nonagonal sequence, starting from 1.\n\n    Returns:\n        int: The nth nonagonal number.\n\n    Raises:\n        ValueError: If the input is not a positive integer.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return (5 * n**2 - 5 * n + 2) // 2\n\n# Example usage:\n# print(is_nonagonal(1))  # Output: 1\n# print(is_nonagonal(2))  # Output: 6\n# print(is_nonagonal(3))  # Output: 15\n", "from typing import List\n## main.py\n\ndef is_nonagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth nonagonal number.\n\n    Args:\n        n (int): The position in the nonagonal sequence.\n\n    Returns:\n        int: The nth nonagonal number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return (n * (7 * n - 5)) // 2\n\n# Example usage:\n# print(is_nonagonal(5))  # Output: 75\n", "from typing import List\n## main.py\n\ndef is_nonagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth nonagonal number.\n\n    The nth nonagonal number is calculated using the formula:\n    (n * (7 * n - 5)) / 2\n\n    Args:\n        n (int): The position in the nonagonal sequence.\n\n    Returns:\n        int: The nth nonagonal number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return (n * (7 * n - 5)) // 2\n\n# Example usage:\n# print(is_nonagonal(5))  # Output: 75\n", "from typing import List\n## main.py\n\ndef is_nonagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth nonagonal number.\n\n    The nonagonal number sequence is defined by the formula:\n    (n * (7 * n - 5)) / 2\n\n    Args:\n        n (int): The position in the nonagonal sequence.\n\n    Returns:\n        int: The nth nonagonal number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return (n * (7 * n - 5)) // 2\n\n# Example usage:\n# print(is_nonagonal(5))  # Output: 75\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that calculates the nth nonagonal number. Nonagonal numbers follow a specific mathematical pattern and are part of a sequence. The function should be able to compute the nth nonagonal number accurately.\nrequirement pool:\n- The main code should accurately calculate the nth nonagonal number using the formula: (n * (7 * n - 5)) / 2\nTo create a function that calculates the nth nonagonal number, we will use a simple mathematical formula. The formula for the nth nonagonal number is given by (n * (7 * n - 5)) / 2. This formula directly computes the nth nonagonal number based on the input integer n.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth nonagonal number. Nonagonal numbers follow a specific mathematical pattern and are part of a sequence. The function should be efficient and accurate, handling large values of n.\nrequirement pool:\n- The main code should accurately calculate the nth nonagonal number using the formula: (n * (7 * n - 5)) / 2\n- The function should handle large values of n efficiently\n- Include error handling to manage invalid inputs such as non-integer values\n- Provide clear documentation on how to use the function\n- Optimize the function for performance, especially for large n values\nTo create a function that calculates the nth nonagonal number efficiently, we will use Python's mathematical capabilities. The nonagonal number formula is given by (n * (7 * n - 5)) / 2. This formula will be implemented directly in the function to ensure accuracy and performance. We will also include error handling to manage invalid inputs such as non-integer values.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth nonagonal number. Nonagonal numbers follow a specific mathematical pattern and are part of a sequence. The function should be efficient and accurate, capable of handling large values of n.\nrequirement pool:\n- The main code should accurately calculate the nth nonagonal number using the formula: (n * (7 * n - 5)) / 2\n- The function should be optimized for performance to handle large inputs of n\n- Implement error handling to manage invalid inputs such as non-integer values for n\n- Include comments in the code to explain each part of the function\n- Create a user manual or documentation to guide users on how to use the function\nTo create a function that calculates the nth nonagonal number efficiently, we will use Python's mathematical capabilities. The nonagonal number formula is given by (n * (7 * n - 5)) / 2. This formula will be implemented directly in the function to ensure accuracy and performance. We will also include error handling to manage invalid inputs such as non-integer values for n.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth nonagonal number. Nonagonal numbers follow a specific mathematical pattern and are part of a sequence. The function should be able to compute the nth nonagonal number accurately.\nrequirement pool:\n- The main code should accurately calculate the nth nonagonal number using the formula: (n * (7 * n - 5)) / 2\nTo create a function that calculates the nth nonagonal number, we will use a straightforward approach based on the provided formula: (n * (7 * n - 5)) / 2. This formula directly computes the nth nonagonal number without the need for complex data structures or algorithms.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth nonagonal number. Nonagonal numbers follow a specific mathematical pattern and are part of a sequence. The function should be efficient and accurate, capable of handling large values of n.\nrequirement pool:\n- The main code should accurately calculate the nth nonagonal number using the known formula.\n- The function should be optimized for performance to handle large values of n efficiently.\n- The user interface should be simple and intuitive, making it easy for users to understand and use the function.\n- The product should include detailed documentation and examples to help users understand how to use the function.\n- The function should be tested thoroughly to ensure accuracy and reliability.\nTo create a function that calculates the nth nonagonal number efficiently, we will use Python's mathematical capabilities. The formula for the nth nonagonal number is given by (5n^2 - 5n + 2) / 2, where n is the position in the sequence. We will implement this formula directly in the function to ensure accuracy. Performance optimization will be achieved by leveraging Python's built-in data types and avoiding unnecessary computations.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth nonagonal number. Nonagonal numbers follow a specific mathematical pattern, where each number in the sequence is generated by a formula involving the position in the sequence. This requirement is clear and specific, focusing on the implementation of a mathematical formula to compute the nth nonagonal number.\nrequirement pool:\n- The main code to calculate the nth nonagonal number\nTo calculate the nth nonagonal number, we will use a mathematical formula that directly computes the value based on the position in the sequence. The formula for the nth nonagonal number is given by (n * (7 * n - 5)) / 2. This formula is straightforward and does not require complex calculations or data structures.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth nonagonal number. Nonagonal numbers follow a specific mathematical pattern, which can be represented by a formula. The function should be efficient and accurate, capable of handling large values of n.\nrequirement pool:\n- The main code should accurately calculate the nth nonagonal number using the formula.\n- The function should be optimized for performance, especially for large values of n.\n- The function should include error handling to manage invalid inputs.\n- The function should be documented with clear instructions and examples.\n- The function should be tested with various test cases to ensure accuracy.\nTo create a function that calculates the nth nonagonal number efficiently, we will use a mathematical formula that directly computes the nth nonagonal number. The formula for the nth nonagonal number is given by (5n^2 - 5n + 2) / 2, where n is the position in the sequence starting from 1.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth nonagonal number. Nonagonal numbers follow a specific mathematical pattern and are part of a sequence. The function should be able to compute the nth nonagonal number accurately.\nrequirement pool:\n- The main code should accurately calculate the nth nonagonal number using the formula: (n * (7 * n - 5)) / 2\nTo create a function that calculates the nth nonagonal number, we will use a straightforward approach based on the provided formula: (n * (7 * n - 5)) / 2. This formula directly computes the nth nonagonal number without the need for complex data structures or external libraries.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth nonagonal number. Nonagonal numbers follow a specific mathematical pattern and are part of a sequence. The function should be able to compute the nth nonagonal number accurately.\nrequirement pool:\n- The main code should accurately calculate the nth nonagonal number using the formula: (n * (7 * n - 5)) / 2\nTo create a function that calculates the nth nonagonal number, we will use a simple mathematical formula. The formula for the nth nonagonal number is given by (n * (7 * n - 5)) / 2. This formula directly computes the nth nonagonal number based on the input integer n.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth nonagonal number. Nonagonal numbers follow a specific mathematical pattern and are part of a sequence. The function should be able to compute the nth nonagonal number efficiently.\nrequirement pool:\n- The main code should accurately calculate the nth nonagonal number using the formula: (n * (7 * n - 5)) / 2\nTo create a function that calculates the nth nonagonal number, we will use a simple and efficient approach. The nonagonal number sequence follows a specific mathematical pattern, which can be derived from the formula: (n * (7 * n - 5)) / 2. This formula will be directly implemented in the function to compute the nth nonagonal number efficiently.\n"], "test": ["def check(is_nonagonal):\n\tassert is_nonagonal(10) == 325", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750", "def check(is_nonagonal):\n\tassert is_nonagonal(18) == 1089", "def check(is_nonagonal):\n\tassert is_nonagonal(9) == 261", "def check(is_nonagonal):\n\tassert is_nonagonal(5) == 75", "def check(is_nonagonal):\n\tassert is_nonagonal(6) == 111", "def check(is_nonagonal):\n\tassert is_nonagonal(14) == 651", "def check(is_nonagonal):\n\tassert is_nonagonal(10) == 325", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750", "def check(is_nonagonal):\n\tassert is_nonagonal(10) == 325", "def check(is_nonagonal):\n\tassert is_nonagonal(5) == 75", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750", "def check(is_nonagonal):\n\tassert is_nonagonal(13) == 559", "def check(is_nonagonal):\n\tassert is_nonagonal(13) == 559", "def check(is_nonagonal):\n\tassert is_nonagonal(12) == 474", "def check(is_nonagonal):\n\tassert is_nonagonal(10) == 325", "def check(is_nonagonal):\n\tassert is_nonagonal(5) == 75", "def check(is_nonagonal):\n\tassert is_nonagonal(11) == 396", "def check(is_nonagonal):\n\tassert is_nonagonal(13) == 559", "def check(is_nonagonal):\n\tassert is_nonagonal(13) == 559", "def check(is_nonagonal):\n\tassert is_nonagonal(14) == 651", "def check(is_nonagonal):\n\tassert is_nonagonal(10) == 325", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750", "def check(is_nonagonal):\n\tassert is_nonagonal(11) == 396", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750", "def check(is_nonagonal):\n\tassert is_nonagonal(7) == 154", "def check(is_nonagonal):\n\tassert is_nonagonal(11) == 396", "def check(is_nonagonal):\n\tassert is_nonagonal(7) == 154", "def check(is_nonagonal):\n\tassert is_nonagonal(13) == 559", "def check(is_nonagonal):\n\tassert is_nonagonal(6) == 111", "def check(is_nonagonal):\n\tassert is_nonagonal(8) == 204", "def check(is_nonagonal):\n\tassert is_nonagonal(9) == 261", "def check(is_nonagonal):\n\tassert is_nonagonal(8) == 204", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750", "def check(is_nonagonal):\n\tassert is_nonagonal(5) == 75", "def check(is_nonagonal):\n\tassert is_nonagonal(19) == 1216", "def check(is_nonagonal):\n\tassert is_nonagonal(16) == 856", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750", "def check(is_nonagonal):\n\tassert is_nonagonal(19) == 1216", "def check(is_nonagonal):\n\tassert is_nonagonal(11) == 396", "def check(is_nonagonal):\n\tassert is_nonagonal(19) == 1216", "def check(is_nonagonal):\n\tassert is_nonagonal(12) == 474", "def check(is_nonagonal):\n\tassert is_nonagonal(11) == 396", "def check(is_nonagonal):\n\tassert is_nonagonal(13) == 559", "def check(is_nonagonal):\n\tassert is_nonagonal(12) == 474", "def check(is_nonagonal):\n\tassert is_nonagonal(14) == 651", "def check(is_nonagonal):\n\tassert is_nonagonal(19) == 1216", "def check(is_nonagonal):\n\tassert is_nonagonal(11) == 396", "def check(is_nonagonal):\n\tassert is_nonagonal(19) == 1216", "def check(is_nonagonal):\n\tassert is_nonagonal(20) == 1350", "def check(is_nonagonal):\n\tassert is_nonagonal(10) == 325", "def check(is_nonagonal):\n\tassert is_nonagonal(18) == 1089", "def check(is_nonagonal):\n\tassert is_nonagonal(12) == 474", "def check(is_nonagonal):\n\tassert is_nonagonal(12) == 474", "def check(is_nonagonal):\n\tassert is_nonagonal(14) == 651", "def check(is_nonagonal):\n\tassert is_nonagonal(18) == 1089", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750", "def check(is_nonagonal):\n\tassert is_nonagonal(13) == 559", "def check(is_nonagonal):\n\tassert is_nonagonal(16) == 856", "def check(is_nonagonal):\n\tassert is_nonagonal(10) == 325", "def check(is_nonagonal):\n\tassert is_nonagonal(18) == 1089", "def check(is_nonagonal):\n\tassert is_nonagonal(20) == 1350", "def check(is_nonagonal):\n\tassert is_nonagonal(10) == 325", "def check(is_nonagonal):\n\tassert is_nonagonal(19) == 1216", "def check(is_nonagonal):\n\tassert is_nonagonal(16) == 856", "def check(is_nonagonal):\n\tassert is_nonagonal(20) == 1350", "def check(is_nonagonal):\n\tassert is_nonagonal(18) == 1089", "def check(is_nonagonal):\n\tassert is_nonagonal(12) == 474", "def check(is_nonagonal):\n\tassert is_nonagonal(20) == 1350", "def check(is_nonagonal):\n\tassert is_nonagonal(14) == 651", "def check(is_nonagonal):\n\tassert is_nonagonal(22) == 1639", "def check(is_nonagonal):\n\tassert is_nonagonal(21) == 1491", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750", "def check(is_nonagonal):\n\tassert is_nonagonal(20) == 1350", "def check(is_nonagonal):\n\tassert is_nonagonal(22) == 1639", "def check(is_nonagonal):\n\tassert is_nonagonal(21) == 1491", "def check(is_nonagonal):\n\tassert is_nonagonal(23) == 1794", "def check(is_nonagonal):\n\tassert is_nonagonal(20) == 1350", "def check(is_nonagonal):\n\tassert is_nonagonal(16) == 856", "def check(is_nonagonal):\n\tassert is_nonagonal(18) == 1089", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750", "def check(is_nonagonal):\n\tassert is_nonagonal(22) == 1639", "def check(is_nonagonal):\n\tassert is_nonagonal(19) == 1216", "def check(is_nonagonal):\n\tassert is_nonagonal(18) == 1089", "def check(is_nonagonal):\n\tassert is_nonagonal(18) == 1089", "def check(is_nonagonal):\n\tassert is_nonagonal(20) == 1350", "def check(is_nonagonal):\n\tassert is_nonagonal(23) == 1794", "def check(is_nonagonal):\n\tassert is_nonagonal(19) == 1216", "def check(is_nonagonal):\n\tassert is_nonagonal(18) == 1089", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750", "def check(is_nonagonal):\n\tassert is_nonagonal(19) == 1216", "def check(is_nonagonal):\n\tassert is_nonagonal(20) == 1350", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750", "def check(is_nonagonal):\n\tassert is_nonagonal(21) == 1491", "def check(is_nonagonal):\n\tassert is_nonagonal(23) == 1794", "def check(is_nonagonal):\n\tassert is_nonagonal(17) == 969", "def check(is_nonagonal):\n\tassert is_nonagonal(22) == 1639", "def check(is_nonagonal):\n\tassert is_nonagonal(17) == 969", "def check(is_nonagonal):\n\tassert is_nonagonal(22) == 1639", "def check(is_nonagonal):\n\tassert is_nonagonal(15) == 750"], "scores": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, false, true, false, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 0, 102, 0, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef is_nonagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth nonagonal number.\n\n    The nonagonal number sequence is defined by the formula:\n    (n * (7 * n - 5)) / 2\n\n    Args:\n        n (int): The position in the nonagonal sequence.\n\n    Returns:\n        int: The nth nonagonal number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return (n * (7 * n - 5)) // 2\n\n# Example usage:\n# print(is_nonagonal(5))  # Output: 75\n", "passed": true, "pass": true, "pass_num": 8, "round": 422, "mutate_method": "expand_one2two", "parent_index": 410}
