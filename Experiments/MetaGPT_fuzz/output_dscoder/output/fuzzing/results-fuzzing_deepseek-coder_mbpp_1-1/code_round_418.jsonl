{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 65, "prompt": "Write a function to flatten a list and sum all of its elements, considering edge cases such as empty lists or lists with non-integer values.", "code": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total", "test_imports": [], "test_list": ["assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21", "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106", "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210", "assert recursive_list_sum([3, 1, [7, 2], [1, 1]]) == 15", "assert recursive_list_sum([5, 7, [5, 7], [7, 2]]) == 33", "assert recursive_list_sum([4, 4, [1, 5], [9, 6]]) == 29", "assert recursive_list_sum([1, 5, [5, 8], [2, 1]]) == 22", "assert recursive_list_sum([1, 3, [3, 8], [2, 4]]) == 21", "assert recursive_list_sum([4, 2, [8, 3], [3, 2]]) == 22", "assert recursive_list_sum([1, 5, [8, 1], [7, 11]]) == 33", "assert recursive_list_sum([5, 6, [2, 8], [7, 5]]) == 33", "assert recursive_list_sum([4, 4, [3, 3], [10, 2]]) == 26", "assert recursive_list_sum([1, 3, [2, 2], [10, 1]]) == 19", "assert recursive_list_sum([3, 1, [7, 9], [2, 1]]) == 23", "assert recursive_list_sum([6, 7, [4, 8], [7, 10]]) == 42", "assert recursive_list_sum([2, 7, [5, 7], [1, 5]]) == 27", "assert recursive_list_sum([3, 3, [1, 9], [1, 11]]) == 28", "assert recursive_list_sum([2, 5, [5, 8], [10, 7]]) == 37", "assert recursive_list_sum([3, 2, [3, 6], [7, 6]]) == 27", "assert recursive_list_sum([4, 7, [1, 5], [4, 4]]) == 25", "assert recursive_list_sum([5, 4, [7, 4], [4, 7]]) == 31", "assert recursive_list_sum([1, 2, [5, 8], [4, 1]]) == 21", "assert recursive_list_sum([1, 1, [4, 8], [8, 8]]) == 30", "assert recursive_list_sum([4, 2, [3, 9], [8, 11]]) == 37", "assert recursive_list_sum([6, 5, [1, 7], [8, 4]]) == 31", "assert recursive_list_sum([5, 7, [2, 7], [8, 4]]) == 33", "assert recursive_list_sum([1, 3, [2, 6], [9, 4]]) == 25", "assert recursive_list_sum([6, 7, [1, 8], [9, 11]]) == 42", "assert recursive_list_sum([1, 1, [1, 9], [10, 6]]) == 28", "assert recursive_list_sum([1, 4, [8, 8], [8, 6]]) == 35", "assert recursive_list_sum([6, 4, [2, 6], [6, 2]]) == 26", "assert recursive_list_sum([1, 5, [4, 8], [5, 4]]) == 27", "assert recursive_list_sum([3, 6, [1, 1], [4, 5]]) == 20", "assert recursive_list_sum([5, 4, [3, 9], [10, 9]]) == 40", "assert recursive_list_sum([6, 6, [8, 9], [5, 3]]) == 37", "assert recursive_list_sum([2, 2, [7, 1], [5, 9]]) == 26", "assert recursive_list_sum([2, 8, [13, 14], [23, 46]]) == 106", "assert recursive_list_sum([8, 13, [16, 14], [14, 36]]) == 101", "assert recursive_list_sum([2, 14, [19, 15], [16, 40]]) == 106", "assert recursive_list_sum([7, 12, [13, 18], [21, 41]]) == 112", "assert recursive_list_sum([7, 8, [14, 12], [23, 43]]) == 107", "assert recursive_list_sum([12, 12, [18, 12], [20, 36]]) == 110", "assert recursive_list_sum([12, 9, [14, 12], [24, 39]]) == 110", "assert recursive_list_sum([7, 11, [17, 12], [15, 41]]) == 103", "assert recursive_list_sum([10, 12, [19, 15], [19, 46]]) == 121", "assert recursive_list_sum([12, 12, [14, 19], [15, 38]]) == 110", "assert recursive_list_sum([9, 8, [13, 15], [18, 38]]) == 101", "assert recursive_list_sum([8, 11, [15, 13], [17, 40]]) == 104", "assert recursive_list_sum([10, 15, [19, 10], [17, 42]]) == 113", "assert recursive_list_sum([6, 12, [11, 12], [21, 46]]) == 108", "assert recursive_list_sum([8, 10, [13, 15], [24, 45]]) == 115", "assert recursive_list_sum([2, 13, [12, 19], [15, 43]]) == 104", "assert recursive_list_sum([7, 8, [19, 11], [15, 44]]) == 104", "assert recursive_list_sum([5, 13, [19, 18], [16, 45]]) == 116", "assert recursive_list_sum([11, 6, [17, 16], [16, 39]]) == 105", "assert recursive_list_sum([11, 13, [20, 14], [21, 46]]) == 125", "assert recursive_list_sum([6, 9, [16, 15], [20, 45]]) == 111", "assert recursive_list_sum([5, 8, [11, 16], [23, 45]]) == 108", "assert recursive_list_sum([9, 11, [11, 10], [16, 41]]) == 98", "assert recursive_list_sum([11, 5, [18, 10], [18, 40]]) == 102", "assert recursive_list_sum([4, 6, [12, 13], [21, 46]]) == 102", "assert recursive_list_sum([12, 10, [15, 9], [18, 38]]) == 102", "assert recursive_list_sum([5, 13, [20, 9], [22, 39]]) == 108", "assert recursive_list_sum([4, 7, [16, 15], [21, 39]]) == 102", "assert recursive_list_sum([9, 9, [15, 19], [19, 45]]) == 116", "assert recursive_list_sum([7, 13, [18, 19], [17, 39]]) == 113", "assert recursive_list_sum([6, 15, [19, 18], [21, 37]]) == 116", "assert recursive_list_sum([12, 5, [13, 19], [15, 38]]) == 102", "assert recursive_list_sum([12, 10, [10, 9], [17, 40]]) == 98", "assert recursive_list_sum([11, 15, [31, 43], [47, 56]]) == 203", "assert recursive_list_sum([15, 19, [32, 41], [54, 64]]) == 225", "assert recursive_list_sum([8, 22, [28, 35], [55, 59]]) == 207", "assert recursive_list_sum([8, 23, [35, 40], [54, 60]]) == 220", "assert recursive_list_sum([6, 20, [32, 42], [45, 57]]) == 202", "assert recursive_list_sum([9, 17, [26, 44], [55, 60]]) == 211", "assert recursive_list_sum([13, 20, [35, 45], [51, 62]]) == 226", "assert recursive_list_sum([7, 20, [35, 37], [49, 60]]) == 208", "assert recursive_list_sum([9, 25, [27, 43], [54, 55]]) == 213", "assert recursive_list_sum([15, 17, [34, 38], [49, 58]]) == 211", "assert recursive_list_sum([5, 21, [26, 44], [52, 56]]) == 204", "assert recursive_list_sum([7, 20, [29, 43], [46, 61]]) == 206", "assert recursive_list_sum([14, 25, [34, 42], [48, 57]]) == 220", "assert recursive_list_sum([11, 25, [32, 40], [49, 61]]) == 218", "assert recursive_list_sum([6, 16, [34, 36], [49, 55]]) == 196", "assert recursive_list_sum([11, 23, [26, 35], [49, 57]]) == 201", "assert recursive_list_sum([9, 19, [25, 42], [49, 60]]) == 204", "assert recursive_list_sum([13, 19, [29, 41], [55, 57]]) == 214", "assert recursive_list_sum([13, 18, [32, 37], [49, 55]]) == 204", "assert recursive_list_sum([10, 23, [28, 36], [46, 57]]) == 200", "assert recursive_list_sum([12, 16, [32, 43], [53, 58]]) == 214", "assert recursive_list_sum([11, 16, [29, 45], [51, 57]]) == 209", "assert recursive_list_sum([13, 15, [27, 44], [54, 57]]) == 210", "assert recursive_list_sum([15, 23, [28, 38], [52, 62]]) == 218", "assert recursive_list_sum([14, 16, [34, 42], [53, 62]]) == 221", "assert recursive_list_sum([7, 19, [25, 43], [48, 65]]) == 207", "assert recursive_list_sum([9, 25, [35, 37], [51, 58]]) == 215", "assert recursive_list_sum([8, 22, [33, 41], [51, 63]]) == 218", "assert recursive_list_sum([6, 21, [30, 36], [45, 61]]) == 199", "assert recursive_list_sum([12, 24, [27, 42], [46, 56]]) == 207", "assert recursive_list_sum([12, 21, [33, 41], [48, 63]]) == 218", "assert recursive_list_sum([12, 25, [32, 41], [45, 61]]) == 216", "assert recursive_list_sum([13, 20, [35, 35], [49, 61]]) == 213"], "entry_point": "recursive_list_sum", "repair_prompt": ["Write a function recursive_list_sum to flatten a list and sum all of its elements, considering edge cases such as empty lists or lists with non-integer values.\nrecursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n"], "completions": ["from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Recursively sums all integers in a nested list, ignoring non-integer elements.\n\n    Args:\n        lst (list): A list containing integers and nested lists.\n\n    Returns:\n        int: The sum of all integers in the list and its nested lists.\n    \"\"\"\n    total_sum = 0\n\n    def sum_recursive(sublist):\n        nonlocal total_sum\n        for element in sublist:\n            if isinstance(element, list):\n                sum_recursive(element)\n            elif isinstance(element, int):\n                total_sum += element\n            else:\n                continue\n\n    sum_recursive(lst)\n    return total_sum\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Recursively sums all integers in a nested list, ignoring non-integer values.\n\n    Args:\n        lst (list): A list that may contain nested lists and integers.\n\n    Returns:\n        int: The sum of all integers in the list, ignoring non-integer values.\n    \"\"\"\n    total_sum = 0\n\n    for item in lst:\n        if isinstance(item, list):\n            total_sum += recursive_list_sum(item)\n        elif isinstance(item, int):\n            total_sum += item\n\n    return total_sum\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Recursively sums all elements in a list, including those in nested lists.\n    \n    Args:\n        lst (list): The input list which may contain nested lists.\n        \n    Returns:\n        int: The sum of all elements in the list and its nested lists.\n    \"\"\"\n    def is_integer(value):\n        \"\"\"Helper function to check if a value is an integer.\"\"\"\n        return isinstance(value, int)\n\n    def sum_elements(sublist):\n        \"\"\"Helper function to recursively sum elements in a list.\"\"\"\n        total_sum = 0\n        for element in sublist:\n            if isinstance(element, list):\n                total_sum += sum_elements(element)\n            elif is_integer(element):\n                total_sum += element\n        return total_sum\n\n    return sum_elements(lst)\n\n# Example usage:\n# print(recursive_list_sum([1, 2, [3, 4], [5, [6, 7]]]))  # Output: 28\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        elif isinstance(item, (int, float)):\n            total += item\n    return total\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Recursively sums all elements in a nested list, ignoring non-integer values.\n\n    Args:\n        lst (list): A list containing integers and nested lists.\n\n    Returns:\n        int: The sum of all integers in the list and its nested lists.\n    \"\"\"\n    def is_integer(value):\n        \"\"\"\n        Helper function to check if a value is an integer.\n\n        Args:\n            value: The value to check.\n\n        Returns:\n            bool: True if the value is an integer, False otherwise.\n        \"\"\"\n        return isinstance(value, int)\n\n    def sum_recursive(sublist):\n        \"\"\"\n        Recursive helper function to sum elements in a list.\n\n        Args:\n            sublist (list): A list of integers and nested lists.\n\n        Returns:\n            int: The sum of all integers in the list and its nested lists.\n        \"\"\"\n        total_sum = 0\n        for element in sublist:\n            if isinstance(element, list):\n                total_sum += sum_recursive(element)\n            elif is_integer(element):\n                total_sum += element\n        return total_sum\n\n    return sum_recursive(lst)\n\n# Example usage:\n# print(recursive_list_sum([1, 2, [3, 4], [5, 6]]))  # Output: 21\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Recursively sums all integers in a nested list.\n    \n    Args:\n        lst (list): A list containing integers and/or nested lists of integers.\n        \n    Returns:\n        int: The sum of all integers in the list and its nested lists.\n    \"\"\"\n    total_sum = 0\n    for element in lst:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, int):\n            total_sum += element\n        else:\n            raise ValueError(f\"Encountered non-integer value: {element}\")\n    return total_sum\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Recursively sums all elements in a nested list, ignoring non-integer values.\n\n    Args:\n        lst (list): A list containing integers and nested lists.\n\n    Returns:\n        int: The sum of all integer elements in the list and its nested lists.\n    \"\"\"\n    total_sum = 0\n\n    for element in lst:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, int):\n            total_sum += element\n\n    return total_sum\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Recursively sums all integers in a nested list.\n\n    Args:\n        lst (list): A list containing integers and/or nested lists.\n\n    Returns:\n        int: The sum of all integers in the list and its nested lists.\n\n    Raises:\n        ValueError: If the list contains elements that are not integers or lists.\n    \"\"\"\n    total_sum = 0\n    for element in lst:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, int):\n            total_sum += element\n        else:\n            raise ValueError(f\"Element {element} is not an integer or list.\")\n    return total_sum\n\n# Example usage:\n# print(recursive_list_sum([1, 2, [3, 4], [5, 6]]))  # Output: 21\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Recursively sums all elements in a nested list, ignoring non-integer values.\n\n    Args:\n        lst (list): The input list which may contain nested lists.\n\n    Returns:\n        int: The sum of all elements in the list and its nested lists.\n    \"\"\"\n    total_sum = 0\n\n    for element in lst:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, int):\n            total_sum += element\n        # Non-integer elements are ignored\n\n    return total_sum\n\n# Example usage:\n# print(recursive_list_sum([1, 2, [3, 4], [5, 6]]))  # Output: 21\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Recursively sums all integer elements in a nested list, ignoring non-integer values.\n\n    Args:\n        lst (list): A list that may contain nested lists and non-integer values.\n\n    Returns:\n        int: The sum of all integer elements in the list, ignoring non-integer values.\n    \"\"\"\n    total_sum = 0\n\n    for item in lst:\n        if isinstance(item, list):\n            total_sum += recursive_list_sum(item)\n        elif isinstance(item, (int, float)):\n            total_sum += item\n        # Ignore non-integer values\n\n    return total_sum\n"], "plans": ["requirement analysis:\nThe function 'recursive_list_sum' needs to handle nested lists, ensuring that all elements are summed regardless of their depth within the list structure. It should also handle cases where the list contains non-integer values by ignoring them during the summation process.\nrequirement pool:\n- The main code should be able to handle nested lists and sum all elements.\n- The function should ignore non-integer values during summation.\n- Implement a clear and responsive user interface.\n- Ensure the game is accessible and playable on mobile devices.\nTo implement the 'recursive_list_sum' function, we will use a recursive approach to handle nested lists. This approach will ensure that all elements, regardless of their depth within the list structure, are summed. We will also implement a mechanism to ignore non-integer values during the summation process.\n", "requirement analysis:\nThe function 'recursive_list_sum' needs to handle nested lists, ensuring that all elements are summed regardless of their depth within the list structure. It should also handle cases where the list contains non-integer values by ignoring them during the summation process.\nrequirement pool:\n- The main code should be able to handle nested lists and sum all elements.\n- The function should ignore non-integer values during summation.\n- Implement a clear and responsive user interface.\n- Ensure the game is engaging and aesthetically pleasing.\nTo implement the 'recursive_list_sum' function, we will use a recursive approach to handle nested lists. This approach will ensure that all elements, regardless of their depth within the list structure, are summed. We will also implement a mechanism to ignore non-integer values during the summation process.\n", "requirement analysis:\nThe function 'recursive_list_sum' needs to handle nested lists, ensuring that all elements are summed regardless of their depth within the list structure. It should also handle cases where the list contains non-integer values by ignoring them or raising an error, depending on the implementation choice.\nrequirement pool:\n- The main code should be able to handle nested lists and sum all elements.\n- Implement error handling for non-integer values within the list.\n- Ensure the function is efficient and can handle large lists.\nTo implement the 'recursive_list_sum' function, we will use a recursive approach to handle nested lists. This method will ensure that all elements, regardless of their depth within the list structure, are summed. We will also implement error handling to manage non-integer values, either by ignoring them or raising an error, depending on the implementation choice.\n", "requirement analysis:\nThe function should be able to handle lists that are nested multiple levels deep. It should also be able to sum elements regardless of their type, ensuring it can handle non-integer values gracefully. The function should be efficient and not crash when dealing with large lists.\nrequirement pool:\n- Implement a recursive function to flatten and sum lists.\n- Ensure the function can handle non-integer values.\n- Optimize the function for performance with large lists.\n- Develop a user-friendly interface for easy integration.\n- Create detailed documentation and examples for developers.\nTo implement the `recursive_list_sum` function, we will use a recursive approach to handle nested lists. The function will check each element in the list; if the element is a list, the function will recursively call itself with this sublist. If the element is an integer, it will be added to the sum. The function will also handle edge cases such as empty lists or lists with non-integer values by skipping over them.\n", "requirement analysis:\nThe function 'recursive_list_sum' needs to handle nested lists, ensuring that all elements are summed regardless of their depth within the list structure. It should also handle cases where the list contains non-integer values by ignoring them during the summation process.\nrequirement pool:\n- The main code should be able to handle nested lists and sum all elements.\n- The function should ignore non-integer values during summation.\n- Implement a clear and responsive user interface.\n- Ensure the game is accessible and playable on mobile devices.\nTo implement the 'recursive_list_sum' function, we will use a recursive approach to handle nested lists. This approach will ensure that all elements, regardless of their depth within the list structure, are summed. We will also implement a mechanism to ignore non-integer values during the summation process.\n", "requirement analysis:\nThe function should handle nested lists, ensuring all elements are summed. It should also handle cases where lists contain non-integer values by ignoring them. Edge cases such as empty lists should also be considered to avoid errors.\nrequirement pool:\n- The main code should correctly sum all elements in a nested list structure.\n- The function should ignore non-integer values in the list elements.\n- Implement error handling for empty lists to prevent errors.\n- Ensure the function is efficient and can handle large lists.\nTo implement the `recursive_list_sum` function, we will use a recursive approach to handle nested lists. The function will iterate through each element in the list, checking if it is an integer. If it is, the function will add it to the sum. If it is a list, the function will call itself recursively with this sublist. This approach ensures that all elements, including those in nested lists, are summed correctly. Additionally, we will implement error handling to manage cases where the list contains non-integer values or is empty.\n", "requirement analysis:\nThe function 'recursive_list_sum' needs to handle nested lists, ensuring that all elements are summed regardless of their depth within the list structure. It should also handle cases where the list contains non-integer values by ignoring them during the summation process.\nrequirement pool:\n- The main code should be able to handle nested lists and sum all elements.\n- The function should ignore non-integer values during summation.\n- Implement a clear and responsive user interface.\n- Ensure the game is engaging and aesthetically pleasing.\nTo implement the 'recursive_list_sum' function, we will use a recursive approach to handle nested lists. This approach will ensure that all elements, regardless of their depth within the list structure, are summed. We will also implement a mechanism to ignore non-integer values during the summation process.\n", "requirement analysis:\nThe function should handle nested lists, ensuring all elements are summed. It should also handle cases where lists contain non-integer values by ignoring them. Edge cases such as empty lists should also be considered to avoid errors.\nrequirement pool:\n- The main code should correctly sum all elements in a nested list structure.\n- The function should ignore non-integer values in the list elements.\n- Implement error handling for empty lists to prevent errors.\n- Ensure the function is efficient and can handle large lists.\nTo implement the `recursive_list_sum` function, we will use a recursive approach to handle nested lists. The function will iterate through each element in the list, checking if it is an integer. If it is, the function will add it to the sum. If it is a list, the function will call itself recursively with this sublist. This approach ensures that all elements, including those in nested lists, are summed correctly. Additionally, we will implement error handling to manage cases where the list contains non-integer values or is empty.\n", "requirement analysis:\nThe function 'recursive_list_sum' needs to handle nested lists, ensuring that all elements are summed regardless of their depth within the list structure. It should also handle cases where the list contains non-integer values by ignoring them or raising an error, depending on the implementation choice.\nrequirement pool:\n- The main code should be able to handle nested lists and sum all elements.\n- Implement error handling for non-integer values within the list.\n- Ensure the function is efficient and can handle large lists.\nTo implement the 'recursive_list_sum' function, we will use a recursive approach to handle nested lists. This method will ensure that all elements, regardless of their depth within the list structure, are summed. We will also implement error handling to manage non-integer values within the list, either by ignoring them or raising an error, depending on the implementation choice.\n", "requirement analysis:\nThe function 'recursive_list_sum' needs to handle nested lists, ensuring that all elements are summed regardless of their depth within the list structure. It should also handle cases where the list contains non-integer values by ignoring them during the summation process.\nrequirement pool:\n- The main code should be able to handle nested lists and sum all elements.\n- The function should ignore non-integer values during summation.\n- Implement a clear and responsive user interface.\n- Ensure the game is accessible and playable on mobile devices.\nTo implement the 'recursive_list_sum' function, we will use a recursive approach to handle nested lists. This approach will ensure that all elements, regardless of their depth within the list structure, are summed. We will also implement a mechanism to ignore non-integer values during the summation process.\n"], "test": ["def check(recursive_list_sum):\n\tassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21", "def check(recursive_list_sum):\n\tassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106", "def check(recursive_list_sum):\n\tassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 1, [7, 2], [1, 1]]) == 15", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 7, [5, 7], [7, 2]]) == 33", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 4, [1, 5], [9, 6]]) == 29", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 5, [5, 8], [2, 1]]) == 22", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 3, [3, 8], [2, 4]]) == 21", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 2, [8, 3], [3, 2]]) == 22", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 5, [8, 1], [7, 11]]) == 33", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 6, [2, 8], [7, 5]]) == 33", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 4, [3, 3], [10, 2]]) == 26", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 3, [2, 2], [10, 1]]) == 19", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 1, [7, 9], [2, 1]]) == 23", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 7, [4, 8], [7, 10]]) == 42", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 7, [5, 7], [1, 5]]) == 27", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 3, [1, 9], [1, 11]]) == 28", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 5, [5, 8], [10, 7]]) == 37", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 2, [3, 6], [7, 6]]) == 27", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 7, [1, 5], [4, 4]]) == 25", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 4, [7, 4], [4, 7]]) == 31", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 2, [5, 8], [4, 1]]) == 21", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 1, [4, 8], [8, 8]]) == 30", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 2, [3, 9], [8, 11]]) == 37", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 5, [1, 7], [8, 4]]) == 31", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 7, [2, 7], [8, 4]]) == 33", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 3, [2, 6], [9, 4]]) == 25", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 7, [1, 8], [9, 11]]) == 42", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 1, [1, 9], [10, 6]]) == 28", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 4, [8, 8], [8, 6]]) == 35", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 4, [2, 6], [6, 2]]) == 26", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 5, [4, 8], [5, 4]]) == 27", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 6, [1, 1], [4, 5]]) == 20", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 4, [3, 9], [10, 9]]) == 40", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 6, [8, 9], [5, 3]]) == 37", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 2, [7, 1], [5, 9]]) == 26", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 8, [13, 14], [23, 46]]) == 106", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 13, [16, 14], [14, 36]]) == 101", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 14, [19, 15], [16, 40]]) == 106", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 12, [13, 18], [21, 41]]) == 112", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 8, [14, 12], [23, 43]]) == 107", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 12, [18, 12], [20, 36]]) == 110", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 9, [14, 12], [24, 39]]) == 110", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 11, [17, 12], [15, 41]]) == 103", "def check(recursive_list_sum):\n\tassert recursive_list_sum([10, 12, [19, 15], [19, 46]]) == 121", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 12, [14, 19], [15, 38]]) == 110", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 8, [13, 15], [18, 38]]) == 101", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 11, [15, 13], [17, 40]]) == 104", "def check(recursive_list_sum):\n\tassert recursive_list_sum([10, 15, [19, 10], [17, 42]]) == 113", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 12, [11, 12], [21, 46]]) == 108", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 10, [13, 15], [24, 45]]) == 115", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 13, [12, 19], [15, 43]]) == 104", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 8, [19, 11], [15, 44]]) == 104", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 13, [19, 18], [16, 45]]) == 116", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 6, [17, 16], [16, 39]]) == 105", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 13, [20, 14], [21, 46]]) == 125", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 9, [16, 15], [20, 45]]) == 111", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 8, [11, 16], [23, 45]]) == 108", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 11, [11, 10], [16, 41]]) == 98", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 5, [18, 10], [18, 40]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 6, [12, 13], [21, 46]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 10, [15, 9], [18, 38]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 13, [20, 9], [22, 39]]) == 108", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 7, [16, 15], [21, 39]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 9, [15, 19], [19, 45]]) == 116", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 13, [18, 19], [17, 39]]) == 113", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 15, [19, 18], [21, 37]]) == 116", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 5, [13, 19], [15, 38]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 10, [10, 9], [17, 40]]) == 98", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 15, [31, 43], [47, 56]]) == 203", "def check(recursive_list_sum):\n\tassert recursive_list_sum([15, 19, [32, 41], [54, 64]]) == 225", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 22, [28, 35], [55, 59]]) == 207", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 23, [35, 40], [54, 60]]) == 220", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 20, [32, 42], [45, 57]]) == 202", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 17, [26, 44], [55, 60]]) == 211", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 20, [35, 45], [51, 62]]) == 226", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 20, [35, 37], [49, 60]]) == 208", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 25, [27, 43], [54, 55]]) == 213", "def check(recursive_list_sum):\n\tassert recursive_list_sum([15, 17, [34, 38], [49, 58]]) == 211", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 21, [26, 44], [52, 56]]) == 204", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 20, [29, 43], [46, 61]]) == 206", "def check(recursive_list_sum):\n\tassert recursive_list_sum([14, 25, [34, 42], [48, 57]]) == 220", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 25, [32, 40], [49, 61]]) == 218", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 16, [34, 36], [49, 55]]) == 196", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 23, [26, 35], [49, 57]]) == 201", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 19, [25, 42], [49, 60]]) == 204", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 19, [29, 41], [55, 57]]) == 214", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 18, [32, 37], [49, 55]]) == 204", "def check(recursive_list_sum):\n\tassert recursive_list_sum([10, 23, [28, 36], [46, 57]]) == 200", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 16, [32, 43], [53, 58]]) == 214", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 16, [29, 45], [51, 57]]) == 209", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 15, [27, 44], [54, 57]]) == 210", "def check(recursive_list_sum):\n\tassert recursive_list_sum([15, 23, [28, 38], [52, 62]]) == 218", "def check(recursive_list_sum):\n\tassert recursive_list_sum([14, 16, [34, 42], [53, 62]]) == 221", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 19, [25, 43], [48, 65]]) == 207", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 25, [35, 37], [51, 58]]) == 215", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 22, [33, 41], [51, 63]]) == 218", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 21, [30, 36], [45, 61]]) == 199", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 24, [27, 42], [46, 56]]) == 207", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 21, [33, 41], [48, 63]]) == 218", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 25, [32, 41], [45, 61]]) == 216", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 20, [35, 35], [49, 61]]) == 213"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Recursively sums all integer elements in a nested list, ignoring non-integer values.\n\n    Args:\n        lst (list): A list that may contain nested lists and non-integer values.\n\n    Returns:\n        int: The sum of all integer elements in the list, ignoring non-integer values.\n    \"\"\"\n    total_sum = 0\n\n    for item in lst:\n        if isinstance(item, list):\n            total_sum += recursive_list_sum(item)\n        elif isinstance(item, (int, float)):\n            total_sum += item\n        # Ignore non-integer values\n\n    return total_sum\n", "passed": true, "pass": true, "pass_num": 10, "round": 418, "mutate_method": "condense_two2one", "parent_index": 303}
