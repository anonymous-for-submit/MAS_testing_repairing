{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 583, "prompt": "Create a function that provides the nth Catalan number.", "code": "def catalan_number(num):\n    if num <=1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    return res_num", "test_imports": [], "test_list": ["assert catalan_number(10)==16796", "assert catalan_number(9)==4862", "assert catalan_number(7)==429", "assert catalan_number(13) == 742900", "assert catalan_number(6) == 132", "assert catalan_number(15) == 9694845", "assert catalan_number(15) == 9694845", "assert catalan_number(15) == 9694845", "assert catalan_number(7) == 429", "assert catalan_number(6) == 132", "assert catalan_number(13) == 742900", "assert catalan_number(11) == 58786", "assert catalan_number(7) == 429", "assert catalan_number(12) == 208012", "assert catalan_number(12) == 208012", "assert catalan_number(5) == 42", "assert catalan_number(14) == 2674440", "assert catalan_number(11) == 58786", "assert catalan_number(13) == 742900", "assert catalan_number(11) == 58786", "assert catalan_number(10) == 16796", "assert catalan_number(5) == 42", "assert catalan_number(13) == 742900", "assert catalan_number(9) == 4862", "assert catalan_number(10) == 16796", "assert catalan_number(5) == 42", "assert catalan_number(11) == 58786", "assert catalan_number(7) == 429", "assert catalan_number(15) == 9694845", "assert catalan_number(5) == 42", "assert catalan_number(7) == 429", "assert catalan_number(15) == 9694845", "assert catalan_number(5) == 42", "assert catalan_number(12) == 208012", "assert catalan_number(12) == 208012", "assert catalan_number(8) == 1430", "assert catalan_number(6) == 132", "assert catalan_number(7) == 429", "assert catalan_number(10) == 16796", "assert catalan_number(4) == 14", "assert catalan_number(13) == 742900", "assert catalan_number(9) == 4862", "assert catalan_number(9) == 4862", "assert catalan_number(14) == 2674440", "assert catalan_number(10) == 16796", "assert catalan_number(4) == 14", "assert catalan_number(4) == 14", "assert catalan_number(6) == 132", "assert catalan_number(4) == 14", "assert catalan_number(5) == 42", "assert catalan_number(11) == 58786", "assert catalan_number(5) == 42", "assert catalan_number(12) == 208012", "assert catalan_number(7) == 429", "assert catalan_number(7) == 429", "assert catalan_number(13) == 742900", "assert catalan_number(11) == 58786", "assert catalan_number(6) == 132", "assert catalan_number(9) == 4862", "assert catalan_number(5) == 42", "assert catalan_number(5) == 42", "assert catalan_number(7) == 429", "assert catalan_number(14) == 2674440", "assert catalan_number(14) == 2674440", "assert catalan_number(5) == 42", "assert catalan_number(8) == 1430", "assert catalan_number(11) == 58786", "assert catalan_number(6) == 132", "assert catalan_number(8) == 1430", "assert catalan_number(9) == 4862", "assert catalan_number(11) == 58786", "assert catalan_number(12) == 208012", "assert catalan_number(3) == 5", "assert catalan_number(10) == 16796", "assert catalan_number(8) == 1430", "assert catalan_number(3) == 5", "assert catalan_number(2) == 2", "assert catalan_number(11) == 58786", "assert catalan_number(5) == 42", "assert catalan_number(7) == 429", "assert catalan_number(6) == 132", "assert catalan_number(5) == 42", "assert catalan_number(3) == 5", "assert catalan_number(10) == 16796", "assert catalan_number(8) == 1430", "assert catalan_number(9) == 4862", "assert catalan_number(11) == 58786", "assert catalan_number(9) == 4862", "assert catalan_number(5) == 42", "assert catalan_number(9) == 4862", "assert catalan_number(8) == 1430", "assert catalan_number(12) == 208012", "assert catalan_number(8) == 1430", "assert catalan_number(9) == 4862", "assert catalan_number(7) == 429", "assert catalan_number(2) == 2", "assert catalan_number(6) == 132", "assert catalan_number(2) == 2", "assert catalan_number(5) == 42", "assert catalan_number(9) == 4862", "assert catalan_number(11) == 58786", "assert catalan_number(11) == 58786"], "entry_point": "catalan_number", "repair_prompt": ["Create a function catalan_number that provides the nth Catalan number.\ncatalan_number(10)==16796\n"], "completions": ["from typing import List\n## main.py\n\ndef catalan_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth Catalan number using a mathematical formula.\n\n    The nth Catalan number can be computed using the formula:\n    C_n = (2n)! / ((n+1)! * n!)\n\n    Args:\n        n (int): The position in the sequence of Catalan numbers.\n\n    Returns:\n        int: The nth Catalan number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    def factorial(num: int) -> int:\n        \"\"\"\n        Calculate the factorial of a given number.\n\n        Args:\n            num (int): The number to calculate the factorial for.\n\n        Returns:\n            int: The factorial of the number.\n        \"\"\"\n        if num == 0 or num == 1:\n            return 1\n        result = 1\n        for i in range(2, num + 1):\n            result *= i\n        return result\n\n    numerator = factorial(2 * n)\n    denominator = factorial(n + 1) * factorial(n)\n    catalan = numerator // denominator\n    return catalan\n\n# Example usage:\n# print(catalan_number(5))  # Output: 42\n", "from typing import List\n## main.py\n\nimport math\n\ndef catalan_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth Catalan number using a well-known mathematical algorithm.\n\n    Args:\n        n (int): The position in the sequence of Catalan numbers.\n\n    Returns:\n        int: The nth Catalan number.\n\n    Raises:\n        ValueError: If n is negative.\n\n    Example:\n        >>> catalan_number(0)\n        1\n        >>> catalan_number(1)\n        1\n        >>> catalan_number(5)\n        42\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    if n == 0 or n == 1:\n        return 1\n\n    # Calculate the Catalan number using the formula\n    catalan = math.comb(2 * n, n) // (n + 1)\n\n    return catalan\n\n# Example usage\nif __name__ == \"__main__\":\n    print(catalan_number(0))  # Output: 1\n    print(catalan_number(1))  # Output: 1\n    print(catalan_number(5))  # Output: 42\n", "from typing import List\nimport math\n\ndef catalan_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth Catalan number using the formula based on binomial coefficients.\n    \n    Args:\n        n (int): The position in the sequence of Catalan numbers.\n        \n    Returns:\n        int: The nth Catalan number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Calculate the Catalan number using the binomial coefficient formula\n    catalan = math.comb(2 * n, n) // (n + 1)\n    return catalan\n", "from typing import List\n## main.py\n\nimport math\n\ndef catalan_number(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    catalan = math.comb(2 * n, n) // (n + 1)\n    return catalan\n", "from typing import List\nimport math\n\ndef catalan_number(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Calculate the Catalan number using the formula C_n = (2n)! / ((n+1)! * n!)\n    def factorial(num: int) -> int:\n        return math.factorial(num)\n    \n    numerator = factorial(2 * n)\n    denominator = factorial(n + 1) * factorial(n)\n    \n    return numerator // denominator\n\n# Example usage:\n# print(catalan_number(5))  # Output: 42\n", "from typing import List\nimport math\n\ndef catalan_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth Catalan number using the formula:\n    C_n = (2n)! / ((n+1)! * n!)\n    \n    Args:\n        n (int): The position in the sequence of Catalan numbers.\n    \n    Returns:\n        int: The nth Catalan number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Calculate the factorial of 2n\n    factorial_2n = math.factorial(2 * n)\n    \n    # Calculate the factorial of (n+1)\n    factorial_n_plus_1 = math.factorial(n + 1)\n    \n    # Calculate the factorial of n\n    factorial_n = math.factorial(n)\n    \n    # Calculate the Catalan number using the formula\n    catalan = factorial_2n // (factorial_n_plus_1 * factorial_n)\n    \n    return catalan\n", "from typing import List\n## main.py\n\ndef catalan_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth Catalan number using a mathematical formula.\n    \n    The nth Catalan number can be computed using the formula:\n    C_n = (2n)! / ((n+1)! * n!)\n    \n    Args:\n        n (int): The position in the sequence of Catalan numbers.\n        \n    Returns:\n        int: The nth Catalan number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    def factorial(num: int) -> int:\n        \"\"\"\n        Calculate the factorial of a given number.\n        \n        Args:\n            num (int): The number to calculate the factorial for.\n            \n        Returns:\n            int: The factorial of the given number.\n        \"\"\"\n        if num == 0 or num == 1:\n            return 1\n        result = 1\n        for i in range(2, num + 1):\n            result *= i\n        return result\n    \n    numerator = factorial(2 * n)\n    denominator = factorial(n + 1) * factorial(n)\n    catalan = numerator // denominator\n    return catalan\n\n# Example usage:\n# print(catalan_number(5))  # Output: 42\n", "from typing import List\nimport math\n\ndef catalan_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth Catalan number using the formula C_n = (2n)! / ((n+1)! * n!).\n    \n    Args:\n        n (int): The position in the sequence of Catalan numbers.\n        \n    Returns:\n        int: The nth Catalan number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Calculate the factorial of 2n\n    factorial_2n = math.factorial(2 * n)\n    \n    # Calculate the factorial of (n+1)\n    factorial_n_plus_1 = math.factorial(n + 1)\n    \n    # Calculate the factorial of n\n    factorial_n = math.factorial(n)\n    \n    # Calculate the Catalan number using the formula\n    catalan = factorial_2n // (factorial_n_plus_1 * factorial_n)\n    \n    return catalan\n", "from typing import List\nimport math\n\ndef catalan_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth Catalan number using the formula C_n = (2n)! / ((n+1)! * n!).\n    \n    Args:\n        n (int): The position in the sequence of Catalan numbers.\n        \n    Returns:\n        int: The nth Catalan number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Direct formula for Catalan number\n    catalan = math.comb(2 * n, n) // (n + 1)\n    \n    return catalan\n\n# Example usage:\n# print(catalan_number(5))  # Output: 42\n", "from typing import List\nimport math\n\ndef catalan_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth Catalan number using the formula C_n = (2n)! / ((n+1)! * n!).\n    \n    Args:\n        n (int): The position in the Catalan sequence.\n        \n    Returns:\n        int: The nth Catalan number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Calculate the factorial of 2*n\n    numerator = math.factorial(2 * n)\n    \n    # Calculate the factorial of (n+1) and n\n    denominator = math.factorial(n + 1) * math.factorial(n)\n    \n    # Calculate the Catalan number using the formula\n    catalan = numerator // denominator\n    \n    return catalan\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that calculates the nth Catalan number. The function should be efficient and accurate. The product should be easy to integrate into other projects and should have clear documentation. The user stories indicate a need for a versatile and user-friendly tool.\nrequirement pool:\n- The main code should accurately calculate the nth Catalan number using an optimized algorithm.\n- The function should be easily integrable into other projects.\n- The product should include clear and comprehensive documentation.\n- The user interface should be simple and intuitive.\n- The product should be tested for accuracy and performance.\nTo create an efficient and accurate Catalan number calculator, we will use a mathematical formula that directly computes the nth Catalan number. This approach avoids the need for complex data structures or extensive calculations, ensuring optimal performance. The formula is based on combinatorics and is well-known in the field of mathematics and computer science.\n", "requirement analysis:\nThe primary requirement is to create a function that calculates the nth Catalan number accurately and efficiently. Secondary requirements include ensuring the function is easy to integrate into other projects and providing clear documentation for users.\nrequirement pool:\n- The main code should accurately calculate the nth Catalan number using a well-known algorithm.\n- The function should be optimized for performance to handle large values of n efficiently.\n- Include clear documentation and examples to help users understand how to use the function.\n- Ensure the function is compatible with Python versions commonly used in industry.\n- Consider implementing unit tests to ensure the function's correctness and reliability.\nTo create an accurate and efficient Catalan number generator in Python, we will use a well-known mathematical algorithm for calculating Catalan numbers. This algorithm is efficient and widely used in mathematical computations. We will implement this algorithm in a Python function, ensuring that it handles large values of n efficiently. Additionally, we will include clear documentation and examples to help users understand how to use the function.\n", "requirement analysis:\nThe primary requirement is to create a function that calculates the nth Catalan number accurately and efficiently. Secondary requirements include ensuring the function is user-friendly and can be easily integrated into other projects. Clarity and optimization of the code are also important.\nrequirement pool:\n- The main code should accurately calculate the nth Catalan number using an optimized algorithm.\n- The function should be easy to integrate into other projects.\n- The code should be optimized for performance to handle large values of n efficiently.\n- The user interface should be simple and intuitive.\n- The documentation should provide clear explanations and examples of how to use the function.\nTo create an accurate and efficient Catalan number generator, we will use a mathematical formula based on binomial coefficients. This approach ensures that the function is optimized for performance and can handle large values of n efficiently. The algorithm will be implemented in Python, leveraging the math library for binomial coefficient calculations.\n", "requirement analysis:\nThe primary requirement is to create a function that accurately calculates the nth Catalan number. Secondary requirements include optimizing the function for performance and ensuring the code is easy to understand and maintain.\nrequirement pool:\n- Implement the Catalan number formula efficiently\n- Ensure the function handles large inputs gracefully\n- Write clear and concise code documentation\n- Test the function for accuracy and performance\n- Optimize the function for execution speed\nTo create an efficient and accurate Catalan number generator in Python, we will use a mathematical formula that calculates the nth Catalan number directly. This approach ensures that the function handles large inputs gracefully and is optimized for performance. We will also ensure that the code is well-documented to aid understanding and maintainability.\n", "requirement analysis:\nThe primary requirement is to create a function that accurately calculates the nth Catalan number. Secondary requirements include optimizing the function for performance and providing clear documentation. The function should be easy to integrate into other projects and should handle large values of n efficiently.\nrequirement pool:\n- The main code should accurately calculate the nth Catalan number.\n- The function should be optimized for performance.\n- The documentation should be clear and concise.\n- The function should be easy to integrate into other projects.\n- The function should handle large values of n efficiently.\nTo create an accurate and efficient Catalan number calculator, we will use Python's built-in libraries and optimize the calculation using an iterative approach rather than recursion, which can be inefficient for large values of n. The Catalan number can be calculated using the formula C_n = (2n)! / ((n+1)! * n!).\n", "requirement analysis:\nThe primary requirement is to create a function that calculates the nth Catalan number accurately and efficiently. Secondary requirements include ensuring the function is easy to understand and use, and providing clear documentation. The function should be optimized for performance to handle large values of n.\nrequirement pool:\n- The main code should accurately calculate the nth Catalan number using a well-known formula.\n- The function should be optimized for performance to handle large values of n.\n- Provide clear documentation and examples of how to use the function.\n- Ensure the function is easy to understand and use, with a simple interface.\n- Include unit tests to verify the accuracy and reliability of the function.\nTo create an accurate and efficient Catalan number generator in Python, we will use a mathematical formula that directly computes the nth Catalan number. This approach ensures that the function is optimized for performance and can handle large values of n. The formula for the nth Catalan number is given by C_n = (2n)! / ((n+1)! * n!). We will use Python's built-in math library to handle factorial calculations efficiently.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth Catalan number. The Catalan numbers are a sequence of natural numbers that have many applications in combinatorial mathematics. The function should be efficient and able to handle large values of n. The product should be user-friendly and provide clear documentation on how to use the function.\nrequirement pool:\n- The main code should be optimized for performance\n- The function should be easy to understand and use\n- Provide clear documentation and examples\n- Ensure the function works correctly for a wide range of inputs\n- Include unit tests to verify the correctness of the function\nTo create an efficient and accurate Catalan number calculator in Python, we will use a mathematical formula to compute the nth Catalan number directly. This approach avoids the inefficiencies of recursive methods and leverages Python's built-in support for large integers to handle large values of n. The function will be optimized for performance and will be designed to be easily understandable and used by mathematicians, programmers, and students.\n", "requirement analysis:\nThe primary requirement is to create a function that accurately calculates the nth Catalan number. The function should be optimized for performance to handle larger values of n efficiently. Clarity in the code is also important for ease of use and understanding by users.\nrequirement pool:\n- The main code should accurately calculate the nth Catalan number.\n- Optimize the function for performance to handle larger values of n.\n- Ensure the code is well-documented and easy to understand.\nTo create an accurate and efficient Catalan number generator in Python, we will use a mathematical formula that directly computes the nth Catalan number. This approach ensures that the function is optimized for performance and handles larger values of n efficiently. The formula for the nth Catalan number is given by C_n = (2n)! / ((n+1)! * n!). We will use Python's built-in math library to handle factorial calculations, which are essential for this computation.\n", "requirement analysis:\nThe primary requirement is to create a function that calculates the nth Catalan number accurately. Secondary requirements include optimizing the function for performance and designing a user-friendly interface for easy interaction.\nrequirement pool:\n- Implement the Catalan number formula accurately\n- Optimize the function for performance\n- Design a user-friendly interface\n- Add detailed documentation for educational purposes\n- Include user feedback mechanisms\nTo create an accurate and efficient Catalan number calculator, we will use a mathematical formula to compute the nth Catalan number. The formula for the nth Catalan number is given by C_n = (2n)! / ((n+1)! * n!). We will implement this formula in Python, leveraging the built-in math library for factorial calculations. This approach ensures both accuracy and efficiency.\n", "requirement analysis:\nThe primary requirement is to create a function that accurately calculates the nth Catalan number. Secondary requirements include optimizing the function for performance and ensuring the code is clear and easy to understand. The function should be versatile and applicable in various mathematical and programming contexts.\nrequirement pool:\n- Implement the Catalan number algorithm accurately\n- Optimize the function for performance\n- Ensure the code is well-documented and easy to understand\n- Allow for easy integration into other projects\n- Provide flexibility in usage\nTo create an accurate and efficient Catalan number generator in Python, we will use a mathematical formula that directly computes the nth Catalan number. This approach is efficient and avoids the need for complex data structures or extensive calculations. The formula for the nth Catalan number is given by C_n = (2n)! / ((n+1)! * n!). We will use Python's built-in math library to handle the factorial calculations, ensuring precision and performance.\n"], "test": ["def check(catalan_number):\n\tassert catalan_number(10)==16796", "def check(catalan_number):\n\tassert catalan_number(9)==4862", "def check(catalan_number):\n\tassert catalan_number(7)==429", "def check(catalan_number):\n\tassert catalan_number(13) == 742900", "def check(catalan_number):\n\tassert catalan_number(6) == 132", "def check(catalan_number):\n\tassert catalan_number(15) == 9694845", "def check(catalan_number):\n\tassert catalan_number(15) == 9694845", "def check(catalan_number):\n\tassert catalan_number(15) == 9694845", "def check(catalan_number):\n\tassert catalan_number(7) == 429", "def check(catalan_number):\n\tassert catalan_number(6) == 132", "def check(catalan_number):\n\tassert catalan_number(13) == 742900", "def check(catalan_number):\n\tassert catalan_number(11) == 58786", "def check(catalan_number):\n\tassert catalan_number(7) == 429", "def check(catalan_number):\n\tassert catalan_number(12) == 208012", "def check(catalan_number):\n\tassert catalan_number(12) == 208012", "def check(catalan_number):\n\tassert catalan_number(5) == 42", "def check(catalan_number):\n\tassert catalan_number(14) == 2674440", "def check(catalan_number):\n\tassert catalan_number(11) == 58786", "def check(catalan_number):\n\tassert catalan_number(13) == 742900", "def check(catalan_number):\n\tassert catalan_number(11) == 58786", "def check(catalan_number):\n\tassert catalan_number(10) == 16796", "def check(catalan_number):\n\tassert catalan_number(5) == 42", "def check(catalan_number):\n\tassert catalan_number(13) == 742900", "def check(catalan_number):\n\tassert catalan_number(9) == 4862", "def check(catalan_number):\n\tassert catalan_number(10) == 16796", "def check(catalan_number):\n\tassert catalan_number(5) == 42", "def check(catalan_number):\n\tassert catalan_number(11) == 58786", "def check(catalan_number):\n\tassert catalan_number(7) == 429", "def check(catalan_number):\n\tassert catalan_number(15) == 9694845", "def check(catalan_number):\n\tassert catalan_number(5) == 42", "def check(catalan_number):\n\tassert catalan_number(7) == 429", "def check(catalan_number):\n\tassert catalan_number(15) == 9694845", "def check(catalan_number):\n\tassert catalan_number(5) == 42", "def check(catalan_number):\n\tassert catalan_number(12) == 208012", "def check(catalan_number):\n\tassert catalan_number(12) == 208012", "def check(catalan_number):\n\tassert catalan_number(8) == 1430", "def check(catalan_number):\n\tassert catalan_number(6) == 132", "def check(catalan_number):\n\tassert catalan_number(7) == 429", "def check(catalan_number):\n\tassert catalan_number(10) == 16796", "def check(catalan_number):\n\tassert catalan_number(4) == 14", "def check(catalan_number):\n\tassert catalan_number(13) == 742900", "def check(catalan_number):\n\tassert catalan_number(9) == 4862", "def check(catalan_number):\n\tassert catalan_number(9) == 4862", "def check(catalan_number):\n\tassert catalan_number(14) == 2674440", "def check(catalan_number):\n\tassert catalan_number(10) == 16796", "def check(catalan_number):\n\tassert catalan_number(4) == 14", "def check(catalan_number):\n\tassert catalan_number(4) == 14", "def check(catalan_number):\n\tassert catalan_number(6) == 132", "def check(catalan_number):\n\tassert catalan_number(4) == 14", "def check(catalan_number):\n\tassert catalan_number(5) == 42", "def check(catalan_number):\n\tassert catalan_number(11) == 58786", "def check(catalan_number):\n\tassert catalan_number(5) == 42", "def check(catalan_number):\n\tassert catalan_number(12) == 208012", "def check(catalan_number):\n\tassert catalan_number(7) == 429", "def check(catalan_number):\n\tassert catalan_number(7) == 429", "def check(catalan_number):\n\tassert catalan_number(13) == 742900", "def check(catalan_number):\n\tassert catalan_number(11) == 58786", "def check(catalan_number):\n\tassert catalan_number(6) == 132", "def check(catalan_number):\n\tassert catalan_number(9) == 4862", "def check(catalan_number):\n\tassert catalan_number(5) == 42", "def check(catalan_number):\n\tassert catalan_number(5) == 42", "def check(catalan_number):\n\tassert catalan_number(7) == 429", "def check(catalan_number):\n\tassert catalan_number(14) == 2674440", "def check(catalan_number):\n\tassert catalan_number(14) == 2674440", "def check(catalan_number):\n\tassert catalan_number(5) == 42", "def check(catalan_number):\n\tassert catalan_number(8) == 1430", "def check(catalan_number):\n\tassert catalan_number(11) == 58786", "def check(catalan_number):\n\tassert catalan_number(6) == 132", "def check(catalan_number):\n\tassert catalan_number(8) == 1430", "def check(catalan_number):\n\tassert catalan_number(9) == 4862", "def check(catalan_number):\n\tassert catalan_number(11) == 58786", "def check(catalan_number):\n\tassert catalan_number(12) == 208012", "def check(catalan_number):\n\tassert catalan_number(3) == 5", "def check(catalan_number):\n\tassert catalan_number(10) == 16796", "def check(catalan_number):\n\tassert catalan_number(8) == 1430", "def check(catalan_number):\n\tassert catalan_number(3) == 5", "def check(catalan_number):\n\tassert catalan_number(2) == 2", "def check(catalan_number):\n\tassert catalan_number(11) == 58786", "def check(catalan_number):\n\tassert catalan_number(5) == 42", "def check(catalan_number):\n\tassert catalan_number(7) == 429", "def check(catalan_number):\n\tassert catalan_number(6) == 132", "def check(catalan_number):\n\tassert catalan_number(5) == 42", "def check(catalan_number):\n\tassert catalan_number(3) == 5", "def check(catalan_number):\n\tassert catalan_number(10) == 16796", "def check(catalan_number):\n\tassert catalan_number(8) == 1430", "def check(catalan_number):\n\tassert catalan_number(9) == 4862", "def check(catalan_number):\n\tassert catalan_number(11) == 58786", "def check(catalan_number):\n\tassert catalan_number(9) == 4862", "def check(catalan_number):\n\tassert catalan_number(5) == 42", "def check(catalan_number):\n\tassert catalan_number(9) == 4862", "def check(catalan_number):\n\tassert catalan_number(8) == 1430", "def check(catalan_number):\n\tassert catalan_number(12) == 208012", "def check(catalan_number):\n\tassert catalan_number(8) == 1430", "def check(catalan_number):\n\tassert catalan_number(9) == 4862", "def check(catalan_number):\n\tassert catalan_number(7) == 429", "def check(catalan_number):\n\tassert catalan_number(2) == 2", "def check(catalan_number):\n\tassert catalan_number(6) == 132", "def check(catalan_number):\n\tassert catalan_number(2) == 2", "def check(catalan_number):\n\tassert catalan_number(5) == 42", "def check(catalan_number):\n\tassert catalan_number(9) == 4862", "def check(catalan_number):\n\tassert catalan_number(11) == 58786", "def check(catalan_number):\n\tassert catalan_number(11) == 58786"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\nimport math\n\ndef catalan_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth Catalan number using the formula C_n = (2n)! / ((n+1)! * n!).\n    \n    Args:\n        n (int): The position in the Catalan sequence.\n        \n    Returns:\n        int: The nth Catalan number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Calculate the factorial of 2*n\n    numerator = math.factorial(2 * n)\n    \n    # Calculate the factorial of (n+1) and n\n    denominator = math.factorial(n + 1) * math.factorial(n)\n    \n    # Calculate the Catalan number using the formula\n    catalan = numerator // denominator\n    \n    return catalan\n", "passed": true, "pass": true, "pass_num": 10, "round": 838, "mutate_method": "rephrase_one", "parent_index": 282}
