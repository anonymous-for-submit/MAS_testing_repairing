{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 606, "prompt": "Write a function to convert degrees to radians.", "code": "import math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian", "test_imports": [], "test_list": ["assert radian_degree(90)==1.5707963267948966", "assert radian_degree(60)==1.0471975511965976", "assert radian_degree(120)==2.0943951023931953", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(88) == 1.53588974175501", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(88) == 1.53588974175501", "assert radian_degree(92) == 1.6057029118347832", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(91) == 1.5882496193148399", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(93) == 1.6231562043547265", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(91) == 1.5882496193148399", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(93) == 1.6231562043547265", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(64) == 1.117010721276371", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(62) == 1.0821041362364843", "assert radian_degree(55) == 0.9599310885968813", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(56) == 0.9773843811168246", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(56) == 0.9773843811168246", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(59) == 1.0297442586766545", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(61) == 1.064650843716541", "assert radian_degree(64) == 1.117010721276371", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(61) == 1.064650843716541", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(55) == 0.9599310885968813", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(122) == 2.129301687433082", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(125) == 2.181661564992912", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(116) == 2.0245819323134224", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(122) == 2.129301687433082", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(116) == 2.0245819323134224", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(123) == 2.1467549799530254"], "entry_point": "radian_degree", "repair_prompt": ["Write a function radian_degree to convert degrees to radians.\nradian_degree(90)==1.5707963267948966\n"], "completions": ["from typing import List\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Converts degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    return degrees * (math.pi / 180)\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Converts degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    radians = degrees * (math.pi / 180)\n    return radians\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Converts degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    radians = degrees * (math.pi / 180)\n    return radians\n", "from typing import List\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    radians = degrees * (math.pi / 180)\n    return radians\n", "from typing import List\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    return degrees * (math.pi / 180)\n", "from typing import List\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Converts degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n\n    Raises:\n        TypeError: If the input is not a number.\n    \"\"\"\n    if not isinstance(degrees, (int, float)):\n        raise TypeError(\"Input must be a number\")\n    \n    return degrees * (math.pi / 180)\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Converts an angle from degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    radians = degrees * (math.pi / 180)\n    return radians\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    radians = degrees * (math.pi / 180)\n    return radians\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    if not isinstance(degrees, (int, float)):\n        raise ValueError(\"Input must be a number\")\n    \n    return degrees * (math.pi / 180)\n", "from typing import List\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    radians = degrees * (math.pi / 180)\n    return radians\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that converts degrees to radians. The function should be accurate and easy to use. The output should match the mathematical constant PI for degrees to radians conversion. The function should handle edge cases and provide clear error messages for invalid inputs.\nrequirement pool:\n- The function should accurately convert degrees to radians using the mathematical constant PI.\n- The function should handle edge cases such as very large and very small degree values.\n- The function should provide clear and user-friendly error messages for invalid inputs.\n- The function should be easy to integrate into other projects.\n- The function should be optimized for performance to handle large datasets efficiently.\nTo create a function that converts degrees to radians accurately, we will use Python's math library which provides the constant math.pi for the mathematical constant PI. The function will take an input in degrees, convert it to radians using the formula radians = degrees * (math.pi / 180), and return the result. This approach ensures high precision and efficiency.\n", "requirement analysis:\nThe primary requirement is to develop a function that accurately converts degrees to radians. The function should be simple and easy to use, suitable for both developers and students. It should be accurate and reliable, ensuring that the conversion is precise.\nrequirement pool:\n- Implement a function to convert degrees to radians with high accuracy\n- Ensure the function is user-friendly and can be easily integrated into various projects\n- Provide documentation and examples to assist users\n- Include error handling to manage unexpected inputs\n- Optimize the code for performance and efficiency\nTo implement the radian_degree function, we will use Python's built-in math library, which provides a constant 'pi' that we can use for the conversion. The function will take an input in degrees, convert it to radians using the formula radians = degrees * (pi / 180), and return the result. This approach ensures accuracy and simplicity.\n", "requirement analysis:\nThe primary requirement is to create a function that accurately converts degrees to radians. The function should be simple and easy to use, with a clear and intuitive interface. The product should be reliable and efficient, ensuring that users can convert degrees to radians quickly and accurately.\nrequirement pool:\n- The main code should accurately convert degrees to radians\n- The function should be easy to use and understand\n- Ensure the conversion is accurate to ensure reliable results\n- Provide a simple and clean user interface\n- Optimize the code for efficiency and performance\nTo create a function that accurately converts degrees to radians, we will use Python's built-in math library, which provides the necessary mathematical constants and functions. The function will be simple and easy to use, with a clear and intuitive interface.\n", "requirement analysis:\nThe function should accurately convert degrees to radians using the mathematical constant PI. The output should match the expected result within a reasonable margin of error. The function should be simple and easy to use, requiring minimal input and producing a clear output.\nrequirement pool:\n- The main code should accurately convert degrees to radians using the formula radians = degrees * (PI / 180).\n- The function should handle edge cases such as 0 degrees and 360 degrees.\n- The function should be implemented in a language that is widely used and supported, such as Python or JavaScript.\n- The function should include comments to explain the code and make it easier for users to understand.\n- The function should be tested to ensure it meets the requirements and handles errors gracefully.\nWe will implement the radian_degree function using Python's math library, which provides a constant PI for mathematical calculations. The function will take an input in degrees, convert it to radians using the formula radians = degrees * (PI / 180), and return the result. This approach ensures accuracy and efficiency in the conversion process.\n", "requirement analysis:\nThe primary requirement is to create a function that accurately converts degrees to radians. The function should be user-friendly and capable of handling common angles like 90 degrees. The interface should be simple and clear, ensuring ease of use. The product should also be reliable, handling edge cases like 0 degrees and 360 degrees correctly.\nrequirement pool:\n- The main code should accurately convert degrees to radians.\n- The function should be user-friendly and easy to use.\n- The product should handle common angles like 90 degrees correctly.\n- The interface should be simple and clear.\n- The product should be reliable and handle edge cases like 0 degrees and 360 degrees.\nTo create an accurate and efficient degrees to radians conversion tool, we will utilize Python's built-in math library, which provides the constant 'pi' for precision in calculations. The function will take a single argument, degrees, and return the radians equivalent. This approach ensures simplicity and leverages Python's standard library for reliability.\n", "requirement analysis:\nThe requirement is to create a function that converts degrees to radians. The function should be accurate and easy to use. The output for 90 degrees should be 1.5707963267948966 radians. The function should be compatible with Python programming language.\nrequirement pool:\n- Implement the function to convert degrees to radians accurately\n- Ensure the function is easy to use and integrate\n- Include error handling for invalid inputs\n- Provide documentation and examples for users\n- Optimize the function for performance in large-scale applications\nTo implement the function radian_degree that converts degrees to radians, we will use Python's built-in math library which provides a constant 'math.pi' representing the value of \u03c0 (pi). The conversion formula is radians = degrees * (\u03c0 / 180). We will ensure the function is accurate and efficient by directly applying this formula. The function will handle potential errors such as non-numeric inputs by raising a TypeError. We will also include a simple and clean user interface for easy usability.\n", "requirement analysis:\nThe primary requirement is to create a function that accurately converts degrees to radians. This is crucial for applications in mathematics, physics, and engineering where precise angle measurements are necessary. The function should be simple to use and integrate into existing projects, making it accessible for users with varying levels of technical expertise.\nrequirement pool:\n- Implement a function to convert degrees to radians with high precision.\n- Ensure the function is user-friendly and can be easily integrated into various projects.\n- Provide clear documentation and examples on how to use the function.\n- Include a simple interface for users to input degrees and view the converted radians.\n- Test the function for accuracy and performance across different programming environments.\nTo implement the radian_degree function accurately and efficiently, we will use Python's built-in math library, which provides a constant 'pi' that we can use for the conversion. The function will take an input in degrees, convert it to radians using the formula radians = degrees * (pi / 180), and return the result. This approach ensures high precision and efficiency.\n", "requirement analysis:\nThe requirement is to create a function that converts degrees to radians. The function should be accurate and easy to use. The output for 90 degrees should be precisely 1.5707963267948966 radians. The function should be compatible with Python, which is the specified programming language.\nrequirement pool:\n- Implement a function radian_degree(degrees) that returns the radians equivalent of the given degrees.\n- Ensure the function is accurate to at least 15 decimal places for common degree values.\n- Include clear documentation on how to use the function.\n- Test the function with a variety of inputs to ensure it works across different ranges of degrees.\n- Optimize the function for performance, especially for large numbers of conversions.\nTo implement the radian_degree function, we will use Python's math library, which provides a constant for the value of pi and a function to convert degrees to radians. The function will take a single argument, degrees, and return the radians equivalent. We will ensure the function is accurate to at least 15 decimal places for common degree values.\n", "requirement analysis:\nThe requirement is to create a function that converts degrees to radians. The function should be simple, accurate, and user-friendly. The conversion should be efficient and the output should match the expected result for 90 degrees.\nrequirement pool:\n- The main code should accurately convert degrees to radians using the formula: radians = degrees * (pi / 180).\n- The function should handle edge cases such as negative degrees and very large degrees.\n- Implement a simple and intuitive user interface for inputting degrees and displaying the result in radians.\n- Ensure the application is responsive and works well on both desktop and mobile devices.\n- Include basic error handling to manage invalid inputs gracefully.\nTo create a function that converts degrees to radians, we will use Python's built-in math library, which provides the constant pi for mathematical calculations. The conversion formula is straightforward: radians = degrees * (pi / 180). We will ensure the function handles edge cases and maintains simplicity and readability.\n", "requirement analysis:\nThe function should accurately convert degrees to radians using the mathematical constant PI. The output should match the expected result within a reasonable margin of error. The function should be simple and easy to use, requiring minimal input and producing a clear output.\nrequirement pool:\n- The main code should accurately convert degrees to radians using the formula radians = degrees * (PI / 180).\n- The function should handle edge cases such as 0 degrees and 360 degrees.\n- The function should be implemented in a language that is widely used and supported, such as Python or JavaScript.\n- The function should include comments to explain the code and make it easier for users to understand.\n- The function should be tested to ensure it meets the requirements and handles errors gracefully.\nWe will implement the radian_degree function using Python's math library, which provides a constant PI for mathematical calculations. The function will take an input in degrees, convert it to radians using the formula radians = degrees * (PI / 180), and return the result. This approach ensures accuracy and efficiency in the conversion process.\n"], "test": ["def check(radian_degree):\n\tassert radian_degree(90)==1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(60)==1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(120)==2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(88) == 1.53588974175501", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(88) == 1.53588974175501", "def check(radian_degree):\n\tassert radian_degree(92) == 1.6057029118347832", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(91) == 1.5882496193148399", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(93) == 1.6231562043547265", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(91) == 1.5882496193148399", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(93) == 1.6231562043547265", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(64) == 1.117010721276371", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(62) == 1.0821041362364843", "def check(radian_degree):\n\tassert radian_degree(55) == 0.9599310885968813", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(56) == 0.9773843811168246", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(56) == 0.9773843811168246", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(59) == 1.0297442586766545", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(61) == 1.064650843716541", "def check(radian_degree):\n\tassert radian_degree(64) == 1.117010721276371", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(61) == 1.064650843716541", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(55) == 0.9599310885968813", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(122) == 2.129301687433082", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(125) == 2.181661564992912", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(116) == 2.0245819323134224", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(122) == 2.129301687433082", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(116) == 2.0245819323134224", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    radians = degrees * (math.pi / 180)\n    return radians\n", "passed": true, "pass": true, "pass_num": 10, "round": 186, "mutate_method": "condense_two2one", "parent_index": 186}
