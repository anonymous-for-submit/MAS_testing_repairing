{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 606, "prompt": "Create a function to convert degrees to radians.", "code": "import math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian", "test_imports": [], "test_list": ["assert radian_degree(90)==1.5707963267948966", "assert radian_degree(60)==1.0471975511965976", "assert radian_degree(120)==2.0943951023931953", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(88) == 1.53588974175501", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(88) == 1.53588974175501", "assert radian_degree(92) == 1.6057029118347832", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(91) == 1.5882496193148399", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(93) == 1.6231562043547265", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(91) == 1.5882496193148399", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(93) == 1.6231562043547265", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(64) == 1.117010721276371", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(62) == 1.0821041362364843", "assert radian_degree(55) == 0.9599310885968813", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(56) == 0.9773843811168246", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(56) == 0.9773843811168246", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(59) == 1.0297442586766545", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(61) == 1.064650843716541", "assert radian_degree(64) == 1.117010721276371", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(61) == 1.064650843716541", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(55) == 0.9599310885968813", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(122) == 2.129301687433082", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(125) == 2.181661564992912", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(116) == 2.0245819323134224", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(122) == 2.129301687433082", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(116) == 2.0245819323134224", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(123) == 2.1467549799530254"], "entry_point": "radian_degree", "repair_prompt": ["Create a function radian_degree to convert degrees to radians.\nradian_degree(90)==1.5707963267948966\n"], "completions": ["from typing import List\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Converts degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    return degrees * (math.pi / 180)\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Converts degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    return degrees * math.pi / 180\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Converts degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    return math.radians(degrees)\n", "from typing import List\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Converts degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    return degrees * (math.pi / 180)\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Converts degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    return math.radians(degrees)\n", "from typing import List\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Converts degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    return degrees * (math.pi / 180)\n", "from typing import List\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Converts degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    return math.radians(degrees)\n", "from typing import List\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Converts degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    radians = degrees * (math.pi / 180)\n    return radians\n", "from typing import List\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Converts degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    radians = degrees * (math.pi / 180)\n    return radians\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Converts degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    return math.radians(degrees)\n"], "plans": ["requirement analysis:\nThe primary requirement is to create a function that converts degrees to radians accurately. The function should be simple and easy to use, with immediate feedback on the conversion result. The user interface should be clean and modern, providing a seamless user experience.\nrequirement pool:\n- The main code should accurately convert degrees to radians using the formula radians = degrees * (pi / 180).\n- The function should handle edge cases such as negative degrees and very large degree values.\n- The user interface should be intuitive and easy to navigate, with a clear input field for degrees and a display for the result in radians.\n- The application should include a simple explanation or tooltip explaining the conversion formula.\n- The design should be modern and responsive, ensuring compatibility with both desktop and mobile devices.\nTo create a function that converts degrees to radians accurately and efficiently, we will use Python's built-in math library, which provides the constant 'pi'. The conversion formula is straightforward: radians = degrees * (pi / 180). We will ensure the function handles edge cases such as negative degrees and very large degree values. The user interface will be intuitive, with a simple input field for degrees and an immediate display of the converted radians.\n", "requirement analysis:\nThe requirement is to create a function that converts degrees to radians. The function should be accurate and easy to use. The user should be able to input a value in degrees and get the accurate radian equivalent. The function should be simple and clear, with minimal dependencies.\nrequirement pool:\n- The main code for the radian_degree function should accurately convert degrees to radians.\n- The function should be user-friendly and easy to understand.\n- Ensure the function is efficient and can handle a wide range of inputs.\n- Include simple documentation and examples to guide users.\n- Test the function to ensure it provides accurate results.\nTo create a function that converts degrees to radians, we will use Python's built-in math library, which provides a constant 'pi' that we can use for the conversion. The function will take an input in degrees, convert it to radians using the formula (degrees * pi / 180), and return the result. This approach ensures simplicity and accuracy.\n", "requirement analysis:\nThe primary requirement is to develop a function that accurately converts degrees to radians. This is crucial for applications in mathematics, physics, and engineering where precise angle measurements are necessary. The function should be simple and easy to use, suitable for integration into various projects without additional setup. The user interface should be clean and straightforward to ensure minimal learning curve.\nrequirement pool:\n- Develop a function to convert degrees to radians with high accuracy\n- Ensure the function is easy to use and integrate into other projects\n- Implement a user-friendly interface for easy interaction\n- Provide detailed documentation and examples for users\n- Include unit tests and validation checks for reliability\nTo create a function that accurately converts degrees to radians, we will use Python's built-in math library, which provides the necessary mathematical functions. The function will be simple and easy to use, ensuring high precision in conversion calculations. The interface will be clean and straightforward to minimize the learning curve.\n", "requirement analysis:\nThe primary requirement is to create a function that accurately converts degrees to radians. The function should be user-friendly and provide immediate results. The product should be cost-effective and offer high accuracy. The interface should be simple and modern to enhance user experience.\nrequirement pool:\n- Implement a function to convert degrees to radians with high accuracy.\n- Design a user-friendly interface for easy input and output.\n- Ensure the product is cost-effective and accessible to a wide range of users.\n- Continuously update and improve the product based on user feedback.\nTo create a function that accurately converts degrees to radians, we will use Python's built-in math library which provides a constant 'math.pi' representing the value of \u03c0 (pi). The conversion formula is radians = degrees * (\u03c0 / 180). We will ensure the function is user-friendly by providing immediate results and maintaining a simple and modern interface.\n", "requirement analysis:\nThe requirement is to create a function that converts degrees to radians. This is a fundamental mathematical operation used in various fields including physics, engineering, and mathematics. The function should be simple, efficient, and accurate. It should handle edge cases such as 0 degrees and 360 degrees, which should convert to 0 radians and 2\u03c0 radians respectively.\nrequirement pool:\n- Implement the radian_degree function to accurately convert degrees to radians\n- Ensure the function is efficient and can handle a wide range of inputs\n- Provide clear documentation on how to use the function\n- Include error handling for invalid inputs such as negative degrees\n- Test the function across different programming environments to ensure compatibility\nTo create a function that converts degrees to radians, we will utilize Python's built-in math library, which provides the necessary mathematical functions. The function will be simple and efficient, making use of the math.radians() method for the conversion.\n", "requirement analysis:\nThe primary requirement is to create a function that converts degrees to radians accurately. The function should be user-friendly and provide immediate results. The user interface should be clean and modern to enhance user experience.\nrequirement pool:\n- Implement a simple and accurate degree to radian conversion algorithm.\n- Design a user-friendly interface for easy input and output.\n- Ensure the application is responsive and works on various devices.\n- Include a brief explanation or formula for the conversion process.\n- Develop a modern, visually appealing design.\nWe will implement a simple and accurate degree to radian conversion algorithm using Python's math library, which provides a built-in function for this purpose. The function will take an input in degrees and return the equivalent in radians. The conversion formula is radians = degrees * (\u03c0 / 180), where \u03c0 is the mathematical constant Pi from the math library.\n", "requirement analysis:\nThe primary requirement is to develop a function that converts degrees to radians accurately. The user interface should be simple and intuitive, allowing users to input degrees and receive immediate radians conversion. The code should be well-documented and easy to understand to enhance user experience and confidence in the tool.\nrequirement pool:\n- Develop a function to convert degrees to radians with high accuracy.\n- Create a user-friendly interface for easy degree input and radian output.\n- Ensure the function is easily understandable and maintainable.\n- Implement responsive design for optimal viewing across devices.\n- Include detailed documentation and examples for user guidance.\nTo create a function that converts degrees to radians accurately and efficiently, we will utilize Python's built-in math library, which provides the necessary mathematical constants and functions. The function will be simple and straightforward, ensuring easy usability and accessibility.\n", "requirement analysis:\nThe primary requirement is to create a function that converts degrees to radians accurately. The function should be user-friendly and provide immediate results. The output should include a clear explanation of the conversion formula used.\nrequirement pool:\n- The main code should accurately convert degrees to radians using the formula radians = degrees * (\u03c0/180).\n- The function should handle user input gracefully and provide immediate feedback.\n- Include a simple user interface for easy degree input.\n- Display the result with a clear explanation of the conversion formula.\n- Ensure the code is well-documented and easy to understand for future maintenance.\nTo create a function that converts degrees to radians accurately and efficiently, we will use Python's built-in math library which provides the constant \u03c0 (pi) and a simple formula for conversion. The function will be designed to be user-friendly, providing immediate results and clear explanations of the conversion formula.\n", "requirement analysis:\nThe primary requirement is to create a function that converts degrees to radians accurately. The function should be user-friendly and provide immediate results. The output should include a clear explanation of the conversion formula used.\nrequirement pool:\n- The main code should accurately convert degrees to radians using the formula radians = degrees * (\u03c0/180).\n- The function should handle user input gracefully and provide immediate feedback.\n- Include a simple user interface for easy degree input.\n- Display the result with a clear explanation of the conversion formula.\n- Ensure the code is well-documented and easy to understand for future maintenance.\nTo create a function that converts degrees to radians accurately and efficiently, we will use Python's built-in math library which provides the constant \u03c0 (pi) and a simple formula for conversion. The function will be designed to be user-friendly, providing immediate results and clear explanations of the conversion formula.\n", "requirement analysis:\nThe primary requirement is to develop a function that accurately converts degrees to radians. This is crucial for applications in mathematics, physics, and engineering where precise angle measurements are necessary. The function should be simple and easy to use, suitable for integration into various projects without additional setup. The user interface should be clean and straightforward to ensure minimal learning curve.\nrequirement pool:\n- Develop a function to convert degrees to radians with high accuracy\n- Ensure the function is easy to use and integrate into other projects\n- Implement a user-friendly interface for easy interaction\n- Provide detailed documentation and examples for users\n- Include unit tests and validation checks for reliability\nTo create a function that accurately converts degrees to radians, we will use Python's built-in math library, which provides the necessary mathematical functions. The function will be simple and easy to use, ensuring high precision in conversion calculations. The interface will be clean and straightforward to minimize the learning curve.\n"], "test": ["def check(radian_degree):\n\tassert radian_degree(90)==1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(60)==1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(120)==2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(88) == 1.53588974175501", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(88) == 1.53588974175501", "def check(radian_degree):\n\tassert radian_degree(92) == 1.6057029118347832", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(91) == 1.5882496193148399", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(93) == 1.6231562043547265", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(91) == 1.5882496193148399", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(93) == 1.6231562043547265", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(64) == 1.117010721276371", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(62) == 1.0821041362364843", "def check(radian_degree):\n\tassert radian_degree(55) == 0.9599310885968813", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(56) == 0.9773843811168246", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(56) == 0.9773843811168246", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(59) == 1.0297442586766545", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(61) == 1.064650843716541", "def check(radian_degree):\n\tassert radian_degree(64) == 1.117010721276371", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(61) == 1.064650843716541", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(55) == 0.9599310885968813", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(122) == 2.129301687433082", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(125) == 2.181661564992912", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(116) == 2.0245819323134224", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(122) == 2.129301687433082", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(116) == 2.0245819323134224", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254"], "scores": [1.0, 0.8039, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, false, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 82, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Converts degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    return math.radians(degrees)\n", "passed": true, "pass": true, "pass_num": 9, "round": 879, "mutate_method": "rephrase_one", "parent_index": 643}
