{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 80, "prompt": "Create a function to calculate the nth tetrahedral number.", "code": "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6", "test_imports": [], "test_list": ["assert tetrahedral_number(5) == 35.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(7) == 84.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(7) == 84.0", "assert tetrahedral_number(1) == 1.0", "assert tetrahedral_number(9) == 165.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(1) == 1.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(1) == 1.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(10) == 220.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(5) == 35.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(7) == 84.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(1) == 1.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(7) == 84.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(10) == 220.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(7) == 84.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(9) == 165.0", "assert tetrahedral_number(7) == 84.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(5) == 35.0", "assert tetrahedral_number(7) == 84.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(1) == 1.0", "assert tetrahedral_number(11) == 286.0", "assert tetrahedral_number(9) == 165.0", "assert tetrahedral_number(5) == 35.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(1) == 1.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(5) == 35.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(5) == 35.0", "assert tetrahedral_number(5) == 35.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(9) == 165.0", "assert tetrahedral_number(1) == 1.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(12) == 364.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(5) == 35.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(7) == 84.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(10) == 220.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(11) == 286.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(7) == 84.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(10) == 220.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(9) == 165.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(9) == 165.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(7) == 84.0"], "entry_point": "tetrahedral_number", "repair_prompt": ["Create a function tetrahedral_number to calculate the nth tetrahedral number.\ntetrahedral_number(5) == 35.0\n"], "completions": ["from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    Args:\n        n (int): The position in the sequence, must be a positive integer.\n\n    Returns:\n        float: The nth tetrahedral number.\n\n    Raises:\n        ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return (n * (n + 1) * (n + 2)) / 6\n\n# Example usage:\n# print(tetrahedral_number(4))  # Output: 20.0\n", "from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    The nth tetrahedral number is given by the formula:\n    T(n) = (n * (n + 1) * (n + 2)) / 6\n\n    Args:\n        n (int): The position in the sequence, must be a non-negative integer.\n\n    Returns:\n        float: The nth tetrahedral number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    return (n * (n + 1) * (n + 2)) / 6\n", "from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    Args:\n        n (int): The position in the sequence, must be a positive integer.\n\n    Returns:\n        float: The nth tetrahedral number.\n\n    Raises:\n        ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return (n * (n + 1) * (n + 2)) / 6\n\n# Example usage:\n# print(tetrahedral_number(4))  # Output: 20.0\n", "from typing import List\n## main.py\n\nimport math\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"\n    Calculate the nth tetrahedral number using the formula n * (n + 1) * (n + 2) / 6.\n    \n    Args:\n        n (int): The position in the sequence, must be a non-negative integer.\n    \n    Returns:\n        float: The nth tetrahedral number.\n    \n    Raises:\n        ValueError: If the input is not a non-negative integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    return n * (n + 1) * (n + 2) / 6\n\n# Example usage:\n# print(tetrahedral_number(4))  # Should return 20.0\n", "from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    The nth tetrahedral number is given by the formula:\n    T(n) = (n * (n + 1) * (n + 2)) / 6\n\n    Args:\n        n (int): The position in the sequence, must be a non-negative integer.\n\n    Returns:\n        float: The nth tetrahedral number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    return (n * (n + 1) * (n + 2)) / 6\n", "from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    Args:\n        n (int): A positive integer representing the position in the sequence.\n\n    Returns:\n        float: The nth tetrahedral number.\n\n    Raises:\n        ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return (n * (n + 1) * (n + 2)) / 6\n\n# Example usage:\n# print(tetrahedral_number(5))  # Output: 35.0\n", "from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    Args:\n        n (int): The position in the sequence, must be a positive integer.\n\n    Returns:\n        float: The nth tetrahedral number.\n\n    Raises:\n        ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (n + 1) * (n + 2) / 6\n", "from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    Args:\n        n (int): The position in the sequence, must be a non-negative integer.\n\n    Returns:\n        float: The nth tetrahedral number.\n\n    Raises:\n        ValueError: If the input is not a non-negative integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    return n * (n + 1) * (n + 2) / 6\n\n# Example usage:\n# print(tetrahedral_number(4))  # Output: 20.0\n", "from typing import List\n## main.py\n\nimport math\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    The nth tetrahedral number is given by the formula:\n    T(n) = n(n+1)(n+2)/6\n\n    Args:\n        n (int): The position in the sequence, must be a non-negative integer.\n\n    Returns:\n        float: The nth tetrahedral number.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    return n * (n + 1) * (n + 2) / 6\n", "from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    Args:\n        n (int): The position in the sequence, must be a positive integer.\n\n    Returns:\n        float: The nth tetrahedral number.\n\n    Raises:\n        ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return (n * (n + 1) * (n + 2)) / 6\n\n# Example usage:\n# print(tetrahedral_number(4))  # Output: 20.0\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that calculates the nth tetrahedral number. Tetrahedral numbers are a sequence of figurate numbers that represent the number of spheres in a tetrahedron with n + 1 spheres on each edge. The formula for the nth tetrahedral number is given by T(n) = (n * (n + 1) * (n + 2)) / 6. The function should be efficient and handle large values of n.\nrequirement pool:\n- Implement the formula for calculating the nth tetrahedral number\n- Ensure the function is optimized for performance\n- Include error handling for invalid inputs\n- Provide a clear and concise documentation for the function\n- Include unit tests to verify the accuracy of the function\nTo implement the tetrahedral number calculator efficiently, we will use Python's built-in capabilities and leverage its mathematical libraries. The tetrahedral number formula T(n) = (n * (n + 1) * (n + 2)) / 6 is straightforward to implement directly. We will ensure the function is optimized for performance by using integer arithmetic to avoid unnecessary floating-point operations.\n", "requirement analysis:\nThe requirement to create a function that calculates the nth tetrahedral number is clear and specific. The function should be able to handle various values of n and provide accurate results. The user stories highlight the need for reliability, ease of use, and performance for large inputs. The competitive analysis shows that while there are several options for calculating tetrahedral numbers, there is a gap in the market for a fast, user-friendly, and accurate tool.\nrequirement pool:\n- The main code should accurately calculate the nth tetrahedral number using a well-known formula.\n- The function should be optimized for performance, especially for large values of n.\n- The user interface should be clean and intuitive, making it easy for users to input values and read results.\n- The product should include comprehensive error handling to manage unexpected inputs and edge cases.\n- The system should be designed with scalability in mind, allowing for future expansion and integration with other mathematical tools.\nTo create a function that calculates the nth tetrahedral number efficiently, we will use a mathematical formula that directly computes the result. The formula for the nth tetrahedral number is (n * (n + 1) * (n + 2)) / 6. This formula is simple and directly addresses the performance requirements for large values of n.\n", "requirement analysis:\nThe requirement to create a function that calculates the nth tetrahedral number is clear and specific. The function should be able to handle basic mathematical operations and return accurate results. The user stories highlight the need for versatility and ease of use, which aligns with the product goals of creating an accurate and efficient calculator and ensuring ease of use.\nrequirement pool:\n- The main code for tetrahedral_number function should be efficient and accurate.\n- The function should handle basic mathematical operations.\n- Ensure the function is easy to understand and use.\n- Optimize the performance for large values of n.\n- Provide clear documentation and examples for users.\nTo create a function that calculates the nth tetrahedral number efficiently, we will use a mathematical formula that directly computes the tetrahedral number without the need for iterative calculations. This approach ensures both accuracy and efficiency. The formula for the nth tetrahedral number is given by (n * (n + 1) * (n + 2)) / 6.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth tetrahedral number. Tetrahedral numbers are a sequence of numbers representing the number of spheres in a tetrahedron with n layers. The formula for the nth tetrahedral number is n * (n + 1) * (n + 2) / 6. The function should be efficient and handle both small and large values of n.\nrequirement pool:\n- The main code should accurately calculate the nth tetrahedral number using the formula n * (n + 1) * (n + 2) / 6.\n- The function should be optimized for performance, especially for large values of n.\n- The function should include error handling to manage invalid inputs, such as non-integer values.\n- The function should be documented with clear instructions and examples.\n- The function should be integrated into a user-friendly interface for easy access.\nTo create a function that calculates the nth tetrahedral number efficiently, we will use Python's built-in capabilities and ensure the function is optimized for performance. The function will take an integer input and return the nth tetrahedral number using the formula n * (n + 1) * (n + 2) / 6. We will also include error handling to manage invalid inputs such as non-integer values.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth tetrahedral number. Tetrahedral numbers are a sequence of figurate numbers that represent the number of spheres in a tetrahedron with n + 1 spheres on each edge. The formula for the nth tetrahedral number is given by T(n) = (n * (n + 1) * (n + 2)) / 6. This is a straightforward mathematical function that can be implemented in any programming language.\nrequirement pool:\n- Implement the tetrahedral number formula accurately\n- Ensure the function is optimized for large values of n\n- Include error handling for invalid inputs\n- Provide a clear and concise documentation\n- Include unit tests to verify the function's correctness\nWe will implement the tetrahedral number calculation using a simple mathematical formula. The formula for the nth tetrahedral number is T(n) = (n * (n + 1) * (n + 2)) / 6. This formula is straightforward and does not require complex calculations or data structures.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth tetrahedral number. Tetrahedral numbers are a sequence of figurate numbers, representing the number of spheres in a tetrahedron with n + 1 spheres on each edge. The formula for the nth tetrahedral number is given by T(n) = (n * (n + 1) * (n + 2)) / 6. The function should be efficient and handle large values of n.\nrequirement pool:\n- The main code should accurately calculate the nth tetrahedral number using the formula (n * (n + 1) * (n + 2)) / 6.\n- The function should be optimized for performance, especially for large values of n.\n- Include error handling to manage cases where the input is not a positive integer.\n- Provide clear documentation and examples of how to use the function.\n- Include unit tests to ensure the function works as expected across various inputs.\nTo create a function that calculates the nth tetrahedral number efficiently, we will use Python's built-in capabilities and ensure the function is optimized for large values of n. The function will take an integer input and return the corresponding tetrahedral number using the formula T(n) = (n * (n + 1) * (n + 2)) / 6. We will include error handling to manage cases where the input is not a positive integer.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth tetrahedral number. Tetrahedral numbers are a sequence of figurate numbers that represent a pyramid with a triangular base and three sides, thus each layer represents a triangular number. The formula for the nth tetrahedral number is n * (n + 1) * (n + 2) / 6.\nrequirement pool:\n- Implement the formula for calculating the nth tetrahedral number\n- Ensure the function is optimized for performance\n- Develop a user-friendly interface for easy interaction\n- Include error handling for invalid inputs\n- Provide documentation and examples for users\nTo implement the tetrahedral number calculator, we will use a simple and efficient approach based on the mathematical formula for calculating the nth tetrahedral number, which is n * (n + 1) * (n + 2) / 6. This formula can be directly translated into a Python function. We will ensure the function is optimized for performance to handle large values of n efficiently.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth tetrahedral number. Tetrahedral numbers are a sequence of numbers representing the number of spheres in a tetrahedron with n + 1 spheres on each edge. The formula for the nth tetrahedral number is n * (n + 1) * (n + 2) / 6. The function should be efficient and handle basic mathematical operations.\nrequirement pool:\n- Implement the formula for calculating the nth tetrahedral number\n- Ensure the function is optimized for performance\n- Add error handling for invalid inputs (non-integer values)\n- Include comments in the code to explain each part\n- Add unit tests to verify the function's correctness\nTo create a function that calculates the nth tetrahedral number efficiently, we will use Python's built-in math library to handle the mathematical operations. The formula for the nth tetrahedral number is n * (n + 1) * (n + 2) / 6, which can be directly translated into a simple mathematical calculation in Python. The function will be optimized for basic performance and will include error handling for invalid inputs.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth tetrahedral number. Tetrahedral numbers are a sequence of figurate numbers that represent a pyramid with a triangular base and three sides, thus generating a tetrahedron. The formula for the nth tetrahedral number is given by T(n) = n(n+1)(n+2)/6. The function should handle both small and large values of n efficiently.\nrequirement pool:\n- Implement the formula T(n) = n(n+1)(n+2)/6 in a Python function\n- Ensure the function is optimized for large values of n\n- Add error handling for non-integer inputs\nTo create a function that calculates the nth tetrahedral number efficiently, we will use Python's built-in math library, which is optimized for mathematical operations. The formula for the nth tetrahedral number is T(n) = n(n+1)(n+2)/6. We will implement this formula directly in a Python function, ensuring that the function is optimized for large values of n by leveraging Python's efficient numerical processing capabilities.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth tetrahedral number. Tetrahedral numbers are a sequence of figurate numbers that represent the number of spheres in a tetrahedron with n + 1 spheres on each edge. The formula for the nth tetrahedral number is given by T(n) = (n * (n + 1) * (n + 2)) / 6. The function should be efficient and handle large values of n.\nrequirement pool:\n- Implement the formula for calculating the nth tetrahedral number\n- Ensure the function is optimized for performance\n- Include error handling for invalid inputs\n- Provide a clear and concise documentation for the function\n- Include unit tests to verify the accuracy of the function\nTo implement the tetrahedral number calculator efficiently, we will use Python's built-in capabilities and leverage its mathematical libraries. The tetrahedral number formula T(n) = (n * (n + 1) * (n + 2)) / 6 is straightforward to implement directly. We will ensure the function is optimized for performance by using integer arithmetic to avoid unnecessary floating-point operations.\n"], "test": ["def check(tetrahedral_number):\n\tassert tetrahedral_number(5) == 35.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(1) == 1.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(9) == 165.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(1) == 1.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(1) == 1.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(10) == 220.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(5) == 35.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(1) == 1.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(10) == 220.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(9) == 165.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(5) == 35.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(1) == 1.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(11) == 286.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(9) == 165.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(5) == 35.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(1) == 1.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(5) == 35.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(5) == 35.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(5) == 35.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(9) == 165.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(1) == 1.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(12) == 364.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(5) == 35.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(10) == 220.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(11) == 286.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(10) == 220.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(9) == 165.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(9) == 165.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    Args:\n        n (int): The position in the sequence, must be a positive integer.\n\n    Returns:\n        float: The nth tetrahedral number.\n\n    Raises:\n        ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return (n * (n + 1) * (n + 2)) / 6\n\n# Example usage:\n# print(tetrahedral_number(4))  # Output: 20.0\n", "passed": true, "pass": true, "pass_num": 10, "round": 461, "mutate_method": "rephrase_one", "parent_index": 29}
