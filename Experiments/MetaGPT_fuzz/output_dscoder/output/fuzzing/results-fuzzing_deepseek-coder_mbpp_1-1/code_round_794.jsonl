{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 227, "prompt": "Write a function to find minimum of three numbers.", "code": "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest ", "test_imports": [], "test_list": ["assert min_of_three(10,20,0)==0", "assert min_of_three(19,15,18)==15", "assert min_of_three(-10,-20,-30)==-30", "assert min_of_three(9, 25, 4) == 4", "assert min_of_three(11, 19, 5) == 5", "assert min_of_three(12, 17, 4) == 4", "assert min_of_three(13, 15, 5) == 5", "assert min_of_three(6, 24, 2) == 2", "assert min_of_three(15, 16, 4) == 4", "assert min_of_three(10, 18, 4) == 4", "assert min_of_three(7, 23, 5) == 5", "assert min_of_three(12, 15, 2) == 2", "assert min_of_three(11, 24, 4) == 4", "assert min_of_three(7, 25, 1) == 1", "assert min_of_three(10, 24, 3) == 3", "assert min_of_three(11, 22, 5) == 5", "assert min_of_three(12, 24, 3) == 3", "assert min_of_three(7, 17, 5) == 5", "assert min_of_three(10, 23, 5) == 5", "assert min_of_three(7, 18, 4) == 4", "assert min_of_three(8, 19, 4) == 4", "assert min_of_three(6, 23, 2) == 2", "assert min_of_three(9, 24, 3) == 3", "assert min_of_three(10, 22, 2) == 2", "assert min_of_three(9, 19, 2) == 2", "assert min_of_three(6, 16, 2) == 2", "assert min_of_three(15, 18, 5) == 5", "assert min_of_three(6, 15, 3) == 3", "assert min_of_three(5, 20, 5) == 5", "assert min_of_three(8, 21, 1) == 1", "assert min_of_three(7, 21, 2) == 2", "assert min_of_three(9, 16, 1) == 1", "assert min_of_three(5, 24, 3) == 3", "assert min_of_three(13, 21, 5) == 5", "assert min_of_three(15, 18, 3) == 3", "assert min_of_three(11, 17, 5) == 5", "assert min_of_three(20, 19, 18) == 18", "assert min_of_three(21, 11, 19) == 11", "assert min_of_three(14, 17, 17) == 14", "assert min_of_three(24, 15, 16) == 15", "assert min_of_three(18, 16, 13) == 13", "assert min_of_three(23, 19, 18) == 18", "assert min_of_three(20, 12, 21) == 12", "assert min_of_three(20, 17, 21) == 17", "assert min_of_three(17, 15, 13) == 13", "assert min_of_three(19, 12, 17) == 12", "assert min_of_three(20, 12, 17) == 12", "assert min_of_three(21, 13, 16) == 13", "assert min_of_three(18, 17, 18) == 17", "assert min_of_three(24, 18, 14) == 14", "assert min_of_three(20, 10, 17) == 10", "assert min_of_three(24, 20, 16) == 16", "assert min_of_three(17, 19, 19) == 17", "assert min_of_three(16, 11, 23) == 11", "assert min_of_three(20, 12, 15) == 12", "assert min_of_three(19, 17, 21) == 17", "assert min_of_three(21, 18, 22) == 18", "assert min_of_three(19, 12, 19) == 12", "assert min_of_three(20, 20, 20) == 20", "assert min_of_three(14, 17, 14) == 14", "assert min_of_three(23, 18, 21) == 18", "assert min_of_three(20, 19, 16) == 16", "assert min_of_three(14, 12, 23) == 12", "assert min_of_three(14, 14, 13) == 13", "assert min_of_three(19, 15, 17) == 15", "assert min_of_three(22, 12, 18) == 12", "assert min_of_three(24, 10, 22) == 10", "assert min_of_three(18, 10, 14) == 10", "assert min_of_three(24, 20, 23) == 20", "assert min_of_three(-14, -18, -32) == -32", "assert min_of_three(-14, -20, -34) == -34", "assert min_of_three(-6, -22, -32) == -32", "assert min_of_three(-13, -19, -32) == -32", "assert min_of_three(-8, -23, -31) == -31", "assert min_of_three(-10, -19, -33) == -33", "assert min_of_three(-13, -24, -27) == -27", "assert min_of_three(-14, -22, -31) == -31", "assert min_of_three(-8, -24, -26) == -26", "assert min_of_three(-13, -22, -25) == -25", "assert min_of_three(-5, -25, -35) == -35", "assert min_of_three(-8, -18, -26) == -26", "assert min_of_three(-13, -22, -28) == -28", "assert min_of_three(-15, -23, -28) == -28", "assert min_of_three(-8, -15, -34) == -34", "assert min_of_three(-12, -21, -34) == -34", "assert min_of_three(-8, -16, -27) == -27", "assert min_of_three(-6, -21, -27) == -27", "assert min_of_three(-7, -23, -34) == -34", "assert min_of_three(-5, -15, -33) == -33", "assert min_of_three(-6, -21, -26) == -26", "assert min_of_three(-6, -15, -33) == -33", "assert min_of_three(-11, -16, -30) == -30", "assert min_of_three(-8, -24, -35) == -35", "assert min_of_three(-10, -21, -31) == -31", "assert min_of_three(-5, -17, -30) == -30", "assert min_of_three(-13, -15, -32) == -32", "assert min_of_three(-15, -24, -31) == -31", "assert min_of_three(-12, -20, -28) == -28", "assert min_of_three(-14, -17, -30) == -30", "assert min_of_three(-6, -19, -31) == -31", "assert min_of_three(-14, -21, -25) == -25", "assert min_of_three(-13, -22, -35) == -35"], "entry_point": "min_of_three", "repair_prompt": ["Write a function min_of_three to find minimum of three numbers.\nmin_of_three(10,20,0)==0\n"], "completions": ["from typing import List\n## main.py\n\ndef min_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Returns the minimum of three integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        c (int): The third integer.\n\n    Returns:\n        int: The smallest of the three integers.\n    \"\"\"\n    return min(a, b, c)\n\n# Example usage:\n# result = min_of_three(10, 20, 0)\n# print(result)  # Output: 0\n", "from typing import List\n## main.py\n\ndef min_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Finds the minimum of three numbers.\n\n    Args:\n        a (int): The first number.\n        b (int): The second number.\n        c (int): The third number.\n\n    Returns:\n        int: The smallest of the three numbers.\n    \"\"\"\n    return min(a, min(b, c))\n", "from typing import List\n## main.py\n\ndef min_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Function to find the minimum of three numbers.\n    \n    Args:\n        a (int): The first number.\n        b (int): The second number.\n        c (int): The third number.\n    \n    Returns:\n        int: The smallest of the three numbers.\n    \"\"\"\n    return min(a, b, c)\n", "from typing import List\n## main.py\n\ndef min_of_three(a: int | float, b: int | float, c: int | float) -> int | float:\n    \"\"\"\n    This function takes three numbers of type int or float and returns the minimum.\n    \n    Args:\n        a (int | float): The first number.\n        b (int | float): The second number.\n        c (int | float): The third number.\n    \n    Returns:\n        int | float: The smallest of the three numbers.\n    \"\"\"\n    return min(a, b, c)\n", "from typing import List\n## main.py\n\ndef min_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n    This function takes three integers as input and returns the smallest one.\n    \n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        c (int): The third integer.\n    \n    Returns:\n        int: The smallest of the three integers.\n    \"\"\"\n    return min(a, b, c)\n", "from typing import List\n## main.py\n\ndef min_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Returns the smallest of three integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        c (int): The third integer.\n\n    Returns:\n        int: The smallest of the three integers.\n    \"\"\"\n    return min(a, b, c)\n\n# Example usage:\n# result = min_of_three(10, 20, 0)\n# print(result)  # Output: 0\n", "from typing import List\n## main.py\n\ndef min_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n    This function takes three integers as input and returns the minimum of the three.\n    \n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        c (int): The third integer.\n    \n    Returns:\n        int: The minimum of the three integers.\n    \"\"\"\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n", "from typing import List\n## main.py\n\ndef min_of_three(a: (int, float), b: (int, float), c: (int, float)) -> (int, float):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of the three.\n    \n    Args:\n        a (int, float): The first number.\n        b (int, float): The second number.\n        c (int, float): The third number.\n    \n    Returns:\n        int, float: The minimum of the three numbers.\n    \"\"\"\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n\n# Example usage:\n# result = min_of_three(10, 5, 7)\n# print(result)  # Output: 5\n", "from typing import List\n## main.py\n\ndef min_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Returns the minimum of three integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        c (int): The third integer.\n\n    Returns:\n        int: The smallest of the three integers.\n\n    Raises:\n        TypeError: If any of the inputs are not integers.\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int) or not isinstance(c, int):\n        raise TypeError(\"All inputs must be integers\")\n    \n    return min(a, b, c)\n", "from typing import List\n## main.py\n\ndef min_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Returns the minimum of three numbers.\n\n    Args:\n        a (int): The first number.\n        b (int): The second number.\n        c (int): The third number.\n\n    Returns:\n        int: The smallest of the three numbers.\n    \"\"\"\n    return min(a, b, c)\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that finds the minimum of three numbers. This is a fundamental operation in programming and should be both efficient and easy to use. The function should handle basic cases well and be robust enough to deal with edge cases. It should be compatible with Python, ensuring it works in various environments.\nrequirement pool:\n- The main code should be clear and concise, using Python's built-in functions where appropriate.\n- The function should handle three integers correctly and efficiently.\n- Implement error handling for non-integer inputs.\n- Ensure the function works well in different Python environments.\n- Include comments to explain the code for educational purposes.\nWe will use Python's built-in min function to find the minimum of three numbers. This approach is efficient and leverages Python's standard library, ensuring compatibility and ease of use. We will also include error handling to manage non-integer inputs, ensuring robustness.\n", "requirement analysis:\nThe requirement is to create a function that finds the minimum of three numbers. This is a basic function that should be efficient and easy to use. The function should handle all possible inputs correctly and be compatible with Python's standard library.\nrequirement pool:\n- The function should correctly identify the minimum of three numbers.\n- The function should be optimized for performance.\n- The function should be easy to integrate into other projects.\n- The function should handle edge cases like negative numbers and zeros.\n- The function should be documented and include examples of usage.\nTo create a function that finds the minimum of three numbers efficiently and accurately, we will utilize Python's built-in capabilities. The function will be simple and rely on Python's min function for simplicity and performance. This approach ensures compatibility with Python's standard library and leverages its efficiency.\n", "requirement analysis:\nThe requirement is to create a function that finds the minimum of three numbers. This is a fundamental operation in many programming tasks, including data processing and algorithm development. The function should be simple and efficient, suitable for use in various programming environments.\nrequirement pool:\n- Implement min_of_three function with clear and concise code.\n- Ensure the function is optimized for performance.\n- Provide clear documentation and examples for user understanding.\n- Test the function with various edge cases to ensure accuracy.\n- Consider integration with other functions or libraries for broader use.\nWe will use Python's built-in functions and standard library to implement the min_of_three function. This approach ensures simplicity and efficiency. The function will take three arguments and return the smallest among them using Python's min function.\n", "requirement analysis:\nThe requirement is to create a function that finds the minimum of three numbers. This is a basic function that should be efficient and easy to use. The function should handle integer and floating-point numbers. The solution should be clear and concise, leveraging Python's built-in capabilities where applicable.\nrequirement pool:\n- Implement the function min_of_three to accurately find the minimum of three numbers.\n- Ensure the function is optimized for performance and readability.\n- Test the function to verify its correctness in various scenarios.\nTo implement the function min_of_three efficiently and accurately, we will use Python's built-in min function to handle the comparison of three numbers. This approach leverages Python's simplicity and performance, ensuring that the function is both easy to understand and optimized for performance.\n", "requirement analysis:\nThe requirement is to create a function that finds the minimum of three numbers. This is a fundamental operation in many programming tasks, including data processing and algorithm development. The function should be simple, efficient, and easy to integrate into other projects.\nrequirement pool:\n- Implement the function to return the smallest of the three numbers\n- Ensure the function is optimized for performance\n- Include error handling for non-numeric inputs\n- Allow the function to be easily integrated into Python projects\n- Provide documentation and examples for user guidance\nWe will use Python's built-in min function as a reference and ensure our function is optimized for performance. The function will be simple and easy to understand, adhering to Python's style and conventions.\n", "requirement analysis:\nThe requirement is to create a function that finds the minimum of three numbers. This is a fundamental function that should be both efficient and easy to use. The function should handle basic cases well and be extendable to more complex scenarios.\nrequirement pool:\n- The function should take three arguments and return the smallest one.\n- The function should handle both positive and negative numbers.\n- The function should be optimized for performance.\n- The function should include error handling for non-numeric inputs.\n- The function should be documented and include examples of usage.\nWe will use Python's built-in min function as a reference and ensure our function is optimized for performance. We will also include error handling for non-numeric inputs to make the function robust.\n", "requirement analysis:\nThe requirement is to create a function that finds the minimum of three numbers. This is a basic function that should be both efficient and easy to understand. The function should handle both positive and negative numbers, as well as zero.\nrequirement pool:\n- The function should correctly identify the minimum of three numbers\n- The function should be optimized for performance\n- The function should handle edge cases like negative numbers and zeros\n- The function should be easy to integrate into other projects\n- The function should have a clear and simple interface\nTo create a function that finds the minimum of three numbers efficiently and accurately, we will use Python's built-in capabilities. This approach leverages Python's simplicity and performance, ensuring that the function is both easy to understand and optimized for performance. We will ensure that the function handles edge cases like negative numbers and zeros, making it robust for general use.\n", "requirement analysis:\nThe requirement is to create a function that finds the minimum of three numbers. This is a fundamental operation in many programming tasks and should be both efficient and easy to use. The function should handle basic integer and floating-point numbers.\nrequirement pool:\n- The main code should be clear and concise.\n- The function should handle all types of numbers (integers, floats).\n- The function should be optimized for performance.\n- The function should include error handling for non-numeric inputs.\n- The function should be compatible with Python versions 3.x.\nTo create a function that finds the minimum of three numbers efficiently and accurately, we will utilize Python's built-in capabilities. The function will be simple and easy to understand, making it suitable for users with varying levels of programming expertise. We will ensure that the function can handle both integers and floating-point numbers, providing robust error handling for non-numeric inputs. Performance will be optimized to handle basic numerical operations quickly.\n", "requirement analysis:\nThe requirement is to create a function that finds the minimum of three numbers. This is a fundamental operation in many programming tasks and should be both efficient and easy to use. The function should handle basic inputs correctly and be extendable for more complex use cases if needed.\nrequirement pool:\n- The main code should be clear and concise\n- The function should handle all types of inputs including negative numbers and zeros\n- The function should be optimized for performance\n- Include comments to explain the code\n- Add error handling for unexpected inputs\nWe will use Python's built-in min function as a reference and ensure our function behaves identically for basic inputs. To handle edge cases and ensure robustness, we will include error handling for unexpected inputs. The function will be optimized for simplicity and performance, making it easy to integrate and use.\n", "requirement analysis:\nThe requirement is to create a function that finds the minimum of three numbers. This is a fundamental function in programming and should be simple, efficient, and easy to understand. The function should handle basic integer inputs and return the smallest number.\nrequirement pool:\n- The main code should be simple and easy to understand\n- The function should be optimized for performance\n- Include comments for better understanding\n- Ensure the function works correctly with negative numbers\n- Include error handling for non-integer inputs\nTo create a function that finds the minimum of three numbers efficiently and with simplicity, we will use Python's built-in capabilities. The function will be straightforward, utilizing Python's min function to compare three numbers and return the smallest one. This approach ensures both performance and readability.\n"], "test": ["def check(min_of_three):\n\tassert min_of_three(10,20,0)==0", "def check(min_of_three):\n\tassert min_of_three(19,15,18)==15", "def check(min_of_three):\n\tassert min_of_three(-10,-20,-30)==-30", "def check(min_of_three):\n\tassert min_of_three(9, 25, 4) == 4", "def check(min_of_three):\n\tassert min_of_three(11, 19, 5) == 5", "def check(min_of_three):\n\tassert min_of_three(12, 17, 4) == 4", "def check(min_of_three):\n\tassert min_of_three(13, 15, 5) == 5", "def check(min_of_three):\n\tassert min_of_three(6, 24, 2) == 2", "def check(min_of_three):\n\tassert min_of_three(15, 16, 4) == 4", "def check(min_of_three):\n\tassert min_of_three(10, 18, 4) == 4", "def check(min_of_three):\n\tassert min_of_three(7, 23, 5) == 5", "def check(min_of_three):\n\tassert min_of_three(12, 15, 2) == 2", "def check(min_of_three):\n\tassert min_of_three(11, 24, 4) == 4", "def check(min_of_three):\n\tassert min_of_three(7, 25, 1) == 1", "def check(min_of_three):\n\tassert min_of_three(10, 24, 3) == 3", "def check(min_of_three):\n\tassert min_of_three(11, 22, 5) == 5", "def check(min_of_three):\n\tassert min_of_three(12, 24, 3) == 3", "def check(min_of_three):\n\tassert min_of_three(7, 17, 5) == 5", "def check(min_of_three):\n\tassert min_of_three(10, 23, 5) == 5", "def check(min_of_three):\n\tassert min_of_three(7, 18, 4) == 4", "def check(min_of_three):\n\tassert min_of_three(8, 19, 4) == 4", "def check(min_of_three):\n\tassert min_of_three(6, 23, 2) == 2", "def check(min_of_three):\n\tassert min_of_three(9, 24, 3) == 3", "def check(min_of_three):\n\tassert min_of_three(10, 22, 2) == 2", "def check(min_of_three):\n\tassert min_of_three(9, 19, 2) == 2", "def check(min_of_three):\n\tassert min_of_three(6, 16, 2) == 2", "def check(min_of_three):\n\tassert min_of_three(15, 18, 5) == 5", "def check(min_of_three):\n\tassert min_of_three(6, 15, 3) == 3", "def check(min_of_three):\n\tassert min_of_three(5, 20, 5) == 5", "def check(min_of_three):\n\tassert min_of_three(8, 21, 1) == 1", "def check(min_of_three):\n\tassert min_of_three(7, 21, 2) == 2", "def check(min_of_three):\n\tassert min_of_three(9, 16, 1) == 1", "def check(min_of_three):\n\tassert min_of_three(5, 24, 3) == 3", "def check(min_of_three):\n\tassert min_of_three(13, 21, 5) == 5", "def check(min_of_three):\n\tassert min_of_three(15, 18, 3) == 3", "def check(min_of_three):\n\tassert min_of_three(11, 17, 5) == 5", "def check(min_of_three):\n\tassert min_of_three(20, 19, 18) == 18", "def check(min_of_three):\n\tassert min_of_three(21, 11, 19) == 11", "def check(min_of_three):\n\tassert min_of_three(14, 17, 17) == 14", "def check(min_of_three):\n\tassert min_of_three(24, 15, 16) == 15", "def check(min_of_three):\n\tassert min_of_three(18, 16, 13) == 13", "def check(min_of_three):\n\tassert min_of_three(23, 19, 18) == 18", "def check(min_of_three):\n\tassert min_of_three(20, 12, 21) == 12", "def check(min_of_three):\n\tassert min_of_three(20, 17, 21) == 17", "def check(min_of_three):\n\tassert min_of_three(17, 15, 13) == 13", "def check(min_of_three):\n\tassert min_of_three(19, 12, 17) == 12", "def check(min_of_three):\n\tassert min_of_three(20, 12, 17) == 12", "def check(min_of_three):\n\tassert min_of_three(21, 13, 16) == 13", "def check(min_of_three):\n\tassert min_of_three(18, 17, 18) == 17", "def check(min_of_three):\n\tassert min_of_three(24, 18, 14) == 14", "def check(min_of_three):\n\tassert min_of_three(20, 10, 17) == 10", "def check(min_of_three):\n\tassert min_of_three(24, 20, 16) == 16", "def check(min_of_three):\n\tassert min_of_three(17, 19, 19) == 17", "def check(min_of_three):\n\tassert min_of_three(16, 11, 23) == 11", "def check(min_of_three):\n\tassert min_of_three(20, 12, 15) == 12", "def check(min_of_three):\n\tassert min_of_three(19, 17, 21) == 17", "def check(min_of_three):\n\tassert min_of_three(21, 18, 22) == 18", "def check(min_of_three):\n\tassert min_of_three(19, 12, 19) == 12", "def check(min_of_three):\n\tassert min_of_three(20, 20, 20) == 20", "def check(min_of_three):\n\tassert min_of_three(14, 17, 14) == 14", "def check(min_of_three):\n\tassert min_of_three(23, 18, 21) == 18", "def check(min_of_three):\n\tassert min_of_three(20, 19, 16) == 16", "def check(min_of_three):\n\tassert min_of_three(14, 12, 23) == 12", "def check(min_of_three):\n\tassert min_of_three(14, 14, 13) == 13", "def check(min_of_three):\n\tassert min_of_three(19, 15, 17) == 15", "def check(min_of_three):\n\tassert min_of_three(22, 12, 18) == 12", "def check(min_of_three):\n\tassert min_of_three(24, 10, 22) == 10", "def check(min_of_three):\n\tassert min_of_three(18, 10, 14) == 10", "def check(min_of_three):\n\tassert min_of_three(24, 20, 23) == 20", "def check(min_of_three):\n\tassert min_of_three(-14, -18, -32) == -32", "def check(min_of_three):\n\tassert min_of_three(-14, -20, -34) == -34", "def check(min_of_three):\n\tassert min_of_three(-6, -22, -32) == -32", "def check(min_of_three):\n\tassert min_of_three(-13, -19, -32) == -32", "def check(min_of_three):\n\tassert min_of_three(-8, -23, -31) == -31", "def check(min_of_three):\n\tassert min_of_three(-10, -19, -33) == -33", "def check(min_of_three):\n\tassert min_of_three(-13, -24, -27) == -27", "def check(min_of_three):\n\tassert min_of_three(-14, -22, -31) == -31", "def check(min_of_three):\n\tassert min_of_three(-8, -24, -26) == -26", "def check(min_of_three):\n\tassert min_of_three(-13, -22, -25) == -25", "def check(min_of_three):\n\tassert min_of_three(-5, -25, -35) == -35", "def check(min_of_three):\n\tassert min_of_three(-8, -18, -26) == -26", "def check(min_of_three):\n\tassert min_of_three(-13, -22, -28) == -28", "def check(min_of_three):\n\tassert min_of_three(-15, -23, -28) == -28", "def check(min_of_three):\n\tassert min_of_three(-8, -15, -34) == -34", "def check(min_of_three):\n\tassert min_of_three(-12, -21, -34) == -34", "def check(min_of_three):\n\tassert min_of_three(-8, -16, -27) == -27", "def check(min_of_three):\n\tassert min_of_three(-6, -21, -27) == -27", "def check(min_of_three):\n\tassert min_of_three(-7, -23, -34) == -34", "def check(min_of_three):\n\tassert min_of_three(-5, -15, -33) == -33", "def check(min_of_three):\n\tassert min_of_three(-6, -21, -26) == -26", "def check(min_of_three):\n\tassert min_of_three(-6, -15, -33) == -33", "def check(min_of_three):\n\tassert min_of_three(-11, -16, -30) == -30", "def check(min_of_three):\n\tassert min_of_three(-8, -24, -35) == -35", "def check(min_of_three):\n\tassert min_of_three(-10, -21, -31) == -31", "def check(min_of_three):\n\tassert min_of_three(-5, -17, -30) == -30", "def check(min_of_three):\n\tassert min_of_three(-13, -15, -32) == -32", "def check(min_of_three):\n\tassert min_of_three(-15, -24, -31) == -31", "def check(min_of_three):\n\tassert min_of_three(-12, -20, -28) == -28", "def check(min_of_three):\n\tassert min_of_three(-14, -17, -30) == -30", "def check(min_of_three):\n\tassert min_of_three(-6, -19, -31) == -31", "def check(min_of_three):\n\tassert min_of_three(-14, -21, -25) == -25", "def check(min_of_three):\n\tassert min_of_three(-13, -22, -35) == -35"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef min_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Returns the minimum of three numbers.\n\n    Args:\n        a (int): The first number.\n        b (int): The second number.\n        c (int): The third number.\n\n    Returns:\n        int: The smallest of the three numbers.\n    \"\"\"\n    return min(a, b, c)\n", "passed": true, "pass": true, "pass_num": 10, "round": 794, "mutate_method": "condense_two2one", "parent_index": 78}
