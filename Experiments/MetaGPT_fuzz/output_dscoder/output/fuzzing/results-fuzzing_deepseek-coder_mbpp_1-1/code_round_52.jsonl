{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 120, "prompt": "Write a function to find the maximum absolute product. Calculate this maximum absolute product between numbers in pairs of tuples. These tuples are within a given list.", "code": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max", "test_imports": [], "test_list": ["assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36", "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200", "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484", "assert max_product_tuple([(5, 12), (2, 4), (1, 9), (6, 6)]) == 60", "assert max_product_tuple([(3, 9), (3, 4), (6, 5), (2, 4)]) == 30", "assert max_product_tuple([(2, 2), (3, 11), (2, 12), (4, 14)]) == 56", "assert max_product_tuple([(7, 10), (4, 5), (5, 12), (3, 12)]) == 70", "assert max_product_tuple([(3, 2), (1, 8), (4, 8), (8, 12)]) == 96", "assert max_product_tuple([(3, 6), (2, 9), (2, 3), (2, 10)]) == 20", "assert max_product_tuple([(7, 2), (1, 10), (1, 6), (5, 10)]) == 50", "assert max_product_tuple([(2, 6), (1, 8), (6, 4), (9, 4)]) == 36", "assert max_product_tuple([(2, 10), (5, 3), (6, 10), (7, 7)]) == 60", "assert max_product_tuple([(6, 7), (5, 2), (5, 12), (9, 14)]) == 126", "assert max_product_tuple([(1, 3), (2, 9), (3, 9), (2, 8)]) == 27", "assert max_product_tuple([(3, 3), (4, 5), (2, 5), (7, 10)]) == 70", "assert max_product_tuple([(2, 10), (3, 9), (6, 9), (7, 4)]) == 54", "assert max_product_tuple([(3, 7), (4, 8), (5, 13), (2, 7)]) == 65", "assert max_product_tuple([(7, 12), (4, 6), (3, 8), (6, 6)]) == 84", "assert max_product_tuple([(3, 3), (4, 5), (1, 9), (8, 7)]) == 56", "assert max_product_tuple([(3, 9), (6, 1), (3, 9), (3, 14)]) == 42", "assert max_product_tuple([(3, 9), (2, 4), (4, 6), (6, 11)]) == 66", "assert max_product_tuple([(2, 9), (3, 5), (1, 11), (6, 12)]) == 72", "assert max_product_tuple([(6, 10), (3, 1), (4, 12), (7, 9)]) == 63", "assert max_product_tuple([(2, 5), (4, 7), (2, 8), (5, 11)]) == 55", "assert max_product_tuple([(4, 8), (5, 9), (3, 7), (3, 6)]) == 45", "assert max_product_tuple([(5, 3), (2, 7), (5, 4), (5, 11)]) == 55", "assert max_product_tuple([(2, 3), (3, 8), (5, 7), (7, 12)]) == 84", "assert max_product_tuple([(6, 10), (4, 7), (4, 7), (1, 10)]) == 60", "assert max_product_tuple([(3, 12), (4, 3), (4, 8), (9, 7)]) == 63", "assert max_product_tuple([(7, 11), (6, 9), (1, 11), (5, 12)]) == 77", "assert max_product_tuple([(7, 6), (2, 8), (1, 12), (6, 14)]) == 84", "assert max_product_tuple([(7, 6), (6, 9), (2, 9), (9, 4)]) == 54", "assert max_product_tuple([(3, 10), (4, 8), (2, 5), (3, 4)]) == 32", "assert max_product_tuple([(2, 4), (2, 3), (1, 5), (8, 11)]) == 88", "assert max_product_tuple([(4, 11), (4, 11), (3, 3), (1, 9)]) == 44", "assert max_product_tuple([(4, 12), (1, 8), (4, 8), (5, 4)]) == 48", "assert max_product_tuple([(13, 15), (11, 5), (9, 6)]) == 195", "assert max_product_tuple([(9, 15), (17, 7), (1, 10)]) == 135", "assert max_product_tuple([(9, 18), (12, 5), (5, 14)]) == 162", "assert max_product_tuple([(15, 15), (15, 4), (10, 5)]) == 225", "assert max_product_tuple([(12, 17), (15, 1), (8, 6)]) == 204", "assert max_product_tuple([(13, 23), (15, 7), (2, 9)]) == 299", "assert max_product_tuple([(7, 19), (16, 7), (3, 9)]) == 133", "assert max_product_tuple([(14, 17), (20, 7), (5, 13)]) == 238", "assert max_product_tuple([(7, 25), (19, 1), (6, 5)]) == 175", "assert max_product_tuple([(7, 25), (11, 4), (2, 11)]) == 175", "assert max_product_tuple([(14, 18), (12, 4), (6, 14)]) == 252", "assert max_product_tuple([(13, 20), (14, 5), (4, 11)]) == 260", "assert max_product_tuple([(10, 20), (16, 2), (2, 7)]) == 200", "assert max_product_tuple([(7, 20), (18, 4), (2, 9)]) == 140", "assert max_product_tuple([(5, 18), (17, 2), (9, 11)]) == 99", "assert max_product_tuple([(14, 23), (13, 1), (5, 11)]) == 322", "assert max_product_tuple([(12, 23), (16, 6), (7, 7)]) == 276", "assert max_product_tuple([(10, 19), (12, 1), (7, 10)]) == 190", "assert max_product_tuple([(10, 20), (19, 6), (8, 10)]) == 200", "assert max_product_tuple([(15, 18), (12, 3), (10, 10)]) == 270", "assert max_product_tuple([(8, 24), (18, 3), (8, 11)]) == 192", "assert max_product_tuple([(10, 15), (17, 6), (3, 7)]) == 150", "assert max_product_tuple([(6, 25), (18, 5), (6, 10)]) == 150", "assert max_product_tuple([(15, 20), (13, 6), (10, 10)]) == 300", "assert max_product_tuple([(9, 22), (12, 2), (9, 11)]) == 198", "assert max_product_tuple([(5, 18), (13, 2), (7, 15)]) == 105", "assert max_product_tuple([(15, 24), (10, 7), (9, 11)]) == 360", "assert max_product_tuple([(8, 19), (12, 5), (3, 5)]) == 152", "assert max_product_tuple([(12, 18), (10, 1), (6, 7)]) == 216", "assert max_product_tuple([(14, 18), (16, 7), (6, 7)]) == 252", "assert max_product_tuple([(15, 24), (17, 3), (1, 15)]) == 360", "assert max_product_tuple([(5, 22), (11, 4), (4, 13)]) == 110", "assert max_product_tuple([(15, 21), (13, 6), (8, 11)]) == 315", "assert max_product_tuple([(10, 42), (13, 15), (25, 8), (8, 5)]) == 420", "assert max_product_tuple([(14, 45), (12, 10), (23, 8), (15, 5)]) == 630", "assert max_product_tuple([(16, 43), (14, 18), (20, 9), (12, 13)]) == 688", "assert max_product_tuple([(9, 46), (13, 16), (23, 2), (13, 9)]) == 414", "assert max_product_tuple([(6, 40), (8, 16), (21, 8), (7, 14)]) == 240", "assert max_product_tuple([(14, 46), (11, 15), (17, 4), (8, 11)]) == 644", "assert max_product_tuple([(15, 42), (9, 20), (17, 10), (10, 4)]) == 630", "assert max_product_tuple([(9, 43), (5, 15), (20, 3), (7, 6)]) == 387", "assert max_product_tuple([(14, 44), (15, 18), (20, 2), (11, 9)]) == 616", "assert max_product_tuple([(10, 43), (13, 11), (25, 3), (10, 6)]) == 430", "assert max_product_tuple([(14, 42), (11, 18), (19, 4), (10, 8)]) == 588", "assert max_product_tuple([(11, 46), (13, 11), (19, 1), (11, 10)]) == 506", "assert max_product_tuple([(14, 47), (14, 15), (17, 10), (10, 5)]) == 658", "assert max_product_tuple([(14, 40), (15, 17), (17, 10), (11, 7)]) == 560", "assert max_product_tuple([(8, 40), (8, 15), (25, 6), (8, 11)]) == 320", "assert max_product_tuple([(13, 40), (11, 11), (22, 8), (16, 7)]) == 520", "assert max_product_tuple([(13, 42), (13, 14), (25, 1), (13, 10)]) == 546", "assert max_product_tuple([(13, 45), (12, 15), (25, 6), (15, 5)]) == 585", "assert max_product_tuple([(7, 48), (12, 16), (16, 9), (14, 4)]) == 336", "assert max_product_tuple([(15, 44), (11, 16), (25, 1), (11, 14)]) == 660", "assert max_product_tuple([(13, 44), (8, 13), (18, 9), (13, 4)]) == 572", "assert max_product_tuple([(15, 45), (5, 18), (17, 6), (11, 14)]) == 675", "assert max_product_tuple([(10, 41), (14, 10), (21, 10), (11, 11)]) == 410", "assert max_product_tuple([(15, 45), (9, 18), (17, 7), (13, 6)]) == 675", "assert max_product_tuple([(10, 49), (10, 17), (15, 5), (16, 12)]) == 490", "assert max_product_tuple([(12, 48), (9, 16), (20, 6), (11, 14)]) == 576", "assert max_product_tuple([(9, 47), (9, 12), (23, 7), (16, 8)]) == 423", "assert max_product_tuple([(14, 44), (12, 19), (21, 1), (15, 12)]) == 616", "assert max_product_tuple([(12, 40), (5, 18), (23, 10), (10, 7)]) == 480", "assert max_product_tuple([(16, 40), (6, 20), (18, 3), (12, 5)]) == 640", "assert max_product_tuple([(6, 48), (13, 15), (16, 5), (10, 10)]) == 288", "assert max_product_tuple([(7, 44), (9, 20), (19, 8), (17, 5)]) == 308", "assert max_product_tuple([(13, 46), (14, 16), (25, 10), (9, 10)]) == 598"], "entry_point": "max_product_tuple", "repair_prompt": ["Write a function max_product_tuple to find the maximum absolute product. Calculate this maximum absolute product between numbers in pairs of tuples. These tuples are within a given list.\nmax_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n"], "completions": ["from typing import List\n## main.py\n\nimport math\n\ndef max_product_tuple(tuples_list: list[tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum absolute product of pairs of numbers within tuples in a given list.\n\n    Args:\n        tuples_list (list[tuple[int, int]]): A list of tuples, each containing two integers.\n\n    Returns:\n        int: The maximum absolute product of pairs of numbers within the tuples.\n    \"\"\"\n    max_product = 0\n    \n    for a, b in tuples_list:\n        product = a * b\n        if abs(product) > abs(max_product):\n            max_product = product\n    \n    return max_product\n", "from typing import List\n## main.py\n\nimport math\n\ndef max_product_tuple(tuples_list: list[tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum absolute product of pairs of numbers within tuples in a given list.\n\n    Args:\n        tuples_list (list[tuple[int, int]]): A list of tuples, each containing two integers.\n\n    Returns:\n        int: The maximum absolute product of pairs of numbers within the tuples.\n    \"\"\"\n    if not tuples_list:\n        raise ValueError(\"The input list is empty\")\n\n    max_product = -math.inf\n\n    for a, b in tuples_list:\n        product = a * b\n        abs_product = abs(product)\n        if abs_product > max_product:\n            max_product = abs_product\n\n    return max_product\n\n# Example usage:\n# tuples_list = [(1, 2), (-3, 4), (5, -6)]\n# print(max_product_tuple(tuples_list))  # Output: 24\n", "from typing import List\n## main.py\n\ndef max_product_tuple(tuples_list: list[tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum absolute product of pairs of numbers within tuples in a given list.\n\n    Args:\n        tuples_list (list[tuple[int, int]]): A list of tuples, each containing two integers.\n\n    Returns:\n        int: The maximum absolute product among all tuples.\n    \"\"\"\n    if not tuples_list:\n        raise ValueError(\"The input list is empty\")\n\n    max_product = 0\n\n    for a, b in tuples_list:\n        product = a * b\n        max_product = max(max_product, abs(product))\n\n    return max_product\n", "from typing import List\n## main.py\n\ndef max_product_tuple(tuples_list: list[tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum absolute product of pairs of numbers within tuples in a given list.\n\n    Args:\n        tuples_list (list[tuple[int, int]]): A list of tuples, each containing two integers.\n\n    Returns:\n        int: The maximum absolute product among all tuples.\n    \"\"\"\n    max_product = 0\n    \n    for a, b in tuples_list:\n        product = a * b\n        if abs(product) > abs(max_product):\n            max_product = product\n    \n    return max_product\n", "from typing import List\n## main.py\n\ndef max_product_tuple(tuples_list: list[tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum absolute product of pairs of numbers within tuples in a given list.\n\n    Args:\n        tuples_list (list[tuple[int, int]]): A list of tuples, each containing two integers.\n\n    Returns:\n        int: The maximum absolute product of pairs of numbers within the tuples.\n    \"\"\"\n    max_product = 0\n    \n    for a, b in tuples_list:\n        product = a * b\n        if abs(product) > max_product:\n            max_product = abs(product)\n    \n    return max_product\n", "from typing import List\n## main.py\n\ndef max_product_tuple(tuples_list: list[tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum absolute product of pairs of numbers within tuples in a given list.\n\n    Args:\n        tuples_list (list[tuple[int, int]]): A list of tuples, each containing two integers.\n\n    Returns:\n        int: The maximum absolute product of pairs of numbers within the tuples.\n    \"\"\"\n    max_product = 0\n    \n    for a, b in tuples_list:\n        product = abs(a) * abs(b)\n        if product > max_product:\n            max_product = product\n    \n    return max_product\n", "from typing import List\n## main.py\n\nimport math\n\ndef max_product_tuple(tuples_list: list[tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum absolute product of pairs of numbers within tuples in a given list.\n\n    Args:\n        tuples_list (list[tuple[int, int]]): A list of tuples, each containing two integers.\n\n    Returns:\n        int: The maximum absolute product of pairs of numbers within the tuples.\n    \"\"\"\n    max_product = 0\n    \n    for tuple_ in tuples_list:\n        if len(tuple_) == 2:\n            product = tuple_[0] * tuple_[1]\n            max_product = max(max_product, abs(product))\n    \n    return max_product\n", "from typing import List\nimport math\n\ndef max_product_tuple(tuples_list: list[tuple[int, int]]) -> int:\n    \"\"\"\n    Calculates the maximum absolute product of pairs of numbers within tuples in a given list.\n\n    Args:\n        tuples_list (list[tuple[int, int]]): A list of tuples, each containing two integers.\n\n    Returns:\n        int: The maximum absolute product found in the list of tuples.\n    \"\"\"\n    if len(tuples_list) < 2:\n        raise ValueError(\"The list must contain at least two tuples.\")\n\n    max_product = 0\n\n    for a, b in tuples_list:\n        product = a * b\n        abs_product = abs(product)\n        if abs_product > max_product:\n            max_product = abs_product\n\n    return max_product\n", "from typing import List\n## main.py\n\ndef max_product_tuple(tuples_list: list[tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum absolute product of pairs of numbers within tuples in a given list.\n\n    Args:\n        tuples_list (list[tuple[int, int]]): A list of tuples, each containing two integers.\n\n    Returns:\n        int: The maximum absolute product of pairs of numbers within the tuples.\n    \"\"\"\n    max_product = 0\n    \n    for a, b in tuples_list:\n        product = a * b\n        if abs(product) > max_product:\n            max_product = abs(product)\n    \n    return max_product\n", "from typing import List\n## main.py\n\ndef max_product_tuple(tuples_list: list[tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum absolute product of pairs of numbers within tuples in a given list.\n\n    Args:\n        tuples_list (list[tuple[int, int]]): A list of tuples, each containing two integers.\n\n    Returns:\n        int: The maximum absolute product of pairs of numbers within the tuples.\n    \"\"\"\n    max_product = 0\n    \n    for tuple_ in tuples_list:\n        product = tuple_[0] * tuple_[1]\n        if abs(product) > max_product:\n            max_product = abs(product)\n    \n    return max_product\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that calculates the maximum absolute product of pairs of numbers within tuples in a given list. The function should be efficient and handle lists of varying sizes. The output should be accurate and match the expected result for the provided example.\nrequirement pool:\n- The main code should calculate the maximum absolute product of pairs of numbers within tuples in a given list.\n- The function should be efficient and handle lists of varying sizes.\n- The output should be accurate and match the expected result for the provided example.\n- Implement error handling for invalid inputs.\n- Ensure the function is optimized for performance.\nTo create the function `max_product_tuple` that calculates the maximum absolute product of pairs of numbers within tuples in a given list, we will use Python's built-in capabilities and the `math` library for handling mathematical operations. The function will iterate through each tuple in the list, calculate the product of each pair, and return the maximum absolute product found.\n", "requirement analysis:\nThe requirement is to create a function that calculates the maximum absolute product of pairs of numbers within tuples in a given list. The function should be efficient and handle lists of varying sizes. The output should be accurate and match the expected result for the provided example.\nrequirement pool:\n- The main code should calculate the maximum absolute product of pairs of numbers within tuples in a given list.\n- The function should be efficient and handle lists of varying sizes.\n- The output should be accurate and match the expected result for the provided example.\n- Implement error handling for invalid inputs.\n- Ensure the function is optimized for performance.\nTo create the function `max_product_tuple` that calculates the maximum absolute product of pairs of numbers within tuples in a given list, we will use Python's built-in capabilities and the `math` library for handling mathematical operations. The function will iterate through each tuple in the list, calculate the product of each pair, and return the maximum absolute product found.\n", "requirement analysis:\nThe requirement is to create a function that calculates the maximum absolute product of pairs of numbers within tuples in a given list. The function should be efficient and handle both positive and negative numbers correctly. The output should be the maximum product found among all tuples.\nrequirement pool:\n- The main code should be efficient in calculating the maximum absolute product.\n- The function should handle lists with both positive and negative numbers.\n- The UI should be simple and intuitive, making it easy for users to understand the results.\n- The product should be tested for large datasets to ensure performance.\nTo create a function that calculates the maximum absolute product of pairs of numbers within tuples in a given list, we will use Python's built-in capabilities and leverage the power of list comprehensions and the `max` function. The function will iterate through each tuple in the list, calculate the product of its elements, and then determine the maximum absolute product among all tuples.\n", "requirement analysis:\nThe requirement is to create a function that calculates the maximum absolute product of pairs of numbers within tuples in a given list. The function should be efficient and handle both positive and negative numbers correctly. The output should be the maximum product found among all tuples.\nrequirement pool:\n- The main code should be efficient in calculating the maximum absolute product.\n- The function should handle lists with both positive and negative numbers.\n- The UI should be simple and intuitive, making it easy for users to understand the results.\n- The product should be tested for large datasets to ensure performance.\nTo create a function that calculates the maximum absolute product of pairs of numbers within tuples in a given list, we will use Python's built-in capabilities and leverage the power of list comprehensions and the `max` function. The function will iterate through each tuple in the list, calculate the product of its elements, and then determine the maximum absolute product among all tuples.\n", "requirement analysis:\nThe requirement is to create a function that calculates the maximum absolute product of pairs of numbers within tuples in a given list. The function should be efficient and handle lists of varying sizes. The output should be accurate and match the expected result for the provided example.\nrequirement pool:\n- The main code should be efficient in calculating the maximum absolute product.\n- The function should handle lists of tuples correctly.\n- Ensure the function is easy to understand and use.\n- Include error handling for unexpected inputs.\n- Provide clear documentation for the function.\nTo create a function that calculates the maximum absolute product of pairs of numbers within tuples in a given list, we will use Python's built-in capabilities and leverage the power of list comprehensions for efficiency. The function will iterate through each tuple in the list, calculate the product of its elements, and then determine the maximum absolute value among these products. This approach ensures both simplicity and efficiency.\n", "requirement analysis:\nThe requirement is to create a function that calculates the maximum absolute product of pairs of numbers within tuples in a given list. The function should be efficient and handle lists of varying sizes. The output should be accurate and match the expected result for the provided example.\nrequirement pool:\n- The main code should be efficient in calculating the maximum absolute product.\n- The function should handle lists of tuples correctly.\n- The output should match the expected result for the given example.\n- The function should be easy to understand and use.\n- The product should be visually appealing and user-friendly.\nTo create a function that calculates the maximum absolute product of pairs of numbers within tuples in a given list, we will use Python's built-in capabilities and leverage the power of list comprehensions for efficiency. The function will iterate through each tuple in the list, calculate the product of the absolute values of the numbers, and then find the maximum product among these calculated values.\n", "requirement analysis:\nThe requirement is to create a function that calculates the maximum absolute product of pairs of numbers within tuples in a given list. The function should be efficient and handle lists of varying sizes. The output should be accurate and match the expected result for the provided example.\nrequirement pool:\n- The main code should calculate the maximum absolute product of pairs of numbers within tuples in a given list.\n- The function should be efficient and handle lists of varying sizes.\n- The output should be accurate and match the expected result for the provided example.\n- Implement error handling for invalid inputs.\n- Ensure the function is optimized for performance.\nTo create the function `max_product_tuple` that calculates the maximum absolute product of pairs of numbers within tuples in a given list, we will use Python's built-in capabilities and the `math` library for handling mathematical operations. The function will iterate through each tuple in the list, calculate the product of its elements, and keep track of the maximum absolute product found.\n", "requirement analysis:\nThe requirement is to create a function that calculates the maximum absolute product of pairs of numbers within tuples in a given list. The function should be efficient and handle lists of varying sizes. The output should be accurate and match the expected result for the provided example.\nrequirement pool:\n- The main code should be clear and concise.\n- The function should handle edge cases such as empty lists or lists with single tuples.\n- The function should be optimized for performance.\n- The function should provide detailed error messages for incorrect inputs.\n- The function should be tested thoroughly to ensure accuracy.\nTo create the function `max_product_tuple` that calculates the maximum absolute product of pairs of numbers within tuples in a given list, we will use Python's built-in capabilities and the `math` library for handling mathematical operations. The function will iterate through each tuple in the list, calculate the product of its elements, and keep track of the maximum absolute product found.\n", "requirement analysis:\nThe requirement is to create a function that calculates the maximum absolute product of pairs of numbers within tuples in a given list. The function should be efficient and handle both positive and negative numbers correctly. The solution should be simple and easy to understand, providing a clear and engaging user experience.\nrequirement pool:\n- The main code should be efficient and handle large lists.\n- The function should correctly calculate the maximum absolute product.\n- The UI should be simple and easy to understand.\n- The function should handle both positive and negative numbers.\n- The product should be visually appealing and responsive.\nTo create a function that calculates the maximum absolute product of pairs of numbers within tuples in a given list, we will use Python's built-in capabilities and leverage the power of list comprehensions for simplicity and efficiency. The function will iterate through each tuple in the list, calculate the product of each pair, and then determine the maximum absolute value among these products. This approach ensures that the function is both efficient and easy to understand.\n", "requirement analysis:\nThe requirement is to create a function that calculates the maximum absolute product of pairs of numbers within tuples in a given list. The function should be efficient and handle lists of varying sizes. The output should be accurate and match the expected result for the provided example.\nrequirement pool:\n- The main code should be efficient and handle large lists.\n- The function should accurately calculate the maximum absolute product.\n- The UI should be responsive and user-friendly.\n- The product should include advanced features for an engaging user experience.\n- The product should be accessible and work well on different devices.\nTo create a function that calculates the maximum absolute product of pairs of numbers within tuples in a given list, we will use Python's built-in capabilities and leverage the simplicity and efficiency of the language. The function will iterate through each tuple in the list, calculate the product of its elements, and keep track of the maximum absolute product encountered.\n"], "test": ["def check(max_product_tuple):\n\tassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36", "def check(max_product_tuple):\n\tassert max_product_tuple([(10,20), (15,2), (5,10)] )==200", "def check(max_product_tuple):\n\tassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484", "def check(max_product_tuple):\n\tassert max_product_tuple([(5, 12), (2, 4), (1, 9), (6, 6)]) == 60", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 9), (3, 4), (6, 5), (2, 4)]) == 30", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 2), (3, 11), (2, 12), (4, 14)]) == 56", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 10), (4, 5), (5, 12), (3, 12)]) == 70", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 2), (1, 8), (4, 8), (8, 12)]) == 96", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 6), (2, 9), (2, 3), (2, 10)]) == 20", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 2), (1, 10), (1, 6), (5, 10)]) == 50", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 6), (1, 8), (6, 4), (9, 4)]) == 36", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 10), (5, 3), (6, 10), (7, 7)]) == 60", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 7), (5, 2), (5, 12), (9, 14)]) == 126", "def check(max_product_tuple):\n\tassert max_product_tuple([(1, 3), (2, 9), (3, 9), (2, 8)]) == 27", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 3), (4, 5), (2, 5), (7, 10)]) == 70", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 10), (3, 9), (6, 9), (7, 4)]) == 54", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 7), (4, 8), (5, 13), (2, 7)]) == 65", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 12), (4, 6), (3, 8), (6, 6)]) == 84", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 3), (4, 5), (1, 9), (8, 7)]) == 56", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 9), (6, 1), (3, 9), (3, 14)]) == 42", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 9), (2, 4), (4, 6), (6, 11)]) == 66", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 9), (3, 5), (1, 11), (6, 12)]) == 72", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 10), (3, 1), (4, 12), (7, 9)]) == 63", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 5), (4, 7), (2, 8), (5, 11)]) == 55", "def check(max_product_tuple):\n\tassert max_product_tuple([(4, 8), (5, 9), (3, 7), (3, 6)]) == 45", "def check(max_product_tuple):\n\tassert max_product_tuple([(5, 3), (2, 7), (5, 4), (5, 11)]) == 55", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 3), (3, 8), (5, 7), (7, 12)]) == 84", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 10), (4, 7), (4, 7), (1, 10)]) == 60", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 12), (4, 3), (4, 8), (9, 7)]) == 63", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 11), (6, 9), (1, 11), (5, 12)]) == 77", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 6), (2, 8), (1, 12), (6, 14)]) == 84", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 6), (6, 9), (2, 9), (9, 4)]) == 54", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 10), (4, 8), (2, 5), (3, 4)]) == 32", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 4), (2, 3), (1, 5), (8, 11)]) == 88", "def check(max_product_tuple):\n\tassert max_product_tuple([(4, 11), (4, 11), (3, 3), (1, 9)]) == 44", "def check(max_product_tuple):\n\tassert max_product_tuple([(4, 12), (1, 8), (4, 8), (5, 4)]) == 48", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 15), (11, 5), (9, 6)]) == 195", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 15), (17, 7), (1, 10)]) == 135", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 18), (12, 5), (5, 14)]) == 162", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 15), (15, 4), (10, 5)]) == 225", "def check(max_product_tuple):\n\tassert max_product_tuple([(12, 17), (15, 1), (8, 6)]) == 204", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 23), (15, 7), (2, 9)]) == 299", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 19), (16, 7), (3, 9)]) == 133", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 17), (20, 7), (5, 13)]) == 238", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 25), (19, 1), (6, 5)]) == 175", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 25), (11, 4), (2, 11)]) == 175", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 18), (12, 4), (6, 14)]) == 252", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 20), (14, 5), (4, 11)]) == 260", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 20), (16, 2), (2, 7)]) == 200", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 20), (18, 4), (2, 9)]) == 140", "def check(max_product_tuple):\n\tassert max_product_tuple([(5, 18), (17, 2), (9, 11)]) == 99", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 23), (13, 1), (5, 11)]) == 322", "def check(max_product_tuple):\n\tassert max_product_tuple([(12, 23), (16, 6), (7, 7)]) == 276", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 19), (12, 1), (7, 10)]) == 190", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 20), (19, 6), (8, 10)]) == 200", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 18), (12, 3), (10, 10)]) == 270", "def check(max_product_tuple):\n\tassert max_product_tuple([(8, 24), (18, 3), (8, 11)]) == 192", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 15), (17, 6), (3, 7)]) == 150", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 25), (18, 5), (6, 10)]) == 150", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 20), (13, 6), (10, 10)]) == 300", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 22), (12, 2), (9, 11)]) == 198", "def check(max_product_tuple):\n\tassert max_product_tuple([(5, 18), (13, 2), (7, 15)]) == 105", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 24), (10, 7), (9, 11)]) == 360", "def check(max_product_tuple):\n\tassert max_product_tuple([(8, 19), (12, 5), (3, 5)]) == 152", "def check(max_product_tuple):\n\tassert max_product_tuple([(12, 18), (10, 1), (6, 7)]) == 216", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 18), (16, 7), (6, 7)]) == 252", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 24), (17, 3), (1, 15)]) == 360", "def check(max_product_tuple):\n\tassert max_product_tuple([(5, 22), (11, 4), (4, 13)]) == 110", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 21), (13, 6), (8, 11)]) == 315", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 42), (13, 15), (25, 8), (8, 5)]) == 420", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 45), (12, 10), (23, 8), (15, 5)]) == 630", "def check(max_product_tuple):\n\tassert max_product_tuple([(16, 43), (14, 18), (20, 9), (12, 13)]) == 688", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 46), (13, 16), (23, 2), (13, 9)]) == 414", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 40), (8, 16), (21, 8), (7, 14)]) == 240", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 46), (11, 15), (17, 4), (8, 11)]) == 644", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 42), (9, 20), (17, 10), (10, 4)]) == 630", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 43), (5, 15), (20, 3), (7, 6)]) == 387", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 44), (15, 18), (20, 2), (11, 9)]) == 616", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 43), (13, 11), (25, 3), (10, 6)]) == 430", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 42), (11, 18), (19, 4), (10, 8)]) == 588", "def check(max_product_tuple):\n\tassert max_product_tuple([(11, 46), (13, 11), (19, 1), (11, 10)]) == 506", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 47), (14, 15), (17, 10), (10, 5)]) == 658", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 40), (15, 17), (17, 10), (11, 7)]) == 560", "def check(max_product_tuple):\n\tassert max_product_tuple([(8, 40), (8, 15), (25, 6), (8, 11)]) == 320", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 40), (11, 11), (22, 8), (16, 7)]) == 520", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 42), (13, 14), (25, 1), (13, 10)]) == 546", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 45), (12, 15), (25, 6), (15, 5)]) == 585", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 48), (12, 16), (16, 9), (14, 4)]) == 336", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 44), (11, 16), (25, 1), (11, 14)]) == 660", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 44), (8, 13), (18, 9), (13, 4)]) == 572", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 45), (5, 18), (17, 6), (11, 14)]) == 675", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 41), (14, 10), (21, 10), (11, 11)]) == 410", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 45), (9, 18), (17, 7), (13, 6)]) == 675", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 49), (10, 17), (15, 5), (16, 12)]) == 490", "def check(max_product_tuple):\n\tassert max_product_tuple([(12, 48), (9, 16), (20, 6), (11, 14)]) == 576", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 47), (9, 12), (23, 7), (16, 8)]) == 423", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 44), (12, 19), (21, 1), (15, 12)]) == 616", "def check(max_product_tuple):\n\tassert max_product_tuple([(12, 40), (5, 18), (23, 10), (10, 7)]) == 480", "def check(max_product_tuple):\n\tassert max_product_tuple([(16, 40), (6, 20), (18, 3), (12, 5)]) == 640", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 48), (13, 15), (16, 5), (10, 10)]) == 288", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 44), (9, 20), (19, 8), (17, 5)]) == 308", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 46), (14, 16), (25, 10), (9, 10)]) == 598"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef max_product_tuple(tuples_list: list[tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum absolute product of pairs of numbers within tuples in a given list.\n\n    Args:\n        tuples_list (list[tuple[int, int]]): A list of tuples, each containing two integers.\n\n    Returns:\n        int: The maximum absolute product of pairs of numbers within the tuples.\n    \"\"\"\n    max_product = 0\n    \n    for tuple_ in tuples_list:\n        product = tuple_[0] * tuple_[1]\n        if abs(product) > max_product:\n            max_product = abs(product)\n    \n    return max_product\n", "passed": true, "pass": true, "pass_num": 10, "round": 52, "mutate_method": "expand_one2two", "parent_index": 52}
