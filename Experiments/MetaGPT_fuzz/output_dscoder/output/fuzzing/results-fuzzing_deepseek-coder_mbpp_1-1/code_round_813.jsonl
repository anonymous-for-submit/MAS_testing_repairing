{"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 460, "prompt": "Write a python function to obtain the initial item of every sublist.", "code": "def Extract(lst): \n    return [item[0] for item in lst] ", "test_imports": [], "test_list": ["assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]", "assert Extract([[1,2,3],[4, 5]]) == [1,4]", "assert Extract([[9,8,1],[1,2]]) == [9,1]", "assert Extract([[5, 6], [6, 9, 9], [2, 6, 3, 13]]) == [5, 6, 2]", "assert Extract([[2, 5], [8, 6, 7], [2, 9, 12, 11]]) == [2, 8, 2]", "assert Extract([[2, 4], [1, 7, 10], [10, 9, 12, 4]]) == [2, 1, 10]", "assert Extract([[1, 1], [7, 8, 7], [6, 3, 7, 10]]) == [1, 7, 6]", "assert Extract([[5, 4], [8, 9, 5], [9, 2, 7, 8]]) == [5, 8, 9]", "assert Extract([[5, 2], [8, 2, 6], [7, 10, 3, 4]]) == [5, 8, 7]", "assert Extract([[6, 2], [8, 9, 1], [3, 4, 10, 13]]) == [6, 8, 3]", "assert Extract([[5, 4], [4, 8, 2], [2, 6, 6, 4]]) == [5, 4, 2]", "assert Extract([[6, 2], [4, 9, 9], [11, 3, 3, 4]]) == [6, 4, 11]", "assert Extract([[2, 2], [1, 3, 8], [10, 4, 4, 12]]) == [2, 1, 10]", "assert Extract([[5, 3], [4, 3, 9], [8, 3, 9, 8]]) == [5, 4, 8]", "assert Extract([[6, 3], [4, 8, 2], [6, 12, 9, 10]]) == [6, 4, 6]", "assert Extract([[6, 4], [8, 4, 3], [10, 8, 3, 13]]) == [6, 8, 10]", "assert Extract([[2, 3], [1, 7, 9], [2, 9, 3, 6]]) == [2, 1, 2]", "assert Extract([[1, 6], [2, 5, 4], [6, 12, 5, 10]]) == [1, 2, 6]", "assert Extract([[5, 7], [5, 8, 9], [10, 11, 11, 12]]) == [5, 5, 10]", "assert Extract([[6, 6], [4, 9, 9], [3, 8, 10, 4]]) == [6, 4, 3]", "assert Extract([[1, 5], [8, 9, 9], [9, 5, 10, 4]]) == [1, 8, 9]", "assert Extract([[6, 4], [2, 9, 3], [8, 10, 13, 12]]) == [6, 2, 8]", "assert Extract([[4, 7], [6, 2, 9], [4, 12, 10, 14]]) == [4, 6, 4]", "assert Extract([[3, 5], [5, 5, 3], [7, 8, 4, 14]]) == [3, 5, 7]", "assert Extract([[3, 6], [5, 6, 5], [11, 7, 3, 9]]) == [3, 5, 11]", "assert Extract([[4, 2], [7, 4, 8], [4, 10, 12, 9]]) == [4, 7, 4]", "assert Extract([[6, 1], [1, 3, 1], [6, 7, 9, 11]]) == [6, 1, 6]", "assert Extract([[3, 7], [5, 4, 6], [2, 3, 12, 6]]) == [3, 5, 2]", "assert Extract([[1, 4], [3, 2, 6], [6, 6, 10, 12]]) == [1, 3, 6]", "assert Extract([[4, 3], [3, 9, 10], [6, 4, 3, 12]]) == [4, 3, 6]", "assert Extract([[3, 2], [4, 9, 3], [6, 12, 6, 6]]) == [3, 4, 6]", "assert Extract([[4, 1], [7, 1, 7], [10, 6, 6, 14]]) == [4, 7, 10]", "assert Extract([[4, 1], [1, 2, 5], [4, 12, 7, 4]]) == [4, 1, 4]", "assert Extract([[3, 1], [6, 3, 7], [3, 12, 11, 9]]) == [3, 6, 3]", "assert Extract([[3, 6], [5, 1, 7], [2, 8, 3, 13]]) == [3, 5, 2]", "assert Extract([[2, 6], [6, 9, 10], [4, 5, 13, 5]]) == [2, 6, 4]", "assert Extract([[6, 1, 1], [3, 4]]) == [6, 3]", "assert Extract([[2, 1, 6], [8, 1]]) == [2, 8]", "assert Extract([[1, 7, 4], [5, 7]]) == [1, 5]", "assert Extract([[1, 7, 8], [7, 6]]) == [1, 7]", "assert Extract([[1, 6, 6], [9, 3]]) == [1, 9]", "assert Extract([[2, 5, 3], [1, 6]]) == [2, 1]", "assert Extract([[5, 1, 4], [1, 9]]) == [5, 1]", "assert Extract([[5, 3, 2], [1, 7]]) == [5, 1]", "assert Extract([[3, 1, 7], [3, 1]]) == [3, 3]", "assert Extract([[5, 6, 3], [7, 9]]) == [5, 7]", "assert Extract([[2, 1, 4], [9, 8]]) == [2, 9]", "assert Extract([[1, 5, 7], [1, 7]]) == [1, 1]", "assert Extract([[5, 3, 3], [9, 1]]) == [5, 9]", "assert Extract([[5, 3, 5], [3, 2]]) == [5, 3]", "assert Extract([[2, 3, 7], [4, 8]]) == [2, 4]", "assert Extract([[3, 5, 1], [5, 3]]) == [3, 5]", "assert Extract([[5, 7, 6], [8, 4]]) == [5, 8]", "assert Extract([[6, 1, 1], [6, 3]]) == [6, 6]", "assert Extract([[1, 7, 8], [6, 6]]) == [1, 6]", "assert Extract([[1, 2, 2], [6, 7]]) == [1, 6]", "assert Extract([[1, 2, 2], [6, 3]]) == [1, 6]", "assert Extract([[1, 3, 3], [9, 9]]) == [1, 9]", "assert Extract([[6, 7, 8], [7, 8]]) == [6, 7]", "assert Extract([[2, 5, 1], [2, 7]]) == [2, 2]", "assert Extract([[6, 3, 3], [1, 7]]) == [6, 1]", "assert Extract([[4, 3, 8], [8, 6]]) == [4, 8]", "assert Extract([[5, 4, 7], [1, 1]]) == [5, 1]", "assert Extract([[5, 4, 1], [3, 3]]) == [5, 3]", "assert Extract([[1, 2, 7], [9, 6]]) == [1, 9]", "assert Extract([[2, 1, 7], [8, 6]]) == [2, 8]", "assert Extract([[4, 2, 1], [5, 9]]) == [4, 5]", "assert Extract([[6, 5, 1], [6, 7]]) == [6, 6]", "assert Extract([[5, 4, 7], [9, 7]]) == [5, 9]", "assert Extract([[4, 12, 4], [5, 6]]) == [4, 5]", "assert Extract([[11, 7, 2], [5, 2]]) == [11, 5]", "assert Extract([[4, 11, 2], [4, 7]]) == [4, 4]", "assert Extract([[8, 4, 2], [5, 1]]) == [8, 5]", "assert Extract([[6, 7, 6], [6, 3]]) == [6, 6]", "assert Extract([[12, 6, 6], [4, 1]]) == [12, 4]", "assert Extract([[11, 11, 4], [2, 5]]) == [11, 2]", "assert Extract([[6, 10, 2], [4, 3]]) == [6, 4]", "assert Extract([[7, 10, 3], [1, 3]]) == [7, 1]", "assert Extract([[13, 5, 4], [3, 2]]) == [13, 3]", "assert Extract([[14, 13, 3], [5, 4]]) == [14, 5]", "assert Extract([[10, 12, 6], [6, 3]]) == [10, 6]", "assert Extract([[5, 8, 4], [2, 7]]) == [5, 2]", "assert Extract([[8, 13, 2], [6, 6]]) == [8, 6]", "assert Extract([[5, 8, 1], [3, 6]]) == [5, 3]", "assert Extract([[8, 7, 4], [4, 4]]) == [8, 4]", "assert Extract([[5, 4, 3], [2, 3]]) == [5, 2]", "assert Extract([[9, 9, 6], [1, 7]]) == [9, 1]", "assert Extract([[8, 5, 6], [5, 4]]) == [8, 5]", "assert Extract([[9, 9, 1], [5, 4]]) == [9, 5]", "assert Extract([[8, 7, 2], [4, 6]]) == [8, 4]", "assert Extract([[8, 6, 6], [5, 2]]) == [8, 5]", "assert Extract([[11, 5, 5], [3, 6]]) == [11, 3]", "assert Extract([[9, 10, 3], [5, 1]]) == [9, 5]", "assert Extract([[6, 12, 2], [1, 2]]) == [6, 1]", "assert Extract([[12, 11, 6], [5, 7]]) == [12, 5]", "assert Extract([[7, 12, 6], [4, 7]]) == [7, 4]", "assert Extract([[4, 5, 3], [5, 6]]) == [4, 5]", "assert Extract([[12, 10, 1], [6, 5]]) == [12, 6]", "assert Extract([[10, 3, 1], [3, 6]]) == [10, 3]", "assert Extract([[5, 5, 1], [4, 3]]) == [5, 4]", "assert Extract([[8, 13, 1], [5, 4]]) == [8, 5]", "assert Extract([[9, 3, 5], [3, 1]]) == [9, 3]"], "entry_point": "Extract", "repair_prompt": ["Write a python function Extract to obtain the initial item of every sublist.\nExtract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n"], "completions": ["from typing import List\nfrom typing import List\n\ndef Extract(list_of_lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Extracts the first element from each sublist in the input list of lists.\n\n    Args:\n        list_of_lists (List[List[int]]): A list of lists, where each sublist contains integers.\n\n    Returns:\n        List[int]: A list containing the first element of each sublist.\n    \"\"\"\n    result = []\n    for sublist in list_of_lists:\n        if sublist:  # Check if the sublist is not empty\n            result.append(sublist[0])\n    return result\n", "from typing import List\nfrom typing import List, Any\n\ndef Extract(lists: List[List[Any]]) -> List[Any]:\n    \"\"\"\n    Extracts the first element from each sublist in the given list of lists.\n\n    Args:\n        lists (List[List[Any]]): A list of lists containing any type of elements.\n\n    Returns:\n        List[Any]: A list containing the first element from each sublist.\n    \"\"\"\n    result = []\n    for sublist in lists:\n        if sublist:  # Check if the sublist is not empty\n            result.append(sublist[0])\n    return result\n", "from typing import List\nfrom typing import List\n\ndef Extract(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Extracts the first element from each sublist in a given list of lists.\n\n    Args:\n        lists (List[List[int]]): A list of lists containing integers.\n\n    Returns:\n        List[int]: A list containing the first elements from each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in lists if sublist]\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef Extract(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Extracts the first element from each sublist in the given list of lists.\n\n    Args:\n        lists (List[List[int]]): A list of lists containing integers.\n\n    Returns:\n        List[int]: A list containing the first elements from each sublist.\n    \"\"\"\n    result: List[int] = []\n    for sublist in lists:\n        if sublist:  # Ensure the sublist is not empty\n            result.append(sublist[0])\n    return result\n", "from typing import List\n## main.py\n\ndef Extract(list_of_lists: list) -> list:\n    \"\"\"\n    Extracts the first element from each sublist in the input list and returns a new list containing these elements.\n\n    Args:\n        list_of_lists (list): A list of lists, where each sublist contains at least one element.\n\n    Returns:\n        list: A new list containing the first element of each sublist.\n    \"\"\"\n    result = []\n    for sublist in list_of_lists:\n        if sublist:  # Check if the sublist is not empty\n            result.append(sublist[0])\n    return result\n", "from typing import List\nfrom typing import List\n\ndef Extract(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Extracts the first element from each sublist in the given list of lists.\n\n    Args:\n        lists (List[List[int]]): A list of lists containing integers.\n\n    Returns:\n        List[int]: A list containing the first elements from each sublist.\n    \"\"\"\n    result: List[int] = []\n    for sublist in lists:\n        if sublist:  # Ensure the sublist is not empty\n            result.append(sublist[0])\n    return result\n", "from typing import List\nfrom typing import List\n\ndef Extract(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Extracts the first element from each sublist in the given list of lists.\n\n    Args:\n        lists (List[List[int]]): A list of lists containing integers.\n\n    Returns:\n        List[int]: A list containing the first element of each sublist.\n    \"\"\"\n    result = []\n    for sublist in lists:\n        if sublist:  # Check if the sublist is not empty\n            result.append(sublist[0])\n    return result\n", "from typing import List\nfrom typing import List\n\ndef Extract(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Extracts the first element from each sublist in the given list of lists.\n\n    Args:\n        lists (List[List[int]]): A list of lists containing integers.\n\n    Returns:\n        List[int]: A list of integers, where each integer is the first element of the corresponding sublist.\n    \"\"\"\n    return [sublist[0] for sublist in lists]\n", "from typing import List\nfrom typing import List, Any\n\ndef Extract(list_of_lists: List[List[Any]]) -> List[Any]:\n    \"\"\"\n    Extracts the first element from each sublist in a given list of lists.\n\n    Args:\n        list_of_lists (List[List[Any]]): A list of lists containing any type of elements.\n\n    Returns:\n        List[Any]: A list containing the first element of each sublist.\n    \"\"\"\n    result = []\n    for sublist in list_of_lists:\n        if sublist:  # Check if the sublist is not empty\n            result.append(sublist[0])\n    return result\n", "from typing import List\nfrom typing import List, Any\n\ndef Extract(list_of_lists: List[List[Any]]) -> List[Any]:\n    \"\"\"\n    Extracts the first element from each sublist in the given list of lists.\n\n    Args:\n        list_of_lists (List[List[Any]]): A list of lists containing any elements.\n\n    Returns:\n        List[Any]: A list containing the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in list_of_lists]\n"], "plans": ["requirement analysis:\nThe original requirements are clear and straightforward. The task is to create a function that extracts the first element from each sublist in a given list of lists. This is a basic operation that can be used in various applications, including data processing and manipulation.\nrequirement pool:\n- The main code should include a function named Extract that takes a list of lists as input and returns a list containing the first element of each sublist.\n- The function should handle edge cases such as empty lists or lists with no elements.\n- The function should be optimized for performance, especially for large lists of lists.\nWe will use Python's built-in capabilities to create a function named `Extract` that takes a list of lists as input and returns a list containing the first element of each sublist. This approach is simple and leverages Python's standard library, ensuring efficiency and ease of implementation.\n", "requirement analysis:\nThe requirement is to create a Python function that extracts the first element from each sublist in a given list of lists. This function should be simple and efficient, suitable for beginners and experienced users alike. It should handle lists of varying lengths without errors, ensuring robustness.\nrequirement pool:\n- The main code should be concise and readable, using Pythonic practices.\n- The function should handle lists of different lengths without crashing.\n- Implement error handling for non-list inputs.\n- Ensure the function is optimized for performance on large datasets.\n- Include detailed docstrings and comments for better understanding and maintenance.\nTo create a Python function that extracts the first element from each sublist in a given list of lists, we will use a simple and straightforward approach. The function will iterate through each sublist, extract the first element, and collect these elements into a new list. This approach ensures efficiency and readability, making it suitable for both beginners and experienced users.\n", "requirement analysis:\nThe requirement is to create a Python function that extracts the first element from each sublist in a given list of lists. This function should be simple and efficient, handling various lengths of sublists without errors. It should be easily integrated into other projects and provide a clear user experience.\nrequirement pool:\n- Implement the function to extract the first element from each sublist\n- Ensure the function is robust against different lengths of sublists\n- Optimize the function for readability and performance\n- Provide clear documentation and examples for easy integration\n- Test the function with various edge cases to ensure reliability\nTo create a Python function that extracts the first element from each sublist in a given list of lists, we will use a straightforward approach. We will iterate through each sublist, access the first element, and collect these elements into a new list. This method ensures simplicity and efficiency, making it easy to understand and integrate into other projects.\n", "requirement analysis:\nThe original requirements call for a function that extracts the first element from each sublist in a given list of lists. This is a straightforward task that can be accomplished using a list comprehension.\nrequirement pool:\n- Implement the Extract function to return the first element of each sublist.\n- Ensure the function works correctly for lists containing sublists of varying lengths.\n- Optimize the function for performance, especially for large lists.\nWe will use a simple and efficient approach to implement the Extract function using a list comprehension. This method will iterate through each sublist in the given list of lists, extracting the first element of each sublist and collecting them into a new list.\n", "requirement analysis:\nThe original requirements are clear and straightforward. The task is to create a function that extracts the first element from each sublist in a given list of lists. This is a basic operation that can be used in various applications, including data processing and manipulation.\nrequirement pool:\n- The main code should include a function named Extract that takes a list of lists as input and returns a list containing the first element of each sublist.\n- The function should handle edge cases such as empty lists or lists with no elements.\n- The function should be optimized for performance, especially for large lists of lists.\nWe will implement the function Extract using Python's built-in capabilities. This function will iterate through each sublist in the input list, extract the first element of each sublist, and return a new list containing these elements. The function will handle edge cases such as empty sublists by returning an empty list in such cases.\n", "requirement analysis:\nThe original requirements call for a function that extracts the first element from each sublist in a given list of lists. This is a straightforward task that can be accomplished using a list comprehension.\nrequirement pool:\n- Implement the Extract function to return the first element of each sublist.\n- Ensure the function works correctly for lists containing varying lengths of sublists.\n- Optimize the function for performance, especially for large lists.\nWe will use a simple and efficient approach to implement the Extract function using a list comprehension. This method will iterate through each sublist in the given list of lists, extracting the first element of each sublist and collecting them into a new list.\n", "requirement analysis:\nThe requirement is to create a Python function that extracts the first element from each sublist within a list. This function should be simple and efficient, suitable for both novice and experienced users. It should handle various structures of sublists and be optimized for performance and readability.\nrequirement pool:\n- Implement the function to extract the first element from each sublist\n- Ensure the function is optimized for performance and readability\n- Test the function with various sublist structures to ensure versatility\nTo implement the function efficiently and ensure it is versatile, we will use Python's built-in capabilities. The function will iterate through each sublist, extracting the first element of each. This approach is simple and leverages Python's readability and performance.\n", "requirement analysis:\nThe requirement is to create a Python function that extracts the first element from each sublist within a list. This is a common task in data manipulation and should be implemented efficiently and with clear syntax.\nrequirement pool:\n- Implement the Extract function to return the first element of each sublist\n- Ensure the function is optimized for performance and readability\n- Test the function with various sublist structures to ensure robustness\nWe will use Python's built-in capabilities to create a simple and efficient function. The function will utilize list comprehension to iterate through each sublist and extract the first element from each. This approach is both efficient and easy to understand, making it suitable for the given requirements.\n", "requirement analysis:\nThe requirement is to create a Python function that extracts the first element from each sublist in a given list of lists. This function should be simple and efficient, handling various lengths of sublists without errors. The function should be designed with readability and versatility in mind to cater to different use cases.\nrequirement pool:\n- The main code should be simple and clear for easy understanding and integration.\n- The function should handle lists of varying lengths without errors.\n- Ensure the function is optimized for performance.\n- Include comments to explain the purpose of each part of the code.\n- Consider adding error handling for unexpected input types.\nTo create a simple and efficient function that extracts the first element from each sublist in a given list of lists, we will use Python's built-in capabilities. This approach ensures readability and versatility, making it easy to integrate into other projects.\n", "requirement analysis:\nThe requirement is to create a Python function that extracts the first element from each sublist within a given list of lists. This is a straightforward task that involves iteration and list comprehension.\nrequirement pool:\n- The main code should include a function named Extract that takes a list of lists as input and returns a list containing the first element of each sublist.\n- The function should handle edge cases such as empty lists or lists with no elements.\n- The function should be optimized for performance, especially for large lists of lists.\nWe will implement the function using Python's built-in capabilities, specifically focusing on list comprehensions to extract the first element from each sublist. This approach is efficient and leverages Python's readability and simplicity.\n"], "test": ["def check(Extract):\n\tassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]", "def check(Extract):\n\tassert Extract([[1,2,3],[4, 5]]) == [1,4]", "def check(Extract):\n\tassert Extract([[9,8,1],[1,2]]) == [9,1]", "def check(Extract):\n\tassert Extract([[5, 6], [6, 9, 9], [2, 6, 3, 13]]) == [5, 6, 2]", "def check(Extract):\n\tassert Extract([[2, 5], [8, 6, 7], [2, 9, 12, 11]]) == [2, 8, 2]", "def check(Extract):\n\tassert Extract([[2, 4], [1, 7, 10], [10, 9, 12, 4]]) == [2, 1, 10]", "def check(Extract):\n\tassert Extract([[1, 1], [7, 8, 7], [6, 3, 7, 10]]) == [1, 7, 6]", "def check(Extract):\n\tassert Extract([[5, 4], [8, 9, 5], [9, 2, 7, 8]]) == [5, 8, 9]", "def check(Extract):\n\tassert Extract([[5, 2], [8, 2, 6], [7, 10, 3, 4]]) == [5, 8, 7]", "def check(Extract):\n\tassert Extract([[6, 2], [8, 9, 1], [3, 4, 10, 13]]) == [6, 8, 3]", "def check(Extract):\n\tassert Extract([[5, 4], [4, 8, 2], [2, 6, 6, 4]]) == [5, 4, 2]", "def check(Extract):\n\tassert Extract([[6, 2], [4, 9, 9], [11, 3, 3, 4]]) == [6, 4, 11]", "def check(Extract):\n\tassert Extract([[2, 2], [1, 3, 8], [10, 4, 4, 12]]) == [2, 1, 10]", "def check(Extract):\n\tassert Extract([[5, 3], [4, 3, 9], [8, 3, 9, 8]]) == [5, 4, 8]", "def check(Extract):\n\tassert Extract([[6, 3], [4, 8, 2], [6, 12, 9, 10]]) == [6, 4, 6]", "def check(Extract):\n\tassert Extract([[6, 4], [8, 4, 3], [10, 8, 3, 13]]) == [6, 8, 10]", "def check(Extract):\n\tassert Extract([[2, 3], [1, 7, 9], [2, 9, 3, 6]]) == [2, 1, 2]", "def check(Extract):\n\tassert Extract([[1, 6], [2, 5, 4], [6, 12, 5, 10]]) == [1, 2, 6]", "def check(Extract):\n\tassert Extract([[5, 7], [5, 8, 9], [10, 11, 11, 12]]) == [5, 5, 10]", "def check(Extract):\n\tassert Extract([[6, 6], [4, 9, 9], [3, 8, 10, 4]]) == [6, 4, 3]", "def check(Extract):\n\tassert Extract([[1, 5], [8, 9, 9], [9, 5, 10, 4]]) == [1, 8, 9]", "def check(Extract):\n\tassert Extract([[6, 4], [2, 9, 3], [8, 10, 13, 12]]) == [6, 2, 8]", "def check(Extract):\n\tassert Extract([[4, 7], [6, 2, 9], [4, 12, 10, 14]]) == [4, 6, 4]", "def check(Extract):\n\tassert Extract([[3, 5], [5, 5, 3], [7, 8, 4, 14]]) == [3, 5, 7]", "def check(Extract):\n\tassert Extract([[3, 6], [5, 6, 5], [11, 7, 3, 9]]) == [3, 5, 11]", "def check(Extract):\n\tassert Extract([[4, 2], [7, 4, 8], [4, 10, 12, 9]]) == [4, 7, 4]", "def check(Extract):\n\tassert Extract([[6, 1], [1, 3, 1], [6, 7, 9, 11]]) == [6, 1, 6]", "def check(Extract):\n\tassert Extract([[3, 7], [5, 4, 6], [2, 3, 12, 6]]) == [3, 5, 2]", "def check(Extract):\n\tassert Extract([[1, 4], [3, 2, 6], [6, 6, 10, 12]]) == [1, 3, 6]", "def check(Extract):\n\tassert Extract([[4, 3], [3, 9, 10], [6, 4, 3, 12]]) == [4, 3, 6]", "def check(Extract):\n\tassert Extract([[3, 2], [4, 9, 3], [6, 12, 6, 6]]) == [3, 4, 6]", "def check(Extract):\n\tassert Extract([[4, 1], [7, 1, 7], [10, 6, 6, 14]]) == [4, 7, 10]", "def check(Extract):\n\tassert Extract([[4, 1], [1, 2, 5], [4, 12, 7, 4]]) == [4, 1, 4]", "def check(Extract):\n\tassert Extract([[3, 1], [6, 3, 7], [3, 12, 11, 9]]) == [3, 6, 3]", "def check(Extract):\n\tassert Extract([[3, 6], [5, 1, 7], [2, 8, 3, 13]]) == [3, 5, 2]", "def check(Extract):\n\tassert Extract([[2, 6], [6, 9, 10], [4, 5, 13, 5]]) == [2, 6, 4]", "def check(Extract):\n\tassert Extract([[6, 1, 1], [3, 4]]) == [6, 3]", "def check(Extract):\n\tassert Extract([[2, 1, 6], [8, 1]]) == [2, 8]", "def check(Extract):\n\tassert Extract([[1, 7, 4], [5, 7]]) == [1, 5]", "def check(Extract):\n\tassert Extract([[1, 7, 8], [7, 6]]) == [1, 7]", "def check(Extract):\n\tassert Extract([[1, 6, 6], [9, 3]]) == [1, 9]", "def check(Extract):\n\tassert Extract([[2, 5, 3], [1, 6]]) == [2, 1]", "def check(Extract):\n\tassert Extract([[5, 1, 4], [1, 9]]) == [5, 1]", "def check(Extract):\n\tassert Extract([[5, 3, 2], [1, 7]]) == [5, 1]", "def check(Extract):\n\tassert Extract([[3, 1, 7], [3, 1]]) == [3, 3]", "def check(Extract):\n\tassert Extract([[5, 6, 3], [7, 9]]) == [5, 7]", "def check(Extract):\n\tassert Extract([[2, 1, 4], [9, 8]]) == [2, 9]", "def check(Extract):\n\tassert Extract([[1, 5, 7], [1, 7]]) == [1, 1]", "def check(Extract):\n\tassert Extract([[5, 3, 3], [9, 1]]) == [5, 9]", "def check(Extract):\n\tassert Extract([[5, 3, 5], [3, 2]]) == [5, 3]", "def check(Extract):\n\tassert Extract([[2, 3, 7], [4, 8]]) == [2, 4]", "def check(Extract):\n\tassert Extract([[3, 5, 1], [5, 3]]) == [3, 5]", "def check(Extract):\n\tassert Extract([[5, 7, 6], [8, 4]]) == [5, 8]", "def check(Extract):\n\tassert Extract([[6, 1, 1], [6, 3]]) == [6, 6]", "def check(Extract):\n\tassert Extract([[1, 7, 8], [6, 6]]) == [1, 6]", "def check(Extract):\n\tassert Extract([[1, 2, 2], [6, 7]]) == [1, 6]", "def check(Extract):\n\tassert Extract([[1, 2, 2], [6, 3]]) == [1, 6]", "def check(Extract):\n\tassert Extract([[1, 3, 3], [9, 9]]) == [1, 9]", "def check(Extract):\n\tassert Extract([[6, 7, 8], [7, 8]]) == [6, 7]", "def check(Extract):\n\tassert Extract([[2, 5, 1], [2, 7]]) == [2, 2]", "def check(Extract):\n\tassert Extract([[6, 3, 3], [1, 7]]) == [6, 1]", "def check(Extract):\n\tassert Extract([[4, 3, 8], [8, 6]]) == [4, 8]", "def check(Extract):\n\tassert Extract([[5, 4, 7], [1, 1]]) == [5, 1]", "def check(Extract):\n\tassert Extract([[5, 4, 1], [3, 3]]) == [5, 3]", "def check(Extract):\n\tassert Extract([[1, 2, 7], [9, 6]]) == [1, 9]", "def check(Extract):\n\tassert Extract([[2, 1, 7], [8, 6]]) == [2, 8]", "def check(Extract):\n\tassert Extract([[4, 2, 1], [5, 9]]) == [4, 5]", "def check(Extract):\n\tassert Extract([[6, 5, 1], [6, 7]]) == [6, 6]", "def check(Extract):\n\tassert Extract([[5, 4, 7], [9, 7]]) == [5, 9]", "def check(Extract):\n\tassert Extract([[4, 12, 4], [5, 6]]) == [4, 5]", "def check(Extract):\n\tassert Extract([[11, 7, 2], [5, 2]]) == [11, 5]", "def check(Extract):\n\tassert Extract([[4, 11, 2], [4, 7]]) == [4, 4]", "def check(Extract):\n\tassert Extract([[8, 4, 2], [5, 1]]) == [8, 5]", "def check(Extract):\n\tassert Extract([[6, 7, 6], [6, 3]]) == [6, 6]", "def check(Extract):\n\tassert Extract([[12, 6, 6], [4, 1]]) == [12, 4]", "def check(Extract):\n\tassert Extract([[11, 11, 4], [2, 5]]) == [11, 2]", "def check(Extract):\n\tassert Extract([[6, 10, 2], [4, 3]]) == [6, 4]", "def check(Extract):\n\tassert Extract([[7, 10, 3], [1, 3]]) == [7, 1]", "def check(Extract):\n\tassert Extract([[13, 5, 4], [3, 2]]) == [13, 3]", "def check(Extract):\n\tassert Extract([[14, 13, 3], [5, 4]]) == [14, 5]", "def check(Extract):\n\tassert Extract([[10, 12, 6], [6, 3]]) == [10, 6]", "def check(Extract):\n\tassert Extract([[5, 8, 4], [2, 7]]) == [5, 2]", "def check(Extract):\n\tassert Extract([[8, 13, 2], [6, 6]]) == [8, 6]", "def check(Extract):\n\tassert Extract([[5, 8, 1], [3, 6]]) == [5, 3]", "def check(Extract):\n\tassert Extract([[8, 7, 4], [4, 4]]) == [8, 4]", "def check(Extract):\n\tassert Extract([[5, 4, 3], [2, 3]]) == [5, 2]", "def check(Extract):\n\tassert Extract([[9, 9, 6], [1, 7]]) == [9, 1]", "def check(Extract):\n\tassert Extract([[8, 5, 6], [5, 4]]) == [8, 5]", "def check(Extract):\n\tassert Extract([[9, 9, 1], [5, 4]]) == [9, 5]", "def check(Extract):\n\tassert Extract([[8, 7, 2], [4, 6]]) == [8, 4]", "def check(Extract):\n\tassert Extract([[8, 6, 6], [5, 2]]) == [8, 5]", "def check(Extract):\n\tassert Extract([[11, 5, 5], [3, 6]]) == [11, 3]", "def check(Extract):\n\tassert Extract([[9, 10, 3], [5, 1]]) == [9, 5]", "def check(Extract):\n\tassert Extract([[6, 12, 2], [1, 2]]) == [6, 1]", "def check(Extract):\n\tassert Extract([[12, 11, 6], [5, 7]]) == [12, 5]", "def check(Extract):\n\tassert Extract([[7, 12, 6], [4, 7]]) == [7, 4]", "def check(Extract):\n\tassert Extract([[4, 5, 3], [5, 6]]) == [4, 5]", "def check(Extract):\n\tassert Extract([[12, 10, 1], [6, 5]]) == [12, 6]", "def check(Extract):\n\tassert Extract([[10, 3, 1], [3, 6]]) == [10, 3]", "def check(Extract):\n\tassert Extract([[5, 5, 1], [4, 3]]) == [5, 4]", "def check(Extract):\n\tassert Extract([[8, 13, 1], [5, 4]]) == [8, 5]", "def check(Extract):\n\tassert Extract([[9, 3, 5], [3, 1]]) == [9, 3]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\nfrom typing import List, Any\n\ndef Extract(list_of_lists: List[List[Any]]) -> List[Any]:\n    \"\"\"\n    Extracts the first element from each sublist in the given list of lists.\n\n    Args:\n        list_of_lists (List[List[Any]]): A list of lists containing any elements.\n\n    Returns:\n        List[Any]: A list containing the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in list_of_lists]\n", "passed": true, "pass": true, "pass_num": 10, "round": 813, "mutate_method": "rephrase_one", "parent_index": 171}
