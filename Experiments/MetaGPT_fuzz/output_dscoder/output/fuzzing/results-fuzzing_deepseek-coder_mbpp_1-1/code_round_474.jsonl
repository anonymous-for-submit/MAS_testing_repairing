{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 129, "prompt": "Compose a function to determine if the matrix qualifies as a magic square.", "code": "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True", "test_imports": [], "test_list": ["assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False", "assert magic_square_test([[8, 9, 3, 14], [7, 10, 9, 11], [16, 6, 13, 6], [9, 11, 17, 2]]) == False", "assert magic_square_test([[9, 10, 6, 17], [5, 8, 4, 11], [13, 1, 5, 9], [11, 10, 17, 8]]) == False", "assert magic_square_test([[2, 8, 3, 9], [3, 16, 5, 7], [12, 7, 5, 2], [12, 11, 12, 6]]) == False", "assert magic_square_test([[12, 12, 6, 10], [7, 10, 4, 9], [20, 8, 9, 8], [14, 8, 16, 3]]) == False", "assert magic_square_test([[12, 10, 1, 13], [4, 12, 3, 6], [18, 7, 5, 1], [4, 2, 15, 7]]) == False", "assert magic_square_test([[12, 17, 3, 9], [7, 9, 11, 8], [19, 1, 11, 1], [10, 9, 15, 7]]) == False", "assert magic_square_test([[11, 7, 2, 16], [7, 18, 4, 12], [16, 7, 13, 6], [10, 1, 18, 6]]) == False", "assert magic_square_test([[8, 7, 5, 15], [7, 13, 6, 8], [20, 2, 11, 9], [13, 6, 15, 4]]) == False", "assert magic_square_test([[10, 8, 3, 10], [1, 9, 7, 13], [16, 7, 14, 4], [7, 10, 18, 1]]) == False", "assert magic_square_test([[2, 17, 1, 10], [4, 15, 5, 11], [15, 6, 5, 7], [5, 1, 14, 8]]) == False", "assert magic_square_test([[6, 13, 5, 14], [5, 15, 11, 14], [12, 4, 15, 2], [13, 9, 13, 5]]) == False", "assert magic_square_test([[12, 14, 5, 9], [1, 11, 9, 14], [13, 5, 14, 8], [11, 7, 13, 4]]) == False", "assert magic_square_test([[2, 9, 2, 16], [7, 15, 4, 11], [21, 2, 13, 4], [10, 9, 20, 9]]) == False", "assert magic_square_test([[7, 11, 2, 16], [6, 10, 9, 8], [15, 4, 12, 6], [14, 10, 18, 9]]) == False", "assert magic_square_test([[9, 8, 3, 12], [6, 14, 5, 7], [13, 3, 6, 10], [12, 11, 15, 6]]) == False", "assert magic_square_test([[4, 10, 4, 17], [1, 14, 3, 12], [17, 6, 13, 1], [4, 8, 12, 8]]) == False", "assert magic_square_test([[9, 7, 6, 9], [6, 10, 8, 10], [19, 3, 5, 1], [8, 7, 18, 5]]) == False", "assert magic_square_test([[5, 13, 1, 12], [6, 16, 7, 10], [18, 4, 8, 5], [8, 5, 16, 4]]) == False", "assert magic_square_test([[8, 12, 3, 13], [4, 13, 13, 8], [17, 7, 15, 9], [14, 5, 14, 7]]) == False", "assert magic_square_test([[10, 9, 2, 18], [7, 9, 13, 13], [18, 7, 9, 4], [5, 9, 14, 8]]) == False", "assert magic_square_test([[5, 8, 5, 16], [6, 14, 9, 15], [20, 2, 13, 5], [7, 4, 18, 1]]) == False", "assert magic_square_test([[7, 14, 6, 9], [7, 14, 13, 8], [11, 6, 9, 5], [10, 3, 10, 6]]) == False", "assert magic_square_test([[7, 15, 5, 9], [2, 17, 7, 8], [21, 8, 8, 1], [10, 11, 15, 8]]) == False", "assert magic_square_test([[9, 14, 5, 19], [4, 15, 11, 16], [19, 6, 13, 7], [9, 7, 10, 1]]) == False", "assert magic_square_test([[12, 11, 6, 15], [6, 16, 5, 13], [19, 8, 11, 1], [13, 10, 11, 2]]) == False", "assert magic_square_test([[10, 11, 5, 11], [3, 18, 10, 15], [18, 6, 5, 3], [12, 5, 18, 3]]) == False", "assert magic_square_test([[7, 11, 4, 17], [2, 15, 4, 11], [17, 5, 5, 3], [8, 2, 20, 7]]) == False", "assert magic_square_test([[6, 16, 4, 15], [2, 15, 11, 8], [20, 6, 14, 3], [14, 3, 20, 7]]) == False", "assert magic_square_test([[8, 11, 3, 11], [2, 12, 9, 7], [21, 5, 9, 10], [14, 7, 11, 1]]) == False", "assert magic_square_test([[12, 17, 4, 14], [6, 9, 4, 16], [15, 5, 14, 5], [13, 3, 10, 7]]) == False", "assert magic_square_test([[11, 14, 2, 17], [5, 17, 4, 10], [14, 1, 8, 6], [4, 7, 14, 2]]) == False", "assert magic_square_test([[7, 16, 2, 10], [2, 17, 6, 13], [12, 5, 10, 5], [7, 1, 15, 1]]) == False", "assert magic_square_test([[12, 7, 4, 14], [7, 18, 5, 9], [17, 4, 12, 1], [10, 7, 17, 4]]) == False", "assert magic_square_test([[2, 2, 4], [5, 9, 5], [8, 2, 6]]) == False", "assert magic_square_test([[7, 10, 8], [14, 9, 6], [1, 1, 13]]) == False", "assert magic_square_test([[7, 2, 3], [4, 1, 1], [7, 2, 9]]) == False", "assert magic_square_test([[4, 10, 11], [7, 5, 3], [5, 1, 4]]) == False", "assert magic_square_test([[3, 7, 1], [12, 5, 3], [1, 7, 6]]) == False", "assert magic_square_test([[6, 11, 4], [8, 1, 2], [9, 8, 11]]) == False", "assert magic_square_test([[4, 3, 8], [4, 5, 6], [4, 4, 10]]) == False", "assert magic_square_test([[5, 2, 11], [10, 4, 1], [3, 6, 4]]) == False", "assert magic_square_test([[3, 7, 9], [5, 5, 6], [6, 2, 7]]) == False", "assert magic_square_test([[2, 3, 7], [5, 1, 5], [6, 3, 8]]) == False", "assert magic_square_test([[1, 11, 3], [11, 10, 3], [5, 8, 3]]) == False", "assert magic_square_test([[4, 9, 4], [8, 8, 4], [2, 8, 10]]) == False", "assert magic_square_test([[2, 11, 3], [9, 8, 3], [9, 5, 11]]) == False", "assert magic_square_test([[5, 8, 3], [7, 10, 4], [3, 2, 11]]) == False", "assert magic_square_test([[3, 9, 11], [13, 1, 3], [6, 3, 9]]) == False", "assert magic_square_test([[6, 4, 2], [13, 2, 2], [6, 1, 12]]) == False", "assert magic_square_test([[1, 2, 7], [13, 10, 3], [3, 6, 7]]) == False", "assert magic_square_test([[7, 2, 9], [10, 8, 5], [2, 8, 13]]) == False", "assert magic_square_test([[4, 8, 4], [14, 10, 3], [2, 1, 9]]) == False", "assert magic_square_test([[4, 10, 10], [5, 6, 5], [1, 2, 11]]) == False", "assert magic_square_test([[7, 3, 2], [6, 5, 4], [6, 1, 9]]) == False", "assert magic_square_test([[6, 3, 2], [11, 2, 6], [2, 7, 11]]) == False", "assert magic_square_test([[4, 8, 2], [6, 8, 5], [6, 6, 4]]) == False", "assert magic_square_test([[1, 7, 4], [9, 2, 3], [5, 8, 9]]) == False", "assert magic_square_test([[1, 8, 7], [4, 3, 4], [3, 1, 6]]) == False", "assert magic_square_test([[2, 6, 5], [5, 3, 3], [5, 2, 4]]) == False", "assert magic_square_test([[6, 5, 4], [6, 7, 1], [7, 1, 5]]) == False", "assert magic_square_test([[1, 7, 2], [10, 4, 6], [6, 4, 6]]) == False", "assert magic_square_test([[1, 12, 5], [7, 3, 1], [7, 3, 4]]) == False", "assert magic_square_test([[1, 10, 1], [13, 4, 6], [4, 7, 12]]) == False", "assert magic_square_test([[1, 7, 9], [7, 2, 2], [7, 5, 12]]) == False", "assert magic_square_test([[1, 10, 3], [5, 2, 2], [7, 6, 4]]) == False", "assert magic_square_test([[7, 5, 7], [6, 6, 2], [2, 1, 13]]) == False", "assert magic_square_test([[5, 9, 3], [8, 8, 2], [7, 6, 3]]) == False", "assert magic_square_test([[4, 2, 10], [10, 6, 4], [3, 4, 3]]) == False", "assert magic_square_test([[4, 6, 10], [11, 4, 6], [3, 6, 2]]) == False", "assert magic_square_test([[7, 11, 5], [5, 6, 2], [8, 4, 10]]) == False", "assert magic_square_test([[7, 5, 4], [12, 10, 1], [1, 3, 6]]) == False", "assert magic_square_test([[6, 7, 11], [7, 6, 5], [3, 8, 4]]) == False", "assert magic_square_test([[6, 10, 11], [10, 5, 4], [2, 4, 4]]) == False", "assert magic_square_test([[2, 5, 3], [4, 6, 1], [7, 1, 10]]) == False", "assert magic_square_test([[4, 7, 4], [4, 8, 4], [7, 3, 2]]) == False", "assert magic_square_test([[5, 2, 11], [12, 7, 4], [7, 2, 6]]) == False", "assert magic_square_test([[7, 7, 6], [7, 2, 2], [6, 7, 11]]) == False", "assert magic_square_test([[4, 8, 8], [7, 8, 3], [8, 3, 6]]) == False", "assert magic_square_test([[6, 6, 2], [13, 9, 4], [6, 4, 4]]) == False", "assert magic_square_test([[6, 11, 6], [8, 8, 4], [8, 7, 2]]) == False", "assert magic_square_test([[5, 11, 2], [14, 5, 2], [7, 5, 5]]) == False", "assert magic_square_test([[3, 12, 11], [13, 9, 2], [2, 8, 12]]) == False", "assert magic_square_test([[5, 7, 1], [9, 7, 6], [4, 2, 2]]) == False", "assert magic_square_test([[2, 3, 9], [14, 8, 5], [6, 1, 7]]) == False", "assert magic_square_test([[3, 6, 7], [14, 5, 6], [8, 8, 5]]) == False", "assert magic_square_test([[3, 8, 2], [9, 7, 3], [4, 8, 9]]) == False", "assert magic_square_test([[7, 2, 6], [4, 3, 2], [9, 8, 7]]) == False", "assert magic_square_test([[4, 10, 9], [11, 9, 3], [1, 3, 2]]) == False", "assert magic_square_test([[4, 5, 7], [5, 6, 2], [8, 2, 5]]) == False", "assert magic_square_test([[6, 8, 5], [10, 5, 3], [7, 6, 7]]) == False", "assert magic_square_test([[4, 7, 11], [13, 8, 6], [8, 6, 3]]) == False", "assert magic_square_test([[4, 5, 3], [11, 7, 5], [9, 1, 7]]) == False", "assert magic_square_test([[1, 7, 1], [7, 9, 1], [2, 1, 11]]) == False", "assert magic_square_test([[3, 7, 9], [13, 4, 3], [1, 3, 11]]) == False", "assert magic_square_test([[5, 4, 9], [12, 4, 1], [4, 4, 9]]) == False", "assert magic_square_test([[1, 4, 7], [9, 1, 3], [1, 8, 10]]) == False", "assert magic_square_test([[2, 11, 2], [11, 4, 4], [3, 5, 2]]) == False", "assert magic_square_test([[4, 2, 1], [14, 1, 3], [3, 4, 9]]) == False", "assert magic_square_test([[7, 4, 8], [8, 2, 3], [1, 7, 11]]) == False"], "entry_point": "magic_square_test", "repair_prompt": ["Compose a function magic_square_test to determine if the matrix qualifies as a magic square.\nmagic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    This function checks if a given matrix is a magic square.\n    \n    A magic square is a square matrix in which the sum of each row, each column, and both main diagonals are the same.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list of integers representing the matrix.\n        \n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    \n    # Check if the matrix is square\n    for row in matrix:\n        if len(row) != n:\n            return False\n    \n    # Initialize sums of diagonals\n    sum_diagonal1 = 0\n    sum_diagonal2 = 0\n    \n    for i in range(n):\n        sum_diagonal1 += matrix[i][i]\n        sum_diagonal2 += matrix[i][n - i - 1]\n    \n    if sum_diagonal1 != sum_diagonal2:\n        return False\n    \n    # Check sums of rows and columns\n    for i in range(n):\n        sum_row = 0\n        sum_col = 0\n        for j in range(n):\n            sum_row += matrix[i][j]\n            sum_col += matrix[j][i]\n        if sum_row != sum_diagonal1 or sum_col != sum_diagonal1:\n            return False\n    \n    return True\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    This function checks if a given matrix is a magic square.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list representing the matrix.\n        \n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    if n == 0 or len(matrix[0]) != n:\n        return False\n\n    sum_list = []\n\n    # Sum of rows\n    for row in matrix:\n        sum_list.append(sum(row))\n\n    # Sum of columns\n    for col in range(n):\n        col_sum = sum(matrix[row][col] for row in range(n))\n        sum_list.append(col_sum)\n\n    # Sum of main diagonal\n    main_diag_sum = sum(matrix[i][i] for i in range(n))\n    sum_list.append(main_diag_sum)\n\n    # Sum of secondary diagonal\n    sec_diag_sum = sum(matrix[i][n - 1 - i] for i in range(n))\n    sum_list.append(sec_diag_sum)\n\n    # Check if all sums in sum_list are equal\n    target_sum = sum_list[0]\n    for sum_val in sum_list:\n        if sum_val != target_sum:\n            return False\n\n    return True\n", "from typing import List\nfrom typing import List, Tuple, Optional\n\ndef magic_square_test(matrix: List[List[int]]) -> Tuple[bool, Optional[str]]:\n    \"\"\"\n    This function checks if a given matrix is a magic square.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list representing the matrix.\n        \n    Returns:\n        Tuple[bool, Optional[str]]: A tuple containing a boolean indicating if the matrix is a magic square\n                                     and an optional string explaining the result.\n    \"\"\"\n    n = len(matrix)\n    \n    # Check if the matrix is square\n    for row in matrix:\n        if len(row) != n:\n            return (False, \"Matrix is not square.\")\n    \n    # Calculate the sum of the first row to use as a reference\n    magic_sum = sum(matrix[0])\n    \n    # Check the sum of each row\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return (False, \"Row sums are not equal.\")\n    \n    # Check the sum of each column\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return (False, \"Column sums are not equal.\")\n    \n    # Check the sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return (False, \"Main diagonal sum is not equal.\")\n    \n    # Check the sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return (False, \"Secondary diagonal sum is not equal.\")\n    \n    return (True, None)\n\n# Example usage:\n# matrix = [\n#     [2, 7, 6],\n#     [9, 5, 1],\n#     [4, 3, 8]\n# ]\n# result = magic_square_test(matrix)\n# print(result)  # Output: (True, None)\n", "from typing import List\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    This function checks if a given matrix is a magic square.\n    \n    A magic square is a square matrix in which the sum of each row, each column, and both main diagonals are the same.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list of integers representing the matrix.\n        \n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    \n    # Calculate the sum of the first row to use as a reference\n    magic_sum = sum(matrix[0])\n    \n    # Check the sum of each row\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check the sum of each column\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check the sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Check the sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n    \n    return True\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Determines if a matrix qualifies as a magic square.\n    \n    A magic square is a square matrix in which the sum of every row, column, and both main diagonals are the same.\n    \n    Args:\n        matrix (List[List[int]]): A list of lists where each sublist represents a row in the matrix.\n    \n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    if not matrix or not all(isinstance(row, list) and len(row) == len(matrix) for row in matrix):\n        raise ValueError(\"The matrix is empty or not properly defined.\")\n    \n    n = len(matrix)\n    \n    # Calculate the sum of the first row to use as a reference\n    magic_sum = sum(matrix[0])\n    \n    # Check the sum of each row\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check the sum of each column\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check the sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Check the sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n    \n    return True\n", "from typing import List\n## main.py\n\nimport numpy as np\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    This function checks if a given matrix is a magic square.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list (matrix) of integers.\n    \n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    \n    # Calculate the sum of the first row to use as a reference\n    magic_sum = sum(matrix[0])\n    \n    # Check the sum of each row\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check the sum of each column\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check the sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Check the sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n    \n    return True\n", "from typing import List\n## main.py\n\nimport numpy as np\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    # Check if the matrix is square\n    if not all(len(row) == len(matrix) for row in matrix):\n        return False\n\n    # Convert the matrix to a NumPy array for efficient operations\n    np_matrix = np.array(matrix)\n\n    # Calculate the sum of the first row to use as a reference\n    magic_sum = np.sum(np_matrix[0])\n\n    # Check sums of rows\n    for row in np_matrix:\n        if np.sum(row) != magic_sum:\n            return False\n\n    # Check sums of columns\n    for col in range(len(np_matrix)):\n        if np.sum(np_matrix[:, col]) != magic_sum:\n            return False\n\n    # Check sum of primary diagonal\n    if np.sum(np.diag(np_matrix)) != magic_sum:\n        return False\n\n    # Check sum of secondary diagonal\n    if np.sum(np.diag(np.fliplr(np_matrix))) != magic_sum:\n        return False\n\n    return True\n", "from typing import List\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    n = len(matrix)\n    if n == 0 or any(len(row) != n for row in matrix):\n        return False  # The matrix is not square\n\n    # Calculate the sum of the first row to use as a reference\n    magic_sum = sum(matrix[0])\n\n    # Check the sum of each row\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check the sum of each column\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n\n    # Check the sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n\n    # Check the sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n\n    return True\n", "from typing import List\n## main.py\n\nimport numpy as np\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    # Validate that the input is a square matrix\n    if not matrix or len(matrix) != len(matrix[0]):\n        return False\n\n    # Convert the matrix to a NumPy array for efficient operations\n    matrix_np = np.array(matrix)\n\n    # Calculate the sum of the first row to use as a reference\n    magic_sum = np.sum(matrix_np[0, :])\n\n    # Check the sum of each row\n    for row in matrix_np:\n        if np.sum(row) != magic_sum:\n            return False\n\n    # Check the sum of each column\n    for col in range(len(matrix_np)):\n        if np.sum(matrix_np[:, col]) != magic_sum:\n            return False\n\n    # Check the sum of the main diagonal\n    if np.sum(np.diag(matrix_np)) != magic_sum:\n        return False\n\n    # Check the sum of the secondary diagonal\n    if np.sum(np.diag(np.fliplr(matrix_np))) != magic_sum:\n        return False\n\n    return True\n", "from typing import List\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Determines if a matrix qualifies as a magic square.\n    \n    A magic square is a square matrix in which the sum of every row, column, and both main diagonals are the same.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each sublist represents a row in the matrix.\n    \n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    if not is_square(matrix):\n        return False\n    \n    size = len(matrix)\n    magic_sum = sum_row(matrix, 0)\n    \n    for i in range(1, size):\n        if sum_row(matrix, i) != magic_sum:\n            return False\n    \n    for j in range(size):\n        if sum_col(matrix, j) != magic_sum:\n            return False\n    \n    if sum_diagonal(matrix, True) != magic_sum:\n        return False\n    \n    if sum_diagonal(matrix, False) != magic_sum:\n        return False\n    \n    return True\n\ndef is_square(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Checks if the matrix is square (i.e., has the same number of rows and columns).\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each sublist represents a row in the matrix.\n    \n    Returns:\n        bool: True if the matrix is square, False otherwise.\n    \"\"\"\n    num_rows = len(matrix)\n    for row in matrix:\n        if len(row) != num_rows:\n            return False\n    return True\n\ndef sum_row(matrix: List[List[int]], row_index: int) -> int:\n    \"\"\"\n    Calculates the sum of a specific row in the matrix.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each sublist represents a row in the matrix.\n        row_index (int): The index of the row to sum.\n    \n    Returns:\n        int: The sum of the specified row.\n    \"\"\"\n    return sum(matrix[row_index])\n\ndef sum_col(matrix: List[List[int]], col_index: int) -> int:\n    \"\"\"\n    Calculates the sum of a specific column in the matrix.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each sublist represents a row in the matrix.\n        col_index (int): The index of the column to sum.\n    \n    Returns:\n        int: The sum of the specified column.\n    \"\"\"\n    return sum(matrix[row][col_index] for row in range(len(matrix)))\n\ndef sum_diagonal(matrix: List[List[int]], is_main: bool) -> int:\n    \"\"\"\n    Calculates the sum of a diagonal in the matrix.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each sublist represents a row in the matrix.\n        is_main (bool): True if the diagonal is the main diagonal, False if it is the secondary diagonal.\n    \n    Returns:\n        int: The sum of the specified diagonal.\n    \"\"\"\n    size = len(matrix)\n    if is_main:\n        return sum(matrix[i][i] for i in range(size))\n    else:\n        return sum(matrix[i][size - 1 - i] for i in range(size))\n"], "plans": ["requirement analysis:\nThe function needs to check if the sum of the elements in each row, each column, and the two main diagonals are equal. This is a classic problem in mathematics and computer science, often used as an example for algorithms and data structures.\nrequirement pool:\n- The function should correctly identify a magic square.\n- The function should be efficient and handle matrices of various sizes.\n- The function should provide clear feedback on whether a matrix is a magic square.\n- The function should be easy to integrate into other projects.\n- The function should include basic error handling for non-square matrices.\nTo implement the magic_square_test function, we will use Python's built-in capabilities and leverage a simple approach to check if a given matrix is a magic square. The function will calculate the sum of each row, each column, and the two main diagonals. If all these sums are equal, the matrix is a magic square.\n", "requirement analysis:\nThe function needs to check if a given matrix is a magic square. A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same. The function should be efficient and easy to understand.\nrequirement pool:\n- The main code should accurately determine if a matrix is a magic square.\n- The function should be efficient in terms of time complexity.\n- The function should be user-friendly with clear outputs.\n- The function should handle different sizes of matrices.\n- The function should be easily understandable and maintainable.\nTo determine if a given matrix is a magic square, we will use Python's built-in capabilities along with a simple and efficient approach. We will sum each row, each column, and both main diagonals to check if they are equal. This method ensures both accuracy and efficiency.\n", "requirement analysis:\nThe requirement is to create a function that can determine if a given matrix is a magic square. A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same. The function should be efficient and easy to use, suitable for integration into various mathematical and programming projects.\nrequirement pool:\n- The main code should be clear and concise, using standard Python practices.\n- The function should handle matrices of various sizes efficiently.\n- Include error handling for non-square matrices or matrices with non-integer elements.\n- Provide optional output to explain how the function determined the matrix is a magic square or not.\n- Optimize the function for large matrices to ensure fast computation times.\nTo create the function `magic_square_test` that determines if a matrix qualifies as a magic square, we will use Python's standard libraries and ensure the function is efficient and easy to understand. We will validate the sum of rows, columns, and diagonals to check if all sums are equal.\n", "requirement analysis:\nThe requirement is to create a function that can determine if a given matrix is a magic square. A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same. The function should be efficient and easy to use, suitable for both beginners and experienced users.\nrequirement pool:\n- The main code should be efficient and clear to understand.\n- The function should correctly identify if a matrix is a magic square.\n- The user interface should be intuitive and easy to use.\n- The function should handle matrices of various sizes.\n- The product should be compatible with both desktop and mobile platforms.\nTo create a function that determines if a matrix is a magic square, we will use Python's built-in data structures and simple arithmetic operations. The function will calculate the sum of each row, column, and both diagonals to check if they are equal. This approach ensures efficiency and clarity in the code.\n", "requirement analysis:\nThe requirement is to create a function that can determine if a given matrix is a magic square. A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same. The function should be efficient and easy to use, suitable for integration into various mathematical and programming projects.\nrequirement pool:\n- The main code should be clear and concise, using standard Python practices.\n- The function should handle matrices of various sizes.\n- Implement error handling for non-square matrices.\n- Include a function to display the sums of rows, columns, and diagonals for verification.\n- Optimize the function for performance, especially for large matrices.\nTo create the function `magic_square_test` that determines if a matrix qualifies as a magic square, we will use Python's standard libraries and ensure the function is efficient and easy to understand. The function will calculate the sum of each row, column, and both main diagonals and compare them to ensure they are all equal. We will also handle potential errors for non-square matrices.\n", "requirement analysis:\nThe primary requirement is to create a function that can determine if a given matrix is a magic square. This involves checking if the sum of the elements in each row, each column, and both main diagonals are equal. The function should be efficient and handle various matrix sizes.\nrequirement pool:\n- The main code should be able to determine if a matrix is a magic square.\n- The function should be efficient and handle matrices of different sizes.\n- Provide clear feedback on whether the matrix is a magic square.\n- Include user-friendly error handling for invalid inputs.\n- Ensure the application is user-accessible and visually appealing.\nTo create a function that determines if a matrix is a magic square, we will use Python's built-in capabilities and leverage the simplicity of the numpy library for efficient matrix operations. The function will check if the sum of each row, each column, and both main diagonals are equal. We will ensure the function is efficient and can handle matrices of different sizes.\n", "requirement analysis:\nThe function needs to check if a given matrix is a magic square. A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same. The function should be efficient and easy to understand, suitable for both beginners and advanced users.\nrequirement pool:\n- The main code should accurately determine if a matrix is a magic square.\n- The function should be efficient and easy to understand.\n- Include user-friendly features for easy interaction.\n- Provide options for both beginner and advanced users.\n- Ensure compatibility with a variety of matrix sizes.\nTo create the function `magic_square_test` that determines if a matrix qualifies as a magic square, we will use Python's built-in capabilities along with the NumPy library for efficient matrix operations. The function will first validate the input to ensure it is a square matrix, then calculate the sum of each row, column, and both diagonals to check if they are equal. This approach ensures both efficiency and clarity.\n", "requirement analysis:\nThe function 'magic_square_test' needs to determine if a given matrix is a magic square. A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same. The function should be efficient and easy to understand, suitable for both users and developers.\nrequirement pool:\n- The main code should be efficient in determining if a matrix is a magic square.\n- The function should be easy to understand and implement.\n- The product should provide clear and accurate results.\n- The user interface should be intuitive and user-friendly.\n- The product should support a variety of matrix sizes.\nTo determine if a given matrix is a magic square, we need to ensure that the sum of every row, every column, and both main diagonals are the same. We will use Python's built-in functions and libraries to achieve this efficiently. The function will first calculate the sum of each row and column, and then compare these sums to ensure they are equal. We will also check the sums of the two main diagonals.\n", "requirement analysis:\nThe requirement is to create a function that can determine if a given matrix is a magic square. A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same. The function should be efficient and easy to use, suitable for both beginners and advanced users.\nrequirement pool:\n- The main code should be concise and efficient in determining if a matrix is a magic square.\n- The function should handle matrices of various sizes.\n- The user interface should be intuitive and easy to use.\n- The application should provide clear feedback on whether a matrix is a magic square or not.\n- The software should be compatible with both desktop and mobile platforms.\nTo determine if a matrix is a magic square, we need to ensure that the sum of every row, every column, and both main diagonals are the same. We will use Python, leveraging the NumPy library for efficient matrix operations. The function will first validate the input to ensure it is a square matrix, then calculate the sums of rows, columns, and diagonals, and finally compare these sums to determine if the matrix is a magic square.\n", "requirement analysis:\nThe requirement is to create a function that can determine if a given matrix is a magic square. A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same. The function should be efficient and handle various sizes of matrices.\nrequirement pool:\n- The main code should be clear and concise, using standard Python practices.\n- The function should handle matrices of different sizes.\n- Include error handling for non-square matrices.\n- Implement optional output to show which rows, columns, or diagonals do not sum to the magic constant.\n- Optimize the function for performance, especially for large matrices.\nTo create the function `magic_square_test` that determines if a matrix qualifies as a magic square, we will use Python's standard libraries and ensure the function is efficient and easy to understand. The function will first check if the matrix is square, then calculate the sum of each row, column, and both diagonals. If all sums are equal, the matrix is a magic square.\n"], "test": ["def check(magic_square_test):\n\tassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True", "def check(magic_square_test):\n\tassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True", "def check(magic_square_test):\n\tassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 9, 3, 14], [7, 10, 9, 11], [16, 6, 13, 6], [9, 11, 17, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 10, 6, 17], [5, 8, 4, 11], [13, 1, 5, 9], [11, 10, 17, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 8, 3, 9], [3, 16, 5, 7], [12, 7, 5, 2], [12, 11, 12, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 12, 6, 10], [7, 10, 4, 9], [20, 8, 9, 8], [14, 8, 16, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 10, 1, 13], [4, 12, 3, 6], [18, 7, 5, 1], [4, 2, 15, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 17, 3, 9], [7, 9, 11, 8], [19, 1, 11, 1], [10, 9, 15, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[11, 7, 2, 16], [7, 18, 4, 12], [16, 7, 13, 6], [10, 1, 18, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 7, 5, 15], [7, 13, 6, 8], [20, 2, 11, 9], [13, 6, 15, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[10, 8, 3, 10], [1, 9, 7, 13], [16, 7, 14, 4], [7, 10, 18, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 17, 1, 10], [4, 15, 5, 11], [15, 6, 5, 7], [5, 1, 14, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 13, 5, 14], [5, 15, 11, 14], [12, 4, 15, 2], [13, 9, 13, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 14, 5, 9], [1, 11, 9, 14], [13, 5, 14, 8], [11, 7, 13, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 9, 2, 16], [7, 15, 4, 11], [21, 2, 13, 4], [10, 9, 20, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 11, 2, 16], [6, 10, 9, 8], [15, 4, 12, 6], [14, 10, 18, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 8, 3, 12], [6, 14, 5, 7], [13, 3, 6, 10], [12, 11, 15, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 4, 17], [1, 14, 3, 12], [17, 6, 13, 1], [4, 8, 12, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 7, 6, 9], [6, 10, 8, 10], [19, 3, 5, 1], [8, 7, 18, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 13, 1, 12], [6, 16, 7, 10], [18, 4, 8, 5], [8, 5, 16, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 12, 3, 13], [4, 13, 13, 8], [17, 7, 15, 9], [14, 5, 14, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[10, 9, 2, 18], [7, 9, 13, 13], [18, 7, 9, 4], [5, 9, 14, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 8, 5, 16], [6, 14, 9, 15], [20, 2, 13, 5], [7, 4, 18, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 14, 6, 9], [7, 14, 13, 8], [11, 6, 9, 5], [10, 3, 10, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 15, 5, 9], [2, 17, 7, 8], [21, 8, 8, 1], [10, 11, 15, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 14, 5, 19], [4, 15, 11, 16], [19, 6, 13, 7], [9, 7, 10, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 11, 6, 15], [6, 16, 5, 13], [19, 8, 11, 1], [13, 10, 11, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[10, 11, 5, 11], [3, 18, 10, 15], [18, 6, 5, 3], [12, 5, 18, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 11, 4, 17], [2, 15, 4, 11], [17, 5, 5, 3], [8, 2, 20, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 16, 4, 15], [2, 15, 11, 8], [20, 6, 14, 3], [14, 3, 20, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 11, 3, 11], [2, 12, 9, 7], [21, 5, 9, 10], [14, 7, 11, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 17, 4, 14], [6, 9, 4, 16], [15, 5, 14, 5], [13, 3, 10, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[11, 14, 2, 17], [5, 17, 4, 10], [14, 1, 8, 6], [4, 7, 14, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 16, 2, 10], [2, 17, 6, 13], [12, 5, 10, 5], [7, 1, 15, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 7, 4, 14], [7, 18, 5, 9], [17, 4, 12, 1], [10, 7, 17, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 2, 4], [5, 9, 5], [8, 2, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 10, 8], [14, 9, 6], [1, 1, 13]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 2, 3], [4, 1, 1], [7, 2, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 11], [7, 5, 3], [5, 1, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 7, 1], [12, 5, 3], [1, 7, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 11, 4], [8, 1, 2], [9, 8, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 3, 8], [4, 5, 6], [4, 4, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 2, 11], [10, 4, 1], [3, 6, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 7, 9], [5, 5, 6], [6, 2, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 3, 7], [5, 1, 5], [6, 3, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 11, 3], [11, 10, 3], [5, 8, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 9, 4], [8, 8, 4], [2, 8, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 11, 3], [9, 8, 3], [9, 5, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 8, 3], [7, 10, 4], [3, 2, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 9, 11], [13, 1, 3], [6, 3, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 4, 2], [13, 2, 2], [6, 1, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 2, 7], [13, 10, 3], [3, 6, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 2, 9], [10, 8, 5], [2, 8, 13]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 8, 4], [14, 10, 3], [2, 1, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 10], [5, 6, 5], [1, 2, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 3, 2], [6, 5, 4], [6, 1, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 3, 2], [11, 2, 6], [2, 7, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 8, 2], [6, 8, 5], [6, 6, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 4], [9, 2, 3], [5, 8, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 8, 7], [4, 3, 4], [3, 1, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 6, 5], [5, 3, 3], [5, 2, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 5, 4], [6, 7, 1], [7, 1, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 2], [10, 4, 6], [6, 4, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 12, 5], [7, 3, 1], [7, 3, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 10, 1], [13, 4, 6], [4, 7, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 9], [7, 2, 2], [7, 5, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 10, 3], [5, 2, 2], [7, 6, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 5, 7], [6, 6, 2], [2, 1, 13]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 9, 3], [8, 8, 2], [7, 6, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 2, 10], [10, 6, 4], [3, 4, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 6, 10], [11, 4, 6], [3, 6, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 11, 5], [5, 6, 2], [8, 4, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 5, 4], [12, 10, 1], [1, 3, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 7, 11], [7, 6, 5], [3, 8, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 10, 11], [10, 5, 4], [2, 4, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 5, 3], [4, 6, 1], [7, 1, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 7, 4], [4, 8, 4], [7, 3, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 2, 11], [12, 7, 4], [7, 2, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 7, 6], [7, 2, 2], [6, 7, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 8, 8], [7, 8, 3], [8, 3, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 6, 2], [13, 9, 4], [6, 4, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 11, 6], [8, 8, 4], [8, 7, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 11, 2], [14, 5, 2], [7, 5, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 12, 11], [13, 9, 2], [2, 8, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 7, 1], [9, 7, 6], [4, 2, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 3, 9], [14, 8, 5], [6, 1, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 6, 7], [14, 5, 6], [8, 8, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 8, 2], [9, 7, 3], [4, 8, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 2, 6], [4, 3, 2], [9, 8, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 9], [11, 9, 3], [1, 3, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 5, 7], [5, 6, 2], [8, 2, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 8, 5], [10, 5, 3], [7, 6, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 7, 11], [13, 8, 6], [8, 6, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 5, 3], [11, 7, 5], [9, 1, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 1], [7, 9, 1], [2, 1, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 7, 9], [13, 4, 3], [1, 3, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 4, 9], [12, 4, 1], [4, 4, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 4, 7], [9, 1, 3], [1, 8, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 11, 2], [11, 4, 4], [3, 5, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 2, 1], [14, 1, 3], [3, 4, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 4, 8], [8, 2, 3], [1, 7, 11]]) == False"], "scores": [1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, false, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 0, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Determines if a matrix qualifies as a magic square.\n    \n    A magic square is a square matrix in which the sum of every row, column, and both main diagonals are the same.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each sublist represents a row in the matrix.\n    \n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    if not is_square(matrix):\n        return False\n    \n    size = len(matrix)\n    magic_sum = sum_row(matrix, 0)\n    \n    for i in range(1, size):\n        if sum_row(matrix, i) != magic_sum:\n            return False\n    \n    for j in range(size):\n        if sum_col(matrix, j) != magic_sum:\n            return False\n    \n    if sum_diagonal(matrix, True) != magic_sum:\n        return False\n    \n    if sum_diagonal(matrix, False) != magic_sum:\n        return False\n    \n    return True\n\ndef is_square(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Checks if the matrix is square (i.e., has the same number of rows and columns).\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each sublist represents a row in the matrix.\n    \n    Returns:\n        bool: True if the matrix is square, False otherwise.\n    \"\"\"\n    num_rows = len(matrix)\n    for row in matrix:\n        if len(row) != num_rows:\n            return False\n    return True\n\ndef sum_row(matrix: List[List[int]], row_index: int) -> int:\n    \"\"\"\n    Calculates the sum of a specific row in the matrix.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each sublist represents a row in the matrix.\n        row_index (int): The index of the row to sum.\n    \n    Returns:\n        int: The sum of the specified row.\n    \"\"\"\n    return sum(matrix[row_index])\n\ndef sum_col(matrix: List[List[int]], col_index: int) -> int:\n    \"\"\"\n    Calculates the sum of a specific column in the matrix.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each sublist represents a row in the matrix.\n        col_index (int): The index of the column to sum.\n    \n    Returns:\n        int: The sum of the specified column.\n    \"\"\"\n    return sum(matrix[row][col_index] for row in range(len(matrix)))\n\ndef sum_diagonal(matrix: List[List[int]], is_main: bool) -> int:\n    \"\"\"\n    Calculates the sum of a diagonal in the matrix.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each sublist represents a row in the matrix.\n        is_main (bool): True if the diagonal is the main diagonal, False if it is the secondary diagonal.\n    \n    Returns:\n        int: The sum of the specified diagonal.\n    \"\"\"\n    size = len(matrix)\n    if is_main:\n        return sum(matrix[i][i] for i in range(size))\n    else:\n        return sum(matrix[i][size - 1 - i] for i in range(size))\n", "passed": true, "pass": true, "pass_num": 9, "round": 474, "mutate_method": "rephrase_one", "parent_index": 57}
