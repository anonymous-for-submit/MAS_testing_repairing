{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 129, "prompt": "Write a function to calculate whether the matrix is a magic square. Ensure your implementation handles both square and non-square matrices gracefully.", "code": "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True", "test_imports": [], "test_list": ["assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False", "assert magic_square_test([[8, 9, 3, 14], [7, 10, 9, 11], [16, 6, 13, 6], [9, 11, 17, 2]]) == False", "assert magic_square_test([[9, 10, 6, 17], [5, 8, 4, 11], [13, 1, 5, 9], [11, 10, 17, 8]]) == False", "assert magic_square_test([[2, 8, 3, 9], [3, 16, 5, 7], [12, 7, 5, 2], [12, 11, 12, 6]]) == False", "assert magic_square_test([[12, 12, 6, 10], [7, 10, 4, 9], [20, 8, 9, 8], [14, 8, 16, 3]]) == False", "assert magic_square_test([[12, 10, 1, 13], [4, 12, 3, 6], [18, 7, 5, 1], [4, 2, 15, 7]]) == False", "assert magic_square_test([[12, 17, 3, 9], [7, 9, 11, 8], [19, 1, 11, 1], [10, 9, 15, 7]]) == False", "assert magic_square_test([[11, 7, 2, 16], [7, 18, 4, 12], [16, 7, 13, 6], [10, 1, 18, 6]]) == False", "assert magic_square_test([[8, 7, 5, 15], [7, 13, 6, 8], [20, 2, 11, 9], [13, 6, 15, 4]]) == False", "assert magic_square_test([[10, 8, 3, 10], [1, 9, 7, 13], [16, 7, 14, 4], [7, 10, 18, 1]]) == False", "assert magic_square_test([[2, 17, 1, 10], [4, 15, 5, 11], [15, 6, 5, 7], [5, 1, 14, 8]]) == False", "assert magic_square_test([[6, 13, 5, 14], [5, 15, 11, 14], [12, 4, 15, 2], [13, 9, 13, 5]]) == False", "assert magic_square_test([[12, 14, 5, 9], [1, 11, 9, 14], [13, 5, 14, 8], [11, 7, 13, 4]]) == False", "assert magic_square_test([[2, 9, 2, 16], [7, 15, 4, 11], [21, 2, 13, 4], [10, 9, 20, 9]]) == False", "assert magic_square_test([[7, 11, 2, 16], [6, 10, 9, 8], [15, 4, 12, 6], [14, 10, 18, 9]]) == False", "assert magic_square_test([[9, 8, 3, 12], [6, 14, 5, 7], [13, 3, 6, 10], [12, 11, 15, 6]]) == False", "assert magic_square_test([[4, 10, 4, 17], [1, 14, 3, 12], [17, 6, 13, 1], [4, 8, 12, 8]]) == False", "assert magic_square_test([[9, 7, 6, 9], [6, 10, 8, 10], [19, 3, 5, 1], [8, 7, 18, 5]]) == False", "assert magic_square_test([[5, 13, 1, 12], [6, 16, 7, 10], [18, 4, 8, 5], [8, 5, 16, 4]]) == False", "assert magic_square_test([[8, 12, 3, 13], [4, 13, 13, 8], [17, 7, 15, 9], [14, 5, 14, 7]]) == False", "assert magic_square_test([[10, 9, 2, 18], [7, 9, 13, 13], [18, 7, 9, 4], [5, 9, 14, 8]]) == False", "assert magic_square_test([[5, 8, 5, 16], [6, 14, 9, 15], [20, 2, 13, 5], [7, 4, 18, 1]]) == False", "assert magic_square_test([[7, 14, 6, 9], [7, 14, 13, 8], [11, 6, 9, 5], [10, 3, 10, 6]]) == False", "assert magic_square_test([[7, 15, 5, 9], [2, 17, 7, 8], [21, 8, 8, 1], [10, 11, 15, 8]]) == False", "assert magic_square_test([[9, 14, 5, 19], [4, 15, 11, 16], [19, 6, 13, 7], [9, 7, 10, 1]]) == False", "assert magic_square_test([[12, 11, 6, 15], [6, 16, 5, 13], [19, 8, 11, 1], [13, 10, 11, 2]]) == False", "assert magic_square_test([[10, 11, 5, 11], [3, 18, 10, 15], [18, 6, 5, 3], [12, 5, 18, 3]]) == False", "assert magic_square_test([[7, 11, 4, 17], [2, 15, 4, 11], [17, 5, 5, 3], [8, 2, 20, 7]]) == False", "assert magic_square_test([[6, 16, 4, 15], [2, 15, 11, 8], [20, 6, 14, 3], [14, 3, 20, 7]]) == False", "assert magic_square_test([[8, 11, 3, 11], [2, 12, 9, 7], [21, 5, 9, 10], [14, 7, 11, 1]]) == False", "assert magic_square_test([[12, 17, 4, 14], [6, 9, 4, 16], [15, 5, 14, 5], [13, 3, 10, 7]]) == False", "assert magic_square_test([[11, 14, 2, 17], [5, 17, 4, 10], [14, 1, 8, 6], [4, 7, 14, 2]]) == False", "assert magic_square_test([[7, 16, 2, 10], [2, 17, 6, 13], [12, 5, 10, 5], [7, 1, 15, 1]]) == False", "assert magic_square_test([[12, 7, 4, 14], [7, 18, 5, 9], [17, 4, 12, 1], [10, 7, 17, 4]]) == False", "assert magic_square_test([[2, 2, 4], [5, 9, 5], [8, 2, 6]]) == False", "assert magic_square_test([[7, 10, 8], [14, 9, 6], [1, 1, 13]]) == False", "assert magic_square_test([[7, 2, 3], [4, 1, 1], [7, 2, 9]]) == False", "assert magic_square_test([[4, 10, 11], [7, 5, 3], [5, 1, 4]]) == False", "assert magic_square_test([[3, 7, 1], [12, 5, 3], [1, 7, 6]]) == False", "assert magic_square_test([[6, 11, 4], [8, 1, 2], [9, 8, 11]]) == False", "assert magic_square_test([[4, 3, 8], [4, 5, 6], [4, 4, 10]]) == False", "assert magic_square_test([[5, 2, 11], [10, 4, 1], [3, 6, 4]]) == False", "assert magic_square_test([[3, 7, 9], [5, 5, 6], [6, 2, 7]]) == False", "assert magic_square_test([[2, 3, 7], [5, 1, 5], [6, 3, 8]]) == False", "assert magic_square_test([[1, 11, 3], [11, 10, 3], [5, 8, 3]]) == False", "assert magic_square_test([[4, 9, 4], [8, 8, 4], [2, 8, 10]]) == False", "assert magic_square_test([[2, 11, 3], [9, 8, 3], [9, 5, 11]]) == False", "assert magic_square_test([[5, 8, 3], [7, 10, 4], [3, 2, 11]]) == False", "assert magic_square_test([[3, 9, 11], [13, 1, 3], [6, 3, 9]]) == False", "assert magic_square_test([[6, 4, 2], [13, 2, 2], [6, 1, 12]]) == False", "assert magic_square_test([[1, 2, 7], [13, 10, 3], [3, 6, 7]]) == False", "assert magic_square_test([[7, 2, 9], [10, 8, 5], [2, 8, 13]]) == False", "assert magic_square_test([[4, 8, 4], [14, 10, 3], [2, 1, 9]]) == False", "assert magic_square_test([[4, 10, 10], [5, 6, 5], [1, 2, 11]]) == False", "assert magic_square_test([[7, 3, 2], [6, 5, 4], [6, 1, 9]]) == False", "assert magic_square_test([[6, 3, 2], [11, 2, 6], [2, 7, 11]]) == False", "assert magic_square_test([[4, 8, 2], [6, 8, 5], [6, 6, 4]]) == False", "assert magic_square_test([[1, 7, 4], [9, 2, 3], [5, 8, 9]]) == False", "assert magic_square_test([[1, 8, 7], [4, 3, 4], [3, 1, 6]]) == False", "assert magic_square_test([[2, 6, 5], [5, 3, 3], [5, 2, 4]]) == False", "assert magic_square_test([[6, 5, 4], [6, 7, 1], [7, 1, 5]]) == False", "assert magic_square_test([[1, 7, 2], [10, 4, 6], [6, 4, 6]]) == False", "assert magic_square_test([[1, 12, 5], [7, 3, 1], [7, 3, 4]]) == False", "assert magic_square_test([[1, 10, 1], [13, 4, 6], [4, 7, 12]]) == False", "assert magic_square_test([[1, 7, 9], [7, 2, 2], [7, 5, 12]]) == False", "assert magic_square_test([[1, 10, 3], [5, 2, 2], [7, 6, 4]]) == False", "assert magic_square_test([[7, 5, 7], [6, 6, 2], [2, 1, 13]]) == False", "assert magic_square_test([[5, 9, 3], [8, 8, 2], [7, 6, 3]]) == False", "assert magic_square_test([[4, 2, 10], [10, 6, 4], [3, 4, 3]]) == False", "assert magic_square_test([[4, 6, 10], [11, 4, 6], [3, 6, 2]]) == False", "assert magic_square_test([[7, 11, 5], [5, 6, 2], [8, 4, 10]]) == False", "assert magic_square_test([[7, 5, 4], [12, 10, 1], [1, 3, 6]]) == False", "assert magic_square_test([[6, 7, 11], [7, 6, 5], [3, 8, 4]]) == False", "assert magic_square_test([[6, 10, 11], [10, 5, 4], [2, 4, 4]]) == False", "assert magic_square_test([[2, 5, 3], [4, 6, 1], [7, 1, 10]]) == False", "assert magic_square_test([[4, 7, 4], [4, 8, 4], [7, 3, 2]]) == False", "assert magic_square_test([[5, 2, 11], [12, 7, 4], [7, 2, 6]]) == False", "assert magic_square_test([[7, 7, 6], [7, 2, 2], [6, 7, 11]]) == False", "assert magic_square_test([[4, 8, 8], [7, 8, 3], [8, 3, 6]]) == False", "assert magic_square_test([[6, 6, 2], [13, 9, 4], [6, 4, 4]]) == False", "assert magic_square_test([[6, 11, 6], [8, 8, 4], [8, 7, 2]]) == False", "assert magic_square_test([[5, 11, 2], [14, 5, 2], [7, 5, 5]]) == False", "assert magic_square_test([[3, 12, 11], [13, 9, 2], [2, 8, 12]]) == False", "assert magic_square_test([[5, 7, 1], [9, 7, 6], [4, 2, 2]]) == False", "assert magic_square_test([[2, 3, 9], [14, 8, 5], [6, 1, 7]]) == False", "assert magic_square_test([[3, 6, 7], [14, 5, 6], [8, 8, 5]]) == False", "assert magic_square_test([[3, 8, 2], [9, 7, 3], [4, 8, 9]]) == False", "assert magic_square_test([[7, 2, 6], [4, 3, 2], [9, 8, 7]]) == False", "assert magic_square_test([[4, 10, 9], [11, 9, 3], [1, 3, 2]]) == False", "assert magic_square_test([[4, 5, 7], [5, 6, 2], [8, 2, 5]]) == False", "assert magic_square_test([[6, 8, 5], [10, 5, 3], [7, 6, 7]]) == False", "assert magic_square_test([[4, 7, 11], [13, 8, 6], [8, 6, 3]]) == False", "assert magic_square_test([[4, 5, 3], [11, 7, 5], [9, 1, 7]]) == False", "assert magic_square_test([[1, 7, 1], [7, 9, 1], [2, 1, 11]]) == False", "assert magic_square_test([[3, 7, 9], [13, 4, 3], [1, 3, 11]]) == False", "assert magic_square_test([[5, 4, 9], [12, 4, 1], [4, 4, 9]]) == False", "assert magic_square_test([[1, 4, 7], [9, 1, 3], [1, 8, 10]]) == False", "assert magic_square_test([[2, 11, 2], [11, 4, 4], [3, 5, 2]]) == False", "assert magic_square_test([[4, 2, 1], [14, 1, 3], [3, 4, 9]]) == False", "assert magic_square_test([[7, 4, 8], [8, 2, 3], [1, 7, 11]]) == False"], "entry_point": "magic_square_test", "repair_prompt": ["Write a function magic_square_test to calculate whether the matrix is a magic square. Ensure your implementation handles both square and non-square matrices gracefully.\nmagic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n"], "completions": ["from typing import List\nimport numpy as np\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    This function checks if a given matrix is a magic square.\n    \n    Args:\n        matrix (List[List[int]]): A list of lists of integers representing the matrix.\n    \n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    # Check if the matrix is square\n    if not isinstance(matrix, list) or not all(isinstance(row, list) and len(row) == len(matrix) for row in matrix):\n        return False\n    \n    # Convert the matrix to a NumPy array for efficient operations\n    matrix_np = np.array(matrix)\n    \n    # Calculate the sum of each row\n    row_sums = np.sum(matrix_np, axis=1)\n    \n    # Calculate the sum of each column\n    col_sums = np.sum(matrix_np, axis=0)\n    \n    # Calculate the sum of the main diagonal\n    main_diag_sum = np.trace(matrix_np)\n    \n    # Calculate the sum of the secondary diagonal\n    sec_diag_sum = np.trace(np.fliplr(matrix_np))\n    \n    # Check if all sums are equal\n    all_sums = set([main_diag_sum, sec_diag_sum] + list(row_sums) + list(col_sums))\n    \n    return len(all_sums) == 1\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    This function checks if a given matrix is a magic square.\n    \n    A magic square is a square matrix in which the sum of every row, column, and both main diagonals are the same.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list representing the matrix, where each inner list represents a row of integers.\n    \n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n    \n    n = len(matrix)\n    if any(len(row) != n for row in matrix):\n        return False\n    \n    # Calculate the sum of the first row to use as a reference\n    magic_sum = sum(matrix[0])\n    \n    # Check the sum of each row\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check the sum of each column\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check the sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Check the sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n    \n    return True\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square.\n    \n    A magic square is a square matrix in which the sum of every row, column, and both main diagonals are the same.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list of integers representing the matrix.\n    \n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    # Check if the matrix is square\n    n = len(matrix)\n    for row in matrix:\n        if len(row) != n:\n            return False\n    \n    # Calculate the sum of the first row to use as a reference\n    magic_sum = sum(matrix[0])\n    \n    # Check the sum of each row\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check the sum of each column\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check the sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Check the sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n    \n    return True\n", "from typing import List\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    This function checks if a given matrix is a magic square.\n    \n    A magic square is a square matrix in which the sum of each row, each column, and both main diagonals are the same.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each inner list represents a row of the matrix.\n    \n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    \n    # Check if the matrix is square\n    for row in matrix:\n        if len(row) != n:\n            return False\n    \n    # Calculate the sum of the first row to use as a reference\n    magic_sum = sum(matrix[0])\n    \n    # Check the sum of each row\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check the sum of each column\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check the sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Check the sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n    \n    return True\n", "from typing import List\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square.\n\n    A magic square is a square matrix in which the sum of every row, column, and both main diagonals are the same.\n\n    Args:\n        matrix (List[List[int]]): A 2D list representing the matrix.\n\n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    if not is_square(matrix):\n        return False\n\n    size = len(matrix)\n    magic_sum = sum_row(matrix, 0)\n\n    for i in range(1, size):\n        if sum_row(matrix, i) != magic_sum:\n            return False\n\n    for j in range(size):\n        if sum_col(matrix, j) != magic_sum:\n            return False\n\n    if sum_diagonal(matrix, True) != magic_sum:\n        return False\n\n    if sum_diagonal(matrix, False) != magic_sum:\n        return False\n\n    return True\n\ndef is_square(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is square.\n\n    Args:\n        matrix (List[List[int]]): A 2D list representing the matrix.\n\n    Returns:\n        bool: True if the matrix is square, False otherwise.\n    \"\"\"\n    num_rows = len(matrix)\n    for row in matrix:\n        if len(row) != num_rows:\n            return False\n    return True\n\ndef sum_row(matrix: List[List[int]], row_index: int) -> int:\n    \"\"\"\n    Calculate the sum of elements in a specified row.\n\n    Args:\n        matrix (List[List[int]]): A 2D list representing the matrix.\n        row_index (int): The index of the row to sum.\n\n    Returns:\n        int: The sum of the elements in the specified row.\n    \"\"\"\n    return sum(matrix[row_index])\n\ndef sum_col(matrix: List[List[int]], col_index: int) -> int:\n    \"\"\"\n    Calculate the sum of elements in a specified column.\n\n    Args:\n        matrix (List[List[int]]): A 2D list representing the matrix.\n        col_index (int): The index of the column to sum.\n\n    Returns:\n        int: The sum of the elements in the specified column.\n    \"\"\"\n    return sum(matrix[row][col_index] for row in range(len(matrix)))\n\ndef sum_diagonal(matrix: List[List[int]], is_main: bool) -> int:\n    \"\"\"\n    Calculate the sum of elements in a specified diagonal.\n\n    Args:\n        matrix (List[List[int]]): A 2D list representing the matrix.\n        is_main (bool): True for the main diagonal, False for the secondary diagonal.\n\n    Returns:\n        int: The sum of the elements in the specified diagonal.\n    \"\"\"\n    size = len(matrix)\n    if is_main:\n        return sum(matrix[i][i] for i in range(size))\n    else:\n        return sum(matrix[i][size - 1 - i] for i in range(size))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    # Check if the matrix is square\n    if not all(len(row) == len(matrix) for row in matrix):\n        return False\n    \n    # Calculate the sum of the first row to use as a reference\n    ref_sum = sum(matrix[0])\n    \n    # Check sums of rows\n    for row in matrix:\n        if sum(row) != ref_sum:\n            return False\n    \n    # Check sums of columns\n    for col in range(len(matrix)):\n        if sum(matrix[row][col] for row in range(len(matrix))) != ref_sum:\n            return False\n    \n    # Check sum of primary diagonal\n    if sum(matrix[i][i] for i in range(len(matrix))) != ref_sum:\n        return False\n    \n    # Check sum of secondary diagonal\n    if sum(matrix[i][len(matrix)-1-i] for i in range(len(matrix))) != ref_sum:\n        return False\n    \n    return True\n", "from typing import List\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    This function will check if the input matrix is a magic square.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each inner list represents a row in the matrix.\n    \n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n    \n    n = len(matrix)\n    if any(len(row) != n for row in matrix):\n        return False\n    \n    # Calculate the sum of the first row to use as a reference\n    magic_sum = sum(matrix[0])\n    \n    # Check the sum of each row\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check the sum of each column\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check the sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Check the sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n    \n    return True\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Validate if the given matrix is a magic square.\n    \n    A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n    \n    Args:\n        matrix (List[List[int]]): A list of lists of integers representing the matrix.\n    \n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    # Validate the input to ensure it is a list of lists\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists\")\n    \n    # Check if the matrix is square (i.e., the number of rows equals the number of columns)\n    n = len(matrix)\n    if not all(len(row) == n for row in matrix):\n        return False\n    \n    # Calculate the sum of elements in each row, each column, and the two main diagonals\n    magic_sum = sum(matrix[0])\n    \n    # Check the sum of each row\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check the sum of each column\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check the sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Check the sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n    \n    # If all sums are equal, return True\n    return True\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    n = len(matrix)\n    if not all(len(row) == n for row in matrix):\n        return False\n\n    magic_sum = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n\n    # Check main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n\n    # Check secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n\n    return True\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    This function checks if a given matrix is a magic square.\n    \n    A magic square is a square matrix in which the sum of every row, column, and both main diagonals are the same.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list representing the matrix, where each inner list represents a row of integers.\n    \n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n    \n    n = len(matrix)\n    if any(len(row) != n for row in matrix):\n        return False\n    \n    # Calculate the sum of the first row to use as a reference\n    magic_sum = sum(matrix[0])\n    \n    # Check the sum of each row\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check the sum of each column\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check the sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Check the sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n    \n    return True\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that can determine if a given matrix is a magic square. A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same. The function should handle both square and non-square matrices gracefully, returning False for non-square matrices and True for those that are magic squares.\nrequirement pool:\n- The main code should include a function 'magic_square_test' that takes a matrix as input.\n- The function should check if the matrix is square. If not, return False.\n- If the matrix is square, calculate the sum of each row, column, and both main diagonals.\n- If all sums are equal, return True. Otherwise, return False.\nTo implement the 'magic_square_test' function, we will use Python's built-in capabilities and leverage the NumPy library for efficient matrix operations. The function will first check if the input matrix is square. If not, it will return False. If the matrix is square, it will calculate the sum of each row, column, and both main diagonals. If all these sums are equal, the function will return True, indicating the matrix is a magic square. Otherwise, it will return False.\n", "requirement analysis:\nThe requirement is to create a function that can determine if a given matrix is a magic square. A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same. The function should handle both square and non-square matrices gracefully, returning False for non-square matrices.\nrequirement pool:\n- The main code should include a function 'magic_square_test' that takes a matrix as input.\n- The function should calculate the sum of each row, column, and both diagonals.\n- The function should compare these sums and return True if they are all equal, otherwise return False.\n- Implement error handling to gracefully handle non-square matrices, returning False immediately.\n- Ensure the function is efficient and can handle matrices of varying sizes.\nTo implement the 'magic_square_test' function, we will use Python's built-in capabilities along with a simple approach to handle both square and non-square matrices. The function will calculate the sum of each row, column, and both diagonals, then compare these sums to determine if the matrix is a magic square. For non-square matrices, the function will return False immediately.\n", "requirement analysis:\nThe primary requirement is to develop a function that can determine whether a given matrix is a magic square. This involves checking if the sum of the elements in each row, each column, and both main diagonals are equal. The function should gracefully handle both square and non-square matrices, returning appropriate results based on the matrix's dimensions.\nrequirement pool:\n- The main code should accurately determine if a matrix is a magic square.\n- The function should handle matrices of varying dimensions.\n- Implement error handling for non-numeric elements in the matrix.\n- Ensure the function is optimized for performance, especially for large matrices.\n- Include user documentation and examples in the product.\nTo implement the magic_square_test function, we will use Python's built-in capabilities and leverage a simple approach to handle both square and non-square matrices. The function will first check if the matrix is square; if not, it will return False. If the matrix is square, it will then calculate the sum of each row, column, and both diagonals. If all these sums are equal, the function will return True, indicating the matrix is a magic square. Otherwise, it will return False.\n", "requirement analysis:\nThe primary requirement is to create a function that can determine if a given matrix is a magic square. This involves checking if the sums of the numbers in each row, each column, and the two main diagonals are equal. The function should gracefully handle both square and non-square matrices, providing clear outputs for each case.\nrequirement pool:\n- The main code should accurately determine if a matrix is a magic square.\n- The function should handle matrices of varying sizes.\n- Implement error handling for non-numeric inputs.\n- Ensure the function provides clear and user-friendly outputs.\n- Include optional features for educational purposes, such as displaying the sums of rows, columns, and diagonals.\nTo create a function that can determine if a given matrix is a magic square, we will use Python's built-in capabilities and leverage a simple and efficient approach. The function will first check if the matrix is square; if not, it will immediately return False. If the matrix is square, it will then calculate the sum of each row, column, and the two main diagonals. If all these sums are equal, the function will return True, indicating the matrix is a magic square. Otherwise, it will return False.\n", "requirement analysis:\nThe requirement is to create a function that can determine if a given matrix is a magic square. A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same. The function should gracefully handle both square and non-square matrices, returning False if the matrix is not square. The function should be efficient and clear in its implementation.\nrequirement pool:\n- The main code should accurately determine if a matrix is a magic square\n- The function should handle non-square matrices gracefully\n- Implement a clear and efficient algorithm for checking magic squares\n- Ensure the function is user-friendly and provides clear results\n- Optimize the function for performance and scalability\nTo create a function that can determine if a given matrix is a magic square, we will use Python's built-in capabilities and leverage a simple and efficient approach. The function will first check if the matrix is square. If not, it will return False. If the matrix is square, it will then calculate the sum of each row, column, and both main diagonals. If all these sums are equal, the function will return True, indicating the matrix is a magic square. Otherwise, it will return False.\n", "requirement analysis:\nThe requirement to create a function that can determine whether a given matrix is a magic square is crucial for users who need to verify the properties of matrices. The function should handle both square and non-square matrices gracefully, ensuring versatility and usability across different scenarios.\nrequirement pool:\n- The main code should accurately determine if a given matrix is a magic square.\n- The function should handle matrices of varying dimensions, including non-square matrices.\n- Implement error handling to manage invalid inputs gracefully.\n- Ensure the function is optimized for performance, especially for large matrices.\n- Include user documentation and examples to facilitate easy understanding and usage.\nTo create a function that can determine whether a given matrix is a magic square, we will use Python, leveraging its simplicity and the extensive standard library. The function will need to check if the sum of the elements in each row, each column, and the two main diagonals are equal. We will also handle non-square matrices gracefully by returning False or raising an appropriate error.\n", "requirement analysis:\nThe primary requirement is to create a function that can determine if a given matrix is a magic square. This involves checking if the sum of the elements in each row, each column, and both main diagonals are equal. The function should gracefully handle both square and non-square matrices, providing clear outputs for each case.\nrequirement pool:\n- Implement the function to check if a matrix is a magic square.\n- Ensure the function can handle both square and non-square matrices.\n- Provide clear and consistent outputs for valid and invalid magic squares.\n- Include user-friendly error handling for invalid inputs.\n- Allow for easy integration into existing projects.\nTo implement the magic_square_test function, we will use Python's built-in capabilities along with a simple and effective approach. The function will first check if the input is a square matrix. If it is not, it will return False. If it is a square matrix, the function will calculate the sum of each row, each column, and the two main diagonals. If all these sums are equal, the function will return True, indicating the matrix is a magic square. Otherwise, it will return False.\n", "requirement analysis:\nThe primary requirement is to create a function that can determine if a given matrix is a magic square. This involves checking if the sum of the elements in each row, each column, and the two main diagonals are equal. The function should gracefully handle both square and non-square matrices, returning False or raising an appropriate error for non-square matrices.\nrequirement pool:\n- The main code should include a function 'magic_square_test' that takes a matrix as input and returns True if it's a magic square, False otherwise.\n- The function should handle matrices of different sizes and shapes, returning False for non-square matrices.\n- Implement error handling to manage cases where the input is not a list of lists, ensuring the function does not break.\n- Ensure the function is optimized for performance, especially for large matrices.\nTo implement the 'magic_square_test' function, we will follow these steps: \n1. Validate the input to ensure it is a list of lists.\n2. Check if the matrix is square (i.e., the number of rows equals the number of columns).\n3. Calculate the sum of elements in each row, each column, and the two main diagonals.\n4. Compare these sums to ensure they are all equal.\n5. Return True if the matrix is a magic square, otherwise return False.\n", "requirement analysis:\nThe primary requirement is to create a function that can determine if a given matrix is a magic square. This includes handling both square and non-square matrices. The function should be efficient and handle edge cases gracefully. The product should be user-friendly and provide clear feedback on whether the matrix is a magic square or not.\nrequirement pool:\n- Implement a function to check if a matrix is a magic square.\n- Ensure the function can handle both square and non-square matrices.\n- Provide clear and user-friendly feedback on the result.\n- Optimize the function for efficiency and performance.\n- Include error handling for invalid inputs.\nTo implement the magic_square_test function, we will use Python's built-in data structures and standard library functions. The function will first check if the input is a square matrix by comparing the number of rows and columns. If the matrix is square, it will then calculate the sum of each row, column, and the two main diagonals. If all these sums are equal, the matrix is a magic square. The function will handle non-square matrices gracefully by returning False.\n", "requirement analysis:\nThe requirement is to create a function that can determine if a given matrix is a magic square. A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same. The function should handle both square and non-square matrices gracefully, returning False for non-square matrices.\nrequirement pool:\n- The main code should include a function 'magic_square_test' that takes a matrix as input.\n- The function should calculate the sum of each row, column, and both diagonals.\n- The function should compare these sums and return True if they are all equal, otherwise return False.\n- Implement error handling to gracefully handle non-square matrices, returning False immediately.\n- Ensure the function is efficient and can handle matrices of varying sizes.\nTo implement the 'magic_square_test' function, we will use Python's built-in capabilities along with a simple approach to handle both square and non-square matrices. The function will calculate the sum of each row, column, and both diagonals, then compare these sums to determine if the matrix is a magic square. For non-square matrices, the function will return False immediately.\n"], "test": ["def check(magic_square_test):\n\tassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True", "def check(magic_square_test):\n\tassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True", "def check(magic_square_test):\n\tassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 9, 3, 14], [7, 10, 9, 11], [16, 6, 13, 6], [9, 11, 17, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 10, 6, 17], [5, 8, 4, 11], [13, 1, 5, 9], [11, 10, 17, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 8, 3, 9], [3, 16, 5, 7], [12, 7, 5, 2], [12, 11, 12, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 12, 6, 10], [7, 10, 4, 9], [20, 8, 9, 8], [14, 8, 16, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 10, 1, 13], [4, 12, 3, 6], [18, 7, 5, 1], [4, 2, 15, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 17, 3, 9], [7, 9, 11, 8], [19, 1, 11, 1], [10, 9, 15, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[11, 7, 2, 16], [7, 18, 4, 12], [16, 7, 13, 6], [10, 1, 18, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 7, 5, 15], [7, 13, 6, 8], [20, 2, 11, 9], [13, 6, 15, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[10, 8, 3, 10], [1, 9, 7, 13], [16, 7, 14, 4], [7, 10, 18, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 17, 1, 10], [4, 15, 5, 11], [15, 6, 5, 7], [5, 1, 14, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 13, 5, 14], [5, 15, 11, 14], [12, 4, 15, 2], [13, 9, 13, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 14, 5, 9], [1, 11, 9, 14], [13, 5, 14, 8], [11, 7, 13, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 9, 2, 16], [7, 15, 4, 11], [21, 2, 13, 4], [10, 9, 20, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 11, 2, 16], [6, 10, 9, 8], [15, 4, 12, 6], [14, 10, 18, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 8, 3, 12], [6, 14, 5, 7], [13, 3, 6, 10], [12, 11, 15, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 4, 17], [1, 14, 3, 12], [17, 6, 13, 1], [4, 8, 12, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 7, 6, 9], [6, 10, 8, 10], [19, 3, 5, 1], [8, 7, 18, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 13, 1, 12], [6, 16, 7, 10], [18, 4, 8, 5], [8, 5, 16, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 12, 3, 13], [4, 13, 13, 8], [17, 7, 15, 9], [14, 5, 14, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[10, 9, 2, 18], [7, 9, 13, 13], [18, 7, 9, 4], [5, 9, 14, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 8, 5, 16], [6, 14, 9, 15], [20, 2, 13, 5], [7, 4, 18, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 14, 6, 9], [7, 14, 13, 8], [11, 6, 9, 5], [10, 3, 10, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 15, 5, 9], [2, 17, 7, 8], [21, 8, 8, 1], [10, 11, 15, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 14, 5, 19], [4, 15, 11, 16], [19, 6, 13, 7], [9, 7, 10, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 11, 6, 15], [6, 16, 5, 13], [19, 8, 11, 1], [13, 10, 11, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[10, 11, 5, 11], [3, 18, 10, 15], [18, 6, 5, 3], [12, 5, 18, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 11, 4, 17], [2, 15, 4, 11], [17, 5, 5, 3], [8, 2, 20, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 16, 4, 15], [2, 15, 11, 8], [20, 6, 14, 3], [14, 3, 20, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 11, 3, 11], [2, 12, 9, 7], [21, 5, 9, 10], [14, 7, 11, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 17, 4, 14], [6, 9, 4, 16], [15, 5, 14, 5], [13, 3, 10, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[11, 14, 2, 17], [5, 17, 4, 10], [14, 1, 8, 6], [4, 7, 14, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 16, 2, 10], [2, 17, 6, 13], [12, 5, 10, 5], [7, 1, 15, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 7, 4, 14], [7, 18, 5, 9], [17, 4, 12, 1], [10, 7, 17, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 2, 4], [5, 9, 5], [8, 2, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 10, 8], [14, 9, 6], [1, 1, 13]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 2, 3], [4, 1, 1], [7, 2, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 11], [7, 5, 3], [5, 1, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 7, 1], [12, 5, 3], [1, 7, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 11, 4], [8, 1, 2], [9, 8, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 3, 8], [4, 5, 6], [4, 4, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 2, 11], [10, 4, 1], [3, 6, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 7, 9], [5, 5, 6], [6, 2, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 3, 7], [5, 1, 5], [6, 3, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 11, 3], [11, 10, 3], [5, 8, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 9, 4], [8, 8, 4], [2, 8, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 11, 3], [9, 8, 3], [9, 5, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 8, 3], [7, 10, 4], [3, 2, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 9, 11], [13, 1, 3], [6, 3, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 4, 2], [13, 2, 2], [6, 1, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 2, 7], [13, 10, 3], [3, 6, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 2, 9], [10, 8, 5], [2, 8, 13]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 8, 4], [14, 10, 3], [2, 1, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 10], [5, 6, 5], [1, 2, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 3, 2], [6, 5, 4], [6, 1, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 3, 2], [11, 2, 6], [2, 7, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 8, 2], [6, 8, 5], [6, 6, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 4], [9, 2, 3], [5, 8, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 8, 7], [4, 3, 4], [3, 1, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 6, 5], [5, 3, 3], [5, 2, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 5, 4], [6, 7, 1], [7, 1, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 2], [10, 4, 6], [6, 4, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 12, 5], [7, 3, 1], [7, 3, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 10, 1], [13, 4, 6], [4, 7, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 9], [7, 2, 2], [7, 5, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 10, 3], [5, 2, 2], [7, 6, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 5, 7], [6, 6, 2], [2, 1, 13]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 9, 3], [8, 8, 2], [7, 6, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 2, 10], [10, 6, 4], [3, 4, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 6, 10], [11, 4, 6], [3, 6, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 11, 5], [5, 6, 2], [8, 4, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 5, 4], [12, 10, 1], [1, 3, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 7, 11], [7, 6, 5], [3, 8, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 10, 11], [10, 5, 4], [2, 4, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 5, 3], [4, 6, 1], [7, 1, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 7, 4], [4, 8, 4], [7, 3, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 2, 11], [12, 7, 4], [7, 2, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 7, 6], [7, 2, 2], [6, 7, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 8, 8], [7, 8, 3], [8, 3, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 6, 2], [13, 9, 4], [6, 4, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 11, 6], [8, 8, 4], [8, 7, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 11, 2], [14, 5, 2], [7, 5, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 12, 11], [13, 9, 2], [2, 8, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 7, 1], [9, 7, 6], [4, 2, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 3, 9], [14, 8, 5], [6, 1, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 6, 7], [14, 5, 6], [8, 8, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 8, 2], [9, 7, 3], [4, 8, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 2, 6], [4, 3, 2], [9, 8, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 9], [11, 9, 3], [1, 3, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 5, 7], [5, 6, 2], [8, 2, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 8, 5], [10, 5, 3], [7, 6, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 7, 11], [13, 8, 6], [8, 6, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 5, 3], [11, 7, 5], [9, 1, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 1], [7, 9, 1], [2, 1, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 7, 9], [13, 4, 3], [1, 3, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 4, 9], [12, 4, 1], [4, 4, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 4, 7], [9, 1, 3], [1, 8, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 11, 2], [11, 4, 4], [3, 5, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 2, 1], [14, 1, 3], [3, 4, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 4, 8], [8, 2, 3], [1, 7, 11]]) == False"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    This function checks if a given matrix is a magic square.\n    \n    A magic square is a square matrix in which the sum of every row, column, and both main diagonals are the same.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list representing the matrix, where each inner list represents a row of integers.\n    \n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n    \n    n = len(matrix)\n    if any(len(row) != n for row in matrix):\n        return False\n    \n    # Calculate the sum of the first row to use as a reference\n    magic_sum = sum(matrix[0])\n    \n    # Check the sum of each row\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check the sum of each column\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check the sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Check the sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n    \n    return True\n", "passed": true, "pass": true, "pass_num": 10, "round": 786, "mutate_method": "add_1_sentence_at_end", "parent_index": 57}
