{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 65, "prompt": "Write a function to flatten a list and sum all of its elements. Consider edge cases. For example, consider empty lists or lists with non-integer values.", "code": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total", "test_imports": [], "test_list": ["assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21", "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106", "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210", "assert recursive_list_sum([3, 1, [7, 2], [1, 1]]) == 15", "assert recursive_list_sum([5, 7, [5, 7], [7, 2]]) == 33", "assert recursive_list_sum([4, 4, [1, 5], [9, 6]]) == 29", "assert recursive_list_sum([1, 5, [5, 8], [2, 1]]) == 22", "assert recursive_list_sum([1, 3, [3, 8], [2, 4]]) == 21", "assert recursive_list_sum([4, 2, [8, 3], [3, 2]]) == 22", "assert recursive_list_sum([1, 5, [8, 1], [7, 11]]) == 33", "assert recursive_list_sum([5, 6, [2, 8], [7, 5]]) == 33", "assert recursive_list_sum([4, 4, [3, 3], [10, 2]]) == 26", "assert recursive_list_sum([1, 3, [2, 2], [10, 1]]) == 19", "assert recursive_list_sum([3, 1, [7, 9], [2, 1]]) == 23", "assert recursive_list_sum([6, 7, [4, 8], [7, 10]]) == 42", "assert recursive_list_sum([2, 7, [5, 7], [1, 5]]) == 27", "assert recursive_list_sum([3, 3, [1, 9], [1, 11]]) == 28", "assert recursive_list_sum([2, 5, [5, 8], [10, 7]]) == 37", "assert recursive_list_sum([3, 2, [3, 6], [7, 6]]) == 27", "assert recursive_list_sum([4, 7, [1, 5], [4, 4]]) == 25", "assert recursive_list_sum([5, 4, [7, 4], [4, 7]]) == 31", "assert recursive_list_sum([1, 2, [5, 8], [4, 1]]) == 21", "assert recursive_list_sum([1, 1, [4, 8], [8, 8]]) == 30", "assert recursive_list_sum([4, 2, [3, 9], [8, 11]]) == 37", "assert recursive_list_sum([6, 5, [1, 7], [8, 4]]) == 31", "assert recursive_list_sum([5, 7, [2, 7], [8, 4]]) == 33", "assert recursive_list_sum([1, 3, [2, 6], [9, 4]]) == 25", "assert recursive_list_sum([6, 7, [1, 8], [9, 11]]) == 42", "assert recursive_list_sum([1, 1, [1, 9], [10, 6]]) == 28", "assert recursive_list_sum([1, 4, [8, 8], [8, 6]]) == 35", "assert recursive_list_sum([6, 4, [2, 6], [6, 2]]) == 26", "assert recursive_list_sum([1, 5, [4, 8], [5, 4]]) == 27", "assert recursive_list_sum([3, 6, [1, 1], [4, 5]]) == 20", "assert recursive_list_sum([5, 4, [3, 9], [10, 9]]) == 40", "assert recursive_list_sum([6, 6, [8, 9], [5, 3]]) == 37", "assert recursive_list_sum([2, 2, [7, 1], [5, 9]]) == 26", "assert recursive_list_sum([2, 8, [13, 14], [23, 46]]) == 106", "assert recursive_list_sum([8, 13, [16, 14], [14, 36]]) == 101", "assert recursive_list_sum([2, 14, [19, 15], [16, 40]]) == 106", "assert recursive_list_sum([7, 12, [13, 18], [21, 41]]) == 112", "assert recursive_list_sum([7, 8, [14, 12], [23, 43]]) == 107", "assert recursive_list_sum([12, 12, [18, 12], [20, 36]]) == 110", "assert recursive_list_sum([12, 9, [14, 12], [24, 39]]) == 110", "assert recursive_list_sum([7, 11, [17, 12], [15, 41]]) == 103", "assert recursive_list_sum([10, 12, [19, 15], [19, 46]]) == 121", "assert recursive_list_sum([12, 12, [14, 19], [15, 38]]) == 110", "assert recursive_list_sum([9, 8, [13, 15], [18, 38]]) == 101", "assert recursive_list_sum([8, 11, [15, 13], [17, 40]]) == 104", "assert recursive_list_sum([10, 15, [19, 10], [17, 42]]) == 113", "assert recursive_list_sum([6, 12, [11, 12], [21, 46]]) == 108", "assert recursive_list_sum([8, 10, [13, 15], [24, 45]]) == 115", "assert recursive_list_sum([2, 13, [12, 19], [15, 43]]) == 104", "assert recursive_list_sum([7, 8, [19, 11], [15, 44]]) == 104", "assert recursive_list_sum([5, 13, [19, 18], [16, 45]]) == 116", "assert recursive_list_sum([11, 6, [17, 16], [16, 39]]) == 105", "assert recursive_list_sum([11, 13, [20, 14], [21, 46]]) == 125", "assert recursive_list_sum([6, 9, [16, 15], [20, 45]]) == 111", "assert recursive_list_sum([5, 8, [11, 16], [23, 45]]) == 108", "assert recursive_list_sum([9, 11, [11, 10], [16, 41]]) == 98", "assert recursive_list_sum([11, 5, [18, 10], [18, 40]]) == 102", "assert recursive_list_sum([4, 6, [12, 13], [21, 46]]) == 102", "assert recursive_list_sum([12, 10, [15, 9], [18, 38]]) == 102", "assert recursive_list_sum([5, 13, [20, 9], [22, 39]]) == 108", "assert recursive_list_sum([4, 7, [16, 15], [21, 39]]) == 102", "assert recursive_list_sum([9, 9, [15, 19], [19, 45]]) == 116", "assert recursive_list_sum([7, 13, [18, 19], [17, 39]]) == 113", "assert recursive_list_sum([6, 15, [19, 18], [21, 37]]) == 116", "assert recursive_list_sum([12, 5, [13, 19], [15, 38]]) == 102", "assert recursive_list_sum([12, 10, [10, 9], [17, 40]]) == 98", "assert recursive_list_sum([11, 15, [31, 43], [47, 56]]) == 203", "assert recursive_list_sum([15, 19, [32, 41], [54, 64]]) == 225", "assert recursive_list_sum([8, 22, [28, 35], [55, 59]]) == 207", "assert recursive_list_sum([8, 23, [35, 40], [54, 60]]) == 220", "assert recursive_list_sum([6, 20, [32, 42], [45, 57]]) == 202", "assert recursive_list_sum([9, 17, [26, 44], [55, 60]]) == 211", "assert recursive_list_sum([13, 20, [35, 45], [51, 62]]) == 226", "assert recursive_list_sum([7, 20, [35, 37], [49, 60]]) == 208", "assert recursive_list_sum([9, 25, [27, 43], [54, 55]]) == 213", "assert recursive_list_sum([15, 17, [34, 38], [49, 58]]) == 211", "assert recursive_list_sum([5, 21, [26, 44], [52, 56]]) == 204", "assert recursive_list_sum([7, 20, [29, 43], [46, 61]]) == 206", "assert recursive_list_sum([14, 25, [34, 42], [48, 57]]) == 220", "assert recursive_list_sum([11, 25, [32, 40], [49, 61]]) == 218", "assert recursive_list_sum([6, 16, [34, 36], [49, 55]]) == 196", "assert recursive_list_sum([11, 23, [26, 35], [49, 57]]) == 201", "assert recursive_list_sum([9, 19, [25, 42], [49, 60]]) == 204", "assert recursive_list_sum([13, 19, [29, 41], [55, 57]]) == 214", "assert recursive_list_sum([13, 18, [32, 37], [49, 55]]) == 204", "assert recursive_list_sum([10, 23, [28, 36], [46, 57]]) == 200", "assert recursive_list_sum([12, 16, [32, 43], [53, 58]]) == 214", "assert recursive_list_sum([11, 16, [29, 45], [51, 57]]) == 209", "assert recursive_list_sum([13, 15, [27, 44], [54, 57]]) == 210", "assert recursive_list_sum([15, 23, [28, 38], [52, 62]]) == 218", "assert recursive_list_sum([14, 16, [34, 42], [53, 62]]) == 221", "assert recursive_list_sum([7, 19, [25, 43], [48, 65]]) == 207", "assert recursive_list_sum([9, 25, [35, 37], [51, 58]]) == 215", "assert recursive_list_sum([8, 22, [33, 41], [51, 63]]) == 218", "assert recursive_list_sum([6, 21, [30, 36], [45, 61]]) == 199", "assert recursive_list_sum([12, 24, [27, 42], [46, 56]]) == 207", "assert recursive_list_sum([12, 21, [33, 41], [48, 63]]) == 218", "assert recursive_list_sum([12, 25, [32, 41], [45, 61]]) == 216", "assert recursive_list_sum([13, 20, [35, 35], [49, 61]]) == 213"], "entry_point": "recursive_list_sum", "repair_prompt": ["Write a function recursive_list_sum to flatten a list and sum all of its elements. Consider edge cases. For example, consider empty lists or lists with non-integer values.\nrecursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n"], "completions": ["from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    total = 0\n    for element in lst:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):\n            total += element\n    return total\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        elif isinstance(item, int):\n            total += item\n        else:\n            raise ValueError(f'Unsupported element type: {type(item)}')\n    return total\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Recursively sums all integers in a nested list, ignoring non-integer elements.\n\n    Args:\n        lst (list): The input list which may contain nested lists and integers.\n\n    Returns:\n        int: The sum of all integers in the list, ignoring non-integer elements.\n    \"\"\"\n    total_sum = 0\n\n    for element in lst:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, int):\n            total_sum += element\n        # else: ignore non-integer elements\n\n    return total_sum\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Recursively sums all integers in a nested list.\n\n    Args:\n        lst (list): The input list which may contain nested lists and integers.\n\n    Returns:\n        int: The sum of all integers in the list, ignoring non-integer elements.\n    \"\"\"\n    def is_integer(element):\n        \"\"\"\n        Helper function to check if an element is an integer.\n\n        Args:\n            element: The element to check.\n\n        Returns:\n            bool: True if the element is an integer, False otherwise.\n        \"\"\"\n        return isinstance(element, int)\n\n    def sum_recursive(sublist):\n        \"\"\"\n        Recursive function to sum integers in a nested list.\n\n        Args:\n            sublist (list): The sublist to sum.\n\n        Returns:\n            int: The sum of integers in the sublist.\n        \"\"\"\n        total_sum = 0\n        for element in sublist:\n            if is_integer(element):\n                total_sum += element\n            elif isinstance(element, list):\n                total_sum += sum_recursive(element)\n        return total_sum\n\n    return sum_recursive(lst)\n\n# Example usage:\n# print(recursive_list_sum([1, 2, [3, 4], [5, 6]]))  # Output: 21\n", "from typing import List\n## main.py\n\nimport typing\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Recursively sums all integers in a nested list.\n\n    Args:\n        lst (list): A list that may contain nested lists and integers.\n\n    Returns:\n        int: The sum of all integers in the list and its nested lists.\n    \"\"\"\n    total_sum = 0\n\n    def sum_helper(sublist):\n        nonlocal total_sum\n        for element in sublist:\n            if isinstance(element, list):\n                sum_helper(element)\n            elif isinstance(element, int):\n                total_sum += element\n            else:\n                # Optionally handle non-integer values, e.g., ignore them\n                pass\n\n    sum_helper(lst)\n    return total_sum\n\n# Example usage:\n# print(recursive_list_sum([1, 2, [3, 4], [5, 6]]))  # Output: 21\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Recursively calculates the sum of all elements in the list, including those in nested lists.\n\n    Args:\n        lst (list): A list containing integers and nested lists.\n\n    Returns:\n        int: The sum of all elements in the list and its nested lists.\n    \"\"\"\n    total_sum = 0\n\n    for element in lst:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, int):\n            total_sum += element\n        # Non-integer values are ignored as per the requirement\n\n    return total_sum\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Recursively sums all elements in a list, including those within nested lists.\n    \n    Args:\n        lst (list): The input list which may contain nested lists.\n    \n    Returns:\n        int: The sum of all elements in the list and its nested lists.\n    \"\"\"\n    total_sum = 0\n\n    def sum_recursive(sublist):\n        nonlocal total_sum\n        for element in sublist:\n            if isinstance(element, list):\n                sum_recursive(element)\n            else:\n                if isinstance(element, (int, float)):\n                    total_sum += element\n                else:\n                    # Optionally handle mixed types, e.g., ignore or raise an error\n                    pass\n\n    sum_recursive(lst)\n    return total_sum\n\n# Example usage:\n# print(recursive_list_sum([1, 2, [3, 4], [5, 6]]))  # Output: 21\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Recursively sums all elements in a nested list.\n\n    Args:\n        lst (list): The input list which may contain nested lists.\n\n    Returns:\n        int: The sum of all elements in the list and its nested lists.\n    \"\"\"\n    total_sum = 0\n    for element in lst:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        else:\n            total_sum += element\n    return total_sum\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Recursively sums all integers in a nested list.\n\n    Args:\n        lst (list): A list containing integers and/or nested lists of integers.\n\n    Returns:\n        int: The sum of all integers in the list and its nested lists.\n    \"\"\"\n    total_sum = 0\n    for element in lst:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, int):\n            total_sum += element\n    return total_sum\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Recursively sums all integers in a nested list structure.\n    \n    Args:\n        lst (list): A list containing integers and/or nested lists.\n        \n    Returns:\n        int: The sum of all integers in the list and its nested lists.\n    \"\"\"\n    total = 0\n    for element in lst:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        elif isinstance(element, int):\n            total += element\n        else:\n            raise ValueError(f\"Unsupported element type: {type(element)}. Only integers and lists are supported.\")\n    return total\n\n# Example usage:\n# print(recursive_list_sum([1, 2, [3, 4], [5, 6]]))  # Output: 21\n"], "plans": ["requirement analysis:\nThe function should handle nested lists, ensuring all elements are summed regardless of their depth. It should also handle cases where lists contain non-integer values by ignoring them. Edge cases such as empty lists should also be considered to ensure the function does not break.\nrequirement pool:\n- The main code should correctly sum all elements in a nested list structure.\n- The function should ignore non-integer values in the list.\n- Ensure the function can handle empty lists without errors.\n- Implement a clear and user-friendly interface for the function.\nTo implement the recursive_list_sum function, we will use a recursive approach to handle nested lists. The function will iterate through each element in the list, checking if it is an integer or another list. If it is an integer, it will be added to the sum. If it is a list, the function will call itself recursively with this sublist. This approach ensures that all elements, regardless of their depth in the nested structure, are summed.\n", "requirement analysis:\nThe function needs to be able to handle lists with varying levels of nesting and should gracefully handle non-integer values. It should be efficient and easy to understand. The function should be tested for edge cases such as empty lists and lists with non-integer values.\nrequirement pool:\n- Implement the recursive_list_sum function to handle nested lists and sum all elements.\n- Ensure the function can handle non-integer values without errors.\n- Optimize the function for performance and readability.\n- Test the function for edge cases such as empty lists and lists with non-integer values.\n- Document the function with clear examples and usage instructions.\nTo implement the recursive_list_sum function, we will use a recursive approach to handle nested lists. We will ensure that the function can handle various data types gracefully by checking if the elements are integers before summing them. This approach will ensure that the function is efficient and easy to understand.\n", "requirement analysis:\nThe function 'recursive_list_sum' needs to handle nested lists, ensuring all elements are summed. It should also handle cases where lists contain non-integer values, returning an error or ignoring them as appropriate.\nrequirement pool:\n- The main code should be able to handle nested lists and sum all elements.\n- Implement error handling for non-integer values in the list.\n- Ensure the function is efficient and can handle large lists.\nTo implement the 'recursive_list_sum' function, we will use a recursive approach to handle nested lists. This approach will allow us to traverse through all levels of the list, summing up all integer elements. We will also implement error handling to manage cases where non-integer values are encountered in the list. Efficiency will be maintained by ensuring that the function can handle large lists without significant performance degradation.\n", "requirement analysis:\nThe function 'recursive_list_sum' needs to handle nested lists, ensuring all elements are summed. It should also handle cases where lists contain non-integer values, returning an error or ignoring them as appropriate.\nrequirement pool:\n- The main code should be able to handle nested lists and sum all elements.\n- Implement error handling for non-integer values in the list.\n- Ensure the function is efficient and can handle large lists.\nTo implement the 'recursive_list_sum' function, we will use a recursive approach to handle nested lists. This approach will allow us to traverse through all levels of the list, summing up all integer elements. We will also implement error handling to manage cases where non-integer values are encountered in the list. Efficiency will be maintained by ensuring the function can handle large lists without significant performance degradation.\n", "requirement analysis:\nThe function 'recursive_list_sum' needs to handle nested lists, ensuring all elements are summed regardless of their depth. It should also handle cases where lists contain non-integer values, returning an error or ignoring them as appropriate.\nrequirement pool:\n- The main code should be able to handle nested lists and sum all elements.\n- The function should return an error or ignore non-integer values.\n- Implement a user-friendly interface for choosing difficulty levels.\n- Ensure the game interface is responsive and visually appealing.\nTo implement the 'recursive_list_sum' function, we will use a recursive approach to handle nested lists. This will allow us to sum all elements regardless of their depth. We will also handle non-integer values by ignoring them or returning an error, depending on the specific requirements.\n", "requirement analysis:\nThe function should handle nested lists, ensuring all elements are summed regardless of their depth. It should also handle cases where the list contains non-integer values by ignoring them. Edge cases such as empty lists should also be considered to ensure the function does not break.\nrequirement pool:\n- The main code should correctly sum all elements in a nested list structure.\n- The function should ignore non-integer values in the list.\n- Ensure the function can handle empty lists gracefully.\n- Implement a clear and user-friendly interface for the function.\nTo implement the recursive_list_sum function, we will use a recursive approach to handle nested lists. The function will iterate through each element in the list, checking if it is an integer or a list. If it is a list, the function will call itself recursively. If it is an integer, the function will add it to the sum. Non-integer values will be ignored to ensure the function handles edge cases effectively.\n", "requirement analysis:\nThe function 'recursive_list_sum' needs to handle nested lists, ensuring all elements are summed correctly. It should also handle cases where lists contain non-integer values, returning an error or ignoring them as appropriate.\nrequirement pool:\n- The main code should correctly sum all elements in a nested list structure.\n- The function should handle non-integer elements gracefully, either by ignoring them or raising an error.\n- The user interface should be responsive and provide clear feedback on input errors.\nTo implement the 'recursive_list_sum' function, we will use a recursive approach to handle nested lists. This approach will ensure that all elements, including those within nested lists, are summed correctly. We will also handle non-integer elements by ignoring them or raising an error based on the requirement analysis.\n", "requirement analysis:\nThe function needs to be able to handle nested lists and sum all elements, including those within nested lists. It should also handle edge cases such as empty lists and non-integer values gracefully. The function should be efficient and easy to understand.\nrequirement pool:\n- Implement a recursive function to flatten and sum lists.\n- Ensure the function can handle non-integer values.\n- Add error handling for empty lists.\n- Optimize the function for performance.\n- Improve documentation and comments for clarity.\nTo implement the recursive_list_sum function, we will use a recursive approach to flatten the nested lists and sum all the elements. We will handle edge cases such as empty lists and non-integer values by checking the type of each element. For performance optimization, we will use Python's built-in sum function for flat lists and recursively apply the same logic for nested lists.\n", "requirement analysis:\nThe function should handle nested lists, ensuring all elements are summed regardless of their depth. It should also handle cases where lists contain non-integer values by ignoring them. Edge cases such as empty lists should also be considered to ensure the function does not break.\nrequirement pool:\n- The main code should correctly sum all elements in a nested list structure.\n- The function should ignore non-integer values in the list.\n- Ensure the function can handle empty lists gracefully.\n- Implement a clear and user-friendly interface for input and output.\nTo implement the recursive_list_sum function, we will use a recursive approach to handle nested lists. The function will iterate through each element in the list, checking if it is an integer or another list. If it is an integer, it will be added to the sum. If it is a list, the function will call itself recursively to sum the elements within that list. This approach ensures that all elements, regardless of their depth in the nested structure, are summed.\n", "requirement analysis:\nThe function should handle nested lists, ensuring all elements are summed regardless of their depth. It should also handle cases where lists contain non-integer values by ignoring them. Edge cases such as empty lists should also be considered to ensure the function does not break.\nrequirement pool:\n- The main code should correctly sum all elements in a nested list structure.\n- The function should ignore non-integer values in the list.\n- Implement error handling for empty lists to prevent function from breaking.\n- Ensure the function is efficient and can handle large lists without performance issues.\nTo implement the `recursive_list_sum` function, we will use a recursive approach to handle nested lists. The function will iterate through each element in the list, checking if it is an integer or another list. If it's an integer, it will be added to the sum. If it's a list, the function will call itself recursively with this sublist. This approach ensures that all elements, regardless of their depth in the nested structure, are summed. Additionally, we will implement error handling to manage cases where lists contain non-integer values or are empty.\n"], "test": ["def check(recursive_list_sum):\n\tassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21", "def check(recursive_list_sum):\n\tassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106", "def check(recursive_list_sum):\n\tassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 1, [7, 2], [1, 1]]) == 15", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 7, [5, 7], [7, 2]]) == 33", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 4, [1, 5], [9, 6]]) == 29", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 5, [5, 8], [2, 1]]) == 22", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 3, [3, 8], [2, 4]]) == 21", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 2, [8, 3], [3, 2]]) == 22", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 5, [8, 1], [7, 11]]) == 33", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 6, [2, 8], [7, 5]]) == 33", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 4, [3, 3], [10, 2]]) == 26", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 3, [2, 2], [10, 1]]) == 19", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 1, [7, 9], [2, 1]]) == 23", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 7, [4, 8], [7, 10]]) == 42", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 7, [5, 7], [1, 5]]) == 27", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 3, [1, 9], [1, 11]]) == 28", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 5, [5, 8], [10, 7]]) == 37", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 2, [3, 6], [7, 6]]) == 27", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 7, [1, 5], [4, 4]]) == 25", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 4, [7, 4], [4, 7]]) == 31", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 2, [5, 8], [4, 1]]) == 21", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 1, [4, 8], [8, 8]]) == 30", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 2, [3, 9], [8, 11]]) == 37", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 5, [1, 7], [8, 4]]) == 31", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 7, [2, 7], [8, 4]]) == 33", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 3, [2, 6], [9, 4]]) == 25", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 7, [1, 8], [9, 11]]) == 42", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 1, [1, 9], [10, 6]]) == 28", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 4, [8, 8], [8, 6]]) == 35", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 4, [2, 6], [6, 2]]) == 26", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 5, [4, 8], [5, 4]]) == 27", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 6, [1, 1], [4, 5]]) == 20", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 4, [3, 9], [10, 9]]) == 40", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 6, [8, 9], [5, 3]]) == 37", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 2, [7, 1], [5, 9]]) == 26", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 8, [13, 14], [23, 46]]) == 106", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 13, [16, 14], [14, 36]]) == 101", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 14, [19, 15], [16, 40]]) == 106", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 12, [13, 18], [21, 41]]) == 112", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 8, [14, 12], [23, 43]]) == 107", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 12, [18, 12], [20, 36]]) == 110", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 9, [14, 12], [24, 39]]) == 110", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 11, [17, 12], [15, 41]]) == 103", "def check(recursive_list_sum):\n\tassert recursive_list_sum([10, 12, [19, 15], [19, 46]]) == 121", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 12, [14, 19], [15, 38]]) == 110", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 8, [13, 15], [18, 38]]) == 101", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 11, [15, 13], [17, 40]]) == 104", "def check(recursive_list_sum):\n\tassert recursive_list_sum([10, 15, [19, 10], [17, 42]]) == 113", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 12, [11, 12], [21, 46]]) == 108", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 10, [13, 15], [24, 45]]) == 115", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 13, [12, 19], [15, 43]]) == 104", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 8, [19, 11], [15, 44]]) == 104", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 13, [19, 18], [16, 45]]) == 116", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 6, [17, 16], [16, 39]]) == 105", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 13, [20, 14], [21, 46]]) == 125", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 9, [16, 15], [20, 45]]) == 111", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 8, [11, 16], [23, 45]]) == 108", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 11, [11, 10], [16, 41]]) == 98", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 5, [18, 10], [18, 40]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 6, [12, 13], [21, 46]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 10, [15, 9], [18, 38]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 13, [20, 9], [22, 39]]) == 108", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 7, [16, 15], [21, 39]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 9, [15, 19], [19, 45]]) == 116", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 13, [18, 19], [17, 39]]) == 113", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 15, [19, 18], [21, 37]]) == 116", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 5, [13, 19], [15, 38]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 10, [10, 9], [17, 40]]) == 98", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 15, [31, 43], [47, 56]]) == 203", "def check(recursive_list_sum):\n\tassert recursive_list_sum([15, 19, [32, 41], [54, 64]]) == 225", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 22, [28, 35], [55, 59]]) == 207", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 23, [35, 40], [54, 60]]) == 220", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 20, [32, 42], [45, 57]]) == 202", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 17, [26, 44], [55, 60]]) == 211", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 20, [35, 45], [51, 62]]) == 226", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 20, [35, 37], [49, 60]]) == 208", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 25, [27, 43], [54, 55]]) == 213", "def check(recursive_list_sum):\n\tassert recursive_list_sum([15, 17, [34, 38], [49, 58]]) == 211", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 21, [26, 44], [52, 56]]) == 204", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 20, [29, 43], [46, 61]]) == 206", "def check(recursive_list_sum):\n\tassert recursive_list_sum([14, 25, [34, 42], [48, 57]]) == 220", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 25, [32, 40], [49, 61]]) == 218", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 16, [34, 36], [49, 55]]) == 196", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 23, [26, 35], [49, 57]]) == 201", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 19, [25, 42], [49, 60]]) == 204", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 19, [29, 41], [55, 57]]) == 214", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 18, [32, 37], [49, 55]]) == 204", "def check(recursive_list_sum):\n\tassert recursive_list_sum([10, 23, [28, 36], [46, 57]]) == 200", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 16, [32, 43], [53, 58]]) == 214", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 16, [29, 45], [51, 57]]) == 209", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 15, [27, 44], [54, 57]]) == 210", "def check(recursive_list_sum):\n\tassert recursive_list_sum([15, 23, [28, 38], [52, 62]]) == 218", "def check(recursive_list_sum):\n\tassert recursive_list_sum([14, 16, [34, 42], [53, 62]]) == 221", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 19, [25, 43], [48, 65]]) == 207", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 25, [35, 37], [51, 58]]) == 215", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 22, [33, 41], [51, 63]]) == 218", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 21, [30, 36], [45, 61]]) == 199", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 24, [27, 42], [46, 56]]) == 207", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 21, [33, 41], [48, 63]]) == 218", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 25, [32, 41], [45, 61]]) == 216", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 20, [35, 35], [49, 61]]) == 213"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Recursively sums all integers in a nested list structure.\n    \n    Args:\n        lst (list): A list containing integers and/or nested lists.\n        \n    Returns:\n        int: The sum of all integers in the list and its nested lists.\n    \"\"\"\n    total = 0\n    for element in lst:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        elif isinstance(element, int):\n            total += element\n        else:\n            raise ValueError(f\"Unsupported element type: {type(element)}. Only integers and lists are supported.\")\n    return total\n\n# Example usage:\n# print(recursive_list_sum([1, 2, [3, 4], [5, 6]]))  # Output: 21\n", "passed": true, "pass": true, "pass_num": 10, "round": 742, "mutate_method": "expand_one2two", "parent_index": 303}
