{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 68, "prompt": "Create a python function to determine if the provided array is monotonic.", "code": "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ", "test_imports": [], "test_list": ["assert is_Monotonic([6, 5, 4, 4]) == True", "assert is_Monotonic([1, 2, 2, 3]) == True", "assert is_Monotonic([1, 3, 2]) == False", "assert is_Monotonic([3, 10, 7, 7]) == False", "assert is_Monotonic([9, 4, 4, 2]) == True", "assert is_Monotonic([4, 2, 8, 8]) == False", "assert is_Monotonic([11, 1, 1, 3]) == False", "assert is_Monotonic([2, 5, 4, 9]) == False", "assert is_Monotonic([5, 1, 8, 7]) == False", "assert is_Monotonic([5, 3, 7, 7]) == False", "assert is_Monotonic([6, 10, 9, 3]) == False", "assert is_Monotonic([6, 6, 1, 8]) == False", "assert is_Monotonic([6, 4, 3, 6]) == False", "assert is_Monotonic([7, 5, 4, 2]) == True", "assert is_Monotonic([7, 8, 5, 1]) == False", "assert is_Monotonic([8, 1, 7, 6]) == False", "assert is_Monotonic([8, 5, 6, 2]) == False", "assert is_Monotonic([5, 6, 6, 6]) == True", "assert is_Monotonic([11, 2, 3, 8]) == False", "assert is_Monotonic([9, 4, 7, 6]) == False", "assert is_Monotonic([3, 10, 9, 9]) == False", "assert is_Monotonic([7, 2, 2, 1]) == True", "assert is_Monotonic([11, 8, 3, 2]) == True", "assert is_Monotonic([10, 10, 5, 6]) == False", "assert is_Monotonic([6, 2, 8, 2]) == False", "assert is_Monotonic([1, 5, 5, 4]) == False", "assert is_Monotonic([10, 3, 4, 8]) == False", "assert is_Monotonic([8, 1, 6, 9]) == False", "assert is_Monotonic([10, 7, 8, 8]) == False", "assert is_Monotonic([6, 8, 7, 9]) == False", "assert is_Monotonic([7, 7, 2, 1]) == True", "assert is_Monotonic([5, 1, 5, 8]) == False", "assert is_Monotonic([3, 10, 4, 5]) == False", "assert is_Monotonic([3, 2, 2, 8]) == False", "assert is_Monotonic([1, 10, 4, 8]) == False", "assert is_Monotonic([5, 7, 3, 2]) == False", "assert is_Monotonic([6, 3, 6, 5]) == False", "assert is_Monotonic([6, 3, 4, 1]) == False", "assert is_Monotonic([6, 3, 2, 7]) == False", "assert is_Monotonic([2, 2, 6, 7]) == True", "assert is_Monotonic([1, 2, 3, 4]) == True", "assert is_Monotonic([2, 1, 1, 5]) == False", "assert is_Monotonic([3, 6, 1, 4]) == False", "assert is_Monotonic([5, 1, 5, 6]) == False", "assert is_Monotonic([2, 2, 6, 1]) == False", "assert is_Monotonic([2, 2, 6, 2]) == False", "assert is_Monotonic([3, 5, 4, 7]) == False", "assert is_Monotonic([4, 7, 1, 1]) == False", "assert is_Monotonic([4, 6, 5, 6]) == False", "assert is_Monotonic([6, 5, 3, 6]) == False", "assert is_Monotonic([6, 6, 2, 2]) == True", "assert is_Monotonic([1, 5, 1, 4]) == False", "assert is_Monotonic([4, 1, 3, 8]) == False", "assert is_Monotonic([4, 6, 7, 7]) == True", "assert is_Monotonic([3, 4, 6, 1]) == False", "assert is_Monotonic([3, 7, 7, 6]) == False", "assert is_Monotonic([4, 1, 1, 2]) == False", "assert is_Monotonic([4, 5, 1, 4]) == False", "assert is_Monotonic([3, 7, 6, 7]) == False", "assert is_Monotonic([5, 4, 3, 4]) == False", "assert is_Monotonic([6, 6, 7, 1]) == False", "assert is_Monotonic([2, 4, 7, 7]) == True", "assert is_Monotonic([6, 6, 3, 3]) == True", "assert is_Monotonic([3, 4, 5, 2]) == False", "assert is_Monotonic([6, 1, 6, 8]) == False", "assert is_Monotonic([3, 1, 2, 3]) == False", "assert is_Monotonic([3, 6, 7, 8]) == True", "assert is_Monotonic([1, 4, 3, 2]) == False", "assert is_Monotonic([5, 6, 6, 7]) == True", "assert is_Monotonic([4, 1, 2]) == False", "assert is_Monotonic([2, 2, 4]) == True", "assert is_Monotonic([1, 4, 4]) == True", "assert is_Monotonic([3, 2, 1]) == True", "assert is_Monotonic([3, 2, 3]) == False", "assert is_Monotonic([2, 1, 1]) == True", "assert is_Monotonic([3, 2, 4]) == False", "assert is_Monotonic([1, 5, 2]) == False", "assert is_Monotonic([3, 8, 6]) == False", "assert is_Monotonic([2, 8, 7]) == False", "assert is_Monotonic([6, 7, 4]) == False", "assert is_Monotonic([6, 6, 5]) == True", "assert is_Monotonic([1, 1, 5]) == True", "assert is_Monotonic([2, 5, 5]) == True", "assert is_Monotonic([3, 3, 6]) == True", "assert is_Monotonic([6, 5, 1]) == True", "assert is_Monotonic([6, 3, 4]) == False", "assert is_Monotonic([5, 2, 3]) == False", "assert is_Monotonic([5, 4, 3]) == True", "assert is_Monotonic([4, 7, 2]) == False", "assert is_Monotonic([6, 5, 4]) == True", "assert is_Monotonic([1, 4, 7]) == True", "assert is_Monotonic([3, 7, 7]) == True", "assert is_Monotonic([4, 1, 1]) == True", "assert is_Monotonic([2, 2, 3]) == True", "assert is_Monotonic([2, 2, 6]) == True", "assert is_Monotonic([5, 5, 1]) == True", "assert is_Monotonic([2, 3, 1]) == False", "assert is_Monotonic([4, 7, 5]) == False", "assert is_Monotonic([2, 1, 5]) == False", "assert is_Monotonic([5, 5, 3]) == True", "assert is_Monotonic([6, 5, 1]) == True", "assert is_Monotonic([2, 5, 3]) == False"], "entry_point": "is_Monotonic", "repair_prompt": ["Create a python function is_Monotonic to determine if the provided array is monotonic.\nis_Monotonic([6, 5, 4, 4]) == True\n"], "completions": ["from typing import List\nfrom typing import List\n\ndef is_Monotonic(nums: List[int]) -> bool:\n    if len(nums) <= 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(nums)):\n        if nums[i] > nums[i - 1]:\n            decreasing = False\n        elif nums[i] < nums[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n", "from typing import List\nfrom typing import List\n\ndef is_Monotonic(nums: List[int]) -> bool:\n    if not nums:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(nums)):\n        if nums[i] > nums[i - 1]:\n            decreasing = False\n        elif nums[i] < nums[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef is_Monotonic(nums: list[int]) -> bool:\n    \"\"\"\n    Determines if the given list of integers is monotonic.\n    \n    A list is monotonic if it is either entirely non-increasing or non-decreasing.\n    \n    Args:\n        nums (list[int]): The list of integers to check.\n        \n    Returns:\n        bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    if not nums:\n        return True  # An empty list is considered monotonic\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(nums)):\n        if nums[i] > nums[i - 1]:\n            decreasing = False\n        elif nums[i] < nums[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef is_Monotonic(nums: list[int]) -> bool:\n    \"\"\"\n    Determines if the given list of integers is monotonic.\n    \n    A list is monotonic if it is either entirely non-increasing or non-decreasing.\n    \n    Args:\n        nums (list[int]): A list of integers.\n        \n    Returns:\n        bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    if not nums:\n        return True  # An empty list is considered monotonic\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(nums)):\n        if nums[i] > nums[i - 1]:\n            decreasing = False\n        elif nums[i] < nums[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef is_Monotonic(nums: list[int]) -> bool:\n    if len(nums) <= 1:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(nums)):\n        if nums[i] < nums[i - 1]:\n            increasing = False\n        if nums[i] > nums[i - 1]:\n            decreasing = False\n    \n    return increasing or decreasing\n", "from typing import List\nfrom typing import List\n\ndef is_Monotonic(nums: List[int]) -> bool:\n    if not nums:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(nums)):\n        if nums[i] > nums[i - 1]:\n            decreasing = False\n        elif nums[i] < nums[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n", "from typing import List\nfrom typing import List\n\ndef is_Monotonic(nums: List[int]) -> bool:\n    if not nums:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(nums)):\n        if nums[i] > nums[i - 1]:\n            decreasing = False\n        elif nums[i] < nums[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef is_Monotonic(nums: list) -> bool:\n    \"\"\"\n    Determines if the given list is monotonic.\n    \n    A list is monotonic if it is either entirely non-increasing or non-decreasing.\n    \n    Args:\n        nums (list): A list of integers.\n        \n    Returns:\n        bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    if len(nums) <= 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(nums)):\n        if nums[i] > nums[i - 1]:\n            decreasing = False\n        elif nums[i] < nums[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n", "from typing import List\nfrom typing import List\n\ndef is_Monotonic(nums: List[int]) -> bool:\n    if len(nums) <= 1:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(nums)):\n        if nums[i] > nums[i - 1]:\n            decreasing = False\n        elif nums[i] < nums[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef is_Monotonic(nums: list) -> bool:\n    \"\"\"\n    Determines if the given list is monotonic.\n\n    A list is monotonic if it is either entirely non-increasing or non-decreasing.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    if len(nums) <= 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(nums)):\n        if nums[i] > nums[i - 1]:\n            decreasing = False\n        elif nums[i] < nums[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that checks if an array is monotonic. Monotonic means the array either always increases or always decreases. This is a straightforward logic check that can be implemented efficiently.\nrequirement pool:\n- The main code should include the is_Monotonic function.\n- The function should handle arrays of different lengths.\n- Implement error handling for non-array inputs.\n- Ensure the function is optimized for performance.\n- Include unit tests for the function.\nTo implement the is_Monotonic function, we will use a straightforward approach that compares each element in the array with the next one to determine if the sequence is either entirely non-increasing or non-decreasing. This can be efficiently achieved using a single pass through the array.\n", "requirement analysis:\nThe requirement is to create a function is_Monotonic that checks if an array is monotonic. Monotonic means the array either always increases or always decreases. This function should be efficient and handle edge cases like empty arrays and arrays with equal elements.\nrequirement pool:\n- The main code should define the is_Monotonic function.\n- The function should return True if the array is monotonic, False otherwise.\n- Handle edge cases such as empty arrays and arrays with all identical elements.\n- Optimize the function for performance to handle large arrays efficiently.\nTo create the is_Monotonic function, we will use a straightforward approach that compares each element in the array to the next one. We will check if the array is either entirely non-increasing or non-decreasing. This approach will be efficient and handle edge cases such as empty arrays and arrays with all identical elements.\n", "requirement analysis:\nThe requirement is to create a function that checks if an array is monotonic. Monotonic means the array either consistently increases or consistently decreases. The function should handle edge cases such as empty arrays and arrays with equal elements.\nrequirement pool:\n- The main code should be efficient and clear.\n- The function should handle edge cases like empty arrays and arrays with all identical elements.\n- The function should be easy to understand and use.\n- The function should be optimized for performance.\nTo create the `is_Monotonic` function efficiently, we will use Python's built-in capabilities and leverage its type system for clarity and simplicity. The function will check if the array is either entirely non-increasing or non-decreasing. We will handle edge cases such as empty arrays and arrays with all identical elements by using simple conditional checks.\n", "requirement analysis:\nThe requirement is to create a function that checks if an array is monotonic. Monotonic means the array either always increases or always decreases. The function should handle edge cases such as empty arrays and arrays with equal elements.\nrequirement pool:\n- The main code should be efficient and clear.\n- The function should handle edge cases like empty arrays and arrays with all identical elements.\n- The function should be easy to understand and use.\n- The function should be optimized for performance.\nTo create the is_Monotonic function, we will use a straightforward approach that compares each element in the array to the next one. If all comparisons result in either non-decreasing or non-increasing order, the array is monotonic. We will handle edge cases such as empty arrays and arrays with all identical elements by adding simple checks for these scenarios.\n", "requirement analysis:\nThe requirement is to create a function that checks if an array is monotonic. Monotonic means the array either always increases or always decreases. This is a straightforward logic check that can be implemented efficiently.\nrequirement pool:\n- Implement the is_Monotonic function\n- Ensure the function handles edge cases like empty arrays or arrays with one element\n- Optimize the function for performance\n- Design a simple and clear user interface\n- Ensure the UI is responsive and works well on different devices\nTo implement the is_Monotonic function, we will use a straightforward approach that compares each element in the array to the next one. If all comparisons result in either non-decreasing or non-increasing order, the array is monotonic. We will handle edge cases such as empty arrays or arrays with a single element by returning True, as these are considered monotonic by definition.\n", "requirement analysis:\nThe requirement is to create a function is_Monotonic that checks if an array is monotonic. Monotonic means the array either always increases or always decreases. This function should be efficient and handle edge cases like empty arrays and arrays with equal elements.\nrequirement pool:\n- The main code should define the is_Monotonic function.\n- The function should return True if the array is monotonic, otherwise False.\n- Handle edge cases such as empty arrays and arrays with all identical elements.\n- Optimize the function for performance to handle large arrays efficiently.\nTo implement the is_Monotonic function, we will use a straightforward approach that compares each element of the array with the next one to determine if the array is monotonic. This involves checking if all adjacent pairs of elements satisfy the condition of either always increasing or always decreasing. We will also handle edge cases such as empty arrays and arrays with all identical elements.\n", "requirement analysis:\nThe requirement is to create a function is_Monotonic that checks if an array is monotonic. Monotonic means the array either always increases or always decreases. This function should be efficient and handle edge cases such as empty arrays and arrays with equal elements.\nrequirement pool:\n- The main code should define the is_Monotonic function.\n- The function should return True if the array is monotonic, otherwise False.\n- Handle edge cases such as empty arrays and arrays with all identical elements.\n- Ensure the function is efficient and concise.\nTo implement the is_Monotonic function, we will use a straightforward approach that compares each element in the array to the next one. If we find a pair of elements where the order is not consistent (one increasing and the other decreasing), we can immediately conclude that the array is not monotonic. We will also handle edge cases such as empty arrays and arrays with all identical elements.\n", "requirement analysis:\nThe requirement is to create a function that checks if an array is monotonic. Monotonic means the array either always increases or always decreases. This is a straightforward logic check that can be implemented efficiently.\nrequirement pool:\n- The main code should include the is_Monotonic function.\n- The function should handle arrays of different lengths.\n- Implement error handling for non-array inputs.\n- Include tests to validate the function's correctness.\n- Optimize the function for performance.\nTo implement the is_Monotonic function, we will use a straightforward approach that compares each element in the array with the next one to determine if the sequence is either entirely non-increasing or non-decreasing. This can be efficiently achieved using a single pass through the array.\n", "requirement analysis:\nThe requirement is to create a function that checks if an array is monotonic. Monotonic means the array either always increases or always decreases. This is a straightforward function that can be implemented in Python.\nrequirement pool:\n- The main code should include the is_Monotonic function.\n- The function should handle arrays of different lengths.\n- The function should be efficient and handle edge cases.\n- The function should be documented and include type hints.\n- The function should be tested with various inputs.\nTo implement the is_Monotonic function, we will use a straightforward approach by comparing each element in the array with the next one. If all comparisons result in either non-decreasing or non-increasing order, the array is monotonic. We will handle edge cases such as arrays with a single element or empty arrays.\n", "requirement analysis:\nThe requirement is to create a function that checks if an array is monotonic. Monotonic means the array either always increases or always decreases. This is a straightforward logic check that can be implemented efficiently.\nrequirement pool:\n- The main code should include the function is_Monotonic\n- The function should handle arrays of different lengths\n- Implement a clear and concise function signature\n- Ensure the function is optimized for performance\n- Include basic error handling for non-array inputs\nTo implement the function is_Monotonic, we will use a straightforward approach that compares each element in the array to the next one. If all comparisons result in either non-decreasing or non-increasing order, the array is monotonic. We will ensure the function is optimized for performance by avoiding unnecessary iterations and checks.\n"], "test": ["def check(is_Monotonic):\n\tassert is_Monotonic([6, 5, 4, 4]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([1, 2, 2, 3]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([1, 3, 2]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 10, 7, 7]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([9, 4, 4, 2]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([4, 2, 8, 8]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([11, 1, 1, 3]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 5, 4, 9]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([5, 1, 8, 7]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([5, 3, 7, 7]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 10, 9, 3]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 6, 1, 8]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 4, 3, 6]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([7, 5, 4, 2]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([7, 8, 5, 1]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([8, 1, 7, 6]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([8, 5, 6, 2]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([5, 6, 6, 6]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([11, 2, 3, 8]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([9, 4, 7, 6]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 10, 9, 9]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([7, 2, 2, 1]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([11, 8, 3, 2]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([10, 10, 5, 6]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 2, 8, 2]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([1, 5, 5, 4]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([10, 3, 4, 8]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([8, 1, 6, 9]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([10, 7, 8, 8]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 8, 7, 9]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([7, 7, 2, 1]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([5, 1, 5, 8]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 10, 4, 5]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 2, 2, 8]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([1, 10, 4, 8]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([5, 7, 3, 2]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 3, 6, 5]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 3, 4, 1]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 3, 2, 7]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 2, 6, 7]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([1, 2, 3, 4]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 1, 1, 5]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 6, 1, 4]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([5, 1, 5, 6]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 2, 6, 1]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 2, 6, 2]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 5, 4, 7]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([4, 7, 1, 1]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([4, 6, 5, 6]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 5, 3, 6]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 6, 2, 2]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([1, 5, 1, 4]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([4, 1, 3, 8]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([4, 6, 7, 7]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 4, 6, 1]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 7, 7, 6]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([4, 1, 1, 2]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([4, 5, 1, 4]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 7, 6, 7]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([5, 4, 3, 4]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 6, 7, 1]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 4, 7, 7]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 6, 3, 3]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 4, 5, 2]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 1, 6, 8]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 1, 2, 3]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 6, 7, 8]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([1, 4, 3, 2]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([5, 6, 6, 7]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([4, 1, 2]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 2, 4]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([1, 4, 4]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 2, 1]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 2, 3]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 1, 1]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 2, 4]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([1, 5, 2]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 8, 6]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 8, 7]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 7, 4]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 6, 5]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([1, 1, 5]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 5, 5]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 3, 6]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 5, 1]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 3, 4]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([5, 2, 3]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([5, 4, 3]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([4, 7, 2]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 5, 4]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([1, 4, 7]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 7, 7]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([4, 1, 1]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 2, 3]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 2, 6]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([5, 5, 1]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 3, 1]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([4, 7, 5]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 1, 5]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([5, 5, 3]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 5, 1]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 5, 3]) == False"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef is_Monotonic(nums: list) -> bool:\n    \"\"\"\n    Determines if the given list is monotonic.\n\n    A list is monotonic if it is either entirely non-increasing or non-decreasing.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    if len(nums) <= 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(nums)):\n        if nums[i] > nums[i - 1]:\n            decreasing = False\n        elif nums[i] < nums[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "passed": true, "pass": true, "pass_num": 10, "round": 750, "mutate_method": "rephrase_one", "parent_index": 22}
