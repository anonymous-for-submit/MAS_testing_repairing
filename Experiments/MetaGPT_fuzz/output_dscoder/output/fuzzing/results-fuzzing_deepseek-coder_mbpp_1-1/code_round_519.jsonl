{"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 460, "prompt": "Create a python function to retrieve the initial element of every sublist.", "code": "def Extract(lst): \n    return [item[0] for item in lst] ", "test_imports": [], "test_list": ["assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]", "assert Extract([[1,2,3],[4, 5]]) == [1,4]", "assert Extract([[9,8,1],[1,2]]) == [9,1]", "assert Extract([[5, 6], [6, 9, 9], [2, 6, 3, 13]]) == [5, 6, 2]", "assert Extract([[2, 5], [8, 6, 7], [2, 9, 12, 11]]) == [2, 8, 2]", "assert Extract([[2, 4], [1, 7, 10], [10, 9, 12, 4]]) == [2, 1, 10]", "assert Extract([[1, 1], [7, 8, 7], [6, 3, 7, 10]]) == [1, 7, 6]", "assert Extract([[5, 4], [8, 9, 5], [9, 2, 7, 8]]) == [5, 8, 9]", "assert Extract([[5, 2], [8, 2, 6], [7, 10, 3, 4]]) == [5, 8, 7]", "assert Extract([[6, 2], [8, 9, 1], [3, 4, 10, 13]]) == [6, 8, 3]", "assert Extract([[5, 4], [4, 8, 2], [2, 6, 6, 4]]) == [5, 4, 2]", "assert Extract([[6, 2], [4, 9, 9], [11, 3, 3, 4]]) == [6, 4, 11]", "assert Extract([[2, 2], [1, 3, 8], [10, 4, 4, 12]]) == [2, 1, 10]", "assert Extract([[5, 3], [4, 3, 9], [8, 3, 9, 8]]) == [5, 4, 8]", "assert Extract([[6, 3], [4, 8, 2], [6, 12, 9, 10]]) == [6, 4, 6]", "assert Extract([[6, 4], [8, 4, 3], [10, 8, 3, 13]]) == [6, 8, 10]", "assert Extract([[2, 3], [1, 7, 9], [2, 9, 3, 6]]) == [2, 1, 2]", "assert Extract([[1, 6], [2, 5, 4], [6, 12, 5, 10]]) == [1, 2, 6]", "assert Extract([[5, 7], [5, 8, 9], [10, 11, 11, 12]]) == [5, 5, 10]", "assert Extract([[6, 6], [4, 9, 9], [3, 8, 10, 4]]) == [6, 4, 3]", "assert Extract([[1, 5], [8, 9, 9], [9, 5, 10, 4]]) == [1, 8, 9]", "assert Extract([[6, 4], [2, 9, 3], [8, 10, 13, 12]]) == [6, 2, 8]", "assert Extract([[4, 7], [6, 2, 9], [4, 12, 10, 14]]) == [4, 6, 4]", "assert Extract([[3, 5], [5, 5, 3], [7, 8, 4, 14]]) == [3, 5, 7]", "assert Extract([[3, 6], [5, 6, 5], [11, 7, 3, 9]]) == [3, 5, 11]", "assert Extract([[4, 2], [7, 4, 8], [4, 10, 12, 9]]) == [4, 7, 4]", "assert Extract([[6, 1], [1, 3, 1], [6, 7, 9, 11]]) == [6, 1, 6]", "assert Extract([[3, 7], [5, 4, 6], [2, 3, 12, 6]]) == [3, 5, 2]", "assert Extract([[1, 4], [3, 2, 6], [6, 6, 10, 12]]) == [1, 3, 6]", "assert Extract([[4, 3], [3, 9, 10], [6, 4, 3, 12]]) == [4, 3, 6]", "assert Extract([[3, 2], [4, 9, 3], [6, 12, 6, 6]]) == [3, 4, 6]", "assert Extract([[4, 1], [7, 1, 7], [10, 6, 6, 14]]) == [4, 7, 10]", "assert Extract([[4, 1], [1, 2, 5], [4, 12, 7, 4]]) == [4, 1, 4]", "assert Extract([[3, 1], [6, 3, 7], [3, 12, 11, 9]]) == [3, 6, 3]", "assert Extract([[3, 6], [5, 1, 7], [2, 8, 3, 13]]) == [3, 5, 2]", "assert Extract([[2, 6], [6, 9, 10], [4, 5, 13, 5]]) == [2, 6, 4]", "assert Extract([[6, 1, 1], [3, 4]]) == [6, 3]", "assert Extract([[2, 1, 6], [8, 1]]) == [2, 8]", "assert Extract([[1, 7, 4], [5, 7]]) == [1, 5]", "assert Extract([[1, 7, 8], [7, 6]]) == [1, 7]", "assert Extract([[1, 6, 6], [9, 3]]) == [1, 9]", "assert Extract([[2, 5, 3], [1, 6]]) == [2, 1]", "assert Extract([[5, 1, 4], [1, 9]]) == [5, 1]", "assert Extract([[5, 3, 2], [1, 7]]) == [5, 1]", "assert Extract([[3, 1, 7], [3, 1]]) == [3, 3]", "assert Extract([[5, 6, 3], [7, 9]]) == [5, 7]", "assert Extract([[2, 1, 4], [9, 8]]) == [2, 9]", "assert Extract([[1, 5, 7], [1, 7]]) == [1, 1]", "assert Extract([[5, 3, 3], [9, 1]]) == [5, 9]", "assert Extract([[5, 3, 5], [3, 2]]) == [5, 3]", "assert Extract([[2, 3, 7], [4, 8]]) == [2, 4]", "assert Extract([[3, 5, 1], [5, 3]]) == [3, 5]", "assert Extract([[5, 7, 6], [8, 4]]) == [5, 8]", "assert Extract([[6, 1, 1], [6, 3]]) == [6, 6]", "assert Extract([[1, 7, 8], [6, 6]]) == [1, 6]", "assert Extract([[1, 2, 2], [6, 7]]) == [1, 6]", "assert Extract([[1, 2, 2], [6, 3]]) == [1, 6]", "assert Extract([[1, 3, 3], [9, 9]]) == [1, 9]", "assert Extract([[6, 7, 8], [7, 8]]) == [6, 7]", "assert Extract([[2, 5, 1], [2, 7]]) == [2, 2]", "assert Extract([[6, 3, 3], [1, 7]]) == [6, 1]", "assert Extract([[4, 3, 8], [8, 6]]) == [4, 8]", "assert Extract([[5, 4, 7], [1, 1]]) == [5, 1]", "assert Extract([[5, 4, 1], [3, 3]]) == [5, 3]", "assert Extract([[1, 2, 7], [9, 6]]) == [1, 9]", "assert Extract([[2, 1, 7], [8, 6]]) == [2, 8]", "assert Extract([[4, 2, 1], [5, 9]]) == [4, 5]", "assert Extract([[6, 5, 1], [6, 7]]) == [6, 6]", "assert Extract([[5, 4, 7], [9, 7]]) == [5, 9]", "assert Extract([[4, 12, 4], [5, 6]]) == [4, 5]", "assert Extract([[11, 7, 2], [5, 2]]) == [11, 5]", "assert Extract([[4, 11, 2], [4, 7]]) == [4, 4]", "assert Extract([[8, 4, 2], [5, 1]]) == [8, 5]", "assert Extract([[6, 7, 6], [6, 3]]) == [6, 6]", "assert Extract([[12, 6, 6], [4, 1]]) == [12, 4]", "assert Extract([[11, 11, 4], [2, 5]]) == [11, 2]", "assert Extract([[6, 10, 2], [4, 3]]) == [6, 4]", "assert Extract([[7, 10, 3], [1, 3]]) == [7, 1]", "assert Extract([[13, 5, 4], [3, 2]]) == [13, 3]", "assert Extract([[14, 13, 3], [5, 4]]) == [14, 5]", "assert Extract([[10, 12, 6], [6, 3]]) == [10, 6]", "assert Extract([[5, 8, 4], [2, 7]]) == [5, 2]", "assert Extract([[8, 13, 2], [6, 6]]) == [8, 6]", "assert Extract([[5, 8, 1], [3, 6]]) == [5, 3]", "assert Extract([[8, 7, 4], [4, 4]]) == [8, 4]", "assert Extract([[5, 4, 3], [2, 3]]) == [5, 2]", "assert Extract([[9, 9, 6], [1, 7]]) == [9, 1]", "assert Extract([[8, 5, 6], [5, 4]]) == [8, 5]", "assert Extract([[9, 9, 1], [5, 4]]) == [9, 5]", "assert Extract([[8, 7, 2], [4, 6]]) == [8, 4]", "assert Extract([[8, 6, 6], [5, 2]]) == [8, 5]", "assert Extract([[11, 5, 5], [3, 6]]) == [11, 3]", "assert Extract([[9, 10, 3], [5, 1]]) == [9, 5]", "assert Extract([[6, 12, 2], [1, 2]]) == [6, 1]", "assert Extract([[12, 11, 6], [5, 7]]) == [12, 5]", "assert Extract([[7, 12, 6], [4, 7]]) == [7, 4]", "assert Extract([[4, 5, 3], [5, 6]]) == [4, 5]", "assert Extract([[12, 10, 1], [6, 5]]) == [12, 6]", "assert Extract([[10, 3, 1], [3, 6]]) == [10, 3]", "assert Extract([[5, 5, 1], [4, 3]]) == [5, 4]", "assert Extract([[8, 13, 1], [5, 4]]) == [8, 5]", "assert Extract([[9, 3, 5], [3, 1]]) == [9, 3]"], "entry_point": "Extract", "repair_prompt": ["Create a python function Extract to retrieve the initial element of every sublist.\nExtract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n"], "completions": ["from typing import List\nfrom typing import List, Any\n\ndef Extract(lists: List[List[Any]]) -> List[Any]:\n    \"\"\"\n    Extracts the first element from each sublist within a list.\n\n    Args:\n        lists (List[List[Any]]): A list of lists containing any type of elements.\n\n    Returns:\n        List[Any]: A list containing the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in lists if len(sublist) > 0]\n", "from typing import List\nfrom typing import List, Any\n\ndef Extract(sublists: List[List[Any]]) -> List[Any]:\n    \"\"\"\n    Extracts the first element from each sublist in the given list of sublists.\n\n    Args:\n        sublists (List[List[Any]]): A list of sublists containing any type of elements.\n\n    Returns:\n        List[Any]: A list containing the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in sublists]\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef Extract(list_of_lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Extracts the first element of each sublist from a given list of lists.\n\n    Args:\n        list_of_lists (List[List[int]]): A list of lists containing integers.\n\n    Returns:\n        List[int]: A list containing the first element of each sublist.\n    \"\"\"\n    result = []\n    for sublist in list_of_lists:\n        if sublist:  # Check if the sublist is not empty\n            result.append(sublist[0])\n    return result\n", "from typing import List\nfrom typing import List\n\ndef Extract(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Extracts the first element of each sublist from a given list of lists.\n\n    Args:\n        lists (List[List[int]]): A list of lists containing integers.\n\n    Returns:\n        List[int]: A list containing the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in lists if sublist]\n", "from typing import List\nfrom typing import List, Any\n\ndef Extract(lists: List[List[Any]]) -> List[Any]:\n    \"\"\"\n    Extracts the first element from each sublist within a list.\n\n    Args:\n        lists (List[List[Any]]): A list of sublists containing any type of elements.\n\n    Returns:\n        List[Any]: A list containing the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in lists if len(sublist) > 0]\n", "from typing import List\nfrom typing import List\n\ndef Extract(list_of_lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Extracts the first element of each sublist from a given list of lists.\n\n    Args:\n        list_of_lists (List[List[int]]): A list of lists containing integers.\n\n    Returns:\n        List[int]: A list containing the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in list_of_lists]\n", "from typing import List\nfrom typing import List, Any\n\ndef Extract(lists: List[List[Any]]) -> List[Any]:\n    \"\"\"\n    Extracts the first element of each sublist from a given list of lists.\n\n    Args:\n        lists (List[List[Any]]): A list of lists containing any type of elements.\n\n    Returns:\n        List[Any]: A list containing the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in lists if sublist]\n", "from typing import List\nfrom typing import List, Any\n\ndef Extract(lists: List[List[Any]]) -> List[Any]:\n    \"\"\"\n    Extracts the first element from each sublist in the input list of lists.\n\n    Args:\n        lists (List[List[Any]]): A list of lists containing any type of elements.\n\n    Returns:\n        List[Any]: A list of the first elements from each sublist.\n    \"\"\"\n    result = []\n    for sublist in lists:\n        if sublist:  # Check if the sublist is not empty\n            result.append(sublist[0])\n    return result\n", "from typing import List\nfrom typing import List\n\ndef Extract(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Extracts the first element from each sublist in the given list of lists.\n\n    Args:\n        lists (List[List[int]]): A list of lists containing integers.\n\n    Returns:\n        List[int]: A list containing the first element from each sublist.\n    \"\"\"\n    result = []\n    for sublist in lists:\n        if sublist:  # Check if the sublist is not empty\n            result.append(sublist[0])\n    return result\n", "from typing import List\nfrom typing import List, Any\n\ndef Extract(list_of_lists: List[List[Any]]) -> List[Any]:\n    \"\"\"\n    Extracts the first element from each sublist in a list of lists.\n\n    Args:\n        list_of_lists (List[List[Any]]): A list of lists containing any type of elements.\n\n    Returns:\n        List[Any]: A list containing the first element from each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in list_of_lists if len(sublist) > 0]\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that extracts the first element from each sublist within a list. This is a basic operation that can be efficiently handled by Python's list comprehension feature. The function should be simple and easy to understand, suitable for beginners and experienced users alike.\nrequirement pool:\n- The function should take a list of lists as input and return a list containing the first element of each sublist.\n- The function should handle edge cases such as empty lists or lists with no elements.\n- The function should be optimized for performance, especially when dealing with large datasets.\nWe will use Python's built-in list comprehension feature to create a function that efficiently extracts the first element from each sublist within a list. This approach is simple and leverages Python's powerful data manipulation capabilities, making it both efficient and easy to understand.\n", "requirement analysis:\nThe requirement is to create a Python function that extracts the first element from each sublist in a given list. This is a straightforward task that can be achieved using a simple for loop or a list comprehension. The function should be efficient and handle different types of sublists without errors. Clarifications are needed to ensure the function is robust and can handle edge cases.\nrequirement pool:\n- The function should extract the first element from each sublist.\n- The function should handle different types of sublists without errors.\n- The function should be efficient and readable.\n- The function should be scalable for large datasets.\n- The function should be easy to understand and use.\nWe will use a simple and efficient approach to create a Python function that extracts the first element from each sublist in a given list. The function will be designed to handle different types of sublists without errors and will be efficient enough to handle large datasets. We will use a list comprehension for simplicity and readability.\n", "requirement analysis:\nThe requirement is to create a Python function that extracts the first element of each sublist from a given list of lists. This function should be simple and efficient, suitable for basic data extraction tasks.\nrequirement pool:\n- Implement the function to extract the first element of each sublist.\n- Ensure the function is tested for various input scenarios including empty lists and lists with different lengths of sublists.\n- Optimize the function for performance, especially when dealing with large datasets.\n- Document the function with clear examples and usage instructions.\n- Include error handling to manage cases where the input is not a list of lists.\nTo create a Python function that extracts the first element of each sublist from a given list of lists, we will utilize Python's built-in list operations, which are efficient and straightforward for this task. The function will iterate through each sublist in the main list, extract the first element, and return a new list containing these elements.\n", "requirement analysis:\nThe requirement is to create a Python function that extracts the first element of each sublist from a given list of lists. This function should be simple and efficient, suitable for basic data extraction tasks. The function should handle different lengths of sublists gracefully and be easily integrated into existing data processing workflows.\nrequirement pool:\n- The main code should be concise and readable.\n- The function should handle edge cases such as empty sublists.\n- The function should be optimized for performance.\n- The function should include proper documentation and comments.\n- The function should be tested for various input scenarios.\nWe will use Python's built-in functions and list comprehensions to create a simple and efficient function that extracts the first element of each sublist from a given list of lists. This approach ensures readability and maintainability of the code while maintaining efficiency.\n", "requirement analysis:\nThe requirement is to create a Python function that extracts the first element from each sublist within a list. This is a basic operation that can be efficiently handled by Python's built-in functions and list comprehensions. The function should be able to handle lists of varying lengths and types, ensuring it's versatile and robust.\nrequirement pool:\n- The main code should be concise and readable.\n- The function should handle lists of different lengths and types.\n- Implement error handling for unexpected input.\n- Optimize the function for performance.\n- Include detailed documentation and tests.\nWe will use Python's built-in functions and list comprehensions to create a function that extracts the first element from each sublist within a list. This approach is efficient and leverages Python's strengths in handling such operations.\n", "requirement analysis:\nThe requirement is to create a Python function that extracts the first element of each sublist from a given list of lists. This function should be simple, efficient, and easy to understand. It should handle basic data structures effectively and be extendable for more complex use cases.\nrequirement pool:\n- Implement the function to extract the first element of each sublist.\n- Ensure the function is optimized for performance and readability.\n- Provide clear documentation and examples for users.\n- Test the function with various data structures to ensure robustness.\n- Consider adding error handling for unexpected input formats.\nTo create a Python function that extracts the first element of each sublist from a given list of lists, we will use Python's built-in functions and standard library features. This approach ensures efficiency and readability. We will utilize list comprehension for simplicity and performance.\n", "requirement analysis:\nThe requirement is to create a Python function that extracts the first element of each sublist from a given list of lists. This function should be simple and efficient, suitable for basic data extraction tasks. The function should handle different lengths of sublists gracefully and be easily integrated into existing data processing workflows.\nrequirement pool:\n- The function should be able to handle lists of varying lengths of sublists.\n- The function should return a list containing the first element of each sublist.\n- The function should be implemented in a way that is easy to understand and maintain.\n- The function should be documented to help users understand how to use it.\nTo create a Python function that extracts the first element of each sublist from a given list of lists, we will use Python's built-in capabilities such as list comprehension, which is both simple and efficient. This approach ensures that the function is easy to understand and maintain, aligning with the goal of improving readability and maintainability of the code.\n", "requirement analysis:\nThe requirement is to create a Python function that extracts the first element from each sublist within a list. This is a basic operation often needed in data processing and manipulation tasks. The function should be efficient and handle edge cases well, such as empty lists or lists with non-list elements.\nrequirement pool:\n- Implement the function to extract the first element from each sublist\n- Ensure the function is optimized for performance\n- Add error handling for non-list elements in the input list\n- Test the function with various edge cases\n- Document the function with usage examples and edge case scenarios\nWe will use Python's built-in functions and a simple for loop to iterate through each sublist and extract the first element. This approach is efficient and easy to understand, making it scalable for large datasets.\n", "requirement analysis:\nThe requirement is to create a Python function that extracts the first element of each sublist from a given list of lists. This is a straightforward task that can be achieved using a simple loop or list comprehension. The function should be efficient and handle various sizes of input data.\nrequirement pool:\n- Implement the function to extract the first element of each sublist.\n- Ensure the function is tested for different types of input data.\n- Add documentation to explain how to use the function.\n- Optimize the function for better performance.\n- Include error handling to manage unexpected input data.\nWe will implement the function using a simple and efficient approach. The function will iterate through each sublist in the given list of lists, extract the first element of each sublist, and return a new list containing these elements. This approach will be straightforward and easy to understand, making it scalable for handling large datasets.\n", "requirement analysis:\nThe requirement is to create a function that extracts the first element from each sublist in a list of lists. This is a common task in data processing and programming. The function should be efficient and handle various sizes of input data. It should be part of a larger application or library that processes multiple lists.\nrequirement pool:\n- The main code should be clear and concise\n- The function should handle different lengths of sublists\n- Implement error handling for non-list inputs\n- Ensure the function is optimized for performance\n- Include documentation and examples for user guidance\nTo create a function that extracts the first element from each sublist in a list of lists, we will use Python's built-in capabilities, specifically focusing on list comprehensions for simplicity and efficiency. This approach will ensure the function is both easy to read and maintain, aligning with our goal of creating an efficient and easy-to-use function.\n"], "test": ["def check(Extract):\n\tassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]", "def check(Extract):\n\tassert Extract([[1,2,3],[4, 5]]) == [1,4]", "def check(Extract):\n\tassert Extract([[9,8,1],[1,2]]) == [9,1]", "def check(Extract):\n\tassert Extract([[5, 6], [6, 9, 9], [2, 6, 3, 13]]) == [5, 6, 2]", "def check(Extract):\n\tassert Extract([[2, 5], [8, 6, 7], [2, 9, 12, 11]]) == [2, 8, 2]", "def check(Extract):\n\tassert Extract([[2, 4], [1, 7, 10], [10, 9, 12, 4]]) == [2, 1, 10]", "def check(Extract):\n\tassert Extract([[1, 1], [7, 8, 7], [6, 3, 7, 10]]) == [1, 7, 6]", "def check(Extract):\n\tassert Extract([[5, 4], [8, 9, 5], [9, 2, 7, 8]]) == [5, 8, 9]", "def check(Extract):\n\tassert Extract([[5, 2], [8, 2, 6], [7, 10, 3, 4]]) == [5, 8, 7]", "def check(Extract):\n\tassert Extract([[6, 2], [8, 9, 1], [3, 4, 10, 13]]) == [6, 8, 3]", "def check(Extract):\n\tassert Extract([[5, 4], [4, 8, 2], [2, 6, 6, 4]]) == [5, 4, 2]", "def check(Extract):\n\tassert Extract([[6, 2], [4, 9, 9], [11, 3, 3, 4]]) == [6, 4, 11]", "def check(Extract):\n\tassert Extract([[2, 2], [1, 3, 8], [10, 4, 4, 12]]) == [2, 1, 10]", "def check(Extract):\n\tassert Extract([[5, 3], [4, 3, 9], [8, 3, 9, 8]]) == [5, 4, 8]", "def check(Extract):\n\tassert Extract([[6, 3], [4, 8, 2], [6, 12, 9, 10]]) == [6, 4, 6]", "def check(Extract):\n\tassert Extract([[6, 4], [8, 4, 3], [10, 8, 3, 13]]) == [6, 8, 10]", "def check(Extract):\n\tassert Extract([[2, 3], [1, 7, 9], [2, 9, 3, 6]]) == [2, 1, 2]", "def check(Extract):\n\tassert Extract([[1, 6], [2, 5, 4], [6, 12, 5, 10]]) == [1, 2, 6]", "def check(Extract):\n\tassert Extract([[5, 7], [5, 8, 9], [10, 11, 11, 12]]) == [5, 5, 10]", "def check(Extract):\n\tassert Extract([[6, 6], [4, 9, 9], [3, 8, 10, 4]]) == [6, 4, 3]", "def check(Extract):\n\tassert Extract([[1, 5], [8, 9, 9], [9, 5, 10, 4]]) == [1, 8, 9]", "def check(Extract):\n\tassert Extract([[6, 4], [2, 9, 3], [8, 10, 13, 12]]) == [6, 2, 8]", "def check(Extract):\n\tassert Extract([[4, 7], [6, 2, 9], [4, 12, 10, 14]]) == [4, 6, 4]", "def check(Extract):\n\tassert Extract([[3, 5], [5, 5, 3], [7, 8, 4, 14]]) == [3, 5, 7]", "def check(Extract):\n\tassert Extract([[3, 6], [5, 6, 5], [11, 7, 3, 9]]) == [3, 5, 11]", "def check(Extract):\n\tassert Extract([[4, 2], [7, 4, 8], [4, 10, 12, 9]]) == [4, 7, 4]", "def check(Extract):\n\tassert Extract([[6, 1], [1, 3, 1], [6, 7, 9, 11]]) == [6, 1, 6]", "def check(Extract):\n\tassert Extract([[3, 7], [5, 4, 6], [2, 3, 12, 6]]) == [3, 5, 2]", "def check(Extract):\n\tassert Extract([[1, 4], [3, 2, 6], [6, 6, 10, 12]]) == [1, 3, 6]", "def check(Extract):\n\tassert Extract([[4, 3], [3, 9, 10], [6, 4, 3, 12]]) == [4, 3, 6]", "def check(Extract):\n\tassert Extract([[3, 2], [4, 9, 3], [6, 12, 6, 6]]) == [3, 4, 6]", "def check(Extract):\n\tassert Extract([[4, 1], [7, 1, 7], [10, 6, 6, 14]]) == [4, 7, 10]", "def check(Extract):\n\tassert Extract([[4, 1], [1, 2, 5], [4, 12, 7, 4]]) == [4, 1, 4]", "def check(Extract):\n\tassert Extract([[3, 1], [6, 3, 7], [3, 12, 11, 9]]) == [3, 6, 3]", "def check(Extract):\n\tassert Extract([[3, 6], [5, 1, 7], [2, 8, 3, 13]]) == [3, 5, 2]", "def check(Extract):\n\tassert Extract([[2, 6], [6, 9, 10], [4, 5, 13, 5]]) == [2, 6, 4]", "def check(Extract):\n\tassert Extract([[6, 1, 1], [3, 4]]) == [6, 3]", "def check(Extract):\n\tassert Extract([[2, 1, 6], [8, 1]]) == [2, 8]", "def check(Extract):\n\tassert Extract([[1, 7, 4], [5, 7]]) == [1, 5]", "def check(Extract):\n\tassert Extract([[1, 7, 8], [7, 6]]) == [1, 7]", "def check(Extract):\n\tassert Extract([[1, 6, 6], [9, 3]]) == [1, 9]", "def check(Extract):\n\tassert Extract([[2, 5, 3], [1, 6]]) == [2, 1]", "def check(Extract):\n\tassert Extract([[5, 1, 4], [1, 9]]) == [5, 1]", "def check(Extract):\n\tassert Extract([[5, 3, 2], [1, 7]]) == [5, 1]", "def check(Extract):\n\tassert Extract([[3, 1, 7], [3, 1]]) == [3, 3]", "def check(Extract):\n\tassert Extract([[5, 6, 3], [7, 9]]) == [5, 7]", "def check(Extract):\n\tassert Extract([[2, 1, 4], [9, 8]]) == [2, 9]", "def check(Extract):\n\tassert Extract([[1, 5, 7], [1, 7]]) == [1, 1]", "def check(Extract):\n\tassert Extract([[5, 3, 3], [9, 1]]) == [5, 9]", "def check(Extract):\n\tassert Extract([[5, 3, 5], [3, 2]]) == [5, 3]", "def check(Extract):\n\tassert Extract([[2, 3, 7], [4, 8]]) == [2, 4]", "def check(Extract):\n\tassert Extract([[3, 5, 1], [5, 3]]) == [3, 5]", "def check(Extract):\n\tassert Extract([[5, 7, 6], [8, 4]]) == [5, 8]", "def check(Extract):\n\tassert Extract([[6, 1, 1], [6, 3]]) == [6, 6]", "def check(Extract):\n\tassert Extract([[1, 7, 8], [6, 6]]) == [1, 6]", "def check(Extract):\n\tassert Extract([[1, 2, 2], [6, 7]]) == [1, 6]", "def check(Extract):\n\tassert Extract([[1, 2, 2], [6, 3]]) == [1, 6]", "def check(Extract):\n\tassert Extract([[1, 3, 3], [9, 9]]) == [1, 9]", "def check(Extract):\n\tassert Extract([[6, 7, 8], [7, 8]]) == [6, 7]", "def check(Extract):\n\tassert Extract([[2, 5, 1], [2, 7]]) == [2, 2]", "def check(Extract):\n\tassert Extract([[6, 3, 3], [1, 7]]) == [6, 1]", "def check(Extract):\n\tassert Extract([[4, 3, 8], [8, 6]]) == [4, 8]", "def check(Extract):\n\tassert Extract([[5, 4, 7], [1, 1]]) == [5, 1]", "def check(Extract):\n\tassert Extract([[5, 4, 1], [3, 3]]) == [5, 3]", "def check(Extract):\n\tassert Extract([[1, 2, 7], [9, 6]]) == [1, 9]", "def check(Extract):\n\tassert Extract([[2, 1, 7], [8, 6]]) == [2, 8]", "def check(Extract):\n\tassert Extract([[4, 2, 1], [5, 9]]) == [4, 5]", "def check(Extract):\n\tassert Extract([[6, 5, 1], [6, 7]]) == [6, 6]", "def check(Extract):\n\tassert Extract([[5, 4, 7], [9, 7]]) == [5, 9]", "def check(Extract):\n\tassert Extract([[4, 12, 4], [5, 6]]) == [4, 5]", "def check(Extract):\n\tassert Extract([[11, 7, 2], [5, 2]]) == [11, 5]", "def check(Extract):\n\tassert Extract([[4, 11, 2], [4, 7]]) == [4, 4]", "def check(Extract):\n\tassert Extract([[8, 4, 2], [5, 1]]) == [8, 5]", "def check(Extract):\n\tassert Extract([[6, 7, 6], [6, 3]]) == [6, 6]", "def check(Extract):\n\tassert Extract([[12, 6, 6], [4, 1]]) == [12, 4]", "def check(Extract):\n\tassert Extract([[11, 11, 4], [2, 5]]) == [11, 2]", "def check(Extract):\n\tassert Extract([[6, 10, 2], [4, 3]]) == [6, 4]", "def check(Extract):\n\tassert Extract([[7, 10, 3], [1, 3]]) == [7, 1]", "def check(Extract):\n\tassert Extract([[13, 5, 4], [3, 2]]) == [13, 3]", "def check(Extract):\n\tassert Extract([[14, 13, 3], [5, 4]]) == [14, 5]", "def check(Extract):\n\tassert Extract([[10, 12, 6], [6, 3]]) == [10, 6]", "def check(Extract):\n\tassert Extract([[5, 8, 4], [2, 7]]) == [5, 2]", "def check(Extract):\n\tassert Extract([[8, 13, 2], [6, 6]]) == [8, 6]", "def check(Extract):\n\tassert Extract([[5, 8, 1], [3, 6]]) == [5, 3]", "def check(Extract):\n\tassert Extract([[8, 7, 4], [4, 4]]) == [8, 4]", "def check(Extract):\n\tassert Extract([[5, 4, 3], [2, 3]]) == [5, 2]", "def check(Extract):\n\tassert Extract([[9, 9, 6], [1, 7]]) == [9, 1]", "def check(Extract):\n\tassert Extract([[8, 5, 6], [5, 4]]) == [8, 5]", "def check(Extract):\n\tassert Extract([[9, 9, 1], [5, 4]]) == [9, 5]", "def check(Extract):\n\tassert Extract([[8, 7, 2], [4, 6]]) == [8, 4]", "def check(Extract):\n\tassert Extract([[8, 6, 6], [5, 2]]) == [8, 5]", "def check(Extract):\n\tassert Extract([[11, 5, 5], [3, 6]]) == [11, 3]", "def check(Extract):\n\tassert Extract([[9, 10, 3], [5, 1]]) == [9, 5]", "def check(Extract):\n\tassert Extract([[6, 12, 2], [1, 2]]) == [6, 1]", "def check(Extract):\n\tassert Extract([[12, 11, 6], [5, 7]]) == [12, 5]", "def check(Extract):\n\tassert Extract([[7, 12, 6], [4, 7]]) == [7, 4]", "def check(Extract):\n\tassert Extract([[4, 5, 3], [5, 6]]) == [4, 5]", "def check(Extract):\n\tassert Extract([[12, 10, 1], [6, 5]]) == [12, 6]", "def check(Extract):\n\tassert Extract([[10, 3, 1], [3, 6]]) == [10, 3]", "def check(Extract):\n\tassert Extract([[5, 5, 1], [4, 3]]) == [5, 4]", "def check(Extract):\n\tassert Extract([[8, 13, 1], [5, 4]]) == [8, 5]", "def check(Extract):\n\tassert Extract([[9, 3, 5], [3, 1]]) == [9, 3]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\nfrom typing import List, Any\n\ndef Extract(list_of_lists: List[List[Any]]) -> List[Any]:\n    \"\"\"\n    Extracts the first element from each sublist in a list of lists.\n\n    Args:\n        list_of_lists (List[List[Any]]): A list of lists containing any type of elements.\n\n    Returns:\n        List[Any]: A list containing the first element from each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in list_of_lists if len(sublist) > 0]\n", "passed": true, "pass": true, "pass_num": 10, "round": 519, "mutate_method": "rephrase_one", "parent_index": 171}
