{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 69, "prompt": "Write a function to check whether a list contains the given sublist or not.", "code": "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set", "test_imports": [], "test_list": ["assert is_sublist([2,4,3,5,7],[3,7])==False", "assert is_sublist([2,4,3,5,7],[4,3])==True", "assert is_sublist([2,4,3,5,7],[1,6])==False", "assert is_sublist([2, 7, 5, 8, 6], [4, 9]) == False", "assert is_sublist([5, 7, 3, 6, 10], [4, 2]) == False", "assert is_sublist([2, 4, 3, 7, 11], [7, 2]) == False", "assert is_sublist([1, 2, 4, 5, 6], [8, 12]) == False", "assert is_sublist([1, 8, 3, 8, 7], [3, 2]) == False", "assert is_sublist([3, 9, 7, 1, 3], [8, 7]) == False", "assert is_sublist([7, 1, 5, 1, 3], [7, 9]) == False", "assert is_sublist([1, 8, 4, 1, 12], [7, 5]) == False", "assert is_sublist([7, 1, 1, 5, 7], [5, 5]) == False", "assert is_sublist([1, 5, 3, 4, 5], [1, 4]) == False", "assert is_sublist([4, 5, 7, 6, 2], [3, 7]) == False", "assert is_sublist([5, 2, 5, 4, 2], [7, 12]) == False", "assert is_sublist([4, 3, 1, 1, 5], [2, 12]) == False", "assert is_sublist([7, 1, 7, 8, 2], [8, 4]) == False", "assert is_sublist([3, 6, 1, 1, 11], [8, 5]) == False", "assert is_sublist([6, 3, 6, 10, 5], [8, 10]) == False", "assert is_sublist([7, 2, 7, 9, 7], [6, 3]) == False", "assert is_sublist([6, 4, 4, 3, 2], [5, 3]) == False", "assert is_sublist([5, 8, 8, 9, 2], [7, 7]) == False", "assert is_sublist([3, 3, 5, 2, 12], [7, 10]) == False", "assert is_sublist([2, 9, 1, 10, 9], [1, 7]) == False", "assert is_sublist([5, 8, 8, 3, 11], [8, 9]) == False", "assert is_sublist([6, 6, 8, 4, 6], [2, 7]) == False", "assert is_sublist([4, 5, 4, 3, 10], [6, 9]) == False", "assert is_sublist([2, 1, 2, 1, 12], [2, 6]) == False", "assert is_sublist([7, 7, 4, 7, 3], [1, 10]) == False", "assert is_sublist([7, 1, 7, 9, 9], [3, 7]) == False", "assert is_sublist([2, 3, 2, 4, 10], [5, 8]) == False", "assert is_sublist([6, 7, 5, 7, 7], [6, 6]) == False", "assert is_sublist([6, 2, 8, 7, 12], [6, 6]) == False", "assert is_sublist([2, 1, 7, 6, 11], [6, 3]) == False", "assert is_sublist([1, 9, 6, 6, 8], [3, 7]) == False", "assert is_sublist([5, 2, 2, 10, 4], [7, 2]) == False", "assert is_sublist([2, 5, 8, 8, 2], [3, 8]) == False", "assert is_sublist([6, 6, 5, 7, 2], [1, 8]) == False", "assert is_sublist([7, 3, 2, 10, 3], [9, 4]) == False", "assert is_sublist([6, 8, 3, 3, 12], [8, 6]) == False", "assert is_sublist([2, 7, 7, 6, 7], [3, 1]) == False", "assert is_sublist([7, 4, 6, 6, 4], [3, 1]) == False", "assert is_sublist([3, 7, 4, 5, 7], [5, 2]) == False", "assert is_sublist([4, 8, 1, 9, 6], [9, 7]) == False", "assert is_sublist([3, 3, 6, 5, 3], [6, 7]) == False", "assert is_sublist([1, 2, 3, 4, 9], [8, 2]) == False", "assert is_sublist([3, 1, 7, 9, 10], [7, 4]) == False", "assert is_sublist([5, 1, 3, 1, 11], [3, 6]) == False", "assert is_sublist([4, 6, 1, 5, 4], [1, 2]) == False", "assert is_sublist([3, 7, 7, 10, 8], [1, 1]) == False", "assert is_sublist([4, 5, 3, 7, 10], [3, 1]) == False", "assert is_sublist([2, 5, 2, 5, 4], [2, 1]) == False", "assert is_sublist([2, 3, 8, 10, 11], [7, 6]) == False", "assert is_sublist([1, 7, 6, 6, 12], [4, 8]) == False", "assert is_sublist([3, 9, 8, 6, 5], [9, 8]) == True", "assert is_sublist([5, 4, 4, 6, 4], [7, 7]) == False", "assert is_sublist([7, 3, 3, 1, 8], [1, 2]) == False", "assert is_sublist([7, 6, 7, 8, 12], [4, 2]) == False", "assert is_sublist([3, 6, 7, 4, 12], [4, 7]) == False", "assert is_sublist([5, 7, 7, 7, 12], [5, 5]) == False", "assert is_sublist([4, 6, 1, 9, 7], [5, 3]) == False", "assert is_sublist([5, 2, 5, 2, 3], [6, 2]) == False", "assert is_sublist([1, 5, 2, 1, 5], [8, 1]) == False", "assert is_sublist([7, 6, 2, 3, 11], [3, 8]) == False", "assert is_sublist([1, 9, 6, 4, 12], [7, 8]) == False", "assert is_sublist([4, 7, 3, 10, 7], [1, 4]) == False", "assert is_sublist([4, 7, 8, 2, 10], [2, 4]) == False", "assert is_sublist([3, 5, 4, 9, 7], [9, 1]) == False", "assert is_sublist([6, 4, 4, 10, 6], [7, 1]) == False", "assert is_sublist([7, 3, 4, 7, 4], [1, 2]) == False", "assert is_sublist([5, 4, 4, 3, 7], [4, 10]) == False", "assert is_sublist([2, 1, 8, 10, 6], [2, 10]) == False", "assert is_sublist([3, 2, 7, 1, 7], [2, 8]) == False", "assert is_sublist([1, 2, 1, 4, 12], [1, 1]) == False", "assert is_sublist([3, 8, 8, 9, 3], [4, 3]) == False", "assert is_sublist([4, 3, 5, 9, 12], [5, 5]) == False", "assert is_sublist([1, 5, 5, 9, 2], [1, 6]) == False", "assert is_sublist([7, 3, 7, 1, 10], [3, 4]) == False", "assert is_sublist([5, 2, 4, 7, 2], [1, 7]) == False", "assert is_sublist([7, 1, 8, 7, 11], [5, 8]) == False", "assert is_sublist([5, 1, 2, 3, 6], [3, 5]) == False", "assert is_sublist([2, 7, 1, 6, 6], [3, 11]) == False", "assert is_sublist([7, 2, 1, 1, 7], [5, 11]) == False", "assert is_sublist([3, 3, 3, 4, 12], [6, 9]) == False", "assert is_sublist([4, 4, 4, 9, 11], [2, 2]) == False", "assert is_sublist([7, 1, 1, 1, 6], [2, 7]) == False", "assert is_sublist([4, 1, 7, 10, 8], [6, 8]) == False", "assert is_sublist([3, 4, 4, 5, 4], [2, 11]) == False", "assert is_sublist([4, 6, 5, 8, 12], [1, 3]) == False", "assert is_sublist([2, 2, 5, 2, 11], [3, 1]) == False", "assert is_sublist([2, 2, 5, 5, 4], [6, 1]) == False", "assert is_sublist([2, 9, 5, 3, 6], [5, 1]) == False", "assert is_sublist([6, 5, 4, 10, 10], [3, 5]) == False", "assert is_sublist([1, 9, 5, 10, 8], [3, 6]) == False", "assert is_sublist([5, 2, 2, 8, 10], [2, 3]) == False", "assert is_sublist([3, 8, 3, 3, 4], [1, 9]) == False", "assert is_sublist([5, 5, 8, 5, 4], [6, 4]) == False", "assert is_sublist([1, 6, 7, 3, 10], [2, 9]) == False", "assert is_sublist([1, 5, 8, 8, 6], [3, 5]) == False", "assert is_sublist([7, 8, 3, 3, 2], [4, 8]) == False", "assert is_sublist([6, 5, 4, 10, 3], [4, 8]) == False", "assert is_sublist([5, 3, 8, 2, 12], [1, 6]) == False"], "entry_point": "is_sublist", "repair_prompt": ["Write a function is_sublist to check whether a list contains the given sublist or not.\nis_sublist([2,4,3,5,7],[3,7])==False\n"], "completions": ["from typing import List\n## main.py\n\nimport collections\n\ndef is_sublist(main_list: list, sub_list: list) -> bool:\n    \"\"\"\n    Check if the sub_list is a sublist of main_list.\n\n    Args:\n        main_list (list): The main list to search within.\n        sub_list (list): The sublist to search for.\n\n    Returns:\n        bool: True if sub_list is a sublist of main_list, False otherwise.\n    \"\"\"\n    if not sub_list:\n        return True  # An empty sublist is always a sublist\n\n    if not main_list:\n        return False  # An empty main list cannot contain a non-empty sublist\n\n    len_main = len(main_list)\n    len_sub = len(sub_list)\n\n    if len_sub > len_main:\n        return False  # A sublist cannot be longer than the main list\n\n    deque_main = collections.deque(main_list)\n    deque_sub = collections.deque(sub_list)\n\n    while deque_sub:\n        if not deque_main:\n            return False  # The main list ran out of elements before the sublist\n        if deque_main.popleft() != deque_sub.popleft():\n            # If the first element doesn't match, reset the main deque and try again\n            deque_main.appendleft(deque_sub.appendleft(deque_main.popleft()))\n            if len(deque_main) < len_sub:\n                return False  # The main list is not long enough to contain the sublist\n\n    return True  # All elements matched\n", "from typing import List\n## main.py\n\nimport sys\nimport typing\n\ndef is_sublist(main_list: list, sub_list: list) -> bool:\n    \"\"\"\n    Check if the sub_list is a sublist of main_list.\n\n    Args:\n        main_list (list): The main list to search within.\n        sub_list (list): The sublist to search for.\n\n    Returns:\n        bool: True if sub_list is a sublist of main_list, False otherwise.\n    \"\"\"\n    if not sub_list:\n        return True  # An empty sublist is always a sublist\n\n    if not main_list:\n        return False  # An empty main list cannot contain a non-empty sublist\n\n    len_main = len(main_list)\n    len_sub = len(sub_list)\n\n    if len_sub > len_main:\n        return False  # A sublist cannot be longer than the main list\n\n    for i in range(len_main - len_sub + 1):\n        if main_list[i:i + len_sub] == sub_list:\n            return True  # Found a match\n\n    return False  # No match found\n", "from typing import List\n## main.py\n\ndef is_sublist(main_list: list, sub_list: list) -> bool:\n    \"\"\"\n    Check if the sub_list is a sublist of main_list.\n\n    Args:\n        main_list (list): The main list to search within.\n        sub_list (list): The sublist to search for.\n\n    Returns:\n        bool: True if sub_list is a sublist of main_list, False otherwise.\n    \"\"\"\n    if not sub_list:\n        return True  # An empty sublist is always a sublist\n\n    if not main_list:\n        return False  # An empty main list cannot contain a non-empty sublist\n\n    len_main = len(main_list)\n    len_sub = len(sub_list)\n\n    if len_sub > len_main:\n        return False  # A sublist cannot be longer than the main list\n\n    for i in range(len_main - len_sub + 1):\n        if main_list[i:i+len_sub] == sub_list:\n            return True  # Found a match\n\n    return False  # No match found\n", "from typing import List\n## main.py\n\ndef is_sublist(main_list: list, sub_list: list) -> bool:\n    \"\"\"\n    Check if the sub_list is a sublist of main_list.\n\n    Args:\n        main_list (list): The main list to search within.\n        sub_list (list): The sublist to search for.\n\n    Returns:\n        bool: True if sub_list is a sublist of main_list, False otherwise.\n    \"\"\"\n    if not sub_list:\n        return True  # An empty sublist is always a sublist\n\n    if not main_list:\n        return False  # An empty main list cannot contain a non-empty sublist\n\n    len_main = len(main_list)\n    len_sub = len(sub_list)\n\n    if len_sub > len_main:\n        return False  # A sublist cannot be longer than the main list\n\n    for i in range(len_main - len_sub + 1):\n        if main_list[i:i+len_sub] == sub_list:\n            return True  # Found a match\n\n    return False  # No match found\n", "from typing import List\n## main.py\n\nimport collections\n\ndef is_sublist(main_list: list, sub_list: list) -> bool:\n    \"\"\"\n    Check if the sub_list is a sublist of main_list.\n\n    Args:\n        main_list (list): The main list to search within.\n        sub_list (list): The sublist to search for.\n\n    Returns:\n        bool: True if sub_list is a sublist of main_list, False otherwise.\n    \"\"\"\n    if not sub_list:\n        return True  # An empty sublist is always a sublist\n\n    if not main_list:\n        return False  # An empty main list cannot contain a non-empty sublist\n\n    len_main = len(main_list)\n    len_sub = len(sub_list)\n\n    if len_sub > len_main:\n        return False  # A sublist cannot be longer than the main list\n\n    deque_main = collections.deque(main_list)\n    deque_sub = collections.deque(sub_list)\n\n    while deque_sub:\n        if not deque_main:\n            return False  # The main list ran out of elements before the sublist\n        if deque_main.popleft() != deque_sub.popleft():\n            # If the first element doesn't match, reset the main deque and try again\n            deque_main.appendleft(deque_sub.appendleft(deque_main.popleft()))\n            if len(deque_main) < len_sub:\n                return False  # The main list is not long enough to contain the sublist\n\n    return True  # All elements matched\n", "from typing import List\ndef is_sublist(main_list: list, sub_list: list) -> bool:\n    if not sub_list:\n        return True\n    if not main_list:\n        return False\n    len_main = len(main_list)\n    len_sub = len(sub_list)\n    for i in range(len_main - len_sub + 1):\n        if main_list[i:i+len_sub] == sub_list:\n            return True\n    return False\n", "from typing import List\ndef is_sublist(main_list: list, sub_list: list) -> bool:\n    if not sub_list:\n        return True\n    if not main_list:\n        return False\n    len_main = len(main_list)\n    len_sub = len(sub_list)\n    for i in range(len_main - len_sub + 1):\n        if main_list[i:i+len_sub] == sub_list:\n            return True\n    return False\n", "from typing import List\n## main.py\n\nimport typing\n\ndef is_sublist(main_list: list, sub_list: list) -> bool:\n    \"\"\"\n    Check if the sub_list is a sublist of main_list.\n\n    Args:\n        main_list (list): The main list to search within.\n        sub_list (list): The sublist to search for.\n\n    Returns:\n        bool: True if sub_list is found in main_list, False otherwise.\n    \"\"\"\n    if not sub_list:\n        return True  # An empty sub_list is always a sublist.\n\n    if not main_list:\n        return False  # An empty main_list cannot contain a non-empty sub_list.\n\n    len_main = len(main_list)\n    len_sub = len(sub_list)\n\n    if len_sub > len_main:\n        return False  # A sub_list longer than main_list cannot be a sublist.\n\n    for i in range(len_main - len_sub + 1):\n        if main_list[i:i+len_sub] == sub_list:\n            return True  # Found a match.\n\n    return False  # No match found.\n", "from typing import List\n## main.py\n\ndef is_sublist(main_list: list, sub_list: list) -> bool:\n    \"\"\"\n    Check if the sub_list is a sublist of main_list.\n\n    Args:\n        main_list (list): The main list to search within.\n        sub_list (list): The sublist to search for.\n\n    Returns:\n        bool: True if sub_list is a sublist of main_list, False otherwise.\n    \"\"\"\n    if not sub_list:\n        return True  # An empty sublist is always a sublist\n\n    if not main_list:\n        return False  # An empty main list cannot contain a non-empty sublist\n\n    len_main = len(main_list)\n    len_sub = len(sub_list)\n\n    if len_sub > len_main:\n        return False  # A sublist cannot be longer than the main list\n\n    for i in range(len_main - len_sub + 1):\n        if main_list[i:i + len_sub] == sub_list:\n            return True  # Found a match\n\n    return False  # No match found\n", "from typing import List\n## main.py\n\ndef is_sublist(main_list: list, sub_list: list) -> bool:\n    \"\"\"\n    Check if the sub_list is a sublist of the main_list.\n\n    Args:\n        main_list (list): The main list to search within.\n        sub_list (list): The sublist to search for.\n\n    Returns:\n        bool: True if sub_list is a sublist of main_list, False otherwise.\n    \"\"\"\n    if not sub_list:\n        return False\n\n    sub_list_length = len(sub_list)\n\n    for i in range(len(main_list) - sub_list_length + 1):\n        if main_list[i:i + sub_list_length] == sub_list:\n            return True\n\n    return False\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that checks if one list is a sublist of another. This is a common problem in data structures and algorithms. The function should be efficient and handle edge cases such as empty lists and sublists that are not continuous.\nrequirement pool:\n- The main code should include a function is_sublist that takes two lists as input and returns True if the second list is a sublist of the first, otherwise False.\n- The function should handle cases where the sublist is at the beginning, middle, or end of the main list.\n- The function should handle cases where the main list or the sublist is empty.\nWe will implement the function `is_sublist` using Python's built-in capabilities and the `collections` module for efficiency. The function will iterate through the main list and check for the presence of the sublist. We will handle edge cases such as empty lists and ensure the function is efficient.\n", "requirement analysis:\nThe requirement is to create a function that checks if one list is a sublist of another. This is a common problem in data structures and algorithms. The function should be efficient and handle edge cases such as empty lists and sublists that are not present.\nrequirement pool:\n- The main code should include a function is_sublist that takes two lists as input and returns True if the second list is a sublist of the first, otherwise False.\n- The function should handle cases where the sublist is at the beginning, middle, or end of the list.\n- The function should handle cases where the sublist is empty or the main list is empty.\nWe will implement the function `is_sublist` using Python's built-in capabilities and the `collections` module for efficiency. The function will iterate through the main list and check for the presence of the sublist. We will handle edge cases such as empty lists and ensure the function is efficient.\n", "requirement analysis:\nThe requirement is to create a function that checks if one list is a sublist of another. This is a common problem in data structures and algorithms. The function should be efficient and handle edge cases such as empty lists and sublists that are not continuous.\nrequirement pool:\n- The main code should include a function is_sublist that takes two lists as input and returns True if the second list is a sublist of the first, otherwise False.\n- The function should handle cases where the sublist is at the beginning, middle, or end of the main list.\n- The function should handle cases where the main list or the sublist is empty.\nWe will implement the function `is_sublist` using Python's built-in capabilities and the `collections` module for efficiency. The function will iterate through the main list and check for the presence of the sublist. We will handle edge cases such as empty lists and ensure the function is efficient.\n", "requirement analysis:\nThe requirement is to create a function that checks if one list is a sublist of another. This is a common problem in data structures and algorithms. The function should be efficient and handle edge cases such as empty lists and sublists that are not continuous.\nrequirement pool:\n- The main code should include a function is_sublist that takes two lists as input and returns True if the second list is a sublist of the first, otherwise False.\n- The function should handle cases where the sublist is at the beginning, middle, or end of the main list.\n- The function should handle cases where the main list or the sublist is empty.\nWe will implement the function `is_sublist` using Python's built-in capabilities and the `collections` module for efficiency. The function will iterate through the main list and check for the presence of the sublist. We will handle edge cases such as empty lists and ensure the function is efficient.\n", "requirement analysis:\nThe requirement is to create a function that checks if one list is a sublist of another. This is a common problem in data structures and algorithms. The function should be efficient and handle edge cases such as empty lists and sublists that are not continuous.\nrequirement pool:\n- The main code should include a function is_sublist that takes two lists as input and returns True if the second list is a sublist of the first, otherwise False.\n- The function should handle cases where the sublist is at the beginning, middle, or end of the main list.\n- The function should handle cases where the main list or the sublist is empty.\nWe will implement the function `is_sublist` using Python's built-in capabilities and the `collections` module for efficiency. The function will iterate through the main list and check for the presence of the sublist. We will handle edge cases such as empty lists and ensure the function is efficient.\n", "requirement analysis:\nThe requirement is to create a function that checks if one list is a sublist of another. This is a common problem in data structures and algorithms. The function should be efficient and handle edge cases such as empty lists and sublists that are not continuous.\nrequirement pool:\n- The main code should include a function is_sublist that takes two lists as input and returns True if the second list is a sublist of the first, otherwise False.\n- The function should handle cases where the sublist is at the beginning, middle, or end of the main list.\n- The function should handle cases where the main list or the sublist is empty.\nWe will implement the function `is_sublist` using Python's built-in capabilities and the `collections` module for efficiency. The function will iterate through the main list and check for the presence of the sublist. We will handle edge cases such as empty lists and ensure the function is efficient.\n", "requirement analysis:\nThe requirement is to create a function that checks if one list is a sublist of another. This is a common problem in data structures and algorithms. The function should be efficient and handle edge cases such as empty lists and sublists that are not continuous.\nrequirement pool:\n- The main code should include a function is_sublist that takes two lists as input and returns True if the second list is a sublist of the first, otherwise False.\n- The function should handle cases where the sublist is at the beginning, middle, or end of the list.\n- The function should handle cases where the sublist or the main list is empty.\nWe will implement the function `is_sublist` using Python's built-in capabilities and the `collections` module for efficiency. The function will iterate through the main list and check for the presence of the sublist. We will handle edge cases such as empty lists and ensure the function is efficient.\n", "requirement analysis:\nThe requirement is to create a function that checks if one list is a sublist of another. This is a common problem in data structures and algorithms. The function should be efficient and handle edge cases such as empty lists and sublists that are not present.\nrequirement pool:\n- The main code should include a function is_sublist that takes two lists as input and returns True if the second list is a sublist of the first, otherwise False.\n- The function should handle cases where the sublist is at the beginning, middle, or end of the list.\n- The function should handle cases where the sublist is empty or the main list is empty.\nWe will implement the function `is_sublist` using Python's built-in capabilities and the `collections` module for efficiency. The function will iterate through the main list and check for the presence of the sublist. We will handle edge cases such as empty lists and ensure the function is efficient.\n", "requirement analysis:\nThe requirement is to create a function that checks if one list is a sublist of another. This is a common problem in data structures and algorithms. The function should be efficient and handle edge cases such as empty lists and sublists that are not continuous.\nrequirement pool:\n- The main code should include a function is_sublist that takes two lists as input and returns True if the second list is a sublist of the first, otherwise False.\n- The function should handle cases where the sublist is at the beginning, middle, or end of the main list.\n- The function should handle cases where the main list or the sublist is empty.\nWe will implement the function `is_sublist` using Python's built-in capabilities and the `collections` module for efficiency. The function will iterate through the main list and check for the presence of the sublist. We will handle edge cases such as empty lists and ensure the function is efficient.\n", "requirement analysis:\nThe requirement is to create a function that checks if one list is a sublist of another. This is a common problem in data structures and algorithms. The function should be efficient and handle edge cases such as empty lists and sublists that are not continuous.\nrequirement pool:\n- The main code should include a function is_sublist that takes two lists as input and returns True if the second list is a sublist of the first, otherwise False.\n- The function should handle cases where the sublist is at the beginning, middle, or end of the main list.\n- The function should handle cases where the sublist or main list is empty.\nWe will implement the function `is_sublist` using Python's built-in capabilities and the `collections` module for efficiency. The function will iterate through the main list and check for the presence of the sublist. We will handle edge cases such as empty lists and ensure the function is efficient.\n"], "test": ["def check(is_sublist):\n\tassert is_sublist([2,4,3,5,7],[3,7])==False", "def check(is_sublist):\n\tassert is_sublist([2,4,3,5,7],[4,3])==True", "def check(is_sublist):\n\tassert is_sublist([2,4,3,5,7],[1,6])==False", "def check(is_sublist):\n\tassert is_sublist([2, 7, 5, 8, 6], [4, 9]) == False", "def check(is_sublist):\n\tassert is_sublist([5, 7, 3, 6, 10], [4, 2]) == False", "def check(is_sublist):\n\tassert is_sublist([2, 4, 3, 7, 11], [7, 2]) == False", "def check(is_sublist):\n\tassert is_sublist([1, 2, 4, 5, 6], [8, 12]) == False", "def check(is_sublist):\n\tassert is_sublist([1, 8, 3, 8, 7], [3, 2]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 9, 7, 1, 3], [8, 7]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 1, 5, 1, 3], [7, 9]) == False", "def check(is_sublist):\n\tassert is_sublist([1, 8, 4, 1, 12], [7, 5]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 1, 1, 5, 7], [5, 5]) == False", "def check(is_sublist):\n\tassert is_sublist([1, 5, 3, 4, 5], [1, 4]) == False", "def check(is_sublist):\n\tassert is_sublist([4, 5, 7, 6, 2], [3, 7]) == False", "def check(is_sublist):\n\tassert is_sublist([5, 2, 5, 4, 2], [7, 12]) == False", "def check(is_sublist):\n\tassert is_sublist([4, 3, 1, 1, 5], [2, 12]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 1, 7, 8, 2], [8, 4]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 6, 1, 1, 11], [8, 5]) == False", "def check(is_sublist):\n\tassert is_sublist([6, 3, 6, 10, 5], [8, 10]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 2, 7, 9, 7], [6, 3]) == False", "def check(is_sublist):\n\tassert is_sublist([6, 4, 4, 3, 2], [5, 3]) == False", "def check(is_sublist):\n\tassert is_sublist([5, 8, 8, 9, 2], [7, 7]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 3, 5, 2, 12], [7, 10]) == False", "def check(is_sublist):\n\tassert is_sublist([2, 9, 1, 10, 9], [1, 7]) == False", "def check(is_sublist):\n\tassert is_sublist([5, 8, 8, 3, 11], [8, 9]) == False", "def check(is_sublist):\n\tassert is_sublist([6, 6, 8, 4, 6], [2, 7]) == False", "def check(is_sublist):\n\tassert is_sublist([4, 5, 4, 3, 10], [6, 9]) == False", "def check(is_sublist):\n\tassert is_sublist([2, 1, 2, 1, 12], [2, 6]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 7, 4, 7, 3], [1, 10]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 1, 7, 9, 9], [3, 7]) == False", "def check(is_sublist):\n\tassert is_sublist([2, 3, 2, 4, 10], [5, 8]) == False", "def check(is_sublist):\n\tassert is_sublist([6, 7, 5, 7, 7], [6, 6]) == False", "def check(is_sublist):\n\tassert is_sublist([6, 2, 8, 7, 12], [6, 6]) == False", "def check(is_sublist):\n\tassert is_sublist([2, 1, 7, 6, 11], [6, 3]) == False", "def check(is_sublist):\n\tassert is_sublist([1, 9, 6, 6, 8], [3, 7]) == False", "def check(is_sublist):\n\tassert is_sublist([5, 2, 2, 10, 4], [7, 2]) == False", "def check(is_sublist):\n\tassert is_sublist([2, 5, 8, 8, 2], [3, 8]) == False", "def check(is_sublist):\n\tassert is_sublist([6, 6, 5, 7, 2], [1, 8]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 3, 2, 10, 3], [9, 4]) == False", "def check(is_sublist):\n\tassert is_sublist([6, 8, 3, 3, 12], [8, 6]) == False", "def check(is_sublist):\n\tassert is_sublist([2, 7, 7, 6, 7], [3, 1]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 4, 6, 6, 4], [3, 1]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 7, 4, 5, 7], [5, 2]) == False", "def check(is_sublist):\n\tassert is_sublist([4, 8, 1, 9, 6], [9, 7]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 3, 6, 5, 3], [6, 7]) == False", "def check(is_sublist):\n\tassert is_sublist([1, 2, 3, 4, 9], [8, 2]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 1, 7, 9, 10], [7, 4]) == False", "def check(is_sublist):\n\tassert is_sublist([5, 1, 3, 1, 11], [3, 6]) == False", "def check(is_sublist):\n\tassert is_sublist([4, 6, 1, 5, 4], [1, 2]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 7, 7, 10, 8], [1, 1]) == False", "def check(is_sublist):\n\tassert is_sublist([4, 5, 3, 7, 10], [3, 1]) == False", "def check(is_sublist):\n\tassert is_sublist([2, 5, 2, 5, 4], [2, 1]) == False", "def check(is_sublist):\n\tassert is_sublist([2, 3, 8, 10, 11], [7, 6]) == False", "def check(is_sublist):\n\tassert is_sublist([1, 7, 6, 6, 12], [4, 8]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 9, 8, 6, 5], [9, 8]) == True", "def check(is_sublist):\n\tassert is_sublist([5, 4, 4, 6, 4], [7, 7]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 3, 3, 1, 8], [1, 2]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 6, 7, 8, 12], [4, 2]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 6, 7, 4, 12], [4, 7]) == False", "def check(is_sublist):\n\tassert is_sublist([5, 7, 7, 7, 12], [5, 5]) == False", "def check(is_sublist):\n\tassert is_sublist([4, 6, 1, 9, 7], [5, 3]) == False", "def check(is_sublist):\n\tassert is_sublist([5, 2, 5, 2, 3], [6, 2]) == False", "def check(is_sublist):\n\tassert is_sublist([1, 5, 2, 1, 5], [8, 1]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 6, 2, 3, 11], [3, 8]) == False", "def check(is_sublist):\n\tassert is_sublist([1, 9, 6, 4, 12], [7, 8]) == False", "def check(is_sublist):\n\tassert is_sublist([4, 7, 3, 10, 7], [1, 4]) == False", "def check(is_sublist):\n\tassert is_sublist([4, 7, 8, 2, 10], [2, 4]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 5, 4, 9, 7], [9, 1]) == False", "def check(is_sublist):\n\tassert is_sublist([6, 4, 4, 10, 6], [7, 1]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 3, 4, 7, 4], [1, 2]) == False", "def check(is_sublist):\n\tassert is_sublist([5, 4, 4, 3, 7], [4, 10]) == False", "def check(is_sublist):\n\tassert is_sublist([2, 1, 8, 10, 6], [2, 10]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 2, 7, 1, 7], [2, 8]) == False", "def check(is_sublist):\n\tassert is_sublist([1, 2, 1, 4, 12], [1, 1]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 8, 8, 9, 3], [4, 3]) == False", "def check(is_sublist):\n\tassert is_sublist([4, 3, 5, 9, 12], [5, 5]) == False", "def check(is_sublist):\n\tassert is_sublist([1, 5, 5, 9, 2], [1, 6]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 3, 7, 1, 10], [3, 4]) == False", "def check(is_sublist):\n\tassert is_sublist([5, 2, 4, 7, 2], [1, 7]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 1, 8, 7, 11], [5, 8]) == False", "def check(is_sublist):\n\tassert is_sublist([5, 1, 2, 3, 6], [3, 5]) == False", "def check(is_sublist):\n\tassert is_sublist([2, 7, 1, 6, 6], [3, 11]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 2, 1, 1, 7], [5, 11]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 3, 3, 4, 12], [6, 9]) == False", "def check(is_sublist):\n\tassert is_sublist([4, 4, 4, 9, 11], [2, 2]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 1, 1, 1, 6], [2, 7]) == False", "def check(is_sublist):\n\tassert is_sublist([4, 1, 7, 10, 8], [6, 8]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 4, 4, 5, 4], [2, 11]) == False", "def check(is_sublist):\n\tassert is_sublist([4, 6, 5, 8, 12], [1, 3]) == False", "def check(is_sublist):\n\tassert is_sublist([2, 2, 5, 2, 11], [3, 1]) == False", "def check(is_sublist):\n\tassert is_sublist([2, 2, 5, 5, 4], [6, 1]) == False", "def check(is_sublist):\n\tassert is_sublist([2, 9, 5, 3, 6], [5, 1]) == False", "def check(is_sublist):\n\tassert is_sublist([6, 5, 4, 10, 10], [3, 5]) == False", "def check(is_sublist):\n\tassert is_sublist([1, 9, 5, 10, 8], [3, 6]) == False", "def check(is_sublist):\n\tassert is_sublist([5, 2, 2, 8, 10], [2, 3]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 8, 3, 3, 4], [1, 9]) == False", "def check(is_sublist):\n\tassert is_sublist([5, 5, 8, 5, 4], [6, 4]) == False", "def check(is_sublist):\n\tassert is_sublist([1, 6, 7, 3, 10], [2, 9]) == False", "def check(is_sublist):\n\tassert is_sublist([1, 5, 8, 8, 6], [3, 5]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 8, 3, 3, 2], [4, 8]) == False", "def check(is_sublist):\n\tassert is_sublist([6, 5, 4, 10, 3], [4, 8]) == False", "def check(is_sublist):\n\tassert is_sublist([5, 3, 8, 2, 12], [1, 6]) == False"], "scores": [0.9804, 1.0, 1.0, 1.0, 0.9804, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [false, true, true, true, false, true, true, true, true, true], "pass_test_cases_num": [100, 102, 102, 102, 100, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef is_sublist(main_list: list, sub_list: list) -> bool:\n    \"\"\"\n    Check if the sub_list is a sublist of the main_list.\n\n    Args:\n        main_list (list): The main list to search within.\n        sub_list (list): The sublist to search for.\n\n    Returns:\n        bool: True if sub_list is a sublist of main_list, False otherwise.\n    \"\"\"\n    if not sub_list:\n        return False\n\n    sub_list_length = len(sub_list)\n\n    for i in range(len(main_list) - sub_list_length + 1):\n        if main_list[i:i + sub_list_length] == sub_list:\n            return True\n\n    return False\n", "passed": true, "pass": true, "pass_num": 8, "round": 458, "mutate_method": "condense_two2one", "parent_index": 23}
