{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 266, "prompt": "Write a function to find the lateral surface area of a cube given its side length. Remember to consider edge cases, such as when the side length is zero or negative, and handle them appropriately.", "code": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA", "test_imports": [], "test_list": ["assert lateralsurface_cube(5)==100", "assert lateralsurface_cube(9)==324", "assert lateralsurface_cube(10)==400", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(3) == 36", "assert lateralsurface_cube(1) == 4", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(6) == 144", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(1) == 4", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(3) == 36", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(2) == 16", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(6) == 144", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(6) == 144", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(6) == 144", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(12) == 576", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(12) == 576", "assert lateralsurface_cube(12) == 576", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(12) == 576", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(6) == 144", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(12) == 576", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(13) == 676"], "entry_point": "lateralsurface_cube", "repair_prompt": ["Write a function lateralsurface_cube to find the lateral surface area of a cube given its side length. Remember to consider edge cases, such as when the side length is zero or negative, and handle them appropriately.\nlateralsurface_cube(5)==100\n"], "completions": ["from typing import List\n## main.py\n\nimport typing\n\ndef lateralsurface_cube(side_length: float) -> typing.Union[float, str]:\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        Union[float, str]: The lateral surface area if the input is valid, otherwise an error message.\n    \"\"\"\n    if side_length <= 0:\n        return \"Error: Side length must be a positive number.\"\n    \n    lateral_surface_area = 4 * side_length**2\n    return lateral_surface_area\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n\n    Raises:\n        ValueError: If the side length is less than or equal to 0.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be positive.\")\n    \n    return 4 * side_length * side_length\n", "from typing import List\n## main.py\n\nimport typing\n\ndef lateralsurface_cube(side_length: float) -> typing.Union[float, str]:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float or str: The lateral surface area of the cube if the input is valid,\n                      otherwise an error message.\n    \"\"\"\n    # Validate the input\n    if side_length <= 0:\n        return \"Error: side_length must be a positive number.\"\n\n    # Calculate the lateral surface area\n    lateral_surface_area = 4 * side_length ** 2\n    return lateral_surface_area\n", "from typing import List\n## main.py\n\nimport typing\n\ndef lateralsurface_cube(side_length: float) -> typing.Union[float, str]:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n        str: An error message if the side length is zero or negative.\n    \"\"\"\n    if side_length <= 0:\n        return \"Error: Side length must be positive.\"\n    \n    lateral_surface_area = 4 * side_length ** 2\n    return lateral_surface_area\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n\n    Raises:\n        ValueError: If the side_length is less than or equal to zero.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be positive.\")\n    \n    return 4 * side_length ** 2\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n\n    Raises:\n        ValueError: If the side length is less than or equal to zero.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be positive and non-zero.\")\n    \n    return 4 * side_length ** 2\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n\n    Raises:\n        ValueError: If the side length is not a positive number.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    \n    return 4 * side_length**2\n\n# Example usage:\n# try:\n#     result = lateralsurface_cube(3.0)\n#     print(f\"The lateral surface area is: {result}\")\n# except ValueError as e:\n#     print(e)\n", "from typing import List\n## main.py\n\nimport typing\n\ndef lateralsurface_cube(side_length: float) -> typing.Union[float, str]:\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        Union[float, str]: The lateral surface area of the cube if the input is valid,\n                           otherwise an error message.\n    \"\"\"\n    # Validate the input\n    if side_length <= 0:\n        return \"Error: Side length must be a positive number.\"\n    \n    # Calculate the lateral surface area\n    lateral_surface_area = 4 * side_length**2\n    return lateral_surface_area\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n\n    Raises:\n        ValueError: If the side length is less than or equal to zero.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    \n    lateral_surface_area = 4 * side_length * side_length\n    return lateral_surface_area\n", "from typing import List\n## main.py\n\nimport typing\n\ndef lateralsurface_cube(side_length: float) -> typing.Union[float, str]:\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n        str: An error message if the input is invalid.\n    \"\"\"\n    # Validate the input\n    if not isinstance(side_length, (int, float)) or side_length <= 0:\n        return \"Invalid input: side length must be a positive number.\"\n\n    # Calculate the lateral surface area\n    lateral_surface_area = 4 * side_length ** 2\n    return lateral_surface_area\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube given its side length. The function should handle edge cases such as non-positive inputs by returning an error message or appropriate response. The function should be efficient and easy to understand.\nrequirement pool:\n- The main code should accurately calculate the lateral surface area of a cube.\n- The function should handle invalid inputs gracefully.\n- The function should be optimized for simplicity and readability.\n- The function should be tested for various edge cases.\n- The function should be documented for user understanding.\nTo create a function that calculates the lateral surface area of a cube given its side length, we will use Python. The function will first validate the input to ensure it is a positive number. If the input is valid, the function will calculate the lateral surface area using the formula: 4 * side_length^2. If the input is invalid (zero or negative), the function will return an error message.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube. The function should handle edge cases such as zero or negative side lengths, providing clear and accurate results. The function should be simple and easy to use, ensuring a good user experience.\nrequirement pool:\n- Function should accurately calculate the lateral surface area of a cube\n- Function should handle edge cases such as zero or negative side lengths\n- Function should provide clear and user-friendly error messages for invalid inputs\n- Function should be simple and easy to use\n- Function should be implemented in Python\nTo create a function that calculates the lateral surface area of a cube, we will use Python due to its simplicity and readability. The function will take a single parameter, the side length of the cube, and return the lateral surface area. We will handle edge cases such as zero or negative side lengths by providing clear error messages.\n", "requirement analysis:\nThe function needs to calculate the lateral surface area of a cube given its side length. It should handle edge cases such as non-positive side lengths by returning an error or appropriate message. The function should be simple and easy to use, providing clear feedback on input validity.\nrequirement pool:\n- Function should calculate lateral surface area accurately\n- Function should handle invalid inputs gracefully\n- Ensure user-friendly interface\n- Include detailed documentation and examples\nTo create a function that calculates the lateral surface area of a cube, we will use Python, leveraging its simplicity and ease of use. The function will validate the input to ensure it is a positive number, and it will return an error message if the input is invalid. The function will use basic arithmetic operations to compute the lateral surface area, which is given by the formula 4 * side_length^2.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube. The function should handle edge cases such as when the side length is zero or negative. The function should return an error message or handle these cases gracefully. The function should be simple and easy to use.\nrequirement pool:\n- Function to calculate lateral surface area of a cube\n- Error handling for invalid side lengths\n- User-friendly interface\n- Responsive design for mobile devices\n- Enhanced error messages for clarity\nTo create a function that calculates the lateral surface area of a cube, we will use Python, leveraging its simplicity and ease of use. The function will take a single parameter, the side length of the cube, and return the lateral surface area. We will include robust error handling to manage cases where the side length is zero or negative, ensuring the function is both accurate and user-friendly.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube. The function should handle edge cases such as zero or negative side lengths, providing clear and accurate results. The function should be simple and easy to use, ensuring a good user experience.\nrequirement pool:\n- Function should accurately calculate the lateral surface area of a cube\n- Function should handle edge cases such as zero or negative side lengths\n- Function should provide clear and user-friendly error messages for invalid inputs\n- Function should be simple and easy to use\n- Function should be implemented in Python\nTo create a function that calculates the lateral surface area of a cube, we will use Python due to its simplicity and readability. The function will take a single parameter, the side length of the cube, and return the lateral surface area. We will handle edge cases such as zero or negative side lengths by providing clear error messages.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube. The function should handle edge cases such as zero or negative side lengths, providing clear and accurate results. The function should be simple and easy to use, suitable for users with varying levels of technical expertise.\nrequirement pool:\n- Function should accurately calculate the lateral surface area of a cube\n- Function should handle edge cases such as zero or negative side lengths\n- Function should provide clear and user-friendly error messages for invalid inputs\n- Function should be simple and easy to use\n- Function should be integrated into a user-friendly interface\nTo create a function that calculates the lateral surface area of a cube, we will use Python, leveraging its simplicity and ease of use. The function will handle edge cases such as zero or negative side lengths by providing clear error messages. The function will be designed to be user-friendly, ensuring that users can easily input the side length of the cube and receive the accurate lateral surface area.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube. The function should handle edge cases such as zero or negative side lengths, providing clear and accurate results. The function should be simple and easy to use, ensuring a good user experience.\nrequirement pool:\n- Function should accurately calculate the lateral surface area of a cube\n- Function should handle edge cases such as zero or negative side lengths\n- Function should provide clear error messages for invalid inputs\n- Function should be simple and easy to use\n- Function should be efficient and perform well even for large inputs\nTo create a function that calculates the lateral surface area of a cube, we will use Python, leveraging its simplicity and efficiency. The function will validate the input to ensure it is a positive number, and it will handle edge cases such as zero or negative values appropriately. The function will be designed to be user-friendly, providing clear and accurate results while ensuring robustness with edge cases.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube given its side length. The function should handle edge cases such as when the side length is zero or negative by returning an error message or handling it appropriately. The function should be simple and easy to understand, with clear documentation.\nrequirement pool:\n- The main code should accurately calculate the lateral surface area of a cube.\n- The function should handle edge cases such as zero or negative side lengths.\n- The function should be easy to understand and use.\n- The function should include clear documentation and examples.\n- The function should be optimized for simplicity and readability.\nTo create a function that calculates the lateral surface area of a cube given its side length, we will use Python. The function will first validate the input to ensure it is a positive number. If the input is valid, the function will calculate the lateral surface area using the formula 4 * side_length^2. If the input is invalid (zero or negative), the function will return an error message.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube. The function should handle edge cases such as zero or negative side lengths, providing clear and accurate results. The function should be simple and easy to use, ensuring a good user experience.\nrequirement pool:\n- Function should correctly calculate the lateral surface area of a cube\n- Function should handle edge cases such as zero or negative side lengths\n- Function should provide clear error messages for invalid inputs\n- Function should be easy to use and understand\n- Function should be efficient and perform well even for large inputs\nTo create a function that calculates the lateral surface area of a cube, we will use Python, leveraging its simplicity and efficiency. The function will handle edge cases such as zero or negative side lengths by providing clear error messages. The function will be designed to be easy to use and understand, enhancing user experience.\n", "requirement analysis:\nThe function needs to calculate the lateral surface area of a cube given its side length. It must handle edge cases such as non-positive inputs gracefully. The solution should be simple and efficient, suitable for easy integration into other projects.\nrequirement pool:\n- Function should calculate lateral surface area accurately.\n- Function should handle invalid inputs (zero or negative values) appropriately.\n- Function should be easy to understand and use.\n- Function should be optimized for simplicity and performance.\n- Include basic error handling for unexpected inputs.\nTo create a function that calculates the lateral surface area of a cube given its side length, we will use Python's built-in capabilities and ensure robustness in handling edge cases. The function will validate the input to ensure it is a positive number, and it will return an error message for invalid inputs. The solution will be simple and efficient, adhering to Python's readability and simplicity.\n"], "test": ["def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5)==100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9)==324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10)==400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(3) == 36", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(1) == 4", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(6) == 144", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(1) == 4", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(3) == 36", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(2) == 16", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(6) == 144", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(6) == 144", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(6) == 144", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(12) == 576", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(12) == 576", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(12) == 576", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(12) == 576", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(6) == 144", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(12) == 576", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\nimport typing\n\ndef lateralsurface_cube(side_length: float) -> typing.Union[float, str]:\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n        str: An error message if the input is invalid.\n    \"\"\"\n    # Validate the input\n    if not isinstance(side_length, (int, float)) or side_length <= 0:\n        return \"Invalid input: side length must be a positive number.\"\n\n    # Calculate the lateral surface area\n    lateral_surface_area = 4 * side_length ** 2\n    return lateral_surface_area\n", "passed": true, "pass": true, "pass_num": 10, "round": 757, "mutate_method": "add_1_sentence_at_end", "parent_index": 348}
