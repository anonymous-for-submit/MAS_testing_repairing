{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 63, "prompt": "Write a function to find the largest difference among possible pairs. You need to consider pairs in the given list of tuples.", "code": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ", "test_imports": [], "test_list": ["assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7", "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15", "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23", "assert max_difference([(7, 8), (2, 8), (13, 2), (5, 1)]) == 11", "assert max_difference([(3, 7), (6, 12), (15, 1), (6, 2)]) == 14", "assert max_difference([(1, 3), (6, 11), (10, 2), (6, 4)]) == 8", "assert max_difference([(3, 5), (4, 10), (14, 8), (5, 6)]) == 6", "assert max_difference([(5, 6), (4, 9), (8, 3), (3, 6)]) == 5", "assert max_difference([(2, 6), (6, 6), (13, 2), (3, 4)]) == 11", "assert max_difference([(2, 4), (1, 7), (7, 2), (3, 7)]) == 6", "assert max_difference([(1, 8), (2, 12), (7, 4), (2, 3)]) == 10", "assert max_difference([(3, 5), (4, 10), (11, 8), (2, 7)]) == 6", "assert max_difference([(4, 1), (6, 7), (7, 2), (6, 3)]) == 5", "assert max_difference([(1, 10), (6, 12), (7, 3), (4, 2)]) == 9", "assert max_difference([(7, 1), (1, 9), (8, 5), (2, 6)]) == 8", "assert max_difference([(3, 2), (1, 12), (13, 2), (1, 5)]) == 11", "assert max_difference([(2, 7), (4, 2), (10, 8), (6, 3)]) == 5", "assert max_difference([(6, 8), (4, 8), (9, 6), (5, 3)]) == 4", "assert max_difference([(5, 10), (1, 2), (13, 7), (4, 4)]) == 6", "assert max_difference([(1, 8), (5, 2), (13, 4), (2, 7)]) == 9", "assert max_difference([(4, 1), (4, 7), (8, 2), (3, 1)]) == 6", "assert max_difference([(6, 1), (4, 11), (9, 2), (2, 4)]) == 7", "assert max_difference([(5, 2), (4, 9), (11, 1), (6, 6)]) == 10", "assert max_difference([(5, 5), (2, 6), (6, 4), (1, 5)]) == 4", "assert max_difference([(3, 8), (4, 5), (12, 2), (2, 7)]) == 10", "assert max_difference([(4, 5), (6, 6), (12, 8), (2, 3)]) == 4", "assert max_difference([(8, 10), (5, 9), (15, 4), (2, 2)]) == 11", "assert max_difference([(2, 9), (4, 8), (11, 5), (1, 2)]) == 7", "assert max_difference([(2, 9), (1, 12), (13, 1), (1, 7)]) == 12", "assert max_difference([(3, 8), (6, 8), (13, 4), (6, 1)]) == 9", "assert max_difference([(7, 2), (5, 5), (12, 5), (5, 3)]) == 7", "assert max_difference([(6, 8), (4, 3), (10, 6), (3, 2)]) == 4", "assert max_difference([(3, 5), (2, 8), (5, 3), (5, 2)]) == 6", "assert max_difference([(7, 5), (4, 12), (15, 1), (1, 2)]) == 14", "assert max_difference([(3, 5), (3, 12), (13, 3), (2, 3)]) == 10", "assert max_difference([(2, 7), (5, 5), (10, 3), (1, 7)]) == 7", "assert max_difference([(5, 10), (2, 19), (7, 8), (8, 12)]) == 17", "assert max_difference([(7, 1), (7, 17), (10, 13), (11, 13)]) == 10", "assert max_difference([(8, 2), (3, 19), (11, 9), (12, 16)]) == 16", "assert max_difference([(7, 9), (7, 17), (10, 18), (7, 7)]) == 10", "assert max_difference([(4, 4), (5, 22), (9, 8), (6, 8)]) == 17", "assert max_difference([(6, 6), (5, 18), (11, 11), (9, 16)]) == 13", "assert max_difference([(5, 2), (3, 16), (5, 11), (9, 10)]) == 13", "assert max_difference([(6, 3), (1, 12), (10, 8), (16, 12)]) == 11", "assert max_difference([(7, 7), (3, 12), (8, 16), (16, 17)]) == 9", "assert max_difference([(8, 7), (5, 19), (12, 11), (13, 11)]) == 14", "assert max_difference([(8, 4), (3, 17), (6, 10), (10, 11)]) == 14", "assert max_difference([(1, 4), (5, 19), (9, 12), (10, 17)]) == 14", "assert max_difference([(3, 3), (5, 22), (5, 9), (14, 15)]) == 17", "assert max_difference([(4, 4), (7, 18), (4, 11), (9, 16)]) == 11", "assert max_difference([(2, 9), (1, 14), (13, 12), (14, 16)]) == 13", "assert max_difference([(3, 2), (2, 16), (8, 12), (6, 15)]) == 14", "assert max_difference([(4, 8), (3, 22), (5, 8), (13, 16)]) == 19", "assert max_difference([(9, 2), (1, 20), (9, 16), (8, 11)]) == 19", "assert max_difference([(4, 6), (5, 18), (8, 13), (6, 14)]) == 13", "assert max_difference([(9, 5), (4, 17), (11, 15), (16, 8)]) == 13", "assert max_difference([(1, 10), (4, 21), (9, 12), (12, 13)]) == 17", "assert max_difference([(6, 9), (6, 21), (12, 13), (9, 9)]) == 15", "assert max_difference([(1, 7), (2, 12), (11, 9), (13, 14)]) == 10", "assert max_difference([(3, 9), (4, 12), (8, 17), (16, 8)]) == 9", "assert max_difference([(1, 8), (3, 17), (6, 18), (8, 16)]) == 14", "assert max_difference([(5, 10), (3, 12), (7, 8), (15, 9)]) == 9", "assert max_difference([(4, 5), (7, 13), (12, 8), (13, 8)]) == 6", "assert max_difference([(1, 2), (4, 22), (6, 18), (8, 12)]) == 18", "assert max_difference([(2, 10), (3, 21), (12, 8), (14, 15)]) == 18", "assert max_difference([(3, 6), (2, 15), (9, 11), (8, 13)]) == 13", "assert max_difference([(3, 10), (5, 19), (14, 17), (13, 11)]) == 14", "assert max_difference([(7, 11), (6, 15), (11, 16), (12, 7)]) == 9", "assert max_difference([(1, 5), (2, 18), (13, 17), (16, 12)]) == 16", "assert max_difference([(7, 35), (25, 23), (13, 23), (39, 23)]) == 28", "assert max_difference([(12, 32), (19, 25), (11, 21), (46, 23)]) == 23", "assert max_difference([(13, 36), (18, 24), (9, 27), (42, 20)]) == 23", "assert max_difference([(13, 37), (21, 26), (18, 21), (43, 23)]) == 24", "assert max_difference([(16, 39), (17, 32), (16, 18), (43, 24)]) == 23", "assert max_difference([(8, 36), (26, 24), (17, 26), (44, 19)]) == 28", "assert max_difference([(9, 38), (24, 23), (14, 27), (40, 27)]) == 29", "assert max_difference([(16, 38), (25, 28), (16, 18), (42, 18)]) == 24", "assert max_difference([(11, 39), (25, 29), (8, 24), (43, 17)]) == 28", "assert max_difference([(13, 37), (18, 28), (13, 20), (40, 24)]) == 24", "assert max_difference([(13, 30), (20, 22), (9, 20), (45, 18)]) == 27", "assert max_difference([(11, 36), (23, 24), (17, 19), (46, 24)]) == 25", "assert max_difference([(17, 33), (22, 29), (17, 23), (42, 23)]) == 19", "assert max_difference([(11, 34), (16, 27), (16, 26), (42, 22)]) == 23", "assert max_difference([(16, 40), (26, 30), (18, 24), (37, 18)]) == 24", "assert max_difference([(15, 32), (17, 25), (9, 24), (41, 19)]) == 22", "assert max_difference([(12, 37), (21, 29), (13, 25), (36, 24)]) == 25", "assert max_difference([(14, 31), (19, 24), (15, 20), (45, 20)]) == 25", "assert max_difference([(16, 33), (22, 26), (11, 18), (38, 23)]) == 17", "assert max_difference([(14, 31), (24, 23), (16, 21), (44, 21)]) == 23", "assert max_difference([(10, 34), (23, 25), (11, 24), (38, 23)]) == 24", "assert max_difference([(10, 34), (25, 31), (13, 28), (45, 17)]) == 28", "assert max_difference([(8, 30), (16, 22), (10, 22), (38, 17)]) == 22", "assert max_difference([(8, 40), (19, 32), (8, 21), (38, 27)]) == 32", "assert max_difference([(17, 37), (20, 26), (18, 21), (40, 24)]) == 20", "assert max_difference([(16, 32), (18, 25), (18, 25), (38, 22)]) == 16", "assert max_difference([(8, 40), (18, 27), (17, 18), (40, 23)]) == 32", "assert max_difference([(10, 36), (25, 28), (10, 25), (37, 20)]) == 26", "assert max_difference([(10, 30), (26, 28), (11, 20), (45, 19)]) == 26", "assert max_difference([(16, 30), (24, 23), (9, 19), (40, 18)]) == 22", "assert max_difference([(13, 35), (21, 26), (18, 19), (46, 25)]) == 22", "assert max_difference([(13, 38), (26, 26), (10, 26), (44, 26)]) == 25", "assert max_difference([(11, 33), (22, 27), (14, 21), (42, 23)]) == 22"], "entry_point": "max_difference", "repair_prompt": ["Write a function max_difference to find the largest difference among possible pairs. You need to consider pairs in the given list of tuples.\nmax_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n"], "completions": ["from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(pairs: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum difference between the maximum and minimum values in each tuple of the list.\n    \n    Args:\n        pairs (List[Tuple[int, int]]): A list of tuples, each containing two integers.\n    \n    Returns:\n        int: The maximum difference found between the maximum and minimum values in the tuples.\n    \"\"\"\n    max_diff = 0\n    for pair in pairs:\n        if pair[0] > pair[1]:\n            diff = pair[0] - pair[1]\n        else:\n            diff = pair[1] - pair[0]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n", "from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(pairs: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum difference between the elements of pairs in a list of tuples.\n    \n    Args:\n        pairs (List[Tuple[int, int]]): A list of tuples, where each tuple contains two integers.\n    \n    Returns:\n        int: The maximum difference between the elements of the pairs.\n    \"\"\"\n    max_diff = 0\n    \n    for pair in pairs:\n        if len(pair) != 2:\n            raise ValueError(\"Each tuple must contain exactly two elements.\")\n        max_val = max(pair)\n        min_val = min(pair)\n        diff = max_val - min_val\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n", "from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(pairs: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum difference between the elements of pairs in a list of tuples.\n\n    Args:\n        pairs (List[Tuple[int, int]]): A list of tuples, where each tuple contains two integers.\n\n    Returns:\n        int: The maximum difference between the elements of the pairs.\n    \"\"\"\n    max_diff = 0\n    for pair in pairs:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n", "from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(pairs: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum difference between the elements of pairs in a list of tuples.\n    \n    Args:\n        pairs (List[Tuple[int, int]]): A list of tuples, each containing two integers.\n        \n    Returns:\n        int: The maximum difference between the elements of the pairs.\n    \"\"\"\n    max_diff = 0\n    for pair in pairs:\n        if len(pair) != 2:\n            raise ValueError(\"Each tuple must contain exactly two elements.\")\n        max_val = max(pair)\n        min_val = min(pair)\n        diff = max_val - min_val\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n", "from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(pairs: List[Tuple[int, int]]) -> int:\n    max_diff = 0\n    for pair in pairs:\n        if len(pair) == 2 and all(isinstance(num, int) for num in pair):\n            max_val = max(pair)\n            min_val = min(pair)\n            diff = max_val - min_val\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n", "from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(pairs: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum difference between the elements of pairs in a list of tuples.\n\n    Args:\n        pairs (List[Tuple[int, int]]): A list of tuples, where each tuple contains two integers.\n\n    Returns:\n        int: The maximum difference between the elements of the pairs.\n    \"\"\"\n    if not pairs:\n        return 0\n\n    max_diff = 0\n    for pair in pairs:\n        if len(pair) != 2:\n            raise ValueError(\"Each tuple must contain exactly two elements.\")\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff\n", "from typing import List\n## main.py\n\ndef max_difference(pairs: list[tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum difference between the elements of pairs in a list of tuples.\n\n    Args:\n        pairs (list[tuple[int, int]]): A list of tuples where each tuple contains two integers.\n\n    Returns:\n        int: The maximum difference between the elements of the pairs.\n    \"\"\"\n    if not pairs:\n        return 0\n\n    max_diff = 0\n    for pair in pairs:\n        if len(pair) != 2:\n            raise ValueError(\"Each tuple must contain exactly two elements.\")\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff\n", "from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(pairs: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum difference between the maximum and minimum values in each tuple of the given list.\n    \n    Args:\n        pairs (List[Tuple[int, int]]): A list of tuples, each containing two integers.\n    \n    Returns:\n        int: The maximum difference found among all tuples.\n    \"\"\"\n    if not pairs:\n        raise ValueError(\"The input list is empty.\")\n    \n    max_diff = 0\n    \n    for pair in pairs:\n        if len(pair) != 2:\n            raise ValueError(\"Each tuple must contain exactly two integers.\")\n        if not all(isinstance(num, int) for num in pair):\n            raise ValueError(\"Each tuple must contain integers.\")\n        \n        current_diff = max(pair) - min(pair)\n        if current_diff > max_diff:\n            max_diff = current_diff\n    \n    return max_diff\n", "from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(pairs: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum difference between the elements of pairs in a list of tuples.\n\n    Args:\n        pairs (List[Tuple[int, int]]): A list of tuples, where each tuple contains two integers.\n\n    Returns:\n        int: The maximum difference between the elements of the pairs.\n    \"\"\"\n    max_diff = 0\n    for pair in pairs:\n        if len(pair) != 2:\n            raise ValueError(\"Each tuple must contain exactly two elements.\")\n        diff = max(pair) - min(pair)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n", "from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(pairs: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum difference between the elements of pairs in a list of tuples.\n\n    Args:\n        pairs (List[Tuple[int, int]]): A list of tuples, where each tuple contains two integers.\n\n    Returns:\n        int: The maximum difference between the elements of the pairs.\n    \"\"\"\n    max_diff = 0\n    for pair in pairs:\n        if len(pair) != 2:\n            raise ValueError(\"Each tuple must contain exactly two elements.\")\n        diff = max(pair) - min(pair)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"], "plans": ["requirement analysis:\nThe function 'max_difference' is designed to find the largest difference between the elements of pairs in a list of tuples. This is a fundamental requirement for any game or application that involves pairs of values. The function should be efficient and handle different lengths of tuples gracefully. It should also be integrated into a larger system where it can be easily used to analyze data.\nrequirement pool:\n- The main code for max_difference should be efficient and handle different lengths of tuples.\n- The function should clearly indicate the largest difference between pairs in a list of tuples.\n- The function should be integrated into a larger system for easy use.\n- The UI should be clean and intuitive, making it easy for users to understand and use the function.\n- The function should be tested for edge cases, such as empty lists or lists with non-numeric values.\nTo implement the 'max_difference' function efficiently, we will use Python's built-in capabilities and leverage the standard library to handle the list of tuples. The function will iterate through each tuple in the list, calculate the difference between the maximum and minimum values, and keep track of the largest difference found. This approach ensures simplicity and efficiency.\n", "requirement analysis:\nThe requirement is to create a function that calculates the maximum difference between the elements of pairs in a list of tuples. The function should be efficient and handle different lengths of tuples gracefully. The output should be accurate and fast.\nrequirement pool:\n- The function should accurately calculate the maximum difference between pairs.\n- The function should handle tuples of different lengths.\n- The function should be optimized for performance.\n- The function should provide clear and user-friendly error messages.\n- The function should be easy to integrate into existing Python projects.\nTo create a function that calculates the maximum difference between the elements of pairs in a list of tuples, we will use Python's built-in capabilities and leverage the simplicity and efficiency of the language. The function will iterate through each tuple in the list, calculate the difference between the maximum and minimum values, and keep track of the largest difference found. This approach ensures both simplicity and efficiency, aligning with the goal of creating an easy-to-understand and performant function.\n", "requirement analysis:\nThe requirement is to create a function that calculates the maximum difference between the elements of pairs in a list of tuples. This is a straightforward task that involves iterating through the list, calculating the difference between the elements of each pair, and returning the maximum difference found.\nrequirement pool:\n- The main code should be efficient and handle large lists of tuples.\n- The function should clearly return the largest difference among the pairs.\n- Ensure the function is user-friendly and easy to understand.\n- Include basic error handling for unexpected input.\n- Optimize the function for performance on large datasets.\nTo create a function that calculates the maximum difference between the elements of pairs in a list of tuples, we will use Python's built-in capabilities and ensure efficiency. The function will iterate through the list, calculate the difference between the elements of each pair, and return the maximum difference found. This approach will be simple and rely on basic Python functions to ensure clarity and ease of use.\n", "requirement analysis:\nThe requirement is to create a function that calculates the maximum difference between the elements of pairs in a list of tuples. The function should be efficient and handle various input scenarios, including tuples of different lengths. The function should be simple to use and provide clear results.\nrequirement pool:\n- The main code should efficiently calculate the maximum difference between pairs in a list of tuples.\n- The function should handle tuples of different lengths.\n- The user interface should be simple and intuitive.\n- The function should provide clear and concise output.\n- The product should be tested for various edge cases to ensure robustness.\nTo create the function `max_difference` that calculates the maximum difference between the elements of pairs in a list of tuples, we will use Python's built-in capabilities and standard libraries. The approach will involve iterating through each tuple in the list, calculating the difference between the maximum and minimum values in each tuple, and then finding the maximum difference among all tuples.\n", "requirement analysis:\nThe requirement is to create a function that calculates the maximum difference between the elements of pairs in a list of tuples. The function should be efficient and handle tuples of different lengths. The solution should be simple and easy to understand, ensuring it meets the user's needs effectively.\nrequirement pool:\n- The main code should be efficient in calculating the maximum difference.\n- The function should handle tuples of different lengths gracefully.\n- The user interface should be simple and intuitive.\n- The function should be easy to understand and use.\n- The product should be visually appealing and responsive.\nTo create a function that calculates the maximum difference between the elements of pairs in a list of tuples, we will use Python's built-in capabilities and ensure efficiency. The function will iterate through each tuple, calculate the difference between the maximum and minimum values, and keep track of the largest difference found. This approach will handle tuples of different lengths by ensuring that the function only considers pairs of numbers, ignoring tuples with non-numeric elements.\n", "requirement analysis:\nThe requirement is to create a function that calculates the maximum difference between the elements of pairs in a list of tuples. This is a straightforward task that involves iterating through the list, calculating the difference between the first and second elements of each tuple, and keeping track of the maximum difference found.\nrequirement pool:\n- The main code should be efficient and clear.\n- The function should handle lists of tuples correctly.\n- Ensure the function is optimized for performance.\n- Include error handling for unexpected input.\n- Implement the function in a way that is easy to integrate into existing projects.\nTo create a function that calculates the maximum difference between the elements of pairs in a list of tuples, we will use Python's built-in capabilities and standard libraries. The function will iterate through the list, calculate the difference between the first and second elements of each tuple, and keep track of the maximum difference found. This approach ensures clarity and efficiency.\n", "requirement analysis:\nThe requirement is to create a function that calculates the maximum difference between the elements of pairs in a list of tuples. The function should be efficient and handle tuples of different lengths. The solution should be simple and easy to understand, providing a clear output for the user.\nrequirement pool:\n- The main code should efficiently calculate the maximum difference between pairs in a list of tuples.\n- The function should handle tuples of different lengths gracefully.\n- The output should be clear and easy to understand.\n- The function should be simple and easy to use.\n- The UI should be clean and intuitive.\nTo create the function `max_difference` that calculates the maximum difference between the elements of pairs in a list of tuples, we will use Python's built-in capabilities and standard libraries. The approach will be straightforward, focusing on iterating through the list of tuples to find the maximum difference.\n", "requirement analysis:\nThe function needs to be able to handle lists of tuples, find the maximum difference between the elements of each tuple, and return that difference. The function should be clear and efficient, handling edge cases like empty lists or lists with non-numeric values gracefully.\nrequirement pool:\n- The function should correctly calculate the maximum difference for a list of tuples\n- The function should handle edge cases gracefully\n- The function should be optimized for performance\nTo create the function `max_difference` that finds the largest difference among possible pairs from a list of tuples, we will use Python's built-in capabilities and ensure it handles edge cases gracefully. The function will iterate through each tuple, calculate the difference between its maximum and minimum values, and return the maximum difference found.\n", "requirement analysis:\nThe requirement is to create a function that calculates the maximum difference between the elements of pairs in a list of tuples. The function should be efficient and handle different lengths of tuples gracefully. The solution should be simple and easy to understand, providing a clear output for the user.\nrequirement pool:\n- The main code should efficiently calculate the maximum difference between pairs in a list of tuples.\n- The function should handle tuples of different lengths gracefully.\n- The output should be clear and easy to understand.\nTo create a function that calculates the maximum difference between the elements of pairs in a list of tuples, we will use Python's built-in capabilities and ensure the function is efficient and handles different lengths of tuples gracefully. The function will iterate through each tuple, calculate the difference between the maximum and minimum values, and keep track of the largest difference found.\n", "requirement analysis:\nThe requirement is to create a function that calculates the maximum difference between the elements of pairs in a list of tuples. The function should be efficient and handle tuples of different lengths. The solution should be simple and easy to understand, ensuring it meets the user's needs effectively.\nrequirement pool:\n- The main code should be efficient in calculating the maximum difference.\n- The function should handle tuples of different lengths gracefully.\n- The user interface should be simple and intuitive.\n- The function should be easy to understand and use.\n- The product should be visually appealing and responsive.\nTo create a function that calculates the maximum difference between the elements of pairs in a list of tuples, we will use Python's built-in capabilities and ensure the function is efficient and handles tuples of different lengths gracefully. The function will iterate through each tuple, calculate the difference between the maximum and minimum values, and keep track of the largest difference found.\n"], "test": ["def check(max_difference):\n\tassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7", "def check(max_difference):\n\tassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15", "def check(max_difference):\n\tassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23", "def check(max_difference):\n\tassert max_difference([(7, 8), (2, 8), (13, 2), (5, 1)]) == 11", "def check(max_difference):\n\tassert max_difference([(3, 7), (6, 12), (15, 1), (6, 2)]) == 14", "def check(max_difference):\n\tassert max_difference([(1, 3), (6, 11), (10, 2), (6, 4)]) == 8", "def check(max_difference):\n\tassert max_difference([(3, 5), (4, 10), (14, 8), (5, 6)]) == 6", "def check(max_difference):\n\tassert max_difference([(5, 6), (4, 9), (8, 3), (3, 6)]) == 5", "def check(max_difference):\n\tassert max_difference([(2, 6), (6, 6), (13, 2), (3, 4)]) == 11", "def check(max_difference):\n\tassert max_difference([(2, 4), (1, 7), (7, 2), (3, 7)]) == 6", "def check(max_difference):\n\tassert max_difference([(1, 8), (2, 12), (7, 4), (2, 3)]) == 10", "def check(max_difference):\n\tassert max_difference([(3, 5), (4, 10), (11, 8), (2, 7)]) == 6", "def check(max_difference):\n\tassert max_difference([(4, 1), (6, 7), (7, 2), (6, 3)]) == 5", "def check(max_difference):\n\tassert max_difference([(1, 10), (6, 12), (7, 3), (4, 2)]) == 9", "def check(max_difference):\n\tassert max_difference([(7, 1), (1, 9), (8, 5), (2, 6)]) == 8", "def check(max_difference):\n\tassert max_difference([(3, 2), (1, 12), (13, 2), (1, 5)]) == 11", "def check(max_difference):\n\tassert max_difference([(2, 7), (4, 2), (10, 8), (6, 3)]) == 5", "def check(max_difference):\n\tassert max_difference([(6, 8), (4, 8), (9, 6), (5, 3)]) == 4", "def check(max_difference):\n\tassert max_difference([(5, 10), (1, 2), (13, 7), (4, 4)]) == 6", "def check(max_difference):\n\tassert max_difference([(1, 8), (5, 2), (13, 4), (2, 7)]) == 9", "def check(max_difference):\n\tassert max_difference([(4, 1), (4, 7), (8, 2), (3, 1)]) == 6", "def check(max_difference):\n\tassert max_difference([(6, 1), (4, 11), (9, 2), (2, 4)]) == 7", "def check(max_difference):\n\tassert max_difference([(5, 2), (4, 9), (11, 1), (6, 6)]) == 10", "def check(max_difference):\n\tassert max_difference([(5, 5), (2, 6), (6, 4), (1, 5)]) == 4", "def check(max_difference):\n\tassert max_difference([(3, 8), (4, 5), (12, 2), (2, 7)]) == 10", "def check(max_difference):\n\tassert max_difference([(4, 5), (6, 6), (12, 8), (2, 3)]) == 4", "def check(max_difference):\n\tassert max_difference([(8, 10), (5, 9), (15, 4), (2, 2)]) == 11", "def check(max_difference):\n\tassert max_difference([(2, 9), (4, 8), (11, 5), (1, 2)]) == 7", "def check(max_difference):\n\tassert max_difference([(2, 9), (1, 12), (13, 1), (1, 7)]) == 12", "def check(max_difference):\n\tassert max_difference([(3, 8), (6, 8), (13, 4), (6, 1)]) == 9", "def check(max_difference):\n\tassert max_difference([(7, 2), (5, 5), (12, 5), (5, 3)]) == 7", "def check(max_difference):\n\tassert max_difference([(6, 8), (4, 3), (10, 6), (3, 2)]) == 4", "def check(max_difference):\n\tassert max_difference([(3, 5), (2, 8), (5, 3), (5, 2)]) == 6", "def check(max_difference):\n\tassert max_difference([(7, 5), (4, 12), (15, 1), (1, 2)]) == 14", "def check(max_difference):\n\tassert max_difference([(3, 5), (3, 12), (13, 3), (2, 3)]) == 10", "def check(max_difference):\n\tassert max_difference([(2, 7), (5, 5), (10, 3), (1, 7)]) == 7", "def check(max_difference):\n\tassert max_difference([(5, 10), (2, 19), (7, 8), (8, 12)]) == 17", "def check(max_difference):\n\tassert max_difference([(7, 1), (7, 17), (10, 13), (11, 13)]) == 10", "def check(max_difference):\n\tassert max_difference([(8, 2), (3, 19), (11, 9), (12, 16)]) == 16", "def check(max_difference):\n\tassert max_difference([(7, 9), (7, 17), (10, 18), (7, 7)]) == 10", "def check(max_difference):\n\tassert max_difference([(4, 4), (5, 22), (9, 8), (6, 8)]) == 17", "def check(max_difference):\n\tassert max_difference([(6, 6), (5, 18), (11, 11), (9, 16)]) == 13", "def check(max_difference):\n\tassert max_difference([(5, 2), (3, 16), (5, 11), (9, 10)]) == 13", "def check(max_difference):\n\tassert max_difference([(6, 3), (1, 12), (10, 8), (16, 12)]) == 11", "def check(max_difference):\n\tassert max_difference([(7, 7), (3, 12), (8, 16), (16, 17)]) == 9", "def check(max_difference):\n\tassert max_difference([(8, 7), (5, 19), (12, 11), (13, 11)]) == 14", "def check(max_difference):\n\tassert max_difference([(8, 4), (3, 17), (6, 10), (10, 11)]) == 14", "def check(max_difference):\n\tassert max_difference([(1, 4), (5, 19), (9, 12), (10, 17)]) == 14", "def check(max_difference):\n\tassert max_difference([(3, 3), (5, 22), (5, 9), (14, 15)]) == 17", "def check(max_difference):\n\tassert max_difference([(4, 4), (7, 18), (4, 11), (9, 16)]) == 11", "def check(max_difference):\n\tassert max_difference([(2, 9), (1, 14), (13, 12), (14, 16)]) == 13", "def check(max_difference):\n\tassert max_difference([(3, 2), (2, 16), (8, 12), (6, 15)]) == 14", "def check(max_difference):\n\tassert max_difference([(4, 8), (3, 22), (5, 8), (13, 16)]) == 19", "def check(max_difference):\n\tassert max_difference([(9, 2), (1, 20), (9, 16), (8, 11)]) == 19", "def check(max_difference):\n\tassert max_difference([(4, 6), (5, 18), (8, 13), (6, 14)]) == 13", "def check(max_difference):\n\tassert max_difference([(9, 5), (4, 17), (11, 15), (16, 8)]) == 13", "def check(max_difference):\n\tassert max_difference([(1, 10), (4, 21), (9, 12), (12, 13)]) == 17", "def check(max_difference):\n\tassert max_difference([(6, 9), (6, 21), (12, 13), (9, 9)]) == 15", "def check(max_difference):\n\tassert max_difference([(1, 7), (2, 12), (11, 9), (13, 14)]) == 10", "def check(max_difference):\n\tassert max_difference([(3, 9), (4, 12), (8, 17), (16, 8)]) == 9", "def check(max_difference):\n\tassert max_difference([(1, 8), (3, 17), (6, 18), (8, 16)]) == 14", "def check(max_difference):\n\tassert max_difference([(5, 10), (3, 12), (7, 8), (15, 9)]) == 9", "def check(max_difference):\n\tassert max_difference([(4, 5), (7, 13), (12, 8), (13, 8)]) == 6", "def check(max_difference):\n\tassert max_difference([(1, 2), (4, 22), (6, 18), (8, 12)]) == 18", "def check(max_difference):\n\tassert max_difference([(2, 10), (3, 21), (12, 8), (14, 15)]) == 18", "def check(max_difference):\n\tassert max_difference([(3, 6), (2, 15), (9, 11), (8, 13)]) == 13", "def check(max_difference):\n\tassert max_difference([(3, 10), (5, 19), (14, 17), (13, 11)]) == 14", "def check(max_difference):\n\tassert max_difference([(7, 11), (6, 15), (11, 16), (12, 7)]) == 9", "def check(max_difference):\n\tassert max_difference([(1, 5), (2, 18), (13, 17), (16, 12)]) == 16", "def check(max_difference):\n\tassert max_difference([(7, 35), (25, 23), (13, 23), (39, 23)]) == 28", "def check(max_difference):\n\tassert max_difference([(12, 32), (19, 25), (11, 21), (46, 23)]) == 23", "def check(max_difference):\n\tassert max_difference([(13, 36), (18, 24), (9, 27), (42, 20)]) == 23", "def check(max_difference):\n\tassert max_difference([(13, 37), (21, 26), (18, 21), (43, 23)]) == 24", "def check(max_difference):\n\tassert max_difference([(16, 39), (17, 32), (16, 18), (43, 24)]) == 23", "def check(max_difference):\n\tassert max_difference([(8, 36), (26, 24), (17, 26), (44, 19)]) == 28", "def check(max_difference):\n\tassert max_difference([(9, 38), (24, 23), (14, 27), (40, 27)]) == 29", "def check(max_difference):\n\tassert max_difference([(16, 38), (25, 28), (16, 18), (42, 18)]) == 24", "def check(max_difference):\n\tassert max_difference([(11, 39), (25, 29), (8, 24), (43, 17)]) == 28", "def check(max_difference):\n\tassert max_difference([(13, 37), (18, 28), (13, 20), (40, 24)]) == 24", "def check(max_difference):\n\tassert max_difference([(13, 30), (20, 22), (9, 20), (45, 18)]) == 27", "def check(max_difference):\n\tassert max_difference([(11, 36), (23, 24), (17, 19), (46, 24)]) == 25", "def check(max_difference):\n\tassert max_difference([(17, 33), (22, 29), (17, 23), (42, 23)]) == 19", "def check(max_difference):\n\tassert max_difference([(11, 34), (16, 27), (16, 26), (42, 22)]) == 23", "def check(max_difference):\n\tassert max_difference([(16, 40), (26, 30), (18, 24), (37, 18)]) == 24", "def check(max_difference):\n\tassert max_difference([(15, 32), (17, 25), (9, 24), (41, 19)]) == 22", "def check(max_difference):\n\tassert max_difference([(12, 37), (21, 29), (13, 25), (36, 24)]) == 25", "def check(max_difference):\n\tassert max_difference([(14, 31), (19, 24), (15, 20), (45, 20)]) == 25", "def check(max_difference):\n\tassert max_difference([(16, 33), (22, 26), (11, 18), (38, 23)]) == 17", "def check(max_difference):\n\tassert max_difference([(14, 31), (24, 23), (16, 21), (44, 21)]) == 23", "def check(max_difference):\n\tassert max_difference([(10, 34), (23, 25), (11, 24), (38, 23)]) == 24", "def check(max_difference):\n\tassert max_difference([(10, 34), (25, 31), (13, 28), (45, 17)]) == 28", "def check(max_difference):\n\tassert max_difference([(8, 30), (16, 22), (10, 22), (38, 17)]) == 22", "def check(max_difference):\n\tassert max_difference([(8, 40), (19, 32), (8, 21), (38, 27)]) == 32", "def check(max_difference):\n\tassert max_difference([(17, 37), (20, 26), (18, 21), (40, 24)]) == 20", "def check(max_difference):\n\tassert max_difference([(16, 32), (18, 25), (18, 25), (38, 22)]) == 16", "def check(max_difference):\n\tassert max_difference([(8, 40), (18, 27), (17, 18), (40, 23)]) == 32", "def check(max_difference):\n\tassert max_difference([(10, 36), (25, 28), (10, 25), (37, 20)]) == 26", "def check(max_difference):\n\tassert max_difference([(10, 30), (26, 28), (11, 20), (45, 19)]) == 26", "def check(max_difference):\n\tassert max_difference([(16, 30), (24, 23), (9, 19), (40, 18)]) == 22", "def check(max_difference):\n\tassert max_difference([(13, 35), (21, 26), (18, 19), (46, 25)]) == 22", "def check(max_difference):\n\tassert max_difference([(13, 38), (26, 26), (10, 26), (44, 26)]) == 25", "def check(max_difference):\n\tassert max_difference([(11, 33), (22, 27), (14, 21), (42, 23)]) == 22"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(pairs: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum difference between the elements of pairs in a list of tuples.\n\n    Args:\n        pairs (List[Tuple[int, int]]): A list of tuples, where each tuple contains two integers.\n\n    Returns:\n        int: The maximum difference between the elements of the pairs.\n    \"\"\"\n    max_diff = 0\n    for pair in pairs:\n        if len(pair) != 2:\n            raise ValueError(\"Each tuple must contain exactly two elements.\")\n        diff = max(pair) - min(pair)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n", "passed": true, "pass": true, "pass_num": 10, "round": 678, "mutate_method": "expand_one2two", "parent_index": 541}
