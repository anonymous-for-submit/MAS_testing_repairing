{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 728, "prompt": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].", "code": "def sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list", "test_imports": [], "test_list": ["assert sum_list([10,20,30],[15,25,35])==[25,45,65]", "assert sum_list([1,2,3],[5,6,7])==[6,8,10]", "assert sum_list([15,20,30],[15,45,75])==[30,65,105]", "assert sum_list([11, 19, 31], [20, 29, 39]) == [31, 48, 70]", "assert sum_list([15, 19, 31], [18, 26, 30]) == [33, 45, 61]", "assert sum_list([11, 23, 29], [15, 20, 40]) == [26, 43, 69]", "assert sum_list([11, 25, 35], [13, 27, 32]) == [24, 52, 67]", "assert sum_list([6, 20, 25], [11, 29, 36]) == [17, 49, 61]", "assert sum_list([10, 18, 26], [11, 27, 30]) == [21, 45, 56]", "assert sum_list([6, 16, 31], [19, 21, 36]) == [25, 37, 67]", "assert sum_list([8, 17, 30], [17, 30, 40]) == [25, 47, 70]", "assert sum_list([12, 22, 26], [17, 27, 32]) == [29, 49, 58]", "assert sum_list([12, 20, 34], [14, 22, 37]) == [26, 42, 71]", "assert sum_list([8, 21, 26], [15, 23, 36]) == [23, 44, 62]", "assert sum_list([5, 19, 27], [13, 22, 39]) == [18, 41, 66]", "assert sum_list([6, 15, 25], [15, 28, 32]) == [21, 43, 57]", "assert sum_list([8, 22, 27], [11, 28, 35]) == [19, 50, 62]", "assert sum_list([5, 25, 33], [13, 30, 38]) == [18, 55, 71]", "assert sum_list([12, 18, 34], [17, 23, 36]) == [29, 41, 70]", "assert sum_list([5, 20, 30], [20, 28, 39]) == [25, 48, 69]", "assert sum_list([12, 21, 30], [15, 22, 36]) == [27, 43, 66]", "assert sum_list([14, 15, 27], [18, 25, 36]) == [32, 40, 63]", "assert sum_list([7, 15, 33], [16, 30, 35]) == [23, 45, 68]", "assert sum_list([7, 22, 33], [12, 27, 30]) == [19, 49, 63]", "assert sum_list([13, 25, 35], [18, 21, 35]) == [31, 46, 70]", "assert sum_list([9, 23, 35], [11, 28, 35]) == [20, 51, 70]", "assert sum_list([14, 24, 27], [11, 26, 37]) == [25, 50, 64]", "assert sum_list([9, 24, 34], [20, 23, 35]) == [29, 47, 69]", "assert sum_list([11, 24, 33], [14, 29, 31]) == [25, 53, 64]", "assert sum_list([13, 24, 28], [10, 25, 34]) == [23, 49, 62]", "assert sum_list([15, 21, 28], [10, 20, 30]) == [25, 41, 58]", "assert sum_list([9, 17, 28], [17, 22, 32]) == [26, 39, 60]", "assert sum_list([7, 25, 28], [13, 29, 31]) == [20, 54, 59]", "assert sum_list([6, 25, 26], [12, 26, 34]) == [18, 51, 60]", "assert sum_list([9, 21, 34], [10, 26, 40]) == [19, 47, 74]", "assert sum_list([13, 18, 25], [12, 26, 39]) == [25, 44, 64]", "assert sum_list([2, 1, 2], [10, 8, 6]) == [12, 9, 8]", "assert sum_list([1, 7, 5], [1, 9, 2]) == [2, 16, 7]", "assert sum_list([1, 2, 6], [4, 11, 2]) == [5, 13, 8]", "assert sum_list([4, 6, 4], [1, 6, 6]) == [5, 12, 10]", "assert sum_list([6, 3, 2], [3, 8, 7]) == [9, 11, 9]", "assert sum_list([5, 3, 2], [10, 4, 7]) == [15, 7, 9]", "assert sum_list([2, 5, 5], [7, 10, 3]) == [9, 15, 8]", "assert sum_list([6, 7, 4], [9, 5, 8]) == [15, 12, 12]", "assert sum_list([4, 3, 1], [8, 11, 7]) == [12, 14, 8]", "assert sum_list([1, 7, 8], [1, 10, 4]) == [2, 17, 12]", "assert sum_list([5, 2, 1], [2, 9, 9]) == [7, 11, 10]", "assert sum_list([1, 5, 2], [2, 4, 9]) == [3, 9, 11]", "assert sum_list([1, 4, 2], [8, 5, 7]) == [9, 9, 9]", "assert sum_list([4, 4, 1], [4, 5, 5]) == [8, 9, 6]", "assert sum_list([6, 2, 4], [5, 10, 12]) == [11, 12, 16]", "assert sum_list([3, 2, 6], [7, 1, 4]) == [10, 3, 10]", "assert sum_list([2, 7, 3], [9, 5, 2]) == [11, 12, 5]", "assert sum_list([2, 3, 4], [9, 6, 12]) == [11, 9, 16]", "assert sum_list([2, 6, 6], [1, 3, 10]) == [3, 9, 16]", "assert sum_list([4, 7, 7], [6, 7, 8]) == [10, 14, 15]", "assert sum_list([1, 3, 7], [10, 8, 6]) == [11, 11, 13]", "assert sum_list([1, 3, 6], [3, 1, 6]) == [4, 4, 12]", "assert sum_list([2, 7, 1], [9, 4, 4]) == [11, 11, 5]", "assert sum_list([4, 2, 1], [8, 2, 5]) == [12, 4, 6]", "assert sum_list([6, 2, 5], [3, 4, 10]) == [9, 6, 15]", "assert sum_list([5, 3, 2], [5, 1, 4]) == [10, 4, 6]", "assert sum_list([4, 5, 5], [9, 10, 8]) == [13, 15, 13]", "assert sum_list([3, 4, 3], [3, 5, 11]) == [6, 9, 14]", "assert sum_list([1, 5, 2], [5, 1, 11]) == [6, 6, 13]", "assert sum_list([2, 3, 8], [3, 7, 3]) == [5, 10, 11]", "assert sum_list([3, 5, 7], [5, 8, 8]) == [8, 13, 15]", "assert sum_list([4, 3, 6], [8, 11, 11]) == [12, 14, 17]", "assert sum_list([3, 7, 8], [6, 9, 2]) == [9, 16, 10]", "assert sum_list([14, 18, 32], [14, 49, 80]) == [28, 67, 112]", "assert sum_list([15, 21, 33], [13, 47, 78]) == [28, 68, 111]", "assert sum_list([14, 15, 27], [17, 49, 79]) == [31, 64, 106]", "assert sum_list([10, 20, 33], [19, 41, 75]) == [29, 61, 108]", "assert sum_list([19, 21, 32], [11, 48, 80]) == [30, 69, 112]", "assert sum_list([18, 18, 28], [10, 50, 76]) == [28, 68, 104]", "assert sum_list([19, 17, 25], [19, 44, 79]) == [38, 61, 104]", "assert sum_list([16, 21, 26], [15, 44, 72]) == [31, 65, 98]", "assert sum_list([11, 19, 32], [10, 44, 77]) == [21, 63, 109]", "assert sum_list([20, 21, 34], [14, 50, 74]) == [34, 71, 108]", "assert sum_list([18, 23, 34], [10, 41, 72]) == [28, 64, 106]", "assert sum_list([17, 23, 28], [20, 49, 71]) == [37, 72, 99]", "assert sum_list([16, 17, 33], [12, 41, 74]) == [28, 58, 107]", "assert sum_list([13, 16, 29], [19, 40, 70]) == [32, 56, 99]", "assert sum_list([19, 18, 29], [12, 46, 79]) == [31, 64, 108]", "assert sum_list([20, 16, 33], [13, 47, 80]) == [33, 63, 113]", "assert sum_list([16, 24, 34], [17, 41, 76]) == [33, 65, 110]", "assert sum_list([19, 24, 34], [11, 50, 80]) == [30, 74, 114]", "assert sum_list([14, 24, 28], [18, 43, 76]) == [32, 67, 104]", "assert sum_list([11, 15, 29], [19, 46, 80]) == [30, 61, 109]", "assert sum_list([14, 18, 31], [11, 41, 78]) == [25, 59, 109]", "assert sum_list([16, 18, 32], [13, 46, 72]) == [29, 64, 104]", "assert sum_list([13, 23, 30], [19, 41, 78]) == [32, 64, 108]", "assert sum_list([16, 18, 33], [17, 44, 80]) == [33, 62, 113]", "assert sum_list([13, 22, 33], [12, 48, 77]) == [25, 70, 110]", "assert sum_list([13, 18, 29], [14, 50, 76]) == [27, 68, 105]", "assert sum_list([15, 18, 29], [12, 43, 80]) == [27, 61, 109]", "assert sum_list([12, 16, 35], [11, 46, 74]) == [23, 62, 109]", "assert sum_list([14, 16, 32], [18, 40, 75]) == [32, 56, 107]", "assert sum_list([14, 21, 29], [10, 41, 80]) == [24, 62, 109]", "assert sum_list([13, 18, 25], [16, 45, 75]) == [29, 63, 100]", "assert sum_list([18, 25, 35], [19, 47, 79]) == [37, 72, 114]", "assert sum_list([18, 25, 29], [16, 48, 73]) == [34, 73, 102]"], "entry_point": "sum_list", "repair_prompt": ["Write a function sum_list takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nsum_list([10,20,30],[15,25,35])==[25,45,65]\n"], "completions": ["from typing import List\n## main.py\n\ndef sum_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Sums two lists of numbers element-wise.\n\n    Args:\n        list1 (list): The first list of numbers.\n        list2 (list): The second list of numbers.\n\n    Returns:\n        list: A new list containing the element-wise sums of list1 and list2.\n    \"\"\"\n    # Validate that both lists are of the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must be of the same length\")\n\n    # Initialize the result list\n    result = []\n\n    # Sum corresponding elements and append to the result list\n    for a, b in zip(list1, list2):\n        result.append(a + b)\n\n    return result\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"\n    Sums the corresponding elements of two lists of integers.\n\n    Args:\n        list1 (list[int]): The first list of integers.\n        list2 (list[int]): The second list of integers.\n\n    Returns:\n        list[int]: A new list containing the sums of the corresponding elements.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length\")\n    \n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i])\n    \n    return result\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"\n    Sums two lists element-wise.\n\n    Args:\n        list1 (list[int]): The first list of integers.\n        list2 (list[int]): The second list of integers.\n\n    Returns:\n        list[int]: A new list containing the element-wise sum of list1 and list2.\n\n    Raises:\n        ValueError: If the lists are not of the same length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length\")\n    \n    return [a + b for a, b in zip(list1, list2)]\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sum_list(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Sums corresponding elements of two lists of integers.\n    \n    Args:\n        list1 (List[int]): The first list of integers.\n        list2 (List[int]): The second list of integers.\n        \n    Returns:\n        List[int]: A new list containing the sum of corresponding elements.\n    \"\"\"\n    # Determine the length of the longer list\n    max_length = max(len(list1), len(list2))\n    \n    # Pad the shorter list with zeros\n    list1_padded = list1 + [0] * (max_length - len(list1))\n    list2_padded = list2 + [0] * (max_length - len(list2))\n    \n    # Sum corresponding elements\n    result = [list1_padded[i] + list2_padded[i] for i in range(max_length)]\n    \n    return result\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"\n    Sums two lists of integers element-wise.\n\n    Args:\n        list1 (list[int]): The first list of integers.\n        list2 (list[int]): The second list of integers.\n\n    Returns:\n        list[int]: A new list containing the element-wise sum of list1 and list2.\n\n    Raises:\n        ValueError: If the lists are not of the same length.\n    \"\"\"\n    # Validate that the lists are of the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length\")\n\n    # Initialize the result list\n    result = []\n\n    # Sum corresponding elements and append to the result list\n    for a, b in zip(list1, list2):\n        result.append(a + b)\n\n    return result\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list, list2: list) -> list:\n    \"\"\"\n    This function takes two lists of numbers and returns a new list with the sum of corresponding elements.\n    \n    Args:\n        list1 (list): The first list of numbers.\n        list2 (list): The second list of numbers.\n    \n    Returns:\n        list: A new list containing the sum of corresponding elements from list1 and list2.\n    \n    Raises:\n        ValueError: If the lists are of different lengths and no additional elements are to be ignored.\n    \"\"\"\n    # Check if the lists are of the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length\")\n    \n    # Perform element-wise addition\n    result = [a + b for a, b in zip(list1, list2)]\n    \n    return result\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list, list2: list) -> list:\n    # Ensure both inputs are lists\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        raise ValueError('Both inputs must be lists')\n\n    # Check if lists are of the same length\n    if len(list1) != len(list2):\n        raise ValueError('Lists must be of the same length')\n\n    # Use numpy for optimized addition\n    import numpy as np\n    result = np.add(list1, list2)\n    return result.tolist()\n", "from typing import List\n## main.py\n\nfrom typing import List, Union\n\ndef sum_list(list1: List[Union[int, float]], list2: List[Union[int, float]]) -> List[Union[int, float]]:\n    \"\"\"\n    Sums two lists of numbers element-wise.\n\n    Args:\n        list1 (List[Union[int, float]]): The first list of numbers.\n        list2 (List[Union[int, float]]): The second list of numbers.\n\n    Returns:\n        List[Union[int, float]]: A new list containing the element-wise sums of list1 and list2.\n\n    Raises:\n        ValueError: If the lists are of different lengths or contain non-numeric values.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length\")\n\n    if not all(isinstance(x, (int, float)) for x in list1) or not all(isinstance(x, (int, float)) for x in list2):\n        raise ValueError(\"Lists must contain only numeric values\")\n\n    return [x + y for x, y in zip(list1, list2)]\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Sums two lists element-wise.\n\n    Args:\n        list1 (list): The first list of numbers.\n        list2 (list): The second list of numbers.\n\n    Returns:\n        list: A new list containing the element-wise sum of list1 and list2.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length\")\n    \n    return [x + y for x, y in zip(list1, list2)]\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"\n    Sums corresponding elements of two lists of integers.\n\n    Args:\n        list1 (list[int]): The first list of integers.\n        list2 (list[int]): The second list of integers.\n\n    Returns:\n        list[int]: A new list containing the sum of corresponding elements from list1 and list2.\n\n    Raises:\n        ValueError: If the lists are not of the same length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length\")\n\n    result = []\n    for a, b in zip(list1, list2):\n        result.append(a + b)\n\n    return result\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that takes two lists of numbers and returns a new list where each element is the sum of the corresponding elements from the input lists. The function should handle cases where the lists are of different lengths by either truncating to the shortest length or providing a clear error message.\nrequirement pool:\n- The main code should be efficient and handle lists of different lengths.\n- The function should be easy to understand and implement.\n- The product should include tests to ensure accuracy and reliability.\nTo create a function that efficiently sums two lists of numbers element-wise, we will leverage Python's built-in capabilities to ensure simplicity and ease of use. The function will handle lists of different lengths by truncating the result to the length of the shorter list. This approach balances performance with simplicity, aligning with the goal of creating an easy-to-use and efficient function.\n", "requirement analysis:\nThe original requirements specify a simple function that takes two lists and returns a new list where each element is the sum of the corresponding elements from the input lists. This function is a fundamental operation in many programming tasks and is straightforward to implement.\nrequirement pool:\n- The main code should include the function sum_list as described.\n- The game algorithm should include a scoring system that allows players to track their progress.\n- Implement a user-friendly interface for easy navigation and interaction.\n- Ensure the game is responsive and works well on both desktop and mobile devices.\n- Include options for players to customize the game difficulty.\nWe will implement the function `sum_list` using Python, leveraging its built-in support for list operations. This function will take two lists of equal length, sum the corresponding elements, and return a new list containing these sums.\n", "requirement analysis:\nThe requirement is to create a function that takes two lists of equal length, performs element-wise addition, and returns the result. This is a fundamental operation that can be efficiently handled by Python's built-in capabilities, but also by specialized libraries like NumPy for more advanced use cases.\nrequirement pool:\n- Implement sum_list function to handle two lists and return their element-wise sum.\n- Ensure the function works correctly for both positive and negative numbers.\n- Optimize the function for performance, especially for large datasets.\n- Implement error handling for lists of unequal length.\n- Provide a clear and concise documentation for the function.\nTo implement the `sum_list` function efficiently and accurately, we will utilize Python's built-in capabilities, specifically focusing on list operations. This approach ensures simplicity and ease of use while maintaining high performance. We will also ensure that the function handles both positive and negative numbers correctly, as well as manages potential errors such as lists of unequal lengths.\n", "requirement analysis:\nThe original requirements specify a simple function that takes two lists and returns a new list with the sum of corresponding elements. This function is fundamental and should be implemented efficiently. The user stories focus on usability, efficiency, and clarity. The competitive analysis highlights different aspects of the user experience, emphasizing the need for a balance between features, user interface, and performance.\nrequirement pool:\n- Implement the sum_list function to handle lists of different lengths.\n- Ensure the function is efficient and works well with large lists.\n- Provide clear and concise documentation for the function.\n- Implement error handling for invalid inputs.\n- Optimize the function for performance and readability.\nTo implement the `sum_list` function efficiently and gracefully handle lists of different lengths, we will use Python's built-in capabilities and the `typing` module to ensure type correctness. The function will iterate through both lists, summing corresponding elements, and handle cases where the lists are of unequal lengths by either truncating the longer list or padding the shorter list with zeros.\n", "requirement analysis:\nThe requirement is to create a function that takes two lists of numbers and returns a new list where each element is the sum of the corresponding elements from the input lists. The function should handle cases where the lists are of different lengths by either ignoring the extra elements or raising an error, depending on the use case.\nrequirement pool:\n- The main code should be clear and concise.\n- The function should handle lists of different lengths gracefully.\n- The function should be optimized for performance.\n- The function should include error handling for non-numeric data.\n- The function should be tested thoroughly.\nTo create a function that efficiently sums two lists of numbers, we will use Python's built-in capabilities, ensuring clarity and simplicity. The function will handle lists of different lengths by either ignoring extra elements or raising an error, depending on the specific use case. Performance will be optimized for basic scenarios, leveraging Python's native list operations.\n", "requirement analysis:\nThe requirement is to create a function that takes two lists and returns a new list where each element is the sum of the corresponding elements from the input lists. This is a basic operation that can be used in various applications, including data processing and scientific computing. The function should handle cases where the lists are of different lengths by either raising an error or ignoring extra elements, depending on the use case.\nrequirement pool:\n- Implement the function to handle lists of equal length.\n- Ensure the function can handle lists of different lengths gracefully.\n- Add documentation to explain how to use the function and its limitations.\n- Test the function with various edge cases to ensure accuracy and reliability.\n- Optimize the function for performance, especially for large datasets.\nTo implement the function efficiently and accurately, we will use Python's built-in capabilities, ensuring that the function is easy to understand and use. We will handle the addition of corresponding elements from two lists, and we will also consider the case where the lists are of different lengths by either raising an error or ignoring extra elements based on the requirements.\n", "requirement analysis:\nThe requirement is to create a function that takes two lists of numbers and returns a new list where each element is the sum of the corresponding elements from the input lists. The function should handle cases where the lists are of different lengths by either ignoring extra elements or raising an error, depending on the use case.\nrequirement pool:\n- Implement the sum_list function to handle two lists of numbers.\n- Ensure the function can handle lists of different lengths.\n- Optimize the function for performance, especially for large datasets.\n- Include error handling for cases where the input is not a list.\n- Add documentation and comments to explain the function's purpose and usage.\nTo implement the `sum_list` function efficiently and accurately, we will use Python's built-in capabilities along with the `numpy` library for optimized performance. The function will handle lists of different lengths by either ignoring extra elements or raising an error, depending on the use case.\n", "requirement analysis:\nThe original requirement is to create a function that takes two lists of numbers and returns a new list where each element is the sum of the corresponding elements from the input lists. This is a basic operation that should be efficient and reliable. The function should handle edge cases such as lists of different lengths and non-numeric values. The performance should be optimized for large datasets.\nrequirement pool:\n- The main code should be efficient and handle edge cases\n- The function should return accurate results for any input\n- The function should be optimized for large datasets\n- The function should handle lists of different lengths gracefully\n- The function should provide clear error messages for non-numeric inputs\nTo create an efficient and easy-to-use function that sums two lists of numbers, we will leverage Python's built-in capabilities and optimize for performance. We will use list comprehensions to ensure the function is both simple and fast. Additionally, we will handle edge cases such as lists of different lengths and non-numeric values by adding error handling.\n", "requirement analysis:\nThe requirement is to create a function that takes two lists and returns their element-wise sum. This is a fundamental operation in many data-driven applications. The function should handle lists of any size and ensure that the sum is computed accurately and efficiently. Clarifications are needed on any specific edge cases or performance requirements.\nrequirement pool:\n- The main code should be concise and readable.\n- The function should handle lists of different lengths gracefully.\n- Ensure the function is optimized for performance.\n- Include error handling for non-list inputs.\n- Provide detailed documentation and examples.\nTo create a function that efficiently sums two lists element-wise, we will use Python's built-in capabilities and leverage the power of list comprehensions for simplicity and performance. This approach ensures that the function is both easy to read and maintain, aligning with the goal of enhancing code readability and maintainability.\n", "requirement analysis:\nThe requirement is to create a function that takes two lists of numbers and returns a new list where each element is the sum of the corresponding elements from the input lists. The function should handle lists of different lengths by either ignoring the extra elements or raising an error, depending on the use case. The function should be efficient and easy to understand.\nrequirement pool:\n- Implement the function to sum corresponding elements of two lists.\n- Handle lists of different lengths gracefully.\n- Ensure the function is optimized for performance.\n- Include error handling for unexpected input.\n- Provide clear documentation and examples for user guidance.\nTo implement the function efficiently and accurately, we will use Python's built-in capabilities. The function will iterate through both lists, summing the corresponding elements. If the lists are of different lengths, the function will raise a ValueError to handle unexpected input.\n"], "test": ["def check(sum_list):\n\tassert sum_list([10,20,30],[15,25,35])==[25,45,65]", "def check(sum_list):\n\tassert sum_list([1,2,3],[5,6,7])==[6,8,10]", "def check(sum_list):\n\tassert sum_list([15,20,30],[15,45,75])==[30,65,105]", "def check(sum_list):\n\tassert sum_list([11, 19, 31], [20, 29, 39]) == [31, 48, 70]", "def check(sum_list):\n\tassert sum_list([15, 19, 31], [18, 26, 30]) == [33, 45, 61]", "def check(sum_list):\n\tassert sum_list([11, 23, 29], [15, 20, 40]) == [26, 43, 69]", "def check(sum_list):\n\tassert sum_list([11, 25, 35], [13, 27, 32]) == [24, 52, 67]", "def check(sum_list):\n\tassert sum_list([6, 20, 25], [11, 29, 36]) == [17, 49, 61]", "def check(sum_list):\n\tassert sum_list([10, 18, 26], [11, 27, 30]) == [21, 45, 56]", "def check(sum_list):\n\tassert sum_list([6, 16, 31], [19, 21, 36]) == [25, 37, 67]", "def check(sum_list):\n\tassert sum_list([8, 17, 30], [17, 30, 40]) == [25, 47, 70]", "def check(sum_list):\n\tassert sum_list([12, 22, 26], [17, 27, 32]) == [29, 49, 58]", "def check(sum_list):\n\tassert sum_list([12, 20, 34], [14, 22, 37]) == [26, 42, 71]", "def check(sum_list):\n\tassert sum_list([8, 21, 26], [15, 23, 36]) == [23, 44, 62]", "def check(sum_list):\n\tassert sum_list([5, 19, 27], [13, 22, 39]) == [18, 41, 66]", "def check(sum_list):\n\tassert sum_list([6, 15, 25], [15, 28, 32]) == [21, 43, 57]", "def check(sum_list):\n\tassert sum_list([8, 22, 27], [11, 28, 35]) == [19, 50, 62]", "def check(sum_list):\n\tassert sum_list([5, 25, 33], [13, 30, 38]) == [18, 55, 71]", "def check(sum_list):\n\tassert sum_list([12, 18, 34], [17, 23, 36]) == [29, 41, 70]", "def check(sum_list):\n\tassert sum_list([5, 20, 30], [20, 28, 39]) == [25, 48, 69]", "def check(sum_list):\n\tassert sum_list([12, 21, 30], [15, 22, 36]) == [27, 43, 66]", "def check(sum_list):\n\tassert sum_list([14, 15, 27], [18, 25, 36]) == [32, 40, 63]", "def check(sum_list):\n\tassert sum_list([7, 15, 33], [16, 30, 35]) == [23, 45, 68]", "def check(sum_list):\n\tassert sum_list([7, 22, 33], [12, 27, 30]) == [19, 49, 63]", "def check(sum_list):\n\tassert sum_list([13, 25, 35], [18, 21, 35]) == [31, 46, 70]", "def check(sum_list):\n\tassert sum_list([9, 23, 35], [11, 28, 35]) == [20, 51, 70]", "def check(sum_list):\n\tassert sum_list([14, 24, 27], [11, 26, 37]) == [25, 50, 64]", "def check(sum_list):\n\tassert sum_list([9, 24, 34], [20, 23, 35]) == [29, 47, 69]", "def check(sum_list):\n\tassert sum_list([11, 24, 33], [14, 29, 31]) == [25, 53, 64]", "def check(sum_list):\n\tassert sum_list([13, 24, 28], [10, 25, 34]) == [23, 49, 62]", "def check(sum_list):\n\tassert sum_list([15, 21, 28], [10, 20, 30]) == [25, 41, 58]", "def check(sum_list):\n\tassert sum_list([9, 17, 28], [17, 22, 32]) == [26, 39, 60]", "def check(sum_list):\n\tassert sum_list([7, 25, 28], [13, 29, 31]) == [20, 54, 59]", "def check(sum_list):\n\tassert sum_list([6, 25, 26], [12, 26, 34]) == [18, 51, 60]", "def check(sum_list):\n\tassert sum_list([9, 21, 34], [10, 26, 40]) == [19, 47, 74]", "def check(sum_list):\n\tassert sum_list([13, 18, 25], [12, 26, 39]) == [25, 44, 64]", "def check(sum_list):\n\tassert sum_list([2, 1, 2], [10, 8, 6]) == [12, 9, 8]", "def check(sum_list):\n\tassert sum_list([1, 7, 5], [1, 9, 2]) == [2, 16, 7]", "def check(sum_list):\n\tassert sum_list([1, 2, 6], [4, 11, 2]) == [5, 13, 8]", "def check(sum_list):\n\tassert sum_list([4, 6, 4], [1, 6, 6]) == [5, 12, 10]", "def check(sum_list):\n\tassert sum_list([6, 3, 2], [3, 8, 7]) == [9, 11, 9]", "def check(sum_list):\n\tassert sum_list([5, 3, 2], [10, 4, 7]) == [15, 7, 9]", "def check(sum_list):\n\tassert sum_list([2, 5, 5], [7, 10, 3]) == [9, 15, 8]", "def check(sum_list):\n\tassert sum_list([6, 7, 4], [9, 5, 8]) == [15, 12, 12]", "def check(sum_list):\n\tassert sum_list([4, 3, 1], [8, 11, 7]) == [12, 14, 8]", "def check(sum_list):\n\tassert sum_list([1, 7, 8], [1, 10, 4]) == [2, 17, 12]", "def check(sum_list):\n\tassert sum_list([5, 2, 1], [2, 9, 9]) == [7, 11, 10]", "def check(sum_list):\n\tassert sum_list([1, 5, 2], [2, 4, 9]) == [3, 9, 11]", "def check(sum_list):\n\tassert sum_list([1, 4, 2], [8, 5, 7]) == [9, 9, 9]", "def check(sum_list):\n\tassert sum_list([4, 4, 1], [4, 5, 5]) == [8, 9, 6]", "def check(sum_list):\n\tassert sum_list([6, 2, 4], [5, 10, 12]) == [11, 12, 16]", "def check(sum_list):\n\tassert sum_list([3, 2, 6], [7, 1, 4]) == [10, 3, 10]", "def check(sum_list):\n\tassert sum_list([2, 7, 3], [9, 5, 2]) == [11, 12, 5]", "def check(sum_list):\n\tassert sum_list([2, 3, 4], [9, 6, 12]) == [11, 9, 16]", "def check(sum_list):\n\tassert sum_list([2, 6, 6], [1, 3, 10]) == [3, 9, 16]", "def check(sum_list):\n\tassert sum_list([4, 7, 7], [6, 7, 8]) == [10, 14, 15]", "def check(sum_list):\n\tassert sum_list([1, 3, 7], [10, 8, 6]) == [11, 11, 13]", "def check(sum_list):\n\tassert sum_list([1, 3, 6], [3, 1, 6]) == [4, 4, 12]", "def check(sum_list):\n\tassert sum_list([2, 7, 1], [9, 4, 4]) == [11, 11, 5]", "def check(sum_list):\n\tassert sum_list([4, 2, 1], [8, 2, 5]) == [12, 4, 6]", "def check(sum_list):\n\tassert sum_list([6, 2, 5], [3, 4, 10]) == [9, 6, 15]", "def check(sum_list):\n\tassert sum_list([5, 3, 2], [5, 1, 4]) == [10, 4, 6]", "def check(sum_list):\n\tassert sum_list([4, 5, 5], [9, 10, 8]) == [13, 15, 13]", "def check(sum_list):\n\tassert sum_list([3, 4, 3], [3, 5, 11]) == [6, 9, 14]", "def check(sum_list):\n\tassert sum_list([1, 5, 2], [5, 1, 11]) == [6, 6, 13]", "def check(sum_list):\n\tassert sum_list([2, 3, 8], [3, 7, 3]) == [5, 10, 11]", "def check(sum_list):\n\tassert sum_list([3, 5, 7], [5, 8, 8]) == [8, 13, 15]", "def check(sum_list):\n\tassert sum_list([4, 3, 6], [8, 11, 11]) == [12, 14, 17]", "def check(sum_list):\n\tassert sum_list([3, 7, 8], [6, 9, 2]) == [9, 16, 10]", "def check(sum_list):\n\tassert sum_list([14, 18, 32], [14, 49, 80]) == [28, 67, 112]", "def check(sum_list):\n\tassert sum_list([15, 21, 33], [13, 47, 78]) == [28, 68, 111]", "def check(sum_list):\n\tassert sum_list([14, 15, 27], [17, 49, 79]) == [31, 64, 106]", "def check(sum_list):\n\tassert sum_list([10, 20, 33], [19, 41, 75]) == [29, 61, 108]", "def check(sum_list):\n\tassert sum_list([19, 21, 32], [11, 48, 80]) == [30, 69, 112]", "def check(sum_list):\n\tassert sum_list([18, 18, 28], [10, 50, 76]) == [28, 68, 104]", "def check(sum_list):\n\tassert sum_list([19, 17, 25], [19, 44, 79]) == [38, 61, 104]", "def check(sum_list):\n\tassert sum_list([16, 21, 26], [15, 44, 72]) == [31, 65, 98]", "def check(sum_list):\n\tassert sum_list([11, 19, 32], [10, 44, 77]) == [21, 63, 109]", "def check(sum_list):\n\tassert sum_list([20, 21, 34], [14, 50, 74]) == [34, 71, 108]", "def check(sum_list):\n\tassert sum_list([18, 23, 34], [10, 41, 72]) == [28, 64, 106]", "def check(sum_list):\n\tassert sum_list([17, 23, 28], [20, 49, 71]) == [37, 72, 99]", "def check(sum_list):\n\tassert sum_list([16, 17, 33], [12, 41, 74]) == [28, 58, 107]", "def check(sum_list):\n\tassert sum_list([13, 16, 29], [19, 40, 70]) == [32, 56, 99]", "def check(sum_list):\n\tassert sum_list([19, 18, 29], [12, 46, 79]) == [31, 64, 108]", "def check(sum_list):\n\tassert sum_list([20, 16, 33], [13, 47, 80]) == [33, 63, 113]", "def check(sum_list):\n\tassert sum_list([16, 24, 34], [17, 41, 76]) == [33, 65, 110]", "def check(sum_list):\n\tassert sum_list([19, 24, 34], [11, 50, 80]) == [30, 74, 114]", "def check(sum_list):\n\tassert sum_list([14, 24, 28], [18, 43, 76]) == [32, 67, 104]", "def check(sum_list):\n\tassert sum_list([11, 15, 29], [19, 46, 80]) == [30, 61, 109]", "def check(sum_list):\n\tassert sum_list([14, 18, 31], [11, 41, 78]) == [25, 59, 109]", "def check(sum_list):\n\tassert sum_list([16, 18, 32], [13, 46, 72]) == [29, 64, 104]", "def check(sum_list):\n\tassert sum_list([13, 23, 30], [19, 41, 78]) == [32, 64, 108]", "def check(sum_list):\n\tassert sum_list([16, 18, 33], [17, 44, 80]) == [33, 62, 113]", "def check(sum_list):\n\tassert sum_list([13, 22, 33], [12, 48, 77]) == [25, 70, 110]", "def check(sum_list):\n\tassert sum_list([13, 18, 29], [14, 50, 76]) == [27, 68, 105]", "def check(sum_list):\n\tassert sum_list([15, 18, 29], [12, 43, 80]) == [27, 61, 109]", "def check(sum_list):\n\tassert sum_list([12, 16, 35], [11, 46, 74]) == [23, 62, 109]", "def check(sum_list):\n\tassert sum_list([14, 16, 32], [18, 40, 75]) == [32, 56, 107]", "def check(sum_list):\n\tassert sum_list([14, 21, 29], [10, 41, 80]) == [24, 62, 109]", "def check(sum_list):\n\tassert sum_list([13, 18, 25], [16, 45, 75]) == [29, 63, 100]", "def check(sum_list):\n\tassert sum_list([18, 25, 35], [19, 47, 79]) == [37, 72, 114]", "def check(sum_list):\n\tassert sum_list([18, 25, 29], [16, 48, 73]) == [34, 73, 102]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef sum_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"\n    Sums corresponding elements of two lists of integers.\n\n    Args:\n        list1 (list[int]): The first list of integers.\n        list2 (list[int]): The second list of integers.\n\n    Returns:\n        list[int]: A new list containing the sum of corresponding elements from list1 and list2.\n\n    Raises:\n        ValueError: If the lists are not of the same length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length\")\n\n    result = []\n    for a, b in zip(list1, list2):\n        result.append(a + b)\n\n    return result\n", "passed": true, "pass": true, "pass_num": 10, "round": 369, "mutate_method": "condense_two2one", "parent_index": 415}
