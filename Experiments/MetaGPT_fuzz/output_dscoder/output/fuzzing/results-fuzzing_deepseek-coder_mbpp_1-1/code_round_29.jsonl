{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 80, "prompt": "Write a function to determine the nth tetrahedral number. The tetrahedral number is a figurate number. It represents a pyramid with a triangular base and three sides.", "code": "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6", "test_imports": [], "test_list": ["assert tetrahedral_number(5) == 35.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(7) == 84.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(7) == 84.0", "assert tetrahedral_number(1) == 1.0", "assert tetrahedral_number(9) == 165.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(1) == 1.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(1) == 1.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(10) == 220.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(5) == 35.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(7) == 84.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(1) == 1.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(7) == 84.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(10) == 220.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(7) == 84.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(9) == 165.0", "assert tetrahedral_number(7) == 84.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(5) == 35.0", "assert tetrahedral_number(7) == 84.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(1) == 1.0", "assert tetrahedral_number(11) == 286.0", "assert tetrahedral_number(9) == 165.0", "assert tetrahedral_number(5) == 35.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(1) == 1.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(5) == 35.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(5) == 35.0", "assert tetrahedral_number(5) == 35.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(9) == 165.0", "assert tetrahedral_number(1) == 1.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(12) == 364.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(5) == 35.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(7) == 84.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(10) == 220.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(11) == 286.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(7) == 84.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(10) == 220.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(9) == 165.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(9) == 165.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(7) == 84.0"], "entry_point": "tetrahedral_number", "repair_prompt": ["Write a function tetrahedral_number to determine the nth tetrahedral number. The tetrahedral number is a figurate number. It represents a pyramid with a triangular base and three sides.\ntetrahedral_number(5) == 35.0\n"], "completions": ["from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    The nth tetrahedral number is given by the formula:\n    T(n) = n * (n + 1) * (n + 2) / 6\n\n    Args:\n        n (int): The position in the sequence, must be a non-negative integer.\n\n    Returns:\n        float: The nth tetrahedral number.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    return n * (n + 1) * (n + 2) / 6\n", "from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"\n    Calculate the nth tetrahedral number using the formula T(n) = n(n+1)(n+2)/6.\n\n    Args:\n        n (int): The position in the sequence of tetrahedral numbers.\n\n    Returns:\n        float: The nth tetrahedral number.\n    \"\"\"\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer.\")\n    \n    return n * (n + 1) * (n + 2) / 6\n\n# Example usage:\n# print(tetrahedral_number(3))  # Output: 20.0\n", "from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    Args:\n        n (int): The position in the sequence, must be a positive integer.\n\n    Returns:\n        float: The nth tetrahedral number.\n\n    Raises:\n        ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (n + 1) * (n + 2) / 6\n\n# Example usage:\n# print(tetrahedral_number(5))  # Output: 35.0\n", "from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    Args:\n        n (int): The position in the sequence, must be a positive integer.\n\n    Returns:\n        float: The nth tetrahedral number.\n\n    Raises:\n        ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (n + 1) * (n + 2) / 6\n\n# Example usage:\n# print(tetrahedral_number(4))  # Output: 20.0\n", "from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    Args:\n        n (int): The position in the sequence, must be a positive integer.\n\n    Returns:\n        float: The nth tetrahedral number.\n\n    Raises:\n        ValueError: If the input is not a valid integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (n + 1) * (n + 2) / 6\n", "from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"\n    Calculate the nth tetrahedral number using the formula T(n) = n(n+1)(n+2)/6.\n    \n    Args:\n        n (int): The position in the sequence of tetrahedral numbers.\n    \n    Returns:\n        float: The nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) / 6\n", "from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    The nth tetrahedral number is given by the formula:\n    T(n) = n * (n + 1) * (n + 2) / 6\n\n    Args:\n        n (int): The position in the sequence, must be a non-negative integer.\n\n    Returns:\n        float: The nth tetrahedral number.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    return n * (n + 1) * (n + 2) / 6\n\n# Example usage:\n# print(tetrahedral_number(4))  # Output: 20.0\n", "from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"\n    Calculate the nth tetrahedral number using the formula T(n) = n*(n+1)*(n+2)/6.\n\n    Args:\n        n (int): The position in the sequence of tetrahedral numbers.\n\n    Returns:\n        float: The nth tetrahedral number.\n    \"\"\"\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer.\")\n    \n    return n * (n + 1) * (n + 2) / 6\n\n# Example usage:\n# print(tetrahedral_number(4))  # Output: 20.0\n", "from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    The nth tetrahedral number is given by the formula:\n    T(n) = (n * (n + 1) * (n + 2)) / 6\n\n    Args:\n        n (int): The position in the sequence, must be a non-negative integer.\n\n    Returns:\n        float: The nth tetrahedral number.\n\n    Raises:\n        ValueError: If the input is not a non-negative integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    return (n * (n + 1) * (n + 2)) / 6\n", "from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"\n    Calculate the nth tetrahedral number using the formula T(n) = n(n+1)(n+2)/6.\n    \n    Args:\n        n (int): The position in the sequence of tetrahedral numbers.\n    \n    Returns:\n        float: The nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) / 6\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that calculates the nth tetrahedral number. Tetrahedral numbers are a sequence of numbers representing the number of spheres in a tetrahedron with n layers. The formula for the nth tetrahedral number is n*(n+1)*(n+2)/6. The function should be able to handle both small and large values of n efficiently.\nrequirement pool:\n- Implement the formula n*(n+1)*(n+2)/6 to calculate the nth tetrahedral number.\n- Ensure the function is optimized for performance, especially for large values of n.\n- Include error handling to manage invalid inputs, such as non-integer values for n.\n- Provide a clear and concise documentation for the function, including usage examples.\n- Implement unit tests to verify the correctness of the function.\nTo implement the function for calculating the nth tetrahedral number, we will use a straightforward approach based on the given formula: n*(n+1)*(n+2)/6. This formula is simple and efficient for calculating tetrahedral numbers. We will ensure the function is optimized for performance, especially for large values of n, by leveraging Python's built-in data types and avoiding unnecessary computations.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth tetrahedral number. Tetrahedral numbers are a sequence of figurate numbers that represent a pyramid with a triangular base and three sides. The formula for the nth tetrahedral number is given by T(n) = n(n+1)(n+2)/6. This formula is straightforward and can be easily implemented in Python. The function should handle both small and large values of n, ensuring it is efficient and accurate.\nrequirement pool:\n- Implement the formula T(n) = n(n+1)(n+2)/6 in a Python function.\n- Ensure the function is tested for various values of n, including edge cases.\n- Optimize the function for performance to handle large inputs efficiently.\n- Include error handling to manage invalid inputs, such as non-integer values for n.\n- Document the function with clear comments and usage examples.\nWe will implement the function using a straightforward approach based on the given formula T(n) = n(n+1)(n+2)/6. This formula is simple and efficient for calculating the nth tetrahedral number. We will use Python, leveraging its built-in capabilities for mathematical operations and ensuring the function is easy to understand and maintain.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth tetrahedral number. Tetrahedral numbers are a sequence of figurate numbers that represent a pyramid with a triangular base and three sides. The formula for the nth tetrahedral number is given by T(n) = n(n+1)(n+2)/6. The function should be efficient and handle basic inputs effectively.\nrequirement pool:\n- Implement the formula T(n) = n(n+1)(n+2)/6 in a Python function.\n- Ensure the function is tested for various inputs to verify accuracy.\n- Optimize the function for performance to handle larger inputs efficiently.\n- Include error handling to manage invalid inputs gracefully.\n- Document the function with clear comments and usage examples.\nTo implement the function for calculating the nth tetrahedral number, we will use a straightforward approach based on the given formula T(n) = n(n+1)(n+2)/6. This formula is simple and efficient for calculating tetrahedral numbers. We will ensure the function is tested for various inputs to verify its accuracy and handle invalid inputs gracefully.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth tetrahedral number. Tetrahedral numbers are a sequence of numbers that represent the number of spheres in a tetrahedron with n layers. The formula for the nth tetrahedral number is n * (n + 1) * (n + 2) / 6. The function should be efficient and handle basic inputs well. Clarifications are needed on edge cases and large inputs.\nrequirement pool:\n- Implement the formula for tetrahedral numbers.\n- Ensure the function is tested for basic inputs.\n- Optimize the function for handling larger inputs.\n- Include error handling for invalid inputs.\n- Document the function for easy understanding and usage.\nTo implement the function for calculating the nth tetrahedral number, we will use a straightforward approach based on the given formula: n * (n + 1) * (n + 2) / 6. This formula is simple and directly translates to a mathematical representation of tetrahedral numbers. We will ensure the function is efficient and can handle basic inputs effectively. Additionally, we will include error handling to manage invalid inputs gracefully.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth tetrahedral number. Tetrahedral numbers are a sequence of numbers that represent the number of spheres in a tetrahedron with n layers. The formula for the nth tetrahedral number is n * (n + 1) * (n + 2) / 6. The function should be efficient and handle basic mathematical operations.\nrequirement pool:\n- Implement the formula for calculating the nth tetrahedral number.\n- Ensure the function is optimized for basic arithmetic operations.\n- Include error handling for invalid inputs like non-integer values.\n- Add comments to explain the code for educational purposes.\n- Test the function with various values of n to ensure accuracy.\nWe will implement the function using a simple and efficient approach. The function will take an integer input n and calculate the nth tetrahedral number using the formula n * (n + 1) * (n + 2) / 6. The function will include error handling to ensure that the input is a valid integer. The implementation will be optimized for basic arithmetic operations to ensure performance.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth tetrahedral number. Tetrahedral numbers are a sequence of figurate numbers that represent a pyramid with a triangular base and three sides. The formula for the nth tetrahedral number is given by T(n) = n(n+1)(n+2)/6. This formula is straightforward and can be easily implemented in Python. The function should handle both small and large values of n efficiently.\nrequirement pool:\n- Implement the formula T(n) = n(n+1)(n+2)/6 in a Python function.\n- Ensure the function is tested for various values of n, including edge cases (e.g., n=0, n=1, large n).\n- Optimize the function for performance to handle large inputs efficiently.\n- Include comments in the code to explain the logic and steps for better understanding and maintenance.\n- Document the function with usage examples and a brief explanation of how to use it.\nTo implement the function for calculating the nth tetrahedral number, we will use Python's mathematical capabilities, specifically leveraging arithmetic operations to compute the result based on the formula T(n) = n(n+1)(n+2)/6. This formula is straightforward and efficient for calculating tetrahedral numbers. We will ensure the function is optimized for performance to handle larger inputs efficiently.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth tetrahedral number. Tetrahedral numbers are a sequence of numbers representing the number of spheres in a tetrahedron with n layers. The formula for the nth tetrahedral number is n * (n + 1) * (n + 2) / 6. This is a straightforward mathematical function that should be efficient and easy to implement.\nrequirement pool:\n- Implement the formula n * (n + 1) * (n + 2) / 6 to calculate the nth tetrahedral number.\n- Ensure the function is optimized for performance, handling large values of n efficiently.\n- Include error handling to manage non-integer inputs gracefully.\n- Provide a clear and concise documentation for users.\n- Test the function with various test cases to ensure accuracy.\nWe will implement the function using a straightforward approach based on the mathematical formula provided. The formula for the nth tetrahedral number is n * (n + 1) * (n + 2) / 6. This formula is simple and efficient for calculating tetrahedral numbers.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth tetrahedral number. Tetrahedral numbers are a sequence of figurate numbers that represent a pyramid with a triangular base and three sides. The formula for the nth tetrahedral number is given by T(n) = n*(n+1)*(n+2)/6. This formula is straightforward and can be implemented in Python using basic arithmetic operations.\nrequirement pool:\n- Implement the formula T(n) = n*(n+1)*(n+2)/6 in a Python function.\n- Ensure the function handles edge cases such as negative numbers and zero.\n- Add error handling to manage non-integer inputs gracefully.\n- Include a docstring in the function to explain its purpose and usage.\n- Optimize the function for performance to handle larger values of n efficiently.\nWe will implement the function using a straightforward approach to calculate the nth tetrahedral number using the formula T(n) = n*(n+1)*(n+2)/6. This formula is simple and efficient for calculating tetrahedral numbers.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth tetrahedral number. Tetrahedral numbers are a sequence of figurate numbers that represent a pyramid with a triangular base and three sides. The formula for the nth tetrahedral number is given by T(n) = (n * (n + 1) * (n + 2)) / 6. The function should be efficient and handle basic to moderate inputs effectively.\nrequirement pool:\n- Implement the formula for calculating the nth tetrahedral number.\n- Ensure the function is optimized for performance.\n- Add error handling for invalid inputs such as non-integer values.\n- Include detailed documentation for easy understanding and usage.\n- Implement unit tests to verify the accuracy and reliability of the function.\nTo implement the function for calculating the nth tetrahedral number, we will use a straightforward approach based on the given formula. The formula for the nth tetrahedral number is T(n) = (n * (n + 1) * (n + 2)) / 6. This formula is simple and efficient for calculating tetrahedral numbers. We will ensure the function is optimized for performance to handle larger inputs efficiently.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth tetrahedral number. Tetrahedral numbers are a sequence of figurate numbers that represent a pyramid with a triangular base and three sides. The formula for the nth tetrahedral number is given by T(n) = n(n+1)(n+2)/6. This formula is straightforward and can be easily implemented in Python. The function should handle both small and large values of n efficiently.\nrequirement pool:\n- Implement the formula T(n) = n(n+1)(n+2)/6 in a Python function.\n- Ensure the function is tested for various values of n, including edge cases (e.g., n=0, n=1, large n).\n- Optimize the function for performance to handle large inputs efficiently.\n- Include comments in the code to explain the logic and steps for better understanding and maintenance.\n- Document the function with usage examples and a brief explanation of how to use it.\nTo implement the function for calculating the nth tetrahedral number, we will use Python's mathematical capabilities, specifically leveraging arithmetic operations to compute the result based on the formula T(n) = n(n+1)(n+2)/6. This formula is straightforward and efficient for calculating tetrahedral numbers. We will ensure the function is optimized for performance to handle larger inputs efficiently.\n"], "test": ["def check(tetrahedral_number):\n\tassert tetrahedral_number(5) == 35.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(1) == 1.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(9) == 165.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(1) == 1.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(1) == 1.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(10) == 220.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(5) == 35.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(1) == 1.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(10) == 220.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(9) == 165.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(5) == 35.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(1) == 1.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(11) == 286.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(9) == 165.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(5) == 35.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(1) == 1.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(5) == 35.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(5) == 35.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(5) == 35.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(9) == 165.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(1) == 1.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(12) == 364.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(5) == 35.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(10) == 220.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(11) == 286.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(10) == 220.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(9) == 165.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(9) == 165.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"\n    Calculate the nth tetrahedral number using the formula T(n) = n(n+1)(n+2)/6.\n    \n    Args:\n        n (int): The position in the sequence of tetrahedral numbers.\n    \n    Returns:\n        float: The nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) / 6\n", "passed": true, "pass": true, "pass_num": 10, "round": 29, "mutate_method": "expand_one2two", "parent_index": 29}
