{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 287, "prompt": "Write a python function that accepts an integer n and returns the sum of squares of first n even natural numbers.", "code": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)", "test_imports": [], "test_list": ["assert square_Sum(2) == 20", "assert square_Sum(3) == 56", "assert square_Sum(4) == 120", "assert square_Sum(6) == 364", "assert square_Sum(3) == 56", "assert square_Sum(6) == 364", "assert square_Sum(2) == 20", "assert square_Sum(1) == 4", "assert square_Sum(6) == 364", "assert square_Sum(3) == 56", "assert square_Sum(5) == 220", "assert square_Sum(3) == 56", "assert square_Sum(4) == 120", "assert square_Sum(7) == 560", "assert square_Sum(3) == 56", "assert square_Sum(2) == 20", "assert square_Sum(4) == 120", "assert square_Sum(7) == 560", "assert square_Sum(3) == 56", "assert square_Sum(5) == 220", "assert square_Sum(4) == 120", "assert square_Sum(3) == 56", "assert square_Sum(7) == 560", "assert square_Sum(2) == 20", "assert square_Sum(3) == 56", "assert square_Sum(3) == 56", "assert square_Sum(1) == 4", "assert square_Sum(5) == 220", "assert square_Sum(6) == 364", "assert square_Sum(1) == 4", "assert square_Sum(7) == 560", "assert square_Sum(5) == 220", "assert square_Sum(7) == 560", "assert square_Sum(6) == 364", "assert square_Sum(7) == 560", "assert square_Sum(6) == 364", "assert square_Sum(8) == 816", "assert square_Sum(2) == 20", "assert square_Sum(1) == 4", "assert square_Sum(1) == 4", "assert square_Sum(8) == 816", "assert square_Sum(4) == 120", "assert square_Sum(6) == 364", "assert square_Sum(7) == 560", "assert square_Sum(2) == 20", "assert square_Sum(5) == 220", "assert square_Sum(8) == 816", "assert square_Sum(5) == 220", "assert square_Sum(8) == 816", "assert square_Sum(4) == 120", "assert square_Sum(5) == 220", "assert square_Sum(7) == 560", "assert square_Sum(4) == 120", "assert square_Sum(7) == 560", "assert square_Sum(7) == 560", "assert square_Sum(3) == 56", "assert square_Sum(8) == 816", "assert square_Sum(4) == 120", "assert square_Sum(2) == 20", "assert square_Sum(2) == 20", "assert square_Sum(3) == 56", "assert square_Sum(8) == 816", "assert square_Sum(5) == 220", "assert square_Sum(3) == 56", "assert square_Sum(3) == 56", "assert square_Sum(2) == 20", "assert square_Sum(5) == 220", "assert square_Sum(7) == 560", "assert square_Sum(2) == 20", "assert square_Sum(7) == 560", "assert square_Sum(8) == 816", "assert square_Sum(5) == 220", "assert square_Sum(3) == 56", "assert square_Sum(8) == 816", "assert square_Sum(1) == 4", "assert square_Sum(3) == 56", "assert square_Sum(6) == 364", "assert square_Sum(9) == 1140", "assert square_Sum(3) == 56", "assert square_Sum(5) == 220", "assert square_Sum(4) == 120", "assert square_Sum(2) == 20", "assert square_Sum(2) == 20", "assert square_Sum(1) == 4", "assert square_Sum(2) == 20", "assert square_Sum(2) == 20", "assert square_Sum(8) == 816", "assert square_Sum(9) == 1140", "assert square_Sum(1) == 4", "assert square_Sum(6) == 364", "assert square_Sum(8) == 816", "assert square_Sum(6) == 364", "assert square_Sum(7) == 560", "assert square_Sum(2) == 20", "assert square_Sum(3) == 56", "assert square_Sum(1) == 4", "assert square_Sum(9) == 1140", "assert square_Sum(4) == 120", "assert square_Sum(6) == 364", "assert square_Sum(9) == 1140", "assert square_Sum(9) == 1140", "assert square_Sum(2) == 20"], "entry_point": "square_Sum", "repair_prompt": ["Write a python function square_Sum that accepts an integer n and returns the sum of squares of first n even natural numbers.\nsquare_Sum(2) == 20\n"], "completions": ["from typing import List\n## main.py\n\ndef square_Sum(n: int) -> int:\n    \"\"\"\n    Calculate the sum of squares of the first n even natural numbers.\n\n    Args:\n        n (int): The number of even natural numbers to consider.\n\n    Returns:\n        int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    sum_of_squares = 0\n    i = 0\n\n    while n > 0:\n        if (i + 1) % 2 == 0:\n            sum_of_squares += i ** 2\n            n -= 1\n        i += 1\n\n    return sum_of_squares\n", "from typing import List\n## main.py\n\ndef square_Sum(n: int) -> int:\n    \"\"\"\n    Calculate the sum of squares of the first n even natural numbers.\n\n    Args:\n        n (int): The number of even natural numbers whose squares are to be summed.\n\n    Returns:\n        int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    sum_of_squares = 0\n    i = 1\n\n    while n > 0:\n        if i % 2 == 0:\n            sum_of_squares += i ** 2\n            n -= 1\n        i += 1\n\n    return sum_of_squares\n", "from typing import List\n## main.py\n\ndef square_Sum(n: int) -> int:\n    \"\"\"\n    Calculates the sum of squares of the first n even natural numbers.\n    \n    Args:\n        n (int): The number of even natural numbers whose squares are to be summed.\n    \n    Returns:\n        int: The sum of squares of the first n even natural numbers.\n    \n    Raises:\n        ValueError: If n is less than or equal to 0.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    sum_of_squares = 0\n    for i in range(2, 2 * n + 1, 2):\n        sum_of_squares += i ** 2\n    \n    return sum_of_squares\n", "from typing import List\n## main.py\n\ndef square_Sum(n: int) -> int:\n    \"\"\"\n    Calculate the sum of squares of the first n even natural numbers.\n\n    Args:\n        n (int): The number of even natural numbers whose squares are to be summed.\n\n    Returns:\n        int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    i = 1\n\n    while n > 0:\n        if i % 2 == 0:\n            sum_of_squares += i ** 2\n            n -= 1\n        i += 1\n\n    return sum_of_squares\n", "from typing import List\n## main.py\n\ndef square_Sum(n: int) -> int:\n    \"\"\"\n    Calculate the sum of squares of the first n even natural numbers.\n\n    Args:\n        n (int): The number of even natural numbers whose squares are to be summed.\n\n    Returns:\n        int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    sum_of_squares = 0\n    i = 1\n\n    while n > 0:\n        if i % 2 == 0:\n            sum_of_squares += i ** 2\n            n -= 1\n        i += 1\n\n    return sum_of_squares\n", "from typing import List\n## main.py\n\ndef square_Sum(n: int) -> int:\n    \"\"\"\n    Calculate the sum of squares of the first n even natural numbers.\n\n    Args:\n        n (int): The number of even natural numbers to consider.\n\n    Returns:\n        int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    sum_of_squares = 0\n    i = 1\n\n    while n > 0:\n        if i % 2 == 0:\n            sum_of_squares += i ** 2\n            n -= 1\n        i += 1\n\n    return sum_of_squares\n", "from typing import List\n## main.py\n\ndef square_Sum(n: int) -> int:\n    \"\"\"\n    Calculate the sum of squares of the first n even natural numbers.\n\n    Args:\n        n (int): The number of even natural numbers whose squares are to be summed.\n\n    Returns:\n        int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    sum_of_squares = 0\n    i = 1\n\n    while n > 0:\n        if i % 2 == 0:\n            sum_of_squares += i ** 2\n            n -= 1\n        i += 1\n\n    return sum_of_squares\n", "from typing import List\n## main.py\n\ndef square_Sum(n: int) -> int:\n    \"\"\"\n    Calculate the sum of squares of the first n even natural numbers.\n\n    Args:\n        n (int): The number of even natural numbers to sum the squares of.\n\n    Returns:\n        int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n * 2 + 1, 2):\n        sum_of_squares += i ** 2\n    return sum_of_squares\n", "from typing import List\n## main.py\n\ndef square_Sum(n: int) -> int:\n    \"\"\"\n    Calculates the sum of squares of the first n even natural numbers.\n\n    Args:\n        n (int): The number of even natural numbers to consider.\n\n    Returns:\n        int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_squares += even_number ** 2\n    return sum_of_squares\n\n# Example usage:\n# result = square_Sum(5)  # This would calculate the sum of squares of the first 5 even natural numbers\n# print(result)  # Output would be the sum of squares of 2, 4, 6, 8, 10\n", "from typing import List\n## main.py\n\ndef square_Sum(n: int) -> int:\n    \"\"\"\n    Calculates the sum of squares of the first n even natural numbers.\n\n    Args:\n        n (int): The number of even natural numbers to consider.\n\n    Returns:\n        int: The sum of squares of the first n even natural numbers.\n\n    Raises:\n        ValueError: If the input is less than or equal to zero.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_squares += even_number ** 2\n    \n    return sum_of_squares\n"], "plans": ["requirement analysis:\nThe original requirement is to write a Python function that calculates the sum of squares of the first n even natural numbers. This is a straightforward mathematical problem that can be solved using a simple loop to iterate through the even numbers and compute their squares. The function should be efficient and handle edge cases such as when n is zero or negative.\nrequirement pool:\n- The main code should correctly calculate the sum of squares of the first n even natural numbers.\n- The function should handle edge cases such as when n is zero or negative.\n- The function should be optimized for performance to handle large values of n efficiently.\nTo implement the function `square_Sum` that calculates the sum of squares of the first n even natural numbers, we will use a simple loop to iterate through the even numbers, compute their squares, and accumulate the sum. This approach ensures efficiency and handles edge cases such as when n is zero or negative.\n", "requirement analysis:\nThe original requirement is to write a Python function that calculates the sum of squares of the first n even natural numbers. This is a straightforward mathematical problem that can be solved using a simple loop to iterate through the even numbers and compute their squares. The function should be efficient and handle edge cases such as when n is zero or negative.\nrequirement pool:\n- The main code should correctly calculate the sum of squares of the first n even natural numbers.\n- The function should handle edge cases such as when n is zero or negative.\n- The function should be optimized for performance to handle large values of n efficiently.\nTo implement the function `square_Sum` that calculates the sum of squares of the first n even natural numbers, we will use a simple loop to iterate through the even numbers, compute their squares, and accumulate the sum. This approach ensures efficiency and handles edge cases such as when n is zero or negative.\n", "requirement analysis:\nThe requirement is to write a Python function that calculates the sum of squares of the first n even natural numbers. This is a straightforward mathematical problem that can be solved using a simple loop to iterate through the even numbers and compute their squares. The function should be efficient and handle edge cases such as when n is zero or negative.\nrequirement pool:\n- The main code should correctly calculate the sum of squares of the first n even natural numbers.\n- The function should handle edge cases such as when n is zero or negative.\n- The function should be optimized for performance to handle large values of n efficiently.\nTo implement the function `square_Sum` that calculates the sum of squares of the first n even natural numbers, we will use a simple loop to iterate through the even numbers, compute their squares, and accumulate the sum. This approach ensures efficiency and handles edge cases such as when n is zero or negative by returning 0 or raising a ValueError respectively.\n", "requirement analysis:\nThe requirement is to write a Python function that calculates the sum of squares of the first n even natural numbers. This is a straightforward mathematical problem that can be solved using a simple loop to iterate through the even numbers and compute their squares. The function should be efficient and handle edge cases such as when n is zero or negative.\nrequirement pool:\n- The main code should correctly calculate the sum of squares of the first n even natural numbers.\n- The function should handle edge cases such as when n is zero or negative.\n- Implement the function in a way that is easy to understand and maintain.\n- Ensure the function is optimized for performance.\n- Include comments in the code to explain the logic.\nWe will implement the function `square_Sum` in Python, which calculates the sum of squares of the first n even natural numbers. The function will use a simple loop to iterate through the even numbers, compute their squares, and accumulate the sum. This approach ensures the function is efficient and easy to understand.\n", "requirement analysis:\nThe original requirement is to write a Python function that calculates the sum of squares of the first n even natural numbers. This is a straightforward mathematical problem that can be solved using a simple loop to iterate through the even numbers and compute their squares. The function should be efficient and handle edge cases such as when n is zero or negative.\nrequirement pool:\n- The main code should correctly calculate the sum of squares of the first n even natural numbers.\n- The function should handle edge cases such as when n is zero or negative.\n- The function should be optimized for performance to handle large values of n efficiently.\nTo implement the function `square_Sum` that calculates the sum of squares of the first n even natural numbers, we will use a simple loop to iterate through the even numbers, compute their squares, and accumulate the sum. This approach ensures efficiency and handles edge cases such as when n is zero or negative.\n", "requirement analysis:\nThe original requirement is to write a Python function that calculates the sum of squares of the first n even natural numbers. This is a straightforward mathematical problem that can be solved using a simple loop to iterate through the even numbers and compute their squares. The function should be efficient and handle edge cases such as when n is zero or negative.\nrequirement pool:\n- The main code should correctly calculate the sum of squares of the first n even natural numbers.\n- The function should handle edge cases such as when n is zero or negative.\n- The function should be optimized for performance to handle large values of n efficiently.\nTo implement the function `square_Sum` that calculates the sum of squares of the first n even natural numbers, we will use a simple loop to iterate through the even numbers, compute their squares, and accumulate the sum. This approach ensures efficiency and handles edge cases such as when n is zero or negative.\n", "requirement analysis:\nThe original requirement is to write a Python function that calculates the sum of squares of the first n even natural numbers. This is a straightforward mathematical problem that can be solved using a simple loop to iterate through the even numbers and compute their squares. The function should be efficient and handle edge cases such as when n is zero or negative.\nrequirement pool:\n- The main code should correctly calculate the sum of squares of the first n even natural numbers.\n- The function should handle edge cases such as when n is zero or negative.\n- The function should be optimized for performance to handle large values of n efficiently.\nTo implement the function `square_Sum` that calculates the sum of squares of the first n even natural numbers, we will use a simple loop to iterate through the even numbers, compute their squares, and accumulate the sum. This approach ensures efficiency and handles edge cases such as when n is zero or negative.\n", "requirement analysis:\nThe requirement is to create a Python function that calculates the sum of squares of the first n even natural numbers. This is a specific mathematical operation that can be useful in various applications, including statistics and data analysis. The function should be efficient and easy to use, making it accessible for both beginners and advanced users.\nrequirement pool:\n- The main code should be efficient and clear\n- The function should handle both small and large values of n\n- The user interface should be simple and intuitive\n- The application should include basic error handling\n- The product should be compatible with both desktop and mobile platforms\nTo create a Python function that calculates the sum of squares of the first n even natural numbers, we will use a straightforward approach. The function will iterate through the first n even numbers, square each, and sum them up. This approach ensures efficiency and clarity, making it suitable for both small and large values of n.\n", "requirement analysis:\nThe function 'square_Sum' needs to calculate the sum of squares of the first n even natural numbers. This involves iterating through the first n even numbers, squaring each, and summing them up. The function should be efficient and easy to understand.\nrequirement pool:\n- Implement the function 'square_Sum' to calculate the sum of squares of the first n even natural numbers.\n- Ensure the function is user-friendly and can handle different values of n efficiently.\n- Design a simple and intuitive user interface for the application.\nTo implement the 'square_Sum' function efficiently, we will use Python's built-in capabilities and a simple loop to iterate through the first n even natural numbers, square each, and sum them up. This approach ensures clarity and efficiency, making the function easy to understand and maintain.\n", "requirement analysis:\nThe function 'square_Sum' needs to calculate the sum of squares of the first n even natural numbers. This involves iterating through the first n even numbers, squaring each, and summing them up. The function should be efficient and handle edge cases like negative inputs or zero.\nrequirement pool:\n- The main code should correctly calculate the sum of squares of the first n even natural numbers.\n- The application should handle edge cases such as negative input or zero input.\n- The user interface should be clean and intuitive, with clear instructions and feedback mechanisms.\nTo implement the 'square_Sum' function, we will use a straightforward approach that iterates through the first n even natural numbers, squares each number, and sums them up. This approach is efficient and easy to understand. We will handle edge cases such as negative inputs or zero by returning an error message or a specific value indicating an invalid input.\n"], "test": ["def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(4) == 120", "def check(square_Sum):\n\tassert square_Sum(6) == 364", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(6) == 364", "def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(1) == 4", "def check(square_Sum):\n\tassert square_Sum(6) == 364", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(5) == 220", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(4) == 120", "def check(square_Sum):\n\tassert square_Sum(7) == 560", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(4) == 120", "def check(square_Sum):\n\tassert square_Sum(7) == 560", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(5) == 220", "def check(square_Sum):\n\tassert square_Sum(4) == 120", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(7) == 560", "def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(1) == 4", "def check(square_Sum):\n\tassert square_Sum(5) == 220", "def check(square_Sum):\n\tassert square_Sum(6) == 364", "def check(square_Sum):\n\tassert square_Sum(1) == 4", "def check(square_Sum):\n\tassert square_Sum(7) == 560", "def check(square_Sum):\n\tassert square_Sum(5) == 220", "def check(square_Sum):\n\tassert square_Sum(7) == 560", "def check(square_Sum):\n\tassert square_Sum(6) == 364", "def check(square_Sum):\n\tassert square_Sum(7) == 560", "def check(square_Sum):\n\tassert square_Sum(6) == 364", "def check(square_Sum):\n\tassert square_Sum(8) == 816", "def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(1) == 4", "def check(square_Sum):\n\tassert square_Sum(1) == 4", "def check(square_Sum):\n\tassert square_Sum(8) == 816", "def check(square_Sum):\n\tassert square_Sum(4) == 120", "def check(square_Sum):\n\tassert square_Sum(6) == 364", "def check(square_Sum):\n\tassert square_Sum(7) == 560", "def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(5) == 220", "def check(square_Sum):\n\tassert square_Sum(8) == 816", "def check(square_Sum):\n\tassert square_Sum(5) == 220", "def check(square_Sum):\n\tassert square_Sum(8) == 816", "def check(square_Sum):\n\tassert square_Sum(4) == 120", "def check(square_Sum):\n\tassert square_Sum(5) == 220", "def check(square_Sum):\n\tassert square_Sum(7) == 560", "def check(square_Sum):\n\tassert square_Sum(4) == 120", "def check(square_Sum):\n\tassert square_Sum(7) == 560", "def check(square_Sum):\n\tassert square_Sum(7) == 560", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(8) == 816", "def check(square_Sum):\n\tassert square_Sum(4) == 120", "def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(8) == 816", "def check(square_Sum):\n\tassert square_Sum(5) == 220", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(5) == 220", "def check(square_Sum):\n\tassert square_Sum(7) == 560", "def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(7) == 560", "def check(square_Sum):\n\tassert square_Sum(8) == 816", "def check(square_Sum):\n\tassert square_Sum(5) == 220", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(8) == 816", "def check(square_Sum):\n\tassert square_Sum(1) == 4", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(6) == 364", "def check(square_Sum):\n\tassert square_Sum(9) == 1140", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(5) == 220", "def check(square_Sum):\n\tassert square_Sum(4) == 120", "def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(1) == 4", "def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(8) == 816", "def check(square_Sum):\n\tassert square_Sum(9) == 1140", "def check(square_Sum):\n\tassert square_Sum(1) == 4", "def check(square_Sum):\n\tassert square_Sum(6) == 364", "def check(square_Sum):\n\tassert square_Sum(8) == 816", "def check(square_Sum):\n\tassert square_Sum(6) == 364", "def check(square_Sum):\n\tassert square_Sum(7) == 560", "def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(1) == 4", "def check(square_Sum):\n\tassert square_Sum(9) == 1140", "def check(square_Sum):\n\tassert square_Sum(4) == 120", "def check(square_Sum):\n\tassert square_Sum(6) == 364", "def check(square_Sum):\n\tassert square_Sum(9) == 1140", "def check(square_Sum):\n\tassert square_Sum(9) == 1140", "def check(square_Sum):\n\tassert square_Sum(2) == 20"], "scores": [0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [false, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [0, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef square_Sum(n: int) -> int:\n    \"\"\"\n    Calculates the sum of squares of the first n even natural numbers.\n\n    Args:\n        n (int): The number of even natural numbers to consider.\n\n    Returns:\n        int: The sum of squares of the first n even natural numbers.\n\n    Raises:\n        ValueError: If the input is less than or equal to zero.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_squares += even_number ** 2\n    \n    return sum_of_squares\n", "passed": true, "pass": true, "pass_num": 9, "round": 432, "mutate_method": "condense_two2one", "parent_index": 359}
