{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 59, "prompt": "Write a function to find the nth octagonal number. An octagonal number is a figurate number that represents an octagon.", "code": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ", "test_imports": [], "test_list": ["assert is_octagonal(5) == 65", "assert is_octagonal(10) == 280", "assert is_octagonal(15) == 645", "assert is_octagonal(6) == 96", "assert is_octagonal(1) == 1", "assert is_octagonal(10) == 280", "assert is_octagonal(9) == 225", "assert is_octagonal(5) == 65", "assert is_octagonal(9) == 225", "assert is_octagonal(5) == 65", "assert is_octagonal(10) == 280", "assert is_octagonal(5) == 65", "assert is_octagonal(6) == 96", "assert is_octagonal(5) == 65", "assert is_octagonal(5) == 65", "assert is_octagonal(2) == 8", "assert is_octagonal(8) == 176", "assert is_octagonal(7) == 133", "assert is_octagonal(6) == 96", "assert is_octagonal(1) == 1", "assert is_octagonal(3) == 21", "assert is_octagonal(3) == 21", "assert is_octagonal(1) == 1", "assert is_octagonal(5) == 65", "assert is_octagonal(1) == 1", "assert is_octagonal(2) == 8", "assert is_octagonal(4) == 40", "assert is_octagonal(4) == 40", "assert is_octagonal(3) == 21", "assert is_octagonal(10) == 280", "assert is_octagonal(2) == 8", "assert is_octagonal(6) == 96", "assert is_octagonal(8) == 176", "assert is_octagonal(1) == 1", "assert is_octagonal(9) == 225", "assert is_octagonal(10) == 280", "assert is_octagonal(14) == 560", "assert is_octagonal(14) == 560", "assert is_octagonal(11) == 341", "assert is_octagonal(13) == 481", "assert is_octagonal(8) == 176", "assert is_octagonal(5) == 65", "assert is_octagonal(14) == 560", "assert is_octagonal(10) == 280", "assert is_octagonal(10) == 280", "assert is_octagonal(9) == 225", "assert is_octagonal(12) == 408", "assert is_octagonal(5) == 65", "assert is_octagonal(6) == 96", "assert is_octagonal(13) == 481", "assert is_octagonal(9) == 225", "assert is_octagonal(8) == 176", "assert is_octagonal(12) == 408", "assert is_octagonal(10) == 280", "assert is_octagonal(11) == 341", "assert is_octagonal(10) == 280", "assert is_octagonal(6) == 96", "assert is_octagonal(15) == 645", "assert is_octagonal(14) == 560", "assert is_octagonal(15) == 645", "assert is_octagonal(8) == 176", "assert is_octagonal(14) == 560", "assert is_octagonal(5) == 65", "assert is_octagonal(15) == 645", "assert is_octagonal(14) == 560", "assert is_octagonal(14) == 560", "assert is_octagonal(7) == 133", "assert is_octagonal(10) == 280", "assert is_octagonal(14) == 560", "assert is_octagonal(14) == 560", "assert is_octagonal(14) == 560", "assert is_octagonal(16) == 736", "assert is_octagonal(15) == 645", "assert is_octagonal(15) == 645", "assert is_octagonal(16) == 736", "assert is_octagonal(17) == 833", "assert is_octagonal(14) == 560", "assert is_octagonal(20) == 1160", "assert is_octagonal(18) == 936", "assert is_octagonal(17) == 833", "assert is_octagonal(13) == 481", "assert is_octagonal(14) == 560", "assert is_octagonal(12) == 408", "assert is_octagonal(16) == 736", "assert is_octagonal(17) == 833", "assert is_octagonal(16) == 736", "assert is_octagonal(18) == 936", "assert is_octagonal(10) == 280", "assert is_octagonal(11) == 341", "assert is_octagonal(13) == 481", "assert is_octagonal(17) == 833", "assert is_octagonal(15) == 645", "assert is_octagonal(16) == 736", "assert is_octagonal(17) == 833", "assert is_octagonal(17) == 833", "assert is_octagonal(14) == 560", "assert is_octagonal(10) == 280", "assert is_octagonal(18) == 936", "assert is_octagonal(11) == 341", "assert is_octagonal(17) == 833", "assert is_octagonal(19) == 1045", "assert is_octagonal(15) == 645"], "entry_point": "is_octagonal", "repair_prompt": ["Write a function is_octagonal to find the nth octagonal number. An octagonal number is a figurate number that represents an octagon.\nis_octagonal(5) == 65\n"], "completions": ["from typing import List\n## main.py\n\ndef is_octagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth octagonal number.\n\n    Args:\n        n (int): The position in the octagonal sequence.\n\n    Returns:\n        int: The nth octagonal number.\n\n    Raises:\n        ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return 3 * n * n - 2 * n\n\n# Example usage:\n# print(is_octagonal(5))  # Output should be 65\n", "from typing import List\n## main.py\n\ndef is_octagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth octagonal number using the formula (3n^2 - 2n).\n\n    Args:\n        n (int): The position in the octagonal sequence.\n\n    Returns:\n        int: The nth octagonal number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return 3 * n * n - 2 * n\n\n# Example usage:\n# print(is_octagonal(5))  # Output: 52\n", "from typing import List\n## main.py\n\ndef is_octagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth octagonal number.\n\n    Args:\n        n (int): The position in the octagonal sequence.\n\n    Returns:\n        int: The nth octagonal number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return 3 * n * n - 2 * n\n\n# Example usage:\n# print(is_octagonal(5))  # Output: 52\n", "from typing import List\n## main.py\n\ndef is_octagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth octagonal number using the formula (3n^2 - 2n).\n\n    Args:\n        n (int): The position in the octagonal sequence.\n\n    Returns:\n        int: The nth octagonal number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return 3 * n * n - 2 * n\n\n# Example usage:\n# print(is_octagonal(5))  # Output: 52\n", "from typing import List\n## main.py\n\ndef is_octagonal(n: int) -> int:\n    \"\"\"\n    Returns the nth octagonal number.\n    \n    Args:\n        n (int): A positive integer representing the position in the octagonal sequence.\n    \n    Returns:\n        int: The nth octagonal number.\n        \n    Raises:\n        ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return 3 * n * n - 2 * n\n\n# Example usage:\n# print(is_octagonal(5))  # Output: 65\n", "from typing import List\n## main.py\n\ndef is_octagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth octagonal number using the formula (3n^2 - 2n).\n\n    Args:\n        n (int): The position in the octagonal sequence.\n\n    Returns:\n        int: The nth octagonal number.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return 3 * n * n - 2 * n\n\n# Example usage:\n# print(is_octagonal(5))  # Output: 52\n", "from typing import List\n## main.py\n\ndef is_octagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth octagonal number.\n\n    Args:\n        n (int): The position in the octagonal sequence.\n\n    Returns:\n        int: The nth octagonal number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return (3 * n * n) - (2 * n)\n\n# Example usage:\n# print(is_octagonal(5))  # Output: 52\n", "from typing import List\n## main.py\n\ndef is_octagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth octagonal number.\n\n    Args:\n        n (int): The position in the sequence, must be a positive integer.\n\n    Returns:\n        int: The nth octagonal number if n is a positive integer, otherwise -1.\n    \"\"\"\n    if n <= 0:\n        return -1\n    return 3 * n * n - 2 * n\n", "from typing import List\n## main.py\n\ndef is_octagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth octagonal number.\n\n    Args:\n        n (int): The position in the octagonal sequence.\n\n    Returns:\n        int: The nth octagonal number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return 3 * n * n - 2 * n\n\n# Example usage:\n# print(is_octagonal(5))  # Output: 52\n", "from typing import List\n## main.py\n\ndef is_octagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth octagonal number using the formula (3n^2 - 2n).\n\n    Args:\n        n (int): The position in the sequence.\n\n    Returns:\n        int: The nth octagonal number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return 3 * n * n - 2 * n\n\n# Example usage:\n# print(is_octagonal(5))  # Output: 52\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that calculates the nth octagonal number. An octagonal number is a figurate number that represents an octagon, and the formula to calculate the nth octagonal number is given by (3n^2 - 2n). This function should be efficient and handle basic input validation.\nrequirement pool:\n- The main code should calculate the nth octagonal number using the formula (3n^2 - 2n).\n- Implement input validation to ensure the input is a positive integer.\n- Ensure the function returns the correct octagonal number for the given input.\nTo implement the function `is_octagonal` that calculates the nth octagonal number, we will use Python's mathematical capabilities to compute the result based on the formula (3n^2 - 2n). This function will also include basic input validation to ensure the input is a positive integer.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth octagonal number. Octagonal numbers are a sequence of numbers that represent an octagon's side length. The formula for the nth octagonal number is given by (3n^2 - 2n). This function should be efficient and easy to understand.\nrequirement pool:\n- The main code should calculate the nth octagonal number using the formula (3n^2 - 2n).\n- Ensure the function is_octagonal(n) returns the correct octagonal number for any positive integer n.\n- Optimize the function for performance to handle large values of n efficiently.\nTo implement the function is_octagonal(n) that calculates the nth octagonal number, we will use Python's mathematical capabilities. The formula for the nth octagonal number is given by (3n^2 - 2n). This formula will be directly translated into a Python function, ensuring efficiency and clarity.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth octagonal number. An octagonal number is a figurate number that represents an octagon, and the formula for the nth octagonal number is given by (3n^2 - 2n). This requirement is clear and specific, focusing on a mathematical calculation for a specific type of number.\nrequirement pool:\n- Implement the function is_octagonal to calculate the nth octagonal number using the formula (3n^2 - 2n).\n- Ensure the function is_octagonal is tested for various values of n to verify its correctness.\n- Include user documentation for the function is_octagonal explaining its purpose and usage.\nTo implement the function is_octagonal, we will use Python's mathematical capabilities to compute the nth octagonal number based on the formula (3n^2 - 2n). This calculation is straightforward and can be efficiently handled by Python's built-in arithmetic operations.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth octagonal number. An octagonal number is a figurate number that represents an octagon, and the formula to calculate the nth octagonal number is given by (3n^2 - 2n). This function should be efficient and accurate in determining the nth octagonal number.\nrequirement pool:\n- The main code should accurately calculate the nth octagonal number using the formula (3n^2 - 2n).\n- The function should be optimized for performance to handle large values of n efficiently.\n- The user interface should be simple and intuitive, allowing users to easily input the value of n and view the result.\nWe will implement the function `is_octagonal` using Python, leveraging the mathematical formula for calculating the nth octagonal number, which is given by (3n^2 - 2n). This approach ensures efficiency and accuracy in determining the nth octagonal number.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth octagonal number. An octagonal number is a figurate number that represents an octagon, and the formula to calculate the nth octagonal number is given by (3n^2 - 2n). This function should be efficient and handle basic input validation.\nrequirement pool:\n- The main code should calculate the nth octagonal number using the formula (3n^2 - 2n).\n- Implement input validation to ensure the input is a positive integer.\n- Ensure the function returns the correct octagonal number for the given input.\nTo implement the function `is_octagonal` that calculates the nth octagonal number, we will use Python's mathematical capabilities. The formula for the nth octagonal number is given by (3n^2 - 2n). We will ensure the function handles basic input validation to confirm the input is a positive integer.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth octagonal number. An octagonal number is a figurate number that represents an octagon, and the formula to calculate the nth octagonal number is given by (3n^2 - 2n). This function should be efficient and accurate in determining the nth octagonal number.\nrequirement pool:\n- The main code should accurately calculate the nth octagonal number using the formula (3n^2 - 2n).\n- The function should be optimized for performance to handle large values of n efficiently.\n- The user interface should be simple and intuitive, allowing users to easily input the value of n and view the result.\nWe will implement the function `is_octagonal` using Python, leveraging the mathematical formula for calculating the nth octagonal number, which is given by (3n^2 - 2n). This approach ensures efficiency and accuracy in determining the nth octagonal number.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth octagonal number. An octagonal number is a figurate number that represents an octagon, and the formula for the nth octagonal number is given by (3n^2 - 2n). This requirement is clear and specific, focusing on a mathematical calculation.\nrequirement pool:\n- Implement the function is_octagonal to calculate the nth octagonal number using the formula (3n^2 - 2n).\nTo implement the function is_octagonal, we will use Python, leveraging its simplicity and readability. The formula for the nth octagonal number is given by (3n^2 - 2n). We will define a function that takes an integer n as input and returns the nth octagonal number using this formula.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth octagonal number. Octagonal numbers are a sequence of numbers that represent an octagon's side length. The formula to calculate the nth octagonal number is given by (3n^2 - 2n). This function should be efficient and handle basic input validation.\nrequirement pool:\n- The main code should accurately calculate the nth octagonal number using the formula (3n^2 - 2n).\n- Implement input validation to ensure the input is a positive integer.\n- Ensure the function is optimized for performance and handles large values of n efficiently.\nTo create a function that calculates the nth octagonal number efficiently, we will use Python's built-in capabilities and ensure the function handles basic input validation. The formula for the nth octagonal number is given by (3n^2 - 2n). We will implement this formula directly in the function and include a simple check to ensure the input is a positive integer.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth octagonal number. An octagonal number is a figurate number that represents an octagon, and the formula to calculate the nth octagonal number is given by (3n^2 - 2n). This function should be efficient and handle basic input validation.\nrequirement pool:\n- The main code should calculate the nth octagonal number using the formula (3n^2 - 2n).\n- The function should handle basic input validation to ensure the input is a positive integer.\n- The function should be optimized for performance to handle large values of n efficiently.\nTo implement the function `is_octagonal` that calculates the nth octagonal number, we will use Python's mathematical capabilities to compute the result based on the formula (3n^2 - 2n). This approach is efficient and straightforward, leveraging Python's built-in support for arithmetic operations.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth octagonal number. An octagonal number is a figurate number that represents an octagon, and the formula to calculate the nth octagonal number is given by (3n^2 - 2n). This function should be efficient and accurate in determining the nth octagonal number.\nrequirement pool:\n- The main code should accurately calculate the nth octagonal number using the formula (3n^2 - 2n).\n- The function should be optimized for performance to handle large values of n efficiently.\n- The user interface should be simple and intuitive, allowing users to easily input the value of n and view the result.\nWe will implement the function `is_octagonal` using Python, leveraging mathematical formulas to calculate the nth octagonal number. The formula (3n^2 - 2n) will be directly applied in the function to ensure accuracy and efficiency.\n"], "test": ["def check(is_octagonal):\n\tassert is_octagonal(5) == 65", "def check(is_octagonal):\n\tassert is_octagonal(10) == 280", "def check(is_octagonal):\n\tassert is_octagonal(15) == 645", "def check(is_octagonal):\n\tassert is_octagonal(6) == 96", "def check(is_octagonal):\n\tassert is_octagonal(1) == 1", "def check(is_octagonal):\n\tassert is_octagonal(10) == 280", "def check(is_octagonal):\n\tassert is_octagonal(9) == 225", "def check(is_octagonal):\n\tassert is_octagonal(5) == 65", "def check(is_octagonal):\n\tassert is_octagonal(9) == 225", "def check(is_octagonal):\n\tassert is_octagonal(5) == 65", "def check(is_octagonal):\n\tassert is_octagonal(10) == 280", "def check(is_octagonal):\n\tassert is_octagonal(5) == 65", "def check(is_octagonal):\n\tassert is_octagonal(6) == 96", "def check(is_octagonal):\n\tassert is_octagonal(5) == 65", "def check(is_octagonal):\n\tassert is_octagonal(5) == 65", "def check(is_octagonal):\n\tassert is_octagonal(2) == 8", "def check(is_octagonal):\n\tassert is_octagonal(8) == 176", "def check(is_octagonal):\n\tassert is_octagonal(7) == 133", "def check(is_octagonal):\n\tassert is_octagonal(6) == 96", "def check(is_octagonal):\n\tassert is_octagonal(1) == 1", "def check(is_octagonal):\n\tassert is_octagonal(3) == 21", "def check(is_octagonal):\n\tassert is_octagonal(3) == 21", "def check(is_octagonal):\n\tassert is_octagonal(1) == 1", "def check(is_octagonal):\n\tassert is_octagonal(5) == 65", "def check(is_octagonal):\n\tassert is_octagonal(1) == 1", "def check(is_octagonal):\n\tassert is_octagonal(2) == 8", "def check(is_octagonal):\n\tassert is_octagonal(4) == 40", "def check(is_octagonal):\n\tassert is_octagonal(4) == 40", "def check(is_octagonal):\n\tassert is_octagonal(3) == 21", "def check(is_octagonal):\n\tassert is_octagonal(10) == 280", "def check(is_octagonal):\n\tassert is_octagonal(2) == 8", "def check(is_octagonal):\n\tassert is_octagonal(6) == 96", "def check(is_octagonal):\n\tassert is_octagonal(8) == 176", "def check(is_octagonal):\n\tassert is_octagonal(1) == 1", "def check(is_octagonal):\n\tassert is_octagonal(9) == 225", "def check(is_octagonal):\n\tassert is_octagonal(10) == 280", "def check(is_octagonal):\n\tassert is_octagonal(14) == 560", "def check(is_octagonal):\n\tassert is_octagonal(14) == 560", "def check(is_octagonal):\n\tassert is_octagonal(11) == 341", "def check(is_octagonal):\n\tassert is_octagonal(13) == 481", "def check(is_octagonal):\n\tassert is_octagonal(8) == 176", "def check(is_octagonal):\n\tassert is_octagonal(5) == 65", "def check(is_octagonal):\n\tassert is_octagonal(14) == 560", "def check(is_octagonal):\n\tassert is_octagonal(10) == 280", "def check(is_octagonal):\n\tassert is_octagonal(10) == 280", "def check(is_octagonal):\n\tassert is_octagonal(9) == 225", "def check(is_octagonal):\n\tassert is_octagonal(12) == 408", "def check(is_octagonal):\n\tassert is_octagonal(5) == 65", "def check(is_octagonal):\n\tassert is_octagonal(6) == 96", "def check(is_octagonal):\n\tassert is_octagonal(13) == 481", "def check(is_octagonal):\n\tassert is_octagonal(9) == 225", "def check(is_octagonal):\n\tassert is_octagonal(8) == 176", "def check(is_octagonal):\n\tassert is_octagonal(12) == 408", "def check(is_octagonal):\n\tassert is_octagonal(10) == 280", "def check(is_octagonal):\n\tassert is_octagonal(11) == 341", "def check(is_octagonal):\n\tassert is_octagonal(10) == 280", "def check(is_octagonal):\n\tassert is_octagonal(6) == 96", "def check(is_octagonal):\n\tassert is_octagonal(15) == 645", "def check(is_octagonal):\n\tassert is_octagonal(14) == 560", "def check(is_octagonal):\n\tassert is_octagonal(15) == 645", "def check(is_octagonal):\n\tassert is_octagonal(8) == 176", "def check(is_octagonal):\n\tassert is_octagonal(14) == 560", "def check(is_octagonal):\n\tassert is_octagonal(5) == 65", "def check(is_octagonal):\n\tassert is_octagonal(15) == 645", "def check(is_octagonal):\n\tassert is_octagonal(14) == 560", "def check(is_octagonal):\n\tassert is_octagonal(14) == 560", "def check(is_octagonal):\n\tassert is_octagonal(7) == 133", "def check(is_octagonal):\n\tassert is_octagonal(10) == 280", "def check(is_octagonal):\n\tassert is_octagonal(14) == 560", "def check(is_octagonal):\n\tassert is_octagonal(14) == 560", "def check(is_octagonal):\n\tassert is_octagonal(14) == 560", "def check(is_octagonal):\n\tassert is_octagonal(16) == 736", "def check(is_octagonal):\n\tassert is_octagonal(15) == 645", "def check(is_octagonal):\n\tassert is_octagonal(15) == 645", "def check(is_octagonal):\n\tassert is_octagonal(16) == 736", "def check(is_octagonal):\n\tassert is_octagonal(17) == 833", "def check(is_octagonal):\n\tassert is_octagonal(14) == 560", "def check(is_octagonal):\n\tassert is_octagonal(20) == 1160", "def check(is_octagonal):\n\tassert is_octagonal(18) == 936", "def check(is_octagonal):\n\tassert is_octagonal(17) == 833", "def check(is_octagonal):\n\tassert is_octagonal(13) == 481", "def check(is_octagonal):\n\tassert is_octagonal(14) == 560", "def check(is_octagonal):\n\tassert is_octagonal(12) == 408", "def check(is_octagonal):\n\tassert is_octagonal(16) == 736", "def check(is_octagonal):\n\tassert is_octagonal(17) == 833", "def check(is_octagonal):\n\tassert is_octagonal(16) == 736", "def check(is_octagonal):\n\tassert is_octagonal(18) == 936", "def check(is_octagonal):\n\tassert is_octagonal(10) == 280", "def check(is_octagonal):\n\tassert is_octagonal(11) == 341", "def check(is_octagonal):\n\tassert is_octagonal(13) == 481", "def check(is_octagonal):\n\tassert is_octagonal(17) == 833", "def check(is_octagonal):\n\tassert is_octagonal(15) == 645", "def check(is_octagonal):\n\tassert is_octagonal(16) == 736", "def check(is_octagonal):\n\tassert is_octagonal(17) == 833", "def check(is_octagonal):\n\tassert is_octagonal(17) == 833", "def check(is_octagonal):\n\tassert is_octagonal(14) == 560", "def check(is_octagonal):\n\tassert is_octagonal(10) == 280", "def check(is_octagonal):\n\tassert is_octagonal(18) == 936", "def check(is_octagonal):\n\tassert is_octagonal(11) == 341", "def check(is_octagonal):\n\tassert is_octagonal(17) == 833", "def check(is_octagonal):\n\tassert is_octagonal(19) == 1045", "def check(is_octagonal):\n\tassert is_octagonal(15) == 645"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef is_octagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth octagonal number using the formula (3n^2 - 2n).\n\n    Args:\n        n (int): The position in the sequence.\n\n    Returns:\n        int: The nth octagonal number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return 3 * n * n - 2 * n\n\n# Example usage:\n# print(is_octagonal(5))  # Output: 52\n", "passed": true, "pass": true, "pass_num": 10, "round": 15, "mutate_method": "add_1_sentence_at_end", "parent_index": 15}
