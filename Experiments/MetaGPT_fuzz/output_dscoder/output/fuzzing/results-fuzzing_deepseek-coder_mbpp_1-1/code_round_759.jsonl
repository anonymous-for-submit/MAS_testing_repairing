{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 287, "prompt": "Write a python function accepts an integer n. It should determine the sum of squares of the first n even natural numbers. Returns the sum of squares of first n even natural numbers.", "code": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)", "test_imports": [], "test_list": ["assert square_Sum(2) == 20", "assert square_Sum(3) == 56", "assert square_Sum(4) == 120", "assert square_Sum(6) == 364", "assert square_Sum(3) == 56", "assert square_Sum(6) == 364", "assert square_Sum(2) == 20", "assert square_Sum(1) == 4", "assert square_Sum(6) == 364", "assert square_Sum(3) == 56", "assert square_Sum(5) == 220", "assert square_Sum(3) == 56", "assert square_Sum(4) == 120", "assert square_Sum(7) == 560", "assert square_Sum(3) == 56", "assert square_Sum(2) == 20", "assert square_Sum(4) == 120", "assert square_Sum(7) == 560", "assert square_Sum(3) == 56", "assert square_Sum(5) == 220", "assert square_Sum(4) == 120", "assert square_Sum(3) == 56", "assert square_Sum(7) == 560", "assert square_Sum(2) == 20", "assert square_Sum(3) == 56", "assert square_Sum(3) == 56", "assert square_Sum(1) == 4", "assert square_Sum(5) == 220", "assert square_Sum(6) == 364", "assert square_Sum(1) == 4", "assert square_Sum(7) == 560", "assert square_Sum(5) == 220", "assert square_Sum(7) == 560", "assert square_Sum(6) == 364", "assert square_Sum(7) == 560", "assert square_Sum(6) == 364", "assert square_Sum(8) == 816", "assert square_Sum(2) == 20", "assert square_Sum(1) == 4", "assert square_Sum(1) == 4", "assert square_Sum(8) == 816", "assert square_Sum(4) == 120", "assert square_Sum(6) == 364", "assert square_Sum(7) == 560", "assert square_Sum(2) == 20", "assert square_Sum(5) == 220", "assert square_Sum(8) == 816", "assert square_Sum(5) == 220", "assert square_Sum(8) == 816", "assert square_Sum(4) == 120", "assert square_Sum(5) == 220", "assert square_Sum(7) == 560", "assert square_Sum(4) == 120", "assert square_Sum(7) == 560", "assert square_Sum(7) == 560", "assert square_Sum(3) == 56", "assert square_Sum(8) == 816", "assert square_Sum(4) == 120", "assert square_Sum(2) == 20", "assert square_Sum(2) == 20", "assert square_Sum(3) == 56", "assert square_Sum(8) == 816", "assert square_Sum(5) == 220", "assert square_Sum(3) == 56", "assert square_Sum(3) == 56", "assert square_Sum(2) == 20", "assert square_Sum(5) == 220", "assert square_Sum(7) == 560", "assert square_Sum(2) == 20", "assert square_Sum(7) == 560", "assert square_Sum(8) == 816", "assert square_Sum(5) == 220", "assert square_Sum(3) == 56", "assert square_Sum(8) == 816", "assert square_Sum(1) == 4", "assert square_Sum(3) == 56", "assert square_Sum(6) == 364", "assert square_Sum(9) == 1140", "assert square_Sum(3) == 56", "assert square_Sum(5) == 220", "assert square_Sum(4) == 120", "assert square_Sum(2) == 20", "assert square_Sum(2) == 20", "assert square_Sum(1) == 4", "assert square_Sum(2) == 20", "assert square_Sum(2) == 20", "assert square_Sum(8) == 816", "assert square_Sum(9) == 1140", "assert square_Sum(1) == 4", "assert square_Sum(6) == 364", "assert square_Sum(8) == 816", "assert square_Sum(6) == 364", "assert square_Sum(7) == 560", "assert square_Sum(2) == 20", "assert square_Sum(3) == 56", "assert square_Sum(1) == 4", "assert square_Sum(9) == 1140", "assert square_Sum(4) == 120", "assert square_Sum(6) == 364", "assert square_Sum(9) == 1140", "assert square_Sum(9) == 1140", "assert square_Sum(2) == 20"], "entry_point": "square_Sum", "repair_prompt": ["Write a python function square_Sum accepts an integer n. It should determine the sum of squares of the first n even natural numbers. Returns the sum of squares of first n even natural numbers.\nsquare_Sum(2) == 20\n"], "completions": ["from typing import List\n## main.py\n\ndef square_Sum(n: int) -> int:\n    \"\"\"\n    Calculates the sum of squares of the first n even natural numbers.\n\n    Args:\n        n (int): The number of even natural numbers to consider.\n\n    Returns:\n        int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    sum_of_squares = 0\n    for i in range(n):\n        even_number = 2 * i\n        square = even_number ** 2\n        sum_of_squares += square\n    \n    return sum_of_squares\n\n# Example usage:\n# print(square_Sum(3))  # Output: 20 (4 + 16 + 36)\n", "from typing import List\n## main.py\n\ndef square_Sum(n: int) -> int:\n    \"\"\"\n    Calculates the sum of squares of the first n even natural numbers.\n\n    Args:\n        n (int): The number of even natural numbers whose squares are to be summed.\n\n    Returns:\n        int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, 2 * n + 1, 2):\n        sum_of_squares += i * i\n    return sum_of_squares\n", "from typing import List\n## main.py\n\ndef square_Sum(n: int) -> int:\n    \"\"\"\n    Calculate the sum of squares of the first n even natural numbers.\n\n    Args:\n        n (int): The number of even natural numbers to consider.\n\n    Returns:\n        int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(n):\n        even_number = 2 * i\n        square = even_number ** 2\n        sum_of_squares += square\n    return sum_of_squares\n", "from typing import List\n## main.py\n\ndef square_Sum(n: int) -> int:\n    \"\"\"\n    Calculate the sum of squares of the first n even natural numbers.\n\n    Args:\n        n (int): The number of even natural numbers to consider.\n\n    Returns:\n        int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    i = 1\n\n    while i <= 2 * n:\n        square = i ** 2\n        sum_of_squares += square\n        i += 2\n\n    return sum_of_squares\n", "from typing import List\n## main.py\n\ndef square_Sum(n: int) -> int:\n    \"\"\"\n    Calculate the sum of squares of the first n even natural numbers.\n\n    Args:\n        n (int): The number of even natural numbers to sum the squares of.\n\n    Returns:\n        int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(n):\n        even_number = 2 * i\n        square_of_even = even_number ** 2\n        sum_of_squares += square_of_even\n    return sum_of_squares\n", "from typing import List\n## main.py\n\ndef square_Sum(n: int) -> int:\n    \"\"\"\n    The function takes an integer n and returns the sum of squares of the first n even natural numbers.\n    \n    Args:\n        n (int): The number of even natural numbers whose squares are to be summed.\n    \n    Returns:\n        int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    i = 0\n    \n    while i < n:\n        even_num = 2 * (i + 1)\n        sum_of_squares += even_num ** 2\n        i += 1\n    \n    return sum_of_squares\n", "from typing import List\n## main.py\n\ndef square_Sum(n: int) -> int:\n    \"\"\"\n    Calculate the sum of squares of the first n even natural numbers.\n\n    Args:\n        n (int): The number of even natural numbers to consider.\n\n    Returns:\n        int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    i = 1\n\n    while i <= 2 * n:\n        square = i ** 2\n        sum_of_squares += square\n        i += 2\n\n    return sum_of_squares\n", "from typing import List\n## main.py\n\ndef square_Sum(n: int) -> int:\n    \"\"\"\n    Calculate the sum of squares of the first n even natural numbers.\n\n    Args:\n        n (int): The number of even natural numbers to sum the squares of.\n\n    Returns:\n        int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    \n    sum_of_squares = 0\n    even_number = 2\n    count = 0\n\n    while count < n:\n        sum_of_squares += even_number ** 2\n        even_number += 2\n        count += 1\n\n    return sum_of_squares\n", "from typing import List\n## main.py\n\ndef square_Sum(n: int) -> int:\n    sum_of_squares = 0\n    for i in range(n):\n        even_number = 2 * (i + 1)\n        sum_of_squares += even_number ** 2\n    return sum_of_squares\n", "from typing import List\n## main.py\n\ndef square_Sum(n: int) -> int:\n    \"\"\"\n    Calculate the sum of squares of the first n even natural numbers.\n\n    Args:\n        n (int): The number of even natural numbers to consider.\n\n    Returns:\n        int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    i = 1\n\n    while i <= 2 * n:\n        square = i ** 2\n        sum_of_squares += square\n        i += 2\n\n    return sum_of_squares\n"], "plans": ["requirement analysis:\nThe function 'square_Sum' needs to calculate the sum of squares of the first n even natural numbers. This involves iterating through the first n even numbers, squaring each, and summing them up. The function should return this sum. The example provided (square_Sum(2) == 20) indicates that for n=2, the expected output is 20, which is the sum of squares of the first two even numbers: 2^2 + 4^2 = 4 + 16 = 20.\nrequirement pool:\n- Implement the function 'square_Sum' to calculate the sum of squares of the first n even natural numbers.\n- Ensure the function is efficient and handles edge cases such as n=0 or negative values.\n- Develop a user-friendly interface for setting the value of n and displaying the result.\n- Design the UI to be visually appealing and responsive across different devices.\n- Include accessibility features to support a wide range of users.\nTo implement the 'square_Sum' function, we will use a straightforward approach that iterates through the first n even natural numbers, squares each number, and sums them up. This approach is efficient and easy to understand. We will ensure the function handles edge cases such as n=0 or negative values by adding appropriate checks.\n", "requirement analysis:\nThe requirement is to write a Python function that calculates the sum of squares of the first n even natural numbers. This is a straightforward mathematical problem that can be solved using a simple loop to iterate through the even numbers and compute their squares. The function should return the total sum of these squares.\nrequirement pool:\n- The main code should correctly calculate the sum of squares of the first n even natural numbers.\n- The function should handle edge cases such as n being zero or negative.\n- Implement the function in a way that is efficient and does not waste computing resources.\n- Ensure the function is well-documented and easy to understand for users.\n- Include a simple test case to verify the function's correctness.\nWe will implement the function `square_Sum` in Python, which calculates the sum of squares of the first n even natural numbers. The function will use a simple loop to iterate through the even numbers, compute their squares, and accumulate the sum. This approach ensures efficiency and avoids wasting computing resources.\n", "requirement analysis:\nThe requirement is to write a Python function that calculates the sum of squares of the first n even natural numbers. This is a straightforward mathematical problem that can be solved using a simple loop to iterate through the even numbers and compute their squares. The function should return the total sum of these squares.\nrequirement pool:\n- The main code should correctly calculate the sum of squares of the first n even natural numbers.\n- The function should handle edge cases such as n being zero or negative.\n- Implement the function in a way that is efficient and does not waste computing resources.\n- Ensure the function is well-documented and easy to understand for users.\nTo implement the function `square_Sum` that calculates the sum of squares of the first n even natural numbers, we will use a simple loop to iterate through the even numbers, compute their squares, and accumulate the sum. This approach ensures efficiency and avoids wasting computing resources.\n", "requirement analysis:\nThe requirement is to write a Python function that calculates the sum of squares of the first n even natural numbers. This is a straightforward mathematical problem that can be solved using a simple loop to iterate through the even numbers and compute their squares. The function should return the total sum of these squares.\nrequirement pool:\n- The main code should correctly calculate the sum of squares of the first n even natural numbers.\n- The function should handle edge cases such as n being zero or negative.\n- Implement the function in a way that is efficient and does not use unnecessary computations.\n- Ensure the function is well-documented and easy to understand.\n- Include a simple test case to verify the function's correctness.\nTo implement the function `square_Sum` that calculates the sum of squares of the first n even natural numbers, we will use a simple loop to iterate through the even numbers, compute their squares, and accumulate the sum. This approach ensures efficiency and avoids unnecessary computations.\n", "requirement analysis:\nThe function 'square_Sum' needs to calculate the sum of squares of the first n even natural numbers. This involves iterating through the first n even numbers, squaring each, and summing them up. The requirement is clear and straightforward, focusing on the mathematical operation of squaring and summing.\nrequirement pool:\n- Implement the function 'square_Sum' to calculate the sum of squares of the first n even natural numbers.\nTo implement the function 'square_Sum', we will use a straightforward approach that involves iterating through the first n even natural numbers, squaring each, and summing them up. This can be efficiently achieved using a simple loop and arithmetic operations.\n", "requirement analysis:\nThe function 'square_Sum' needs to calculate the sum of squares of the first n even natural numbers. This involves generating even numbers and then squaring them before summing them up. The function should be efficient and handle edge cases like very large values of n.\nrequirement pool:\n- The main code should correctly calculate the sum of squares of the first n even natural numbers.\n- The function should handle edge cases such as very large values of n efficiently.\n- The user interface should be responsive and visually appealing.\nTo implement the 'square_Sum' function efficiently, we will use Python's built-in capabilities to generate even numbers and calculate their squares. This approach ensures that the function handles large values of n without performance issues. We will also ensure that the function is simple and easy to understand, adhering to Python's style guidelines.\n", "requirement analysis:\nThe requirement is to write a Python function that calculates the sum of squares of the first n even natural numbers. This is a straightforward mathematical problem that can be solved using a simple loop to iterate through the even numbers and compute their squares. The function should return the total sum of these squares.\nrequirement pool:\n- The main code should correctly calculate the sum of squares of the first n even natural numbers.\n- The function should handle edge cases such as n being zero or negative.\n- Implement the function in a way that is efficient and does not waste computing resources.\n- Ensure the function is well-documented and easy to understand for users.\nTo implement the function `square_Sum` that calculates the sum of squares of the first n even natural numbers, we will use a simple loop to iterate through the even numbers, compute their squares, and accumulate the sum. This approach ensures efficiency and avoids unnecessary computational resources.\n", "requirement analysis:\nThe function 'square_Sum' needs to calculate the sum of squares of the first n even natural numbers. This involves iterating through the first n even numbers, squaring each, and summing them up. The function should return this sum. The example provided (square_Sum(2) == 20) indicates that for n=2, the expected output is 20, which is the sum of squares of the first two even numbers: 2^2 + 4^2 = 4 + 16 = 20.\nrequirement pool:\n- Implement the function 'square_Sum' to calculate the sum of squares of the first n even natural numbers.\n- Ensure the function is efficient and handles edge cases such as n=0 or negative values.\n- Develop a user-friendly interface for setting the value of n and displaying the result.\n- Design the UI to be visually appealing and responsive across different devices.\n- Include accessibility features to support a wide range of users.\nTo implement the 'square_Sum' function, we will use a straightforward approach that iterates through the first n even natural numbers, squares each number, and sums them up. This approach is efficient and easy to understand. We will ensure the function handles edge cases such as n=0 or negative values by adding appropriate checks.\n", "requirement analysis:\nThe function 'square_Sum' needs to calculate the sum of squares of the first n even natural numbers. This involves iterating through the first n even numbers, squaring each, and summing them up. The function should return this sum. The example provided (square_Sum(2) == 20) indicates that for n=2, the expected output is 20, which is the sum of squares of the first two even numbers (2^2 + 4^2 = 4 + 16 = 20).\nrequirement pool:\n- Implement the function 'square_Sum' to calculate the sum of squares of the first n even natural numbers.\n- Ensure the function is efficient and can handle a reasonable range of inputs.\n- Develop a user-friendly interface for easy input and display of results.\n- Include options for users to choose difficulty levels.\n- Design a responsive and visually appealing UI.\nTo implement the function 'square_Sum', we will use a straightforward approach that iterates through the first n even numbers, squares each, and sums them up. This will be a simple and efficient solution that meets the requirements.\n", "requirement analysis:\nThe requirement is to write a Python function that calculates the sum of squares of the first n even natural numbers. This is a straightforward mathematical problem that can be solved using a simple loop to iterate through the even numbers and compute their squares. The function should return the total sum of these squares.\nrequirement pool:\n- The main code should correctly calculate the sum of squares of the first n even natural numbers.\n- The function should handle edge cases such as n being zero or negative.\n- Implement the function in a way that is efficient and does not waste computing resources.\n- Ensure the function is well-documented and easy to understand for users.\nTo implement the function `square_Sum` that calculates the sum of squares of the first n even natural numbers, we will use a simple loop to iterate through the even numbers, compute their squares, and accumulate the sum. This approach ensures efficiency and avoids unnecessary computational resources.\n"], "test": ["def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(4) == 120", "def check(square_Sum):\n\tassert square_Sum(6) == 364", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(6) == 364", "def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(1) == 4", "def check(square_Sum):\n\tassert square_Sum(6) == 364", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(5) == 220", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(4) == 120", "def check(square_Sum):\n\tassert square_Sum(7) == 560", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(4) == 120", "def check(square_Sum):\n\tassert square_Sum(7) == 560", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(5) == 220", "def check(square_Sum):\n\tassert square_Sum(4) == 120", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(7) == 560", "def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(1) == 4", "def check(square_Sum):\n\tassert square_Sum(5) == 220", "def check(square_Sum):\n\tassert square_Sum(6) == 364", "def check(square_Sum):\n\tassert square_Sum(1) == 4", "def check(square_Sum):\n\tassert square_Sum(7) == 560", "def check(square_Sum):\n\tassert square_Sum(5) == 220", "def check(square_Sum):\n\tassert square_Sum(7) == 560", "def check(square_Sum):\n\tassert square_Sum(6) == 364", "def check(square_Sum):\n\tassert square_Sum(7) == 560", "def check(square_Sum):\n\tassert square_Sum(6) == 364", "def check(square_Sum):\n\tassert square_Sum(8) == 816", "def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(1) == 4", "def check(square_Sum):\n\tassert square_Sum(1) == 4", "def check(square_Sum):\n\tassert square_Sum(8) == 816", "def check(square_Sum):\n\tassert square_Sum(4) == 120", "def check(square_Sum):\n\tassert square_Sum(6) == 364", "def check(square_Sum):\n\tassert square_Sum(7) == 560", "def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(5) == 220", "def check(square_Sum):\n\tassert square_Sum(8) == 816", "def check(square_Sum):\n\tassert square_Sum(5) == 220", "def check(square_Sum):\n\tassert square_Sum(8) == 816", "def check(square_Sum):\n\tassert square_Sum(4) == 120", "def check(square_Sum):\n\tassert square_Sum(5) == 220", "def check(square_Sum):\n\tassert square_Sum(7) == 560", "def check(square_Sum):\n\tassert square_Sum(4) == 120", "def check(square_Sum):\n\tassert square_Sum(7) == 560", "def check(square_Sum):\n\tassert square_Sum(7) == 560", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(8) == 816", "def check(square_Sum):\n\tassert square_Sum(4) == 120", "def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(8) == 816", "def check(square_Sum):\n\tassert square_Sum(5) == 220", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(5) == 220", "def check(square_Sum):\n\tassert square_Sum(7) == 560", "def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(7) == 560", "def check(square_Sum):\n\tassert square_Sum(8) == 816", "def check(square_Sum):\n\tassert square_Sum(5) == 220", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(8) == 816", "def check(square_Sum):\n\tassert square_Sum(1) == 4", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(6) == 364", "def check(square_Sum):\n\tassert square_Sum(9) == 1140", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(5) == 220", "def check(square_Sum):\n\tassert square_Sum(4) == 120", "def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(1) == 4", "def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(8) == 816", "def check(square_Sum):\n\tassert square_Sum(9) == 1140", "def check(square_Sum):\n\tassert square_Sum(1) == 4", "def check(square_Sum):\n\tassert square_Sum(6) == 364", "def check(square_Sum):\n\tassert square_Sum(8) == 816", "def check(square_Sum):\n\tassert square_Sum(6) == 364", "def check(square_Sum):\n\tassert square_Sum(7) == 560", "def check(square_Sum):\n\tassert square_Sum(2) == 20", "def check(square_Sum):\n\tassert square_Sum(3) == 56", "def check(square_Sum):\n\tassert square_Sum(1) == 4", "def check(square_Sum):\n\tassert square_Sum(9) == 1140", "def check(square_Sum):\n\tassert square_Sum(4) == 120", "def check(square_Sum):\n\tassert square_Sum(6) == 364", "def check(square_Sum):\n\tassert square_Sum(9) == 1140", "def check(square_Sum):\n\tassert square_Sum(9) == 1140", "def check(square_Sum):\n\tassert square_Sum(2) == 20"], "scores": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "pass_results": [false, true, false, false, false, true, false, true, true, false], "pass_test_cases_num": [0, 102, 0, 0, 0, 102, 0, 102, 102, 0], "completion": "from typing import List\n## main.py\n\ndef square_Sum(n: int) -> int:\n    \"\"\"\n    Calculate the sum of squares of the first n even natural numbers.\n\n    Args:\n        n (int): The number of even natural numbers to consider.\n\n    Returns:\n        int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    i = 1\n\n    while i <= 2 * n:\n        square = i ** 2\n        sum_of_squares += square\n        i += 2\n\n    return sum_of_squares\n", "passed": true, "pass": true, "pass_num": 4, "round": 759, "mutate_method": "expand_one2two", "parent_index": 359}
