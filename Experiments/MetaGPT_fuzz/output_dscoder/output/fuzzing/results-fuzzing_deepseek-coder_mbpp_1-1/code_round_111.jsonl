{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 279, "prompt": "Write a function to find the nth decagonal number. Ensure that your implementation efficiently handles large values of n without significant performance degradation.", "code": "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n ", "test_imports": [], "test_list": ["assert is_num_decagonal(3) == 27", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(10) == 370", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(1) == 1", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(1) == 1", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(1) == 1", "assert is_num_decagonal(1) == 1", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(1) == 1", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(10) == 370", "assert is_num_decagonal(11) == 451", "assert is_num_decagonal(6) == 126", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(12) == 540", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(6) == 126", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(10) == 370", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(11) == 451", "assert is_num_decagonal(12) == 540", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(12) == 540", "assert is_num_decagonal(6) == 126", "assert is_num_decagonal(10) == 370", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(15) == 855", "assert is_num_decagonal(12) == 540", "assert is_num_decagonal(15) == 855", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(14) == 742", "assert is_num_decagonal(13) == 637", "assert is_num_decagonal(6) == 126", "assert is_num_decagonal(10) == 370", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(10) == 370", "assert is_num_decagonal(15) == 855", "assert is_num_decagonal(9) == 297", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(14) == 742", "assert is_num_decagonal(6) == 126", "assert is_num_decagonal(12) == 540", "assert is_num_decagonal(11) == 451", "assert is_num_decagonal(11) == 451", "assert is_num_decagonal(11) == 451", "assert is_num_decagonal(13) == 637", "assert is_num_decagonal(10) == 370", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(15) == 855", "assert is_num_decagonal(13) == 637", "assert is_num_decagonal(13) == 637", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(10) == 370"], "entry_point": "is_num_decagonal", "repair_prompt": ["Write a function is_num_decagonal to find the nth decagonal number. Ensure that your implementation efficiently handles large values of n without significant performance degradation.\nis_num_decagonal(3) == 27\n"], "completions": ["from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula (3n^2 - 2n).\n\n    Args:\n        n (int): The position in the sequence.\n\n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return 3 * n**2 - 2 * n\n\n# Example usage:\n# print(is_num_decagonal(5))  # Output: 52\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula (3n^2 - 2n).\n\n    Args:\n        n (int): The position in the sequence, where n >= 1.\n\n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n    \n    return 3 * n**2 - 2 * n\n\n# Example usage:\n# print(is_num_decagonal(5))  # Output: 52\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula (3n^2 - 2n).\n\n    Args:\n        n (int): The position in the sequence.\n\n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return 3 * n**2 - 2 * n\n\n# Example usage:\n# print(is_num_decagonal(5))  # Output: 52\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula: Decagonal Number = n * (4 * n - 3)\n    \n    Args:\n        n (int): The position in the sequence of decagonal numbers.\n    \n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return n * (4 * n - 3)\n\n# Example usage:\n# print(is_num_decagonal(5))  # Output: 75\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula (3n^2 - 2n).\n\n    Args:\n        n (int): The position in the sequence of decagonal numbers.\n\n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return 3 * n**2 - 2 * n\n\n# Example usage:\n# print(is_num_decagonal(5))  # Output: 52\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula (3n^2 - 2n).\n\n    Args:\n        n (int): The position in the sequence, where n >= 1.\n\n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n    \n    return 3 * n**2 - 2 * n\n\n# Example usage:\n# print(is_num_decagonal(5))  # Output: 52\n", "from typing import List\n## main.py\n\nimport math\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula (4n^2 - 3n)/2.\n    \n    Args:\n        n (int): The position in the decagonal sequence.\n        \n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    return (4 * n**2 - 3 * n) // 2\n\n# Example usage:\n# print(is_num_decagonal(5))  # Output: 55\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula n*(3*n - 2).\n\n    Args:\n        n (int): The position in the decagonal sequence.\n\n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return n * (3 * n - 2)\n\n# Example usage:\n# print(is_num_decagonal(5))  # Output: 55\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula (4n^2 - 3n) / 2.\n\n    Args:\n        n (int): The position in the sequence of decagonal numbers.\n\n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return (4 * n**2 - 3 * n) // 2\n\n# Example usage:\n# print(is_num_decagonal(5))  # Output: 55\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula (3n^2 - 2n).\n\n    Args:\n        n (int): The position in the sequence, where n >= 1.\n\n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return 3 * n**2 - 2 * n\n\n# Example usage:\n# print(is_num_decagonal(5))  # Output: 52\n"], "plans": ["requirement analysis:\nThe primary requirement is to create a function that calculates the nth decagonal number accurately and efficiently. The function should handle large values of n without significant performance degradation. The user interface should be simple and intuitive, allowing users to input the value of n and receive the corresponding decagonal number instantly.\nrequirement pool:\n- Implement the formula for the nth decagonal number\n- Ensure the function can handle large values of n efficiently\n- Develop a user-friendly interface for input and output\n- Test the function with various values of n to ensure accuracy\n- Optimize the code for better performance\nTo implement the function is_num_decagonal, we will use a mathematical formula for calculating the nth decagonal number. The formula for the nth decagonal number is given by (3n^2 - 2n). This formula is efficient and can handle large values of n without significant performance degradation. We will ensure that the function is optimized for performance and tested with various values of n to ensure accuracy.\n", "requirement analysis:\nThe primary requirement is to create a function that calculates the nth decagonal number accurately and efficiently. The function should handle large values of n without significant performance degradation. Secondary requirements include providing clear documentation and ensuring scalability and performance.\nrequirement pool:\n- Implement the function to accurately calculate the nth decagonal number\n- Ensure the function can handle large values of n efficiently\n- Provide clear and concise documentation for users\n- Ensure the function is scalable and performs well for large n\n- Design a user-friendly interface for easy integration and usage\nTo implement the function efficiently, we will use a mathematical formula to calculate the nth decagonal number. The formula for the nth decagonal number is given by (3n^2 - 2n). This formula allows for direct calculation without the need for complex iterative processes, ensuring scalability and performance for large values of n.\n", "requirement analysis:\nThe primary requirement is to create a function that calculates the nth decagonal number accurately and efficiently. The function should handle large values of n without significant performance degradation. Secondary requirements include providing clear documentation and ensuring scalability and user-friendly integration.\nrequirement pool:\n- Implement the function to calculate the nth decagonal number accurately and efficiently\n- Ensure the function can handle large values of n without performance degradation\n- Provide clear and concise documentation for users\n- Ensure the function is easy to integrate into other projects\n- Explore patterns in decagonal numbers for educational purposes\nTo implement the function efficiently, we will use a mathematical formula to calculate the nth decagonal number. The formula for the nth decagonal number is given by (3n^2 - 2n). This formula allows for direct calculation without the need for complex iterative processes, ensuring efficiency. We will also use Python's built-in data types to handle large values of n effectively.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth decagonal number. Decagonal numbers follow a specific mathematical pattern and can be calculated using the formula: Decagonal Number = n * (4 * n - 3). The function should handle large values of n efficiently to ensure it can be used in various applications without performance issues.\nrequirement pool:\n- Implement the decagonal number formula accurately\n- Ensure the function can handle large values of n without significant performance degradation\n- Develop a user-friendly interface for easy interaction\n- Include scalability features for future growth\n- Optimize the code for better performance\nTo implement the function efficiently, we will use a mathematical formula to calculate the nth decagonal number. The formula is given by Decagonal Number = n * (4 * n - 3). We will leverage Python's built-in capabilities to handle large integers, ensuring that the function can manage large values of n without performance degradation.\n", "requirement analysis:\nThe primary requirement is to create a function that calculates the nth decagonal number accurately and efficiently. The function should handle large values of n without significant performance degradation. The user interface should be simple and intuitive, allowing users to input the value of n and receive the corresponding decagonal number instantly.\nrequirement pool:\n- Implement the formula for the nth decagonal number\n- Ensure the function can handle large values of n efficiently\n- Develop a user-friendly interface for input and output\n- Test the function with various values of n to ensure accuracy\n- Optimize the code for better performance\nTo implement the function is_num_decagonal, we will use a mathematical formula for calculating the nth decagonal number. The formula for the nth decagonal number is given by (3n^2 - 2n). This formula is efficient and can handle large values of n without significant performance degradation. We will ensure that the function is optimized for performance and tested with various values of n to ensure accuracy.\n", "requirement analysis:\nThe primary requirement is to create a function that calculates the nth decagonal number accurately and efficiently. The function should handle large values of n without significant performance degradation. Secondary requirements include providing clear documentation and ensuring scalability and user-friendly integration.\nrequirement pool:\n- Implement the decagonal number formula efficiently.\n- Ensure the function can handle large values of n without performance issues.\n- Provide clear and concise documentation for users.\n- Ensure the function is easy to integrate into other projects.\n- Test the function with various values of n to verify accuracy.\nTo efficiently calculate the nth decagonal number, we will use a mathematical formula that directly computes the value. The formula for the nth decagonal number is given by (3n^2 - 2n). This formula allows for direct computation without the need for iterative processes, ensuring efficiency even for large values of n. We will implement this formula in Python, leveraging its efficient handling of arithmetic operations.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth decagonal number. Decagonal numbers follow a specific mathematical pattern and can be calculated using the formula: (4n^2 - 3n)/2. The function should handle large values of n efficiently to ensure it can be used in various applications without performance issues.\nrequirement pool:\n- Implement the decagonal number formula accurately\n- Ensure the function can handle large values of n without significant performance degradation\n- Develop a user-friendly interface for easy interaction\n- Include error handling for invalid inputs\n- Optimize the code for better performance\nTo implement the function efficiently, we will use Python's built-in capabilities and leverage the math library to handle the mathematical formula for decagonal numbers. The formula for the nth decagonal number is given by (4n^2 - 3n)/2. We will ensure that the function can handle large values of n by optimizing the calculation process and using efficient data structures.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth decagonal number. Decagonal numbers follow a specific mathematical pattern and can be calculated using the formula: n*(3*n - 2). The function should handle large values of n efficiently to ensure it can be used in various applications without performance issues.\nrequirement pool:\n- Implement the decagonal number calculation formula accurately\n- Ensure the function can handle large values of n without significant performance degradation\n- Develop a user-friendly interface for easy interaction\n- Include error handling for invalid inputs\n- Optimize the code for better performance\nTo implement the is_num_decagonal function efficiently, we will use a mathematical formula to calculate the nth decagonal number directly. This approach avoids the need for complex data structures or extensive computations, ensuring scalability and performance. The formula for the nth decagonal number is n*(3*n - 2). We will ensure that this calculation can handle large values of n by optimizing the algorithm and potentially using efficient data types.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth decagonal number. Decagonal numbers follow a specific mathematical pattern and need to be efficiently computed for large values of n. The function should handle large numbers without significant performance degradation, ensuring it can be used in various applications from mathematical research to software development.\nrequirement pool:\n- Implement the formula for decagonal numbers\n- Ensure the function can handle large values of n\n- Develop a user-friendly interface for input and output\n- Include error handling for invalid inputs\n- Optimize the algorithm for performance\nTo implement the function is_num_decagonal, we will use a mathematical formula for decagonal numbers. The nth decagonal number can be calculated using the formula: (4n^2 - 3n) / 2. This formula is efficient and avoids the need for complex data structures or algorithms. We will ensure that the function can handle large values of n by optimizing the calculation process and possibly using efficient data types.\n", "requirement analysis:\nThe primary requirement is to create a function that calculates the nth decagonal number accurately and efficiently. The function should handle large values of n without significant performance degradation. Secondary requirements include providing clear documentation and ensuring scalability for future enhancements.\nrequirement pool:\n- Implement the decagonal number formula efficiently\n- Ensure the function can handle large values of n\n- Provide clear documentation for users\n- Ensure the function is scalable for future enhancements\n- Test the function for accuracy and performance\nTo efficiently calculate the nth decagonal number, we will use a mathematical formula that directly computes the value without the need for iterative processes. This approach ensures scalability and performance for large values of n. The formula for the nth decagonal number is given by (3n^2 - 2n). We will implement this formula in Python, leveraging its efficient handling of mathematical operations.\n"], "test": ["def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(1) == 1", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(1) == 1", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(1) == 1", "def check(is_num_decagonal):\n\tassert is_num_decagonal(1) == 1", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(1) == 1", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370", "def check(is_num_decagonal):\n\tassert is_num_decagonal(11) == 451", "def check(is_num_decagonal):\n\tassert is_num_decagonal(6) == 126", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(12) == 540", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(6) == 126", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(11) == 451", "def check(is_num_decagonal):\n\tassert is_num_decagonal(12) == 540", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(12) == 540", "def check(is_num_decagonal):\n\tassert is_num_decagonal(6) == 126", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(15) == 855", "def check(is_num_decagonal):\n\tassert is_num_decagonal(12) == 540", "def check(is_num_decagonal):\n\tassert is_num_decagonal(15) == 855", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(14) == 742", "def check(is_num_decagonal):\n\tassert is_num_decagonal(13) == 637", "def check(is_num_decagonal):\n\tassert is_num_decagonal(6) == 126", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370", "def check(is_num_decagonal):\n\tassert is_num_decagonal(15) == 855", "def check(is_num_decagonal):\n\tassert is_num_decagonal(9) == 297", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(14) == 742", "def check(is_num_decagonal):\n\tassert is_num_decagonal(6) == 126", "def check(is_num_decagonal):\n\tassert is_num_decagonal(12) == 540", "def check(is_num_decagonal):\n\tassert is_num_decagonal(11) == 451", "def check(is_num_decagonal):\n\tassert is_num_decagonal(11) == 451", "def check(is_num_decagonal):\n\tassert is_num_decagonal(11) == 451", "def check(is_num_decagonal):\n\tassert is_num_decagonal(13) == 637", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(15) == 855", "def check(is_num_decagonal):\n\tassert is_num_decagonal(13) == 637", "def check(is_num_decagonal):\n\tassert is_num_decagonal(13) == 637", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370"], "scores": [0.049, 0.049, 0.049, 1.0, 0.049, 0.049, 0.0, 0.049, 0.0, 0.049], "pass_results": [false, false, false, true, false, false, false, false, false, false], "pass_test_cases_num": [5, 5, 5, 102, 5, 5, 0, 5, 0, 5], "completion": "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula (3n^2 - 2n).\n\n    Args:\n        n (int): The position in the sequence, where n >= 1.\n\n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return 3 * n**2 - 2 * n\n\n# Example usage:\n# print(is_num_decagonal(5))  # Output: 52\n", "passed": true, "pass": true, "pass_num": 1, "round": 111, "mutate_method": "add_1_sentence_at_end", "parent_index": 111}
