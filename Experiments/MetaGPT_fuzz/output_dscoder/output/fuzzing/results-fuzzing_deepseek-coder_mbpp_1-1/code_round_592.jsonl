{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 162, "prompt": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0). Ensure your solution is efficient and handles large values of n. Pay careful attention to edge cases such as negative and zero values for n.", "code": "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)", "test_imports": [], "test_list": ["assert sum_series(6)==12", "assert sum_series(10)==30", "assert sum_series(9)==25", "assert sum_series(5) == 9", "assert sum_series(6) == 12", "assert sum_series(3) == 4", "assert sum_series(5) == 9", "assert sum_series(7) == 16", "assert sum_series(8) == 20", "assert sum_series(8) == 20", "assert sum_series(11) == 36", "assert sum_series(1) == 1", "assert sum_series(4) == 6", "assert sum_series(4) == 6", "assert sum_series(8) == 20", "assert sum_series(10) == 30", "assert sum_series(10) == 30", "assert sum_series(11) == 36", "assert sum_series(10) == 30", "assert sum_series(6) == 12", "assert sum_series(6) == 12", "assert sum_series(3) == 4", "assert sum_series(8) == 20", "assert sum_series(9) == 25", "assert sum_series(10) == 30", "assert sum_series(5) == 9", "assert sum_series(3) == 4", "assert sum_series(1) == 1", "assert sum_series(11) == 36", "assert sum_series(3) == 4", "assert sum_series(10) == 30", "assert sum_series(8) == 20", "assert sum_series(10) == 30", "assert sum_series(9) == 25", "assert sum_series(3) == 4", "assert sum_series(6) == 12", "assert sum_series(12) == 42", "assert sum_series(8) == 20", "assert sum_series(5) == 9", "assert sum_series(13) == 49", "assert sum_series(6) == 12", "assert sum_series(11) == 36", "assert sum_series(13) == 49", "assert sum_series(12) == 42", "assert sum_series(8) == 20", "assert sum_series(8) == 20", "assert sum_series(15) == 64", "assert sum_series(13) == 49", "assert sum_series(12) == 42", "assert sum_series(6) == 12", "assert sum_series(13) == 49", "assert sum_series(15) == 64", "assert sum_series(15) == 64", "assert sum_series(12) == 42", "assert sum_series(11) == 36", "assert sum_series(11) == 36", "assert sum_series(15) == 64", "assert sum_series(11) == 36", "assert sum_series(7) == 16", "assert sum_series(11) == 36", "assert sum_series(7) == 16", "assert sum_series(5) == 9", "assert sum_series(10) == 30", "assert sum_series(12) == 42", "assert sum_series(7) == 16", "assert sum_series(15) == 64", "assert sum_series(9) == 25", "assert sum_series(14) == 56", "assert sum_series(7) == 16", "assert sum_series(13) == 49", "assert sum_series(4) == 6", "assert sum_series(7) == 16", "assert sum_series(7) == 16", "assert sum_series(7) == 16", "assert sum_series(7) == 16", "assert sum_series(8) == 20", "assert sum_series(5) == 9", "assert sum_series(8) == 20", "assert sum_series(11) == 36", "assert sum_series(6) == 12", "assert sum_series(11) == 36", "assert sum_series(12) == 42", "assert sum_series(4) == 6", "assert sum_series(11) == 36", "assert sum_series(10) == 30", "assert sum_series(8) == 20", "assert sum_series(5) == 9", "assert sum_series(12) == 42", "assert sum_series(10) == 30", "assert sum_series(4) == 6", "assert sum_series(6) == 12", "assert sum_series(13) == 49", "assert sum_series(4) == 6", "assert sum_series(9) == 25", "assert sum_series(12) == 42", "assert sum_series(5) == 9", "assert sum_series(7) == 16", "assert sum_series(11) == 36", "assert sum_series(13) == 49", "assert sum_series(13) == 49", "assert sum_series(8) == 20", "assert sum_series(9) == 25"], "entry_point": "sum_series", "repair_prompt": ["Write a function sum_series to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0). Ensure your solution is efficient and handles large values of n. Pay careful attention to edge cases such as negative and zero values for n.\nsum_series(6)==12\n"], "completions": ["from typing import List\n## main.py\n\nimport math\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series where each term is calculated as (n - 2*i) for i in range(n//2 + 1).\n    \n    Args:\n        n (int): The upper limit of the series.\n    \n    Returns:\n        int: The sum of the series.\n    \"\"\"\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        term = n - 2 * i\n        total_sum += term\n    return total_sum\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series where each term is n - 2*i for i in range(n//2 + 1).\n    \n    Args:\n        n (int): The input integer.\n    \n    Returns:\n        int: The sum of the series.\n    \"\"\"\n    if n <= 0:\n        return 0\n    \n    total_sum = 0\n    for i in range(n // 2 + 1):\n        term = n - 2 * i\n        total_sum += term\n    \n    return total_sum\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series where each term is calculated as n - 2*i for i in range(n//2 + 1).\n    \n    Args:\n        n (int): The upper limit of the series.\n    \n    Returns:\n        int: The sum of the series.\n    \"\"\"\n    sum_value = 0\n    for i in range(n // 2 + 1):\n        term = n - 2 * i\n        sum_value += term\n    return sum_value\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series (n - 2*i) from i=0 to n//2.\n    \n    Args:\n        n (int): The input integer.\n    \n    Returns:\n        int: The sum of the series.\n    \"\"\"\n    result = 0\n    for i in range(n // 2 + 1):\n        result += (n - 2 * i)\n    return result\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculates the sum of the series where each term is (n - 2*i) for i in range(n//2 + 1).\n    \n    Args:\n        n (int): The upper limit of the series.\n    \n    Returns:\n        int: The sum of the series.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    total_sum = 0\n    for i in range(n // 2 + 1):\n        term = n - 2 * i\n        total_sum += term\n    \n    return total_sum\n\n# Example usage:\n# print(sum_series(10))  # Output should be 30 (0+8+6+4+2)\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculates the sum of the series where each term is defined as n - 2*i for i in range(n//2 + 1).\n    \n    Args:\n        n (int): The upper limit of the series.\n    \n    Returns:\n        int: The sum of the series.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    total_sum = 0\n    for i in range(n // 2 + 1):\n        term = n - 2 * i\n        total_sum += term\n    \n    return total_sum\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series where each term is the difference between n and twice the index i.\n    \n    Args:\n        n (int): The upper limit of the series.\n    \n    Returns:\n        int: The sum of the series.\n    \"\"\"\n    if n <= 0:\n        return 0\n    \n    series_sum = 0\n    for i in range(n // 2 + 1):\n        term = n - 2 * i\n        series_sum += term\n    \n    return series_sum\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series where each term is calculated as n - 2*i for i in range(n//2 + 1).\n    \n    Args:\n        n (int): The upper limit of the series.\n    \n    Returns:\n        int: The sum of the series.\n    \"\"\"\n    sum_value = 0\n    for i in range(n // 2 + 1):\n        term = n - 2 * i\n        sum_value += term\n    return sum_value\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculates the sum of the series where each term is (n - 2*i) for i in range(n//2 + 1).\n\n    Args:\n        n (int): The upper limit of the series.\n\n    Returns:\n        int: The sum of the series.\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        term = n - 2 * i\n        total_sum += term\n\n    return total_sum\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of a series where each term is n - 2*i, with i ranging from 0 to n//2.\n    \n    Args:\n        n (int): The integer input for the series.\n    \n    Returns:\n        int: The sum of the series.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    sum_value = 0\n    for i in range(n // 2 + 1):\n        term = n - 2 * i\n        sum_value += term\n    \n    return sum_value\n\n# Example usage:\n# print(sum_series(10))  # Output should be 30\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that calculates the sum of a series where each term is (n - 2*i) for i ranging from 0 to n//2. The function should be efficient and handle large values of n correctly. Special attention should be given to edge cases such as negative and zero values for n.\nrequirement pool:\n- The function should calculate the sum series accurately for any positive integer n.\n- The function should handle large values of n efficiently.\n- The function should return zero or a meaningful message for non-positive integers.\n- The function should handle edge cases such as negative and zero values for n.\n- The function should be simple and easy to understand.\nTo implement the sum_series function efficiently, we will use Python's built-in capabilities and leverage the math library for mathematical operations. The function will iterate from 0 to n//2, calculating each term as (n - 2*i) and summing them up. This approach ensures that the function handles large values of n efficiently without the need for complex data structures or external libraries.\n", "requirement analysis:\nThe requirement is to create a function that calculates the sum of a series where each term is n - 2*i, with i ranging from 0 to n//2. The function should be efficient and capable of handling large values of n. Special attention should be given to edge cases such as negative and zero values for n.\nrequirement pool:\n- The main code should be efficient and handle large values of n.\n- The function should handle edge cases such as negative and zero values for n.\n- Ensure the function returns accurate results for any positive integer n.\n- Implement a clear and concise user interface for input and output.\n- Provide a user-friendly error message for non-positive integers.\nTo implement the sum_series function efficiently and accurately, we will use Python's built-in capabilities and leverage the math library for mathematical operations. The function will iterate from 0 to n//2, calculating each term as n - 2*i, and summing these values. This approach ensures that the function handles large values of n efficiently by leveraging Python's efficient iteration and arithmetic operations. For edge cases, we will include checks for non-positive integers to return zero or a meaningful message.\n", "requirement analysis:\nThe function needs to calculate the sum of a series where each term is n - 2*i, with i ranging from 0 to n//2. The function should be efficient and handle large values of n. Edge cases such as negative and zero values for n must be handled gracefully. The product should be accurate and efficient, providing a seamless user experience.\nrequirement pool:\n- The main code should accurately calculate the sum series for any positive integer n.\n- The function should be efficient and handle large values of n.\n- The function should handle edge cases such as negative and zero values for n gracefully.\n- The product should provide a beautiful UI that enhances user experience.\nTo implement the sum_series function efficiently, we will use Python's built-in capabilities and leverage the math library for mathematical operations. The function will iterate from 0 to n//2, calculating each term as n - 2*i, and summing these values. This approach ensures that the function handles large values of n efficiently without the need for complex data structures or external libraries.\n", "requirement analysis:\nThe requirement is to create a function that calculates the sum of a series where each term is n - 2*i, with i ranging from 0 to n//2. The function should be efficient and handle large values of n, including edge cases like negative and zero values for n.\nrequirement pool:\n- Implement the function to calculate the sum series efficiently.\n- Ensure the function handles large values of n.\n- Include error handling for negative and zero values of n.\n- Optimize the function for performance and scalability.\n- Add user feedback mechanisms for better usability.\nTo implement the function efficiently, we will use Python's built-in capabilities and leverage the math library for mathematical operations. The function will calculate the sum of the series (n - 2*i) from i=0 to n//2. We will ensure that the function handles large values of n and edge cases such as negative and zero values for n.\n", "requirement analysis:\nThe requirement is to create a function that calculates the sum of a series where each term is n - 2*i, with i ranging from 0 to n//2. The function should be efficient and capable of handling large values of n. Special attention should be given to edge cases such as negative and zero values for n.\nrequirement pool:\n- The main code should be efficient and handle large values of n.\n- The function should handle edge cases such as negative and zero values for n.\n- The function should be easy to understand and use.\n- The function should provide accurate results.\n- The function should have a good user interface.\nTo create an efficient and accurate sum series calculation tool, we will use Python, leveraging its built-in capabilities for handling large integers efficiently. The function will iterate from i=0 to n//2, summing the terms (n - 2*i) in each iteration. This approach ensures that the function handles large values of n efficiently without the need for complex data structures or external libraries. Special attention will be given to edge cases such as negative and zero values for n by adding appropriate checks and handling them gracefully.\n", "requirement analysis:\nThe requirement is to create a function that calculates the sum of a series where each term is n - 2*i, with i ranging from 0 to n//2. The function should be efficient and capable of handling large values of n. Special attention should be given to edge cases such as negative and zero values for n, which should return appropriate results or errors.\nrequirement pool:\n- The main code should efficiently calculate the sum series for large values of n.\n- The function should handle edge cases such as negative and zero values for n.\n- Ensure the function provides clear and accurate error messages for invalid inputs.\n- Optimize the function to perform well even with very large inputs.\n- Include tests to verify the correctness and robustness of the function.\nTo implement the sum_series function efficiently, we will use Python's built-in capabilities and leverage the math library for mathematical operations. The function will iterate from 0 to n//2, calculating each term as n - 2*i, and summing these values. This approach ensures that the function handles large values of n efficiently by minimizing the number of operations and leveraging Python's efficient iteration.\n", "requirement analysis:\nThe requirement is to create a function that calculates the sum of a series where each term is n - 2*i, with i ranging from 0 to n//2. The function should be efficient and handle large values of n, as well as edge cases like negative and zero values for n.\nrequirement pool:\n- The main code should accurately calculate the sum series for any positive integer n.\n- The function should handle large values of n efficiently.\n- The function should return zero or a meaningful message for non-positive integers.\n- Implement error handling for invalid inputs.\n- Ensure the function is optimized for performance.\nTo create an efficient and accurate sum series calculation function in Python, we will use a straightforward approach that iterates through the range of possible values for i, calculating each term in the series and summing them up. The function will handle large values of n efficiently by leveraging Python's built-in capabilities, ensuring that the function is optimized for performance. Additionally, we will implement error handling to manage non-positive integer inputs, returning zero or a meaningful message as required.\n", "requirement analysis:\nThe function needs to calculate the sum of a series where each term is n - 2*i, with i ranging from 0 to n//2. The function should handle large values of n efficiently and correctly manage edge cases such as negative and zero values for n.\nrequirement pool:\n- Implement the sum series calculation efficiently\n- Handle edge cases such as negative and zero values for n\n- Ensure the function is easy to understand and use\n- Optimize performance for large values of n\n- Provide comprehensive error handling\nTo implement the sum_series function efficiently, we will use Python's built-in capabilities and leverage the math library for mathematical operations. The function will iterate from 0 to n//2, calculating each term as n - 2*i, and summing these values. This approach ensures that the function handles large values of n efficiently by minimizing the number of operations and avoiding unnecessary memory usage.\n", "requirement analysis:\nThe requirement is to create a function that calculates the sum of a series where each term is n - 2*i, with i ranging from 0 to n//2. The function should be efficient and capable of handling large values of n. Special attention should be given to edge cases such as negative and zero values for n.\nrequirement pool:\n- The main code should be efficient and capable of handling large values of n.\n- The function should handle edge cases such as negative and zero values for n.\n- The user interface should be simple and easy to understand.\n- The function should be accurate and provide correct results for large values of n.\n- The function should be tested thoroughly to ensure it handles all edge cases correctly.\nTo create an efficient and accurate sum series calculation tool, we will use Python, leveraging its built-in capabilities for handling large integers efficiently. The function will iterate from i=0 to n//2, summing the terms (n - 2*i). We will ensure the function handles edge cases such as negative and zero values for n by adding appropriate checks and returning results accordingly.\n", "requirement analysis:\nThe function needs to calculate the sum of a series where each term is n - 2*i, with i ranging from 0 to n//2. The function should be efficient and handle large values of n, as well as edge cases like negative and zero values for n.\nrequirement pool:\n- The main code should accurately calculate the sum series for any given n.\n- The function should be efficient and handle large values of n without performance issues.\n- The function should handle edge cases such as negative and zero values for n.\n- Provide clear documentation and examples for user guidance.\n- Ensure the function is user-friendly and can be easily integrated into other projects.\nTo implement the sum_series function efficiently, we will use Python's built-in capabilities and avoid unnecessary complex libraries. The function will calculate the sum of a series where each term is n - 2*i, with i ranging from 0 to n//2. This approach ensures that the function handles large values of n efficiently and can also manage edge cases such as negative and zero values for n.\n"], "test": ["def check(sum_series):\n\tassert sum_series(6)==12", "def check(sum_series):\n\tassert sum_series(10)==30", "def check(sum_series):\n\tassert sum_series(9)==25", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(1) == 1", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(9) == 25", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(1) == 1", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(9) == 25", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(9) == 25", "def check(sum_series):\n\tassert sum_series(14) == 56", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(9) == 25", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(9) == 25"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of a series where each term is n - 2*i, with i ranging from 0 to n//2.\n    \n    Args:\n        n (int): The integer input for the series.\n    \n    Returns:\n        int: The sum of the series.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    sum_value = 0\n    for i in range(n // 2 + 1):\n        term = n - 2 * i\n        sum_value += term\n    \n    return sum_value\n\n# Example usage:\n# print(sum_series(10))  # Output should be 30\n", "passed": true, "pass": true, "pass_num": 10, "round": 592, "mutate_method": "add_1_sentence_at_end", "parent_index": 326}
