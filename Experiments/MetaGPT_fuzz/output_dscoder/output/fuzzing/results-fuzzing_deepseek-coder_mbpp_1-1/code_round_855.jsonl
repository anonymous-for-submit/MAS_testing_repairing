{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 232, "prompt": "Write a function that accepts a list of elements and an integer n and returns a list containing the n largest items from the list. Ensure that the elements in the returned list are ordered in descending order. If two elements have the same value, their relative order in the original list should be preserved. Your solution should efficiently handle lists with a large number of elements.", "code": "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest", "test_imports": [], "test_list": ["assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]", "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]", "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]", "assert larg_nnum([10, 16, 51, 68, 88, 19, 55, 43, 63, 76, 96], 6) == [96, 88, 76, 68, 63, 55]", "assert larg_nnum([11, 16, 46, 65, 95, 18, 55, 37, 60, 75, 97], 2) == [97, 95]", "assert larg_nnum([10, 19, 55, 71, 95, 25, 53, 40, 62, 77, 100], 6) == [100, 95, 77, 71, 62, 55]", "assert larg_nnum([13, 22, 53, 71, 86, 16, 53, 38, 59, 84, 102], 7) == [102, 86, 84, 71, 59, 53, 53]", "assert larg_nnum([8, 16, 47, 75, 86, 17, 47, 42, 56, 76, 98], 4) == [98, 86, 76, 75]", "assert larg_nnum([7, 16, 51, 75, 89, 18, 55, 45, 57, 76, 99], 7) == [99, 89, 76, 75, 57, 55, 51]", "assert larg_nnum([8, 17, 53, 68, 87, 18, 49, 42, 63, 85, 103], 6) == [103, 87, 85, 68, 63, 53]", "assert larg_nnum([14, 21, 46, 70, 95, 23, 52, 36, 57, 80, 99], 3) == [99, 95, 80]", "assert larg_nnum([6, 24, 53, 74, 91, 24, 47, 42, 63, 85, 105], 3) == [105, 91, 85]", "assert larg_nnum([6, 21, 55, 71, 86, 15, 46, 35, 63, 77, 95], 7) == [95, 86, 77, 71, 63, 55, 46]", "assert larg_nnum([11, 21, 48, 74, 93, 25, 48, 41, 59, 79, 101], 3) == [101, 93, 79]", "assert larg_nnum([15, 15, 48, 70, 91, 25, 50, 38, 58, 83, 99], 4) == [99, 91, 83, 70]", "assert larg_nnum([5, 19, 53, 66, 95, 21, 54, 39, 57, 82, 97], 5) == [97, 95, 82, 66, 57]", "assert larg_nnum([5, 19, 48, 69, 86, 23, 49, 45, 64, 76, 99], 2) == [99, 86]", "assert larg_nnum([7, 17, 48, 73, 90, 24, 46, 39, 56, 84, 103], 7) == [103, 90, 84, 73, 56, 48, 46]", "assert larg_nnum([6, 22, 52, 75, 85, 15, 49, 41, 64, 77, 100], 5) == [100, 85, 77, 75, 64]", "assert larg_nnum([11, 21, 46, 70, 85, 20, 55, 41, 64, 82, 101], 5) == [101, 85, 82, 70, 64]", "assert larg_nnum([9, 25, 51, 73, 92, 17, 52, 43, 56, 78, 103], 6) == [103, 92, 78, 73, 56, 52]", "assert larg_nnum([11, 22, 50, 70, 90, 20, 52, 41, 57, 77, 95], 4) == [95, 90, 77, 70]", "assert larg_nnum([11, 24, 52, 73, 89, 21, 48, 44, 65, 82, 100], 7) == [100, 89, 82, 73, 65, 52, 48]", "assert larg_nnum([10, 21, 48, 74, 94, 24, 47, 40, 58, 80, 98], 4) == [98, 94, 80, 74]", "assert larg_nnum([15, 19, 54, 67, 95, 16, 50, 42, 56, 83, 105], 1) == [105]", "assert larg_nnum([15, 23, 54, 67, 89, 15, 50, 42, 64, 79, 97], 2) == [97, 89]", "assert larg_nnum([9, 15, 45, 75, 87, 18, 53, 40, 64, 77, 103], 6) == [103, 87, 77, 75, 64, 53]", "assert larg_nnum([6, 16, 55, 71, 86, 18, 50, 39, 65, 84, 105], 7) == [105, 86, 84, 71, 65, 55, 50]", "assert larg_nnum([8, 18, 50, 65, 86, 19, 54, 36, 64, 85, 105], 6) == [105, 86, 85, 65, 64, 54]", "assert larg_nnum([13, 16, 53, 67, 94, 21, 55, 42, 56, 79, 99], 7) == [99, 94, 79, 67, 56, 55, 53]", "assert larg_nnum([11, 18, 49, 72, 93, 25, 49, 39, 65, 78, 103], 1) == [103]", "assert larg_nnum([13, 22, 46, 74, 91, 20, 48, 45, 63, 80, 103], 4) == [103, 91, 80, 74]", "assert larg_nnum([14, 21, 49, 71, 90, 25, 51, 40, 63, 78, 98], 5) == [98, 90, 78, 71, 63]", "assert larg_nnum([13, 16, 48, 67, 88, 20, 52, 43, 64, 75, 96], 6) == [96, 88, 75, 67, 64, 52]", "assert larg_nnum([5, 23, 49, 74, 90, 21, 51, 39, 62, 78, 99], 7) == [99, 90, 78, 74, 62, 51, 49]", "assert larg_nnum([9, 24, 49, 70, 90, 23, 55, 35, 55, 81, 101], 7) == [101, 90, 81, 70, 55, 55, 49]", "assert larg_nnum([9, 15, 53, 66, 91, 18, 51, 43, 64, 75, 97], 10) == [97, 91, 75, 66, 64, 53, 51, 43, 18, 15]", "assert larg_nnum([8, 22, 55, 72, 90, 19, 48, 41, 62, 77, 100], 4) == [100, 90, 77, 72]", "assert larg_nnum([5, 20, 47, 67, 95, 22, 48, 36, 62, 80, 101], 6) == [101, 95, 80, 67, 62, 48]", "assert larg_nnum([11, 17, 55, 74, 89, 16, 47, 40, 55, 76, 104], 9) == [104, 89, 76, 74, 55, 55, 47, 40, 17]", "assert larg_nnum([9, 16, 49, 69, 95, 18, 46, 42, 64, 82, 95], 7) == [95, 95, 82, 69, 64, 49, 46]", "assert larg_nnum([12, 20, 53, 67, 90, 24, 45, 38, 58, 81, 104], 9) == [104, 90, 81, 67, 58, 53, 45, 38, 24]", "assert larg_nnum([9, 17, 49, 73, 93, 17, 48, 44, 65, 81, 101], 2) == [101, 93]", "assert larg_nnum([6, 17, 52, 75, 90, 15, 45, 35, 64, 84, 105], 2) == [105, 90]", "assert larg_nnum([6, 23, 47, 74, 95, 17, 45, 36, 63, 79, 102], 6) == [102, 95, 79, 74, 63, 47]", "assert larg_nnum([7, 23, 50, 71, 91, 18, 53, 35, 65, 81, 103], 3) == [103, 91, 81]", "assert larg_nnum([8, 21, 46, 70, 94, 17, 50, 45, 63, 75, 104], 2) == [104, 94]", "assert larg_nnum([11, 18, 45, 69, 88, 23, 53, 45, 55, 83, 97], 1) == [97]", "assert larg_nnum([8, 21, 51, 71, 88, 23, 48, 40, 59, 80, 100], 6) == [100, 88, 80, 71, 59, 51]", "assert larg_nnum([12, 25, 53, 73, 86, 25, 50, 38, 55, 83, 105], 3) == [105, 86, 83]", "assert larg_nnum([8, 24, 55, 75, 85, 19, 47, 40, 57, 81, 96], 9) == [96, 85, 81, 75, 57, 55, 47, 40, 24]", "assert larg_nnum([14, 19, 53, 69, 90, 21, 47, 41, 59, 76, 97], 6) == [97, 90, 76, 69, 59, 53]", "assert larg_nnum([12, 15, 51, 73, 94, 24, 51, 38, 62, 78, 105], 8) == [105, 94, 78, 73, 62, 51, 51, 38]", "assert larg_nnum([7, 18, 50, 72, 94, 23, 54, 35, 58, 77, 105], 2) == [105, 94]", "assert larg_nnum([13, 15, 53, 75, 91, 15, 52, 36, 58, 82, 98], 1) == [98]", "assert larg_nnum([10, 18, 51, 68, 90, 20, 54, 40, 63, 79, 96], 2) == [96, 90]", "assert larg_nnum([9, 20, 46, 65, 86, 15, 53, 41, 61, 84, 100], 3) == [100, 86, 84]", "assert larg_nnum([9, 25, 51, 67, 86, 21, 52, 41, 59, 77, 101], 7) == [101, 86, 77, 67, 59, 52, 51]", "assert larg_nnum([6, 16, 49, 75, 92, 16, 51, 35, 56, 77, 98], 3) == [98, 92, 77]", "assert larg_nnum([10, 16, 46, 75, 87, 24, 48, 37, 58, 78, 101], 5) == [101, 87, 78, 75, 58]", "assert larg_nnum([6, 25, 54, 65, 92, 17, 54, 37, 55, 80, 101], 8) == [101, 92, 80, 65, 55, 54, 54, 37]", "assert larg_nnum([6, 24, 45, 69, 87, 15, 50, 40, 56, 83, 103], 4) == [103, 87, 83, 69]", "assert larg_nnum([8, 16, 53, 67, 95, 20, 51, 37, 61, 78, 105], 7) == [105, 95, 78, 67, 61, 53, 51]", "assert larg_nnum([15, 24, 45, 74, 91, 16, 55, 40, 65, 75, 103], 1) == [103]", "assert larg_nnum([6, 16, 46, 71, 88, 20, 52, 36, 60, 78, 96], 2) == [96, 88]", "assert larg_nnum([7, 17, 52, 73, 87, 22, 51, 43, 55, 77, 99], 10) == [99, 87, 77, 73, 55, 52, 51, 43, 22, 17]", "assert larg_nnum([15, 24, 53, 72, 92, 18, 53, 43, 55, 83, 98], 3) == [98, 92, 83]", "assert larg_nnum([11, 22, 55, 71, 91, 18, 45, 45, 64, 77, 98], 7) == [98, 91, 77, 71, 64, 55, 45]", "assert larg_nnum([5, 25, 45, 67, 95, 19, 45, 40, 65, 79, 101], 4) == [101, 95, 79, 67]", "assert larg_nnum([12, 24, 48, 65, 94, 16, 53, 45, 55, 76, 101], 1) == [101]", "assert larg_nnum([10, 17, 51, 75, 88, 21, 53, 40, 65, 83, 97], 5) == [97, 88, 83, 75, 65]", "assert larg_nnum([8, 22, 55, 67, 92, 22, 52, 41, 60, 82, 103], 3) == [103, 92, 82]", "assert larg_nnum([14, 19, 50, 73, 85, 25, 55, 41, 59, 83, 97], 8) == [97, 85, 83, 73, 59, 55, 50, 41]", "assert larg_nnum([13, 18, 45, 70, 95, 21, 54, 44, 62, 78, 103], 5) == [103, 95, 78, 70, 62]", "assert larg_nnum([6, 25, 54, 75, 86, 18, 55, 38, 60, 83, 95], 7) == [95, 86, 83, 75, 60, 55, 54]", "assert larg_nnum([14, 17, 55, 67, 90, 22, 47, 37, 62, 76, 97], 4) == [97, 90, 76, 67]", "assert larg_nnum([15, 16, 52, 68, 90, 22, 52, 43, 55, 84, 95], 8) == [95, 90, 84, 68, 55, 52, 52, 43]", "assert larg_nnum([10, 24, 46, 70, 92, 20, 49, 45, 57, 83, 95], 3) == [95, 92, 83]", "assert larg_nnum([15, 21, 54, 67, 88, 17, 53, 45, 57, 85, 105], 1) == [105]", "assert larg_nnum([11, 16, 52, 69, 92, 23, 55, 43, 63, 84, 98], 6) == [98, 92, 84, 69, 63, 55]", "assert larg_nnum([15, 16, 53, 69, 93, 21, 53, 37, 59, 81, 100], 7) == [100, 93, 81, 69, 59, 53, 53]", "assert larg_nnum([7, 19, 46, 67, 94, 17, 49, 44, 57, 84, 99], 6) == [99, 94, 84, 67, 57, 49]", "assert larg_nnum([11, 19, 55, 74, 93, 23, 52, 39, 60, 81, 100], 3) == [100, 93, 81]", "assert larg_nnum([11, 24, 49, 69, 94, 15, 46, 37, 55, 80, 103], 1) == [103]", "assert larg_nnum([5, 18, 49, 73, 91, 19, 50, 39, 61, 84, 103], 5) == [103, 91, 84, 73, 61]", "assert larg_nnum([5, 23, 51, 75, 92, 17, 54, 41, 57, 82, 103], 7) == [103, 92, 82, 75, 57, 54, 51]", "assert larg_nnum([7, 16, 46, 71, 95, 23, 46, 42, 65, 78, 103], 8) == [103, 95, 78, 71, 65, 46, 46, 42]", "assert larg_nnum([13, 23, 47, 75, 93, 20, 55, 45, 59, 79, 101], 5) == [101, 93, 79, 75, 59]", "assert larg_nnum([12, 19, 53, 73, 86, 20, 54, 36, 62, 80, 99], 2) == [99, 86]", "assert larg_nnum([15, 21, 46, 75, 95, 20, 55, 42, 57, 76, 96], 2) == [96, 95]", "assert larg_nnum([14, 18, 46, 75, 94, 24, 49, 45, 60, 78, 95], 6) == [95, 94, 78, 75, 60, 49]", "assert larg_nnum([15, 17, 54, 71, 95, 15, 53, 42, 63, 78, 104], 4) == [104, 95, 78, 71]", "assert larg_nnum([7, 25, 52, 66, 92, 15, 47, 35, 63, 76, 101], 5) == [101, 92, 76, 66, 63]", "assert larg_nnum([15, 17, 50, 70, 88, 22, 51, 38, 64, 77, 98], 4) == [98, 88, 77, 70]", "assert larg_nnum([5, 17, 50, 74, 89, 25, 52, 43, 61, 75, 97], 6) == [97, 89, 75, 74, 61, 52]", "assert larg_nnum([8, 16, 49, 75, 88, 17, 53, 44, 61, 81, 100], 1) == [100]", "assert larg_nnum([7, 19, 52, 74, 86, 22, 47, 36, 57, 78, 96], 5) == [96, 86, 78, 74, 57]", "assert larg_nnum([11, 20, 47, 65, 86, 24, 54, 45, 63, 76, 100], 5) == [100, 86, 76, 65, 63]", "assert larg_nnum([10, 17, 47, 67, 89, 19, 46, 37, 56, 80, 102], 7) == [102, 89, 80, 67, 56, 47, 46]", "assert larg_nnum([12, 18, 50, 69, 90, 22, 45, 36, 59, 83, 98], 5) == [98, 90, 83, 69, 59]", "assert larg_nnum([11, 25, 51, 74, 90, 15, 46, 37, 62, 77, 104], 7) == [104, 90, 77, 74, 62, 51, 46]", "assert larg_nnum([13, 22, 45, 70, 91, 17, 54, 43, 64, 84, 102], 1) == [102]"], "entry_point": "larg_nnum", "repair_prompt": ["Write a function larg_nnum that accepts a list of elements and an integer n and returns a list containing the n largest items from the list. Ensure that the elements in the returned list are ordered in descending order. If two elements have the same value, their relative order in the original list should be preserved. Your solution should efficiently handle lists with a large number of elements.\nlarg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n"], "completions": ["from typing import List\n## main.py\n\nimport heapq\n\ndef larg_nnum(lst: list, n: int) -> list:\n    \"\"\"\n    This function takes a list of elements and an integer n, and returns the n largest elements in descending order.\n    \n    Args:\n        lst (list): A list of elements.\n        n (int): The number of largest elements to return.\n        \n    Returns:\n        list: A list of the n largest elements in descending order.\n    \"\"\"\n    if n <= 0:\n        return []\n    \n    # Find the n largest elements using heapq.nlargest\n    largest_n_elements = heapq.nlargest(n, lst)\n    \n    # Sort the result in descending order\n    largest_n_elements.sort(reverse=True)\n    \n    return largest_n_elements\n", "from typing import List\nfrom typing import List\n\ndef larg_nnum(lst: List[int], n: int) -> List[int]:\n    \"\"\"\n    This function returns the n largest numbers from the given list.\n    \n    Args:\n        lst (List[int]): The list of integers from which to extract the n largest numbers.\n        n (int): The number of largest elements to return.\n        \n    Returns:\n        List[int]: A list containing the n largest numbers from the input list.\n    \"\"\"\n    # Sort the list in descending order\n    sorted_lst = sorted(lst, reverse=True)\n    \n    # Slice the last n elements from the sorted list\n    n_largest = sorted_lst[-n:]\n    \n    return n_largest\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport heapq\n\ndef larg_nnum(elements: List[int], n: int) -> List[int]:\n    \"\"\"\n    This function finds the n largest elements in a list while preserving their original order.\n    \n    Args:\n        elements (List[int]): The list of integers from which to find the n largest elements.\n        n (int): The number of largest elements to find.\n        \n    Returns:\n        List[int]: A list containing the n largest elements in the original order.\n    \"\"\"\n    if n <= 0:\n        return []\n    \n    # Use heapq.nlargest to find the n largest elements\n    largest_n_elements = heapq.nlargest(n, elements)\n    \n    # Sort the result in descending order to maintain the original order\n    largest_n_elements.sort(reverse=True)\n    \n    return largest_n_elements\n", "from typing import List\n## main.py\n\nimport heapq\nfrom typing import List\n\ndef larg_nnum(elements: List[int], n: int) -> List[int]:\n    \"\"\"\n    This function takes a list of integers and an integer 'n', and returns the 'n' largest elements in descending order.\n    \n    Args:\n        elements (List[int]): A list of integers from which to find the largest elements.\n        n (int): The number of largest elements to return.\n        \n    Returns:\n        List[int]: A list of the 'n' largest elements in descending order.\n    \"\"\"\n    if n <= 0:\n        return []\n    \n    # Find the n largest elements\n    largest_elements = heapq.nlargest(n, elements)\n    \n    # Sort the result in descending order\n    largest_elements.sort(reverse=True)\n    \n    return largest_elements\n", "from typing import List\n## main.py\n\nimport heapq\nfrom typing import List\n\ndef larg_nnum(elements: List[int], n: int) -> List[int]:\n    \"\"\"\n    This function takes a list of integers and an integer 'n', and returns a list of the n largest elements in descending order.\n    \n    Args:\n        elements (List[int]): A list of integers from which to find the n largest elements.\n        n (int): The number of largest elements to return.\n    \n    Returns:\n        List[int]: A list of the n largest elements in descending order.\n    \"\"\"\n    if n <= 0:\n        return []\n    \n    # Create a heap of the n largest elements\n    largest_n_elements = heapq.nlargest(n, elements)\n    \n    # Sort the extracted elements in descending order\n    largest_n_elements.sort(reverse=True)\n    \n    return largest_n_elements\n", "from typing import List\nfrom typing import List\n\ndef larg_nnum(lst: List[int], n: int) -> List[int]:\n    \"\"\"\n    This function returns the n largest elements from the given list while preserving their order.\n    \n    Args:\n        lst (List[int]): The list of integers from which to find the largest elements.\n        n (int): The number of largest elements to return.\n        \n    Returns:\n        List[int]: A list containing the n largest elements in the original order.\n    \"\"\"\n    if n <= 0 or not lst:\n        return []\n    \n    # Sort the list in descending order\n    sorted_lst = sorted(lst, key=lambda x: -x)\n    \n    # Return the top n elements\n    return sorted_lst[:n]\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport heapq\n\ndef larg_nnum(elements: List[int], n: int) -> List[int]:\n    \"\"\"\n    Returns the n largest elements from the given list in descending order while preserving the order of elements with the same value.\n    \n    Args:\n        elements (List[int]): A list of integers.\n        n (int): The number of largest elements to return.\n    \n    Returns:\n        List[int]: A list of the n largest elements in descending order.\n    \"\"\"\n    if n <= 0:\n        return []\n    \n    # Use heapq.nlargest to get the n largest elements\n    largest_elements = heapq.nlargest(n, elements, key=lambda x: (-x, elements.index(x)))\n    \n    return largest_elements\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport heapq\n\ndef larg_nnum(elements: List[int], n: int) -> List[int]:\n    \"\"\"\n    This function returns the top n largest elements from the given list while preserving their order.\n    \n    Args:\n        elements (List[int]): The list of integers from which to find the top n largest elements.\n        n (int): The number of largest elements to return.\n        \n    Returns:\n        List[int]: A list containing the top n largest elements in the original order.\n    \"\"\"\n    if n <= 0:\n        return []\n    \n    # Use heapq.nlargest to get the n largest elements\n    largest_n_elements = heapq.nlargest(n, elements)\n    \n    # Return the sorted list of the largest n elements in descending order\n    return largest_n_elements\n\n# Example usage:\n# result = larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)\n# print(result)  # Output: [100, 90]\n", "from typing import List\n## main.py\n\ndef larg_nnum(lst: list, n: int) -> list:\n    \"\"\"\n    Returns the n largest elements from a list, preserving their order.\n\n    Args:\n        lst (list): The input list of numbers.\n        n (int): The number of largest elements to return.\n\n    Returns:\n        list: A list containing the n largest elements in the original order.\n    \"\"\"\n    # Sort the list with a custom key to preserve order\n    sorted_lst = sorted(lst, key=lambda x: (-x, lst.index(x)))\n    \n    # Select the last n elements\n    n_largest = sorted_lst[-n:]\n    \n    return n_largest\n", "from typing import List\n## main.py\n\nimport heapq\nfrom typing import List\n\ndef larg_nnum(lst: List[int], n: int) -> List[int]:\n    \"\"\"\n    This function takes a list of integers and an integer n, uses heapq.nlargest to find the n largest elements,\n    and returns them sorted in descending order.\n    \n    Args:\n        lst (List[int]): The list of integers from which to find the n largest elements.\n        n (int): The number of largest elements to return.\n        \n    Returns:\n        List[int]: A list of the n largest elements in descending order.\n    \"\"\"\n    if n <= 0:\n        return []\n    \n    # Find the n largest elements using heapq.nlargest\n    largest_n_elements = heapq.nlargest(n, lst)\n    \n    # Sort the result in descending order\n    largest_n_elements.sort(reverse=True)\n    \n    return largest_n_elements\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that can efficiently find the n largest elements in a list, maintaining their order if they have the same value. This is crucial for scenarios where quick access to the largest values is necessary, such as in data analysis or when dealing with large datasets. The function should be optimized for performance and should handle lists with a large number of elements without significant slowdowns.\nrequirement pool:\n- The main code should be optimized for performance to handle large datasets efficiently.\n- The function should return the n largest elements in descending order.\n- Ensure compatibility with Python's built-in data structures.\n- Implement error handling for invalid inputs like non-integer n or non-list inputs.\n- Provide clear documentation and examples of usage.\nTo efficiently find the n largest elements in a list and return them in descending order, we will utilize Python's built-in functions combined with a sorting mechanism. Specifically, we will use the `heapq.nlargest` function from the `heapq` module, which is optimized for such tasks and ensures that the elements are returned in the order specified.\n", "requirement analysis:\nThe function should accept a list and an integer n, return the n largest items from the list in descending order. The solution should be efficient and handle large lists. The code should be clear and maintainable.\nrequirement pool:\n- Implement the function to return the n largest items efficiently.\n- Ensure the function handles large lists without performance issues.\n- Maintain the order of elements with the same value as in the original list.\n- Provide clear and readable code for easy understanding and maintenance.\n- Test the function with various edge cases to ensure robustness.\nTo implement the function `larg_nnum` efficiently, we will utilize Python's built-in `sorted` function combined with a slice operation to extract the n largest elements. This approach ensures both efficiency and readability. The function will first sort the entire list in descending order and then slice the last n elements to get the desired result. To maintain the order of elements with the same value, we will use a stable sorting algorithm, leveraging Python's `sorted` function which is stable by default.\n", "requirement analysis:\nThe function needs to efficiently find the n largest elements in a list, ensuring that the order of these elements is in descending order. It should also handle large lists without performance issues. The solution should be simple and readable, making it easy for developers to understand and maintain.\nrequirement pool:\n- The function should return the n largest elements in descending order.\n- The function should handle large lists efficiently.\n- The function should be simple and readable.\n- The function should preserve the original order of elements when they have the same value.\nTo efficiently find the n largest elements in a list while preserving their original order and ensuring high performance, we will utilize Python's built-in libraries and data structures. Specifically, we will use the `heapq` module, which provides an efficient way to handle heap operations. This module will help us efficiently find the n largest elements and maintain their order.\n", "requirement analysis:\nThe requirement is to create a function that can efficiently find the n largest elements in a list, maintaining their order if they have the same value. This is a common task in data analysis and large-scale data processing. The function should handle large datasets without significant performance degradation.\nrequirement pool:\n- The main code should be optimized for performance.\n- The function should handle lists with a large number of elements.\n- Ensure the elements in the returned list are ordered in descending order.\n- Preserve the relative order of elements with the same value.\n- Provide clear and concise documentation for the function.\nTo efficiently find the n largest elements in a list while maintaining their order, we will utilize Python's built-in 'heapq' module, which provides an efficient way to handle heap operations. This module includes the 'nlargest' function which directly addresses our requirement of finding the top N largest elements. We will ensure that the elements are returned in descending order by leveraging the 'sorted' function on the result of 'nlargest'.\n", "requirement analysis:\nThe function larg_nnum needs to efficiently find the n largest elements in a list, preserving their order. The solution should handle large datasets and be optimized for performance. The output should be a list of the n largest elements in descending order.\nrequirement pool:\n- The main code should be optimized for performance to handle large lists.\n- The function should return the n largest elements in descending order.\n- Ensure compatibility with Python versions and ensure scalability.\n- Include detailed documentation and examples for user guidance.\nTo efficiently find the n largest elements in a list while preserving their order, we will utilize Python's built-in 'heapq' module, which provides an efficient way to handle heap operations. This module will help us to maintain a heap of the n largest elements and then extract them in descending order.\n", "requirement analysis:\nThe function larg_nnum needs to efficiently find the n largest elements in a list, preserving their order if they have the same value. This requires a balance between performance and usability. The function should handle large datasets without significant performance degradation, and it should be easy to integrate and use.\nrequirement pool:\n- The main code should be optimized for performance.\n- The function should handle lists with a large number of elements efficiently.\n- The function should be easy to understand and implement.\n- The function should handle edge cases such as empty lists or n being larger than the list size.\n- The function should be compatible with different programming environments.\nTo efficiently find the n largest elements in a list while preserving their order, we will utilize Python's built-in sorted() function with a custom key to ensure descending order. This approach leverages Python's efficiency and the sorted() function's ability to handle large datasets effectively. We will also ensure that the function is robust enough to handle edge cases such as empty lists or n being larger than the list size.\n", "requirement analysis:\nThe function larg_nnum needs to efficiently find the n largest elements in a list, maintaining the order of appearance for elements of the same value. This requires a solution that is both fast and memory-efficient, capable of handling large datasets without excessive computation time or memory usage. The function should be simple to understand and use, suitable for both novice and experienced programmers.\nrequirement pool:\n- The main code should be optimized for performance and scalability.\n- Ensure the function can handle large lists efficiently.\n- Preserve the order of elements with the same value as in the original list.\n- Provide clear and concise documentation for easy understanding.\n- Include error handling for unexpected input.\nTo efficiently find the n largest items in a list and return them in descending order while preserving the order of elements with the same value, we will utilize Python's built-in 'heapq' module. This module provides an efficient way to handle heap operations, which is crucial for performance with large datasets. We will use the 'nlargest' function from 'heapq' to directly obtain the n largest elements from the list. To ensure the order of elements with the same value is preserved, we will use a custom sorting key that includes the original index of each element.\n", "requirement analysis:\nThe function larg_nnum needs to efficiently find the n largest elements in a list while preserving their order. This requires a balance between performance and simplicity. The solution should handle large datasets without significant performance degradation and ensure the elements are sorted in descending order.\nrequirement pool:\n- The main code should be efficient in handling large lists.\n- Ensure the returned list is sorted in descending order.\n- Implement a solution that is easy to understand and maintain.\n- Include optimizations for scenarios with many elements.\n- Allow for customization of the number of largest elements to return.\nTo create an efficient and user-friendly solution for finding the top n largest elements in a list while preserving their order, we will utilize Python's built-in libraries and data structures. Specifically, we will use the `heapq` module, which provides an efficient way to handle heap operations. This module will help us efficiently find the n largest elements and maintain their order without the need for complex sorting algorithms.\n", "requirement analysis:\nThe requirement is to create a function that returns the n largest elements from a list, preserving their order. The function should handle large lists efficiently. This is a common task in data analysis and programming, where understanding the performance characteristics is crucial. The function should be simple to use and integrate into existing workflows.\nrequirement pool:\n- The main code should be efficient and handle large datasets.\n- The function should return the n largest elements in descending order.\n- The function should be easy to use and integrate into existing workflows.\n- The function should be optimized for performance, especially with large lists.\n- The function should handle edge cases, such as when n is larger than the list size.\nTo create an efficient function that returns the n largest elements from a list, preserving their order, we will utilize Python's built-in sorting capabilities. This approach is straightforward and leverages Python's performance for list operations. We will use the `sorted` function with a custom key to ensure the order is preserved for elements with the same value.\n", "requirement analysis:\nThe function 'larg_nnum' needs to efficiently return the n largest elements from a list, maintaining their order if they have the same value. This requires a balance between performance and usability. The function should handle large datasets without significant performance degradation, and the output should be in descending order of importance.\nrequirement pool:\n- Implement a function that can handle large lists efficiently.\n- Ensure the function returns the n largest elements in descending order.\n- Preserve the order of elements with the same value.\n- Optimize the function for high performance with large datasets.\n- Improve user interface for better usability.\nTo implement the 'larg_nnum' function efficiently, we will utilize Python's built-in libraries and data structures. Specifically, we will use the 'heapq' module which provides an efficient way to handle the task of finding the n largest elements in a list. This module uses heaps to keep track of the largest elements, ensuring that the function can handle large datasets without significant performance degradation. We will also use list comprehensions to ensure the elements are ordered in descending order as required.\n"], "test": ["def check(larg_nnum):\n\tassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]", "def check(larg_nnum):\n\tassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]", "def check(larg_nnum):\n\tassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]", "def check(larg_nnum):\n\tassert larg_nnum([10, 16, 51, 68, 88, 19, 55, 43, 63, 76, 96], 6) == [96, 88, 76, 68, 63, 55]", "def check(larg_nnum):\n\tassert larg_nnum([11, 16, 46, 65, 95, 18, 55, 37, 60, 75, 97], 2) == [97, 95]", "def check(larg_nnum):\n\tassert larg_nnum([10, 19, 55, 71, 95, 25, 53, 40, 62, 77, 100], 6) == [100, 95, 77, 71, 62, 55]", "def check(larg_nnum):\n\tassert larg_nnum([13, 22, 53, 71, 86, 16, 53, 38, 59, 84, 102], 7) == [102, 86, 84, 71, 59, 53, 53]", "def check(larg_nnum):\n\tassert larg_nnum([8, 16, 47, 75, 86, 17, 47, 42, 56, 76, 98], 4) == [98, 86, 76, 75]", "def check(larg_nnum):\n\tassert larg_nnum([7, 16, 51, 75, 89, 18, 55, 45, 57, 76, 99], 7) == [99, 89, 76, 75, 57, 55, 51]", "def check(larg_nnum):\n\tassert larg_nnum([8, 17, 53, 68, 87, 18, 49, 42, 63, 85, 103], 6) == [103, 87, 85, 68, 63, 53]", "def check(larg_nnum):\n\tassert larg_nnum([14, 21, 46, 70, 95, 23, 52, 36, 57, 80, 99], 3) == [99, 95, 80]", "def check(larg_nnum):\n\tassert larg_nnum([6, 24, 53, 74, 91, 24, 47, 42, 63, 85, 105], 3) == [105, 91, 85]", "def check(larg_nnum):\n\tassert larg_nnum([6, 21, 55, 71, 86, 15, 46, 35, 63, 77, 95], 7) == [95, 86, 77, 71, 63, 55, 46]", "def check(larg_nnum):\n\tassert larg_nnum([11, 21, 48, 74, 93, 25, 48, 41, 59, 79, 101], 3) == [101, 93, 79]", "def check(larg_nnum):\n\tassert larg_nnum([15, 15, 48, 70, 91, 25, 50, 38, 58, 83, 99], 4) == [99, 91, 83, 70]", "def check(larg_nnum):\n\tassert larg_nnum([5, 19, 53, 66, 95, 21, 54, 39, 57, 82, 97], 5) == [97, 95, 82, 66, 57]", "def check(larg_nnum):\n\tassert larg_nnum([5, 19, 48, 69, 86, 23, 49, 45, 64, 76, 99], 2) == [99, 86]", "def check(larg_nnum):\n\tassert larg_nnum([7, 17, 48, 73, 90, 24, 46, 39, 56, 84, 103], 7) == [103, 90, 84, 73, 56, 48, 46]", "def check(larg_nnum):\n\tassert larg_nnum([6, 22, 52, 75, 85, 15, 49, 41, 64, 77, 100], 5) == [100, 85, 77, 75, 64]", "def check(larg_nnum):\n\tassert larg_nnum([11, 21, 46, 70, 85, 20, 55, 41, 64, 82, 101], 5) == [101, 85, 82, 70, 64]", "def check(larg_nnum):\n\tassert larg_nnum([9, 25, 51, 73, 92, 17, 52, 43, 56, 78, 103], 6) == [103, 92, 78, 73, 56, 52]", "def check(larg_nnum):\n\tassert larg_nnum([11, 22, 50, 70, 90, 20, 52, 41, 57, 77, 95], 4) == [95, 90, 77, 70]", "def check(larg_nnum):\n\tassert larg_nnum([11, 24, 52, 73, 89, 21, 48, 44, 65, 82, 100], 7) == [100, 89, 82, 73, 65, 52, 48]", "def check(larg_nnum):\n\tassert larg_nnum([10, 21, 48, 74, 94, 24, 47, 40, 58, 80, 98], 4) == [98, 94, 80, 74]", "def check(larg_nnum):\n\tassert larg_nnum([15, 19, 54, 67, 95, 16, 50, 42, 56, 83, 105], 1) == [105]", "def check(larg_nnum):\n\tassert larg_nnum([15, 23, 54, 67, 89, 15, 50, 42, 64, 79, 97], 2) == [97, 89]", "def check(larg_nnum):\n\tassert larg_nnum([9, 15, 45, 75, 87, 18, 53, 40, 64, 77, 103], 6) == [103, 87, 77, 75, 64, 53]", "def check(larg_nnum):\n\tassert larg_nnum([6, 16, 55, 71, 86, 18, 50, 39, 65, 84, 105], 7) == [105, 86, 84, 71, 65, 55, 50]", "def check(larg_nnum):\n\tassert larg_nnum([8, 18, 50, 65, 86, 19, 54, 36, 64, 85, 105], 6) == [105, 86, 85, 65, 64, 54]", "def check(larg_nnum):\n\tassert larg_nnum([13, 16, 53, 67, 94, 21, 55, 42, 56, 79, 99], 7) == [99, 94, 79, 67, 56, 55, 53]", "def check(larg_nnum):\n\tassert larg_nnum([11, 18, 49, 72, 93, 25, 49, 39, 65, 78, 103], 1) == [103]", "def check(larg_nnum):\n\tassert larg_nnum([13, 22, 46, 74, 91, 20, 48, 45, 63, 80, 103], 4) == [103, 91, 80, 74]", "def check(larg_nnum):\n\tassert larg_nnum([14, 21, 49, 71, 90, 25, 51, 40, 63, 78, 98], 5) == [98, 90, 78, 71, 63]", "def check(larg_nnum):\n\tassert larg_nnum([13, 16, 48, 67, 88, 20, 52, 43, 64, 75, 96], 6) == [96, 88, 75, 67, 64, 52]", "def check(larg_nnum):\n\tassert larg_nnum([5, 23, 49, 74, 90, 21, 51, 39, 62, 78, 99], 7) == [99, 90, 78, 74, 62, 51, 49]", "def check(larg_nnum):\n\tassert larg_nnum([9, 24, 49, 70, 90, 23, 55, 35, 55, 81, 101], 7) == [101, 90, 81, 70, 55, 55, 49]", "def check(larg_nnum):\n\tassert larg_nnum([9, 15, 53, 66, 91, 18, 51, 43, 64, 75, 97], 10) == [97, 91, 75, 66, 64, 53, 51, 43, 18, 15]", "def check(larg_nnum):\n\tassert larg_nnum([8, 22, 55, 72, 90, 19, 48, 41, 62, 77, 100], 4) == [100, 90, 77, 72]", "def check(larg_nnum):\n\tassert larg_nnum([5, 20, 47, 67, 95, 22, 48, 36, 62, 80, 101], 6) == [101, 95, 80, 67, 62, 48]", "def check(larg_nnum):\n\tassert larg_nnum([11, 17, 55, 74, 89, 16, 47, 40, 55, 76, 104], 9) == [104, 89, 76, 74, 55, 55, 47, 40, 17]", "def check(larg_nnum):\n\tassert larg_nnum([9, 16, 49, 69, 95, 18, 46, 42, 64, 82, 95], 7) == [95, 95, 82, 69, 64, 49, 46]", "def check(larg_nnum):\n\tassert larg_nnum([12, 20, 53, 67, 90, 24, 45, 38, 58, 81, 104], 9) == [104, 90, 81, 67, 58, 53, 45, 38, 24]", "def check(larg_nnum):\n\tassert larg_nnum([9, 17, 49, 73, 93, 17, 48, 44, 65, 81, 101], 2) == [101, 93]", "def check(larg_nnum):\n\tassert larg_nnum([6, 17, 52, 75, 90, 15, 45, 35, 64, 84, 105], 2) == [105, 90]", "def check(larg_nnum):\n\tassert larg_nnum([6, 23, 47, 74, 95, 17, 45, 36, 63, 79, 102], 6) == [102, 95, 79, 74, 63, 47]", "def check(larg_nnum):\n\tassert larg_nnum([7, 23, 50, 71, 91, 18, 53, 35, 65, 81, 103], 3) == [103, 91, 81]", "def check(larg_nnum):\n\tassert larg_nnum([8, 21, 46, 70, 94, 17, 50, 45, 63, 75, 104], 2) == [104, 94]", "def check(larg_nnum):\n\tassert larg_nnum([11, 18, 45, 69, 88, 23, 53, 45, 55, 83, 97], 1) == [97]", "def check(larg_nnum):\n\tassert larg_nnum([8, 21, 51, 71, 88, 23, 48, 40, 59, 80, 100], 6) == [100, 88, 80, 71, 59, 51]", "def check(larg_nnum):\n\tassert larg_nnum([12, 25, 53, 73, 86, 25, 50, 38, 55, 83, 105], 3) == [105, 86, 83]", "def check(larg_nnum):\n\tassert larg_nnum([8, 24, 55, 75, 85, 19, 47, 40, 57, 81, 96], 9) == [96, 85, 81, 75, 57, 55, 47, 40, 24]", "def check(larg_nnum):\n\tassert larg_nnum([14, 19, 53, 69, 90, 21, 47, 41, 59, 76, 97], 6) == [97, 90, 76, 69, 59, 53]", "def check(larg_nnum):\n\tassert larg_nnum([12, 15, 51, 73, 94, 24, 51, 38, 62, 78, 105], 8) == [105, 94, 78, 73, 62, 51, 51, 38]", "def check(larg_nnum):\n\tassert larg_nnum([7, 18, 50, 72, 94, 23, 54, 35, 58, 77, 105], 2) == [105, 94]", "def check(larg_nnum):\n\tassert larg_nnum([13, 15, 53, 75, 91, 15, 52, 36, 58, 82, 98], 1) == [98]", "def check(larg_nnum):\n\tassert larg_nnum([10, 18, 51, 68, 90, 20, 54, 40, 63, 79, 96], 2) == [96, 90]", "def check(larg_nnum):\n\tassert larg_nnum([9, 20, 46, 65, 86, 15, 53, 41, 61, 84, 100], 3) == [100, 86, 84]", "def check(larg_nnum):\n\tassert larg_nnum([9, 25, 51, 67, 86, 21, 52, 41, 59, 77, 101], 7) == [101, 86, 77, 67, 59, 52, 51]", "def check(larg_nnum):\n\tassert larg_nnum([6, 16, 49, 75, 92, 16, 51, 35, 56, 77, 98], 3) == [98, 92, 77]", "def check(larg_nnum):\n\tassert larg_nnum([10, 16, 46, 75, 87, 24, 48, 37, 58, 78, 101], 5) == [101, 87, 78, 75, 58]", "def check(larg_nnum):\n\tassert larg_nnum([6, 25, 54, 65, 92, 17, 54, 37, 55, 80, 101], 8) == [101, 92, 80, 65, 55, 54, 54, 37]", "def check(larg_nnum):\n\tassert larg_nnum([6, 24, 45, 69, 87, 15, 50, 40, 56, 83, 103], 4) == [103, 87, 83, 69]", "def check(larg_nnum):\n\tassert larg_nnum([8, 16, 53, 67, 95, 20, 51, 37, 61, 78, 105], 7) == [105, 95, 78, 67, 61, 53, 51]", "def check(larg_nnum):\n\tassert larg_nnum([15, 24, 45, 74, 91, 16, 55, 40, 65, 75, 103], 1) == [103]", "def check(larg_nnum):\n\tassert larg_nnum([6, 16, 46, 71, 88, 20, 52, 36, 60, 78, 96], 2) == [96, 88]", "def check(larg_nnum):\n\tassert larg_nnum([7, 17, 52, 73, 87, 22, 51, 43, 55, 77, 99], 10) == [99, 87, 77, 73, 55, 52, 51, 43, 22, 17]", "def check(larg_nnum):\n\tassert larg_nnum([15, 24, 53, 72, 92, 18, 53, 43, 55, 83, 98], 3) == [98, 92, 83]", "def check(larg_nnum):\n\tassert larg_nnum([11, 22, 55, 71, 91, 18, 45, 45, 64, 77, 98], 7) == [98, 91, 77, 71, 64, 55, 45]", "def check(larg_nnum):\n\tassert larg_nnum([5, 25, 45, 67, 95, 19, 45, 40, 65, 79, 101], 4) == [101, 95, 79, 67]", "def check(larg_nnum):\n\tassert larg_nnum([12, 24, 48, 65, 94, 16, 53, 45, 55, 76, 101], 1) == [101]", "def check(larg_nnum):\n\tassert larg_nnum([10, 17, 51, 75, 88, 21, 53, 40, 65, 83, 97], 5) == [97, 88, 83, 75, 65]", "def check(larg_nnum):\n\tassert larg_nnum([8, 22, 55, 67, 92, 22, 52, 41, 60, 82, 103], 3) == [103, 92, 82]", "def check(larg_nnum):\n\tassert larg_nnum([14, 19, 50, 73, 85, 25, 55, 41, 59, 83, 97], 8) == [97, 85, 83, 73, 59, 55, 50, 41]", "def check(larg_nnum):\n\tassert larg_nnum([13, 18, 45, 70, 95, 21, 54, 44, 62, 78, 103], 5) == [103, 95, 78, 70, 62]", "def check(larg_nnum):\n\tassert larg_nnum([6, 25, 54, 75, 86, 18, 55, 38, 60, 83, 95], 7) == [95, 86, 83, 75, 60, 55, 54]", "def check(larg_nnum):\n\tassert larg_nnum([14, 17, 55, 67, 90, 22, 47, 37, 62, 76, 97], 4) == [97, 90, 76, 67]", "def check(larg_nnum):\n\tassert larg_nnum([15, 16, 52, 68, 90, 22, 52, 43, 55, 84, 95], 8) == [95, 90, 84, 68, 55, 52, 52, 43]", "def check(larg_nnum):\n\tassert larg_nnum([10, 24, 46, 70, 92, 20, 49, 45, 57, 83, 95], 3) == [95, 92, 83]", "def check(larg_nnum):\n\tassert larg_nnum([15, 21, 54, 67, 88, 17, 53, 45, 57, 85, 105], 1) == [105]", "def check(larg_nnum):\n\tassert larg_nnum([11, 16, 52, 69, 92, 23, 55, 43, 63, 84, 98], 6) == [98, 92, 84, 69, 63, 55]", "def check(larg_nnum):\n\tassert larg_nnum([15, 16, 53, 69, 93, 21, 53, 37, 59, 81, 100], 7) == [100, 93, 81, 69, 59, 53, 53]", "def check(larg_nnum):\n\tassert larg_nnum([7, 19, 46, 67, 94, 17, 49, 44, 57, 84, 99], 6) == [99, 94, 84, 67, 57, 49]", "def check(larg_nnum):\n\tassert larg_nnum([11, 19, 55, 74, 93, 23, 52, 39, 60, 81, 100], 3) == [100, 93, 81]", "def check(larg_nnum):\n\tassert larg_nnum([11, 24, 49, 69, 94, 15, 46, 37, 55, 80, 103], 1) == [103]", "def check(larg_nnum):\n\tassert larg_nnum([5, 18, 49, 73, 91, 19, 50, 39, 61, 84, 103], 5) == [103, 91, 84, 73, 61]", "def check(larg_nnum):\n\tassert larg_nnum([5, 23, 51, 75, 92, 17, 54, 41, 57, 82, 103], 7) == [103, 92, 82, 75, 57, 54, 51]", "def check(larg_nnum):\n\tassert larg_nnum([7, 16, 46, 71, 95, 23, 46, 42, 65, 78, 103], 8) == [103, 95, 78, 71, 65, 46, 46, 42]", "def check(larg_nnum):\n\tassert larg_nnum([13, 23, 47, 75, 93, 20, 55, 45, 59, 79, 101], 5) == [101, 93, 79, 75, 59]", "def check(larg_nnum):\n\tassert larg_nnum([12, 19, 53, 73, 86, 20, 54, 36, 62, 80, 99], 2) == [99, 86]", "def check(larg_nnum):\n\tassert larg_nnum([15, 21, 46, 75, 95, 20, 55, 42, 57, 76, 96], 2) == [96, 95]", "def check(larg_nnum):\n\tassert larg_nnum([14, 18, 46, 75, 94, 24, 49, 45, 60, 78, 95], 6) == [95, 94, 78, 75, 60, 49]", "def check(larg_nnum):\n\tassert larg_nnum([15, 17, 54, 71, 95, 15, 53, 42, 63, 78, 104], 4) == [104, 95, 78, 71]", "def check(larg_nnum):\n\tassert larg_nnum([7, 25, 52, 66, 92, 15, 47, 35, 63, 76, 101], 5) == [101, 92, 76, 66, 63]", "def check(larg_nnum):\n\tassert larg_nnum([15, 17, 50, 70, 88, 22, 51, 38, 64, 77, 98], 4) == [98, 88, 77, 70]", "def check(larg_nnum):\n\tassert larg_nnum([5, 17, 50, 74, 89, 25, 52, 43, 61, 75, 97], 6) == [97, 89, 75, 74, 61, 52]", "def check(larg_nnum):\n\tassert larg_nnum([8, 16, 49, 75, 88, 17, 53, 44, 61, 81, 100], 1) == [100]", "def check(larg_nnum):\n\tassert larg_nnum([7, 19, 52, 74, 86, 22, 47, 36, 57, 78, 96], 5) == [96, 86, 78, 74, 57]", "def check(larg_nnum):\n\tassert larg_nnum([11, 20, 47, 65, 86, 24, 54, 45, 63, 76, 100], 5) == [100, 86, 76, 65, 63]", "def check(larg_nnum):\n\tassert larg_nnum([10, 17, 47, 67, 89, 19, 46, 37, 56, 80, 102], 7) == [102, 89, 80, 67, 56, 47, 46]", "def check(larg_nnum):\n\tassert larg_nnum([12, 18, 50, 69, 90, 22, 45, 36, 59, 83, 98], 5) == [98, 90, 83, 69, 59]", "def check(larg_nnum):\n\tassert larg_nnum([11, 25, 51, 74, 90, 15, 46, 37, 62, 77, 104], 7) == [104, 90, 77, 74, 62, 51, 46]", "def check(larg_nnum):\n\tassert larg_nnum([13, 22, 45, 70, 91, 17, 54, 43, 64, 84, 102], 1) == [102]"], "scores": [1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0], "pass_results": [true, false, true, true, true, true, false, true, false, true], "pass_test_cases_num": [102, 0, 102, 102, 102, 102, 0, 102, 0, 102], "completion": "from typing import List\n## main.py\n\nimport heapq\nfrom typing import List\n\ndef larg_nnum(lst: List[int], n: int) -> List[int]:\n    \"\"\"\n    This function takes a list of integers and an integer n, uses heapq.nlargest to find the n largest elements,\n    and returns them sorted in descending order.\n    \n    Args:\n        lst (List[int]): The list of integers from which to find the n largest elements.\n        n (int): The number of largest elements to return.\n        \n    Returns:\n        List[int]: A list of the n largest elements in descending order.\n    \"\"\"\n    if n <= 0:\n        return []\n    \n    # Find the n largest elements using heapq.nlargest\n    largest_n_elements = heapq.nlargest(n, lst)\n    \n    # Sort the result in descending order\n    largest_n_elements.sort(reverse=True)\n    \n    return largest_n_elements\n", "passed": true, "pass": true, "pass_num": 7, "round": 855, "mutate_method": "add_1_sentence_at_end", "parent_index": 632}
