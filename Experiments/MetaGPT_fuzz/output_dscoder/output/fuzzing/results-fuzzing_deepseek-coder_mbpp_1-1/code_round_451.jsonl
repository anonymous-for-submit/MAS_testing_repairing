{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 17, "prompt": "Write a function that returns the perimeter of a square given its side length as input. Ensure that the function handles edge cases such as zero or negative side lengths gracefully.", "code": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter", "test_imports": [], "test_list": ["assert square_perimeter(10)==40", "assert square_perimeter(5)==20", "assert square_perimeter(4)==16", "assert square_perimeter(8) == 32", "assert square_perimeter(12) == 48", "assert square_perimeter(15) == 60", "assert square_perimeter(14) == 56", "assert square_perimeter(9) == 36", "assert square_perimeter(7) == 28", "assert square_perimeter(13) == 52", "assert square_perimeter(6) == 24", "assert square_perimeter(9) == 36", "assert square_perimeter(6) == 24", "assert square_perimeter(11) == 44", "assert square_perimeter(5) == 20", "assert square_perimeter(11) == 44", "assert square_perimeter(10) == 40", "assert square_perimeter(14) == 56", "assert square_perimeter(6) == 24", "assert square_perimeter(6) == 24", "assert square_perimeter(11) == 44", "assert square_perimeter(15) == 60", "assert square_perimeter(8) == 32", "assert square_perimeter(12) == 48", "assert square_perimeter(15) == 60", "assert square_perimeter(11) == 44", "assert square_perimeter(15) == 60", "assert square_perimeter(8) == 32", "assert square_perimeter(11) == 44", "assert square_perimeter(9) == 36", "assert square_perimeter(10) == 40", "assert square_perimeter(9) == 36", "assert square_perimeter(11) == 44", "assert square_perimeter(15) == 60", "assert square_perimeter(6) == 24", "assert square_perimeter(13) == 52", "assert square_perimeter(5) == 20", "assert square_perimeter(9) == 36", "assert square_perimeter(5) == 20", "assert square_perimeter(7) == 28", "assert square_perimeter(7) == 28", "assert square_perimeter(7) == 28", "assert square_perimeter(4) == 16", "assert square_perimeter(5) == 20", "assert square_perimeter(10) == 40", "assert square_perimeter(7) == 28", "assert square_perimeter(10) == 40", "assert square_perimeter(2) == 8", "assert square_perimeter(7) == 28", "assert square_perimeter(2) == 8", "assert square_perimeter(1) == 4", "assert square_perimeter(4) == 16", "assert square_perimeter(9) == 36", "assert square_perimeter(7) == 28", "assert square_perimeter(7) == 28", "assert square_perimeter(4) == 16", "assert square_perimeter(4) == 16", "assert square_perimeter(8) == 32", "assert square_perimeter(9) == 36", "assert square_perimeter(9) == 36", "assert square_perimeter(8) == 32", "assert square_perimeter(4) == 16", "assert square_perimeter(10) == 40", "assert square_perimeter(8) == 32", "assert square_perimeter(4) == 16", "assert square_perimeter(9) == 36", "assert square_perimeter(2) == 8", "assert square_perimeter(2) == 8", "assert square_perimeter(4) == 16", "assert square_perimeter(9) == 36", "assert square_perimeter(1) == 4", "assert square_perimeter(2) == 8", "assert square_perimeter(6) == 24", "assert square_perimeter(4) == 16", "assert square_perimeter(3) == 12", "assert square_perimeter(9) == 36", "assert square_perimeter(2) == 8", "assert square_perimeter(6) == 24", "assert square_perimeter(1) == 4", "assert square_perimeter(7) == 28", "assert square_perimeter(2) == 8", "assert square_perimeter(5) == 20", "assert square_perimeter(7) == 28", "assert square_perimeter(8) == 32", "assert square_perimeter(1) == 4", "assert square_perimeter(6) == 24", "assert square_perimeter(7) == 28", "assert square_perimeter(3) == 12", "assert square_perimeter(9) == 36", "assert square_perimeter(9) == 36", "assert square_perimeter(7) == 28", "assert square_perimeter(1) == 4", "assert square_perimeter(6) == 24", "assert square_perimeter(5) == 20", "assert square_perimeter(5) == 20", "assert square_perimeter(4) == 16", "assert square_perimeter(8) == 32", "assert square_perimeter(6) == 24", "assert square_perimeter(3) == 12", "assert square_perimeter(8) == 32", "assert square_perimeter(2) == 8", "assert square_perimeter(2) == 8"], "entry_point": "square_perimeter", "repair_prompt": ["Write a function square_perimeter that returns the perimeter of a square given its side length as input. Ensure that the function handles edge cases such as zero or negative side lengths gracefully.\nsquare_perimeter(10)==40\n"], "completions": ["from typing import List\n## main.py\n\ndef square_perimeter(side_length: float) -> float:\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n\n    Args:\n        side_length (float): The length of one side of the square.\n\n    Returns:\n        float: The perimeter of the square.\n\n    Raises:\n        ValueError: If the side length is not a positive float.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive float.\")\n    \n    return 4 * side_length\n", "from typing import List\n## main.py\n\ndef square_perimeter(side_length: float) -> float:\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n\n    Args:\n        side_length (float): The length of one side of the square.\n\n    Returns:\n        float: The perimeter of the square.\n\n    Raises:\n        ValueError: If the input is not a positive number.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    \n    return 4 * side_length\n", "from typing import List\n## main.py\n\nimport typing\n\ndef square_perimeter(side_length: float) -> typing.Union[int, str]:\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n\n    Args:\n        side_length (float): The length of one side of the square.\n\n    Returns:\n        int: The perimeter of the square if the input is valid.\n        str: An error message if the input is invalid (zero or negative side length).\n    \"\"\"\n    if side_length <= 0:\n        return \"Invalid side length: must be positive\"\n    return int(side_length * 4)\n", "from typing import List\n## main.py\n\ndef square_perimeter(side_length: float) -> float:\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n\n    Args:\n        side_length (float): The length of one side of the square.\n\n    Returns:\n        float: The perimeter of the square.\n\n    Raises:\n        ValueError: If the side length is not a positive float.\n    \"\"\"\n    if not isinstance(side_length, (int, float)) or side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    \n    return 4 * side_length\n", "from typing import List\n## main.py\n\ndef square_perimeter(side_length: float) -> float:\n    \"\"\"\n    Calculate the perimeter of a square given the side length.\n\n    Args:\n        side_length (float): A positive number representing the side length of a square.\n\n    Returns:\n        float: The perimeter of the square, which is four times the side length.\n\n    Raises:\n        ValueError: If the input is not a positive number.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    \n    return 4 * side_length\n", "from typing import List\n## main.py\n\ndef square_perimeter(side_length: float) -> float:\n    \"\"\"\n    Calculate the perimeter of a square given the side length.\n\n    Args:\n        side_length (float): The length of a side of the square.\n\n    Returns:\n        float: The perimeter of the square.\n\n    Raises:\n        ValueError: If the side length is zero or negative.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    \n    return 4 * side_length\n", "from typing import List\n## main.py\n\ndef square_perimeter(side_length: (int, float)) -> (int, float):\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n\n    Args:\n        side_length (int or float): The length of a side of the square.\n\n    Returns:\n        int or float: The perimeter of the square.\n\n    Raises:\n        ValueError: If the side length is not a positive number.\n    \"\"\"\n    if not isinstance(side_length, (int, float)) or side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    \n    perimeter = 4 * side_length\n    return perimeter\n", "from typing import List\n## main.py\n\ndef square_perimeter(side_length: (int, float)) -> (int, float):\n    \"\"\"\n    Calculate the perimeter of a square given the side length.\n\n    Args:\n        side_length (int, float): The length of a side of the square.\n\n    Returns:\n        int, float: The perimeter of the square.\n\n    Raises:\n        ValueError: If the side length is zero or negative.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Error: Side length must be positive\")\n    \n    return 4 * side_length\n", "from typing import List\n## main.py\n\nimport typing\n\ndef square_perimeter(side_length: float) -> typing.Union[int, str]:\n    \"\"\"\n    Calculate the perimeter of a square given the side length.\n\n    Args:\n        side_length (float): The length of a side of the square.\n\n    Returns:\n        int: The perimeter of the square as an integer.\n        str: An error message if the input is invalid.\n    \"\"\"\n    # Validate the input\n    if side_length <= 0:\n        return \"Side length must be a positive number.\"\n\n    # Calculate the perimeter\n    perimeter = 4 * side_length\n\n    # Return the perimeter as an integer\n    return int(perimeter)\n", "from typing import List\n## main.py\n\nimport typing\n\ndef square_perimeter(side_length: float) -> typing.Optional[float]:\n    \"\"\"\n    Calculate the perimeter of a square given the side length.\n\n    Args:\n        side_length (float): The length of a side of the square.\n\n    Returns:\n        Optional[float]: The perimeter of the square if the side length is positive, otherwise None.\n    \"\"\"\n    if side_length > 0:\n        return 4 * side_length\n    else:\n        return None\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that calculates the perimeter of a square given its side length. The function should handle edge cases such as zero or negative side lengths gracefully. This is a fundamental mathematical function that should be both accurate and efficient.\nrequirement pool:\n- The main code should accurately calculate the perimeter of a square.\n- The function should handle edge cases such as zero or negative side lengths gracefully.\n- The function should be optimized for performance to handle large inputs efficiently.\n- The user interface should be simple and intuitive for easy user interaction.\n- The product should be compatible with a variety of devices and platforms.\nWe will implement the function `square_perimeter` using Python, ensuring it handles edge cases such as zero or negative side lengths gracefully. The function will use a simple mathematical formula to calculate the perimeter of a square given its side length.\n", "requirement analysis:\nThe function should take a single input, the side length of a square, and return the perimeter. It should handle edge cases such as zero or negative side lengths by returning an error or a message indicating invalid input. The function should be efficient and fast to handle typical inputs without performance issues.\nrequirement pool:\n- The main code should accurately calculate the perimeter of a square given its side length.\n- The function should gracefully handle invalid inputs like zero or negative side lengths.\n- Ensure the function is optimized for performance to handle large inputs efficiently.\n- Provide clear and concise documentation on how to use the function.\n- Include unit tests to verify the correctness of the function.\nWe will implement the function using a simple and straightforward approach. The function will take a single input, the side length of a square, and return the perimeter. We will use a try-except block to handle invalid inputs gracefully.\n", "requirement analysis:\nThe function should take a single input, the side length of a square, and return the perimeter. It should handle edge cases such as zero or negative side lengths by returning an error message or a special value indicating invalid input. The function should be simple and efficient, suitable for integration into larger applications.\nrequirement pool:\n- The main code should be concise and readable.\n- The function should handle invalid inputs gracefully.\n- Ensure the function is optimized for performance.\n- Include detailed documentation for easy integration.\n- Implement unit tests to ensure reliability.\nWe will implement the function using a simple and straightforward approach. The function will take a single input, the side length of a square, and return the perimeter. We will use a try-except block to handle invalid inputs gracefully, such as zero or negative side lengths, by returning an error message or a special value indicating invalid input.\n", "requirement analysis:\nThe function should take a single input, the side length of a square, and return the perimeter. It should handle edge cases such as zero or negative side lengths by returning an error or a message indicating invalid input. The function should be efficient and fast to handle typical inputs without performance issues.\nrequirement pool:\n- The main code should accurately calculate the perimeter of a square given its side length.\n- The function should gracefully handle invalid inputs like zero or negative side lengths.\n- Ensure the function is optimized for performance to handle large inputs efficiently.\n- Provide clear and concise documentation on how to use the function.\n- Include error handling to provide meaningful messages for invalid inputs.\nWe will use a simple and straightforward approach to implement the function. The function will take a single input, the side length of a square, and return the perimeter. We will use a try-except block to handle invalid inputs gracefully.\n", "requirement analysis:\nThe function should take a single input, a positive number representing the side length of a square. It should return the perimeter of the square, which is four times the side length. The function should handle edge cases such as zero or negative inputs gracefully by returning an error message or a special value indicating invalid input.\nrequirement pool:\n- The function should take a single input and return the perimeter of a square.\n- The function should handle edge cases such as zero or negative side lengths gracefully.\n- Ensure the function is efficient and can handle large inputs.\n- Provide clear and user-friendly error messages for invalid inputs.\nWe will implement the function `square_perimeter` in Python. The function will take a single input, a positive number representing the side length of a square. It will return the perimeter of the square, which is four times the side length. To handle edge cases such as zero or negative inputs gracefully, we will include input validation to ensure the input is a positive number.\n", "requirement analysis:\nThe primary requirement is to create a function that calculates the perimeter of a square given its side length. The function should handle edge cases such as zero or negative side lengths gracefully. The product should be user-friendly and efficient, providing a seamless experience for the user.\nrequirement pool:\n- Implement the function to calculate the perimeter of a square.\n- Ensure the function handles zero and negative side lengths gracefully.\n- Optimize the function for performance to handle large inputs efficiently.\n- Develop a user-friendly interface for inputting the side length.\n- Include error handling for invalid inputs.\nWe will implement the function using Python, leveraging its simplicity and readability. The function will take a single argument, the side length of a square, and return the perimeter. We will include error handling to manage invalid inputs such as zero or negative values.\n", "requirement analysis:\nThe requirement is to create a function that calculates the perimeter of a square given its side length. The function should handle edge cases such as zero or negative side lengths gracefully. This is a basic requirement that should be straightforward to implement. The function should return the perimeter as an integer or float based on the input.\nrequirement pool:\n- The main code should calculate the perimeter of a square given its side length.\n- The function should handle edge cases such as zero or negative side lengths gracefully.\n- The function should return the perimeter as an integer or float based on the input.\n- The function should be optimized for performance to handle large inputs efficiently.\n- The function should be user-friendly and easy to understand.\nTo implement the function `square_perimeter` that calculates the perimeter of a square given its side length, we will use a simple and straightforward approach. The function will validate the input to ensure it is a positive number, and then it will calculate the perimeter using the formula `4 * side_length`. The result will be returned as an integer or float based on the input.\n", "requirement analysis:\nThe function should be simple and easy to use, capable of handling basic square perimeter calculations. It should also gracefully handle edge cases such as zero or negative side lengths. The product should be efficient and fast to ensure a good user experience.\nrequirement pool:\n- The main code should be simple and easy to understand.\n- The function should handle edge cases like zero or negative side lengths gracefully.\n- Ensure the function is efficient and fast.\n- Include user-friendly error messages for invalid inputs.\n- Optimize the function for performance to handle large inputs efficiently.\nWe will implement the function `square_perimeter` in Python. The function will take an integer or float as input, representing the side length of a square. It will return the perimeter of the square, which is calculated as 4 times the side length. The function will include error handling to manage cases where the input is zero or negative, returning an error message in such scenarios.\n", "requirement analysis:\nThe function should be simple and easy to use, capable of handling basic perimeter calculations for squares. It should also gracefully handle edge cases such as zero or negative side lengths. The product should be efficient and fast, ensuring a seamless user experience.\nrequirement pool:\n- The main code should accurately calculate the perimeter of a square given its side length.\n- The function should gracefully handle zero or negative side lengths.\n- Implement optimizations for performance to handle large inputs efficiently.\n- Enhance user interface for better usability and aesthetics.\n- Include features for advanced users, such as unit customization.\nWe will implement the function `square_perimeter` using Python, ensuring it handles edge cases gracefully and is efficient. We will use basic arithmetic operations to calculate the perimeter of a square based on its side length. The function will check for valid input and return an error message or result accordingly.\n", "requirement analysis:\nThe requirement is to create a function that calculates the perimeter of a square given its side length. The function should handle edge cases such as zero or negative side lengths gracefully. The function should be efficient and easy to use.\nrequirement pool:\n- The main code should accurately calculate the perimeter of a square.\n- The function should handle zero and negative side lengths gracefully.\n- The function should be optimized for performance to handle large inputs efficiently.\n- The user interface should be simple and intuitive.\n- The function should be documented clearly for user understanding.\nWe will implement the function `square_perimeter` in Python. The function will take a single argument, `side_length`, which represents the side length of a square. The function will check if the side length is valid (positive), and if so, it will calculate the perimeter using the formula `4 * side_length`. If the side length is zero or negative, the function will return `None` to indicate invalid input.\n"], "test": ["def check(square_perimeter):\n\tassert square_perimeter(10)==40", "def check(square_perimeter):\n\tassert square_perimeter(5)==20", "def check(square_perimeter):\n\tassert square_perimeter(4)==16", "def check(square_perimeter):\n\tassert square_perimeter(8) == 32", "def check(square_perimeter):\n\tassert square_perimeter(12) == 48", "def check(square_perimeter):\n\tassert square_perimeter(15) == 60", "def check(square_perimeter):\n\tassert square_perimeter(14) == 56", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(13) == 52", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(11) == 44", "def check(square_perimeter):\n\tassert square_perimeter(5) == 20", "def check(square_perimeter):\n\tassert square_perimeter(11) == 44", "def check(square_perimeter):\n\tassert square_perimeter(10) == 40", "def check(square_perimeter):\n\tassert square_perimeter(14) == 56", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(11) == 44", "def check(square_perimeter):\n\tassert square_perimeter(15) == 60", "def check(square_perimeter):\n\tassert square_perimeter(8) == 32", "def check(square_perimeter):\n\tassert square_perimeter(12) == 48", "def check(square_perimeter):\n\tassert square_perimeter(15) == 60", "def check(square_perimeter):\n\tassert square_perimeter(11) == 44", "def check(square_perimeter):\n\tassert square_perimeter(15) == 60", "def check(square_perimeter):\n\tassert square_perimeter(8) == 32", "def check(square_perimeter):\n\tassert square_perimeter(11) == 44", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(10) == 40", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(11) == 44", "def check(square_perimeter):\n\tassert square_perimeter(15) == 60", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(13) == 52", "def check(square_perimeter):\n\tassert square_perimeter(5) == 20", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(5) == 20", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(4) == 16", "def check(square_perimeter):\n\tassert square_perimeter(5) == 20", "def check(square_perimeter):\n\tassert square_perimeter(10) == 40", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(10) == 40", "def check(square_perimeter):\n\tassert square_perimeter(2) == 8", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(2) == 8", "def check(square_perimeter):\n\tassert square_perimeter(1) == 4", "def check(square_perimeter):\n\tassert square_perimeter(4) == 16", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(4) == 16", "def check(square_perimeter):\n\tassert square_perimeter(4) == 16", "def check(square_perimeter):\n\tassert square_perimeter(8) == 32", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(8) == 32", "def check(square_perimeter):\n\tassert square_perimeter(4) == 16", "def check(square_perimeter):\n\tassert square_perimeter(10) == 40", "def check(square_perimeter):\n\tassert square_perimeter(8) == 32", "def check(square_perimeter):\n\tassert square_perimeter(4) == 16", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(2) == 8", "def check(square_perimeter):\n\tassert square_perimeter(2) == 8", "def check(square_perimeter):\n\tassert square_perimeter(4) == 16", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(1) == 4", "def check(square_perimeter):\n\tassert square_perimeter(2) == 8", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(4) == 16", "def check(square_perimeter):\n\tassert square_perimeter(3) == 12", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(2) == 8", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(1) == 4", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(2) == 8", "def check(square_perimeter):\n\tassert square_perimeter(5) == 20", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(8) == 32", "def check(square_perimeter):\n\tassert square_perimeter(1) == 4", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(3) == 12", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(1) == 4", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(5) == 20", "def check(square_perimeter):\n\tassert square_perimeter(5) == 20", "def check(square_perimeter):\n\tassert square_perimeter(4) == 16", "def check(square_perimeter):\n\tassert square_perimeter(8) == 32", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(3) == 12", "def check(square_perimeter):\n\tassert square_perimeter(8) == 32", "def check(square_perimeter):\n\tassert square_perimeter(2) == 8", "def check(square_perimeter):\n\tassert square_perimeter(2) == 8"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\nimport typing\n\ndef square_perimeter(side_length: float) -> typing.Optional[float]:\n    \"\"\"\n    Calculate the perimeter of a square given the side length.\n\n    Args:\n        side_length (float): The length of a side of the square.\n\n    Returns:\n        Optional[float]: The perimeter of the square if the side length is positive, otherwise None.\n    \"\"\"\n    if side_length > 0:\n        return 4 * side_length\n    else:\n        return None\n", "passed": true, "pass": true, "pass_num": 10, "round": 451, "mutate_method": "add_1_sentence_at_end", "parent_index": 10}
