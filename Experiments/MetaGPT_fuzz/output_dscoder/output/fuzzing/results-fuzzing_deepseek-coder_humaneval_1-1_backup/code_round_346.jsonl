{"task_id": "HumanEval/161", "prompt": "def solve(s):\t\n'''You are given a string s.  \n    if s[i] is a letter, switch its case from uppercase to lowercase or vice versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n\nExamples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    '''", "entry_point": "solve", "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "test": ["def check(solve):\n\tassert solve(\"#ryv@$l*\") == '#RYV@$L*'", "def check(solve):\n\tassert solve(\"BjdhsNs\") == 'bJDHSnS'", "def check(solve):\n\tassert solve(\"$883%3/\") == '/3%388$'", "def check(solve):\n\tassert solve(\"QnNQfv\") == 'qNnqFV'", "def check(solve):\n\tassert solve(\"o3LWaIl4\") == 'O3lwAiL4'", "def check(solve):\n\tassert solve(\"zt*#m&v\") == 'ZT*#M&V'", "def check(solve):\n\tassert solve(\"wDgT\") == 'WdGt'", "def check(solve):\n\tassert solve(\"ab\") == \"AB\"", "def check(solve):\n\tassert solve(\"=E!NyLi\") == '=e!nYlI'", "def check(solve):\n\tassert solve(\"jZVuQ\") == 'JzvUq'", "def check(solve):\n\tassert solve(\"UKg@xpM~G\") == 'ukG@XPm~g'", "def check(solve):\n\tassert solve(\"%cCcq#\") == '%CcCQ#'", "def check(solve):\n\tassert solve(\"++A^/?xV\") == '++a^/?Xv'", "def check(solve):\n\tassert solve(\"7_%\") == '%_7'", "def check(solve):\n\tassert solve(\"qon\") == 'QON'", "def check(solve):\n\tassert solve(\"giiqdy\") == 'GIIQDY'", "def check(solve):\n\tassert solve(\"~@8%\") == '%8@~'", "def check(solve):\n\tassert solve(\"^@B\") == '^@b'", "def check(solve):\n\tassert solve(\"?UGciW\") == '?ugCIw'", "def check(solve):\n\tassert solve(\"17000556\") == '65500071'", "def check(solve):\n\tassert solve(\"nfl*&=+$@\") == 'NFL*&=+$@'", "def check(solve):\n\tassert solve(\"wSdcA\") == 'WsDCa'", "def check(solve):\n\tassert solve(\"luG9*?%\") == 'LUg9*?%'", "def check(solve):\n\tassert solve(\"5$0!@\") == '@!0$5'", "def check(solve):\n\tassert solve(\"sxFaMa\") == 'SXfAmA'", "def check(solve):\n\tassert solve(\"?ao\") == '?AO'", "def check(solve):\n\tassert solve(\"k&!_\") == 'K&!_'", "def check(solve):\n\tassert solve(\"-|MSfK\") == '-|msFk'", "def check(solve):\n\tassert solve(\"5%@\") == '@%5'", "def check(solve):\n\tassert solve(\"=epet*orq\") == '=EPET*ORQ'", "def check(solve):\n\tassert solve(\"^dHUM-y\") == '^Dhum-Y'", "def check(solve):\n\tassert solve(\"npKwSAD\") == 'NPkWsad'", "def check(solve):\n\tassert solve(\"55=9/9\") == '9/9=55'", "def check(solve):\n\tassert solve(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:", "def check(solve):\n\tassert solve(\"*^JOyeSI\") == '*^joYEsi'", "def check(solve):\n\tassert solve(\"yzzdc\") == 'YZZDC'", "def check(solve):\n\tassert solve(\"i!X&/T\") == 'I!x&/t'", "def check(solve):\n\tassert solve(\"mlB-*F\") == 'MLb-*f'", "def check(solve):\n\tassert solve(\"856\") == '658'", "def check(solve):\n\tassert solve(\"ifafP-OoTK%\") == 'IFAFp-oOtk%'", "def check(solve):\n\tassert solve(\"Xug\") == 'xUG'", "def check(solve):\n\tassert solve(\"~2~@0\") == '0@~2~'", "def check(solve):\n\tassert solve(\"UMm:m\") == 'umM:M'", "def check(solve):\n\tassert solve(\"6812832\") == '2382186'", "def check(solve):\n\tassert solve(\"QDF:CXB\") == 'qdf:cxb'", "def check(solve):\n\tassert solve(\"5-=@&*\") == '*&@=-5'", "def check(solve):\n\tassert solve(\"761~^_%~4\") == '4~%_^~167'", "def check(solve):\n\tassert solve(\"#$a^D\") == \"#$A^d\"", "def check(solve):\n\tassert solve(\"4hzTAP_e\") == '4HZtap_E'", "def check(solve):\n\tassert solve(\"2058786\") == '6878502'", "def check(solve):\n\tassert solve(\"yErHfPuhE\") == 'YeRhFpUHe'", "def check(solve):\n\tassert solve(\"*u~\") == '*U~'", "def check(solve):\n\tassert solve(\"g*chm\") == 'G*CHM'", "def check(solve):\n\tassert solve(\"enxhq\") == 'ENXHQ'", "def check(solve):\n\tassert solve(\"ctpx\") == 'CTPX'", "def check(solve):\n\tassert solve(\"j$&Wd\") == 'J$&wD'", "def check(solve):\n\tassert solve(\"ji$rpiwCJ\") == 'JI$RPIWcj'", "def check(solve):\n\tassert solve(\"cjG~zXx\") == 'CJg~ZxX'", "def check(solve):\n\tassert solve(\"dgksb\") == 'DGKSB'", "def check(solve):\n\tassert solve(\"827_~+=6:\") == ':6=+~_728'", "def check(solve):\n\tassert solve(\"vr_d$kBQ\") == 'VR_D$Kbq'", "def check(solve):\n\tassert solve(\"389627754\") == '457726983'", "def check(solve):\n\tassert solve(\"+:#\") == '#:+'", "def check(solve):\n\tassert solve(\"prytYOIw\") == 'PRYTyoiW'", "def check(solve):\n\tassert solve(\"+1/05*!?+\") == '+?!*50/1+'", "def check(solve):\n\tassert solve(\"$u%lZTsz\") == '$U%LztSZ'", "def check(solve):\n\tassert solve(\"qyAKc\") == 'QYakC'", "def check(solve):\n\tassert solve(\"/@-\") == '-@/'", "def check(solve):\n\tassert solve(\"iiyw\") == 'IIYW'", "def check(solve):\n\tassert solve(\"#a@C\") == \"#A@c\"", "def check(solve):\n\tassert solve(\"49623838\") == '83832694'", "def check(solve):\n\tassert solve(\"u:kx!*\") == 'U:KX!*'", "def check(solve):\n\tassert solve(\"gsl\") == 'GSL'", "def check(solve):\n\tassert solve(\"jlycko\") == 'JLYCKO'", "def check(solve):\n\tassert solve(\"MUSKIE\") == 'muskie'", "def check(solve):\n\tassert solve(\":TDr\") == ':tdR'", "def check(solve):\n\tassert solve(\"bkd\") == 'BKD'", "def check(solve):\n\tassert solve(\"DNOZ2XKDMJZSwC$\") == 'dnoz2xkdmjzsWc$'", "def check(solve):\n\tassert solve(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.", "def check(solve):\n\tassert solve(\"n$tkw\") == 'N$TKW'", "def check(solve):\n\tassert solve(\"48954\") == '45984'", "def check(solve):\n\tassert solve(\"LlWj5FD\") == 'lLwJ5fd'", "def check(solve):\n\tassert solve(\"AsDf\") == \"aSdF\"", "def check(solve):\n\tassert solve(\"@!93/5**@\") == '@**5/39!@'", "def check(solve):\n\tassert solve(\"VmVDPkI\") == 'vMvdpKi'", "def check(solve):\n\tassert solve(\"mOn\") == 'MoN'", "def check(solve):\n\tassert solve(\"059646105\") == '501646950'", "def check(solve):\n\tassert solve(\"huo^\") == 'HUO^'", "def check(solve):\n\tassert solve(\"ghgnw\") == 'GHGNW'", "def check(solve):\n\tassert solve(\"gne\") == 'GNE'", "def check(solve):\n\tassert solve(\"~~%==41\") == '14==%~~'", "def check(solve):\n\tassert solve(\"%_uoz/#?L\") == '%_UOZ/#?l'", "def check(solve):\n\tassert solve(\"w@l+zd\") == 'W@L+ZD'", "def check(solve):\n\tassert solve(\"1234\") == \"4321\"", "def check(solve):\n\tassert solve(\"EsvNrg\") == 'eSVnRG'", "def check(solve):\n\tassert solve(\"pstVx\") == 'PSTvX'", "def check(solve):\n\tassert solve(\"kLA#y:NC\") == 'Kla#Y:nc'", "def check(solve):\n\tassert solve(\"ePOjFeuu\") == 'EpoJfEUU'", "def check(solve):\n\tassert solve(\"GPJae+?*a\") == 'gpjAE+?*A'", "def check(solve):\n\tassert solve(\"Uc$$xCSQ0cN~\") == 'uC$$Xcsq0Cn~'", "def check(solve):\n\tassert solve(\"gtvtsr\") == 'GTVTSR'", "def check(solve):\n\tassert solve(\"#AsdfW^45\") == \"#aSDFw^45\"", "def check(solve):\n\tassert solve(\"6971168\") == '8611796'", "def check(solve):\n\tassert solve(\"??rwE\") == '??RWe'", "def check(solve):\n\tassert solve(\"HMYxK\") == 'hmyXk'", "def check(solve):\n\tassert solve(\"gcflna\") == 'GCFLNA'", "def check(solve):\n\tassert solve(\"~+/#\") == '#/+~'", "def check(solve):\n\tassert solve(\"glgh\") == 'GLGH'", "def check(solve):\n\tassert solve(\"?gn~\") == '?GN~'", "def check(solve):\n\tassert solve(\"73713138\") == '83131737'", "def check(solve):\n\tassert solve(\"54138\") == '83145'", "def check(solve):\n\tassert solve(\"oGzZO!NOb@Lty\") == 'OgZzo!noB@lTY'", "def check(solve):\n\tassert solve(\"Q&LKD*BmV\") == 'q&lkd*bMv'", "def check(solve):\n\tassert solve(\"13431299\") == '99213431'", "def check(solve):\n\tassert solve(\"~/uc/@p^h\") == '~/UC/@P^H'", "def check(solve):\n\tassert solve(\"4kqV&&/6+Lc\") == '4KQv&&/6+lC'", "def check(solve):\n\tassert solve(\"fqY\") == 'FQy'", "def check(solve):\n\tassert solve(\"|n*e~bx-\") == '|N*E~BX-'", "def check(solve):\n\tassert solve(\"Pj+3w:31N!s6\") == 'pJ+3W:31n!S6'", "def check(solve):\n\tassert solve(\"++skzZ\") == '++SKZz'", "def check(solve):\n\tassert solve(\"%kmlC*s\") == '%KMLc*S'", "def check(solve):\n\tassert solve(\"232948\") == '849232'", "def check(solve):\n\tassert solve(\"613\") == '316'", "def check(solve):\n\tassert solve(\"!tmFhu\") == '!TMfHU'", "def check(solve):\n\tassert solve(\"+fDs:f\") == '+FdS:F'", "def check(solve):\n\tassert solve(\"XAdrNtUNr\") == 'xaDRnTunR'", "def check(solve):\n\tassert solve(\"cqiau\") == 'CQIAU'", "def check(solve):\n\tassert solve(\"340988\") == '889043'"], "test_case_list": ["assert solve(\"#ryv@$l*\") == '#RYV@$L*'", "assert solve(\"BjdhsNs\") == 'bJDHSnS'", "assert solve(\"$883%3/\") == '/3%388$'", "assert solve(\"QnNQfv\") == 'qNnqFV'", "assert solve(\"o3LWaIl4\") == 'O3lwAiL4'", "assert solve(\"zt*#m&v\") == 'ZT*#M&V'", "assert solve(\"wDgT\") == 'WdGt'", "assert solve(\"ab\") == \"AB\"", "assert solve(\"=E!NyLi\") == '=e!nYlI'", "assert solve(\"jZVuQ\") == 'JzvUq'", "assert solve(\"UKg@xpM~G\") == 'ukG@XPm~g'", "assert solve(\"%cCcq#\") == '%CcCQ#'", "assert solve(\"++A^/?xV\") == '++a^/?Xv'", "assert solve(\"7_%\") == '%_7'", "assert solve(\"qon\") == 'QON'", "assert solve(\"giiqdy\") == 'GIIQDY'", "assert solve(\"~@8%\") == '%8@~'", "assert solve(\"^@B\") == '^@b'", "assert solve(\"?UGciW\") == '?ugCIw'", "assert solve(\"17000556\") == '65500071'", "assert solve(\"nfl*&=+$@\") == 'NFL*&=+$@'", "assert solve(\"wSdcA\") == 'WsDCa'", "assert solve(\"luG9*?%\") == 'LUg9*?%'", "assert solve(\"5$0!@\") == '@!0$5'", "assert solve(\"sxFaMa\") == 'SXfAmA'", "assert solve(\"?ao\") == '?AO'", "assert solve(\"k&!_\") == 'K&!_'", "assert solve(\"-|MSfK\") == '-|msFk'", "assert solve(\"5%@\") == '@%5'", "assert solve(\"=epet*orq\") == '=EPET*ORQ'", "assert solve(\"^dHUM-y\") == '^Dhum-Y'", "assert solve(\"npKwSAD\") == 'NPkWsad'", "assert solve(\"55=9/9\") == '9/9=55'", "assert solve(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:", "assert solve(\"*^JOyeSI\") == '*^joYEsi'", "assert solve(\"yzzdc\") == 'YZZDC'", "assert solve(\"i!X&/T\") == 'I!x&/t'", "assert solve(\"mlB-*F\") == 'MLb-*f'", "assert solve(\"856\") == '658'", "assert solve(\"ifafP-OoTK%\") == 'IFAFp-oOtk%'", "assert solve(\"Xug\") == 'xUG'", "assert solve(\"~2~@0\") == '0@~2~'", "assert solve(\"UMm:m\") == 'umM:M'", "assert solve(\"6812832\") == '2382186'", "assert solve(\"QDF:CXB\") == 'qdf:cxb'", "assert solve(\"5-=@&*\") == '*&@=-5'", "assert solve(\"761~^_%~4\") == '4~%_^~167'", "assert solve(\"#$a^D\") == \"#$A^d\"", "assert solve(\"4hzTAP_e\") == '4HZtap_E'", "assert solve(\"2058786\") == '6878502'", "assert solve(\"yErHfPuhE\") == 'YeRhFpUHe'", "assert solve(\"*u~\") == '*U~'", "assert solve(\"g*chm\") == 'G*CHM'", "assert solve(\"enxhq\") == 'ENXHQ'", "assert solve(\"ctpx\") == 'CTPX'", "assert solve(\"j$&Wd\") == 'J$&wD'", "assert solve(\"ji$rpiwCJ\") == 'JI$RPIWcj'", "assert solve(\"cjG~zXx\") == 'CJg~ZxX'", "assert solve(\"dgksb\") == 'DGKSB'", "assert solve(\"827_~+=6:\") == ':6=+~_728'", "assert solve(\"vr_d$kBQ\") == 'VR_D$Kbq'", "assert solve(\"389627754\") == '457726983'", "assert solve(\"+:#\") == '#:+'", "assert solve(\"prytYOIw\") == 'PRYTyoiW'", "assert solve(\"+1/05*!?+\") == '+?!*50/1+'", "assert solve(\"$u%lZTsz\") == '$U%LztSZ'", "assert solve(\"qyAKc\") == 'QYakC'", "assert solve(\"/@-\") == '-@/'", "assert solve(\"iiyw\") == 'IIYW'", "assert solve(\"#a@C\") == \"#A@c\"", "assert solve(\"49623838\") == '83832694'", "assert solve(\"u:kx!*\") == 'U:KX!*'", "assert solve(\"gsl\") == 'GSL'", "assert solve(\"jlycko\") == 'JLYCKO'", "assert solve(\"MUSKIE\") == 'muskie'", "assert solve(\":TDr\") == ':tdR'", "assert solve(\"bkd\") == 'BKD'", "assert solve(\"DNOZ2XKDMJZSwC$\") == 'dnoz2xkdmjzsWc$'", "assert solve(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.", "assert solve(\"n$tkw\") == 'N$TKW'", "assert solve(\"48954\") == '45984'", "assert solve(\"LlWj5FD\") == 'lLwJ5fd'", "assert solve(\"AsDf\") == \"aSdF\"", "assert solve(\"@!93/5**@\") == '@**5/39!@'", "assert solve(\"VmVDPkI\") == 'vMvdpKi'", "assert solve(\"mOn\") == 'MoN'", "assert solve(\"059646105\") == '501646950'", "assert solve(\"huo^\") == 'HUO^'", "assert solve(\"ghgnw\") == 'GHGNW'", "assert solve(\"gne\") == 'GNE'", "assert solve(\"~~%==41\") == '14==%~~'", "assert solve(\"%_uoz/#?L\") == '%_UOZ/#?l'", "assert solve(\"w@l+zd\") == 'W@L+ZD'", "assert solve(\"1234\") == \"4321\"", "assert solve(\"EsvNrg\") == 'eSVnRG'", "assert solve(\"pstVx\") == 'PSTvX'", "assert solve(\"kLA#y:NC\") == 'Kla#Y:nc'", "assert solve(\"ePOjFeuu\") == 'EpoJfEUU'", "assert solve(\"GPJae+?*a\") == 'gpjAE+?*A'", "assert solve(\"Uc$$xCSQ0cN~\") == 'uC$$Xcsq0Cn~'", "assert solve(\"gtvtsr\") == 'GTVTSR'", "assert solve(\"#AsdfW^45\") == \"#aSDFw^45\"", "assert solve(\"6971168\") == '8611796'", "assert solve(\"??rwE\") == '??RWe'", "assert solve(\"HMYxK\") == 'hmyXk'", "assert solve(\"gcflna\") == 'GCFLNA'", "assert solve(\"~+/#\") == '#/+~'", "assert solve(\"glgh\") == 'GLGH'", "assert solve(\"?gn~\") == '?GN~'", "assert solve(\"73713138\") == '83131737'", "assert solve(\"54138\") == '83145'", "assert solve(\"oGzZO!NOb@Lty\") == 'OgZzo!noB@lTY'", "assert solve(\"Q&LKD*BmV\") == 'q&lkd*bMv'", "assert solve(\"13431299\") == '99213431'", "assert solve(\"~/uc/@p^h\") == '~/UC/@P^H'", "assert solve(\"4kqV&&/6+Lc\") == '4KQv&&/6+lC'", "assert solve(\"fqY\") == 'FQy'", "assert solve(\"|n*e~bx-\") == '|N*E~BX-'", "assert solve(\"Pj+3w:31N!s6\") == 'pJ+3W:31n!S6'", "assert solve(\"++skzZ\") == '++SKZz'", "assert solve(\"%kmlC*s\") == '%KMLc*S'", "assert solve(\"232948\") == '849232'", "assert solve(\"613\") == '316'", "assert solve(\"!tmFhu\") == '!TMfHU'", "assert solve(\"+fDs:f\") == '+FdS:F'", "assert solve(\"XAdrNtUNr\") == 'xaDRnTunR'", "assert solve(\"cqiau\") == 'CQIAU'", "assert solve(\"340988\") == '889043'"], "nl": "You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    ", "func": "def solve(s):", "examples": "Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    ", "completions": ["from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function takes a string as input and performs the following operations:\n    1. Checks if the string contains any letters.\n    2. If letters exist, it switches the case of each letter.\n    3. If no letters exist, it reverses the string.\n    \n    Args:\n        s (str): The input string.\n    \n    Returns:\n        str: The modified string based on the presence of letters.\n    \"\"\"\n    if any(char.isalpha() for char in s):\n        # If there are letters, switch the case of each letter\n        return ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        # If no letters, reverse the string\n        return s[::-1]\n", "from typing import List\n## main.py\n\nimport string\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function takes a string as input and performs the following operations:\n    1. If the string contains any letters, it switches the case of each letter.\n    2. If the string does not contain any letters, it reverses the string.\n    \n    Args:\n        s (str): The input string.\n    \n    Returns:\n        str: The modified string based on the presence of letters.\n    \"\"\"\n    if any(char.isalpha() for char in s):\n        # Switch case for each letter in the string\n        return ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        # Reverse the string\n        return s[::-1]\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    Solves the problem by iterating through each character in the input string,\n    switching its case if it's a letter. If no letters are found, the function\n    will reverse the string.\n    \n    Args:\n        s (str): The input string.\n    \n    Returns:\n        str: The processed string based on the logic described.\n    \"\"\"\n    result = []\n    has_letters = False\n\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n\n    if not has_letters:\n        return s[::-1]\n\n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    Solves the problem by checking if the string contains any letters.\n    If no letters are found, it reverses the string.\n    If letters are found, it switches the case of each letter.\n    \n    Args:\n        s (str): The input string.\n    \n    Returns:\n        str: The processed string based on the presence of letters.\n    \"\"\"\n    if any(char.isalpha() for char in s):\n        # If there are letters in the string, switch their case\n        return ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        # If there are no letters, reverse the string\n        return s[::-1]\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    Solves the problem by checking if the string contains any letters.\n    If there are no letters, it reverses the string.\n    If there are letters, it switches their case.\n    \n    Args:\n        s (str): The input string.\n    \n    Returns:\n        str: The processed string based on the presence of letters.\n    \"\"\"\n    if any(char.isalpha() for char in s):\n        # If there are letters, switch their case\n        return ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        # If there are no letters, reverse the string\n        return s[::-1]\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function checks if the input string contains any alphabetic characters.\n    If no alphabetic characters are found, it reverses the string.\n    If alphabetic characters are found, it switches the cases of the letters.\n    \n    Args:\n        s (str): The input string to be processed.\n    \n    Returns:\n        str: The processed string based on the presence of alphabetic characters.\n    \"\"\"\n    if any(char.isalpha() for char in s):\n        # If there are alphabetic characters, switch the cases\n        return ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        # If there are no alphabetic characters, reverse the string\n        return s[::-1]\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function takes a string as input and returns a new string with switched cases\n    or reversed if no letters are found.\n    \n    Args:\n        s (str): The input string.\n    \n    Returns:\n        str: A new string with switched cases or reversed if no letters are found.\n    \"\"\"\n    if not any(char.isalpha() for char in s):\n        # If there are no letters in the string, reverse the string\n        return s[::-1]\n    else:\n        # If there are letters in the string, switch their cases\n        result = []\n        for char in s:\n            if char.isupper():\n                result.append(char.lower())\n            elif char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char)\n        return ''.join(result)\n", "from typing import List\n## main.py\n\nimport string\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function takes a string as input and performs the following operations:\n    1. Checks if the string contains any letters.\n    2. If letters exist, it switches the case of each letter.\n    3. If no letters are found, it reverses the string.\n    \n    Args:\n        s (str): The input string.\n    \n    Returns:\n        str: The modified string based on the presence of letters.\n    \"\"\"\n    # Check if the string contains any letters\n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        # Switch the case of each letter\n        result = \"\"\n        for char in s:\n            if char.isupper():\n                result += char.lower()\n            elif char.islower():\n                result += char.upper()\n            else:\n                result += char\n    else:\n        # Reverse the string\n        result = s[::-1]\n    \n    return result\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function takes a string as input and returns a new string with the case of each letter switched.\n    If the string does not contain any letters, it will return the reversed string.\n    \n    Args:\n        s (str): The input string.\n    \n    Returns:\n        str: A new string with the case of each letter switched, or the reversed string if no letters are found.\n    \"\"\"\n    # Check if the string contains any letters\n    has_letters = any(c.isalpha() for c in s)\n    \n    if not has_letters:\n        # If no letters are found, return the reversed string\n        return s[::-1]\n    \n    # Initialize an empty result string\n    result = []\n    \n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is a letter\n        if char.isalpha():\n            # Switch case if it's a letter\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            # Append the character to the result string as is\n            result.append(char)\n    \n    # Join the result list into a string and return it\n    return ''.join(result)\n", "from typing import List\n## main.py\n\nimport string\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function takes a string as input and performs the following operations:\n    1. If the string contains any letters, it switches the case of each letter.\n    2. If the string does not contain any letters, it reverses the string.\n    \n    Args:\n        s (str): The input string.\n    \n    Returns:\n        str: The modified string based on the presence of letters.\n    \"\"\"\n    if any(char.isalpha() for char in s):\n        # Switch case for each letter in the string\n        return ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        # Reverse the string\n        return s[::-1]\n"], "plans": ["requirement analysis:\nThe function 'solve' needs to handle strings with mixed characters, including letters and non-letters. It should switch the case of letters and reverse the string if there are no letters. The product should be user-friendly and visually appealing.\nrequirement pool:\n- Implement a function to switch the case of letters in a string\n- Ensure the function can handle strings with no letters and reverse them\n- Design a user-friendly interface for easy interaction\n- Create a visually appealing UI to enhance user experience\n- Test the function with various strings to ensure it works correctly\nWe will implement the function 'solve' by using Python's built-in string manipulation methods and a simple conditional check. The function will iterate through each character in the input string, switch its case if it's a letter, and reverse the string if there are no letters.\n", "requirement analysis:\nThe function 'solve' needs to handle strings with mixed characters, including letters and non-letters. It should switch the case of letters and reverse the string if there are no letters. The product should be user-friendly and visually appealing.\nrequirement pool:\n- Implement a function that can switch the case of letters in a string\n- Ensure the function can reverse the string if it contains no letters\n- Design a user-friendly interface for easy interaction\n- Create a visually appealing UI to enhance user experience\n- Test the application for robustness and edge cases\nTo implement the function 'solve' as described, we will use Python's built-in string manipulation methods. The function will check each character in the input string. If the character is a letter, it will switch its case. If there are no letters in the string, it will reverse the string. This approach leverages Python's simplicity and readability.\n", "requirement analysis:\nThe function 'solve' needs to handle different cases based on the input string. It should switch the case of letters and keep non-letter characters as they are. If there are no letters in the string, it should reverse the string. This functionality is crucial for creating a versatile string manipulation tool.\nrequirement pool:\n- Implement the logic to switch the case of letters in the string.\n- Handle the case where the string contains no letters by reversing it.\n- Ensure the function is efficient and handles edge cases, such as empty strings or strings with only non-letter characters.\n- Design the function to be easily understandable and maintainable.\nWe will implement the 'solve' function by using Python's built-in string manipulation methods and a simple conditional check. The function will iterate through each character in the input string, check if it's a letter, and switch its case if it is. If no letters are found, the function will reverse the string.\n", "requirement analysis:\nThe function 'solve' needs to handle strings with mixed characters, including letters and non-letters. It should switch the case of letters and reverse the string if there are no letters. The product should be user-friendly and visually appealing.\nrequirement pool:\n- Implement a function to switch the case of letters in a string.\n- Ensure the function can handle strings with no letters by reversing the string.\n- Design a user-friendly interface for easy interaction.\n- Create a visually appealing UI to enhance user experience.\n- Test the application for robustness and edge cases.\nTo implement the function 'solve', we will use Python's built-in string manipulation methods. The function will check each character in the input string. If the character is a letter, it will switch its case. If there are no letters in the string, it will reverse the string. This approach leverages Python's simplicity and readability.\n", "requirement analysis:\nThe function 'solve' needs to handle strings with mixed characters, including letters and non-letters. It should switch the case of letters and reverse the string if there are no letters. The product should be user-friendly and visually appealing.\nrequirement pool:\n- Implement a function to switch the case of letters in a string.\n- Ensure the function can handle strings with no letters by reversing the string.\n- Design a user-friendly interface for easy interaction.\n- Create a visually appealing design that enhances user experience.\n- Test the function with various strings to ensure it works as expected.\nTo implement the function 'solve' as described, we will use Python's built-in string manipulation methods. The function will check each character in the input string. If the character is a letter, it will switch its case. If there are no letters in the string, it will reverse the string. This approach leverages Python's simplicity and readability.\n", "requirement analysis:\nThe function 'solve' needs to handle strings with mixed characters, including letters and non-letters. It should switch the case of letters and reverse the string if there are no letters. This functionality is crucial for creating a versatile string manipulation tool.\nrequirement pool:\n- Implement the logic to switch the case of letters in the string.\n- Ensure the function can identify and handle non-letter characters.\n- Include a check to see if the string contains any letters.\n- Implement the functionality to reverse the string if no letters are found.\n- Test the function with various inputs to ensure it works as expected.\nWe will implement the function 'solve' by using Python's built-in string manipulation methods and a simple conditional check to determine if the string contains any letters. If no letters are found, we will reverse the string. For letter detection, we will use the isalpha() method which checks if all characters in the string are alphabetic and returns a boolean value.\n", "requirement analysis:\nThe function 'solve' needs to handle different cases based on the input string. It should switch the case of letters and keep non-letter characters as they are. If there are no letters in the string, it should reverse the string. This functionality is crucial for creating a versatile string manipulation tool.\nrequirement pool:\n- Implement the logic to switch the case of letters in the string.\n- Handle the case where the string contains no letters by reversing it.\n- Ensure the function is efficient and handles edge cases, such as empty strings or strings with only non-letter characters.\n- Design the function to be easily understandable and maintainable.\nWe will implement the function 'solve' by using Python's built-in string manipulation methods. The function will check each character in the input string. If the character is a letter, it will switch its case. If there are no letters in the string, it will reverse the string. This approach ensures simplicity and efficiency.\n", "requirement analysis:\nThe function 'solve' needs to handle different cases based on the input string. It should switch the case of letters and reverse the string if there are no letters. The requirements are clear and straightforward, focusing on functionality and user experience.\nrequirement pool:\n- Implement the function to switch the case of letters and reverse the string if no letters are present\n- Ensure the application is responsive and accessible across devices\n- Design a beautiful and intuitive user interface\n- Optimize the application for performance and efficiency\n- Include error handling for unexpected inputs\nWe will implement the function 'solve' by using Python's built-in string manipulation methods and a simple conditional check. The function will iterate through each character in the input string, switch its case if it's a letter, and reverse the string if no letters are found. This approach leverages Python's flexibility and readability.\n", "requirement analysis:\nThe function 'solve' needs to handle different cases based on the input string. It should switch the case of letters and keep non-letter characters as they are. If there are no letters in the string, it should reverse the string. This functionality is crucial for creating a versatile string manipulation tool.\nrequirement pool:\n- Implement the logic to switch the case of letters in the string.\n- Handle the case where the string contains no letters by reversing it.\n- Ensure the function is efficient and handles edge cases, such as empty strings or strings with only non-letter characters.\n- Design the function to be easily understandable and maintainable.\nWe will implement the 'solve' function by using Python's built-in string manipulation methods and a simple conditional check. The function will iterate through each character in the input string, switch its case if it's a letter, and keep it unchanged if it's not. If no letters are found, the function will reverse the string.\n", "requirement analysis:\nThe function 'solve' needs to handle strings with mixed characters, including letters and non-letters. It should switch the case of letters and reverse the string if there are no letters. The product should be user-friendly and visually appealing.\nrequirement pool:\n- Implement a function that can switch the case of letters in a string\n- Ensure the function can reverse the string if it contains no letters\n- Design a user-friendly interface for easy interaction\n- Create a visually appealing UI to enhance user experience\n- Test the application for robustness and edge cases\nTo implement the function 'solve' as described, we will use Python's built-in string manipulation methods. The function will check each character in the input string. If the character is a letter, it will switch its case. If there are no letters in the string, it will reverse the string. This approach leverages Python's simplicity and readability.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [128, 128, 128, 128, 128, 128, 128, 128, 128, 128], "completion": "from typing import List\n## main.py\n\nimport string\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function takes a string as input and performs the following operations:\n    1. If the string contains any letters, it switches the case of each letter.\n    2. If the string does not contain any letters, it reverses the string.\n    \n    Args:\n        s (str): The input string.\n    \n    Returns:\n        str: The modified string based on the presence of letters.\n    \"\"\"\n    if any(char.isalpha() for char in s):\n        # Switch case for each letter in the string\n        return ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        # Reverse the string\n        return s[::-1]\n", "passed": true, "pass": true, "pass_num": 10, "round": 346, "repair_prompt": ["def solve(s):\t\n'''You are given a string s.  \n    if s[i] is a letter, switch its case from uppercase to lowercase or vice versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n\nExamples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    '''"], "mutate_method": "rephrase_one", "parent_index": 282}
