{"task_id": "HumanEval/19", "prompt": "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest. Ensure that the function can handle an empty input string gracefully.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "entry_point": "sort_numbers", "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "test": ["def check(sort_numbers):\n\tassert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one\") == 'one'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four three six\") == 'three four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one six four\") == 'one four six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two\") == 'one two'", "def check(sort_numbers):\n\tassert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four five five one one\") == 'one one four five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four zero two five\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight\") == 'eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six three\") == 'three six'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero\") == 'zero seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four three zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven\") == 'seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six nine three\") == 'three six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one nine three\") == 'one three four nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "def check(sort_numbers):\n\tassert sort_numbers('three five nine') == 'three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three\") == 'zero three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one seven\") == 'one four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six\") == 'six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"four two seven\") == 'two four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three four five\") == 'three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five four zero\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three seven two\") == 'two three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four six four one\") == 'one four four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight six three\") == 'three six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three five\") == 'three five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four\") == 'four'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero four one\") == 'zero one four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine\") == 'nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three\") == 'three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three four zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five\") == 'five'", "def check(sort_numbers):\n\tassert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers('three') == 'three'", "def check(sort_numbers):\n\tassert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six\") == 'six'", "def check(sort_numbers):\n\tassert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five\") == 'five eight'", "def check(sort_numbers):\n\tassert sort_numbers('') == ''", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine nine five\") == 'five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three\") == 'three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero\") == 'zero'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine zero\") == 'zero nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one six two seven\") == 'one two six seven'"], "test_case_list": ["assert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "assert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "assert sort_numbers(\"one\") == 'one'", "assert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "assert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "assert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "assert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "assert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "assert sort_numbers(\"four four three six\") == 'three four four six'", "assert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "assert sort_numbers(\"nine one six four\") == 'one four six nine'", "assert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "assert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "assert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "assert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "assert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "assert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "assert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "assert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "assert sort_numbers(\"one two\") == 'one two'", "assert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "assert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "assert sort_numbers(\"four five five one one\") == 'one one four five five'", "assert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "assert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "assert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "assert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "assert sort_numbers(\"four zero two five\") == 'zero two four five'", "assert sort_numbers(\"eight\") == 'eight'", "assert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "assert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "assert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "assert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "assert sort_numbers(\"six three\") == 'three six'", "assert sort_numbers(\"seven zero\") == 'zero seven'", "assert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "assert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "assert sort_numbers(\"four three zero\") == 'zero three four'", "assert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "assert sort_numbers(\"seven\") == 'seven'", "assert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "assert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "assert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "assert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "assert sort_numbers(\"six nine three\") == 'three six nine'", "assert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "assert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "assert sort_numbers(\"four one nine three\") == 'one three four nine'", "assert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "assert sort_numbers('three five nine') == 'three five nine'", "assert sort_numbers(\"zero three\") == 'zero three'", "assert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "assert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "assert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "assert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "assert sort_numbers(\"four one seven\") == 'one four seven'", "assert sort_numbers(\"seven six\") == 'six seven'", "assert sort_numbers(\"four two seven\") == 'two four seven'", "assert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "assert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "assert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "assert sort_numbers(\"nine three four five\") == 'three four five nine'", "assert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "assert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "assert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "assert sort_numbers(\"two five four zero\") == 'zero two four five'", "assert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "assert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "assert sort_numbers(\"three seven two\") == 'two three seven'", "assert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "assert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "assert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "assert sort_numbers(\"four four six four one\") == 'one four four four six'", "assert sort_numbers(\"eight six three\") == 'three six eight'", "assert sort_numbers(\"five three five\") == 'three five five'", "assert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "assert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "assert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "assert sort_numbers(\"four\") == 'four'", "assert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "assert sort_numbers(\"six zero four one\") == 'zero one four six'", "assert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "assert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "assert sort_numbers(\"nine\") == 'nine'", "assert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "assert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "assert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "assert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "assert sort_numbers(\"three\") == 'three'", "assert sort_numbers(\"three four zero\") == 'zero three four'", "assert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "assert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "assert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "assert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "assert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "assert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "assert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "assert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "assert sort_numbers(\"five\") == 'five'", "assert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "assert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "assert sort_numbers('three') == 'three'", "assert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "assert sort_numbers(\"six\") == 'six'", "assert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "assert sort_numbers(\"eight five\") == 'five eight'", "assert sort_numbers('') == ''", "assert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "assert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "assert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "assert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "assert sort_numbers(\"nine nine five\") == 'five nine nine'", "assert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "assert sort_numbers(\"seven three\") == 'three seven'", "assert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "assert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "assert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "assert sort_numbers(\"zero\") == 'zero'", "assert sort_numbers(\"nine zero\") == 'zero nine'", "assert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "assert sort_numbers(\"one six two seven\") == 'one two six seven'"], "nl": " Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    ", "func": "def sort_numbers(numbers: str) -> str:", "examples": ">>> sort_numbers('three one five')\n    'one three five'\n    ", "completions": ["from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-delimited string of numerals from 'zero' to 'nine'.\n    Output: A space-delimited string of numerals sorted in numerical order.\n    '''\n    num_to_digit = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    digit_to_num = {value: key for key, value in num_to_digit.items()}\n    \n    numerals = numbers.split()\n    numerical_values = [num_to_digit[num] for num in numerals]\n    sorted_values = sorted(numerical_values)\n    sorted_numerals = [digit_to_num[value] for value in sorted_values]\n    sorted_string = ' '.join(sorted_numerals)\n    \n    return sorted_string\n", "from typing import List\n## main.py\n\nimport re\n\ndef sort_numbers(numbers: str) -> str:\n    # Dictionary to map word numbers to their corresponding integer values\n    word_to_num = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9,\n        'ten': 10, 'eleven': 11, 'twelve': 12, 'thirteen': 13,\n        'fourteen': 14, 'fifteen': 15, 'sixteen': 16, 'seventeen': 17,\n        'eighteen': 18, 'nineteen': 19, 'twenty': 20\n    }\n    \n    # Dictionary to map integer values back to their corresponding word numbers\n    num_to_word = {value: key for key, value in word_to_num.items()}\n    \n    # Split the input string into words\n    words = numbers.split()\n    \n    # Map words to their corresponding integer values\n    num_values = [word_to_num[word] for word in words if word in word_to_num]\n    \n    # Sort the integer values\n    num_values.sort()\n    \n    # Map sorted integer values back to words\n    sorted_words = [num_to_word[num] for num in num_values]\n    \n    # Join the sorted words back into a single string\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string\n", "from typing import List\n## main.py\n\nfrom typing import List\nfrom collections import OrderedDict\n\n# Mapping of words to their corresponding numerical values\nword_to_number = OrderedDict([\n    ('zero', 0),\n    ('one', 1),\n    ('two', 2),\n    ('three', 3),\n    ('four', 4),\n    ('five', 5),\n    ('six', 6),\n    ('seven', 7),\n    ('eight', 8),\n    ('nine', 9),\n    ('ten', 10),\n])\n\n# Mapping of numerical values back to their corresponding words\nnumber_to_word = {value: key for key, value in word_to_number.items()}\n\ndef sort_numbers(numbers: str) -> str:\n    # Split the input string into words\n    words = numbers.split()\n    \n    # Map words to their numerical values\n    numerical_values = [word_to_number[word] for word in words]\n    \n    # Sort the numerical values\n    sorted_values = sorted(numerical_values)\n    \n    # Map sorted numerical values back to words\n    sorted_words = [number_to_word[value] for value in sorted_values]\n    \n    # Join the words back into a space-delimited string\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string\n", "from typing import List\n## main.py\n\nimport re\nfrom collections import OrderedDict\n\ndef word_to_number(word):\n    word_to_num_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n        'ten': 10\n    }\n    return word_to_num_map.get(word, None)\n\ndef number_to_word(number):\n    num_to_word_map = {\n        0: 'zero',\n        1: 'one',\n        2: 'two',\n        3: 'three',\n        4: 'four',\n        5: 'five',\n        6: 'six',\n        7: 'seven',\n        8: 'eight',\n        9: 'nine',\n        10: 'ten'\n    }\n    return num_to_word_map.get(number, None)\n\ndef sort_numbers(numbers: str) -> str:\n    # Split the input string into words\n    words = numbers.split()\n    \n    # Map words to their corresponding numerical values\n    num_list = []\n    for word in words:\n        num = word_to_number(word)\n        if num is not None:\n            num_list.append(num)\n    \n    # Sort the numerical values\n    num_list.sort()\n    \n    # Convert sorted numerical values back to words\n    sorted_words = [number_to_word(num) for num in num_list]\n    \n    # Join the sorted words back into a space-delimited string\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string\n\n# Example usage:\n# sorted_result = sort_numbers(\"two five zero seven six three one four eight ten\")\n# print(sorted_result)  # Output: \"zero one two three four five six seven eight ten\"\n", "from typing import List\n## main.py\n\nimport re\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-delimited string of numerals from 'zero' to 'nine'.\n    Output: A space-delimited string of numerals sorted from smallest to largest.\n    '''\n    # Dictionary to map numerals to their corresponding integer values\n    numeral_to_int = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Dictionary to map integer values back to their corresponding numerals\n    int_to_numeral = {value: key for key, value in numeral_to_int.items()}\n    \n    # Use regular expression to split the input string into numerals\n    numerals = re.findall(r'\\b\\w+\\b', numbers)\n    \n    # Map the numerals to their corresponding integer values\n    int_values = [numeral_to_int[numeral] for numeral in numerals]\n    \n    # Sort the integer values\n    sorted_int_values = sorted(int_values)\n    \n    # Map the sorted integer values back to their corresponding numerals\n    sorted_numerals = [int_to_numeral[value] for value in sorted_int_values]\n    \n    # Join the sorted numerals into a space-delimited string\n    sorted_string = ' '.join(sorted_numerals)\n    \n    return sorted_string\n", "from typing import List\n## main.py\n\nimport pygame\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. \n    Return the string with numbers sorted from smallest to largest. Ensure that the function can handle an empty input string gracefully.\n    \n    >>> sort_numbers('three one five')\n        'one three five'\n    '''\n    if not numbers:\n        return \"\"\n\n    word_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    number_to_word = {value: key for key, value in word_to_number.items()}\n\n    words = numbers.split()\n    numbers_list = [word_to_number[word] for word in words]\n    numbers_list.sort()\n    sorted_words = [number_to_word[num] for num in numbers_list]\n\n    return ' '.join(sorted_words)\n\n# Example usage\nif __name__ == \"__main__\":\n    import pygame\n    print(sort_numbers('three one five'))  # Output: 'one three five'\n", "from typing import List\n## main.py\n\nfrom typing import List\nfrom collections import defaultdict\n\n# Mapping of word representations to their numerical values\nword_to_number = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n}\n\n# Mapping of numerical values to their word representations\nnumber_to_word = {value: key for key, value in word_to_number.items()}\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-delimited string of numerals from 'zero' to 'nine'. Example: 'three one five'\n    Output: A space-delimited string of numerals sorted from smallest to largest. Example: 'one three five'\n    '''\n    # Split the input string into words\n    words = numbers.split()\n    \n    # Map words to their numerical values\n    numerical_values = [word_to_number[word] for word in words]\n    \n    # Sort the numerical values\n    numerical_values.sort()\n    \n    # Map sorted numerical values back to words\n    sorted_words = [number_to_word[value] for value in numerical_values]\n    \n    # Join the sorted words back into a space-delimited string\n    sorted_numbers = ' '.join(sorted_words)\n    \n    return sorted_numbers\n\n# Example usage:\n# print(sort_numbers('three one five'))  # Output: 'one three five'\n", "from typing import List\n## main.py\n\nimport re\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. \n    Return the string with numbers sorted from smallest to largest. Ensure that the function can handle an empty input string gracefully.\n    >>> sort_numbers('three one five')\n        'one three five'\n    '''\n    if not numbers:\n        return \"\"\n\n    # Mapping of words to their corresponding numerical values\n    word_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Split the input string into a list of numerals\n    numeral_list = numbers.split()\n\n    # Convert the list of numerals to their numerical values\n    numerical_values = [word_to_number[num] for num in numeral_list]\n\n    # Sort the numerical values\n    sorted_numerical_values = sorted(numerical_values)\n\n    # Convert the sorted numerical values back to their corresponding numerals\n    number_to_word = {value: key for key, value in word_to_number.items()}\n    sorted_numerals = [number_to_word[num] for num in sorted_numerical_values]\n\n    # Join the sorted numerals into a space-delimited string\n    sorted_string = ' '.join(sorted_numerals)\n\n    return sorted_string\n\n# Example usage\nif __name__ == \"__main__\":\n    print(sort_numbers('three one five'))  # Output: 'one three five'\n", "from typing import List\n## main.py\n\nimport pygame\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. \n    Return the string with numbers sorted from smallest to largest. Ensure that the function can handle an empty input string gracefully.\n    \n    >>> sort_numbers('three one five')\n        'one three five'\n    '''\n    if not numbers:\n        return \"\"\n\n    word_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    number_to_word = {value: key for key, value in word_to_number.items()}\n\n    words = numbers.split()\n    numbers_list = [word_to_number[word] for word in words]\n    numbers_list.sort()\n    sorted_words = [number_to_word[num] for num in numbers_list]\n\n    return ' '.join(sorted_words)\n\n# Example usage\nif __name__ == \"__main__\":\n    import pygame\n    print(sort_numbers('three one five'))  # Output: 'one three five'\n", "from typing import List\n## main.py\n\nimport re\n\ndef sort_numbers(numbers: str) -> str:\n    # Dictionary to map word numbers to their corresponding integer values\n    word_to_num = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9,\n        'ten': 10, 'eleven': 11, 'twelve': 12, 'thirteen': 13,\n        'fourteen': 14, 'fifteen': 15, 'sixteen': 16, 'seventeen': 17,\n        'eighteen': 18, 'nineteen': 19, 'twenty': 20\n    }\n    \n    # Dictionary to map integer values back to their corresponding word numbers\n    num_to_word = {value: key for key, value in word_to_num.items()}\n    \n    # Split the input string into words\n    words = numbers.split()\n    \n    # Map words to their corresponding integer values\n    num_values = [word_to_num[word] for word in words if word in word_to_num]\n    \n    # Sort the integer values\n    num_values.sort()\n    \n    # Map sorted integer values back to words\n    sorted_words = [num_to_word[num] for num in num_values]\n    \n    # Join the sorted words back into a single string\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that sorts a space-delimited string of numerals from 'zero' to 'nine' in numerical order. The function should handle empty input gracefully. This requirement is clear and specific, aligning well with the goal of creating a useful tool for sorting numbers.\nrequirement pool:\n- Implement the function to sort numbers correctly.\n- Ensure the function can handle empty input gracefully.\n- Develop a user-friendly interface for easy input and output.\n- Test the function to ensure it performs efficiently and accurately.\nTo implement the function that sorts a space-delimited string of numerals from 'zero' to 'nine' in numerical order, we will use Python's built-in capabilities and a dictionary for mapping words to their corresponding numerical values. This approach ensures simplicity and efficiency.\n", "requirement analysis:\nThe requirement is to create a function that takes a space-delimited string of numerals in words and returns a sorted string of numerals in numerical order. The function should handle empty input gracefully. This requirement is clear and specific, aligning well with the goal of creating a useful tool for sorting numbers.\nrequirement pool:\n- The main code should correctly convert the words to numbers and sort them.\n- The function should handle empty input strings without errors.\n- The output should be a string with numbers separated by spaces in ascending order.\n- Implement a user-friendly interface for easy input and output.\n- Ensure the function is efficient and handles all edge cases.\nTo implement the function, we will use Python's built-in capabilities along with the `re` module for regular expressions to handle the conversion and sorting of the input string. The function will map the word numbers to their corresponding integer values, sort them, and then map them back to words for the output.\n", "requirement analysis:\nThe requirement is to create a function that takes a space-delimited string of numerals in words, sorts them, and returns a space-delimited string of the sorted numerals. The function should handle empty input gracefully. This requirement is clear and specific, aligning well with the user's need for a straightforward solution to a common problem.\nrequirement pool:\n- The main code should correctly convert the words to numbers and sort them.\n- The function should handle empty input strings gracefully.\n- Ensure the output is a space-delimited string of numerals in numerical order.\n- Improve the efficiency and readability of the code.\nWe will use Python's built-in capabilities along with the `collections` module to create a function that maps words to their corresponding numerical values, sorts these values, and then maps them back to words to return the sorted string.\n", "requirement analysis:\nThe requirement is to create a function that takes a space-delimited string of numerals in words and returns a sorted string of these numerals. The function should handle empty input gracefully and ensure the output is in ascending order. This requirement is clear and specific, aligning well with the user's need for a straightforward number sorting tool.\nrequirement pool:\n- The main code should correctly parse the input string and map the words to their corresponding numbers.\n- The function should handle any number of inputs and sort them in ascending order.\n- The system should gracefully handle empty input strings.\n- The output should be a string with numbers separated by spaces in ascending order.\nTo implement the function `sort_numbers` that sorts a space-delimited string of numerals in words, we will use Python's built-in capabilities along with the `collections` module for handling the mapping of words to numbers. The function will first parse the input string, map the words to their corresponding numerical values, sort these values, and then return the sorted string.\n", "requirement analysis:\nThe requirement is to create a function that sorts a space-delimited string of numerals from 'zero' to 'nine'. The function should handle an empty input gracefully and return the sorted string. The requirement is clear and specific, focusing on the functionality and robustness of the solution.\nrequirement pool:\n- The main code should correctly sort the input string of numerals.\n- The function should handle an empty input string gracefully.\n- Ensure the output is space-delimited and easy to read.\n- Improve the efficiency and performance of the sorting algorithm.\nTo implement the function that sorts a space-delimited string of numerals from 'zero' to 'nine', we will use Python's built-in capabilities along with the `re` module for regular expressions to parse the input string. The function will map the word numerals to their corresponding integer values, sort them, and then map them back to words for the output. This approach ensures simplicity and efficiency.\n", "requirement analysis:\nThe requirement is to create a function that takes a space-delimited string of numerals and returns a sorted string of the same numerals. The function should handle an empty input string gracefully. The function should be user-friendly and efficient.\nrequirement pool:\n- The main code should handle the input and output correctly.\n- The function should handle unexpected inputs gracefully.\n- Ensure the function is efficient and can handle large inputs.\n- Create a user-friendly interface for easy input and output.\n- Improve the overall performance and reliability of the function.\nWe will use Python's built-in capabilities to parse the input string, map the words to their corresponding numerical values, sort these values, and then map them back to their word forms. This approach leverages Python's simplicity and efficiency for this task.\n", "requirement analysis:\nThe requirement is to create a function that sorts a space-delimited string of numerals from 'zero' to 'nine'. The function should handle empty input gracefully and return the sorted string. The function should be efficient and user-friendly.\nrequirement pool:\n- The main code should correctly sort the input string of numerals.\n- The function should handle empty input gracefully.\n- Ensure the function is efficient and can handle large inputs.\n- Create a user-friendly interface for easy input and output.\n- Improve the overall performance and reliability of the function.\nTo implement the function, we will use Python's built-in capabilities along with the `collections` module for handling the sorting of words. The function will map the word representations of numbers to their numerical values, sort them, and then map them back to their word forms. This approach ensures both efficiency and clarity in handling the input and output.\n", "requirement analysis:\nThe requirement is to create a function that takes a space-delimited string of numerals in words and returns a sorted string of numerals in numerical order. The function should handle empty input gracefully. This requirement is clear and specific, aligning well with the goal of creating a reliable and user-friendly sorting tool.\nrequirement pool:\n- Implement the function to sort numbers correctly based on their word representation.\n- Ensure the function can handle empty input strings without errors.\n- Develop a user-friendly interface for easy input and output.\n- Test the function to ensure it performs efficiently and accurately.\nTo implement the function that sorts numbers based on their word representation, we will use Python's built-in capabilities along with a dictionary to map words to their corresponding numerical values. This approach will ensure simplicity and efficiency. We will also handle edge cases such as empty input strings gracefully.\n", "requirement analysis:\nThe requirement is to create a function that takes a space-delimited string of numerals and returns a sorted string of the same numerals. The function should handle an empty input string gracefully. The function should be user-friendly and efficient.\nrequirement pool:\n- The main code should handle the input and output correctly.\n- The function should handle unexpected inputs gracefully.\n- Ensure the function is efficient and can handle large inputs.\n- Create a user-friendly interface for easy input and output.\n- Improve the overall performance and reliability of the function.\nWe will use Python's built-in capabilities to parse the input string, map the words to their corresponding numerical values, sort these values, and then map them back to their word forms. This approach leverages Python's simplicity and efficiency for this task.\n", "requirement analysis:\nThe requirement is to create a function that takes a space-delimited string of numerals in words and returns a sorted string of numerals in numerical order. The function should handle empty input gracefully. This requirement is clear and specific, aligning well with the goal of creating a useful tool for sorting numbers.\nrequirement pool:\n- The main code should correctly convert the words to numbers and sort them.\n- The function should handle empty input strings without errors.\n- The output should be a string with numbers separated by spaces in ascending order.\n- Implement a user-friendly interface for easy input and output.\n- Ensure the function is efficient and handles all edge cases.\nTo implement the function, we will use Python's built-in capabilities along with the `re` module for regular expressions to handle the conversion and sorting of the input string. The function will map the word numbers to their corresponding integer values, sort them, and then map them back to words for the output.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0], "pass_results": [true, true, true, true, true, false, true, true, false, true], "pass_test_cases_num": [121, 121, 121, 121, 121, 0, 121, 121, 0, 121], "completion": "from typing import List\n## main.py\n\nimport re\n\ndef sort_numbers(numbers: str) -> str:\n    # Dictionary to map word numbers to their corresponding integer values\n    word_to_num = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9,\n        'ten': 10, 'eleven': 11, 'twelve': 12, 'thirteen': 13,\n        'fourteen': 14, 'fifteen': 15, 'sixteen': 16, 'seventeen': 17,\n        'eighteen': 18, 'nineteen': 19, 'twenty': 20\n    }\n    \n    # Dictionary to map integer values back to their corresponding word numbers\n    num_to_word = {value: key for key, value in word_to_num.items()}\n    \n    # Split the input string into words\n    words = numbers.split()\n    \n    # Map words to their corresponding integer values\n    num_values = [word_to_num[word] for word in words if word in word_to_num]\n    \n    # Sort the integer values\n    num_values.sort()\n    \n    # Map sorted integer values back to words\n    sorted_words = [num_to_word[num] for num in num_values]\n    \n    # Join the sorted words back into a single string\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string\n", "passed": true, "pass": true, "pass_num": 8, "round": 16, "repair_prompt": ["def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest. Ensure that the function can handle an empty input string gracefully.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''"], "mutate_method": "add_1_sentence_at_end", "parent_index": 16}
