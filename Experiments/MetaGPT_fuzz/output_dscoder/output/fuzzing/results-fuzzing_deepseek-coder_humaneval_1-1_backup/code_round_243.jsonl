{"task_id": "HumanEval/141", "prompt": "def file_name_check(file_name):\t\n'''Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Ensure that the file name does not exceed a length of 255 characters.\nExamples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    '''", "entry_point": "file_name_check", "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n", "test": ["def check(file_name_check):\n\tassert file_name_check(\"zmz1h1ZW5.txt\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"|ypo/e+~=yxqk@l:=n-|_w/.exe\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"T|x@:8vC6.exe\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"p90hm2.dll\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"@_HqUwn.taP9n@IeU.dll\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"AwtZe!.exe\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check('this_is_valid.txt') == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"pps:pq00f&=-e@p4oe^u1so3^8.exe\") == 'No'", "def check(file_name_check):\n\tassert file_name_check('@this1_is6_valid.exe') == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"svIkpyQe7pYHiedh.exe\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"e$r=krxi#o=yevwd**z.dll\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\".tt.txt\") == 'No'", "def check(file_name_check):\n\tassert file_name_check('Is3youfault.txt') == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"on&z+t~=su$k.txt\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"#gk_nfFgjJg:.dll\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"hpuf2oz.dll\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"pteiqqcwqbu.w.j.txt\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"ncStUyBIegxXn6HC.exe\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"qtf&js*:$a.vk+e.txt\") == 'No'", "def check(file_name_check):\n\tassert file_name_check('final..txt') == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"eOky5qsos.kg.txt\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"h*ujtt.~j*/l%|*i$e.dll\") == 'No'", "def check(file_name_check):\n\tassert file_name_check('final132') == 'No'", "def check(file_name_check):\n\tassert file_name_check('/this_is_valid.dll') == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"zpbyutvvgq0mpoaxu.dll\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"^/je*z?-@ylp^ai.s.txt\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\".pszd.dll\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"vgjgf.exe\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"hl3tarbv4uwywwr.exe\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check('I563_Yes3.txtt') == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"uw26lmhi4y0af.txt\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"~%/-qvn&_:g|rcs&g-ky#.txt\") == 'No'", "def check(file_name_check):\n\tassert file_name_check('s1sdf3.asd') == 'No'", "def check(file_name_check):\n\tassert file_name_check('His12FILE94.exe') == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"0i7q0uqdv.txt\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"dzs.dll\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"UIlYE5DRb2SV.exe\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"IrXV.exe\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"^m^p:n|?#h@*ci*^=k--v.dll\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"i66yaotkz.exe\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"vnlxospuliq.dll\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check('this_is_valid.txtexe') == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"o2+fqga~_h.@k1d0:o$_$.0.txt\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"jYQ!%7Oadf=HxM.exe\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"y=rdUuG1Okf=F.txt\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"oopglo.tf.dll\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"LMao0wz.dll\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"^-O?gGH.dll\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\".$_1vhnquh6s=!6r_!~j1~.exe\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"qnt.txt\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"+52?m&^_!c-q0r?pe.dll\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"gnz+zb@^cy+|gqi*h?l=s.txt\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"6cqsqta.txt\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"$ca@u.s@@-yx#a/.exe\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"yvfznekitgek.dll\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"n-+g?&+g=x~s&~.-&fk%.exe\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"Ww~vDBe_.exe\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"i%$mq/p!_w&@eu@c/gvxajql.dll\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"E1Lnmck&QIbVV01.txt\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check('no_one#knows.dll') == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"c+91:8=_*&=z#s&3h7#/.exe\") == 'No'", "def check(file_name_check):\n\tassert file_name_check('this_is_12valid.6exe4.txt') == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"*w_brros!kq@iaoq.dll\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"kbpmh.dll\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"0Y=Mm+Oe~.dll\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"rvwndksjhoo.txt\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"botehqmlxp.olr.dll\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"+lq_?kE-o!gd|&X.dll\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"qqsy..egxjde.txt\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\":#lg=cp&ur#+d5d^li-b8.dll\") == 'No'", "def check(file_name_check):\n\tassert file_name_check('.txt') == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"dfedi.txt\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"qp|%#&xu|y~$jx.exe\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"laj@e.luof@!n.exe\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"l.igcr.exe\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"iEVAdcwQQCoiO0jM.txt\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check('#this2_i4s_5valid.ten') == 'No'", "def check(file_name_check):\n\tassert file_name_check('_Y.txt') == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"j*90pb:3mwpch1%e$fc.dll\") == 'No'", "def check(file_name_check):\n\tassert file_name_check('all.exe.txt') == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"lzi-@=?!c@%s&p$si.exe\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"1$q&45N3=lRzm.dll\") == 'No'", "def check(file_name_check):\n\tassert file_name_check('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.", "def check(file_name_check):\n\tassert file_name_check(\"fEev.exe\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"$:ZRFZ04!1-n.dll\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"i.yshapqayncaj.exe\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"izanbyqrv3b.dll\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"ktqDzjP.og69Y3=.dll\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"m8frtq@xt:#z:.exe\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"bPw.jjsT1YCelZBQO.exe\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"9KWOUbCL3Q0QR1p.txt\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"+BN=.exe\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"annATke..ej.cVxK6vuE.dll\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"*b0#ln!9vf#%oa|17ie/$-.dll\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"17E9anu32jG:EP~54.exe\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"PfqMHW.txt\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"&z|i!-+@&l~#g%|%who.txt\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"@Fmt~B-_BW.dll\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"tiscsoskzlipxld.dll\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"t+yx?e%/sk?*vecv/t.exe\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"sdsojhwcc.dll\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\":11j%:n5/$jp^ruab|.exe\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"icXCNbcPz.txt\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"wSvddcj3BdEgxA18Ne.dll\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"6kk^:!&tl0zk&hrz*y~mu3.dll\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"0g4zwy.dll\") == 'No'", "def check(file_name_check):\n\tassert file_name_check('I563_No.exe') == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"oe~$&$@g~u&@@z:xj!lm@!.exe\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"s+b.exe\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"OMEihb9WMxRG82MZLPx.txt\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"~nfkmjqc_$cor%/?ykj%%x%^o9^.dll\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"r5q-#nhxw3:4b9d5z*xai.txt\") == 'No'", "def check(file_name_check):\n\tassert file_name_check('s.') == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"VQtimZLsgjDfOBejmciF.dll\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check('MY16FILE3.exe') == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"xj82uvv3djfudzwer.dll\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check('1I563_Yes3.exe') == 'No'", "def check(file_name_check):\n\tassert file_name_check('K.dll') == 'Yes'", "def check(file_name_check):\n\tassert file_name_check('this_is_valid.wow') == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"cf612q:n?o1m8b0!+v43-wh.exe\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"_:a:46!8yq_#06bxji8rf!2nt1!lsc.exe\") == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"s&c1x*o/er*4$^rpw1uzbcb.dll\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"ssgbu.dll\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"example.txt\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"l$!dvdd+dg!/:fz$_^.dll\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"nzigdcskiz.exe\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"sIR6wneLqFNKwY.exe\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check('?aREYA.exe') == 'No'", "def check(file_name_check):\n\tassert file_name_check(\"vmuccyt.exe\") == 'Yes'", "def check(file_name_check):\n\tassert file_name_check(\"1example.dll\") == 'No'"], "test_case_list": ["assert file_name_check(\"zmz1h1ZW5.txt\") == 'Yes'", "assert file_name_check(\"|ypo/e+~=yxqk@l:=n-|_w/.exe\") == 'No'", "assert file_name_check(\"T|x@:8vC6.exe\") == 'Yes'", "assert file_name_check(\"p90hm2.dll\") == 'Yes'", "assert file_name_check(\"@_HqUwn.taP9n@IeU.dll\") == 'No'", "assert file_name_check(\"AwtZe!.exe\") == 'Yes'", "assert file_name_check('this_is_valid.txt') == 'Yes'", "assert file_name_check(\"pps:pq00f&=-e@p4oe^u1so3^8.exe\") == 'No'", "assert file_name_check('@this1_is6_valid.exe') == 'No'", "assert file_name_check(\"svIkpyQe7pYHiedh.exe\") == 'Yes'", "assert file_name_check(\"e$r=krxi#o=yevwd**z.dll\") == 'Yes'", "assert file_name_check(\".tt.txt\") == 'No'", "assert file_name_check('Is3youfault.txt') == 'Yes'", "assert file_name_check(\"on&z+t~=su$k.txt\") == 'Yes'", "assert file_name_check(\"#gk_nfFgjJg:.dll\") == 'No'", "assert file_name_check(\"hpuf2oz.dll\") == 'Yes'", "assert file_name_check(\"pteiqqcwqbu.w.j.txt\") == 'No'", "assert file_name_check(\"ncStUyBIegxXn6HC.exe\") == 'Yes'", "assert file_name_check(\"qtf&js*:$a.vk+e.txt\") == 'No'", "assert file_name_check('final..txt') == 'No'", "assert file_name_check(\"eOky5qsos.kg.txt\") == 'No'", "assert file_name_check(\"h*ujtt.~j*/l%|*i$e.dll\") == 'No'", "assert file_name_check('final132') == 'No'", "assert file_name_check('/this_is_valid.dll') == 'No'", "assert file_name_check(\"zpbyutvvgq0mpoaxu.dll\") == 'Yes'", "assert file_name_check(\"^/je*z?-@ylp^ai.s.txt\") == 'No'", "assert file_name_check(\".pszd.dll\") == 'No'", "assert file_name_check(\"vgjgf.exe\") == 'Yes'", "assert file_name_check(\"hl3tarbv4uwywwr.exe\") == 'Yes'", "assert file_name_check('I563_Yes3.txtt') == 'No'", "assert file_name_check(\"uw26lmhi4y0af.txt\") == 'No'", "assert file_name_check(\"~%/-qvn&_:g|rcs&g-ky#.txt\") == 'No'", "assert file_name_check('s1sdf3.asd') == 'No'", "assert file_name_check('His12FILE94.exe') == 'No'", "assert file_name_check(\"0i7q0uqdv.txt\") == 'No'", "assert file_name_check(\"dzs.dll\") == 'Yes'", "assert file_name_check(\"UIlYE5DRb2SV.exe\") == 'Yes'", "assert file_name_check(\"IrXV.exe\") == 'Yes'", "assert file_name_check(\"^m^p:n|?#h@*ci*^=k--v.dll\") == 'No'", "assert file_name_check(\"i66yaotkz.exe\") == 'Yes'", "assert file_name_check(\"vnlxospuliq.dll\") == 'Yes'", "assert file_name_check('this_is_valid.txtexe') == 'No'", "assert file_name_check(\"o2+fqga~_h.@k1d0:o$_$.0.txt\") == 'No'", "assert file_name_check(\"jYQ!%7Oadf=HxM.exe\") == 'Yes'", "assert file_name_check(\"y=rdUuG1Okf=F.txt\") == 'Yes'", "assert file_name_check(\"oopglo.tf.dll\") == 'No'", "assert file_name_check(\"LMao0wz.dll\") == 'Yes'", "assert file_name_check(\"^-O?gGH.dll\") == 'No'", "assert file_name_check(\".$_1vhnquh6s=!6r_!~j1~.exe\") == 'No'", "assert file_name_check(\"qnt.txt\") == 'Yes'", "assert file_name_check(\"+52?m&^_!c-q0r?pe.dll\") == 'No'", "assert file_name_check(\"gnz+zb@^cy+|gqi*h?l=s.txt\") == 'Yes'", "assert file_name_check(\"6cqsqta.txt\") == 'No'", "assert file_name_check(\"$ca@u.s@@-yx#a/.exe\") == 'No'", "assert file_name_check(\"yvfznekitgek.dll\") == 'Yes'", "assert file_name_check(\"n-+g?&+g=x~s&~.-&fk%.exe\") == 'No'", "assert file_name_check(\"Ww~vDBe_.exe\") == 'Yes'", "assert file_name_check(\"i%$mq/p!_w&@eu@c/gvxajql.dll\") == 'Yes'", "assert file_name_check(\"E1Lnmck&QIbVV01.txt\") == 'Yes'", "assert file_name_check('no_one#knows.dll') == 'Yes'", "assert file_name_check(\"c+91:8=_*&=z#s&3h7#/.exe\") == 'No'", "assert file_name_check('this_is_12valid.6exe4.txt') == 'No'", "assert file_name_check(\"*w_brros!kq@iaoq.dll\") == 'No'", "assert file_name_check(\"kbpmh.dll\") == 'Yes'", "assert file_name_check(\"0Y=Mm+Oe~.dll\") == 'No'", "assert file_name_check(\"rvwndksjhoo.txt\") == 'Yes'", "assert file_name_check(\"botehqmlxp.olr.dll\") == 'No'", "assert file_name_check(\"+lq_?kE-o!gd|&X.dll\") == 'No'", "assert file_name_check(\"qqsy..egxjde.txt\") == 'No'", "assert file_name_check(\":#lg=cp&ur#+d5d^li-b8.dll\") == 'No'", "assert file_name_check('.txt') == 'No'", "assert file_name_check(\"dfedi.txt\") == 'Yes'", "assert file_name_check(\"qp|%#&xu|y~$jx.exe\") == 'Yes'", "assert file_name_check(\"laj@e.luof@!n.exe\") == 'No'", "assert file_name_check(\"l.igcr.exe\") == 'No'", "assert file_name_check(\"iEVAdcwQQCoiO0jM.txt\") == 'Yes'", "assert file_name_check('#this2_i4s_5valid.ten') == 'No'", "assert file_name_check('_Y.txt') == 'No'", "assert file_name_check(\"j*90pb:3mwpch1%e$fc.dll\") == 'No'", "assert file_name_check('all.exe.txt') == 'No'", "assert file_name_check(\"lzi-@=?!c@%s&p$si.exe\") == 'Yes'", "assert file_name_check(\"1$q&45N3=lRzm.dll\") == 'No'", "assert file_name_check('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.", "assert file_name_check(\"fEev.exe\") == 'Yes'", "assert file_name_check(\"$:ZRFZ04!1-n.dll\") == 'No'", "assert file_name_check(\"i.yshapqayncaj.exe\") == 'No'", "assert file_name_check(\"izanbyqrv3b.dll\") == 'Yes'", "assert file_name_check(\"ktqDzjP.og69Y3=.dll\") == 'No'", "assert file_name_check(\"m8frtq@xt:#z:.exe\") == 'Yes'", "assert file_name_check(\"bPw.jjsT1YCelZBQO.exe\") == 'No'", "assert file_name_check(\"9KWOUbCL3Q0QR1p.txt\") == 'No'", "assert file_name_check(\"+BN=.exe\") == 'No'", "assert file_name_check(\"annATke..ej.cVxK6vuE.dll\") == 'No'", "assert file_name_check(\"*b0#ln!9vf#%oa|17ie/$-.dll\") == 'No'", "assert file_name_check(\"17E9anu32jG:EP~54.exe\") == 'No'", "assert file_name_check(\"PfqMHW.txt\") == 'Yes'", "assert file_name_check(\"&z|i!-+@&l~#g%|%who.txt\") == 'No'", "assert file_name_check(\"@Fmt~B-_BW.dll\") == 'No'", "assert file_name_check(\"tiscsoskzlipxld.dll\") == 'Yes'", "assert file_name_check(\"t+yx?e%/sk?*vecv/t.exe\") == 'Yes'", "assert file_name_check(\"sdsojhwcc.dll\") == 'Yes'", "assert file_name_check(\":11j%:n5/$jp^ruab|.exe\") == 'No'", "assert file_name_check(\"icXCNbcPz.txt\") == 'Yes'", "assert file_name_check(\"wSvddcj3BdEgxA18Ne.dll\") == 'Yes'", "assert file_name_check(\"6kk^:!&tl0zk&hrz*y~mu3.dll\") == 'No'", "assert file_name_check(\"0g4zwy.dll\") == 'No'", "assert file_name_check('I563_No.exe') == 'Yes'", "assert file_name_check(\"oe~$&$@g~u&@@z:xj!lm@!.exe\") == 'Yes'", "assert file_name_check(\"s+b.exe\") == 'Yes'", "assert file_name_check(\"OMEihb9WMxRG82MZLPx.txt\") == 'Yes'", "assert file_name_check(\"~nfkmjqc_$cor%/?ykj%%x%^o9^.dll\") == 'No'", "assert file_name_check(\"r5q-#nhxw3:4b9d5z*xai.txt\") == 'No'", "assert file_name_check('s.') == 'No'", "assert file_name_check(\"VQtimZLsgjDfOBejmciF.dll\") == 'Yes'", "assert file_name_check('MY16FILE3.exe') == 'Yes'", "assert file_name_check(\"xj82uvv3djfudzwer.dll\") == 'Yes'", "assert file_name_check('1I563_Yes3.exe') == 'No'", "assert file_name_check('K.dll') == 'Yes'", "assert file_name_check('this_is_valid.wow') == 'No'", "assert file_name_check(\"cf612q:n?o1m8b0!+v43-wh.exe\") == 'No'", "assert file_name_check(\"_:a:46!8yq_#06bxji8rf!2nt1!lsc.exe\") == 'No'", "assert file_name_check(\"s&c1x*o/er*4$^rpw1uzbcb.dll\") == 'Yes'", "assert file_name_check(\"ssgbu.dll\") == 'Yes'", "assert file_name_check(\"example.txt\") == 'Yes'", "assert file_name_check(\"l$!dvdd+dg!/:fz$_^.dll\") == 'Yes'", "assert file_name_check(\"nzigdcskiz.exe\") == 'Yes'", "assert file_name_check(\"sIR6wneLqFNKwY.exe\") == 'Yes'", "assert file_name_check('?aREYA.exe') == 'No'", "assert file_name_check(\"vmuccyt.exe\") == 'Yes'", "assert file_name_check(\"1example.dll\") == 'No'"], "nl": "Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    ", "func": "def file_name_check(file_name):", "examples": "Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    ", "completions": ["from typing import List\n## main.py\n\nimport re\n\ndef file_name_check(file_name: str) -> str:\n    \"\"\"\n    Validate a file name based on the given criteria.\n\n    Args:\n        file_name (str): The name of the file to be validated.\n\n    Returns:\n        str: 'Yes' if the file name is valid, 'No' otherwise.\n    \"\"\"\n    # Check if the file name length is within the limit\n    if len(file_name) > 255:\n        return 'No'\n\n    # Check for exactly one dot in the file name\n    dot_index = file_name.rfind('.')\n    if dot_index == -1 or dot_index == 0 or dot_index == len(file_name) - 1:\n        return 'No'\n\n    # Split the file name into name and extension\n    name_part = file_name[:dot_index]\n    extension_part = file_name[dot_index + 1:]\n\n    # Check if the name part is not empty and starts with a letter\n    if not name_part or not re.match(r'^[a-zA-Z]', name_part):\n        return 'No'\n\n    # Count the digits in the name part\n    digit_count = sum(c.isdigit() for c in name_part)\n    if digit_count > 3:\n        return 'No'\n\n    # Validate the extension\n    valid_extensions = ['txt', 'exe', 'dll']\n    if extension_part not in valid_extensions:\n        return 'No'\n\n    # If all checks pass, return 'Yes'\n    return 'Yes'\n", "from typing import List\nimport re\n\ndef file_name_check(file_name: str) -> str:\n    \"\"\"\n    Validate the file name based on the given criteria:\n    1. The file name must contain exactly one dot.\n    2. The substring before the dot must start with a letter.\n    3. The substring after the dot must consist of letters and numbers.\n    4. The file name must not exceed 255 characters.\n    \n    Args:\n        file_name (str): The file name to be validated.\n    \n    Returns:\n        str: 'Yes' if the file name is valid, 'No' otherwise.\n    \"\"\"\n    # Check the length of the file name\n    if len(file_name) > 255:\n        return 'No'\n    \n    # Check for exactly one dot in the file name\n    dot_index = file_name.find('.')\n    if dot_index == -1 or dot_index != file_name.rfind('.'):\n        return 'No'\n    \n    # Split the file name into name and extension\n    name_part = file_name[:dot_index]\n    extension_part = file_name[dot_index + 1:]\n    \n    # Check if the name part starts with a letter\n    if not name_part[0].isalpha():\n        return 'No'\n    \n    # Check if the extension part contains only letters and numbers\n    if not re.match(r'^[a-zA-Z0-9]+$', extension_part):\n        return 'No'\n    \n    return 'Yes'\n", "from typing import List\n## main.py\n\ndef file_name_check(file_name: str) -> str:\n    # Check if the file name is within the 255 character limit\n    if len(file_name) > 255:\n        return 'No'\n\n    # Check for exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Split the file name into name and extension\n    name, extension = file_name.rsplit('.', 1)\n\n    # Check if the extension is one of the allowed ones\n    allowed_extensions = ['txt', 'exe', 'dll']\n    if extension not in allowed_extensions:\n        return 'No'\n\n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n\n    # Check for no more than three digits in the name part\n    if sum(char.isdigit() for char in name) > 3:\n        return 'No'\n\n    return 'Yes'\n", "from typing import List\n## main.py\n\nimport re\n\ndef file_name_check(file_name: str) -> str:\n    \"\"\"\n    Validate a file name based on the given criteria.\n\n    Args:\n        file_name (str): The name of the file to be validated.\n\n    Returns:\n        str: 'Yes' if the file name is valid, 'No' otherwise.\n    \"\"\"\n    # Check if the file name length is within the limit\n    if len(file_name) > 255:\n        return 'No'\n\n    # Check for exactly one dot in the file name\n    dot_index = file_name.rfind('.')\n    if dot_index == -1 or dot_index == 0 or dot_index == len(file_name) - 1:\n        return 'No'\n\n    # Split the file name into name and extension\n    name_part = file_name[:dot_index]\n    extension_part = file_name[dot_index + 1:]\n\n    # Check if the name part is not empty and starts with a letter\n    if not name_part or not re.match(r'^[a-zA-Z]', name_part):\n        return 'No'\n\n    # Count the digits in the name part\n    digit_count = sum(c.isdigit() for c in name_part)\n    if digit_count > 3:\n        return 'No'\n\n    # Validate the extension\n    valid_extensions = ['txt', 'exe', 'dll']\n    if extension_part not in valid_extensions:\n        return 'No'\n\n    # If all checks pass, return 'Yes'\n    return 'Yes'\n", "from typing import List\n## main.py\n\ndef file_name_check(file_name: str) -> str:\n    # Check if the file name is within the 255 character limit\n    if len(file_name) > 255:\n        return 'No'\n\n    # Check for exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Split the file name into name and extension\n    name, extension = file_name.rsplit('.', 1)\n\n    # Check if the extension is one of the allowed ones\n    allowed_extensions = ['txt', 'exe', 'dll']\n    if extension not in allowed_extensions:\n        return 'No'\n\n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n\n    # Check for no more than three digits in the name part\n    if sum(char.isdigit() for char in name) > 3:\n        return 'No'\n\n    return 'Yes'\n", "from typing import List\n## main.py\n\nimport re\n\ndef file_name_check(file_name: str) -> str:\n    \"\"\"\n    Validate a file name based on the given criteria.\n\n    Args:\n        file_name (str): The name of the file to be validated.\n\n    Returns:\n        str: 'Yes' if the file name is valid, 'No' otherwise.\n    \"\"\"\n    # Check if the file name length is within the limit\n    if len(file_name) > 255:\n        return 'No'\n\n    # Check for exactly one dot in the file name\n    dot_index = file_name.rfind('.')\n    if dot_index == -1 or dot_index == 0 or dot_index == len(file_name) - 1:\n        return 'No'\n\n    # Split the file name into name and extension\n    name_part = file_name[:dot_index]\n    extension_part = file_name[dot_index + 1:]\n\n    # Check if the name part is not empty and starts with a letter\n    if not name_part or not re.match(r'^[a-zA-Z]', name_part):\n        return 'No'\n\n    # Count the digits in the name part\n    digit_count = sum(c.isdigit() for c in name_part)\n    if digit_count > 3:\n        return 'No'\n\n    # Validate the extension\n    valid_extensions = ['txt', 'exe', 'dll']\n    if extension_part not in valid_extensions:\n        return 'No'\n\n    # If all checks pass, return 'Yes'\n    return 'Yes'\n", "from typing import List\n## main.py\n\ndef file_name_check(file_name: str) -> str:\n    # Check if the file name is within the 255 character limit\n    if len(file_name) > 255:\n        return 'No'\n\n    # Check for exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Split the file name into name and extension\n    name, extension = file_name.rsplit('.', 1)\n\n    # Check if the extension is one of the allowed ones\n    allowed_extensions = ['txt', 'exe', 'dll']\n    if extension not in allowed_extensions:\n        return 'No'\n\n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n\n    # Check for no more than three digits in the name part\n    if sum(char.isdigit() for char in name) > 3:\n        return 'No'\n\n    return 'Yes'\n", "from typing import List\n## main.py\n\nimport re\n\ndef file_name_check(file_name: str) -> str:\n    \"\"\"\n    Validate a file name based on the given criteria.\n\n    Args:\n        file_name (str): The name of the file to be validated.\n\n    Returns:\n        str: 'Yes' if the file name is valid, 'No' otherwise.\n    \"\"\"\n    # Check if the file name length is within the limit\n    if len(file_name) > 255:\n        return 'No'\n\n    # Check for exactly one dot in the file name\n    dot_index = file_name.rfind('.')\n    if dot_index == -1 or dot_index == 0 or dot_index == len(file_name) - 1:\n        return 'No'\n\n    # Split the file name into name and extension\n    name_part = file_name[:dot_index]\n    extension_part = file_name[dot_index + 1:]\n\n    # Check if the name part is not empty and starts with a letter\n    if not name_part or not re.match(r'^[a-zA-Z]', name_part):\n        return 'No'\n\n    # Count the digits in the name part\n    digit_count = sum(c.isdigit() for c in name_part)\n    if digit_count > 3:\n        return 'No'\n\n    # Validate the extension\n    valid_extensions = ['txt', 'exe', 'dll']\n    if extension_part not in valid_extensions:\n        return 'No'\n\n    # If all checks pass, return 'Yes'\n    return 'Yes'\n", "from typing import List\nimport re\n\ndef file_name_check(file_name: str) -> str:\n    \"\"\"\n    Validate the file name based on the given criteria:\n    1. The file name must contain exactly one dot.\n    2. The substring before the dot must start with a letter.\n    3. The substring after the dot must consist of letters and numbers.\n    4. The file name must not exceed 255 characters.\n    \n    Args:\n        file_name (str): The file name to be validated.\n    \n    Returns:\n        str: 'Yes' if the file name is valid, 'No' otherwise.\n    \"\"\"\n    # Check the length of the file name\n    if len(file_name) > 255:\n        return 'No'\n    \n    # Check for exactly one dot in the file name\n    dot_index = file_name.find('.')\n    if dot_index == -1 or dot_index != file_name.rfind('.'):\n        return 'No'\n    \n    # Split the file name into name and extension\n    name_part = file_name[:dot_index]\n    extension_part = file_name[dot_index + 1:]\n    \n    # Check if the name part starts with a letter\n    if not name_part[0].isalpha():\n        return 'No'\n    \n    # Check if the extension part contains only letters and numbers\n    if not re.match(r'^[a-zA-Z0-9]+$', extension_part):\n        return 'No'\n    \n    return 'Yes'\n", "from typing import List\n## main.py\n\nimport re\n\ndef file_name_check(file_name: str) -> str:\n    \"\"\"\n    Validate a file name based on the given criteria.\n\n    Args:\n        file_name (str): The name of the file to be validated.\n\n    Returns:\n        str: 'Yes' if the file name is valid, 'No' otherwise.\n    \"\"\"\n    # Check if the file name length is within the limit\n    if len(file_name) > 255:\n        return 'No'\n\n    # Check for exactly one dot in the file name\n    dot_index = file_name.rfind('.')\n    if dot_index == -1 or dot_index == 0 or dot_index == len(file_name) - 1:\n        return 'No'\n\n    # Split the file name into name and extension\n    name_part = file_name[:dot_index]\n    extension_part = file_name[dot_index + 1:]\n\n    # Check if the name part is not empty and starts with a letter\n    if not name_part or not re.match(r'^[a-zA-Z]', name_part):\n        return 'No'\n\n    # Count the digits in the name part\n    digit_count = sum(c.isdigit() for c in name_part)\n    if digit_count > 3:\n        return 'No'\n\n    # Validate the extension\n    valid_extensions = ['txt', 'exe', 'dll']\n    if extension_part not in valid_extensions:\n        return 'No'\n\n    # If all checks pass, return 'Yes'\n    return 'Yes'\n"], "plans": ["requirement analysis:\nThe function must check if the file name meets all the specified conditions. It should ensure that the file name does not exceed 255 characters, contains exactly one dot, the substring before the dot is not empty and starts with a letter from the Latin alphabet, and the substring after the dot is one of the allowed extensions (txt, exe, dll). Additionally, it should not allow more than three digits in the file name.\nrequirement pool:\n- Implement file name validation with detailed error messages\n- Ensure the file name does not exceed 255 characters\n- Allow only one dot in the file name\n- Check that the substring before the dot is not empty and starts with a letter\n- Validate the extension of the file name to be one of ['txt', 'exe', 'dll']\nTo implement the file name validation function, we will use Python's built-in string manipulation methods and regular expressions. The function will check for the presence of exactly one dot, ensure the file name does not exceed 255 characters, validate the substring before the dot to start with a letter and not be empty, and check the extension to be one of ['txt', 'exe', 'dll']. We will also count the digits to ensure there are no more than three.\n", "requirement analysis:\nThe requirement analysis shows that the primary goal is to create a function that validates file names based on specific criteria. These criteria include the presence of exactly one dot, the substring before the dot starting with a letter, the substring after the dot being one of the specified types, and no more than three digits. The function should also handle file names up to 255 characters in length.\nrequirement pool:\n- Implement file name validation with the specified criteria.\n- Ensure the function can handle file names up to 255 characters.\n- Provide clear feedback on why a file name is invalid.\n- Allow the function to be easily integrated into existing systems.\n- Optimize performance for common use cases.\nWe will use Python's built-in string manipulation functions and regular expressions to validate the file name. The function will check for the presence of exactly one dot, ensure the substring before the dot starts with a letter, and validate the substring after the dot against the specified types. We will also check the length of the file name to ensure it does not exceed 255 characters.\n", "requirement analysis:\nThe function must check for the presence of exactly one dot in the file name, ensure that the substring before the dot is not empty and starts with a letter from the Latin alphabet, and that the substring after the dot is one of the specified file extensions. Additionally, the function must limit the file name length to 255 characters and ensure that there are no more than three digits in the file name.\nrequirement pool:\n- Implement file name validation logic\n- Ensure compliance with file name length and character restrictions\n- Enhance user interface for better usability\n- Optimize performance for handling long file names\n- Include error handling for invalid file names\nTo implement the file name validation function, we will use Python's built-in string manipulation methods and regular expressions for efficient and effective validation. The function will check for the presence of exactly one dot, ensure the substring before the dot is not empty and starts with a letter from the Latin alphabet, and that the substring after the dot is one of the specified file extensions. Additionally, the function will limit the file name length to 255 characters and ensure that there are no more than three digits in the file name.\n", "requirement analysis:\nThe function must check if the file name meets all the specified conditions. It should ensure that the file name does not exceed 255 characters, contains exactly one dot, the substring before the dot is not empty and starts with a letter from the Latin alphabet, and the substring after the dot is one of the allowed extensions (txt, exe, dll). Additionally, it should not allow more than three digits in the file name.\nrequirement pool:\n- Implement file name validation with detailed error messages\n- Ensure the file name does not exceed 255 characters\n- Allow only one dot in the file name\n- Check that the substring before the dot is not empty and starts with a letter\n- Validate the extension of the file name to be one of ['txt', 'exe', 'dll']\nTo implement the file name validation function, we will use Python's built-in string manipulation methods and regular expressions. The function will check for the presence of exactly one dot, ensure the file name does not exceed 255 characters, validate the substring before the dot to start with a letter and not be empty, and check the extension to be one of ['txt', 'exe', 'dll']. We will also count the digits to ensure there are no more than three.\n", "requirement analysis:\nThe function must check for the presence of exactly one dot in the file name, ensure that the substring before the dot is not empty and starts with a letter from the Latin alphabet, and that the substring after the dot is one of the specified file extensions. Additionally, the function must limit the file name length to 255 characters and ensure that there are no more than three digits in the file name.\nrequirement pool:\n- Implement file name validation logic\n- Ensure compliance with file name length and character restrictions\n- Enhance user interface for better usability\n- Optimize performance for handling long file names\n- Include error handling for invalid file names\nTo implement the file name validation function, we will use Python's built-in string manipulation methods and regular expressions for efficient and effective validation. The function will check for the presence of exactly one dot, ensure the substring before the dot is not empty and starts with a letter from the Latin alphabet, and that the substring after the dot is one of the specified file extensions. Additionally, the function will limit the file name length to 255 characters and ensure that there are no more than three digits in the file name.\n", "requirement analysis:\nThe function must check if the file name meets all the specified conditions. It should ensure that the file name does not exceed 255 characters, contains exactly one dot, the substring before the dot is not empty and starts with a letter from the Latin alphabet, and the substring after the dot is one of the allowed extensions (txt, exe, dll). Additionally, it should not allow more than three digits in the file name.\nrequirement pool:\n- Implement file name validation with detailed error messages\n- Ensure the file name does not exceed 255 characters\n- Allow only one dot in the file name\n- Check that the substring before the dot is not empty and starts with a letter\n- Validate the extension of the file name to be one of ['txt', 'exe', 'dll']\nTo implement the file name validation function, we will use Python's built-in string manipulation methods and regular expressions. The function will check for the presence of exactly one dot, ensure the file name does not exceed 255 characters, validate the substring before the dot to start with a letter and not be empty, and check the extension to be one of ['txt', 'exe', 'dll']. We will also count the digits to ensure there are no more than three.\n", "requirement analysis:\nThe function must check for the presence of exactly one dot in the file name, ensure that the substring before the dot is not empty and starts with a letter from the Latin alphabet, and that the substring after the dot is one of the specified file extensions. Additionally, the function must limit the file name length to 255 characters and ensure that there are no more than three digits in the file name.\nrequirement pool:\n- Implement file name validation logic\n- Ensure compliance with file name length and character restrictions\n- Enhance user interface for better usability\n- Optimize performance for handling long file names\n- Include error handling for invalid file names\nTo implement the file name validation function, we will use Python's built-in string manipulation methods and regular expressions for efficient and effective validation. The function will check for the presence of exactly one dot, ensure the substring before the dot is not empty and starts with a letter from the Latin alphabet, and that the substring after the dot is one of the specified file extensions. Additionally, the function will limit the file name length to 255 characters and ensure that there are no more than three digits in the file name.\n", "requirement analysis:\nThe function must check if the file name meets all the specified conditions. It should ensure that the file name does not exceed 255 characters, contains exactly one dot, the substring before the dot is not empty and starts with a letter from the Latin alphabet, and the substring after the dot is one of the allowed extensions (txt, exe, dll). Additionally, it should not allow more than three digits in the file name.\nrequirement pool:\n- Implement file name validation with detailed error messages\n- Ensure the file name does not exceed 255 characters\n- Allow only one dot in the file name\n- Check that the substring before the dot is not empty and starts with a letter\n- Validate the extension of the file name to be one of ['txt', 'exe', 'dll']\nTo implement the file name validation function, we will use Python's built-in string manipulation methods and regular expressions. The function will check for the presence of exactly one dot, ensure the file name does not exceed 255 characters, validate the substring before the dot to start with a letter and not be empty, and check the extension to be one of ['txt', 'exe', 'dll']. We will also count the digits to ensure there are no more than three.\n", "requirement analysis:\nThe requirement analysis shows that the primary goal is to create a function that validates file names based on specific criteria. These criteria include the presence of exactly one dot, the substring before the dot starting with a letter, the substring after the dot being one of the specified types, and no more than three digits. The function should also handle file names up to 255 characters in length.\nrequirement pool:\n- Implement file name validation with the specified criteria.\n- Ensure the function can handle file names up to 255 characters.\n- Provide clear feedback on why a file name is invalid.\n- Allow the function to be easily integrated into existing systems.\n- Optimize performance for common use cases.\nWe will use Python's built-in string manipulation functions and regular expressions to validate the file name. The function will check for the presence of exactly one dot, ensure the substring before the dot starts with a letter, and validate the substring after the dot against the specified types. We will also check the length of the file name to ensure it does not exceed 255 characters.\n", "requirement analysis:\nThe function must check if the file name meets all the specified conditions. It should ensure that the file name does not exceed 255 characters, contains exactly one dot, the substring before the dot is not empty and starts with a letter from the Latin alphabet, and the substring after the dot is one of the allowed extensions (txt, exe, dll). Additionally, it should not allow more than three digits in the file name.\nrequirement pool:\n- Implement file name validation with detailed error messages\n- Ensure the file name does not exceed 255 characters\n- Allow only one dot in the file name\n- Check that the substring before the dot is not empty and starts with a letter\n- Validate the extension of the file name to be one of ['txt', 'exe', 'dll']\nTo implement the file name validation function, we will use Python's built-in string manipulation methods and regular expressions. The function will check for the presence of exactly one dot, ensure the file name does not exceed 255 characters, validate the substring before the dot to start with a letter and not be empty, and check the extension to be one of ['txt', 'exe', 'dll']. We will also count the digits to ensure there are no more than three.\n"], "scores": [0.8769, 0.9077, 1.0, 0.8769, 1.0, 0.8769, 1.0, 0.8769, 0.9077, 0.8769], "pass_results": [false, false, true, false, true, false, true, false, false, false], "pass_test_cases_num": [114, 118, 130, 114, 130, 114, 130, 114, 118, 114], "completion": "from typing import List\n## main.py\n\nimport re\n\ndef file_name_check(file_name: str) -> str:\n    \"\"\"\n    Validate a file name based on the given criteria.\n\n    Args:\n        file_name (str): The name of the file to be validated.\n\n    Returns:\n        str: 'Yes' if the file name is valid, 'No' otherwise.\n    \"\"\"\n    # Check if the file name length is within the limit\n    if len(file_name) > 255:\n        return 'No'\n\n    # Check for exactly one dot in the file name\n    dot_index = file_name.rfind('.')\n    if dot_index == -1 or dot_index == 0 or dot_index == len(file_name) - 1:\n        return 'No'\n\n    # Split the file name into name and extension\n    name_part = file_name[:dot_index]\n    extension_part = file_name[dot_index + 1:]\n\n    # Check if the name part is not empty and starts with a letter\n    if not name_part or not re.match(r'^[a-zA-Z]', name_part):\n        return 'No'\n\n    # Count the digits in the name part\n    digit_count = sum(c.isdigit() for c in name_part)\n    if digit_count > 3:\n        return 'No'\n\n    # Validate the extension\n    valid_extensions = ['txt', 'exe', 'dll']\n    if extension_part not in valid_extensions:\n        return 'No'\n\n    # If all checks pass, return 'Yes'\n    return 'Yes'\n", "passed": true, "pass": true, "pass_num": 3, "round": 243, "repair_prompt": ["def file_name_check(file_name):\t\n'''Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Ensure that the file name does not exceed a length of 255 characters.\nExamples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    '''"], "mutate_method": "add_1_sentence_at_end", "parent_index": 214}
