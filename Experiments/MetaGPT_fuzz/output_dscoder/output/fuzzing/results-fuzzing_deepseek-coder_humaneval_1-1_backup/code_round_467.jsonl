{"task_id": "HumanEval/161", "prompt": "def solve(s):\t\n'''You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Ensure your solution handles empty strings gracefully.\nExamples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    '''", "entry_point": "solve", "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "test": ["def check(solve):\n\tassert solve(\"#ryv@$l*\") == '#RYV@$L*'", "def check(solve):\n\tassert solve(\"BjdhsNs\") == 'bJDHSnS'", "def check(solve):\n\tassert solve(\"$883%3/\") == '/3%388$'", "def check(solve):\n\tassert solve(\"QnNQfv\") == 'qNnqFV'", "def check(solve):\n\tassert solve(\"o3LWaIl4\") == 'O3lwAiL4'", "def check(solve):\n\tassert solve(\"zt*#m&v\") == 'ZT*#M&V'", "def check(solve):\n\tassert solve(\"wDgT\") == 'WdGt'", "def check(solve):\n\tassert solve(\"ab\") == \"AB\"", "def check(solve):\n\tassert solve(\"=E!NyLi\") == '=e!nYlI'", "def check(solve):\n\tassert solve(\"jZVuQ\") == 'JzvUq'", "def check(solve):\n\tassert solve(\"UKg@xpM~G\") == 'ukG@XPm~g'", "def check(solve):\n\tassert solve(\"%cCcq#\") == '%CcCQ#'", "def check(solve):\n\tassert solve(\"++A^/?xV\") == '++a^/?Xv'", "def check(solve):\n\tassert solve(\"7_%\") == '%_7'", "def check(solve):\n\tassert solve(\"qon\") == 'QON'", "def check(solve):\n\tassert solve(\"giiqdy\") == 'GIIQDY'", "def check(solve):\n\tassert solve(\"~@8%\") == '%8@~'", "def check(solve):\n\tassert solve(\"^@B\") == '^@b'", "def check(solve):\n\tassert solve(\"?UGciW\") == '?ugCIw'", "def check(solve):\n\tassert solve(\"17000556\") == '65500071'", "def check(solve):\n\tassert solve(\"nfl*&=+$@\") == 'NFL*&=+$@'", "def check(solve):\n\tassert solve(\"wSdcA\") == 'WsDCa'", "def check(solve):\n\tassert solve(\"luG9*?%\") == 'LUg9*?%'", "def check(solve):\n\tassert solve(\"5$0!@\") == '@!0$5'", "def check(solve):\n\tassert solve(\"sxFaMa\") == 'SXfAmA'", "def check(solve):\n\tassert solve(\"?ao\") == '?AO'", "def check(solve):\n\tassert solve(\"k&!_\") == 'K&!_'", "def check(solve):\n\tassert solve(\"-|MSfK\") == '-|msFk'", "def check(solve):\n\tassert solve(\"5%@\") == '@%5'", "def check(solve):\n\tassert solve(\"=epet*orq\") == '=EPET*ORQ'", "def check(solve):\n\tassert solve(\"^dHUM-y\") == '^Dhum-Y'", "def check(solve):\n\tassert solve(\"npKwSAD\") == 'NPkWsad'", "def check(solve):\n\tassert solve(\"55=9/9\") == '9/9=55'", "def check(solve):\n\tassert solve(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:", "def check(solve):\n\tassert solve(\"*^JOyeSI\") == '*^joYEsi'", "def check(solve):\n\tassert solve(\"yzzdc\") == 'YZZDC'", "def check(solve):\n\tassert solve(\"i!X&/T\") == 'I!x&/t'", "def check(solve):\n\tassert solve(\"mlB-*F\") == 'MLb-*f'", "def check(solve):\n\tassert solve(\"856\") == '658'", "def check(solve):\n\tassert solve(\"ifafP-OoTK%\") == 'IFAFp-oOtk%'", "def check(solve):\n\tassert solve(\"Xug\") == 'xUG'", "def check(solve):\n\tassert solve(\"~2~@0\") == '0@~2~'", "def check(solve):\n\tassert solve(\"UMm:m\") == 'umM:M'", "def check(solve):\n\tassert solve(\"6812832\") == '2382186'", "def check(solve):\n\tassert solve(\"QDF:CXB\") == 'qdf:cxb'", "def check(solve):\n\tassert solve(\"5-=@&*\") == '*&@=-5'", "def check(solve):\n\tassert solve(\"761~^_%~4\") == '4~%_^~167'", "def check(solve):\n\tassert solve(\"#$a^D\") == \"#$A^d\"", "def check(solve):\n\tassert solve(\"4hzTAP_e\") == '4HZtap_E'", "def check(solve):\n\tassert solve(\"2058786\") == '6878502'", "def check(solve):\n\tassert solve(\"yErHfPuhE\") == 'YeRhFpUHe'", "def check(solve):\n\tassert solve(\"*u~\") == '*U~'", "def check(solve):\n\tassert solve(\"g*chm\") == 'G*CHM'", "def check(solve):\n\tassert solve(\"enxhq\") == 'ENXHQ'", "def check(solve):\n\tassert solve(\"ctpx\") == 'CTPX'", "def check(solve):\n\tassert solve(\"j$&Wd\") == 'J$&wD'", "def check(solve):\n\tassert solve(\"ji$rpiwCJ\") == 'JI$RPIWcj'", "def check(solve):\n\tassert solve(\"cjG~zXx\") == 'CJg~ZxX'", "def check(solve):\n\tassert solve(\"dgksb\") == 'DGKSB'", "def check(solve):\n\tassert solve(\"827_~+=6:\") == ':6=+~_728'", "def check(solve):\n\tassert solve(\"vr_d$kBQ\") == 'VR_D$Kbq'", "def check(solve):\n\tassert solve(\"389627754\") == '457726983'", "def check(solve):\n\tassert solve(\"+:#\") == '#:+'", "def check(solve):\n\tassert solve(\"prytYOIw\") == 'PRYTyoiW'", "def check(solve):\n\tassert solve(\"+1/05*!?+\") == '+?!*50/1+'", "def check(solve):\n\tassert solve(\"$u%lZTsz\") == '$U%LztSZ'", "def check(solve):\n\tassert solve(\"qyAKc\") == 'QYakC'", "def check(solve):\n\tassert solve(\"/@-\") == '-@/'", "def check(solve):\n\tassert solve(\"iiyw\") == 'IIYW'", "def check(solve):\n\tassert solve(\"#a@C\") == \"#A@c\"", "def check(solve):\n\tassert solve(\"49623838\") == '83832694'", "def check(solve):\n\tassert solve(\"u:kx!*\") == 'U:KX!*'", "def check(solve):\n\tassert solve(\"gsl\") == 'GSL'", "def check(solve):\n\tassert solve(\"jlycko\") == 'JLYCKO'", "def check(solve):\n\tassert solve(\"MUSKIE\") == 'muskie'", "def check(solve):\n\tassert solve(\":TDr\") == ':tdR'", "def check(solve):\n\tassert solve(\"bkd\") == 'BKD'", "def check(solve):\n\tassert solve(\"DNOZ2XKDMJZSwC$\") == 'dnoz2xkdmjzsWc$'", "def check(solve):\n\tassert solve(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.", "def check(solve):\n\tassert solve(\"n$tkw\") == 'N$TKW'", "def check(solve):\n\tassert solve(\"48954\") == '45984'", "def check(solve):\n\tassert solve(\"LlWj5FD\") == 'lLwJ5fd'", "def check(solve):\n\tassert solve(\"AsDf\") == \"aSdF\"", "def check(solve):\n\tassert solve(\"@!93/5**@\") == '@**5/39!@'", "def check(solve):\n\tassert solve(\"VmVDPkI\") == 'vMvdpKi'", "def check(solve):\n\tassert solve(\"mOn\") == 'MoN'", "def check(solve):\n\tassert solve(\"059646105\") == '501646950'", "def check(solve):\n\tassert solve(\"huo^\") == 'HUO^'", "def check(solve):\n\tassert solve(\"ghgnw\") == 'GHGNW'", "def check(solve):\n\tassert solve(\"gne\") == 'GNE'", "def check(solve):\n\tassert solve(\"~~%==41\") == '14==%~~'", "def check(solve):\n\tassert solve(\"%_uoz/#?L\") == '%_UOZ/#?l'", "def check(solve):\n\tassert solve(\"w@l+zd\") == 'W@L+ZD'", "def check(solve):\n\tassert solve(\"1234\") == \"4321\"", "def check(solve):\n\tassert solve(\"EsvNrg\") == 'eSVnRG'", "def check(solve):\n\tassert solve(\"pstVx\") == 'PSTvX'", "def check(solve):\n\tassert solve(\"kLA#y:NC\") == 'Kla#Y:nc'", "def check(solve):\n\tassert solve(\"ePOjFeuu\") == 'EpoJfEUU'", "def check(solve):\n\tassert solve(\"GPJae+?*a\") == 'gpjAE+?*A'", "def check(solve):\n\tassert solve(\"Uc$$xCSQ0cN~\") == 'uC$$Xcsq0Cn~'", "def check(solve):\n\tassert solve(\"gtvtsr\") == 'GTVTSR'", "def check(solve):\n\tassert solve(\"#AsdfW^45\") == \"#aSDFw^45\"", "def check(solve):\n\tassert solve(\"6971168\") == '8611796'", "def check(solve):\n\tassert solve(\"??rwE\") == '??RWe'", "def check(solve):\n\tassert solve(\"HMYxK\") == 'hmyXk'", "def check(solve):\n\tassert solve(\"gcflna\") == 'GCFLNA'", "def check(solve):\n\tassert solve(\"~+/#\") == '#/+~'", "def check(solve):\n\tassert solve(\"glgh\") == 'GLGH'", "def check(solve):\n\tassert solve(\"?gn~\") == '?GN~'", "def check(solve):\n\tassert solve(\"73713138\") == '83131737'", "def check(solve):\n\tassert solve(\"54138\") == '83145'", "def check(solve):\n\tassert solve(\"oGzZO!NOb@Lty\") == 'OgZzo!noB@lTY'", "def check(solve):\n\tassert solve(\"Q&LKD*BmV\") == 'q&lkd*bMv'", "def check(solve):\n\tassert solve(\"13431299\") == '99213431'", "def check(solve):\n\tassert solve(\"~/uc/@p^h\") == '~/UC/@P^H'", "def check(solve):\n\tassert solve(\"4kqV&&/6+Lc\") == '4KQv&&/6+lC'", "def check(solve):\n\tassert solve(\"fqY\") == 'FQy'", "def check(solve):\n\tassert solve(\"|n*e~bx-\") == '|N*E~BX-'", "def check(solve):\n\tassert solve(\"Pj+3w:31N!s6\") == 'pJ+3W:31n!S6'", "def check(solve):\n\tassert solve(\"++skzZ\") == '++SKZz'", "def check(solve):\n\tassert solve(\"%kmlC*s\") == '%KMLc*S'", "def check(solve):\n\tassert solve(\"232948\") == '849232'", "def check(solve):\n\tassert solve(\"613\") == '316'", "def check(solve):\n\tassert solve(\"!tmFhu\") == '!TMfHU'", "def check(solve):\n\tassert solve(\"+fDs:f\") == '+FdS:F'", "def check(solve):\n\tassert solve(\"XAdrNtUNr\") == 'xaDRnTunR'", "def check(solve):\n\tassert solve(\"cqiau\") == 'CQIAU'", "def check(solve):\n\tassert solve(\"340988\") == '889043'"], "test_case_list": ["assert solve(\"#ryv@$l*\") == '#RYV@$L*'", "assert solve(\"BjdhsNs\") == 'bJDHSnS'", "assert solve(\"$883%3/\") == '/3%388$'", "assert solve(\"QnNQfv\") == 'qNnqFV'", "assert solve(\"o3LWaIl4\") == 'O3lwAiL4'", "assert solve(\"zt*#m&v\") == 'ZT*#M&V'", "assert solve(\"wDgT\") == 'WdGt'", "assert solve(\"ab\") == \"AB\"", "assert solve(\"=E!NyLi\") == '=e!nYlI'", "assert solve(\"jZVuQ\") == 'JzvUq'", "assert solve(\"UKg@xpM~G\") == 'ukG@XPm~g'", "assert solve(\"%cCcq#\") == '%CcCQ#'", "assert solve(\"++A^/?xV\") == '++a^/?Xv'", "assert solve(\"7_%\") == '%_7'", "assert solve(\"qon\") == 'QON'", "assert solve(\"giiqdy\") == 'GIIQDY'", "assert solve(\"~@8%\") == '%8@~'", "assert solve(\"^@B\") == '^@b'", "assert solve(\"?UGciW\") == '?ugCIw'", "assert solve(\"17000556\") == '65500071'", "assert solve(\"nfl*&=+$@\") == 'NFL*&=+$@'", "assert solve(\"wSdcA\") == 'WsDCa'", "assert solve(\"luG9*?%\") == 'LUg9*?%'", "assert solve(\"5$0!@\") == '@!0$5'", "assert solve(\"sxFaMa\") == 'SXfAmA'", "assert solve(\"?ao\") == '?AO'", "assert solve(\"k&!_\") == 'K&!_'", "assert solve(\"-|MSfK\") == '-|msFk'", "assert solve(\"5%@\") == '@%5'", "assert solve(\"=epet*orq\") == '=EPET*ORQ'", "assert solve(\"^dHUM-y\") == '^Dhum-Y'", "assert solve(\"npKwSAD\") == 'NPkWsad'", "assert solve(\"55=9/9\") == '9/9=55'", "assert solve(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:", "assert solve(\"*^JOyeSI\") == '*^joYEsi'", "assert solve(\"yzzdc\") == 'YZZDC'", "assert solve(\"i!X&/T\") == 'I!x&/t'", "assert solve(\"mlB-*F\") == 'MLb-*f'", "assert solve(\"856\") == '658'", "assert solve(\"ifafP-OoTK%\") == 'IFAFp-oOtk%'", "assert solve(\"Xug\") == 'xUG'", "assert solve(\"~2~@0\") == '0@~2~'", "assert solve(\"UMm:m\") == 'umM:M'", "assert solve(\"6812832\") == '2382186'", "assert solve(\"QDF:CXB\") == 'qdf:cxb'", "assert solve(\"5-=@&*\") == '*&@=-5'", "assert solve(\"761~^_%~4\") == '4~%_^~167'", "assert solve(\"#$a^D\") == \"#$A^d\"", "assert solve(\"4hzTAP_e\") == '4HZtap_E'", "assert solve(\"2058786\") == '6878502'", "assert solve(\"yErHfPuhE\") == 'YeRhFpUHe'", "assert solve(\"*u~\") == '*U~'", "assert solve(\"g*chm\") == 'G*CHM'", "assert solve(\"enxhq\") == 'ENXHQ'", "assert solve(\"ctpx\") == 'CTPX'", "assert solve(\"j$&Wd\") == 'J$&wD'", "assert solve(\"ji$rpiwCJ\") == 'JI$RPIWcj'", "assert solve(\"cjG~zXx\") == 'CJg~ZxX'", "assert solve(\"dgksb\") == 'DGKSB'", "assert solve(\"827_~+=6:\") == ':6=+~_728'", "assert solve(\"vr_d$kBQ\") == 'VR_D$Kbq'", "assert solve(\"389627754\") == '457726983'", "assert solve(\"+:#\") == '#:+'", "assert solve(\"prytYOIw\") == 'PRYTyoiW'", "assert solve(\"+1/05*!?+\") == '+?!*50/1+'", "assert solve(\"$u%lZTsz\") == '$U%LztSZ'", "assert solve(\"qyAKc\") == 'QYakC'", "assert solve(\"/@-\") == '-@/'", "assert solve(\"iiyw\") == 'IIYW'", "assert solve(\"#a@C\") == \"#A@c\"", "assert solve(\"49623838\") == '83832694'", "assert solve(\"u:kx!*\") == 'U:KX!*'", "assert solve(\"gsl\") == 'GSL'", "assert solve(\"jlycko\") == 'JLYCKO'", "assert solve(\"MUSKIE\") == 'muskie'", "assert solve(\":TDr\") == ':tdR'", "assert solve(\"bkd\") == 'BKD'", "assert solve(\"DNOZ2XKDMJZSwC$\") == 'dnoz2xkdmjzsWc$'", "assert solve(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.", "assert solve(\"n$tkw\") == 'N$TKW'", "assert solve(\"48954\") == '45984'", "assert solve(\"LlWj5FD\") == 'lLwJ5fd'", "assert solve(\"AsDf\") == \"aSdF\"", "assert solve(\"@!93/5**@\") == '@**5/39!@'", "assert solve(\"VmVDPkI\") == 'vMvdpKi'", "assert solve(\"mOn\") == 'MoN'", "assert solve(\"059646105\") == '501646950'", "assert solve(\"huo^\") == 'HUO^'", "assert solve(\"ghgnw\") == 'GHGNW'", "assert solve(\"gne\") == 'GNE'", "assert solve(\"~~%==41\") == '14==%~~'", "assert solve(\"%_uoz/#?L\") == '%_UOZ/#?l'", "assert solve(\"w@l+zd\") == 'W@L+ZD'", "assert solve(\"1234\") == \"4321\"", "assert solve(\"EsvNrg\") == 'eSVnRG'", "assert solve(\"pstVx\") == 'PSTvX'", "assert solve(\"kLA#y:NC\") == 'Kla#Y:nc'", "assert solve(\"ePOjFeuu\") == 'EpoJfEUU'", "assert solve(\"GPJae+?*a\") == 'gpjAE+?*A'", "assert solve(\"Uc$$xCSQ0cN~\") == 'uC$$Xcsq0Cn~'", "assert solve(\"gtvtsr\") == 'GTVTSR'", "assert solve(\"#AsdfW^45\") == \"#aSDFw^45\"", "assert solve(\"6971168\") == '8611796'", "assert solve(\"??rwE\") == '??RWe'", "assert solve(\"HMYxK\") == 'hmyXk'", "assert solve(\"gcflna\") == 'GCFLNA'", "assert solve(\"~+/#\") == '#/+~'", "assert solve(\"glgh\") == 'GLGH'", "assert solve(\"?gn~\") == '?GN~'", "assert solve(\"73713138\") == '83131737'", "assert solve(\"54138\") == '83145'", "assert solve(\"oGzZO!NOb@Lty\") == 'OgZzo!noB@lTY'", "assert solve(\"Q&LKD*BmV\") == 'q&lkd*bMv'", "assert solve(\"13431299\") == '99213431'", "assert solve(\"~/uc/@p^h\") == '~/UC/@P^H'", "assert solve(\"4kqV&&/6+Lc\") == '4KQv&&/6+lC'", "assert solve(\"fqY\") == 'FQy'", "assert solve(\"|n*e~bx-\") == '|N*E~BX-'", "assert solve(\"Pj+3w:31N!s6\") == 'pJ+3W:31n!S6'", "assert solve(\"++skzZ\") == '++SKZz'", "assert solve(\"%kmlC*s\") == '%KMLc*S'", "assert solve(\"232948\") == '849232'", "assert solve(\"613\") == '316'", "assert solve(\"!tmFhu\") == '!TMfHU'", "assert solve(\"+fDs:f\") == '+FdS:F'", "assert solve(\"XAdrNtUNr\") == 'xaDRnTunR'", "assert solve(\"cqiau\") == 'CQIAU'", "assert solve(\"340988\") == '889043'"], "nl": "You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    ", "func": "def solve(s):", "examples": "Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    ", "completions": ["from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function takes a string as input and returns a string.\n    If the string contains letters, it reverses the case of each letter.\n    If the string contains no letters, it reverses the entire string.\n    \"\"\"\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join(char.swapcase() if char.isalpha() else char for char in s)\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    def is_letter(c: str) -> bool:\n        return c.isalpha()\n\n    def reverse_case(c: str) -> str:\n        return c.lower() if c.isupper() else c.upper()\n\n    letters = [c for c in s if is_letter(c)]\n    \n    if not letters:\n        return s[::-1]\n    \n    reversed_case_letters = [reverse_case(c) for c in letters]\n    result = []\n    \n    for c in s:\n        if is_letter(c):\n            result.append(reversed_case_letters.pop(0))\n        else:\n            result.append(c)\n    \n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    Manipulates the input string based on the presence of letters.\n    \n    If the string contains any letters, it swaps the case of each letter.\n    If the string contains no letters, it reverses the string.\n    \n    Args:\n        s (str): The input string to be manipulated.\n    \n    Returns:\n        str: The manipulated string.\n    \"\"\"\n    if any(char.isalpha() for char in s):\n        # If there are letters, swapcase each letter\n        return ''.join(char.swapcase() if char.isalpha() else char for char in s)\n    else:\n        # If there are no letters, reverse the string\n        return ''.join(reversed(s))\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function takes a string as input and returns a manipulated string.\n    If the string contains any letters, it will reverse the case of each letter.\n    If the string contains no letters, it will reverse the entire string.\n    \n    Args:\n        s (str): The input string to be manipulated.\n    \n    Returns:\n        str: The manipulated string.\n    \"\"\"\n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        # Reverse the case of each letter in the string\n        manipulated_string = ''.join(char.swapcase() if char.isalpha() else char for char in s)\n    else:\n        # Reverse the entire string\n        manipulated_string = s[::-1]\n    \n    return manipulated_string\n", "from typing import List\n## main.py\n\nimport string\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function takes a string as input and manipulates it based on the presence of letters.\n    If the string contains letters, it reverses the case of each letter.\n    If the string does not contain any letters, it reverses the entire string.\n    \n    Args:\n        s (str): The input string to be manipulated.\n    \n    Returns:\n        str: The manipulated string.\n    \"\"\"\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join(char.lower() if char.isupper() else char.upper() if char.islower() else char for char in s)\n\n# Example usage:\n# print(solve(\"Hello World!\"))  # Output: \"!DLROw OLLEh\"\n# print(solve(\"12345\"))          # Output: \"54321\"\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function takes a string as input and returns a new string with the case of each letter reversed.\n    If the string contains no letters, it reverses the entire string.\n    \n    Args:\n        s (str): The input string.\n    \n    Returns:\n        str: The manipulated string.\n    \"\"\"\n    if any(char.isalpha() for char in s):\n        # If the string contains letters, reverse the case of each letter\n        result = []\n        for char in s:\n            if char.isupper():\n                result.append(char.lower())\n            elif char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char)\n        return ''.join(result)\n    else:\n        # If the string contains no letters, reverse the entire string\n        return s[::-1]\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    Input: a string s.\n    Output: a string with reversed cases of letters and reversed if no letters are present.\n    \"\"\"\n    # Check if the string contains any letters\n    contains_letters = any(char.isalpha() for char in s)\n    \n    if contains_letters:\n        # Iterate through each character and reverse its case\n        manipulated_chars = []\n        for char in s:\n            if char.isalpha():\n                if char.islower():\n                    manipulated_chars.append(char.upper())\n                else:\n                    manipulated_chars.append(char.lower())\n            else:\n                manipulated_chars.append(char)\n        return ''.join(manipulated_chars)\n    else:\n        # Reverse the entire string\n        return s[::-1]\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function takes a string as input and returns a modified string.\n    If the string contains any letters, it will reverse the case of each letter.\n    If the string contains no letters, it will reverse the entire string.\n    \n    Args:\n        s (str): The input string.\n    \n    Returns:\n        str: The modified string.\n    \"\"\"\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    \n    result = []\n    for char in s:\n        if char.isupper():\n            result.append(char.lower())\n        elif char.islower():\n            result.append(char.upper())\n        else:\n            result.append(char)\n    \n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function takes a string as input and returns a string.\n    If the string contains letters, it reverses the case of each letter.\n    If there are no letters, it reverses the entire string.\n    \"\"\"\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    \n    result = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n    \n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    result = []\n    has_letters = False\n\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n\n    if not has_letters:\n        return s[::-1]\n\n    return ''.join(result)\n"], "plans": ["requirement analysis:\nThe original requirements specify a function that manipulates a string based on the type of character at each index. If the character is a letter, it should reverse its case. If there are no letters, the entire string should be reversed. The function should handle empty strings gracefully. This requirement is clear and concise, providing a clear path for implementation.\nrequirement pool:\n- Implement the function to reverse the case of letters and handle empty strings.\n- Ensure the application is responsive and works on any device.\n- Design a visually appealing and easy-to-navigate user interface.\nWe will implement the function by iterating through each character in the string. If the character is a letter, we will reverse its case. If there are no letters, we will reverse the entire string. This approach will ensure that the function handles both cases as specified.\n", "requirement analysis:\nThe original requirements specify a function that manipulates a string based on the type of character at each index. If the character is a letter, it should reverse its case. If there are no letters, the entire string should be reversed. The function should handle empty strings gracefully. This requirement is clear and concise, providing a clear objective for the function.\nrequirement pool:\n- The main code should correctly reverse the case of letters and leave non-letter characters unchanged.\n- The function should handle empty strings by returning an empty string.\n- The function should reverse the entire string if it contains no letters.\n- Ensure the solution is efficient and handles edge cases appropriately.\n- Implement a user-friendly interface for easy interaction.\nWe will use Python's built-in string manipulation methods along with a simple conditional logic to achieve the desired functionality. The function will check each character in the string to determine if it's a letter. If it is, the function will reverse its case. If the string contains no letters, the function will reverse the entire string.\n", "requirement analysis:\nThe original requirements specify a function that manipulates a string based on the type of character at each index. If the character is a letter, it should reverse its case. If there are no letters, the entire string should be reversed. The function should handle empty strings gracefully. This requirement is clear and concise, providing a clear objective for the function.\nrequirement pool:\n- Implement the function to reverse the case of letters and handle empty strings.\n- Ensure the function can be used across different devices and is responsive.\n- Design a visually appealing and user-friendly interface.\nWe will use Python's built-in string manipulation methods along with a simple conditional check to determine if a character is a letter. If a character is a letter, we will use the `swapcase()` method to reverse its case. If the string contains no letters, we will use the `reversed()` function to reverse the string. This approach ensures that the function handles both cases gracefully, including handling empty strings.\n", "requirement analysis:\nThe original requirements specify a function that manipulates a string based on the type of character encountered. It should reverse the case of letters and reverse the entire string if no letters are present. The function should handle empty strings gracefully. This requirement is clear and concise, providing a clear path for implementation.\nrequirement pool:\n- Implement the function to reverse the case of letters and handle empty strings\n- Ensure the application is responsive and works on various devices\n- Design a visually appealing and intuitive user interface\nWe will implement the function by iterating through each character in the string. If the character is a letter, we will reverse its case. If there are no letters in the string, we will reverse the entire string. This approach will ensure that the function handles both cases (with and without letters) appropriately.\n", "requirement analysis:\nThe original requirements specify a function that manipulates a string based on the type of character at each index. If the character is a letter, it should reverse its case. If there are no letters, the entire string should be reversed. The function should handle empty strings gracefully. This requirement is clear and straightforward, focusing on string manipulation and handling edge cases.\nrequirement pool:\n- Implement the function to reverse the case of letters and handle non-letter characters as specified.\n- Ensure the function gracefully handles empty strings.\n- Design a user-friendly interface that allows users to easily input and view the results.\n- Optimize the application for various devices to ensure accessibility.\nWe will implement the function by iterating through each character in the string. If the character is a letter, we will reverse its case. If there are no letters, we will reverse the entire string. This approach will ensure that the function handles both letter and non-letter characters appropriately and gracefully manages empty strings.\n", "requirement analysis:\nThe original requirements specify a function that manipulates a string based on the type of character at each index. If the string contains letters, it should reverse their case. If the string contains no letters, it should reverse the entire string. The function should handle empty strings gracefully. This requirement is clear and concise, providing a clear path for implementation.\nrequirement pool:\n- Implement the function to reverse the case of letters and handle empty strings.\n- Ensure the function works across different devices and maintains responsiveness.\n- Design a user-friendly interface that is visually appealing and easy to navigate.\nWe will implement the function by first checking if the string contains any letters. If it does, we will iterate through each character, reversing the case of letters. If the string contains no letters, we will simply reverse the entire string. This approach ensures that the function handles both cases gracefully and efficiently.\n", "requirement analysis:\nThe original requirements specify a function that manipulates a string based on the type of character at each index. If the character is a letter, it should reverse its case. If there are no letters, the entire string should be reversed. The function should handle empty strings gracefully. This requirement is clear and concise, providing a clear path for implementation.\nrequirement pool:\n- The main code should correctly reverse the case of letters and leave non-letter characters unchanged.\n- The function should handle empty strings by returning them as is, or reversed if no letters are present.\n- Ensure the application is responsive and works well on various devices.\n- Develop a visually appealing and user-friendly interface.\n- Implement features to enhance user engagement and satisfaction.\nWe will implement the function by first checking if the string contains any letters. If it does, we will iterate through each character, reversing the case of letters and leaving non-letter characters unchanged. If the string contains no letters, we will reverse the entire string. This approach ensures that the function handles both cases gracefully.\n", "requirement analysis:\nThe function should handle various input strings, including those with special characters, numbers, and empty strings. It should also handle the case sensitivity of letters and reverse the case of letters while keeping non-letter characters unchanged. The function should return the modified string or reverse the string if no letters are present.\nrequirement pool:\n- The main code should correctly handle the case of letters and non-letters.\n- The function should return the reversed string if no letters are present.\n- Ensure the application is responsive and works well on all devices.\n- Implement a visually appealing and user-friendly interface.\n- Optimize the performance to ensure smooth operation.\nWe will implement the function `solve` by first checking if the input string contains any letters. If it does, we will iterate through each character, reversing the case of letters while leaving non-letter characters unchanged. If the string contains no letters, we will reverse the entire string. This approach ensures that the function handles various input strings, including those with special characters, numbers, and empty strings, while maintaining a simple and clear implementation.\n", "requirement analysis:\nThe original requirements specify a function that manipulates a string based on the type of character at each index. If the character is a letter, it should reverse its case. If there are no letters, the entire string should be reversed. The function should handle empty strings gracefully. This requirement is clear and concise, providing a clear path for implementation.\nrequirement pool:\n- Implement the function to reverse the case of letters and handle empty strings.\n- Ensure the function works across different devices and is responsive.\n- Design a visually appealing and intuitive user interface.\nWe will implement the function by iterating through each character in the string. If the character is a letter, we will reverse its case. If there are no letters, we will reverse the entire string. This approach will ensure that the function handles both cases as specified.\n", "requirement analysis:\nThe original requirements specify a function that manipulates a string based on the type of character at each index. If the string contains letters, it should reverse their case. If the string contains no letters, it should reverse the entire string. The function should handle empty strings gracefully.\nrequirement pool:\n- The main code should correctly manipulate the string based on the given conditions.\n- The function should handle edge cases such as empty strings.\n- The user interface should be intuitive and visually appealing.\nWe will implement the function `solve` by iterating through each character in the input string `s`. We will check if the character is a letter and then reverse its case. If the string contains no letters, we will reverse the entire string. This approach will ensure that the function handles both cases (with and without letters) as specified.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [128, 128, 128, 128, 128, 128, 128, 128, 128, 128], "completion": "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    result = []\n    has_letters = False\n\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n\n    if not has_letters:\n        return s[::-1]\n\n    return ''.join(result)\n", "passed": true, "pass": true, "pass_num": 10, "round": 467, "repair_prompt": ["def solve(s):\t\n'''You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Ensure your solution handles empty strings gracefully.\nExamples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    '''"], "mutate_method": "add_1_sentence_at_end", "parent_index": 211}
