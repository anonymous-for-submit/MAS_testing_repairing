{"task_id": "HumanEval/161", "prompt": "def solve(s):\t\n'''You are given a string s.  \n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.  \n    If the string contains no letters, reverse the string.  \n    The function should return the resulted string.  \n    Consider edge cases where the string might be empty or very large.\nExamples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    '''", "entry_point": "solve", "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "test": ["def check(solve):\n\tassert solve(\"#ryv@$l*\") == '#RYV@$L*'", "def check(solve):\n\tassert solve(\"BjdhsNs\") == 'bJDHSnS'", "def check(solve):\n\tassert solve(\"$883%3/\") == '/3%388$'", "def check(solve):\n\tassert solve(\"QnNQfv\") == 'qNnqFV'", "def check(solve):\n\tassert solve(\"o3LWaIl4\") == 'O3lwAiL4'", "def check(solve):\n\tassert solve(\"zt*#m&v\") == 'ZT*#M&V'", "def check(solve):\n\tassert solve(\"wDgT\") == 'WdGt'", "def check(solve):\n\tassert solve(\"ab\") == \"AB\"", "def check(solve):\n\tassert solve(\"=E!NyLi\") == '=e!nYlI'", "def check(solve):\n\tassert solve(\"jZVuQ\") == 'JzvUq'", "def check(solve):\n\tassert solve(\"UKg@xpM~G\") == 'ukG@XPm~g'", "def check(solve):\n\tassert solve(\"%cCcq#\") == '%CcCQ#'", "def check(solve):\n\tassert solve(\"++A^/?xV\") == '++a^/?Xv'", "def check(solve):\n\tassert solve(\"7_%\") == '%_7'", "def check(solve):\n\tassert solve(\"qon\") == 'QON'", "def check(solve):\n\tassert solve(\"giiqdy\") == 'GIIQDY'", "def check(solve):\n\tassert solve(\"~@8%\") == '%8@~'", "def check(solve):\n\tassert solve(\"^@B\") == '^@b'", "def check(solve):\n\tassert solve(\"?UGciW\") == '?ugCIw'", "def check(solve):\n\tassert solve(\"17000556\") == '65500071'", "def check(solve):\n\tassert solve(\"nfl*&=+$@\") == 'NFL*&=+$@'", "def check(solve):\n\tassert solve(\"wSdcA\") == 'WsDCa'", "def check(solve):\n\tassert solve(\"luG9*?%\") == 'LUg9*?%'", "def check(solve):\n\tassert solve(\"5$0!@\") == '@!0$5'", "def check(solve):\n\tassert solve(\"sxFaMa\") == 'SXfAmA'", "def check(solve):\n\tassert solve(\"?ao\") == '?AO'", "def check(solve):\n\tassert solve(\"k&!_\") == 'K&!_'", "def check(solve):\n\tassert solve(\"-|MSfK\") == '-|msFk'", "def check(solve):\n\tassert solve(\"5%@\") == '@%5'", "def check(solve):\n\tassert solve(\"=epet*orq\") == '=EPET*ORQ'", "def check(solve):\n\tassert solve(\"^dHUM-y\") == '^Dhum-Y'", "def check(solve):\n\tassert solve(\"npKwSAD\") == 'NPkWsad'", "def check(solve):\n\tassert solve(\"55=9/9\") == '9/9=55'", "def check(solve):\n\tassert solve(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:", "def check(solve):\n\tassert solve(\"*^JOyeSI\") == '*^joYEsi'", "def check(solve):\n\tassert solve(\"yzzdc\") == 'YZZDC'", "def check(solve):\n\tassert solve(\"i!X&/T\") == 'I!x&/t'", "def check(solve):\n\tassert solve(\"mlB-*F\") == 'MLb-*f'", "def check(solve):\n\tassert solve(\"856\") == '658'", "def check(solve):\n\tassert solve(\"ifafP-OoTK%\") == 'IFAFp-oOtk%'", "def check(solve):\n\tassert solve(\"Xug\") == 'xUG'", "def check(solve):\n\tassert solve(\"~2~@0\") == '0@~2~'", "def check(solve):\n\tassert solve(\"UMm:m\") == 'umM:M'", "def check(solve):\n\tassert solve(\"6812832\") == '2382186'", "def check(solve):\n\tassert solve(\"QDF:CXB\") == 'qdf:cxb'", "def check(solve):\n\tassert solve(\"5-=@&*\") == '*&@=-5'", "def check(solve):\n\tassert solve(\"761~^_%~4\") == '4~%_^~167'", "def check(solve):\n\tassert solve(\"#$a^D\") == \"#$A^d\"", "def check(solve):\n\tassert solve(\"4hzTAP_e\") == '4HZtap_E'", "def check(solve):\n\tassert solve(\"2058786\") == '6878502'", "def check(solve):\n\tassert solve(\"yErHfPuhE\") == 'YeRhFpUHe'", "def check(solve):\n\tassert solve(\"*u~\") == '*U~'", "def check(solve):\n\tassert solve(\"g*chm\") == 'G*CHM'", "def check(solve):\n\tassert solve(\"enxhq\") == 'ENXHQ'", "def check(solve):\n\tassert solve(\"ctpx\") == 'CTPX'", "def check(solve):\n\tassert solve(\"j$&Wd\") == 'J$&wD'", "def check(solve):\n\tassert solve(\"ji$rpiwCJ\") == 'JI$RPIWcj'", "def check(solve):\n\tassert solve(\"cjG~zXx\") == 'CJg~ZxX'", "def check(solve):\n\tassert solve(\"dgksb\") == 'DGKSB'", "def check(solve):\n\tassert solve(\"827_~+=6:\") == ':6=+~_728'", "def check(solve):\n\tassert solve(\"vr_d$kBQ\") == 'VR_D$Kbq'", "def check(solve):\n\tassert solve(\"389627754\") == '457726983'", "def check(solve):\n\tassert solve(\"+:#\") == '#:+'", "def check(solve):\n\tassert solve(\"prytYOIw\") == 'PRYTyoiW'", "def check(solve):\n\tassert solve(\"+1/05*!?+\") == '+?!*50/1+'", "def check(solve):\n\tassert solve(\"$u%lZTsz\") == '$U%LztSZ'", "def check(solve):\n\tassert solve(\"qyAKc\") == 'QYakC'", "def check(solve):\n\tassert solve(\"/@-\") == '-@/'", "def check(solve):\n\tassert solve(\"iiyw\") == 'IIYW'", "def check(solve):\n\tassert solve(\"#a@C\") == \"#A@c\"", "def check(solve):\n\tassert solve(\"49623838\") == '83832694'", "def check(solve):\n\tassert solve(\"u:kx!*\") == 'U:KX!*'", "def check(solve):\n\tassert solve(\"gsl\") == 'GSL'", "def check(solve):\n\tassert solve(\"jlycko\") == 'JLYCKO'", "def check(solve):\n\tassert solve(\"MUSKIE\") == 'muskie'", "def check(solve):\n\tassert solve(\":TDr\") == ':tdR'", "def check(solve):\n\tassert solve(\"bkd\") == 'BKD'", "def check(solve):\n\tassert solve(\"DNOZ2XKDMJZSwC$\") == 'dnoz2xkdmjzsWc$'", "def check(solve):\n\tassert solve(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.", "def check(solve):\n\tassert solve(\"n$tkw\") == 'N$TKW'", "def check(solve):\n\tassert solve(\"48954\") == '45984'", "def check(solve):\n\tassert solve(\"LlWj5FD\") == 'lLwJ5fd'", "def check(solve):\n\tassert solve(\"AsDf\") == \"aSdF\"", "def check(solve):\n\tassert solve(\"@!93/5**@\") == '@**5/39!@'", "def check(solve):\n\tassert solve(\"VmVDPkI\") == 'vMvdpKi'", "def check(solve):\n\tassert solve(\"mOn\") == 'MoN'", "def check(solve):\n\tassert solve(\"059646105\") == '501646950'", "def check(solve):\n\tassert solve(\"huo^\") == 'HUO^'", "def check(solve):\n\tassert solve(\"ghgnw\") == 'GHGNW'", "def check(solve):\n\tassert solve(\"gne\") == 'GNE'", "def check(solve):\n\tassert solve(\"~~%==41\") == '14==%~~'", "def check(solve):\n\tassert solve(\"%_uoz/#?L\") == '%_UOZ/#?l'", "def check(solve):\n\tassert solve(\"w@l+zd\") == 'W@L+ZD'", "def check(solve):\n\tassert solve(\"1234\") == \"4321\"", "def check(solve):\n\tassert solve(\"EsvNrg\") == 'eSVnRG'", "def check(solve):\n\tassert solve(\"pstVx\") == 'PSTvX'", "def check(solve):\n\tassert solve(\"kLA#y:NC\") == 'Kla#Y:nc'", "def check(solve):\n\tassert solve(\"ePOjFeuu\") == 'EpoJfEUU'", "def check(solve):\n\tassert solve(\"GPJae+?*a\") == 'gpjAE+?*A'", "def check(solve):\n\tassert solve(\"Uc$$xCSQ0cN~\") == 'uC$$Xcsq0Cn~'", "def check(solve):\n\tassert solve(\"gtvtsr\") == 'GTVTSR'", "def check(solve):\n\tassert solve(\"#AsdfW^45\") == \"#aSDFw^45\"", "def check(solve):\n\tassert solve(\"6971168\") == '8611796'", "def check(solve):\n\tassert solve(\"??rwE\") == '??RWe'", "def check(solve):\n\tassert solve(\"HMYxK\") == 'hmyXk'", "def check(solve):\n\tassert solve(\"gcflna\") == 'GCFLNA'", "def check(solve):\n\tassert solve(\"~+/#\") == '#/+~'", "def check(solve):\n\tassert solve(\"glgh\") == 'GLGH'", "def check(solve):\n\tassert solve(\"?gn~\") == '?GN~'", "def check(solve):\n\tassert solve(\"73713138\") == '83131737'", "def check(solve):\n\tassert solve(\"54138\") == '83145'", "def check(solve):\n\tassert solve(\"oGzZO!NOb@Lty\") == 'OgZzo!noB@lTY'", "def check(solve):\n\tassert solve(\"Q&LKD*BmV\") == 'q&lkd*bMv'", "def check(solve):\n\tassert solve(\"13431299\") == '99213431'", "def check(solve):\n\tassert solve(\"~/uc/@p^h\") == '~/UC/@P^H'", "def check(solve):\n\tassert solve(\"4kqV&&/6+Lc\") == '4KQv&&/6+lC'", "def check(solve):\n\tassert solve(\"fqY\") == 'FQy'", "def check(solve):\n\tassert solve(\"|n*e~bx-\") == '|N*E~BX-'", "def check(solve):\n\tassert solve(\"Pj+3w:31N!s6\") == 'pJ+3W:31n!S6'", "def check(solve):\n\tassert solve(\"++skzZ\") == '++SKZz'", "def check(solve):\n\tassert solve(\"%kmlC*s\") == '%KMLc*S'", "def check(solve):\n\tassert solve(\"232948\") == '849232'", "def check(solve):\n\tassert solve(\"613\") == '316'", "def check(solve):\n\tassert solve(\"!tmFhu\") == '!TMfHU'", "def check(solve):\n\tassert solve(\"+fDs:f\") == '+FdS:F'", "def check(solve):\n\tassert solve(\"XAdrNtUNr\") == 'xaDRnTunR'", "def check(solve):\n\tassert solve(\"cqiau\") == 'CQIAU'", "def check(solve):\n\tassert solve(\"340988\") == '889043'"], "test_case_list": ["assert solve(\"#ryv@$l*\") == '#RYV@$L*'", "assert solve(\"BjdhsNs\") == 'bJDHSnS'", "assert solve(\"$883%3/\") == '/3%388$'", "assert solve(\"QnNQfv\") == 'qNnqFV'", "assert solve(\"o3LWaIl4\") == 'O3lwAiL4'", "assert solve(\"zt*#m&v\") == 'ZT*#M&V'", "assert solve(\"wDgT\") == 'WdGt'", "assert solve(\"ab\") == \"AB\"", "assert solve(\"=E!NyLi\") == '=e!nYlI'", "assert solve(\"jZVuQ\") == 'JzvUq'", "assert solve(\"UKg@xpM~G\") == 'ukG@XPm~g'", "assert solve(\"%cCcq#\") == '%CcCQ#'", "assert solve(\"++A^/?xV\") == '++a^/?Xv'", "assert solve(\"7_%\") == '%_7'", "assert solve(\"qon\") == 'QON'", "assert solve(\"giiqdy\") == 'GIIQDY'", "assert solve(\"~@8%\") == '%8@~'", "assert solve(\"^@B\") == '^@b'", "assert solve(\"?UGciW\") == '?ugCIw'", "assert solve(\"17000556\") == '65500071'", "assert solve(\"nfl*&=+$@\") == 'NFL*&=+$@'", "assert solve(\"wSdcA\") == 'WsDCa'", "assert solve(\"luG9*?%\") == 'LUg9*?%'", "assert solve(\"5$0!@\") == '@!0$5'", "assert solve(\"sxFaMa\") == 'SXfAmA'", "assert solve(\"?ao\") == '?AO'", "assert solve(\"k&!_\") == 'K&!_'", "assert solve(\"-|MSfK\") == '-|msFk'", "assert solve(\"5%@\") == '@%5'", "assert solve(\"=epet*orq\") == '=EPET*ORQ'", "assert solve(\"^dHUM-y\") == '^Dhum-Y'", "assert solve(\"npKwSAD\") == 'NPkWsad'", "assert solve(\"55=9/9\") == '9/9=55'", "assert solve(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:", "assert solve(\"*^JOyeSI\") == '*^joYEsi'", "assert solve(\"yzzdc\") == 'YZZDC'", "assert solve(\"i!X&/T\") == 'I!x&/t'", "assert solve(\"mlB-*F\") == 'MLb-*f'", "assert solve(\"856\") == '658'", "assert solve(\"ifafP-OoTK%\") == 'IFAFp-oOtk%'", "assert solve(\"Xug\") == 'xUG'", "assert solve(\"~2~@0\") == '0@~2~'", "assert solve(\"UMm:m\") == 'umM:M'", "assert solve(\"6812832\") == '2382186'", "assert solve(\"QDF:CXB\") == 'qdf:cxb'", "assert solve(\"5-=@&*\") == '*&@=-5'", "assert solve(\"761~^_%~4\") == '4~%_^~167'", "assert solve(\"#$a^D\") == \"#$A^d\"", "assert solve(\"4hzTAP_e\") == '4HZtap_E'", "assert solve(\"2058786\") == '6878502'", "assert solve(\"yErHfPuhE\") == 'YeRhFpUHe'", "assert solve(\"*u~\") == '*U~'", "assert solve(\"g*chm\") == 'G*CHM'", "assert solve(\"enxhq\") == 'ENXHQ'", "assert solve(\"ctpx\") == 'CTPX'", "assert solve(\"j$&Wd\") == 'J$&wD'", "assert solve(\"ji$rpiwCJ\") == 'JI$RPIWcj'", "assert solve(\"cjG~zXx\") == 'CJg~ZxX'", "assert solve(\"dgksb\") == 'DGKSB'", "assert solve(\"827_~+=6:\") == ':6=+~_728'", "assert solve(\"vr_d$kBQ\") == 'VR_D$Kbq'", "assert solve(\"389627754\") == '457726983'", "assert solve(\"+:#\") == '#:+'", "assert solve(\"prytYOIw\") == 'PRYTyoiW'", "assert solve(\"+1/05*!?+\") == '+?!*50/1+'", "assert solve(\"$u%lZTsz\") == '$U%LztSZ'", "assert solve(\"qyAKc\") == 'QYakC'", "assert solve(\"/@-\") == '-@/'", "assert solve(\"iiyw\") == 'IIYW'", "assert solve(\"#a@C\") == \"#A@c\"", "assert solve(\"49623838\") == '83832694'", "assert solve(\"u:kx!*\") == 'U:KX!*'", "assert solve(\"gsl\") == 'GSL'", "assert solve(\"jlycko\") == 'JLYCKO'", "assert solve(\"MUSKIE\") == 'muskie'", "assert solve(\":TDr\") == ':tdR'", "assert solve(\"bkd\") == 'BKD'", "assert solve(\"DNOZ2XKDMJZSwC$\") == 'dnoz2xkdmjzsWc$'", "assert solve(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.", "assert solve(\"n$tkw\") == 'N$TKW'", "assert solve(\"48954\") == '45984'", "assert solve(\"LlWj5FD\") == 'lLwJ5fd'", "assert solve(\"AsDf\") == \"aSdF\"", "assert solve(\"@!93/5**@\") == '@**5/39!@'", "assert solve(\"VmVDPkI\") == 'vMvdpKi'", "assert solve(\"mOn\") == 'MoN'", "assert solve(\"059646105\") == '501646950'", "assert solve(\"huo^\") == 'HUO^'", "assert solve(\"ghgnw\") == 'GHGNW'", "assert solve(\"gne\") == 'GNE'", "assert solve(\"~~%==41\") == '14==%~~'", "assert solve(\"%_uoz/#?L\") == '%_UOZ/#?l'", "assert solve(\"w@l+zd\") == 'W@L+ZD'", "assert solve(\"1234\") == \"4321\"", "assert solve(\"EsvNrg\") == 'eSVnRG'", "assert solve(\"pstVx\") == 'PSTvX'", "assert solve(\"kLA#y:NC\") == 'Kla#Y:nc'", "assert solve(\"ePOjFeuu\") == 'EpoJfEUU'", "assert solve(\"GPJae+?*a\") == 'gpjAE+?*A'", "assert solve(\"Uc$$xCSQ0cN~\") == 'uC$$Xcsq0Cn~'", "assert solve(\"gtvtsr\") == 'GTVTSR'", "assert solve(\"#AsdfW^45\") == \"#aSDFw^45\"", "assert solve(\"6971168\") == '8611796'", "assert solve(\"??rwE\") == '??RWe'", "assert solve(\"HMYxK\") == 'hmyXk'", "assert solve(\"gcflna\") == 'GCFLNA'", "assert solve(\"~+/#\") == '#/+~'", "assert solve(\"glgh\") == 'GLGH'", "assert solve(\"?gn~\") == '?GN~'", "assert solve(\"73713138\") == '83131737'", "assert solve(\"54138\") == '83145'", "assert solve(\"oGzZO!NOb@Lty\") == 'OgZzo!noB@lTY'", "assert solve(\"Q&LKD*BmV\") == 'q&lkd*bMv'", "assert solve(\"13431299\") == '99213431'", "assert solve(\"~/uc/@p^h\") == '~/UC/@P^H'", "assert solve(\"4kqV&&/6+Lc\") == '4KQv&&/6+lC'", "assert solve(\"fqY\") == 'FQy'", "assert solve(\"|n*e~bx-\") == '|N*E~BX-'", "assert solve(\"Pj+3w:31N!s6\") == 'pJ+3W:31n!S6'", "assert solve(\"++skzZ\") == '++SKZz'", "assert solve(\"%kmlC*s\") == '%KMLc*S'", "assert solve(\"232948\") == '849232'", "assert solve(\"613\") == '316'", "assert solve(\"!tmFhu\") == '!TMfHU'", "assert solve(\"+fDs:f\") == '+FdS:F'", "assert solve(\"XAdrNtUNr\") == 'xaDRnTunR'", "assert solve(\"cqiau\") == 'CQIAU'", "assert solve(\"340988\") == '889043'"], "nl": "You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    ", "func": "def solve(s):", "examples": "Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    ", "completions": ["from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function takes a string as input and returns a modified string.\n    If the string contains any letters, it will reverse the case of each letter.\n    If the string contains no letters, it will reverse the entire string.\n    \n    Args:\n        s (str): The input string.\n    \n    Returns:\n        str: The modified string with reversed cases of letters and reversed if no letters.\n    \"\"\"\n    # Check if the string contains any letters\n    has_letters = any(char.isalpha() for char in s)\n    \n    if not has_letters:\n        # If no letters, reverse the entire string\n        return s[::-1]\n    else:\n        # If letters are present, reverse the case of each letter\n        result = []\n        for char in s:\n            if char.isalpha():\n                if char.islower():\n                    result.append(char.upper())\n                else:\n                    result.append(char.lower())\n            else:\n                result.append(char)\n        return ''.join(result)\n\n# Example usage:\n# print(solve(\"Hello, World!\"))  # Output: \"!DLROw ,OLLEh\"\n# print(solve(\"12345\"))           # Output: \"54321\"\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function takes a string as input and returns a new string with the case of the letters reversed\n    if the string contains any letters. If the string contains no letters, it returns the string reversed.\n    \n    Args:\n        s (str): The input string.\n    \n    Returns:\n        str: The processed string.\n    \"\"\"\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    Process the input string by reversing the case of letters and keeping non-letter characters unchanged.\n\n    Args:\n        s (str): The input string to be processed.\n\n    Returns:\n        str: The processed string with letters having their cases reversed and non-letter characters unchanged.\n    \"\"\"\n    result = []\n    \n    for char in s:\n        if char.isalpha():  # Check if the character is a letter\n            if char.islower():\n                result.append(char.upper())  # Reverse case to upper\n            else:\n                result.append(char.lower())  # Reverse case to lower\n        else:\n            result.append(char)  # Append non-letter characters as is\n    \n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function checks if the input string contains any letters.\n    If no letters are found, it reverses the entire string.\n    If letters are found, it reverses the case of each letter.\n    \n    Args:\n        s (str): The input string to be processed.\n    \n    Returns:\n        str: The modified string based on the presence of letters.\n    \"\"\"\n    # Check if the string contains any letters\n    if any(char.isalpha() for char in s):\n        # Reverse the case of each letter\n        return ''.join(char.lower() if char.isupper() else char.upper() for char in s[::-1])\n    else:\n        # Reverse the entire string\n        return s[::-1]\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function takes a string as input and returns a new string with the case of each letter reversed,\n    while keeping non-letter characters unchanged. If the input string contains no letters, the entire\n    string is reversed.\n    \n    Args:\n        s (str): The input string.\n    \n    Returns:\n        str: The modified string.\n    \"\"\"\n    import string\n\n    def is_letter(char):\n        return char in string.ascii_letters\n\n    def reverse_case(char):\n        return char.lower() if char.isupper() else char.upper()\n\n    if not any(is_letter(char) for char in s):\n        return s[::-1]\n\n    result = []\n    for char in s:\n        if is_letter(char):\n            result.append(reverse_case(char))\n        else:\n            result.append(char)\n\n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function takes a string as input and returns a processed string.\n    The processing involves checking if the string contains any letters.\n    If it does, it iterates through each character, reversing the case of letters\n    while leaving non-letter characters unchanged. If the string contains no letters,\n    it reverses the entire string.\n    \"\"\"\n    def is_letter(c: str) -> bool:\n        \"\"\"Helper function to check if a character is a letter.\"\"\"\n        return c.isalpha()\n\n    def reverse_case(c: str) -> str:\n        \"\"\"Helper function to reverse the case of a letter.\"\"\"\n        return c.lower() if c.isupper() else c.upper()\n\n    if not any(is_letter(char) for char in s):\n        # If no letters, reverse the entire string\n        return s[::-1]\n    else:\n        # If letters exist, reverse the case of each letter\n        result = []\n        for char in s:\n            if is_letter(char):\n                result.append(reverse_case(char))\n            else:\n                result.append(char)\n        return ''.join(result)\n\n# Example usage:\n# print(solve(\"Hello, World!\"))  # Output: \"!DLROw ,OLLEh\"\n# print(solve(\"12345\"))           # Output: \"54321\"\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function takes a string as input and returns a new string with the case of each letter reversed,\n    while all other characters remain unchanged.\n    \n    Args:\n        s (str): The input string.\n    \n    Returns:\n        str: A new string with the case of each letter reversed.\n    \"\"\"\n    if not s:\n        return s\n    \n    result = []\n    \n    for char in s:\n        if char.isalpha():\n            result.append(char.swapcase())\n        else:\n            result.append(char)\n    \n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function takes a string as input and returns a modified string based on the presence of letters.\n    If the string contains no letters, it reverses the string.\n    If the string contains letters, it reverses the case of the letters.\n    \n    Args:\n        s (str): The input string.\n    \n    Returns:\n        str: The modified string.\n    \"\"\"\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        result = []\n        for char in s:\n            if char.isalpha():\n                if char.islower():\n                    result.append(char.upper())\n                else:\n                    result.append(char.lower())\n            else:\n                result.append(char)\n        return ''.join(result)\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    This function takes a string as input and returns a new string with the case of each letter reversed,\n    while leaving non-letter characters unchanged. If the input string contains no letters, the function\n    will return the reversed string.\n    \n    Args:\n        s (str): The input string.\n    \n    Returns:\n        str: A new string with the case of each letter reversed, or the entire string reversed if it contains no letters.\n    \"\"\"\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    \n    result = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n    \n    return ''.join(result)\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    result = []\n    has_letters = False\n\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n\n    if not has_letters:\n        return s[::-1]\n\n    return ''.join(result)\n"], "plans": ["requirement analysis:\nThe original requirements specify a function that processes a string based on the type of character at each position. If the character is a letter, it should reverse its case. If there are no letters, the entire string should be reversed. The function should handle edge cases such as empty strings and very large strings.\nrequirement pool:\n- The main code should correctly process the string based on the given rules.\n- The function should handle edge cases such as empty strings and strings without letters.\n- The application should be responsive and handle large strings efficiently.\n- The user interface should be intuitive and easy to use.\n- The application should be accessible on any device.\nWe will implement the function `solve` by using Python's built-in string manipulation methods and a simple conditional check to determine if the character is a letter. The function will iterate through each character in the string, reverse its case if it's a letter, and return the modified string. If the string contains no letters, the function will reverse the entire string.\n", "requirement analysis:\nThe function should handle various edge cases such as empty strings, strings with only non-letter characters, and very large strings. It should also be efficient in terms of time and space complexity.\nrequirement pool:\n- The main code should process each character in the string and reverse its case if it's a letter.\n- If the string contains no letters, the function should reverse the string.\n- Ensure the function handles edge cases such as empty strings and strings with only non-letter characters efficiently.\n- Optimize the function for performance, especially for very large strings.\nWe will use Python's built-in functions and string manipulation capabilities to achieve the desired functionality. The main challenge lies in efficiently handling different edge cases such as empty strings and strings composed solely of non-letter characters. We will also ensure that the function is optimized for performance, especially for very large strings.\n", "requirement analysis:\nThe original requirements specify a function that processes a string based on the type of character at each position. If the character is a letter, it should reverse its case. If there are no letters, the entire string should be reversed. The function should handle edge cases such as empty strings and very large strings.\nrequirement pool:\n- The main code should correctly process the string based on the given rules.\n- The function should handle edge cases such as empty strings and strings without letters.\n- The application should be responsive and work well on any device.\n- The UI should be clean and easy to use.\n- The application should be fast and efficient.\nWe will use Python's built-in functions and string manipulation capabilities to achieve the desired functionality. The main challenge is to efficiently check each character in the string and apply the case reversal or string reversal based on the character type. We will use a simple loop to iterate through the string and conditional checks to determine if a character is a letter.\n", "requirement analysis:\nThe function needs to handle various edge cases such as empty strings, strings with only non-letter characters, and very large strings. It should also reverse the case of letters while keeping non-letter characters unchanged. If the string contains no letters, the function should reverse the entire string.\nrequirement pool:\n- The main code should handle the case reversal for letters and keep non-letter characters unchanged.\n- The function should handle edge cases where the string is empty or contains no letters.\n- The application should be responsive and work efficiently on any device.\n- The UI should be clean and intuitive, providing a seamless user experience.\nWe will use Python's built-in string manipulation functions and a simple conditional check to determine if a character is a letter. If the string contains no letters, we will reverse the entire string. This approach ensures that the function handles edge cases effectively and performs efficiently even with large strings.\n", "requirement analysis:\nThe function needs to handle various edge cases such as empty strings, strings with only non-letter characters, and very large strings. It should also be able to reverse the case of letters while keeping non-letter characters unchanged. The function should return the modified string or reverse the entire string if no letters are present.\nrequirement pool:\n- The main code should handle the case reversal for letters and keep non-letter characters unchanged.\n- The function should consider edge cases where the string might be empty or contain only non-letter characters.\n- The application should be able to handle large strings efficiently.\n- The UI should be simple and responsive, suitable for various devices.\n- Implement a feature to reverse the entire string if no letters are present.\nWe will implement the function by first checking if the string contains any letters. If it does, we will iterate through the string and reverse the case of each letter while keeping non-letter characters unchanged. If the string contains no letters, we will reverse the entire string. This approach will ensure that the function handles various edge cases efficiently.\n", "requirement analysis:\nThe original requirements specify a function that processes a string based on the type of character at each position. If the character is a letter, it should reverse its case. If the string contains no letters, the entire string should be reversed. The function should handle edge cases such as empty strings and very large strings.\nrequirement pool:\n- The main code should correctly process the string based on the specified rules.\n- The function should handle edge cases such as empty strings and strings without letters.\n- The application should be responsive and handle large strings efficiently.\n- The user interface should be intuitive and easy to use.\n- The application should be compatible with various devices.\nWe will implement the function by first checking if the string contains any letters. If it does, we will iterate through each character, reversing the case of letters while leaving non-letter characters unchanged. If the string contains no letters, we will reverse the entire string. This approach ensures that the function handles both cases efficiently and correctly.\n", "requirement analysis:\nThe original requirements specify a function that processes a string based on the type of character at each position. If the character is a letter, it should reverse its case. If there are no letters, the entire string should be reversed. The function should handle edge cases such as empty strings and very large strings efficiently.\nrequirement pool:\n- The main code should correctly process the string based on the specified rules.\n- The function should handle edge cases efficiently.\n- The application should be responsive and provide a smooth user experience.\n- The UI should be clean and intuitive, with a focus on simplicity.\n- The application should be compatible with a variety of devices.\nWe will use Python's built-in functions and string methods to achieve the functionality. The main challenge is to efficiently check each character in the string and apply the case reversal or string reversal based on the character type. We will use list comprehensions for efficient iteration and string manipulation.\n", "requirement analysis:\nThe function needs to handle various edge cases such as empty strings, strings with only non-letter characters, and very large strings. It should also provide a user-friendly experience by reversing the case of letters and reversing the string if no letters are present.\nrequirement pool:\n- The main code should handle the case reversal for letters and keep non-letter characters unchanged.\n- The function should reverse the entire string if no letters are present.\n- Ensure the function can handle large strings efficiently.\n- Include error handling for empty strings.\nWe will use Python's built-in functions and string manipulation capabilities to achieve the desired functionality. The main challenge lies in efficiently handling both letter case reversal and string reversal based on the presence of letters.\n", "requirement analysis:\nThe function needs to handle various edge cases such as empty strings, strings with only non-letter characters, and very large strings. It should also provide a user-friendly interface for easy interaction.\nrequirement pool:\n- The main code should handle the case conversion for letters and leave non-letter characters unchanged.\n- The function should reverse the string if it contains no letters.\n- Ensure the application is responsive and works well on all devices.\n- Implement a clear and intuitive user interface.\n- Optimize the algorithm to handle large strings efficiently.\nWe will implement the function by first checking if the string contains any letters. If it does, we will iterate through each character, reversing the case of letters while leaving non-letter characters unchanged. If the string contains no letters, we will reverse the entire string. This approach ensures that the function handles various edge cases, including empty strings and strings with only non-letter characters, while also optimizing the handling of large strings.\n", "requirement analysis:\nThe original requirements specify a function that processes a string based on the type of character at each position. It should reverse the case of letters and reverse the entire string if there are no letters. The function should handle edge cases like empty strings and very large strings.\nrequirement pool:\n- The main code should correctly process the string based on the given conditions.\n- The function should handle edge cases efficiently.\n- Ensure the application is responsive and works well on different devices.\n- Implement a user-friendly interface for easy interaction.\n- Optimize the performance for handling large strings.\nWe will use Python's built-in string manipulation methods and a simple conditional check to process the string. The function will iterate through each character in the string, check if it's a letter, and then reverse its case. If no letters are found, the function will reverse the entire string.\n"], "scores": [1.0, 1.0, 0.7422, 0.2578, 1.0, 1.0, 0.7422, 1.0, 1.0, 1.0], "pass_results": [true, true, false, false, true, true, false, true, true, true], "pass_test_cases_num": [128, 128, 95, 33, 128, 128, 95, 128, 128, 128], "completion": "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    result = []\n    has_letters = False\n\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n\n    if not has_letters:\n        return s[::-1]\n\n    return ''.join(result)\n", "passed": true, "pass": true, "pass_num": 7, "round": 409, "repair_prompt": ["def solve(s):\t\n'''You are given a string s.  \n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.  \n    If the string contains no letters, reverse the string.  \n    The function should return the resulted string.  \n    Consider edge cases where the string might be empty or very large.\nExamples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    '''"], "mutate_method": "add_1_sentence_at_end", "parent_index": 348}
