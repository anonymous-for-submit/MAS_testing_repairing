{"task_id": "HumanEval/19", "prompt": "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest. Ensure your solution handles multiple occurrences of the same numeral correctly.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "entry_point": "sort_numbers", "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "test": ["def check(sort_numbers):\n\tassert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one\") == 'one'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four three six\") == 'three four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one six four\") == 'one four six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two\") == 'one two'", "def check(sort_numbers):\n\tassert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four five five one one\") == 'one one four five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four zero two five\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight\") == 'eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six three\") == 'three six'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero\") == 'zero seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four three zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven\") == 'seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six nine three\") == 'three six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one nine three\") == 'one three four nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "def check(sort_numbers):\n\tassert sort_numbers('three five nine') == 'three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three\") == 'zero three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one seven\") == 'one four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six\") == 'six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"four two seven\") == 'two four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three four five\") == 'three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five four zero\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three seven two\") == 'two three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four six four one\") == 'one four four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight six three\") == 'three six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three five\") == 'three five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four\") == 'four'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero four one\") == 'zero one four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine\") == 'nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three\") == 'three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three four zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five\") == 'five'", "def check(sort_numbers):\n\tassert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers('three') == 'three'", "def check(sort_numbers):\n\tassert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six\") == 'six'", "def check(sort_numbers):\n\tassert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five\") == 'five eight'", "def check(sort_numbers):\n\tassert sort_numbers('') == ''", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine nine five\") == 'five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three\") == 'three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero\") == 'zero'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine zero\") == 'zero nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one six two seven\") == 'one two six seven'"], "test_case_list": ["assert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "assert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "assert sort_numbers(\"one\") == 'one'", "assert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "assert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "assert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "assert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "assert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "assert sort_numbers(\"four four three six\") == 'three four four six'", "assert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "assert sort_numbers(\"nine one six four\") == 'one four six nine'", "assert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "assert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "assert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "assert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "assert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "assert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "assert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "assert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "assert sort_numbers(\"one two\") == 'one two'", "assert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "assert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "assert sort_numbers(\"four five five one one\") == 'one one four five five'", "assert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "assert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "assert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "assert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "assert sort_numbers(\"four zero two five\") == 'zero two four five'", "assert sort_numbers(\"eight\") == 'eight'", "assert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "assert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "assert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "assert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "assert sort_numbers(\"six three\") == 'three six'", "assert sort_numbers(\"seven zero\") == 'zero seven'", "assert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "assert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "assert sort_numbers(\"four three zero\") == 'zero three four'", "assert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "assert sort_numbers(\"seven\") == 'seven'", "assert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "assert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "assert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "assert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "assert sort_numbers(\"six nine three\") == 'three six nine'", "assert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "assert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "assert sort_numbers(\"four one nine three\") == 'one three four nine'", "assert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "assert sort_numbers('three five nine') == 'three five nine'", "assert sort_numbers(\"zero three\") == 'zero three'", "assert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "assert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "assert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "assert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "assert sort_numbers(\"four one seven\") == 'one four seven'", "assert sort_numbers(\"seven six\") == 'six seven'", "assert sort_numbers(\"four two seven\") == 'two four seven'", "assert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "assert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "assert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "assert sort_numbers(\"nine three four five\") == 'three four five nine'", "assert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "assert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "assert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "assert sort_numbers(\"two five four zero\") == 'zero two four five'", "assert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "assert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "assert sort_numbers(\"three seven two\") == 'two three seven'", "assert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "assert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "assert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "assert sort_numbers(\"four four six four one\") == 'one four four four six'", "assert sort_numbers(\"eight six three\") == 'three six eight'", "assert sort_numbers(\"five three five\") == 'three five five'", "assert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "assert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "assert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "assert sort_numbers(\"four\") == 'four'", "assert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "assert sort_numbers(\"six zero four one\") == 'zero one four six'", "assert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "assert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "assert sort_numbers(\"nine\") == 'nine'", "assert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "assert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "assert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "assert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "assert sort_numbers(\"three\") == 'three'", "assert sort_numbers(\"three four zero\") == 'zero three four'", "assert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "assert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "assert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "assert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "assert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "assert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "assert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "assert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "assert sort_numbers(\"five\") == 'five'", "assert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "assert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "assert sort_numbers('three') == 'three'", "assert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "assert sort_numbers(\"six\") == 'six'", "assert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "assert sort_numbers(\"eight five\") == 'five eight'", "assert sort_numbers('') == ''", "assert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "assert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "assert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "assert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "assert sort_numbers(\"nine nine five\") == 'five nine nine'", "assert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "assert sort_numbers(\"seven three\") == 'three seven'", "assert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "assert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "assert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "assert sort_numbers(\"zero\") == 'zero'", "assert sort_numbers(\"nine zero\") == 'zero nine'", "assert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "assert sort_numbers(\"one six two seven\") == 'one two six seven'"], "nl": " Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    ", "func": "def sort_numbers(numbers: str) -> str:", "examples": ">>> sort_numbers('three one five')\n    'one three five'\n    ", "completions": ["from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-delimited string of numerals from 'zero' to 'nine'.\n    Output: A string of numerals sorted from smallest to largest.\n    '''\n    # Mapping of numerals to their corresponding numerical values\n    numeral_to_value = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Mapping of numerical values back to their corresponding numerals\n    value_to_numeral = {value: numeral for numeral, value in numeral_to_value.items()}\n    \n    # Split the input string into a list of numerals\n    numerals = numbers.split()\n    \n    # Convert the list of numerals to their corresponding numerical values\n    values = [numeral_to_value[numeral] for numeral in numerals]\n    \n    # Sort the list of numerical values\n    values.sort()\n    \n    # Convert the sorted list of numerical values back to their corresponding numerals\n    sorted_numerals = [value_to_numeral[value] for value in values]\n    \n    # Join the sorted numerals into a single string and return\n    return ' '.join(sorted_numerals)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-delimited string of numerals from 'zero' to 'nine'.\n    Output: A space-delimited string of numerals sorted from smallest to largest.\n    '''\n    # Mapping of numerals to their corresponding numerical values\n    numeral_to_value = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Convert the input string to a list of integers\n    values = [numeral_to_value[num] for num in numbers.split()]\n    \n    # Sort the list of integers\n    sorted_values = sorted(values)\n    \n    # Convert the sorted list back into a space-delimited string of numerals\n    sorted_numerals = ' '.join(str(value) for value in sorted_values)\n    \n    return sorted_numerals\n", "from typing import List\n## main.py\n\nimport typing\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. \n    Return the string with numbers sorted from smallest to largest. Ensure your solution handles multiple occurrences of the same numeral correctly.\n    '''\n    numeral_to_value = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    value_to_numeral = {value: numeral for numeral, value in numeral_to_value.items()}\n    \n    numerals = numbers.split()\n    values = [numeral_to_value[numeral] for numeral in numerals]\n    sorted_values = sorted(values)\n    sorted_numerals = [value_to_numeral[value] for value in sorted_values]\n    \n    return ' '.join(sorted_numerals)\n", "from typing import List\n## main.py\n\nimport re\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-delimited string of numerals from 'zero' to 'nine'.\n    Output: A space-delimited string of numerals sorted from smallest to largest.\n    '''\n    # Mapping of numerals to their corresponding integer values\n    numeral_to_int = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Mapping of integers back to their corresponding numeral strings\n    int_to_numeral = {value: key for key, value in numeral_to_int.items()}\n    \n    # Split the input string into a list of numerals\n    numerals = numbers.split()\n    \n    # Validate the input to ensure all numerals are valid\n    if not all(num in numeral_to_int for num in numerals):\n        raise ValueError(\"Invalid numeral in input string\")\n    \n    # Map numerals to their corresponding integer values\n    int_values = [numeral_to_int[num] for num in numerals]\n    \n    # Sort the integer values\n    sorted_int_values = sorted(int_values)\n    \n    # Map sorted integer values back to their string representations\n    sorted_numerals = [int_to_numeral[num] for num in sorted_int_values]\n    \n    # Join the sorted string representations into a single string\n    sorted_string = ' '.join(sorted_numerals)\n    \n    return sorted_string\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-delimited string of numerals from 'zero' to 'nine'.\n    Output: A space-delimited string of sorted numerals from smallest to largest.\n    '''\n    numeral_to_int = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    int_to_numeral = {value: key for key, value in numeral_to_int.items()}\n    \n    # Split the input string into a list of numerals\n    numerals = numbers.split()\n    \n    # Convert the list of numerals to a list of integers\n    int_list = [numeral_to_int[num] for num in numerals]\n    \n    # Sort the list of integers\n    sorted_int_list = sorted(int_list)\n    \n    # Convert the sorted list of integers back to a list of numerals\n    sorted_numerals = [int_to_numeral[num] for num in sorted_int_list]\n    \n    # Join the sorted numerals into a space-delimited string\n    sorted_string = ' '.join(sorted_numerals)\n    \n    return sorted_string\n", "from typing import List\n## main.py\n\nimport re\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-delimited string of numerals from 'zero' to 'nine'.\n    Output: A space-delimited string of numerals sorted from smallest to largest.\n    '''\n    num_words = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    word_to_num = {value: key for key, value in num_words.items()}\n    \n    # Split the input string into a list of numerals\n    num_list = numbers.split()\n    \n    # Convert the list of numerals from words to numbers\n    num_list = [num_words[num] for num in num_list]\n    \n    # Sort the list of numbers\n    num_list.sort()\n    \n    # Convert the sorted list of numbers back to words\n    sorted_num_list = [word_to_num[num] for num in num_list]\n    \n    # Join the sorted list back into a space-delimited string\n    sorted_numbers = ' '.join(sorted_num_list)\n    \n    return sorted_numbers\n", "from typing import List\n## main.py\n\nimport re\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-delimited string of numerals from 'zero' to 'nine'.\n    Output: A space-delimited string of numerals sorted from smallest to largest.\n    '''\n    numeral_to_int = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    int_to_numeral = {value: key for key, value in numeral_to_int.items()}\n    \n    # Use regex to split the input string into a list of numerals\n    numerals = re.findall(r'\\b\\w+\\b', numbers)\n    \n    # Map numerals to their corresponding integer values\n    int_values = [numeral_to_int[numeral] for numeral in numerals]\n    \n    # Sort the integer values\n    sorted_int_values = sorted(int_values)\n    \n    # Map sorted integer values back to their string representations\n    sorted_numerals = [int_to_numeral[value] for value in sorted_int_values]\n    \n    # Join the sorted string numerals into a single string\n    sorted_string = ' '.join(sorted_numerals)\n    \n    return sorted_string\n", "from typing import List\n## main.py\n\nimport main\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-delimited string of numerals from 'zero' to 'nine'.\n    Output: A space-delimited string of numerals sorted from smallest to largest.\n    '''\n    # Mapping of numerals to their corresponding numerical values\n    numeral_to_value = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Mapping of numerical values back to their string representations\n    value_to_numeral = {value: numeral for numeral, value in numeral_to_value.items()}\n    \n    # Split the input string into a list of numerals\n    numerals = numbers.split()\n    \n    # Convert numerals to their corresponding numerical values\n    values = [numeral_to_value[numeral] for numeral in numerals]\n    \n    # Sort the numerical values\n    sorted_values = sorted(values)\n    \n    # Convert sorted numerical values back to string representations\n    sorted_numerals = [value_to_numeral[value] for value in sorted_values]\n    \n    # Join the sorted numerals back into a space-delimited string\n    sorted_string = ' '.join(sorted_numerals)\n    \n    return sorted_string\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. \n    Return the string with numbers sorted from smallest to largest. Ensure your solution handles multiple occurrences of the same numeral correctly.\n    '''\n    # Define a mapping from numerals to their corresponding integer values\n    numeral_to_int = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into a list of numerals\n    numerals_list = numbers.split()\n    \n    # Convert the list of numerals to a list of integers\n    int_list = [numeral_to_int[num] for num in numerals_list]\n    \n    # Sort the list of integers\n    sorted_int_list = sorted(int_list)\n    \n    # Convert the sorted list of integers back to a list of numerals\n    sorted_numerals_list = [key for key, value in numeral_to_int.items() if value in sorted_int_list]\n    \n    # Join the sorted list of numerals into a single string\n    sorted_string = ' '.join(sorted_numerals_list)\n    \n    return sorted_string\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-delimited string of numerals from 'zero' to 'nine'.\n    Output: A string of numerals sorted from smallest to largest.\n    '''\n    # Define a mapping from numerals to their corresponding integer values\n    numeral_to_int = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Split the input string into a list of numerals\n    numerals = numbers.split()\n    \n    # Map the numerals to their corresponding integer values\n    int_values = [numeral_to_int[num] for num in numerals]\n    \n    # Sort the integer values\n    sorted_values = sorted(int_values)\n    \n    # Map the sorted integer values back to their corresponding numerals\n    sorted_numerals = [key for key, value in numeral_to_int.items() if value in sorted_values]\n    \n    # Join the sorted numerals into a single string and return\n    return ' '.join(sorted_numerals)\n\n# Example usage:\n# sorted_result = sort_numbers(\"three one five nine\")\n# print(sorted_result)  # Output: \"one three five nine\"\n"], "plans": ["requirement analysis:\nThe requirement is to sort a space-delimited string of numerals from 'zero' to 'nine'. The input is a string where numerals are separated by spaces, and the output should be a string with these numerals sorted in ascending order. The solution must handle multiple occurrences of the same numeral correctly.\nrequirement pool:\n- Implement a function to convert numerals to their corresponding numerical values.\n- Develop a sorting algorithm that sorts the numerals from smallest to largest.\n- Ensure the solution can handle multiple occurrences of the same numeral.\n- Create a user-friendly interface for easy input and output.\n- Optimize the performance for handling large datasets of numerals.\nTo implement the function that sorts a space-delimited string of numerals from 'zero' to 'nine', we will use Python's built-in capabilities for simplicity and efficiency. We will map the numerals to their corresponding numerical values, sort these values, and then map them back to their corresponding numerals for the output. This approach ensures accuracy and handles multiple occurrences of the same numeral correctly.\n", "requirement analysis:\nThe requirement is to sort a space-delimited string of numerals from 'zero' to 'nine'. The input is a string where numerals are separated by spaces, and the output should be a string with these numerals sorted in ascending order. The solution must handle multiple occurrences of the same numeral correctly.\nrequirement pool:\n- Implement a function to convert numerals to their corresponding numerical values.\n- Develop a sorting algorithm that can handle the numerals and sort them from smallest to largest.\n- Ensure the system can handle multiple occurrences of the same numeral and sort them correctly.\n- Create a user-friendly interface for easy input and output.\nTo implement the function `sort_numbers` that sorts a space-delimited string of numerals from 'zero' to 'nine', we will follow these steps: First, we will create a mapping of numerals to their corresponding numerical values. This will help in converting the input string of numerals into a list of integers. Next, we will use a built-in sorting function to sort this list of integers. Finally, we will convert the sorted list back into a space-delimited string of numerals. This approach ensures that the function can handle multiple occurrences of the same numeral correctly and provides an accurate and efficient sorting solution.\n", "requirement analysis:\nThe requirement is to sort a space-delimited string of numerals from 'zero' to 'nine'. This requires a clear understanding of the input format and the ability to map these words to their corresponding numerical values. The output should be a string of numerals sorted in ascending order, ensuring that multiple occurrences of the same numeral are handled correctly.\nrequirement pool:\n- Implement a function to convert numerals to their numerical values.\n- Create a function to sort the numerical values.\n- Ensure the function can handle multiple occurrences of the same numeral.\n- Develop a user-friendly interface for easy input and output.\n- Optimize the performance for handling large datasets efficiently.\nTo implement the function `sort_numbers` that sorts a space-delimited string of numerals from 'zero' to 'nine', we will follow these steps: First, we will create a mapping of the numerals to their corresponding numerical values. Then, we will split the input string into individual numerals, convert them to their numerical values, and sort them. Finally, we will convert the sorted numerical values back to their corresponding numerals and return the sorted string.\n", "requirement analysis:\nThe requirement is to sort a space-delimited string of numerals from 'zero' to 'nine'. The solution should handle multiple occurrences of the same numeral correctly. This requirement is clear and specific, aligning well with the product goals of creating a user-friendly interface and ensuring accurate sorting.\nrequirement pool:\n- Implement a function to sort the numerals correctly.\n- Ensure the function handles multiple occurrences of the same numeral.\n- Design a user-friendly interface for easy input and output.\n- Optimize performance for handling numerals.\nTo implement the function that sorts a space-delimited string of numerals from 'zero' to 'nine', we will use Python's built-in data structures and functions. The function will map the string of numerals to their corresponding integer values, sort these values, and then map them back to their string representations. This approach ensures that the function handles multiple occurrences of the same numeral correctly and performs efficiently.\n", "requirement analysis:\nThe requirement is to sort a space-delimited string of numerals from 'zero' to 'nine'. The solution should handle multiple occurrences of the same numeral correctly and return the sorted string. The input is a string, and the output should also be a string, ensuring readability and ease of use.\nrequirement pool:\n- Implement a function to convert the input string of numerals to a list of integers.\n- Sort the list of integers in ascending order.\n- Convert the sorted list of integers back to a space-delimited string.\n- Handle cases where the input string contains multiple occurrences of the same numeral.\n- Ensure the solution is efficient and can handle large datasets.\nTo implement the function `sort_numbers` efficiently and accurately, we will use Python's built-in data structures and functions. The function will convert the input string of numerals to a list of integers, sort the list, and then convert it back to a space-delimited string. We will ensure that the function handles multiple occurrences of the same numeral correctly.\n", "requirement analysis:\nThe requirement is to sort a space-delimited string of numerals from 'zero' to 'nine'. The solution should handle multiple occurrences of the same numeral correctly. This requirement is clear and specific, aligning well with the product goals of user-friendliness and accurate sorting.\nrequirement pool:\n- Implement a function to sort the numerals correctly.\n- Ensure the function can handle multiple occurrences of the same numeral.\n- Design a user-friendly interface for input and output.\n- Optimize performance for handling large datasets.\nTo implement the function that sorts a space-delimited string of numerals from 'zero' to 'nine', we will use Python's built-in data structures and functions. The function will first convert the input string into a list of numerals, sort the list, and then convert it back into a space-delimited string for output. This approach ensures simplicity and efficiency.\n", "requirement analysis:\nThe requirement is to sort a space-delimited string of numerals from 'zero' to 'nine'. The solution should handle multiple occurrences of the same numeral correctly. This requirement is clear and straightforward, focusing on the functionality of sorting and the accuracy of handling numerals.\nrequirement pool:\n- Implement a function to sort the numerals correctly.\n- Ensure the function handles multiple occurrences of the same numeral.\n- Develop a user-friendly interface for easy input and output.\n- Optimize performance for handling large datasets.\nTo implement the function that sorts a space-delimited string of numerals from 'zero' to 'nine', we will use Python's built-in data structures and functions. The function will map the string numerals to their corresponding integer values, sort these values, and then map them back to their string representations. This approach ensures both accuracy and efficiency in handling the numerals.\n", "requirement analysis:\nThe requirement is to sort a space-delimited string of numerals from 'zero' to 'nine'. The input is a string where numerals are separated by spaces, and the output should be a string with numerals sorted in ascending order. The solution must handle multiple occurrences of the same numeral correctly.\nrequirement pool:\n- Implement a function to convert numerals to their corresponding numerical values.\n- Create a function to sort the numerical values.\n- Ensure the function can handle space-delimited strings.\n- Develop a user-friendly interface for input and output.\n- Optimize the performance for handling numerals correctly even if they appear multiple times.\nTo implement the function that sorts a space-delimited string of numerals from 'zero' to 'nine', we will use Python's built-in capabilities for string manipulation and sorting. We will map the numerals to their corresponding numerical values, sort these values, and then map them back to their string representations. This approach ensures that the function can handle multiple occurrences of the same numeral correctly.\n", "requirement analysis:\nThe requirement is to sort a space-delimited string of numerals from 'zero' to 'nine'. The solution should handle multiple occurrences of the same numeral correctly. This requirement is clear and specific, aligning well with the goal of creating an efficient and user-friendly solution.\nrequirement pool:\n- Implement a function to convert the string of numerals to a list of integers.\n- Develop a sorting algorithm that handles the conversion and sorting of numerals.\n- Ensure the solution can handle multiple occurrences of the same numeral.\n- Implement a user interface for easy input and output of numerals.\n- Optimize the performance for handling large inputs efficiently.\nTo implement the function `sort_numbers` efficiently and accurately, we will use Python's built-in data structures and functions. The function will convert the input string of numerals into a list, sort the list, and then convert it back to a string for output. We will ensure that the solution handles multiple occurrences of the same numeral correctly by using Python's sorting capabilities, which inherently handle duplicates.\n", "requirement analysis:\nThe requirement is to sort a space-delimited string of numerals from 'zero' to 'nine'. The input is a string where numerals are separated by spaces, and the output should be a string with numerals sorted in ascending order. The solution must handle multiple occurrences of the same numeral correctly.\nrequirement pool:\n- Implement a function to parse the input string and identify numerals.\n- Create a mapping of numerals to their corresponding integer values.\n- Develop a sorting algorithm to arrange the numerals in ascending order.\n- Ensure the solution can handle numerals correctly even if they are repeated multiple times.\n- Implement a function to format the sorted numerals back into a string.\nTo implement the function `sort_numbers` that sorts a space-delimited string of numerals from 'zero' to 'nine', we will use Python's built-in data structures and functions. The function will first parse the input string to extract numerals, then map these numerals to their corresponding integer values, sort the integers, and finally format the sorted numerals back into a string.\n"], "scores": [1.0, 0.0083, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.3802, 0.3802], "pass_results": [true, false, true, true, true, true, true, false, false, false], "pass_test_cases_num": [121, 1, 121, 121, 121, 121, 121, 0, 46, 46], "completion": "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-delimited string of numerals from 'zero' to 'nine'.\n    Output: A string of numerals sorted from smallest to largest.\n    '''\n    # Define a mapping from numerals to their corresponding integer values\n    numeral_to_int = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Split the input string into a list of numerals\n    numerals = numbers.split()\n    \n    # Map the numerals to their corresponding integer values\n    int_values = [numeral_to_int[num] for num in numerals]\n    \n    # Sort the integer values\n    sorted_values = sorted(int_values)\n    \n    # Map the sorted integer values back to their corresponding numerals\n    sorted_numerals = [key for key, value in numeral_to_int.items() if value in sorted_values]\n    \n    # Join the sorted numerals into a single string and return\n    return ' '.join(sorted_numerals)\n\n# Example usage:\n# sorted_result = sort_numbers(\"three one five nine\")\n# print(sorted_result)  # Output: \"one three five nine\"\n", "passed": true, "pass": true, "pass_num": 6, "round": 156, "repair_prompt": ["def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest. Ensure your solution handles multiple occurrences of the same numeral correctly.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''"], "mutate_method": "add_1_sentence_at_end", "parent_index": 16}
