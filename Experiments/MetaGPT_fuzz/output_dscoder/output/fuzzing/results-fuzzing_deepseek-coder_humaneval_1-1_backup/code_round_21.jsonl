{"task_id": "HumanEval/24", "prompt": "def largest_divisor(n: int) -> int:\t\n'''For a given number n, identify the largest number smaller than n that divides it evenly.\n>>> largest_divisor(15)\n    5\n    '''", "entry_point": "largest_divisor", "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n", "test": ["def check(largest_divisor):\n\tassert largest_divisor(47) == 1", "def check(largest_divisor):\n\tassert largest_divisor(98) == 49", "def check(largest_divisor):\n\tassert largest_divisor(104) == 52", "def check(largest_divisor):\n\tassert largest_divisor(51) == 17", "def check(largest_divisor):\n\tassert largest_divisor(10) == 5", "def check(largest_divisor):\n\tassert largest_divisor(53) == 1", "def check(largest_divisor):\n\tassert largest_divisor(3) == 1", "def check(largest_divisor):\n\tassert largest_divisor(95) == 19", "def check(largest_divisor):\n\tassert largest_divisor(44) == 22", "def check(largest_divisor):\n\tassert largest_divisor(8) == 4", "def check(largest_divisor):\n\tassert largest_divisor(4) == 2", "def check(largest_divisor):\n\tassert largest_divisor(103) == 1", "def check(largest_divisor):\n\tassert largest_divisor(11) == 1", "def check(largest_divisor):\n\tassert largest_divisor(46) == 23", "def check(largest_divisor):\n\tassert largest_divisor(49) == 7", "def check(largest_divisor):\n\tassert largest_divisor(13) == 1", "def check(largest_divisor):\n\tassert largest_divisor(14) == 7", "def check(largest_divisor):\n\tassert largest_divisor(54) == 27", "def check(largest_divisor):\n\tassert largest_divisor(99) == 33", "def check(largest_divisor):\n\tassert largest_divisor(45) == 15", "def check(largest_divisor):\n\tassert largest_divisor(9) == 3", "def check(largest_divisor):\n\tassert largest_divisor(7) == 1", "def check(largest_divisor):\n\tassert largest_divisor(100) == 50", "def check(largest_divisor):\n\tassert largest_divisor(6) == 3", "def check(largest_divisor):\n\tassert largest_divisor(48) == 24", "def check(largest_divisor):\n\tassert largest_divisor(15) == 5", "def check(largest_divisor):\n\tassert largest_divisor(101) == 1", "def check(largest_divisor):\n\tassert largest_divisor(97) == 1", "def check(largest_divisor):\n\tassert largest_divisor(12) == 6", "def check(largest_divisor):\n\tassert largest_divisor(105) == 35", "def check(largest_divisor):\n\tassert largest_divisor(5) == 1", "def check(largest_divisor):\n\tassert largest_divisor(2) == 1", "def check(largest_divisor):\n\tassert largest_divisor(102) == 51"], "test_case_list": ["assert largest_divisor(47) == 1", "assert largest_divisor(98) == 49", "assert largest_divisor(104) == 52", "assert largest_divisor(51) == 17", "assert largest_divisor(10) == 5", "assert largest_divisor(53) == 1", "assert largest_divisor(3) == 1", "assert largest_divisor(95) == 19", "assert largest_divisor(44) == 22", "assert largest_divisor(8) == 4", "assert largest_divisor(4) == 2", "assert largest_divisor(103) == 1", "assert largest_divisor(11) == 1", "assert largest_divisor(46) == 23", "assert largest_divisor(49) == 7", "assert largest_divisor(13) == 1", "assert largest_divisor(14) == 7", "assert largest_divisor(54) == 27", "assert largest_divisor(99) == 33", "assert largest_divisor(45) == 15", "assert largest_divisor(9) == 3", "assert largest_divisor(7) == 1", "assert largest_divisor(100) == 50", "assert largest_divisor(6) == 3", "assert largest_divisor(48) == 24", "assert largest_divisor(15) == 5", "assert largest_divisor(101) == 1", "assert largest_divisor(97) == 1", "assert largest_divisor(12) == 6", "assert largest_divisor(105) == 35", "assert largest_divisor(5) == 1", "assert largest_divisor(2) == 1", "assert largest_divisor(102) == 51"], "nl": " For a given number n, find the largest number that divides n evenly, smaller than n\n    ", "func": "def largest_divisor(n: int) -> int:", "examples": ">>> largest_divisor(15)\n    5\n    ", "completions": ["from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"\n    Find the largest divisor of a given number n that is smaller than n.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The largest divisor of n that is smaller than n.\n    \"\"\"\n    largest_divisor = 0\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            largest_divisor = i\n            break\n    return largest_divisor\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"\n    Find the largest divisor of a given number n that is smaller than n.\n\n    Args:\n        n (int): The number to find the largest divisor for.\n\n    Returns:\n        int: The largest divisor of n that is smaller than n.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    largest_divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor = i\n    return largest_divisor\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"\n    Returns the largest divisor of a given number n that is smaller than n.\n    \n    Args:\n        n (int): The input number.\n        \n    Returns:\n        int: The largest divisor of n that is smaller than n.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    largest_divisor = 0\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            largest_divisor = i\n            break\n    \n    return largest_divisor\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"\n    Find the largest divisor of a given number n that is smaller than n.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The largest divisor of n that is smaller than n.\n    \"\"\"\n    largest_divisor = 0\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            largest_divisor = i\n            break\n    return largest_divisor\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"\n    Find the largest divisor of a given number n that is smaller than n.\n\n    Args:\n        n (int): The number to find the largest divisor for.\n\n    Returns:\n        int: The largest divisor of n that is smaller than n.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    largest_div = 1\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            largest_div = i\n    return largest_div\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"\n    Returns the largest divisor of a given number n that is smaller than n.\n    \n    Args:\n        n (int): The number to find the largest divisor of.\n        \n    Returns:\n        int: The largest divisor of n that is smaller than n.\n    \"\"\"\n    result = 1\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            result = i\n    return result\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"\n    Find the largest divisor of a given number n that is smaller than n.\n\n    Args:\n        n (int): The number to find the largest divisor for.\n\n    Returns:\n        int: The largest divisor of n that is smaller than n.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    result = None\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            result = i\n            break\n\n    return result\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"\n    Returns the largest divisor of a given number n that is smaller than n.\n    \n    Args:\n        n (int): The number to find the largest divisor of.\n        \n    Returns:\n        int: The largest divisor of n that is smaller than n.\n    \"\"\"\n    result = 1\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            result = i\n    return result\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"\n    Find the largest divisor of a given number n that is smaller than n.\n\n    Args:\n        n (int): The number to find the largest divisor of.\n\n    Returns:\n        int: The largest divisor of n that is smaller than n.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    largest_divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor = i\n    return largest_divisor\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"\n    Find the largest divisor of a given number n that is smaller than n.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The largest divisor of n that is smaller than n.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    largest_divisor = 1\n    for i in range(1, n):\n        if n % i == 0:\n            largest_divisor = i\n    return largest_divisor\n"], "plans": ["requirement analysis:\nThe requirement is to find the largest divisor of a given number n that is smaller than n. This is a straightforward mathematical problem that can be solved by iterating through numbers less than n and checking for divisibility.\nrequirement pool:\n- The main code should efficiently find the largest divisor of n.\n- Ensure the function works correctly for all positive integers.\n- Include test cases to validate the function's correctness.\nTo solve the problem of finding the largest divisor of a given number n that is smaller than n, we can implement a simple Python function that iterates through numbers less than n and checks for divisibility. This approach ensures efficiency and correctness.\n", "requirement analysis:\nThe requirement is to find the largest divisor of a given number n that is smaller than n. This is a straightforward mathematical problem that can be solved by iterating through numbers less than n and checking for divisibility.\nrequirement pool:\n- The main code should correctly identify the largest divisor of a given number n.\n- The solution should be efficient, handling large numbers without excessive computation time.\n- The function should include detailed docstrings and test cases to ensure correctness.\nTo solve the problem of finding the largest divisor of a given number n that is smaller than n, we can implement a simple Python function that iterates through numbers less than n and checks for divisibility. This approach is straightforward and efficient for small to moderately large numbers.\n", "requirement analysis:\nThe requirement is to find the largest divisor of a given number n that is smaller than n. This is a straightforward mathematical problem that can be solved by iterating through numbers less than n and checking for divisibility.\nrequirement pool:\n- The main code should efficiently find the largest divisor of n.\n- The function should handle edge cases such as negative numbers and zero.\n- The function should be optimized for performance, especially for large values of n.\nTo solve the problem of finding the largest divisor of a given number n that is smaller than n, we can implement a simple Python function that iterates through numbers less than n and checks for divisibility. This approach ensures efficiency and handles basic edge cases such as negative numbers and zero.\n", "requirement analysis:\nThe requirement is to find the largest divisor of a given number n that is smaller than n. This is a straightforward mathematical problem that can be solved by iterating through numbers less than n and checking for divisibility.\nrequirement pool:\n- The main code should efficiently find the largest divisor of n\n- The solution should be optimized to handle large numbers efficiently\n- The function should return 1 if n is 1, as 1 has no divisors other than itself\nTo solve the problem of finding the largest divisor of a given number n that is smaller than n, we can implement a simple Python function that iterates through numbers less than n and checks for divisibility. This approach is straightforward and leverages basic Python features for efficiency.\n", "requirement analysis:\nThe requirement is to find the largest divisor of a given number n that is smaller than n. This is a straightforward mathematical problem that can be solved by iterating through numbers less than n and checking for divisibility.\nrequirement pool:\n- The main code should correctly identify the largest divisor of a given number n.\n- The algorithm should be efficient and work well for large numbers.\n- The solution should include a function that takes an integer input and returns an integer output.\nTo solve the problem of finding the largest divisor of a given number n that is smaller than n, we can implement a simple Python function that iterates through numbers less than n and checks for divisibility. This approach is straightforward and efficient for small to moderately large numbers.\n", "requirement analysis:\nThe requirement is to find the largest divisor of a given number n that is smaller than n. This is a straightforward mathematical problem that can be solved by iterating through numbers less than n and checking for divisibility.\nrequirement pool:\n- The main code should correctly identify the largest divisor of a given number n.\n- The algorithm should be efficient and work for large numbers.\n- The solution should be easy to understand and implement.\nTo solve the problem of finding the largest divisor of a given number n that is smaller than n, we can implement a simple Python function that iterates through numbers less than n and checks for divisibility. This approach is efficient and straightforward, making it easy to understand and implement.\n", "requirement analysis:\nThe requirement is to find the largest divisor of a given number n that is smaller than n. This is a straightforward mathematical problem that can be solved by iterating through numbers less than n and checking for divisibility.\nrequirement pool:\n- The main code should efficiently find the largest divisor of n.\n- The function should handle edge cases such as negative numbers and zero.\n- The function should be optimized for performance, especially for large values of n.\nTo solve the problem of finding the largest divisor of a given number n that is smaller than n, we can implement a simple Python function that iterates through numbers less than n and checks for divisibility. This approach ensures efficiency and handles basic edge cases such as negative numbers and zero.\n", "requirement analysis:\nThe requirement is to find the largest divisor of a given number n that is smaller than n. This is a straightforward mathematical problem that can be solved by iterating through numbers less than n and checking for divisibility.\nrequirement pool:\n- The main code should correctly identify the largest divisor of a given number n.\n- The algorithm should be efficient and work for large numbers.\n- The solution should be easy to understand and implement.\nTo solve the problem of finding the largest divisor of a given number n that is smaller than n, we can implement a simple Python function that iterates through numbers less than n and checks for divisibility. This approach is efficient and straightforward, making it easy to understand and implement.\n", "requirement analysis:\nThe requirement is to find the largest divisor of a given number n that is smaller than n. This is a straightforward mathematical problem that can be solved by iterating through numbers less than n and checking for divisibility.\nrequirement pool:\n- The main code should correctly identify the largest divisor of a given number n.\n- The code should be efficient and handle large numbers without performance issues.\n- The function should include appropriate docstrings and tests to ensure correctness.\nTo solve the problem of finding the largest divisor of a given number n that is smaller than n, we can implement a simple Python function that iterates through numbers less than n and checks for divisibility. This approach is straightforward and efficient for small to moderately large numbers.\n", "requirement analysis:\nThe requirement is to find the largest divisor of a given number n that is smaller than n. This involves iterating through numbers less than n and checking for divisibility. The solution should be efficient and handle edge cases such as the smallest number and negative numbers.\nrequirement pool:\n- The main code should efficiently find the largest divisor of a given number n.\n- The solution should handle edge cases such as the smallest number and negative numbers.\n- The user interface should be simple and intuitive.\nTo efficiently find the largest divisor of a given number n that is smaller than n, we can iterate through numbers less than n and check for divisibility. This approach should be efficient and handle edge cases such as the smallest number and negative numbers. We will use Python's built-in capabilities to iterate and check divisibility.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [33, 33, 33, 33, 33, 33, 33, 33, 33, 33], "completion": "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"\n    Find the largest divisor of a given number n that is smaller than n.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The largest divisor of n that is smaller than n.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    largest_divisor = 1\n    for i in range(1, n):\n        if n % i == 0:\n            largest_divisor = i\n    return largest_divisor\n", "passed": true, "pass": true, "pass_num": 10, "round": 21, "repair_prompt": ["def largest_divisor(n: int) -> int:\t\n'''For a given number n, identify the largest number smaller than n that divides it evenly.\n>>> largest_divisor(15)\n    5\n    '''"], "mutate_method": "condense_two2one", "parent_index": 21}
