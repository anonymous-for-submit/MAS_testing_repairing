{"task_id": "HumanEval/19", "prompt": "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-separated string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "entry_point": "sort_numbers", "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "test": ["def check(sort_numbers):\n\tassert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one\") == 'one'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four three six\") == 'three four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one six four\") == 'one four six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two\") == 'one two'", "def check(sort_numbers):\n\tassert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four five five one one\") == 'one one four five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four zero two five\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight\") == 'eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six three\") == 'three six'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero\") == 'zero seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four three zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven\") == 'seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six nine three\") == 'three six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one nine three\") == 'one three four nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "def check(sort_numbers):\n\tassert sort_numbers('three five nine') == 'three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three\") == 'zero three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one seven\") == 'one four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six\") == 'six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"four two seven\") == 'two four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three four five\") == 'three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five four zero\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three seven two\") == 'two three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four six four one\") == 'one four four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight six three\") == 'three six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three five\") == 'three five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four\") == 'four'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero four one\") == 'zero one four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine\") == 'nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three\") == 'three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three four zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five\") == 'five'", "def check(sort_numbers):\n\tassert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers('three') == 'three'", "def check(sort_numbers):\n\tassert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six\") == 'six'", "def check(sort_numbers):\n\tassert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five\") == 'five eight'", "def check(sort_numbers):\n\tassert sort_numbers('') == ''", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine nine five\") == 'five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three\") == 'three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero\") == 'zero'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine zero\") == 'zero nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one six two seven\") == 'one two six seven'"], "test_case_list": ["assert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "assert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "assert sort_numbers(\"one\") == 'one'", "assert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "assert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "assert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "assert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "assert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "assert sort_numbers(\"four four three six\") == 'three four four six'", "assert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "assert sort_numbers(\"nine one six four\") == 'one four six nine'", "assert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "assert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "assert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "assert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "assert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "assert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "assert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "assert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "assert sort_numbers(\"one two\") == 'one two'", "assert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "assert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "assert sort_numbers(\"four five five one one\") == 'one one four five five'", "assert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "assert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "assert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "assert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "assert sort_numbers(\"four zero two five\") == 'zero two four five'", "assert sort_numbers(\"eight\") == 'eight'", "assert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "assert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "assert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "assert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "assert sort_numbers(\"six three\") == 'three six'", "assert sort_numbers(\"seven zero\") == 'zero seven'", "assert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "assert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "assert sort_numbers(\"four three zero\") == 'zero three four'", "assert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "assert sort_numbers(\"seven\") == 'seven'", "assert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "assert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "assert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "assert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "assert sort_numbers(\"six nine three\") == 'three six nine'", "assert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "assert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "assert sort_numbers(\"four one nine three\") == 'one three four nine'", "assert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "assert sort_numbers('three five nine') == 'three five nine'", "assert sort_numbers(\"zero three\") == 'zero three'", "assert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "assert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "assert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "assert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "assert sort_numbers(\"four one seven\") == 'one four seven'", "assert sort_numbers(\"seven six\") == 'six seven'", "assert sort_numbers(\"four two seven\") == 'two four seven'", "assert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "assert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "assert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "assert sort_numbers(\"nine three four five\") == 'three four five nine'", "assert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "assert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "assert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "assert sort_numbers(\"two five four zero\") == 'zero two four five'", "assert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "assert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "assert sort_numbers(\"three seven two\") == 'two three seven'", "assert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "assert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "assert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "assert sort_numbers(\"four four six four one\") == 'one four four four six'", "assert sort_numbers(\"eight six three\") == 'three six eight'", "assert sort_numbers(\"five three five\") == 'three five five'", "assert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "assert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "assert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "assert sort_numbers(\"four\") == 'four'", "assert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "assert sort_numbers(\"six zero four one\") == 'zero one four six'", "assert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "assert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "assert sort_numbers(\"nine\") == 'nine'", "assert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "assert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "assert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "assert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "assert sort_numbers(\"three\") == 'three'", "assert sort_numbers(\"three four zero\") == 'zero three four'", "assert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "assert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "assert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "assert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "assert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "assert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "assert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "assert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "assert sort_numbers(\"five\") == 'five'", "assert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "assert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "assert sort_numbers('three') == 'three'", "assert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "assert sort_numbers(\"six\") == 'six'", "assert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "assert sort_numbers(\"eight five\") == 'five eight'", "assert sort_numbers('') == ''", "assert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "assert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "assert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "assert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "assert sort_numbers(\"nine nine five\") == 'five nine nine'", "assert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "assert sort_numbers(\"seven three\") == 'three seven'", "assert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "assert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "assert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "assert sort_numbers(\"zero\") == 'zero'", "assert sort_numbers(\"nine zero\") == 'zero nine'", "assert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "assert sort_numbers(\"one six two seven\") == 'one two six seven'"], "nl": " Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    ", "func": "def sort_numbers(numbers: str) -> str:", "examples": ">>> sort_numbers('three one five')\n    'one three five'\n    ", "completions": ["from typing import List\n## main.py\n\nimport sys\nimport os\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-separated string of numerals from 'zero' to 'nine'.\n    Output: A space-separated string of numerals sorted from smallest to largest.\n    '''\n    word_to_num = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    num_words = numbers.split()\n    num_values = [word_to_num[word] for word in num_words]\n    num_values.sort()\n    \n    sorted_words = [list(word_to_num.keys())[list(word_to_num.values()).index(num)] for num in num_values]\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string\n", "from typing import List\n## main.py\n\nimport re\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-separated string of numerals from 'zero' to 'nine'.\n    Output: A string with numbers sorted from smallest to largest.\n    '''\n    numeral_to_int = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    int_to_numeral = {value: key for key, value in numeral_to_int.items()}\n    \n    numerals = numbers.split()\n    \n    int_values = [numeral_to_int[numeral] for numeral in numerals]\n    \n    sorted_int_values = sorted(int_values)\n    \n    sorted_numerals = [int_to_numeral[value] for value in sorted_int_values]\n    \n    sorted_string = ' '.join(sorted_numerals)\n    \n    return sorted_string\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-separated string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. \n    Return the string with numbers sorted from smallest to largest.\n    '''\n    # Mapping of words to their corresponding numerical values\n    word_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into a list of numerals\n    numerals = numbers.split()\n    \n    # Map the numerals to their corresponding numerical values\n    numerical_values = [word_to_number[num] for num in numerals]\n    \n    # Sort the list of numerical values\n    sorted_values = sorted(numerical_values)\n    \n    # Convert the sorted numerical values back to strings\n    sorted_numerals = [list(word_to_number.keys())[list(word_to_number.values()).index(val)] for val in sorted_values]\n    \n    # Join the strings into a single space-separated string\n    sorted_string = ' '.join(sorted_numerals)\n    \n    return sorted_string\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-separated string of numerals from 'zero' to 'nine'.\n    Output: A space-separated string of numerals sorted from smallest to largest.\n    '''\n    # Mapping from word to number\n    word_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into a list of words\n    words = numbers.split()\n    \n    # Convert words to numbers using the dictionary\n    numbers_list = [word_to_number[word] for word in words]\n    \n    # Sort the numbers\n    numbers_list.sort()\n    \n    # Convert sorted numbers back to words\n    sorted_words = [list(word_to_number.keys())[list(word_to_number.values()).index(num)] for num in numbers_list]\n    \n    # Join the sorted words into a single string\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-separated string of numerals from 'zero' to 'nine'.\n    Output: A space-separated string of numerals sorted from smallest to largest.\n    '''\n    # Define a mapping from word to numerical value\n    word_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into a list of numerals\n    numeral_list = numbers.split()\n    \n    # Convert the list of numerals to a list of their corresponding numerical values\n    numerical_list = [word_to_number[num] for num in numeral_list]\n    \n    # Sort the list of numerical values\n    sorted_numerical_list = sorted(numerical_list)\n    \n    # Convert the sorted list of numerical values back to a list of words\n    sorted_numeral_list = [list(word_to_number.keys())[list(word_to_number.values()).index(num)] for num in sorted_numerical_list]\n    \n    # Join the sorted list back into a space-separated string\n    sorted_numbers_str = ' '.join(sorted_numeral_list)\n    \n    return sorted_numbers_str\n", "from typing import List\n## main.py\n\nimport re\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-separated string of numerals from 'zero' to 'nine'.\n    Output: A string of numerals sorted from smallest to largest.\n    '''\n    # Define a mapping from word to numerical value\n    num_words = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into a list of words\n    num_words_list = numbers.split()\n    \n    # Convert the list of words to a list of numbers\n    num_values_list = [num_words[num_word] for num_word in num_words_list]\n    \n    # Sort the list of numbers\n    num_values_list.sort()\n    \n    # Convert the sorted list of numbers back to a list of words\n    sorted_num_words_list = [list(num_words.keys())[list(num_words.values()).index(num_value)] for num_value in num_values_list]\n    \n    # Join the sorted list of words into a single string\n    sorted_numbers_str = ' '.join(sorted_num_words_list)\n    \n    return sorted_numbers_str\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-separated string of numerals from 'zero' to 'nine'.\n    Output: A space-separated string of numerals sorted from smallest to largest.\n    '''\n    # Define a mapping from word to numerical value\n    num_words = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into a list of numerals\n    num_list = numbers.split()\n    \n    # Convert the list of numerals from words to their numerical values\n    num_values = [num_words[num] for num in num_list]\n    \n    # Sort the list of numerical values\n    num_values.sort()\n    \n    # Convert the sorted list of numerical values back to words\n    sorted_num_list = [list(num_words.keys())[list(num_words.values()).index(num)] for num in num_values]\n    \n    # Join the sorted list of numerals back into a space-separated string\n    sorted_numbers = ' '.join(sorted_num_list)\n    \n    return sorted_numbers\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-separated string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. \n    Return the string with numbers sorted from smallest to largest.\n    '''\n    # Mapping of numerals to their corresponding numerical values\n    numeral_to_value = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Mapping of numerical values to their corresponding numerals\n    value_to_numeral = {value: numeral for numeral, value in numeral_to_value.items()}\n    \n    # Split the input string into a list of numerals\n    numerals = numbers.split()\n    \n    # Validate the input to ensure all numerals are valid\n    for numeral in numerals:\n        if numeral not in numeral_to_value:\n            raise ValueError(f\"Invalid numeral: {numeral}\")\n    \n    # Convert the list of numerals to their corresponding numerical values\n    values = [numeral_to_value[num] for num in numerals]\n    \n    # Sort the list of numerical values\n    values.sort()\n    \n    # Convert the sorted list of numerical values back to numerals\n    sorted_numerals = [value_to_numeral[value] for value in values]\n    \n    # Join the sorted numerals back into a space-separated string\n    sorted_string = ' '.join(sorted_numerals)\n    \n    return sorted_string\n\n# Example usage:\n# print(sort_numbers(\"two one three\"))  # Output: \"one two three\"\n", "from typing import List\n## main.py\n\nimport re\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-separated string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. \n    Return the string with numbers sorted from smallest to largest.\n    '''\n    word_to_digit = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    digit_to_word = {value: key for key, value in word_to_digit.items()}\n    \n    # Use regex to match the words and convert them to integers\n    digits = [word_to_digit[match.group()] for match in re.finditer(r'\\b(zero|one|two|three|four|five|six|seven|eight|nine)\\b', numbers)]\n    \n    # Sort the list of integers\n    sorted_digits = sorted(digits)\n    \n    # Convert the sorted list back to a string\n    sorted_words = [digit_to_word[digit] for digit in sorted_digits]\n    \n    # Join the sorted words into a single string separated by spaces\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string\n", "from typing import List\n## main.py\n\nfrom word_to_number_module import word_to_number\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-separated string of numerals from 'zero' to 'nine'.\n    Output: A string of numerals sorted from smallest to largest.\n    '''\n    # Split the input string into a list of words\n    number_words = numbers.split()\n    \n    # Convert words to numbers\n    numbers_list = [word_to_number[word] for word in number_words]\n    \n    # Sort the list of numbers\n    sorted_numbers = sorted(numbers_list)\n    \n    # Convert sorted numbers back to words\n    sorted_words = [list(word_to_number.keys())[list(word_to_number.values()).index(num)] for num in sorted_numbers]\n    \n    # Join the sorted words back into a single string\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string\n"], "plans": ["requirement analysis:\nThe requirement is to sort a space-separated string of numerals from 'zero' to 'nine' in ascending order. This requires converting the string to a list of numerals, sorting them, and then converting them back to a string.\nrequirement pool:\n- Implement the function to sort the numerals correctly.\n- Ensure the function handles input correctly.\n- Make sure the output is a space-separated string.\nTo implement the function that sorts a space-separated string of numerals from 'zero' to 'nine' in ascending order, we will use Python's built-in data structures and functions. The function will convert the input string to a list, sort the list, and then convert it back to a space-separated string. This approach leverages Python's simplicity and efficiency for such tasks.\n", "requirement analysis:\nThe requirement is to sort a space-separated string of numerals from 'zero' to 'nine' in ascending order. This requires converting the string to a list, sorting the list, and then converting it back to a string. The solution should handle spaces correctly and ensure the output is a string with numbers sorted from smallest to largest.\nrequirement pool:\n- The main code should correctly sort the numbers\n- The game algorithm should handle input and output correctly\n- Implement a user-friendly interface for difficulty level selection\n- Include a score display feature after each game\n- Add a restart button for users who lose the game\nTo implement the function that sorts a space-separated string of numerals from 'zero' to 'nine' in ascending order, we will use Python's built-in capabilities for string manipulation and sorting. The function will convert the input string to a list of numbers, sort the list, and then convert it back to a string with spaces separating the numbers.\n", "requirement analysis:\nThe requirement is to sort a space-separated string of numerals from 'zero' to 'nine' in ascending order. This requires converting the string to a list, mapping the words to their corresponding numerical values, sorting the list, and then converting it back to a string.\nrequirement pool:\n- Implement the function to sort the numbers correctly.\n- Ensure the function handles the input correctly.\n- Develop a user-friendly interface for easy input and output display.\n- Optimize the UI for better user experience and responsiveness.\nTo implement the function that sorts a space-separated string of numerals from 'zero' to 'nine' in ascending order, we will use Python's built-in capabilities for string manipulation and sorting. We will map the words to their corresponding numerical values, sort the list, and then convert it back to a string.\n", "requirement analysis:\nThe requirement is to sort a space-separated string of numerals from 'zero' to 'nine' in ascending order. This requires mapping the words to their corresponding numerical values, sorting them, and then returning the sorted values as a space-separated string.\nrequirement pool:\n- Implement the function to sort the numbers correctly.\n- Ensure the function can handle different inputs including variations in spacing.\n- Develop a user-friendly interface for easy input and output display.\n- Include error handling for invalid inputs.\nTo implement the function that sorts a space-separated string of numerals from 'zero' to 'nine' in ascending order, we will use Python's built-in capabilities along with a simple mapping from words to numbers. This approach will ensure simplicity and efficiency.\n", "requirement analysis:\nThe requirement is to sort a space-separated string of numerals from 'zero' to 'nine'. This requires converting the string to a list of numerals, sorting them, and then converting them back to a string. The solution should handle the input as specified and return the sorted string.\nrequirement pool:\n- The main code should correctly sort the numbers\n- The solution should handle the input correctly\n- The output should be a space-separated string\n- The program should handle invalid inputs gracefully\nTo implement the function that sorts a space-separated string of numerals from 'zero' to 'nine', we will use Python's built-in capabilities for string manipulation and sorting. The function will convert the input string to a list, sort the list, and then convert it back to a space-separated string. This approach leverages Python's simplicity and efficiency for such tasks.\n", "requirement analysis:\nThe requirement is to sort a space-separated string of numerals from 'zero' to 'nine'. This requires converting the string to a list of numerals, sorting them, and then converting them back to a string. The solution should handle the input as specified and return the sorted string.\nrequirement pool:\n- The main code should correctly sort the numerals from the input string.\n- The solution should handle the input format accurately.\n- Implement a user-friendly interface for easy input and output.\n- Ensure the application is responsive and works well on mobile devices.\nTo implement the function that sorts a space-separated string of numerals from 'zero' to 'nine', we will use Python's built-in capabilities for string manipulation and sorting. The function will convert the input string to a list, sort the list, and then convert it back to a string. This approach leverages Python's simplicity and efficiency for such tasks.\n", "requirement analysis:\nThe requirement is to sort a space-separated string of numerals from 'zero' to 'nine'. This requires converting the string to a list of numerals, sorting them, and then converting them back to a string. The conversion is necessary because the input is in text form, and the output needs to be in numerical order.\nrequirement pool:\n- The main code should convert the input string to a list of numerals.\n- The main code should sort the list of numerals.\n- The main code should convert the sorted list back to a string.\n- Ensure the output string is space-separated.\n- Implement error handling for invalid inputs.\nTo implement the function that sorts a space-separated string of numerals from 'zero' to 'nine', we will use Python's built-in capabilities for string manipulation and sorting. The function will convert the input string to a list of numerals, sort them, and then convert the sorted list back to a string. This approach leverages Python's simplicity and efficiency for such tasks.\n", "requirement analysis:\nThe requirement is to sort a space-separated string of numerals from 'zero' to 'nine'. This requires converting the string to a list of numerals, sorting them, and then converting them back to a string. The conversion is necessary because the input is in text form, and the output needs to be in numerical order.\nrequirement pool:\n- The main code should convert the input string to a list of numerals.\n- The main code should sort the list of numerals.\n- The main code should convert the sorted list back to a string.\n- Ensure the program handles invalid inputs gracefully.\n- Implement a function to handle the conversion between numerals and their textual representation.\nWe will use Python's built-in capabilities to handle the conversion between numerals and their textual representation. We will create a mapping of the textual representations to their corresponding numerical values and vice versa. This will allow us to easily convert the input string to a list of numerals, sort them, and then convert them back to a string. We will also handle invalid inputs by checking if the input string contains only valid numerals before proceeding with the sorting.\n", "requirement analysis:\nThe requirement is to sort a space-separated string of numerals from 'zero' to 'nine'. This requires converting the string to a list, sorting the list, and then converting it back to a string. The sorted order should be from smallest to largest.\nrequirement pool:\n- The main code should correctly sort the numbers\n- The game algorithm should handle the input and output correctly\nTo implement the function that sorts a space-separated string of numerals from 'zero' to 'nine', we will use Python's built-in data structures and functions. The function will convert the input string to a list, sort the list, and then convert it back to a string. This approach leverages Python's simplicity and efficiency for such tasks.\n", "requirement analysis:\nThe requirement is to sort a space-separated string of numerals from 'zero' to 'nine'. This requires converting the string to a list of numerals, sorting them, and then converting them back to a string. The solution should handle the input as specified and return the sorted string.\nrequirement pool:\n- The main code should correctly sort the numerals from the input string.\n- The solution should handle the input format accurately.\n- Implement a user-friendly interface for easy input and output.\n- Ensure the application is responsive and works well on mobile devices.\nTo implement the function that sorts a space-separated string of numerals from 'zero' to 'nine', we will use Python's built-in capabilities for string manipulation and sorting. The function will convert the input string to a list, sort the list, and then convert it back to a string. This approach leverages Python's simplicity and efficiency for such tasks.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0], "pass_results": [true, true, true, true, true, true, true, true, true, false], "pass_test_cases_num": [121, 121, 121, 121, 121, 121, 121, 121, 121, 0], "completion": "from typing import List\n## main.py\n\nfrom word_to_number_module import word_to_number\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-separated string of numerals from 'zero' to 'nine'.\n    Output: A string of numerals sorted from smallest to largest.\n    '''\n    # Split the input string into a list of words\n    number_words = numbers.split()\n    \n    # Convert words to numbers\n    numbers_list = [word_to_number[word] for word in number_words]\n    \n    # Sort the list of numbers\n    sorted_numbers = sorted(numbers_list)\n    \n    # Convert sorted numbers back to words\n    sorted_words = [list(word_to_number.keys())[list(word_to_number.values()).index(num)] for num in sorted_numbers]\n    \n    # Join the sorted words back into a single string\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string\n", "passed": true, "pass": true, "pass_num": 9, "round": 476, "repair_prompt": ["def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-separated string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''"], "mutate_method": "rephrase_one", "parent_index": 307}
