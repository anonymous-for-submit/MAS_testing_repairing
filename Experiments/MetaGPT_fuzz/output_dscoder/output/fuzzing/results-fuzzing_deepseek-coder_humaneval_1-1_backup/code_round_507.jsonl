{"task_id": "HumanEval/60", "prompt": "def sum_to_n(n: int):\t\n'''sum_to_n is a function that sums numbers. It adds all numbers from 1 to n.\n>>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    '''", "entry_point": "sum_to_n", "canonical_solution": "    return sum(range(n + 1))\n", "test": ["def check(sum_to_n):\n\tassert sum_to_n(720) == 259560", "def check(sum_to_n):\n\tassert sum_to_n(609) == 185745", "def check(sum_to_n):\n\tassert sum_to_n(479) == 114960", "def check(sum_to_n):\n\tassert sum_to_n(191) == 18336", "def check(sum_to_n):\n\tassert sum_to_n(950) == 451725", "def check(sum_to_n):\n\tassert sum_to_n(1) == 1", "def check(sum_to_n):\n\tassert sum_to_n(709) == 251695", "def check(sum_to_n):\n\tassert sum_to_n(867) == 376278", "def check(sum_to_n):\n\tassert sum_to_n(379) == 72010", "def check(sum_to_n):\n\tassert sum_to_n(813) == 330891", "def check(sum_to_n):\n\tassert sum_to_n(990) == 490545", "def check(sum_to_n):\n\tassert sum_to_n(224) == 25200", "def check(sum_to_n):\n\tassert sum_to_n(774) == 299925", "def check(sum_to_n):\n\tassert sum_to_n(981) == 481671", "def check(sum_to_n):\n\tassert sum_to_n(891) == 397386", "def check(sum_to_n):\n\tassert sum_to_n(676) == 228826", "def check(sum_to_n):\n\tassert sum_to_n(20) == 210", "def check(sum_to_n):\n\tassert sum_to_n(281) == 39621", "def check(sum_to_n):\n\tassert sum_to_n(987) == 487578", "def check(sum_to_n):\n\tassert sum_to_n(982) == 482653", "def check(sum_to_n):\n\tassert sum_to_n(570) == 162735", "def check(sum_to_n):\n\tassert sum_to_n(507) == 128778", "def check(sum_to_n):\n\tassert sum_to_n(877) == 385003", "def check(sum_to_n):\n\tassert sum_to_n(30) == 465", "def check(sum_to_n):\n\tassert sum_to_n(957) == 458403", "def check(sum_to_n):\n\tassert sum_to_n(318) == 50721", "def check(sum_to_n):\n\tassert sum_to_n(666) == 222111", "def check(sum_to_n):\n\tassert sum_to_n(896) == 401856", "def check(sum_to_n):\n\tassert sum_to_n(594) == 176715", "def check(sum_to_n):\n\tassert sum_to_n(343) == 58996", "def check(sum_to_n):\n\tassert sum_to_n(714) == 255255", "def check(sum_to_n):\n\tassert sum_to_n(497) == 123753", "def check(sum_to_n):\n\tassert sum_to_n(718) == 258121", "def check(sum_to_n):\n\tassert sum_to_n(391) == 76636", "def check(sum_to_n):\n\tassert sum_to_n(60) == 1830", "def check(sum_to_n):\n\tassert sum_to_n(550) == 151525", "def check(sum_to_n):\n\tassert sum_to_n(707) == 250278", "def check(sum_to_n):\n\tassert sum_to_n(304) == 46360", "def check(sum_to_n):\n\tassert sum_to_n(54) == 1485", "def check(sum_to_n):\n\tassert sum_to_n(336) == 56616", "def check(sum_to_n):\n\tassert sum_to_n(161) == 13041", "def check(sum_to_n):\n\tassert sum_to_n(176) == 15576", "def check(sum_to_n):\n\tassert sum_to_n(361) == 65341", "def check(sum_to_n):\n\tassert sum_to_n(209) == 21945", "def check(sum_to_n):\n\tassert sum_to_n(547) == 149878", "def check(sum_to_n):\n\tassert sum_to_n(271) == 36856", "def check(sum_to_n):\n\tassert sum_to_n(6) == 21", "def check(sum_to_n):\n\tassert sum_to_n(670) == 224785", "def check(sum_to_n):\n\tassert sum_to_n(99) == 4950", "def check(sum_to_n):\n\tassert sum_to_n(964) == 465130", "def check(sum_to_n):\n\tassert sum_to_n(159) == 12720", "def check(sum_to_n):\n\tassert sum_to_n(972) == 472878", "def check(sum_to_n):\n\tassert sum_to_n(260) == 33930", "def check(sum_to_n):\n\tassert sum_to_n(426) == 90951", "def check(sum_to_n):\n\tassert sum_to_n(945) == 446985", "def check(sum_to_n):\n\tassert sum_to_n(261) == 34191", "def check(sum_to_n):\n\tassert sum_to_n(302) == 45753", "def check(sum_to_n):\n\tassert sum_to_n(247) == 30628", "def check(sum_to_n):\n\tassert sum_to_n(704) == 248160", "def check(sum_to_n):\n\tassert sum_to_n(637) == 203203", "def check(sum_to_n):\n\tassert sum_to_n(705) == 248865", "def check(sum_to_n):\n\tassert sum_to_n(904) == 409060", "def check(sum_to_n):\n\tassert sum_to_n(100) == 5050", "def check(sum_to_n):\n\tassert sum_to_n(89) == 4005", "def check(sum_to_n):\n\tassert sum_to_n(723) == 261726", "def check(sum_to_n):\n\tassert sum_to_n(968) == 468996", "def check(sum_to_n):\n\tassert sum_to_n(231) == 26796", "def check(sum_to_n):\n\tassert sum_to_n(43) == 946", "def check(sum_to_n):\n\tassert sum_to_n(943) == 445096", "def check(sum_to_n):\n\tassert sum_to_n(657) == 216153", "def check(sum_to_n):\n\tassert sum_to_n(91) == 4186", "def check(sum_to_n):\n\tassert sum_to_n(909) == 413595", "def check(sum_to_n):\n\tassert sum_to_n(213) == 22791", "def check(sum_to_n):\n\tassert sum_to_n(283) == 40186", "def check(sum_to_n):\n\tassert sum_to_n(828) == 343206", "def check(sum_to_n):\n\tassert sum_to_n(546) == 149331", "def check(sum_to_n):\n\tassert sum_to_n(979) == 479710", "def check(sum_to_n):\n\tassert sum_to_n(875) == 383250", "def check(sum_to_n):\n\tassert sum_to_n(484) == 117370", "def check(sum_to_n):\n\tassert sum_to_n(66) == 2211", "def check(sum_to_n):\n\tassert sum_to_n(931) == 433846", "def check(sum_to_n):\n\tassert sum_to_n(192) == 18528", "def check(sum_to_n):\n\tassert sum_to_n(11) == 66", "def check(sum_to_n):\n\tassert sum_to_n(947) == 448878", "def check(sum_to_n):\n\tassert sum_to_n(605) == 183315", "def check(sum_to_n):\n\tassert sum_to_n(512) == 131328", "def check(sum_to_n):\n\tassert sum_to_n(355) == 63190", "def check(sum_to_n):\n\tassert sum_to_n(700) == 245350", "def check(sum_to_n):\n\tassert sum_to_n(335) == 56280", "def check(sum_to_n):\n\tassert sum_to_n(257) == 33153", "def check(sum_to_n):\n\tassert sum_to_n(678) == 230181", "def check(sum_to_n):\n\tassert sum_to_n(802) == 322003", "def check(sum_to_n):\n\tassert sum_to_n(468) == 109746", "def check(sum_to_n):\n\tassert sum_to_n(554) == 153735", "def check(sum_to_n):\n\tassert sum_to_n(956) == 457446", "def check(sum_to_n):\n\tassert sum_to_n(611) == 186966", "def check(sum_to_n):\n\tassert sum_to_n(482) == 116403", "def check(sum_to_n):\n\tassert sum_to_n(625) == 195625", "def check(sum_to_n):\n\tassert sum_to_n(186) == 17391", "def check(sum_to_n):\n\tassert sum_to_n(46) == 1081", "def check(sum_to_n):\n\tassert sum_to_n(442) == 97903", "def check(sum_to_n):\n\tassert sum_to_n(443) == 98346"], "test_case_list": ["assert sum_to_n(720) == 259560", "assert sum_to_n(609) == 185745", "assert sum_to_n(479) == 114960", "assert sum_to_n(191) == 18336", "assert sum_to_n(950) == 451725", "assert sum_to_n(1) == 1", "assert sum_to_n(709) == 251695", "assert sum_to_n(867) == 376278", "assert sum_to_n(379) == 72010", "assert sum_to_n(813) == 330891", "assert sum_to_n(990) == 490545", "assert sum_to_n(224) == 25200", "assert sum_to_n(774) == 299925", "assert sum_to_n(981) == 481671", "assert sum_to_n(891) == 397386", "assert sum_to_n(676) == 228826", "assert sum_to_n(20) == 210", "assert sum_to_n(281) == 39621", "assert sum_to_n(987) == 487578", "assert sum_to_n(982) == 482653", "assert sum_to_n(570) == 162735", "assert sum_to_n(507) == 128778", "assert sum_to_n(877) == 385003", "assert sum_to_n(30) == 465", "assert sum_to_n(957) == 458403", "assert sum_to_n(318) == 50721", "assert sum_to_n(666) == 222111", "assert sum_to_n(896) == 401856", "assert sum_to_n(594) == 176715", "assert sum_to_n(343) == 58996", "assert sum_to_n(714) == 255255", "assert sum_to_n(497) == 123753", "assert sum_to_n(718) == 258121", "assert sum_to_n(391) == 76636", "assert sum_to_n(60) == 1830", "assert sum_to_n(550) == 151525", "assert sum_to_n(707) == 250278", "assert sum_to_n(304) == 46360", "assert sum_to_n(54) == 1485", "assert sum_to_n(336) == 56616", "assert sum_to_n(161) == 13041", "assert sum_to_n(176) == 15576", "assert sum_to_n(361) == 65341", "assert sum_to_n(209) == 21945", "assert sum_to_n(547) == 149878", "assert sum_to_n(271) == 36856", "assert sum_to_n(6) == 21", "assert sum_to_n(670) == 224785", "assert sum_to_n(99) == 4950", "assert sum_to_n(964) == 465130", "assert sum_to_n(159) == 12720", "assert sum_to_n(972) == 472878", "assert sum_to_n(260) == 33930", "assert sum_to_n(426) == 90951", "assert sum_to_n(945) == 446985", "assert sum_to_n(261) == 34191", "assert sum_to_n(302) == 45753", "assert sum_to_n(247) == 30628", "assert sum_to_n(704) == 248160", "assert sum_to_n(637) == 203203", "assert sum_to_n(705) == 248865", "assert sum_to_n(904) == 409060", "assert sum_to_n(100) == 5050", "assert sum_to_n(89) == 4005", "assert sum_to_n(723) == 261726", "assert sum_to_n(968) == 468996", "assert sum_to_n(231) == 26796", "assert sum_to_n(43) == 946", "assert sum_to_n(943) == 445096", "assert sum_to_n(657) == 216153", "assert sum_to_n(91) == 4186", "assert sum_to_n(909) == 413595", "assert sum_to_n(213) == 22791", "assert sum_to_n(283) == 40186", "assert sum_to_n(828) == 343206", "assert sum_to_n(546) == 149331", "assert sum_to_n(979) == 479710", "assert sum_to_n(875) == 383250", "assert sum_to_n(484) == 117370", "assert sum_to_n(66) == 2211", "assert sum_to_n(931) == 433846", "assert sum_to_n(192) == 18528", "assert sum_to_n(11) == 66", "assert sum_to_n(947) == 448878", "assert sum_to_n(605) == 183315", "assert sum_to_n(512) == 131328", "assert sum_to_n(355) == 63190", "assert sum_to_n(700) == 245350", "assert sum_to_n(335) == 56280", "assert sum_to_n(257) == 33153", "assert sum_to_n(678) == 230181", "assert sum_to_n(802) == 322003", "assert sum_to_n(468) == 109746", "assert sum_to_n(554) == 153735", "assert sum_to_n(956) == 457446", "assert sum_to_n(611) == 186966", "assert sum_to_n(482) == 116403", "assert sum_to_n(625) == 195625", "assert sum_to_n(186) == 17391", "assert sum_to_n(46) == 1081", "assert sum_to_n(442) == 97903", "assert sum_to_n(443) == 98346"], "nl": "sum_to_n is a function that sums numbers from 1 to n.\n    ", "func": "def sum_to_n(n: int):", "examples": ">>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    ", "completions": ["from typing import List\n## main.py\n\ndef sum_to_n(n: int) -> int:\n    '''\n    sum_to_n is a function that sums numbers. It adds all numbers from 1 to n.\n    >>> sum_to_n(30)\n        465\n    >>> sum_to_n(100)\n        5050\n    >>> sum_to_n(5)\n        15\n    >>> sum_to_n(10)\n        55\n    >>> sum_to_n(1)\n        1\n    '''\n    return n * (n + 1) // 2\n", "from typing import List\n## main.py\n\ndef sum_to_n(n: int) -> int:\n    \"\"\"\n    Calculate the sum of numbers from 1 to n.\n\n    Args:\n        n (int): The upper limit of the range of numbers.\n\n    Returns:\n        int: The sum of numbers from 1 to n.\n    \"\"\"\n    return n * (n + 1) // 2\n", "from typing import List\n## main.py\n\ndef sum_to_n(n: int) -> int:\n    \"\"\"\n    Calculate the sum of all numbers from 1 to n.\n\n    Args:\n        n (int): The upper limit of the range of numbers.\n\n    Returns:\n        int: The sum of all numbers from 1 to n.\n    \"\"\"\n    return n * (n + 1) // 2\n", "from typing import List\n## main.py\n\ndef sum_to_n(n: int) -> int:\n    \"\"\"\n    Calculate the sum of numbers from 1 to n using the formula n*(n+1)/2.\n\n    Args:\n        n (int): The upper limit of the range of numbers to sum.\n\n    Returns:\n        int: The sum of numbers from 1 to n.\n    \"\"\"\n    return n * (n + 1) // 2\n", "from typing import List\n## main.py\n\ndef sum_to_n(n: int) -> int:\n    '''\n    sum_to_n is a function that sums numbers. It adds all numbers from 1 to n.\n    >>> sum_to_n(30)\n        465\n    >>> sum_to_n(100)\n        5050\n    >>> sum_to_n(5)\n        15\n    >>> sum_to_n(10)\n        55\n    >>> sum_to_n(1)\n        1\n    '''\n    result = 0\n    for i in range(1, n + 1):\n        result += i\n    return result\n", "from typing import List\n## main.py\n\ndef sum_to_n(n: int) -> int:\n    \"\"\"\n    Calculate the sum of all numbers from 1 to n.\n\n    Args:\n        n (int): The upper limit of the range of numbers.\n\n    Returns:\n        int: The sum of all numbers from 1 to n.\n    \"\"\"\n    return n * (n + 1) // 2\n", "from typing import List\n## main.py\n\ndef sum_to_n(n: int) -> int:\n    \"\"\"\n    Calculates the sum of all numbers from 1 to n.\n\n    Args:\n        n (int): The upper limit of the range of numbers to sum.\n\n    Returns:\n        int: The sum of all numbers from 1 to n.\n    \"\"\"\n    return (n * (n + 1)) // 2\n\n# Example usage:\n# result = sum_to_n(10)\n# print(result)  # Output: 55\n", "from typing import List\n## main.py\n\ndef sum_to_n(n: int) -> int:\n    '''\n    sum_to_n is a function that sums numbers. It adds all numbers from 1 to n.\n    >>> sum_to_n(30)\n        465\n    >>> sum_to_n(100)\n        5050\n    >>> sum_to_n(5)\n        15\n    >>> sum_to_n(10)\n        55\n    >>> sum_to_n(1)\n        1\n    '''\n    result = 0\n    for i in range(1, n + 1):\n        result += i\n    return result\n", "from typing import List\n## main.py\n\ndef sum_to_n(n: int) -> int:\n    '''\n    sum_to_n is a function that sums numbers. It adds all numbers from 1 to n.\n    \n    Parameters:\n    n (int): The upper limit of the summation.\n    \n    Returns:\n    int: The sum of all numbers from 1 to n.\n    \n    Examples:\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    '''\n    return sum(range(1, n + 1))\n", "from typing import List\n## main.py\n\ndef sum_to_n(n: int) -> int:\n    \"\"\"\n    Calculate the sum of all numbers from 1 to n.\n\n    Args:\n        n (int): The upper limit of the range of numbers.\n\n    Returns:\n        int: The sum of all numbers from 1 to n.\n    \"\"\"\n    return n * (n + 1) // 2\n"], "plans": ["requirement analysis:\nThe original requirements specify a simple function that sums all numbers from 1 to n. The function should be efficient and handle basic edge cases. The requirements are clear and straightforward, focusing on functionality and correctness.\nrequirement pool:\n- Implement the function to sum numbers from 1 to n.\n- Ensure the function is optimized for performance.\n- Add documentation to explain the function's purpose and usage.\n- Test the function with various inputs to verify correctness.\n- Consider optimizing the function further for edge cases.\nWe will use Python's built-in capabilities to implement the function efficiently. The function will use a simple arithmetic approach to sum all numbers from 1 to n. This method is both simple and efficient, suitable for the given requirements.\n", "requirement analysis:\nThe requirement is to create a function that sums all numbers from 1 to n. The function should be efficient and easy to understand. It should handle various inputs and provide accurate results. The function should also be optimized for performance to handle large numbers.\nrequirement pool:\n- The function should accurately sum numbers from 1 to n\n- The function should be optimized for performance\n- The function should handle various inputs including edge cases\n- The function should be easy to understand and maintain\n- The function should be documented clearly\nTo create a simple and efficient function to sum numbers from 1 to n, we will use Python's built-in capabilities. The function will utilize the formula for the sum of the first n natural numbers, which is n(n + 1)/2. This approach is both efficient and straightforward, ensuring optimal performance even for large values of n.\n", "requirement analysis:\nThe original requirements specify a simple function that sums all numbers from 1 to n. The function should be efficient and handle edge cases like n=1 correctly. The doctests provided offer clear examples of expected outputs for various inputs.\nrequirement pool:\n- Implement the sum_to_n function with accurate and efficient summation.\n- Ensure the function passes all provided doctests.\n- Optimize the function for performance, especially for large values of n.\n- Document the function with clear comments and docstrings.\n- Consider adding error handling for non-integer inputs.\nWe will implement the `sum_to_n` function using a simple and efficient approach. The function will use the formula for the sum of the first n natural numbers, which is n*(n+1)/2. This formula is both simple and efficient, making it suitable for large values of n.\n", "requirement analysis:\nThe original requirements are clear and concise, asking for a simple function that sums all numbers from 1 to n. The function should handle various inputs to ensure correctness and be efficient. The user stories and competitive analysis will help in understanding the user's needs and expectations.\nrequirement pool:\n- Implement the sum_to_n function with a simple and efficient algorithm.\n- Ensure the function handles edge cases such as very large n efficiently.\n- Add detailed docstrings and comments to enhance readability and maintainability.\n- Include unit tests to verify the correctness of the function.\n- Optimize the function for performance, especially for large inputs.\nWe will implement the `sum_to_n` function using a simple and efficient algorithm that calculates the sum of numbers from 1 to n using the formula n*(n+1)/2, which is both simple and efficient for this purpose.\n", "requirement analysis:\nThe requirement is to create a function that sums all numbers from 1 to n. This is a basic mathematical operation that should be efficient and easy to understand. The function should handle edge cases like n=1 correctly. The implementation should be straightforward to ensure clarity and ease of maintenance.\nrequirement pool:\n- Implement the function to sum numbers from 1 to n.\n- Ensure the function handles edge cases correctly.\n- Optimize the function for performance.\n- Enhance the function's readability and maintainability.\n- Provide comprehensive testing to verify the function's correctness.\nWe will use Python's built-in capabilities to create a simple and efficient function that sums numbers from 1 to n. This approach leverages Python's simplicity and efficiency, ensuring that the function is both performant and easy to understand.\n", "requirement analysis:\nThe original requirements are clear and concise, asking for a simple function that sums all numbers from 1 to n. The focus is on efficiency and correctness. The doctests provided offer a straightforward way to verify the function's output.\nrequirement pool:\n- Implement the function sum_to_n(n) to correctly sum all numbers from 1 to n.\n- Ensure the function is optimized for performance, especially for large values of n.\n- Include detailed docstrings and doctests to facilitate understanding and verification.\n- Consider edge cases such as negative numbers or very large values of n.\n- Enhance the function's readability and maintainability for future enhancements.\nWe will use Python's built-in capabilities to implement the function efficiently. The function will use a simple mathematical formula to calculate the sum of numbers from 1 to n, which is n*(n+1)/2. This approach is both simple and efficient, ensuring that the function can handle large values of n quickly.\n", "requirement analysis:\nThe original requirements are clear and concise, asking for a simple function that sums all numbers from 1 to n. The function should handle various inputs and provide accurate results. The doctests provided give examples of expected outputs for specific inputs, which will be useful for testing the function's correctness.\nrequirement pool:\n- Implement the sum_to_n function with a clear and efficient algorithm.\n- Ensure the function passes all provided doctests.\n- Optimize the function for performance, especially for large values of n.\n- Document the function with comments and docstrings for better readability.\nWe will implement the `sum_to_n` function using a simple and efficient algorithm that calculates the sum of all numbers from 1 to n. This can be achieved using the formula for the sum of an arithmetic series, which is (n * (n + 1)) / 2. This approach is both simple and efficient, ensuring that the function performs well even for large values of n.\n", "requirement analysis:\nThe original requirements are clear and concise, asking for a function that sums all numbers from 1 to n. The doctests provided offer a straightforward way to verify the function's correctness. The function should be efficient and handle edge cases such as very large n without causing performance issues.\nrequirement pool:\n- The main code should accurately sum numbers from 1 to n.\n- The function should handle edge cases and large values of n efficiently.\n- The function should be easy to read and maintain.\n- The function should be compatible with Python's standard library.\nWe will use Python's built-in capabilities to create a simple and efficient function that sums numbers from 1 to n. This approach leverages Python's efficiency and readability, ensuring that the function is easy to understand and maintain.\n", "requirement analysis:\nThe requirement is to create a function that sums all numbers from 1 to n. This is a basic mathematical operation that can be implemented in various ways. The function should be efficient and handle edge cases such as negative numbers or zero.\nrequirement pool:\n- The main code should correctly sum numbers from 1 to n.\n- The function should handle edge cases such as negative numbers or zero.\n- The function should be optimized for performance.\n- The function should include detailed documentation and examples.\n- The function should be tested to ensure it works correctly for various inputs.\nWe will use Python's built-in capabilities to create a simple and efficient function that sums numbers from 1 to n. This approach leverages Python's mathematical operations and avoids the need for external libraries, ensuring the function remains lightweight and easy to understand.\n", "requirement analysis:\nThe original requirements are clear and concise, asking for a function that sums all numbers from 1 to n. The doctests provided offer a straightforward way to verify the correctness of the implementation. The function is simple in nature but crucial for various mathematical and programming tasks.\nrequirement pool:\n- Implement the sum_to_n function with accurate and efficient arithmetic operations.\n- Ensure the function passes all provided doctests to validate its correctness.\n- Optimize the function for performance, especially for large values of n.\n- Document the function with comments and docstrings for better readability and maintainability.\n- Consider edge cases such as negative numbers or very large n to ensure robustness.\nWe will implement the `sum_to_n` function using a simple and efficient approach. The function will use the formula for the sum of the first n natural numbers, which is n * (n + 1) / 2. This formula is both simple and efficient, making it suitable for large values of n.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef sum_to_n(n: int) -> int:\n    \"\"\"\n    Calculate the sum of all numbers from 1 to n.\n\n    Args:\n        n (int): The upper limit of the range of numbers.\n\n    Returns:\n        int: The sum of all numbers from 1 to n.\n    \"\"\"\n    return n * (n + 1) // 2\n", "passed": true, "pass": true, "pass_num": 10, "round": 507, "repair_prompt": ["def sum_to_n(n: int):\t\n'''sum_to_n is a function that sums numbers. It adds all numbers from 1 to n.\n>>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    '''"], "mutate_method": "expand_one2two", "parent_index": 155}
