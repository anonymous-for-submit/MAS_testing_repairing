{"name": "1591_A. Life of a Flower", "description": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "tags": ["implementation"], "difficulty": 7, "id": 1591, "sample_io": [{"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}], "test_list": [{"input": "1\n10\n1 1 1 1 1 1 1 1 1 1\n", "output": ["47\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n7\n3\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 0\n", "output": ["33\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 1\n", "output": ["29\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n-1\n8\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 0 1 1 1 1 1\n", "output": ["24\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["7\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n12\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n7\n8\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["7\n-1\n8\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 0 1 1\n", "output": ["20\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["12\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["-1\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["12\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 1 1 1\n1\n1\n", "output": ["3\n7\n12\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n3\n17\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n7\n8\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 0\n", "output": ["28\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n7\n17\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["2\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["7\n-1\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n3\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n1\n", "output": ["3\n7\n3\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["12\n12\n-1\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n3\n12\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 0 1\n", "output": ["15\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n1\n", "output": ["3\n-1\n17\n2\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 1 1\n", "output": ["42\n"]}, {"input": "4\n3\n0 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n-1\n3\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n2\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["3\n2\n8\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["2\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n2\n-1\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n3\n8\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["12\n-1\n17\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 0\n", "output": ["19\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n1\n", "output": ["3\n-1\n7\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n2\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n3\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 0\n1\n0\n", "output": ["-1\n7\n3\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n1\n", "output": ["-1\n-1\n7\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 1\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n12\n17\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n3\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n7\n17\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["12\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 0\n1\n1\n", "output": ["3\n-1\n12\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 1 0 1\n1\n0\n", "output": ["3\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n7\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n12\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["12\n7\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n3\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["12\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["-1\n7\n17\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["-1\n12\n-1\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 0\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 1 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 0 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 2 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n2 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 -1 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 1\n", "output": ["29\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 0\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 0 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "1\n10\n0 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 1\n", "output": ["15\n"]}, {"input": "1\n10\n1 0 0 1 0 2 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "1\n10\n0 1 0 0 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 2 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 3 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 2 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 1 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 0 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 -1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 0\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 0\n", "output": ["24\n"]}, {"input": "1\n10\n1 1 0 1 1 1 0 0 0 0\n", "output": ["-1\n"]}], "task_id": "codecontest/45", "prompt": "Petya has got an interesting flower and is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live. You have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days? Ensure to provide an explanation of how you arrived at the final height of the flower.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "repair_prompt": ["Petya has got an interesting flower and is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live. You have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days? Ensure to provide an explanation of how you arrived at the final height of the flower.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(n: int, watering_days: List[int]) -> int:\n    \"\"\"\n    Calculate the height of Petya's flower after n days based on the watering days.\n\n    Args:\n        n (int): The number of days.\n        watering_days (List[int]): A list of integers where 1 indicates the flower was watered on that day, and 0 indicates it was not.\n\n    Returns:\n        int: The height of the flower after n days, or -1 if the flower dies.\n    \"\"\"\n    if n == 0 or not watering_days:\n        return -1\n\n    # Initialize the flower's height and the previous watering day\n    height = 1\n    previous_watering_day = None\n\n    for day in range(n):\n        # Check if the flower is dead\n        if previous_watering_day is not None and day - previous_watering_day >= 2:\n            return -1\n\n        # Update the flower's height based on watering status\n        if watering_days[day] == 1:\n            if previous_watering_day is not None and day == previous_watering_day + 1:\n                height += 5\n            else:\n                height += 1\n            previous_watering_day = day\n\n    return height\n\n# Read input from the user\nn = int(input())\nwatering_days = list(map(int, input().split()))\n\n# Calculate and print the result\nresult = calculate_flower_height(n, watering_days)\nprint(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(n: int, watering_schedule: list) -> int:\n    # Initialize the flower height to 1 centimeter\n    height = 1\n    # Initialize the previous watering status\n    previous_watered = False\n    \n    # Iterate through each day\n    for i in range(n):\n        # Check if the flower is watered today\n        watered_today = watering_schedule[i] == 1\n        \n        # Check if the flower was watered the previous day\n        if previous_watered:\n            # If the flower was watered yesterday, it grows by 5 centimeters\n            height += 5\n        else:\n            # If the flower was not watered yesterday, it grows by 1 centimeter\n            height += 1\n        \n        # Update the previous watering status\n        previous_watered = watered_today\n        \n        # Check if the flower has died (not watered for two consecutive days)\n        if not watered_today and i > 0 and watering_schedule[i - 1] == 0:\n            return -1\n    \n    return height\n\n# Read input\nn = int(input())\nwatering_schedule = list(map(int, input().split()))\n\n# Calculate and print the result\nresult = calculate_flower_height(n, watering_schedule)\nprint(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(n: int, watering_schedule: list) -> int:\n    # Initialize the flower's height to 1 centimeter\n    height = 1\n    # Initialize a flag to check if the flower is dead\n    dead = False\n    \n    # Iterate through each day\n    for i in range(n):\n        # Check if the flower is already dead\n        if dead:\n            break\n        \n        # Check if the flower is watered on the current day\n        if watering_schedule[i] == 1:\n            # If the flower was not watered on the previous day, grow by 1 centimeter\n            if i == 0 or watering_schedule[i - 1] == 0:\n                height += 1\n            # If the flower was watered on the previous day, grow by 5 centimeters\n            else:\n                height += 5\n        else:\n            # Check for consecutive non-watering days\n            if i > 0 and watering_schedule[i - 1] == 1:\n                # If the flower was watered on the previous day, it's not dead yet\n                continue\n            else:\n                # If the flower was not watered on the previous day and this is the second consecutive non-watering day, mark it as dead\n                if i > 1 and watering_schedule[i - 1] == 0 and watering_schedule[i - 2] == 0:\n                    dead = True\n    \n    # If the flower is dead, return -1, otherwise return the height\n    return -1 if dead else height\n\n# Read input from the user\nn = int(input())\nwatering_schedule = list(map(int, input().split()))\n\n# Calculate the flower's height\nresult = calculate_flower_height(n, watering_schedule)\n\n# Print the result\nprint(result)\n", "from typing import List\n## main.py\n\nimport sys\ninput = sys.stdin.read\n\ndef calculate_flower_height(n: int, watering_schedule: list) -> int:\n    height = 1\n    dead = False\n    \n    for i in range(n):\n        if dead:\n            break\n        \n        if watering_schedule[i] == 1:\n            if i > 0 and watering_schedule[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n        \n        if i > 0 and watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n            dead = True\n    \n    return height if not dead else -1\n\n# Read input from the user\nn = int(input())\nwatering_schedule = list(map(int, input().split()))\n\n# Calculate and print the result\nresult = calculate_flower_height(n, watering_schedule)\nprint(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(n: int, watering_schedule: list) -> int:\n    # Initialize the flower height\n    height = 1\n    # Initialize the previous watering day\n    previous_watering_day = -2\n    \n    for day in range(n):\n        # Check if the flower is watered today or previously\n        if watering_schedule[day] == 1:\n            # Update the previous watering day\n            previous_watering_day = day\n            # Check if the flower was not watered for two days in a row\n            if day - previous_watering_day >= 2:\n                return -1  # The flower has died\n            # Update the flower height\n            if day > 0 and watering_schedule[day - 1] == 1:\n                height += 5\n            else:\n                height += 1\n        else:\n            # If the flower is not watered, it does not grow\n            if day - previous_watering_day >= 2:\n                return -1  # The flower has died\n    \n    return height\n\n# Read input\nn = int(input())\nwatering_schedule = list(map(int, input().split()))\n\n# Calculate and print the result\nresult = calculate_flower_height(n, watering_schedule)\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(n: int, watering_days: List[int]) -> int:\n    \"\"\"\n    Calculate the height of Petya's flower after n days based on the watering days.\n\n    Args:\n        n (int): The number of days.\n        watering_days (List[int]): A list of integers where 1 indicates the flower was watered on that day, and 0 indicates it was not.\n\n    Returns:\n        int: The height of the flower after n days, or -1 if the flower dies.\n    \"\"\"\n    if n == 0 or not watering_days:\n        return -1\n\n    # Initialize the flower height and the previous watering day\n    flower_height = 1\n    previous_watering_day = -2  # Start with -2 to ensure the first day is considered watered\n\n    for day in range(n):\n        if watering_days[day] == 1:\n            if day - previous_watering_day == 1:\n                # If watered consecutively, grow by 5 cm\n                flower_height += 5\n            else:\n                # Otherwise, grow by 1 cm\n                flower_height += 1\n            previous_watering_day = day\n\n        # Check if the flower has died\n        if day - previous_watering_day >= 2:\n            return -1\n\n    return flower_height\n\n# Read input from the user\nn = int(input())\nwatering_days = list(map(int, input().split()))\n\n# Calculate and print the result\nresult = calculate_flower_height(n, watering_days)\nprint(result)\n", "from typing import List\nfrom typing import List\n\ndef calculate_flower_height(n: int, watering_days: List[int]) -> int:\n    # Initialize the flower's height and the previous watering day\n    height = 1\n    previous_watering_day = -2  # Start with -2 to ensure the first growth is 1 cm\n\n    for day in range(n):\n        # Check if the flower is dead\n        if day - previous_watering_day >= 2:\n            return -1\n\n        # Apply growth rules based on watering status\n        if watering_days[day] == 1:\n            if day > 0 and watering_days[day - 1] == 1:\n                height += 5\n            else:\n                height += 1\n            previous_watering_day = day\n\n    return height\n\n# Read input\nn = int(input())\nwatering_days = list(map(int, input().split()))\n\n# Calculate and print the result\nresult = calculate_flower_height(n, watering_days)\nprint(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(n: int, watering_schedule: list) -> int:\n    # Initialize the flower's height and check if it is dead\n    height = 1\n    dead = False\n    \n    # Iterate through each day to check the watering status\n    for i in range(n):\n        # Check if the flower is dead\n        if dead:\n            break\n        \n        # Check if the flower is watered today\n        if watering_schedule[i] == 1:\n            # Check if the flower was watered yesterday\n            if i > 0 and watering_schedule[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n        else:\n            # Check if the flower was not watered yesterday\n            if i > 0 and watering_schedule[i - 1] == 1:\n                dead = True\n    \n    # If the flower is dead, return -1, otherwise return the height\n    return -1 if dead else height\n\n# Read input from user\nn = int(input())\nwatering_schedule = list(map(int, input().split()))\n\n# Calculate and print the result\nresult = calculate_flower_height(n, watering_schedule)\nprint(result)\n", "from typing import List\n## main.py\n\nimport sys\n\ndef calculate_flower_height(n: int, watering_schedule: list) -> int:\n    height = 1\n    dead = False\n\n    for i in range(n):\n        if dead:\n            break\n\n        if watering_schedule[i] == 1:\n            if i > 0 and watering_schedule[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n\n        if i > 0 and watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n            dead = True\n\n    return height if not dead else -1\n\n# Read input from the user\ninput_data = sys.stdin.read().splitlines()\nn = int(input_data[0])\nwatering_schedule = list(map(int, input_data[1].split()))\n\n# Calculate and print the result\nresult = calculate_flower_height(n, watering_schedule)\nprint(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(n: int, watering_schedule: list) -> int:\n    # Initialize the flower height and dead status\n    height = 1\n    dead = False\n    \n    # Iterate through each day\n    for i in range(n):\n        # Check if the flower is dead\n        if dead:\n            break\n        \n        # Check if the flower is watered today\n        watered_today = watering_schedule[i] == 1\n        \n        # Check if the flower is watered yesterday\n        if i > 0:\n            watered_yesterday = watering_schedule[i - 1] == 1\n        else:\n            watered_yesterday = False\n        \n        # Update the flower height based on conditions\n        if watered_today and watered_yesterday:\n            height += 5\n        elif watered_today:\n            height += 1\n        \n        # Check for dead condition\n        if i >= 2 and not watered_today and not watered_yesterday:\n            dead = True\n    \n    # If the flower is dead, return -1, otherwise return the height\n    return -1 if dead else height\n\n# Read input\nn = int(input())\nwatering_schedule = list(map(int, input().split()))\n\n# Calculate and print the result\nresult = calculate_flower_height(n, watering_schedule)\nprint(result)\n"], "plans": ["requirement analysis:\nThe requirements specify a simple simulation of a plant's growth based on watering days. The plant can grow 1 cm per day if watered, 5 cm if watered on consecutive days, and does not grow if not watered. The plant starts at 1 cm and dies if not watered for two consecutive days. The output is the height of the plant after n days or -1 if it has died.\nrequirement pool:\n- Implement the plant growth logic based on watering days.\n- Handle the case where the plant dies due to lack of watering.\n- Ensure the program can handle multiple test cases efficiently.\n- Provide a clear and user-friendly output format.\nWe will use a simple Python script to simulate the growth of Petya's flower based on the given watering days. The script will iterate through each day, checking the watering status and updating the flower's height accordingly. If the flower is not watered for two consecutive days, it will die, and the script will output -1 for that case.\n", "requirement analysis:\nThe requirements specify the behavior of the flower based on the watering schedule. The flower grows 1 cm per day if watered, 5 cm if watered on consecutive days, and does not grow if not watered. The flower dies if not watered for two consecutive days. The output is the final height of the flower or -1 if it has died.\nrequirement pool:\n- Implement the logic for flower growth based on watering schedule.\n- Ensure the flower dies if not watered for two consecutive days.\n- Calculate the final height of the flower after n days.\n- Provide user-friendly input for the watering schedule.\n- Display the final height or indicate if the flower has died.\nWe will use a simple Python script to simulate the growth of Petya's flower based on the given watering schedule. The script will iterate through each day, checking the watering status and calculating the flower's height accordingly. If the flower is not watered for two consecutive days, it will die, and the script will output -1.\n", "requirement analysis:\nThe requirement analysis involves understanding the growth pattern of the flower based on the watering schedule. The flower grows 1 cm per day if watered, 5 cm if watered on consecutive days, and does not grow if not watered. The flower dies if not watered for two consecutive days. The goal is to calculate the final height of the flower after n days or determine if it has died.\nrequirement pool:\n- Implement the logic to calculate the flower's height based on the watering schedule.\n- Handle the case where the flower dies due to lack of watering.\n- Ensure the program can handle multiple test cases efficiently.\n- Design a user-friendly interface for input and output.\nWe will use a simple Python script to calculate the height of the flower based on the given watering schedule. The script will iterate through each day, checking the watering status and updating the flower's height accordingly. If the flower is not watered for two consecutive days, it will be marked as dead.\n", "requirement analysis:\nThe requirement analysis involves understanding the growth pattern of the flower based on the watering schedule. The flower grows 1 cm per day if watered, 5 cm if watered on consecutive days, and does not grow if not watered. The flower dies if not watered for two consecutive days. The goal is to calculate the final height of the flower after n days or determine if it has died.\nrequirement pool:\n- Implement the logic to calculate the flower's height based on the watering schedule.\n- Handle the case where the flower dies due to lack of watering.\n- Ensure the program can handle multiple test cases efficiently.\n- Design a user-friendly interface for input and output.\nWe will use a simple Python script to calculate the height of the flower based on the given watering schedule. The script will iterate through each day, checking the watering status and updating the flower's height accordingly. If the flower is not watered for two consecutive days, it will be marked as dead.\n", "requirement analysis:\nThe requirements specify the behavior of the flower based on the watering schedule. The flower grows 1 cm per day if watered, 5 cm if watered on consecutive days, and does not grow if not watered. The flower dies if not watered for two consecutive days. The output is the final height of the flower or -1 if it has died.\nrequirement pool:\n- Implement the logic for flower growth based on watering schedule\n- Handle the case where the flower dies due to lack of watering\n- Ensure user can input the watering schedule easily\n- Provide clear output indicating the final height or if the flower has died\n- Optimize the application for efficiency and performance\nWe will use Python to implement the flower growth simulation based on the given watering schedule. The key challenge is to accurately track the growth of the flower day by day, considering the rules for watering and growth increments. We will use a simple list to represent the days the flower is watered and calculate the height accordingly.\n", "requirement analysis:\nThe requirements specify a simple simulation of a plant's growth based on watering days. The plant can grow 1 cm per day if watered, 5 cm if watered on consecutive days, and does not grow if not watered. The plant starts at 1 cm and dies if not watered for two consecutive days. The output should indicate the final height of the plant or -1 if it has died.\nrequirement pool:\n- Implement the plant growth logic based on watering days.\n- Handle the case where the plant dies due to lack of watering.\n- Ensure the program can handle multiple test cases efficiently.\n- Design a user-friendly interface for input and output.\nWe will use a simple Python script to simulate the growth of Petya's flower based on the given watering days. The script will iterate through each day, checking the watering history to determine the growth of the flower. If the flower is not watered for two consecutive days, it will die, and the script will output -1 for that case.\n", "requirement analysis:\nThe requirements specify a simple simulation of a plant's growth based on watering days. The plant grows 1 cm per day if watered, 5 cm if watered on consecutive days, and does not grow if not watered. The plant starts at 1 cm and dies if not watered for two consecutive days. The output is the height of the plant after n days or -1 if it dies.\nrequirement pool:\n- Implement the plant growth logic based on watering days.\n- Handle the case where the plant dies due to lack of watering.\n- Ensure the program can handle multiple test cases efficiently.\n- Provide a clear and user-friendly output format.\nWe will use a simple Python script to simulate the growth of Petya's flower based on the given watering days. The script will iterate through each day, applying the growth rules and checking for the condition where the flower dies due to lack of watering. We will use a list to keep track of the flower's growth status.\n", "requirement analysis:\nThe requirement analysis involves understanding the growth pattern of the flower based on the watering schedule. The flower grows 1 cm per day if watered, 5 cm if watered on consecutive days, and does not grow if not watered. The flower dies if not watered for two consecutive days. The goal is to calculate the final height of the flower after n days or determine if it has died.\nrequirement pool:\n- Implement the logic to calculate the flower's height based on the watering schedule.\n- Handle the case where the flower dies due to lack of watering.\n- Ensure the program can handle multiple test cases efficiently.\n- Design a user-friendly interface for input and output.\nWe will use a simple Python script to calculate the height of the flower based on the given watering schedule. The script will iterate through each day, checking the watering status and updating the flower's height accordingly. If the flower is not watered for two consecutive days, it will be marked as dead.\n", "requirement analysis:\nThe requirement analysis involves understanding the growth pattern of the flower based on the watering schedule. The flower grows 1 cm per day if watered, 5 cm if watered on consecutive days, and does not grow if not watered. The flower dies if not watered for two consecutive days. The goal is to calculate the final height of the flower after n days or determine if it has died.\nrequirement pool:\n- Implement the logic to calculate the flower's height based on the watering schedule.\n- Handle the case where the flower dies due to lack of watering.\n- Ensure the program can handle multiple test cases efficiently.\n- Design a user-friendly interface for input and output.\nWe will use a simple Python script to calculate the height of the flower based on the given watering schedule. The script will iterate through each day, checking the watering status and updating the flower's height accordingly. If the flower is not watered for two consecutive days, it will be marked as dead.\n", "requirement analysis:\nThe requirement analysis involves understanding the growth pattern of the flower based on the watering schedule. The flower grows 1 cm per day if watered, 5 cm if watered on consecutive days, and does not grow if not watered. The flower dies if not watered for two consecutive days. The goal is to calculate the final height of the flower after n days or determine if it has died.\nrequirement pool:\n- Implement the logic to calculate the flower's height based on the watering schedule.\n- Handle the case where the flower dies due to lack of watering.\n- Ensure the program can handle multiple test cases efficiently.\n- Design a user-friendly interface for input and output.\nWe will use a simple Python script to calculate the height of the flower based on the given watering schedule. The script will iterate through each day, checking the watering status and updating the flower's height accordingly. If the flower is not watered for two consecutive days, it will be marked as dead.\n"], "scores": [], "pass_results": [false, false, false, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": false, "pass": false, "pass_num": 0, "round": 117, "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "mutate_method": "condense_two2one", "parent_index": 95}
