{"name": "1591_A. Life of a Flower", "description": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "tags": ["implementation"], "difficulty": 7, "id": 1591, "sample_io": [{"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}], "test_list": [{"input": "1\n10\n1 1 1 1 1 1 1 1 1 1\n", "output": ["47\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n7\n3\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 0\n", "output": ["33\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 1\n", "output": ["29\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n-1\n8\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 0 1 1 1 1 1\n", "output": ["24\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["7\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n12\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n7\n8\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["7\n-1\n8\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 0 1 1\n", "output": ["20\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["12\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["-1\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["12\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 1 1 1\n1\n1\n", "output": ["3\n7\n12\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n3\n17\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n7\n8\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 0\n", "output": ["28\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n7\n17\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["2\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["7\n-1\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n3\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n1\n", "output": ["3\n7\n3\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["12\n12\n-1\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n3\n12\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 0 1\n", "output": ["15\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n1\n", "output": ["3\n-1\n17\n2\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 1 1\n", "output": ["42\n"]}, {"input": "4\n3\n0 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n-1\n3\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n2\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["3\n2\n8\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["2\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n2\n-1\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n3\n8\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["12\n-1\n17\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 0\n", "output": ["19\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n1\n", "output": ["3\n-1\n7\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n2\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n3\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 0\n1\n0\n", "output": ["-1\n7\n3\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n1\n", "output": ["-1\n-1\n7\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 1\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n12\n17\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n3\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n7\n17\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["12\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 0\n1\n1\n", "output": ["3\n-1\n12\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 1 0 1\n1\n0\n", "output": ["3\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n7\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n12\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["12\n7\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n3\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["12\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["-1\n7\n17\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["-1\n12\n-1\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 0\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 1 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 0 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 2 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n2 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 -1 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 1\n", "output": ["29\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 0\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 0 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "1\n10\n0 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 1\n", "output": ["15\n"]}, {"input": "1\n10\n1 0 0 1 0 2 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "1\n10\n0 1 0 0 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 2 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 3 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 2 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 1 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 0 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 -1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 0\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 0\n", "output": ["24\n"]}, {"input": "1\n10\n1 1 0 1 1 1 0 0 0 0\n", "output": ["-1\n"]}], "task_id": "codecontest/45", "prompt": "Petya owns a fascinating flower and is a busy person, so he sometimes forgets to water it. You are provided n days from Petya's existence and you need to determine the condition of his flower when the days conclude.\n\nThe flower grows as follows:\n\n  * If the flower isn't watered for two days in succession, it dies. \n  * If the flower is watered on the i-th day, it grows by 1 centimeter. \n  * If the flower is watered on the i-th and the (i-1)-th day (i > 1), then it increases by 5 centimeters instead of 1. \n  * If the flower is not watered on the i-th day, it does not grow. \n\nAt the start of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "repair_prompt": ["Petya owns a fascinating flower and is a busy person, so he sometimes forgets to water it. You are provided n days from Petya's existence and you need to determine the condition of his flower when the days conclude.\n\nThe flower grows as follows:\n\n  * If the flower isn't watered for two days in succession, it dies. \n  * If the flower is watered on the i-th day, it grows by 1 centimeter. \n  * If the flower is watered on the i-th and the (i-1)-th day (i > 1), then it increases by 5 centimeters instead of 1. \n  * If the flower is not watered on the i-th day, it does not grow. \n\nAt the start of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(days: int, watering_pattern: List[int]) -> int:\n    \"\"\"\n    Calculate the height of the flower based on the given watering days.\n    \n    Args:\n        days (int): The number of days.\n        watering_pattern (List[int]): A list of integers where 1 indicates the flower was watered on that day, and 0 indicates it was not.\n    \n    Returns:\n        int: The final height of the flower, or -1 if it has died.\n    \"\"\"\n    height = 1  # The initial height of the flower\n    has_died = False  # Flag to check if the flower has died\n\n    for i in range(1, days):\n        if watering_pattern[i] == 1 and watering_pattern[i - 1] == 1:\n            height += 5  # Double growth if watered on consecutive days\n        elif watering_pattern[i] == 1:\n            height += 1  # Normal growth if watered on the i-th day\n        else:\n            # Check if the flower has not been watered for two days in succession\n            if watering_pattern[i - 1] == 0:\n                has_died = True\n                break\n\n    return -1 if has_died else height\n\n# Interface\nn = int(input())\nfor _ in range(n):\n    days = int(input())\n    watering_pattern = list(map(int, input().split()))\n    result = calculate_flower_height(days, watering_pattern)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(days: int, watering_schedule: list[int]) -> int:\n    \"\"\"\n    Calculate the height of the flower after a given number of days based on the watering schedule.\n\n    Args:\n        days (int): The number of days.\n        watering_schedule (list[int]): A list of integers where 1 indicates the flower was watered on that day, and 0 indicates it was not.\n\n    Returns:\n        int: The height of the flower after the given days. If the flower dies, return -1.\n    \"\"\"\n    if days == 0 or len(watering_schedule) != days:\n        return -1  # Invalid input\n\n    height = 1  # Initial height of the flower\n    consecutive_unwatered_days = 0  # Counter for consecutive unwatered days\n\n    for i in range(days):\n        if watering_schedule[i] == 1:\n            if i > 0 and watering_schedule[i - 1] == 1:\n                height += 5  # Grow by 5 cm if watered on the current and previous day\n            else:\n                height += 1  # Grow by 1 cm if only watered on the current day\n            consecutive_unwatered_days = 0  # Reset the counter since the flower was watered\n        else:\n            consecutive_unwatered_days += 1  # Increment the counter since the flower was not watered\n            if consecutive_unwatered_days == 2:\n                return -1  # The flower dies if not watered for two consecutive days\n\n    return height\n\n# Interface\nn = int(input())\nfor _ in range(n):\n    days = int(input())\n    watering_schedule = list(map(int, input().split()))\n    result = calculate_flower_height(days, watering_schedule)\n    print(result)\n", "from typing import List\n## main.py\n\ndef flower_growth(n: int, watering_days: list[int]) -> int:\n    # Initialize the flower height to 1 cm\n    height = 1\n    # Initialize a variable to track if the flower is dead\n    is_dead = False\n    \n    # Iterate through each day from 1 to n\n    for i in range(n):\n        # Check if the flower is dead\n        if is_dead:\n            break\n        \n        # Check if the flower was watered on the current day or the previous day\n        if watering_days[i] == 1:\n            if i > 0 and watering_days[i - 1] == 1:\n                # If watered on the current and previous day, grow by 5 cm\n                height += 5\n            else:\n                # If watered on the current day, grow by 1 cm\n                height += 1\n        else:\n            # If not watered on the current day, check for two consecutive days without watering\n            if i > 0 and watering_days[i - 1] == 0:\n                is_dead = True\n    \n    # If the flower is dead, return -1, otherwise return the final height\n    return -1 if is_dead else height\n\n# Provide the Interface\nn = int(input())\nwatering_days = list(map(int, input().split()))\nresult = flower_growth(n, watering_days)\nprint(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(days: int, watering_schedule: list) -> int:\n    \"\"\"\n    Calculate the height of the flower after a given number of days based on the watering schedule.\n\n    Args:\n        days (int): The number of days.\n        watering_schedule (list): A list of integers where 1 indicates the flower was watered on that day, and 0 indicates it was not.\n\n    Returns:\n        int: The height of the flower after the given days, or -1 if the flower dies.\n    \"\"\"\n    if days == 0 or len(watering_schedule) != days:\n        return -1  # Invalid input\n\n    height = 1  # Initial height of the flower\n    consecutive_dry_days = 0  # Counter for consecutive dry days\n\n    for i in range(days):\n        if watering_schedule[i] == 1:\n            if i > 0 and watering_schedule[i - 1] == 1:\n                height += 5  # Grow by 5 cm if watered on the current and previous day\n            else:\n                height += 1  # Grow by 1 cm if only watered on the current day\n            consecutive_dry_days = 0  # Reset consecutive dry days counter\n        else:\n            consecutive_dry_days += 1  # Increment consecutive dry days counter\n\n        if consecutive_dry_days == 2:\n            return -1  # Flower dies if not watered for two consecutive days\n\n    return height\n\n# Interface for the program\nn = int(input())\nfor _ in range(n):\n    days = int(input())\n    watering_schedule = list(map(int, input().split()))\n    result = calculate_flower_height(days, watering_schedule)\n    print(result)\n", "from typing import List\n## main.py\n\ndef flower_growth(n: int, watering_days: list[int]) -> int:\n    if n == 0:\n        return -1\n    \n    height = 1  # The initial height of the flower\n    consecutive_unwatering_days = 0  # To keep track of consecutive unwatering days\n\n    for i in range(n):\n        if watering_days[i] == 1:\n            if i > 0 and watering_days[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n            consecutive_unwatering_days = 0  # Reset the counter since it was watered\n        else:\n            consecutive_unwatering_days += 1\n            if consecutive_unwatering_days == 2:\n                return -1  # The flower dies\n\n    return height\n\n# Interface\nn = int(input())\nfor _ in range(n):\n    days = int(input())\n    watering_days = list(map(int, input().split()))\n    result = flower_growth(days, watering_days)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(n: int, watering_schedule: list) -> int:\n    # Initialize the flower height\n    height = 1\n    # Initialize the previous watering status\n    previous_watered = False\n    \n    for i in range(n):\n        if watering_schedule[i] == 1:\n            if previous_watered:\n                height += 5\n            else:\n                height += 1\n            previous_watered = True\n        else:\n            previous_watered = False\n    \n    # Check if the flower dies\n    if not previous_watered and height == 1:\n        return -1\n    \n    return height\n\n# Read input\nn = int(input())\nwatering_schedule = list(map(int, input().split()))\n\n# Calculate and print the result\nresult = calculate_flower_height(n, watering_schedule)\nprint(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(days: int, watering_schedule: list) -> int:\n    \"\"\"\n    Calculate the height of the flower after a given number of days based on the watering schedule.\n\n    Args:\n        days (int): The number of days.\n        watering_schedule (list): A list of integers where 1 indicates the flower was watered on that day, and 0 indicates it was not.\n\n    Returns:\n        int: The final height of the flower or -1 if it has died.\n    \"\"\"\n    # Initialize the flower's height\n    height = 1\n    # Track if the flower was watered the previous day\n    was_watered_yesterday = False\n\n    for i in range(days):\n        # Check if the flower was watered today\n        if watering_schedule[i] == 1:\n            # If the flower was watered today, it grows by 1 centimeter\n            height += 1\n            # Check if the flower was also watered the previous day\n            if was_watered_yesterday:\n                # If it was, it grows by an additional 4 centimeters (5 - 1)\n                height += 4\n            # Update the flag for the previous day\n            was_watered_yesterday = True\n        else:\n            # If the flower was not watered today, it does not grow\n            was_watered_yesterday = False\n\n        # Check if the flower has not been watered for two consecutive days\n        if i > 0 and watering_schedule[i - 1] == 0 and watering_schedule[i] == 0:\n            # If so, the flower dies\n            return -1\n\n    return height\n\n# Read input from the user\nn = int(input())\nwatering_schedule = list(map(int, input().split()))\n\n# Calculate the final height of the flower\nresult = calculate_flower_height(n, watering_schedule)\n\n# Output the result\nprint(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(n: int, watering_days: list[int]) -> int:\n    # Initialize the flower's height and the last watering day\n    height = 1\n    last_watered = -1\n    \n    # Iterate over each day\n    for day in range(n):\n        # Check if the flower was watered on this day\n        if watering_days[day] == 1:\n            # If the flower was watered on the previous day, grow by 5 cm\n            if last_watered == day - 1:\n                height += 5\n            else:\n                # Otherwise, grow by 1 cm\n                height += 1\n            # Update the last watering day\n            last_watered = day\n        else:\n            # If the flower was not watered, check if it has died\n            if day - last_watered > 1:\n                return -1\n    \n    return height\n\n# Read input\nn = int(input())\nwatering_days = list(map(int, input().split()))\n\n# Calculate and print the result\nresult = calculate_flower_height(n, watering_days)\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(n: int, watering_days: List[int]) -> int:\n    # Initialize the flower height to 1 centimeter\n    flower_height = 1\n    # Initialize a flag to track if the flower was watered the previous day\n    previous_watered = False\n    # Initialize a counter for consecutive days without watering\n    days_without_water = 0\n\n    for day in range(n):\n        if watering_days[day] == 1:\n            # If the flower was watered today\n            if previous_watered:\n                # If the flower was also watered the previous day, grow by 5 cm\n                flower_height += 5\n            else:\n                # If the flower was not watered the previous day, grow by 1 cm\n                flower_height += 1\n            # Update the flag to indicate the flower was watered today\n            previous_watered = True\n            # Reset the counter for consecutive days without watering\n            days_without_water = 0\n        else:\n            # If the flower was not watered today\n            # Increment the counter for consecutive days without watering\n            days_without_water += 1\n            # Update the flag to indicate the flower was not watered today\n            previous_watered = False\n\n        # Check if the flower has not been watered for two consecutive days\n        if days_without_water == 2:\n            # If so, the flower dies\n            flower_height = -1\n            break\n\n    return flower_height\n\n# Read input from the user\nn = int(input())\nwatering_days = list(map(int, input().split()))\n\n# Calculate the final height of the flower\nresult = calculate_flower_height(n, watering_days)\n\n# Print the result\nprint(result)\n", "from typing import List\n## main.py\n\nimport sys\n\ndef flower_growth(n: int, watering_days: list[int]) -> int:\n    height = 1  # The flower starts at 1 cm\n    previous_watering_day = -1  # No watering on the first day\n\n    for day in range(n):\n        if day in watering_days or (previous_watering_day == day - 1 and day > 0):\n            height += 5\n        else:\n            height = -1  # The flower dies\n            break\n\n        previous_watering_day = day if day in watering_days else previous_watering_day\n\n    return height\n\n# Read input from the user\nn = int(input().strip())\nwatering_days = list(map(int, input().strip().split()))\n\n# Call the function and print the result\nresult = flower_growth(n, watering_days)\nprint(result)\n"], "plans": ["requirement analysis:\nThe requirements specify the need to simulate the growth of a flower based on watering patterns over a given number of days. The product must handle multiple test cases and provide the final height of the flower or indicate if it has died. The user interface should be straightforward for easy input and output.\nrequirement pool:\n- Implement the flower growth logic based on watering days.\n- Handle multiple test cases efficiently.\n- Provide clear output indicating the final height or if the flower has died.\n- Ensure the user interface is intuitive and easy to use.\n- Develop a visually appealing interface for better user experience.\nTo implement the flower growth simulation, we will use a simple Python script that calculates the height of the flower based on the given watering days. The script will handle multiple test cases, each with a different number of days and watering patterns. The growth logic will consider the rules provided, including the doubling growth when watered on consecutive days and the death condition if not watered for two days in succession.\n", "requirement analysis:\nThe requirements specify the need to simulate the growth of a flower based on user input of watering days. The product must handle multiple test cases and output the correct height of the flower or indicate if it has died. The user interface should be simple and clear, allowing users to input data and receive results efficiently.\nrequirement pool:\n- Implement the logic to calculate the flower's height based on watering days.\n- Handle multiple test cases efficiently.\n- Output the correct height of the flower or indicate if it has died.\n- Create a user-friendly interface for input and output.\n- Ensure the product is easy to understand and use.\nTo implement the flower growth simulation, we will use a simple Python script that calculates the height of the flower based on the given days and watering schedule. The script will handle multiple test cases efficiently and output the correct height of the flower or indicate if it has died. We will use basic Python data structures and control flow to achieve this.\n", "requirement analysis:\nThe requirements specify the behavior of the flower's growth based on watering days. The product must handle multiple test cases and provide the correct height of the flower or indicate if it has died. The output should be clear and concise, following the specified format.\nrequirement pool:\n- Implement the logic for flower growth based on watering days.\n- Handle multiple test cases efficiently.\n- Ensure the output matches the specified format.\n- Provide a clear indication if the flower has died due to lack of watering.\n- Allow for easy input of watering days through a user-friendly interface.\nWe will implement a Python function that simulates the growth of Petya's flower based on the given days and watering schedule. The function will iterate through each day, checking the conditions for watering and growth. If the flower is not watered for two consecutive days, it will be considered dead, and the function will return -1. Otherwise, it will return the final height of the flower.\n", "requirement analysis:\nThe requirements specify that the product needs to handle multiple test cases, each with a specific number of days and watering schedule. The product must accurately calculate the flower's height based on the given days and watering patterns. It should also handle cases where the flower does not grow due to not being watered for two consecutive days, in which case it should output -1.\nrequirement pool:\n- The main code must be able to read input for multiple test cases.\n- The code must calculate the flower's height based on the watering schedule.\n- The code must handle cases where the flower does not grow due to not being watered for two consecutive days.\n- Implement a user-friendly interface for easy input and output.\n- Optimize the code for efficiency to handle up to 100 test cases.\nWe will use Python for the implementation as it provides a simple and efficient way to handle the requirements. The main challenge is to accurately calculate the flower's growth based on the given days and watering patterns, including handling cases where the flower does not grow due to not being watered for two consecutive days.\n", "requirement analysis:\nThe requirements specify the need to simulate the growth of a flower based on watering days. The product must handle multiple test cases and provide the final height of the flower or indicate if it has died. The user interface should be straightforward for easy input and output.\nrequirement pool:\n- Implement the flower growth logic based on watering days.\n- Handle multiple test cases efficiently.\n- Provide a clear output indicating the final height or if the flower has died.\n- Ensure the user interface is intuitive and easy to use.\nTo implement the flower growth simulation, we will use Python due to its simplicity and readability. The main challenge is to accurately simulate the growth of the flower based on the given rules and handle multiple test cases efficiently. We will use a list to keep track of the flower's growth status for each day and apply the rules accordingly.\n", "requirement analysis:\nThe requirements for this project are clear and focused on simulating the growth of a flower based on user input. The primary goal is to create a functional application that can handle multiple test cases and provide accurate results based on the given rules. The user interface should be simple and intuitive, allowing users to input data easily and receive results in a clear format.\nrequirement pool:\n- Implement a function to calculate the height of the flower based on the watering schedule.\n- Allow the application to handle multiple test cases efficiently.\n- Ensure the user interface is simple and easy to use.\n- Include a feature to display the final height of the flower or indicate if it has died.\n- Develop an optional feature to provide detailed care tips for the user.\nTo implement the flower growth simulation, we will use Python due to its simplicity and readability. The main challenge is to accurately simulate the flower's growth based on the given rules and user inputs. We will use a list to keep track of the days the flower is watered and calculate its height accordingly.\n", "requirement analysis:\nThe requirements are clear and specific. The main task is to simulate the growth of a flower based on user input of watering days. The product should handle multiple test cases and output the correct height of the flower or indicate if it has died. The user interface should be simple and easy to use.\nrequirement pool:\n- Implement the logic to calculate the flower's height based on watering days.\n- Handle multiple test cases and output the correct result for each.\n- Ensure the flower dies if not watered for two consecutive days.\n- Create a user-friendly interface for input and output.\n- Test the product with various inputs to ensure robustness.\nTo implement the flower growth simulation, we will use Python due to its simplicity and readability. The main challenge is to handle the logic of watering days and consecutive non-watering days. We will use a list to keep track of the flower's growth status over the days. The flower starts at 1 centimeter and grows by 1 centimeter each day it is watered, but grows by 5 centimeters if it is watered on consecutive days. If the flower is not watered for two consecutive days, it dies.\n", "requirement analysis:\nThe requirements specify the need to simulate the growth of a flower based on watering days. The product must handle multiple test cases and provide clear output for each case. The flower's growth depends on whether it was watered on consecutive days or not. The output should indicate the final height of the flower or -1 if it has died due to lack of watering.\nrequirement pool:\n- Implement the logic for flower growth based on watering days.\n- Handle multiple test cases efficiently.\n- Provide clear output for each test case, indicating the final height or -1 if the flower has died.\n- Ensure the application is user-friendly and easy to use.\n- Consider the cost and complexity of implementation, aiming for a balance between functionality and affordability.\nWe will use Python for the implementation as it provides a simple and efficient way to handle the requirements. The main challenge is to simulate the flower's growth based on the given watering days and determine if it dies due to lack of watering. We will use a list to keep track of the flower's growth status for each day.\n", "requirement analysis:\nThe requirements specify the behavior of the flower based on watering days and the need to determine its height after a given number of days. The product must handle multiple test cases and output the correct height or indicate if the flower has died. The user interface should be simple and clear, allowing users to input the necessary data and receive the results.\nrequirement pool:\n- Implement the logic to calculate the flower's height based on the watering schedule.\n- Handle multiple test cases and output the correct result for each.\n- Ensure the user interface is simple and easy to use.\n- Include a feature to indicate if the flower has died.\n- Allow users to input the number of days and the watering schedule.\nWe will implement the flower growth simulation using a simple Python function that takes the number of days and a list of watering days as input. The function will iterate through each day, applying the growth rules based on whether the flower was watered or not. If the flower is not watered for two consecutive days, it will die, and the function will return -1. Otherwise, it will return the final height of the flower.\n", "requirement analysis:\nThe requirements specify the need to simulate the growth of a flower based on watering patterns over a given number of days. The product must handle multiple test cases and provide the final height of the flower or indicate if it has died. The user interface should be straightforward for easy input and output of data.\nrequirement pool:\n- Implement the flower growth logic based on watering days.\n- Handle multiple test cases efficiently.\n- Provide a clear output indicating the final height or if the flower has died.\n- Ensure the user interface is intuitive and easy to use.\n- Design a visually appealing interface.\nTo implement the flower growth simulation, we will use Python due to its simplicity and readability. The main challenge is to accurately simulate the growth of the flower based on the watering patterns over a given number of days. We will use a list to keep track of the days the flower is watered and calculate its height accordingly.\n"], "scores": [], "pass_results": [false, false, true, false, false, true, true, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 82, "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "mutate_method": "condense_two2one", "parent_index": 72}
