{"name": "1575_I. Illusions of the Desert", "description": "Chanek Jones is back, helping his long-lost relative Indiana Jones, to find a secret treasure in a maze buried below a desert full of illusions.\n\nThe map of the labyrinth forms a tree with n rooms numbered from 1 to n and n - 1 tunnels connecting them such that it is possible to travel between each pair of rooms through several tunnels.\n\nThe i-th room (1 \u2264 i \u2264 n) has a_i illusion rate. To go from the x-th room to the y-th room, there must exist a tunnel between x and y, and it takes max(|a_x + a_y|, |a_x - a_y|) energy. |z| denotes the absolute value of z.\n\nTo prevent grave robbers, the maze can change the illusion rate of any room in it. Chanek and Indiana would ask q queries.\n\nThere are two types of queries to be done:\n\n  * 1\\ u\\ c \u2014 The illusion rate of the x-th room is changed to c (1 \u2264 u \u2264 n, 0 \u2264 |c| \u2264 10^9). \n  * 2\\ u\\ v \u2014 Chanek and Indiana ask you the minimum sum of energy needed to take the secret treasure at room v if they are initially at room u (1 \u2264 u, v \u2264 n). \n\n\n\nHelp them, so you can get a portion of the treasure!\n\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 |a_i| \u2264 10^9) \u2014 inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 \u2264 s_i, t_i \u2264 n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\nExample\n\nInput\n\n\n6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n\n\nOutput\n\n\n39\n32\n0\n\nNote\n\n<image>\n\nIn the first query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|10 + 4|, |10 - 4|) = 14 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\nIn total, it takes 39 energy.\n\nIn the second query, the illusion rate of the 1-st room changes from 10 to -3.\n\nIn the third query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|-3 + 4|, |-3 - 4|) = 7 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\n\n\nNow, it takes 32 energy.", "tags": ["data structures", "trees"], "difficulty": 15, "id": 1575, "sample_io": [{"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["39\n32\n0\n"]}], "test_list": [{"input": "2 1\n-1000000000 1000000000\n2 1\n2 1 2\n", "output": ["2000000000\n"]}, {"input": "4 4\n2 -1000 100 3\n2 1\n3 2\n4 1\n2 1 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["2102\n0\n1000000003\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["19\n32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n30\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["9\n12\n0\n"]}, {"input": "6 3\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["9\n12\n"]}, {"input": "2 1\n-1000000000 1010000000\n2 1\n2 1 2\n", "output": ["2010000000\n"]}, {"input": "4 4\n2 -1000 100 3\n2 1\n3 2\n4 2\n2 1 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["2102\n0\n1000002003\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["39\n33\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 2\n", "output": ["9\n32\n23\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["25\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["9\n32\n25\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["9\n0\n0\n"]}, {"input": "6 4\n10 -9 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["35\n29\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 2\n", "output": ["9\n32\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["31\n0\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["3\n26\n22\n"]}, {"input": "6 4\n0 -9 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["17\n40\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n38\n0\n"]}, {"input": "6 4\n10 -9 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["0\n29\n0\n"]}, {"input": "6 4\n0 -9 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["17\n0\n0\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["16\n0\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["0\n19\n0\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n25\n"]}, {"input": "6 4\n0 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["0\n22\n0\n"]}, {"input": "6 4\n0 -9 4 0 8 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n13\n"]}, {"input": "6 4\n0 -3 2 -1 2 -12\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["0\n34\n0\n"]}, {"input": "6 4\n0 -9 4 0 14 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["28\n0\n13\n"]}, {"input": "6 4\n0 -3 2 -1 2 -12\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["0\n8\n0\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["39\n25\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 3 3\n", "output": ["9\n13\n0\n"]}, {"input": "6 3\n0 -9 2 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 2 3\n", "output": ["8\n11\n"]}, {"input": "4 4\n2 -1000 100 3\n2 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1100\n0\n1000002003\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n4 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["9\n22\n15\n"]}, {"input": "6 3\n0 -17 2 -1 4 -5\n1 4\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["1\n4\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n6 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 2\n", "output": ["21\n32\n"]}, {"input": "6 4\n0 -9 0 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 6 3\n", "output": ["9\n30\n5\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 0\n2 1 2\n2 5 2\n", "output": ["3\n23\n22\n"]}, {"input": "6 4\n0 -14 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["17\n45\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -2\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n24\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["0\n7\n0\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["37\n0\n25\n"]}, {"input": "6 4\n0 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["0\n21\n0\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["28\n0\n15\n"]}, {"input": "6 4\n10 -9 1 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 3\n", "output": ["19\n32\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n6 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["21\n0\n0\n"]}, {"input": "4 4\n2 -1000 100 3\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1100\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n1 4\n5 6\n4 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["1\n14\n21\n"]}, {"input": "6 4\n0 -9 2 -1 3 -6\n1 5\n6 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 2\n", "output": ["19\n30\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["38\n0\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -1\n2 1 2\n2 5 2\n", "output": ["3\n24\n22\n"]}, {"input": "6 3\n0 0 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 4\n1 2 3\n", "output": ["19\n12\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 2 3\n", "output": ["28\n42\n15\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["0\n4\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n1 4\n5 6\n4 2\n6 3\n2 1 4\n1 2 -3\n2 1 2\n2 5 2\n", "output": ["1\n5\n9\n"]}, {"input": "6 4\n10 -9 2 -1 4 0\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["26\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 5\n2 3 3\n", "output": ["0\n5\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 3\n1 1 -3\n2 1 5\n2 3 3\n", "output": ["5\n5\n0\n"]}, {"input": "2 1\n-1000000000 1000000010\n2 1\n2 1 2\n", "output": ["2000000010\n"]}, {"input": "6 4\n0 -9 2 -1 4 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n22\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 4 3\n", "output": ["9\n12\n21\n"]}, {"input": "2 1\n-651044801 1010000000\n2 1\n2 1 2\n", "output": ["1661044801\n"]}, {"input": "6 4\n-1 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["10\n0\n0\n"]}, {"input": "6 3\n0 -17 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 1 4\n2 3 3\n", "output": ["9\n15\n"]}, {"input": "6 4\n10 -9 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 3 -3\n2 1 2\n2 3 3\n", "output": ["35\n35\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -2\n2 1 2\n1 3 2\n", "output": ["9\n31\n"]}, {"input": "6 4\n0 -9 0 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["28\n30\n0\n"]}, {"input": "6 4\n10 -13 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["35\n0\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 1\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["0\n26\n22\n"]}, {"input": "6 4\n10 -3 2 -1 2 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["0\n35\n0\n"]}, {"input": "6 4\n0 -9 2 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n23\n"]}, {"input": "6 4\n-1 -9 4 0 8 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["17\n0\n13\n"]}, {"input": "6 4\n0 -9 4 0 0 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["0\n0\n13\n"]}, {"input": "6 4\n10 -15 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["45\n25\n0\n"]}, {"input": "6 3\n0 -9 2 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 2 3\n", "output": ["8\n12\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 4 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["39\n0\n"]}, {"input": "6 4\n0 -14 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["17\n31\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 5\n", "output": ["0\n7\n4\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["37\n0\n0\n"]}, {"input": "4 4\n2 -1000 110 3\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1110\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n1 4\n5 6\n4 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["10\n14\n21\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 2\n2 2 3\n", "output": ["28\n43\n15\n"]}, {"input": "6 4\n3 -9 2 -1 4 0\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["19\n0\n"]}, {"input": "2 1\n-651044801 1010000100\n2 1\n2 1 2\n", "output": ["1661044901\n"]}, {"input": "6 4\n0 -9 0 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["28\n30\n14\n"]}, {"input": "6 4\n0 -6 2 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n20\n"]}, {"input": "6 4\n0 -9 4 0 0 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["9\n0\n13\n"]}, {"input": "6 3\n10 -15 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["45\n25\n"]}, {"input": "6 3\n0 -9 2 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 5\n2 2 3\n", "output": ["8\n8\n"]}, {"input": "6 4\n10 -9 2 -1 3 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 4 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["37\n0\n"]}, {"input": "4 4\n2 -1000 110 4\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1110\n0\n1000000004\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 4\n1 1 -4\n2 1 2\n2 2 3\n", "output": ["28\n13\n51\n"]}, {"input": "6 4\n0 -9 0 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["27\n30\n14\n"]}, {"input": "6 3\n10 -21 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["51\n25\n"]}, {"input": "6 4\n0 -6 4 0 14 1\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 4\n1 1 -4\n2 1 2\n2 2 3\n", "output": ["28\n10\n48\n"]}, {"input": "6 3\n10 -21 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["57\n31\n"]}, {"input": "6 3\n10 -21 2 -1 4 -9\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["31\n31\n"]}, {"input": "6 3\n10 -21 2 -1 4 -9\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 2\n1 1 -3\n2 2 3\n2 3 3\n", "output": ["31\n55\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 6\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["21\n24\n0\n"]}, {"input": "6 3\n0 -9 2 -1 4 -5\n1 5\n2 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["37\n40\n"]}, {"input": "2 1\n-1000000000 1010001000\n2 1\n2 1 2\n", "output": ["2010001000\n"]}, {"input": "6 4\n0 -9 2 -1 4 -3\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 2\n", "output": ["9\n26\n17\n"]}, {"input": "6 4\n0 -9 3 -1 2 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["5\n26\n0\n"]}, {"input": "6 4\n1 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["10\n32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 4\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 2\n", "output": ["1\n34\n"]}, {"input": "6 4\n0 -9 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["17\n35\n0\n"]}, {"input": "6 4\n-1 -9 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["10\n38\n0\n"]}, {"input": "6 4\n10 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 6\n", "output": ["0\n29\n8\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 6\n", "output": ["16\n0\n10\n"]}, {"input": "6 3\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n"]}, {"input": "6 4\n0 -12 4 0 14 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["28\n0\n16\n"]}, {"input": "6 4\n0 -3 2 -1 2 -12\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 3\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["29\n8\n0\n"]}, {"input": "6 4\n10 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["39\n27\n0\n"]}, {"input": "6 4\n10 -9 1 -1 4 -6\n1 5\n2 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["49\n32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 1\n", "output": ["9\n0\n25\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 3 6\n", "output": ["9\n13\n7\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 0\n2 1 2\n2 5 2\n", "output": ["16\n23\n22\n"]}, {"input": "6 4\n0 -14 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 1 3\n", "output": ["17\n45\n35\n"]}, {"input": "6 4\n0 -3 2 -1 3 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["0\n23\n0\n"]}, {"input": "6 4\n10 -9 1 -1 0 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 3\n", "output": ["11\n24\n"]}, {"input": "6 4\n10 -9 2 -1 6 -6\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["42\n0\n"]}, {"input": "6 4\n1 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -1\n2 1 2\n2 5 2\n", "output": ["4\n24\n22\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 2 3\n", "output": ["39\n42\n15\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 4\n2 4 3\n", "output": ["0\n4\n13\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 5\n2 3 6\n", "output": ["0\n5\n2\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 4 3\n", "output": ["9\n13\n21\n"]}, {"input": "6 4\n10 -9 2 -1 0 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 3 -3\n2 1 2\n2 3 3\n", "output": ["31\n31\n0\n"]}, {"input": "6 4\n0 -9 0 -1 4 -5\n1 6\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["28\n22\n0\n"]}, {"input": "6 4\n10 -25 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["47\n0\n"]}, {"input": "6 4\n10 -3 2 -1 2 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["0\n28\n0\n"]}, {"input": "6 4\n0 -9 2 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["37\n0\n23\n"]}, {"input": "6 4\n0 -9 4 1 0 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["1\n0\n13\n"]}, {"input": "6 4\n0 -9 3 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 3 3\n", "output": ["8\n12\n0\n"]}, {"input": "6 4\n0 -14 4 -1 8 -3\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["17\n25\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 1 5\n", "output": ["0\n7\n2\n"]}, {"input": "4 4\n2 -1350 110 3\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1460\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 2 -1 7 -6\n1 5\n1 4\n5 6\n4 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["10\n14\n24\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 2 -4\n2 1 2\n2 2 3\n", "output": ["28\n34\n10\n"]}, {"input": "6 3\n0 -17 2 -1 4 -5\n1 5\n3 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 1 4\n1 3 3\n", "output": ["23\n29\n"]}, {"input": "6 4\n0 -9 4 0 0 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 4 2\n2 2 3\n", "output": ["9\n9\n13\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n5 2\n2 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["9\n20\n13\n"]}, {"input": "6 4\n3 -2 2 -1 4 0\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 4\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["21\n0\n"]}, {"input": "6 3\n0 -17 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -6\n2 1 4\n1 3 3\n", "output": ["28\n15\n"]}, {"input": "6 4\n0 -8 0 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["26\n29\n14\n"]}, {"input": "6 3\n10 -21 2 -1 4 -6\n1 5\n5 4\n5 2\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["39\n67\n"]}, {"input": "6 4\n10 -9 2 -1 3 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 3 2\n1 4 -3\n2 1 2\n2 4 3\n", "output": ["37\n23\n"]}, {"input": "6 4\n0 -6 4 0 14 1\n1 6\n5 4\n5 6\n1 2\n6 3\n2 1 4\n1 1 -4\n2 1 2\n2 2 3\n", "output": ["30\n10\n20\n"]}, {"input": "6 3\n0 -17 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 2 4\n1 2 3\n", "output": ["9\n44\n"]}, {"input": "6 3\n10 -21 2 -1 4 -9\n1 4\n5 4\n5 6\n1 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["31\n33\n"]}, {"input": "6 3\n10 -21 2 -1 8 -9\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 2\n1 1 -3\n2 2 3\n2 3 3\n", "output": ["31\n63\n"]}, {"input": "6 3\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 5\n0 2 3\n", "output": ["9\n7\n"]}, {"input": "6 4\n0 -9 3 -1 2 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 6\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n26\n0\n"]}, {"input": "6 4\n1 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 1 2\n2 3 3\n", "output": ["10\n35\n0\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -4\n2 1 2\n1 3 3\n", "output": ["31\n"]}, {"input": "6 4\n-1 -9 2 -1 0 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["2\n30\n0\n"]}, {"input": "6 4\n10 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 3 -3\n2 1 2\n2 3 6\n", "output": ["0\n29\n9\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 6\n", "output": ["16\n0\n15\n"]}, {"input": "6 3\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 1\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["0\n0\n"]}, {"input": "6 4\n4 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["33\n27\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 3 2\n2 3 1\n", "output": ["9\n23\n25\n"]}, {"input": "6 4\n0 -1 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 0\n2 1 2\n2 5 2\n", "output": ["16\n15\n14\n"]}, {"input": "6 4\n19 -9 1 -1 0 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 3\n", "output": ["20\n24\n"]}, {"input": "6 4\n0 -9 2 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 2 3\n", "output": ["39\n42\n13\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 5 3\n", "output": ["9\n13\n16\n"]}, {"input": "6 4\n-1 -9 2 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 5\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["5\n0\n0\n"]}, {"input": "6 4\n10 -25 2 -1 4 -11\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["57\n0\n"]}, {"input": "6 4\n0 -9 2 0 8 -4\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["33\n0\n19\n"]}, {"input": "6 4\n0 -9 4 1 -1 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["3\n0\n13\n"]}, {"input": "4 4\n2 -2609 110 3\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["2719\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 3 -1 2 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 6\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["9\n26\n15\n"]}, {"input": "6 4\n13 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 3 -3\n2 1 2\n2 2 3\n", "output": ["31\n24\n"]}, {"input": "6 4\n1 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 1 2\n2 2 3\n", "output": ["10\n35\n25\n"]}, {"input": "6 4\n-1 -9 2 -1 0 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["21\n30\n0\n"]}, {"input": "6 4\n10 -3 2 -1 2 -6\n1 4\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 3 -3\n2 1 2\n2 3 6\n", "output": ["0\n31\n9\n"]}, {"input": "6 4\n4 -9 4 -1 4 -6\n1 2\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["13\n37\n0\n"]}, {"input": "6 4\n1 -1 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 0\n2 1 2\n2 5 2\n", "output": ["17\n15\n14\n"]}, {"input": "6 4\n0 -10 3 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -4\n2 1 4\n2 3 3\n", "output": ["21\n12\n0\n"]}, {"input": "6 4\n0 -17 2 -1 4 -16\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -6\n2 1 4\n1 3 3\n", "output": ["42\n15\n"]}, {"input": "6 4\n10 -9 2 -1 3 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n1 3 2\n1 4 -3\n2 1 2\n2 4 4\n", "output": ["27\n0\n"]}, {"input": "6 4\n-1 -9 2 -1 0 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["21\n30\n20\n"]}, {"input": "6 3\n0 -7 4 -1 10 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["21\n42\n"]}, {"input": "6 4\n4 -9 4 -1 4 -6\n1 2\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -2\n2 1 3\n2 3 3\n", "output": ["13\n36\n0\n"]}, {"input": "6 4\n19 -3 1 -1 0 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 1 3\n", "output": ["20\n18\n"]}, {"input": "6 4\n0 -10 3 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -4\n2 1 4\n2 1 3\n", "output": ["21\n12\n25\n"]}, {"input": "6 4\n10 -9 2 -1 3 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 3 2\n1 4 -3\n2 1 2\n2 4 4\n", "output": ["13\n27\n0\n"]}, {"input": "6 3\n0 -7 4 -1 10 -3\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["21\n36\n"]}, {"input": "6 4\n0 -16 2 -1 4 -23\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -6\n2 1 4\n1 3 3\n", "output": ["56\n15\n"]}, {"input": "6 4\n10 -9 2 -1 3 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 3 2\n1 4 -3\n2 2 2\n2 4 4\n", "output": ["13\n0\n0\n"]}, {"input": "6 4\n10 -9 2 -1 3 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 3 2\n1 4 -3\n1 2 2\n2 4 4\n", "output": ["13\n0\n"]}, {"input": "4 4\n3 -1000 100 3\n2 1\n3 2\n4 1\n2 1 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["2103\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 2\n", "output": ["9\n12\n23\n"]}, {"input": "6 3\n0 -5 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n1 1 4\n2 2 3\n", "output": ["9\n"]}, {"input": "6 4\n10 -9 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -5\n2 1 2\n2 3 3\n", "output": ["0\n31\n0\n"]}, {"input": "6 4\n0 -9 4 0 11 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["22\n0\n13\n"]}, {"input": "6 4\n0 -3 2 -1 2 -12\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -5\n2 1 2\n2 3 3\n", "output": ["0\n36\n0\n"]}, {"input": "6 4\n10 -1 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["31\n25\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 4\n", "output": ["9\n0\n23\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 5\n1 1 -4\n2 1 4\n2 3 3\n", "output": ["4\n13\n0\n"]}, {"input": "4 4\n2 -1000 100 3\n2 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 2 -1000000000\n2 1 4\n", "output": ["1100\n0\n2000000005\n"]}, {"input": "6 4\n0 -4 2 -1 4 -2\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n19\n0\n"]}], "task_id": "codecontest/8", "prompt": "Chanek Jones is back, assisting his long-lost relative Indiana Jones, to discover a hidden treasure in a maze buried beneath a desert filled with illusions. The map of the labyrinth forms a tree with n rooms numbered from 1 to n and n - 1 tunnels connecting them, enabling travel between each pair of rooms through several tunnels. The i-th room (1 \u2264 i \u2264 n) has a_i illusion rate. To go from the x-th room to the y-th room, there must exist a tunnel between x and y. It requires max(|a_x + a_y|, |a_x - a_y|) energy to conduct this traversal. |z| denotes the absolute value of z. To prevent grave robbers, the maze can alter the illusion rate of any room in it. Chanek and Indiana would ask q queries. There are two types of queries to be done: * 1\\ u\\ c \u2014 The illusion rate of the x-th room is modified to c (1 \u2264 u \u2264 n, 0 \u2264 |c| \u2264 10^9). * 2\\ u\\ v \u2014 Chanek and Indiana ask you the minimum sum of energy needed to take the secret treasure at room v if they are initially at room u (1 \u2264 u, v \u2264 n). Your task is to implement an efficient algorithm to handle both types of queries. Help them, so you can get a portion of the treasure! Optimize your solution to ensure it processes up to 100,000 queries efficiently.\n\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 |a_i| \u2264 10^9) \u2014 inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 \u2264 s_i, t_i \u2264 n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\nExample\n\nInput\n\n\n6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n\n\nOutput\n\n\n39\n32\n0\n\nNote\n\n<image>\n\nIn the first query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|10 + 4|, |10 - 4|) = 14 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\nIn total, it takes 39 energy.\n\nIn the second query, the illusion rate of the 1-st room changes from 10 to -3.\n\nIn the third query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|-3 + 4|, |-3 - 4|) = 7 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\n\n\nNow, it takes 32 energy.", "repair_prompt": ["Chanek Jones is back, assisting his long-lost relative Indiana Jones, to discover a hidden treasure in a maze buried beneath a desert filled with illusions. The map of the labyrinth forms a tree with n rooms numbered from 1 to n and n - 1 tunnels connecting them, enabling travel between each pair of rooms through several tunnels. The i-th room (1 \u2264 i \u2264 n) has a_i illusion rate. To go from the x-th room to the y-th room, there must exist a tunnel between x and y. It requires max(|a_x + a_y|, |a_x - a_y|) energy to conduct this traversal. |z| denotes the absolute value of z. To prevent grave robbers, the maze can alter the illusion rate of any room in it. Chanek and Indiana would ask q queries. There are two types of queries to be done: * 1\\ u\\ c \u2014 The illusion rate of the x-th room is modified to c (1 \u2264 u \u2264 n, 0 \u2264 |c| \u2264 10^9). * 2\\ u\\ v \u2014 Chanek and Indiana ask you the minimum sum of energy needed to take the secret treasure at room v if they are initially at room u (1 \u2264 u, v \u2264 n). Your task is to implement an efficient algorithm to handle both types of queries. Help them, so you can get a portion of the treasure! Optimize your solution to ensure it processes up to 100,000 queries efficiently.\n\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 |a_i| \u2264 10^9) \u2014 inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 \u2264 s_i, t_i \u2264 n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n\n\nOutput\n\n\n39\n32\n0\n\nNote\n\n<image>\n\nIn the first query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|10 + 4|, |10 - 4|) = 14 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\nIn total, it takes 39 energy.\n\nIn the second query, the illusion rate of the 1-st room changes from 10 to -3.\n\nIn the third query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|-3 + 4|, |-3 - 4|) = 7 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\n\n\nNow, it takes 32 energy.\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport sys\n\n# Assuming a tree is represented as an adjacency list\nGraph = List[List[int]]\n\n# Function to build the tree from the given tunnels\ndef build_tree(n: int, tunnels: List[Tuple[int, int]]) -> Graph:\n    tree = [[] for _ in range(n + 1)]\n    for s, t in tunnels:\n        tree[s].append(t)\n        tree[t].append(s)\n    return tree\n\n# Function to perform DFS and calculate the minimum energy required for traversal\ndef calculate_energy(tree: Graph, a_values: List[int], start_room: int, end_room: int) -> int:\n    n = len(tree) - 1  # Number of rooms\n    visited = [False] * (n + 1)\n    stack = [(start_room, -1, 0)]  # (current_room, parent, current_energy)\n\n    while stack:\n        current_room, parent, current_energy = stack.pop()\n        visited[current_room] = True\n\n        if current_room == end_room:\n            return current_energy\n\n        for neighbor in tree[current_room]:\n            if not visited[neighbor]:\n                next_energy = max(abs(a_values[current_room - 1] + a_values[neighbor - 1]), abs(a_values[current_room - 1] - a_values[neighbor - 1]))\n                stack.append((neighbor, current_room, current_energy + next_energy))\n\n    return -1  # If no path is found\n\n# Function to modify the illusion rate of a room\ndef modify_illusion_rate(a_values: List[int], room_index: int, new_rate: int) -> None:\n    a_values[room_index - 1] = new_rate\n\n# Main function to handle input and output\ndef main():\n    input_lines = sys.stdin.readlines()\n    n, q = map(int, input_lines[0].split())\n    a_values = list(map(int, input_lines[1].split()))\n    tunnels = [tuple(map(int, line.split())) for line in input_lines[2:n]]\n    tree = build_tree(n, tunnels)\n\n    for query in input_lines[n:]:\n        query = list(map(int, query.split()))\n        if query[0] == 1:\n            modify_illusion_rate(a_values, query[1], query[2])\n        elif query[0] == 2:\n            result = calculate_energy(tree, a_values, query[1], query[2])\n            print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nimport sys\nfrom typing import List, Tuple\n\n# Assuming a segment tree or binary indexed tree will be used for efficient updates\n# and dynamic programming with a tree data structure for minimum energy calculation.\n\n# Function signatures as per the user requirement\ndef update_illusion_rate(room_index: int, new_rate: int) -> None:\n    pass\n\ndef calculate_minimum_energy(start_room: int, end_room: int) -> int:\n    pass\n\n# Function to read input and process queries\ndef process_queries(n: int, q: int, a: List[int], edges: List[Tuple[int, int]], queries: List[List[int]]) -> None:\n    # Initialize the illusion rates in the rooms\n    illusion_rates = a\n\n    # Process each query\n    for query in queries:\n        query_type = query[0]\n        if query_type == 1:\n            room_index, new_rate = query[1], query[2]\n            update_illusion_rate(room_index, new_rate)\n        elif query_type == 2:\n            start_room, end_room = query[1], query[2]\n            result = calculate_minimum_energy(start_room, end_room)\n            print(result)\n\n# Main function to read input and call process_queries\ndef main():\n    # Read the number of rooms (n) and the number of queries (q)\n    n, q = map(int, sys.stdin.readline().split())\n\n    # Read the initial illusion rates of each room\n    a = list(map(int, sys.stdin.readline().split()))\n\n    # Read the edges of the tree (n-1 edges)\n    edges = []\n    for _ in range(n - 1):\n        s, t = map(int, sys.stdin.readline().split())\n        edges.append((s, t))\n\n    # Read the queries\n    queries = []\n    for _ in range(q):\n        query = list(map(int, sys.stdin.readline().split()))\n        queries.append(query)\n\n    # Process the queries\n    process_queries(n, q, a, edges, queries)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport sys\n\n# Assuming a tree is represented as an adjacency list\nGraph = List[List[int]]\n\n# Initialize the graph and illusion rates\nn, q = 0, 0\na_values: List[int] = []\ngraph: Graph = []\n\n# Function to modify the illusion rate of a room\ndef modify_illusion_rate(room_index: int, new_rate: int) -> None:\n    a_values[room_index - 1] = new_rate\n\n# Function to calculate the minimum energy required for traversal between rooms\ndef calculate_energy(start_room: int, end_room: int) -> int:\n    # Use DFS to find the path and calculate energy\n    visited = [False] * n\n    stack = [(start_room, sys.maxsize)]\n    while stack:\n        current_room, min_energy = stack.pop()\n        if current_room == end_room:\n            return min_energy\n        visited[current_room - 1] = True\n        for neighbor in graph[current_room - 1]:\n            if not visited[neighbor - 1]:\n                energy = max(abs(a_values[current_room - 1] + a_values[neighbor - 1]), abs(a_values[current_room - 1] - a_values[neighbor - 1]))\n                stack.append((neighbor, min(min_energy, energy)))\n    return -1  # If no path is found\n\n# Read input\nn, q = map(int, input().split())\na_values = list(map(int, input().split()))\ngraph = [[] for _ in range(n)]\nfor _ in range(n - 1):\n    s, t = map(int, input().split())\n    graph[s - 1].append(t)\n    graph[t - 1].append(s)\n\n# Process queries\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        modify_illusion_rate(query[1], query[2])\n    elif query[0] == 2:\n        result = calculate_energy(query[1], query[2])\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport sys\n\n# Assuming a tree is represented as an adjacency list\nGraph = List[List[int]]\n\n# Function to modify the illusion rate of a room\ndef modify_illusion_rate(room_index: int, new_rate: int) -> None:\n    illusion_rates[room_index - 1] = new_rate\n\n# Function to calculate the minimum energy required for traversal between rooms\ndef min_energy_required(start_room: int, end_room: int) -> int:\n    # Use DFS to find the path and calculate the energy\n    stack = [(start_room, -1, 0)]  # (current_room, parent_room, current_energy)\n    visited = set()\n    \n    while stack:\n        current_room, parent_room, current_energy = stack.pop()\n        \n        if current_room == end_room:\n            return current_energy\n        \n        if current_room in visited:\n            continue\n        visited.add(current_room)\n        \n        for neighbor in tree[current_room]:\n            if neighbor != parent_room:\n                energy = max(abs(illusion_rates[current_room - 1] + illusion_rates[neighbor - 1]), \n                             abs(illusion_rates[current_room - 1] - illusion_rates[neighbor - 1]))\n                stack.append((neighbor, current_room, current_energy + energy))\n    \n    return -1  # If no path is found, which should not happen given the problem constraints\n\n# Read input\nn, q = map(int, sys.stdin.readline().split())\nillusion_rates = list(map(int, sys.stdin.readline().split()))\ntree: Graph = [[] for _ in range(n + 1)]\n\nfor _ in range(n - 1):\n    s_i, t_i = map(int, sys.stdin.readline().split())\n    tree[s_i].append(t_i)\n    tree[t_i].append(s_i)\n\n# Process queries\nfor _ in range(q):\n    query = list(map(int, sys.stdin.readline().split()))\n    if query[0] == 1:\n        modify_illusion_rate(query[1], query[2])\n    elif query[0] == 2:\n        result = min_energy_required(query[1], query[2])\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport sys\n\n# Assuming a tree is represented as an adjacency list\nclass TreeNode:\n    def __init__(self, room_index: int, illusion_rate: int):\n        self.room_index = room_index\n        self.illusion_rate = illusion_rate\n        self.children: List[TreeNode] = []\n\n    def add_child(self, child: 'TreeNode'):\n        self.children.append(child)\n\ndef update_illusion_rate(room_index: int, new_rate: int) -> None:\n    # Update the illusion rate of the room at room_index to new_rate\n    # This function will modify the global state of the tree nodes\n    tree[room_index - 1].illusion_rate = new_rate\n\ndef min_energy_required(start_room: int, end_room: int) -> int:\n    # Calculate the minimum energy required to travel from start_room to end_room\n    # This function will use a depth-first search (DFS) to find the path and calculate the energy\n    \n    def dfs(node: TreeNode, target: int, visited: List[bool], energy: int, min_energy: int) -> int:\n        if node.room_index == target:\n            return min(min_energy, energy)\n        visited[node.room_index - 1] = True\n        for child in node.children:\n            if not visited[child.room_index - 1]:\n                min_energy = dfs(child, target, visited, energy + max(abs(node.illusion_rate - child.illusion_rate), abs(node.illusion_rate + child.illusion_rate)), min_energy)\n        visited[node.room_index - 1] = False\n        return min_energy\n\n    visited = [False] * len(tree)\n    return dfs(tree[start_room - 1], end_room, visited, 0, sys.maxsize)\n\n# Read input\nn, q = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\nedges = [list(map(int, sys.stdin.readline().split())) for _ in range(n - 1)]\n\n# Initialize tree nodes\ntree = [TreeNode(i + 1, a[i]) for i in range(n)]\n\n# Build the tree\nfor s, t in edges:\n    tree[s - 1].add_child(tree[t - 1])\n    tree[t - 1].add_child(tree[s - 1])\n\n# Process queries\nfor _ in range(q):\n    query = list(map(int, sys.stdin.readline().split()))\n    if query[0] == 1:\n        update_illusion_rate(query[1], query[2])\n    elif query[0] == 2:\n        result = min_energy_required(query[1], query[2])\n        print(result)\n", "from typing import List\n## main.py\n\nimport sys\nfrom typing import List, Tuple\n\n# Assuming a segment tree is used to efficiently update and query the illusion rates of rooms\nclass SegmentTree:\n    def __init__(self, size: int):\n        self.size = size\n        self.tree = [0] * (4 * size)\n    \n    def update(self, index: int, value: int, node: int = 0, start: int = 0, end: int = None):\n        if end is None:\n            end = self.size - 1\n        if start > index or end < index:\n            return\n        if start == end:\n            self.tree[node] = value\n            return\n        mid = (start + end) // 2\n        self.update(index, value, 2 * node + 1, start, mid)\n        self.update(index, value, 2 * node + 2, mid + 1, end)\n        self.tree[node] = max(self.tree[2 * node + 1], self.tree[2 * node + 2])\n    \n    def query(self, l: int, r: int, node: int = 0, start: int = 0, end: int = None) -> int:\n        if end is None:\n            end = self.size - 1\n        if l > end or r < start:\n            return -sys.maxsize\n        if l <= start and r >= end:\n            return self.tree[node]\n        mid = (start + end) // 2\n        left_max = self.query(l, r, 2 * node + 1, start, mid)\n        right_max = self.query(l, r, 2 * node + 2, mid + 1, end)\n        return max(left_max, right_max)\n\n# Assuming a graph is represented using adjacency list\nclass Graph:\n    def __init__(self, n: int):\n        self.n = n\n        self.adj_list = [[] for _ in range(n)]\n    \n    def add_edge(self, u: int, v: int):\n        self.adj_list[u].append(v)\n        self.adj_list[v].append(u)\n\n# Function to modify the illusion rate of a room\ndef modify_illusion_rate(room_index: int, new_rate: int) -> None:\n    illusion_rates[room_index - 1] = new_rate\n    segment_tree.update(room_index - 1, new_rate)\n\n# Function to calculate the minimum energy required to travel between two rooms\ndef min_energy_required(start_room: int, end_room: int) -> int:\n    # Use the segment tree to get the illusion rates at the start and end rooms\n    start_rate = segment_tree.query(start_room - 1, start_room - 1)\n    end_rate = segment_tree.query(end_room - 1, end_room - 1)\n    # Calculate the energy required using the absolute values of the illusion rates\n    return max(abs(start_rate + end_rate), abs(start_rate - end_rate))\n\n# Read input\nn, q = map(int, sys.stdin.readline().split())\nillusion_rates = list(map(int, sys.stdin.readline().split()))\ntunnels = [list(map(int, sys.stdin.readline().split())) for _ in range(n - 1)]\n\n# Initialize graph and segment tree\ngraph = Graph(n)\nfor u, v in tunnels:\n    graph.add_edge(u - 1, v - 1)\nsegment_tree = SegmentTree(n)\nfor i in range(n):\n    segment_tree.update(i, illusion_rates[i])\n\n# Process queries\nfor _ in range(q):\n    query = list(map(int, sys.stdin.readline().split()))\n    if query[0] == 1:\n        modify_illusion_rate(query[1], query[2])\n    elif query[0] == 2:\n        result = min_energy_required(query[1], query[2])\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport sys\n\n# Read input from stdin\ninput = sys.stdin.readline\n\n# Define the graph as an adjacency list\ngraph: List[List[int]] = []\n\n# Define the illusion rates of the rooms\nillusion_rates: List[int] = []\n\n# Define the energy required to traverse between rooms\nenergy_required: List[List[int]] = []\n\n# Function to modify the illusion rate of a room\ndef modify_illusion_rate(room_index: int, new_value: int) -> None:\n    illusion_rates[room_index] = new_value\n\n# Function to calculate the minimum energy required to traverse between rooms using DFS\ndef min_energy_required(start_room: int, end_room: int) -> int:\n    visited = [False] * len(graph)\n    stack = [(start_room, float('inf'))]\n    while stack:\n        node, min_energy = stack.pop()\n        if node == end_room:\n            return min_energy\n        visited[node] = True\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                energy = max(abs(illusion_rates[node] + illusion_rates[neighbor]), abs(illusion_rates[node] - illusion_rates[neighbor]))\n                stack.append((neighbor, min(min_energy, energy)))\n    return -1  # If no path is found\n\n# Read the number of rooms and queries\nn, q = map(int, input().split())\n\n# Read the initial illusion rates of the rooms\nillusion_rates = list(map(int, input().split()))\n\n# Initialize the graph with empty lists\ngraph = [[] for _ in range(n)]\n\n# Read the edges and build the graph\nfor _ in range(n - 1):\n    s, t = map(int, input().split())\n    graph[s - 1].append(t - 1)\n    graph[t - 1].append(s - 1)\n\n# Process the queries\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        modify_illusion_rate(query[1] - 1, query[2])\n    elif query[0] == 2:\n        result = min_energy_required(query[1] - 1, query[2] - 1)\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport sys\n\n# Read input from stdin\ninput = sys.stdin.readline\n\nclass TreeNode:\n    def __init__(self, room_index: int, illusion_rate: int):\n        self.room_index = room_index\n        self.illusion_rate = illusion_rate\n        self.children: List[TreeNode] = []\n\n    def add_child(self, child: 'TreeNode'):\n        self.children.append(child)\n\ndef build_tree(n: int, edges: List[Tuple[int, int]], illusion_rates: List[int]) -> List[TreeNode]:\n    nodes = [TreeNode(i, illusion_rates[i]) for i in range(n)]\n    for s, t in edges:\n        nodes[s].add_child(nodes[t])\n        nodes[t].add_child(nodes[s])\n    return nodes\n\ndef update_illusion_rate(node: TreeNode, new_rate: int):\n    node.illusion_rate = new_rate\n\ndef calculate_energy(start: TreeNode, end: TreeNode) -> int:\n    return max(abs(start.illusion_rate + end.illusion_rate), abs(start.illusion_rate - end.illusion_rate))\n\ndef dfs(node: TreeNode, parent: TreeNode, memo: dict) -> int:\n    if (node.room_index, parent.room_index) in memo:\n        return memo[(node.room_index, parent.room_index)]\n    min_energy = 0\n    for child in node.children:\n        if child != parent:\n            min_energy += calculate_energy(node, child) + dfs(child, node, memo)\n    memo[(node.room_index, parent.room_index)] = min_energy\n    return min_energy\n\ndef calculate_minimum_energy(start: TreeNode, end: TreeNode, nodes: List[TreeNode]) -> int:\n    memo = {}\n    return dfs(start, None, memo)\n\n# Read input\nn, q = map(int, input().split())\nillusion_rates = list(map(int, input().split()))\nedges = [tuple(map(int, input().split())) for _ in range(n - 1)]\n\n# Build the tree\nnodes = build_tree(n, edges, illusion_rates)\n\n# Process queries\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        room_index, new_rate = query[1] - 1, query[2]\n        update_illusion_rate(nodes[room_index], new_rate)\n    elif query[0] == 2:\n        start_room, end_room = query[1] - 1, query[2] - 1\n        result = calculate_minimum_energy(nodes[start_room], nodes[end_room], nodes)\n        print(result)\n", "from typing import List\n## main.py\n\nimport sys\nfrom typing import List, Tuple\n\n# Assuming a segment tree or binary indexed tree will be used for efficient updates and queries\n# For simplicity, we will use a list to represent the segment tree\n\n# Function to update the illusion rate of a room\ndef update_illusion_rate(room_index: int, new_rate: int) -> None:\n    illusion_rates[room_index] = new_rate\n\n# Function to query the minimum energy required to travel from start_room to end_room\ndef query_energy(start_room: int, end_room: int) -> int:\n    # Implement a function to calculate the minimum energy using a tree structure and dynamic programming\n    # This is a placeholder for the actual implementation\n    # For now, let's assume we have a function to calculate the energy\n    return abs(illusion_rates[start_room] - illusion_rates[end_room])\n\n# Read input\nn, q = map(int, sys.stdin.readline().split())\nillusion_rates = list(map(int, sys.stdin.readline().split()))\n\n# Initialize the tree structure and other necessary data\n# This is a placeholder for the actual initialization\n# For now, let's assume we have a tree represented as an adjacency list\ntree = [[] for _ in range(n)]\nfor _ in range(n - 1):\n    s, t = map(int, sys.stdin.readline().split())\n    tree[s - 1].append(t - 1)\n    tree[t - 1].append(s - 1)  # Since the tree is undirected\n\n# Process queries\nfor _ in range(q):\n    query_type, *params = map(int, sys.stdin.readline().split())\n    if query_type == 1:\n        u, c = params\n        update_illusion_rate(u - 1, c)  # Adjust for 0-based index\n    elif query_type == 2:\n        u, v = params\n        result = query_energy(u - 1, v - 1)  # Adjust for 0-based index\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport sys\n\n# Assuming a tree is represented as an adjacency list\nclass TreeNode:\n    def __init__(self, room_index: int, illusion_rate: int):\n        self.room_index = room_index\n        self.illusion_rate = illusion_rate\n        self.children: List[TreeNode] = []\n\n    def add_child(self, child: 'TreeNode'):\n        self.children.append(child)\n\ndef update_illusion_rate(room_index: int, new_rate: int) -> None:\n    # Update the illusion rate of the room at room_index to new_rate\n    # This function will modify the global state of the tree nodes\n    tree[room_index - 1].illusion_rate = new_rate\n\ndef min_energy_required(start_room: int, end_room: int) -> int:\n    # Calculate the minimum energy required to travel from start_room to end_room\n    # This function will use a depth-first search (DFS) to find the path and calculate the energy\n    \n    def dfs(node: TreeNode, target: int, visited: List[bool], energy: int, min_energy: int) -> int:\n        if node.room_index == target:\n            return min(min_energy, energy)\n        visited[node.room_index - 1] = True\n        for child in node.children:\n            if not visited[child.room_index - 1]:\n                min_energy = dfs(child, target, visited, energy + max(abs(node.illusion_rate - child.illusion_rate), abs(node.illusion_rate + child.illusion_rate)), min_energy)\n        visited[node.room_index - 1] = False\n        return min_energy\n\n    visited = [False] * len(tree)\n    return dfs(tree[start_room - 1], end_room, visited, 0, sys.maxsize)\n\n# Read input\nn, q = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\nedges = [list(map(int, sys.stdin.readline().split())) for _ in range(n - 1)]\n\n# Initialize tree nodes\ntree = [TreeNode(i + 1, a[i]) for i in range(n)]\n\n# Build the tree\nfor s, t in edges:\n    tree[s - 1].add_child(tree[t - 1])\n    tree[t - 1].add_child(tree[s - 1])\n\n# Process queries\nfor _ in range(q):\n    query = list(map(int, sys.stdin.readline().split()))\n    if query[0] == 1:\n        update_illusion_rate(query[1], query[2])\n    elif query[0] == 2:\n        result = min_energy_required(query[1], query[2])\n        print(result)\n"], "plans": ["requirement analysis:\nThe project requires implementing a solution to handle two types of queries efficiently. The first type modifies the illusion rate of a room, and the second type calculates the minimum sum of energy needed to travel between two rooms. Given the constraints, the solution must be optimized to handle up to 100,000 queries efficiently.\nrequirement pool:\n- Implement a data structure to represent the tree and manage room connections.\n- Develop an algorithm to calculate the minimum energy required for traversal.\n- Ensure the system can handle updates to the illusion rates efficiently.\n- Optimize the solution to process up to 100,000 queries within a reasonable time frame.\nTo address the requirements, we will use a combination of a tree data structure and a graph traversal algorithm. The tree data structure will help manage the rooms and their connections efficiently. We will employ a depth-first search (DFS) algorithm to calculate the minimum energy required for traversal between rooms. For managing the illusion rates, we will use a dynamic data structure that allows for efficient updates.\n", "requirement analysis:\nThe project requires implementing a solution to handle two types of queries efficiently: updating the illusion rate of a room and calculating the minimum energy required to travel between two rooms. The solution must be optimized to handle up to 100,000 queries. The input is a tree structure representing the maze, and the output should provide the minimum sum of energy needed for the traversal.\nrequirement pool:\n- Implement a data structure to efficiently handle room updates and energy calculations.\n- Optimize the algorithm to handle up to 100,000 queries efficiently.\n- Ensure the solution is scalable and can handle larger inputs and queries.\n- Design a user-friendly interface for easy interaction with the queries.\nTo efficiently handle the queries, we will use a combination of a tree data structure and dynamic programming to calculate the minimum energy required for traversal. We will also use a segment tree or a binary indexed tree to handle the updates of illusion rates efficiently.\n", "requirement analysis:\nThe project requires implementing a solution to handle two types of queries efficiently. The first type modifies the illusion rate of a room, and the second type calculates the minimum sum of energy needed to travel between two rooms. Given the constraints, the solution must be optimized to handle up to 100,000 queries efficiently.\nrequirement pool:\n- Implement a data structure to represent the tree and manage room connections.\n- Develop an algorithm to calculate the minimum energy required for traversal.\n- Ensure the solution can handle updates to the illusion rates.\n- Optimize the solution for performance, especially for large inputs.\n- Implement error handling and input validation.\nTo address the requirements, we will use a combination of a tree data structure and a graph traversal algorithm. The tree data structure will help manage the rooms and their connections efficiently. We will use a depth-first search (DFS) algorithm to calculate the minimum energy required for traversal between rooms. For handling updates to the illusion rates, we will use a dynamic data structure that allows for efficient modifications.\n", "requirement analysis:\nThe project requires implementing a solution to handle two types of queries efficiently. The first type modifies the illusion rate of a room, and the second type calculates the minimum sum of energy needed to travel from one room to another. Given the constraints, the solution must be optimized to handle up to 100,000 queries efficiently.\nrequirement pool:\n- Implement a data structure to represent the tree and manage room connections.\n- Develop an algorithm to calculate the minimum energy required for traversal.\n- Ensure the solution can handle updates to the illusion rates.\n- Optimize the solution to process up to 100,000 queries efficiently.\n- Design a user-friendly interface for input and output.\nTo address the requirements, we will use a combination of a tree data structure and a graph traversal algorithm. The tree data structure will help manage the rooms and their connections efficiently. We will employ a depth-first search (DFS) algorithm to calculate the minimum energy required for traversal between rooms. For handling updates to the illusion rates, we will use a dynamic data structure that allows for efficient modifications. The solution will be optimized to handle up to 100,000 queries efficiently by leveraging caching mechanisms and minimizing redundant calculations.\n", "requirement analysis:\nThe project requires implementing a solution to handle two types of queries efficiently: updating the illusion rate of a room and calculating the minimum energy required to travel between two rooms. The solution must be optimized to handle up to 100,000 queries. The input is a tree structure representing the maze, and the output should provide the minimum sum of energy needed for the traversal.\nrequirement pool:\n- Implement a data structure to efficiently handle room updates and energy calculations.\n- Optimize the algorithm to handle up to 100,000 queries efficiently.\n- Ensure the solution is scalable and can handle larger inputs and queries.\n- Design a user-friendly interface for easy interaction with the queries.\nTo efficiently handle the queries, we will use a combination of a tree data structure and dynamic programming to calculate the minimum energy required for traversal. We will also use a segment tree or a binary indexed tree to handle the updates of illusion rates efficiently. The tree structure will help us navigate through the maze, and the dynamic programming approach will ensure that we can compute the minimum energy efficiently even for large inputs.\n", "requirement analysis:\nThe project requires implementing a solution to handle queries on a tree structure where each node has an associated value, and queries can modify this value and calculate the minimum energy required to travel between two nodes. The solution must be efficient enough to handle up to 100,000 queries.\nrequirement pool:\n- Implement a tree data structure to represent the maze.\n- Handle queries to modify the illusion rate of a room.\n- Calculate the minimum energy required to travel between two rooms.\n- Optimize the solution for handling a large number of queries efficiently.\n- Ensure the user interface is responsive and visually appealing.\nTo handle the requirements efficiently, we will use a combination of a tree data structure and a graph traversal algorithm. The tree data structure will represent the maze, and we will use a depth-first search (DFS) algorithm to calculate the minimum energy required to travel between two rooms. We will optimize the solution by using a segment tree to efficiently update and query the illusion rates of rooms.\n", "requirement analysis:\nThe project requires implementing a solution to handle two types of queries efficiently. The first type modifies the illusion rate of a room, and the second type calculates the minimum sum of energy needed to travel between two rooms. Given the constraints, the solution must be optimized to handle up to 100,000 queries efficiently.\nrequirement pool:\n- Implement a data structure to represent the tree and manage room connections.\n- Develop an algorithm to calculate the minimum energy required for traversal.\n- Ensure the system can handle updates to the illusion rates efficiently.\n- Optimize the solution to process up to 100,000 queries within a reasonable time frame.\nTo address the requirements, we will use a combination of a tree data structure and a graph traversal algorithm. The tree data structure will help manage the rooms and their connections efficiently. We will employ a depth-first search (DFS) algorithm to calculate the minimum energy required for traversal between rooms. For efficient updates to the illusion rates, we will use a segment tree or a binary indexed tree to manage the room values.\n", "requirement analysis:\nThe project requires implementing a solution to handle two types of queries efficiently: updating the illusion rate of a room and calculating the minimum energy required to travel between two rooms. The solution must be optimized to handle up to 100,000 queries. The input is a tree structure representing the maze, and the output should provide the minimum sum of energy needed for the given queries.\nrequirement pool:\n- Implement a data structure to efficiently handle room updates and energy calculations.\n- Optimize the algorithm to handle up to 100,000 queries efficiently.\n- Ensure the solution is scalable and can handle larger inputs and queries.\n- Design a user-friendly interface for easy interaction with the queries.\nTo efficiently handle the queries, we will use a combination of a tree data structure and dynamic programming to calculate the minimum energy required for traversal. We will also use a segment tree or a binary indexed tree to handle the updates of illusion rates efficiently. The tree structure will help us navigate through the maze, and the dynamic programming approach will ensure that we can compute the minimum energy efficiently even for large inputs.\n", "requirement analysis:\nThe project requires implementing a solution to handle two types of queries efficiently: updating the illusion rate of a room and calculating the minimum energy required to travel between two rooms. The solution must be optimized to handle up to 100,000 queries. The input is a tree structure representing the maze, and the output should provide the minimum sum of energy needed for the traversal.\nrequirement pool:\n- Implement a data structure to efficiently handle room updates and energy calculations.\n- Optimize the algorithm to handle up to 100,000 queries efficiently.\n- Ensure the solution is scalable and can handle larger inputs and queries.\n- Design a user-friendly interface for easy interaction.\nTo efficiently handle the queries, we will use a combination of a tree data structure and dynamic programming to calculate the minimum energy required for traversal. We will also use a segment tree or a binary indexed tree to handle the updates to the illusion rates efficiently. The tree structure will help us navigate through the maze, and the dynamic programming approach will ensure that we can compute the minimum energy efficiently even for large inputs.\n", "requirement analysis:\nThe project requires implementing a solution to handle two types of queries efficiently: updating the illusion rate of a room and calculating the minimum energy required to travel between two rooms. The solution must be optimized to handle up to 100,000 queries. The input is a tree structure representing the maze, and the output should provide the minimum sum of energy needed for the traversal.\nrequirement pool:\n- Implement a data structure to efficiently handle room updates and energy calculations.\n- Optimize the algorithm to handle up to 100,000 queries efficiently.\n- Ensure the solution is scalable and can handle larger inputs and queries.\n- Design a user-friendly interface for easy interaction with the queries.\nTo efficiently handle the queries, we will use a combination of a tree data structure and dynamic programming to calculate the minimum energy required for traversal. We will also use a segment tree or a binary indexed tree to handle the updates of illusion rates efficiently. The tree structure will help us navigate through the maze, and the dynamic programming approach will ensure that we can compute the minimum energy efficiently even for large inputs.\n"], "scores": [], "pass_results": [false, false, false, false, true, false, false, true, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 173, "examples": "\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 |a_i| \u2264 10^9) \u2014 inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 \u2264 s_i, t_i \u2264 n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\nExample\n\nInput\n\n\n6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n\n\nOutput\n\n\n39\n32\n0\n\nNote\n\n<image>\n\nIn the first query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|10 + 4|, |10 - 4|) = 14 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\nIn total, it takes 39 energy.\n\nIn the second query, the illusion rate of the 1-st room changes from 10 to -3.\n\nIn the third query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|-3 + 4|, |-3 - 4|) = 7 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\n\n\nNow, it takes 32 energy.", "mutate_method": "rephrase_one", "parent_index": 119}
