{"name": "1617_A. Forbidden Subsequence", "description": "You are given strings S and T, consisting of lowercase English letters. It is guaranteed that T is a permutation of the string abc. \n\nFind string S', the lexicographically smallest permutation of S such that T is not a subsequence of S'.\n\nString a is a permutation of string b if the number of occurrences of each distinct character is the same in both strings.\n\nA string a is a subsequence of a string b if a can be obtained from b by deletion of several (possibly, zero or all) elements.\n\nA string a is lexicographically smaller than a string b if and only if one of the following holds:\n\n  * a is a prefix of b, but a \u2260 b;\n  * in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b.\n\nInput\n\nEach test contains multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains a string S (1 \u2264 |S| \u2264 100), consisting of lowercase English letters.\n\nThe second line of each test case contains a string T that is a permutation of the string abc. (Hence, |T| = 3).\n\nNote that there is no limit on the sum of |S| across all test cases.\n\nOutput\n\nFor each test case, output a single string S', the lexicographically smallest permutation of S such that T is not a subsequence of S'.\n\nExample\n\nInput\n\n\n7\nabacaba\nabc\ncccba\nacb\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\nbbc\nabc\nac\nabc\n\n\nOutput\n\n\naaaacbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n\nNote\n\nIn the first test case, both aaaabbc and aaaabcb are lexicographically smaller than aaaacbb, but they contain abc as a subsequence.\n\nIn the second test case, abccc is the smallest permutation of cccba and does not contain acb as a subsequence.\n\nIn the third test case, bcdis is the smallest permutation of dbsic and does not contain bac as a subsequence.", "tags": ["constructive algorithms", "greedy", "sortings", "strings"], "difficulty": 7, "id": 1617, "sample_io": [{"input": "7\nabacaba\nabc\ncccba\nacb\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\nbbc\nabc\nac\nabc\n", "output": ["aaaacbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n"]}], "test_list": [{"input": "7\nabacaba\nabc\ncccba\nacb\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\nbbc\nabd\nac\nabc\n", "output": ["aaaacbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\nebsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\nbbc\nabc\nac\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\nebsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\ncbc\nabc\nac\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbcc\nac\n"]}, {"input": "7\nabababa\nabc\ncccba\nacb\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\nabc\nbbc\nabc\nac\nabc\n", "output": ["aaaabbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nbca\nebsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\ncbc\ncba\ncb\nacb\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbcc\nbc\n"]}, {"input": "7\nabacaba\ncba\ncccba\nbca\nebsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\ncbc\ncba\ncb\nacb\n", "output": ["aaaabbc\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbcc\nbc\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\nbbc\nabd\nbc\nabc\n", "output": ["aaaacbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nbc\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\nabc\nbbb\nabd\nac\nabc\n", "output": ["aaaacbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbb\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\ndasic\nbac\nabracadabra\nabc\ndddddddddddd\nabc\nbbc\nabc\nac\nabc\n", "output": ["aaaacbb\nabccc\nacdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\nebsic\nbac\nabracadabra\nabc\nddddddddcddd\ncba\ncbc\nabc\nac\nacb\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ncddddddddddd\nbcc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\ndasic\nbac\nabracadaara\nabc\ndddddddddddd\nabc\nbbc\nabc\nac\nabc\n", "output": ["aaaacbb\nabccc\nacdis\naaaaaacbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabababa\nabc\ncccba\nacb\ndbsic\ncab\nabracadabra\nabc\ndddddddddddd\nabc\nbac\nabc\nac\nabc\n", "output": ["aaaabbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nacb\nac\n"]}, {"input": "7\nabacaca\nabc\ncccba\nbca\nebsic\ncab\nabracadabra\nabc\ndddddddddddd\ncba\ncbc\ncba\nac\nacb\n", "output": ["aaaaccb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbcc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\ndasic\ncab\nabsacadaara\nabc\ndddddddddddd\nabc\nbbc\nabc\nac\nabc\n", "output": ["aaaacbb\nabccc\nacdis\naaaaaacbdrs\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\nebsic\naac\nabracadabra\nabc\ndddddddddddd\nabc\ncbc\nabc\nad\nacb\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbcc\nad\n"]}, {"input": "7\nabababb\ncaa\ncccba\nbca\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\nabc\nbbc\nabc\nac\nacb\n", "output": ["aaabbbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\nabccc\nacb\nebsic\nbac\nabracadabra\nabc\neddddddddddd\nbca\nbbc\nbca\nac\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\nddddddddddde\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\nabccc\nbca\nebsic\nbac\nabracadabra\ncba\neddddddddddd\ncab\nbcb\nbca\nac\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaabbcdrr\nddddddddddde\nbbc\nac\n"]}, {"input": "7\naaacaba\nabc\ncccba\nacb\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\nbbc\nabc\nac\nabc\n", "output": ["aaaaacb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabababa\nabc\ncccba\nacb\ndbsic\ncab\nabracadabra\nabc\ndddddddddddd\nabc\nbbb\nabc\nac\nabc\n", "output": ["aaaabbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbb\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\nebsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\nbac\nacb\nac\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nabc\nac\n"]}, {"input": "7\nabababa\nabc\nccbba\nacb\ndbsic\ncab\nabracadabra\nabc\ndddddddddddd\nabc\nbac\nabc\nac\nabc\n", "output": ["aaaabbb\nabbcc\nbcdis\naaaaacbbdrr\ndddddddddddd\nacb\nac\n"]}, {"input": "7\nabababa\nabc\ncccba\nacb\ndbsic\ncab\nabracadabra\nabc\ndddddddddddd\nbac\nbac\ncba\nac\nabc\n", "output": ["aaaabbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nabc\nac\n"]}, {"input": "7\nabababb\ncaa\nccabc\nbca\ndbsic\nbac\nabracadaara\nabc\ndddddddddddd\ncba\nbbc\nabc\nac\nacb\n", "output": ["aaabbbb\nabccc\nbcdis\naaaaaacbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\nabbcc\nbca\nebsic\nbac\nabracadabra\nabc\neddddddddddd\nacb\nbbc\nbca\nac\nabc\n", "output": ["aaaacbb\nabbcc\nbceis\naaaaacbbdrr\nddddddddddde\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\nabccc\nbca\nebsic\nbac\nabracadabra\nabc\nedddddddddcd\nacb\nbcb\nbca\nac\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ncdddddddddde\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\nabccc\nbca\nebsic\nbac\narbadacarba\ncba\neddddddddddd\ndab\nbcc\nbca\nac\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaabbcdrr\nddddddddddde\nbcc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\nibtdc\nbac\nabracadabra\nabc\ndddddddddddd\nabc\nbbc\nabc\nac\nabc\n", "output": ["aaaacbb\nabccc\nbcdit\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabababa\ncba\ncccba\nacb\ndbsic\nbac\nabracadabra\nabc\nddddddddeddd\nabc\nbbc\ncba\nac\nabc\n", "output": ["aaaabbb\nabccc\nbcdis\naaaaacbbdrr\nddddddddddde\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nbca\nebsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\nccc\nabc\ncb\nacb\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nccc\nbc\n"]}, {"input": "7\nabacaba\ncba\ncccba\nbca\nebsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\ncac\ncba\nbc\nacb\n", "output": ["aaaabbc\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nacc\nbc\n"]}, {"input": "7\nabacaba\nabc\ncccaa\nbca\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\nbbc\nabd\nbc\nabc\n", "output": ["aaaacbb\naaccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nbc\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\nebsic\nbac\nabracadabra\nabc\nddcddddddddd\ncba\ndbc\nacb\nac\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ncddddddddddd\nbcd\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nbca\nebsic\nbac\nabracadabra\nacb\ndddddddddddd\nbca\nbbc\nbca\nac\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaabbcdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\ncba\ncccba\nacb\ndasic\ncab\nabascadaara\nabc\ndddddddddddd\nabc\nbbc\nabc\nac\nabc\n", "output": ["aaaabbc\nabccc\nacdis\naaaaaacbdrs\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\nabccc\nbca\neasic\nbac\ncbraaadabra\ncba\neddddddddddd\ncab\nbcb\nbca\nac\nabc\n", "output": ["aaaacbb\nabccc\naceis\naaaaabbcdrr\nddddddddddde\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nbca\nebsic\nbac\narbadacarba\ncba\nedddddddddde\ndab\nbcb\nbca\nca\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaabbcdrr\nddddddddddee\nbbc\nac\n"]}, {"input": "7\nabacaba\ncba\nabccc\nbca\nebsic\ncab\nabracadabra\nabc\ndddddddddddd\ncba\ncbc\ncba\nac\nacb\n", "output": ["aaaabbc\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbcc\nac\n"]}, {"input": "7\nabacaba\ncba\ncccba\nbca\nebsic\nbac\nabracadabqa\nabc\ndddddddddddd\ncba\ncac\ncba\nbc\nacb\n", "output": ["aaaabbc\nabccc\nbceis\naaaaacbbdqr\ndddddddddddd\nacc\nbc\n"]}, {"input": "7\nabacaba\ncba\ncccba\nbca\necsib\nbac\nabbacrdabra\nabc\ndddddddddddd\ncba\ncbc\ncba\ncb\nabc\n", "output": ["aaaabbc\nabccc\nbceis\naaaacbbbdrr\ndddddddddddd\nbcc\nbc\n"]}, {"input": "7\nabacaba\nabc\ncccaa\nbca\ndbsic\nbac\nabracadabra\nabc\ndddedddddddd\ncba\nbbc\nabd\nbc\nabc\n", "output": ["aaaacbb\naaccc\nbcdis\naaaaacbbdrr\nddddddddddde\nbbc\nbc\n"]}, {"input": "7\nabacaba\nabc\ncccbb\nacb\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\nabc\nbbb\nabd\nac\nbac\n", "output": ["aaaacbb\nbbccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbb\nac\n"]}, {"input": "7\naaababa\nabc\ncccba\nacb\ndbsic\ncab\nabracadabra\nabc\ndddddddddddd\nabc\nbbb\nabb\nac\nabc\n", "output": ["aaaaabb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbb\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\nebsic\nbac\nabracadabqa\nabc\ndddddddddddd\nabc\nbac\nacb\nac\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdqr\ndddddddddddd\nabc\nac\n"]}, {"input": "7\nabababa\nabc\nccbba\ncab\ndbsic\ncab\nabracadabra\ncba\ndddddddddddd\nabc\nbac\nabc\nac\nabc\n", "output": ["aaaabbb\nabbcc\nbcdis\naaaaabbcdrr\ndddddddddddd\nacb\nac\n"]}, {"input": "7\nabababa\nabc\ncccba\nacb\ndbric\ncab\nabracadabra\nabc\ndddddddddddd\nbac\nbac\ncba\nca\nabc\n", "output": ["aaaabbb\nabccc\nbcdir\naaaaacbbdrr\ndddddddddddd\nabc\nac\n"]}, {"input": "7\nabacaab\nabc\nabccc\nbca\nebsic\nbac\nabracadabra\nabc\nedddeddddddd\nbac\nbcb\nbca\nac\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\nddddddddddee\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\nccbba\nbca\ncisbe\nbac\narabdacarba\ncba\neddddddddddd\ndab\nbcb\nbca\nca\nabc\n", "output": ["aaaacbb\nabbcc\nbceis\naaaaabbcdrr\nddddddddddde\nbbc\nac\n"]}, {"input": "7\nabacaba\ncba\ncccba\nbca\ncisbd\nbac\nabracadabra\nabc\ndddddddddddd\ncba\nbbc\nabe\nac\nabc\n", "output": ["aaaabbc\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabababa\nabc\nabccc\nbca\nebsic\nbac\nabracadabra\nabc\ndddddddddddd\nbca\ncbc\ncba\nbc\nacb\n", "output": ["aaaabbb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbcc\nbc\n"]}, {"input": "7\nabacaba\nabc\ncccbb\nacb\ndbsic\nbac\nabracadabra\nabc\nddeddddddddd\nabc\nbbb\nabd\nac\nbac\n", "output": ["aaaacbb\nbbccc\nbcdis\naaaaacbbdrr\nddddddddddde\nbbb\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\nebsic\naac\narbadacarba\nabc\ndddddddddddd\nabc\nacc\nabc\nad\nbca\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nacc\nad\n"]}, {"input": "7\nabababb\ncba\nccabc\nbca\ndcsic\naac\nabracadaara\nabc\ndddddddddddd\ncba\nbbc\nabc\nac\nacb\n", "output": ["aaabbbb\nabccc\nccdis\naaaaaacbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\nabbcc\nbca\nebsic\nbac\nabracbdabra\nabc\neddddddddddd\naca\nbbc\nbca\nac\ncba\n", "output": ["aaaacbb\nabbcc\nbceis\naaaacbbbdrr\nddddddddddde\nbbc\nac\n"]}, {"input": "7\nabacaab\nabc\nabccc\nbca\nebsic\nbac\nabracadabra\nabc\nedddeddddddd\nbac\nbbb\nbca\nac\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\nddddddddddee\nbbb\nac\n"]}, {"input": "7\nabacaba\nabc\nabccc\nbca\nebsic\nbac\narbadacarba\ncba\neddddddddddd\ndab\ncbb\nbca\nbc\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaabbcdrr\nddddddddddde\nbbc\nbc\n"]}, {"input": "7\nabacaba\nabc\nabbcc\nbca\nebsic\nbac\nabracbdabra\nabc\neddddddddddd\naca\nbbc\nbca\nbc\ncba\n", "output": ["aaaacbb\nabbcc\nbceis\naaaacbbbdrr\nddddddddddde\nbbc\nbc\n"]}, {"input": "7\nabacaba\ncba\ncccba\nbca\ndcsib\nbac\nabbacrdabra\nabc\ndddddddddddd\ncba\ncbc\nabd\ncb\nabc\n", "output": ["aaaabbc\nabccc\nbcdis\naaaacbbbdrr\ndddddddddddd\nbcc\nbc\n"]}, {"input": "7\nababaaa\ncba\ncccba\nacb\ndbsic\ncab\nabracadabra\nabc\ndddddddcdddd\nabc\nbbb\nabb\nac\nabc\n", "output": ["aaaaabb\nabccc\nbcdis\naaaaacbbdrr\ncddddddddddd\nbbb\nac\n"]}, {"input": "7\nabacaba\ncba\ncccba\nbca\ndasic\ncab\nabascadaara\nabc\nddeddddddddd\nacb\nbbc\ncba\nac\nabc\n", "output": ["aaaabbc\nabccc\nacdis\naaaaaacbdrs\nddddddddddde\nbbc\nac\n"]}, {"input": "7\nabacaba\ncba\ncccca\ncba\ncisbd\nbac\nabracadabra\nabc\ndddddddddddd\ncba\nbbc\nabf\nac\nabc\n", "output": ["aaaabbc\nacccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabaaaba\ncba\ncccba\nbca\ndbsic\nbac\narbadacarba\nabc\nddddddddeddd\nabc\nbbc\ncab\nac\ncba\n", "output": ["aaaaabb\nabccc\nbcdis\naaaaacbbdrr\nddddddddddde\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccbb\nacb\nchsbd\nbac\nabracadabra\nabc\ndddddddddedd\nabc\nbbb\nabd\nac\nbac\n", "output": ["aaaacbb\nbbccc\nbcdhs\naaaaacbbdrr\nddddddddddde\nbbb\nac\n"]}, {"input": "7\nabacaba\nabc\nabccc\nbca\nebsic\nabc\narbadacarba\ncba\neddddddddded\ndab\ncbb\nbca\ncb\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaabbcdrr\nddddddddddee\nbbc\nbc\n"]}, {"input": "7\nabaaaba\ncba\ncccba\nbca\ndbsic\nbac\narbadacarba\nabc\nddddddddeddd\nabc\nbbb\ncab\nac\ncba\n", "output": ["aaaaabb\nabccc\nbcdis\naaaaacbbdrr\nddddddddddde\nbbb\nac\n"]}, {"input": "7\nabacaba\ncba\ncccba\ncba\ndcsia\nbac\nabbacrdabra\nabc\ndddddddddddd\ncba\ncbc\nabd\ncb\nabc\n", "output": ["aaaabbc\nabccc\nacdis\naaaacbbbdrr\ndddddddddddd\nbcc\nbc\n"]}, {"input": "7\nabacaba\ncba\ncccca\nabc\ncisbd\nbac\nabracaeabra\nabc\ndddddddddddd\ncba\nbbc\nabf\nac\nabc\n", "output": ["aaaabbc\nacccc\nbcdis\naaaaacbberr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\ncba\ncccba\ncba\ndbsia\nbac\nabbacrdabra\nabc\ndddddddddddd\ncba\ncbc\nabd\ncb\nabc\n", "output": ["aaaabbc\nabccc\nabdis\naaaacbbbdrr\ndddddddddddd\nbcc\nbc\n"]}, {"input": "7\nabaaabb\ncab\nccabc\nbca\ndiscc\naac\nabracadaara\nabc\ndddddddddddd\ncba\ncbb\nabd\nac\nbca\n", "output": ["aaaabbb\nabccc\nccdis\naaaaaacbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\nabbcc\ncba\nebsic\nbca\nabracbdaarb\nabc\neddddddddddd\n`ca\nbbc\nbca\ncc\nabc\n", "output": ["aaaacbb\nabbcc\nbceis\naaaacbbbdrr\nddddddddddde\nbbc\ncc\n"]}, {"input": "7\nabacaba\nabc\nabbcc\ncba\nebsic\nbca\nabracbdbarb\nabc\neddddddddddd\n`ca\nbcb\nbca\ncc\nabc\n", "output": ["aaaacbb\nabbcc\nbceis\naaacbbbbdrr\nddddddddddde\nbbc\ncc\n"]}, {"input": "7\nabacaba\ncba\nabbcc\ncba\nebsic\nbca\nbrabdbcarba\nabc\neddddddddddd\n`ca\nbcb\nbca\ncc\nabc\n", "output": ["aaaabbc\nabbcc\nbceis\naaacbbbbdrr\nddddddddddde\nbbc\ncc\n"]}, {"input": "7\nabacaba\nabc\ncccba\nabc\nebsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\nbbc\nabc\nac\nabc\n", "output": ["aaaacbb\nacccb\nbceis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabababa\nabc\ncccba\nacb\ndcsic\nbac\nabracadabra\nabc\ndddddddddddd\nabc\nbbc\nabc\nac\nabc\n", "output": ["aaaabbb\nabccc\nccdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nbca\nebsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\ndbc\nabc\nac\nacb\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbcd\nac\n"]}, {"input": "7\naaacaba\nabc\ncccba\nbca\nebsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\ncbc\ncba\nac\nacb\n", "output": ["aaaaacb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbcc\nac\n"]}, {"input": "7\nabbcaba\nabc\ncccba\nbca\nebsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\ncbc\ncba\ncb\nacb\n", "output": ["aaacbbb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbcc\nbc\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\ndbsic\nbac\nabracadbbra\nabc\ndddddddddddd\nabc\nbbb\nabd\nac\nabc\n", "output": ["aaaacbb\nabccc\nbcdis\naaaacbbbdrr\ndddddddddddd\nbbb\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\ndasic\nbac\nabracadabra\nabc\ndddddddddddd\nabc\nbbc\nabc\nab\nabc\n", "output": ["aaaacbb\nabccc\nacdis\naaaaacbbdrr\ndddddddddddd\nbbc\nab\n"]}, {"input": "7\nabacaba\nabc\ncccba\nbca\nebsic\ncab\nabracadabra\ncba\ndddddddddddd\ncba\ncbc\ncba\nac\nacb\n", "output": ["aaaacbb\nabccc\nbceis\naaaaabbcdrr\ndddddddddddd\nbcc\nac\n"]}, {"input": "7\nabacaba\nabc\ncdcba\nacb\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\nbbc\nabd\nbc\ncba\n", "output": ["aaaacbb\nabccd\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nbc\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\nebshc\nbac\nabracadabra\nabc\ndddddddddddd\nabc\ncbc\nabc\nac\nacb\n", "output": ["aaaacbb\nabccc\nbcehs\naaaaacbbdrr\ndddddddddddd\nbcc\nac\n"]}, {"input": "7\nabacaca\nabc\ncccba\nbca\nfbsic\ncab\nabracadabra\nabc\ndddddddddddd\ncba\ncbc\ncba\nac\nacb\n", "output": ["aaaaccb\nabccc\nbcfis\naaaaacbbdrr\ndddddddddddd\nbcc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\nebsic\nbac\nabracadabra\nabc\ndddddddddddd\nbca\nbbb\nbca\nac\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbbb\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\nebsic\naac\nabracadabra\nabc\nddcddddddddd\nabc\ncbc\nabc\nad\nacb\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ncddddddddddd\nbcc\nad\n"]}, {"input": "7\nabababb\ncaa\ncccba\nbca\ndbsic\nbac\nabracadabra\ncba\ndddddddddddd\nabc\nbbc\nabc\nac\nacb\n", "output": ["aaabbbb\nabccc\nbcdis\naaaaabbcdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\ncba\nabccc\nacb\nebsic\nbac\nabracadabra\nabc\neddddddddddd\nbca\nbbc\nbca\nac\nabc\n", "output": ["aaaabbc\nabccc\nbceis\naaaaacbbdrr\nddddddddddde\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\nabccc\nbca\nebric\nbac\nabracadabra\nabc\neddddddddddd\nbca\nbbc\nbca\nac\nabc\n", "output": ["aaaacbb\nabccc\nbceir\naaaaacbbdrr\nddddddddddde\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\nabccc\nbca\nebsic\nbac\nabrbcadabra\nabc\neddddddddddd\nacb\ncbb\nbca\nac\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaacbbbdrr\nddddddddddde\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\nabccc\nbca\nebsic\nbac\narbadadarba\ncba\neddddddddddd\ndab\nbcb\nbca\nac\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaabbddrr\nddddddddddde\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\necsic\nbac\nabracadabra\nabc\nddddddcddddd\ncba\ncbc\nabc\nac\nacb\n", "output": ["aaaacbb\nabccc\ncceis\naaaaacbbdrr\ncddddddddddd\nbcc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nbca\nebsic\nbac\nabracadbbra\nabc\ndddddddddddd\ncba\ncbc\ncba\ncb\nacb\n", "output": ["aaaacbb\nabccc\nbceis\naaaacbbbdrr\ndddddddddddd\nbcc\nbc\n"]}, {"input": "7\nabacaba\ncba\ncccba\nbca\nebsic\nbac\nabracadabra\ncba\ndddddddddddd\ncba\ncbc\ncba\nbc\nacb\n", "output": ["aaaabbc\nabccc\nbceis\naaaaabbcdrr\ndddddddddddd\nbcc\nbc\n"]}, {"input": "7\nabacaaa\nabc\ncccba\nacb\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\nabc\nbbb\nabd\nac\nbac\n", "output": ["aaaaacb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbb\nac\n"]}, {"input": "7\nabababa\nabc\ncccba\nacb\nebsic\ncab\nabracadabra\nabc\ndddddddddddd\nabc\nbbb\nabc\nac\nabc\n", "output": ["aaaabbb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbbb\nac\n"]}, {"input": "7\naaacaba\nabc\ncccba\nacb\nebsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\nbac\nacb\nac\nabc\n", "output": ["aaaaacb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nabc\nac\n"]}, {"input": "7\nacababa\nabc\nccbba\nacb\ndbsic\ncab\nabracadabra\nabc\ndddddddddddd\nabc\nbac\nabc\nac\nabc\n", "output": ["aaaacbb\nabbcc\nbcdis\naaaaacbbdrr\ndddddddddddd\nacb\nac\n"]}, {"input": "7\nabacaba\nabc\nbccba\nacb\ndasic\ncab\nabracadaara\nabc\ndddddddddddd\nabc\nbbc\nabc\nac\nabc\n", "output": ["aaaacbb\nabbcc\nacdis\naaaaaacbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\nebsic\naac\nabracadabra\nabc\ndddddddddddd\nabc\ncbd\nabc\nad\nbca\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbcd\nad\n"]}, {"input": "7\nabacaba\nabc\nabdcc\nbca\nebsic\nbac\nabracadabra\nabc\neddddddddddd\nadb\nbbc\nbca\nac\nabc\n", "output": ["aaaacbb\nabccd\nbceis\naaaaacbbdrr\nddddddddddde\nbbc\nac\n"]}, {"input": "7\nabacaab\nabc\nabccc\nbca\nebsic\nbac\nabracadabra\nabc\neddddddddddd\ncab\nbca\nbca\nac\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\nddddddddddde\nabc\nac\n"]}, {"input": "7\nabacaba\nabc\nabccc\nbca\nebsic\nbac\ncbraaadabra\ncba\neddddddddddd\ncab\nacb\nbca\nac\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaabbcdrr\nddddddddddde\nabc\nac\n"]}, {"input": "7\naaaacba\ncba\ncccba\nacb\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\nbbc\nabc\nac\nabc\n", "output": ["aaaaabc\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabadaba\nabc\ncccba\nacb\ncisbd\nbac\nabracadabra\nabc\ndddddddddddd\ncba\nbbc\nabe\nac\nabc\n", "output": ["aaaabbd\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\nebsic\nbac\nabracadabra\nabc\nddddddcddddd\nabc\nbbc\nabc\nac\nacb\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ncddddddddddd\nbbc\nac\n"]}, {"input": "7\nabababa\ncba\ncccba\nacb\ndbsic\nbac\nabracadabra\nacb\nddddddddeddd\nabc\nbbc\ncba\nac\nabc\n", "output": ["aaaabbb\nabccc\nbcdis\naaaaabbcdrr\nddddddddddde\nbbc\nac\n"]}, {"input": "7\nabacaaa\nabc\nabccc\nacb\nebsic\nbac\nabracadabra\nabc\nddddddddddde\nbca\nbbc\nbca\nac\ncba\n", "output": ["aaaaacb\nabccc\nbceis\naaaaacbbdrr\nddddddddddde\nbbc\nac\n"]}, {"input": "7\nabababb\ncba\nccabc\nbca\ndbsic\nbac\nabracadaara\nabc\nddddddddddcd\ncba\nbbc\nabc\nac\nacb\n", "output": ["aaabbbb\nabccc\nbcdis\naaaaaacbdrr\ncddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\ncba\nabbcc\nbca\nebsic\nbac\nabracadabra\nabc\neddddddddddd\nacb\nbbc\nbca\nac\ncba\n", "output": ["aaaabbc\nabbcc\nbceis\naaaaacbbdrr\nddddddddddde\nbbc\nac\n"]}, {"input": "7\nabacaba\ncba\nabccc\nbca\nebsic\ncab\nabracadabra\nabc\nedddddddddcd\nacb\nbcb\nbca\nac\nabc\n", "output": ["aaaabbc\nabccc\nbceis\naaaaacbbdrr\ncdddddddddde\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\nabcdc\nbca\neasic\nbac\ncbraaadabra\ncba\neddddddddddd\ncab\nbcb\nbca\nac\nabc\n", "output": ["aaaacbb\nabccd\naceis\naaaaabbcdrr\nddddddddddde\nbbc\nac\n"]}, {"input": "7\nabacaba\ncba\ncccba\nbca\ncisbe\nbac\narabdacarba\ncba\neddddddddddd\ndab\nbcb\nbca\nca\nabc\n", "output": ["aaaabbc\nabccc\nbceis\naaaaabbcdrr\nddddddddddde\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\nabccc\nbca\nebric\nbac\nabracadabra\nabc\ndddddddddddd\nbca\ncbc\ncba\nbc\nacb\n", "output": ["aaaacbb\nabccc\nbceir\naaaaacbbdrr\ndddddddddddd\nbcc\nbc\n"]}, {"input": "7\nabacaba\nabc\ncccaa\nbca\ndbsic\nbac\nabracadabra\nabc\ndddedddddddd\ncba\nbbc\nabd\nac\nabc\n", "output": ["aaaacbb\naaccc\nbcdis\naaaaacbbdrr\nddddddddddde\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\nabccc\nbca\nebshc\naac\nabracadabra\nabc\nddddddddcddd\ncba\ncbc\nabc\nac\nacb\n", "output": ["aaaacbb\nabccc\nbcehs\naaaaacbbdrr\ncddddddddddd\nbcc\nac\n"]}, {"input": "7\nabacaca\ncba\ncccba\nacb\ndasic\ncab\nabascadaara\nabc\ndddddddddddd\nabc\nbbc\ncba\nac\nabc\n", "output": ["aaaabcc\nabccc\nacdis\naaaaaacbdrs\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\nabccc\nacb\nebsic\nbac\narbadacarba\nabc\nddddddddddde\nbca\nbbc\nbca\nab\ncba\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\nddddddddddde\nbbc\nab\n"]}, {"input": "7\nabacaab\nabc\nabccc\nbca\nebric\nbac\nabracadabra\nabc\nedddeddddddd\nbac\nbcb\nbca\nac\nabc\n", "output": ["aaaacbb\nabccc\nbceir\naaaaacbbdrr\nddddddddddee\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\ncdbba\nbca\ncisbe\nbac\narabdacarba\ncba\neddddddddddd\ndab\nbcb\nbca\nca\nabc\n", "output": ["aaaacbb\nabbcd\nbceis\naaaaabbcdrr\nddddddddddde\nbbc\nac\n"]}, {"input": "7\nabababa\ncba\ncccba\nacb\ncbsic\nbac\nabracadabra\nabc\nddddddddeddd\nabc\nbbc\ncab\nac\ncba\n", "output": ["aaaabbb\nabccc\nbccis\naaaaacbbdrr\nddddddddddde\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\nabccc\nbca\nebsic\naac\narbadacarba\nacb\nddddddddcddd\ncba\ncbc\nabc\nac\nacb\n", "output": ["aaaacbb\nabccc\nbceis\naaaaabbcdrr\ncddddddddddd\nbcc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nbca\nebsic\nbac\nabracadabra\ncab\ndddddddddddd\nbba\nbbc\nbca\nab\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaabbcdrr\ndddddddddddd\nbbc\nab\n"]}, {"input": "7\nabacaba\nabc\nabccc\nbca\nebsic\nbac\narbadacarba\nabc\neddddddddddd\ndab\ncbb\nbca\nbc\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\nddddddddddde\nbbc\nbc\n"]}, {"input": "7\nabababa\nabc\nabccc\nbca\naesic\nbac\nabracadabra\nabc\ndddddddddddd\nbca\ncbc\ncba\nbc\nacb\n", "output": ["aaaabbb\nabccc\naceis\naaaaacbbdrr\ndddddddddddd\nbcc\nbc\n"]}, {"input": "7\nabacaba\nabc\ncccaa\nbca\ncisdb\nbac\nabracadabra\nabc\ndddededddddd\ncba\nbbc\nabd\nbc\nabc\n", "output": ["aaaacbb\naaccc\nbcdis\naaaaacbbdrr\nddddddddddee\nbbc\nbc\n"]}, {"input": "7\nabacaba\ncba\ncccba\ncba\ncisbd\nbac\nabsacadabra\nabc\ndddddddddddd\ncba\nbbc\nabf\nac\nabc\n", "output": ["aaaabbc\nabccc\nbcdis\naaaaacbbdrs\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\nabbdc\nbca\nebsic\nbac\nabracbdabra\nabc\neddddddddddd\naca\nbbc\nbca\nbc\ncba\n", "output": ["aaaacbb\nabbcd\nbceis\naaaacbbbdrr\nddddddddddde\nbbc\nbc\n"]}, {"input": "7\nabacaba\nabc\nabbcc\nbca\nebsic\nbca\nabracbdabra\nabc\nedddddeddddd\naca\nbbc\nbca\nbc\nabc\n", "output": ["aaaacbb\nabbcc\nbceis\naaaacbbbdrr\nddddddddddee\nbbc\nbc\n"]}, {"input": "7\nabaaaba\ncba\ncccba\nbca\ndbsic\nbac\narbadacarba\nabc\nddddddddedcd\nabc\nbbb\ncab\nac\ncba\n", "output": ["aaaaabb\nabccc\nbcdis\naaaaacbbdrr\ncdddddddddde\nbbb\nac\n"]}, {"input": "7\nbbbbaaa\nabc\nabccc\nbca\nbesic\nbac\nabracadabra\nabc\ndddddddddddd\nbca\ncbc\nbba\nbc\ncab\n", "output": ["aaabbbb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbcc\nbc\n"]}, {"input": "7\nabacaba\nabc\ncccba\ncba\ndbsia\nbac\nabbacrdabra\nabc\ndddddddddddd\ncba\ncbc\nabd\ncb\nabc\n", "output": ["aaaacbb\nabccc\nabdis\naaaacbbbdrr\ndddddddddddd\nbcc\nbc\n"]}, {"input": "7\nabacaba\ncba\nacccc\nabc\ncisad\nbac\nabracaeabra\nabc\ndddddddddddd\ncba\nbbc\nabf\nac\nabc\n", "output": ["aaaabbc\nacccc\nacdis\naaaaacbberr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabbbaaa\nabc\nacbcc\nbca\nbesic\nbac\nabracadabra\nabc\ndddddddddddd\nbba\ncbc\nbba\nac\ncab\n", "output": ["aaaabbb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbcc\nac\n"]}, {"input": "7\nabaaabb\ncab\nccabc\nbca\ndiscc\naac\nabracadaara\nabc\ndddddddddddd\ncba\nbbb\nabd\nac\nbca\n", "output": ["aaaabbb\nabccc\nccdis\naaaaaacbdrr\ndddddddddddd\nbbb\nac\n"]}, {"input": "7\nabacaba\ncba\ncccba\nbca\nebsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\ndbc\nabc\nac\nacb\n", "output": ["aaaabbc\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbcd\nac\n"]}, {"input": "7\nabbcaba\nabc\ncccba\nbca\nebsic\nbac\nabracbdabra\nabc\ndddddddddddd\ncba\ncbc\ncba\ncb\nacb\n", "output": ["aaacbbb\nabccc\nbceis\naaaacbbbdrr\ndddddddddddd\nbcc\nbc\n"]}, {"input": "7\nabacaba\nabc\ncccba\nbca\nebtic\ncab\nabracadabra\ncba\ndddddddddddd\ncba\ncbc\ncba\nac\nacb\n", "output": ["aaaacbb\nabccc\nbceit\naaaaabbcdrr\ndddddddddddd\nbcc\nac\n"]}, {"input": "7\nabababa\ncba\nbccba\nbca\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\nacb\nbbc\nabc\nac\nacb\n", "output": ["aaaabbb\nabbcc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabababa\nabc\ncccba\nacb\ndbsic\ncab\nabracadabra\ncba\ndddddddddddd\nbca\nbac\nabc\nac\nabc\n", "output": ["aaaabbb\nabccc\nbcdis\naaaaabbcdrr\ndddddddddddd\nacb\nac\n"]}, {"input": "7\nabababa\ncaa\ncccba\nacb\ndbsic\nbac\nabracbdabra\nabc\ndddddddddddd\nabc\nbbc\nabc\nac\nacb\n", "output": ["aaaabbb\nabccc\nbcdis\naaaacbbbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\nccbba\nacb\ndasic\ncab\nabsacadaara\nabc\ndddddddddddd\nabc\nbbc\naac\nac\nabc\n", "output": ["aaaacbb\nabbcc\nacdis\naaaaaacbdrs\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\necsic\nbac\nabracaeabra\nabc\nddddddcddddd\ncba\ncbc\nabc\nac\nacb\n", "output": ["aaaacbb\nabccc\ncceis\naaaaacbberr\ncddddddddddd\nbcc\nac\n"]}, {"input": "7\nabababa\ncba\ncccba\nacb\ndbsid\nbac\nabracadabra\nabc\ndddddddddddd\nacc\nbbc\ncba\nac\nabc\n", "output": ["aaaabbb\nabccc\nbddis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacbba\nabc\ncccba\nbca\nebsic\nbac\nacracadabra\nabc\ndddddddddddd\ncba\ncbc\nabc\ncb\nacb\n", "output": ["aaacbbb\nabccc\nbceis\naaaaaccbdrr\ndddddddddddd\nbcc\nbc\n"]}, {"input": "7\nacababa\nacb\nccbba\nacb\ndbsic\ncab\nabracadabra\nabc\ndddddddddddd\nabc\nbac\nabc\nac\nabc\n", "output": ["aaaabbc\nabbcc\nbcdis\naaaaacbbdrr\ndddddddddddd\nacb\nac\n"]}, {"input": "7\nabacaba\nacb\ncccba\nacb\ndasic\ncab\nabascadaara\nabc\ndddddddddddd\nabc\nbac\nabc\nac\nabc\n", "output": ["aaaabbc\nabccc\nacdis\naaaaaacbdrs\ndddddddddddd\nacb\nac\n"]}, {"input": "7\nababaca\nabc\nabbcc\nbca\nebsic\nbac\nabracadabra\nabc\neddddddddddd\nacb\nabc\nbca\nac\nabc\n", "output": ["aaaacbb\nabbcc\nbceis\naaaaacbbdrr\nddddddddddde\nabc\nac\n"]}, {"input": "7\nabababa\ncba\ncccba\nacb\ndbsic\nbac\nabracadabra\nacb\nddddddddeddd\nabc\nabc\ncba\nac\nabc\n", "output": ["aaaabbb\nabccc\nbcdis\naaaaabbcdrr\nddddddddddde\nabc\nac\n"]}, {"input": "7\nabacaba\nabc\nabccc\nbca\nebsic\nbac\nabracadabra\nabc\ncddddddddddd\ncba\ncbc\ncba\nbc\nbca\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ncddddddddddd\nbcc\nbc\n"]}, {"input": "7\nabacaba\ncba\ncccba\nbca\nebsic\nbac\nabracadacra\nabc\ndddddddddddd\nabc\ncac\ncba\nbc\nacb\n", "output": ["aaaabbc\nabccc\nbceis\naaaaaccbdrr\ndddddddddddd\nacc\nbc\n"]}, {"input": "7\nabacaba\ncba\nbccba\nbca\necsib\nbac\nabaacrdabra\nabc\ndddddddddddd\ncba\ncac\ncba\ncb\nabc\n", "output": ["aaaabbc\nabbcc\nbceis\naaaaacbbdrr\ndddddddddddd\nacc\nbc\n"]}, {"input": "7\nabacaba\nabc\ncccba\nbca\nebsic\nbac\nabracadabra\nabc\nddcddddddddd\ncba\ndbc\nacb\nab\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ncddddddddddd\nbcd\nab\n"]}, {"input": "7\nabacaba\ncba\ncccba\nacb\ndbsic\ncba\nabascadaara\nabc\ndddddddddddd\nabc\nbbc\nabc\nac\nabc\n", "output": ["aaaabbc\nabccc\nbcdis\naaaaaacbdrs\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nbca\nebsib\nbac\narbadacarba\ncba\nedddddddddde\ndab\nbcb\nacb\nca\nabc\n", "output": ["aaaacbb\nabccc\nbbeis\naaaaabbcdrr\nddddddddddee\nbbc\nac\n"]}, {"input": "7\nabacaba\ncba\ncdcba\nbca\ncisbe\nbac\narabdacarba\ncba\neddddddddddd\ndab\nbcb\nbca\nca\nabc\n", "output": ["aaaabbc\nabccd\nbceis\naaaaabbcdrr\nddddddddddde\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\nabccc\nbca\nebric\nbac\nabracadabra\nabc\ndddddddddddd\nbca\ncbc\ncba\nbd\nacb\n", "output": ["aaaacbb\nabccc\nbceir\naaaaacbbdrr\ndddddddddddd\nbcc\nbd\n"]}, {"input": "7\nabacaba\ncba\ncccca\nbca\nebsic\nbac\naqbadacarba\nabc\ndddddddddddd\ncba\ncac\ncba\nbc\nacb\n", "output": ["aaaabbc\nacccc\nbceis\naaaaacbbdqr\ndddddddddddd\nacc\nbc\n"]}, {"input": "7\nabacaba\nabc\ncdbba\nbca\ncisbe\nbac\narabdacarba\ncba\nedddddeddddd\ndab\nbcb\nbca\nca\nabc\n", "output": ["aaaacbb\nabbcd\nbceis\naaaaabbcdrr\nddddddddddee\nbbc\nac\n"]}, {"input": "7\nabababa\nabc\ncccca\nacb\ndbric\ncab\nabracadabra\nabc\ndddddddddddd\nbac\nbac\ncba\nca\nbba\n", "output": ["aaaabbb\nacccc\nbcdir\naaaaacbbdrr\ndddddddddddd\nabc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\nebsic\naac\nabracadabra\nabc\ndddddddddddc\nabc\nacc\nabc\nad\nbca\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ncddddddddddd\nacc\nad\n"]}, {"input": "7\nabacaab\nabc\nbbccc\nbca\nebsic\nabc\nabracadabra\nabc\nedddeddddddd\nbac\nbbb\nbca\nac\nabc\n", "output": ["aaaacbb\nbbccc\nbceis\naaaaacbbdrr\nddddddddddee\nbbb\nac\n"]}, {"input": "7\nbbababa\nabc\nabccc\nbca\naesic\nbac\nabracadabra\nabc\ndddddddddddd\nbca\ncbc\ncba\nbc\nacb\n", "output": ["aaabbbb\nabccc\naceis\naaaaacbbdrr\ndddddddddddd\nbcc\nbc\n"]}, {"input": "7\nabacaba\nabc\nccdbb\nacb\ncisbd\nbac\nabracadabra\nabc\nddeddddddddd\nabc\nbbb\ndba\nac\nbac\n", "output": ["aaaacbb\nbbccd\nbcdis\naaaaacbbdrr\nddddddddddde\nbbb\nac\n"]}, {"input": "7\nabababb\ncba\ncbacc\nbca\nddsic\naac\nabracadaara\nabc\ndddddddddddd\ncba\nbbc\nabd\nac\nacb\n", "output": ["aaabbbb\nabccc\ncddis\naaaaaacbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\ncba\ncccba\nbca\ndasic\ncab\nacascadaara\nabc\nddeddddddddd\nacb\ncbb\ncba\nac\nabc\n", "output": ["aaaabbc\nabccc\nacdis\naaaaaaccdrs\nddddddddddde\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\nabbdc\nbca\ndbsic\nbac\nabracbdabra\nabc\neddddddddddd\naca\nbbc\nbca\nbc\ncba\n", "output": ["aaaacbb\nabbcd\nbcdis\naaaacbbbdrr\nddddddddddde\nbbc\nbc\n"]}, {"input": "7\nabaaaba\ncba\ncccba\nbca\ndbsic\nbac\narbadacarba\nabc\ndddddddeeddd\nabc\nbbc\ncab\nca\ncba\n", "output": ["aaaaabb\nabccc\nbcdis\naaaaacbbdrr\nddddddddddee\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\nabbcc\nbca\nebsic\nbca\nabracbdabra\ncba\nedddddeddddd\naca\nbbc\nbca\nbc\nabc\n", "output": ["aaaacbb\nabbcc\nbceis\naaaabbbcdrr\nddddddddddee\nbbc\nbc\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\nabc\nbbc\nabd\nac\nabc\n", "output": ["aaaacbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\nabc\nbbc\nabc\nac\nabc\n", "output": ["aaaacbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\nebsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\ncbc\nabc\nac\nacb\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbcc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nbca\nebsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\ncbc\nabc\nac\nacb\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbcc\nac\n"]}, {"input": "7\nabababa\ncba\ncccba\nacb\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\nabc\nbbc\nabc\nac\nabc\n", "output": ["aaaabbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nbca\nebsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\ncbc\ncba\nac\nacb\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbcc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nbca\nebsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\ncbc\ncba\nca\nacb\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbcc\nac\n"]}, {"input": "7\nabacaba\ncba\ncccba\nbca\nebsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\ncbc\ncba\ncb\nabc\n", "output": ["aaaabbc\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbcc\nbc\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\nebsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\ncbc\nacb\nac\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbcc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\nebsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\ncbc\nabc\nbc\nacb\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbcc\nbc\n"]}, {"input": "7\nabababa\nabc\ncccba\nacb\ndbsic\ncab\nabracadabra\nabc\ndddddddddddd\nabc\nbbc\nabc\nac\nabc\n", "output": ["aaaabbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabababa\ncba\ncccba\nacb\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\nabc\nbbc\nabc\nac\nacb\n", "output": ["aaaabbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nbca\nebsic\ncab\nabracadabra\nabc\ndddddddddddd\ncba\ncbc\ncba\nac\nacb\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbcc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\nbbc\nabd\nbc\ncba\n", "output": ["aaaacbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nbc\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\nebsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\nbbc\nacb\nac\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\nebsic\nbac\nabracadabra\nabc\ndddddddddddd\nabc\ncbc\nabc\nac\nacb\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbcc\nac\n"]}, {"input": "7\nabababa\ncba\ncccba\nbca\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\nabc\nbbc\nabc\nac\nacb\n", "output": ["aaaabbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nababaca\nabc\ncccba\nacb\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\nbbc\nabd\nbc\ncba\n", "output": ["aaaacbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nbc\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\nebsic\nbac\nabracadabra\nabc\ndddddddddddd\nbca\nbbc\nacb\nac\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\ndasic\ncab\nabracadaara\nabc\ndddddddddddd\nabc\nbbc\nabc\nac\nabc\n", "output": ["aaaacbb\nabccc\nacdis\naaaaaacbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\nebsic\naac\nabracadabra\nabc\ndddddddddddd\nabc\ncbc\nabc\nac\nacb\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbcc\nac\n"]}, {"input": "7\nabababa\nabc\ncccba\nacb\ndbsic\ncab\nabracadabra\nabc\ndddddddddddd\nbac\nbac\nabc\nac\nabc\n", "output": ["aaaabbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nacb\nac\n"]}, {"input": "7\nabababa\ncaa\ncccba\nbca\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\nabc\nbbc\nabc\nac\nacb\n", "output": ["aaaabbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaca\nabc\ncccba\nbca\nebsic\ncab\nabracadabra\nabc\ndddddddddddd\ncba\ncbc\nbca\nac\nacb\n", "output": ["aaaaccb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbcc\nac\n"]}, {"input": "7\nabacaba\nabc\ncccba\nacb\nebsic\nbac\nabracadabra\nabc\ndddddddddddd\nbca\nbbc\nbca\nac\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabababa\nabc\nbccca\nacb\ndbsic\ncab\nabracadabra\nabc\ndddddddddddd\nbac\nbac\nabc\nac\nabc\n", "output": ["aaaabbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nacb\nac\n"]}, {"input": "7\nabacaba\nabc\nabccc\nacb\nebsic\nbac\nabracadabra\nabc\ndddddddddddd\nbca\nbbc\nbca\nac\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabababb\ncaa\nccabc\nbca\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\nabc\nbbc\nabc\nac\nacb\n", "output": ["aaabbbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabababb\ncaa\nccabc\nbca\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\nbbc\nabc\nac\nacb\n", "output": ["aaabbbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\nabccc\nbca\nebsic\nbac\nabracadabra\nabc\neddddddddddd\nbca\nbbc\nbca\nac\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\nddddddddddde\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\nabccc\nbca\nebsic\nbac\nabracadabra\nabc\neddddddddddd\nacb\nbbc\nbca\nac\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\nddddddddddde\nbbc\nac\n"]}, {"input": "7\nabacaba\nabc\nabccc\nbca\nebsic\nbac\nabracadabra\nabc\neddddddddddd\nacb\ncbb\nbca\nac\nabc\n", "output": ["aaaacbb\nabccc\nbceis\naaaaacbbdrr\nddddddddddde\nbbc\nac\n"]}], "task_id": "codecontest/127", "prompt": "You are given strings S and T, consisting of lowercase English letters. It is guaranteed that T is a permutation of the string abc. T contains the characters a, b, and c arranged in some order.\n\nFind string S', the lexicographically smallest permutation of S such that T is not a subsequence of S'. Additionally, ensure that S' retains the same character frequency as S.\n\nString a is a permutation of string b if the number of occurrences of each distinct character is the same in both strings.\n\nA string a is a subsequence of a string b if a can be obtained from b by deletion of several (possibly, zero or all) elements.\n\nA string a is lexicographically smaller than a string b if and only if one of the following holds:\n\n  * a is a prefix of b, but a \u2260 b;\n  * in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b.\n\nInput\n\nEach test contains multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains a string S (1 \u2264 |S| \u2264 100), consisting of lowercase English letters.\n\nThe second line of each test case contains a string T that is a permutation of the string abc. (Hence, |T| = 3).\n\nNote that there is no limit on the sum of |S| across all test cases.\n\nOutput\n\nFor each test case, output a single string S', the lexicographically smallest permutation of S such that T is not a subsequence of S'.\n\nExample\n\nInput\n\n\n7\nabacaba\nabc\ncccba\nacb\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\nbbc\nabc\nac\nabc\n\n\nOutput\n\n\naaaacbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n\nNote\n\nIn the first test case, both aaaabbc and aaaabcb are lexicographically smaller than aaaacbb, but they contain abc as a subsequence.\n\nIn the second test case, abccc is the smallest permutation of cccba and does not contain acb as a subsequence.\n\nIn the third test case, bcdis is the smallest permutation of dbsic and does not contain bac as a subsequence.", "repair_prompt": ["You are given strings S and T, consisting of lowercase English letters. It is guaranteed that T is a permutation of the string abc. T contains the characters a, b, and c arranged in some order.\n\nFind string S', the lexicographically smallest permutation of S such that T is not a subsequence of S'. Additionally, ensure that S' retains the same character frequency as S.\n\nString a is a permutation of string b if the number of occurrences of each distinct character is the same in both strings.\n\nA string a is a subsequence of a string b if a can be obtained from b by deletion of several (possibly, zero or all) elements.\n\nA string a is lexicographically smaller than a string b if and only if one of the following holds:\n\n  * a is a prefix of b, but a \u2260 b;\n  * in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b.\n\nInput\n\nEach test contains multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains a string S (1 \u2264 |S| \u2264 100), consisting of lowercase English letters.\n\nThe second line of each test case contains a string T that is a permutation of the string abc. (Hence, |T| = 3).\n\nNote that there is no limit on the sum of |S| across all test cases.\n\nOutput\n\nFor each test case, output a single string S', the lexicographically smallest permutation of S such that T is not a subsequence of S'.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n7\nabacaba\nabc\ncccba\nacb\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\nbbc\nabc\nac\nabc\n\n\nOutput\n\n\naaaacbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n\nNote\n\nIn the first test case, both aaaabbc and aaaabcb are lexicographically smaller than aaaacbb, but they contain abc as a subsequence.\n\nIn the second test case, abccc is the smallest permutation of cccba and does not contain acb as a subsequence.\n\nIn the third test case, bcdis is the smallest permutation of dbsic and does not contain bac as a subsequence.\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\ndef find_smallest_permutation(S: str, T: str) -> str:\n    from collections import Counter\n\n    # Create a frequency map of characters in S\n    freq_S = Counter(S)\n\n    # Initialize the result string\n    result = []\n\n    # Iterate over the characters in T to build the smallest lexicographical permutation of S\n    for char in T:\n        if freq_S[char] > 0:\n            result.append(char)\n            freq_S[char] -= 1\n\n    # Add the remaining characters from S to the result\n    for char, count in freq_S.items():\n        result.extend([char] * count)\n\n    # Convert the result list to a string\n    return ''.join(result)\n\n# Read the number of test cases\nn = int(input())\n\n# Process each test case\nfor _ in range(n):\n    S = input()\n    T = input()\n    result = find_smallest_permutation(S, T)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_smallest_permutation(S: str, T: str) -> str:\n    from collections import Counter\n\n    # Count the frequency of each character in S\n    freq_S = Counter(S)\n    # Convert S to a list for easier manipulation\n    S_list = list(S)\n\n    # Sort S to get the lexicographically smallest permutation\n    S_list.sort()\n\n    # Check if T is a subsequence of the current permutation\n    def is_subsequence(s, t):\n        it = iter(t)\n        return all(c in it for c in s)\n\n    # Function to find the next smallest character that maintains the frequency constraint\n    def find_next_smallest(S_list, freq_S, T):\n        for i in range(len(S_list)):\n            if S_list[i] == T[0]:\n                for j in range(i + 1, len(S_list)):\n                    if S_list[j] > T[0] and freq_S[S_list[j]] > 0:\n                        S_list[i], S_list[j] = S_list[j], S_list[i]\n                        if not is_subsequence(T, ''.join(S_list)):\n                            return True, ''.join(S_list)\n                        S_list[i], S_list[j] = S_list[j], S_list[i]\n            elif S_list[i] == T[1]:\n                for j in range(i + 1, len(S_list)):\n                    if S_list[j] > T[1] and freq_S[S_list[j]] > 0:\n                        S_list[i], S_list[j] = S_list[j], S_list[i]\n                        if not is_subsequence(T, ''.join(S_list)):\n                            return True, ''.join(S_list)\n                        S_list[i], S_list[j] = S_list[j], S_list[i]\n            elif S_list[i] == T[2]:\n                for j in range(i + 1, len(S_list)):\n                    if S_list[j] > T[2] and freq_S[S_list[j]] > 0:\n                        S_list[i], S_list[j] = S_list[j], S_list[i]\n                        if not is_subsequence(T, ''.join(S_list)):\n                            return True, ''.join(S_list)\n                        S_list[i], S_list[j] = S_list[j], S_list[i]\n        return False, S\n\n    # Iterate to find the smallest permutation that does not contain T as a subsequence\n    found = True\n    while found:\n        found, result = find_next_smallest(S_list, freq_S, T)\n        S_list = list(result)\n\n    return result\n\n# Provide the Interface\nimport sys\ninput = sys.stdin.read\n\nn = input().split()\nS = n[0]\nT = n[1]\nresult = find_smallest_permutation(S, T)\nprint(result)\n", "from typing import List\n## main.py\n\ndef find_smallest_permutation(S: str, T: str) -> str:\n    from collections import Counter\n\n    # Count the frequency of each character in S\n    freq_S = Counter(S)\n    # Count the frequency of each character in T\n    freq_T = Counter(T)\n\n    # Sort the characters in S to get the lexicographically smallest permutation\n    sorted_S = sorted(S)\n\n    # Check if T is already a subsequence of sorted_S\n    if not is_subsequence(T, sorted_S):\n        return ''.join(sorted_S)\n\n    # Try to find a permutation of S that does not contain T as a subsequence\n    for i in range(len(sorted_S)):\n        for j in range(i + 1, len(sorted_S)):\n            # Swap the characters at positions i and j\n            sorted_S[i], sorted_S[j] = sorted_S[j], sorted_S[i]\n            # Check if the new permutation does not contain T as a subsequence\n            if not is_subsequence(T, sorted_S):\n                return ''.join(sorted_S)\n            # Swap back to restore the original order\n            sorted_S[i], sorted_S[j] = sorted_S[j], sorted_S[i]\n\n    return ''.join(sorted_S)\n\ndef is_subsequence(T: str, S: list) -> bool:\n    it = iter(S)\n    return all(char in it for char in T)\n\n# Read the number of test cases\nn = int(input())\nfor _ in range(n):\n    S = input()\n    T = input()\n    result = find_smallest_permutation(S, T)\n    print(result)\n", "from typing import List\nfrom collections import Counter\nfrom typing import List\n\ndef find_smallest_permutation(S: str, T: str) -> str:\n    # Count the frequency of each character in S and T\n    freq_S = Counter(S)\n    freq_T = Counter(T)\n    \n    # Create a list of characters in S\n    chars_S = list(S)\n    \n    # Sort the characters of S based on frequency and lexicographical order\n    chars_S.sort(key=lambda x: (-freq_S[x], x))\n    \n    # Create a list to hold the result characters\n    result_chars = []\n    \n    # Create a set to keep track of characters already used in T\n    used_chars = set(T)\n    \n    # Iterate over the sorted characters of S\n    for char in chars_S:\n        if char not in used_chars:\n            result_chars.append(char)\n            freq_S[char] -= 1\n            if freq_S[char] == 0:\n                del freq_S[char]\n    \n    # Add characters from T to the result if necessary\n    for char in T:\n        if freq_S[char] > 0:\n            result_chars.append(char)\n            freq_S[char] -= 1\n            if freq_S[char] == 0:\n                del freq_S[char]\n    \n    # Construct the result string\n    result = ''.join(result_chars)\n    \n    return result\n\n# Provide the Interface\nn = int(input())\nfor _ in range(n):\n    S = input()\n    T = input()\n    result = find_smallest_permutation(S, T)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_smallest_permutation(S: str, T: str) -> str:\n    from collections import Counter\n\n    # Count the frequency of each character in S and T\n    freq_S = Counter(S)\n    freq_T = Counter(T)\n\n    # Initialize the result string and the remaining characters in S\n    result = []\n    remaining = list(S)\n\n    # Iterate over the characters in T and try to replace them in S\n    for char in T:\n        if freq_S[char] > 0:\n            result.append(char)\n            freq_S[char] -= 1\n            remaining.remove(char)\n        else:\n            # Find the smallest character that can replace char in remaining\n            smallest_char = min(filter(lambda x: freq_S[x] > 0, remaining))\n            result.append(smallest_char)\n            freq_S[smallest_char] -= 1\n            remaining.remove(smallest_char)\n\n    # Append the remaining characters in S to the result\n    for char in remaining:\n        result.append(char)\n\n    return ''.join(result)\n\n# Read the number of test cases\nn = int(input())\n\n# Process each test case\nfor _ in range(n):\n    S = input()\n    T = input()\n    result = find_smallest_permutation(S, T)\n    print(result)\n", "from typing import List\nfrom itertools import permutations\nfrom collections import Counter\n\ndef find_smallest_permutation(S: str, T: str) -> str:\n    # Count the frequency of each character in S and T\n    counter_S = Counter(S)\n    counter_T = Counter(T)\n    \n    # Generate all permutations of S\n    all_permutations = set(permutations(S))\n    \n    # Function to check if T is a subsequence of a given permutation\n    def is_subsequence(perm):\n        it = iter(perm)\n        return all(char in it for char in T)\n    \n    # Find the lexicographically smallest permutation that is not a subsequence of T\n    smallest_permutation = None\n    for perm in all_permutations:\n        if not is_subsequence(perm):\n            if smallest_permutation is None or perm < smallest_permutation:\n                smallest_permutation = perm\n    \n    # Convert the permutation back to a string\n    if smallest_permutation is not None:\n        return ''.join(smallest_permutation)\n    else:\n        return S  # If no valid permutation is found, return the original S\n\n# Read input\nt = int(input())\nfor _ in range(t):\n    S = input().strip()\n    T = input().strip()\n    result = find_smallest_permutation(S, T)\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\nfrom collections import Counter\n\ndef find_smallest_permutation(S: str, T: str) -> str:\n    def is_subsequence(s: str, t: str) -> bool:\n        it = iter(t)\n        return all(char in it for char in s)\n\n    def generate_permutations(s: str) -> List[str]:\n        if len(s) == 1:\n            return [s]\n        permutations = []\n        for i in range(len(s)):\n            for perm in generate_permutations(s[:i] + s[i+1:]):\n                permutations.append(s[i] + perm)\n        return permutations\n\n    counter_s = Counter(S)\n    counter_t = Counter(T)\n\n    # Generate all permutations of S\n    permutations = generate_permutations(S)\n\n    # Filter permutations that do not contain T as a subsequence\n    valid_permutations = []\n    for perm in permutations:\n        if not is_subsequence(T, perm):\n            valid_permutations.append(perm)\n\n    # Find the lexicographically smallest permutation that does not contain T as a subsequence\n    smallest_permutation = min(valid_permutations)\n\n    # Ensure the smallest permutation retains the same character frequency as S\n    result_counter = Counter(smallest_permutation)\n    for char in counter_s:\n        if result_counter[char] != counter_s[char]:\n            smallest_permutation = smallest_permutation.replace(char, '', counter_s[char] - result_counter[char])\n\n    return smallest_permutation\n\n# Provide the Interface\nimport sys\n\nn = int(input().strip())\nfor _ in range(n):\n    S = input().strip()\n    T = input().strip()\n    result = find_smallest_permutation(S, T)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_smallest_permutation(S: str, T: str) -> str:\n    from collections import Counter\n\n    # Count the frequency of each character in S and T\n    freq_S = Counter(S)\n    freq_T = Counter(T)\n\n    # Initialize the result string and the remaining characters in S\n    result = []\n    remaining = list(S)\n\n    # Iterate over T to place characters in the result\n    for char in T:\n        if char in freq_S and freq_S[char] > 0:\n            # If the character is in S and still available, add it to the result\n            result.append(char)\n            freq_S[char] -= 1\n            remaining.remove(char)\n        else:\n            # If the character is not in S or is exhausted, find the smallest available character\n            smallest_available = min(filter(lambda x: freq_S[x] > 0, remaining))\n            result.append(smallest_available)\n            freq_S[smallest_available] -= 1\n            remaining.remove(smallest_available)\n\n    # Append the remaining characters in S to the result\n    result.extend(remaining)\n\n    # Convert the result list to a string and return it\n    return ''.join(result)\n\n# Provide the Interface\nn = int(input())\nfor _ in range(n):\n    S = input()\n    T = input()\n    result = find_smallest_permutation(S, T)\n    print(result)\n", "from typing import List\ndef find_smallest_permutation(S: str, T: str) -> str:\n    from collections import Counter\n\n    # Count the frequency of each character in S and T\n    freq_S = Counter(S)\n    freq_T = Counter(T)\n\n    # Initialize the result list with characters from S\n    result = []\n    used_chars = set()\n\n    # Iterate through S and try to find a sequence that does not include the characters of T\n    for char in S:\n        if char not in freq_T:\n            result.append(char)\n            used_chars.add(char)\n            freq_S[char] -= 1\n            if freq_S[char] == 0:\n                del freq_S[char]\n\n    # Add the remaining characters from T to the result\n    for char in T:\n        if char not in used_chars:\n            result.append(char)\n\n    # Sort the result to ensure lexicographically smallest permutation\n    result.sort()\n\n    # Convert the result list back to a string\n    return ''.join(result)\n\n# Interface\nn = int(input())\nfor _ in range(n):\n    S = input()\n    T = input()\n    result = find_smallest_permutation(S, T)\n    print(result)\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom itertools import permutations\n\ndef find_smallest_permutation(S: str, T: str) -> str:\n    # Count the frequency of each character in S and T\n    freq_S = Counter(S)\n    freq_T = Counter(T)\n    \n    # Generate all permutations of S\n    for perm in permutations(S):\n        # Create a new string from the permutation\n        perm_str = ''.join(perm)\n        # Check if the permutation contains the same characters with the same frequency as S\n        if all(freq_S[char] == Counter(perm_str)[char] for char in freq_S):\n            # Check if T is not a subsequence of the permutation\n            if not is_subsequence(T, perm_str):\n                return perm_str\n    return S  # If no valid permutation is found, return the original S\n\ndef is_subsequence(T: str, S: str) -> bool:\n    # Check if T is a subsequence of S\n    it = iter(S)\n    return all(char in it for char in T)\n\n# Read input from stdin\nimport sys\n\nn = int(sys.stdin.readline().strip())\nfor _ in range(n):\n    S = sys.stdin.readline().strip()\n    T = sys.stdin.readline().strip()\n    result = find_smallest_permutation(S, T)\n    print(result)\n"], "plans": ["requirement analysis:\nThe primary requirement is to find the lexicographically smallest permutation of S that does not contain T as a subsequence. The solution must ensure that the output string retains the same character frequency as the input string S. The constraints include the length of S being up to 100 and the number of test cases being up to 1000.\nrequirement pool:\n- Implement a function to find the lexicographically smallest permutation of S that does not contain T as a subsequence.\n- Ensure the output string retains the same character frequency as the input string S.\n- Optimize the solution to handle up to 1000 test cases efficiently.\n- Implement user input and output handling.\nTo solve this problem, we will use a combination of greedy algorithm and frequency counting. The approach involves creating a frequency map of characters in S, then iteratively building the smallest lexicographical permutation of S that does not contain T as a subsequence. We will use a greedy approach to ensure that we are always choosing the smallest available character that does not disrupt the condition that T is not a subsequence of S'. The frequency map will help us ensure that the character frequency in S' matches that in S.\n", "requirement analysis:\nThe primary requirement is to find the lexicographically smallest permutation of S that does not contain T as a subsequence. The secondary requirement is to ensure the output string retains the same character frequency as the input string S. The solution must be efficient and work within the given constraints.\nrequirement pool:\n- Find the lexicographically smallest permutation of S that does not contain T as a subsequence.\n- Ensure the output string retains the same character frequency as the input string S.\n- Ensure the solution is efficient and works within the given constraints.\nTo achieve the goal of finding the lexicographically smallest permutation of S that does not contain T as a subsequence while retaining the same character frequency as S, we will use a combination of greedy algorithm and frequency tracking. The algorithm will first sort the characters of S to ensure the lexicographically smallest permutation. Then, it will iteratively check if T is a subsequence of the current permutation. If T is a subsequence, the algorithm will swap the last character of the permutation with the next smallest character that maintains the frequency constraint. This process will continue until T is no longer a subsequence of the permutation.\n", "requirement analysis:\nThe primary requirement is to find the lexicographically smallest permutation of S that does not contain T as a subsequence. The output string must retain the same character frequency as S. This requires a careful approach to ensure that the constraints are met efficiently.\nrequirement pool:\n- Implement a function to find the lexicographically smallest permutation of S that does not contain T as a subsequence.\n- Ensure the output string retains the same character frequency as the input string S.\n- Optimize the algorithm to handle the constraints efficiently.\n- Test the solution with various inputs to ensure correctness and robustness.\nTo achieve the goal of finding the lexicographically smallest permutation of S that does not contain T as a subsequence while retaining the same character frequency as S, we will use a combination of greedy algorithm and frequency tracking. The algorithm will first sort the characters of S to ensure the lexicographically smallest permutation. Then, it will check if T is a subsequence of the sorted S. If it is, the algorithm will iteratively swap characters in S to ensure T is not a subsequence while maintaining the character frequency. This approach ensures efficiency and correctness.\n", "requirement analysis:\nThe primary requirement is to find the lexicographically smallest permutation of S that does not contain T as a subsequence. The secondary requirement is to ensure that the output string retains the same character frequency as the input string S. The solution must be efficient and work within the given constraints.\nrequirement pool:\n- Find the lexicographically smallest permutation of S that does not contain T as a subsequence.\n- Ensure that the output string retains the same character frequency as the input string S.\n- Ensure the solution is efficient and works within the given constraints.\nTo achieve the goal of finding the lexicographically smallest permutation of S that does not contain T as a subsequence while retaining the same character frequency as S, we will use a combination of sorting and frequency tracking. We will first count the frequency of each character in S and T. Then, we will sort the characters of S based on their frequency and lexicographical order, ensuring that T is not a subsequence of the resulting permutation. This approach leverages the properties of sorting and frequency counting to efficiently find the desired permutation.\n", "requirement analysis:\nThe primary requirement is to find the lexicographically smallest permutation of S that does not contain T as a subsequence. The solution must ensure that the output string retains the same character frequency as the input string S. This involves careful manipulation of the characters in S to avoid the subsequence T while maintaining the character counts. The solution should be efficient and capable of handling inputs of varying sizes.\nrequirement pool:\n- Implement a function to find the lexicographically smallest permutation of S that does not contain T as a subsequence.\n- Ensure the output string retains the same character frequency as the input string S.\n- Optimize the algorithm for performance, especially for large inputs.\n- Provide a user-friendly interface for input and output.\nTo achieve the goal of finding the lexicographically smallest permutation of S that does not contain T as a subsequence while retaining the same character frequency as S, we will use a combination of greedy algorithm and frequency tracking. The algorithm will first count the frequency of each character in S and T. Then, it will attempt to construct S' by iteratively replacing characters in S with those that maintain the character frequency and avoid forming the subsequence T. This approach ensures that the output string is lexicographically smallest and retains the same character frequency as the input string S.\n", "requirement analysis:\nThe primary requirement is to find the lexicographically smallest permutation of S that does not contain T as a subsequence. Additionally, the output string must retain the same character frequency as S. This requires a careful combination of string manipulation and permutation generation to ensure the constraints are met.\nrequirement pool:\n- Implement a function to find the lexicographically smallest permutation of S that does not contain T as a subsequence.\n- Ensure the output string retains the same character frequency as S.\n- Optimize the solution to meet the constraints of the problem.\n- Provide a user-friendly interface for input and output.\n- Ensure the solution is efficient and works within the given constraints.\nTo solve this problem, we will use a combination of string manipulation techniques and permutation generation. The main challenge is to ensure that the output string does not contain T as a subsequence while maintaining the same character frequency as S. We will use the Python itertools library to generate permutations and carefully filter out those that contain T as a subsequence. The output string will be the lexicographically smallest permutation that meets these criteria.\n", "requirement analysis:\nThe primary requirement is to find the lexicographically smallest permutation of S that does not contain T as a subsequence. The solution must ensure that the character frequency in the output string matches that of S. This involves generating permutations and checking for subsequences, which can be computationally intensive for large strings.\nrequirement pool:\n- Implement a function to generate all permutations of S.\n- Create a function to check if T is a subsequence of a given string.\n- Develop a mechanism to select the lexicographically smallest permutation that does not contain T as a subsequence.\n- Ensure the output string has the same character frequency as S.\n- Optimize the algorithm to handle large inputs efficiently.\nTo achieve the goal of finding the lexicographically smallest permutation of S that does not contain T as a subsequence, while maintaining the same character frequency as S, we will use a combination of Python's built-in libraries and efficient algorithms. We will generate all permutations of S and check each one to see if it contains T as a subsequence. We will use a priority queue to efficiently find the lexicographically smallest permutation that does not contain T. The priority queue will help us to keep track of the smallest permutations as we generate them.\n", "requirement analysis:\nThe primary requirement is to find the lexicographically smallest permutation of S that does not contain T as a subsequence while maintaining the same character frequency as S. The solution must be efficient and handle multiple test cases within the given constraints.\nrequirement pool:\n- Ensure the output string is the lexicographically smallest permutation of S that does not contain T as a subsequence.\n- Maintain the same character frequency as the input string S.\n- Provide an efficient solution that can handle multiple test cases within the given constraints.\n- Ensure the solution is easy to understand and implement.\n- Optimize the solution for performance to handle large inputs efficiently.\nTo achieve the goal of finding the lexicographically smallest permutation of S that does not contain T as a subsequence while maintaining the same character frequency as S, we will use a combination of Python's built-in data structures and algorithms. We will first count the frequency of each character in S and T. Then, we will iteratively replace characters in S to ensure that T is not a subsequence and to maintain the character frequency. This approach will ensure efficiency and correctness.\n", "requirement analysis:\nThe primary requirement is to find the lexicographically smallest permutation of S that does not contain T as a subsequence while maintaining the same character frequency as S. The solution must be efficient and handle up to 1000 test cases with strings up to 100 characters in length.\nrequirement pool:\n- The main code must find the lexicographically smallest permutation of S that does not contain T as a subsequence.\n- Ensure the output string retains the same character frequency as the input string S.\n- The solution must be efficient and handle up to 1000 test cases with strings up to 100 characters in length.\n- Implement a function to check if T is a subsequence of S'.\n- Ensure the function maintains the character frequency of S.\nTo achieve the goal of finding the lexicographically smallest permutation of S that does not contain T as a subsequence while maintaining the same character frequency as S, we will use a combination of greedy algorithm and frequency tracking. We will iterate through S and try to find a sequence that does not include the characters of T. We will use a frequency counter to ensure that the character frequency in the result matches that in the input string S.\n", "requirement analysis:\nThe primary requirement is to find the lexicographically smallest permutation of S that does not contain T as a subsequence. Additionally, the output must retain the same character frequency as S. This requires a balance between finding the smallest permutation and ensuring the character frequency matches the input string. The solution should be efficient to handle the potential size of S.\nrequirement pool:\n- Ensure the output string is the smallest possible permutation of S that does not include T as a subsequence.\n- Retain the same character frequency as the input string S.\n- Ensure the solution is efficient and can handle large inputs.\n- Provide a customizable solution that meets user requirements.\nTo achieve the goal of finding the lexicographically smallest permutation of S that does not contain T as a subsequence while maintaining the same character frequency as S, we will use a combination of Python's built-in data structures and algorithms. We will first count the frequency of each character in S and T. Then, we will generate permutations of S and check if T is a subsequence of the permutation. We will continue this process until we find a permutation that does not contain T as a subsequence. The permutation with the smallest lexicographical order will be selected.\n"], "scores": [], "pass_results": [false, false, false, false, false, true, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 123, "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains a string S (1 \u2264 |S| \u2264 100), consisting of lowercase English letters.\n\nThe second line of each test case contains a string T that is a permutation of the string abc. (Hence, |T| = 3).\n\nNote that there is no limit on the sum of |S| across all test cases.\n\nOutput\n\nFor each test case, output a single string S', the lexicographically smallest permutation of S such that T is not a subsequence of S'.\n\nExample\n\nInput\n\n\n7\nabacaba\nabc\ncccba\nacb\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\nbbc\nabc\nac\nabc\n\n\nOutput\n\n\naaaacbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n\nNote\n\nIn the first test case, both aaaabbc and aaaabcb are lexicographically smaller than aaaacbb, but they contain abc as a subsequence.\n\nIn the second test case, abccc is the smallest permutation of cccba and does not contain acb as a subsequence.\n\nIn the third test case, bcdis is the smallest permutation of dbsic and does not contain bac as a subsequence.", "mutate_method": "add_1_sentence_at_end", "parent_index": 40}
