{"name": "1575_I. Illusions of the Desert", "description": "Chanek Jones is back, helping his long-lost relative Indiana Jones, to find a secret treasure in a maze buried below a desert full of illusions.\n\nThe map of the labyrinth forms a tree with n rooms numbered from 1 to n and n - 1 tunnels connecting them such that it is possible to travel between each pair of rooms through several tunnels.\n\nThe i-th room (1 \u2264 i \u2264 n) has a_i illusion rate. To go from the x-th room to the y-th room, there must exist a tunnel between x and y, and it takes max(|a_x + a_y|, |a_x - a_y|) energy. |z| denotes the absolute value of z.\n\nTo prevent grave robbers, the maze can change the illusion rate of any room in it. Chanek and Indiana would ask q queries.\n\nThere are two types of queries to be done:\n\n  * 1\\ u\\ c \u2014 The illusion rate of the x-th room is changed to c (1 \u2264 u \u2264 n, 0 \u2264 |c| \u2264 10^9). \n  * 2\\ u\\ v \u2014 Chanek and Indiana ask you the minimum sum of energy needed to take the secret treasure at room v if they are initially at room u (1 \u2264 u, v \u2264 n). \n\n\n\nHelp them, so you can get a portion of the treasure!\n\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 |a_i| \u2264 10^9) \u2014 inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 \u2264 s_i, t_i \u2264 n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\nExample\n\nInput\n\n\n6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n\n\nOutput\n\n\n39\n32\n0\n\nNote\n\n<image>\n\nIn the first query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|10 + 4|, |10 - 4|) = 14 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\nIn total, it takes 39 energy.\n\nIn the second query, the illusion rate of the 1-st room changes from 10 to -3.\n\nIn the third query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|-3 + 4|, |-3 - 4|) = 7 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\n\n\nNow, it takes 32 energy.", "tags": ["data structures", "trees"], "difficulty": 15, "id": 1575, "sample_io": [{"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["39\n32\n0\n"]}], "test_list": [{"input": "2 1\n-1000000000 1000000000\n2 1\n2 1 2\n", "output": ["2000000000\n"]}, {"input": "4 4\n2 -1000 100 3\n2 1\n3 2\n4 1\n2 1 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["2102\n0\n1000000003\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["19\n32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n30\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["9\n12\n0\n"]}, {"input": "6 3\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["9\n12\n"]}, {"input": "2 1\n-1000000000 1010000000\n2 1\n2 1 2\n", "output": ["2010000000\n"]}, {"input": "4 4\n2 -1000 100 3\n2 1\n3 2\n4 2\n2 1 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["2102\n0\n1000002003\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["39\n33\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 2\n", "output": ["9\n32\n23\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["25\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["9\n32\n25\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["9\n0\n0\n"]}, {"input": "6 4\n10 -9 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["35\n29\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 2\n", "output": ["9\n32\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["31\n0\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["3\n26\n22\n"]}, {"input": "6 4\n0 -9 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["17\n40\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n38\n0\n"]}, {"input": "6 4\n10 -9 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["0\n29\n0\n"]}, {"input": "6 4\n0 -9 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["17\n0\n0\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["16\n0\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["0\n19\n0\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n25\n"]}, {"input": "6 4\n0 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["0\n22\n0\n"]}, {"input": "6 4\n0 -9 4 0 8 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n13\n"]}, {"input": "6 4\n0 -3 2 -1 2 -12\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["0\n34\n0\n"]}, {"input": "6 4\n0 -9 4 0 14 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["28\n0\n13\n"]}, {"input": "6 4\n0 -3 2 -1 2 -12\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["0\n8\n0\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["39\n25\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 3 3\n", "output": ["9\n13\n0\n"]}, {"input": "6 3\n0 -9 2 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 2 3\n", "output": ["8\n11\n"]}, {"input": "4 4\n2 -1000 100 3\n2 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1100\n0\n1000002003\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n4 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["9\n22\n15\n"]}, {"input": "6 3\n0 -17 2 -1 4 -5\n1 4\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["1\n4\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n6 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 2\n", "output": ["21\n32\n"]}, {"input": "6 4\n0 -9 0 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 6 3\n", "output": ["9\n30\n5\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 0\n2 1 2\n2 5 2\n", "output": ["3\n23\n22\n"]}, {"input": "6 4\n0 -14 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["17\n45\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -2\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n24\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["0\n7\n0\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["37\n0\n25\n"]}, {"input": "6 4\n0 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["0\n21\n0\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["28\n0\n15\n"]}, {"input": "6 4\n10 -9 1 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 3\n", "output": ["19\n32\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n6 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["21\n0\n0\n"]}, {"input": "4 4\n2 -1000 100 3\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1100\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n1 4\n5 6\n4 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["1\n14\n21\n"]}, {"input": "6 4\n0 -9 2 -1 3 -6\n1 5\n6 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 2\n", "output": ["19\n30\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["38\n0\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -1\n2 1 2\n2 5 2\n", "output": ["3\n24\n22\n"]}, {"input": "6 3\n0 0 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 4\n1 2 3\n", "output": ["19\n12\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 2 3\n", "output": ["28\n42\n15\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["0\n4\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n1 4\n5 6\n4 2\n6 3\n2 1 4\n1 2 -3\n2 1 2\n2 5 2\n", "output": ["1\n5\n9\n"]}, {"input": "6 4\n10 -9 2 -1 4 0\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["26\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 5\n2 3 3\n", "output": ["0\n5\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 3\n1 1 -3\n2 1 5\n2 3 3\n", "output": ["5\n5\n0\n"]}, {"input": "2 1\n-1000000000 1000000010\n2 1\n2 1 2\n", "output": ["2000000010\n"]}, {"input": "6 4\n0 -9 2 -1 4 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n22\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 4 3\n", "output": ["9\n12\n21\n"]}, {"input": "2 1\n-651044801 1010000000\n2 1\n2 1 2\n", "output": ["1661044801\n"]}, {"input": "6 4\n-1 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["10\n0\n0\n"]}, {"input": "6 3\n0 -17 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 1 4\n2 3 3\n", "output": ["9\n15\n"]}, {"input": "6 4\n10 -9 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 3 -3\n2 1 2\n2 3 3\n", "output": ["35\n35\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -2\n2 1 2\n1 3 2\n", "output": ["9\n31\n"]}, {"input": "6 4\n0 -9 0 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["28\n30\n0\n"]}, {"input": "6 4\n10 -13 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["35\n0\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 1\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["0\n26\n22\n"]}, {"input": "6 4\n10 -3 2 -1 2 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["0\n35\n0\n"]}, {"input": "6 4\n0 -9 2 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n23\n"]}, {"input": "6 4\n-1 -9 4 0 8 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["17\n0\n13\n"]}, {"input": "6 4\n0 -9 4 0 0 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["0\n0\n13\n"]}, {"input": "6 4\n10 -15 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["45\n25\n0\n"]}, {"input": "6 3\n0 -9 2 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 2 3\n", "output": ["8\n12\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 4 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["39\n0\n"]}, {"input": "6 4\n0 -14 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["17\n31\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 5\n", "output": ["0\n7\n4\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["37\n0\n0\n"]}, {"input": "4 4\n2 -1000 110 3\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1110\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n1 4\n5 6\n4 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["10\n14\n21\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 2\n2 2 3\n", "output": ["28\n43\n15\n"]}, {"input": "6 4\n3 -9 2 -1 4 0\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["19\n0\n"]}, {"input": "2 1\n-651044801 1010000100\n2 1\n2 1 2\n", "output": ["1661044901\n"]}, {"input": "6 4\n0 -9 0 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["28\n30\n14\n"]}, {"input": "6 4\n0 -6 2 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n20\n"]}, {"input": "6 4\n0 -9 4 0 0 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["9\n0\n13\n"]}, {"input": "6 3\n10 -15 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["45\n25\n"]}, {"input": "6 3\n0 -9 2 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 5\n2 2 3\n", "output": ["8\n8\n"]}, {"input": "6 4\n10 -9 2 -1 3 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 4 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["37\n0\n"]}, {"input": "4 4\n2 -1000 110 4\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1110\n0\n1000000004\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 4\n1 1 -4\n2 1 2\n2 2 3\n", "output": ["28\n13\n51\n"]}, {"input": "6 4\n0 -9 0 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["27\n30\n14\n"]}, {"input": "6 3\n10 -21 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["51\n25\n"]}, {"input": "6 4\n0 -6 4 0 14 1\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 4\n1 1 -4\n2 1 2\n2 2 3\n", "output": ["28\n10\n48\n"]}, {"input": "6 3\n10 -21 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["57\n31\n"]}, {"input": "6 3\n10 -21 2 -1 4 -9\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["31\n31\n"]}, {"input": "6 3\n10 -21 2 -1 4 -9\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 2\n1 1 -3\n2 2 3\n2 3 3\n", "output": ["31\n55\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 6\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["21\n24\n0\n"]}, {"input": "6 3\n0 -9 2 -1 4 -5\n1 5\n2 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["37\n40\n"]}, {"input": "2 1\n-1000000000 1010001000\n2 1\n2 1 2\n", "output": ["2010001000\n"]}, {"input": "6 4\n0 -9 2 -1 4 -3\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 2\n", "output": ["9\n26\n17\n"]}, {"input": "6 4\n0 -9 3 -1 2 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["5\n26\n0\n"]}, {"input": "6 4\n1 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["10\n32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 4\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 2\n", "output": ["1\n34\n"]}, {"input": "6 4\n0 -9 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["17\n35\n0\n"]}, {"input": "6 4\n-1 -9 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["10\n38\n0\n"]}, {"input": "6 4\n10 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 6\n", "output": ["0\n29\n8\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 6\n", "output": ["16\n0\n10\n"]}, {"input": "6 3\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n"]}, {"input": "6 4\n0 -12 4 0 14 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["28\n0\n16\n"]}, {"input": "6 4\n0 -3 2 -1 2 -12\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 3\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["29\n8\n0\n"]}, {"input": "6 4\n10 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["39\n27\n0\n"]}, {"input": "6 4\n10 -9 1 -1 4 -6\n1 5\n2 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["49\n32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 1\n", "output": ["9\n0\n25\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 3 6\n", "output": ["9\n13\n7\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 0\n2 1 2\n2 5 2\n", "output": ["16\n23\n22\n"]}, {"input": "6 4\n0 -14 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 1 3\n", "output": ["17\n45\n35\n"]}, {"input": "6 4\n0 -3 2 -1 3 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["0\n23\n0\n"]}, {"input": "6 4\n10 -9 1 -1 0 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 3\n", "output": ["11\n24\n"]}, {"input": "6 4\n10 -9 2 -1 6 -6\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["42\n0\n"]}, {"input": "6 4\n1 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -1\n2 1 2\n2 5 2\n", "output": ["4\n24\n22\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 2 3\n", "output": ["39\n42\n15\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 4\n2 4 3\n", "output": ["0\n4\n13\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 5\n2 3 6\n", "output": ["0\n5\n2\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 4 3\n", "output": ["9\n13\n21\n"]}, {"input": "6 4\n10 -9 2 -1 0 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 3 -3\n2 1 2\n2 3 3\n", "output": ["31\n31\n0\n"]}, {"input": "6 4\n0 -9 0 -1 4 -5\n1 6\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["28\n22\n0\n"]}, {"input": "6 4\n10 -25 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["47\n0\n"]}, {"input": "6 4\n10 -3 2 -1 2 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["0\n28\n0\n"]}, {"input": "6 4\n0 -9 2 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["37\n0\n23\n"]}, {"input": "6 4\n0 -9 4 1 0 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["1\n0\n13\n"]}, {"input": "6 4\n0 -9 3 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 3 3\n", "output": ["8\n12\n0\n"]}, {"input": "6 4\n0 -14 4 -1 8 -3\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["17\n25\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 1 5\n", "output": ["0\n7\n2\n"]}, {"input": "4 4\n2 -1350 110 3\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1460\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 2 -1 7 -6\n1 5\n1 4\n5 6\n4 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["10\n14\n24\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 2 -4\n2 1 2\n2 2 3\n", "output": ["28\n34\n10\n"]}, {"input": "6 3\n0 -17 2 -1 4 -5\n1 5\n3 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 1 4\n1 3 3\n", "output": ["23\n29\n"]}, {"input": "6 4\n0 -9 4 0 0 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 4 2\n2 2 3\n", "output": ["9\n9\n13\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n5 2\n2 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["9\n20\n13\n"]}, {"input": "6 4\n3 -2 2 -1 4 0\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 4\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["21\n0\n"]}, {"input": "6 3\n0 -17 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -6\n2 1 4\n1 3 3\n", "output": ["28\n15\n"]}, {"input": "6 4\n0 -8 0 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["26\n29\n14\n"]}, {"input": "6 3\n10 -21 2 -1 4 -6\n1 5\n5 4\n5 2\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["39\n67\n"]}, {"input": "6 4\n10 -9 2 -1 3 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 3 2\n1 4 -3\n2 1 2\n2 4 3\n", "output": ["37\n23\n"]}, {"input": "6 4\n0 -6 4 0 14 1\n1 6\n5 4\n5 6\n1 2\n6 3\n2 1 4\n1 1 -4\n2 1 2\n2 2 3\n", "output": ["30\n10\n20\n"]}, {"input": "6 3\n0 -17 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 2 4\n1 2 3\n", "output": ["9\n44\n"]}, {"input": "6 3\n10 -21 2 -1 4 -9\n1 4\n5 4\n5 6\n1 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["31\n33\n"]}, {"input": "6 3\n10 -21 2 -1 8 -9\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 2\n1 1 -3\n2 2 3\n2 3 3\n", "output": ["31\n63\n"]}, {"input": "6 3\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 5\n0 2 3\n", "output": ["9\n7\n"]}, {"input": "6 4\n0 -9 3 -1 2 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 6\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n26\n0\n"]}, {"input": "6 4\n1 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 1 2\n2 3 3\n", "output": ["10\n35\n0\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -4\n2 1 2\n1 3 3\n", "output": ["31\n"]}, {"input": "6 4\n-1 -9 2 -1 0 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["2\n30\n0\n"]}, {"input": "6 4\n10 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 3 -3\n2 1 2\n2 3 6\n", "output": ["0\n29\n9\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 6\n", "output": ["16\n0\n15\n"]}, {"input": "6 3\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 1\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["0\n0\n"]}, {"input": "6 4\n4 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["33\n27\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 3 2\n2 3 1\n", "output": ["9\n23\n25\n"]}, {"input": "6 4\n0 -1 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 0\n2 1 2\n2 5 2\n", "output": ["16\n15\n14\n"]}, {"input": "6 4\n19 -9 1 -1 0 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 3\n", "output": ["20\n24\n"]}, {"input": "6 4\n0 -9 2 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 2 3\n", "output": ["39\n42\n13\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 5 3\n", "output": ["9\n13\n16\n"]}, {"input": "6 4\n-1 -9 2 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 5\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["5\n0\n0\n"]}, {"input": "6 4\n10 -25 2 -1 4 -11\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["57\n0\n"]}, {"input": "6 4\n0 -9 2 0 8 -4\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["33\n0\n19\n"]}, {"input": "6 4\n0 -9 4 1 -1 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["3\n0\n13\n"]}, {"input": "4 4\n2 -2609 110 3\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["2719\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 3 -1 2 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 6\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["9\n26\n15\n"]}, {"input": "6 4\n13 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 3 -3\n2 1 2\n2 2 3\n", "output": ["31\n24\n"]}, {"input": "6 4\n1 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 1 2\n2 2 3\n", "output": ["10\n35\n25\n"]}, {"input": "6 4\n-1 -9 2 -1 0 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["21\n30\n0\n"]}, {"input": "6 4\n10 -3 2 -1 2 -6\n1 4\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 3 -3\n2 1 2\n2 3 6\n", "output": ["0\n31\n9\n"]}, {"input": "6 4\n4 -9 4 -1 4 -6\n1 2\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["13\n37\n0\n"]}, {"input": "6 4\n1 -1 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 0\n2 1 2\n2 5 2\n", "output": ["17\n15\n14\n"]}, {"input": "6 4\n0 -10 3 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -4\n2 1 4\n2 3 3\n", "output": ["21\n12\n0\n"]}, {"input": "6 4\n0 -17 2 -1 4 -16\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -6\n2 1 4\n1 3 3\n", "output": ["42\n15\n"]}, {"input": "6 4\n10 -9 2 -1 3 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n1 3 2\n1 4 -3\n2 1 2\n2 4 4\n", "output": ["27\n0\n"]}, {"input": "6 4\n-1 -9 2 -1 0 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["21\n30\n20\n"]}, {"input": "6 3\n0 -7 4 -1 10 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["21\n42\n"]}, {"input": "6 4\n4 -9 4 -1 4 -6\n1 2\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -2\n2 1 3\n2 3 3\n", "output": ["13\n36\n0\n"]}, {"input": "6 4\n19 -3 1 -1 0 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 1 3\n", "output": ["20\n18\n"]}, {"input": "6 4\n0 -10 3 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -4\n2 1 4\n2 1 3\n", "output": ["21\n12\n25\n"]}, {"input": "6 4\n10 -9 2 -1 3 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 3 2\n1 4 -3\n2 1 2\n2 4 4\n", "output": ["13\n27\n0\n"]}, {"input": "6 3\n0 -7 4 -1 10 -3\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["21\n36\n"]}, {"input": "6 4\n0 -16 2 -1 4 -23\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -6\n2 1 4\n1 3 3\n", "output": ["56\n15\n"]}, {"input": "6 4\n10 -9 2 -1 3 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 3 2\n1 4 -3\n2 2 2\n2 4 4\n", "output": ["13\n0\n0\n"]}, {"input": "6 4\n10 -9 2 -1 3 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 3 2\n1 4 -3\n1 2 2\n2 4 4\n", "output": ["13\n0\n"]}, {"input": "4 4\n3 -1000 100 3\n2 1\n3 2\n4 1\n2 1 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["2103\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 2\n", "output": ["9\n12\n23\n"]}, {"input": "6 3\n0 -5 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n1 1 4\n2 2 3\n", "output": ["9\n"]}, {"input": "6 4\n10 -9 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -5\n2 1 2\n2 3 3\n", "output": ["0\n31\n0\n"]}, {"input": "6 4\n0 -9 4 0 11 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["22\n0\n13\n"]}, {"input": "6 4\n0 -3 2 -1 2 -12\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -5\n2 1 2\n2 3 3\n", "output": ["0\n36\n0\n"]}, {"input": "6 4\n10 -1 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["31\n25\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 4\n", "output": ["9\n0\n23\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 5\n1 1 -4\n2 1 4\n2 3 3\n", "output": ["4\n13\n0\n"]}, {"input": "4 4\n2 -1000 100 3\n2 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 2 -1000000000\n2 1 4\n", "output": ["1100\n0\n2000000005\n"]}, {"input": "6 4\n0 -4 2 -1 4 -2\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n19\n0\n"]}], "task_id": "codecontest/8", "prompt": "Chanek Jones is back, aiding his long-lost relative Indiana Jones, to discover a secret treasure within a maze buried beneath a desert full of illusions. The map of the labyrinth forms a tree with n rooms numbered from 1 to n and n - 1 tunnels connecting them, and it is possible to travel between each pair of rooms through several tunnels. The i-th room (1 \u2264 i \u2264 n) has a_i illusion rate. To journey from the x-th room to the y-th room, there must exist a tunnel between x and y, and it takes max(|a_x + a_y|, |a_x - a_y|) energy. |z| denotes the absolute value of z. To deter grave robbers, the maze can alter the illusion rate of any room in it. Chanek and Indiana would ask q queries. There are two types of queries to be processed: * 1\\ u\\ c \u2014 The illusion rate of the x-th room is altered to c (1 \u2264 u \u2264 n, 0 \u2264 |c| \u2264 10^9). * 2\\ u\\ v \u2014 Chanek and Indiana ask you the minimum sum of energy necessary to retrieve the secret treasure at room v if they start at room u (1 \u2264 u, v \u2264 n). Your task is to implement an efficient algorithm to handle both types of queries. Assist them, so you can acquire a portion of the treasure! Optimize your solution to ensure it manages up to 100,000 queries efficiently.\n\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 |a_i| \u2264 10^9) \u2014 inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 \u2264 s_i, t_i \u2264 n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\nExample\n\nInput\n\n\n6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n\n\nOutput\n\n\n39\n32\n0\n\nNote\n\n<image>\n\nIn the first query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|10 + 4|, |10 - 4|) = 14 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\nIn total, it takes 39 energy.\n\nIn the second query, the illusion rate of the 1-st room changes from 10 to -3.\n\nIn the third query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|-3 + 4|, |-3 - 4|) = 7 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\n\n\nNow, it takes 32 energy.", "repair_prompt": ["Chanek Jones is back, aiding his long-lost relative Indiana Jones, to discover a secret treasure within a maze buried beneath a desert full of illusions. The map of the labyrinth forms a tree with n rooms numbered from 1 to n and n - 1 tunnels connecting them, and it is possible to travel between each pair of rooms through several tunnels. The i-th room (1 \u2264 i \u2264 n) has a_i illusion rate. To journey from the x-th room to the y-th room, there must exist a tunnel between x and y, and it takes max(|a_x + a_y|, |a_x - a_y|) energy. |z| denotes the absolute value of z. To deter grave robbers, the maze can alter the illusion rate of any room in it. Chanek and Indiana would ask q queries. There are two types of queries to be processed: * 1\\ u\\ c \u2014 The illusion rate of the x-th room is altered to c (1 \u2264 u \u2264 n, 0 \u2264 |c| \u2264 10^9). * 2\\ u\\ v \u2014 Chanek and Indiana ask you the minimum sum of energy necessary to retrieve the secret treasure at room v if they start at room u (1 \u2264 u, v \u2264 n). Your task is to implement an efficient algorithm to handle both types of queries. Assist them, so you can acquire a portion of the treasure! Optimize your solution to ensure it manages up to 100,000 queries efficiently.\n\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 |a_i| \u2264 10^9) \u2014 inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 \u2264 s_i, t_i \u2264 n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n\n\nOutput\n\n\n39\n32\n0\n\nNote\n\n<image>\n\nIn the first query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|10 + 4|, |10 - 4|) = 14 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\nIn total, it takes 39 energy.\n\nIn the second query, the illusion rate of the 1-st room changes from 10 to -3.\n\nIn the third query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|-3 + 4|, |-3 - 4|) = 7 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\n\n\nNow, it takes 32 energy.\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport sys\n\n# Assuming a simple graph representation using adjacency list\nGraph = List[List[int]]\n\n# Function to update the illusion rate of a room\ndef update_illusion_rate(room_index: int, new_rate: int) -> None:\n    # Update the illusion rate of the room\n    illusion_rates[room_index - 1] = new_rate\n\n# Function to calculate the minimum energy required to travel between two rooms\ndef calculate_minimum_energy(start_room: int, end_room: int) -> int:\n    # Perform a depth-first search (DFS) to find the minimum energy\n    visited = [False] * n\n    stack = [(start_room, sys.maxsize)]\n    min_energy = sys.maxsize\n\n    while stack:\n        current_room, current_min_energy = stack.pop()\n        visited[current_room - 1] = True\n\n        if current_room == end_room:\n            min_energy = min(min_energy, current_min_energy)\n            continue\n\n        for neighbor in graph[current_room - 1]:\n            if not visited[neighbor - 1]:\n                next_min_energy = max(abs(illusion_rates[current_room - 1] + illusion_rates[neighbor - 1]), abs(illusion_rates[current_room - 1] - illusion_rates[neighbor - 1]))\n                stack.append((neighbor, min(current_min_energy, next_min_energy)))\n\n    return min_energy\n\n# Read input\nn, q = map(int, sys.stdin.readline().split())\nillusion_rates = list(map(int, sys.stdin.readline().split()))\nedges = [list(map(int, sys.stdin.readline().split())) for _ in range(n - 1)]\n\n# Build the graph\ngraph: Graph = [[] for _ in range(n)]\nfor s, t in edges:\n    graph[s - 1].append(t)\n    graph[t - 1].append(s)\n\n# Process queries\nfor _ in range(q):\n    query = list(map(int, sys.stdin.readline().split()))\n    if query[0] == 1:\n        u, c = query[1], query[2]\n        update_illusion_rate(u, c)\n    elif query[0] == 2:\n        u, v = query[1], query[2]\n        result = calculate_minimum_energy(u, v)\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport sys\n\n# Read input from stdin\ninput = sys.stdin.readline\n\n# Initialize the graph as an adjacency list\ngraph: List[List[int]] = []\n\n# Initialize the illusion rates of the rooms\nillusion_rates: List[int] = []\n\n# Initialize the energy matrix to store the minimum energy required for travel between rooms\nenergy_matrix: List[List[int]] = []\n\n# Function to update the illusion rate of a room\ndef update_illusion_rate(room: int, new_rate: int) -> None:\n    illusion_rates[room - 1] = new_rate\n\n# Function to calculate the minimum energy required for travel between two rooms\ndef calculate_minimum_energy(start_room: int, end_room: int) -> int:\n    # Use DFS to traverse the graph and calculate the energy\n    stack = [(start_room, -1, 0)]\n    visited = set()\n    \n    while stack:\n        current_room, parent, current_energy = stack.pop()\n        \n        if current_room == end_room:\n            return current_energy\n        \n        if current_room in visited:\n            continue\n        \n        visited.add(current_room)\n        \n        for neighbor in graph[current_room]:\n            if neighbor != parent:\n                next_energy = max(abs(illusion_rates[current_room - 1] + illusion_rates[neighbor - 1]), abs(illusion_rates[current_room - 1] - illusion_rates[neighbor - 1]))\n                stack.append((neighbor, current_room, current_energy + next_energy))\n    \n    return -1  # If no path is found, which should not happen given the problem constraints\n\n# Read the number of rooms and queries\nn, q = map(int, input().split())\n\n# Read the initial illusion rates of the rooms\nillusion_rates = list(map(int, input().split()))\n\n# Initialize the graph with empty lists\ngraph = [[] for _ in range(n)]\n\n# Read the edges of the tree\nfor _ in range(n - 1):\n    s, t = map(int, input().split())\n    graph[s - 1].append(t - 1)\n    graph[t - 1].append(s - 1)\n\n# Process the queries\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        update_illusion_rate(query[1], query[2])\n    elif query[0] == 2:\n        result = calculate_minimum_energy(query[1], query[2])\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport sys\n\n# Initialize the tree structure for the maze\ntree: List[List[int]] = []\n# Store the illusion rates of each room\nillusion_rates: List[int] = []\n\ndef update_illusion_rate(room_index: int, new_rate: int) -> None:\n    \"\"\"\n    Update the illusion rate of the specified room.\n    \n    Args:\n        room_index (int): The index of the room to update.\n        new_rate (int): The new illusion rate to set.\n    \"\"\"\n    illusion_rates[room_index - 1] = new_rate\n\ndef calculate_energy(start_room: int, end_room: int) -> int:\n    \"\"\"\n    Calculate the minimum sum of energy required to travel from the start room to the end room.\n    \n    Args:\n        start_room (int): The starting room number.\n        end_room (int): The ending room number.\n        \n    Returns:\n        int: The minimum sum of energy needed.\n    \"\"\"\n    def dfs(node: int, parent: int, target: int) -> Tuple[bool, int]:\n        \"\"\"\n        Depth-first search to find the path and calculate the energy.\n        \n        Args:\n            node (int): The current room number.\n            parent (int): The parent room number.\n            target (int): The target room number.\n            \n        Returns:\n            Tuple[bool, int]: A tuple where the first element is a boolean indicating if the target is found,\n                              and the second element is the energy required to reach the target.\n        \"\"\"\n        if node == target:\n            return (True, 0)\n        \n        for neighbor in tree[node]:\n            if neighbor != parent:\n                found, energy = dfs(neighbor, node, target)\n                if found:\n                    return (True, energy + max(abs(illusion_rates[node - 1] + illusion_rates[neighbor - 1]),\n                                              abs(illusion_rates[node - 1] - illusion_rates[neighbor - 1])))\n        \n        return (False, 0)\n    \n    found, energy = dfs(start_room, -1, end_room)\n    return energy\n\n# Read input from stdin\nn, q = map(int, sys.stdin.readline().split())\nillusion_rates = list(map(int, sys.stdin.readline().split()))\ntree = [[] for _ in range(n + 1)]\n\nfor _ in range(n - 1):\n    s, t = map(int, sys.stdin.readline().split())\n    tree[s].append(t)\n    tree[t].append(s)\n\n# Process queries\nfor _ in range(q):\n    query = list(map(int, sys.stdin.readline().split()))\n    if query[0] == 1:\n        update_illusion_rate(query[1], query[2])\n    elif query[0] == 2:\n        print(calculate_energy(query[1], query[2]))\n", "from typing import List\n## main.py\n\nimport sys\nfrom typing import List, Tuple\nimport networkx as nx\n\n# Function to update the illusion rate of a room\ndef update_illusion_rate(room: int, new_rate: int) -> None:\n    a_values[room - 1] = new_rate\n\n# Function to calculate the minimum energy required to travel between two rooms\ndef min_energy_required(start: int, end: int) -> int:\n    # Create a graph from the tunnels\n    G = nx.Graph()\n    for s, t in tunnels:\n        G.add_edge(s, t)\n    \n    # Calculate the shortest path in terms of energy\n    path = nx.shortest_path(G, source=start, target=end)\n    energy = 0\n    for i in range(len(path) - 1):\n        energy += max(abs(a_values[path[i] - 1] + a_values[path[i + 1] - 1]), abs(a_values[path[i] - 1] - a_values[path[i + 1] - 1]))\n    return energy\n\n# Read input\nn, q = map(int, sys.stdin.readline().split())\na_values = list(map(int, sys.stdin.readline().split()))\ntunnels = [list(map(int, sys.stdin.readline().split())) for _ in range(n - 1)]\ntype_query = [list(map(int, sys.stdin.readline().split())) for _ in range(q)]\n\n# Process queries\nfor query in type_query:\n    if query[0] == 1:\n        update_illusion_rate(query[1], query[2])\n    elif query[0] == 2:\n        result = min_energy_required(query[1], query[2])\n        print(result)\n", "from typing import List\n## main.py\n\nimport sys\nimport networkx as nx\n\n# Initialize the graph\ngraph = nx.Graph()\n\n# Function to change the illusion rate of a room\ndef change_illusion_rate(room_index: int, new_rate: int) -> None:\n    global a_values\n    a_values[room_index] = new_rate\n    build_graph()\n\n# Function to query the minimum energy required to travel between two rooms\ndef query_minimum_energy(start_room: int, end_room: int) -> int:\n    if not graph.has_node(start_room):\n        build_graph()\n    \n    # Calculate the shortest path in terms of energy\n    shortest_path = nx.dijkstra_path(graph, source=start_room, target=end_room, weight='weight')\n    min_energy = 0\n    for i in range(len(shortest_path) - 1):\n        min_energy += max(abs(a_values[shortest_path[i]] + a_values[shortest_path[i + 1]]), abs(a_values[shortest_path[i]] - a_values[shortest_path[i + 1]]))\n    \n    return min_energy\n\n# Function to build the graph from the given edges\ndef build_graph() -> None:\n    global graph, edges, a_values\n    graph.clear()\n    graph.add_nodes_from(range(n))\n    for s, t in edges:\n        graph.add_edge(s - 1, t - 1, weight=max(abs(a_values[s - 1] + a_values[t - 1]), abs(a_values[s - 1] - a_values[t - 1])))\n\n# Read input\nn, q = map(int, sys.stdin.readline().split())\na_values = list(map(int, sys.stdin.readline().split()))\nedges = [list(map(int, sys.stdin.readline().split())) for _ in range(n - 1)]\n\n# Process queries\nfor _ in range(q):\n    query_type, *params = map(int, sys.stdin.readline().split())\n    if query_type == 1:\n        change_illusion_rate(params[0] - 1, params[1])\n    elif query_type == 2:\n        result = query_minimum_energy(params[0] - 1, params[1] - 1)\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport sys\n\n# Function to update the illusion rate of a room\ndef update_illusion_rate(room: int, new_rate: int) -> None:\n    illusion_rates[room - 1] = new_rate\n\n# Function to calculate the minimum energy required to travel between rooms\ndef calculate_minimum_energy(start: int, end: int) -> int:\n    def dfs(node: int, parent: int) -> Tuple[int, int]:\n        min_energy = sys.maxsize\n        max_abs_value = 0\n        for neighbor in tree[node]:\n            if neighbor != parent:\n                energy, abs_value = dfs(neighbor, node)\n                min_energy = min(min_energy, energy + abs_value)\n                max_abs_value = max(max_abs_value, abs_value)\n        current_abs_value = abs(illusion_rates[node - 1])\n        return (min_energy + max(current_abs_value, max_abs_value), current_abs_value)\n\n    _, min_energy = dfs(start, -1)\n    return min_energy\n\n# Read input\nn, q = map(int, sys.stdin.readline().split())\nillusion_rates = list(map(int, sys.stdin.readline().split()))\nedges = [list(map(int, sys.stdin.readline().split())) for _ in range(n - 1)]\n\n# Build the tree\ntree = [[] for _ in range(n + 1)]\nfor s, t in edges:\n    tree[s].append(t)\n    tree[t].append(s)\n\n# Process queries\nfor _ in range(q):\n    query = list(map(int, sys.stdin.readline().split()))\n    if query[0] == 1:\n        update_illusion_rate(query[1], query[2])\n    elif query[0] == 2:\n        result = calculate_minimum_energy(query[1], query[2])\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport sys\n\n# Assuming a tree is represented as an adjacency list\nTree = List[List[int]]\n\n# Function to build the tree from the given edges\ndef build_tree(n: int, edges: List[Tuple[int, int]]) -> Tree:\n    tree = [[] for _ in range(n + 1)]\n    for s, t in edges:\n        tree[s].append(t)\n        tree[t].append(s)\n    return tree\n\n# Function to calculate the minimum energy required for travel between rooms\ndef min_energy_required(start_room: int, end_room: int, tree: Tree, a: List[int]) -> int:\n    # This is a placeholder for the actual implementation\n    # We need to use a graph traversal algorithm (like BFS or DFS) to find the shortest path\n    # and then calculate the energy based on the given formula\n    # For simplicity, let's assume we have a function to calculate the energy between two rooms\n    # This is a placeholder for the actual energy calculation\n    def calculate_energy(x: int, y: int) -> int:\n        return max(abs(a[x - 1] + a[y - 1]), abs(a[x - 1] - a[y - 1]))\n    \n    # Implementing a simple BFS to find the shortest path\n    from collections import deque\n    visited = [False] * (len(tree))\n    queue = deque([(start_room, 0)])  # (room, energy)\n    visited[start_room] = True\n    \n    while queue:\n        current_room, current_energy = queue.popleft()\n        if current_room == end_room:\n            return current_energy\n        for neighbor in tree[current_room]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                queue.append((neighbor, current_energy + calculate_energy(current_room, neighbor)))\n    \n    return -1  # If no path is found\n\n# Function to change the illusion rate of a room\ndef change_illusion_rate(room_index: int, new_rate: int) -> None:\n    # This is a placeholder for the actual implementation\n    # We need to update the illusion rate of the specified room\n    # For simplicity, let's assume we have a list to store the illusion rates\n    global a\n    a[room_index - 1] = new_rate\n\n# Read input from stdin\nn, q = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\nedges = [tuple(map(int, sys.stdin.readline().split())) for _ in range(n - 1)]\ntree = build_tree(n, edges)\n\n# Process queries\nfor _ in range(q):\n    query = list(map(int, sys.stdin.readline().split()))\n    if query[0] == 1:\n        change_illusion_rate(query[1], query[2])\n    elif query[0] == 2:\n        result = min_energy_required(query[1], query[2], tree, a)\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport sys\n\n# Assuming a graph representation using adjacency list\nGraph = List[List[int]]\n\n# Function to update the illusion rate of a room\ndef update_illusion_rate(room_index: int, new_rate: int) -> None:\n    illusion_rates[room_index - 1] = new_rate\n\n# Function to calculate the minimum energy required to travel between two rooms\ndef calculate_minimum_energy(start_room: int, end_room: int) -> int:\n    visited = [False] * n\n    stack = [(start_room, 0)]\n    min_energy = sys.maxsize\n\n    while stack:\n        current_room, current_energy = stack.pop()\n        if current_room == end_room:\n            min_energy = min(min_energy, current_energy)\n            continue\n        visited[current_room - 1] = True\n        for neighbor in graph[current_room - 1]:\n            if not visited[neighbor - 1]:\n                next_energy = max(abs(illusion_rates[current_room - 1] + illusion_rates[neighbor - 1]), abs(illusion_rates[current_room - 1] - illusion_rates[neighbor - 1]))\n                stack.append((neighbor, current_energy + next_energy))\n\n    return min_energy\n\n# Read input\nn, q = map(int, sys.stdin.readline().split())\nillusion_rates = list(map(int, sys.stdin.readline().split()))\ngraph: Graph = [[] for _ in range(n)]\n\n# Build the graph from the input tunnels\nfor _ in range(n - 1):\n    s_i, t_i = map(int, sys.stdin.readline().split())\n    graph[s_i - 1].append(t_i)\n    graph[t_i - 1].append(s_i)\n\n# Process queries\nfor _ in range(q):\n    query = list(map(int, sys.stdin.readline().split()))\n    if query[0] == 1:\n        update_illusion_rate(query[1], query[2])\n    elif query[0] == 2:\n        result = calculate_minimum_energy(query[1], query[2])\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport sys\n\n# Read input from stdin\ninput = sys.stdin.readline\n\n# Define the Node class to represent rooms in the tree\nclass Node:\n    def __init__(self, index: int, illusion_rate: int):\n        self.index = index\n        self.illusion_rate = illusion_rate\n        self.children: List['Node'] = []\n        self.energy_cache: dict = {}\n\n# Function to update the illusion rate of a room\ndef update_illusion_rate(room_index: int, new_rate: int) -> None:\n    current_node = nodes_map[room_index]\n    current_node.illusion_rate = new_rate\n\n# Function to calculate the minimum energy required for travel between rooms using DFS\ndef calculate_minimum_energy(start_room: int, end_room: int) -> int:\n    if start_room == end_room:\n        return 0\n\n    if end_room in nodes_map[start_room].energy_cache:\n        return nodes_map[start_room].energy_cache[end_room]\n\n    stack = [(nodes_map[start_room], 0)]\n    visited = set()\n\n    while stack:\n        current_node, current_energy = stack.pop()\n        if current_node.index == end_room:\n            nodes_map[start_room].energy_cache[end_room] = current_energy + abs(nodes_map[start_room].illusion_rate - nodes_map[end_room].illusion_rate)\n            return nodes_map[start_room].energy_cache[end_room]\n\n        if current_node.index not in visited:\n            visited.add(current_node.index)\n            for child in current_node.children:\n                if child.index not in visited:\n                    stack.append((child, current_energy + abs(current_node.illusion_rate - child.illusion_rate)))\n\n    return -1  # This should never be reached if the graph is guaranteed to be a tree\n\n# Read the number of rooms and queries\nn, q = map(int, input().split())\n\n# Read the initial illusion rates of each room\na_values = list(map(int, input().split()))\n\n# Create nodes and map them to their indices\nnodes_map = {i + 1: Node(i + 1, a_values[i]) for i in range(n)}\n\n# Read the tunnels and build the tree\nfor _ in range(n - 1):\n    s_i, t_i = map(int, input().split())\n    nodes_map[s_i].children.append(nodes_map[t_i])\n    nodes_map[t_i].children.append(nodes_map[s_i])\n\n# Process the queries\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        update_illusion_rate(query[1], query[2])\n    elif query[0] == 2:\n        result = calculate_minimum_energy(query[1], query[2])\n        print(result)\n", "from typing import List\n## main.py\n\nimport sys\nimport heapq\n\n# Read input from stdin\ninput = sys.stdin.readline\n\n# Initialize global variables\nn, q = map(int, input().split())\na_values = list(map(int, input().split()))\ntunnels = [[] for _ in range(n + 1)]\n\n# Build the tree (graph) from the tunnels\nfor _ in range(n - 1):\n    s_i, t_i = map(int, input().split())\n    tunnels[s_i].append(t_i)\n    tunnels[t_i].append(s_i)\n\n# Function to update the illusion rate of a room\ndef update_illusion_rate(room_index: int, new_rate: int) -> None:\n    a_values[room_index - 1] = new_rate\n\n# Function to calculate the minimum energy to travel between two rooms using Dijkstra's algorithm\ndef min_energy_to_travel(start_room: int, end_room: int) -> int:\n    # Initialize distances with infinity\n    distances = [float('inf')] * (n + 1)\n    distances[start_room] = 0\n    \n    # Use a priority queue to explore the rooms\n    pq = [(0, start_room)]\n    \n    while pq:\n        current_distance, current_room = heapq.heappop(pq)\n        \n        # If we reached the end room, return the distance\n        if current_room == end_room:\n            return current_distance\n        \n        # Explore neighbors\n        for neighbor in tunnels[current_room]:\n            next_energy = max(abs(a_values[current_room - 1] + a_values[neighbor - 1]), abs(a_values[current_room - 1] - a_values[neighbor - 1]))\n            new_distance = current_distance + next_energy\n            \n            # If we found a shorter path, update the distance and push to the priority queue\n            if new_distance < distances[neighbor]:\n                distances[neighbor] = new_distance\n                heapq.heappush(pq, (new_distance, neighbor))\n    \n    return -1  # If no path is found, which should not happen given the tree structure\n\n# Process queries\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        update_illusion_rate(query[1], query[2])\n    elif query[0] == 2:\n        result = min_energy_to_travel(query[1], query[2])\n        print(result)\n"], "plans": ["requirement analysis:\nThe project requires implementing a solution to handle two types of queries efficiently: updating the illusion rate of a room and calculating the minimum energy required to travel between two rooms. The solution must be optimized to handle up to 100,000 queries, making it suitable for a large number of users.\nrequirement pool:\n- Implement a tree data structure to represent the maze and tunnels.\n- Develop an algorithm to calculate the minimum energy required to travel between two rooms.\n- Create a function to update the illusion rate of a room.\n- Ensure the solution can handle up to 100,000 queries efficiently.\n- Implement input/output handling to read from standard input and write to standard output.\nTo address the requirements, we will use a Python-based solution that leverages a tree data structure to represent the maze and tunnels. We will implement an algorithm to calculate the minimum energy required to travel between two rooms using a depth-first search (DFS) approach. Additionally, we will create a function to update the illusion rate of a room. The solution will be optimized to handle up to 100,000 queries efficiently by utilizing efficient data structures and algorithms.\n", "requirement analysis:\nThe project requires implementing a solution to handle two types of queries efficiently. The first type involves altering the illusion rate of a room, and the second type involves calculating the minimum sum of energy required to travel from one room to another. The solution must be optimized to handle up to 100,000 queries efficiently.\nrequirement pool:\n- Implement a data structure to represent the tree structure of the maze.\n- Develop an algorithm to calculate the minimum energy required for travel between rooms.\n- Create a function to handle queries for altering the illusion rate of a room.\n- Ensure the solution can handle up to 100,000 queries efficiently.\nTo efficiently handle the given requirements, we will use a combination of a tree data structure and a graph traversal algorithm. The tree structure will represent the maze, and we will use a depth-first search (DFS) algorithm to calculate the minimum energy required for travel between rooms. We will also implement a function to handle queries for altering the illusion rate of a room.\n", "requirement analysis:\nThe project requires implementing a solution to handle two types of queries efficiently: updating the illusion rate of a room and calculating the minimum energy required to travel between two rooms. The solution must be optimized to handle up to 100,000 queries, making it suitable for a large-scale application.\nrequirement pool:\n- Implement a tree data structure to represent the maze and tunnels.\n- Develop a function to calculate the energy required to travel between two rooms based on their illusion rates.\n- Create a mechanism to update the illusion rate of a room.\n- Ensure the solution can handle up to 100,000 queries efficiently.\nTo efficiently handle the requirements, we will use a tree data structure to represent the maze and tunnels. We will also implement a function to calculate the energy required to travel between two rooms based on their illusion rates. To update the illusion rate of a room, we will create a mechanism that allows for quick updates. The solution will be optimized to handle up to 100,000 queries efficiently using appropriate data structures and algorithms.\n", "requirement analysis:\nThe project requires implementing a solution to handle two types of queries efficiently. The first type involves changing the illusion rate of a room, and the second type involves finding the minimum sum of energy required to travel from one room to another. Given the constraints of up to 100,000 queries, the solution must be optimized to handle such a large number of requests.\nrequirement pool:\n- Implement a data structure to represent the tree structure of the maze.\n- Develop an algorithm to calculate the minimum energy required for travel between rooms.\n- Ensure the system can handle updates to the illusion rates of rooms.\n- Optimize the algorithm for efficiency, especially for handling large numbers of queries.\n- Design a user-friendly interface for easy interaction with the system.\nTo efficiently handle the requirements, we will use a combination of a tree data structure and a graph traversal algorithm. The tree structure will represent the maze, and the graph traversal algorithm will calculate the minimum energy required for travel between rooms. We will use a library like NetworkX for graph operations and NumPy for handling numerical operations efficiently.\n", "requirement analysis:\nThe project requires implementing a solution to handle two types of queries efficiently. The first type involves changing the illusion rate of a room, and the second type involves finding the minimum sum of energy required to travel from one room to another. The solution must be optimized to handle up to 100,000 queries efficiently.\nrequirement pool:\n- Implement a data structure to represent the tree structure of the maze.\n- Develop an algorithm to calculate the minimum energy required for travel between rooms.\n- Create a function to handle queries for changing the illusion rate of a room.\n- Ensure the solution is optimized to handle up to 100,000 queries efficiently.\n- Design a user-friendly interface for easy interaction.\nTo efficiently handle the given requirements, we will use a combination of a tree data structure and a graph traversal algorithm. The tree structure will represent the maze, and the graph traversal algorithm will calculate the minimum energy required for travel between rooms. We will use a library like NetworkX for graph operations and NumPy for handling numerical operations efficiently.\n", "requirement analysis:\nThe project requires implementing a solution to handle two types of queries efficiently: updating the illusion rate of a room and calculating the minimum energy required to travel between two rooms. The solution must be optimized to handle up to 100,000 queries, making it suitable for a large number of users.\nrequirement pool:\n- Implement a data structure to represent the tree structure of the maze.\n- Develop an algorithm to calculate the minimum energy required to travel between two rooms.\n- Ensure the system can handle updates to the illusion rates of rooms.\n- Optimize the solution to handle up to 100,000 queries efficiently.\nTo efficiently handle the queries, we will use a combination of a tree data structure and dynamic programming to calculate the minimum energy required to travel between rooms. We will also use a list to store the illusion rates of the rooms. For the first type of query, we will update the illusion rate of the specified room. For the second type of query, we will use a depth-first search (DFS) algorithm to calculate the minimum energy required to travel from the starting room to the destination room.\n", "requirement analysis:\nThe project requires implementing a solution to handle two types of queries efficiently. The first type involves changing the illusion rate of a room, and the second type involves finding the minimum sum of energy required to travel from one room to another. The solution must be optimized to handle up to 100,000 queries efficiently.\nrequirement pool:\n- Implement a data structure to represent the tree structure of the maze.\n- Develop an algorithm to calculate the minimum energy required for travel between rooms.\n- Create a function to handle queries for changing the illusion rate of a room.\n- Ensure the solution can handle up to 100,000 queries efficiently.\n- Design a user-friendly interface for input and output.\nTo efficiently handle the given requirements, we will use a combination of a tree data structure and dynamic programming to calculate the minimum energy required for travel between rooms. We will also implement a function to handle queries for changing the illusion rate of a room. The solution will be optimized to handle up to 100,000 queries efficiently using Python.\n", "requirement analysis:\nThe project requires implementing a solution that can handle up to 100,000 queries efficiently. The solution must be able to handle both types of queries: updating the illusion rate of a room and calculating the minimum energy required to travel between two rooms. The solution should be optimized to handle large inputs and ensure fast response times.\nrequirement pool:\n- Implement a data structure to represent the tree structure of the maze.\n- Develop an algorithm to calculate the minimum energy required to travel between two rooms.\n- Create a function to update the illusion rate of a room.\n- Ensure the solution is optimized for handling large inputs and fast response times.\n- Design a user-friendly interface for easy interaction.\nTo efficiently handle the given requirements, we will use a combination of a tree data structure and a graph traversal algorithm. The tree structure will represent the maze, and we will use a depth-first search (DFS) algorithm to calculate the minimum energy required to travel between two rooms. We will also implement a function to update the illusion rate of a room.\n", "requirement analysis:\nThe project requires implementing a solution to handle two types of queries efficiently. The first type involves altering the illusion rate of a room, and the second type involves calculating the minimum sum of energy required to travel from one room to another. The solution must be optimized to handle up to 100,000 queries efficiently.\nrequirement pool:\n- Implement a data structure to represent the tree structure of the maze.\n- Develop an algorithm to calculate the minimum energy required for travel between rooms.\n- Create a function to handle queries for altering the illusion rate of a room.\n- Ensure the solution can handle up to 100,000 queries efficiently.\nTo efficiently handle the given requirements, we will use a combination of a tree data structure and a graph traversal algorithm. The tree structure will represent the maze, and we will use a depth-first search (DFS) algorithm to calculate the minimum energy required for travel between rooms. We will also implement a function to handle queries for altering the illusion rate of a room.\n", "requirement analysis:\nThe project requires implementing a solution to handle two types of queries efficiently. The first type involves changing the illusion rate of a room, and the second type involves finding the minimum sum of energy required to travel from one room to another. Given the constraints of up to 100,000 queries, the solution must be optimized to handle such a large number of requests.\nrequirement pool:\n- Implement a data structure to represent the tree structure of the maze.\n- Develop an algorithm to calculate the minimum energy required for travel between rooms.\n- Ensure the system can handle updates to the illusion rates of rooms.\n- Optimize the solution to manage up to 100,000 queries efficiently.\nTo efficiently handle the queries, we will use a combination of a tree data structure and a graph traversal algorithm. The tree structure will represent the maze, and we will use a depth-first search (DFS) algorithm to calculate the minimum energy required for travel between rooms. We will also use a dynamic data structure to manage the illusion rates of the rooms, allowing for efficient updates.\n"], "scores": [], "pass_results": [true, true, false, true, true, false, true, false, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 6, "round": 120, "examples": "\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 |a_i| \u2264 10^9) \u2014 inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 \u2264 s_i, t_i \u2264 n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\nExample\n\nInput\n\n\n6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n\n\nOutput\n\n\n39\n32\n0\n\nNote\n\n<image>\n\nIn the first query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|10 + 4|, |10 - 4|) = 14 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\nIn total, it takes 39 energy.\n\nIn the second query, the illusion rate of the 1-st room changes from 10 to -3.\n\nIn the third query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|-3 + 4|, |-3 - 4|) = 7 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\n\n\nNow, it takes 32 energy.", "mutate_method": "rephrase_one", "parent_index": 101}
