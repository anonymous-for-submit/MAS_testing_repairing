{"name": "1591_A. Life of a Flower", "description": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "tags": ["implementation"], "difficulty": 7, "id": 1591, "sample_io": [{"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}], "test_list": [{"input": "1\n10\n1 1 1 1 1 1 1 1 1 1\n", "output": ["47\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n7\n3\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 0\n", "output": ["33\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 1\n", "output": ["29\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n-1\n8\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 0 1 1 1 1 1\n", "output": ["24\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["7\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n12\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n7\n8\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["7\n-1\n8\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 0 1 1\n", "output": ["20\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["12\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["-1\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["12\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 1 1 1\n1\n1\n", "output": ["3\n7\n12\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n3\n17\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n7\n8\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 0\n", "output": ["28\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n7\n17\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["2\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["7\n-1\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n3\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n1\n", "output": ["3\n7\n3\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["12\n12\n-1\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n3\n12\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 0 1\n", "output": ["15\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n1\n", "output": ["3\n-1\n17\n2\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 1 1\n", "output": ["42\n"]}, {"input": "4\n3\n0 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n-1\n3\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n2\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["3\n2\n8\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["2\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n2\n-1\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n3\n8\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["12\n-1\n17\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 0\n", "output": ["19\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n1\n", "output": ["3\n-1\n7\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n2\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n3\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 0\n1\n0\n", "output": ["-1\n7\n3\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n1\n", "output": ["-1\n-1\n7\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 1\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n12\n17\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n3\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n7\n17\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["12\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 0\n1\n1\n", "output": ["3\n-1\n12\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 1 0 1\n1\n0\n", "output": ["3\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n7\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n12\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["12\n7\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n3\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["12\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["-1\n7\n17\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["-1\n12\n-1\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 0\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 1 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 0 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 2 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n2 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 -1 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 1\n", "output": ["29\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 0\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 0 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "1\n10\n0 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 1\n", "output": ["15\n"]}, {"input": "1\n10\n1 0 0 1 0 2 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "1\n10\n0 1 0 0 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 2 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 3 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 2 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 1 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 0 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 -1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 0\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 0\n", "output": ["24\n"]}, {"input": "1\n10\n1 1 0 1 1 1 0 0 0 0\n", "output": ["-1\n"]}], "task_id": "codecontest/45", "prompt": "Petya owns a fascinating flower. Petya is a busy person, so he sometimes forgets to water it. You are provided n days from Petya's existence and you need to determine the condition of his flower when the days conclude.\n\nThe flower grows as follows:\n\n  * If the flower isn't watered for two days in succession, it dies. \n  * If the flower is watered on the i-th day, it grows by 1 centimeter. \n  * If the flower is watered on the i-th and the (i-1)-th day (i > 1), then it increases by 5 centimeters instead of 1. \n  * If the flower is not watered on the i-th day, it does not grow. \n\n\n\nAt the start of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "repair_prompt": ["Petya owns a fascinating flower. Petya is a busy person, so he sometimes forgets to water it. You are provided n days from Petya's existence and you need to determine the condition of his flower when the days conclude.\n\nThe flower grows as follows:\n\n  * If the flower isn't watered for two days in succession, it dies. \n  * If the flower is watered on the i-th day, it grows by 1 centimeter. \n  * If the flower is watered on the i-th and the (i-1)-th day (i > 1), then it increases by 5 centimeters instead of 1. \n  * If the flower is not watered on the i-th day, it does not grow. \n\n\n\nAt the start of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\n\ndef calculate_flower_height(n: int, watering_schedule: list[int]) -> int:\n    # Initialize the flower's height\n    height = 1\n    # Check if the flower has died\n    died = False\n    \n    # Iterate through each day\n    for i in range(n):\n        # Check if the flower is watered today or yesterday\n        if watering_schedule[i] == 1:\n            if i > 0 and watering_schedule[i - 1] == 1:\n                # Increase by 5 centimeters if watered both today and yesterday\n                height += 5\n            else:\n                # Increase by 1 centimeter if watered today only\n                height += 1\n        else:\n            # If not watered today, check if the flower has died\n            if i > 0 and watering_schedule[i - 1] == 0:\n                # If not watered for two days in succession, the flower dies\n                died = True\n                break\n    \n    # If the flower has died, return -1, otherwise return the final height\n    return -1 if died else height\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    # Read the number of days and the watering schedule\n    n = int(input())\n    watering_schedule = list(map(int, input().split()))\n    \n    # Calculate and print the final height of the flower\n    result = calculate_flower_height(n, watering_schedule)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(n: int, watering_schedule: list[int]) -> int:\n    # Initialize the height of the flower\n    height = 1\n    # Initialize the counter for consecutive unwatering days\n    consecutive_unwatering_days = 0\n    \n    for i in range(n):\n        if watering_schedule[i] == 1:\n            # If watered today, check if watered yesterday\n            if i > 0 and watering_schedule[i - 1] == 1:\n                # If watered both today and yesterday, grow by 5 cm\n                height += 5\n            else:\n                # If watered today only, grow by 1 cm\n                height += 1\n            # Reset the counter since the flower was watered today\n            consecutive_unwatering_days = 0\n        else:\n            # If not watered today, increment the counter\n            consecutive_unwatering_days += 1\n            # Check if the flower has not been watered for two consecutive days\n            if consecutive_unwatering_days == 2:\n                # The flower dies\n                return -1\n    \n    return height\n\n# Read input from the user\nn = int(input())\nwatering_schedule = list(map(int, input().split()))\n\n# Calculate the height of the flower\nresult = calculate_flower_height(n, watering_schedule)\n\n# Output the result\nprint(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(n: int, watering_schedule: list) -> int:\n    # Initialize the height of the flower\n    height = 1\n    # Initialize a flag to check if the flower is dead\n    is_dead = False\n    \n    # Iterate through each day\n    for i in range(n):\n        # Check if the flower is already dead\n        if is_dead:\n            break\n        \n        # Check if the flower was watered today\n        if watering_schedule[i] == 1:\n            # If the flower was watered today, increase the height by 1\n            height += 1\n            # Check if the flower was also watered the previous day\n            if i > 0 and watering_schedule[i - 1] == 1:\n                # If the flower was watered the previous day, increase the height by 5\n                height += 4\n        else:\n            # If the flower was not watered today, check if it was watered the previous day\n            if i > 0 and watering_schedule[i - 1] == 1:\n                # If the flower was watered the previous day, it will die on the next day\n                is_dead = True\n            else:\n                # If the flower was not watered today and the previous day, it will not grow\n                continue\n    \n    # If the flower is dead, return -1, otherwise return the height\n    return -1 if is_dead else height\n\n# Read input from the user\nn = int(input())\nwatering_schedule = list(map(int, input().split()))\n\n# Calculate the height of the flower\nresult = calculate_flower_height(n, watering_schedule)\n\n# Print the result\nprint(result)\n", "from typing import List\n## main.py\n\ndef flower_growth(n: int, watering_days: list[int]) -> int:\n    height = 1\n    previous_was_watered = False\n    \n    for day in range(n):\n        if watering_days[day] == 1:\n            if previous_was_watered:\n                height += 5\n            else:\n                height += 1\n            previous_was_watered = True\n        else:\n            previous_was_watered = False\n    \n    for day in range(1, n):\n        if watering_days[day] == 0 and watering_days[day - 1] == 0:\n            return -1\n    \n    return height\n\n# Provide the Interface\nn = int(input())\nwatering_days = list(map(int, input().split()))\nresult = flower_growth(n, watering_days)\nprint(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(n: int, watering_schedule: list[int]) -> int:\n    \"\"\"\n    Calculate the height of the flower after n days based on the watering schedule.\n\n    Args:\n        n (int): The number of days.\n        watering_schedule (list[int]): A list of integers where 1 indicates the flower was watered on that day, and 0 indicates it was not.\n\n    Returns:\n        int: The height of the flower after n days, or -1 if the flower has died.\n    \"\"\"\n    # Initialize the flower height\n    height = 1  # The flower starts at 1 cm\n    # Check if the flower has died\n    died = False\n\n    # Iterate through each day\n    for i in range(n):\n        # Check if the flower is watered today or yesterday\n        if watering_schedule[i] == 1:\n            if i > 0 and watering_schedule[i - 1] == 1:\n                # The flower grows 5 cm if watered both today and yesterday\n                height += 5\n            else:\n                # The flower grows 1 cm if watered today\n                height += 1\n        else:\n            # If the flower is not watered today, it does not grow\n            pass\n\n        # Check if the flower has died due to lack of watering\n        if i > 0 and watering_schedule[i - 1] == 0 and watering_schedule[i] == 0:\n            died = True\n            break\n\n    # If the flower has died, return -1, otherwise return the height\n    return -1 if died else height\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    # Read the number of days and the watering schedule\n    n = int(input())\n    watering_schedule = list(map(int, input().split()))\n    \n    # Calculate the flower height and print the result\n    result = calculate_flower_height(n, watering_schedule)\n    print(result)\n", "from typing import List\nfrom typing import List\n\ndef calculate_flower_height(n: int, watering_days: List[int]) -> int:\n    if n == 0:\n        return -1\n    \n    # Initialize the flower's height\n    height = 1  # The flower starts at 1 cm\n    consecutive_dry_days = 0  # To track consecutive dry days\n\n    for i in range(n):\n        if watering_days[i] == 1:\n            if i > 0 and watering_days[i - 1] == 1:\n                height += 5  # Grow by 5 cm if watered on the current and previous day\n            else:\n                height += 1  # Grow by 1 cm if only watered on the current day\n            consecutive_dry_days = 0  # Reset consecutive dry days counter\n        else:\n            consecutive_dry_days += 1  # Increment consecutive dry days counter\n        \n        if consecutive_dry_days == 2:\n            return -1  # Flower dies if not watered for 2 consecutive days\n\n    return height\n\n# Read input and process each test case\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    watering_days = list(map(int, input().split()))\n    result = calculate_flower_height(n, watering_days)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(n: int, watering_schedule: list[int]) -> int:\n    height = 1\n    previous_watering_day = -1\n    \n    for i in range(n):\n        if watering_schedule[i] == 0 and previous_watering_day == i - 1:\n            return -1\n        \n        if watering_schedule[i] == 1:\n            if previous_watering_day == i - 1:\n                height += 5\n            else:\n                height += 1\n        \n        if watering_schedule[i] == 1:\n            previous_watering_day = i\n    \n    return height\n\n# Provide the Interface\nn = int(input())\nwatering_schedule = list(map(int, input().split()))\nresult = calculate_flower_height(n, watering_schedule)\nprint(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(n: int, watering_days: list[int]) -> int:\n    # Initialize the flower height and status\n    height = 1  # The flower starts at 1 centimeter tall\n    died = False  # The flower's status\n\n    # Iterate through each day\n    for i in range(n):\n        # Check if the flower is watered today or the previous day\n        if watering_days[i] == 1:\n            if i > 0 and watering_days[i - 1] == 1:\n                # If watered on the i-th and the (i-1)-th day, grow by 5 cm\n                height += 5\n            else:\n                # If watered today, grow by 1 cm\n                height += 1\n        else:\n            # If not watered today, check if it's the second consecutive day\n            if i > 0 and watering_days[i - 1] == 0:\n                # If not watered for two consecutive days, the flower dies\n                died = True\n                break\n\n    # If the flower has died, return -1, otherwise return the height\n    return -1 if died else height\n\n# Interface\nn = int(input())\nwatering_days = list(map(int, input().split()))\nresult = calculate_flower_height(n, watering_days)\nprint(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(days: int, watering_schedule: list[int]) -> int:\n    if days == 0 or watering_schedule is None or len(watering_schedule) == 0:\n        return -1\n\n    height = 1  # The initial height of the flower\n    consecutive_unwatering_days = 0  # Counter for consecutive unwatering days\n\n    for i in range(days):\n        if watering_schedule[i] == 1:\n            if i > 0 and watering_schedule[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n            consecutive_unwatering_days = 0  # Reset the counter since it was watered\n        else:\n            consecutive_unwatering_days += 1\n            if consecutive_unwatering_days == 2:\n                return -1  # Flower dies due to unwatering for 2 days in succession\n\n    return height\n\n# Interface\nn = int(input())\nfor _ in range(n):\n    days = int(input())\n    watering_schedule = list(map(int, input().split()))\n    result = calculate_flower_height(days, watering_schedule)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(n: int, watering_schedule: list[int]) -> int:\n    # Initialize the flower's height\n    height = 1\n    # Initialize the previous watering status\n    previous_watered = False\n    \n    for i in range(n):\n        # Check if the flower is watered today\n        if watering_schedule[i] == 1:\n            # Check if the flower was watered yesterday\n            if previous_watered:\n                # Grow by 5 centimeters\n                height += 5\n            else:\n                # Grow by 1 centimeter\n                height += 1\n            # Update the previous watering status\n            previous_watered = True\n        else:\n            # If not watered, reset the previous watering status\n            previous_watered = False\n        \n        # Check if the flower is dead\n        if not previous_watered and i > 0 and watering_schedule[i - 1] == 0:\n            return -1\n    \n    return height\n\n# Read input\nn = int(input())\nwatering_schedule = list(map(int, input().split()))\n\n# Calculate and print the result\nresult = calculate_flower_height(n, watering_schedule)\nprint(result)\n"], "plans": ["requirement analysis:\nThe requirements specify that the program should calculate the height of a flower over a given number of days, taking into account whether the flower is watered on consecutive days or not. The program should also handle multiple test cases and output the correct height or indicate if the flower has died. The flower's growth is influenced by the watering schedule, with special rules for consecutive watering days.\nrequirement pool:\n- The main code should handle multiple test cases efficiently.\n- The program should correctly calculate the flower's height based on the watering schedule.\n- The output should indicate if the flower has died by outputting -1.\n- The program should be able to handle up to 100 test cases.\nWe will use a simple and efficient approach to handle the flower growth simulation based on the given watering schedule. The program will iterate through each day, checking the watering status and updating the flower's height accordingly. Special care will be taken to handle the consecutive days without watering, which will lead to the flower's death.\n", "requirement analysis:\nThe requirement analysis involves understanding the growth pattern of the flower based on the watering schedule. The flower's growth is dependent on whether it is watered on consecutive days or not. If it is not watered for two days in succession, it dies. The growth increments are 1 cm for a single watering day and 5 cm for consecutive watering days. The initial height of the flower is 1 cm.\nrequirement pool:\n- Implement the logic to calculate the flower's height based on the watering schedule.\n- Handle the case where the flower dies due to lack of watering.\n- Ensure the program can handle multiple test cases efficiently.\n- Design a user-friendly interface for input and output.\nWe will implement a Python function that calculates the height of Petya's flower based on the given days of watering. The function will iterate through each day, checking the watering schedule to determine the growth of the flower. If the flower is not watered for two consecutive days, it will be considered dead, and the function will return -1.\n", "requirement analysis:\nThe requirement analysis involves understanding the growth pattern of the flower based on the watering schedule. The flower's growth is dependent on whether it is watered on consecutive days or not. If it is not watered for two days in succession, it dies. The growth increments are 1 centimeter for a single watering day and 5 centimeters for consecutive watering days. The initial height of the flower is 1 centimeter.\nrequirement pool:\n- Implement the logic for flower growth based on watering schedule\n- Handle the case where the flower dies due to lack of watering\n- Ensure the program can handle multiple test cases efficiently\n- Design a user-friendly interface for input and output\nWe will implement a Python function that calculates the height of Petya's flower based on the given days and watering schedule. The function will iterate through each day, checking the watering schedule to determine the growth of the flower. If the flower is not watered for two consecutive days, it will be considered dead, and the function will return -1.\n", "requirement analysis:\nThe requirements specify a simple simulation problem where the growth of a flower is dependent on whether it is watered on consecutive days or not. The input consists of multiple test cases, each with a number of days and a sequence of watering days. The output should indicate the final height of the flower or -1 if it dies. The flower's growth behavior is straightforward, making the implementation relatively simple.\nrequirement pool:\n- Implement the logic for flower growth based on watering days.\n- Handle multiple test cases efficiently.\n- Ensure the program can handle up to 100 days and 100 test cases.\n- Optimize the code for readability and efficiency.\nWe will use a simple Python function to simulate the growth of Petya's flower based on the given days and watering schedule. The function will iterate through each day, checking the watering status and updating the flower's height accordingly. If the flower is not watered for two consecutive days, it will die, and the function will return -1.\n", "requirement analysis:\nThe requirements specify that the program should calculate the height of a flower over a given number of days, taking into account whether the flower is watered on consecutive days or not. The program should also handle multiple test cases and output the correct height or indicate if the flower has died. The flower's growth is influenced by the watering schedule, with special rules for consecutive watering days.\nrequirement pool:\n- The main code should handle input and output correctly.\n- The program should correctly calculate the flower's height based on the watering schedule.\n- The program should handle multiple test cases efficiently.\n- The program should output -1 if the flower dies due to lack of watering.\n- The program should be able to handle up to 100 days and 100 test cases.\nWe will use a simple Python function to handle the flower growth simulation based on the given watering schedule. The function will iterate through each day, checking the watering status and updating the flower's height accordingly. It will also handle multiple test cases efficiently.\n", "requirement analysis:\nThe requirements specify a simple program to calculate the height of a flower based on watering days. The program needs to handle multiple test cases and output the correct height or indicate if the flower dies. The constraints are within the range of 1 to 100 for both the number of test cases and the number of days.\nrequirement pool:\n- The main code should handle multiple test cases efficiently.\n- The program should correctly calculate the flower's height based on the given rules.\n- The output should indicate -1 if the flower dies due to lack of watering.\n- The program should be able to handle up to 100 test cases and 100 days.\nWe will use a simple and efficient approach to handle the flower growth simulation based on the given rules. The program will iterate through each day, checking the watering status and updating the flower's height accordingly. We will use a list to store the watering status for each day and calculate the flower's height based on the rules provided.\n", "requirement analysis:\nThe requirement analysis involves understanding the growth pattern of the flower based on the watering schedule. The flower's growth is dependent on whether it is watered on consecutive days or not. If it is not watered for two days in succession, it dies. The growth increments are 1 centimeter for a single watering day and 5 centimeters for consecutive watering days. The initial height of the flower is 1 centimeter.\nrequirement pool:\n- Implement the logic to calculate the flower's height based on the watering schedule.\n- Handle the case where the flower dies due to lack of watering.\n- Ensure the program can handle multiple test cases efficiently.\n- Design a user-friendly interface for inputting the watering schedule.\nWe will implement a Python function that calculates the height of Petya's flower based on the given watering schedule. The function will iterate through each day, checking the watering history to determine the growth of the flower. If the flower is not watered for two consecutive days, it will be considered dead, and the function will return -1.\n", "requirement analysis:\nThe requirements specify a simple simulation of a plant's growth based on watering days. The plant can either grow 1 cm per day or 5 cm if watered on consecutive days. If not watered for two days, it dies. The output is the height of the plant after n days or -1 if it has died.\nrequirement pool:\n- Implement the plant growth logic based on watering days.\n- Handle the case where the plant dies due to lack of watering.\n- Ensure the program can handle multiple test cases efficiently.\n- Design a user-friendly interface for input and output.\nWe will use a simple Python script to simulate the growth of Petya's flower based on the given watering days. The script will iterate through each day, checking the watering history to determine the flower's growth. If the flower is not watered for two consecutive days, it will die, and the script will output -1 for that case.\n", "requirement analysis:\nThe requirements specify the need to simulate the growth of a flower based on watering days. The product must handle multiple test cases and provide the correct height of the flower or indicate if it has died. The user interface should be straightforward, allowing users to input the number of days and the watering schedule easily.\nrequirement pool:\n- Implement the logic to calculate the flower's height based on the watering schedule.\n- Handle multiple test cases efficiently.\n- Provide a user-friendly interface for input and output.\n- Ensure the product is simple and intuitive to use.\nTo implement the flower growth simulation, we will use a simple Python script that calculates the height of the flower based on the given watering schedule. The script will handle multiple test cases efficiently and provide a user-friendly interface for input and output. We will use basic Python data structures and control flow to achieve the desired functionality.\n", "requirement analysis:\nThe requirements for this project are clear and straightforward. The main objective is to simulate the growth of a plant based on the watering schedule provided by the user. The application should be able to handle multiple test cases and provide the correct height of the plant after the specified number of days, or indicate if the plant has died due to lack of watering. The user interface should be simple and intuitive, making it easy for users to input their watering schedule and view the results.\nrequirement pool:\n- Implement the plant growth logic based on the watering schedule.\n- Handle multiple test cases efficiently.\n- Provide a clear output indicating the final height of the plant or if it has died.\n- Develop a user-friendly interface for inputting the watering schedule.\n- Include error handling for invalid inputs.\nWe will use a simple Python script to simulate the growth of Petya's flower based on the given watering schedule. The script will iterate through each day, checking the watering status and updating the flower's height accordingly. If the flower is not watered for two consecutive days, it will be considered dead.\n"], "scores": [], "pass_results": [false, true, false, false, true, false, false, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 4, "round": 67, "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "mutate_method": "rephrase_one", "parent_index": 62}
