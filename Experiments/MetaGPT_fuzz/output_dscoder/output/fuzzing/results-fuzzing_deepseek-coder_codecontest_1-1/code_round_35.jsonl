{"name": "1575_M. Managing Telephone Poles", "description": "Mr. Chanek's city can be represented as a plane. He wants to build a housing complex in the city.\n\nThere are some telephone poles on the plane, which is represented by a grid a of size (n + 1) \u00d7 (m + 1). There is a telephone pole at (x, y) if a_{x, y} = 1.\n\nFor each point (x, y), define S(x, y) as the square of the Euclidean distance between the nearest pole and (x, y). Formally, the square of the Euclidean distance between two points (x_1, y_1) and (x_2, y_2) is (x_2 - x_1)^2 + (y_2 - y_1)^2.\n\nTo optimize the building plan, the project supervisor asks you the sum of all S(x, y) for each 0 \u2264 x \u2264 n and 0 \u2264 y \u2264 m. Help him by finding the value of \u2211_{x=0}^{n} {\u2211_{y=0}^{m} {S(x, y)}}.\n\nInput\n\nThe first line contains two integers n and m (0 \u2264 n, m < 2000) \u2014 the size of the grid.\n\nThen (n + 1) lines follow, each containing (m + 1) integers a_{i, j} (0 \u2264 a_{i, j} \u2264 1) \u2014 the grid denoting the positions of telephone poles in the plane. There is at least one telephone pole in the given grid.\n\nOutput\n\nOutput an integer denoting the value of \u2211_{x=0}^{n} {\u2211_{y=0}^{m} {S(x, y)}}.\n\nExamples\n\nInput\n\n\n2 2\n101\n000\n000\n\n\nOutput\n\n\n18\n\n\nInput\n\n\n5 4\n10010\n00000\n01000\n00001\n00100\n00010\n\n\nOutput\n\n\n36\n\nNote\n\n<image>\n\nIn the first example, the nearest telephone pole for the points (0,0), (1,0), (2,0), (0,1), (1,1), and (2,1) is at (0, 0). While the nearest telephone pole for the points (0, 2), (1,2), and (2,2) is at (0, 2). Thus, \u2211_{x=0}^{n} {\u2211_{y=0}^{m} {S(x, y)}} = (0 + 1 + 4) + (1 + 2 + 5) + (0 + 1 + 4) = 18.", "tags": ["data structures", "geometry"], "difficulty": 20, "id": 1575, "sample_io": [{"input": "2 2\n101\n000\n000\n", "output": ["18\n"]}, {"input": "5 4\n10010\n00000\n01000\n00001\n00100\n00010\n", "output": ["36\n"]}], "test_list": [{"input": "9 9\n0000110000\n0001001000\n0001001000\n0001111000\n0001001000\n0001001000\n0110000110\n1000000001\n1001001001\n0111111110\n", "output": ["182\n"]}, {"input": "0 0\n1\n", "output": ["0\n"]}, {"input": "9 9\n0000110000\n0001001000\n0001001000\n0001111000\n0001001000\n0001001000\n0110000110\n1000000001\n1001001011\n0111111110\n", "output": ["181\n"]}, {"input": "2 2\n101\n010\n000\n", "output": ["8\n"]}, {"input": "5 4\n10010\n00000\n01000\n00001\n00100\n00110\n", "output": ["33\n"]}, {"input": "9 9\n0000110000\n0001001000\n0001001000\n0001111000\n0001000000\n0001001000\n0110000110\n1000000001\n1001001011\n0111111110\n", "output": ["183\n"]}, {"input": "5 4\n10010\n00000\n01000\n00001\n10100\n00110\n", "output": ["25\n"]}, {"input": "9 9\n0000110000\n0001001000\n0001000000\n0001111000\n0001000000\n0001001000\n0110000110\n1000000001\n1001001011\n0111111110\n", "output": ["187\n"]}, {"input": "5 4\n10010\n00000\n00000\n00001\n10100\n00110\n", "output": ["38\n"]}, {"input": "9 9\n0000110000\n0001001000\n0001000000\n0001011000\n0001000000\n0001001000\n0110000110\n1000000001\n1001001011\n0111111110\n", "output": ["188\n"]}, {"input": "5 4\n10010\n00000\n00000\n01001\n10100\n00110\n", "output": ["28\n"]}, {"input": "5 4\n10010\n00100\n00000\n01001\n10100\n00110\n", "output": ["24\n"]}, {"input": "5 4\n00010\n00101\n00000\n01001\n10100\n00110\n", "output": ["31\n"]}, {"input": "5 4\n01000\n00101\n00000\n01001\n10110\n00111\n", "output": ["23\n"]}, {"input": "5 4\n01000\n00101\n00100\n01001\n10110\n00111\n", "output": ["21\n"]}, {"input": "5 4\n01000\n10101\n00100\n01001\n10110\n00111\n", "output": ["18\n"]}, {"input": "5 4\n01100\n10101\n00100\n01001\n10110\n00111\n", "output": ["16\n"]}, {"input": "5 4\n01100\n10101\n00100\n01001\n10110\n01111\n", "output": ["15\n"]}, {"input": "5 4\n01100\n10101\n00100\n01001\n00110\n01111\n", "output": ["17\n"]}, {"input": "0 4\n10010\n00000\n01000\n00001\n00100\n00010\n", "output": ["3\n"]}, {"input": "9 9\n0000110010\n0001001000\n0001001000\n0001111000\n0001001000\n0001001000\n0110000110\n1000000001\n1001001011\n0111111110\n", "output": ["152\n"]}, {"input": "9 9\n0000110000\n0001001000\n0001001000\n1001111000\n0001000000\n0001001000\n0110000110\n1000000001\n1001001011\n0111111110\n", "output": ["149\n"]}, {"input": "9 9\n0000110000\n0001001000\n0001000000\n0001111000\n1001000000\n0001001000\n0110000110\n1000000001\n1001001011\n0111111110\n", "output": ["163\n"]}, {"input": "5 4\n10010\n00001\n00000\n00001\n10100\n00110\n", "output": ["36\n"]}, {"input": "5 9\n0000110000\n0001001000\n0001000000\n0001011000\n0001000000\n0001001000\n0110000110\n1000000001\n1001001011\n0111111110\n", "output": ["193\n"]}, {"input": "5 4\n00010\n00100\n00000\n01001\n10110\n00110\n", "output": ["32\n"]}, {"input": "5 4\n00010\n00101\n00000\n01001\n10100\n01110\n", "output": ["30\n"]}, {"input": "5 4\n00000\n00101\n00000\n01001\n10100\n00010\n", "output": ["35\n"]}, {"input": "5 4\n01000\n00101\n00000\n00001\n10100\n00111\n", "output": ["29\n"]}, {"input": "5 4\n01000\n00101\n00000\n01001\n11110\n00111\n", "output": ["22\n"]}, {"input": "9 9\n0000110010\n0001001000\n0001001000\n0001111000\n0001001000\n0001001000\n0110000110\n1000010001\n1001001011\n0111111110\n", "output": ["148\n"]}, {"input": "9 9\n0000110000\n0001001000\n0001001000\n1101111000\n0001000000\n0001001000\n0110000110\n1000000001\n1001001011\n0111111110\n", "output": ["146\n"]}, {"input": "9 9\n0000110000\n0001001000\n0001000000\n0001111000\n1001000000\n0001001000\n0110000110\n1000000001\n1001001011\n0011111110\n", "output": ["164\n"]}, {"input": "5 4\n00000\n00101\n00000\n00001\n10100\n00010\n", "output": ["40\n"]}, {"input": "5 4\n01100\n11101\n00100\n01001\n00110\n00111\n", "output": ["20\n"]}, {"input": "9 9\n0000100000\n0001001000\n0001001100\n0001111000\n0001001000\n0001001000\n0111000110\n1000000001\n1001001001\n0111111110\n", "output": ["158\n"]}, {"input": "9 9\n0000110010\n0001001000\n1001001000\n0001111000\n0001001000\n0001001000\n0110000110\n1000010001\n1001001011\n0111111110\n", "output": ["109\n"]}, {"input": "9 9\n0000110000\n0001001000\n0001001000\n1101111000\n0001000000\n0001001000\n0110000110\n1000000001\n1001001011\n0110111110\n", "output": ["147\n"]}, {"input": "9 9\n0000110000\n0001001000\n0001000000\n0001110000\n1001000000\n0001001000\n0110000110\n1000000001\n1001001011\n0011111110\n", "output": ["173\n"]}, {"input": "5 4\n11010\n00100\n00000\n00001\n10100\n01110\n", "output": ["27\n"]}, {"input": "4 4\n00010\n00101\n00000\n01011\n10100\n01110\n", "output": ["26\n"]}, {"input": "5 4\n00000\n00101\n00000\n00001\n10101\n00010\n", "output": ["39\n"]}, {"input": "9 9\n0000100000\n0001001000\n0001001100\n0001111000\n0001001000\n0001001000\n0111000110\n1000000001\n1001001011\n0111111110\n", "output": ["157\n"]}, {"input": "9 9\n0000110011\n0001001000\n1001001000\n0001111000\n0001001000\n0001001000\n0110000110\n1000010001\n1001001011\n0111111110\n", "output": ["106\n"]}, {"input": "9 9\n0000110000\n0001001000\n0001000000\n0001110000\n1101000000\n0001001000\n0110000110\n1000000001\n1001001011\n0011111110\n", "output": ["171\n"]}, {"input": "9 9\n0000110011\n0001001000\n1001001000\n0001111000\n0001001000\n0001001000\n0110000110\n0000010001\n1001001011\n0111111110\n", "output": ["107\n"]}, {"input": "9 9\n0000010000\n0001001000\n0001001000\n1101111100\n0001000000\n0001001000\n0110000110\n1000000001\n1001001011\n0110111110\n", "output": ["129\n"]}, {"input": "2 9\n0000110000\n0001001000\n0001000000\n0001110000\n1101000000\n0001001000\n0110000110\n1000000001\n1001001011\n0011111110\n", "output": ["101\n"]}, {"input": "4 4\n01100\n11111\n00100\n01101\n00100\n01111\n", "output": ["14\n"]}, {"input": "9 9\n0000110011\n0001001000\n1001001000\n0011111000\n0001001000\n0001001000\n0110000110\n0000010001\n1001001011\n0111111110\n", "output": ["103\n"]}, {"input": "9 9\n0000010000\n0001001000\n0001001000\n1101111100\n0001000000\n0001001000\n0110000110\n1000000011\n1001001011\n0110111110\n", "output": ["128\n"]}, {"input": "3 4\n01100\n11111\n00100\n01101\n00100\n01111\n", "output": ["9\n"]}, {"input": "9 9\n0100100000\n0001001000\n0001001100\n0001111000\n0001001000\n0001001000\n0111000110\n1000000001\n1001000011\n0011111110\n", "output": ["133\n"]}, {"input": "9 9\n0000110011\n0001001000\n1001001000\n0011111100\n0001001000\n0001001000\n0110000110\n0000010001\n1001001011\n0111111110\n", "output": ["90\n"]}, {"input": "2 9\n0000110000\n0001001100\n0001000000\n0001110000\n1101000000\n0001001000\n0110000110\n1000000001\n1001001001\n0011111110\n", "output": ["74\n"]}, {"input": "9 9\n0000110011\n0001001000\n1001001000\n0011111100\n0001001000\n0001001000\n0110000110\n0000010001\n1001001011\n0111111111\n", "output": ["89\n"]}, {"input": "1 4\n01001\n00101\n00100\n00001\n10100\n10100\n", "output": ["7\n"]}, {"input": "9 9\n0000110011\n0001011000\n1001001000\n0011111100\n0001001000\n0001001000\n0110000110\n0000010001\n1001001011\n0111111111\n", "output": ["88\n"]}, {"input": "9 9\n0000110011\n0001011010\n1001001000\n0011111100\n0001001000\n0001001000\n0110000110\n0000010001\n1001001011\n0111111111\n", "output": ["84\n"]}, {"input": "4 4\n10010\n10100\n01011\n00010\n00101\n10111\n", "output": ["19\n"]}, {"input": "3 4\n01100\n11101\n00100\n01101\n10110\n01110\n", "output": ["10\n"]}, {"input": "9 9\n0000110011\n0001011010\n1001000000\n0011111100\n0001001000\n0001001000\n0110000110\n0000010001\n1001001011\n0111111111\n", "output": ["85\n"]}, {"input": "1 4\n01100\n11101\n00100\n00101\n11110\n01110\n", "output": ["4\n"]}, {"input": "9 9\n0000110000\n0001001000\n0001001000\n0001111000\n0001000000\n0001001000\n0110000110\n1000000001\n1001001001\n0111111110\n", "output": ["184\n"]}, {"input": "2 2\n101\n000\n010\n", "output": ["6\n"]}, {"input": "9 9\n0001110000\n0001001000\n0001001000\n0001111000\n0001001000\n0001001000\n0110000110\n1000000001\n1001001011\n0111111110\n", "output": ["177\n"]}, {"input": "2 2\n101\n000\n110\n", "output": ["5\n"]}, {"input": "5 4\n10000\n00000\n00000\n00001\n10100\n00110\n", "output": ["67\n"]}, {"input": "5 4\n00000\n00100\n00000\n01001\n10100\n00010\n", "output": ["43\n"]}, {"input": "0 4\n10110\n00000\n01000\n00001\n00100\n00010\n", "output": ["2\n"]}, {"input": "9 9\n0000110010\n0001001000\n0001001000\n0001111000\n0001001000\n0001001000\n0110000110\n1000000001\n1001001011\n0111101110\n", "output": ["153\n"]}, {"input": "9 9\n0000110000\n0001001000\n0001001000\n1001111000\n0001000000\n0001001000\n0110100110\n1000000001\n1001001011\n0111111110\n", "output": ["145\n"]}, {"input": "5 4\n00010\n00100\n00000\n00001\n10110\n00110\n", "output": ["37\n"]}, {"input": "9 9\n0000110000\n0001001000\n0001001000\n0001111000\n0001001000\n0001001000\n0111000110\n1000000001\n1001001001\n0111111110\n", "output": ["180\n"]}, {"input": "9 9\n0000100000\n0001001000\n0001001100\n0001111000\n0001001000\n0001001000\n0111000110\n1000000000\n1001001001\n0111111110\n", "output": ["159\n"]}, {"input": "5 4\n00000\n00101\n00000\n00001\n00101\n00010\n", "output": ["52\n"]}, {"input": "9 9\n0000100000\n0001001001\n0001001100\n0001111000\n0001001000\n0001001000\n0111000110\n1000000001\n1001001011\n0111111110\n", "output": ["137\n"]}, {"input": "9 9\n0000110000\n0001001000\n0001000000\n0001110000\n0101000000\n0001001000\n0110000110\n1000000001\n1001001011\n0011111110\n", "output": ["175\n"]}, {"input": "9 9\n0000110011\n0001001000\n1001001000\n0001111000\n1001001000\n0001001000\n0110000110\n0000010001\n1001001011\n0111111110\n", "output": ["99\n"]}, {"input": "5 4\n01000\n00111\n10100\n01101\n11111\n00111\n", "output": ["13\n"]}, {"input": "9 9\n0100100001\n0001001000\n0001001100\n0001111000\n0001001000\n0001001000\n0111000110\n1000000001\n1001001011\n0011111110\n", "output": ["113\n"]}, {"input": "9 9\n0000010000\n0001001000\n0001001000\n1101111100\n0001000000\n0001001000\n0110100110\n1000000011\n1001001011\n0110111110\n", "output": ["124\n"]}, {"input": "9 9\n0100010000\n0001001000\n0001001000\n1101111100\n0001000001\n0001001000\n0110000110\n1000000011\n1001001011\n0110111110\n", "output": ["98\n"]}, {"input": "9 9\n1100010000\n0001001000\n0001001100\n1101111100\n0001000000\n0001001000\n0110000110\n1000000011\n1001001011\n0110111110\n", "output": ["97\n"]}, {"input": "2 9\n0000110000\n0001000100\n0001000000\n0001110000\n1101000000\n0001001000\n0110001110\n1000000001\n1001001001\n0011111110\n", "output": ["78\n"]}, {"input": "9 9\n0000110011\n0001111000\n1001001000\n0011111100\n0001001000\n0001001000\n0110000110\n0000010001\n1001001011\n0111111111\n", "output": ["87\n"]}, {"input": "9 9\n0001110000\n0001001000\n0001001000\n1001111000\n0001001000\n0001001000\n0110000110\n1000000001\n1001001011\n0111111110\n", "output": ["144\n"]}, {"input": "9 9\n0000110000\n0001001000\n0001000000\n0001111000\n0001000000\n0001001000\n0110000010\n1000000001\n1001001011\n0011111110\n", "output": ["190\n"]}, {"input": "5 4\n10000\n00000\n00000\n00001\n10101\n00110\n", "output": ["66\n"]}, {"input": "9 9\n0000110000\n0001011000\n0001000000\n0001011000\n0001000010\n0001001000\n0110000110\n1000000001\n1001001011\n0111111110\n", "output": ["162\n"]}, {"input": "9 9\n0000010010\n0001001001\n0001001000\n0001111000\n0001001000\n0001001000\n0110000110\n1000010001\n1001001011\n0111111110\n", "output": ["136\n"]}, {"input": "9 9\n0000110000\n0001001000\n0001001010\n1101111000\n0001000000\n0001000000\n0110000110\n1000000001\n1001001011\n0111111110\n", "output": ["115\n"]}, {"input": "9 9\n0000110000\n0001001000\n0001000000\n0101111000\n1001000100\n0001001000\n0110000110\n1000000001\n1001001011\n0011111110\n", "output": ["139\n"]}, {"input": "9 9\n0000110000\n0011001100\n0001000000\n0001110000\n1001000000\n0001001000\n0110000110\n1000000001\n1001001011\n0011111110\n", "output": ["121\n"]}, {"input": "5 4\n00000\n00101\n00000\n00001\n00101\n00011\n", "output": ["51\n"]}, {"input": "4 9\n0000100000\n0001001001\n0001001100\n0001111000\n0001001000\n0001001000\n0111000110\n1000000001\n1001001011\n0111111110\n", "output": ["111\n"]}, {"input": "5 4\n11010\n00000\n00000\n00001\n10100\n00111\n", "output": ["34\n"]}, {"input": "9 9\n0000110011\n0001001000\n1001001001\n0011111000\n0001001000\n0001001000\n0110000110\n0000010001\n1001001011\n0110111110\n", "output": ["86\n"]}, {"input": "9 9\n0000010000\n0001001000\n0001001000\n1101111100\n0001000000\n0001001000\n0100100110\n1000000011\n1001001011\n0110111110\n", "output": ["126\n"]}, {"input": "9 9\n1100010000\n1001001000\n0001001100\n1101111100\n0001000000\n0001001000\n0110000110\n1000000011\n1001001011\n0110111110\n", "output": ["96\n"]}, {"input": "9 9\n0000110011\n1001111000\n1001001000\n0011111100\n0001001000\n0001001000\n0110000110\n0000010001\n1001001011\n0111111111\n", "output": ["79\n"]}, {"input": "9 9\n0000110000\n0001011000\n0001000000\n0001011000\n0001010010\n0001001000\n0110000110\n1000000001\n1001001011\n0111111110\n", "output": ["161\n"]}, {"input": "9 9\n0000110000\n0001001000\n1001001000\n0000111000\n0001001000\n0001001000\n0111000110\n1000000001\n1001001001\n0111111110\n", "output": ["143\n"]}, {"input": "9 9\n0000010010\n0001001001\n0001001000\n0001111000\n0001001000\n0001001000\n0110000110\n1000010001\n1101001011\n0111111110\n", "output": ["135\n"]}, {"input": "9 9\n0000110000\n0001001000\n0001001010\n1100111000\n0001000000\n0001000000\n0110000110\n1000000001\n1001001011\n0111111110\n", "output": ["116\n"]}, {"input": "9 9\n0000110000\n0001001000\n0001000000\n0101111000\n1001000100\n0011001000\n0110000110\n1000000001\n1001001011\n0011111110\n", "output": ["138\n"]}, {"input": "9 9\n0000110000\n0011001100\n0001000000\n0001110000\n1000000000\n0001001000\n0110000110\n1000000001\n1001001011\n0011111110\n", "output": ["123\n"]}, {"input": "5 4\n00000\n00101\n00000\n00001\n00101\n00111\n", "output": ["48\n"]}, {"input": "4 9\n0000100000\n0101001001\n0001001100\n0001111000\n0001001000\n0001001000\n0111000110\n1000000001\n1001001011\n0111111110\n", "output": ["73\n"]}, {"input": "3 4\n10010\n11101\n01000\n00011\n00100\n00110\n", "output": ["12\n"]}, {"input": "9 9\n0000110011\n0001001000\n1001001100\n0001111000\n1001001001\n0001001000\n0110000110\n0000010001\n1001001011\n0111111110\n", "output": ["76\n"]}, {"input": "2 4\n00010\n10100\n01001\n00011\n00100\n10111\n", "output": ["11\n"]}, {"input": "9 9\n0000010000\n0001001000\n0001001000\n1101111100\n0001000000\n0001001000\n0100100110\n1000000011\n1001001001\n0110111110\n", "output": ["127\n"]}, {"input": "2 9\n0000110000\n0001001100\n0011000000\n0001110010\n1101000000\n0001001000\n0110000110\n1000000001\n1001000001\n0011111110\n", "output": ["57\n"]}, {"input": "9 9\n0000110011\n0001001000\n1001001010\n0011111100\n1001001000\n0001001000\n0110000110\n0000010001\n1001000011\n0111111111\n", "output": ["77\n"]}, {"input": "9 9\n0000110011\n1001111000\n1001000000\n0011111100\n0001001000\n0001001000\n0110000110\n0000010001\n1001001011\n0111111111\n", "output": ["80\n"]}, {"input": "9 9\n0100110000\n0001001000\n0001101000\n0001111000\n0001000000\n0101001000\n0110000110\n1000000001\n1001001001\n0111111110\n", "output": ["142\n"]}, {"input": "5 4\n10001\n00000\n00000\n00001\n10101\n10110\n", "output": ["42\n"]}, {"input": "0 4\n11110\n01000\n01000\n00001\n00110\n00010\n", "output": ["1\n"]}, {"input": "9 9\n0000010010\n0001001001\n0001001100\n0001111000\n0001001000\n0001001000\n0110000110\n1000010001\n1101001011\n0111111110\n", "output": ["131\n"]}, {"input": "9 9\n0000110000\n0001001000\n0001001010\n1100111000\n0001000000\n0001000000\n0110000110\n1000000001\n1001001011\n0111111100\n", "output": ["117\n"]}, {"input": "9 9\n0000110000\n0011001100\n0001000000\n1001110000\n1000000000\n0001001000\n0110000110\n1000000001\n1001001011\n0011111110\n", "output": ["118\n"]}, {"input": "9 9\n0000110000\n0001001100\n0001000000\n0001110100\n0101000100\n0001001000\n0110000110\n1000000001\n1001001011\n0011111110\n", "output": ["125\n"]}, {"input": "9 9\n0000110011\n0101001000\n1001001001\n0001111000\n0001001000\n0001001000\n0110000110\n0000010001\n1001001011\n0110111110\n", "output": ["82\n"]}, {"input": "9 9\n0000010000\n0001001000\n0001001000\n1101111101\n0001000000\n0001001000\n0100100110\n1000000011\n1001001001\n0110111110\n", "output": ["110\n"]}, {"input": "2 9\n0000010000\n0001001100\n0001000000\n0001110000\n1101000000\n0001101000\n0110001110\n1000000000\n1001001001\n0011111110\n", "output": ["75\n"]}, {"input": "9 9\n0100110000\n0001001000\n0001101000\n0001111000\n0001000000\n0101001000\n0110001110\n1000000001\n1001001001\n0111111110\n", "output": ["140\n"]}, {"input": "9 9\n0000010010\n0001000001\n0001001100\n0001111000\n0001001000\n0001001000\n0110000110\n1000010001\n1101001011\n0111111110\n", "output": ["132\n"]}, {"input": "9 9\n0000010000\n0001001000\n0001001100\n1101111101\n0001000000\n0001001000\n0100100110\n1000000011\n1001001001\n0110111110\n", "output": ["105\n"]}, {"input": "9 9\n1100010000\n1001001000\n0101001100\n1101111000\n0001000000\n0001001000\n0110000110\n1000000011\n1001001011\n0110111010\n", "output": ["102\n"]}, {"input": "9 9\n0100110000\n0001001000\n0001101000\n0001011000\n0001000000\n0101001000\n0110001110\n1000000001\n1001001001\n0111111110\n", "output": ["141\n"]}, {"input": "7 9\n0000110000\n0001000000\n0001000000\n0001111000\n1001000000\n0001001000\n0110000111\n0000000001\n1001001011\n0111111110\n", "output": ["189\n"]}, {"input": "2 9\n0000110000\n0000001100\n0011000000\n1001110010\n1101000000\n0001001000\n0110000110\n1000000011\n1001000001\n0011111110\n", "output": ["60\n"]}, {"input": "9 9\n0000110011\n0001001000\n1001001010\n0011111100\n1001001000\n0001001100\n0110000111\n0010010001\n1001000011\n0111111111\n", "output": ["72\n"]}, {"input": "9 9\n0000110000\n0001011001\n0101000000\n0001011000\n0101010010\n0101001000\n0110000110\n1000000001\n1001001011\n0111111110\n", "output": ["83\n"]}, {"input": "5 4\n10000\n00001\n00000\n00001\n01110\n00111\n", "output": ["41\n"]}, {"input": "9 9\n0000010010\n0001000001\n0001001100\n0001111000\n0001011000\n0001001000\n0110000110\n1000010001\n1101101011\n0111111110\n", "output": ["130\n"]}, {"input": "9 9\n0000100000\n0001001000\n0001000100\n0001111010\n0001001000\n0001001000\n0011000110\n1100000000\n1001000001\n1111111110\n", "output": ["155\n"]}, {"input": "9 9\n0000010000\n0001001000\n0001001100\n1101111101\n0001000000\n0001001000\n0100100110\n1000100011\n1001001001\n0110101110\n", "output": ["104\n"]}, {"input": "9 9\n0000110011\n0001001000\n1001001010\n0011111100\n1001001000\n0001001100\n0110000111\n1010010001\n1001000011\n0111111111\n", "output": ["71\n"]}, {"input": "7 9\n0000100000\n0001000000\n0001000000\n0001111000\n1001000000\n0001001001\n0110000111\n0000000001\n1001001011\n0111111110\n", "output": ["195\n"]}, {"input": "9 9\n0000100000\n0001001000\n0001000100\n0011111010\n0001001000\n0001001000\n0011000110\n1100000000\n1001000001\n1111111110\n", "output": ["134\n"]}, {"input": "5 4\n00010\n00100\n00000\n01001\n10100\n00110\n", "output": ["33\n"]}, {"input": "5 4\n00000\n00101\n00000\n01001\n10100\n00110\n", "output": ["33\n"]}, {"input": "5 4\n01000\n00101\n00000\n01001\n10100\n00110\n", "output": ["25\n"]}, {"input": "5 4\n01000\n00101\n00000\n01001\n10100\n00111\n", "output": ["24\n"]}, {"input": "9 9\n0000100000\n0001001000\n0001001000\n0001111000\n0001001000\n0001001000\n0110000110\n1000000001\n1001001001\n0111111110\n", "output": ["183\n"]}, {"input": "5 4\n10010\n00000\n01000\n00011\n00100\n00110\n", "output": ["31\n"]}, {"input": "5 4\n11010\n00000\n01000\n00001\n10100\n00110\n", "output": ["24\n"]}, {"input": "5 4\n11010\n00100\n00000\n01001\n10100\n00110\n", "output": ["23\n"]}, {"input": "5 4\n01000\n00101\n00100\n01000\n10110\n00111\n", "output": ["23\n"]}, {"input": "5 4\n01000\n10101\n00100\n01101\n10110\n00111\n", "output": ["17\n"]}, {"input": "5 4\n01100\n10101\n00100\n01001\n00110\n00111\n", "output": ["21\n"]}, {"input": "5 4\n01100\n10101\n00100\n01000\n10110\n01111\n", "output": ["17\n"]}, {"input": "4 4\n01100\n10101\n00100\n01001\n00110\n01111\n", "output": ["16\n"]}, {"input": "9 9\n0000100000\n0001001000\n0001001000\n0001111000\n0001001000\n0001001000\n0111000110\n1000000001\n1001001001\n0111111110\n", "output": ["181\n"]}, {"input": "5 4\n10010\n00100\n01000\n00011\n00100\n00110\n", "output": ["29\n"]}, {"input": "5 4\n11010\n00000\n01000\n00001\n10100\n00111\n", "output": ["23\n"]}, {"input": "5 4\n10011\n00001\n00000\n00001\n10100\n00110\n", "output": ["35\n"]}, {"input": "5 4\n11010\n00100\n00000\n00001\n10100\n00110\n", "output": ["28\n"]}, {"input": "5 4\n00010\n00101\n00000\n01011\n10100\n01110\n", "output": ["28\n"]}, {"input": "5 4\n01000\n00101\n00000\n00001\n10100\n00110\n", "output": ["30\n"]}, {"input": "5 4\n01000\n00101\n00000\n01001\n11111\n00111\n", "output": ["21\n"]}, {"input": "5 4\n01000\n00101\n00100\n01010\n10110\n00111\n", "output": ["21\n"]}, {"input": "5 4\n01100\n10101\n00100\n01000\n10111\n01111\n", "output": ["15\n"]}, {"input": "4 4\n01100\n10101\n00100\n01001\n00100\n01111\n", "output": ["17\n"]}, {"input": "5 4\n10010\n10100\n01000\n00011\n00100\n00110\n", "output": ["28\n"]}, {"input": "5 4\n01000\n00101\n00100\n00001\n10100\n00110\n", "output": ["27\n"]}, {"input": "5 4\n01000\n00101\n10000\n01001\n11111\n00111\n", "output": ["18\n"]}, {"input": "5 4\n01000\n00101\n00100\n01011\n10110\n00111\n", "output": ["20\n"]}, {"input": "4 4\n01100\n10101\n00100\n01101\n00100\n01111\n", "output": ["16\n"]}, {"input": "5 4\n10010\n10100\n01001\n00011\n00100\n00110\n", "output": ["26\n"]}, {"input": "9 9\n0000010000\n0001001000\n0001001000\n1101111000\n0001000000\n0001001000\n0110000110\n1000000001\n1001001011\n0110111110\n", "output": ["148\n"]}, {"input": "5 4\n11010\n00100\n00000\n00001\n10100\n01111\n", "output": ["26\n"]}, {"input": "5 4\n00000\n00101\n00100\n00001\n10101\n00010\n", "output": ["36\n"]}, {"input": "5 4\n01000\n00101\n00100\n00001\n10100\n00100\n", "output": ["31\n"]}, {"input": "5 4\n01000\n00101\n10000\n01101\n11111\n00111\n", "output": ["17\n"]}, {"input": "5 4\n01000\n00101\n00100\n00011\n10110\n00111\n", "output": ["24\n"]}, {"input": "4 4\n01100\n11101\n00100\n01101\n00100\n01111\n", "output": ["15\n"]}, {"input": "9 9\n0000100000\n0001001000\n0001001100\n0001111000\n0001001000\n0001001000\n0111000110\n1000000001\n1001001011\n0011111110\n", "output": ["158\n"]}, {"input": "4 4\n10010\n10100\n01001\n00011\n00100\n00110\n", "output": ["20\n"]}, {"input": "5 4\n11010\n00100\n00000\n00011\n10100\n01111\n", "output": ["24\n"]}, {"input": "5 4\n00000\n00101\n00100\n00001\n10101\n00011\n", "output": ["35\n"]}, {"input": "3 4\n01000\n00101\n00100\n00001\n10100\n00100\n", "output": ["25\n"]}, {"input": "5 4\n01000\n00101\n10100\n01101\n11111\n00111\n", "output": ["15\n"]}, {"input": "9 9\n0100100000\n0001001000\n0001001100\n0001111000\n0001001000\n0001001000\n0111000110\n1000000001\n1001001011\n0011111110\n", "output": ["129\n"]}, {"input": "4 4\n10010\n10100\n01001\n00011\n00100\n00111\n", "output": ["20\n"]}, {"input": "2 9\n0000110000\n0001001000\n0001000000\n0001110000\n1101000000\n0001001000\n0110000110\n1000000001\n1001001001\n0011111110\n", "output": ["101\n"]}, {"input": "5 4\n11010\n00110\n00000\n00011\n10100\n01111\n", "output": ["22\n"]}, {"input": "5 4\n00000\n00101\n00100\n10001\n10101\n00011\n", "output": ["30\n"]}, {"input": "3 4\n01001\n00101\n00100\n00001\n10100\n00100\n", "output": ["23\n"]}, {"input": "5 4\n01000\n00100\n10100\n01101\n11111\n00111\n", "output": ["23\n"]}, {"input": "4 4\n10010\n10100\n01001\n00011\n00100\n10111\n", "output": ["20\n"]}, {"input": "9 9\n0100010000\n0001001000\n0001001000\n1101111100\n0001000000\n0001001000\n0110000110\n1000000011\n1001001011\n0110111110\n", "output": ["109\n"]}, {"input": "5 4\n11000\n00110\n00000\n00011\n10100\n01111\n", "output": ["24\n"]}, {"input": "5 4\n00000\n00111\n00100\n10001\n10101\n00011\n", "output": ["28\n"]}, {"input": "3 4\n01001\n00101\n00100\n00001\n10100\n10100\n", "output": ["23\n"]}, {"input": "5 4\n01000\n00100\n10100\n01101\n01111\n00111\n", "output": ["25\n"]}, {"input": "3 4\n01100\n11111\n00100\n01101\n10100\n01111\n", "output": ["9\n"]}, {"input": "4 4\n10010\n10100\n01001\n00010\n00100\n10111\n", "output": ["22\n"]}, {"input": "9 9\n1100010000\n0001001000\n0001001000\n1101111100\n0001000000\n0001001000\n0110000110\n1000000011\n1001001011\n0110111110\n", "output": ["107\n"]}, {"input": "2 9\n0000110000\n0001001100\n0001000000\n0001110000\n1101000000\n0001001000\n0110001110\n1000000001\n1001001001\n0011111110\n", "output": ["74\n"]}], "task_id": "codecontest/12", "prompt": "Mr. Chanek's city can be represented as a plane. He wants to build a housing complex in the city.\n\nThere are some telephone poles on the plane, which is represented by a grid a of size (n + 1) \u00d7 (m + 1). You can think of the grid as a matrix with columns ranging from 0 to n and rows ranging from 0 to m. There is a telephone pole at (x, y) if a_{x, y} = 1.\n\nFor each point (x, y), define S(x, y) as the square of the Euclidean distance between the nearest pole and (x, y). Formally, the square of the Euclidean distance between two points (x_1, y_1) and (x_2, y_2) is (x_2 - x_1)^2 + (y_2 - y_1)^2.\n\nTo optimize the building plan, the project supervisor asks you the sum of all S(x, y) for each 0 \u2264 x \u2264 n and 0 \u2264 y \u2264 m. Help him by finding the value of \u2211_{x=0}^{n} {\u2211_{y=0}^{m} {S(x, y)}}. Please ensure your solution efficiently handles large input sizes.\n\nInput\n\nThe first line contains two integers n and m (0 \u2264 n, m < 2000) \u2014 the size of the grid.\n\nThen (n + 1) lines follow, each containing (m + 1) integers a_{i, j} (0 \u2264 a_{i, j} \u2264 1) \u2014 the grid denoting the positions of telephone poles in the plane. There is at least one telephone pole in the given grid.\n\nOutput\n\nOutput an integer denoting the value of \u2211_{x=0}^{n} {\u2211_{y=0}^{m} {S(x, y)}}.\n\nExamples\n\nInput\n\n\n2 2\n101\n000\n000\n\n\nOutput\n\n\n18\n\n\nInput\n\n\n5 4\n10010\n00000\n01000\n00001\n00100\n00010\n\n\nOutput\n\n\n36\n\nNote\n\n<image>\n\nIn the first example, the nearest telephone pole for the points (0,0), (1,0), (2,0), (0,1), (1,1), and (2,1) is at (0, 0). While the nearest telephone pole for the points (0, 2), (1,2), and (2,2) is at (0, 2). Thus, \u2211_{x=0}^{n} {\u2211_{y=0}^{m} {S(x, y)}} = (0 + 1 + 4) + (1 + 2 + 5) + (0 + 1 + 4) = 18.", "repair_prompt": ["Mr. Chanek's city can be represented as a plane. He wants to build a housing complex in the city.\n\nThere are some telephone poles on the plane, which is represented by a grid a of size (n + 1) \u00d7 (m + 1). You can think of the grid as a matrix with columns ranging from 0 to n and rows ranging from 0 to m. There is a telephone pole at (x, y) if a_{x, y} = 1.\n\nFor each point (x, y), define S(x, y) as the square of the Euclidean distance between the nearest pole and (x, y). Formally, the square of the Euclidean distance between two points (x_1, y_1) and (x_2, y_2) is (x_2 - x_1)^2 + (y_2 - y_1)^2.\n\nTo optimize the building plan, the project supervisor asks you the sum of all S(x, y) for each 0 \u2264 x \u2264 n and 0 \u2264 y \u2264 m. Help him by finding the value of \u2211_{x=0}^{n} {\u2211_{y=0}^{m} {S(x, y)}}. Please ensure your solution efficiently handles large input sizes.\n\nInput\n\nThe first line contains two integers n and m (0 \u2264 n, m < 2000) \u2014 the size of the grid.\n\nThen (n + 1) lines follow, each containing (m + 1) integers a_{i, j} (0 \u2264 a_{i, j} \u2264 1) \u2014 the grid denoting the positions of telephone poles in the plane. There is at least one telephone pole in the given grid.\n\nOutput\n\nOutput an integer denoting the value of \u2211_{x=0}^{n} {\u2211_{y=0}^{m} {S(x, y)}}.\n\nExamples\n\nInput\n\n\n2 2\n101\n000\n000\n\n\nOutput\n\n\n18\n\n\nInput\n\n\n5 4\n10010\n00000\n01000\n00001\n00100\n00010\n\n\nOutput\n\n\n36\n\nNote\n\n<image>\n\nIn the first example, the nearest telephone pole for the points (0,0), (1,0), (2,0), (0,1), (1,1), and (2,1) is at (0, 0). While the nearest telephone pole for the points (0, 2), (1,2), and (2,2) is at (0, 2). Thus, \u2211_{x=0}^{n} {\u2211_{y=0}^{m} {S(x, y)}} = (0 + 1 + 4) + (1 + 2 + 5) + (0 + 1 + 4) = 18.\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\nfrom typing import List\nfrom collections import deque\n\ndef calculate_sum_of_squares(grid: List[List[int]]) -> int:\n    n = len(grid) - 1\n    m = len(grid[0]) - 1\n    \n    # Directions for BFS\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    # Initialize the distance grid with -1 (unvisited)\n    distance = [[-1] * (m + 1) for _ in range(n + 1)]\n    \n    # Queue for BFS\n    queue = deque()\n    \n    # Enqueue all poles and set their distance to 0\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if grid[i][j] == 1:\n                queue.append((i, j))\n                distance[i][j] = 0\n    \n    # BFS to calculate distances\n    while queue:\n        x, y = queue.popleft()\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx <= n and 0 <= ny <= m and distance[nx][ny] == -1:\n                distance[nx][ny] = distance[x][y] + 1\n                queue.append((nx, ny))\n    \n    # Calculate the sum of squares\n    sum_of_squares = 0\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if grid[i][j] == 0:\n                sum_of_squares += distance[i][j] ** 2\n    \n    return sum_of_squares\n\n# Read input\nn, m = map(int, input().split())\ngrid = [list(map(int, input().split())) for _ in range(n + 1)]\n\n# Calculate and print the result\nresult = calculate_sum_of_squares(grid)\nprint(result)\n", "from typing import List\nfrom typing import List\nfrom collections import deque\n\ndef calculate_sum_of_squares(grid: List[List[int]]) -> int:\n    n = len(grid) - 1\n    m = len(grid[0]) - 1\n    \n    # Initialize the distance matrix with a large number\n    distance_matrix = [[float('inf')] * (m + 1) for _ in range(n + 1)]\n    \n    # Queue for BFS\n    queue = deque()\n    \n    # Add all poles to the queue and set their distances to 0\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if grid[i][j] == 1:\n                distance_matrix[i][j] = 0\n                queue.append((i, j))\n    \n    # Directions for moving in the grid\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    # BFS to calculate the distance to the nearest pole\n    while queue:\n        x, y = queue.popleft()\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx <= n and 0 <= ny <= m and distance_matrix[nx][ny] > distance_matrix[x][y] + 1:\n                distance_matrix[nx][ny] = distance_matrix[x][y] + 1\n                queue.append((nx, ny))\n    \n    # Calculate the sum of squares of distances\n    sum_of_squares = 0\n    for i in range(n + 1):\n        for j in range(m + 1):\n            sum_of_squares += distance_matrix[i][j] ** 2\n    \n    return sum_of_squares\n\n# Read input\nn, m = map(int, input().split())\ngrid = [list(map(int, input().split())) for _ in range(n + 1)]\n\n# Calculate and print the result\nresult = calculate_sum_of_squares(grid)\nprint(result)\n", "from typing import List\nfrom typing import List\n\ndef calculate_sum_of_distances(grid: List[List[int]]) -> int:\n    n = len(grid) - 1\n    m = len(grid[0]) - 1\n    \n    # Precompute the minimum distance to the nearest pole for each cell\n    min_dist = [[float('inf')] * (m + 1) for _ in range(n + 1)]\n    \n    # First pass: left to right, top to bottom\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if grid[i][j] == 1:\n                min_dist[i][j] = 0\n            elif i > 0:\n                min_dist[i][j] = min(min_dist[i][j], min_dist[i - 1][j] + 1)\n            if j > 0:\n                min_dist[i][j] = min(min_dist[i][j], min_dist[i][j - 1] + 1)\n    \n    # Second pass: right to left, bottom to top\n    for i in range(n, -1, -1):\n        for j in range(m, -1, -1):\n            if i < n:\n                min_dist[i][j] = min(min_dist[i][j], min_dist[i + 1][j] + 1)\n            if j < m:\n                min_dist[i][j] = min(min_dist[i][j], min_dist[i][j + 1] + 1)\n    \n    # Sum up the distances\n    total_distance = 0\n    for i in range(n + 1):\n        for j in range(m + 1):\n            total_distance += min_dist[i][j]\n    \n    return total_distance\n\n# Read input\nn, m = map(int, input().split())\ngrid = [list(map(int, input().split())) for _ in range(n + 1)]\n\n# Calculate and print the result\nresult = calculate_sum_of_distances(grid)\nprint(result)\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef calculate_sum_of_squares(grid: List[List[int]]) -> int:\n    n = len(grid) - 1\n    m = len(grid[0]) - 1\n    \n    # Initialize the distance grid with a large number\n    distance_grid = [[float('inf')] * (m + 1) for _ in range(n + 1)]\n    \n    # First pass: Calculate the nearest pole distance for each cell\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if grid[i][j] == 1:\n                distance_grid[i][j] = 0\n            elif i > 0:\n                distance_grid[i][j] = min(distance_grid[i][j], distance_grid[i - 1][j] + 1)\n            if j > 0:\n                distance_grid[i][j] = min(distance_grid[i][j], distance_grid[i][j - 1] + 1)\n    \n    # Second pass: Update distances considering the bottom and right neighbors\n    for i in range(n - 1, -1, -1):\n        for j in range(m - 1, -1, -1):\n            if i < n:\n                distance_grid[i][j] = min(distance_grid[i][j], distance_grid[i + 1][j] + 1)\n            if j < m:\n                distance_grid[i][j] = min(distance_grid[i][j], distance_grid[i][j + 1] + 1)\n    \n    # Calculate the sum of squares of distances\n    sum_of_squares = 0\n    for i in range(n + 1):\n        for j in range(m + 1):\n            sum_of_squares += distance_grid[i][j] ** 2\n    \n    return sum_of_squares\n\n# Read input\nn, m = map(int, input().split())\ngrid = [list(map(int, input().split())) for _ in range(n + 1)]\n\n# Calculate and print the result\nresult = calculate_sum_of_squares(grid)\nprint(result)\n", "from typing import List\nfrom typing import List\n\ndef calculate_sum_of_squares(grid: List[List[int]]) -> int:\n    n = len(grid) - 1\n    m = len(grid[0]) - 1\n    \n    # Find all positions of telephone poles\n    poles = []\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if grid[i][j] == 1:\n                poles.append((i, j))\n    \n    # Pre-compute the minimum distance to any pole for each point in the grid\n    min_distance_map = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    for x in range(n + 1):\n        for y in range(m + 1):\n            min_distance = float('inf')\n            for px, py in poles:\n                distance = (px - x) ** 2 + (py - y) ** 2\n                if distance < min_distance:\n                    min_distance = distance\n            min_distance_map[x][y] = min_distance\n    \n    # Sum up all S(x, y)\n    total_sum = 0\n    for x in range(n + 1):\n        for y in range(m + 1):\n            total_sum += min_distance_map[x][y]\n    \n    return total_sum\n\n# Read input\nn, m = map(int, input().split())\ngrid = [list(map(int, input().split())) for _ in range(n + 1)]\n\n# Calculate and print the result\nresult = calculate_sum_of_squares(grid)\nprint(result)\n", "from typing import List\nfrom typing import List\n\ndef calculate_sum_of_squares(grid: List[List[int]]) -> int:\n    n = len(grid) - 1\n    m = len(grid[0]) - 1\n    \n    # First pass: Find the nearest pole for each cell\n    nearest_pole_distance = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    for i in range(n + 1):\n        for j in range(m + 1):\n            if grid[i][j] == 1:\n                nearest_pole_distance[i][j] = 0\n            else:\n                min_distance = float('inf')\n                for x in range(n + 1):\n                    for y in range(m + 1):\n                        if grid[x][y] == 1:\n                            distance = (x - i) ** 2 + (y - j) ** 2\n                            min_distance = min(min_distance, distance)\n                nearest_pole_distance[i][j] = min_distance\n    \n    # Second pass: Sum up the squares of these distances\n    sum_of_squares = 0\n    for i in range(n + 1):\n        for j in range(m + 1):\n            sum_of_squares += nearest_pole_distance[i][j] ** 2\n    \n    return sum_of_squares\n\n# Read input\nn, m = map(int, input().split())\ngrid = [list(map(int, input().split())) for _ in range(n + 1)]\n\n# Calculate and print the result\nresult = calculate_sum_of_squares(grid)\nprint(result)\n", "from typing import List\n## main.py\n\ndef calculate_sum_of_distances(grid: list[list[int]]) -> int:\n    n = len(grid) - 1\n    m = len(grid[0]) - 1\n    \n    # Initialize the distance grid with a large value\n    distance_grid = [[float('inf')] * (m + 1) for _ in range(n + 1)]\n    \n    # Function to check if a cell is within the grid bounds\n    def is_within_bounds(x, y):\n        return 0 <= x <= n and 0 <= y <= m\n    \n    # Populate the distance grid with the minimum distances to the nearest pole\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if grid[i][j] == 1:\n                distance_grid[i][j] = 0\n            else:\n                for x in range(n + 1):\n                    for y in range(m + 1):\n                        if grid[x][y] == 1:\n                            distance = (x - i) ** 2 + (y - j) ** 2\n                            distance_grid[i][j] = min(distance_grid[i][j], distance)\n    \n    # Calculate the sum of squares of distances\n    sum_of_distances = 0\n    for i in range(n + 1):\n        for j in range(m + 1):\n            sum_of_distances += distance_grid[i][j] ** 2\n    \n    return sum_of_distances\n\n# Input interface\nn, m = map(int, input().split())\ngrid = [list(map(int, input().split())) for _ in range(n + 1)]\n\n# Output interface\nresult = calculate_sum_of_distances(grid)\nprint(result)\n", "from typing import List\nfrom typing import List\nimport sys\n\ndef calculate_sum_of_distances(grid: List[List[int]]) -> int:\n    n = len(grid) - 1\n    m = len(grid[0]) - 1\n    \n    # Initialize the distance matrix with a large value\n    distance_matrix = [[sys.maxsize] * (m + 1) for _ in range(n + 1)]\n    \n    # Function to update the distance matrix\n    def update_distance_matrix(x, y, distance):\n        if 0 <= x <= n and 0 <= y <= m:\n            distance_matrix[x][y] = min(distance_matrix[x][y], distance)\n    \n    # Pre-compute the minimum distance to the nearest pole for each cell\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if grid[i][j] == 1:\n                distance_matrix[i][j] = 0\n            else:\n                if i > 0:\n                    update_distance_matrix(i, j, distance_matrix[i - 1][j] + 1)\n                if j > 0:\n                    update_distance_matrix(i, j, distance_matrix[i][j - 1] + 1)\n                if i < n:\n                    update_distance_matrix(i, j, distance_matrix[i + 1][j] + 1)\n                if j < m:\n                    update_distance_matrix(i, j, distance_matrix[i][j + 1] + 1)\n    \n    # Recompute the distance matrix from the bottom-right to the top-left\n    for i in range(n, -1, -1):\n        for j in range(m, -1, -1):\n            if i < n:\n                distance_matrix[i][j] = min(distance_matrix[i][j], distance_matrix[i + 1][j] + 1)\n            if j < m:\n                distance_matrix[i][j] = min(distance_matrix[i][j], distance_matrix[i][j + 1] + 1)\n    \n    # Calculate the sum of all S(x, y)\n    total_distance_sum = 0\n    for i in range(n + 1):\n        for j in range(m + 1):\n            total_distance_sum += distance_matrix[i][j] ** 2\n    \n    return total_distance_sum\n\n# Read input\nn, m = map(int, input().split())\ngrid = [list(map(int, list(input().strip()))) for _ in range(n + 1)]\n\n# Calculate and print the result\nresult = calculate_sum_of_distances(grid)\nprint(result)\n", "from typing import List\n## main.py\nfrom typing import List\nimport sys\n\ndef calculate_sum_of_squares(grid: List[List[int]]) -> int:\n    n = len(grid)\n    m = len(grid[0])\n    sum_of_squares = 0\n\n    # Function to calculate the Euclidean distance squared between two points\n    def distance_squared(x1, y1, x2, y2):\n        return (x2 - x1) ** 2 + (y2 - y1) ** 2\n\n    # Pre-compute the nearest pole for each point in the grid\n    nearest_pole_distance = [[float('inf')] * (m) for _ in range(n)]\n\n    # Find the nearest pole for each point using a brute-force approach\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                nearest_pole_distance[i][j] = 0\n            else:\n                for x in range(n):\n                    for y in range(m):\n                        if grid[x][y] == 1:\n                            nearest_pole_distance[i][j] = min(nearest_pole_distance[i][j], distance_squared(i, j, x, y))\n\n    # Calculate the sum of squares of distances for each point in the grid\n    for i in range(n):\n        for j in range(m):\n            sum_of_squares += nearest_pole_distance[i][j]\n\n    return sum_of_squares\n\n# Read input from stdin\nn, m = map(int, sys.stdin.readline().split())\ngrid = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\n\n# Calculate and print the result\nresult = calculate_sum_of_squares(grid)\nprint(result)\n", "from typing import List\n## main.py\n\nimport numpy as np\nfrom typing import List\n\ndef calculate_sum_of_squares(grid: List[List[int]]) -> int:\n    n = len(grid) - 1\n    m = len(grid[0]) - 1\n    \n    # Create a distance map initialized to a large number\n    distance_map = np.full((n + 1, m + 1), np.inf)\n    \n    # Find all the poles and set their distance to 0\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if grid[i][j] == 1:\n                distance_map[i][j] = 0\n    \n    # Propagate the distances using dynamic programming\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i > 0:\n                distance_map[i][j] = min(distance_map[i][j], distance_map[i - 1][j] + 1)\n            if j > 0:\n                distance_map[i][j] = min(distance_map[i][j], distance_map[i][j - 1] + 1)\n            if i < n:\n                distance_map[i][j] = min(distance_map[i][j], distance_map[i + 1][j] + 1)\n            if j < m:\n                distance_map[i][j] = min(distance_map[i][j], distance_map[i][j + 1] + 1)\n    \n    # Calculate the sum of squares of distances\n    sum_of_squares = 0\n    for i in range(n + 1):\n        for j in range(m + 1):\n            sum_of_squares += distance_map[i][j] ** 2\n    \n    return sum_of_squares\n\n# Read input\nn, m = map(int, input().split())\ngrid = []\nfor _ in range(n + 1):\n    row = list(map(int, list(input().strip())))\n    grid.append(row)\n\n# Calculate and print the result\nresult = calculate_sum_of_squares(grid)\nprint(result)\n"], "plans": ["requirement analysis:\nThe problem requires calculating the sum of squares of distances to the nearest telephone pole for each point in a grid. The solution should be efficient enough to handle large grids without excessive computation time. The grid size is up to 2000x2000, which necessitates an optimized approach to ensure timely results.\nrequirement pool:\n- Implement an efficient algorithm to calculate the sum of squares of distances to nearest poles.\n- Ensure the solution can handle grids up to 2000x2000.\n- Provide clear documentation and comments for easy understanding and maintenance.\n- Implement error handling for invalid inputs.\n- Optimize the code for performance, focusing on large grid sizes.\nTo solve this problem efficiently, we will use a Breadth-First Search (BFS) approach to find the nearest telephone pole for each point in the grid. This method will allow us to avoid the complexity of a brute-force approach and ensure that we can handle large grids effectively. We will preprocess the grid to store the distances from each point to the nearest pole, which will be computed using BFS from each pole.\n", "requirement analysis:\nThe primary requirement is to calculate the sum of squares of distances to the nearest telephone pole for each point in the grid. The solution must be efficient enough to handle large grids without significant performance degradation. The input size is limited to 2000x2000, which allows for brute force solutions but may benefit from optimizations for larger grids.\nrequirement pool:\n- Implement a solution to calculate the sum of squares of distances to the nearest telephone pole.\n- Ensure the solution can handle grids up to 2000x2000 efficiently.\n- Optimize the solution for larger grids if necessary.\nTo efficiently calculate the sum of squares of distances to the nearest telephone pole in a grid, we will use a precomputation technique. This approach involves creating a distance matrix where each cell stores the distance to the nearest telephone pole. We will iterate over the grid, and for each cell, we will calculate the distance to the nearest pole using a breadth-first search (BFS) approach. This method ensures that we can handle large grids efficiently without significant performance degradation.\n", "requirement analysis:\nThe problem requires calculating the sum of squares of distances to the nearest pole for each point in a grid. This involves finding the minimum Euclidean distance for each point to any pole in the grid. The solution should be efficient enough to handle large grids without excessive computation time. The input is a grid with poles marked as 1s, and the output is the sum of squares of distances from each point to the nearest pole.\nrequirement pool:\n- Implement a function to calculate the distance from each point to the nearest pole.\n- Optimize the function to handle large grids efficiently.\n- Ensure the solution can be easily tested and verified.\n- Consider parallel processing for even larger grids.\n- Use Python's built-in data structures and libraries for simplicity.\nTo solve this problem efficiently, we will use a two-pass algorithm. In the first pass, we will precompute the minimum distance to the nearest pole for each cell in the grid. In the second pass, we will sum up these distances. This approach will significantly reduce the computation time compared to a brute-force method that checks each cell for its nearest pole for every possible location.\n", "requirement analysis:\nThe problem requires calculating the sum of squares of distances to the nearest telephone pole for each point in a grid. The solution should be efficient and capable of handling large grids up to 2000x2000. The approach should avoid brute-force methods and instead use a more optimized algorithm to ensure performance.\nrequirement pool:\n- Implement an efficient algorithm to calculate the sum of squares of distances to nearest poles.\n- Ensure the solution can handle large input sizes efficiently.\n- Provide clear and well-documented code.\n- Test the solution for various edge cases and large input sizes.\nTo solve this problem efficiently, we will use a two-pass algorithm that leverages the properties of the grid to minimize the number of distance calculations. The first pass will identify the nearest poles for each cell, and the second pass will sum up the squares of these distances. This approach ensures that we handle large grids efficiently without resorting to a brute-force method.\n", "requirement analysis:\nThe problem requires calculating the sum of squares of distances to the nearest telephone pole for each point in a grid. This involves finding the minimum Euclidean distance for each point to any pole in the grid. The solution should be efficient enough to handle large grids without excessive computation time. The input consists of a grid size and a grid representation of telephone poles, and the output is the sum of squares of distances for all points in the grid.\nrequirement pool:\n- Implement a function to calculate the minimum distance from each point to the nearest pole.\n- Optimize the distance calculation for large grids using efficient algorithms.\n- Ensure the solution can handle edge cases, such as grids with no poles or multiple poles at the same location.\n- Document the codebase clearly for easy understanding and maintenance.\n- Test the solution with various grid sizes and pole distributions to verify accuracy and performance.\nTo solve this problem efficiently, we will use a combination of algorithms and data structures. We will first identify the positions of all telephone poles in the grid. Then, for each point in the grid, we will calculate the Euclidean distance to the nearest pole using a brute-force approach. To optimize the process for large grids, we will use a pre-computed distance map approach, where we pre-calculate the minimum distance for each point to any pole. This will significantly reduce the computation time for large grids.\n", "requirement analysis:\nThe problem requires calculating the sum of squares of distances to the nearest telephone poles for each point in a grid. The solution should be efficient enough to handle grids up to 2000x2000, which is a significant size. The approach should avoid brute-force methods and instead use a more optimized algorithm to ensure fast computation times.\nrequirement pool:\n- Implement an efficient algorithm to calculate the sum of squares of distances to nearest poles.\n- Ensure the solution can handle grids up to 2000x2000.\n- Provide clear and well-documented code.\n- Test the solution for various grid configurations and edge cases.\n- Optimize the code for better performance.\nTo solve this problem efficiently, we will use a two-pass algorithm that leverages the properties of the grid to minimize the number of distance calculations. The first pass will identify the nearest poles for each cell, and the second pass will sum up the squares of these distances. This approach ensures that we handle large grids efficiently without resorting to a brute-force method.\n", "requirement analysis:\nThe problem requires calculating the sum of squares of distances to the nearest telephone pole for each point in a grid. This involves finding the minimum Euclidean distance for each point to any pole in the grid. The solution should be efficient enough to handle large grids (up to 2000x2000) and should be able to handle multiple test cases. The solution should be clear and well-documented to facilitate understanding and maintenance.\nrequirement pool:\n- Implement a solution that calculates the sum of squares of distances to nearest poles efficiently.\n- Ensure the solution can handle large input sizes without significant performance degradation.\n- Provide clear documentation and comments in the code.\n- Test the solution with various grid sizes and pole distributions.\n- Consider optimizing the solution further if necessary.\nTo efficiently calculate the sum of squares of distances to the nearest telephone pole in a grid, we can use a pre-computed distance map approach. This method involves creating a grid that stores the minimum distance to the nearest pole for each cell. We will use Python's efficient list operations and avoid unnecessary use of external libraries like NumPy to keep the solution lightweight and maintainable.\n", "requirement analysis:\nThe problem requires calculating the sum of squares of distances to the nearest telephone pole for each point in a grid. This involves finding the minimum Euclidean distance for each point to any pole in the grid. The solution should be efficient enough to handle large grids without significant performance degradation. The input size is up to 2000x2000, which requires careful handling of large data sets.\nrequirement pool:\n- Implement a function to calculate the minimum distance from each point to the nearest pole.\n- Optimize the function to handle large grids efficiently.\n- Ensure the solution can be easily modified for different grid sizes.\n- Provide clear documentation and comments for easy understanding.\n- Test the solution with various grid sizes to ensure performance and accuracy.\nTo solve this problem efficiently, we will use a combination of Python's built-in data structures and libraries to handle the grid and calculate the distances. We will avoid brute force methods and instead use a pre-computed approach to find the nearest pole for each point. This will involve creating a distance matrix where each cell stores the distance to the nearest pole, which can then be summed up to get the final result.\n", "requirement analysis:\nThe problem requires calculating the sum of squares of distances to the nearest telephone pole for each point in a grid. This involves finding the minimum Euclidean distance for each point to any pole, which can be efficiently handled using a spatial data structure like a KD-Tree. The solution should be optimized to handle large grids efficiently, avoiding brute force methods that would be computationally expensive.\nrequirement pool:\n- Implement a solution that efficiently calculates the minimum distance to a pole for each point in the grid.\n- Ensure the solution can handle grid sizes up to 2000x2000.\n- Optimize memory usage to support larger grids.\n- Provide clear documentation and comments for maintainability.\nTo efficiently calculate the sum of squares of distances to the nearest telephone pole for each point in a grid, we will use a spatial data structure called a KD-Tree. The KD-Tree allows us to quickly find the nearest pole for each point, which is crucial for optimizing the calculation. We will pre-compute the distances from each point to the nearest pole and store them in a grid, which will allow us to quickly retrieve the result for any point in the grid. This approach ensures that the solution can handle large input sizes efficiently without resorting to brute force methods.\n", "requirement analysis:\nThe problem requires calculating the sum of squares of distances to the nearest telephone pole for each point in a grid. The grid size can be large (up to 2000x2000), so the solution must be efficient. Pre-computed distance maps or optimized algorithms will be necessary to handle such large inputs.\nrequirement pool:\n- Implement an efficient algorithm to calculate the sum of squares of distances to nearest poles.\n- Ensure the solution can handle large input sizes efficiently.\n- Use pre-computed distance maps to optimize performance for smaller grids.\n- Consider using parallel processing for large grids.\n- Provide clear documentation and comments in the code.\nTo efficiently calculate the sum of squares of distances to the nearest telephone pole in a large grid, we will use a pre-computed distance map approach. This method involves creating a grid that stores the minimum distance to any pole for each cell. We will leverage Python's efficient handling of arrays and use the NumPy library for optimized numerical operations. The algorithm will first identify all the poles and then compute the distance to the nearest pole for each cell in the grid. This approach ensures that we can handle large grids without significant performance degradation.\n"], "scores": [], "pass_results": [false, false, false, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": false, "pass": false, "pass_num": 0, "round": 35, "examples": "\nInput\n\nThe first line contains two integers n and m (0 \u2264 n, m < 2000) \u2014 the size of the grid.\n\nThen (n + 1) lines follow, each containing (m + 1) integers a_{i, j} (0 \u2264 a_{i, j} \u2264 1) \u2014 the grid denoting the positions of telephone poles in the plane. There is at least one telephone pole in the given grid.\n\nOutput\n\nOutput an integer denoting the value of \u2211_{x=0}^{n} {\u2211_{y=0}^{m} {S(x, y)}}.\n\nExamples\n\nInput\n\n\n2 2\n101\n000\n000\n\n\nOutput\n\n\n18\n\n\nInput\n\n\n5 4\n10010\n00000\n01000\n00001\n00100\n00010\n\n\nOutput\n\n\n36\n\nNote\n\n<image>\n\nIn the first example, the nearest telephone pole for the points (0,0), (1,0), (2,0), (0,1), (1,1), and (2,1) is at (0, 0). While the nearest telephone pole for the points (0, 2), (1,2), and (2,2) is at (0, 2). Thus, \u2211_{x=0}^{n} {\u2211_{y=0}^{m} {S(x, y)}} = (0 + 1 + 4) + (1 + 2 + 5) + (0 + 1 + 4) = 18.", "mutate_method": "expand_one2two", "parent_index": 29}
