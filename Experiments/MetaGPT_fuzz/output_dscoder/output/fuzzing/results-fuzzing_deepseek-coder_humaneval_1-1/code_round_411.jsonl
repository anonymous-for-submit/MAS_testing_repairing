{"task_id": "HumanEval/136", "prompt": "def largest_smallest_integers(lst):\t\n'''Create a function that returns a tuple (a, b), where 'a' is the largest of negative integers, and 'b' is the smallest of positive integers in a list. If there is no negative or positive integers, return them as None.\nExamples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''", "entry_point": "largest_smallest_integers", "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n", "test": ["def check(largest_smallest_integers):\n\tassert largest_smallest_integers([2, 2, 6, 8, 14, 7, 8, -13]) == (-13, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-7, -3, 1, 0, 5]) == (-3, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-2, -4, 0, -5, -103, 1]) == (-2, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([2, 5, 6, 1, 7, 2, -7]) == (-7, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-3, -5, -4, -11]) == (-3, None)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([2, 9, 5, 3, 9, 4, 2]) == (None, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([3, 1, 4, 6, 3, 6]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-4, -1, -6, -3]) == (-1, None)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([6, 9, 1, 4, 5, 11]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-1, -5, -9, -10]) == (-1, None)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-1, -7, -3, -3, 4]) == (-1, 4)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([2, 2, -1, -4]) == (-1, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([2, 9, 3, 2, 3, 3]) == (None, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([2]) == (None, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-3, 0, -2, -1, -102, 6]) == (-1, 6)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([5, 3, 1, 8, 7, 9, 0]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-11, -7, -1, -3, 6]) == (-1, 6)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([5, 3, 6, 9, 4, 7, -5]) == (-5, 3)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([9, 7, 1, 2, 5, 11, -3]) == (-3, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([5]) == (None, 5)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-2, -7, -4, -3, -102, 6]) == (-2, 6)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-1, -3, -5, -6, 0]) == (-1, None)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([5, 7, 12, 9, 11, 6, 6, -4]) == (-4, 5)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-8, -8, -3, -2, 5]) == (-2, 5)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([8, 4, 3, 8, 6, 1, 10, -8]) == (-8, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([5, 5, 3, 3, 3, 4]) == (None, 3)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([4, 5, 6, 5, 8, 7, 1, -9]) == (-9, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([6, 3, 1, 6, 8, 4, 4]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([7, 2, 4, 1, 4, 11, -6]) == (-6, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([1, 3, 5, 4, 1, 10]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([11, 6, 7, 3, 6, 6, 5, -14]) == (-14, 3)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-6, -6, -6, -2, 2]) == (-2, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([8, 2, 3, 11, 6, 5, -11]) == (-11, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([6, 2, 3, 5, 5, 8, -2]) == (-2, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([9, 8, 8, 1, 3, 3, -8]) == (-8, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([1, 7, 1, 5, 3, 12, 2]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([2, 4, 1, 3, 5, 7, 0]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([4, 9, 1, 5, 5, 9]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-1, -7, -1, 1, -104, 1]) == (-1, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-6, -1, -10, -11]) == (-1, None)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([6, 1, 2, 3, 6, 2, 3]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([0, -8, -7, -8]) == (-7, None)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([4, 2, 5, 5, 9, 5, 2]) == (None, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-3, -8, -7, 0, 1]) == (-3, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([7, 4, 2, 7, 7, 5, 2]) == (None, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([1, 1, 1, 8, 4, 11]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([3, 4, 1, 9, 5, 7, -12]) == (-12, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([9, 6, 5, 6, 3, 2, -11]) == (-11, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([6, 7, 5, 7, 2, 11, 4]) == (None, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([1, 8, 1, 9, 3, 1, 3]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([3, 6, 2, 6, 10, 9]) == (None, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([3, 3, 6, 1, 4, 8, -2]) == (-2, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([3, 4, 5, 6, 1, 9, -2]) == (-2, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-5, -5, 1, 2, -95, 6]) == (-5, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-4, -3, -1, -4, -102, 4]) == (-1, 4)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([5, 2, 5, 1, 10, 7, 5]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([1]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([5, 3, 12, 7, 10, 6, 10, -12]) == (-12, 3)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-1, -3, -8, 2, -97, 3]) == (-1, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-6, -4, -4, -3, 1]) == (-3, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([2, 4, 4, 5, 10, 12, 5]) == (None, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([1, -7, -4, -11, 1]) == (-4, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([4, 7, 8, 9, 4, 5, -4]) == (-4, 4)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([1, 0, -8, -5]) == (-5, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-4, -8, -7, -3, 5]) == (-3, 5)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-1, 1, -10, -6, 1]) == (-1, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-10, -5, -8, 2, -100, 5]) == (-5, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-6, -8, -7, -11, 5]) == (-6, 5)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([]) == (None, None)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-1, -9, -1, -6, -100, 2]) == (-1, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-9, -2, -7, -6, 4]) == (-2, 4)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([5, 6, 3, 7, 9, 1, -6]) == (-6, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-3, -1, -5, -3, -102, 3]) == (-1, 3)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([4, -7, -4, -10, 1]) == (-4, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-9, -4, -3, -8, 4]) == (-3, 4)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([8, 1, 11, 9, 12, 7, 5, -11]) == (-11, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([7, 7, 7, 1, 5, 7, 5, -10]) == (-10, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([3]) == (None, 3)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([1, -1, -10, -8]) == (-1, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([0]) == (None, None)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([3, -6, -3, -9]) == (-3, 3)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([9, 2, 4, 1, 6, 5, -4]) == (-4, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-1, -3, -5, -6]) == (-1, None)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([9, 6, 4, 3, 7, 4, 4, -9]) == (-9, 3)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-4, -9, -8, 2, -100, 2]) == (-4, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([4]) == (None, 4)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-4, -8, 0, -8, 1]) == (-4, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([3, 4, 2, 7, 5, 3, 4]) == (None, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([5, 7, 3, 7, 7, 3, -1]) == (-1, 3)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-1, 2, -5, -2]) == (-1, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([1, 6, 2, 5, 7, 3]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([1, 6, 1, 9, 5, 4, 0]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([1, -3, -3, -3, 1]) == (-3, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-6, 1, -8, -3, 5]) == (-3, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-4, -6, 1, -8, 1]) == (-4, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([4, 4, 2, 5, 4, 10]) == (None, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([1, 7, 4, 3, 5, 5, 0]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([4, 4, 5, 5, 5, 6]) == (None, 4)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-7, -6, 0, -8, 1]) == (-6, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([5, 9, 6, 4, 3, 7]) == (None, 3)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([1, 5, 8, 10, 1, 2, -3]) == (-3, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-6, 0, -2, -4]) == (-2, None)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([5, 3, 5, 1, 13, 4, 5, -4]) == (-4, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-6, -8, 1, 0, -103, 5]) == (-6, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-6, -1, -3, -1, 1]) == (-1, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([2, 8, 6, 7, 1, 10, -8]) == (-8, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-3, -4, -3, -3, 5]) == (-3, 5)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([2, 3, 5, 9, 5, 9, 3]) == (None, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-3, 1, -9, -8, 2]) == (-3, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-7, -4, -5, -6, 5]) == (-4, 5)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([3, 8, 2, 5, 9, 1, 2]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-1, -7, -10, -1, 1]) == (-1, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([5, 7, 4, 3, 3, 11, 2]) == (None, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([2, 8, 13, 2, 11, 6, 10, -10]) == (-10, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-7, -8, -7, -3, 3]) == (-3, 3)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([7, 1, 4, 5, 9, 8, 3]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-2, -4, -10, -2]) == (-2, None)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([7, 9, 1, 8, 10, 6, 3]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([2, 1, 4, 9, 11, 7, 6, -7]) == (-7, 1)"], "test_case_list": ["assert largest_smallest_integers([2, 2, 6, 8, 14, 7, 8, -13]) == (-13, 2)", "assert largest_smallest_integers([-7, -3, 1, 0, 5]) == (-3, 1)", "assert largest_smallest_integers([-2, -4, 0, -5, -103, 1]) == (-2, 1)", "assert largest_smallest_integers([2, 5, 6, 1, 7, 2, -7]) == (-7, 1)", "assert largest_smallest_integers([-3, -5, -4, -11]) == (-3, None)", "assert largest_smallest_integers([2, 9, 5, 3, 9, 4, 2]) == (None, 2)", "assert largest_smallest_integers([3, 1, 4, 6, 3, 6]) == (None, 1)", "assert largest_smallest_integers([-4, -1, -6, -3]) == (-1, None)", "assert largest_smallest_integers([6, 9, 1, 4, 5, 11]) == (None, 1)", "assert largest_smallest_integers([-1, -5, -9, -10]) == (-1, None)", "assert largest_smallest_integers([-1, -7, -3, -3, 4]) == (-1, 4)", "assert largest_smallest_integers([2, 2, -1, -4]) == (-1, 2)", "assert largest_smallest_integers([2, 9, 3, 2, 3, 3]) == (None, 2)", "assert largest_smallest_integers([2]) == (None, 2)", "assert largest_smallest_integers([-3, 0, -2, -1, -102, 6]) == (-1, 6)", "assert largest_smallest_integers([5, 3, 1, 8, 7, 9, 0]) == (None, 1)", "assert largest_smallest_integers([-11, -7, -1, -3, 6]) == (-1, 6)", "assert largest_smallest_integers([5, 3, 6, 9, 4, 7, -5]) == (-5, 3)", "assert largest_smallest_integers([9, 7, 1, 2, 5, 11, -3]) == (-3, 1)", "assert largest_smallest_integers([5]) == (None, 5)", "assert largest_smallest_integers([-2, -7, -4, -3, -102, 6]) == (-2, 6)", "assert largest_smallest_integers([-1, -3, -5, -6, 0]) == (-1, None)", "assert largest_smallest_integers([5, 7, 12, 9, 11, 6, 6, -4]) == (-4, 5)", "assert largest_smallest_integers([-8, -8, -3, -2, 5]) == (-2, 5)", "assert largest_smallest_integers([8, 4, 3, 8, 6, 1, 10, -8]) == (-8, 1)", "assert largest_smallest_integers([5, 5, 3, 3, 3, 4]) == (None, 3)", "assert largest_smallest_integers([4, 5, 6, 5, 8, 7, 1, -9]) == (-9, 1)", "assert largest_smallest_integers([6, 3, 1, 6, 8, 4, 4]) == (None, 1)", "assert largest_smallest_integers([7, 2, 4, 1, 4, 11, -6]) == (-6, 1)", "assert largest_smallest_integers([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)", "assert largest_smallest_integers([1, 3, 5, 4, 1, 10]) == (None, 1)", "assert largest_smallest_integers([11, 6, 7, 3, 6, 6, 5, -14]) == (-14, 3)", "assert largest_smallest_integers([-6, -6, -6, -2, 2]) == (-2, 2)", "assert largest_smallest_integers([8, 2, 3, 11, 6, 5, -11]) == (-11, 2)", "assert largest_smallest_integers([6, 2, 3, 5, 5, 8, -2]) == (-2, 2)", "assert largest_smallest_integers([9, 8, 8, 1, 3, 3, -8]) == (-8, 1)", "assert largest_smallest_integers([1, 7, 1, 5, 3, 12, 2]) == (None, 1)", "assert largest_smallest_integers([2, 4, 1, 3, 5, 7, 0]) == (None, 1)", "assert largest_smallest_integers([4, 9, 1, 5, 5, 9]) == (None, 1)", "assert largest_smallest_integers([-1, -7, -1, 1, -104, 1]) == (-1, 1)", "assert largest_smallest_integers([-6, -1, -10, -11]) == (-1, None)", "assert largest_smallest_integers([6, 1, 2, 3, 6, 2, 3]) == (None, 1)", "assert largest_smallest_integers([0, -8, -7, -8]) == (-7, None)", "assert largest_smallest_integers([4, 2, 5, 5, 9, 5, 2]) == (None, 2)", "assert largest_smallest_integers([-3, -8, -7, 0, 1]) == (-3, 1)", "assert largest_smallest_integers([7, 4, 2, 7, 7, 5, 2]) == (None, 2)", "assert largest_smallest_integers([1, 1, 1, 8, 4, 11]) == (None, 1)", "assert largest_smallest_integers([3, 4, 1, 9, 5, 7, -12]) == (-12, 1)", "assert largest_smallest_integers([9, 6, 5, 6, 3, 2, -11]) == (-11, 2)", "assert largest_smallest_integers([6, 7, 5, 7, 2, 11, 4]) == (None, 2)", "assert largest_smallest_integers([1, 8, 1, 9, 3, 1, 3]) == (None, 1)", "assert largest_smallest_integers([3, 6, 2, 6, 10, 9]) == (None, 2)", "assert largest_smallest_integers([3, 3, 6, 1, 4, 8, -2]) == (-2, 1)", "assert largest_smallest_integers([3, 4, 5, 6, 1, 9, -2]) == (-2, 1)", "assert largest_smallest_integers([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.", "assert largest_smallest_integers([-5, -5, 1, 2, -95, 6]) == (-5, 1)", "assert largest_smallest_integers([-4, -3, -1, -4, -102, 4]) == (-1, 4)", "assert largest_smallest_integers([5, 2, 5, 1, 10, 7, 5]) == (None, 1)", "assert largest_smallest_integers([1]) == (None, 1)", "assert largest_smallest_integers([5, 3, 12, 7, 10, 6, 10, -12]) == (-12, 3)", "assert largest_smallest_integers([-1, -3, -8, 2, -97, 3]) == (-1, 2)", "assert largest_smallest_integers([-6, -4, -4, -3, 1]) == (-3, 1)", "assert largest_smallest_integers([2, 4, 4, 5, 10, 12, 5]) == (None, 2)", "assert largest_smallest_integers([1, -7, -4, -11, 1]) == (-4, 1)", "assert largest_smallest_integers([4, 7, 8, 9, 4, 5, -4]) == (-4, 4)", "assert largest_smallest_integers([1, 0, -8, -5]) == (-5, 1)", "assert largest_smallest_integers([-4, -8, -7, -3, 5]) == (-3, 5)", "assert largest_smallest_integers([-1, 1, -10, -6, 1]) == (-1, 1)", "assert largest_smallest_integers([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)", "assert largest_smallest_integers([-10, -5, -8, 2, -100, 5]) == (-5, 2)", "assert largest_smallest_integers([-6, -8, -7, -11, 5]) == (-6, 5)", "assert largest_smallest_integers([]) == (None, None)", "assert largest_smallest_integers([-1, -9, -1, -6, -100, 2]) == (-1, 2)", "assert largest_smallest_integers([-9, -2, -7, -6, 4]) == (-2, 4)", "assert largest_smallest_integers([5, 6, 3, 7, 9, 1, -6]) == (-6, 1)", "assert largest_smallest_integers([-3, -1, -5, -3, -102, 3]) == (-1, 3)", "assert largest_smallest_integers([4, -7, -4, -10, 1]) == (-4, 1)", "assert largest_smallest_integers([-9, -4, -3, -8, 4]) == (-3, 4)", "assert largest_smallest_integers([8, 1, 11, 9, 12, 7, 5, -11]) == (-11, 1)", "assert largest_smallest_integers([7, 7, 7, 1, 5, 7, 5, -10]) == (-10, 1)", "assert largest_smallest_integers([3]) == (None, 3)", "assert largest_smallest_integers([1, -1, -10, -8]) == (-1, 1)", "assert largest_smallest_integers([0]) == (None, None)", "assert largest_smallest_integers([3, -6, -3, -9]) == (-3, 3)", "assert largest_smallest_integers([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)", "assert largest_smallest_integers([9, 2, 4, 1, 6, 5, -4]) == (-4, 1)", "assert largest_smallest_integers([-1, -3, -5, -6]) == (-1, None)", "assert largest_smallest_integers([9, 6, 4, 3, 7, 4, 4, -9]) == (-9, 3)", "assert largest_smallest_integers([-4, -9, -8, 2, -100, 2]) == (-4, 2)", "assert largest_smallest_integers([4]) == (None, 4)", "assert largest_smallest_integers([-4, -8, 0, -8, 1]) == (-4, 1)", "assert largest_smallest_integers([3, 4, 2, 7, 5, 3, 4]) == (None, 2)", "assert largest_smallest_integers([5, 7, 3, 7, 7, 3, -1]) == (-1, 3)", "assert largest_smallest_integers([-1, 2, -5, -2]) == (-1, 2)", "assert largest_smallest_integers([1, 6, 2, 5, 7, 3]) == (None, 1)", "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)", "assert largest_smallest_integers([1, 6, 1, 9, 5, 4, 0]) == (None, 1)", "assert largest_smallest_integers([1, -3, -3, -3, 1]) == (-3, 1)", "assert largest_smallest_integers([-6, 1, -8, -3, 5]) == (-3, 1)", "assert largest_smallest_integers([-4, -6, 1, -8, 1]) == (-4, 1)", "assert largest_smallest_integers([4, 4, 2, 5, 4, 10]) == (None, 2)", "assert largest_smallest_integers([1, 7, 4, 3, 5, 5, 0]) == (None, 1)", "assert largest_smallest_integers([4, 4, 5, 5, 5, 6]) == (None, 4)", "assert largest_smallest_integers([-7, -6, 0, -8, 1]) == (-6, 1)", "assert largest_smallest_integers([5, 9, 6, 4, 3, 7]) == (None, 3)", "assert largest_smallest_integers([1, 5, 8, 10, 1, 2, -3]) == (-3, 1)", "assert largest_smallest_integers([-6, 0, -2, -4]) == (-2, None)", "assert largest_smallest_integers([5, 3, 5, 1, 13, 4, 5, -4]) == (-4, 1)", "assert largest_smallest_integers([-6, -8, 1, 0, -103, 5]) == (-6, 1)", "assert largest_smallest_integers([-6, -1, -3, -1, 1]) == (-1, 1)", "assert largest_smallest_integers([2, 8, 6, 7, 1, 10, -8]) == (-8, 1)", "assert largest_smallest_integers([-3, -4, -3, -3, 5]) == (-3, 5)", "assert largest_smallest_integers([2, 3, 5, 9, 5, 9, 3]) == (None, 2)", "assert largest_smallest_integers([-3, 1, -9, -8, 2]) == (-3, 1)", "assert largest_smallest_integers([-7, -4, -5, -6, 5]) == (-4, 5)", "assert largest_smallest_integers([3, 8, 2, 5, 9, 1, 2]) == (None, 1)", "assert largest_smallest_integers([-1, -7, -10, -1, 1]) == (-1, 1)", "assert largest_smallest_integers([5, 7, 4, 3, 3, 11, 2]) == (None, 2)", "assert largest_smallest_integers([2, 8, 13, 2, 11, 6, 10, -10]) == (-10, 2)", "assert largest_smallest_integers([-7, -8, -7, -3, 3]) == (-3, 3)", "assert largest_smallest_integers([7, 1, 4, 5, 9, 8, 3]) == (None, 1)", "assert largest_smallest_integers([-2, -4, -10, -2]) == (-2, None)", "assert largest_smallest_integers([7, 9, 1, 8, 10, 6, 3]) == (None, 1)", "assert largest_smallest_integers([2, 1, 4, 9, 11, 7, 6, -7]) == (-7, 1)"], "nl": "\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    ", "func": "def largest_smallest_integers(lst):", "examples": "Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    ", "completions": ["from typing import List\nfrom typing import Optional, List, Tuple\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    This function returns a tuple containing the largest negative integer and the smallest positive integer\n    from the given list. If the list is empty or contains no negative or positive integers, it returns None for\n    both values.\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        Tuple[Optional[int], Optional[int]]: A tuple containing the largest negative integer and the smallest positive integer.\n    \"\"\"\n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    \n    return (largest_negative, smallest_positive)\n", "from typing import List\n## main.py\n\nfrom typing import List, Optional, Tuple\nimport sys\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    This function takes a list of integers and returns a tuple containing the largest negative integer and the smallest positive integer.\n    If the list is empty or contains no negative or positive integers, it returns None for both values.\n    \n    Args:\n        lst (List[int]): A list of integers.\n    \n    Returns:\n        Tuple[Optional[int], Optional[int]]: A tuple containing the largest negative integer and the smallest positive integer.\n    \"\"\"\n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    \n    return (largest_negative, smallest_positive)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    This function takes a list of integers and returns a tuple containing the largest negative integer and the smallest positive integer.\n    If no such integers are found, it returns (None, None).\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        Tuple[Optional[int], Optional[int]]: A tuple containing the largest negative integer and the smallest positive integer.\n    \"\"\"\n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    \n    return (largest_negative, smallest_positive)\n", "from typing import List\nfrom typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return (largest_negative, smallest_positive)\n", "from typing import List\n## main.py\n\nfrom typing import List, Optional, Tuple\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    This function returns a tuple containing the largest negative integer and the smallest positive integer\n    from the given list. If no negative or positive integers are found, it returns (None, None).\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        Tuple[Optional[int], Optional[int]]: A tuple containing the largest negative integer and the smallest positive integer.\n    \"\"\"\n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    \n    return (largest_negative, smallest_positive)\n", "from typing import List\n## main.py\n\nfrom typing import List, Optional, Tuple\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    This function takes a list of integers and returns a tuple of optional integers.\n    The first element is the largest negative integer in the list, and the second element is the smallest positive integer.\n    If the list is empty or contains no negative or positive integers, the function returns (None, None).\n    \"\"\"\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return (largest_negative, smallest_positive)\n", "from typing import List\n## main.py\n\nfrom typing import List, Optional, Tuple\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    negative_max = None\n    positive_min = None\n\n    for num in lst:\n        if num < 0:\n            if negative_max is None or num > negative_max:\n                negative_max = num\n        elif num > 0:\n            if positive_min is None or num < positive_min:\n                positive_min = num\n\n    return (negative_max, positive_min)\n", "from typing import List\nfrom typing import List, Optional, Tuple\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    max_negative = None\n    min_positive = None\n\n    for value in lst:\n        if value < 0:\n            if max_negative is None or value > max_negative:\n                max_negative = value\n        elif value > 0:\n            if min_positive is None or value < min_positive:\n                min_positive = value\n\n    return (max_negative, min_positive)\n", "from typing import List\nfrom typing import List, Optional, Tuple\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if isinstance(num, int):\n            if num < 0:\n                if largest_negative is None or num > largest_negative:\n                    largest_negative = num\n            elif num > 0:\n                if smallest_positive is None or num < smallest_positive:\n                    smallest_positive = num\n\n    return (largest_negative, smallest_positive)\n", "from typing import List\n## main.py\n\nfrom typing import List, Optional, Tuple\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    This function takes a list of integers and returns a tuple of optional integers.\n    The tuple contains the largest negative integer and the smallest positive integer found in the list.\n    If the list is empty or contains no negative or positive integers, it returns (None, None).\n    \"\"\"\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return (largest_negative, smallest_positive)\n"], "plans": ["requirement analysis:\nThe function 'largest_smallest_integers' needs to identify the largest negative integer and the smallest positive integer in a given list. It should return None for both values if the list is empty or contains no negative or positive integers. The function should be efficient and handle edge cases appropriately.\nrequirement pool:\n- The main code should correctly identify the largest negative integer and the smallest positive integer.\n- The function should handle edge cases such as empty lists and lists with no negative or positive integers.\n- The function should be optimized for performance to handle large lists efficiently.\n- The user interface should be simple and intuitive, providing clear feedback on the results.\nTo implement the function 'largest_smallest_integers', we will use Python's built-in data structures and functions to iterate through the list efficiently. We will check for the largest negative integer by iterating from the end of the list towards the beginning, and for the smallest positive integer, we will iterate from the beginning of the list towards the end. If the list is empty or contains no negative or positive integers, we will return None for both values.\n", "requirement analysis:\nThe function 'largest_smallest_integers' needs to identify the largest negative integer and the smallest positive integer in a given list. It should return None if the list is empty or contains no negative or positive integers. The requirements are clear and straightforward, focusing on functionality and edge cases.\nrequirement pool:\n- Implement the function to find the largest negative integer and the smallest positive integer.\n- Handle edge cases such as empty lists and lists with no negative or positive integers.\n- Ensure the function is efficient and can handle large lists.\n- Provide clear and concise documentation for the function.\nTo implement the function 'largest_smallest_integers', we will use Python's built-in capabilities and the 'sys' module to handle the comparison of integers. We will iterate through the list to find the largest negative integer and the smallest positive integer. If the list is empty or contains no negative or positive integers, we will return None for both values.\n", "requirement analysis:\nThe function needs to identify the largest negative integer and the smallest positive integer in a given list. It should return None if there are no such integers. The solution should be efficient and handle edge cases like empty lists or lists with no positive or negative integers.\nrequirement pool:\n- Implement the function to correctly identify the largest negative integer and the smallest positive integer.\n- Ensure the function returns None for both values if the list contains no positive or negative integers.\n- Optimize the function for performance, especially for large lists.\n- Include error handling for unexpected input types.\nTo implement the function `largest_smallest_integers`, we will use Python's built-in capabilities and the `typing` module to ensure type hints are clear. The function will iterate through the list to find the largest negative integer and the smallest positive integer. If no such integers are found, it will return `(None, None).\n", "requirement analysis:\nThe function needs to identify the largest negative integer and the smallest positive integer in a given list. It should handle edge cases like empty lists and lists with no positive or negative integers. The solution should be efficient and clear.\nrequirement pool:\n- The main code should correctly identify the largest negative integer and the smallest positive integer.\n- The function should handle edge cases such as empty lists and lists with no positive or negative integers.\n- Ensure the function is efficient and performs well with large datasets.\n- Provide a clear and user-friendly interface for interacting with the function.\nWe will use Python's built-in capabilities to iterate through the list and check each element for its sign. This approach is efficient and leverages Python's simplicity for this task.\n", "requirement analysis:\nThe function 'largest_smallest_integers' needs to identify the largest negative integer and the smallest positive integer in a given list. It should return None for both if the list is empty or contains no negative or positive integers. The requirements are clear and straightforward, focusing on functionality and edge cases.\nrequirement pool:\n- The main code should correctly identify the largest negative integer and the smallest positive integer.\n- The function should handle edge cases such as empty lists and lists with no negative or positive integers.\n- Ensure the function is efficient and can handle large lists.\n- Provide clear and concise documentation for the function.\nTo implement the function 'largest_smallest_integers', we will use Python's built-in data structures and functions to iterate through the list efficiently. We will check for the largest negative integer by iterating from the end of the list to the beginning, and for the smallest positive integer, we will iterate from the beginning of the list to the end. This approach ensures that we can handle large lists efficiently.\n", "requirement analysis:\nThe function 'largest_smallest_integers' needs to identify the largest negative integer and the smallest positive integer in a given list. It should return None if the list is empty or contains no negative or positive integers. The function should be efficient and handle edge cases appropriately.\nrequirement pool:\n- The main code should correctly identify the largest negative integer and the smallest positive integer.\n- The function should handle edge cases such as empty lists and lists with no negative or positive integers.\n- The function should be optimized for performance to handle large lists efficiently.\n- The user interface should be simple and clear, making it easy for users to understand and use the function.\nTo implement the 'largest_smallest_integers' function efficiently, we will use Python's built-in data structures and functions. The function will iterate through the list to find the largest negative integer and the smallest positive integer. If the list is empty or contains no negative or positive integers, the function will return (None, None).\n", "requirement analysis:\nThe function 'largest_smallest_integers' needs to identify the largest negative integer and the smallest positive integer in a given list. It should return None for both values if the list is empty or contains no negative or positive integers. The function should be efficient and handle edge cases appropriately.\nrequirement pool:\n- The main code should correctly identify the largest negative integer and the smallest positive integer.\n- The function should handle edge cases such as empty lists and lists with no negative or positive integers.\n- The function should be optimized for performance to handle large lists efficiently.\n- The user interface should be simple and clear, making it easy for users to understand and use the function.\nTo implement the function 'largest_smallest_integers', we will use Python's built-in data structures and functions to iterate through the list efficiently. We will check for the largest negative integer by iterating from the end of the list to the beginning, and for the smallest positive integer, we will iterate from the beginning of the list to the end. If the list is empty or contains no negative or positive integers, the function will return (None, None).\n", "requirement analysis:\nThe function 'largest_smallest_integers' needs to identify the largest negative integer and the smallest positive integer in a given list. It should return None if the list is empty or contains no negative or positive integers. The requirements are clear and straightforward, focusing on functionality and edge cases.\nrequirement pool:\n- The main code should correctly identify the largest negative integer and the smallest positive integer.\n- The function should handle edge cases such as empty lists and lists with no negative or positive integers.\n- Ensure the function is efficient and can handle large lists.\n- Provide clear and concise documentation for the function.\nTo implement the function 'largest_smallest_integers', we will use Python's built-in capabilities to iterate through the list and compare values. We will handle edge cases such as empty lists and lists with no negative or positive integers by returning None for both values in such cases.\n", "requirement analysis:\nThe function 'largest_smallest_integers' needs to identify the largest negative integer and the smallest positive integer in a given list. It should return None if the list is empty or contains no negative or positive integers. The function should be efficient and handle edge cases appropriately.\nrequirement pool:\n- The main code should correctly identify the largest negative integer and the smallest positive integer.\n- The function should handle edge cases such as empty lists and lists with no negative or positive integers.\n- The function should be optimized for performance to handle large lists efficiently.\n- The user interface should be clean and simple, focusing on the core functionality.\nTo implement the 'largest_smallest_integers' function efficiently, we will use Python's built-in data structures and functions. The function will iterate through the list to find the largest negative integer and the smallest positive integer. If the list is empty or contains no negative or positive integers, the function will return (None, None).\n", "requirement analysis:\nThe function 'largest_smallest_integers' needs to identify the largest negative integer and the smallest positive integer in a given list. It should return None if the list is empty or contains no negative or positive integers. The function should be efficient and handle edge cases appropriately.\nrequirement pool:\n- The main code should correctly identify the largest negative integer and the smallest positive integer.\n- The function should handle edge cases such as empty lists and lists with no negative or positive integers.\n- The function should be optimized for performance to handle large lists efficiently.\n- The user interface should be clean and simple, with clear instructions and feedback.\nTo implement the 'largest_smallest_integers' function efficiently, we will use Python's built-in data structures and functions. The function will iterate through the list to find the largest negative integer and the smallest positive integer. If the list is empty or contains no negative or positive integers, the function will return (None, None).\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [124, 124, 124, 124, 124, 124, 124, 124, 124, 124], "completion": "from typing import List\n## main.py\n\nfrom typing import List, Optional, Tuple\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    This function takes a list of integers and returns a tuple of optional integers.\n    The tuple contains the largest negative integer and the smallest positive integer found in the list.\n    If the list is empty or contains no negative or positive integers, it returns (None, None).\n    \"\"\"\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return (largest_negative, smallest_positive)\n", "passed": true, "pass": true, "pass_num": 10, "round": 411, "repair_prompt": ["def largest_smallest_integers(lst):\t\n'''Create a function that returns a tuple (a, b), where 'a' is the largest of negative integers, and 'b' is the smallest of positive integers in a list. If there is no negative or positive integers, return them as None.\nExamples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''"], "mutate_method": "condense_two2one", "parent_index": 322}
