{"task_id": "HumanEval/60", "prompt": "def sum_to_n(n: int):\t\n'''sum_to_n is a function that sums numbers. It calculates the sum of numbers from 1 to n.\n>>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    '''", "entry_point": "sum_to_n", "canonical_solution": "    return sum(range(n + 1))\n", "test": ["def check(sum_to_n):\n\tassert sum_to_n(720) == 259560", "def check(sum_to_n):\n\tassert sum_to_n(609) == 185745", "def check(sum_to_n):\n\tassert sum_to_n(479) == 114960", "def check(sum_to_n):\n\tassert sum_to_n(191) == 18336", "def check(sum_to_n):\n\tassert sum_to_n(950) == 451725", "def check(sum_to_n):\n\tassert sum_to_n(1) == 1", "def check(sum_to_n):\n\tassert sum_to_n(709) == 251695", "def check(sum_to_n):\n\tassert sum_to_n(867) == 376278", "def check(sum_to_n):\n\tassert sum_to_n(379) == 72010", "def check(sum_to_n):\n\tassert sum_to_n(813) == 330891", "def check(sum_to_n):\n\tassert sum_to_n(990) == 490545", "def check(sum_to_n):\n\tassert sum_to_n(224) == 25200", "def check(sum_to_n):\n\tassert sum_to_n(774) == 299925", "def check(sum_to_n):\n\tassert sum_to_n(981) == 481671", "def check(sum_to_n):\n\tassert sum_to_n(891) == 397386", "def check(sum_to_n):\n\tassert sum_to_n(676) == 228826", "def check(sum_to_n):\n\tassert sum_to_n(20) == 210", "def check(sum_to_n):\n\tassert sum_to_n(281) == 39621", "def check(sum_to_n):\n\tassert sum_to_n(987) == 487578", "def check(sum_to_n):\n\tassert sum_to_n(982) == 482653", "def check(sum_to_n):\n\tassert sum_to_n(570) == 162735", "def check(sum_to_n):\n\tassert sum_to_n(507) == 128778", "def check(sum_to_n):\n\tassert sum_to_n(877) == 385003", "def check(sum_to_n):\n\tassert sum_to_n(30) == 465", "def check(sum_to_n):\n\tassert sum_to_n(957) == 458403", "def check(sum_to_n):\n\tassert sum_to_n(318) == 50721", "def check(sum_to_n):\n\tassert sum_to_n(666) == 222111", "def check(sum_to_n):\n\tassert sum_to_n(896) == 401856", "def check(sum_to_n):\n\tassert sum_to_n(594) == 176715", "def check(sum_to_n):\n\tassert sum_to_n(343) == 58996", "def check(sum_to_n):\n\tassert sum_to_n(714) == 255255", "def check(sum_to_n):\n\tassert sum_to_n(497) == 123753", "def check(sum_to_n):\n\tassert sum_to_n(718) == 258121", "def check(sum_to_n):\n\tassert sum_to_n(391) == 76636", "def check(sum_to_n):\n\tassert sum_to_n(60) == 1830", "def check(sum_to_n):\n\tassert sum_to_n(550) == 151525", "def check(sum_to_n):\n\tassert sum_to_n(707) == 250278", "def check(sum_to_n):\n\tassert sum_to_n(304) == 46360", "def check(sum_to_n):\n\tassert sum_to_n(54) == 1485", "def check(sum_to_n):\n\tassert sum_to_n(336) == 56616", "def check(sum_to_n):\n\tassert sum_to_n(161) == 13041", "def check(sum_to_n):\n\tassert sum_to_n(176) == 15576", "def check(sum_to_n):\n\tassert sum_to_n(361) == 65341", "def check(sum_to_n):\n\tassert sum_to_n(209) == 21945", "def check(sum_to_n):\n\tassert sum_to_n(547) == 149878", "def check(sum_to_n):\n\tassert sum_to_n(271) == 36856", "def check(sum_to_n):\n\tassert sum_to_n(6) == 21", "def check(sum_to_n):\n\tassert sum_to_n(670) == 224785", "def check(sum_to_n):\n\tassert sum_to_n(99) == 4950", "def check(sum_to_n):\n\tassert sum_to_n(964) == 465130", "def check(sum_to_n):\n\tassert sum_to_n(159) == 12720", "def check(sum_to_n):\n\tassert sum_to_n(972) == 472878", "def check(sum_to_n):\n\tassert sum_to_n(260) == 33930", "def check(sum_to_n):\n\tassert sum_to_n(426) == 90951", "def check(sum_to_n):\n\tassert sum_to_n(945) == 446985", "def check(sum_to_n):\n\tassert sum_to_n(261) == 34191", "def check(sum_to_n):\n\tassert sum_to_n(302) == 45753", "def check(sum_to_n):\n\tassert sum_to_n(247) == 30628", "def check(sum_to_n):\n\tassert sum_to_n(704) == 248160", "def check(sum_to_n):\n\tassert sum_to_n(637) == 203203", "def check(sum_to_n):\n\tassert sum_to_n(705) == 248865", "def check(sum_to_n):\n\tassert sum_to_n(904) == 409060", "def check(sum_to_n):\n\tassert sum_to_n(100) == 5050", "def check(sum_to_n):\n\tassert sum_to_n(89) == 4005", "def check(sum_to_n):\n\tassert sum_to_n(723) == 261726", "def check(sum_to_n):\n\tassert sum_to_n(968) == 468996", "def check(sum_to_n):\n\tassert sum_to_n(231) == 26796", "def check(sum_to_n):\n\tassert sum_to_n(43) == 946", "def check(sum_to_n):\n\tassert sum_to_n(943) == 445096", "def check(sum_to_n):\n\tassert sum_to_n(657) == 216153", "def check(sum_to_n):\n\tassert sum_to_n(91) == 4186", "def check(sum_to_n):\n\tassert sum_to_n(909) == 413595", "def check(sum_to_n):\n\tassert sum_to_n(213) == 22791", "def check(sum_to_n):\n\tassert sum_to_n(283) == 40186", "def check(sum_to_n):\n\tassert sum_to_n(828) == 343206", "def check(sum_to_n):\n\tassert sum_to_n(546) == 149331", "def check(sum_to_n):\n\tassert sum_to_n(979) == 479710", "def check(sum_to_n):\n\tassert sum_to_n(875) == 383250", "def check(sum_to_n):\n\tassert sum_to_n(484) == 117370", "def check(sum_to_n):\n\tassert sum_to_n(66) == 2211", "def check(sum_to_n):\n\tassert sum_to_n(931) == 433846", "def check(sum_to_n):\n\tassert sum_to_n(192) == 18528", "def check(sum_to_n):\n\tassert sum_to_n(11) == 66", "def check(sum_to_n):\n\tassert sum_to_n(947) == 448878", "def check(sum_to_n):\n\tassert sum_to_n(605) == 183315", "def check(sum_to_n):\n\tassert sum_to_n(512) == 131328", "def check(sum_to_n):\n\tassert sum_to_n(355) == 63190", "def check(sum_to_n):\n\tassert sum_to_n(700) == 245350", "def check(sum_to_n):\n\tassert sum_to_n(335) == 56280", "def check(sum_to_n):\n\tassert sum_to_n(257) == 33153", "def check(sum_to_n):\n\tassert sum_to_n(678) == 230181", "def check(sum_to_n):\n\tassert sum_to_n(802) == 322003", "def check(sum_to_n):\n\tassert sum_to_n(468) == 109746", "def check(sum_to_n):\n\tassert sum_to_n(554) == 153735", "def check(sum_to_n):\n\tassert sum_to_n(956) == 457446", "def check(sum_to_n):\n\tassert sum_to_n(611) == 186966", "def check(sum_to_n):\n\tassert sum_to_n(482) == 116403", "def check(sum_to_n):\n\tassert sum_to_n(625) == 195625", "def check(sum_to_n):\n\tassert sum_to_n(186) == 17391", "def check(sum_to_n):\n\tassert sum_to_n(46) == 1081", "def check(sum_to_n):\n\tassert sum_to_n(442) == 97903", "def check(sum_to_n):\n\tassert sum_to_n(443) == 98346"], "test_case_list": ["assert sum_to_n(720) == 259560", "assert sum_to_n(609) == 185745", "assert sum_to_n(479) == 114960", "assert sum_to_n(191) == 18336", "assert sum_to_n(950) == 451725", "assert sum_to_n(1) == 1", "assert sum_to_n(709) == 251695", "assert sum_to_n(867) == 376278", "assert sum_to_n(379) == 72010", "assert sum_to_n(813) == 330891", "assert sum_to_n(990) == 490545", "assert sum_to_n(224) == 25200", "assert sum_to_n(774) == 299925", "assert sum_to_n(981) == 481671", "assert sum_to_n(891) == 397386", "assert sum_to_n(676) == 228826", "assert sum_to_n(20) == 210", "assert sum_to_n(281) == 39621", "assert sum_to_n(987) == 487578", "assert sum_to_n(982) == 482653", "assert sum_to_n(570) == 162735", "assert sum_to_n(507) == 128778", "assert sum_to_n(877) == 385003", "assert sum_to_n(30) == 465", "assert sum_to_n(957) == 458403", "assert sum_to_n(318) == 50721", "assert sum_to_n(666) == 222111", "assert sum_to_n(896) == 401856", "assert sum_to_n(594) == 176715", "assert sum_to_n(343) == 58996", "assert sum_to_n(714) == 255255", "assert sum_to_n(497) == 123753", "assert sum_to_n(718) == 258121", "assert sum_to_n(391) == 76636", "assert sum_to_n(60) == 1830", "assert sum_to_n(550) == 151525", "assert sum_to_n(707) == 250278", "assert sum_to_n(304) == 46360", "assert sum_to_n(54) == 1485", "assert sum_to_n(336) == 56616", "assert sum_to_n(161) == 13041", "assert sum_to_n(176) == 15576", "assert sum_to_n(361) == 65341", "assert sum_to_n(209) == 21945", "assert sum_to_n(547) == 149878", "assert sum_to_n(271) == 36856", "assert sum_to_n(6) == 21", "assert sum_to_n(670) == 224785", "assert sum_to_n(99) == 4950", "assert sum_to_n(964) == 465130", "assert sum_to_n(159) == 12720", "assert sum_to_n(972) == 472878", "assert sum_to_n(260) == 33930", "assert sum_to_n(426) == 90951", "assert sum_to_n(945) == 446985", "assert sum_to_n(261) == 34191", "assert sum_to_n(302) == 45753", "assert sum_to_n(247) == 30628", "assert sum_to_n(704) == 248160", "assert sum_to_n(637) == 203203", "assert sum_to_n(705) == 248865", "assert sum_to_n(904) == 409060", "assert sum_to_n(100) == 5050", "assert sum_to_n(89) == 4005", "assert sum_to_n(723) == 261726", "assert sum_to_n(968) == 468996", "assert sum_to_n(231) == 26796", "assert sum_to_n(43) == 946", "assert sum_to_n(943) == 445096", "assert sum_to_n(657) == 216153", "assert sum_to_n(91) == 4186", "assert sum_to_n(909) == 413595", "assert sum_to_n(213) == 22791", "assert sum_to_n(283) == 40186", "assert sum_to_n(828) == 343206", "assert sum_to_n(546) == 149331", "assert sum_to_n(979) == 479710", "assert sum_to_n(875) == 383250", "assert sum_to_n(484) == 117370", "assert sum_to_n(66) == 2211", "assert sum_to_n(931) == 433846", "assert sum_to_n(192) == 18528", "assert sum_to_n(11) == 66", "assert sum_to_n(947) == 448878", "assert sum_to_n(605) == 183315", "assert sum_to_n(512) == 131328", "assert sum_to_n(355) == 63190", "assert sum_to_n(700) == 245350", "assert sum_to_n(335) == 56280", "assert sum_to_n(257) == 33153", "assert sum_to_n(678) == 230181", "assert sum_to_n(802) == 322003", "assert sum_to_n(468) == 109746", "assert sum_to_n(554) == 153735", "assert sum_to_n(956) == 457446", "assert sum_to_n(611) == 186966", "assert sum_to_n(482) == 116403", "assert sum_to_n(625) == 195625", "assert sum_to_n(186) == 17391", "assert sum_to_n(46) == 1081", "assert sum_to_n(442) == 97903", "assert sum_to_n(443) == 98346"], "nl": "sum_to_n is a function that sums numbers from 1 to n.\n    ", "func": "def sum_to_n(n: int):", "examples": ">>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    ", "completions": ["from typing import List\n## main.py\n\ndef sum_to_n(n: int) -> int:\n    \"\"\"\n    Calculate the sum of numbers from 1 to n.\n\n    Args:\n        n (int): The upper limit of the range of numbers.\n\n    Returns:\n        int: The sum of numbers from 1 to n.\n    \"\"\"\n    return n * (n + 1) // 2\n", "from typing import List\n## main.py\n\ndef sum_to_n(n: int) -> int:\n    '''\n    sum_to_n calculates the sum of numbers from 1 to n.\n    Args:\n        n (int): The upper limit of the range.\n    Returns:\n        int: The sum of numbers from 1 to n.\n    '''\n    return n * (n + 1) // 2\n", "from typing import List\n## main.py\n\ndef sum_to_n(n: int) -> int:\n    \"\"\"\n    Calculate the sum of numbers from 1 to n.\n\n    Args:\n        n (int): The upper limit of the range.\n\n    Returns:\n        int: The sum of numbers from 1 to n.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (n + 1) // 2\n", "from typing import List\n## main.py\n\ndef sum_to_n(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the first n natural numbers.\n\n    Args:\n        n (int): The number of natural numbers to sum.\n\n    Returns:\n        int: The sum of the first n natural numbers.\n    \"\"\"\n    return n * (n + 1) // 2\n", "from typing import List\n## main.py\n\ndef sum_to_n(n: int) -> int:\n    '''\n    sum_to_n is a function that calculates the sum of numbers from 1 to n.\n    Args:\n        n (int): The upper limit of the range.\n    Returns:\n        int: The sum of numbers from 1 to n.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n", "from typing import List\n## main.py\n\ndef sum_to_n(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the first n natural numbers.\n\n    Args:\n        n (int): The upper limit of the natural numbers.\n\n    Returns:\n        int: The sum of the first n natural numbers.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return (n * (n + 1)) // 2\n", "from typing import List\n## main.py\n\ndef sum_to_n(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the first n natural numbers.\n\n    Args:\n        n (int): The number of natural numbers to sum.\n\n    Returns:\n        int: The sum of the first n natural numbers.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (n + 1) // 2\n", "from typing import List\n## main.py\n\ndef sum_to_n(n: int) -> int:\n    '''\n    sum_to_n calculates the sum of numbers from 1 to n.\n    \n    Parameters:\n    n (int): The upper limit of the range.\n    \n    Returns:\n    int: The sum of all integers from 1 to n.\n    '''\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return sum(range(1, n + 1))\n", "from typing import List\n## main.py\n\ndef sum_to_n(n: int) -> int:\n    \"\"\"\n    Calculate the sum of numbers from 1 to n.\n\n    Args:\n        n (int): The upper limit of the range of numbers.\n\n    Returns:\n        int: The sum of numbers from 1 to n.\n    \"\"\"\n    return n * (n + 1) // 2\n", "from typing import List\n## main.py\n\ndef sum_to_n(n: int) -> int:\n    '''\n    sum_to_n calculates the sum of numbers from 1 to n.\n    Args:\n        n (int): The upper limit of the range.\n    Returns:\n        int: The sum of numbers from 1 to n.\n    '''\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (n + 1) // 2\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that calculates the sum of numbers from 1 to n. The function should be efficient and handle large inputs without performance issues. The documentation should clearly explain the function's purpose and usage.\nrequirement pool:\n- The main code should accurately calculate the sum of numbers from 1 to n.\n- The function should be optimized for performance to handle large inputs efficiently.\n- The function should be clearly documented to explain its purpose and usage.\n- The function should be tested for accuracy and performance.\nTo create a simple and efficient function to calculate the sum of numbers from 1 to n, we will use Python's built-in capabilities. The function will utilize the formula for the sum of the first n natural numbers, which is n(n + 1)/2. This approach is both simple and efficient, ensuring that the function can handle large inputs without performance issues.\n", "requirement analysis:\nThe original requirements specify a simple function that calculates the sum of numbers from 1 to n. The function should be efficient and handle large inputs well. The user stories focus on ensuring the function is easy to use and understand, while the competitive analysis highlights the need for a balance between performance and user experience.\nrequirement pool:\n- Implement the function to accurately calculate the sum of numbers from 1 to n.\n- Optimize the function for performance to handle large inputs efficiently.\n- Ensure the function is user-friendly and easy to understand.\n- Test and validate the function's accuracy and performance.\nTo implement the function efficiently, we will use a mathematical formula to calculate the sum of numbers from 1 to n. This approach is both simple and optimized for performance, making it suitable for handling large inputs.\n", "requirement analysis:\nThe original requirements are clear and concise, asking for a simple function that calculates the sum of numbers from 1 to n. The function should be efficient and easy to understand. The user stories highlight the importance of usability and correctness.\nrequirement pool:\n- Implement the sum_to_n function with optimal performance.\n- Ensure the function is easy to understand and use.\n- Add basic error handling for non-integer inputs.\n- Include a function to validate the input as an integer.\n- Provide a detailed docstring and examples to guide users.\nWe will use Python's built-in capabilities to implement the sum_to_n function. This approach is efficient and leverages Python's performance characteristics for arithmetic operations. The function will use a simple mathematical formula to calculate the sum of numbers from 1 to n, ensuring optimal performance.\n", "requirement analysis:\nThe original requirements specify a simple function that calculates the sum of numbers from 1 to n. The function should be efficient and handle basic use cases effectively. The user examples provided are for testing and validation of the function's correctness.\nrequirement pool:\n- The main code should accurately calculate the sum of numbers from 1 to n.\n- The function should be optimized for performance to handle large inputs efficiently.\n- The function should include clear and concise documentation for easy understanding.\n- The function should be tested with various test cases to ensure accuracy and reliability.\n- The function should be compatible with a range of programming environments.\nTo implement the function `sum_to_n(n: int)` efficiently, we will use a mathematical formula that calculates the sum of the first `n` natural numbers directly. This approach is simple and avoids the need for iterative calculations, making it both fast and memory-efficient. The formula is `n * (n + 1) / 2`, which allows us to compute the sum in constant time.\n", "requirement analysis:\nThe requirement is to create a function that calculates the sum of numbers from 1 to n. The function should be simple, efficient, and easy to understand. It should handle both small and large inputs effectively. The function should be compatible with Python's standard library, making it accessible for a wide range of users.\nrequirement pool:\n- The function should accurately calculate the sum of numbers from 1 to n.\n- The function should be optimized for performance to handle large inputs efficiently.\n- The function should be clearly documented and easy to read.\n- The function should include basic error handling for invalid inputs.\n- The function should be tested for edge cases and accuracy.\nWe will use Python's built-in capabilities to create a simple and efficient function that calculates the sum of numbers from 1 to n. This approach leverages Python's efficiency and simplicity, ensuring that the function is easy to understand and maintain.\n", "requirement analysis:\nThe requirement is to create a function that calculates the sum of numbers from 1 to n. This is a basic mathematical operation that should be efficient and easy to use. The function should handle both small and large values of n, ensuring it's reliable and fast. The implementation should be straightforward and clear, making it suitable for educational purposes and simple applications.\nrequirement pool:\n- The main code should be simple and efficient, using a direct approach to summation.\n- The function should handle edge cases, such as n=0 or negative numbers, gracefully.\n- The function should be optimized for performance, especially for large values of n.\n- The function should include clear documentation and examples to aid user understanding.\n- The function should be tested for accuracy and performance to ensure reliability.\nWe will use a straightforward approach to summation, leveraging the mathematical formula for the sum of the first n natural numbers: (n * (n + 1)) / 2. This formula is efficient and directly computes the result without the need for loops or recursion, ensuring both simplicity and performance.\n", "requirement analysis:\nThe original requirements specify a simple function that calculates the sum of numbers from 1 to n. The function should be efficient and handle basic use cases effectively. The documentation should be clear and concise to ensure easy understanding and usage.\nrequirement pool:\n- Implement the sum_to_n function with clear and concise documentation.\n- Ensure the function is optimized for performance and can handle large inputs efficiently.\n- Include test cases in the documentation to verify the function's correctness.\n- Consider adding error handling for non-integer inputs.\n- Explore potential optimizations for very large values of n.\nTo implement the `sum_to_n` function efficiently, we will use a mathematical formula that calculates the sum of the first n natural numbers directly. This approach is simple and avoids the need for iterative summation, making it both fast and memory-efficient. The function will be optimized to handle large inputs by leveraging Python's built-in capabilities for performance.\n", "requirement analysis:\nThe original requirements are clear and specific. The user wants a function that calculates the sum of numbers from 1 to n. The doctests provided offer examples of expected outputs for various inputs. The function should be simple, efficient, and easy to understand.\nrequirement pool:\n- Implement the sum_to_n function with Python's built-in sum() function for simplicity and efficiency.\n- Ensure the function is optimized for performance, handling large inputs efficiently.\n- Document the function with clear comments and examples to aid understanding.\nWe will use Python's built-in sum() function for simplicity and efficiency. This function is optimized for summing sequences of numbers and will handle large inputs efficiently. The function will be straightforward, taking an integer input and returning the sum of all integers from 1 to n.\n", "requirement analysis:\nThe requirement is to create a function that calculates the sum of numbers from 1 to n. This is a basic arithmetic function that should be simple and efficient. The function should handle any integer input and return the correct sum. Optimization for performance is crucial to ensure it can handle large inputs without slowing down.\nrequirement pool:\n- The main code should accurately calculate the sum of numbers from 1 to n.\n- The function should be optimized for performance to handle large inputs efficiently.\n- The function should be clearly documented and easy to understand.\n- The function should be tested to ensure it handles edge cases and errors correctly.\nTo create a simple and efficient function to calculate the sum of numbers from 1 to n, we will use Python's built-in capabilities. The function will utilize the formula for the sum of the first n natural numbers, which is n(n + 1)/2. This approach is both simple and efficient, ensuring that the function can handle large inputs efficiently.\n", "requirement analysis:\nThe original requirements specify a simple function that calculates the sum of numbers from 1 to n. The function should be efficient and handle basic use cases well. The user has provided several examples to demonstrate expected behavior, which will be useful for testing and validation.\nrequirement pool:\n- Implement the sum_to_n function to accurately calculate the sum of numbers from 1 to n.\n- Ensure the function is optimized for performance, especially for large values of n.\n- Include detailed docstrings and comments to enhance readability and maintainability.\n- Implement error handling to manage unexpected inputs gracefully.\n- Consider adding optional parameters for more flexibility, such as a step parameter for arithmetic sequences.\nTo implement the `sum_to_n` function efficiently and accurately, we will utilize Python's built-in capabilities, specifically focusing on leveraging the arithmetic series sum formula. This approach ensures that the function is optimized for performance, especially for large values of `n`. We will also ensure that the function is well-documented to enhance readability and maintainability.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef sum_to_n(n: int) -> int:\n    '''\n    sum_to_n calculates the sum of numbers from 1 to n.\n    Args:\n        n (int): The upper limit of the range.\n    Returns:\n        int: The sum of numbers from 1 to n.\n    '''\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (n + 1) // 2\n", "passed": true, "pass": true, "pass_num": 10, "round": 920, "repair_prompt": ["def sum_to_n(n: int):\t\n'''sum_to_n is a function that sums numbers. It calculates the sum of numbers from 1 to n.\n>>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    '''"], "mutate_method": "expand_one2two", "parent_index": 591}
