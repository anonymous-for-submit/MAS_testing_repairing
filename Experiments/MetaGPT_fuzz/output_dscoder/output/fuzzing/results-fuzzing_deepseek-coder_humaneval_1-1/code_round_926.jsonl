{"task_id": "HumanEval/58", "prompt": "def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for two lists. You should consider the elements that are repeated in both lists. Consider those elements that are present in both lists even if they appear multiple times.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "entry_point": "common", "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "test": ["def check(common):\n\tassert common([6, 5, 7, 10], [8, 4]) == []", "def check(common):\n\tassert common([6, 3, 2, 37, 657, 2, 6], [5, 9, 1, 6, 4, 654, 125]) == [6]", "def check(common):\n\tassert common([1, 6, 5, 9], [1, 6, 1]) == [1, 6]", "def check(common):\n\tassert common([8, 7, 6, 13], [7, 2]) == [7]", "def check(common):\n\tassert common([1, 1, 3, 11], [5, 3, 2]) == [3]", "def check(common):\n\tassert common([7, 8, 6, 11], [4, 5, 9]) == []", "def check(common):\n\tassert common([1, 6, 5, 34, 651, 3, 3], [7, 8, 1, 7, 9, 653, 121]) == [1]", "def check(common):\n\tassert common([6, 6, 4, 12], [3, 1]) == []", "def check(common):\n\tassert common([6, 1, 5, 36, 648, 1, 6], [3, 4, 2, 1, 12, 654, 123]) == [1]", "def check(common):\n\tassert common([6, 3, 7, 6], [3, 5, 7]) == [3, 7]", "def check(common):\n\tassert common([4, 8, 2, 9], [3, 1]) == []", "def check(common):\n\tassert common([3, 5, 5, 8], [7, 6]) == []", "def check(common):\n\tassert common([1, 8, 3, 4], [8, 7, 6]) == [8]", "def check(common):\n\tassert common([5, 2, 6, 30, 650, 7, 3], [7, 10, 2, 4, 4, 651, 126]) == [2, 7]", "def check(common):\n\tassert common([4, 6, 6, 7], [8, 6, 9]) == [6]", "def check(common):\n\tassert common([3, 7, 6, 3], [2, 4, 5]) == []", "def check(common):\n\tassert common([7, 4, 3, 10], [3, 1]) == [3]", "def check(common):\n\tassert common([3, 3, 1, 4], [4, 6, 4]) == [4]", "def check(common):\n\tassert common([4, 5, 2, 5], [1, 7, 5]) == [5]", "def check(common):\n\tassert common([5, 3, 4, 35, 652, 1, 1], [9, 6, 2, 8, 6, 653, 122]) == []", "def check(common):\n\tassert common([3, 1, 6, 11], [6, 6]) == [6]", "def check(common):\n\tassert common([7, 4, 7, 13], [8, 4]) == [4]", "def check(common):\n\tassert common([4, 4, 4, 34, 652, 5, 10], [8, 2, 1, 4, 5, 652, 117]) == [4, 5, 652]", "def check(common):\n\tassert common([2, 8, 3, 29, 650, 1, 7], [3, 6, 2, 3, 7, 652, 116]) == [2, 3, 7]", "def check(common):\n\tassert common([5, 8, 7, 3], [6, 4]) == []", "def check(common):\n\tassert common([2, 2, 1, 29, 650, 4, 2], [3, 10, 6, 2, 11, 651, 119]) == [2]", "def check(common):\n\tassert common([3, 3, 2, 30, 656, 3, 4], [6, 11, 2, 4, 4, 652, 123]) == [2, 4]", "def check(common):\n\tassert common([6, 1, 4, 33, 651, 4, 3], [4, 10, 1, 10, 12, 657, 126]) == [1, 4]", "def check(common):\n\tassert common([6, 6, 4, 5], [3, 3, 8]) == []", "def check(common):\n\tassert common([5, 5, 4, 34, 648, 5, 5], [3, 7, 6, 2, 10, 648, 116]) == [648]", "def check(common):\n\tassert common([2, 1, 7, 9], [6, 3]) == []", "def check(common):\n\tassert common([4, 1, 4, 12], [5, 1, 7]) == [1]", "def check(common):\n\tassert common([7, 6, 3, 9], [6, 5]) == [6]", "def check(common):\n\tassert common([2, 3, 3, 9], [5, 2]) == [2]", "def check(common):\n\tassert common([1, 4, 1, 32, 657, 7, 6], [4, 10, 2, 2, 4, 650, 124]) == [4]", "def check(common):\n\tassert common([8, 3, 4, 10], [8, 7]) == [8]", "def check(common):\n\tassert common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]", "def check(common):\n\tassert common([5, 2, 2, 30, 654, 5, 1], [3, 3, 2, 10, 6, 657, 126]) == [2]", "def check(common):\n\tassert common([2, 7, 4, 3], [8, 7, 5]) == [7]", "def check(common):\n\tassert common([4, 5, 7, 12], [7, 1]) == [7]", "def check(common):\n\tassert common([9, 3, 7, 4], [4, 2, 4]) == [4]", "def check(common):\n\tassert common([3, 1, 3, 10], [3, 3, 9]) == [3]", "def check(common):\n\tassert common([4, 4, 1, 37, 654, 7, 5], [3, 11, 2, 6, 9, 656, 120]) == []", "def check(common):\n\tassert common([2, 6, 2, 8], [5, 2]) == [2]", "def check(common):\n\tassert common([2, 4, 3, 12], [4, 5, 6]) == [4]", "def check(common):\n\tassert common([4, 4, 7, 8], [4, 4, 9]) == [4]", "def check(common):\n\tassert common([1, 6, 6, 12], [6, 2, 9]) == [6]", "def check(common):\n\tassert common([2, 7, 1, 4], [1, 2, 1]) == [1, 2]", "def check(common):\n\tassert common([2, 5, 6, 32, 649, 3, 9], [8, 6, 1, 4, 4, 658, 117]) == [6]", "def check(common):\n\tassert common([2, 1, 5, 37, 657, 7, 1], [4, 9, 3, 1, 12, 649, 122]) == [1]", "def check(common):\n\tassert common([5, 5, 7, 7], [5, 2]) == [5]", "def check(common):\n\tassert common([5, 3, 2, 8], [3, 2]) == [2, 3]", "def check(common):\n\tassert common([5, 4, 5, 32, 655, 6, 2], [2, 10, 4, 2, 14, 656, 117]) == [2, 4]", "def check(common):\n\tassert common([3, 4, 4, 8], [3, 3, 9]) == [3]", "def check(common):\n\tassert common([5, 2, 1, 3], [8, 3]) == [3]", "def check(common):\n\tassert common([3, 8, 3, 35, 651, 4, 2], [1, 12, 6, 10, 4, 654, 119]) == [4]", "def check(common):\n\tassert common([5, 6, 4, 8], [3, 7, 2]) == []", "def check(common):\n\tassert common([7, 7, 5, 11], [3, 4]) == []", "def check(common):\n\tassert common([4, 3, 2, 8], []) == []", "def check(common):\n\tassert common([7, 7, 7, 3], [2, 4]) == []", "def check(common):\n\tassert common([2, 9, 3, 36, 649, 6, 7], [10, 12, 4, 4, 14, 656, 116]) == []", "def check(common):\n\tassert common([3, 8, 6, 6], [4, 3, 3]) == [3]", "def check(common):\n\tassert common([1, 8, 7, 3], [2, 6]) == []", "def check(common):\n\tassert common([1, 4, 5, 11], [1, 6, 1]) == [1]", "def check(common):\n\tassert common([6, 2, 3, 8], [7, 6, 8]) == [6, 8]", "def check(common):\n\tassert common([1, 7, 4, 30, 653, 1, 1], [6, 9, 2, 2, 13, 650, 120]) == []", "def check(common):\n\tassert common([6, 8, 4, 32, 657, 7, 6], [4, 10, 1, 5, 14, 652, 120]) == [4]", "def check(common):\n\tassert common([2, 7, 7, 32, 650, 5, 6], [7, 2, 4, 3, 13, 654, 117]) == [2, 7]", "def check(common):\n\tassert common([1, 4, 7, 30, 658, 3, 10], [6, 7, 3, 10, 10, 658, 117]) == [3, 7, 10, 658]", "def check(common):\n\tassert common([8, 4, 1, 9], [6, 3]) == []", "def check(common):\n\tassert common([2, 1, 4, 37, 657, 3, 7], [8, 5, 5, 10, 7, 654, 121]) == [7]", "def check(common):\n\tassert common([9, 7, 7, 7], [5, 2]) == []", "def check(common):\n\tassert common([4, 6, 3, 31, 648, 7, 10], [1, 10, 4, 7, 7, 653, 117]) == [4, 7, 10]", "def check(common):\n\tassert common([6, 5, 2, 3], [3, 3, 3]) == [3]", "def check(common):\n\tassert common([4, 4, 1, 8], [1, 5, 7]) == [1]", "def check(common):\n\tassert common([8, 4, 6, 5], [1, 1]) == []", "def check(common):\n\tassert common([4, 5, 3, 10], [7, 5]) == [5]", "def check(common):\n\tassert common([7, 1, 7, 13], [3, 1]) == [1]", "def check(common):\n\tassert common([1, 5, 5, 29, 655, 4, 1], [5, 3, 2, 1, 5, 648, 118]) == [1, 5]", "def check(common):\n\tassert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "def check(common):\n\tassert common([7, 7, 1, 4], [5, 6]) == []", "def check(common):\n\tassert common([5, 4, 2, 36, 648, 7, 10], [6, 8, 1, 5, 11, 649, 126]) == [5]", "def check(common):\n\tassert common([8, 1, 1, 3], [5, 6]) == []", "def check(common):\n\tassert common([6, 3, 6, 3], [8, 5, 8]) == []", "def check(common):\n\tassert common([6, 8, 7, 32, 654, 7, 3], [7, 7, 2, 5, 10, 654, 123]) == [7, 654]", "def check(common):\n\tassert common([2, 2, 6, 11], [5, 6, 1]) == [6]", "def check(common):\n\tassert common([1, 4, 6, 39, 653, 4, 3], [6, 12, 2, 3, 14, 654, 116]) == [3, 6]", "def check(common):\n\tassert common([1, 3, 4, 9], [7, 3]) == [3]", "def check(common):\n\tassert common([9, 6, 6, 7], [7, 7, 1]) == [7]", "def check(common):\n\tassert common([5, 6, 2, 34, 654, 3, 7], [7, 9, 1, 7, 8, 650, 122]) == [7]", "def check(common):\n\tassert common([8, 2, 7, 4], [7, 7, 1]) == [7]", "def check(common):\n\tassert common([3, 2, 1, 37, 654, 7, 6], [2, 3, 2, 6, 4, 649, 123]) == [2, 3, 6]", "def check(common):\n\tassert common([9, 2, 7, 4], [5, 4, 1]) == [4]", "def check(common):\n\tassert common([8, 1, 4, 10], [4, 2]) == [4]", "def check(common):\n\tassert common([2, 8, 5, 10], [8, 4]) == [8]", "def check(common):\n\tassert common([8, 4, 4, 6], [3, 6]) == [6]", "def check(common):\n\tassert common([3, 6, 6, 7], [7, 4, 2]) == [7]", "def check(common):\n\tassert common([3, 4, 3, 11], [4, 1, 7]) == [4]", "def check(common):\n\tassert common([3, 1, 4, 5], [1, 1]) == [1]", "def check(common):\n\tassert common([3, 2, 5, 37, 652, 2, 3], [5, 4, 6, 7, 9, 651, 120]) == [5]"], "test_case_list": ["assert common([6, 5, 7, 10], [8, 4]) == []", "assert common([6, 3, 2, 37, 657, 2, 6], [5, 9, 1, 6, 4, 654, 125]) == [6]", "assert common([1, 6, 5, 9], [1, 6, 1]) == [1, 6]", "assert common([8, 7, 6, 13], [7, 2]) == [7]", "assert common([1, 1, 3, 11], [5, 3, 2]) == [3]", "assert common([7, 8, 6, 11], [4, 5, 9]) == []", "assert common([1, 6, 5, 34, 651, 3, 3], [7, 8, 1, 7, 9, 653, 121]) == [1]", "assert common([6, 6, 4, 12], [3, 1]) == []", "assert common([6, 1, 5, 36, 648, 1, 6], [3, 4, 2, 1, 12, 654, 123]) == [1]", "assert common([6, 3, 7, 6], [3, 5, 7]) == [3, 7]", "assert common([4, 8, 2, 9], [3, 1]) == []", "assert common([3, 5, 5, 8], [7, 6]) == []", "assert common([1, 8, 3, 4], [8, 7, 6]) == [8]", "assert common([5, 2, 6, 30, 650, 7, 3], [7, 10, 2, 4, 4, 651, 126]) == [2, 7]", "assert common([4, 6, 6, 7], [8, 6, 9]) == [6]", "assert common([3, 7, 6, 3], [2, 4, 5]) == []", "assert common([7, 4, 3, 10], [3, 1]) == [3]", "assert common([3, 3, 1, 4], [4, 6, 4]) == [4]", "assert common([4, 5, 2, 5], [1, 7, 5]) == [5]", "assert common([5, 3, 4, 35, 652, 1, 1], [9, 6, 2, 8, 6, 653, 122]) == []", "assert common([3, 1, 6, 11], [6, 6]) == [6]", "assert common([7, 4, 7, 13], [8, 4]) == [4]", "assert common([4, 4, 4, 34, 652, 5, 10], [8, 2, 1, 4, 5, 652, 117]) == [4, 5, 652]", "assert common([2, 8, 3, 29, 650, 1, 7], [3, 6, 2, 3, 7, 652, 116]) == [2, 3, 7]", "assert common([5, 8, 7, 3], [6, 4]) == []", "assert common([2, 2, 1, 29, 650, 4, 2], [3, 10, 6, 2, 11, 651, 119]) == [2]", "assert common([3, 3, 2, 30, 656, 3, 4], [6, 11, 2, 4, 4, 652, 123]) == [2, 4]", "assert common([6, 1, 4, 33, 651, 4, 3], [4, 10, 1, 10, 12, 657, 126]) == [1, 4]", "assert common([6, 6, 4, 5], [3, 3, 8]) == []", "assert common([5, 5, 4, 34, 648, 5, 5], [3, 7, 6, 2, 10, 648, 116]) == [648]", "assert common([2, 1, 7, 9], [6, 3]) == []", "assert common([4, 1, 4, 12], [5, 1, 7]) == [1]", "assert common([7, 6, 3, 9], [6, 5]) == [6]", "assert common([2, 3, 3, 9], [5, 2]) == [2]", "assert common([1, 4, 1, 32, 657, 7, 6], [4, 10, 2, 2, 4, 650, 124]) == [4]", "assert common([8, 3, 4, 10], [8, 7]) == [8]", "assert common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]", "assert common([5, 2, 2, 30, 654, 5, 1], [3, 3, 2, 10, 6, 657, 126]) == [2]", "assert common([2, 7, 4, 3], [8, 7, 5]) == [7]", "assert common([4, 5, 7, 12], [7, 1]) == [7]", "assert common([9, 3, 7, 4], [4, 2, 4]) == [4]", "assert common([3, 1, 3, 10], [3, 3, 9]) == [3]", "assert common([4, 4, 1, 37, 654, 7, 5], [3, 11, 2, 6, 9, 656, 120]) == []", "assert common([2, 6, 2, 8], [5, 2]) == [2]", "assert common([2, 4, 3, 12], [4, 5, 6]) == [4]", "assert common([4, 4, 7, 8], [4, 4, 9]) == [4]", "assert common([1, 6, 6, 12], [6, 2, 9]) == [6]", "assert common([2, 7, 1, 4], [1, 2, 1]) == [1, 2]", "assert common([2, 5, 6, 32, 649, 3, 9], [8, 6, 1, 4, 4, 658, 117]) == [6]", "assert common([2, 1, 5, 37, 657, 7, 1], [4, 9, 3, 1, 12, 649, 122]) == [1]", "assert common([5, 5, 7, 7], [5, 2]) == [5]", "assert common([5, 3, 2, 8], [3, 2]) == [2, 3]", "assert common([5, 4, 5, 32, 655, 6, 2], [2, 10, 4, 2, 14, 656, 117]) == [2, 4]", "assert common([3, 4, 4, 8], [3, 3, 9]) == [3]", "assert common([5, 2, 1, 3], [8, 3]) == [3]", "assert common([3, 8, 3, 35, 651, 4, 2], [1, 12, 6, 10, 4, 654, 119]) == [4]", "assert common([5, 6, 4, 8], [3, 7, 2]) == []", "assert common([7, 7, 5, 11], [3, 4]) == []", "assert common([4, 3, 2, 8], []) == []", "assert common([7, 7, 7, 3], [2, 4]) == []", "assert common([2, 9, 3, 36, 649, 6, 7], [10, 12, 4, 4, 14, 656, 116]) == []", "assert common([3, 8, 6, 6], [4, 3, 3]) == [3]", "assert common([1, 8, 7, 3], [2, 6]) == []", "assert common([1, 4, 5, 11], [1, 6, 1]) == [1]", "assert common([6, 2, 3, 8], [7, 6, 8]) == [6, 8]", "assert common([1, 7, 4, 30, 653, 1, 1], [6, 9, 2, 2, 13, 650, 120]) == []", "assert common([6, 8, 4, 32, 657, 7, 6], [4, 10, 1, 5, 14, 652, 120]) == [4]", "assert common([2, 7, 7, 32, 650, 5, 6], [7, 2, 4, 3, 13, 654, 117]) == [2, 7]", "assert common([1, 4, 7, 30, 658, 3, 10], [6, 7, 3, 10, 10, 658, 117]) == [3, 7, 10, 658]", "assert common([8, 4, 1, 9], [6, 3]) == []", "assert common([2, 1, 4, 37, 657, 3, 7], [8, 5, 5, 10, 7, 654, 121]) == [7]", "assert common([9, 7, 7, 7], [5, 2]) == []", "assert common([4, 6, 3, 31, 648, 7, 10], [1, 10, 4, 7, 7, 653, 117]) == [4, 7, 10]", "assert common([6, 5, 2, 3], [3, 3, 3]) == [3]", "assert common([4, 4, 1, 8], [1, 5, 7]) == [1]", "assert common([8, 4, 6, 5], [1, 1]) == []", "assert common([4, 5, 3, 10], [7, 5]) == [5]", "assert common([7, 1, 7, 13], [3, 1]) == [1]", "assert common([1, 5, 5, 29, 655, 4, 1], [5, 3, 2, 1, 5, 648, 118]) == [1, 5]", "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "assert common([7, 7, 1, 4], [5, 6]) == []", "assert common([5, 4, 2, 36, 648, 7, 10], [6, 8, 1, 5, 11, 649, 126]) == [5]", "assert common([8, 1, 1, 3], [5, 6]) == []", "assert common([6, 3, 6, 3], [8, 5, 8]) == []", "assert common([6, 8, 7, 32, 654, 7, 3], [7, 7, 2, 5, 10, 654, 123]) == [7, 654]", "assert common([2, 2, 6, 11], [5, 6, 1]) == [6]", "assert common([1, 4, 6, 39, 653, 4, 3], [6, 12, 2, 3, 14, 654, 116]) == [3, 6]", "assert common([1, 3, 4, 9], [7, 3]) == [3]", "assert common([9, 6, 6, 7], [7, 7, 1]) == [7]", "assert common([5, 6, 2, 34, 654, 3, 7], [7, 9, 1, 7, 8, 650, 122]) == [7]", "assert common([8, 2, 7, 4], [7, 7, 1]) == [7]", "assert common([3, 2, 1, 37, 654, 7, 6], [2, 3, 2, 6, 4, 649, 123]) == [2, 3, 6]", "assert common([9, 2, 7, 4], [5, 4, 1]) == [4]", "assert common([8, 1, 4, 10], [4, 2]) == [4]", "assert common([2, 8, 5, 10], [8, 4]) == [8]", "assert common([8, 4, 4, 6], [3, 6]) == [6]", "assert common([3, 6, 6, 7], [7, 4, 2]) == [7]", "assert common([3, 4, 3, 11], [4, 1, 7]) == [4]", "assert common([3, 1, 4, 5], [1, 1]) == [1]", "assert common([3, 2, 5, 37, 652, 2, 3], [5, 4, 6, 7, 9, 651, 120]) == [5]"], "nl": "Return sorted unique common elements for two lists.\n    ", "func": "def common(l1: list, l2: list):", "examples": ">>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    ", "completions": ["from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    Finds common elements between two lists, considering repeated elements.\n    \n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n        \n    Returns:\n        list: A sorted list of unique common elements.\n    \"\"\"\n    # Convert lists to sets to find intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the result to a sorted list\n    result = sorted(list(intersection))\n    \n    return result\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Return sorted unique common elements for two lists. You should consider the elements that are repeated in both lists. Consider those elements that are present in both lists even if they appear multiple times.\n    \n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n    '''\n    # Convert lists to sets to find common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    common_elements = set1.intersection(set2)\n    \n    # Convert back to list and sort\n    sorted_common_elements = sorted(list(common_elements))\n    \n    return sorted_common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    Returns a sorted list of unique common elements from two lists.\n\n    Args:\n        l1 (list): The first list of comparable elements.\n        l2 (list): The second list of comparable elements.\n\n    Returns:\n        list: A sorted list of unique common elements.\n    \"\"\"\n    # Convert lists to sets to find common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Use set intersection to find common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the result to a sorted list\n    sorted_common_elements = sorted(list(common_elements))\n    \n    return sorted_common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Returns a sorted list of unique common elements from two input lists.\n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n    Returns:\n        list: A sorted list of unique common elements.\n    '''\n    # Convert lists to sets to remove duplicates\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection back to a sorted list\n    sorted_common_elements = sorted(list(intersection))\n    \n    return sorted_common_elements\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    \"\"\"\n    Returns a sorted list of unique common elements between two lists.\n\n    Args:\n        l1 (List[int]): The first list of integers.\n        l2 (List[int]): The second list of integers.\n\n    Returns:\n        List[int]: A sorted list of unique common elements.\n    \"\"\"\n    # Convert lists to sets to remove duplicates\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection result to a sorted list\n    sorted_common_elements = sorted(list(intersection))\n    \n    return sorted_common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    This function takes two lists as input and returns a sorted list of unique common elements.\n    \n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n        \n    Returns:\n        list: A sorted list of unique common elements.\n    \"\"\"\n    # Convert lists to sets to find common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    common_elements = set1.intersection(set2)\n    \n    # Convert the result back to a list and sort it\n    sorted_common_elements = sorted(list(common_elements))\n    \n    return sorted_common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Returns sorted unique common elements for two lists.\n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n    Returns:\n        list: A sorted list of unique common elements.\n    '''\n    # Convert lists to sets to remove duplicates\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Sort the intersection result\n    sorted_common_elements = sorted(list(intersection))\n    \n    return sorted_common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    Returns a sorted list of unique common elements between two lists.\n\n    Args:\n        l1 (list): The first list of hashable objects.\n        l2 (list): The second list of hashable objects.\n\n    Returns:\n        list: A sorted list of unique common elements.\n    \"\"\"\n    # Convert lists to sets to remove duplicates\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection result to a sorted list\n    sorted_common_elements = sorted(list(intersection))\n    \n    return sorted_common_elements\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    # Convert lists to dictionaries to count occurrences\n    counter1 = {}\n    counter2 = {}\n    for item in l1:\n        counter1[item] = counter1.get(item, 0) + 1\n    for item in l2:\n        counter2[item] = counter2.get(item, 0) + 1\n\n    # Find common elements\n    common_elements = {item: min(counter1.get(item, 0), counter2.get(item, 0)) for item in set(counter1) & set(counter2)}\n\n    # Return sorted list of unique common elements\n    return sorted(list(common_elements.keys()))\n", "from typing import List\n## main.py\n\nfrom typing import List\nfrom collections import Counter\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    \"\"\"\n    Returns a list of sorted unique common elements from two lists.\n    \n    Args:\n        l1 (List[int]): The first list of integers.\n        l2 (List[int]): The second list of integers.\n    \n    Returns:\n        List[int]: A list of sorted unique common elements.\n    \"\"\"\n    # Count the occurrences of each element in both lists\n    counter1 = Counter(l1)\n    counter2 = Counter(l2)\n    \n    # Find the intersection of the two counters to get common elements\n    common_counter = counter1 & counter2\n    \n    # Extract the elements from the common counter\n    common_elements = list(common_counter.elements())\n    \n    # Sort the common elements\n    common_elements.sort()\n    \n    return common_elements\n"], "plans": ["requirement analysis:\nThe requirement is to find common elements between two lists, considering repeated elements. The solution should be efficient and handle both small and large datasets. The output should be sorted and unique.\nrequirement pool:\n- Implement a function to find common elements between two lists\n- Ensure the function returns unique and sorted common elements\n- Optimize the function for performance with large datasets\n- Develop a user-friendly interface for easy interaction\n- Ensure the application is efficient and performs well with large datasets\nTo implement the function that finds common elements between two lists, considering repeated elements, we will use Python's built-in data structures and standard library functions. The function will take two lists as input and return a sorted list of unique common elements. We will ensure efficiency by using set operations which are optimized for such tasks.\n", "requirement analysis:\nThe requirement is to find common elements between two lists, considering repeated elements. The solution should return sorted and unique results. The user expects the application to be efficient and easy to use.\nrequirement pool:\n- Implement a function to find common elements between two lists\n- Ensure the results are sorted and unique\n- Optimize the algorithm for performance\n- Develop a user-friendly interface\n- Include visual elements that enhance user experience\nTo implement the function that finds common elements between two lists, considering repeated elements and returning sorted and unique results, we will use Python's built-in data structures and standard library functions. The function will be efficient and easy to use, adhering to Python's readability and simplicity.\n", "requirement analysis:\nThe requirement is to create a function that returns sorted unique common elements from two lists. The function should handle lists with repeated elements and ensure the results are both sorted and unique. This requirement is clear and specific, aligning well with the product goals of efficiency and user-friendly interface.\nrequirement pool:\n- Implement a function to find common elements between two lists\n- Ensure the function returns unique and sorted results\n- Develop a user interface for easy input and output of lists\n- Optimize the function for performance and efficiency\nTo implement the function that returns sorted unique common elements from two lists, we will use Python's built-in data structures and standard library functions. The function will take two lists as input and return a new list containing the common elements, ensuring they are unique and sorted. We will use sets to efficiently find common elements and then convert the result to a list for the final output.\n", "requirement analysis:\nThe original requirements specify the need for a function that returns sorted unique common elements from two lists. The function should handle lists of varying lengths and ensure that common elements are unique and sorted. This aligns with the goal of creating an efficient and accurate function for this specific task.\nrequirement pool:\n- Implement a function that returns sorted unique common elements from two lists.\n- Ensure the function is optimized for performance and scalability.\n- Maintain the function's simplicity and readability.\n- Test the function with various list sizes and edge cases.\nWe will use Python's built-in data structures and set operations to efficiently find common elements between two lists. The function will first convert the lists to sets to eliminate duplicates, then find the intersection of these sets, and finally return the sorted result.\n", "requirement analysis:\nThe requirement is to create a function that returns sorted unique common elements between two lists. The function should handle lists of various sizes and types, including duplicates. The output should be sorted and unique to enhance readability and usability.\nrequirement pool:\n- The main code should efficiently find common elements between two lists.\n- The function should handle lists with duplicates and return unique common elements.\n- The output should be sorted in ascending order.\n- Implement error handling for non-list inputs.\n- Optimize the function for large lists to ensure performance.\nTo create a function that returns sorted unique common elements between two lists, we will use Python's built-in data structures and set operations. The function will first convert the lists to sets to eliminate duplicates and then find the intersection. Finally, we will convert the result back to a list, sort it, and return it.\n", "requirement analysis:\nThe requirement is to find common elements between two lists, considering repeated elements. The solution should be efficient and provide unique, sorted results. The user stories highlight the importance of ease of use and quick results.\nrequirement pool:\n- Implement a function to find common elements between two lists.\n- Ensure the function returns unique common elements.\n- Sort the common elements in ascending order.\n- Optimize the function for performance to handle large datasets.\n- Include user-friendly error handling and feedback.\nTo implement the function efficiently, we will use Python's built-in data structures and set operations. The function will take two lists as input, find the common elements, and return a sorted list of unique elements. This approach ensures that the function is both simple and scalable, making it suitable for handling large datasets.\n", "requirement analysis:\nThe original requirements call for a function that returns sorted unique common elements from two lists. The function should handle lists of varying lengths and ensure that common elements are unique and sorted. This aligns with the goal of creating an efficient and accurate function for this specific task.\nrequirement pool:\n- Implement a function that returns sorted unique common elements from two lists.\n- Ensure the function is optimized for performance and can handle lists of varying lengths.\n- Maintain the function's simplicity and readability for easy understanding and use.\n- Include error handling to manage unexpected inputs or edge cases.\n- Provide documentation and examples to guide users on how to use the function effectively.\nWe will use Python's built-in data structures and set operations to efficiently find common elements between two lists. The function will first convert the lists to sets to eliminate duplicates, then find the intersection of these sets, and finally return the sorted result.\n", "requirement analysis:\nThe requirement is to create a function that returns sorted unique common elements between two lists. The function should handle elements that are repeated in both lists and ensure that the results are both sorted and unique. This requirement is clear and specific, focusing on functionality and user experience.\nrequirement pool:\n- Implement a function that takes two lists as input and returns a sorted list of unique common elements.\n- Ensure the function considers elements that are repeated in both lists.\n- Make sure the results are sorted and unique to enhance user experience.\nTo implement the function that returns sorted unique common elements between two lists, we will use Python's built-in data structures and set operations. This approach is efficient and leverages Python's strengths in handling such tasks. We will convert each list to a set to eliminate duplicates, then find the intersection of these sets. Finally, we will convert the result back to a list and sort it.\n", "requirement analysis:\nThe requirement is to create a function that returns sorted unique common elements between two lists. The function should handle elements that are repeated in both lists and ensure that elements present in both lists, even if they appear multiple times, are considered. The solution should be efficient and easy to understand, suitable for both users and developers.\nrequirement pool:\n- The main code should efficiently find common elements between two lists.\n- The function should return sorted unique common elements.\n- The function should handle elements that are repeated in both lists.\n- The function should be easy to understand and maintain.\nTo create an efficient and user-friendly function for finding common elements between two lists, we will use Python's built-in data structures and standard library functions. The function will first convert both input lists into dictionaries to count the occurrences of each element. Then, it will find the intersection of these dictionaries to get the common elements. Finally, it will return a sorted list of unique common elements.\n", "requirement analysis:\nThe original requirements call for a function that returns sorted unique common elements from two lists. This involves identifying elements present in both lists, considering their multiplicity, and returning them in a sorted order without duplicates. The function should be efficient and handle basic list operations effectively.\nrequirement pool:\n- Implement a function that returns sorted unique common elements from two lists.\n- Ensure the function handles elements that appear multiple times in both lists.\n- Optimize the function for performance to handle large datasets efficiently.\n- Ensure the function returns results in a sorted order without duplicates.\nTo implement the function that returns sorted unique common elements from two lists, we will use Python's built-in data structures and standard library functions. The function will first convert both input lists into dictionaries to count the occurrences of each element. Then, it will find the intersection of these dictionaries to get the common elements, considering their counts. Finally, the function will sort the common elements and return them in a list.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.96], "pass_results": [true, true, true, true, true, true, true, true, true, false], "pass_test_cases_num": [100, 100, 100, 100, 100, 100, 100, 100, 100, 96], "completion": "from typing import List\n## main.py\n\nfrom typing import List\nfrom collections import Counter\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    \"\"\"\n    Returns a list of sorted unique common elements from two lists.\n    \n    Args:\n        l1 (List[int]): The first list of integers.\n        l2 (List[int]): The second list of integers.\n    \n    Returns:\n        List[int]: A list of sorted unique common elements.\n    \"\"\"\n    # Count the occurrences of each element in both lists\n    counter1 = Counter(l1)\n    counter2 = Counter(l2)\n    \n    # Find the intersection of the two counters to get common elements\n    common_counter = counter1 & counter2\n    \n    # Extract the elements from the common counter\n    common_elements = list(common_counter.elements())\n    \n    # Sort the common elements\n    common_elements.sort()\n    \n    return common_elements\n", "passed": true, "pass": true, "pass_num": 9, "round": 926, "repair_prompt": ["def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for two lists. You should consider the elements that are repeated in both lists. Consider those elements that are present in both lists even if they appear multiple times.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''"], "mutate_method": "expand_one2two", "parent_index": 46}
