{"task_id": "HumanEval/70", "prompt": "def strange_sort_list(lst):\t\n'''Given list of integers, return list in strange order. Strange sorting, is when you begin with the smallest value, then the largest from the remaining integers, then the next smallest and so on.\nExamples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''", "entry_point": "strange_sort_list", "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "test": ["def check(strange_sort_list):\n\tassert strange_sort_list([5, 1, 6, 3, 2]) == [1, 6, 2, 5, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 2, 1, 3, 5, 8, -8, -4]) == [-8, 8, -4, 5, 1, 3, 1, 2]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 8, 8, 6, 12, 5]) == [5, 12, 6, 8, 8, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 4, 6, 6]) == [4, 6, 5, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([9, 3, 5, 7]) == [3, 9, 5, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 6, 2, 12, 13]) == [2, 13, 6, 12, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 2, 4, 9, 9, 6, 7, 4]) == [2, 9, 3, 9, 4, 7, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 11, 9, 10, 9]) == [1, 11, 9, 10, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 4, 5, 1, 4]) == [1, 5, 4, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 3, 1, 6, 10]) == [1, 10, 3, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 5, 3, 4, 9, 11, 2, 3]) == [2, 11, 2, 9, 3, 5, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([9, 8, 5, 2]) == [2, 9, 5, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 2, 7, 5, 2, 4, -3, -1]) == [-3, 7, -1, 5, 2, 5, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 2, 5, 5]) == [2, 6, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([10, 10, 2, 11, 10]) == [2, 11, 10, 10, 10]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 9, 4, 2]) == [2, 9, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 2, 2, 1]) == [1, 5, 2, 2]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 2, 9, 9]) == [2, 9, 8, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 2, 6, 8, 6]) == [2, 8, 2, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 1, 8, 9, 2, 4, 8, 6]) == [1, 9, 2, 8, 2, 8, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([]) == []", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 2, 1, 4]) == [1, 6, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 2, 5, 8, 7, 2]) == [2, 8, 2, 7, 5, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 4, 1, 7, 4, 6, 3, 12]) == [1, 12, 3, 7, 3, 6, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 4, 8, 8]) == [4, 8, 4, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 4, 9, 7]) == [4, 9, 7, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 6, 6, 3]) == [1, 6, 3, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 6, 5, 7, 3, 2, -7, -6]) == [-7, 7, -6, 6, 1, 5, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 8, 10, 4, 4]) == [4, 10, 4, 8, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 4, 4, 8]) == [4, 8, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 1, 3, 4, 10, 3, 9, 5]) == [1, 10, 3, 9, 3, 5, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 6, 4, 7, 7, 3, -1, -7]) == [-7, 7, -1, 7, 3, 6, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 6, 4, 2, 9, 5, -1, -6]) == [-6, 9, -1, 6, 2, 5, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 5, 7, 3, 8, 6]) == [1, 8, 3, 7, 5, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 7, 1, 7, 4]) == [1, 7, 3, 7, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 7, 6, 6, 1, 4, -2, -5]) == [-5, 7, -2, 6, 1, 6, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([9, 3, 2, 5, 14]) == [2, 14, 3, 9, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 10, 10, 4, 13]) == [4, 13, 4, 10, 10]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 4, 3, 4]) == [2, 4, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 6, 7, 14]) == [1, 14, 1, 7, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 5, 7, 8, 5]) == [3, 8, 5, 7, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 1, 7, 5, 8]) == [1, 8, 5, 7, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 8, 1, 3, 1, 10, 5]) == [1, 10, 1, 8, 3, 6, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([10, 4, 7, 9]) == [4, 10, 7, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 2, 7, 5]) == [2, 7, 5, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 4, 5, 1, 7, 2, -3, -8]) == [-8, 7, -3, 5, 1, 5, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 3, 7, 3, 9, 11, 4, 6]) == [1, 11, 3, 9, 3, 7, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 3, 2, 2, 7, 7, 2, 7]) == [2, 7, 2, 7, 2, 7, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 1, 3, 4]) == [1, 4, 3, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 3, 6, 3, 10, -6, -1]) == [-6, 10, -1, 6, 1, 3, 1, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 3, 7, 5, 4, 10, -6, -9]) == [-9, 10, -6, 7, 2, 5, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 4, 2, 5, 12, 5]) == [2, 12, 4, 5, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 4, 1, 4, 8]) == [1, 8, 1, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 2, 7, 3]) == [1, 7, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 4, 3, 7, 9]) == [3, 9, 3, 7, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([9, 3, 9, 1]) == [1, 9, 3, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 9, 2, 6, 4]) == [2, 9, 4, 7, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 2, 4, 4, 7, 4]) == [2, 7, 2, 4, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 7, 4, 5, 14, 5]) == [4, 14, 5, 7, 5, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 4, 2, 4, 14, 5]) == [2, 14, 4, 7, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([10, 11, 9, 6, 12]) == [6, 12, 9, 11, 10]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 5, 2, 2]) == [2, 5, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 1, 2, 1]) == [1, 2, 1, 1, 1]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 1, 7, 2, 10, 7, 5, 5]) == [1, 10, 2, 7, 5, 7, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 3, 6, 3, 8, 3, 7, 4]) == [2, 8, 3, 7, 3, 6, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 6, 1, 1]) == [1, 6, 1, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 1, 3, 6, 3, 10, 7, 13]) == [1, 13, 3, 10, 3, 7, 3, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 4, 5, 8]) == [1, 8, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 2, 3, 2]) == [2, 3, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 9, 7, 9]) == [4, 9, 7, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 1, 4, 13, 10]) == [1, 13, 4, 10, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 3, 6, 6]) == [2, 6, 3, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 3, 5, 4, 9, 1, -9, -10]) == [-10, 9, -9, 5, 1, 4, 1, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 5, 5, 8, 14]) == [5, 14, 5, 8, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 9, 2, 8]) == [2, 9, 8, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 4, 5, 11, 8, 4]) == [4, 11, 4, 8, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 2, 5, 6, 6, 10, -4, -6]) == [-6, 10, -4, 6, 2, 6, 2, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 6, 12, 6, 9, 6]) == [1, 12, 6, 9, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 1, 5, 5, 9, -7, -8]) == [-8, 9, -7, 5, 1, 5, 1, 1]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 4, 3, 5, 7]) == [3, 7, 3, 5, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 5, 2, 4, 3, 6, -3, 0]) == [-3, 6, 0, 5, 2, 4, 3, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 3, 9, 5, 5]) == [3, 9, 5, 8, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 4, 6, 5, 10, 7, 5, 3]) == [1, 10, 3, 7, 4, 6, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 2, 9, 6, 5, 1]) == [1, 9, 2, 6, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 5, 5, 6, 2]) == [2, 6, 5, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 6, 1, 4]) == [1, 6, 1, 4, 1]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 2, 6, 11, 10]) == [2, 11, 6, 10, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 1, 8, 7, 9, 3, 12, 5]) == [1, 12, 3, 9, 4, 8, 5, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([10, 7, 5, 3]) == [3, 10, 5, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 6, 9]) == [5, 9, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 8, 12, 11, 11, 5]) == [5, 12, 7, 11, 8, 11]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 2, 4, 7, 2, 6, 6, 3]) == [2, 7, 2, 6, 2, 6, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 6, 12, 4, 4, 4]) == [4, 12, 4, 8, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 2, 5, 1]) == [1, 6, 2, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 7, 9, 11, 4]) == [1, 11, 4, 9, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 7, 12, 13, 8, 2]) == [2, 13, 2, 12, 7, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 7, 7, 1, 10, 3, 0, -6]) == [-6, 10, 0, 7, 1, 7, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 9, 6, 8, 11, 3]) == [3, 11, 4, 9, 6, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 3, 1, 6]) == [1, 6, 3, 4]"], "test_case_list": ["assert strange_sort_list([5, 1, 6, 3, 2]) == [1, 6, 2, 5, 3]", "assert strange_sort_list([1, 2, 1, 3, 5, 8, -8, -4]) == [-8, 8, -4, 5, 1, 3, 1, 2]", "assert strange_sort_list([8, 8, 8, 6, 12, 5]) == [5, 12, 6, 8, 8, 8]", "assert strange_sort_list([5, 6, 4, 6, 6]) == [4, 6, 5, 6, 6]", "assert strange_sort_list([9, 3, 5, 7]) == [3, 9, 5, 7]", "assert strange_sort_list([6, 6, 2, 12, 13]) == [2, 13, 6, 12, 6]", "assert strange_sort_list([3, 2, 4, 9, 9, 6, 7, 4]) == [2, 9, 3, 9, 4, 7, 4, 6]", "assert strange_sort_list([1, 11, 9, 10, 9]) == [1, 11, 9, 10, 9]", "assert strange_sort_list([4, 4, 5, 1, 4]) == [1, 5, 4, 4, 4]", "assert strange_sort_list([6, 3, 1, 6, 10]) == [1, 10, 3, 6, 6]", "assert strange_sort_list([2, 5, 3, 4, 9, 11, 2, 3]) == [2, 11, 2, 9, 3, 5, 3, 4]", "assert strange_sort_list([9, 8, 5, 2]) == [2, 9, 5, 8]", "assert strange_sort_list([5, 2, 7, 5, 2, 4, -3, -1]) == [-3, 7, -1, 5, 2, 5, 2, 4]", "assert strange_sort_list([6, 2, 5, 5]) == [2, 6, 5, 5]", "assert strange_sort_list([10, 10, 2, 11, 10]) == [2, 11, 10, 10, 10]", "assert strange_sort_list([5, 9, 4, 2]) == [2, 9, 4, 5]", "assert strange_sort_list([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]", "assert strange_sort_list([5, 2, 2, 1]) == [1, 5, 2, 2]", "assert strange_sort_list([8, 2, 9, 9]) == [2, 9, 8, 9]", "assert strange_sort_list([2, 2, 6, 8, 6]) == [2, 8, 2, 6, 6]", "assert strange_sort_list([2, 1, 8, 9, 2, 4, 8, 6]) == [1, 9, 2, 8, 2, 8, 4, 6]", "assert strange_sort_list([]) == []", "assert strange_sort_list([6, 2, 1, 4]) == [1, 6, 2, 4]", "assert strange_sort_list([7, 2, 5, 8, 7, 2]) == [2, 8, 2, 7, 5, 7]", "assert strange_sort_list([3, 4, 1, 7, 4, 6, 3, 12]) == [1, 12, 3, 7, 3, 6, 4, 4]", "assert strange_sort_list([4, 4, 8, 8]) == [4, 8, 4, 8]", "assert strange_sort_list([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.", "assert strange_sort_list([8, 4, 9, 7]) == [4, 9, 7, 8]", "assert strange_sort_list([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]", "assert strange_sort_list([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]", "assert strange_sort_list([1, 6, 6, 3]) == [1, 6, 3, 6]", "assert strange_sort_list([1, 6, 5, 7, 3, 2, -7, -6]) == [-7, 7, -6, 6, 1, 5, 2, 3]", "assert strange_sort_list([4, 8, 10, 4, 4]) == [4, 10, 4, 8, 4]", "assert strange_sort_list([6, 4, 4, 8]) == [4, 8, 4, 6]", "assert strange_sort_list([3, 1, 3, 4, 10, 3, 9, 5]) == [1, 10, 3, 9, 3, 5, 3, 4]", "assert strange_sort_list([4, 6, 4, 7, 7, 3, -1, -7]) == [-7, 7, -1, 7, 3, 6, 4, 4]", "assert strange_sort_list([2, 6, 4, 2, 9, 5, -1, -6]) == [-6, 9, -1, 6, 2, 5, 2, 4]", "assert strange_sort_list([1, 5, 7, 3, 8, 6]) == [1, 8, 3, 7, 5, 6]", "assert strange_sort_list([3, 7, 1, 7, 4]) == [1, 7, 3, 7, 4]", "assert strange_sort_list([4, 7, 6, 6, 1, 4, -2, -5]) == [-5, 7, -2, 6, 1, 6, 4, 4]", "assert strange_sort_list([9, 3, 2, 5, 14]) == [2, 14, 3, 9, 5]", "assert strange_sort_list([4, 10, 10, 4, 13]) == [4, 13, 4, 10, 10]", "assert strange_sort_list([2, 4, 3, 4]) == [2, 4, 3, 4]", "assert strange_sort_list([1, 1, 6, 7, 14]) == [1, 14, 1, 7, 6]", "assert strange_sort_list([3, 5, 7, 8, 5]) == [3, 8, 5, 7, 5]", "assert strange_sort_list([5, 1, 7, 5, 8]) == [1, 8, 5, 7, 5]", "assert strange_sort_list([5, 6, 8, 1, 3, 1, 10, 5]) == [1, 10, 1, 8, 3, 6, 5, 5]", "assert strange_sort_list([10, 4, 7, 9]) == [4, 10, 7, 9]", "assert strange_sort_list([6, 2, 7, 5]) == [2, 7, 5, 6]", "assert strange_sort_list([5, 4, 5, 1, 7, 2, -3, -8]) == [-8, 7, -3, 5, 1, 5, 2, 4]", "assert strange_sort_list([1, 3, 7, 3, 9, 11, 4, 6]) == [1, 11, 3, 9, 3, 7, 4, 6]", "assert strange_sort_list([2, 3, 2, 2, 7, 7, 2, 7]) == [2, 7, 2, 7, 2, 7, 2, 3]", "assert strange_sort_list([3, 1, 3, 4]) == [1, 4, 3, 3]", "assert strange_sort_list([1, 1, 3, 6, 3, 10, -6, -1]) == [-6, 10, -1, 6, 1, 3, 1, 3]", "assert strange_sort_list([2, 3, 7, 5, 4, 10, -6, -9]) == [-9, 10, -6, 7, 2, 5, 3, 4]", "assert strange_sort_list([5, 4, 2, 5, 12, 5]) == [2, 12, 4, 5, 5, 5]", "assert strange_sort_list([1, 4, 1, 4, 8]) == [1, 8, 1, 4, 4]", "assert strange_sort_list([1, 2, 7, 3]) == [1, 7, 2, 3]", "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]", "assert strange_sort_list([3, 4, 3, 7, 9]) == [3, 9, 3, 7, 4]", "assert strange_sort_list([9, 3, 9, 1]) == [1, 9, 3, 9]", "assert strange_sort_list([7, 9, 2, 6, 4]) == [2, 9, 4, 7, 6]", "assert strange_sort_list([2, 2, 4, 4, 7, 4]) == [2, 7, 2, 4, 4, 4]", "assert strange_sort_list([6, 7, 4, 5, 14, 5]) == [4, 14, 5, 7, 5, 6]", "assert strange_sort_list([7, 4, 2, 4, 14, 5]) == [2, 14, 4, 7, 4, 5]", "assert strange_sort_list([10, 11, 9, 6, 12]) == [6, 12, 9, 11, 10]", "assert strange_sort_list([4, 5, 2, 2]) == [2, 5, 2, 4]", "assert strange_sort_list([1, 1, 1, 2, 1]) == [1, 2, 1, 1, 1]", "assert strange_sort_list([5, 1, 7, 2, 10, 7, 5, 5]) == [1, 10, 2, 7, 5, 7, 5, 5]", "assert strange_sort_list([2, 3, 6, 3, 8, 3, 7, 4]) == [2, 8, 3, 7, 3, 6, 3, 4]", "assert strange_sort_list([4, 6, 1, 1]) == [1, 6, 1, 4]", "assert strange_sort_list([3, 1, 3, 6, 3, 10, 7, 13]) == [1, 13, 3, 10, 3, 7, 3, 6]", "assert strange_sort_list([1, 4, 5, 8]) == [1, 8, 4, 5]", "assert strange_sort_list([3, 2, 3, 2]) == [2, 3, 2, 3]", "assert strange_sort_list([4, 9, 7, 9]) == [4, 9, 7, 9]", "assert strange_sort_list([7, 1, 4, 13, 10]) == [1, 13, 4, 10, 7]", "assert strange_sort_list([2, 3, 6, 6]) == [2, 6, 3, 6]", "assert strange_sort_list([1, 3, 5, 4, 9, 1, -9, -10]) == [-10, 9, -9, 5, 1, 4, 1, 3]", "assert strange_sort_list([5, 5, 5, 8, 14]) == [5, 14, 5, 8, 5]", "assert strange_sort_list([8, 9, 2, 8]) == [2, 9, 8, 8]", "assert strange_sort_list([4, 4, 5, 11, 8, 4]) == [4, 11, 4, 8, 4, 5]", "assert strange_sort_list([2, 2, 5, 6, 6, 10, -4, -6]) == [-6, 10, -4, 6, 2, 6, 2, 5]", "assert strange_sort_list([1, 6, 12, 6, 9, 6]) == [1, 12, 6, 9, 6, 6]", "assert strange_sort_list([1, 1, 1, 5, 5, 9, -7, -8]) == [-8, 9, -7, 5, 1, 5, 1, 1]", "assert strange_sort_list([3, 4, 3, 5, 7]) == [3, 7, 3, 5, 4]", "assert strange_sort_list([3, 5, 2, 4, 3, 6, -3, 0]) == [-3, 6, 0, 5, 2, 4, 3, 3]", "assert strange_sort_list([8, 3, 9, 5, 5]) == [3, 9, 5, 8, 5]", "assert strange_sort_list([1, 4, 6, 5, 10, 7, 5, 3]) == [1, 10, 3, 7, 4, 6, 5, 5]", "assert strange_sort_list([4, 2, 9, 6, 5, 1]) == [1, 9, 2, 6, 4, 5]", "assert strange_sort_list([5, 5, 5, 6, 2]) == [2, 6, 5, 5, 5]", "assert strange_sort_list([1, 1, 6, 1, 4]) == [1, 6, 1, 4, 1]", "assert strange_sort_list([7, 2, 6, 11, 10]) == [2, 11, 6, 10, 7]", "assert strange_sort_list([4, 1, 8, 7, 9, 3, 12, 5]) == [1, 12, 3, 9, 4, 8, 5, 7]", "assert strange_sort_list([10, 7, 5, 3]) == [3, 10, 5, 7]", "assert strange_sort_list([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]", "assert strange_sort_list([5, 6, 6, 9]) == [5, 9, 6, 6]", "assert strange_sort_list([7, 8, 12, 11, 11, 5]) == [5, 12, 7, 11, 8, 11]", "assert strange_sort_list([2, 2, 4, 7, 2, 6, 6, 3]) == [2, 7, 2, 6, 2, 6, 3, 4]", "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert strange_sort_list([8, 6, 12, 4, 4, 4]) == [4, 12, 4, 8, 4, 6]", "assert strange_sort_list([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]", "assert strange_sort_list([6, 2, 5, 1]) == [1, 6, 2, 5]", "assert strange_sort_list([1, 7, 9, 11, 4]) == [1, 11, 4, 9, 7]", "assert strange_sort_list([2, 7, 12, 13, 8, 2]) == [2, 13, 2, 12, 7, 8]", "assert strange_sort_list([4, 7, 7, 1, 10, 3, 0, -6]) == [-6, 10, 0, 7, 1, 7, 3, 4]", "assert strange_sort_list([4, 9, 6, 8, 11, 3]) == [3, 11, 4, 9, 6, 8]", "assert strange_sort_list([4, 3, 1, 6]) == [1, 6, 3, 4]"], "nl": "\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    ", "func": "def strange_sort_list(lst):", "examples": "Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    ", "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    \"\"\"\n    Sorts the list in a 'strange' order where the smallest elements are in the middle.\n    \n    Args:\n        lst (List[int]): The list of integers to be sorted.\n    \n    Returns:\n        List[int]: The sorted list in the specified 'strange' order.\n    \"\"\"\n    if not lst:\n        return []\n    \n    lst.sort()\n    sorted_lst = []\n    mid = len(lst) // 2\n    \n    for i in range(mid):\n        sorted_lst.append(lst[i])\n        sorted_lst.append(lst[-(i + 1)])\n    \n    if len(lst) % 2 != 0:\n        sorted_lst.append(lst[mid])\n    \n    return sorted_lst\n\n# Example usage:\n# sorted_list = strange_sort_list([4, 3, 2, 1])\n# print(sorted_list)  # Output: [1, 4, 2, 3]\n", "from typing import List\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    '''Given list of integers, return list in strange order.'''\n    # Sort the list in ascending order\n    sorted_lst = sorted(lst)\n    \n    # Initialize the result list\n    result = []\n    \n    # Use two pointers to alternate between smallest and largest values\n    left = 0\n    right = len(sorted_lst) - 1\n    \n    while left <= right:\n        # Append the smallest value\n        result.append(sorted_lst[left])\n        left += 1\n        \n        # Append the largest value if there are still elements to consider\n        if left <= right:\n            result.append(sorted_lst[right])\n            right -= 1\n    \n    return result\n", "from typing import List\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    '''\n    Given a list of integers, return the list sorted in a 'strange' order.\n    The 'strange' order starts with the smallest value, followed by the largest from the remaining integers,\n    then the next smallest, and so on.\n    \n    Args:\n        lst (List[int]): The list of integers to be sorted.\n    \n    Returns:\n        List[int]: The list sorted in the 'strange' order.\n    '''\n    if not lst:\n        return []\n    \n    lst.sort()\n    result = []\n    left = 0\n    right = len(lst) - 1\n    \n    while left <= right:\n        if left == right:\n            result.append(lst[left])\n        else:\n            result.append(lst[left])\n            result.append(lst[right])\n        left += 1\n        right -= 1\n    \n    return result\n", "from typing import List\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    '''Given list of integers, return list in strange order. Strange sorting is when you begin with the smallest value, then the largest from the remaining integers, then the next smallest and so on. Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    sorted_lst = sorted(lst)\n    result = []\n    left = 0\n    right = len(sorted_lst) - 1\n\n    while left <= right:\n        if left == right:\n            result.append(sorted_lst[left])\n        else:\n            result.append(sorted_lst[left])\n            result.append(sorted_lst[right])\n        left += 1\n        right -= 1\n\n    return result\n\n# Example usage:\n# print(strange_sort_list([1, 2, 3, 4]))  # Output: [1, 4, 2, 3]\n# print(strange_sort_list([5, 5, 5, 5]))  # Output: [5, 5, 5, 5]\n# print(strange_sort_list([]))            # Output: []\n", "from typing import List\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    '''\n    Given list of integers, return list in strange order. Strange sorting involves starting with the smallest value, then the largest from the remaining integers, then the next smallest, and so on.\n    Args:\n        lst (List[int]): The list of integers to be sorted.\n    Returns:\n        List[int]: The list sorted in the specified 'strange' order.\n    '''\n    if not lst:\n        return []\n\n    # Sort the list in ascending order\n    sorted_lst = sorted(lst)\n    \n    # Initialize the result list\n    result = []\n    \n    # Initialize two pointers, one at the start and one at the end of the sorted list\n    left, right = 0, len(sorted_lst) - 1\n    \n    # Alternate between adding the element at the start pointer and the end pointer to the result list\n    while left <= right:\n        if left == right:\n            result.append(sorted_lst[left])\n        else:\n            result.append(sorted_lst[left])\n            result.append(sorted_lst[right])\n        left += 1\n        right -= 1\n    \n    return result\n", "from typing import List\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    '''Given list of integers, return list in strange order. Strange sorting is when you begin with the smallest value, then the largest from the remaining integers, then the next smallest and so on. Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    \n    lst.sort()\n    result = []\n    start, end = 0, len(lst) - 1\n    \n    while start <= end:\n        if start == end:\n            result.append(lst[start])\n        else:\n            result.append(lst[start])\n            result.append(lst[end])\n        start += 1\n        end -= 1\n    \n    return result\n", "from typing import List\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    \"\"\"\n    Sorts the list in ascending order and then interleaves the smallest and largest values.\n    \n    Args:\n        lst (List[int]): The list of integers to be sorted.\n    \n    Returns:\n        List[int]: The list with a strange sort applied.\n    \"\"\"\n    if not lst:\n        return []\n    \n    lst.sort()\n    result = []\n    left, right = 0, len(lst) - 1\n    \n    while left <= right:\n        if left == right:\n            result.append(lst[left])\n        else:\n            result.append(lst[left])\n            result.append(lst[right])\n        left += 1\n        right -= 1\n    \n    return result\n", "from typing import List\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    \"\"\"\n    Sorts a list of integers in a 'strange' order: smallest, largest, second smallest, second largest, and so on.\n    \n    Args:\n        lst (List[int]): The list of integers to be sorted.\n        \n    Returns:\n        List[int]: The list of integers sorted in the 'strange' order.\n    \"\"\"\n    if not lst:\n        return []\n    \n    sorted_lst = sorted(lst)\n    sorted_list = []\n    left, right = 0, len(sorted_lst) - 1\n    \n    while left <= right:\n        if left == right:\n            sorted_list.append(sorted_lst[left])\n        else:\n            sorted_list.append(sorted_lst[left])\n            sorted_list.append(sorted_lst[right])\n        left += 1\n        right -= 1\n    \n    return sorted_list\n", "from typing import List\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    \"\"\"\n    Sorts the list in a specific pattern: alternating between the smallest and largest remaining values.\n    \n    Args:\n        lst (List[int]): The list of integers to be sorted.\n        \n    Returns:\n        List[int]: The sorted list following the specific pattern.\n    \"\"\"\n    if not lst:\n        return []\n    \n    sorted_lst = sorted(lst)\n    result = []\n    left, right = 0, len(sorted_lst) - 1\n    \n    while left <= right:\n        if left == right:\n            result.append(sorted_lst[left])\n        else:\n            result.append(sorted_lst[left])\n            result.append(sorted_lst[right])\n        left += 1\n        right -= 1\n    \n    return result\n\n# Example usage:\n# print(strange_sort_list([1, 2, 3, 4]))  # Output: [1, 4, 2, 3]\n", "from typing import List\nfrom typing import List\nimport heapq\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    \"\"\"\n    Sorts the input list in a 'strange' order, alternately picking the smallest and largest remaining values.\n    \n    Args:\n        lst (List[int]): The list of integers to be sorted.\n        \n    Returns:\n        List[int]: The list sorted in the 'strange' order.\n    \"\"\"\n    if not lst:\n        return []\n    \n    # Sort the list to easily access the smallest and largest values\n    sorted_lst = sorted(lst)\n    result = []\n    \n    # Initialize two pointers\n    left = 0\n    right = len(sorted_lst) - 1\n    \n    # Use a two-pointer approach to alternately pick the smallest and largest remaining values\n    while left <= right:\n        if left <= right:\n            result.append(sorted_lst[left])\n            left += 1\n        if left <= right:\n            result.append(sorted_lst[right])\n            right -= 1\n    \n    return result\n\n# Example usage:\n# lst = [3, 1, 2, 4]\n# print(strange_sort_list(lst))  # Output: [1, 4, 2, 3]\n"], "plans": ["requirement analysis:\nThe requirement is to implement a sorting algorithm that follows a 'strange' order, starting with the smallest value, then the largest from the remaining integers, then the next smallest, and so on. This requires a custom sorting approach that alternates between the smallest and largest values. The algorithm should handle various edge cases, including empty lists and lists with duplicate values.\nrequirement pool:\n- Implement the 'strange' sorting algorithm\n- Ensure the algorithm handles edge cases\n- Optimize the algorithm for performance\n- Document the algorithm for educational purposes\n- Provide a user-friendly interface for testing the algorithm\nTo implement the 'strange' sorting algorithm, we will use Python's built-in sorting capabilities and leverage a custom comparator to achieve the alternating order. This approach will balance simplicity and performance, making it suitable for both educational purposes and practical applications.\n", "requirement analysis:\nThe requirement is to implement a function that sorts a list of integers in a unique order. The order is such that it starts with the smallest value, followed by the largest from the remaining integers, then the next smallest, and so on. This requires a balance between simplicity and functionality to ensure the algorithm is easy to understand and implement, while also being efficient and versatile.\nrequirement pool:\n- Implement the function to sort the list in the specified strange order\n- Ensure the function is efficient and can handle large datasets\n- Provide clear and concise documentation and examples for users\n- Test the function with various edge cases to ensure robustness\n- Optimize the algorithm for performance\nTo implement the 'strange_sort_list' function efficiently and in a readable manner, we will use Python's built-in sorting capabilities along with a custom comparator. This approach will balance simplicity and functionality, making it easy to understand and implement. We will ensure the function is optimized for performance to handle large datasets effectively.\n", "requirement analysis:\nThe requirement is to implement a function that sorts a list of integers in a 'strange' order, where the smallest value is first, followed by the largest from the remaining integers, then the next smallest, and so on. This requires a combination of sorting and alternating selection from the remaining elements. The solution should be efficient and handle edge cases like empty lists and lists with duplicate values.\nrequirement pool:\n- Implement the function `strange_sort_list` that takes a list of integers and returns it sorted in the specified 'strange' order.\n- Ensure the function handles edge cases such as empty lists and lists with duplicate values.\n- Document the function with clear explanations and examples to aid user understanding.\n- Test the function for correctness and performance to ensure it meets the expected standards.\n- Optimize the function for both time and space complexity to ensure it can handle large datasets efficiently.\nTo implement the `strange_sort_list` function efficiently, we will use Python's built-in sorting capabilities along with a custom approach to alternate between the smallest and largest remaining values. This approach will ensure that the function is both scalable and optimized for time and space complexity.\n", "requirement analysis:\nThe requirement is to implement a custom sorting algorithm that starts with the smallest value, followed by the largest from the remaining integers, and so on. This type of sorting is unique and requires careful consideration of both the algorithm's logic and its implementation.\nrequirement pool:\n- Implement the custom sorting logic as described.\n- Ensure the algorithm is efficient and handles edge cases.\n- Document the code thoroughly for maintainability.\n- Test the algorithm with various datasets to verify correctness.\n- Optimize the algorithm for performance and scalability.\nWe will implement the custom sorting logic by first sorting the list to identify the smallest and largest values, then iteratively selecting the next smallest and largest values from the remaining elements until all elements are sorted. This approach will ensure that the algorithm is efficient and handles edge cases effectively.\n", "requirement analysis:\nThe requirement is to implement a function that sorts a list of integers in a specific 'strange' order. The order involves starting with the smallest value, then the largest from the remaining integers, then the next smallest, and so on. This requires a clear understanding of list manipulation and iteration in Python.\nrequirement pool:\n- Implement the function to sort the list in the specified 'strange' order\n- Ensure the function handles edge cases such as empty lists and lists with duplicate values\n- Optimize the function for performance to handle large datasets efficiently\n- Document the function with clear examples and usage instructions\n- Test the function with various test cases to ensure accuracy and reliability\nTo implement the 'strange_sort_list' function, we will use Python's built-in list manipulation capabilities. The function will first sort the list in ascending order, then merge the elements by alternating between the smallest and largest remaining elements. This approach leverages Python's simplicity and efficiency for list operations.\n", "requirement analysis:\nThe requirement is to implement a function that sorts a list of integers in a 'strange' order, where the smallest value is first, followed by the largest from the remaining integers, then the next smallest, and so on. This requires a careful approach to ensure the function handles both small and large datasets efficiently.\nrequirement pool:\n- Implement the function to sort the list in the specified 'strange' order.\n- Ensure the function is optimized for both time and space complexity.\n- Document the function clearly for easy understanding and maintenance.\n- Test the function with various edge cases to ensure robustness.\n- Consider implementing optional parameters for different 'strange' sorting patterns.\nTo implement the 'strange_sort_list' function efficiently and in a scalable manner, we will utilize Python's built-in 'sorted' function combined with a custom sorting logic. This approach leverages Python's performance and readability while ensuring that the function can handle large datasets effectively. The custom logic will involve using two pointers, one starting from the beginning and the other from the end of the list, to alternate between the smallest and largest values as we build the sorted list.\n", "requirement analysis:\nThe original requirements specify a simple sorting method that alternates between the smallest and largest remaining values from a list of integers. This method should be efficient and adaptable to various input sizes. The user stories emphasize ease of use, efficiency, and visual appeal.\nrequirement pool:\n- Implement the strange sorting algorithm as described.\n- Ensure the algorithm is optimized for both small and large datasets.\n- Develop a user-friendly interface for easy interaction.\n- Design a modern and visually appealing UI.\n- Test the algorithm's performance and adjust for any issues.\nTo implement the strange sorting algorithm, we will use Python's built-in list and sorting capabilities. The algorithm involves sorting the list first and then interleaving the smallest and largest values. This approach will be efficient and adaptable to various data types, ensuring it meets the performance requirements for both small and large datasets.\n", "requirement analysis:\nThe requirement is to implement a sorting algorithm that follows a 'strange' order, starting with the smallest value, then the largest from the remaining integers, then the next smallest, and so on. This requires a custom sorting approach that alternates between selecting the smallest and largest values from the list. The solution should handle various edge cases, including empty lists and lists with duplicate values.\nrequirement pool:\n- Implement the custom sorting logic as described\n- Ensure the algorithm handles edge cases effectively\n- Optimize the algorithm for performance\n- Provide clear documentation and examples of usage\n- Test the algorithm with a variety of test cases\nTo implement the 'strange' sorting algorithm, we will use Python's built-in list and sorting capabilities. The algorithm will involve iterating through the list, selecting the smallest and largest values alternately, and appending them to a new list. This approach will be efficient and easy to understand, making it suitable for both users and developers.\n", "requirement analysis:\nThe requirement is to implement a custom sorting algorithm that alternates between the smallest and largest remaining values from the list. This requires careful handling of the list to ensure the correct order is achieved. The algorithm should be efficient and handle edge cases such as empty lists and lists with duplicate values.\nrequirement pool:\n- Implement the algorithm to alternate between smallest and largest values\n- Ensure the algorithm handles edge cases such as empty lists and lists with duplicates\n- Optimize the algorithm for performance to handle large datasets\n- Provide clear documentation and examples of the algorithm's usage\n- Test the algorithm with various datasets to ensure accuracy and reliability\nTo implement the 'strange_sort_list' function efficiently, we will use Python's built-in 'sorted' function combined with a custom sorting logic that alternates between the smallest and largest remaining values from the list. This approach leverages Python's powerful standard library and ensures simplicity and efficiency. We will also handle edge cases such as empty lists and lists with duplicate values to meet the requirements.\n", "requirement analysis:\nThe requirement is to implement a custom sorting algorithm that alternates between the smallest and largest remaining values from the list. This requires careful handling of the list to ensure the correct order is achieved. The algorithm should be efficient and handle edge cases such as empty lists and lists with duplicate values.\nrequirement pool:\n- Implement the strange_sort_list function as described\n- Ensure the function handles edge cases effectively\n- Optimize the algorithm for both time and space complexity\n- Document the function clearly for easy understanding and maintenance\n- Test the function with various inputs to ensure correctness\nTo implement the 'strange_sort_list' function efficiently and intuitively, we will use Python's built-in list and heapq modules. The function will first sort the list to easily access the smallest and largest values. We will then use a two-pointer approach to alternately pick the smallest and largest remaining values from the sorted list. This method ensures that the function is scalable and can handle large datasets efficiently. We will also ensure that the algorithm is optimized for both time and space complexity.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [107, 107, 107, 107, 107, 107, 107, 107, 107, 107], "completion": "from typing import List\nfrom typing import List\nimport heapq\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    \"\"\"\n    Sorts the input list in a 'strange' order, alternately picking the smallest and largest remaining values.\n    \n    Args:\n        lst (List[int]): The list of integers to be sorted.\n        \n    Returns:\n        List[int]: The list sorted in the 'strange' order.\n    \"\"\"\n    if not lst:\n        return []\n    \n    # Sort the list to easily access the smallest and largest values\n    sorted_lst = sorted(lst)\n    result = []\n    \n    # Initialize two pointers\n    left = 0\n    right = len(sorted_lst) - 1\n    \n    # Use a two-pointer approach to alternately pick the smallest and largest remaining values\n    while left <= right:\n        if left <= right:\n            result.append(sorted_lst[left])\n            left += 1\n        if left <= right:\n            result.append(sorted_lst[right])\n            right -= 1\n    \n    return result\n\n# Example usage:\n# lst = [3, 1, 2, 4]\n# print(strange_sort_list(lst))  # Output: [1, 4, 2, 3]\n", "passed": true, "pass": true, "pass_num": 10, "round": 754, "repair_prompt": ["def strange_sort_list(lst):\t\n'''Given list of integers, return list in strange order. Strange sorting, is when you begin with the smallest value, then the largest from the remaining integers, then the next smallest and so on.\nExamples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''"], "mutate_method": "rephrase_one", "parent_index": 294}
