{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True is list elements are monotonically increasing or decreasing. Monotonically increasing means each element in the list is greater than or equal to the previous element. Monotonically decreasing means each element in the list is less than or equal to the previous element.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": ["def check(monotonic):\n\tassert monotonic([6, 2, 5, 7, 4, 65]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 7, 4, 3, 64]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 8]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 7, 1, 62]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 1, 1]) == True", "def check(monotonic):\n\tassert monotonic([3, 2, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([2, 7, 7, 15]) == True", "def check(monotonic):\n\tassert monotonic([4, 7, 7, 1, 1, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 8, 13]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 8, 17]) == True", "def check(monotonic):\n\tassert monotonic([2, 22, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([2, 23, 5, 6]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 2, 18]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 2, 6]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 3, 2]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 2, -5]) == True", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 10]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 6, 18]) == False", "def check(monotonic):\n\tassert monotonic([6, 1, 7, 3, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 7, 3, 8, 61]) == False", "def check(monotonic):\n\tassert monotonic([2, 17, 7, 8]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 4, 5, 3, 59]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 5, 5, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([1, 16, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([7, 6, 2, -14]) == True", "def check(monotonic):\n\tassert monotonic([5, 6, 4, 16]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 5, -10]) == False", "def check(monotonic):\n\tassert monotonic([1, 22, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 8, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 1, 6, 4, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 7, 2, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 1, 4]) == False", "def check(monotonic):\n\tassert monotonic([4, 19, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 8, 5, 5, 56]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 6, 25]) == True", "def check(monotonic):\n\tassert monotonic([2, 3, 1, 7]) == False", "def check(monotonic):\n\tassert monotonic([8, 6, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 6, 2, 8, 62]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 6, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 6, 1, 3]) == False", "def check(monotonic):\n\tassert monotonic([4, 2, 5, 7, 6, 62]) == False", "def check(monotonic):\n\tassert monotonic([3, 7, 1, 20]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 17]) == False", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 5, 5, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 20, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 4, 14]) == False", "def check(monotonic):\n\tassert monotonic([3, 17, 2, 14]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 7, 2, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 20]) == True", "def check(monotonic):\n\tassert monotonic([3, 3, 3, -5]) == True", "def check(monotonic):\n\tassert monotonic([4, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 4, 2, 1, 60]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 7, 24]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 1, 1, 2, 61]) == False", "def check(monotonic):\n\tassert monotonic([1, 4, 3, -8]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 3, 5, 10, 63]) == False", "def check(monotonic):\n\tassert monotonic([4, 6, 3, 3, 10, 57]) == False", "def check(monotonic):\n\tassert monotonic([5, 4, 9, 14]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 5, 17]) == True", "def check(monotonic):\n\tassert monotonic([6, 7, 1, 8]) == False", "def check(monotonic):\n\tassert monotonic([9, 2, 5, -5]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 5, 1]) == False", "def check(monotonic):\n\tassert monotonic([9, 9, 9, 9]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 4, 5, 60]) == True", "def check(monotonic):\n\tassert monotonic([6, 2, 5, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 3, -9]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([1, 24, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 7, 6, 6, 61]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 1, 0]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 3, 3, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 8, 5, 9, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 16, 2, 11]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 2, 4, 2, 55]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 8, 7, 7, 65]) == False", "def check(monotonic):\n\tassert monotonic([2, 20, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 3, -10]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 4, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -12]) == True", "def check(monotonic):\n\tassert monotonic([9, 4, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([2, 15, 2, 15]) == False", "def check(monotonic):\n\tassert monotonic([6, 2, 4, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 2, 4]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 1, 3, 63]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 12]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 2, 1]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([6, 5, 7, 7, 6, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 4, 14]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 8, 5]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 1, -7]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 6, 8]) == True", "def check(monotonic):\n\tassert monotonic([9, 5, 5, -14]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 4, 4, 5, 55]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 0, -10]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 21]) == True", "def check(monotonic):\n\tassert monotonic([1, 1, 3, 18]) == True", "def check(monotonic):\n\tassert monotonic([1, 6, 4, -7]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 4, 17]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 2, 5, 60]) == False", "def check(monotonic):\n\tassert monotonic([5, 2, 5, 2]) == False", "def check(monotonic):\n\tassert monotonic([2, 3, 8, 8]) == True", "def check(monotonic):\n\tassert monotonic([5, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([8, 3, 2, -15]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 3, 19]) == False"], "test_case_list": ["assert monotonic([6, 2, 5, 7, 4, 65]) == False", "assert monotonic([3, 3, 7, 4, 3, 64]) == False", "assert monotonic([3, 1, 5, 8]) == False", "assert monotonic([4, 3, 5, 7, 1, 62]) == False", "assert monotonic([4, 4, 1, 1]) == True", "assert monotonic([3, 2, 7, 6]) == False", "assert monotonic([2, 7, 7, 15]) == True", "assert monotonic([4, 7, 7, 1, 1, 57]) == False", "assert monotonic([1, 1, 8, 13]) == True", "assert monotonic([5, 5, 8, 17]) == True", "assert monotonic([2, 22, 8, 7]) == False", "assert monotonic([2, 23, 5, 6]) == False", "assert monotonic([3, 2, 2, 18]) == False", "assert monotonic([2, 2, 2, 6]) == True", "assert monotonic([7, 5, 3, 2]) == True", "assert monotonic([7, 5, 2, -5]) == True", "assert monotonic([6, 19, 9, 12]) == False", "assert monotonic([1, 2, 4, 10]) == True", "assert monotonic([5, 4, 6, 18]) == False", "assert monotonic([6, 1, 7, 3, 4, 56]) == False", "assert monotonic([6, 3, 7, 3, 8, 61]) == False", "assert monotonic([2, 17, 7, 8]) == False", "assert monotonic([5, 1, 4, 5, 3, 59]) == False", "assert monotonic([3, 5, 5, 5, 3, 65]) == False", "assert monotonic([6, 19, 9, 7]) == False", "assert monotonic([1, 16, 9, 7]) == False", "assert monotonic([7, 6, 2, -14]) == True", "assert monotonic([5, 6, 4, 16]) == False", "assert monotonic([1, 6, 5, -10]) == False", "assert monotonic([1, 22, 4, 10]) == False", "assert monotonic([1, 6, 8, 6, 3, 62]) == False", "assert monotonic([1, 5, 1, 6, 4, 62]) == False", "assert monotonic([1, 1, 7, 2, 4, 56]) == False", "assert monotonic([2, 1, 5, 12]) == False", "assert monotonic([1, 3, 1, 4]) == False", "assert monotonic([4, 19, 8, 7]) == False", "assert monotonic([3, 5, 8, 5, 5, 56]) == False", "assert monotonic([1, 3, 6, 25]) == True", "assert monotonic([2, 3, 1, 7]) == False", "assert monotonic([8, 6, 2, 5]) == False", "assert monotonic([6, 3, 6, 2, 8, 62]) == False", "assert monotonic([6, 4, 6, 4]) == False", "assert monotonic([3, 6, 1, 3]) == False", "assert monotonic([4, 2, 5, 7, 6, 62]) == False", "assert monotonic([3, 7, 1, 20]) == False", "assert monotonic([3, 1, 5, 17]) == False", "assert monotonic([5, 5, 7, 5, 5, 57]) == False", "assert monotonic([1, 20, 4, 10]) == False", "assert monotonic([6, 16, 4, 14]) == False", "assert monotonic([3, 17, 2, 14]) == False", "assert monotonic([4, 5, 7, 2, 8, 63]) == False", "assert monotonic([1, 2, 4, 20]) == True", "assert monotonic([3, 3, 3, -5]) == True", "assert monotonic([4, 2, 3, 4]) == False", "assert monotonic([3, 5, 4, 2, 1, 60]) == False", "assert monotonic([6, 4, 7, 24]) == False", "assert monotonic([6, 3, 1, 1, 2, 61]) == False", "assert monotonic([1, 4, 3, -8]) == False", "assert monotonic([2, 6, 3, 5, 10, 63]) == False", "assert monotonic([4, 6, 3, 3, 10, 57]) == False", "assert monotonic([5, 4, 9, 14]) == False", "assert monotonic([1, 3, 5, 17]) == True", "assert monotonic([6, 7, 1, 8]) == False", "assert monotonic([9, 2, 5, -5]) == False", "assert monotonic([3, 2, 5, 1]) == False", "assert monotonic([9, 9, 9, 9]) == True", "assert monotonic([1, 2, 3, 4, 5, 60]) == True", "assert monotonic([6, 2, 5, 6, 3, 62]) == False", "assert monotonic([5, 1, 3, -9]) == False", "assert monotonic([1, 5, 7, 6]) == False", "assert monotonic([1, 24, 9, 12]) == False", "assert monotonic([2, 6, 7, 6, 6, 61]) == False", "assert monotonic([4, 1, 1, 0]) == True", "assert monotonic([2, 1, 3, 3, 3, 65]) == False", "assert monotonic([1, 2, 8, 5, 9, 55]) == False", "assert monotonic([2, 16, 2, 11]) == False", "assert monotonic([6, 16, 3, 15]) == False", "assert monotonic([1, 5, 2, 4, 2, 55]) == False", "assert monotonic([3, 1, 8, 7, 7, 65]) == False", "assert monotonic([2, 20, 2, 5]) == False", "assert monotonic([7, 2, 3, -10]) == False", "assert monotonic([4, 3, 5, 4, 8, 63]) == False", "assert monotonic([7, 2, 1, -12]) == True", "assert monotonic([9, 4, 1, -6]) == True", "assert monotonic([2, 15, 2, 15]) == False", "assert monotonic([6, 2, 4, 4]) == False", "assert monotonic([3, 3, 2, 4]) == False", "assert monotonic([2, 2, 8, 1, 3, 63]) == False", "assert monotonic([2, 2, 8, 12]) == True", "assert monotonic([3, 4, 2, 1]) == False", "assert monotonic([4, 4, 3, 15]) == False", "assert monotonic([2, 6, 5, 3]) == False", "assert monotonic([6, 5, 7, 7, 6, 55]) == False", "assert monotonic([2, 4, 4, 14]) == True", "assert monotonic([5, 4, 8, 5]) == False", "assert monotonic([4, 5, 1, -7]) == False", "assert monotonic([3, 3, 6, 8]) == True", "assert monotonic([9, 5, 5, -14]) == True", "assert monotonic([2, 1, 4, 4, 5, 55]) == False", "assert monotonic([4, 1, 0, -10]) == True", "assert monotonic([5, 5, 7, 21]) == True", "assert monotonic([1, 1, 3, 18]) == True", "assert monotonic([1, 6, 4, -7]) == False", "assert monotonic([4, 3, 4, 17]) == False", "assert monotonic([7, 2, 1, -6]) == True", "assert monotonic([1, 2, 3, 2, 5, 60]) == False", "assert monotonic([5, 2, 5, 2]) == False", "assert monotonic([2, 3, 8, 8]) == True", "assert monotonic([5, 2, 3, 4]) == False", "assert monotonic([8, 3, 2, -15]) == True", "assert monotonic([3, 4, 3, 15]) == False", "assert monotonic([2, 1, 5, 3]) == False", "assert monotonic([2, 4, 3, 19]) == False"], "nl": "Return True is list elements are monotonically increasing or decreasing.\n    ", "func": "def monotonic(l: list):", "examples": ">>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    ", "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    '''\n    Return True if the list elements are monotonically increasing or decreasing.\n    \n    Parameters:\n    l (List[int]): The list of numbers to check for monotonicity.\n    \n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n    '''\n    if len(l) <= 2:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Check if a list is monotonically increasing or decreasing.\n\n    Args:\n        l (list): The input list to check for monotonicity.\n\n    Returns:\n        bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if the list elements are monotonically increasing or decreasing.\n    Monotonically increasing means each element in the list is greater than or equal to the previous element.\n    Monotonically decreasing means each element in the list is less than or equal to the previous element.\n    >>> monotonic([1, 2, 4, 20])\n        True\n    >>> monotonic([1, 20, 4, 10])\n        False\n    >>> monotonic([4, 1, 0, -10])\n        True\n    '''\n    if not l:\n        return True\n\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if the list elements are monotonically increasing or decreasing.\n    :param l: list of numbers\n    :return: bool\n    '''\n    if len(l) <= 1:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if the list elements are monotonically increasing or decreasing.'''\n    if not l:\n        return True  # An empty list is considered monotonic\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n\n    return increasing or decreasing\n", "from typing import List\nfrom typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    '''\n    Return True if the list elements are monotonically increasing or decreasing.\n    :param l: list of numbers\n    :return: bool\n    '''\n    if len(l) <= 1:\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Check if a list is monotonically increasing or decreasing.\n\n    Args:\n        l (list): The input list to check.\n\n    Returns:\n        bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    is_increasing = True\n    is_decreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            is_increasing = False\n        if l[i] < l[i + 1]:\n            is_decreasing = False\n\n    return is_increasing or is_decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Check if a list is monotonically increasing or decreasing.\n\n    Args:\n        l (list): The input list to check for monotonicity.\n\n    Returns:\n        bool: True if the list is monotonically increasing or decreasing, False otherwise.\n    \"\"\"\n    if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            decreasing = False\n        if l[i] > l[i + 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if the list elements are monotonically increasing or decreasing.\n    :param l: list\n    :return: bool\n    '''\n    if len(l) <= 1:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            decreasing = False\n        if l[i] > l[i + 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if the list elements are monotonically increasing or decreasing.'''\n    if not l:  # Check if the list is empty\n        return True\n    \n    increasing = all(x <= y for x, y in zip(l, l[1:]))\n    decreasing = all(x >= y for x, y in zip(l, l[1:]))\n    \n    return increasing or decreasing\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that checks if a list is monotonically increasing or decreasing. The function should be able to handle various types of lists, including those with negative numbers and large datasets. The user interface should be intuitive and the application should be robust against crashes or slow performance with large lists.\nrequirement pool:\n- Implement a function to check if a list is monotonically increasing or decreasing\n- Ensure the function can handle lists with negative numbers and large datasets\n- Develop a user-friendly interface for inputting lists and displaying results\n- Optimize the application to avoid crashes and slow performance with large lists\n- Design a clean and visually appealing interface\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and leverage the 'typing' module for type annotations. The function will compare each element in the list with the next one to determine if the list is monotonic. This approach is efficient and straightforward, ensuring that the function can handle both positive and negative numbers as well as large datasets without crashing.\n", "requirement analysis:\nThe requirement is to check if a list is monotonically increasing or decreasing. This involves comparing each element with the previous one to ensure the relationship holds throughout the list. The function should handle edge cases such as empty lists and lists with a single element.\nrequirement pool:\n- Implement the function to correctly identify monotonically increasing and decreasing lists.\n- Ensure the function is optimized for performance.\n- Handle edge cases such as empty lists and lists with a single element.\n- Document the function clearly for easy understanding and maintenance.\n- Test the function with various inputs to ensure it works as expected.\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and standard libraries. The function will compare each element with the next one to determine the monotonicity. We will also handle edge cases such as empty lists and lists with a single element.\n", "requirement analysis:\nThe requirement is to create a function that checks if a list is monotonically increasing or decreasing. This is a fundamental requirement that can be used in various applications, including data validation and algorithm design. The function should be efficient and handle edge cases like empty lists and lists with equal elements.\nrequirement pool:\n- The main code should efficiently determine if the list is monotonically increasing or decreasing\n- The function should handle edge cases such as empty lists and lists with equal elements\n- The function should be easy to understand and maintain\n- The product should be integrated into a larger application if needed\n- The UI should be simple and intuitive\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and leverage a simple approach to ensure efficiency. The function will compare each element with the next one to determine if the sequence is strictly increasing or decreasing. We will also handle edge cases such as empty lists and lists with equal elements.\n", "requirement analysis:\nThe requirement is to create a function that checks if a list is monotonically increasing or decreasing. This involves comparing each element with the previous one to ensure the relationship holds for the entire list. The function should be efficient and handle various list sizes.\nrequirement pool:\n- The main code should accurately determine if the list is monotonically increasing or decreasing\n- The function should be optimized for performance, especially for large lists\n- The function should be clearly documented and easy to understand\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and leverage a simple approach to ensure efficiency. The function will compare each element with the next one to determine the monotonicity of the list.\n", "requirement analysis:\nThe function needs to determine if a list is monotonically increasing or decreasing. This involves checking if each element in the list is greater than or equal to the previous element for increasing, or less than or equal to the previous element for decreasing. The function should handle edge cases such as empty lists and lists with identical elements efficiently.\nrequirement pool:\n- Implement the function to check for monotonicity\n- Ensure the function handles edge cases\n- Optimize the function for performance\n- Document the function and provide examples\n- Test the function with various inputs\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and ensure the function handles edge cases efficiently. We will compare each element with the next one to determine the monotonicity.\n", "requirement analysis:\nThe requirement is to create a function that checks if a list is monotonically increasing or decreasing. The function should be able to handle various types of lists, including those with negative numbers and large datasets. The user interface should be intuitive and the application should be robust against crashes or slow performance with large lists.\nrequirement pool:\n- Implement a function to check if a list is monotonically increasing or decreasing\n- Ensure the function can handle lists with negative numbers and large datasets\n- Develop a user-friendly interface for inputting lists and displaying results\n- Optimize the application to avoid crashes and slow performance with large lists\n- Design a clean and visually appealing interface\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and leverage the 'typing' module for type annotations. The function will compare each element in the list with the next one to determine if the list is monotonic. We will ensure the function can handle lists with negative numbers and large datasets efficiently.\n", "requirement analysis:\nThe requirement is to create a function that checks if a list is monotonically increasing or decreasing. The function should return True if the list is either monotonically increasing or decreasing, and False otherwise. The function should handle edge cases such as empty lists and lists with a single element.\nrequirement pool:\n- The function should correctly identify a monotonically increasing list.\n- The function should correctly identify a monotonically decreasing list.\n- The function should handle edge cases such as empty lists and lists with a single element.\n- The function should be efficient in terms of time complexity.\n- The function should be efficient in terms of space complexity.\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and ensure the function is efficient. We will compare each element with the next one to determine if the list is monotonically increasing or decreasing. For edge cases, we will handle empty lists and lists with a single element separately.\n", "requirement analysis:\nThe requirement is to determine if a list is monotonically increasing or decreasing. This is a fundamental check in data analysis and programming. The function should be efficient and handle basic edge cases well. Clarity and simplicity are key to ensure easy integration and understanding.\nrequirement pool:\n- The main code should accurately determine if a list is monotonically increasing or decreasing.\n- The function should handle edge cases such as empty lists and lists with a single element.\n- The function should be optimized for performance to handle large lists efficiently.\n- The documentation should be clear and comprehensive to assist users in understanding and using the function correctly.\n- The function should be tested thoroughly to ensure reliability and accuracy in various scenarios.\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and leverage a simple approach to ensure clarity and efficiency. The function will compare each element with the next one to determine the monotonicity of the list.\n", "requirement analysis:\nThe requirement is to create a function that checks if a list is monotonically increasing or decreasing. This is a fundamental check in data structures and algorithms, essential for validating data integrity. The function should be simple and efficient, handling basic list operations.\nrequirement pool:\n- The main code should be efficient and concise\n- The function should handle basic list operations\n- The function should return True for monotonically increasing or decreasing lists\n- The function should return False for lists that are neither monotonically increasing nor decreasing\n- The function should handle edge cases such as empty lists or lists with one element\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and leverage a simple approach to ensure efficiency. The function will compare each element with the next one to determine if the list is consistently increasing or decreasing. We will also handle edge cases such as empty lists or lists with a single element.\n", "requirement analysis:\nThe requirement is to create a function that checks if a list is monotonically increasing or decreasing. This is a fundamental requirement that can be used in various applications, including data validation, sorting algorithms, and more. The function should be efficient and handle edge cases such as empty lists and lists with equal elements.\nrequirement pool:\n- Implement the function to check if a list is monotonically increasing or decreasing\n- Handle edge cases such as empty lists and lists with equal elements\n- Optimize the function for performance\n- Ensure the function is easy to use and understand\n- Provide clear documentation and examples\nTo implement the function that checks if a list is monotonically increasing or decreasing, we will use Python's built-in capabilities and standard library functions. This approach is efficient and leverages Python's simplicity and readability. We will compare each element in the list with the next one to determine if the list is monotonically increasing or decreasing. For edge cases, we will handle empty lists and lists with equal elements by returning appropriate boolean values.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [113, 113, 113, 113, 113, 113, 113, 113, 113, 113], "completion": "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if the list elements are monotonically increasing or decreasing.'''\n    if not l:  # Check if the list is empty\n        return True\n    \n    increasing = all(x <= y for x, y in zip(l, l[1:]))\n    decreasing = all(x >= y for x, y in zip(l, l[1:]))\n    \n    return increasing or decreasing\n", "passed": true, "pass": true, "pass_num": 10, "round": 308, "repair_prompt": ["def monotonic(l: list):\t\n'''Return True is list elements are monotonically increasing or decreasing. Monotonically increasing means each element in the list is greater than or equal to the previous element. Monotonically decreasing means each element in the list is less than or equal to the previous element.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''"], "mutate_method": "expand_one2two", "parent_index": 270}
