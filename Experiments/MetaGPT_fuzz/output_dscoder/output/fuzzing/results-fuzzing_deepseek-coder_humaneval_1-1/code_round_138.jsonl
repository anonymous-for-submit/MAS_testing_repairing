{"task_id": "HumanEval/19", "prompt": "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. These choices represent numbers from 0 to 9. Each numeral is the string representation of its corresponding number. Return the string with numbers sorted from smallest to largest.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "entry_point": "sort_numbers", "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "test": ["def check(sort_numbers):\n\tassert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one\") == 'one'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four three six\") == 'three four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one six four\") == 'one four six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two\") == 'one two'", "def check(sort_numbers):\n\tassert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four five five one one\") == 'one one four five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four zero two five\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight\") == 'eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six three\") == 'three six'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero\") == 'zero seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four three zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven\") == 'seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six nine three\") == 'three six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one nine three\") == 'one three four nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "def check(sort_numbers):\n\tassert sort_numbers('three five nine') == 'three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three\") == 'zero three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one seven\") == 'one four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six\") == 'six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"four two seven\") == 'two four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three four five\") == 'three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five four zero\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three seven two\") == 'two three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four six four one\") == 'one four four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight six three\") == 'three six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three five\") == 'three five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four\") == 'four'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero four one\") == 'zero one four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine\") == 'nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three\") == 'three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three four zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five\") == 'five'", "def check(sort_numbers):\n\tassert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers('three') == 'three'", "def check(sort_numbers):\n\tassert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six\") == 'six'", "def check(sort_numbers):\n\tassert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five\") == 'five eight'", "def check(sort_numbers):\n\tassert sort_numbers('') == ''", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine nine five\") == 'five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three\") == 'three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero\") == 'zero'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine zero\") == 'zero nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one six two seven\") == 'one two six seven'"], "test_case_list": ["assert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "assert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "assert sort_numbers(\"one\") == 'one'", "assert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "assert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "assert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "assert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "assert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "assert sort_numbers(\"four four three six\") == 'three four four six'", "assert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "assert sort_numbers(\"nine one six four\") == 'one four six nine'", "assert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "assert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "assert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "assert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "assert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "assert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "assert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "assert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "assert sort_numbers(\"one two\") == 'one two'", "assert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "assert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "assert sort_numbers(\"four five five one one\") == 'one one four five five'", "assert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "assert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "assert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "assert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "assert sort_numbers(\"four zero two five\") == 'zero two four five'", "assert sort_numbers(\"eight\") == 'eight'", "assert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "assert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "assert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "assert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "assert sort_numbers(\"six three\") == 'three six'", "assert sort_numbers(\"seven zero\") == 'zero seven'", "assert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "assert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "assert sort_numbers(\"four three zero\") == 'zero three four'", "assert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "assert sort_numbers(\"seven\") == 'seven'", "assert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "assert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "assert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "assert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "assert sort_numbers(\"six nine three\") == 'three six nine'", "assert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "assert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "assert sort_numbers(\"four one nine three\") == 'one three four nine'", "assert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "assert sort_numbers('three five nine') == 'three five nine'", "assert sort_numbers(\"zero three\") == 'zero three'", "assert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "assert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "assert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "assert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "assert sort_numbers(\"four one seven\") == 'one four seven'", "assert sort_numbers(\"seven six\") == 'six seven'", "assert sort_numbers(\"four two seven\") == 'two four seven'", "assert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "assert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "assert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "assert sort_numbers(\"nine three four five\") == 'three four five nine'", "assert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "assert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "assert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "assert sort_numbers(\"two five four zero\") == 'zero two four five'", "assert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "assert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "assert sort_numbers(\"three seven two\") == 'two three seven'", "assert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "assert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "assert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "assert sort_numbers(\"four four six four one\") == 'one four four four six'", "assert sort_numbers(\"eight six three\") == 'three six eight'", "assert sort_numbers(\"five three five\") == 'three five five'", "assert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "assert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "assert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "assert sort_numbers(\"four\") == 'four'", "assert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "assert sort_numbers(\"six zero four one\") == 'zero one four six'", "assert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "assert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "assert sort_numbers(\"nine\") == 'nine'", "assert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "assert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "assert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "assert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "assert sort_numbers(\"three\") == 'three'", "assert sort_numbers(\"three four zero\") == 'zero three four'", "assert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "assert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "assert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "assert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "assert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "assert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "assert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "assert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "assert sort_numbers(\"five\") == 'five'", "assert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "assert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "assert sort_numbers('three') == 'three'", "assert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "assert sort_numbers(\"six\") == 'six'", "assert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "assert sort_numbers(\"eight five\") == 'five eight'", "assert sort_numbers('') == ''", "assert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "assert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "assert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "assert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "assert sort_numbers(\"nine nine five\") == 'five nine nine'", "assert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "assert sort_numbers(\"seven three\") == 'three seven'", "assert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "assert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "assert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "assert sort_numbers(\"zero\") == 'zero'", "assert sort_numbers(\"nine zero\") == 'zero nine'", "assert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "assert sort_numbers(\"one six two seven\") == 'one two six seven'"], "nl": " Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    ", "func": "def sort_numbers(numbers: str) -> str:", "examples": ">>> sort_numbers('three one five')\n    'one three five'\n    ", "completions": ["from typing import List\n## main.py\n\n# Import necessary modules\nimport re\n\n# Define a dictionary to map words to their corresponding numbers\nword_to_number = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n}\n\n# Define a dictionary to map numbers back to their corresponding words\nnumber_to_word = {value: key for key, value in word_to_number.items()}\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-delimited string of numerals from 'zero' to 'nine'.\n    Output: A string with numbers sorted from smallest to largest, represented by their word equivalents.\n    '''\n    \n    # Use a regular expression to split the input string into words\n    words = re.findall(r'\\b\\w+\\b', numbers)\n    \n    # Convert words to numbers using the word_to_number dictionary\n    numbers_list = [word_to_number[word] for word in words if word in word_to_number]\n    \n    # Sort the numbers\n    numbers_list.sort()\n    \n    # Convert sorted numbers back to words using the number_to_word dictionary\n    sorted_words = [number_to_word[number] for number in numbers_list]\n    \n    # Join the sorted words back into a single string with spaces\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string\n\n# Example usage:\n# print(sort_numbers(\"three one five nine seven\"))  # Output: \"one three five seven nine\"\n", "from typing import List\n## main.py\n\nfrom num2words import num2words\nfrom words2num import words2num\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. These choices represent numbers from 0 to 9. \n    Return the string with numbers sorted from smallest to largest.\n    '''\n    # Convert the input string to a list of numbers\n    words_list = numbers.split()\n    numbers_list = [words2num(word) for word in words_list]\n    \n    # Sort the list of numbers\n    numbers_list.sort()\n    \n    # Convert the sorted numbers back to words\n    sorted_words_list = [num2words(num) for num in numbers_list]\n    \n    # Join the sorted words back into a single string\n    sorted_string = ' '.join(sorted_words_list)\n    \n    return sorted_string\n\n# Example usage:\n# print(sort_numbers(\"one two three four five six seven eight nine zero\"))\n", "from typing import List\n## main.py\n\nimport re\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-delimited string of numerals from 'zero' to 'nine'.\n    Output: A sorted space-delimited string of numbers.\n    '''\n    word_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Validate input: ensure the input is a space-delimited string of numerals\n    if not re.match(r'^(\\bzero\\b|\\bone\\b|\\btwo\\b|\\bthree\\b|\\bfour\\b|\\bfive\\b|\\bsix\\b|\\bseven\\b|\\beight\\b|\\bnine\\b\\s*)+$', numbers):\n        raise ValueError(\"Invalid input format. Please provide a space-delimited string of numerals from 'zero' to 'nine'.\")\n    \n    words = numbers.split()\n    \n    # Validate input: ensure each word is a valid number word\n    for word in words:\n        if word not in word_to_number:\n            raise ValueError(f\"Invalid number word: {word}\")\n    \n    numbers_list = [word_to_number[word] for word in words]\n    sorted_numbers = sorted(numbers_list)\n    sorted_numbers_str = ' '.join(str(num) for num in sorted_numbers)\n    \n    return sorted_numbers_str\n", "from typing import List\n## main.py\n\nimport inflect\nfrom typing import List\n\ndef word_to_number(word: str) -> int:\n    \"\"\"\n    Convert a word representation of a number to its integer form.\n    \n    Args:\n        word (str): A word representation of a number.\n    \n    Returns:\n        int: The integer representation of the number.\n    \"\"\"\n    p = inflect.engine()\n    return p.word_to_number(word)\n\ndef number_to_word(number: int) -> str:\n    \"\"\"\n    Convert an integer number to its word representation.\n    \n    Args:\n        number (int): An integer number.\n    \n    Returns:\n        str: The word representation of the number.\n    \"\"\"\n    p = inflect.engine()\n    return p.number_to_words(number)\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sort a space-delimited string of numerals represented by words.\n    \n    Args:\n        numbers (str): A space-delimited string of numerals represented by words.\n    \n    Returns:\n        str: A space-delimited string of numerals in ascending order.\n    \"\"\"\n    words: List[str] = numbers.split()\n    numbers_list: List[int] = [word_to_number(word) for word in words]\n    numbers_list.sort()\n    sorted_numbers_str: List[str] = [number_to_word(number) for number in numbers_list]\n    return ' '.join(sorted_numbers_str)\n\n# Example usage:\n# sorted_result = sort_numbers(\"one two three four five\")\n# print(sorted_result)  # Output: \"one two three four five\"\n", "from typing import List\n## main.py\n\nimport re\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-delimited string of numerals from 'zero' to 'nine'.\n    Output: A string with numbers sorted from smallest to largest, represented in words.\n    '''\n    # Mapping of words to their corresponding numerical values\n    word_to_num = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Mapping of numerical values back to their corresponding words\n    num_to_word = {value: key for key, value in word_to_num.items()}\n    \n    # Split the input string into words\n    words = numbers.split()\n    \n    # Map words to their corresponding numerical values\n    numerical_values = [word_to_num[word] for word in words]\n    \n    # Sort the numerical values\n    sorted_numerical_values = sorted(numerical_values)\n    \n    # Map sorted numerical values back to words\n    sorted_words = [num_to_word[num] for num in sorted_numerical_values]\n    \n    # Join the sorted words back into a single string\n    sorted_numbers_str = ' '.join(sorted_words)\n    \n    return sorted_numbers_str\n", "from typing import List\nimport inflect\nfrom typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-delimited string of numerals represented in words.\n    Output: A space-delimited string of numerals sorted in ascending order.\n    '''\n    p = inflect.engine()\n    try:\n        # Convert the space-delimited string of words to a list of numbers\n        words = numbers.split()\n        numbers_list = []\n        for word in words:\n            number = p.word_to_number(word)\n            numbers_list.append(number)\n        \n        # Sort the list of numbers\n        numbers_list.sort()\n        \n        # Convert the sorted numbers back to words\n        sorted_words = []\n        for number in numbers_list:\n            word = p.number_to_words(number)\n            sorted_words.append(word)\n        \n        # Join the words back into a space-delimited string\n        sorted_string = ' '.join(sorted_words)\n        return sorted_string\n    except (ValueError, TypeError):\n        # Handle unexpected inputs gracefully\n        return \"Error: Invalid input. Please provide a space-delimited string of numerals represented in words.\"\n\n# Example usage:\n# sorted_result = sort_numbers(\"one two three four five\")\n# print(sorted_result)  # Output: \"one two three four five\"\n", "from typing import List\n## main.py\n\nimport inflect\nfrom typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. These choices represent numbers from 0 to 9. Each numeral is the string representation of its corresponding number. Return the string with numbers sorted from smallest to largest.\n    '''\n    # Initialize the inflect engine\n    p = inflect.engine()\n    \n    # Convert the space-delimited string to a list of numbers\n    number_words = numbers.split()\n    number_values = []\n    for word in number_words:\n        # Convert each word to its corresponding number\n        number = p.number_to_words_dict().get(word)\n        if number is not None:\n            number_values.append(number)\n    \n    # Sort the list of numbers\n    number_values.sort()\n    \n    # Convert the sorted numbers back to words\n    sorted_words = [p.number_to_words(num) for num in number_values]\n    \n    # Join the sorted words back into a space-delimited string\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string\n\n# Example usage:\n# sorted_result = sort_numbers(\"three two one zero\")\n# print(sorted_result)  # Output: \"zero one two three\"\n", "from typing import List\n## main.py\n\nimport re\nfrom collections import defaultdict\n\ndef word_to_number(word: str) -> int:\n    \"\"\"\n    Converts a word representation of a number to its corresponding integer.\n    \n    Args:\n        word (str): The word representation of a number.\n        \n    Returns:\n        int: The corresponding integer.\n    \"\"\"\n    word_to_digit = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    return word_to_digit[word]\n\ndef number_to_word(number: int) -> str:\n    \"\"\"\n    Converts an integer to its word representation.\n    \n    Args:\n        number (int): The integer to convert.\n        \n    Returns:\n        str: The word representation of the number.\n    \"\"\"\n    digit_to_word = {\n        0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four',\n        5: 'five', 6: 'six', 7: 'seven', 8: 'eight', 9: 'nine'\n    }\n    return digit_to_word[number]\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Takes a space-delimited string of numerals and returns a sorted string of numbers.\n    \n    Args:\n        numbers (str): A space-delimited string of numerals.\n        \n    Returns:\n        str: A sorted space-delimited string of numerals.\n    \"\"\"\n    # Split the input string into words\n    words = numbers.split()\n    \n    # Convert words to numbers\n    numbers_list = [word_to_number(word) for word in words]\n    \n    # Sort the numbers\n    numbers_list.sort()\n    \n    # Convert sorted numbers back to words\n    sorted_words = [number_to_word(num) for num in numbers_list]\n    \n    # Join the sorted words back into a string\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string\n", "from typing import List\n## main.py\n\nimport inflect\nfrom typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-delimited string of numerals in words.\n    Output: A string of space-delimited numerals sorted in ascending order.\n    '''\n    # Initialize the inflect engine\n    p = inflect.engine()\n    \n    # Split the input string into words\n    words = numbers.split()\n    \n    # Convert words to numbers\n    numbers_list = []\n    for word in words:\n        try:\n            num = p.word_to_number(word)\n            numbers_list.append(num)\n        except ValueError:\n            raise ValueError(f\"Invalid number word: {word}\")\n    \n    # Sort the numbers\n    numbers_list.sort()\n    \n    # Convert sorted numbers back to string\n    sorted_numbers_str = ' '.join(str(num) for num in numbers_list)\n    \n    return sorted_numbers_str\n\n# Example usage:\n# result = sort_numbers(\"one two three four five\")\n# print(result)  # Output: \"1 2 3 4 5\"\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. These choices represent numbers from 0 to 9. Return the string with numbers sorted from smallest to largest.\n    '''\n    # Mapping of words to their corresponding numerical values\n    word_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Mapping of numerical values to their corresponding words\n    number_to_word = {value: key for key, value in word_to_number.items()}\n    \n    # Split the input string into individual words\n    words = numbers.split()\n    \n    # Convert words to numbers\n    numbers_list = [word_to_number[word] for word in words]\n    \n    # Sort the numbers\n    numbers_list.sort()\n    \n    # Convert sorted numbers back to words\n    sorted_words = [number_to_word[number] for number in numbers_list]\n    \n    # Join the sorted words into a single string\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string\n"], "plans": ["requirement analysis:\nThe requirement is to sort a space-delimited string of numerals represented by words from 'zero' to 'nine'. This requires converting the words to their corresponding numerical values, sorting them, and then converting them back to words for the output. The challenge lies in ensuring the conversion between words and numbers is accurate and efficient.\nrequirement pool:\n- Implement a function to convert words to numbers.\n- Implement a function to sort the numbers.\n- Implement a function to convert numbers back to words for the output.\n- Ensure the application handles errors gracefully, especially for invalid inputs.\n- Develop a user-friendly interface for easy input and output.\nTo implement the function `sort_numbers` as described, we will use Python's built-in capabilities along with a simple dictionary for word-to-number conversion. The function will parse the input string, convert each word to its corresponding number, sort these numbers, and then convert them back to words for the output. Error handling will be implemented to manage invalid inputs.\n", "requirement analysis:\nThe requirement is to sort a space-delimited string of numerals represented by their word forms. This involves converting the words to numbers, sorting them, and then converting them back to words for the output. The challenge lies in ensuring the conversion between words and numbers is accurate and efficient.\nrequirement pool:\n- Implement a function to convert words to numbers.\n- Implement a function to sort the numbers.\n- Implement a function to convert numbers back to words.\n- Ensure the application handles errors gracefully, especially for invalid inputs.\n- Optimize the performance for large datasets to ensure efficiency.\nTo implement the function `sort_numbers` as described, we will use Python's built-in capabilities along with the `num2words` and `words2num` libraries for converting between words and numbers. The function will parse the input string, convert each word to its corresponding number, sort the numbers, and then convert them back to words for the output.\n", "requirement analysis:\nThe requirement is to sort a space-delimited string of numerals represented by words from 'zero' to 'nine'. The input is a string, and the output should be a sorted string of numbers. The primary challenge is to map the words to their corresponding numerical values and then sort them. The solution should handle errors gracefully, such as when the input string is malformed or contains words not in the specified range.\nrequirement pool:\n- Implement a function to convert words to numbers.\n- Implement a function to sort the numbers.\n- Add error handling for invalid inputs.\n- Enhance user interface for better usability.\nTo implement the function `sort_numbers` that sorts a space-delimited string of numerals represented by words from 'zero' to 'nine', we will use Python's built-in capabilities and the `sorted` function for sorting. We will also use a dictionary to map the words to their corresponding numerical values. This approach ensures simplicity and efficiency. Error handling will be implemented to manage unexpected inputs gracefully.\n", "requirement analysis:\nThe requirement is to sort a space-delimited string of numerals represented by words. This requires converting the words to numbers and then sorting them. The output should be a string of numbers in ascending order.\nrequirement pool:\n- Implement a function to convert words to numbers.\n- Implement a function to sort the numbers.\n- Ensure the input is a space-delimited string of numerals in words.\n- Ensure the output is a space-delimited string of numerals in ascending order.\n- Develop a user-friendly interface for easy input.\nTo implement the function that sorts a space-delimited string of numerals represented by words, we will use Python's built-in capabilities along with the `inflect` library for converting words to numbers. This approach is efficient and leverages Python's simplicity and readability.\n", "requirement analysis:\nThe requirement is to sort a space-delimited string of numerals represented in words from 'zero' to 'nine'. This requires converting these words into their numerical equivalents, sorting them, and then converting them back to words for the output. The focus is on creating an efficient and user-friendly application that handles this conversion and sorting process accurately and quickly.\nrequirement pool:\n- Implement a function to convert words to numbers.\n- Implement a function to sort the numbers.\n- Implement a function to convert numbers back to words for the output.\n- Ensure the application is user-friendly with a clear and simple interface.\n- Optimize the application for performance to handle large datasets efficiently.\nTo implement the function `sort_numbers` as described, we will use Python's built-in capabilities for string manipulation and sorting. We will also use a dictionary to map words to their corresponding numerical values and vice versa. This approach ensures simplicity and efficiency.\n", "requirement analysis:\nThe requirement is to sort a space-delimited string of numerals represented in words. The input is a string where each numeral is a word from 'zero' to 'nine', and the output should be a string of these numerals sorted in ascending order. This requirement is clear and straightforward, focusing on the conversion and sorting of numbers in a user-friendly manner.\nrequirement pool:\n- Implement the function to convert words to numbers and sort them.\n- Ensure the application handles input errors gracefully.\n- Develop a user-friendly interface for easy input and output.\n- Optimize the performance for handling large datasets.\nTo implement the function that sorts a space-delimited string of numerals represented in words, we will use Python's built-in capabilities along with the `inflect` library for converting words to numbers. This approach ensures simplicity and efficiency. The function will first convert the input string to a list of numbers, sort them, and then convert the sorted numbers back to their word representations. Error handling will be included to manage unexpected inputs.\n", "requirement analysis:\nThe requirement is to sort a space-delimited string of numerals represented as words. This requires converting these words into numerical values, sorting them, and then converting them back to words for the output. The challenge lies in the conversion process and ensuring the output is a string of sorted words.\nrequirement pool:\n- Implement a function to convert words to numbers and vice versa.\n- Ensure the sorting function works correctly for the converted values.\n- Develop a user interface that allows for easy input and output display.\n- Optimize the performance for handling large datasets.\n- Design a responsive UI that works well on both desktop and mobile devices.\nTo implement the function that sorts a space-delimited string of numerals represented as words, we will use Python's built-in capabilities along with the `inflect` library for converting between words and numbers. This approach ensures simplicity and efficiency in handling the conversion and sorting processes.\n", "requirement analysis:\nThe requirement is to sort a space-delimited string of numerals represented by their word forms. This requires parsing the input string, mapping the words to their corresponding numbers, sorting these numbers, and then returning the sorted numbers as a string.\nrequirement pool:\n- Implement a function to convert word numerals to their numeric equivalents.\n- Develop a sorting mechanism that can handle the conversion and sorting of numbers.\n- Ensure the application is user-friendly with a clear and simple interface.\n- Optimize the application for performance to handle large datasets efficiently.\n- Design a responsive UI that works well on both desktop and mobile devices.\nTo implement the function `sort_numbers`, we will use Python's built-in capabilities along with the `collections` module for a clear and efficient solution. The function will parse the input string, convert each word to its corresponding number, sort these numbers, and then return the sorted numbers as a string.\n", "requirement analysis:\nThe requirement is to create a function that takes a space-delimited string of numerals in words and returns a string with these numbers sorted from smallest to largest. This function should handle various inputs, including different combinations of numbers and spaces, and should be robust against errors.\nrequirement pool:\n- The main code should correctly convert the string of numerals in words to their numerical equivalents.\n- The function should sort the numbers in ascending order after conversion.\n- The function should handle any valid input format, including extra spaces or variations in word order.\n- The function should include error handling to manage unexpected inputs gracefully.\nTo implement the function `sort_numbers` that converts a space-delimited string of numerals in words to their numerical equivalents and sorts them, we will use Python's built-in capabilities along with the `inflect` library for number word conversion. This approach ensures simplicity and efficiency.\n", "requirement analysis:\nThe requirement is to sort a space-delimited string of numerals represented by words from 'zero' to 'nine'. This requires converting these words into their corresponding numerical values, sorting them, and then converting them back to words for the output. The solution should handle spaces and ensure that the output is a correctly sorted string of numerals.\nrequirement pool:\n- Implement a function to convert words to numbers.\n- Implement a function to sort the numbers.\n- Implement a function to convert numbers back to words.\n- Ensure the application handles errors gracefully, such as invalid inputs.\n- Optimize the application for performance, especially with large datasets.\nTo implement the function `sort_numbers` that sorts a space-delimited string of numerals represented by words from 'zero' to 'nine', we will follow these steps: First, we will create a mapping of words to their corresponding numerical values. Next, we will split the input string into individual words, convert them to numbers, sort the numbers, and then convert them back to words. Finally, we will join the sorted words back into a single string to be returned as the output.\n"], "scores": [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0], "pass_results": [true, false, false, false, true, false, false, true, false, true], "pass_test_cases_num": [121, 0, 0, 0, 121, 0, 0, 121, 0, 121], "completion": "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. These choices represent numbers from 0 to 9. Return the string with numbers sorted from smallest to largest.\n    '''\n    # Mapping of words to their corresponding numerical values\n    word_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Mapping of numerical values to their corresponding words\n    number_to_word = {value: key for key, value in word_to_number.items()}\n    \n    # Split the input string into individual words\n    words = numbers.split()\n    \n    # Convert words to numbers\n    numbers_list = [word_to_number[word] for word in words]\n    \n    # Sort the numbers\n    numbers_list.sort()\n    \n    # Convert sorted numbers back to words\n    sorted_words = [number_to_word[number] for number in numbers_list]\n    \n    # Join the sorted words into a single string\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string\n", "passed": true, "pass": true, "pass_num": 4, "round": 138, "repair_prompt": ["def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. These choices represent numbers from 0 to 9. Each numeral is the string representation of its corresponding number. Return the string with numbers sorted from smallest to largest.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''"], "mutate_method": "expand_one2two", "parent_index": 133}
