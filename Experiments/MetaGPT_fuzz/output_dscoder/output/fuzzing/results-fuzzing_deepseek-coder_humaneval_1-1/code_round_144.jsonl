{"task_id": "HumanEval/95", "prompt": "def check_dict_case(dict):\t\n'''\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Consider edge cases such as when the dictionary has mixed casing keys or non-string keys.\nExamples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    '''", "entry_point": "check_dict_case", "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n", "test": ["def check(check_dict_case):\n\tassert check_dict_case({'o': 'oop', 5: 'jcdvmy'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'c': 'tiuegeqq', 9: 'cpfxzgkgirje', 'q': 'vrueasg'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'vdk': 'MepbyhEjC', 'tdiernvi': 'LfqIO'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'j': 'kllixbfik', 7: 'qge', 'y': 'qdhfvkvd'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'qgt': 'rCmkqP', 'dvdmod': 'nMGgkaLu'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'g': 'xopdadefplk', 5: 'awdkxulto', 'v': 'rfl'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(check_dict_case({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))", "def check(check_dict_case):\n\tassert check_dict_case({'CNPlUyKIA': 'PYEe', 'NuCOYaAJz': '867846', 'inWSe': 'dxeqPgMIdB'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'v': 'doephj', 6: 'ywyax', 'o': 'ncaz'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'pKs': 'xVF', 'JuXee': '085', 'EXXukTz': 'Byik'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'PFHKF': 'UZVY', 'KXCCX': '31603'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'f': 'ddkomprr', 2: 'whev', 'k': 'xzdw'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'b': 'zgfpqzqgchia', 't': 'vwrphb'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'x': 'kqnfkdowweb', 'E': 'xzenelobbp', 'N': 'owrxqsq'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'m': 'avbvoxk', 10: 'xfiao', 'd': 'nji'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'VApyOCO': 'qeVr', 'SJzTNH': '679047', 'Jvwh': 'RvfMcp'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'UvtMlty': 'nVGDmDrCJ', 'BePcz': '374227', 'ZXEl': 'fKPqJsOvjbeo'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'w': 'mvnibigx', 'j': 'ijosvsbswe'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'VYA': 'TBCF', 'HDHYKLPTN': '12914'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'vTKV': 'vfcSoY', 'MqbjHgS': '9138', 'cGkgssLVr': 'yIuvFksPqM'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'bTDgmKv': 'rVwBHUauC', 'cWYzfZw': '934', 'TtWunxv': 'TvklwNHxNs'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'l': 'vnqfwvujzwfwyj', 'B': 'oqutyhqli', 'X': 'iajwq'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'z': 'ybgxprswhqgh', 'D': 'zhkwzgd', 'B': 'bwcgnexhx'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'MEIDTL': 'VRDKN', 'FZZWX': '1407'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'u': 'bftlcu', 'F': 'hxeag', 'Q': 'uzfnw'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(check_dict_case({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))", "def check(check_dict_case):\n\tassert check_dict_case({'KZLZ': 'SFT', 'KKFRSLKIY': '02303705'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'g': 'xlzmrlvob', 'H': 'vhpyporwr', 'W': 'ligdfquvi'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'pyuocwi': 'ACWLpFml', 'nbnak': 'nfhBi'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'BHmT': 'irq', 'uHvyEu': '8647', 'RrUKbfpO': 'zgJmtsWM'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'XYJC': 'jNuzHbk', 'zEx': '4860', 'zdFwlW': 'ZSxwsjPwxXtL'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'ilioz': 'uPobK', 'wfvwx': 'FTy'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'hnexdzem': 'DPAbnQw', 'dxljjrw': 'nLzTAmBzF'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'BMEOMSJDJ': 'FGQWI', 'SBBPXXNJ': '9993484'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'a': 'jzwwvdupalxyi', 'q': 'edvtpkwxm'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'n': 'tffsua', 'W': 'xldwoonez'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'v': 'dfbbgvzdscrv', 'E': 'sxencbvlia', 'L': 'twtxnlavj'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'m': 'hbbijvhbbrba', 'D': 'mxxkdqgu', 'K': 'raxko'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'VCOKEHUZW': 'TQJ', 'ROMV': '3254'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'m': 'mqrzjw', 'T': 'sikpsucfl', 'E': 'cbgmxxnmdrxg'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'x': 'rpaqitm', 'u': 'rtdwwvdybsic'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'j': 'fcgyragevddkvk', 'X': 'myasjlwty', 'E': 'wkjgzzoosgpi'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'n': 'qjkmwxqngd', 'w': 'iiuqsmtwe'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'j': 'parojmcxtaz', 8: 'iepc', 'w': 'guplmpum'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'CJSRG': 'ZQGTSH', 'RQOC': '7511'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'o': 'cmssdkn', 'E': 'recynfrwfua', 'L': 'pbhzdabxdqf'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'wKxGuyq': 'HrrH', 'VFiUO': '3154', 'kxO': 'pRiJqhnNOvYp'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'MEUHYJ': 'TEM', 'NYK': '34633713'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'n': 'wdjmxjjdc', 'l': 'nvvdrvkpm'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'mlm': 'zOhHfD', 'xtzf': 'uJsuR'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'b': 'tzyaufsrkaffc', 'm': 'atgbi'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'gbd': 'KLgAIXqIZfV', 'gdgfpyf': 'RNQJX'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'gfxnbl': 'AWZf', 'wbptpnqg': 'KRbNA'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'MBJMTMK': 'KNH', 'INKZWO': '89852'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'a': 'ynlnmxsajad', 'O': 'hspyi', 'Y': 'euhm'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(check_dict_case({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.", "def check(check_dict_case):\n\tassert check_dict_case({'luo': 'zzh', 'EhEH': '148', 'idVMULBj': 'BOIcgZHT'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'SBVUBTB': 'DIGG', 'BGMCYFGS': '105758'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'o': 'vqgkfowerkxp', 's': 'gfxx'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'prpw': 'WDf', 'onoscuy': 'uzybSwqZ'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(check_dict_case({\"p\":\"pineapple\", \"b\":\"banana\"}))", "def check(check_dict_case):\n\tassert check_dict_case({'zszouxi': 'yeMsjaF', 'sks': 'cBSJXJwX'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'k': 'rsepwmm'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'g': 'gybkdjrhp', 5: 'wzmbwr'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'l': 'tzovbnefdft', 4: 'pjztyrhmutrk', 'q': 'dhwxpbwsp'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'KEBnAZ': 'qhsnjgSnS', 'PefJT': '34073', 'JtVAjuodw': 'KaPSDGEJ'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'OPHYC': 'DZJLL', 'XHO': '4958528'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'DAL': 'KEWRR', 'SHIFWEEMW': '58926385'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'n': 'xahbfntlzktuzug', 8: 'jctakc', 'm': 'skml'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'vdoj': 'foQoqjSYT', 'vlvrbtrxt': 'haVFtae'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'ceugtmuz': 'TmP', 'stmg': 'BLl'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'m': 'zoykqipp', 'N': 'kmsnbylkc', 'B': 'ccpy'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'u': 'bvnywqo', 'f': 'lflfulzuds'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'s': 'jnuocmugsgrxukh', 10: 'qvwwhlo', 't': 'ohcjmtlzc'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'e': 'filcbtnfjni', 3: 'jnqosqrgmny', 'b': 'pfdi'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'AXMaj': 'YMhfFKO', 'xLUFwrhU': '99507', 'LCZ': 'OvkprKzu'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'OGCTqCm': 'HReaO', 'yQPf': '6207', 'LmegQqnKv': 'GWSx'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'TVMBVK': 'JVCDMR', 'JZGPKVLPN': '14605'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'m': 'sezrcoqwvnr', 'n': 'ldlxrkiot'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'n': 'dnukqzbtoup', 'D': 'oohaoy', 'V': 'vsapzys'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'pva': 'gdt', 'tqwqjnm': 'rFtgEIIfU'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'r': 'dyywxj', 'e': 'jyn'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'ISymfszDc': 'TfMacT', 'GuNgc': '50057', 'kAP': 'osNWsqkQ'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))", "def check(check_dict_case):\n\tassert check_dict_case({'ZGZGV': 'EFPM', 'WUIX': '668604994'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'l': 'eaufkyaebdl', 'h': 'sbi'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'k': 'fscjjnkxljechg', 1: 'wnzjtm', 'u': 'mnkqnqkin'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'p': 'irxohxlzzyvw', 8: 'awlrbu', 'w': 'ctdentj'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'i': 'kombtwcenp', 'l': 'umxhlr'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'c': 'eexvfiew', 'C': 'xopcqmg', 'G': 'kbwypgf'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'WUF': 'qMfFM', 'NtYD': '832', 'oKskZGfDX': 'WUvQyjc'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'RWETIY': 'YCDPL', 'GNTE': '451020125'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'y': 'juyddabdrnlrn', 'T': 'cazvvctpga', 'B': 'dbg'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'w': 'vmnvozhiocvkqh', 2: 'wgrteaeecuez', 'g': 'fxyzqtmxa'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'aohHoCn': 'rxNzkmv', 'BTGHom': '963', 'aRySCQA': 'IGu'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'bddotika': 'nRFb', 'jwprcqddz': 'bBR'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({}) == False, \"1st edge test error: \" + str(check_dict_case({}))", "def check(check_dict_case):\n\tassert check_dict_case({'h': 'zprecd', 'y': 'afv'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'YNBEJI': 'SGLU', 'INYRRDKZ': '571'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'zdyouS': 'LOwog', 'dpnawfDD': '981962', 'DcXeOlW': 'imL'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'c': 'exhkugly', 'H': 'hxljxqntbie', 'N': 'puptvlju'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'w': 'iduoimnfubqlxbq', 'R': 'ovifuvem', 'D': 'klw'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'l': 'btvngk', 'h': 'ongztnabsigc'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'f': 'exlzue', 'i': 'yrewpjx'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'kdmdoymmf': 'sdvwzSyPe', 'cvtnh': 'air'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))", "def check(check_dict_case):\n\tassert check_dict_case({'n': 'wdjvdltslua', 'i': 'peurlqybqvct'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'d': 'tahdnaz', 10: 'icakelzp', 'y': 'hawbuz'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'LSTAF': 'UAZSVT', 'XIS': '713'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'vymrps': 'tRQlVfOy', 'xgn': 'LBJtlb'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'qhskalyon': 'jTkUuceZR', 'ypyvn': 'CoCbYQ'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'WEJAX': 'YWBJXH', 'HLZLLV': '7304084'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'duase': 'StBcsYaUZFV', 'mbnuc': 'SDGj'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'w': 'ypghvpfdrq', 6: 'fyzqdslgte', 'e': 'hboeipeq'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'CuYwc': 'rAdthhp', 'XzJaxnpP': '332954', 'kTf': 'vGasJU'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({}) == False"], "test_case_list": ["assert check_dict_case({'o': 'oop', 5: 'jcdvmy'}) == False", "assert check_dict_case({'c': 'tiuegeqq', 9: 'cpfxzgkgirje', 'q': 'vrueasg'}) == False", "assert check_dict_case({'vdk': 'MepbyhEjC', 'tdiernvi': 'LfqIO'}) == True", "assert check_dict_case({'j': 'kllixbfik', 7: 'qge', 'y': 'qdhfvkvd'}) == False", "assert check_dict_case({'qgt': 'rCmkqP', 'dvdmod': 'nMGgkaLu'}) == True", "assert check_dict_case({'g': 'xopdadefplk', 5: 'awdkxulto', 'v': 'rfl'}) == False", "assert check_dict_case({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(check_dict_case({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))", "assert check_dict_case({'CNPlUyKIA': 'PYEe', 'NuCOYaAJz': '867846', 'inWSe': 'dxeqPgMIdB'}) == False", "assert check_dict_case({'v': 'doephj', 6: 'ywyax', 'o': 'ncaz'}) == False", "assert check_dict_case({'pKs': 'xVF', 'JuXee': '085', 'EXXukTz': 'Byik'}) == False", "assert check_dict_case({'PFHKF': 'UZVY', 'KXCCX': '31603'}) == True", "assert check_dict_case({'f': 'ddkomprr', 2: 'whev', 'k': 'xzdw'}) == False", "assert check_dict_case({'b': 'zgfpqzqgchia', 't': 'vwrphb'}) == True", "assert check_dict_case({'x': 'kqnfkdowweb', 'E': 'xzenelobbp', 'N': 'owrxqsq'}) == False", "assert check_dict_case({'m': 'avbvoxk', 10: 'xfiao', 'd': 'nji'}) == False", "assert check_dict_case({'VApyOCO': 'qeVr', 'SJzTNH': '679047', 'Jvwh': 'RvfMcp'}) == False", "assert check_dict_case({'UvtMlty': 'nVGDmDrCJ', 'BePcz': '374227', 'ZXEl': 'fKPqJsOvjbeo'}) == False", "assert check_dict_case({'w': 'mvnibigx', 'j': 'ijosvsbswe'}) == True", "assert check_dict_case({'VYA': 'TBCF', 'HDHYKLPTN': '12914'}) == True", "assert check_dict_case({'vTKV': 'vfcSoY', 'MqbjHgS': '9138', 'cGkgssLVr': 'yIuvFksPqM'}) == False", "assert check_dict_case({'bTDgmKv': 'rVwBHUauC', 'cWYzfZw': '934', 'TtWunxv': 'TvklwNHxNs'}) == False", "assert check_dict_case({'l': 'vnqfwvujzwfwyj', 'B': 'oqutyhqli', 'X': 'iajwq'}) == False", "assert check_dict_case({'z': 'ybgxprswhqgh', 'D': 'zhkwzgd', 'B': 'bwcgnexhx'}) == False", "assert check_dict_case({'MEIDTL': 'VRDKN', 'FZZWX': '1407'}) == True", "assert check_dict_case({'u': 'bftlcu', 'F': 'hxeag', 'Q': 'uzfnw'}) == False", "assert check_dict_case({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(check_dict_case({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))", "assert check_dict_case({'KZLZ': 'SFT', 'KKFRSLKIY': '02303705'}) == True", "assert check_dict_case({'g': 'xlzmrlvob', 'H': 'vhpyporwr', 'W': 'ligdfquvi'}) == False", "assert check_dict_case({'pyuocwi': 'ACWLpFml', 'nbnak': 'nfhBi'}) == True", "assert check_dict_case({'BHmT': 'irq', 'uHvyEu': '8647', 'RrUKbfpO': 'zgJmtsWM'}) == False", "assert check_dict_case({'XYJC': 'jNuzHbk', 'zEx': '4860', 'zdFwlW': 'ZSxwsjPwxXtL'}) == False", "assert check_dict_case({'ilioz': 'uPobK', 'wfvwx': 'FTy'}) == True", "assert check_dict_case({'hnexdzem': 'DPAbnQw', 'dxljjrw': 'nLzTAmBzF'}) == True", "assert check_dict_case({'BMEOMSJDJ': 'FGQWI', 'SBBPXXNJ': '9993484'}) == True", "assert check_dict_case({'a': 'jzwwvdupalxyi', 'q': 'edvtpkwxm'}) == True", "assert check_dict_case({'n': 'tffsua', 'W': 'xldwoonez'}) == False", "assert check_dict_case({'v': 'dfbbgvzdscrv', 'E': 'sxencbvlia', 'L': 'twtxnlavj'}) == False", "assert check_dict_case({'m': 'hbbijvhbbrba', 'D': 'mxxkdqgu', 'K': 'raxko'}) == False", "assert check_dict_case({'VCOKEHUZW': 'TQJ', 'ROMV': '3254'}) == True", "assert check_dict_case({'m': 'mqrzjw', 'T': 'sikpsucfl', 'E': 'cbgmxxnmdrxg'}) == False", "assert check_dict_case({'x': 'rpaqitm', 'u': 'rtdwwvdybsic'}) == True", "assert check_dict_case({'j': 'fcgyragevddkvk', 'X': 'myasjlwty', 'E': 'wkjgzzoosgpi'}) == False", "assert check_dict_case({'n': 'qjkmwxqngd', 'w': 'iiuqsmtwe'}) == True", "assert check_dict_case({'j': 'parojmcxtaz', 8: 'iepc', 'w': 'guplmpum'}) == False", "assert check_dict_case({'CJSRG': 'ZQGTSH', 'RQOC': '7511'}) == True", "assert check_dict_case({'o': 'cmssdkn', 'E': 'recynfrwfua', 'L': 'pbhzdabxdqf'}) == False", "assert check_dict_case({'wKxGuyq': 'HrrH', 'VFiUO': '3154', 'kxO': 'pRiJqhnNOvYp'}) == False", "assert check_dict_case({'MEUHYJ': 'TEM', 'NYK': '34633713'}) == True", "assert check_dict_case({'n': 'wdjmxjjdc', 'l': 'nvvdrvkpm'}) == True", "assert check_dict_case({'mlm': 'zOhHfD', 'xtzf': 'uJsuR'}) == True", "assert check_dict_case({'b': 'tzyaufsrkaffc', 'm': 'atgbi'}) == True", "assert check_dict_case({'gbd': 'KLgAIXqIZfV', 'gdgfpyf': 'RNQJX'}) == True", "assert check_dict_case({'gfxnbl': 'AWZf', 'wbptpnqg': 'KRbNA'}) == True", "assert check_dict_case({'MBJMTMK': 'KNH', 'INKZWO': '89852'}) == True", "assert check_dict_case({'a': 'ynlnmxsajad', 'O': 'hspyi', 'Y': 'euhm'}) == False", "assert check_dict_case({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(check_dict_case({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.", "assert check_dict_case({'luo': 'zzh', 'EhEH': '148', 'idVMULBj': 'BOIcgZHT'}) == False", "assert check_dict_case({'SBVUBTB': 'DIGG', 'BGMCYFGS': '105758'}) == True", "assert check_dict_case({'o': 'vqgkfowerkxp', 's': 'gfxx'}) == True", "assert check_dict_case({'prpw': 'WDf', 'onoscuy': 'uzybSwqZ'}) == True", "assert check_dict_case({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(check_dict_case({\"p\":\"pineapple\", \"b\":\"banana\"}))", "assert check_dict_case({'zszouxi': 'yeMsjaF', 'sks': 'cBSJXJwX'}) == True", "assert check_dict_case({'k': 'rsepwmm'}) == True", "assert check_dict_case({'g': 'gybkdjrhp', 5: 'wzmbwr'}) == False", "assert check_dict_case({'l': 'tzovbnefdft', 4: 'pjztyrhmutrk', 'q': 'dhwxpbwsp'}) == False", "assert check_dict_case({'KEBnAZ': 'qhsnjgSnS', 'PefJT': '34073', 'JtVAjuodw': 'KaPSDGEJ'}) == False", "assert check_dict_case({'OPHYC': 'DZJLL', 'XHO': '4958528'}) == True", "assert check_dict_case({'DAL': 'KEWRR', 'SHIFWEEMW': '58926385'}) == True", "assert check_dict_case({'n': 'xahbfntlzktuzug', 8: 'jctakc', 'm': 'skml'}) == False", "assert check_dict_case({'vdoj': 'foQoqjSYT', 'vlvrbtrxt': 'haVFtae'}) == True", "assert check_dict_case({'ceugtmuz': 'TmP', 'stmg': 'BLl'}) == True", "assert check_dict_case({'m': 'zoykqipp', 'N': 'kmsnbylkc', 'B': 'ccpy'}) == False", "assert check_dict_case({'u': 'bvnywqo', 'f': 'lflfulzuds'}) == True", "assert check_dict_case({'s': 'jnuocmugsgrxukh', 10: 'qvwwhlo', 't': 'ohcjmtlzc'}) == False", "assert check_dict_case({'e': 'filcbtnfjni', 3: 'jnqosqrgmny', 'b': 'pfdi'}) == False", "assert check_dict_case({'AXMaj': 'YMhfFKO', 'xLUFwrhU': '99507', 'LCZ': 'OvkprKzu'}) == False", "assert check_dict_case({'OGCTqCm': 'HReaO', 'yQPf': '6207', 'LmegQqnKv': 'GWSx'}) == False", "assert check_dict_case({'TVMBVK': 'JVCDMR', 'JZGPKVLPN': '14605'}) == True", "assert check_dict_case({'m': 'sezrcoqwvnr', 'n': 'ldlxrkiot'}) == True", "assert check_dict_case({'n': 'dnukqzbtoup', 'D': 'oohaoy', 'V': 'vsapzys'}) == False", "assert check_dict_case({'pva': 'gdt', 'tqwqjnm': 'rFtgEIIfU'}) == True", "assert check_dict_case({'r': 'dyywxj', 'e': 'jyn'}) == True", "assert check_dict_case({'ISymfszDc': 'TfMacT', 'GuNgc': '50057', 'kAP': 'osNWsqkQ'}) == False", "assert check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))", "assert check_dict_case({'ZGZGV': 'EFPM', 'WUIX': '668604994'}) == True", "assert check_dict_case({'l': 'eaufkyaebdl', 'h': 'sbi'}) == True", "assert check_dict_case({'k': 'fscjjnkxljechg', 1: 'wnzjtm', 'u': 'mnkqnqkin'}) == False", "assert check_dict_case({'p': 'irxohxlzzyvw', 8: 'awlrbu', 'w': 'ctdentj'}) == False", "assert check_dict_case({'i': 'kombtwcenp', 'l': 'umxhlr'}) == True", "assert check_dict_case({'c': 'eexvfiew', 'C': 'xopcqmg', 'G': 'kbwypgf'}) == False", "assert check_dict_case({'WUF': 'qMfFM', 'NtYD': '832', 'oKskZGfDX': 'WUvQyjc'}) == False", "assert check_dict_case({'RWETIY': 'YCDPL', 'GNTE': '451020125'}) == True", "assert check_dict_case({'y': 'juyddabdrnlrn', 'T': 'cazvvctpga', 'B': 'dbg'}) == False", "assert check_dict_case({'w': 'vmnvozhiocvkqh', 2: 'wgrteaeecuez', 'g': 'fxyzqtmxa'}) == False", "assert check_dict_case({'aohHoCn': 'rxNzkmv', 'BTGHom': '963', 'aRySCQA': 'IGu'}) == False", "assert check_dict_case({'bddotika': 'nRFb', 'jwprcqddz': 'bBR'}) == True", "assert check_dict_case({}) == False, \"1st edge test error: \" + str(check_dict_case({}))", "assert check_dict_case({'h': 'zprecd', 'y': 'afv'}) == True", "assert check_dict_case({'YNBEJI': 'SGLU', 'INYRRDKZ': '571'}) == True", "assert check_dict_case({'zdyouS': 'LOwog', 'dpnawfDD': '981962', 'DcXeOlW': 'imL'}) == False", "assert check_dict_case({'c': 'exhkugly', 'H': 'hxljxqntbie', 'N': 'puptvlju'}) == False", "assert check_dict_case({'w': 'iduoimnfubqlxbq', 'R': 'ovifuvem', 'D': 'klw'}) == False", "assert check_dict_case({'l': 'btvngk', 'h': 'ongztnabsigc'}) == True", "assert check_dict_case({'f': 'exlzue', 'i': 'yrewpjx'}) == True", "assert check_dict_case({'kdmdoymmf': 'sdvwzSyPe', 'cvtnh': 'air'}) == True", "assert check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))", "assert check_dict_case({'n': 'wdjvdltslua', 'i': 'peurlqybqvct'}) == True", "assert check_dict_case({'d': 'tahdnaz', 10: 'icakelzp', 'y': 'hawbuz'}) == False", "assert check_dict_case({'LSTAF': 'UAZSVT', 'XIS': '713'}) == True", "assert check_dict_case({'vymrps': 'tRQlVfOy', 'xgn': 'LBJtlb'}) == True", "assert check_dict_case({'qhskalyon': 'jTkUuceZR', 'ypyvn': 'CoCbYQ'}) == True", "assert check_dict_case({'WEJAX': 'YWBJXH', 'HLZLLV': '7304084'}) == True", "assert check_dict_case({'duase': 'StBcsYaUZFV', 'mbnuc': 'SDGj'}) == True", "assert check_dict_case({'w': 'ypghvpfdrq', 6: 'fyzqdslgte', 'e': 'hboeipeq'}) == False", "assert check_dict_case({'CuYwc': 'rAdthhp', 'XzJaxnpP': '332954', 'kTf': 'vGasJU'}) == False", "assert check_dict_case({}) == False"], "nl": "\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    ", "func": "def check_dict_case(dict):", "examples": "Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    ", "completions": ["from typing import List\n## main.py\n\ndef check_dict_case(dictionary: dict) -> bool:\n    \"\"\"\n    Checks if all keys in the dictionary are either all in lower case or all in upper case.\n\n    Args:\n        dictionary (dict): The dictionary to check.\n\n    Returns:\n        bool: True if all keys are in lower case or all in upper case, False otherwise.\n    \"\"\"\n    if not dictionary:\n        return True  # An empty dictionary is considered to have all keys in a single case.\n\n    lower_case_keys = True\n    upper_case_keys = True\n\n    for key in dictionary.keys():\n        if not isinstance(key, str):\n            raise ValueError(\"All keys in the dictionary must be strings.\")\n        \n        if not key.islower():\n            lower_case_keys = False\n        if not key.isupper():\n            upper_case_keys = False\n\n    return lower_case_keys or upper_case_keys\n", "from typing import List\ndef check_dict_case(dictionary: dict) -> bool:\n    if not dictionary:\n        return False\n    for key in dictionary.keys():\n        if not isinstance(key, str):\n            return False\n        if key.lower() != key and key.upper() != key:\n            return False\n    return True\n", "from typing import List\n## main.py\n\ndef check_dict_case(dict_: dict) -> bool:\n    \"\"\"\n    Checks if all keys in the dictionary are either entirely in lower case or entirely in upper case.\n    \n    Args:\n        dict_ (dict): The dictionary to check.\n        \n    Returns:\n        bool: True if all keys are in the correct case, False otherwise.\n    \"\"\"\n    if not dict_:\n        return False\n    \n    for key in dict_.keys():\n        if not isinstance(key, str):\n            return False\n        if not (key.islower() or key.isupper()):\n            return False\n    \n    return True\n", "from typing import List\n## main.py\n\ndef check_dict_case(dictionary: dict) -> bool:\n    '''\n    Given a dictionary, return True if all keys are strings in lower case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty or if any key is not a string.\n    '''\n    if not dictionary:\n        return False\n    \n    for key in dictionary.keys():\n        if not isinstance(key, str):\n            return False\n        if not (key.islower() or key.isupper()):\n            return False\n    \n    return True\n", "from typing import List\n## main.py\n\ndef check_dict_case(dict_: dict) -> bool:\n    '''\n    Given a dictionary, return True if all keys are strings in lower case or all keys are strings in upper case.\n    The function should return False if the given dictionary is empty or if it contains mixed casing keys or non-string keys.\n    '''\n    if not dict_:\n        return False\n    \n    all_lower = True\n    all_upper = True\n    \n    for key in dict_:\n        if not isinstance(key, str):\n            return False\n        if not key.islower():\n            all_lower = False\n        if not key.isupper():\n            all_upper = False\n    \n    return all_lower or all_upper\n", "from typing import List\n## main.py\n\ndef check_dict_case(dictionary: dict) -> bool:\n    '''\n    Given a dictionary, return True if all keys are strings in lower case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    '''\n    if not dictionary:\n        return False\n    \n    all_lower = True\n    all_upper = True\n    \n    for key in dictionary.keys():\n        if not isinstance(key, str):\n            return False\n        if not key.islower():\n            all_lower = False\n        if not key.isupper():\n            all_upper = False\n    \n    return all_lower or all_upper\n", "from typing import List\n## main.py\n\ndef check_dict_case(dict_: dict) -> bool:\n    \"\"\"\n    Check if all keys in a dictionary are either all in lower case or all in upper case.\n\n    Args:\n        dict_ (dict): The input dictionary.\n\n    Returns:\n        bool: True if all keys are in lower or upper case, False otherwise.\n    \"\"\"\n    if not dict_:\n        return False\n\n    all_lower = True\n    all_upper = True\n\n    for key in dict_.keys():\n        if not isinstance(key, str):\n            return False\n        if not key.islower():\n            all_lower = False\n        if not key.isupper():\n            all_upper = False\n\n    return all_lower or all_upper\n", "from typing import List\n## main.py\n\ndef check_dict_case(dict_: dict) -> bool:\n    \"\"\"\n    Check if all keys in a dictionary are either all in lower case or all in upper case.\n\n    Args:\n        dict_ (dict): A dictionary to be checked.\n\n    Returns:\n        bool: True if all keys are either all in lower case or all in upper case, else False.\n    \"\"\"\n    if not isinstance(dict_, dict):\n        raise ValueError(\"Input must be a dictionary\")\n    \n    if not dict_:\n        return False\n    \n    lower_case_keys = True\n    upper_case_keys = True\n    \n    for key in dict_.keys():\n        if not key.islower():\n            lower_case_keys = False\n        if not key.isupper():\n            upper_case_keys = False\n    \n    return lower_case_keys or upper_case_keys\n", "from typing import List\n## main.py\n\ndef check_dict_case(dict_: dict) -> bool:\n    \"\"\"\n    Check if all keys in the dictionary are in lower case or upper case.\n\n    Args:\n        dict_ (dict): The input dictionary.\n\n    Returns:\n        bool: True if all keys are in lower or upper case, False otherwise.\n    \"\"\"\n    if not dict_:\n        return False\n\n    for key in dict_.keys():\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef check_dict_case(dictionary: dict) -> bool:\n    '''\n    Given a dictionary, return True if all keys are strings in lower case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty or if any key is not a string.\n    '''\n    if not dictionary:\n        return False\n    \n    for key in dictionary.keys():\n        if not isinstance(key, str):\n            return False\n        if not (key.islower() or key.isupper()):\n            return False\n    \n    return True\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that checks if all keys in a dictionary are either all in lower case or all in upper case. The function should return False if the dictionary is empty or if any key is not a string. This requirement is crucial for maintaining data integrity and consistency in dictionary key management.\nrequirement pool:\n- Implement the function to check dictionary key cases\n- Handle edge cases such as empty dictionaries and non-string keys\n- Ensure the function returns True if all keys are in lower or upper case\n- Optimize the function for readability and efficiency\nTo implement the function `check_dict_case` efficiently and clearly, we will use Python's built-in capabilities and standard libraries. The function will iterate through the dictionary keys, checking each one for its case. We will ensure that the function handles edge cases such as empty dictionaries and non-string keys effectively. The function will return True if all keys are in lower case or all keys are in upper case, and False otherwise.\n", "requirement analysis:\nThe original requirements specify a function that checks if all keys in a dictionary are either in lower case or upper case. The function should return False if the dictionary is empty or if it contains mixed casing keys or non-string keys. The requirements are clear and specific, focusing on the functionality and edge cases of the function.\nrequirement pool:\n- Implement the function to check if all keys in a dictionary are in lower or upper case.\n- Handle the edge case of an empty dictionary by returning False.\n- Ensure the function correctly identifies mixed casing and non-string keys by returning False.\n- Optimize the function for readability and maintainability.\nWe will implement the function using Python's built-in capabilities to ensure clarity and simplicity. The function will check each key in the dictionary to verify if all keys are either in lower case or upper case. It will return False if the dictionary is empty or contains mixed casing keys or non-string keys.\n", "requirement analysis:\nThe requirement is to create a function that checks if all keys in a dictionary are either all in lower case or all in upper case. The function should return False if the dictionary is empty or if it contains keys of mixed case. Non-string keys should also result in a False return. The function should be robust and handle edge cases effectively.\nrequirement pool:\n- Implement the function to check dictionary key cases.\n- Ensure the function handles empty dictionaries and non-string keys.\n- Document the function with examples and edge cases.\n- Test the function for accuracy and performance.\nTo implement the function `check_dict_case`, we need to ensure it checks each key in the dictionary to determine if all keys are either entirely in lower case or entirely in upper case. The function should return `False` if the dictionary is empty, contains non-string keys, or has keys of mixed case. We will use Python's built-in capabilities to iterate through the dictionary and check the case of each key.\n", "requirement analysis:\nThe requirement is to create a function that checks if all keys in a dictionary are either all in lower case or all in upper case. The function should return False if the dictionary is empty or if any key is not a string. The function should also handle edge cases such as mixed casing keys or non-string keys.\nrequirement pool:\n- The main code should accurately check the case of dictionary keys.\n- The function should return False if the dictionary is empty.\n- The function should handle mixed casing keys and non-string keys.\n- Provide clear and concise documentation for the function.\n- Test the function with various edge cases to ensure robustness.\nTo implement the function `check_dict_case`, we will use Python's built-in capabilities to iterate through the dictionary keys and check their case. We will ensure that all keys are either in lower case or upper case. We will also handle the edge cases such as empty dictionary and non-string keys.\n", "requirement analysis:\nThe requirement is to create a function that checks if all keys in a dictionary are either in lower case or upper case. The function should return False if the dictionary is empty or if it contains mixed casing keys or non-string keys. The function should handle edge cases to ensure robustness. The solution should be efficient and clear, making it easy to understand and use.\nrequirement pool:\n- Implement the function to check dictionary key cases\n- Handle edge cases such as empty dictionary and mixed casing keys\n- Ensure the function returns False for non-string keys\n- Optimize the function for performance and readability\nTo implement the function `check_dict_case`, we need to ensure it checks each key in the dictionary to determine if all keys are either in lower case or upper case. We will use Python's built-in functions and data structures to achieve this. The function will first check if the dictionary is empty, returning False if it is. Then, it will iterate through each key in the dictionary to check its case. If all keys are either all lower case or all upper case, the function will return True; otherwise, it will return False. We will also handle edge cases where keys are not strings.\n", "requirement analysis:\nThe requirement is to create a function that checks if all keys in a dictionary are either in lower case or upper case. The function should return True if the condition is met, otherwise False. It should also handle edge cases such as empty dictionaries and dictionaries with mixed casing or non-string keys. The function should be efficient and clear, ensuring it meets the needs of the user effectively.\nrequirement pool:\n- The main code should efficiently check if all keys in the dictionary are uniformly in lower or upper case.\n- The function should handle edge cases such as empty dictionaries and dictionaries with mixed casing or non-string keys.\n- The implementation should be clear and easy to understand, ensuring it meets the needs of the user effectively.\n- The function should be tested with various inputs to ensure it works as expected.\nWe will use Python's built-in functions and a simple loop to iterate through the dictionary keys. We will check if all keys are either all lower case or all upper case. If the dictionary is empty, we will return False. If the dictionary contains non-string keys or mixed casing keys, we will return False.\n", "requirement analysis:\nThe requirement is to create a function that checks if all keys in a dictionary are either all in lower case or all in upper case. The function should return False if the dictionary is empty or if it contains keys that are not strings. The function should also handle mixed casing keys and non-string keys appropriately. The function should be robust and handle edge cases effectively.\nrequirement pool:\n- The main code should accurately check the case of dictionary keys.\n- The function should return False if the dictionary is empty.\n- The function should handle mixed casing keys and non-string keys appropriately.\n- The function should be robust and handle edge cases effectively.\nTo implement the function `check_dict_case` that checks if all keys in a dictionary are either all in lower case or all in upper case, we will use Python's built-in capabilities and type checking. We will ensure the function handles edge cases such as empty dictionaries, dictionaries with mixed casing keys, and dictionaries containing non-string keys.\n", "requirement analysis:\nThe requirement is to create a function that checks if all keys in a dictionary are either all in lower case or all in upper case. The function should return False if the dictionary is empty or if any key is not a string. The function should also handle cases where the dictionary has mixed casing keys or non-string keys.\nrequirement pool:\n- The function should check if all keys in the dictionary are either all in lower case or all in upper case.\n- The function should return False if the dictionary is empty.\n- The function should handle cases where the dictionary has mixed casing keys or non-string keys.\n- The function should be documented clearly.\nTo implement the function `check_dict_case` that checks if all keys in a dictionary are either all in lower case or all in upper case, we will follow these steps: \n1. Validate the input to ensure it is a dictionary. \n2. Check if the dictionary is empty and return False if it is. \n3. Iterate through the keys of the dictionary to check if all keys are either all in lower case or all in upper case. \n4. Return True if all keys meet the criteria, otherwise return False.\n", "requirement analysis:\nThe requirement is to create a function that checks if all keys in a dictionary are either all in lower case or all in upper case. The function should return False if the dictionary is empty or if any key is not a string. The function should also handle edge cases such as mixed casing keys or non-string keys.\nrequirement pool:\n- The main code should accurately check the case of dictionary keys.\n- The function should return False if the dictionary is empty.\n- The function should handle mixed casing keys and return False if any key is not a string.\n- The function should be documented clearly.\nTo implement the function `check_dict_case`, we will follow these steps: 1. Check if the dictionary is empty. If it is, return False. 2. Iterate through each key in the dictionary. 3. For each key, check if it is a string. If any key is not a string, return False. 4. Check if all keys are in lower case or all keys are in upper case. If they are, return True; otherwise, return False.\n", "requirement analysis:\nThe requirement is to create a function that checks if all keys in a dictionary are either all in lower case or all in upper case. The function should return False if the dictionary is empty or if any key is not a string. The function should also handle edge cases such as mixed casing keys or non-string keys.\nrequirement pool:\n- The main code should accurately check the case of dictionary keys.\n- The function should return False if the dictionary is empty.\n- The function should handle mixed casing keys and non-string keys.\n- Provide clear and concise documentation for the function.\n- Test the function with various edge cases to ensure robustness.\nTo implement the function `check_dict_case`, we will use Python's built-in capabilities to iterate through the dictionary keys and check their case. We will ensure that all keys are either in lower case or upper case. We will also handle the edge cases such as empty dictionary and non-string keys.\n"], "scores": [0.819, 0.8362, 0.8362, 0.8362, 1.0, 1.0, 1.0, 0.8362, 0.8362, 0.8362], "pass_results": [false, false, false, false, true, true, true, false, false, false], "pass_test_cases_num": [95, 97, 97, 97, 116, 116, 116, 97, 97, 97], "completion": "from typing import List\n## main.py\n\ndef check_dict_case(dictionary: dict) -> bool:\n    '''\n    Given a dictionary, return True if all keys are strings in lower case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty or if any key is not a string.\n    '''\n    if not dictionary:\n        return False\n    \n    for key in dictionary.keys():\n        if not isinstance(key, str):\n            return False\n        if not (key.islower() or key.isupper()):\n            return False\n    \n    return True\n", "passed": true, "pass": true, "pass_num": 3, "round": 144, "repair_prompt": ["def check_dict_case(dict):\t\n'''\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Consider edge cases such as when the dictionary has mixed casing keys or non-string keys.\nExamples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    '''"], "mutate_method": "add_1_sentence_at_end", "parent_index": 173}
