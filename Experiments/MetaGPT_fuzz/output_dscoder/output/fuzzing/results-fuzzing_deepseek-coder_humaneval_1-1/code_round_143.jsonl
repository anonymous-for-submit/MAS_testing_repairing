{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers. It returns true if one of the numbers is equal to the sum of the other two and all numbers are integers, and returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "entry_point": "any_int", "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n", "test": ["def check(any_int):\n\tassert any_int(8, 19, 11) == True", "def check(any_int):\n\tassert any_int(7.307, 7.071, 5.088) == False", "def check(any_int):\n\tassert any_int(6, 12, 6) == True", "def check(any_int):\n\tassert any_int(6.511, 2, 3) == False", "def check(any_int):\n\tassert any_int(12, 6, 6) == True", "def check(any_int):\n\tassert any_int(2, 2, 4) == True", "def check(any_int):\n\tassert any_int(5.114, 5, 4) == False", "def check(any_int):\n\tassert any_int(3.376, 6.953, 2.111) == False", "def check(any_int):\n\tassert any_int(2, 3, 1)==True", "def check(any_int):\n\tassert any_int(2, 5, 4) == False", "def check(any_int):\n\tassert any_int(7.194, 1.302, 7.462) == False", "def check(any_int):\n\tassert any_int(1, 7, 8) == True", "def check(any_int):\n\tassert any_int(5, 8, 3) == True", "def check(any_int):\n\tassert any_int(2.389, 9, 10) == False", "def check(any_int):\n\tassert any_int(-1, 0, 1) == True", "def check(any_int):\n\tassert any_int(9, 6, 3) == True", "def check(any_int):\n\tassert any_int(4.38, 6, 1) == False", "def check(any_int):\n\tassert any_int(3.785, 6.308, 7.367) == False", "def check(any_int):\n\tassert any_int(6, 10, 4) == True", "def check(any_int):\n\tassert any_int(1.705, 2, 6.616) == False", "def check(any_int):\n\tassert any_int(6, 4, 2) == True", "def check(any_int):\n\tassert any_int(4, 2, 2)==True", "def check(any_int):\n\tassert any_int(3.692, 2, 7.2) == False", "def check(any_int):\n\tassert any_int(2.5, 2, 3)==False", "def check(any_int):\n\tassert any_int(5, 6, 1) == True", "def check(any_int):\n\tassert any_int(1, 3, 2) == True", "def check(any_int):\n\tassert any_int(3,4,7)==True", "def check(any_int):\n\tassert any_int(6, 10, 1) == False", "def check(any_int):\n\tassert any_int(6, 2, 4) == True", "def check(any_int):\n\tassert any_int(6.155, 2.926, 1.672) == False", "def check(any_int):\n\tassert any_int(5, 2, 3) == True", "def check(any_int):\n\tassert any_int(7.829, 2, 9) == False", "def check(any_int):\n\tassert any_int(4, 6, 3) == False", "def check(any_int):\n\tassert any_int(2.583, 3.749, 4.738) == False", "def check(any_int):\n\tassert any_int(12, 11, 1) == True", "def check(any_int):\n\tassert any_int(3.211, 4, 3) == False", "def check(any_int):\n\tassert any_int(1, 1, 7) == False", "def check(any_int):\n\tassert any_int(0, 3, 3) == True", "def check(any_int):\n\tassert any_int(1.157, 8, 2) == False", "def check(any_int):\n\tassert any_int(3, 3, 6) == True", "def check(any_int):\n\tassert any_int(4.272, 6.612, 6.663) == False", "def check(any_int):\n\tassert any_int(1, 1, 2) == True", "def check(any_int):\n\tassert any_int(2.2, 2.2, 2.2)==False", "def check(any_int):\n\tassert any_int(3.158, 8, 6.135) == False", "def check(any_int):\n\tassert any_int(1.346, 5, 6) == False", "def check(any_int):\n\tassert any_int(15, 9, 6) == True", "def check(any_int):\n\tassert any_int(1, 4, 5) == True", "def check(any_int):\n\tassert any_int(7.656, 1, 7) == False", "def check(any_int):\n\tassert any_int(3.599, 5, 1) == False", "def check(any_int):\n\tassert any_int(3, 1, 2) == True", "def check(any_int):\n\tassert any_int(-3, 2, 5) == True", "def check(any_int):\n\tassert any_int(4, 11, 5) == False", "def check(any_int):\n\tassert any_int(10, 7, 3) == True", "def check(any_int):\n\tassert any_int(7, 3, 10) == True", "def check(any_int):\n\tassert any_int(3, 4, 1) == True", "def check(any_int):\n\tassert any_int(3.103, 3, 10) == False", "def check(any_int):\n\tassert any_int(6, 16, 10) == True", "def check(any_int):\n\tassert any_int(1.812, 6.567, 7.145) == False", "def check(any_int):\n\tassert any_int(6, 6, 12) == True", "def check(any_int):\n\tassert any_int(1, 7, 2) == False", "def check(any_int):\n\tassert any_int(7, 6, 1) == True", "def check(any_int):\n\tassert any_int(4, 3, 7) == True", "def check(any_int):\n\tassert any_int(4, 6, 2) == True", "def check(any_int):\n\tassert any_int(2.007, 9, 7.198) == False", "def check(any_int):\n\tassert any_int(2, 3, 5) == True", "def check(any_int):\n\tassert any_int(6.086, 4, 4) == False", "def check(any_int):\n\tassert any_int(3.754, 6, 5.044) == False", "def check(any_int):\n\tassert any_int(8, 10, 2) == True", "def check(any_int):\n\tassert any_int(7.73, 5.041, 6.418) == False", "def check(any_int):\n\tassert any_int(2, 6, 2)==False", "def check(any_int):\n\tassert any_int(3.683, 8, 1.193) == False", "def check(any_int):\n\tassert any_int(-4, 6, 2)==True", "def check(any_int):\n\tassert any_int(7, 13, 6) == True", "def check(any_int):\n\tassert any_int(2.003, 3, 11) == False", "def check(any_int):\n\tassert any_int(3.357, 7, 8.074) == False", "def check(any_int):\n\tassert any_int(3.621, 6.679, 2.542) == False", "def check(any_int):\n\tassert any_int(12, 3, 9) == True", "def check(any_int):\n\tassert any_int(7.797, 7, 4) == False", "def check(any_int):\n\tassert any_int(7, 1, 8) == True", "def check(any_int):\n\tassert any_int(5, 3, 8) == True", "def check(any_int):\n\tassert any_int(5, 7, 2) == True", "def check(any_int):\n\tassert any_int(5, 6, 11) == True", "def check(any_int):\n\tassert any_int(6.681, 8, 4.747) == False", "def check(any_int):\n\tassert any_int(3, 2, 5) == True", "def check(any_int):\n\tassert any_int(3.0,4,7)==False", "def check(any_int):\n\tassert any_int(9, 1, 10) == True", "def check(any_int):\n\tassert any_int(1.5, 5, 3.5)==False", "def check(any_int):\n\tassert any_int(2.834, 7, 9) == False", "def check(any_int):\n\tassert any_int(2, 6, 4) == True", "def check(any_int):\n\tassert any_int(6.068, 1, 3.454) == False", "def check(any_int):\n\tassert any_int(1.834, 7.255, 6.304) == False", "def check(any_int):\n\tassert any_int(1.726, 3, 1) == False", "def check(any_int):\n\tassert any_int(13, 7, 6) == True", "def check(any_int):\n\tassert any_int(6.9, 4, 12) == False", "def check(any_int):\n\tassert any_int(4.039, 5, 5.992) == False", "def check(any_int):\n\tassert any_int(4, 5, 9) == True", "def check(any_int):\n\tassert any_int(6, 2, 7) == False", "def check(any_int):\n\tassert any_int(3, 10, 7) == True", "def check(any_int):\n\tassert any_int(5.586, 1, 2) == False", "def check(any_int):\n\tassert any_int(12, 8, 4) == True", "def check(any_int):\n\tassert any_int(2.459, 5, 11) == False", "def check(any_int):\n\tassert any_int(0, 2, 2) == True", "def check(any_int):\n\tassert any_int(6.175, 9, 4) == False", "def check(any_int):\n\tassert any_int(12, 5, 7) == True", "def check(any_int):\n\tassert any_int(8.854, 2, 8) == False", "def check(any_int):\n\tassert any_int(2.858, 1, 2) == False", "def check(any_int):\n\tassert any_int(4, 3, 1) == True", "def check(any_int):\n\tassert any_int(4, 11, 1) == False", "def check(any_int):\n\tassert any_int(5, 5, 10) == True", "def check(any_int):\n\tassert any_int(10, 5, 5) == True", "def check(any_int):\n\tassert any_int(3.228, 6, 6) == False", "def check(any_int):\n\tassert any_int(2.805, 3, 6.418) == False", "def check(any_int):\n\tassert any_int(2, 1, 1) == True", "def check(any_int):\n\tassert any_int(6, 3, 3) == True", "def check(any_int):\n\tassert any_int(7, 5, 12) == True", "def check(any_int):\n\tassert any_int(-4, 11, 7) == True", "def check(any_int):\n\tassert any_int(2,1,1)==True", "def check(any_int):\n\tassert any_int(7, 2, 9) == True", "def check(any_int):\n\tassert any_int(3.445, 2, 2) == False", "def check(any_int):\n\tassert any_int(2, 7, 5) == True", "def check(any_int):\n\tassert any_int(6.254, 6, 7) == False", "def check(any_int):\n\tassert any_int(3.685, 2, 6) == False", "def check(any_int):\n\tassert any_int(5, 9, 5) == False", "def check(any_int):\n\tassert any_int(5.408, 8, 3.454) == False", "def check(any_int):\n\tassert any_int(-7, 5, -2) == True", "def check(any_int):\n\tassert any_int(4, 8, 4) == True", "def check(any_int):\n\tassert any_int(12, 7, 5) == True", "def check(any_int):\n\tassert any_int(4, 7, 3) == True", "def check(any_int):\n\tassert any_int(6.61, 1.687, 2.647) == False", "def check(any_int):\n\tassert any_int(3.033, 6.554, 7.391) == False", "def check(any_int):\n\tassert any_int(2.08, 7, 1.239) == False"], "test_case_list": ["assert any_int(8, 19, 11) == True", "assert any_int(7.307, 7.071, 5.088) == False", "assert any_int(6, 12, 6) == True", "assert any_int(6.511, 2, 3) == False", "assert any_int(12, 6, 6) == True", "assert any_int(2, 2, 4) == True", "assert any_int(5.114, 5, 4) == False", "assert any_int(3.376, 6.953, 2.111) == False", "assert any_int(2, 3, 1)==True", "assert any_int(2, 5, 4) == False", "assert any_int(7.194, 1.302, 7.462) == False", "assert any_int(1, 7, 8) == True", "assert any_int(5, 8, 3) == True", "assert any_int(2.389, 9, 10) == False", "assert any_int(-1, 0, 1) == True", "assert any_int(9, 6, 3) == True", "assert any_int(4.38, 6, 1) == False", "assert any_int(3.785, 6.308, 7.367) == False", "assert any_int(6, 10, 4) == True", "assert any_int(1.705, 2, 6.616) == False", "assert any_int(6, 4, 2) == True", "assert any_int(4, 2, 2)==True", "assert any_int(3.692, 2, 7.2) == False", "assert any_int(2.5, 2, 3)==False", "assert any_int(5, 6, 1) == True", "assert any_int(1, 3, 2) == True", "assert any_int(3,4,7)==True", "assert any_int(6, 10, 1) == False", "assert any_int(6, 2, 4) == True", "assert any_int(6.155, 2.926, 1.672) == False", "assert any_int(5, 2, 3) == True", "assert any_int(7.829, 2, 9) == False", "assert any_int(4, 6, 3) == False", "assert any_int(2.583, 3.749, 4.738) == False", "assert any_int(12, 11, 1) == True", "assert any_int(3.211, 4, 3) == False", "assert any_int(1, 1, 7) == False", "assert any_int(0, 3, 3) == True", "assert any_int(1.157, 8, 2) == False", "assert any_int(3, 3, 6) == True", "assert any_int(4.272, 6.612, 6.663) == False", "assert any_int(1, 1, 2) == True", "assert any_int(2.2, 2.2, 2.2)==False", "assert any_int(3.158, 8, 6.135) == False", "assert any_int(1.346, 5, 6) == False", "assert any_int(15, 9, 6) == True", "assert any_int(1, 4, 5) == True", "assert any_int(7.656, 1, 7) == False", "assert any_int(3.599, 5, 1) == False", "assert any_int(3, 1, 2) == True", "assert any_int(-3, 2, 5) == True", "assert any_int(4, 11, 5) == False", "assert any_int(10, 7, 3) == True", "assert any_int(7, 3, 10) == True", "assert any_int(3, 4, 1) == True", "assert any_int(3.103, 3, 10) == False", "assert any_int(6, 16, 10) == True", "assert any_int(1.812, 6.567, 7.145) == False", "assert any_int(6, 6, 12) == True", "assert any_int(1, 7, 2) == False", "assert any_int(7, 6, 1) == True", "assert any_int(4, 3, 7) == True", "assert any_int(4, 6, 2) == True", "assert any_int(2.007, 9, 7.198) == False", "assert any_int(2, 3, 5) == True", "assert any_int(6.086, 4, 4) == False", "assert any_int(3.754, 6, 5.044) == False", "assert any_int(8, 10, 2) == True", "assert any_int(7.73, 5.041, 6.418) == False", "assert any_int(2, 6, 2)==False", "assert any_int(3.683, 8, 1.193) == False", "assert any_int(-4, 6, 2)==True", "assert any_int(7, 13, 6) == True", "assert any_int(2.003, 3, 11) == False", "assert any_int(3.357, 7, 8.074) == False", "assert any_int(3.621, 6.679, 2.542) == False", "assert any_int(12, 3, 9) == True", "assert any_int(7.797, 7, 4) == False", "assert any_int(7, 1, 8) == True", "assert any_int(5, 3, 8) == True", "assert any_int(5, 7, 2) == True", "assert any_int(5, 6, 11) == True", "assert any_int(6.681, 8, 4.747) == False", "assert any_int(3, 2, 5) == True", "assert any_int(3.0,4,7)==False", "assert any_int(9, 1, 10) == True", "assert any_int(1.5, 5, 3.5)==False", "assert any_int(2.834, 7, 9) == False", "assert any_int(2, 6, 4) == True", "assert any_int(6.068, 1, 3.454) == False", "assert any_int(1.834, 7.255, 6.304) == False", "assert any_int(1.726, 3, 1) == False", "assert any_int(13, 7, 6) == True", "assert any_int(6.9, 4, 12) == False", "assert any_int(4.039, 5, 5.992) == False", "assert any_int(4, 5, 9) == True", "assert any_int(6, 2, 7) == False", "assert any_int(3, 10, 7) == True", "assert any_int(5.586, 1, 2) == False", "assert any_int(12, 8, 4) == True", "assert any_int(2.459, 5, 11) == False", "assert any_int(0, 2, 2) == True", "assert any_int(6.175, 9, 4) == False", "assert any_int(12, 5, 7) == True", "assert any_int(8.854, 2, 8) == False", "assert any_int(2.858, 1, 2) == False", "assert any_int(4, 3, 1) == True", "assert any_int(4, 11, 1) == False", "assert any_int(5, 5, 10) == True", "assert any_int(10, 5, 5) == True", "assert any_int(3.228, 6, 6) == False", "assert any_int(2.805, 3, 6.418) == False", "assert any_int(2, 1, 1) == True", "assert any_int(6, 3, 3) == True", "assert any_int(7, 5, 12) == True", "assert any_int(-4, 11, 7) == True", "assert any_int(2,1,1)==True", "assert any_int(7, 2, 9) == True", "assert any_int(3.445, 2, 2) == False", "assert any_int(2, 7, 5) == True", "assert any_int(6.254, 6, 7) == False", "assert any_int(3.685, 2, 6) == False", "assert any_int(5, 9, 5) == False", "assert any_int(5.408, 8, 3.454) == False", "assert any_int(-7, 5, -2) == True", "assert any_int(4, 8, 4) == True", "assert any_int(12, 7, 5) == True", "assert any_int(4, 7, 3) == True", "assert any_int(6.61, 1.687, 2.647) == False", "assert any_int(3.033, 6.554, 7.391) == False", "assert any_int(2.08, 7, 1.239) == False"], "nl": "\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    ", "func": "def any_int(x, y, z):", "examples": "Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    ", "completions": ["from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if any one of the three numbers is equal to the sum of the other two.\n\n    Args:\n        x (int): The first number.\n        y (int): The second number.\n        z (int): The third number.\n\n    Returns:\n        bool: True if any number is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    This function checks if any one of the three given numbers is equal to the sum of the other two.\n    \n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n    \n    Returns:\n        bool: True if any one of the numbers is equal to the sum of the other two, otherwise False.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        raise ValueError(\"All inputs must be integers\")\n    \n    # Check if any one of the numbers is equal to the sum of the other two\n    return (x == y + z) or (y == x + z) or (z == x + y)\n", "from typing import List\n## main.py\n\nimport math\n\nTOLERANCE = 1e-6\n\ndef any_int(x: (int, float), y: (int, float), z: (int, float)) -> bool:\n    '''\n    Parameters:\n    x (int, float): The first number.\n    y (int, float): The second number.\n    z (int, float): The third number.\n\n    Returns:\n    bool: True if one number is the sum of the other two and all numbers are integers or floats, False otherwise.\n    '''\n    if not isinstance(x, (int, float)) or not isinstance(y, (int, float)) or not isinstance(z, (int, float)):\n        return False\n\n    return (abs(x + y - z) < TOLERANCE) or (abs(x + z - y) < TOLERANCE) or (abs(y + z - x) < TOLERANCE)\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    This function checks if any one of the three given integers is equal to the sum of the other two.\n    \n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n    \n    Returns:\n        bool: True if any one of the numbers is the sum of the other two, otherwise False.\n    \"\"\"\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n    \n    # Check if any number is the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\nfrom typing import Union\n\ndef any_int(x: Union[int, float], y: Union[int, float], z: Union[int, float]) -> bool:\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: int | float, y: int | float, z: int | float) -> bool:\n    '''\n    Parameters:\n    x (int or float): The first number.\n    y (int or float): The second number.\n    z (int or float): The third number.\n\n    Returns:\n    bool: True if one of the numbers is the sum of the other two and all numbers are integers, False otherwise.\n    '''\n    # Check if all inputs are integers or floats\n    if not (isinstance(x, (int, float)) and isinstance(y, (int, float)) and isinstance(z, (int, float))):\n        return False\n    \n    # Check if any one of the numbers equals the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: int | float, y: int | float, z: int | float) -> bool:\n    '''\n    Parameters:\n    x (int or float)\n    y (int or float)\n    z (int or float)\n    \n    Returns:\n    bool\n    '''\n    # Check if all inputs are integers or can be safely converted to integers\n    if not (isinstance(x, (int, float)) and isinstance(y, (int, float)) and isinstance(z, (int, float))):\n        raise ValueError(\"All inputs must be integers or floats\")\n    \n    # Convert to integers if they are floats\n    x, y, z = int(x), int(y), int(z)\n    \n    # Check if any of the three numbers is equal to the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if any one of the three given numbers is equal to the sum of the other two.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if any one of the numbers is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x, y, z) -> bool:\n    '''\n    Parameters:\n    x (int, float): The first number.\n    y (int, float): The second number.\n    z (int, float): The third number.\n    Returns:\n    bool: True if one number is the sum of the other two and all numbers are integers, False otherwise.\n    '''\n    return isinstance(x, (int, float)) and isinstance(y, (int, float)) and isinstance(z, (int, float)) and (x == y + z or y == x + z or z == x + y)\n", "from typing import List\n## main.py\n\ndef any_int(x: (int, float), y: (int, float), z: (int, float)) -> bool:\n    '''\n    Parameters:\n    x (int, float): The first number.\n    y (int, float): The second number.\n    z (int, float): The third number.\n\n    Returns:\n    bool: True if one number is the sum of the other two and all numbers are integers or floats, False otherwise.\n    '''\n    # Check if all inputs are integers or floats\n    if not (isinstance(x, (int, float)) and isinstance(y, (int, float)) and isinstance(z, (int, float))):\n        return False\n\n    # Check if one number is the sum of the other two\n    return (x == y + z) or (y == x + z) or (z == x + y)\n"], "plans": ["requirement analysis:\nThe function needs to check if any one of the three given numbers is equal to the sum of the other two, and all numbers must be integers. The function should return True if the condition is met, and False otherwise. The solution should be efficient and handle different types of inputs gracefully.\nrequirement pool:\n- Implement the function to check if any number is equal to the sum of the other two and all numbers are integers.\n- Ensure the function handles both positive and negative integers.\n- Make the function robust against non-integer inputs by checking their types.\n- Optimize the function for performance to handle large datasets efficiently.\n- Document the function with clear examples and usage instructions.\nWe will use Python's built-in capabilities to check if the inputs are integers and then verify if any one of the three numbers is equal to the sum of the other two. This approach leverages Python's type checking and arithmetic operations, ensuring both simplicity and efficiency.\n", "requirement analysis:\nThe requirement is to create a function that checks if any one of the three given numbers is equal to the sum of the other two, and all numbers must be integers. The function should return True if the condition is met, and False otherwise. The function should also handle edge cases such as floating-point numbers and ensure type checking is accurate.\nrequirement pool:\n- The function should accurately check if any number is the sum of the other two and ensure all numbers are integers.\n- The function should handle edge cases such as floating-point numbers and ensure type checking is accurate.\n- The function should be efficient and readable.\n- The function should be tested for various scenarios to ensure reliability.\n- The function should be compatible with Python's type checking mechanisms.\nWe will use Python's built-in 'isinstance' function for type checking and simple arithmetic operations to check if any one of the three given numbers is equal to the sum of the other two. The function will first ensure all inputs are integers, and then it will perform the sum check. This approach ensures the function is efficient and handles edge cases effectively.\n", "requirement analysis:\nThe requirement is to create a function that takes three numbers and returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. The function should return false in any other cases. This includes handling both integers and floating-point numbers. The function should be efficient and handle edge cases such as negative numbers and zero.\nrequirement pool:\n- The function should correctly identify if one number is the sum of the other two and all numbers are integers.\n- The function should handle both integers and floating-point numbers.\n- The function should return false in any other cases.\n- The function should be efficient and handle edge cases appropriately.\n- The function should be easy to understand and maintain.\nWe will use Python's built-in capabilities to check if the provided numbers are integers and if one of them is the sum of the other two. This approach leverages Python's type checking and arithmetic operations to ensure the function meets the requirements efficiently.\n", "requirement analysis:\nThe requirement is to create a function that checks if any one of the three given numbers is equal to the sum of the other two, and all numbers must be integers. The function should return True if the condition is met, and False otherwise. The function should handle both integer and non-integer inputs to ensure versatility.\nrequirement pool:\n- The function should accurately check if one number is the sum of the other two and all numbers are integers.\n- The function should return True if the condition is met, otherwise return False.\n- The function should handle both integer and non-integer inputs.\n- The function should be efficient and easy to understand.\n- The function should include clear documentation and examples.\nTo implement the function, we will use Python's built-in capabilities to check types and perform arithmetic operations. The function will first ensure that all inputs are integers using a simple type check. Then, it will check if any one of the numbers is equal to the sum of the other two. This will be done using basic arithmetic operations.\n", "requirement analysis:\nThe function should check if any one of the three given numbers is equal to the sum of the other two. It should also ensure that all inputs are integers. The function should return 'True' if the condition is met, and 'False' otherwise. The function should handle both integers and floating-point numbers.\nrequirement pool:\n- The function should check if any one of the three numbers is equal to the sum of the other two.\n- The function should ensure all inputs are integers.\n- The function should handle both integers and floating-point numbers.\n- The function should return 'True' if the condition is met, and 'False' otherwise.\nWe will implement the function using Python's built-in capabilities and type checking. The function will check if any one of the three given numbers is equal to the sum of the other two. It will also ensure that all inputs are integers. The function will return 'True' if the condition is met, and 'False' otherwise. The function will handle both integers and floating-point numbers.\n", "requirement analysis:\nThe requirement is to create a function that takes three numbers and returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. The function should return false in any other cases, including if any of the numbers are not integers or if none of the numbers meet the condition. The function should handle both integers and floating-point numbers to ensure versatility.\nrequirement pool:\n- The main code should accurately check if one of the numbers is the sum of the other two and ensure all numbers are integers.\n- The function should handle both integers and floating-point numbers to ensure versatility.\n- The function should return false in any other cases, including if any of the numbers are not integers or if none of the numbers meet the condition.\nWe will use Python's built-in capabilities to check if the numbers are integers and if one of them is the sum of the other two. The function will first ensure all inputs are integers using the 'isinstance' function. Then, it will check if any one of the numbers equals the sum of the other two.\n", "requirement analysis:\nThe requirement is to create a function that checks if any of the three given numbers is equal to the sum of the other two, and all numbers must be integers. The function should return true if the condition is met, and false otherwise. The function should also handle both integers and floating-point numbers.\nrequirement pool:\n- The function should check if any of the three numbers is equal to the sum of the other two.\n- The function should return true if the condition is met and false otherwise.\n- The function should handle both integers and floating-point numbers.\n- The function should be easy to understand and implement.\nWe will implement the function using Python's built-in capabilities and type checking. The function will first ensure that all inputs are integers or can be safely converted to integers. It will then check if any of the three numbers is equal to the sum of the other two. This will be done using basic arithmetic operations and type checking.\n", "requirement analysis:\nThe requirement is to create a function that checks if any one of the three given numbers is equal to the sum of the other two, and all numbers must be integers. The function should return True if the condition is met, and False otherwise. The examples provided illustrate the expected behavior with both positive and negative integers, as well as the handling of floating-point numbers.\nrequirement pool:\n- The function should take three parameters and return a boolean value.\n- The function should ensure all parameters are integers.\n- The function should check if any one of the numbers is equal to the sum of the other two.\n- The function should handle floating-point numbers and return False for them.\n- The function should be optimized for performance and readability.\nWe will use Python's built-in capabilities to ensure the function works correctly with both positive and negative integers, while also handling floating-point numbers efficiently. The function will check if any one of the three given numbers is equal to the sum of the other two, and all numbers must be integers. The function will return True if the condition is met, and False otherwise.\n", "requirement analysis:\nThe requirement is to create a function that takes three numbers and returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. The function should return false in any other cases, including if any of the numbers are not integers or if none of the numbers meet the condition. The function should handle both integers and floating-point numbers to ensure robustness.\nrequirement pool:\n- The function should accurately check if one of the numbers is the sum of the other two and all numbers are integers.\n- The function should handle both integers and floating-point numbers.\n- The function should return false in any other cases not specified.\nWe will use Python's built-in capabilities to check if the numbers are integers and if one number is the sum of the other two. This approach leverages Python's type checking and arithmetic operations, ensuring efficiency and simplicity.\n", "requirement analysis:\nThe requirement is to create a function that takes three numbers and returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. The function should return false in any other cases. This includes handling both integers and floating-point numbers, ensuring the function is robust against various inputs.\nrequirement pool:\n- The function should correctly identify if one number is the sum of the other two and all numbers are integers.\n- The function should handle both integers and floating-point numbers.\n- The function should return false for any other cases, including when not all numbers are integers.\n- The function should be efficient and handle edge cases appropriately.\n- The function should be easy to understand and maintain.\nWe will use Python's built-in capabilities to check if the numbers are integers and if one of them is the sum of the other two. This approach leverages Python's type checking and arithmetic operations, ensuring simplicity and efficiency.\n"], "scores": [0.9847, 0.5725, 0.9847, 1.0, 0.9847, 0.9847, 0.9389, 0.9847, 0.9847, 0.9847], "pass_results": [false, false, false, true, false, false, false, false, false, false], "pass_test_cases_num": [129, 75, 129, 131, 129, 129, 123, 129, 129, 129], "completion": "from typing import List\n## main.py\n\ndef any_int(x: (int, float), y: (int, float), z: (int, float)) -> bool:\n    '''\n    Parameters:\n    x (int, float): The first number.\n    y (int, float): The second number.\n    z (int, float): The third number.\n\n    Returns:\n    bool: True if one number is the sum of the other two and all numbers are integers or floats, False otherwise.\n    '''\n    # Check if all inputs are integers or floats\n    if not (isinstance(x, (int, float)) and isinstance(y, (int, float)) and isinstance(z, (int, float))):\n        return False\n\n    # Check if one number is the sum of the other two\n    return (x == y + z) or (y == x + z) or (z == x + y)\n", "passed": true, "pass": true, "pass_num": 1, "round": 143, "repair_prompt": ["def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers. It returns true if one of the numbers is equal to the sum of the other two and all numbers are integers, and returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''"], "mutate_method": "condense_two2one", "parent_index": 172}
