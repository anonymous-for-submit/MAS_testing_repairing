{"task_id": "HumanEval/117", "prompt": "def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Additionally, ensure that the function handles leading and trailing spaces gracefully.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", "entry_point": "select_words", "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "test": ["def check(select_words):\n\tassert select_words('eg aqk', 2) == ['aqk']", "def check(select_words):\n\tassert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "def check(select_words):\n\tassert select_words('syk', 6) == []", "def check(select_words):\n\tassert select_words('gw', 9) == []", "def check(select_words):\n\tassert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "def check(select_words):\n\tassert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "def check(select_words):\n\tassert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "def check(select_words):\n\tassert select_words('zGMhBC', 6) == ['zGMhBC']", "def check(select_words):\n\tassert select_words('kfohjsjunakqmmsx', 1) == []", "def check(select_words):\n\tassert select_words('KbpFfWgXZoVjXV', 1) == []", "def check(select_words):\n\tassert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "def check(select_words):\n\tassert select_words('kg', 1) == []", "def check(select_words):\n\tassert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "def check(select_words):\n\tassert select_words('xrbpxpncgqufqkq', 6) == []", "def check(select_words):\n\tassert select_words('sqgikswgssxsbwkl', 7) == []", "def check(select_words):\n\tassert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "def check(select_words):\n\tassert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "def check(select_words):\n\tassert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "def check(select_words):\n\tassert select_words('bnXA AjPVh', 5) == []", "def check(select_words):\n\tassert select_words('omnivbqgmavyqdgqssas', 6) == []", "def check(select_words):\n\tassert select_words('fmjizkhknnihqioic', 4) == []", "def check(select_words):\n\tassert select_words('lINKPOlFIImtg', 3) == []", "def check(select_words):\n\tassert select_words('nPxmyTd', 7) == ['nPxmyTd']", "def check(select_words):\n\tassert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "def check(select_words):\n\tassert select_words('mehochzpausf', 2) == []", "def check(select_words):\n\tassert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "def check(select_words):\n\tassert select_words('EGiDfM', 1) == []", "def check(select_words):\n\tassert select_words('mc', 7) == []", "def check(select_words):\n\tassert select_words('wzx', 5) == []", "def check(select_words):\n\tassert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "def check(select_words):\n\tassert select_words('xwkxcjffocow', 5) == []", "def check(select_words):\n\tassert select_words('dl', 5) == []", "def check(select_words):\n\tassert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "def check(select_words):\n\tassert select_words('ABIStgq', 5) == ['ABIStgq']", "def check(select_words):\n\tassert select_words('nb', 2) == ['nb']", "def check(select_words):\n\tassert select_words('ny', 2) == ['ny']", "def check(select_words):\n\tassert select_words('HWCLBC', 6) == ['HWCLBC']", "def check(select_words):\n\tassert select_words('uuh', 6) == []", "def check(select_words):\n\tassert select_words('uoubngttn', 3) == []", "def check(select_words):\n\tassert select_words('g', 5) == []", "def check(select_words):\n\tassert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "def check(select_words):\n\tassert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "def check(select_words):\n\tassert select_words('aztxoxesjkzqebhrfzw', 3) == []", "def check(select_words):\n\tassert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "def check(select_words):\n\tassert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "def check(select_words):\n\tassert select_words('tJzO PnCT', 3) == ['tJzO']", "def check(select_words):\n\tassert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "def check(select_words):\n\tassert select_words('qhwubvrfmwy', 2) == []", "def check(select_words):\n\tassert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "def check(select_words):\n\tassert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "def check(select_words):\n\tassert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "def check(select_words):\n\tassert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "def check(select_words):\n\tassert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "def check(select_words):\n\tassert select_words('r s rhhipmt', 6) == ['rhhipmt']", "def check(select_words):\n\tassert select_words('aDqyhePv', 6) == ['aDqyhePv']", "def check(select_words):\n\tassert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "def check(select_words):\n\tassert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "def check(select_words):\n\tassert select_words('aru', 5) == []", "def check(select_words):\n\tassert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "def check(select_words):\n\tassert select_words('SNeiILCez', 4) == []", "def check(select_words):\n\tassert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "def check(select_words):\n\tassert select_words('ySmjGAg', 6) == ['ySmjGAg']", "def check(select_words):\n\tassert select_words('bRJRZC', 3) == []", "def check(select_words):\n\tassert select_words('u', 1) == []", "def check(select_words):\n\tassert select_words('djucfuuizrjfvuzzo', 4) == []", "def check(select_words):\n\tassert select_words('dvYLMt', 6) == ['dvYLMt']", "def check(select_words):\n\tassert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "def check(select_words):\n\tassert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "def check(select_words):\n\tassert select_words('yp', 6) == []", "def check(select_words):\n\tassert select_words('v', 4) == []", "def check(select_words):\n\tassert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "def check(select_words):\n\tassert select_words('afrrguc', 5) == ['afrrguc']", "def check(select_words):\n\tassert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "def check(select_words):\n\tassert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "def check(select_words):\n\tassert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "def check(select_words):\n\tassert select_words('nh vu lcakrb', 1) == ['vu']", "def check(select_words):\n\tassert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "def check(select_words):\n\tassert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "def check(select_words):\n\tassert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "def check(select_words):\n\tassert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "def check(select_words):\n\tassert select_words('MjRnAErHPguQC', 1) == []", "def check(select_words):\n\tassert select_words('tmchxmttrgfdanq', 3) == []", "def check(select_words):\n\tassert select_words('jezkeorvxnruwhhwzxm', 7) == []", "def check(select_words):\n\tassert select_words('caurfxlpkygqxoknil', 4) == []", "def check(select_words):\n\tassert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "def check(select_words):\n\tassert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "def check(select_words):\n\tassert select_words('NSjIbZV', 2) == []", "def check(select_words):\n\tassert select_words('rPKhzIot', 6) == ['rPKhzIot']", "def check(select_words):\n\tassert select_words('ASDVzOVVDEdj J', 1) == ['J']", "def check(select_words):\n\tassert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "def check(select_words):\n\tassert select_words(' siweqafqot', 5) == []", "def check(select_words):\n\tassert select_words('xdQgsAHI', 5) == []", "def check(select_words):\n\tassert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "def check(select_words):\n\tassert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "def check(select_words):\n\tassert select_words('hguHoJGaaNwX', 3) == []", "def check(select_words):\n\tassert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "def check(select_words):\n\tassert select_words('choounwx', 5) == ['choounwx']", "def check(select_words):\n\tassert select_words('yue', 2) == []", "def check(select_words):\n\tassert select_words('DDdrgPy', 4) == []", "def check(select_words):\n\tassert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "def check(select_words):\n\tassert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "def check(select_words):\n\tassert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "def check(select_words):\n\tassert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "def check(select_words):\n\tassert select_words('Reg MuZcF', 4) == ['MuZcF']", "def check(select_words):\n\tassert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "def check(select_words):\n\tassert select_words('sl', 6) == []", "def check(select_words):\n\tassert select_words('IFKqNq ', 5) == ['IFKqNq']", "def check(select_words):\n\tassert select_words('lfspeijyudniowk', 1) == []", "def check(select_words):\n\tassert select_words('kogmgdnk', 7) == ['kogmgdnk']", "def check(select_words):\n\tassert select_words('nnchatjackywoavfwfps', 5) == []", "def check(select_words):\n\tassert select_words('d', 2) == []", "def check(select_words):\n\tassert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "def check(select_words):\n\tassert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "def check(select_words):\n\tassert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "def check(select_words):\n\tassert select_words('jopfxbbvlslmluypcdt', 3) == []", "def check(select_words):\n\tassert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "def check(select_words):\n\tassert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "def check(select_words):\n\tassert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "def check(select_words):\n\tassert select_words('etdrxwybqi', 1) == []", "def check(select_words):\n\tassert select_words('aVCSziOkLCLGizHcmC', 2) == []", "def check(select_words):\n\tassert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "def check(select_words):\n\tassert select_words('txXxge', 4) == []", "def check(select_words):\n\tassert select_words('kcpieuVjAOaxdpB', 4) == []", "def check(select_words):\n\tassert select_words('oh', 8) == []", "def check(select_words):\n\tassert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "def check(select_words):\n\tassert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "def check(select_words):\n\tassert select_words('eywh qxreeexrrhyovpwl', 7) == []", "def check(select_words):\n\tassert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "def check(select_words):\n\tassert select_words('asfwxvbzdfsrymc', 3) == []", "def check(select_words):\n\tassert select_words('nBmjWxiPV', 3) == []", "def check(select_words):\n\tassert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "test_case_list": ["assert select_words('eg aqk', 2) == ['aqk']", "assert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "assert select_words('syk', 6) == []", "assert select_words('gw', 9) == []", "assert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "assert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "assert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "assert select_words('zGMhBC', 6) == ['zGMhBC']", "assert select_words('kfohjsjunakqmmsx', 1) == []", "assert select_words('KbpFfWgXZoVjXV', 1) == []", "assert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "assert select_words('kg', 1) == []", "assert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "assert select_words('xrbpxpncgqufqkq', 6) == []", "assert select_words('sqgikswgssxsbwkl', 7) == []", "assert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "assert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "assert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "assert select_words('bnXA AjPVh', 5) == []", "assert select_words('omnivbqgmavyqdgqssas', 6) == []", "assert select_words('fmjizkhknnihqioic', 4) == []", "assert select_words('lINKPOlFIImtg', 3) == []", "assert select_words('nPxmyTd', 7) == ['nPxmyTd']", "assert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "assert select_words('mehochzpausf', 2) == []", "assert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "assert select_words('EGiDfM', 1) == []", "assert select_words('mc', 7) == []", "assert select_words('wzx', 5) == []", "assert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "assert select_words('xwkxcjffocow', 5) == []", "assert select_words('dl', 5) == []", "assert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "assert select_words('ABIStgq', 5) == ['ABIStgq']", "assert select_words('nb', 2) == ['nb']", "assert select_words('ny', 2) == ['ny']", "assert select_words('HWCLBC', 6) == ['HWCLBC']", "assert select_words('uuh', 6) == []", "assert select_words('uoubngttn', 3) == []", "assert select_words('g', 5) == []", "assert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "assert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "assert select_words('aztxoxesjkzqebhrfzw', 3) == []", "assert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "assert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "assert select_words('tJzO PnCT', 3) == ['tJzO']", "assert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "assert select_words('qhwubvrfmwy', 2) == []", "assert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "assert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "assert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "assert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "assert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "assert select_words('r s rhhipmt', 6) == ['rhhipmt']", "assert select_words('aDqyhePv', 6) == ['aDqyhePv']", "assert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "assert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "assert select_words('aru', 5) == []", "assert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "assert select_words('SNeiILCez', 4) == []", "assert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "assert select_words('ySmjGAg', 6) == ['ySmjGAg']", "assert select_words('bRJRZC', 3) == []", "assert select_words('u', 1) == []", "assert select_words('djucfuuizrjfvuzzo', 4) == []", "assert select_words('dvYLMt', 6) == ['dvYLMt']", "assert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "assert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "assert select_words('yp', 6) == []", "assert select_words('v', 4) == []", "assert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "assert select_words('afrrguc', 5) == ['afrrguc']", "assert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "assert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "assert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "assert select_words('nh vu lcakrb', 1) == ['vu']", "assert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "assert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "assert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "assert select_words('MjRnAErHPguQC', 1) == []", "assert select_words('tmchxmttrgfdanq', 3) == []", "assert select_words('jezkeorvxnruwhhwzxm', 7) == []", "assert select_words('caurfxlpkygqxoknil', 4) == []", "assert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "assert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "assert select_words('NSjIbZV', 2) == []", "assert select_words('rPKhzIot', 6) == ['rPKhzIot']", "assert select_words('ASDVzOVVDEdj J', 1) == ['J']", "assert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "assert select_words(' siweqafqot', 5) == []", "assert select_words('xdQgsAHI', 5) == []", "assert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "assert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "assert select_words('hguHoJGaaNwX', 3) == []", "assert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "assert select_words('choounwx', 5) == ['choounwx']", "assert select_words('yue', 2) == []", "assert select_words('DDdrgPy', 4) == []", "assert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "assert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "assert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "assert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "assert select_words('Reg MuZcF', 4) == ['MuZcF']", "assert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "assert select_words('sl', 6) == []", "assert select_words('IFKqNq ', 5) == ['IFKqNq']", "assert select_words('lfspeijyudniowk', 1) == []", "assert select_words('kogmgdnk', 7) == ['kogmgdnk']", "assert select_words('nnchatjackywoavfwfps', 5) == []", "assert select_words('d', 2) == []", "assert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "assert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "assert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "assert select_words('jopfxbbvlslmluypcdt', 3) == []", "assert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "assert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "assert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "assert select_words('etdrxwybqi', 1) == []", "assert select_words('aVCSziOkLCLGizHcmC', 2) == []", "assert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "assert select_words('txXxge', 4) == []", "assert select_words('kcpieuVjAOaxdpB', 4) == []", "assert select_words('oh', 8) == []", "assert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "assert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "assert select_words('eywh qxreeexrrhyovpwl', 7) == []", "assert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "assert select_words('asfwxvbzdfsrymc', 3) == []", "assert select_words('nBmjWxiPV', 3) == []", "assert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "nl": "Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    ", "func": "def select_words(s, n):", "examples": "Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    ", "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants they contain.\n\n    Args:\n        s (str): The input string.\n        n (int): The number of consonants a word must contain to be included in the result.\n\n    Returns:\n        List[str]: A list of words from the input string that contain at least 'n' consonants.\n    \"\"\"\n    if not s:\n        return []\n\n    def count_consonants(word: str) -> int:\n        \"\"\"\n        Counts the number of consonants in a word.\n\n        Args:\n            word (str): The word to count consonants in.\n\n        Returns:\n            int: The number of consonants in the word.\n        \"\"\"\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n\n    words = s.strip().split()\n    filtered_words = [word for word in words if count_consonants(word) >= n]\n    return filtered_words\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef count_consonants(word: str) -> int:\n    \"\"\"Helper function to count the number of consonants in a word.\"\"\"\n    vowels = \"aeiouAEIOU\"\n    return sum(1 for char in word if char.isalpha() and char not in vowels)\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Filters words based on the number of consonants they contain.\"\"\"\n    # Clean the input string to remove punctuation and handle spaces gracefully\n    cleaned_string = ''.join(char for char in s if char.isalpha() or char.isspace())\n    \n    # Split the cleaned string into words\n    words = cleaned_string.split()\n    \n    # Iterate through the words, applying the consonant count filter, and collect the results\n    filtered_words = [word for word in words if count_consonants(word) >= n]\n    \n    # Return the filtered list of words\n    return filtered_words\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants they contain.\n\n    Args:\n        s (str): The input string.\n        n (int): The number of consonants a word must contain to be included.\n\n    Returns:\n        List[str]: A list of words from the input string that contain exactly `n` consonants.\n    \"\"\"\n    def count_consonants(word: str) -> int:\n        \"\"\"\n        Counts the number of consonants in a word.\n\n        Args:\n            word (str): The word to count consonants in.\n\n        Returns:\n            int: The number of consonants in the word.\n        \"\"\"\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n\n    words = s.split()\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    return filtered_words\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef count_consonants(word: str) -> int:\n    \"\"\"Helper function to count the number of consonants in a word.\"\"\"\n    vowels = \"aeiouAEIOU\"\n    return sum(1 for char in word if char.isalpha() and char not in vowels)\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words from the input string `s` based on the number of consonants `n`.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants required in each word.\n    \n    Returns:\n        List[str]: A list of words containing exactly `n` consonants.\n    \"\"\"\n    words = s.split()\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    return filtered_words\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants a word must contain.\n        \n    Returns:\n        List[str]: A list of words that contain exactly n consonants.\n    \"\"\"\n    # Define a set of consonants\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize the result list\n    result = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in word if char in consonants)\n        \n        # If the word has exactly n consonants, add it to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef count_consonants(word: str) -> int:\n    \"\"\"\n    Helper function to count the number of consonants in a word.\n    \n    Args:\n        word (str): The word to count consonants in.\n        \n    Returns:\n        int: The number of consonants in the word.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return sum(1 for char in word if char.isalpha() and char not in vowels)\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Function to select words from a string based on the number of consonants they contain.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants required in each word.\n        \n    Returns:\n        List[str]: A list of words with exactly `n` consonants.\n    \"\"\"\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    def count_consonants(word: str) -> int:\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport re\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words from a given string based on the number of consonants they contain.\n\n    Args:\n        s (str): The input string.\n        n (int): The number of consonants a word must contain to be included in the result.\n\n    Returns:\n        List[str]: A list of words that contain exactly `n` consonants.\n    \"\"\"\n    if not s:\n        return []\n\n    # Remove leading and trailing spaces and split the string into words\n    words = s.strip().split()\n\n    # Define a function to count consonants in a word\n    def count_consonants(word: str) -> int:\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return sum(1 for char in word.lower() if char in consonants)\n\n    # Filter words based on the number of consonants\n    filtered_words = [word for word in words if count_consonants(word) == n]\n\n    return filtered_words\n", "from typing import List\n## main.py\n\nimport re\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants.\n        \n    Returns:\n        List[str]: A list of words that contain exactly n consonants.\n    \"\"\"\n    # Normalize the input string by removing leading/trailing spaces and splitting into words\n    words = re.findall(r'\\b\\w+\\b', s.strip())\n    \n    # Filter words based on the number of consonants\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    \n    return filtered_words\n\ndef count_consonants(word: str) -> int:\n    \"\"\"\n    Counts the number of consonants in a word.\n    \n    Args:\n        word (str): The word to count consonants in.\n        \n    Returns:\n        int: The number of consonants in the word.\n    \"\"\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    return sum(1 for char in word if char in consonants)\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport re\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants they contain.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants a word must contain to be included.\n        \n    Returns:\n        List[str]: A list of words that contain at least `n` consonants.\n    \"\"\"\n    # Normalize the input string by trimming spaces\n    s = s.strip()\n    \n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', s)\n    \n    # Filter words based on the number of consonants\n    def count_consonants(word: str) -> int:\n        return len([char for char in word.lower() if char in 'bcdfghjklmnpqrstvwxyz'])\n    \n    filtered_words = [word for word in words if count_consonants(word) >= n]\n    \n    return filtered_words\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle various input scenarios, including empty strings and strings with leading/trailing spaces. The function should also return the words in the order they appear in the input string. The performance of the function should be optimized to handle large inputs effectively.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants they contain.\n- Ensure the function handles empty strings and strings with leading/trailing spaces gracefully.\n- Optimize the function for performance to handle large inputs effectively.\n- Include unit tests to verify the function's correctness against various input scenarios.\n- Provide a user-friendly interface for easy input and output display.\nTo implement the function that filters words based on the number of consonants they contain, we will use Python's built-in string manipulation capabilities along with a simple approach to count consonants. The function will first split the input string into words, then filter these words based on the specified number of consonants. The function will handle edge cases such as empty strings and strings with leading/trailing spaces by using the strip() method for string trimming.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle edge cases such as empty strings and spaces gracefully. The user should be able to input a string and a number to get a list of words that meet the criteria. The function should be efficient and easy to use.\nrequirement pool:\n- The main code should accurately filter words based on the number of consonants they contain.\n- The function should handle leading and trailing spaces gracefully.\n- Ensure the function is efficient and can handle empty strings.\n- Develop a user-friendly interface for easy input and output display.\n- Allow the function to ignore punctuation and only consider alphabetic characters.\nTo implement the function `select_words(s, n)` that filters words based on the number of consonants they contain, we will follow these steps: 1. Clean the input string to remove punctuation and handle spaces gracefully. 2. Split the cleaned string into words. 3. Define a helper function to count consonants in a word. 4. Iterate through the words, applying the consonant count filter, and collect the results. 5. Return the filtered list of words.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle various edge cases such as empty strings, leading/trailing spaces, and multiple spaces between words. The results should be returned in the order they appear in the input string.\nrequirement pool:\n- The main code should correctly filter words based on the number of consonants.\n- The function should handle spaces and multiple spaces gracefully.\n- Ensure the function returns results in the order they appear in the input string.\n- Implement a clear and user-friendly interface for input and output.\nTo implement the function `select_words(s, n)` that filters words based on the number of consonants they contain, we will use Python's built-in string manipulation methods and a simple approach to count consonants. We will split the input string into words, filter those that have exactly `n` consonants, and return them in the order they appear in the input string.\n", "requirement analysis:\nThe function needs to extract words from a given string, count the consonants in each word, and return a list of words that match a specified number of consonants. It must handle edge cases like empty strings and spaces. The product should be user-friendly and efficient, providing a clear and engaging user experience.\nrequirement pool:\n- Implement a function to count consonants in each word.\n- Create a function to filter words based on the specified number of consonants.\n- Ensure the function handles leading and trailing spaces correctly.\n- Implement error handling for empty input strings.\n- Design a user-friendly interface for input and output.\nTo implement the function `select_words(s, n)` as described, we will follow these steps: 1. Split the input string `s` into words, ensuring to handle leading and trailing spaces gracefully. 2. Define a helper function to count the consonants in each word. 3. Filter the words based on the specified number of consonants `n`. 4. Return the filtered list of words.\n", "requirement analysis:\nThe function needs to extract words from a given string that contain exactly 'n' consonants. It should handle spaces and be efficient in processing the input. The output should be a list of words that meet the criteria, preserving the order they appear in the input string.\nrequirement pool:\n- Implement the function to accurately count consonants and filter words based on the count.\n- Ensure the function can handle various input strings, including those with leading and trailing spaces.\n- Design the function to be responsive and provide immediate feedback to the user.\n- Develop a user-friendly interface for easy interaction with the function.\nTo implement the function `select_words(s, n)` that filters words based on the number of consonants, we will use Python's built-in string manipulation methods and a simple list processing approach. We will define a set of consonants and use this to count the consonants in each word. The function will split the input string into words, filter those words based on the consonant count, and return the filtered list.\n", "requirement analysis:\nThe function needs to extract words from a given string that contain exactly 'n' consonants. It should handle spaces and be efficient in processing the input. The output should be a list of words that meet the criteria, preserving their order from the original string.\nrequirement pool:\n- Implement the function to accurately count consonants and filter words based on the specified count.\n- Ensure the function can handle various input strings, including those with leading and trailing spaces.\n- Develop the function to return a list of words that meet the criteria, maintaining the order of appearance.\n- Design the user interface to be intuitive and visually appealing for easy interaction.\n- Include accessibility features to ensure the function is usable by all users, including those with disabilities.\nTo implement the function `select_words(s, n)` efficiently, we will use Python's built-in string manipulation methods and a simple list processing approach. The function will first split the input string into words, then filter these words based on the number of consonants they contain. We will define a helper function to count consonants in a word. This approach ensures simplicity and efficiency, suitable for handling typical text inputs.\n", "requirement analysis:\nThe requirement is to create a function that filters words from a given string based on the number of consonants they contain. The function should handle various edge cases such as empty strings, leading/trailing spaces, and multiple spaces between words. The results should be returned in the order they appear in the original string.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function handles spaces and multiple spaces gracefully.\n- Return the filtered words in the order they appear in the original string.\n- Add functionality to handle edge cases such as empty strings.\n- Improve the user interface for better readability and aesthetics.\nTo implement the function `select_words` that filters words based on the number of consonants they contain, we will use Python's built-in string manipulation methods and a simple list processing approach. We will define a helper function to count consonants in a word and then use this function to filter the words in the input string.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle strings with leading and trailing spaces and return an empty list if the input string is empty. The function should be efficient and easy to understand.\nrequirement pool:\n- Implement the function to filter words based on consonant count.\n- Handle leading and trailing spaces gracefully.\n- Ensure the function returns an empty list if the input string is empty.\n- Optimize the function for performance.\nWe will use Python's built-in string manipulation functions and regular expressions to filter words based on the number of consonants they contain. The function will first clean the input string by removing leading and trailing spaces and then split the string into words. It will then filter these words based on the specified number of consonants. The function will handle edge cases such as an empty input string by returning an empty list.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle various edge cases such as empty strings and spaces. The output should be a list of words that meet the criteria, preserving their order in the input string.\nrequirement pool:\n- Implement the function to filter words based on the number of consonants.\n- Ensure the function can handle leading and trailing spaces.\n- Provide examples and clear documentation for user understanding.\n- Optimize the function for performance and readability.\nTo implement the function `select_words` that filters words based on the number of consonants, we will use Python's built-in string manipulation capabilities and regular expressions for efficient filtering. The function will first normalize the input string by removing leading and trailing spaces and splitting the string into words. It will then filter these words based on the specified number of consonants. The use of regular expressions will help in identifying consonants efficiently.\n", "requirement analysis:\nThe requirement is to create a function that filters words based on the number of consonants they contain. The function should handle strings with leading and trailing spaces and return an empty list if the input string is empty. The function should be efficient and handle edge cases gracefully.\nrequirement pool:\n- Implement the function to filter words based on consonant count.\n- Ensure the function handles spaces at the beginning and end of the string.\n- Return an empty list if the input string is empty.\n- Optimize the function for performance on large inputs.\nTo implement the function `select_words` that filters words based on the number of consonants they contain, we will use Python's built-in string manipulation capabilities and regular expressions for efficient word extraction and filtering. The function will first normalize the input string by trimming leading and trailing spaces, then split the string into words, and finally filter these words based on the specified number of consonants.\n"], "scores": [0.5038, 0.5038, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5038], "pass_results": [false, false, true, true, true, true, true, true, true, false], "pass_test_cases_num": [67, 67, 133, 133, 133, 133, 133, 133, 133, 67], "completion": "from typing import List\n## main.py\n\nfrom typing import List\nimport re\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filters words based on the number of consonants they contain.\n    \n    Args:\n        s (str): The input string.\n        n (int): The number of consonants a word must contain to be included.\n        \n    Returns:\n        List[str]: A list of words that contain at least `n` consonants.\n    \"\"\"\n    # Normalize the input string by trimming spaces\n    s = s.strip()\n    \n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', s)\n    \n    # Filter words based on the number of consonants\n    def count_consonants(word: str) -> int:\n        return len([char for char in word.lower() if char in 'bcdfghjklmnpqrstvwxyz'])\n    \n    filtered_words = [word for word in words if count_consonants(word) >= n]\n    \n    return filtered_words\n", "passed": true, "pass": true, "pass_num": 7, "round": 325, "repair_prompt": ["def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Additionally, ensure that the function handles leading and trailing spaces gracefully.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''"], "mutate_method": "add_1_sentence_at_end", "parent_index": 281}
