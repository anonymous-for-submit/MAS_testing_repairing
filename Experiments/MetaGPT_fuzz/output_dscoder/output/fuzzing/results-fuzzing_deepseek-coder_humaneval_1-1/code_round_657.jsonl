{"task_id": "HumanEval/49", "prompt": "def modp(n: int, p: int):\t\n'''Return 2^n modulo p. Make sure you are aware of the numerics involved.\n>>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    '''", "entry_point": "modp", "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n", "test": ["def check(modp):\n\tassert modp(104, 97) == 62", "def check(modp):\n\tassert modp(97, 102) == 2", "def check(modp):\n\tassert modp(28, 9) == 7", "def check(modp):\n\tassert modp(4, 8) == 0", "def check(modp):\n\tassert modp(3, 11) == 8", "def check(modp):\n\tassert modp(1, 106) == 2", "def check(modp):\n\tassert modp(4, 12) == 4", "def check(modp):\n\tassert modp(102, 104) == 64", "def check(modp):\n\tassert modp(6, 9) == 1", "def check(modp):\n\tassert modp(1, 103) == 2", "def check(modp):\n\tassert modp(26, 9) == 4", "def check(modp):\n\tassert modp(1101, 101) == 2", "def check(modp):\n\tassert modp(34, 8) == 0", "def check(modp):\n\tassert modp(35, 8) == 0", "def check(modp):\n\tassert modp(1376, 99) == 31", "def check(modp):\n\tassert modp(25, 3) == 2", "def check(modp):\n\tassert modp(7, 7) == 2", "def check(modp):\n\tassert modp(100, 101) == 1", "def check(modp):\n\tassert modp(2, 100) == 4", "def check(modp):\n\tassert modp(102, 105) == 64", "def check(modp):\n\tassert modp(1, 9) == 2", "def check(modp):\n\tassert modp(33, 7) == 1", "def check(modp):\n\tassert modp(3, 101) == 8", "def check(modp):\n\tassert modp(892, 106) == 44", "def check(modp):\n\tassert modp(4, 14) == 2", "def check(modp):\n\tassert modp(31, 6) == 2", "def check(modp):\n\tassert modp(1950, 97) == 33", "def check(modp):\n\tassert modp(6, 7) == 1", "def check(modp):\n\tassert modp(101, 99) == 68", "def check(modp):\n\tassert modp(31, 3) == 2", "def check(modp):\n\tassert modp(1257, 99) == 62", "def check(modp):\n\tassert modp(6, 3) == 1", "def check(modp):\n\tassert modp(32, 7) == 4", "def check(modp):\n\tassert modp(8, 6) == 4", "def check(modp):\n\tassert modp(1, 7) == 2", "def check(modp):\n\tassert modp(3, 104) == 8", "def check(modp):\n\tassert modp(96, 99) == 64", "def check(modp):\n\tassert modp(497, 96) == 32", "def check(modp):\n\tassert modp(33, 8) == 0", "def check(modp):\n\tassert modp(30, 10) == 4", "def check(modp):\n\tassert modp(2, 9) == 4", "def check(modp):\n\tassert modp(36, 3) == 1", "def check(modp):\n\tassert modp(1357, 101) == 74", "def check(modp):\n\tassert modp(1670, 104) == 56", "def check(modp):\n\tassert modp(125, 96) == 32", "def check(modp):\n\tassert modp(6, 1) == 0", "def check(modp):\n\tassert modp(35, 2) == 0", "def check(modp):\n\tassert modp(32, 9) == 4", "def check(modp):\n\tassert modp(1625, 103) == 33", "def check(modp):\n\tassert modp(7, 2) == 0", "def check(modp):\n\tassert modp(102, 100) == 4", "def check(modp):\n\tassert modp(8, 13) == 9", "def check(modp):\n\tassert modp(27, 7) == 1", "def check(modp):\n\tassert modp(280, 98) == 30", "def check(modp):\n\tassert modp(597, 102) == 32", "def check(modp):\n\tassert modp(2, 8) == 4", "def check(modp):\n\tassert modp(1, 98) == 2", "def check(modp):\n\tassert modp(104, 106) == 54", "def check(modp):\n\tassert modp(33, 10) == 2", "def check(modp):\n\tassert modp(2, 101) == 4", "def check(modp):\n\tassert modp(1000, 105) == 16", "def check(modp):\n\tassert modp(2, 96) == 4", "def check(modp):\n\tassert modp(29, 5) == 2", "def check(modp):\n\tassert modp(28, 6) == 4", "def check(modp):\n\tassert modp(1, 105) == 2", "def check(modp):\n\tassert modp(95, 106) == 50", "def check(modp):\n\tassert modp(97, 99) == 29", "def check(modp):\n\tassert modp(7, 11) == 7", "def check(modp):\n\tassert modp(3, 13) == 8", "def check(modp):\n\tassert modp(3, 14) == 8", "def check(modp):\n\tassert modp(95, 101) == 60", "def check(modp):\n\tassert modp(4, 99) == 16", "def check(modp):\n\tassert modp(4, 7) == 2", "def check(modp):\n\tassert modp(31, 1) == 0", "def check(modp):\n\tassert modp(5, 16) == 0", "def check(modp):\n\tassert modp(5, 102) == 32", "def check(modp):\n\tassert modp(26, 5) == 4", "def check(modp):\n\tassert modp(4, 16) == 0", "def check(modp):\n\tassert modp(0, 101) == 1", "def check(modp):\n\tassert modp(104, 104) == 48", "def check(modp):\n\tassert modp(96, 100) == 36", "def check(modp):\n\tassert modp(32, 6) == 4", "def check(modp):\n\tassert modp(26, 8) == 0", "def check(modp):\n\tassert modp(103, 97) == 31", "def check(modp):\n\tassert modp(1, 4) == 2", "def check(modp):\n\tassert modp(2, 97) == 4", "def check(modp):\n\tassert modp(25, 8) == 0", "def check(modp):\n\tassert modp(5, 12) == 8", "def check(modp):\n\tassert modp(2, 104) == 4", "def check(modp):\n\tassert modp(1, 14) == 2", "def check(modp):\n\tassert modp(34, 6) == 4", "def check(modp):\n\tassert modp(1161, 104) == 96", "def check(modp):\n\tassert modp(1999, 96) == 32", "def check(modp):\n\tassert modp(3, 103) == 8", "def check(modp):\n\tassert modp(30, 3) == 1", "def check(modp):\n\tassert modp(4, 6) == 4", "def check(modp):\n\tassert modp(7, 8) == 0", "def check(modp):\n\tassert modp(30, 5) == 4", "def check(modp):\n\tassert modp(457, 101) == 74", "def check(modp):\n\tassert modp(36, 2) == 0", "def check(modp):\n\tassert modp(4, 104) == 16", "def check(modp):\n\tassert modp(1, 104) == 2", "def check(modp):\n\tassert modp(35, 7) == 4", "def check(modp):\n\tassert modp(4, 5) == 1", "def check(modp):\n\tassert modp(26, 2) == 0", "def check(modp):\n\tassert modp(100, 105) == 16", "def check(modp):\n\tassert modp(102, 103) == 1", "def check(modp):\n\tassert modp(377, 99) == 95", "def check(modp):\n\tassert modp(1262, 98) == 4", "def check(modp):\n\tassert modp(1, 101) == 2", "def check(modp):\n\tassert modp(1, 1) == 0", "def check(modp):\n\tassert modp(30, 8) == 0", "def check(modp):\n\tassert modp(28, 5) == 1", "def check(modp):\n\tassert modp(99, 104) == 8", "def check(modp):\n\tassert modp(3, 5) == 3", "def check(modp):\n\tassert modp(31, 5) == 3", "def check(modp):\n\tassert modp(7, 10) == 8", "def check(modp):\n\tassert modp(33, 9) == 8", "def check(modp):\n\tassert modp(5, 15) == 2", "def check(modp):\n\tassert modp(3, 4) == 0"], "test_case_list": ["assert modp(104, 97) == 62", "assert modp(97, 102) == 2", "assert modp(28, 9) == 7", "assert modp(4, 8) == 0", "assert modp(3, 11) == 8", "assert modp(1, 106) == 2", "assert modp(4, 12) == 4", "assert modp(102, 104) == 64", "assert modp(6, 9) == 1", "assert modp(1, 103) == 2", "assert modp(26, 9) == 4", "assert modp(1101, 101) == 2", "assert modp(34, 8) == 0", "assert modp(35, 8) == 0", "assert modp(1376, 99) == 31", "assert modp(25, 3) == 2", "assert modp(7, 7) == 2", "assert modp(100, 101) == 1", "assert modp(2, 100) == 4", "assert modp(102, 105) == 64", "assert modp(1, 9) == 2", "assert modp(33, 7) == 1", "assert modp(3, 101) == 8", "assert modp(892, 106) == 44", "assert modp(4, 14) == 2", "assert modp(31, 6) == 2", "assert modp(1950, 97) == 33", "assert modp(6, 7) == 1", "assert modp(101, 99) == 68", "assert modp(31, 3) == 2", "assert modp(1257, 99) == 62", "assert modp(6, 3) == 1", "assert modp(32, 7) == 4", "assert modp(8, 6) == 4", "assert modp(1, 7) == 2", "assert modp(3, 104) == 8", "assert modp(96, 99) == 64", "assert modp(497, 96) == 32", "assert modp(33, 8) == 0", "assert modp(30, 10) == 4", "assert modp(2, 9) == 4", "assert modp(36, 3) == 1", "assert modp(1357, 101) == 74", "assert modp(1670, 104) == 56", "assert modp(125, 96) == 32", "assert modp(6, 1) == 0", "assert modp(35, 2) == 0", "assert modp(32, 9) == 4", "assert modp(1625, 103) == 33", "assert modp(7, 2) == 0", "assert modp(102, 100) == 4", "assert modp(8, 13) == 9", "assert modp(27, 7) == 1", "assert modp(280, 98) == 30", "assert modp(597, 102) == 32", "assert modp(2, 8) == 4", "assert modp(1, 98) == 2", "assert modp(104, 106) == 54", "assert modp(33, 10) == 2", "assert modp(2, 101) == 4", "assert modp(1000, 105) == 16", "assert modp(2, 96) == 4", "assert modp(29, 5) == 2", "assert modp(28, 6) == 4", "assert modp(1, 105) == 2", "assert modp(95, 106) == 50", "assert modp(97, 99) == 29", "assert modp(7, 11) == 7", "assert modp(3, 13) == 8", "assert modp(3, 14) == 8", "assert modp(95, 101) == 60", "assert modp(4, 99) == 16", "assert modp(4, 7) == 2", "assert modp(31, 1) == 0", "assert modp(5, 16) == 0", "assert modp(5, 102) == 32", "assert modp(26, 5) == 4", "assert modp(4, 16) == 0", "assert modp(0, 101) == 1", "assert modp(104, 104) == 48", "assert modp(96, 100) == 36", "assert modp(32, 6) == 4", "assert modp(26, 8) == 0", "assert modp(103, 97) == 31", "assert modp(1, 4) == 2", "assert modp(2, 97) == 4", "assert modp(25, 8) == 0", "assert modp(5, 12) == 8", "assert modp(2, 104) == 4", "assert modp(1, 14) == 2", "assert modp(34, 6) == 4", "assert modp(1161, 104) == 96", "assert modp(1999, 96) == 32", "assert modp(3, 103) == 8", "assert modp(30, 3) == 1", "assert modp(4, 6) == 4", "assert modp(7, 8) == 0", "assert modp(30, 5) == 4", "assert modp(457, 101) == 74", "assert modp(36, 2) == 0", "assert modp(4, 104) == 16", "assert modp(1, 104) == 2", "assert modp(35, 7) == 4", "assert modp(4, 5) == 1", "assert modp(26, 2) == 0", "assert modp(100, 105) == 16", "assert modp(102, 103) == 1", "assert modp(377, 99) == 95", "assert modp(1262, 98) == 4", "assert modp(1, 101) == 2", "assert modp(1, 1) == 0", "assert modp(30, 8) == 0", "assert modp(28, 5) == 1", "assert modp(99, 104) == 8", "assert modp(3, 5) == 3", "assert modp(31, 5) == 3", "assert modp(7, 10) == 8", "assert modp(33, 9) == 8", "assert modp(5, 15) == 2", "assert modp(3, 4) == 0"], "nl": "Return 2^n modulo p (be aware of numerics).\n    ", "func": "def modp(n: int, p: int):", "examples": ">>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    ", "completions": ["from typing import List\n## main.py\n\ndef modp(n: int, p: int) -> int:\n    '''\n    Return 2^n modulo p.\n    Args:\n        n (int): The exponent.\n        p (int): The modulus.\n    Returns:\n        int: The result of 2^n modulo p.\n    '''\n    if n < 0 or p <= 1:\n        raise ValueError(\"Invalid input: n must be non-negative and p must be greater than 1\")\n    \n    return pow(2, n, p)\n", "from typing import List\n## main.py\n\ndef modp(n: int, p: int) -> int:\n    \"\"\"\n    Calculate 2^n modulo p.\n\n    Args:\n        n (int): The exponent.\n        p (int): The modulus.\n\n    Returns:\n        int: The result of 2^n modulo p.\n    \"\"\"\n    return pow(2, n, p)\n", "from typing import List\n## main.py\n\nimport math\n\ndef modp(n: int, p: int) -> int:\n    '''\n    Returns 2^n modulo p.\n    Args:\n        n (int): The exponent.\n        p (int): The modulus.\n    Returns:\n        int: The result of 2^n modulo p.\n    '''\n    result = 1\n    base = 2\n    \n    # Convert n to binary representation\n    binary_n = bin(n)[2:]\n    \n    # Iterate over each bit in the binary representation of n\n    for bit in binary_n:\n        if bit == '1':\n            result = (result * base) % p\n        base = (base * base) % p\n    \n    return result\n", "from typing import List\n## main.py\n\ndef modp(n: int, p: int) -> int:\n    \"\"\"\n    Calculate 2^n % p.\n\n    Args:\n        n (int): The exponent.\n        p (int): The modulus.\n\n    Returns:\n        int: The result of 2^n % p.\n    \"\"\"\n    return pow(2, n, p)\n", "from typing import List\n## main.py\n\ndef modp(n: int, p: int) -> int:\n    \"\"\"\n    Calculate 2^n modulo p.\n\n    Args:\n        n (int): The exponent.\n        p (int): The modulo value.\n\n    Returns:\n        int: The result of 2^n modulo p.\n\n    Examples:\n        >>> modp(3, 5)\n        3\n        >>> modp(10, 17)\n        16\n    \"\"\"\n    return pow(2, n, p)\n", "from typing import List\n## main.py\n\ndef modp(n: int, p: int) -> int:\n    '''\n    Returns 2^n modulo p.\n    Args:\n        n (int): The exponent.\n        p (int): The modulus.\n    Returns:\n        int: The result of 2^n modulo p.\n    '''\n    if n < 0 or p <= 0:\n        raise ValueError(\"Invalid input: n must be non-negative and p must be positive.\")\n    \n    return pow(2, n, p)\n", "from typing import List\n## main.py\n\ndef modp(n: int, p: int) -> int:\n    \"\"\"\n    Computes 2^n modulo p.\n\n    Args:\n        n (int): The exponent.\n        p (int): The modulus.\n\n    Returns:\n        int: The result of 2^n modulo p.\n    \"\"\"\n    # Validate inputs\n    if not isinstance(n, int) or not isinstance(p, int) or p <= 0:\n        raise ValueError(\"Inputs must be positive integers.\")\n\n    # Compute 2^n % p using Python's pow function with modulus\n    result = pow(2, n, p)\n    return result\n", "from typing import List\n## main.py\n\ndef modp(n: int, p: int) -> int:\n    \"\"\"\n    Computes 2^n % p efficiently using Python's built-in pow function with modulus.\n\n    Args:\n        n (int): The exponent.\n        p (int): The modulus.\n\n    Returns:\n        int: The result of 2^n % p.\n    \"\"\"\n    return pow(2, n, p)\n", "from typing import List\n## main.py\n\ndef modp(n: int, p: int) -> int:\n    '''\n    Returns 2^n modulo p.\n    Args:\n        n (int): The exponent.\n        p (int): The modulus.\n    Returns:\n        int: The result of 2^n modulo p.\n    '''\n    return pow(2, n, p)\n", "from typing import List\n## main.py\n\ndef modp(n: int, p: int) -> int:\n    '''\n    Returns 2^n modulo p.\n    Args:\n        n (int): The exponent.\n        p (int): The modulus.\n    Returns:\n        int: The result of 2^n modulo p.\n    '''\n    if n < 0 or p <= 0:\n        raise ValueError(\"Invalid input: n must be non-negative and p must be positive.\")\n    \n    return pow(2, n, p)\n"], "plans": ["requirement analysis:\nThe original requirements specify a function that calculates 2^n modulo p. This is a fundamental operation in cryptography and number theory. The function should handle both small and large numbers efficiently. The doctests provided give examples of expected outputs for specific inputs, which will be useful for testing the function's correctness.\nrequirement pool:\n- The main code should accurately calculate 2^n modulo p\n- The function should be optimized for performance\n- The function should handle large numbers without performance degradation\n- The function should be well-documented and easy to understand\n- The function should include error handling for invalid inputs\nTo implement the function efficiently, we will use Python's built-in `pow` function which supports modular exponentiation. This function is optimized for performance and handles large numbers gracefully. We will ensure that the function is well-documented and includes error handling for invalid inputs.\n", "requirement analysis:\nThe original requirements specify a simple function to compute 2^n modulo p. The function should handle both small and large inputs efficiently. The user has provided several test cases to demonstrate expected outputs. The requirements are clear and focused on the core functionality of modular exponentiation.\nrequirement pool:\n- Implement the function to compute 2^n modulo p accurately\n- Ensure the function can handle large values of n and p\n- Optimize the function for performance\n- Include comprehensive test cases to verify the function's correctness\n- Document the function's usage and limitations\nTo implement the function `modp(n: int, p: int)` efficiently, we will use Python's built-in `pow` function with the modulus feature. This approach is both fast and secure, leveraging Python's optimized numeric operations. We will ensure that the function handles large numbers gracefully by utilizing Python's arbitrary-precision arithmetic. Additionally, we will optimize the function for performance to handle both small and large inputs effectively.\n", "requirement analysis:\nThe function needs to handle large integers and return the result of 2^n modulo p efficiently. It should be robust against various inputs and provide accurate results. The performance should be comparable to or better than existing libraries for cryptographic and mathematical computations.\nrequirement pool:\n- The function should handle large integers and return the result of 2^n modulo p efficiently.\n- The function should be robust against various inputs and provide accurate results.\n- The performance of the function should be comparable to or better than existing libraries for cryptographic and mathematical computations.\n- The function should be easy to use and integrate into existing projects.\n- The function should be secure for cryptographic applications.\nTo implement the function efficiently, we will utilize Python's built-in capabilities for handling large integers and its pow function with modulus, which is optimized for such operations. This approach ensures both performance and security, crucial for cryptographic applications. We will optimize the function to handle large inputs gracefully, ensuring it performs well even for very large values of n and p.\n", "requirement analysis:\nThe original requirements specify a function that calculates 2^n modulo p. This is a common task in cryptography and number theory. The function should handle both small and large inputs efficiently. The examples provided illustrate the function's behavior with various inputs, including edge cases like n=0 and large numbers.\nrequirement pool:\n- The function should accurately compute 2^n modulo p for any integer n and prime p.\n- The function should handle large values of n and p efficiently without overflow.\n- The function should provide clear and informative error messages for invalid inputs.\n- The function should be compatible with Python's type checking and ensure type safety.\n- The function should include comprehensive documentation and examples to assist users.\nTo implement the function efficiently, we will utilize Python's built-in `pow` function with the modulus argument. This function is optimized for performance and handles large numbers gracefully. The `pow` function in Python supports the computation of (base^exp) % mod, which directly addresses the requirements of this task. This approach ensures that the function is both reliable and efficient, making it suitable for cryptographic applications and other scenarios where large numbers and modular arithmetic are involved.\n", "requirement analysis:\nThe original requirements specify a function that calculates 2^n modulo p. This is a common problem in cryptography and number theory. The function should handle both small and large numbers efficiently. The doctests provided give examples of expected outputs for specific inputs, which will be useful for testing the function's correctness.\nrequirement pool:\n- The function should correctly calculate 2^n modulo p for any integer n and positive integer p.\n- The function should handle large values of n and p gracefully without performance degradation.\n- The function should include detailed docstrings explaining the numerics involved.\n- The function should be optimized for performance, especially for large inputs.\n- Include comprehensive unit tests to verify the function's correctness.\nTo implement the function efficiently, we will use Python's built-in `pow` function with the third argument for modulo. This function is optimized for performance and handles large numbers gracefully. We will also ensure that the function includes detailed docstrings explaining the numerics involved, which is a requirement for user understanding.\n", "requirement analysis:\nThe original requirements specify a function that calculates 2^n modulo p. This is a fundamental operation in cryptography and number theory. The function should handle both small and large inputs efficiently. The examples provided illustrate the function's behavior with various inputs, emphasizing the need for accurate and fast computation.\nrequirement pool:\n- Implement the function to accurately compute 2^n modulo p\n- Ensure the function is optimized for performance\n- Include error handling for invalid inputs\n- Provide documentation and examples for user guidance\n- Extend the function to support large integers\nTo implement the function efficiently, we will utilize Python's built-in capabilities, specifically leveraging the `pow` function which supports the computation of modular exponentiation. This function is both fast and secure, making it suitable for cryptographic applications. We will ensure that the function handles large numbers gracefully by utilizing Python's support for arbitrary-precision arithmetic.\n", "requirement analysis:\nThe original requirements specify a function that calculates 2^n modulo p. This is a common operation in cryptography and number theory. The function should handle both small and large inputs efficiently. The examples provided illustrate the function's behavior with various inputs, including edge cases like n=0 and large numbers.\nrequirement pool:\n- The function should correctly compute 2^n modulo p for any integer n and positive integer p.\n- The function should handle large values of n and p efficiently without overflow.\n- The function should include error handling for invalid inputs such as non-integer values for n or p.\n- The function should be optimized for performance, especially for large values of n and p.\nTo implement the function efficiently, we will utilize Python's built-in `pow` function with the modulus argument, which is optimized for performance. This approach leverages the properties of modular arithmetic to compute the result without unnecessary overflow or excessive memory usage. We will ensure that the function handles large numbers gracefully by using Python's native support for large integers.\n", "requirement analysis:\nThe function requires a clear understanding of modular arithmetic to ensure accurate and efficient results. The function should handle both small and large numbers, with a focus on performance for large inputs. The documentation should provide examples and explanations of the numerics involved to assist users in understanding how the function works.\nrequirement pool:\n- Implement the function to return 2^n modulo p accurately\n- Ensure the function can handle large numbers without performance degradation\n- Include detailed documentation explaining the numerics involved\n- Provide examples and tests to verify the function's correctness\n- Optimize the function for performance, especially for large inputs\nTo implement the function `modp(n: int, p: int)` efficiently, we will use Python's built-in `pow` function with the modulus feature. This approach leverages Python's optimized numeric operations to handle large numbers gracefully. The function will compute `2^n % p` using the `pow` function with three arguments, which is designed for modular exponentiation. This method is both efficient and straightforward, ensuring that the function can handle large inputs without performance degradation.\n", "requirement analysis:\nThe requirement involves implementing a function that calculates 2^n modulo p. This is a fundamental operation in cryptography and number theory. The function should handle both small and large inputs efficiently. The user has provided several test cases to verify the correctness of the implementation.\nrequirement pool:\n- The main code should correctly implement the modular exponentiation algorithm\n- The function should handle inputs up to 1000 digits\n- The function should be optimized for performance\n- The function should include error handling for invalid inputs\n- The function should be documented with examples and usage instructions\nTo implement the modular exponentiation efficiently, we will use Python's built-in `pow` function with the modulus option. This function is optimized for performance and handles large numbers gracefully. We will ensure that the function is optimized for both small and large inputs by leveraging Python's capabilities for handling large integers.\n", "requirement analysis:\nThe original requirements specify a function that calculates 2^n modulo p. This is a fundamental operation in cryptography and number theory. The function should handle both small and large inputs efficiently. The examples provided illustrate the function's behavior with various inputs, emphasizing the need for accurate and fast computation.\nrequirement pool:\n- Implement the function to accurately compute 2^n modulo p\n- Ensure the function is optimized for performance\n- Include error handling for invalid inputs\n- Provide documentation and examples for user guidance\n- Extend the function to support large integers\nTo implement the function efficiently, we will utilize Python's built-in capabilities, specifically leveraging the `pow` function which supports the computation of modular exponentiation. This function is both fast and secure, making it suitable for cryptographic applications. We will ensure that the function handles large numbers gracefully by utilizing Python's support for arbitrary-precision arithmetic.\n"], "scores": [0.975, 1.0, 0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [false, true, false, true, true, true, true, true, true, true], "pass_test_cases_num": [117, 120, 60, 120, 120, 120, 120, 120, 120, 120], "completion": "from typing import List\n## main.py\n\ndef modp(n: int, p: int) -> int:\n    '''\n    Returns 2^n modulo p.\n    Args:\n        n (int): The exponent.\n        p (int): The modulus.\n    Returns:\n        int: The result of 2^n modulo p.\n    '''\n    if n < 0 or p <= 0:\n        raise ValueError(\"Invalid input: n must be non-negative and p must be positive.\")\n    \n    return pow(2, n, p)\n", "passed": true, "pass": true, "pass_num": 8, "round": 657, "repair_prompt": ["def modp(n: int, p: int):\t\n'''Return 2^n modulo p. Make sure you are aware of the numerics involved.\n>>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    '''"], "mutate_method": "expand_one2two", "parent_index": 492}
