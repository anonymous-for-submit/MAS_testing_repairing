{"task_id": "HumanEval/31", "prompt": "def is_prime(n):\t\n'''Return true if a given number is prime. If the number is not prime, return false.\n>>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    '''", "entry_point": "is_prime", "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n", "test": ["def check(is_prime):\n\tassert is_prime(255520) == False", "def check(is_prime):\n\tassert is_prime(6) == False", "def check(is_prime):\n\tassert is_prime(85) == False", "def check(is_prime):\n\tassert is_prime(83) == True", "def check(is_prime):\n\tassert is_prime(82) == False", "def check(is_prime):\n\tassert is_prime(7) == True", "def check(is_prime):\n\tassert is_prime(13) == True", "def check(is_prime):\n\tassert is_prime(57) == False", "def check(is_prime):\n\tassert is_prime(81) == False", "def check(is_prime):\n\tassert is_prime(3) == True", "def check(is_prime):\n\tassert is_prime(104) == False", "def check(is_prime):\n\tassert is_prime(90) == False", "def check(is_prime):\n\tassert is_prime(88) == False", "def check(is_prime):\n\tassert is_prime(255344) == False", "def check(is_prime):\n\tassert is_prime(12) == False", "def check(is_prime):\n\tassert is_prime(14316) == False", "def check(is_prime):\n\tassert is_prime(12938) == False", "def check(is_prime):\n\tassert is_prime(8) == False", "def check(is_prime):\n\tassert is_prime(102) == False", "def check(is_prime):\n\tassert is_prime(12628) == False", "def check(is_prime):\n\tassert is_prime(61) == True", "def check(is_prime):\n\tassert is_prime(5 * 17) == False", "def check(is_prime):\n\tassert is_prime(98) == False", "def check(is_prime):\n\tassert is_prime(63) == False", "def check(is_prime):\n\tassert is_prime(19) == True", "def check(is_prime):\n\tassert is_prime(12884) == False", "def check(is_prime):\n\tassert is_prime(87) == False", "def check(is_prime):\n\tassert is_prime(89) == True", "def check(is_prime):\n\tassert is_prime(255139) == False", "def check(is_prime):\n\tassert is_prime(12897) == False", "def check(is_prime):\n\tassert is_prime(73) == True", "def check(is_prime):\n\tassert is_prime(1) == False", "def check(is_prime):\n\tassert is_prime(15) == False", "def check(is_prime):\n\tassert is_prime(75) == False", "def check(is_prime):\n\tassert is_prime(18) == False", "def check(is_prime):\n\tassert is_prime(96) == False", "def check(is_prime):\n\tassert is_prime(5) == True", "def check(is_prime):\n\tassert is_prime(9) == False", "def check(is_prime):\n\tassert is_prime(255046) == False", "def check(is_prime):\n\tassert is_prime(14) == False", "def check(is_prime):\n\tassert is_prime(78) == False", "def check(is_prime):\n\tassert is_prime(255214) == False", "def check(is_prime):\n\tassert is_prime(76) == False", "def check(is_prime):\n\tassert is_prime(2) == True", "def check(is_prime):\n\tassert is_prime(254873) == True", "def check(is_prime):\n\tassert is_prime(13441 * 19) == False", "def check(is_prime):\n\tassert is_prime(13796) == False", "def check(is_prime):\n\tassert is_prime(11) == True", "def check(is_prime):\n\tassert is_prime(14253) == False", "def check(is_prime):\n\tassert is_prime(100) == False", "def check(is_prime):\n\tassert is_prime(20) == False", "def check(is_prime):\n\tassert is_prime(58) == False", "def check(is_prime):\n\tassert is_prime(22) == False", "def check(is_prime):\n\tassert is_prime(17) == True", "def check(is_prime):\n\tassert is_prime(13481) == False", "def check(is_prime):\n\tassert is_prime(12832) == False", "def check(is_prime):\n\tassert is_prime(254513) == False", "def check(is_prime):\n\tassert is_prime(106) == False", "def check(is_prime):\n\tassert is_prime(16) == False", "def check(is_prime):\n\tassert is_prime(13441) == True", "def check(is_prime):\n\tassert is_prime(66) == False", "def check(is_prime):\n\tassert is_prime(65) == False", "def check(is_prime):\n\tassert is_prime(80) == False", "def check(is_prime):\n\tassert is_prime(11 * 7) == False", "def check(is_prime):\n\tassert is_prime(101) == True", "def check(is_prime):\n\tassert is_prime(103) == True", "def check(is_prime):\n\tassert is_prime(56) == False", "def check(is_prime):\n\tassert is_prime(254423) == False", "def check(is_prime):\n\tassert is_prime(254790) == False", "def check(is_prime):\n\tassert is_prime(4) == False"], "test_case_list": ["assert is_prime(255520) == False", "assert is_prime(6) == False", "assert is_prime(85) == False", "assert is_prime(83) == True", "assert is_prime(82) == False", "assert is_prime(7) == True", "assert is_prime(13) == True", "assert is_prime(57) == False", "assert is_prime(81) == False", "assert is_prime(3) == True", "assert is_prime(104) == False", "assert is_prime(90) == False", "assert is_prime(88) == False", "assert is_prime(255344) == False", "assert is_prime(12) == False", "assert is_prime(14316) == False", "assert is_prime(12938) == False", "assert is_prime(8) == False", "assert is_prime(102) == False", "assert is_prime(12628) == False", "assert is_prime(61) == True", "assert is_prime(5 * 17) == False", "assert is_prime(98) == False", "assert is_prime(63) == False", "assert is_prime(19) == True", "assert is_prime(12884) == False", "assert is_prime(87) == False", "assert is_prime(89) == True", "assert is_prime(255139) == False", "assert is_prime(12897) == False", "assert is_prime(73) == True", "assert is_prime(1) == False", "assert is_prime(15) == False", "assert is_prime(75) == False", "assert is_prime(18) == False", "assert is_prime(96) == False", "assert is_prime(5) == True", "assert is_prime(9) == False", "assert is_prime(255046) == False", "assert is_prime(14) == False", "assert is_prime(78) == False", "assert is_prime(255214) == False", "assert is_prime(76) == False", "assert is_prime(2) == True", "assert is_prime(254873) == True", "assert is_prime(13441 * 19) == False", "assert is_prime(13796) == False", "assert is_prime(11) == True", "assert is_prime(14253) == False", "assert is_prime(100) == False", "assert is_prime(20) == False", "assert is_prime(58) == False", "assert is_prime(22) == False", "assert is_prime(17) == True", "assert is_prime(13481) == False", "assert is_prime(12832) == False", "assert is_prime(254513) == False", "assert is_prime(106) == False", "assert is_prime(16) == False", "assert is_prime(13441) == True", "assert is_prime(66) == False", "assert is_prime(65) == False", "assert is_prime(80) == False", "assert is_prime(11 * 7) == False", "assert is_prime(101) == True", "assert is_prime(103) == True", "assert is_prime(56) == False", "assert is_prime(254423) == False", "assert is_prime(254790) == False", "assert is_prime(4) == False"], "nl": "Return true if a given number is prime, and false otherwise.\n    ", "func": "def is_prime(n):", "examples": ">>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    ", "completions": ["from typing import List\nimport math\n\ndef is_prime(n: int) -> bool:\n    '''Return true if a given number is prime. If the number is not prime, return false.\n    >>> is_prime(6)\n        False\n        >>> is_prime(101)\n        True\n        >>> is_prime(11)\n        True\n        >>> is_prime(13441)\n        True\n        >>> is_prime(61)\n        True\n        >>> is_prime(4)\n        False\n        >>> is_prime(1)\n        False\n        '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n", "from typing import List\n## main.py\n\nimport math\n\ndef is_prime(n: int) -> bool:\n    '''Return true if a given number is prime. If the number is not prime, return false.\n    >>> is_prime(6)  # False\n    >>> is_prime(101)  # True\n    >>> is_prime(11)  # True\n    >>> is_prime(13441)  # True\n    >>> is_prime(61)  # True\n    >>> is_prime(4)  # False\n    >>> is_prime(1)  # False\n    '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n", "from typing import List\n## main.py\n\ndef is_prime(n: int) -> bool:\n    '''\n    Return true if a given number is prime. If the number is not prime, return false.\n    Parameters:\n        n (int): The number to be checked for primality.\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    Examples:\n        >>> is_prime(6)\n        False\n        >>> is_prime(101)\n        True\n        >>> is_prime(11)\n        True\n        >>> is_prime(13441)\n        True\n        >>> is_prime(61)\n        True\n        >>> is_prime(4)\n        False\n        >>> is_prime(1)\n        False\n    '''\n    # Handle edge cases\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n\n    # Check for divisibility by 2 or 3\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n\n    # Check for divisibility by numbers of the form 6k \u00b1 1 up to sqrt(n)\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n\n    return True\n", "from typing import List\n## main.py\n\nimport math\n\ndef is_prime(n: int) -> bool:\n    '''Return true if a given number is prime. If the number is not prime, return false.\n    >>> is_prime(6)\n        False\n        >>> is_prime(101)\n        True\n        >>> is_prime(11)\n        True\n        >>> is_prime(13441)\n        True\n        >>> is_prime(61)\n        True\n        >>> is_prime(4)\n        False\n        >>> is_prime(1)\n        False\n        '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n", "from typing import List\n## main.py\n\nimport math\n\ndef is_prime(n: int) -> bool:\n    '''\n    Return true if a given number is prime. If the number is not prime, return false.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n", "from typing import List\n## main.py\n\nimport math\n\ndef is_prime(n: int) -> bool:\n    '''Return true if a given number is prime. If the number is not prime, return false.\n    >>> is_prime(6)\n        False\n        >>> is_prime(101)\n        True\n        >>> is_prime(11)\n        True\n        >>> is_prime(13441)\n        True\n        >>> is_prime(61)\n        True\n        >>> is_prime(4)\n        False\n        >>> is_prime(1)\n        False\n        '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n", "from typing import List\n## main.py\n\nimport math\n\ndef is_prime(n: int) -> bool:\n    '''\n    Return true if a given number is prime. If the number is not prime, return false.\n    Parameters:\n        n (int): The number to be checked for primality.\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    Examples:\n        >>> is_prime(6)\n        False\n        >>> is_prime(101)\n        True\n        >>> is_prime(11)\n        True\n        >>> is_prime(13441)\n        True\n        >>> is_prime(61)\n        True\n        >>> is_prime(4)\n        False\n        >>> is_prime(1)\n        False\n    '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n", "from typing import List\n## main.py\n\nimport math\n\ndef is_prime(n: int) -> bool:\n    '''Return true if a given number is prime. If the number is not prime, return false.\n    >>> is_prime(6)\n        False\n        >>> is_prime(101)\n        True\n        >>> is_prime(11)\n        True\n        >>> is_prime(13441)\n        True\n        >>> is_prime(61)\n        True\n        >>> is_prime(4)\n        False\n        >>> is_prime(1)\n        False\n        '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n", "from typing import List\n## main.py\n\nimport math\n\ndef is_prime(n: int) -> bool:\n    '''Return true if a given number is prime. If the number is not prime, return false.\n    >>> is_prime(6)\n        False\n        >>> is_prime(101)\n        True\n        >>> is_prime(11)\n        True\n        >>> is_prime(13441)\n        True\n        >>> is_prime(61)\n        True\n        >>> is_prime(4)\n        False\n        >>> is_prime(1)\n        False\n        '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n", "from typing import List\n## main.py\n\ndef is_prime(n: int) -> bool:\n    '''Return true if a given number is prime. If the number is not prime, return false.\n    >>> is_prime(6)  # False\n    >>> is_prime(101)  # True\n    >>> is_prime(11)  # True\n    >>> is_prime(13441)  # True\n    >>> is_prime(61)  # True\n    >>> is_prime(4)  # False\n    >>> is_prime(1)  # False\n    '''\n    if n < 2:\n        return False\n    \n    # Implement Sieve of Eratosthenes to mark non-prime numbers\n    sieve = [True] * (n + 1)\n    sieve[0] = sieve[1] = False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if sieve[i]:\n            for j in range(i*i, n + 1, i):\n                sieve[j] = False\n    \n    return sieve[n]\n"], "plans": ["requirement analysis:\nThe original requirements call for a function that determines if a given number is prime. The function should return true if the number is prime and false otherwise. The requirements include several test cases to validate the function's correctness. The function should handle edge cases such as negative numbers, zero, and one, which are not prime. The function should also be efficient, especially for large numbers.\nrequirement pool:\n- The main code should accurately determine if a number is prime\n- The function should handle edge cases effectively\n- The function should be optimized for performance, especially with large numbers\n- The documentation should be clear and concise\n- The function should be easy to integrate into other projects\nTo create an efficient and accurate prime number checking algorithm, we will utilize Python's built-in capabilities and leverage the 'math' library for mathematical operations. The function will first handle edge cases such as numbers less than 2, which are not prime. For numbers greater than or equal to 2, we will implement a trial division method up to the square root of the number, which is efficient and sufficient for our needs. This approach ensures that the function is optimized for large numbers and handles edge cases correctly.\n", "requirement analysis:\nThe original requirements specify a simple function to check if a number is prime. The function should return true if the number is prime and false otherwise. The requirements include several test cases to demonstrate expected behavior. The function should handle basic cases like small numbers, large numbers, and edge cases like 1 and negative numbers.\nrequirement pool:\n- Implement the is_prime function with a clear and efficient algorithm\n- Ensure the function can handle edge cases and large numbers efficiently\n- Develop a user-friendly interface for prime number checking\n- Optimize the function for performance and scalability\n- Include documentation and examples to assist users\nTo implement the `is_prime` function efficiently and accurately, we will use a combination of basic prime number checking methods and optimizations. We will leverage Python's built-in capabilities to handle large numbers and edge cases effectively. The function will first check for basic conditions like being less than 2 and then iterate through potential divisors up to the square root of the number. This approach ensures that the function is both simple and optimized for large inputs.\n", "requirement analysis:\nThe original requirements specify a simple function to check if a number is prime. The function should return True if the number is prime and False otherwise. The requirements include several test cases to demonstrate expected behavior. The function should be efficient and handle edge cases like negative numbers and small numbers.\nrequirement pool:\n- Implement the is_prime function with clear and concise code\n- Ensure the function accurately identifies prime numbers\n- Optimize the function for performance, especially with large numbers\n- Include detailed docstrings and comments for easy understanding\n- Test the function with various edge cases to ensure robustness\nTo implement the `is_prime` function efficiently and accurately, we will use a combination of basic prime-checking algorithms and optimizations. The function will first handle edge cases such as negative numbers and small numbers. For larger numbers, we will use the trial division method, which is simple and effective for this purpose. The function will be optimized to handle large numbers efficiently, ensuring that it can quickly determine if a number is prime. Detailed docstrings and comments will be included to enhance understanding and maintainability.\n", "requirement analysis:\nThe original requirements specify a simple function to check if a number is prime. The function should return true if the number is prime and false otherwise. The requirements include several test cases to demonstrate expected behavior. The function should be efficient and handle edge cases like the number 1, which is not considered prime.\nrequirement pool:\n- Implement the is_prime function to accurately determine if a number is prime\n- Ensure the function handles edge cases such as 1 and negative numbers correctly\n- Optimize the function for performance, especially with large numbers\n- Include detailed docstrings and comments for easy understanding\n- Test the function with various edge cases to ensure reliability\nTo implement the `is_prime` function efficiently and accurately, we will use a combination of basic prime-checking algorithms and optimizations. The function will first handle edge cases such as numbers less than 2 and then apply a trial division method up to the square root of the number. This approach ensures that the function is both simple and efficient, suitable for large numbers.\n", "requirement analysis:\nThe original requirements specify a simple function to check if a number is prime. The function should return true for prime numbers and false for non-prime numbers. The doctests provided give examples of expected behavior. The function needs to handle basic cases efficiently and correctly.\nrequirement pool:\n- Implement the is_prime function with accurate and efficient prime checking.\n- Ensure the function can handle edge cases like negative numbers, zero, and one.\n- Optimize the function for large numbers to ensure it performs well even for very large inputs.\n- Develop a user-friendly interface for the function, possibly as part of a larger application.\n- Include additional features like a GUI for better user interaction.\nTo implement the `is_prime` function efficiently and accurately, we will use a combination of basic prime checking methods and optimizations. The function will first handle edge cases such as negative numbers, zero, and one. For other numbers, it will use a trial division method up to the square root of the number, which is efficient and sufficient for most cases. We will also ensure that the function is optimized for large numbers by limiting the range of trial division based on the size of the input.\n", "requirement analysis:\nThe original requirements specify a simple function to check if a number is prime. The function should return true for prime numbers and false for non-prime numbers. The requirements also include a set of test cases to validate the function's correctness. The function should handle edge cases such as very small numbers and negative numbers.\nrequirement pool:\n- Implement the is_prime function with a clear and efficient algorithm.\n- Ensure the function correctly identifies prime numbers and handles edge cases.\n- Include detailed documentation and examples to assist users.\n- Optimize the function for performance to handle large numbers efficiently.\nTo implement the `is_prime` function efficiently and accurately, we will use a straightforward algorithm that checks divisibility by all numbers up to the square root of the given number. This approach is simple and effective for determining the primality of small to moderately large numbers. We will also ensure that the function handles edge cases such as negative numbers and numbers less than 2 by returning False immediately. For larger numbers, we will optimize the algorithm to reduce computation time.\n", "requirement analysis:\nThe original requirements call for a function that determines if a given number is prime. The function should return True if the number is prime and False otherwise. The requirements include several test cases to validate the function's correctness. The function should handle basic cases like small numbers and also edge cases like 1 and negative numbers.\nrequirement pool:\n- The function should correctly identify prime numbers\n- The function should handle edge cases such as 1 and negative numbers\n- The function should be optimized for performance, especially with large numbers\n- The function should include clear and concise documentation\n- The function should be easily understandable by users\nTo implement the `is_prime` function efficiently and accurately, we will use a combination of basic prime-checking algorithms and optimizations. The function will first handle edge cases such as numbers less than 2, then use a trial division method up to the square root of the number for larger checks. This approach ensures both accuracy and performance, especially for larger numbers.\n", "requirement analysis:\nThe original requirements specify a simple function to check if a number is prime. The function should return true if the number is prime and false otherwise. The requirements also include a set of test cases to validate the function's correctness. The function should be efficient and handle edge cases like negative numbers, zero, and one.\nrequirement pool:\n- Implement the is_prime function with clear and concise documentation\n- Ensure the function accurately identifies prime numbers\n- Optimize the function for performance, especially with large numbers\n- Include comprehensive test cases to validate the function's correctness\n- Enhance user experience with clear examples and a user-friendly interface\nTo implement the `is_prime` function efficiently and accurately, we will use a combination of simple mathematical checks and optimizations. The function will first handle edge cases such as negative numbers, zero, and one. For other numbers, it will use a trial division method up to the square root of the number, which is efficient and sufficient for most cases. This approach ensures that the function is optimized for large numbers and handles edge cases effectively.\n", "requirement analysis:\nThe original requirements specify a simple function to check if a number is prime. The function should return true if the number is prime and false otherwise. The requirements include several test cases to demonstrate expected behavior. The function should be efficient and handle edge cases like negative numbers, zero, and one.\nrequirement pool:\n- Implement the is_prime function to accurately check for prime numbers\n- Ensure the function handles edge cases such as negative numbers, zero, and one\n- Optimize the function for performance, especially with large numbers\n- Include detailed documentation to help users understand the function's usage\n- Enhance the user interface for a better user experience\nTo implement the is_prime function efficiently and accurately, we will use a combination of basic prime number checking methods and optimizations. The function will first handle edge cases such as negative numbers, zero, and one by returning false immediately. For positive numbers, we will implement a simple check using trial division up to the square root of the number. This approach is efficient and suitable for both small and large numbers. The function will be optimized to handle large numbers efficiently by reducing the number of iterations based on the square root of the number being checked.\n", "requirement analysis:\nThe original requirements call for a function that determines if a given number is prime. The function should return true if the number is prime and false otherwise. The requirements include several test cases to demonstrate the expected behavior. The function should be efficient and handle edge cases such as very small numbers and very large numbers.\nrequirement pool:\n- The main code should accurately determine if a number is prime\n- The function should handle edge cases such as numbers less than 2\n- The function should be optimized for performance, especially for large numbers\n- The documentation should be clear and concise, explaining how to use the function\nTo create an efficient and accurate prime number checking algorithm in Python, we will utilize the Sieve of Eratosthenes for optimization, especially for large numbers. This method will help in efficiently marking non-prime numbers, thus enhancing performance. The function will handle edge cases such as numbers less than 2 by immediately returning False. The documentation will be clear and concise, explaining how to use the function and providing examples.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [70, 70, 70, 70, 70, 70, 70, 70, 70, 70], "completion": "from typing import List\n## main.py\n\ndef is_prime(n: int) -> bool:\n    '''Return true if a given number is prime. If the number is not prime, return false.\n    >>> is_prime(6)  # False\n    >>> is_prime(101)  # True\n    >>> is_prime(11)  # True\n    >>> is_prime(13441)  # True\n    >>> is_prime(61)  # True\n    >>> is_prime(4)  # False\n    >>> is_prime(1)  # False\n    '''\n    if n < 2:\n        return False\n    \n    # Implement Sieve of Eratosthenes to mark non-prime numbers\n    sieve = [True] * (n + 1)\n    sieve[0] = sieve[1] = False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if sieve[i]:\n            for j in range(i*i, n + 1, i):\n                sieve[j] = False\n    \n    return sieve[n]\n", "passed": true, "pass": true, "pass_num": 10, "round": 872, "repair_prompt": ["def is_prime(n):\t\n'''Return true if a given number is prime. If the number is not prime, return false.\n>>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    '''"], "mutate_method": "expand_one2two", "parent_index": 139}
