{"task_id": "HumanEval/85", "prompt": "def add(lst):\t\n'''Given a non-empty list of integers lst. sum the even elements located at odd positions..\nExamples:\n        add([4, 2, 6, 7]) ==> 2 \n    '''", "entry_point": "add", "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n", "test": ["def check(add):\n\tassert add([3, 1, 9, 6]) == 6", "def check(add):\n\tassert add([5, 2, 10, 3]) == 2", "def check(add):\n\tassert add([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.", "def check(add):\n\tassert add([6, 92]) == 92", "def check(add):\n\tassert add([6, 88]) == 88", "def check(add):\n\tassert add([6, 3, 6, 11]) == 0", "def check(add):\n\tassert add([2, 1, 10, 12]) == 12", "def check(add):\n\tassert add([8, 1, 9, 9, 1, 124]) == 124", "def check(add):\n\tassert add([3, 10, 9, 8, 1, 122]) == 140", "def check(add):\n\tassert add([1, 1, 5, 4, 3, 124]) == 128", "def check(add):\n\tassert add([6, 3, 8, 2]) == 2", "def check(add):\n\tassert add([5, 4, 2, 12]) == 16", "def check(add):\n\tassert add([4, 86]) == 86", "def check(add):\n\tassert add([9, 89]) == 0", "def check(add):\n\tassert add([7, 89]) == 0", "def check(add):\n\tassert add([7, 8, 2, 8, 5, 119]) == 16", "def check(add):\n\tassert add([1, 87]) == 0", "def check(add):\n\tassert add([4, 4, 1, 8, 6, 125]) == 12", "def check(add):\n\tassert add([2, 4, 11, 8, 6, 123]) == 12", "def check(add):\n\tassert add([6, 4, 6, 3]) == 4", "def check(add):\n\tassert add([9, 93]) == 0", "def check(add):\n\tassert add([9, 87]) == 0", "def check(add):\n\tassert add([4, 0, 6, 7]) == 0", "def check(add):\n\tassert add([9, 3, 8, 2]) == 2", "def check(add):\n\tassert add([8, 7, 5, 6, 2, 127]) == 6", "def check(add):\n\tassert add([3, 8, 5, 4, 4, 121]) == 12", "def check(add):\n\tassert add([5, 5, 9, 9]) == 0", "def check(add):\n\tassert add([4, 5, 6, 7, 2, 122]) == 122", "def check(add):\n\tassert add([6, 3, 1, 6]) == 6", "def check(add):\n\tassert add([7, 1, 8, 12]) == 12", "def check(add):\n\tassert add([3, 87]) == 0", "def check(add):\n\tassert add([5, 9, 1, 3, 6, 125]) == 0", "def check(add):\n\tassert add([8, 83]) == 0", "def check(add):\n\tassert add([4, 1, 8, 6]) == 6", "def check(add):\n\tassert add([5, 3, 5, 12]) == 12", "def check(add):\n\tassert add([5, 5, 5, 9]) == 0", "def check(add):\n\tassert add([6, 4, 9, 12, 1, 122]) == 138", "def check(add):\n\tassert add([7, 88]) == 88", "def check(add):\n\tassert add([4, 8, 9, 6, 2, 121]) == 14", "def check(add):\n\tassert add([3, 88]) == 88", "def check(add):\n\tassert add([5, 8, 10, 8, 7, 117]) == 16", "def check(add):\n\tassert add([5, 2, 5, 6]) == 8", "def check(add):\n\tassert add([3, 3, 11, 8]) == 8", "def check(add):\n\tassert add([1, 9, 11, 10, 3, 118]) == 128", "def check(add):\n\tassert add([5, 85]) == 0", "def check(add):\n\tassert add([4, 84]) == 84", "def check(add):\n\tassert add([2, 85]) == 0", "def check(add):\n\tassert add([9, 3, 9, 2]) == 2", "def check(add):\n\tassert add([8, 5, 8, 3]) == 0", "def check(add):\n\tassert add([7, 5, 1, 11, 4, 120]) == 120", "def check(add):\n\tassert add([2, 10, 1, 5, 1, 127]) == 10", "def check(add):\n\tassert add([7, 2, 10, 5]) == 2", "def check(add):\n\tassert add([8, 2, 2, 8]) == 10", "def check(add):\n\tassert add([4, 5, 10, 9]) == 0", "def check(add):\n\tassert add([9, 91]) == 0", "def check(add):\n\tassert add([6, 3, 9, 12]) == 12", "def check(add):\n\tassert add([4, 88]) == 88", "def check(add):\n\tassert add([2, 3, 1, 11]) == 0", "def check(add):\n\tassert add([8, 84]) == 84", "def check(add):\n\tassert add([6, 9, 7, 8, 2, 124]) == 132", "def check(add):\n\tassert add([2, 84]) == 84", "def check(add):\n\tassert add([8, 91]) == 0", "def check(add):\n\tassert add([9, 90]) == 90", "def check(add):\n\tassert add([2, 2, 3, 6, 7, 123]) == 8", "def check(add):\n\tassert add([9, 6, 11, 5, 4, 120]) == 126", "def check(add):\n\tassert add([6, 85]) == 0", "def check(add):\n\tassert add([8, 1, 8, 4]) == 4", "def check(add):\n\tassert add([6, 91]) == 0", "def check(add):\n\tassert add([5, 91]) == 0", "def check(add):\n\tassert add([5, 5, 4, 12, 5, 120]) == 132", "def check(add):\n\tassert add([7, 90]) == 90", "def check(add):\n\tassert add([6, 4, 7, 6]) == 10", "def check(add):\n\tassert add([9, 10, 4, 10, 2, 120]) == 140", "def check(add):\n\tassert add([8, 85]) == 0", "def check(add):\n\tassert add([6, 7, 5, 4, 7, 117]) == 4", "def check(add):\n\tassert add([7, 1, 1, 7, 7, 123]) == 0", "def check(add):\n\tassert add([1, 7, 3, 5, 6, 126]) == 126", "def check(add):\n\tassert add([2, 9, 5, 12, 6, 127]) == 12", "def check(add):\n\tassert add([9, 9, 11, 10, 6, 121]) == 10", "def check(add):\n\tassert add([7, 2, 9, 2]) == 4", "def check(add):\n\tassert add([6, 90]) == 90", "def check(add):\n\tassert add([1, 4, 7, 6, 5, 127]) == 10", "def check(add):\n\tassert add([8, 3, 8, 7, 4, 120]) == 120", "def check(add):\n\tassert add([7, 3, 4, 12, 5, 119]) == 12", "def check(add):\n\tassert add([2, 4, 6, 2]) == 6", "def check(add):\n\tassert add([5, 92]) == 92", "def check(add):\n\tassert add([4, 3, 3, 4]) == 4", "def check(add):\n\tassert add([7, 5, 9, 12, 6, 120]) == 132", "def check(add):\n\tassert add([1, 5, 7, 10]) == 10", "def check(add):\n\tassert add([2, 5, 1, 6, 3, 122]) == 128", "def check(add):\n\tassert add([2, 1, 11, 5]) == 0", "def check(add):\n\tassert add([3, 10, 4, 10, 4, 118]) == 138", "def check(add):\n\tassert add([5, 5, 6, 9]) == 0", "def check(add):\n\tassert add([7, 5, 4, 9]) == 0", "def check(add):\n\tassert add([9, 4, 9, 11, 2, 127]) == 4"], "test_case_list": ["assert add([3, 1, 9, 6]) == 6", "assert add([5, 2, 10, 3]) == 2", "assert add([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.", "assert add([6, 92]) == 92", "assert add([6, 88]) == 88", "assert add([6, 3, 6, 11]) == 0", "assert add([2, 1, 10, 12]) == 12", "assert add([8, 1, 9, 9, 1, 124]) == 124", "assert add([3, 10, 9, 8, 1, 122]) == 140", "assert add([1, 1, 5, 4, 3, 124]) == 128", "assert add([6, 3, 8, 2]) == 2", "assert add([5, 4, 2, 12]) == 16", "assert add([4, 86]) == 86", "assert add([9, 89]) == 0", "assert add([7, 89]) == 0", "assert add([7, 8, 2, 8, 5, 119]) == 16", "assert add([1, 87]) == 0", "assert add([4, 4, 1, 8, 6, 125]) == 12", "assert add([2, 4, 11, 8, 6, 123]) == 12", "assert add([6, 4, 6, 3]) == 4", "assert add([9, 93]) == 0", "assert add([9, 87]) == 0", "assert add([4, 0, 6, 7]) == 0", "assert add([9, 3, 8, 2]) == 2", "assert add([8, 7, 5, 6, 2, 127]) == 6", "assert add([3, 8, 5, 4, 4, 121]) == 12", "assert add([5, 5, 9, 9]) == 0", "assert add([4, 5, 6, 7, 2, 122]) == 122", "assert add([6, 3, 1, 6]) == 6", "assert add([7, 1, 8, 12]) == 12", "assert add([3, 87]) == 0", "assert add([5, 9, 1, 3, 6, 125]) == 0", "assert add([8, 83]) == 0", "assert add([4, 1, 8, 6]) == 6", "assert add([5, 3, 5, 12]) == 12", "assert add([5, 5, 5, 9]) == 0", "assert add([6, 4, 9, 12, 1, 122]) == 138", "assert add([7, 88]) == 88", "assert add([4, 8, 9, 6, 2, 121]) == 14", "assert add([3, 88]) == 88", "assert add([5, 8, 10, 8, 7, 117]) == 16", "assert add([5, 2, 5, 6]) == 8", "assert add([3, 3, 11, 8]) == 8", "assert add([1, 9, 11, 10, 3, 118]) == 128", "assert add([5, 85]) == 0", "assert add([4, 84]) == 84", "assert add([2, 85]) == 0", "assert add([9, 3, 9, 2]) == 2", "assert add([8, 5, 8, 3]) == 0", "assert add([7, 5, 1, 11, 4, 120]) == 120", "assert add([2, 10, 1, 5, 1, 127]) == 10", "assert add([7, 2, 10, 5]) == 2", "assert add([8, 2, 2, 8]) == 10", "assert add([4, 5, 10, 9]) == 0", "assert add([9, 91]) == 0", "assert add([6, 3, 9, 12]) == 12", "assert add([4, 88]) == 88", "assert add([2, 3, 1, 11]) == 0", "assert add([8, 84]) == 84", "assert add([6, 9, 7, 8, 2, 124]) == 132", "assert add([2, 84]) == 84", "assert add([8, 91]) == 0", "assert add([9, 90]) == 90", "assert add([2, 2, 3, 6, 7, 123]) == 8", "assert add([9, 6, 11, 5, 4, 120]) == 126", "assert add([6, 85]) == 0", "assert add([8, 1, 8, 4]) == 4", "assert add([6, 91]) == 0", "assert add([5, 91]) == 0", "assert add([5, 5, 4, 12, 5, 120]) == 132", "assert add([7, 90]) == 90", "assert add([6, 4, 7, 6]) == 10", "assert add([9, 10, 4, 10, 2, 120]) == 140", "assert add([8, 85]) == 0", "assert add([6, 7, 5, 4, 7, 117]) == 4", "assert add([7, 1, 1, 7, 7, 123]) == 0", "assert add([1, 7, 3, 5, 6, 126]) == 126", "assert add([2, 9, 5, 12, 6, 127]) == 12", "assert add([9, 9, 11, 10, 6, 121]) == 10", "assert add([7, 2, 9, 2]) == 4", "assert add([6, 90]) == 90", "assert add([1, 4, 7, 6, 5, 127]) == 10", "assert add([8, 3, 8, 7, 4, 120]) == 120", "assert add([7, 3, 4, 12, 5, 119]) == 12", "assert add([2, 4, 6, 2]) == 6", "assert add([5, 92]) == 92", "assert add([4, 3, 3, 4]) == 4", "assert add([7, 5, 9, 12, 6, 120]) == 132", "assert add([1, 5, 7, 10]) == 10", "assert add([2, 5, 1, 6, 3, 122]) == 128", "assert add([2, 1, 11, 5]) == 0", "assert add([3, 10, 4, 10, 4, 118]) == 138", "assert add([5, 5, 6, 9]) == 0", "assert add([7, 5, 4, 9]) == 0", "assert add([9, 4, 9, 11, 2, 127]) == 4"], "nl": "Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    ", "func": "def add(lst):", "examples": "Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    ", "completions": ["from typing import List\n## main.py\nfrom typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\n    Sums even elements located at odd positions in a given list of integers.\n    \n    Args:\n        lst (List[int]): A list of integers.\n    \n    Returns:\n        int: The sum of even elements located at odd positions.\n    \"\"\"\n    total_sum = 0\n    for index, value in enumerate(lst):\n        if index % 2 != 0 and value % 2 == 0:\n            total_sum += value\n    return total_sum\n", "from typing import List\nfrom typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\n    Sums even elements located at odd positions in a given list of integers.\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        int: The sum of even elements at odd positions.\n    \"\"\"\n    total_sum = 0\n    for index, value in enumerate(lst):\n        if index % 2 != 0 and value % 2 == 0:\n            total_sum += value\n    return total_sum\n", "from typing import List\nfrom typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\n    This function takes a list of integers and returns the sum of even elements located at odd positions.\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        int: The sum of even elements located at odd positions.\n    \"\"\"\n    sum_even_at_odd_positions = 0\n    \n    for index, value in enumerate(lst):\n        if index % 2 != 0 and value % 2 == 0:\n            sum_even_at_odd_positions += value\n    \n    return sum_even_at_odd_positions\n", "from typing import List\nfrom typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\n    This function takes a list of integers and returns the sum of even elements located at odd positions.\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        int: The sum of even elements located at odd positions.\n    \"\"\"\n    total_sum = 0\n    \n    for index, value in enumerate(lst):\n        if index % 2 != 0 and value % 2 == 0:\n            total_sum += value\n    \n    return total_sum\n", "from typing import List\nfrom typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\n    This function takes a list of integers and returns the sum of even elements located at odd positions.\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        int: The sum of even elements located at odd positions.\n    \"\"\"\n    sum_even_at_odd_positions = 0\n    \n    for index, value in enumerate(lst):\n        if index % 2 != 0 and value % 2 == 0:\n            sum_even_at_odd_positions += value\n    \n    return sum_even_at_odd_positions\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\n    This function takes a list of integers and returns an integer representing the sum of even elements at odd positions.\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        int: The sum of even elements located at odd positions in the list.\n    \"\"\"\n    total_sum = 0\n    for index, value in enumerate(lst):\n        if index % 2 != 0 and value % 2 == 0:\n            total_sum += value\n    return total_sum\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\n    This function takes a list of integers and returns the sum of even elements located at odd positions.\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        int: The sum of even elements located at odd positions.\n    \"\"\"\n    sum_even_at_odd_positions = 0\n    \n    for index, value in enumerate(lst):\n        if index % 2 != 0 and value % 2 == 0:\n            sum_even_at_odd_positions += value\n    \n    return sum_even_at_odd_positions\n", "from typing import List\nfrom typing import List\n\ndef add(lst: List[int]) -> int:\n    '''\n    Given a non-empty list of integers lst, sum the even elements located at odd positions.\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    '''\n    sum_even_at_odd_positions = 0\n    for index, value in enumerate(lst):\n        if index % 2 != 0 and value % 2 == 0:\n            sum_even_at_odd_positions += value\n    return sum_even_at_odd_positions\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\n    This function takes a list of integers and returns an integer.\n    It sums the even elements located at odd positions in the list.\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        int: The sum of even elements at odd positions.\n    \"\"\"\n    total_sum = 0\n    for index, value in enumerate(lst):\n        if index % 2 != 0 and value % 2 == 0:\n            total_sum += value\n    return total_sum\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef add(lst: List[int]) -> int:\n    '''Given a non-empty list of integers lst, sum the even elements located at odd positions.\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    '''\n    if not isinstance(lst, list) or not all(isinstance(x, int) for x in lst):\n        raise ValueError(\"Input must be a non-empty list of integers.\")\n    \n    if len(lst) == 0:\n        raise ValueError(\"Input list must be non-empty.\")\n    \n    total_sum = 0\n    for index, value in enumerate(lst):\n        if index % 2 != 0 and value % 2 == 0:\n            total_sum += value\n    \n    return total_sum\n"], "plans": ["requirement analysis:\nThe original requirement is to sum the even elements located at odd positions in a given list of integers. This is a straightforward task that involves iterating through the list, checking the position and value of each element, and summing the appropriate ones. The requirement is clear and concise, providing a specific example to illustrate the expected output.\nrequirement pool:\n- The main code should correctly implement the function to sum even elements at odd positions.\n- The game should include a user-friendly interface for selecting difficulty levels.\n- The UI should be responsive and visually appealing, with a restart button available upon user loss.\nTo implement the function that sums even elements located at odd positions in a given list of integers, we will use Python's built-in capabilities such as list indexing and iteration. This approach is straightforward and leverages Python's simplicity and readability. The function will iterate through the list, check each element's position and value, and sum the even elements found at odd positions.\n", "requirement analysis:\nThe requirement is to sum the even elements located at odd positions in a given list of integers. This is a straightforward task that involves iterating through the list, checking the position and value of each element, and summing the appropriate values.\nrequirement pool:\n- Implement the function to sum even elements at odd positions\n- Ensure the function works correctly for any non-empty list of integers\n- Optimize the function for efficiency\nWe will implement the function to sum even elements located at odd positions in a given list of integers. This involves iterating through the list, checking the position and value of each element, and summing the appropriate values. We will use Python, a popular programming language known for its simplicity and readability.\n", "requirement analysis:\nThe original requirement is to sum the even elements located at odd positions in a given list of integers. This is a straightforward task that involves iterating through the list, checking the position and value of each element, and summing the appropriate values. The requirement is clear and concise, providing a specific example to illustrate the expected output.\nrequirement pool:\n- The main code should correctly sum the even elements located at odd positions in the list.\n- Implement a function that can handle any non-empty list of integers.\n- Ensure the function returns the correct sum based on the given examples.\n- Include error handling for cases where the input is not a list or is empty.\n- Optimize the function for performance, especially for large lists.\nWe will implement the function to sum the even elements located at odd positions in a given list of integers. This involves iterating through the list, checking each element's position and value, and summing the even elements found at odd positions. We will use Python's built-in functions and avoid unnecessary complexity by leveraging Python's simplicity and readability.\n", "requirement analysis:\nThe original requirements specify a function that takes a list of integers and returns the sum of even elements located at odd positions. This is a straightforward task that involves iterating through the list, checking the position and value of each element, and summing accordingly.\nrequirement pool:\n- The main code should correctly implement the function to sum even elements at odd positions.\n- The game should include a user-friendly interface for selecting difficulty levels.\n- The UI should be responsive and visually appealing, with a clear layout.\nWe will implement the function to sum even elements located at odd positions using a simple and efficient approach. This involves iterating through the list, checking each element's position and value, and summing the even elements found at odd positions.\n", "requirement analysis:\nThe requirement is to sum the even elements located at odd positions in a given list of integers. This is a straightforward task that involves iterating through the list, checking the position and value of each element, and summing the appropriate values.\nrequirement pool:\n- Implement the function to sum even elements at odd positions\n- Ensure the function works correctly for any non-empty list of integers\n- Include error handling for non-integer elements in the list\n- Optimize the function for performance\n- Document the function with examples and edge cases\nWe will implement the function to sum even elements located at odd positions in a given list of integers. This involves iterating through the list, checking the position and value of each element, and summing the appropriate values. We will use Python, a popular programming language known for its simplicity and readability.\n", "requirement analysis:\nThe original requirement is to sum the even elements located at odd positions in a given list of integers. This is a straightforward task that involves iterating through the list, checking the position and value of each element, and summing the appropriate values. The requirement is clear and concise, providing a specific example to illustrate the expected output.\nrequirement pool:\n- The main code should correctly sum the even elements located at odd positions in the list.\n- Implement a function that can handle any non-empty list of integers.\n- Ensure the function is efficient and handles large lists without performance issues.\n- Include error handling to manage cases where the input is not a list or is empty.\n- Provide a simple and clear docstring to explain the function's purpose and usage.\nWe will implement the function to sum the even elements located at odd positions in a given list of integers. This can be achieved by iterating through the list, checking each element's position and value, and summing the even numbers found at odd indices. We will use Python's built-in functions and a simple loop to achieve this efficiently.\n", "requirement analysis:\nThe original requirement is to sum the even elements located at odd positions in a given list of integers. This is a straightforward task that involves iterating through the list, checking the position and value of each element, and summing accordingly. The requirement is clear and concise, providing a specific example to illustrate the expected output.\nrequirement pool:\n- The main code should correctly sum the even elements located at odd positions in the list.\n- Implement a function that can handle any non-empty list of integers.\n- Ensure the function is efficient and handles large lists without performance issues.\n- Include error handling to manage cases where the input is not a list or is empty.\n- Provide a clear and concise docstring to explain the function's purpose and usage.\nTo implement the function that sums the even elements located at odd positions in a list of integers, we will use Python's built-in capabilities. This approach will be efficient and straightforward, leveraging Python's list indexing and iteration.\n", "requirement analysis:\nThe original requirement is to sum the even elements located at odd positions in a given list of integers. This is a straightforward task that involves iterating through the list, checking the position and value of each element, and summing the appropriate ones. The requirement is clear and concise, providing a specific example to illustrate the expected output.\nrequirement pool:\n- The main code should correctly sum the even elements located at odd positions in the list.\n- Implement a function that can handle any non-empty list of integers.\n- Ensure the function is efficient and handles large lists without performance issues.\n- Include error handling to manage cases where the input is not a list or is empty.\n- Provide a simple and clear docstring to explain the function's purpose and usage.\nWe will implement the function using Python, leveraging its built-in capabilities to iterate through lists and check conditions. The function will be designed to handle any non-empty list of integers, summing the even elements located at odd positions. This approach ensures efficiency and simplicity, making it suitable for handling large lists without performance issues.\n", "requirement analysis:\nThe original requirement is to sum the even elements located at odd positions in a given list of integers. This is a straightforward task that involves iterating through the list, checking the position and value of each element, and summing the appropriate values. The requirement is clear and concise, providing a specific example to illustrate the expected output.\nrequirement pool:\n- The main code should correctly sum the even elements located at odd positions in the list.\n- Implement a function that can handle any non-empty list of integers.\n- Ensure the function is efficient and handles large lists without performance issues.\n- Include error handling to manage cases where the input is not a list or is empty.\n- Provide a clear and concise docstring to explain the function's purpose and usage.\nWe will implement the function using Python, leveraging its simplicity and readability. The function will iterate through the list, check each element's position and value, and sum the even elements located at odd positions. We will use basic Python constructs and ensure the function is efficient.\n", "requirement analysis:\nThe original requirement is to sum the even elements located at odd positions in a given list of integers. This is a straightforward task that involves iterating through the list, checking the position and value of each element, and summing the appropriate values. The requirement is clear and concise, providing a specific example to illustrate the expected output.\nrequirement pool:\n- The main code should correctly sum the even elements located at odd positions in the list.\n- Implement a function that can handle any non-empty list of integers.\n- Ensure the function is efficient and handles large lists without performance issues.\n- Include error handling to manage cases where the input is not a list or is empty.\n- Provide a simple and clear docstring to explain the function's purpose and usage.\nWe will implement the function using Python, leveraging its simplicity and readability. The function will iterate through the list, check each element's position and value, and sum the even elements located at odd positions. We will ensure the function is efficient and can handle large lists without performance issues. Error handling will be included to manage cases where the input is not a list or is empty.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [95, 95, 95, 95, 95, 95, 95, 95, 95, 95], "completion": "from typing import List\n## main.py\n\nfrom typing import List\n\ndef add(lst: List[int]) -> int:\n    '''Given a non-empty list of integers lst, sum the even elements located at odd positions.\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    '''\n    if not isinstance(lst, list) or not all(isinstance(x, int) for x in lst):\n        raise ValueError(\"Input must be a non-empty list of integers.\")\n    \n    if len(lst) == 0:\n        raise ValueError(\"Input list must be non-empty.\")\n    \n    total_sum = 0\n    for index, value in enumerate(lst):\n        if index % 2 != 0 and value % 2 == 0:\n            total_sum += value\n    \n    return total_sum\n", "passed": true, "pass": true, "pass_num": 10, "round": 66, "repair_prompt": ["def add(lst):\t\n'''Given a non-empty list of integers lst. sum the even elements located at odd positions..\nExamples:\n        add([4, 2, 6, 7]) ==> 2 \n    '''"], "mutate_method": "rephrase_one", "parent_index": 66}
