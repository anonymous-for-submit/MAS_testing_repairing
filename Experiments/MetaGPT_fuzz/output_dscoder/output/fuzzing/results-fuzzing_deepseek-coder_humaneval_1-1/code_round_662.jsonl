{"task_id": "HumanEval/19", "prompt": "def sort_numbers(numbers: str) -> str:\t\n'''Input is a string of numerals separated by spaces, ranging from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "entry_point": "sort_numbers", "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "test": ["def check(sort_numbers):\n\tassert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one\") == 'one'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four three six\") == 'three four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one six four\") == 'one four six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two\") == 'one two'", "def check(sort_numbers):\n\tassert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four five five one one\") == 'one one four five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four zero two five\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight\") == 'eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six three\") == 'three six'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero\") == 'zero seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four three zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven\") == 'seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six nine three\") == 'three six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one nine three\") == 'one three four nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "def check(sort_numbers):\n\tassert sort_numbers('three five nine') == 'three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three\") == 'zero three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one seven\") == 'one four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six\") == 'six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"four two seven\") == 'two four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three four five\") == 'three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five four zero\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three seven two\") == 'two three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four six four one\") == 'one four four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight six three\") == 'three six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three five\") == 'three five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four\") == 'four'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero four one\") == 'zero one four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine\") == 'nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three\") == 'three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three four zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five\") == 'five'", "def check(sort_numbers):\n\tassert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers('three') == 'three'", "def check(sort_numbers):\n\tassert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six\") == 'six'", "def check(sort_numbers):\n\tassert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five\") == 'five eight'", "def check(sort_numbers):\n\tassert sort_numbers('') == ''", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine nine five\") == 'five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three\") == 'three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero\") == 'zero'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine zero\") == 'zero nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one six two seven\") == 'one two six seven'"], "test_case_list": ["assert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "assert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "assert sort_numbers(\"one\") == 'one'", "assert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "assert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "assert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "assert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "assert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "assert sort_numbers(\"four four three six\") == 'three four four six'", "assert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "assert sort_numbers(\"nine one six four\") == 'one four six nine'", "assert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "assert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "assert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "assert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "assert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "assert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "assert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "assert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "assert sort_numbers(\"one two\") == 'one two'", "assert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "assert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "assert sort_numbers(\"four five five one one\") == 'one one four five five'", "assert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "assert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "assert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "assert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "assert sort_numbers(\"four zero two five\") == 'zero two four five'", "assert sort_numbers(\"eight\") == 'eight'", "assert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "assert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "assert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "assert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "assert sort_numbers(\"six three\") == 'three six'", "assert sort_numbers(\"seven zero\") == 'zero seven'", "assert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "assert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "assert sort_numbers(\"four three zero\") == 'zero three four'", "assert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "assert sort_numbers(\"seven\") == 'seven'", "assert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "assert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "assert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "assert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "assert sort_numbers(\"six nine three\") == 'three six nine'", "assert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "assert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "assert sort_numbers(\"four one nine three\") == 'one three four nine'", "assert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "assert sort_numbers('three five nine') == 'three five nine'", "assert sort_numbers(\"zero three\") == 'zero three'", "assert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "assert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "assert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "assert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "assert sort_numbers(\"four one seven\") == 'one four seven'", "assert sort_numbers(\"seven six\") == 'six seven'", "assert sort_numbers(\"four two seven\") == 'two four seven'", "assert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "assert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "assert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "assert sort_numbers(\"nine three four five\") == 'three four five nine'", "assert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "assert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "assert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "assert sort_numbers(\"two five four zero\") == 'zero two four five'", "assert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "assert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "assert sort_numbers(\"three seven two\") == 'two three seven'", "assert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "assert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "assert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "assert sort_numbers(\"four four six four one\") == 'one four four four six'", "assert sort_numbers(\"eight six three\") == 'three six eight'", "assert sort_numbers(\"five three five\") == 'three five five'", "assert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "assert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "assert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "assert sort_numbers(\"four\") == 'four'", "assert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "assert sort_numbers(\"six zero four one\") == 'zero one four six'", "assert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "assert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "assert sort_numbers(\"nine\") == 'nine'", "assert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "assert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "assert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "assert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "assert sort_numbers(\"three\") == 'three'", "assert sort_numbers(\"three four zero\") == 'zero three four'", "assert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "assert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "assert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "assert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "assert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "assert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "assert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "assert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "assert sort_numbers(\"five\") == 'five'", "assert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "assert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "assert sort_numbers('three') == 'three'", "assert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "assert sort_numbers(\"six\") == 'six'", "assert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "assert sort_numbers(\"eight five\") == 'five eight'", "assert sort_numbers('') == ''", "assert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "assert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "assert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "assert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "assert sort_numbers(\"nine nine five\") == 'five nine nine'", "assert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "assert sort_numbers(\"seven three\") == 'three seven'", "assert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "assert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "assert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "assert sort_numbers(\"zero\") == 'zero'", "assert sort_numbers(\"nine zero\") == 'zero nine'", "assert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "assert sort_numbers(\"one six two seven\") == 'one two six seven'"], "nl": " Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    ", "func": "def sort_numbers(numbers: str) -> str:", "examples": ">>> sort_numbers('three one five')\n    'one three five'\n    ", "completions": ["from typing import List\nfrom num2words import num2words\nfrom words2num import words2num\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A string of numerals represented as words separated by spaces.\n    Output: A string of numerals sorted from smallest to largest, represented as words.\n    '''\n    # Split the input string into a list of words\n    words_list = numbers.split()\n    \n    # Convert the list of words to a list of numbers using words2num\n    numbers_list = [words2num(word) for word in words_list]\n    \n    # Sort the list of numbers\n    numbers_list.sort()\n    \n    # Convert the sorted list of numbers back to a list of words using num2words\n    sorted_words_list = [num2words(num) for num in numbers_list]\n    \n    # Join the list of words into a single string\n    sorted_string = ' '.join(sorted_words_list)\n    \n    return sorted_string\n", "from typing import List\n## main.py\n\nfrom typing import List\nfrom collections import defaultdict\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a string of numerals separated by spaces, ranging from 'zero' to 'nine'. \n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. \n    Return the string with numbers sorted from smallest to largest.\n    '''\n    # Dictionary to map words to their corresponding numbers\n    word_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Dictionary to map numbers back to their corresponding words\n    number_to_word = {v: k for k, v in word_to_number.items()}\n    \n    # Split the input string into words\n    words = numbers.split()\n    \n    # Map words to numbers\n    numbers_list = [word_to_number[word] for word in words]\n    \n    # Sort the numbers\n    numbers_list.sort()\n    \n    # Map sorted numbers back to words\n    sorted_words = [number_to_word[num] for num in numbers_list]\n    \n    # Join the sorted words back into a string\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string\n\n# Example usage:\n# print(sort_numbers(\"one two three four five six seven eight nine zero\"))\n", "from typing import List\n## main.py\n\nimport re\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a string of numerals separated by spaces, ranging from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n    '''\n    # Mapping of words to their corresponding numerical values\n    word_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    number_to_word = {value: key for key, value in word_to_number.items()}\n\n    # Split the input string into individual words\n    words = numbers.split()\n\n    # Convert words to numerical values\n    numerical_values = [word_to_number[word] for word in words]\n\n    # Sort numerical values\n    sorted_numerical_values = sorted(numerical_values)\n\n    # Convert sorted numerical values back to words\n    sorted_words = [number_to_word[value] for value in sorted_numerical_values]\n\n    # Return the sorted words as a string\n    return ' '.join(sorted_words)\n", "from typing import List\nfrom num2words import num2words\nfrom words2num import words2num\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a string of numerals separated by spaces, ranging from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n    '''\n    # Split the input string into individual words\n    words = numbers.split()\n    \n    # Convert each word to its corresponding number\n    numbers_list = [words2num(word) for word in words]\n    \n    # Sort the numbers\n    numbers_list.sort()\n    \n    # Convert the sorted numbers back to words\n    sorted_words = [num2words(num) for num in numbers_list]\n    \n    # Join the sorted words back into a single string\n    sorted_numbers_str = ' '.join(sorted_words)\n    \n    return sorted_numbers_str\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a string of numerals separated by spaces, ranging from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n    '''\n    # Mapping of words to their corresponding numerical values\n    word_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Mapping of numerical values back to their corresponding words\n    number_to_word = {value: key for key, value in word_to_number.items()}\n    \n    # Split the input string into words\n    words = numbers.split()\n    \n    # Map words to their numerical values\n    numerical_values = [word_to_number[word] for word in words]\n    \n    # Sort the numerical values\n    sorted_numerical_values = sorted(numerical_values)\n    \n    # Map sorted numerical values back to words\n    sorted_words = [number_to_word[value] for value in sorted_numerical_values]\n    \n    # Join the sorted words into a single string\n    return ' '.join(sorted_words)\n", "from typing import List\n## main.py\nimport nltk\nfrom typing import List\n\n# Ensure that the necessary words are downloaded for nltk\nnltk.download('words')\nfrom nltk.corpus import words\n\n# Create a set of known words for validation\nword_set = set(words.words())\n\n# Define a mapping from word numerals to their corresponding numerical values\nnumeral_to_number = {\n    'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n    'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n}\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A string of numerals represented as words separated by spaces.\n    Output: A string of numbers sorted from smallest to largest.\n    '''\n    # Split the input string into individual words\n    words_list = numbers.split()\n    \n    # Validate each word and map it to its numerical value\n    number_list = []\n    for word in words_list:\n        if word in word_set and word in numeral_to_number:\n            number_list.append(numeral_to_number[word])\n        else:\n            raise ValueError(f\"Invalid word in input: {word}\")\n    \n    # Sort the numerical values\n    number_list.sort()\n    \n    # Map the sorted numerical values back to words more efficiently\n    number_to_numeral = {value: key for key, value in numeral_to_number.items()}\n    sorted_words = [number_to_numeral[num] for num in number_list]\n    \n    # Join the sorted words into a single string\n    return ' '.join(sorted_words)\n\n# Example usage:\n# print(sort_numbers(\"two three one\"))  # Output: \"one three two\"\n", "from typing import List\n## main.py\n\nimport re\nfrom num2words import num2words\nfrom words2num import words2num\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a string of numerals separated by spaces, ranging from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n    '''\n    # Split the input string into individual words\n    words = re.findall(r'\\b\\w+\\b', numbers)\n    \n    # Convert words to numbers using words2num\n    numbers_list = []\n    for word in words:\n        num = words2num(word)\n        if isinstance(num, int) or isinstance(num, float):\n            numbers_list.append(num)\n    \n    # Sort the numbers\n    numbers_list.sort()\n    \n    # Convert sorted numbers back to words using num2words\n    sorted_words = []\n    for num in numbers_list:\n        word = num2words(num)\n        sorted_words.append(word)\n    \n    # Join the sorted words back into a string\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string\n\n# Example usage:\n# sorted_result = sort_numbers(\"three one five nine seven\")\n# print(sorted_result)  # Output: \"one three five seven nine\"\n", "from typing import List\nimport nltk\nfrom typing import List\n\n# Ensure that the necessary NLTK data is downloaded\nnltk.download('averaged_perceptron_tagger')\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a string of numerals separated by spaces, ranging from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n    '''\n    \n    # Define a mapping from words to their corresponding numerical values\n    word_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into words\n    words = numbers.split()\n    \n    # Map each word to its corresponding numerical value\n    numbers_list = [word_to_number[word] for word in words]\n    \n    # Sort the numerical values\n    numbers_list.sort()\n    \n    # Convert the sorted numerical values back to words\n    sorted_words = [list(word_to_number.keys())[list(word_to_number.values()).index(num)] for num in numbers_list]\n    \n    # Join the sorted words back into a single string\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string\n\n# Example usage\nif __name__ == \"__main__\":\n    input_string = \"three one five nine eight\"\n    sorted_output = sort_numbers(input_string)\n    print(sorted_output)  # Output: \"one three five eight nine\"\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A string of numerals represented as words separated by spaces.\n    Output: A string of numbers sorted in ascending order, also represented as words.\n    '''\n    # Mapping of words to their corresponding numerical values\n    word_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Mapping of numerical values back to words\n    number_to_word = {value: key for key, value in word_to_number.items()}\n    \n    # Split the input string into words\n    words = numbers.split()\n    \n    # Map the words to their corresponding numerical values\n    numbers_list = [word_to_number[word] for word in words]\n    \n    # Sort the numerical values\n    numbers_list.sort()\n    \n    # Map the sorted numerical values back to words\n    sorted_words = [number_to_word[num] for num in numbers_list]\n    \n    # Join the sorted words into a single string\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A string of numerals separated by spaces, ranging from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Output: A string with numbers sorted from smallest to largest, with each number separated by a space.\n    '''\n    # Mapping of words to their corresponding numerical values\n    word_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into words\n    words = numbers.split()\n    \n    # Convert words to their corresponding numerical values\n    numbers_list = [word_to_number[word] for word in words]\n    \n    # Sort the numerical values\n    numbers_list.sort()\n    \n    # Convert sorted numerical values back to words\n    sorted_words = [list(word_to_number.keys())[list(word_to_number.values()).index(num)] for num in numbers_list]\n    \n    # Join the sorted words into a single string\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string\n"], "plans": ["requirement analysis:\nThe requirement is to sort a string of numerals represented as words from 'zero' to 'nine'. This requires understanding the mapping of words to numbers and then sorting these numbers. The output should be a string of numbers sorted in ascending order.\nrequirement pool:\n- Implement the function to convert words to numbers and sort them\n- Ensure the function handles input correctly and outputs the sorted numbers as a string\n- Test the function with various inputs to ensure accuracy\nTo implement the function that sorts a string of numerals represented as words from 'zero' to 'nine', we will use Python's built-in capabilities along with the 'num2words' and 'words2num' libraries. These libraries will help in converting between numeric values and their word representations. The function will first convert the input string of words into a list of numbers, sort this list, and then convert it back to a string of sorted words.\n", "requirement analysis:\nThe requirement is to sort a string of numerals represented as words from 'zero' to 'nine'. The output should be a string of numbers sorted in ascending order. This is a straightforward task that involves mapping the words to their corresponding numerical values, sorting these values, and then mapping them back to words in the sorted order.\nrequirement pool:\n- Implement the function to convert words to numbers and vice versa.\n- Sort the numbers based on their word representations.\n- Ensure the function returns a string with numbers sorted from smallest to largest.\n- Add user interface elements for difficulty level selection.\n- Include a score display and restart button functionality.\nWe will use Python's built-in capabilities along with the `collections` module to create a function that maps words to numbers and vice versa. This will involve defining a dictionary for the mapping. After mapping, we will sort the numbers and then map them back to words to return the sorted string.\n", "requirement analysis:\nThe requirement is to sort a string of numerals represented as words from 'zero' to 'nine'. The output should be a string of numbers sorted in ascending order. This is a straightforward task that involves mapping the words to their corresponding numerical values, sorting these values, and then mapping them back to words in the sorted order.\nrequirement pool:\n- Implement the function to sort numbers represented as words\n- Ensure the function handles input correctly\n- Ensure the function outputs the numbers in the correct order\n- Add error handling for invalid inputs\n- Optimize the function for performance\nWe will implement the function to sort numbers represented as words by first creating a mapping of words to their corresponding numerical values. Then, we will split the input string into individual words, convert them to their numerical values, sort these values, and finally convert them back to words in the sorted order. This approach ensures that the function handles the input correctly and outputs the numbers in the correct order.\n", "requirement analysis:\nThe requirement is to sort a string of numerals separated by spaces, where each numeral is represented by a word from 'zero' to 'nine'. This requires converting the words to their corresponding numerical values, sorting them, and then converting them back to words for the output.\nrequirement pool:\n- Implement the function to convert words to numbers and vice versa.\n- Ensure the function can handle the input string and return the sorted output string.\n- Design a user-friendly interface for easy selection of numerals.\n- Include a feature to display the sorted numerals in a visually appealing manner.\n- Optimize the application for mobile devices to enhance accessibility.\nTo implement the function that sorts a string of numerals separated by spaces, where each numeral is represented by a word from 'zero' to 'nine', we will use Python's built-in capabilities and the `num2words` and `words2num` libraries. These libraries will help in converting between words and numbers. The function will parse the input string, convert each word to its corresponding number, sort the numbers, and then convert them back to words for the output.\n", "requirement analysis:\nThe requirement is to sort a string of numerals represented in words. The input is a string of words from 'zero' to 'nine', and the output should be a string of these numbers sorted from smallest to largest. This requires a clear mapping of words to numbers, sorting of these numbers, and then converting them back to words for the output.\nrequirement pool:\n- Implement a function to map words to their corresponding numerical values.\n- Develop a function to sort the numerical values.\n- Create a function to map the sorted numerical values back to words.\n- Ensure the application handles various formats of input strings.\n- Design a user-friendly interface for easy input and output.\nTo implement the function, we will use Python's built-in capabilities along with the `sorted` function for sorting and a dictionary for mapping words to their corresponding numerical values. This approach is efficient and leverages Python's simplicity and readability.\n", "requirement analysis:\nThe requirement is to sort a string of numerals represented as words from 'zero' to 'nine'. The output should be a string of numbers sorted in ascending order. This is a straightforward task that involves mapping the words to their corresponding numerical values, sorting these values, and then mapping them back to words in the correct order.\nrequirement pool:\n- Implement the function to sort numbers represented as words\n- Ensure the function can handle input strings with varying spaces between numbers\n- Design a user-friendly interface for easy input and output display\n- Include error handling for invalid inputs\n- Optimize the function for performance and efficiency\nTo implement the function that sorts numbers represented as words from 'zero' to 'nine', we will use Python's built-in capabilities along with the `nltk` library for natural language processing. The function will map the word representations to their corresponding numerical values, sort these values, and then map them back to words in ascending order.\n", "requirement analysis:\nThe requirement is to sort a string of numerals separated by spaces, where each numeral is represented by a word from 'zero' to 'nine'. This requires converting these words into their numerical equivalents, sorting them, and then converting them back to words for the output.\nrequirement pool:\n- Implement the function to convert words to numbers and vice versa.\n- Ensure the function sorts the numbers correctly.\n- Implement the function to convert numbers back to words for the output.\n- Add user input for difficulty levels.\n- Include a restart button functionality.\nTo implement the function that sorts a string of numerals represented by words, we will use Python's built-in capabilities along with the `num2words` and `words2num` libraries for converting between words and numbers. This approach ensures simplicity and leverages well-tested libraries for handling the conversion tasks.\n", "requirement analysis:\nThe requirement is to sort a string of numerals separated by spaces, where each numeral is represented by a word from 'zero' to 'nine'. The output should be a string with these numbers sorted from smallest to largest.\nrequirement pool:\n- Implement the function to correctly parse the input string and map words to their corresponding numerical values.\n- Sort the numerical values extracted from the input string.\n- Return the sorted numerical values as a string, with each number separated by a space.\n- Ensure the function handles any valid input, including different combinations of numbers.\n- Optimize the function for performance, especially for large inputs.\nTo implement the function that sorts a string of numerals separated by spaces, where each numeral is represented by a word from 'zero' to 'nine', we will use Python's built-in capabilities and the `nltk` library for part-of-speech tagging to map words to their corresponding numerical values. This approach ensures accurate parsing and mapping. We will then sort the numerical values extracted from the input string and return them as a string, with each number separated by a space.\n", "requirement analysis:\nThe requirement is to sort a string of numerals represented as words from 'zero' to 'nine'. The output should be a string of numbers sorted in ascending order. This is a straightforward task that involves mapping the words to their corresponding numerical values, sorting these values, and then mapping them back to words in the correct order.\nrequirement pool:\n- Implement the function to convert words to numbers and vice versa.\n- Ensure the function can handle the input string and return the sorted output.\n- Design the function to be user-friendly and efficient.\n- Include error handling for invalid inputs.\nTo implement the function that sorts a string of numerals represented as words from 'zero' to 'nine', we will use Python's built-in capabilities along with a dictionary for mapping words to their corresponding numerical values. This approach will ensure simplicity and efficiency. We will also handle potential errors gracefully to ensure robust functionality.\n", "requirement analysis:\nThe requirement is to sort a string of numerals separated by spaces, where each numeral is represented as a word from 'zero' to 'nine'. The output should be a string with these numbers sorted from smallest to largest.\nrequirement pool:\n- Implement the function to correctly parse the input string and map words to their corresponding numerical values.\n- Sort the numerical values extracted from the input string.\n- Return the sorted numerical values as a string, with each number separated by a space.\n- Ensure the function handles any valid input, including different combinations of numbers.\n- Optimize the function for performance, especially for longer input strings.\nTo implement the function that sorts a string of numerals separated by spaces, where each numeral is represented as a word from 'zero' to 'nine', we will use Python's built-in capabilities for string manipulation and a predefined mapping of words to their corresponding numerical values. This approach ensures simplicity and efficiency.\n"], "scores": [0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0], "pass_results": [false, true, true, false, true, false, false, false, true, true], "pass_test_cases_num": [0, 121, 121, 0, 121, 0, 0, 0, 121, 121], "completion": "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A string of numerals separated by spaces, ranging from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Output: A string with numbers sorted from smallest to largest, with each number separated by a space.\n    '''\n    # Mapping of words to their corresponding numerical values\n    word_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into words\n    words = numbers.split()\n    \n    # Convert words to their corresponding numerical values\n    numbers_list = [word_to_number[word] for word in words]\n    \n    # Sort the numerical values\n    numbers_list.sort()\n    \n    # Convert sorted numerical values back to words\n    sorted_words = [list(word_to_number.keys())[list(word_to_number.values()).index(num)] for num in numbers_list]\n    \n    # Join the sorted words into a single string\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string\n", "passed": true, "pass": true, "pass_num": 5, "round": 662, "repair_prompt": ["def sort_numbers(numbers: str) -> str:\t\n'''Input is a string of numerals separated by spaces, ranging from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''"], "mutate_method": "rephrase_one", "parent_index": 296}
