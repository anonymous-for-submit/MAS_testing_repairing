{"task_id": "HumanEval/19", "prompt": "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest. Ensure to handle the input efficiently even if it is very long.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "entry_point": "sort_numbers", "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "test": ["def check(sort_numbers):\n\tassert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one\") == 'one'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four three six\") == 'three four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one six four\") == 'one four six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two\") == 'one two'", "def check(sort_numbers):\n\tassert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four five five one one\") == 'one one four five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four zero two five\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight\") == 'eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six three\") == 'three six'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero\") == 'zero seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four three zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven\") == 'seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six nine three\") == 'three six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one nine three\") == 'one three four nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "def check(sort_numbers):\n\tassert sort_numbers('three five nine') == 'three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three\") == 'zero three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one seven\") == 'one four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six\") == 'six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"four two seven\") == 'two four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three four five\") == 'three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five four zero\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three seven two\") == 'two three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four six four one\") == 'one four four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight six three\") == 'three six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three five\") == 'three five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four\") == 'four'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero four one\") == 'zero one four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine\") == 'nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three\") == 'three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three four zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five\") == 'five'", "def check(sort_numbers):\n\tassert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers('three') == 'three'", "def check(sort_numbers):\n\tassert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six\") == 'six'", "def check(sort_numbers):\n\tassert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five\") == 'five eight'", "def check(sort_numbers):\n\tassert sort_numbers('') == ''", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine nine five\") == 'five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three\") == 'three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero\") == 'zero'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine zero\") == 'zero nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one six two seven\") == 'one two six seven'"], "test_case_list": ["assert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "assert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "assert sort_numbers(\"one\") == 'one'", "assert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "assert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "assert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "assert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "assert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "assert sort_numbers(\"four four three six\") == 'three four four six'", "assert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "assert sort_numbers(\"nine one six four\") == 'one four six nine'", "assert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "assert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "assert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "assert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "assert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "assert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "assert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "assert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "assert sort_numbers(\"one two\") == 'one two'", "assert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "assert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "assert sort_numbers(\"four five five one one\") == 'one one four five five'", "assert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "assert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "assert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "assert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "assert sort_numbers(\"four zero two five\") == 'zero two four five'", "assert sort_numbers(\"eight\") == 'eight'", "assert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "assert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "assert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "assert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "assert sort_numbers(\"six three\") == 'three six'", "assert sort_numbers(\"seven zero\") == 'zero seven'", "assert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "assert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "assert sort_numbers(\"four three zero\") == 'zero three four'", "assert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "assert sort_numbers(\"seven\") == 'seven'", "assert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "assert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "assert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "assert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "assert sort_numbers(\"six nine three\") == 'three six nine'", "assert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "assert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "assert sort_numbers(\"four one nine three\") == 'one three four nine'", "assert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "assert sort_numbers('three five nine') == 'three five nine'", "assert sort_numbers(\"zero three\") == 'zero three'", "assert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "assert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "assert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "assert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "assert sort_numbers(\"four one seven\") == 'one four seven'", "assert sort_numbers(\"seven six\") == 'six seven'", "assert sort_numbers(\"four two seven\") == 'two four seven'", "assert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "assert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "assert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "assert sort_numbers(\"nine three four five\") == 'three four five nine'", "assert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "assert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "assert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "assert sort_numbers(\"two five four zero\") == 'zero two four five'", "assert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "assert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "assert sort_numbers(\"three seven two\") == 'two three seven'", "assert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "assert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "assert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "assert sort_numbers(\"four four six four one\") == 'one four four four six'", "assert sort_numbers(\"eight six three\") == 'three six eight'", "assert sort_numbers(\"five three five\") == 'three five five'", "assert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "assert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "assert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "assert sort_numbers(\"four\") == 'four'", "assert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "assert sort_numbers(\"six zero four one\") == 'zero one four six'", "assert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "assert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "assert sort_numbers(\"nine\") == 'nine'", "assert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "assert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "assert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "assert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "assert sort_numbers(\"three\") == 'three'", "assert sort_numbers(\"three four zero\") == 'zero three four'", "assert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "assert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "assert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "assert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "assert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "assert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "assert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "assert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "assert sort_numbers(\"five\") == 'five'", "assert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "assert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "assert sort_numbers('three') == 'three'", "assert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "assert sort_numbers(\"six\") == 'six'", "assert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "assert sort_numbers(\"eight five\") == 'five eight'", "assert sort_numbers('') == ''", "assert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "assert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "assert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "assert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "assert sort_numbers(\"nine nine five\") == 'five nine nine'", "assert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "assert sort_numbers(\"seven three\") == 'three seven'", "assert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "assert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "assert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "assert sort_numbers(\"zero\") == 'zero'", "assert sort_numbers(\"nine zero\") == 'zero nine'", "assert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "assert sort_numbers(\"one six two seven\") == 'one two six seven'"], "nl": " Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    ", "func": "def sort_numbers(numbers: str) -> str:", "examples": ">>> sort_numbers('three one five')\n    'one three five'\n    ", "completions": ["from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-delimited string of numerals from 'zero' to 'nine'.\n    Output: A space-delimited string of numerals sorted from smallest to largest.\n    '''\n    # Dictionary to map words to their corresponding integer values\n    word_to_digit = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Split the input string into a list of words\n    words = numbers.split()\n    \n    # Convert words to their corresponding integer values\n    digits = [word_to_digit[word] for word in words]\n    \n    # Sort the list of integers\n    sorted_digits = sorted(digits)\n    \n    # Convert the sorted list back to a space-delimited string\n    sorted_numbers = ' '.join(str(digit) for digit in sorted_digits)\n    \n    return sorted_numbers\n", "from typing import List\n## main.py\n\nimport re\nfrom enum import Enum\n\nclass Number(Enum):\n    ZERO = 0\n    ONE = 1\n    TWO = 2\n    THREE = 3\n    FOUR = 4\n    FIVE = 5\n    SIX = 6\n    SEVEN = 7\n    EIGHT = 8\n    NINE = 9\n\ndef word_to_number(word: str) -> int:\n    \"\"\"\n    Converts a word representation of a number to its corresponding numerical value.\n    \"\"\"\n    return Number[word.upper()].value\n\ndef number_to_word(number: int) -> str:\n    \"\"\"\n    Converts a numerical value to its corresponding word representation.\n    \"\"\"\n    for name, member in Number.__members__.items():\n        if member.value == number:\n            return name.lower()\n    raise ValueError(f\"No word representation for number: {number}\")\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input: A space-delimited string of numerals from 'zero' to 'nine'.\n    Output: A string with numbers sorted from smallest to largest.\n    \"\"\"\n    # Split the input string into words\n    words = numbers.split()\n    \n    # Convert words to numbers\n    numbers_list = [word_to_number(word) for word in words]\n    \n    # Sort the numbers\n    numbers_list.sort()\n    \n    # Convert sorted numbers back to words\n    sorted_words = [number_to_word(number) for number in numbers_list]\n    \n    # Join the sorted words into a single string\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string\n\n# Example usage:\n# print(sort_numbers(\"two three zero one five\"))  # Output: \"zero one two three five\"\n", "from typing import List\n## main.py\n\nfrom typing import List\nfrom enum import Enum\n\nclass Numerals(Enum):\n    zero = 0\n    one = 1\n    two = 2\n    three = 3\n    four = 4\n    five = 5\n    six = 6\n    seven = 7\n    eight = 8\n    nine = 9\n\ndef sort_numbers(numbers: str) -> str:\n    # Convert input string to list of numerical values\n    num_list: List[int] = []\n    for num_str in numbers.split(' '):\n        num_list.append(getattr(Numerals, num_str).value)\n\n    # Sort the list of numerical values\n    sorted_num_list = sorted(num_list)\n\n    # Convert sorted numerical values back to string representations\n    sorted_str_list: List[str] = []\n    for num in sorted_num_list:\n        for numeral in Numerals:  # type: Numerals\n            if numeral.value == num:\n                sorted_str_list.append(numeral.name)\n                break\n\n    return ' '.join(sorted_str_list)\n", "from typing import List\n## main.py\n\nimport re\n\ndef is_valid_numerals(numbers: str) -> bool:\n    numerals = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    return all(numeral in numerals for numeral in numbers.split())\n\ndef sort_numbers(numbers: str) -> str:\n    if not is_valid_numerals(numbers):\n        raise ValueError(\"Input must be a space-delimited string of numerals from 'zero' to 'nine'.\")\n    \n    numeral_to_int = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    int_to_numeral = {value: key for key, value in numeral_to_int.items()}\n    \n    numerals = numbers.split()\n    \n    int_values = [numeral_to_int[numeral] for numeral in numerals]\n    \n    sorted_int_values = sorted(int_values)\n    \n    sorted_numerals = [int_to_numeral[value] for value in sorted_int_values]\n    \n    return ' '.join(sorted_numerals)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-delimited string of numerals from 'zero' to 'nine'.\n    Output: A string with numbers sorted from smallest to largest.\n    '''\n    # Mapping of words to their corresponding numerical values\n    word_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Mapping of numerical values back to their corresponding words\n    number_to_word = {value: key for key, value in word_to_number.items()}\n    \n    # Split the input string into words\n    words = numbers.split()\n    \n    # Convert words to their corresponding numerical values\n    numerical_values = [word_to_number[word] for word in words]\n    \n    # Sort the numerical values\n    sorted_numerical_values = sorted(numerical_values)\n    \n    # Convert sorted numerical values back to words\n    sorted_words = [number_to_word[value] for value in sorted_numerical_values]\n    \n    # Join the sorted words into a single string\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-delimited string of numerals from 'zero' to 'nine'.\n    Output: A space-delimited string of numerals sorted from smallest to largest.\n    '''\n    # Mapping from word to its corresponding integer value\n    word_to_num = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into a list of words\n    num_words = numbers.split()\n    \n    # Convert words to their corresponding integers\n    num_integers = [word_to_num[num_word] for num_word in num_words]\n    \n    # Sort the list of integers\n    sorted_num_integers = sorted(num_integers)\n    \n    # Convert sorted integers back to a space-delimited string\n    sorted_num_words = [str(num) for num in sorted_num_integers]\n    \n    # Join the sorted integers back into a space-delimited string\n    sorted_numbers = ' '.join(sorted_num_words)\n    \n    return sorted_numbers\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-delimited string of numerals from 'zero' to 'nine'.\n    Output: A space-delimited string of numerals sorted from smallest to largest.\n    '''\n    # Mapping of number words to their corresponding numerical values\n    number_to_value = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Mapping of numerical values to their corresponding number words\n    value_to_number = {value: word for word, value in number_to_value.items()}\n    \n    # Split the input string into a list of number words\n    number_words = numbers.split()\n    \n    # Convert the number words to their corresponding numerical values\n    numerical_values = [number_to_value[word] for word in number_words]\n    \n    # Sort the numerical values\n    sorted_values = sorted(numerical_values)\n    \n    # Convert the sorted numerical values back to their corresponding number words\n    sorted_numbers = [value_to_number[value] for value in sorted_values]\n    \n    # Join the sorted number words into a space-delimited string\n    return ' '.join(sorted_numbers)\n\n# Example usage:\n# print(sort_numbers(\"three one five\"))  # Output: \"one three five\"\n", "from typing import List\n## main.py\n\nimport re\nfrom num2words import num2words\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-delimited string of numerals from 'zero' to 'nine'.\n    Output: A string with numbers sorted from smallest to largest.\n    '''\n    \n    # Convert the input string to a list of numbers\n    words = numbers.split()\n    number_list = []\n    \n    # Convert each word to its corresponding number\n    for word in words:\n        try:\n            number = num2words(word, to='cardinal')\n            number_list.append(int(number))\n        except ValueError:\n            raise ValueError(f\"Invalid number word: {word}\")\n    \n    # Sort the numbers\n    number_list.sort()\n    \n    # Convert the sorted numbers back to words\n    sorted_words = [num2words(num, to='cardinal') for num in number_list]\n    \n    # Join the sorted words into a single string\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string\n\n# Example usage:\n# print(sort_numbers(\"two three one\"))  # Output: \"one two three\"\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-delimited string of numerals from 'zero' to 'nine'.\n    Output: A string with numbers sorted from smallest to largest.\n    '''\n    # Mapping of numerals to their corresponding numerical values\n    numeral_to_value = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Mapping of numerical values to their corresponding numerals\n    value_to_numeral = {value: numeral for numeral, value in numeral_to_value.items()}\n    \n    # Split the input string into a list of numerals\n    numerals = numbers.split()\n    \n    # Map the numerals to their corresponding numerical values\n    values = [numeral_to_value[numeral] for numeral in numerals]\n    \n    # Sort the numerical values\n    values.sort()\n    \n    # Map the sorted numerical values back to their string representation\n    sorted_numerals = [value_to_numeral[value] for value in values]\n    \n    # Join the sorted numerals into a single string\n    sorted_string = ' '.join(sorted_numerals)\n    \n    return sorted_string\n", "from typing import List\nfrom num2words import num2words\nfrom words2num import words2num\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-delimited string of numerals from 'zero' to 'nine'.\n    Output: A string with numbers sorted from smallest to largest.\n    '''\n    # Split the input string into a list of numerals\n    num_list = numbers.split()\n    \n    # Convert each numeral word to its corresponding number\n    num_list = [words2num(num) for num in num_list]\n    \n    # Sort the list of numbers\n    num_list.sort()\n    \n    # Convert the sorted numbers back to words\n    sorted_words = [num2words(num) for num in num_list]\n    \n    # Join the sorted words into a single string\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string\n"], "plans": ["requirement analysis:\nThe requirement is to sort a space-delimited string of numerals from 'zero' to 'nine'. This needs to be done efficiently, even for very long strings. The input is a string, and the output should also be a string. The function should handle all valid numerals and ensure the output is sorted from smallest to largest.\nrequirement pool:\n- Implement a function to sort the numbers correctly.\n- Ensure the function can handle large inputs efficiently.\n- Develop a user-friendly interface for input and output.\n- Include error handling for invalid inputs.\n- Optimize the algorithm for performance.\nTo implement the function efficiently, we will use Python's built-in sorting capabilities, which are optimized and well-suited for handling large datasets. The function will convert the input string into a list of integers, sort them, and then convert the sorted list back into a space-delimited string.\n", "requirement analysis:\nThe requirement is to sort a space-delimited string of numerals from 'zero' to 'nine'. This requires mapping the string to numerical values, sorting them, and then mapping them back to their corresponding string representations. The efficiency of the solution is crucial, especially for long input strings.\nrequirement pool:\n- Implement a function to convert the string representations of numbers to their numerical equivalents.\n- Sort the numerical values efficiently.\n- Convert the sorted numerical values back to their string representations.\n- Ensure the function can handle large inputs without significant performance degradation.\n- Provide clear and concise documentation for the function.\nTo implement the function efficiently, we will use Python's built-in capabilities along with the 'enum' module for mapping string representations to numerical values. The function will parse the input string, convert each word to its corresponding numerical value, sort these values, and then convert them back to their string representations before returning the result.\n", "requirement analysis:\nThe requirement is to sort a space-delimited string of numerals from 'zero' to 'nine'. This requires mapping the string to numerical values, sorting them, and then mapping them back to their corresponding string representations. The efficiency of the solution is crucial, especially for long input strings.\nrequirement pool:\n- Implement a function to convert the string of numerals to numerical values.\n- Sort the numerical values.\n- Convert the sorted numerical values back to their string representations.\n- Ensure the function can handle large inputs efficiently.\n- Include error handling for invalid inputs.\nTo implement the function efficiently, we will use Python's built-in capabilities along with the 'enum' module for mapping string numerals to their corresponding numerical values. This approach will ensure clarity and simplicity in the conversion processes. We will also use the 'sorted' function for sorting the numerical values, which is optimized for performance in Python.\n", "requirement analysis:\nThe requirement is to sort a space-delimited string of numerals from 'zero' to 'nine'. This requires mapping the string to numerical values, sorting them, and then mapping them back to their corresponding string representation. The function should handle large inputs efficiently to ensure usability.\nrequirement pool:\n- Implement a function to convert the string of numerals to numerical values.\n- Sort the numerical values in ascending order.\n- Convert the sorted numerical values back to their corresponding string representation.\n- Ensure the function can handle large inputs without performance issues.\n- Provide clear and concise documentation for the function.\nTo implement the function efficiently, we will use Python's built-in capabilities for handling strings and lists. We will map the string numerals to their corresponding integer values, sort these values, and then map them back to their string representations. This approach ensures simplicity and efficiency, making it suitable for handling large inputs.\n", "requirement analysis:\nThe requirement is to sort a space-delimited string of numerals from 'zero' to 'nine'. This requires mapping the string to numerical values, sorting them, and then mapping them back to their corresponding words. The efficiency of the solution is crucial, especially for long input strings.\nrequirement pool:\n- Implement a function to map words to their corresponding numerical values.\n- Develop a sorting algorithm that can handle the input efficiently.\n- Ensure the application is user-friendly and can handle various input lengths.\n- Include error handling for invalid inputs.\nTo implement the function `sort_numbers` efficiently, we will use Python's built-in capabilities along with a dictionary for mapping words to their numerical values. The function will parse the input string, convert each word to its corresponding number, sort the numbers, and then convert them back to words before returning the result.\n", "requirement analysis:\nThe requirement is to sort a space-delimited string of numerals from 'zero' to 'nine'. The input is a string, and the output should also be a string. The function should handle the input efficiently, even for very long strings. The solution should be clear and easy to understand, ensuring that the user can input a string and get the sorted numbers as output.\nrequirement pool:\n- Implement a function to sort the numbers correctly.\n- Ensure the function can handle large inputs efficiently.\n- Develop a user-friendly interface for input and output.\n- Include error handling for invalid inputs.\n- Optimize the performance for large datasets.\nTo implement the function efficiently, we will use Python's built-in data structures and functions. The function will convert the input string into a list of integers, sort the list, and then convert it back into a space-delimited string. This approach ensures that the function can handle large datasets efficiently by leveraging Python's efficient list operations.\n", "requirement analysis:\nThe requirement is to sort a space-delimited string of numerals from 'zero' to 'nine'. This requires mapping the string to numerical values, sorting them, and then mapping them back to their corresponding string representation. The efficiency of the solution is crucial, especially for long input strings.\nrequirement pool:\n- Implement a function to convert the string representation of numbers to their numerical values.\n- Sort the numerical values.\n- Convert the sorted numerical values back to their string representation.\n- Ensure the function can handle large inputs efficiently.\n- Include error handling for invalid inputs.\nWe will use Python's built-in capabilities to handle the conversion and sorting of the input string. We will map the string representations of numbers to their corresponding numerical values, sort these values, and then map them back to their string representations. This approach will be efficient and suitable for handling large inputs due to Python's efficient handling of data structures.\n", "requirement analysis:\nThe requirement is to sort a space-delimited string of numerals from 'zero' to 'nine'. The input is a string where each number is represented by its word form. The output should be a string with these numbers sorted in ascending order. The function should handle large inputs efficiently to ensure it can process even very long strings without performance issues.\nrequirement pool:\n- Implement a function to convert words to numbers and vice versa.\n- Create a sorting mechanism that can handle the input efficiently.\n- Ensure the function can handle any length of input string.\n- Optimize the sorting algorithm for performance.\n- Include error handling for invalid inputs.\nTo implement the function `sort_numbers` efficiently, we will use Python's built-in capabilities along with the `num2words` and `words` libraries for converting between numbers and words. The function will parse the input string, convert each word to its corresponding number, sort the numbers, and then convert them back to words before returning the sorted string.\n", "requirement analysis:\nThe requirement is to sort a space-delimited string of numerals from 'zero' to 'nine'. This requires mapping the string to numerical values, sorting them, and then mapping them back to their corresponding string representation. The efficiency of the solution is crucial, especially for long input strings.\nrequirement pool:\n- Implement a function to convert the string representation of numbers to their numerical values.\n- Sort the numerical values efficiently.\n- Convert the sorted numerical values back to their string representation.\n- Ensure the function can handle large inputs without significant performance degradation.\n- Provide clear and concise documentation for the function.\nTo implement the function efficiently, we will use Python's built-in capabilities along with a dictionary for mapping string representations to numerical values and vice versa. This approach will ensure that the function can handle large inputs effectively.\n", "requirement analysis:\nThe requirement is to sort a space-delimited string of numerals from 'zero' to 'nine'. This requires mapping the string to numerical values, sorting them, and then mapping them back to their corresponding words. The function should handle large inputs efficiently to ensure usability even with extensive data.\nrequirement pool:\n- Implement a function to map words to numbers and vice versa.\n- Develop a sorting algorithm that can handle the conversion and sorting process.\n- Ensure the function can process large inputs without performance degradation.\n- Design an interface that is user-friendly and supports various input formats.\n- Include error handling to manage unexpected inputs gracefully.\nTo implement the function efficiently, we will use Python's built-in capabilities along with the 'num2words' and 'words2num' libraries. These libraries will help in converting between words and numbers, which is crucial for handling the input as specified. We will also use Python's 'sorted' function to sort the numbers after conversion.\n"], "scores": [0.0083, 1.0, 0.9917, 1.0, 1.0, 0.0083, 1.0, 0.0, 1.0, 0.0], "pass_results": [false, true, false, true, true, false, true, false, true, false], "pass_test_cases_num": [1, 121, 120, 121, 121, 1, 121, 0, 121, 0], "completion": "from typing import List\nfrom num2words import num2words\nfrom words2num import words2num\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input: A space-delimited string of numerals from 'zero' to 'nine'.\n    Output: A string with numbers sorted from smallest to largest.\n    '''\n    # Split the input string into a list of numerals\n    num_list = numbers.split()\n    \n    # Convert each numeral word to its corresponding number\n    num_list = [words2num(num) for num in num_list]\n    \n    # Sort the list of numbers\n    num_list.sort()\n    \n    # Convert the sorted numbers back to words\n    sorted_words = [num2words(num) for num in num_list]\n    \n    # Join the sorted words into a single string\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string\n", "passed": true, "pass": true, "pass_num": 5, "round": 16, "repair_prompt": ["def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest. Ensure to handle the input efficiently even if it is very long.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''"], "mutate_method": "add_1_sentence_at_end", "parent_index": 16}
