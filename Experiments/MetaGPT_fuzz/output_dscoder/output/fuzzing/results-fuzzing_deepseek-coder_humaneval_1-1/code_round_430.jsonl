{"task_id": "HumanEval/39", "prompt": "def prime_fib(n: int):\t\n'''prime_fib returns n-th Fibonacci number that is also prime.\n>>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    '''", "entry_point": "prime_fib", "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "test": ["def check(prime_fib):\n\tassert prime_fib(2) == 3", "def check(prime_fib):\n\tassert prime_fib(12) == 99194853094755497", "def check(prime_fib):\n\tassert prime_fib(6) == 233", "def check(prime_fib):\n\tassert prime_fib(10) == 433494437", "def check(prime_fib):\n\tassert prime_fib(3) == 5", "def check(prime_fib):\n\tassert prime_fib(5) == 89", "def check(prime_fib):\n\tassert prime_fib(8) == 28657", "def check(prime_fib):\n\tassert prime_fib(11) == 2971215073", "def check(prime_fib):\n\tassert prime_fib(1) == 2", "def check(prime_fib):\n\tassert prime_fib(4) == 13", "def check(prime_fib):\n\tassert prime_fib(9) == 514229", "def check(prime_fib):\n\tassert prime_fib(7) == 1597"], "test_case_list": ["assert prime_fib(2) == 3", "assert prime_fib(12) == 99194853094755497", "assert prime_fib(6) == 233", "assert prime_fib(10) == 433494437", "assert prime_fib(3) == 5", "assert prime_fib(5) == 89", "assert prime_fib(8) == 28657", "assert prime_fib(11) == 2971215073", "assert prime_fib(1) == 2", "assert prime_fib(4) == 13", "assert prime_fib(9) == 514229", "assert prime_fib(7) == 1597"], "nl": "\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    ", "func": "def prime_fib(n: int):", "examples": ">>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    ", "completions": ["from typing import List\n## main.py\n\nimport math\n\ndef is_prime(num: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_fib(n: int) -> int:\n    \"\"\"prime_fib returns n-th Fibonacci number that is also prime.\n    Args:\n        n (int): The position in the Fibonacci sequence.\n    Returns:\n        int: The n-th Fibonacci number that is prime.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    a, b = 0, 1\n    count = 0\n    \n    while True:\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a\n        a, b = b, a + b\n\n# Example usage:\n# print(prime_fib(10))  # This will print the 10th Fibonacci number that is prime\n", "from typing import List\n## main.py\n\ndef is_prime(num: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_fib(n: int) -> int:\n    \"\"\"prime_fib returns the n-th Fibonacci number that is also prime.\n    >>> prime_fib(1)\n        2\n    >>> prime_fib(2)\n        3\n    >>> prime_fib(3)\n        5\n    >>> prime_fib(4)\n        13\n    >>> prime_fib(5)\n        89\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    a, b = 0, 1\n    count = 0\n    \n    while True:\n        a, b = b, a + b\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "from typing import List\n## main.py\n\ndef is_prime(num: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef fibonacci(n: int) -> int:\n    \"\"\"Generate the n-th Fibonacci number.\"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\ndef prime_fib(n: int) -> int:\n    \"\"\"prime_fib returns n-th Fibonacci number that is also prime.\n    >>> prime_fib(1)\n        2\n    >>> prime_fib(2)\n        3\n    >>> prime_fib(3)\n        5\n    >>> prime_fib(4)\n        13\n    >>> prime_fib(5)\n        89\n    \"\"\"\n    count = 0\n    i = 1\n    while True:\n        fib_num = fibonacci(i)\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n        i += 1\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "from typing import List\n## main.py\n\nimport math\nimport itertools\n\ndef is_prime(num):\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_fib(n: int) -> int:\n    \"\"\"prime_fib returns n-th Fibonacci number that is also prime.\n    >>> prime_fib(1)\n        2\n    >>> prime_fib(2)\n        3\n    >>> prime_fib(3)\n        5\n    >>> prime_fib(4)\n        13\n    >>> prime_fib(5)\n        89\n    \"\"\"\n    a, b = 0, 1\n    count = 0\n    while True:\n        a, b = b, a + b\n        count += 1\n        if is_prime(a):\n            if count == n:\n                return a\n\n# Example usage\nif __name__ == \"__main__\":\n    print(prime_fib(1))  # Output: 2\n    print(prime_fib(2))  # Output: 3\n    print(prime_fib(3))  # Output: 5\n    print(prime_fib(4))  # Output: 13\n    print(prime_fib(5))  # Output: 89\n", "from typing import List\nimport math\n\ndef is_prime(num: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef fibonacci(n: int) -> int:\n    \"\"\"Generate the n-th Fibonacci number.\"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\ndef prime_fib(n: int) -> int:\n    \"\"\"prime_fib returns n-th Fibonacci number that is also prime.\n    >>> prime_fib(1)\n        2\n    >>> prime_fib(2)\n        3\n    >>> prime_fib(3)\n        5\n    >>> prime_fib(4)\n        13\n    >>> prime_fib(5)\n        89\n    \"\"\"\n    i = 1\n    while True:\n        fib_num = fibonacci(i)\n        if is_prime(fib_num):\n            if n == 1:\n                return fib_num\n            n -= 1\n        i += 1\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "from typing import List\n## main.py\n\ndef is_prime(num: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef fibonacci(n: int, memo={}) -> int:\n    \"\"\"Generate the n-th Fibonacci number with memoization.\"\"\"\n    if n in memo:\n        return memo[n]\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo)\n    return memo[n]\n\ndef prime_fib(n: int) -> int:\n    \"\"\"prime_fib returns n-th Fibonacci number that is also prime.\n    >>> prime_fib(1)\n        2\n    >>> prime_fib(2)\n        3\n    >>> prime_fib(3)\n        5\n    >>> prime_fib(4)\n        13\n    >>> prime_fib(5)\n        89\n    \"\"\"\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        fib_num = fibonacci(num)\n        if is_prime(fib_num):\n            count += 1\n    return fib_num\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "from typing import List\n## main.py\n\nimport doctest\n\ndef is_prime(num: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_fib(n: int) -> int:\n    \"\"\"prime_fib returns n-th Fibonacci number that is also prime.\n    >>> prime_fib(1)\n        2\n    >>> prime_fib(2)\n        3\n    >>> prime_fib(3)\n        5\n    >>> prime_fib(4)\n        13\n    >>> prime_fib(5)\n        89\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    a, b = 0, 1\n    count = 0\n    \n    while True:\n        a, b = b, a + b\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "from typing import List\n## main.py\n\nimport math\n\ndef is_prime(num: int) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_fib(n: int) -> int:\n    \"\"\"Find the n-th Fibonacci number that is also a prime.\"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    a, b = 0, 1\n    count = 0\n    \n    while True:\n        fib_num = a + b\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n        a, b = b, fib_num\n\n# Example usage:\n# print(prime_fib(10))  # This will find the 10th Fibonacci number that is a prime\n", "from typing import List\n## main.py\n\ndef is_prime(num: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_fib(n: int) -> int:\n    \"\"\"prime_fib returns n-th Fibonacci number that is also prime.\n    >>> prime_fib(1)\n        2\n    >>> prime_fib(2)\n        3\n    >>> prime_fib(3)\n        5\n    >>> prime_fib(4)\n        13\n    >>> prime_fib(5)\n        89\n    \"\"\"\n    count = 0\n    i = 1\n    while True:\n        fib_num = fibonacci(i)\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n        i += 1\n\ndef fibonacci(n: int) -> int:\n    \"\"\"Generate the n-th Fibonacci number.\"\"\"\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "from typing import List\n## main.py\n\ndef is_prime(num):\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef fibonacci(n):\n    \"\"\"Generate the n-th Fibonacci number.\"\"\"\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return a\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns the n-th Fibonacci number which is also prime.\n    >>> prime_fib(1)\n        2\n    >>> prime_fib(2)\n        3\n    >>> prime_fib(3)\n        5\n    >>> prime_fib(4)\n        13\n    >>> prime_fib(5)\n        89\n    \"\"\"\n    count = 0\n    i = 1\n    while True:\n        fib_num = fibonacci(i)\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n        i += 1\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"], "plans": ["requirement analysis:\nThe original requirements call for a function that returns the n-th Fibonacci number that is also prime. This involves two main tasks: generating Fibonacci numbers and checking for primality. The function should be efficient and handle small to moderately large inputs gracefully. The user interface should be intuitive and visually appealing, providing clear feedback and handling user inputs effectively.\nrequirement pool:\n- Implement a function to generate Fibonacci numbers efficiently\n- Develop a function to check if a number is prime\n- Create a user-friendly interface for input and output\n- Ensure the application is optimized for performance and scalability\nTo implement the function that returns the n-th Fibonacci number that is also prime, we will use Python's built-in libraries and some external libraries for efficiency. The function will generate Fibonacci numbers using an efficient algorithm and check for primality using a simple yet effective method. The user interface will be created using a simple and responsive framework to ensure ease of use and clear communication of results.\n", "requirement analysis:\nThe requirement is to find the n-th Fibonacci number that is also a prime number. This involves generating Fibonacci numbers and checking each for primality. The user wants an efficient and user-friendly application to perform this task.\nrequirement pool:\n- Implement a function to generate Fibonacci numbers\n- Implement a function to check if a number is prime\n- Ensure the application is user-friendly and efficient\n- Develop a clean and responsive user interface\n- Include features for easy navigation and accessibility\nTo implement the function `prime_fib(n: int)` that returns the n-th Fibonacci number that is also prime, we will use Python's built-in libraries and some external libraries for efficiency. We will generate Fibonacci numbers using an iterative approach to ensure efficiency, and we will check for primality using a simple primality test. The user interface will be kept simple and responsive.\n", "requirement analysis:\nThe primary requirement is to develop a function that calculates the n-th Fibonacci number which is also a prime number. This involves two main tasks: generating Fibonacci numbers and checking for primality. The function should be user-friendly and efficient, providing quick results for users.\nrequirement pool:\n- Implement a function to generate Fibonacci numbers\n- Implement a function to check if a number is prime\n- Ensure the application is user-friendly and provides clear instructions\n- Optimize the application for performance and efficiency\n- Develop a responsive design that works well on both desktop and mobile devices\nTo implement the function that calculates the n-th Fibonacci number which is also a prime number, we will use Python's built-in libraries and some external libraries for efficiency. The function will generate Fibonacci numbers using an iterative approach to ensure it's efficient and check for primality using a simple primality test. The user interface will be designed to be simple and intuitive, featuring a text input for the desired position in the Fibonacci sequence, a button to trigger the calculation, and a results display area to show the prime Fibonacci number.\n", "requirement analysis:\nThe original requirements specify the need to create a function that returns the n-th Fibonacci number which is also a prime number. This is a specific and constrained task that requires a clear understanding of Fibonacci sequence and prime number generation. The function should be efficient and able to handle small values of n.\nrequirement pool:\n- The main code should generate the n-th Fibonacci number.\n- The code should check if the generated Fibonacci number is prime.\n- Implement a user-friendly interface for choosing the value of n.\n- Ensure the application is responsive and works well on mobile devices.\nTo implement the `prime_fib` function, we will use Python's built-in libraries and some external libraries for efficiency. The function will generate Fibonacci numbers and check for primality. We will use the `math` library for mathematical operations and the `itertools` library for efficient iteration.\n", "requirement analysis:\nThe primary requirement is to develop a function that calculates the n-th Fibonacci number and checks if it is prime. Secondary requirements include creating a user-friendly interface and ensuring the application is efficient and responsive.\nrequirement pool:\n- Implement the function to find the n-th Fibonacci number and check for primality\n- Design a user-friendly interface for input and output\n- Optimize the algorithm for efficiency\n- Ensure the application is responsive across different devices\n- Include additional features like history of calculations or user authentication\nTo implement the function that calculates the n-th Fibonacci number and checks if it is prime, we will use Python's built-in libraries and some external libraries for efficiency. The function will be optimized to handle large inputs efficiently. We will also design a simple user interface using Python's Tkinter library for a GUI.\n", "requirement analysis:\nThe requirement is to find the n-th Fibonacci number that is also a prime number. This involves generating Fibonacci numbers and checking if they are prime. The user wants an efficient and easy-to-use application to achieve this.\nrequirement pool:\n- Implement a function to generate Fibonacci numbers.\n- Implement a function to check if a number is prime.\n- Combine these functions to find the n-th Fibonacci number that is prime.\n- Ensure the application is user-friendly and provides clear feedback.\n- Optimize the performance for large values of n.\nTo implement the function `prime_fib(n: int)` that returns the n-th Fibonacci number that is also prime, we will use Python's built-in libraries and some external libraries for efficiency. We'll generate Fibonacci numbers using an iterative approach to ensure performance, and we'll check for primality using a simple primality test.\n", "requirement analysis:\nThe requirement is to find the n-th Fibonacci number that is also a prime number. This involves generating Fibonacci numbers and checking each for primality. The function should return the n-th such number. The examples provided give specific outputs for specific inputs, indicating a direct, unambiguous requirement.\nrequirement pool:\n- Implement the Fibonacci sequence generation algorithm\n- Implement a prime number checking function\n- Combine the two to find the n-th Fibonacci number that is prime\n- Ensure the function is efficient, handling larger values of n\n- Include user input for n, allowing the function to be tested interactively\nTo implement the function that finds the n-th Fibonacci number that is also a prime, we will use Python's built-in libraries and some external libraries for efficiency. We'll generate Fibonacci numbers using an iterative approach which is efficient and check each number for primality using a simple primality test. The function will be designed to handle user input for n, allowing interactive testing.\n", "requirement analysis:\nThe requirement is to find the n-th Fibonacci number that is also a prime number. This involves generating Fibonacci numbers and checking each for primality. The function should return the n-th such number. The examples provided give specific outputs for specific inputs, indicating a direct, unambiguous requirement.\nrequirement pool:\n- Implement the Fibonacci sequence generation algorithm\n- Implement a prime number checking function\n- Combine the two to find the n-th Fibonacci number that is prime\n- Ensure the function is efficient, handling larger values of n\n- Include user input for n to allow dynamic testing\nTo implement the function that finds the n-th Fibonacci number that is also a prime, we will use Python's built-in libraries and some external libraries for efficiency. We'll generate Fibonacci numbers using an iterative approach which is efficient and check each number for primality using a simple primality test. The function will return the n-th such number.\n", "requirement analysis:\nThe primary requirement is to develop a function that calculates the n-th Fibonacci number and checks if it is prime. The user interface should be intuitive and visually appealing, allowing users to input the position in the sequence and receive immediate feedback on the result. The application should be efficient and capable of handling a wide range of inputs without slowing down.\nrequirement pool:\n- Develop a function to calculate the n-th Fibonacci number\n- Implement a function to check if a number is prime\n- Create a user-friendly interface for input and output\n- Ensure the application is responsive and works well on different devices\n- Optimize the algorithm for efficiency and performance\nTo implement the function `prime_fib(n: int)` that returns the n-th Fibonacci number which is also prime, we will use Python's built-in libraries and leverage existing functions for prime checking and Fibonacci sequence generation. The function will first generate Fibonacci numbers until it finds a prime number, ensuring efficiency by stopping the generation process once a prime is found. This approach minimizes unnecessary computations, focusing only on generating and checking Fibonacci numbers until the desired result is achieved.\n", "requirement analysis:\nThe primary requirement is to develop a function that calculates the n-th Fibonacci number and checks if it is prime. Secondary requirements include ensuring the application is user-friendly, efficient, and accessible across different devices. Competitive analysis shows a need for a balance between cost and feature set, with a focus on user experience and accuracy.\nrequirement pool:\n- Develop a function to calculate the n-th Fibonacci number\n- Implement a function to check if a number is prime\n- Ensure the application is user-friendly and responsive\n- Design an intuitive user interface\n- Optimize performance for both speed and memory usage\nTo implement the function `prime_fib(n: int)` that returns the n-th Fibonacci number which is also prime, we will use Python's built-in libraries and leverage existing functions for prime checking and Fibonacci sequence generation. The approach involves generating Fibonacci numbers in sequence until we find a prime number, which we will return as the result. This method ensures that we efficiently find the desired prime Fibonacci number without unnecessary computations.\n"], "scores": [1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, false, true, true, true, true, true, true], "pass_test_cases_num": [12, 12, 12, 0, 12, 12, 12, 12, 12, 12], "completion": "from typing import List\n## main.py\n\ndef is_prime(num):\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef fibonacci(n):\n    \"\"\"Generate the n-th Fibonacci number.\"\"\"\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return a\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns the n-th Fibonacci number which is also prime.\n    >>> prime_fib(1)\n        2\n    >>> prime_fib(2)\n        3\n    >>> prime_fib(3)\n        5\n    >>> prime_fib(4)\n        13\n    >>> prime_fib(5)\n        89\n    \"\"\"\n    count = 0\n    i = 1\n    while True:\n        fib_num = fibonacci(i)\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n        i += 1\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "passed": true, "pass": true, "pass_num": 9, "round": 430, "repair_prompt": ["def prime_fib(n: int):\t\n'''prime_fib returns n-th Fibonacci number that is also prime.\n>>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    '''"], "mutate_method": "condense_two2one", "parent_index": 378}
