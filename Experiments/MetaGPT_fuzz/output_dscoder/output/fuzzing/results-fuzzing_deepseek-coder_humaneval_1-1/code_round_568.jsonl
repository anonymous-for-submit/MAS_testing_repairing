{"task_id": "HumanEval/157", "prompt": "def right_angle_triangle(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is right angle or 90 degree. Assume the input sides are always positive numbers.\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''", "entry_point": "right_angle_triangle", "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n", "test": ["def check(right_angle_triangle):\n\tassert right_angle_triangle(273, 936, 975) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(285, 380, 475) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(705, 376, 799) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(870, 464, 986) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3504, 4015, 5329) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(525, 280, 595) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1536, 1760, 2336) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(175, 600, 625) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(455, 1560, 1625) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 2, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(259, 888, 925) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(490, 1680, 1750) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1185, 632, 1343) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 1, 9) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2256, 2585, 3431) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1155, 616, 1309) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4, 5, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 7, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 1, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(54, 72, 90) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(20, 12, 16) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 5, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2736, 3135, 4161) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(518, 1776, 1850) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 6, 11) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(7, 7, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 2, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(10, 6, 8) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 5, 11) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 1, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 3, 15) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(280, 960, 1000) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 1, 7) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(10, 9, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 7, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 7, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(765, 408, 867) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(69, 92, 115) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(140, 336, 364) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(240, 144, 192) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 4, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(780, 468, 624) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 7, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3888, 4455, 5913) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 7, 7) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 2, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(14, 8, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(204, 272, 340) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 7, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1035, 552, 1173) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(243, 324, 405) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(581, 1992, 2075) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(11, 5, 8) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(820, 492, 656) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 4, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4, 4, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4, 5, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(12, 1, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(900, 480, 1020) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 3, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(360, 864, 936) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(7, 1, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 3, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(210, 112, 238) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1000, 600, 800) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(285, 684, 741) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(65, 156, 169) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(960, 576, 768) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3792, 4345, 5767) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 5, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 3, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 2, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 2, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(12, 4, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 4, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 12, 13) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 6, 9) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(160, 384, 416) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 6, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 4, 11) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2880, 3300, 4380) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(10, 5, 7) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(7, 24, 25) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 8, 17) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4752, 5445, 7227) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4656, 5335, 7081) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(380, 912, 988) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(350, 840, 910) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 4, 5) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 4, 8) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 4, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(70, 42, 56) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 9, 11) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(201, 268, 335) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(170, 408, 442) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(12, 16, 20) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(305, 732, 793) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 2, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 3, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(230, 552, 598) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 1, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 3, 9) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 5, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(235, 564, 611) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 1, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(81, 108, 135) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 2, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 5, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(21, 28, 35) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(234, 312, 390) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 1, 7) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(230, 138, 184) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(168, 576, 600) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1095, 584, 1241) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(320, 192, 256) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(8, 5, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 2, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 4, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4, 1, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(528, 605, 803) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 4, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 8, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1455, 776, 1649) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(21, 72, 75) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2544, 2915, 3869) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(610, 366, 488) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(8, 10, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 4, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 3, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 3, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(219, 292, 365) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 5, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(192, 220, 292) == True"], "test_case_list": ["assert right_angle_triangle(273, 936, 975) == True", "assert right_angle_triangle(285, 380, 475) == True", "assert right_angle_triangle(705, 376, 799) == True", "assert right_angle_triangle(870, 464, 986) == True", "assert right_angle_triangle(3504, 4015, 5329) == True", "assert right_angle_triangle(525, 280, 595) == True", "assert right_angle_triangle(1536, 1760, 2336) == True", "assert right_angle_triangle(175, 600, 625) == True", "assert right_angle_triangle(455, 1560, 1625) == True", "assert right_angle_triangle(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.", "assert right_angle_triangle(3, 2, 5) == False", "assert right_angle_triangle(259, 888, 925) == True", "assert right_angle_triangle(490, 1680, 1750) == True", "assert right_angle_triangle(1185, 632, 1343) == True", "assert right_angle_triangle(6, 1, 9) == False", "assert right_angle_triangle(2256, 2585, 3431) == True", "assert right_angle_triangle(1155, 616, 1309) == True", "assert right_angle_triangle(4, 5, 5) == False", "assert right_angle_triangle(5, 7, 1) == False", "assert right_angle_triangle(5, 1, 2) == False", "assert right_angle_triangle(54, 72, 90) == True", "assert right_angle_triangle(20, 12, 16) == True", "assert right_angle_triangle(5, 5, 2) == False", "assert right_angle_triangle(2736, 3135, 4161) == True", "assert right_angle_triangle(518, 1776, 1850) == True", "assert right_angle_triangle(3, 6, 11) == False", "assert right_angle_triangle(7, 7, 5) == False", "assert right_angle_triangle(15, 2, 10) == False", "assert right_angle_triangle(10, 6, 8) == True", "assert right_angle_triangle(15, 5, 11) == False", "assert right_angle_triangle(1, 1, 2) == False", "assert right_angle_triangle(1, 3, 15) == False", "assert right_angle_triangle(280, 960, 1000) == True", "assert right_angle_triangle(6, 1, 7) == False", "assert right_angle_triangle(10, 9, 3) == False", "assert right_angle_triangle(2, 7, 6) == False", "assert right_angle_triangle(1, 7, 4) == False", "assert right_angle_triangle(765, 408, 867) == True", "assert right_angle_triangle(69, 92, 115) == True", "assert right_angle_triangle(140, 336, 364) == True", "assert right_angle_triangle(240, 144, 192) == True", "assert right_angle_triangle(2, 4, 6) == False", "assert right_angle_triangle(780, 468, 624) == True", "assert right_angle_triangle(6, 7, 6) == False", "assert right_angle_triangle(3888, 4455, 5913) == True", "assert right_angle_triangle(6, 7, 7) == False", "assert right_angle_triangle(2, 2, 2) == False", "assert right_angle_triangle(14, 8, 10) == False", "assert right_angle_triangle(204, 272, 340) == True", "assert right_angle_triangle(3, 7, 2) == False", "assert right_angle_triangle(1035, 552, 1173) == True", "assert right_angle_triangle(243, 324, 405) == True", "assert right_angle_triangle(581, 1992, 2075) == True", "assert right_angle_triangle(11, 5, 8) == False", "assert right_angle_triangle(820, 492, 656) == True", "assert right_angle_triangle(5, 4, 4) == False", "assert right_angle_triangle(4, 4, 4) == False", "assert right_angle_triangle(4, 5, 4) == False", "assert right_angle_triangle(12, 1, 2) == False", "assert right_angle_triangle(900, 480, 1020) == True", "assert right_angle_triangle(3, 3, 4) == False", "assert right_angle_triangle(360, 864, 936) == True", "assert right_angle_triangle(7, 1, 6) == False", "assert right_angle_triangle(5, 3, 2) == False", "assert right_angle_triangle(210, 112, 238) == True", "assert right_angle_triangle(1000, 600, 800) == True", "assert right_angle_triangle(285, 684, 741) == True", "assert right_angle_triangle(65, 156, 169) == True", "assert right_angle_triangle(960, 576, 768) == True", "assert right_angle_triangle(3792, 4345, 5767) == True", "assert right_angle_triangle(5, 5, 6) == False", "assert right_angle_triangle(3, 3, 3) == False", "assert right_angle_triangle(3, 2, 3) == False", "assert right_angle_triangle(1, 2, 1) == False", "assert right_angle_triangle(12, 4, 2) == False", "assert right_angle_triangle(6, 4, 1) == False", "assert right_angle_triangle(5, 12, 13) == True", "assert right_angle_triangle(2, 6, 9) == False", "assert right_angle_triangle(160, 384, 416) == True", "assert right_angle_triangle(3, 6, 3) == False", "assert right_angle_triangle(2, 4, 11) == False", "assert right_angle_triangle(2880, 3300, 4380) == True", "assert right_angle_triangle(10, 5, 7) == False", "assert right_angle_triangle(7, 24, 25) == True", "assert right_angle_triangle(15, 8, 17) == True", "assert right_angle_triangle(4752, 5445, 7227) == True", "assert right_angle_triangle(4656, 5335, 7081) == True", "assert right_angle_triangle(380, 912, 988) == True", "assert right_angle_triangle(350, 840, 910) == True", "assert right_angle_triangle(3, 4, 5) == True", "assert right_angle_triangle(2, 4, 8) == False", "assert right_angle_triangle(1, 4, 4) == False", "assert right_angle_triangle(70, 42, 56) == True", "assert right_angle_triangle(15, 9, 11) == False", "assert right_angle_triangle(201, 268, 335) == True", "assert right_angle_triangle(170, 408, 442) == True", "assert right_angle_triangle(12, 16, 20) == True", "assert right_angle_triangle(305, 732, 793) == True", "assert right_angle_triangle(2, 2, 10) == False", "assert right_angle_triangle(1, 3, 4) == False", "assert right_angle_triangle(230, 552, 598) == True", "assert right_angle_triangle(1, 1, 1) == False", "assert right_angle_triangle(3, 3, 9) == False", "assert right_angle_triangle(6, 5, 3) == False", "assert right_angle_triangle(235, 564, 611) == True", "assert right_angle_triangle(3, 1, 4) == False", "assert right_angle_triangle(81, 108, 135) == True", "assert right_angle_triangle(1, 2, 3) == False", "assert right_angle_triangle(5, 5, 4) == False", "assert right_angle_triangle(21, 28, 35) == True", "assert right_angle_triangle(234, 312, 390) == True", "assert right_angle_triangle(3, 1, 7) == False", "assert right_angle_triangle(230, 138, 184) == True", "assert right_angle_triangle(168, 576, 600) == True", "assert right_angle_triangle(1095, 584, 1241) == True", "assert right_angle_triangle(320, 192, 256) == True", "assert right_angle_triangle(8, 5, 6) == False", "assert right_angle_triangle(5, 2, 4) == False", "assert right_angle_triangle(6, 4, 4) == False", "assert right_angle_triangle(4, 1, 4) == False", "assert right_angle_triangle(528, 605, 803) == True", "assert right_angle_triangle(5, 4, 10) == False", "assert right_angle_triangle(15, 8, 3) == False", "assert right_angle_triangle(1455, 776, 1649) == True", "assert right_angle_triangle(21, 72, 75) == True", "assert right_angle_triangle(2544, 2915, 3869) == True", "assert right_angle_triangle(610, 366, 488) == True", "assert right_angle_triangle(8, 10, 10) == False", "assert right_angle_triangle(2, 4, 5) == False", "assert right_angle_triangle(2, 3, 1) == False", "assert right_angle_triangle(3, 3, 1) == False", "assert right_angle_triangle(219, 292, 365) == True", "assert right_angle_triangle(1, 5, 5) == False", "assert right_angle_triangle(192, 220, 292) == True"], "nl": "\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    ", "func": "def right_angle_triangle(a, b, c):", "examples": "Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    ", "completions": ["from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    '''\n    Given the lengths of the three sides of a triangle, return True if the three sides form a right-angled triangle, False otherwise.\n    Args:\n        a (float): The length of the first side.\n        b (float): The length of the second side.\n        c (float): The length of the third side.\n    Returns:\n        bool: True if the sides form a right-angled triangle, False otherwise.\n    '''\n    # Sort the sides so that a <= b <= c\n    sides = sorted([a, b, c])\n    a, b, c = sides[0], sides[1], sides[2]\n    \n    # Check if a^2 + b^2 == c^2\n    return a**2 + b**2 == c**2\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    '''Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is right angle or 90 degree. Assume the input sides are always positive numbers.\n    Example:\n        right_angle_triangle(3, 4, 5) == True\n        right_angle_triangle(1, 2, 3) == False\n    '''\n    # Sort the sides so that c is the longest\n    sides = sorted([a, b, c])\n    \n    # Check if the sum of the squares of the two smaller sides is equal to the square of the largest side\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise.\n    Args:\n        a (float): The length of the first side.\n        b (float): The length of the second side.\n        c (float): The length of the third side.\n    Returns:\n        bool: True if the triangle is right-angled, False otherwise.\n    '''\n    # Ensure the sides are sorted so that c is the largest\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    \"\"\"\n    This function takes three float arguments representing the sides of a triangle and returns a boolean indicating if they form a right-angled triangle.\n    \n    Args:\n        a (float): The length of the first side of the triangle.\n        b (float): The length of the second side of the triangle.\n        c (float): The length of the third side of the triangle.\n    \n    Returns:\n        bool: True if the sides form a right-angled triangle, False otherwise.\n    \"\"\"\n    # Sort the sides so that c is the longest\n    sides = sorted([a, b, c])\n    a, b, c = sides[0], sides[1], sides[2]\n    \n    # Check if a^2 + b^2 == c^2\n    return a**2 + b**2 == c**2\n", "from typing import List\n## main.py\n\nimport math\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    '''Given the lengths of the three sides of a triangle, return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is right angle or 90 degree. Assume the input sides are always positive numbers.\n    Example:\n        right_angle_triangle(3, 4, 5) == True\n        right_angle_triangle(1, 2, 3) == False\n    '''\n    # Sort the sides so that c is the longest\n    sides = sorted([a, b, c])\n    a, b, c = sides[0], sides[1], sides[2]\n    \n    # Check if a^2 + b^2 == c^2 using math.isclose for floating-point precision\n    return math.isclose(a**2 + b**2, c**2)\n\n# Example usage:\n# print(right_angle_triangle(3, 4, 5))  # Output: True\n# print(right_angle_triangle(1, 2, 3))  # Output: False\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    '''Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is right angle or 90 degree. Assume the input sides are always positive numbers.\n    Example:\n        right_angle_triangle(3, 4, 5) == True\n        right_angle_triangle(1, 2, 3) == False\n    '''\n    # Check if the input sides are positive\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"All sides must be positive numbers.\")\n    \n    # Apply the Pythagorean theorem to check if the triangle is right-angled\n    sides = [a, b, c]\n    sides.sort()\n    \n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n", "from typing import List\n## main.py\n\nimport math\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    '''Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is right angle or 90 degree. Assume the input sides are always positive numbers.\n    Example:\n        right_angle_triangle(3, 4, 5) == True\n        right_angle_triangle(1, 2, 3) == False\n    '''\n    # Validate inputs to ensure they are positive numbers\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"All sides must be positive numbers.\")\n    \n    # Sort the sides to ensure the largest side is the hypotenuse\n    sides = sorted([a, b, c])\n    \n    # Check if the square of the largest side is equal to the sum of the squares of the other two sides\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    '''Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is right angle or 90 degree. Assume the input sides are always positive numbers.\n    Example:\n        right_angle_triangle(3, 4, 5) == True\n        right_angle_triangle(1, 2, 3) == False\n    '''\n    # Sort the sides so that c is the longest\n    sides = sorted([a, b, c])\n    a, b, c = sides[0], sides[1], sides[2]\n    \n    # Check if a^2 + b^2 == c^2\n    return abs(a**2 + b**2 - c**2) < 1e-9  # Use a small tolerance to account for floating-point precision\n\n# Example usage:\n# print(right_angle_triangle(3, 4, 5))  # Output: True\n# print(right_angle_triangle(1, 2, 3))  # Output: False\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    '''Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is right angle or 90 degree. Assume the input sides are always positive numbers.\n    Example:\n        right_angle_triangle(3, 4, 5) == True\n        right_angle_triangle(1, 2, 3) == False\n    '''\n    # Sort the sides to ensure the largest is last\n    sides = sorted([a, b, c])\n    \n    # Check if the sum of the squares of the two smaller sides is equal to the square of the largest side\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise.\n    Parameters:\n        a (float): The length of the first side.\n        b (float): The length of the second side.\n        c (float): The length of the third side.\n    Returns:\n        bool: True if the sides form a right-angled triangle, False otherwise.\n    '''\n    # Sort the sides to ensure the largest is the hypotenuse candidate\n    sides = sorted([a, b, c])\n    \n    # Check if the square of the largest side is equal to the sum of the squares of the other two sides\n    return abs(sides[0]**2 + sides[1]**2 - sides[2]**2) < 1e-9\n"], "plans": ["requirement analysis:\nThe original requirement is to determine if three sides form a right-angled triangle. This involves checking if the square of one side is equal to the sum of the squares of the other two sides. The function should handle positive numbers and return a boolean value.\nrequirement pool:\n- Implement the function to check for right-angled triangles\n- Ensure the function handles edge cases such as invalid triangle inequality\n- Optimize the function for performance and readability\n- Include detailed docstrings and comments for better understanding\n- Test the function with various inputs to ensure accuracy\nTo implement the function to check for right-angled triangles, we will use the Pythagorean theorem, which states that in a right-angled triangle, the square of the length of the hypotenuse (the side opposite the right angle) is equal to the sum of the squares of the lengths of the other two sides. We will implement this in a Python function, ensuring it handles edge cases and is optimized for readability and performance.\n", "requirement analysis:\nThe requirement is to create a function that determines if three given sides can form a right-angled triangle. The function should be simple, efficient, and handle positive numbers correctly. The solution should be clear and easy to understand, suitable for both beginners and experienced users.\nrequirement pool:\n- The function should accurately determine if the given sides form a right-angled triangle\n- The function should handle positive numbers correctly\n- The function should be easy to understand and use\n- The function should include clear documentation\nTo create a function that determines if three given sides can form a right-angled triangle, we will use the Pythagorean theorem. The theorem states that in a right-angled triangle, the square of the length of the hypotenuse (the side opposite the right angle) is equal to the sum of the squares of the lengths of the other two sides. We will implement this logic in Python, ensuring the function is simple, efficient, and handles positive numbers correctly.\n", "requirement analysis:\nThe requirement is to determine if three given sides can form a right-angled triangle. This involves checking if the square of the longest side is equal to the sum of the squares of the other two sides. The function should handle positive numbers and return a boolean value.\nrequirement pool:\n- Implement the function to check for right-angled triangles\n- Ensure the function handles edge cases such as invalid triangle inequality\n- Provide clear documentation and examples for user guidance\n- Optimize the function for performance to handle large inputs efficiently\n- Include user feedback mechanisms to improve the function based on user experience\nWe will implement the function using a simple and efficient approach. The function will take three positive numbers as input, representing the lengths of the sides of a triangle. It will then use the Pythagorean theorem to check if the triangle is right-angled. The function will return True if the triangle is right-angled, and False otherwise.\n", "requirement analysis:\nThe original requirements specify a function to determine if three given sides of a triangle form a right-angled triangle. The function should return True if the sides satisfy the Pythagorean theorem, and False otherwise. The input sides are always positive numbers. The function should be efficient and handle edge cases appropriately.\nrequirement pool:\n- Implement the function to check for right-angled triangles\n- Ensure the function handles positive numbers correctly\n- Optimize the function for performance\n- Add error handling for invalid inputs\n- Enhance the function's readability and maintainability\nWe will implement the function using the Pythagorean theorem, which states that in a right-angled triangle, the square of the length of the hypotenuse (the side opposite the right angle) is equal to the sum of the squares of the lengths of the other two sides. This can be checked using the formula a^2 + b^2 = c^2, where c is the length of the hypotenuse. The function will take three arguments (a, b, c) and return True if they satisfy the Pythagorean theorem, and False otherwise.\n", "requirement analysis:\nThe function needs to accurately determine if three given sides can form a right-angled triangle. It should handle positive numbers and be efficient. The user interface should be simple and clear, suitable for users of all levels.\nrequirement pool:\n- Implement a function to check for right-angled triangles\n- Ensure the function works with positive numbers\n- Create a user-friendly interface for easy input and output\n- Include error handling for invalid inputs\n- Optimize the function for performance and efficiency\nTo implement the function to check for right-angled triangles, we will use the Pythagorean theorem, which states that in a right-angled triangle, the square of the length of the hypotenuse (the side opposite the right angle) is equal to the sum of the squares of the lengths of the other two sides. We will implement this theorem in a Python function, ensuring it handles positive numbers and provides a clear output.\n", "requirement analysis:\nThe requirement is to create a function that determines if three given sides can form a right-angled triangle. The function should be simple and efficient, handling positive numbers correctly. The solution should be based on the Pythagorean theorem, which states that in a right-angled triangle, the square of the length of the hypotenuse (the side opposite the right angle) is equal to the sum of the squares of the lengths of the other two sides.\nrequirement pool:\n- The function should correctly identify right-angled triangles using the Pythagorean theorem\n- The function should handle edge cases such as non-positive inputs\n- The function should be optimized for performance and readability\n- Documentation should be clear and include examples of usage\n- The function should be tested for various inputs to ensure reliability\nTo implement the function that determines if three given sides can form a right-angled triangle, we will use the Pythagorean theorem. This theorem states that in a right-angled triangle, the square of the length of the hypotenuse (the side opposite the right angle) is equal to the sum of the squares of the lengths of the other two sides. We will write a Python function that takes three arguments (the lengths of the three sides of a triangle) and returns True if the sides form a right-angled triangle, and False otherwise. The function will first check if the input values are positive numbers, as required. If not, it will return an error message. The function will then apply the Pythagorean theorem to determine if the triangle is right-angled.\n", "requirement analysis:\nThe requirement is to create a function that determines if three given sides can form a right-angled triangle. The function should be simple, efficient, and handle basic use cases effectively. It should be able to process positive numbers and return a boolean value indicating whether the sides form a right-angled triangle.\nrequirement pool:\n- Implement the function to check for right-angled triangles\n- Ensure the function handles positive numbers correctly\n- Add error handling for invalid inputs\n- Include detailed documentation for easy understanding\n- Optimize the function for performance\nTo implement the function that checks if three given sides can form a right-angled triangle, we will use the Pythagorean theorem. The theorem states that in a right-angled triangle, the square of the length of the hypotenuse (the side opposite the right angle) is equal to the sum of the squares of the lengths of the other two sides. We will implement this logic in a Python function, ensuring it handles positive numbers correctly and returns a boolean value.\n", "requirement analysis:\nThe requirement is to determine if three given sides can form a right-angled triangle. This involves checking if the square of the longest side is equal to the sum of the squares of the other two sides. The function should handle positive numbers and be efficient. The input sides are always positive numbers.\nrequirement pool:\n- Implement the function to check for right-angled triangles\n- Ensure the function handles edge cases such as floating-point inputs\n- Provide clear documentation and examples for user guidance\n- Optimize the function for high performance\nTo implement the function to check for right-angled triangles, we will use the Pythagorean theorem, which states that in a right-angled triangle, the square of the length of the hypotenuse (the side opposite the right angle) is equal to the sum of the squares of the lengths of the other two sides. We will implement this in Python by defining a function that takes three arguments (the lengths of the sides of the triangle) and returns a boolean value indicating whether the triangle is right-angled. We will also ensure that the function handles edge cases such as floating-point inputs and is optimized for high performance.\n", "requirement analysis:\nThe requirement is to determine if three given sides can form a right-angled triangle. This involves checking if the square of the longest side is equal to the sum of the squares of the other two sides. The function should handle positive numbers and return a boolean value.\nrequirement pool:\n- Implement the function to check for right-angled triangles\n- Ensure the function handles edge cases such as invalid triangle inequality\n- Provide clear documentation and examples for user guidance\n- Optimize the function for performance to handle large inputs efficiently\n- Include user feedback mechanisms to continuously improve the function\nTo implement the function to check if three given sides can form a right-angled triangle, we will use the Pythagorean theorem. This theorem states that in a right-angled triangle, the square of the length of the hypotenuse (the side opposite the right angle) is equal to the sum of the squares of the lengths of the other two sides. We will implement this logic in a Python function, ensuring it handles edge cases and provides clear documentation for user guidance.\n", "requirement analysis:\nThe original requirement is to determine if three given sides of a triangle form a right-angled triangle. The function should be efficient and handle positive numbers correctly. The solution should be simple and easy to understand, suitable for various users including mathematicians, students, and developers.\nrequirement pool:\n- Implement the function to check for right-angled triangles\n- Ensure the function handles positive numbers correctly\n- Enhance the function's readability and maintainability\n- Include error handling for invalid inputs\n- Test the function with various edge cases\nTo implement the function that checks if three given sides of a triangle form a right-angled triangle, we will use the Pythagorean theorem. The Pythagorean theorem states that in a right-angled triangle, the square of the length of the hypotenuse (the side opposite the right angle) is equal to the sum of the squares of the lengths of the other two sides. We will implement this logic in a Python function, ensuring it handles positive numbers correctly and is efficient.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [134, 134, 134, 134, 134, 134, 134, 134, 134, 134], "completion": "from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise.\n    Parameters:\n        a (float): The length of the first side.\n        b (float): The length of the second side.\n        c (float): The length of the third side.\n    Returns:\n        bool: True if the sides form a right-angled triangle, False otherwise.\n    '''\n    # Sort the sides to ensure the largest is the hypotenuse candidate\n    sides = sorted([a, b, c])\n    \n    # Check if the square of the largest side is equal to the sum of the squares of the other two sides\n    return abs(sides[0]**2 + sides[1]**2 - sides[2]**2) < 1e-9\n", "passed": true, "pass": true, "pass_num": 10, "round": 568, "repair_prompt": ["def right_angle_triangle(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is right angle or 90 degree. Assume the input sides are always positive numbers.\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''"], "mutate_method": "add_1_sentence_at_end", "parent_index": 259}
