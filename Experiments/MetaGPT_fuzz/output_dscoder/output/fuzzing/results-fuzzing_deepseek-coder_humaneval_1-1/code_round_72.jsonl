{"task_id": "HumanEval/93", "prompt": "def encode(message):\t\n'''Write a function that takes a message, and encodes in such a way that it swaps case of all letters and replaces all vowels in the message with the letter that appears 2 places ahead of that vowel in the English alphabet. Assume only letters.\nExamples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    '''", "entry_point": "encode", "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n", "test": ["def check(encode):\n\tassert encode(\"ZUvOnpFUjJGGWcJQYQmTY W\") == 'zwVqNPfwJjggwCjqyqMty w'", "def check(encode):\n\tassert encode(\"SgPXbDsCxLlYIAFFhhIbRfXHjaZ\") == 'sGpxBdScXlLykcffHHkBrFxhJCz'", "def check(encode):\n\tassert encode(\"TEPUFH\") == 'tgpwfh'", "def check(encode):\n\tassert encode(\"FKRTJOGJR\") == 'fkrtjqgjr'", "def check(encode):\n\tassert encode(\"GWHK\") == 'gwhk'", "def check(encode):\n\tassert encode(\"ElaZse dYXHgdVq\") == 'gLCzSG DyxhGDvQ'", "def check(encode):\n\tassert encode(\"SETPXKRTE\") == 'sgtpxkrtg'", "def check(encode):\n\tassert encode(\"JRG\") == 'jrg'", "def check(encode):\n\tassert encode(\"XQAXbNmLpmobUzQtNvacz\") == 'xqcxBnMlPMQBwZqTnVCCZ'", "def check(encode):\n\tassert encode(\"FPENQAZGK\") == 'fpgnqczgk'", "def check(encode):\n\tassert encode(\"TEIPDCVYN\") == 'tgkpdcvyn'", "def check(encode):\n\tassert encode(\"gIVppcmTSMtmvhg ZjTdBs\") == 'GkvPPCMtsmTMVHG zJtDbS'", "def check(encode):\n\tassert encode(\"nds\") == 'NDS'", "def check(encode):\n\tassert encode(\"CVLBOWSP\") == 'cvlbqwsp'", "def check(encode):\n\tassert encode(\"BRVLN\") == 'brvln'", "def check(encode):\n\tassert encode(\"hnbzSknod dSFfSG\") == 'HNBZsKNQD DsfFsg'", "def check(encode):\n\tassert encode(\"BnHJZme\") == 'bNhjzMG'", "def check(encode):\n\tassert encode(\"zTBpeQNFrEsJ\") == 'ZtbPGqnfRgSj'", "def check(encode):\n\tassert encode(\"IstxgcEpahvkDruGyiK\") == 'kSTXGCgPCHVKdRWgYKk'", "def check(encode):\n\tassert encode(\"HzEMwPWyLehG jFTacHALOraUoB\") == 'hZgmWpwYlGHg JftCChclqRCwQb'", "def check(encode):\n\tassert encode(\" BuOTEofYkQJauJaclURS\") == ' bWqtgQFyKqjCWjCCLwrs'", "def check(encode):\n\tassert encode(\"FHEcvmCWtbF aJg\") == 'fhgCVMcwTBf CjG'", "def check(encode):\n\tassert encode(\"RHO\") == 'rhq'", "def check(encode):\n\tassert encode(\"OJMQGVupooekW\") == 'qjmqgvWPQQGKw'", "def check(encode):\n\tassert encode(\"DARS\") == 'dcrs'", "def check(encode):\n\tassert encode(\"ZTTSSFEL\") == 'zttssfgl'", "def check(encode):\n\tassert encode(\"kkAuzPMaJbY\") == 'KKcWZpmCjBy'", "def check(encode):\n\tassert encode(\"kwfcMJBvOIscxpuRJYMQxX\") == 'KWFCmjbVqkSCXPWrjymqXx'", "def check(encode):\n\tassert encode(\"pUgmIEYWAnzEuqFElVbVs\") == 'PwGMkgywcNZgWQfgLvBvS'", "def check(encode):\n\tassert encode(\"kzLQOefkAweHvGBycjn\") == 'KZlqqGFKcWGhVgbYCJN'", "def check(encode):\n\tassert encode(\"CLY\") == 'cly'", "def check(encode):\n\tassert encode(\"GUAU\") == 'gwcw'", "def check(encode):\n\tassert encode(\"YcxmhivPyJIw\") == 'yCXMHKVpYjkW'", "def check(encode):\n\tassert encode('TEST') == 'tgst'", "def check(encode):\n\tassert encode(\"oSYVfHWo kWWvnziVt\") == 'QsyvFhwQ KwwVNZKvT'", "def check(encode):\n\tassert encode(\"TXAFFIW\") == 'txcffkw'", "def check(encode):\n\tassert encode(\"EORCSH\") == 'gqrcsh'", "def check(encode):\n\tassert encode(\"ETMDXUEBC\") == 'gtmdxwgbc'", "def check(encode):\n\tassert encode(\"TQRZQWU\") == 'tqrzqww'", "def check(encode):\n\tassert encode(\"DPGWLEVT\") == 'dpgwlgvt'", "def check(encode):\n\tassert encode(\"PRREkliEYbvcKGoNqvSfsJ\") == 'prrgKLKgyBVCkgQnQVsFSj'", "def check(encode):\n\tassert encode(\"WWBsZMYcpjfNzyCeVVgesJoJhjy\") == 'wwbSzmyCPJFnZYcGvvGGSjQjHJY'", "def check(encode):\n\tassert encode(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg'", "def check(encode):\n\tassert encode(\"gnJhAIkj\") == 'GNjHckKJ'", "def check(encode):\n\tassert encode(\"OHUJlX\") == 'qhwjLx'", "def check(encode):\n\tassert encode(\"EoisHGBfMOUHhIftINGIdF DJqugm\") == 'gQKShgbFmqwhHkFTkngkDf djQWGM'", "def check(encode):\n\tassert encode(\"JJWNGDOT\") == 'jjwngdqt'", "def check(encode):\n\tassert encode(\"DXZBFN\") == 'dxzbfn'", "def check(encode):\n\tassert encode(\"DVKfMTlbOESs\") == 'dvkFmtLBqgsS'", "def check(encode):\n\tassert encode(\"UEeG\") == 'wgGg'", "def check(encode):\n\tassert encode(\"BCKPNMVO\") == 'bckpnmvq'", "def check(encode):\n\tassert encode(\"IMIJTK\") == 'kmkjtk'", "def check(encode):\n\tassert encode(\"ZyWrbakVZJKkkAmmKNRmUPDCi\") == 'zYwRBCKvzjkKKcMMknrMwpdcK'", "def check(encode):\n\tassert encode(\"URMC\") == 'wrmc'", "def check(encode):\n\tassert encode(\"CNJ\") == 'cnj'", "def check(encode):\n\tassert encode(\"grukYfBTTJtVX\") == 'GRWKyFbttjTvx'", "def check(encode):\n\tassert encode(\"FDMjHnZkEhmsNmlJNItsJQlasO\") == 'fdmJhNzKgHMSnMLjnkTSjqLCSq'", "def check(encode):\n\tassert encode(\"rRrZwWEjxTIMMSNiS\") == 'RrRzWwgJXtkmmsnKs'", "def check(encode):\n\tassert encode(\"LHfTwSNWVA\") == 'lhFtWsnwvc'", "def check(encode):\n\tassert encode(\"QwJoXypNyPZVVwtdhDxHhBKXS\") == 'qWjQxYPnYpzvvWTDHdXhHbkxs'", "def check(encode):\n\tassert encode(\"cJbiuaENQvBuUexfhUuJRbvP\") == 'CjBKWCgnqVbWwGXFHwWjrBVp'", "def check(encode):\n\tassert encode(\"Sjf\") == 'sJF'", "def check(encode):\n\tassert encode(\"DZAXVXQ\") == 'dzcxvxq'", "def check(encode):\n\tassert encode(\"HNDsWbIhInLlAGVoRFZw\") == 'hndSwBkHkNlLcgvQrfzW'", "def check(encode):\n\tassert encode(\"YaFsT\") == 'yCfSt'", "def check(encode):\n\tassert encode(\"WNYEUHDUE\") == 'wnygwhdwg'", "def check(encode):\n\tassert encode(\"ROWVCETC\") == 'rqwvcgtc'", "def check(encode):\n\tassert encode(\"Hmj\") == 'hMJ'", "def check(encode):\n\tassert encode(\"ApBJTja\") == 'cPbjtJC'", "def check(encode):\n\tassert encode(\"NNoTLfuGwSHDJdTlRXSyC\") == 'nnQtlFWgWshdjDtLrxsYc'", "def check(encode):\n\tassert encode(\"pvQeerpuzVbW\") == 'PVqGGRPWZvBw'", "def check(encode):\n\tassert encode(\"LCLBDYXRN\") == 'lclbdyxrn'", "def check(encode):\n\tassert encode(\"RcQZkLoILujJnUJ BK lQgY\") == 'rCqzKlQklWJjNwj bk LqGy'", "def check(encode):\n\tassert encode(\"IzXkNbTRYEDDLFF\") == 'kZxKnBtrygddlff'", "def check(encode):\n\tassert encode(\"bBSM\") == 'Bbsm'", "def check(encode):\n\tassert encode(\"rhgAVJOAnVugEnMSSKWsc\") == 'RHGcvjqcNvWGgNmsskwSC'", "def check(encode):\n\tassert encode(\"KTBXLNF\") == 'ktbxlnf'", "def check(encode):\n\tassert encode(\"gEQTanRJKhLxXlJDZQHPwvbnq\") == 'GgqtCNrjkHlXxLjdzqhpWVBNQ'", "def check(encode):\n\tassert encode(\"EjhSPNSJMPQ\") == 'gJHspnsjmpq'", "def check(encode):\n\tassert encode(\"TLU\") == 'tlw'", "def check(encode):\n\tassert encode(\"rjXQvzxCjzaWcAuNeOiaXPpdYVoxCt\") == 'RJxqVZXcJZCwCcWnGqKCxpPDyvQXcT'", "def check(encode):\n\tassert encode(\"ZVS\") == 'zvs'", "def check(encode):\n\tassert encode(\"BODPGNO\") == 'bqdpgnq'", "def check(encode):\n\tassert encode('This is a message') == 'tHKS KS C MGSSCGG'", "def check(encode):\n\tassert encode(\"jZheceVgKgTLjRwOLeRrrtwbE\") == 'JzHGCGvGkGtlJrWqlGrRRTWBg'", "def check(encode):\n\tassert encode(\"AZOCBJD\") == 'czqcbjd'", "def check(encode):\n\tassert encode(\"HrRcDpPaxYYXID\") == 'hRrCdPpCXyyxkd'", "def check(encode):\n\tassert encode(\"DNHIUUVX\") == 'dnhkwwvx'", "def check(encode):\n\tassert encode(\"TEGPKXNB\") == 'tggpkxnb'", "def check(encode):\n\tassert encode(\"OBEcrSHMuaCS\") == 'qbgCRshmWCcs'", "def check(encode):\n\tassert encode(\"jAqqTMHiqs\") == 'JcQQtmhKQS'", "def check(encode):\n\tassert encode(\"IYS\") == 'kys'", "def check(encode):\n\tassert encode(\"HKWXPGN\") == 'hkwxpgn'", "def check(encode):\n\tassert encode(\"aZPgQ vnmhPPOLdLIutuJO\") == 'CzpGq VNMHppqlDlkWTWjq'", "def check(encode):\n\tassert encode(\"fZoHFcbTcLTUWG VdZ\") == 'FzQhfCBtCltwwg vDz'", "def check(encode):\n\tassert encode(\"SSMAQL\") == 'ssmcql'", "def check(encode):\n\tassert encode(\"ITNaCJiUmgbbsXbJggeE\") == 'ktnCcjKwMGBBSxBjGGGg'", "def check(encode):\n\tassert encode(\"PKKLGPQOY\") == 'pkklgpqqy'", "def check(encode):\n\tassert encode(\"XgnELkHHAAUiCCpSfJ\") == 'xGNglKhhccwKccPsFj'", "def check(encode):\n\tassert encode(\"jjHqlFViqHz\") == 'JJhQLfvKQhZ'", "def check(encode):\n\tassert encode('Mudasir') == 'mWDCSKR'", "def check(encode):\n\tassert encode(\"OpzdoaiWPrtwH\") == 'qPZDQCKwpRTWh'", "def check(encode):\n\tassert encode(\" dNVahxVjKzB JTneIFjKfXsk \") == ' DnvCHXvJkZb jtNGkfJkFxSK '", "def check(encode):\n\tassert encode(\"c XkUXkBchEddL\") == 'C xKwxKbCHgDDl'", "def check(encode):\n\tassert encode(\"PSBSBey\") == 'psbsbGY'", "def check(encode):\n\tassert encode(\"mejsPoZxTWVZINkltbTC\") == 'MGJSpQzXtwvzknKLTBtc'", "def check(encode):\n\tassert encode(\"RkeGn HyKwTJKYqIJSWnu\") == 'rKGgN hYkWtjkyQkjswNW'", "def check(encode):\n\tassert encode(\"JMFDUNNFN\") == 'jmfdwnnfn'", "def check(encode):\n\tassert encode(\"DWUOPpLjiGck\") == 'dwwqpPlJKgCK'", "def check(encode):\n\tassert encode(\"KtvgHCwhJPHhZoPrTShCCFjb\") == 'kTVGhcWHjphHzQpRtsHccfJB'", "def check(encode):\n\tassert encode(\"BGPB\") == 'bgpb'", "def check(encode):\n\tassert encode(\"FVABgUJcvAO\") == 'fvcbGwjCVcq'", "def check(encode):\n\tassert encode(\"LPVHOUZC\") == 'lpvhqwzc'", "def check(encode):\n\tassert encode(\"vFk rhQEfvOP ZgydPEhvIVWD\") == 'VfK RHqgFVqp zGYDpgHVkvwd'", "def check(encode):\n\tassert encode(\"QRX\") == 'qrx'", "def check(encode):\n\tassert encode(\"DXV\") == 'dxv'", "def check(encode):\n\tassert encode(\"qmjcLnfY lObRZrX\") == 'QMJClNFy LqBrzRx'", "def check(encode):\n\tassert encode('YES') == 'ygs'", "def check(encode):\n\tassert encode(\"lljsyoqvdrgHLkvty\") == 'LLJSYQQVDRGhlKVTY'", "def check(encode):\n\tassert encode(\"OSWDQFIR\") == 'qswdqfkr'", "def check(encode):\n\tassert encode(\"ZfDqK\") == 'zFdQk'", "def check(encode):\n\tassert encode(\"BYRAIVE\") == 'byrckvg'", "def check(encode):\n\tassert encode(\"AGMBICYE\") == 'cgmbkcyg'", "def check(encode):\n\tassert encode(\"kqmseH\") == 'KQMSGh'", "def check(encode):\n\tassert encode(\"WYLLSZM\") == 'wyllszm'", "def check(encode):\n\tassert encode(\"hgxUMf\") == 'HGXwmF'", "def check(encode):\n\tassert encode(\"xOzJhrPNcVCLkJeMgwsBcYm\") == 'XqZjHRpnCvclKjGmGWSbCyM'", "def check(encode):\n\tassert encode(\"rKELArbzBNVyXuUr\") == 'RkglcRBZbnvYxWwR'", "def check(encode):\n\tassert encode(\"WNRIIJWGO\") == 'wnrkkjwgq'", "def check(encode):\n\tassert encode(\"UNVEY\") == 'wnvgy'"], "test_case_list": ["assert encode(\"ZUvOnpFUjJGGWcJQYQmTY W\") == 'zwVqNPfwJjggwCjqyqMty w'", "assert encode(\"SgPXbDsCxLlYIAFFhhIbRfXHjaZ\") == 'sGpxBdScXlLykcffHHkBrFxhJCz'", "assert encode(\"TEPUFH\") == 'tgpwfh'", "assert encode(\"FKRTJOGJR\") == 'fkrtjqgjr'", "assert encode(\"GWHK\") == 'gwhk'", "assert encode(\"ElaZse dYXHgdVq\") == 'gLCzSG DyxhGDvQ'", "assert encode(\"SETPXKRTE\") == 'sgtpxkrtg'", "assert encode(\"JRG\") == 'jrg'", "assert encode(\"XQAXbNmLpmobUzQtNvacz\") == 'xqcxBnMlPMQBwZqTnVCCZ'", "assert encode(\"FPENQAZGK\") == 'fpgnqczgk'", "assert encode(\"TEIPDCVYN\") == 'tgkpdcvyn'", "assert encode(\"gIVppcmTSMtmvhg ZjTdBs\") == 'GkvPPCMtsmTMVHG zJtDbS'", "assert encode(\"nds\") == 'NDS'", "assert encode(\"CVLBOWSP\") == 'cvlbqwsp'", "assert encode(\"BRVLN\") == 'brvln'", "assert encode(\"hnbzSknod dSFfSG\") == 'HNBZsKNQD DsfFsg'", "assert encode(\"BnHJZme\") == 'bNhjzMG'", "assert encode(\"zTBpeQNFrEsJ\") == 'ZtbPGqnfRgSj'", "assert encode(\"IstxgcEpahvkDruGyiK\") == 'kSTXGCgPCHVKdRWgYKk'", "assert encode(\"HzEMwPWyLehG jFTacHALOraUoB\") == 'hZgmWpwYlGHg JftCChclqRCwQb'", "assert encode(\" BuOTEofYkQJauJaclURS\") == ' bWqtgQFyKqjCWjCCLwrs'", "assert encode(\"FHEcvmCWtbF aJg\") == 'fhgCVMcwTBf CjG'", "assert encode(\"RHO\") == 'rhq'", "assert encode(\"OJMQGVupooekW\") == 'qjmqgvWPQQGKw'", "assert encode(\"DARS\") == 'dcrs'", "assert encode(\"ZTTSSFEL\") == 'zttssfgl'", "assert encode(\"kkAuzPMaJbY\") == 'KKcWZpmCjBy'", "assert encode(\"kwfcMJBvOIscxpuRJYMQxX\") == 'KWFCmjbVqkSCXPWrjymqXx'", "assert encode(\"pUgmIEYWAnzEuqFElVbVs\") == 'PwGMkgywcNZgWQfgLvBvS'", "assert encode(\"kzLQOefkAweHvGBycjn\") == 'KZlqqGFKcWGhVgbYCJN'", "assert encode(\"CLY\") == 'cly'", "assert encode(\"GUAU\") == 'gwcw'", "assert encode(\"YcxmhivPyJIw\") == 'yCXMHKVpYjkW'", "assert encode('TEST') == 'tgst'", "assert encode(\"oSYVfHWo kWWvnziVt\") == 'QsyvFhwQ KwwVNZKvT'", "assert encode(\"TXAFFIW\") == 'txcffkw'", "assert encode(\"EORCSH\") == 'gqrcsh'", "assert encode(\"ETMDXUEBC\") == 'gtmdxwgbc'", "assert encode(\"TQRZQWU\") == 'tqrzqww'", "assert encode(\"DPGWLEVT\") == 'dpgwlgvt'", "assert encode(\"PRREkliEYbvcKGoNqvSfsJ\") == 'prrgKLKgyBVCkgQnQVsFSj'", "assert encode(\"WWBsZMYcpjfNzyCeVVgesJoJhjy\") == 'wwbSzmyCPJFnZYcGvvGGSjQjHJY'", "assert encode(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg'", "assert encode(\"gnJhAIkj\") == 'GNjHckKJ'", "assert encode(\"OHUJlX\") == 'qhwjLx'", "assert encode(\"EoisHGBfMOUHhIftINGIdF DJqugm\") == 'gQKShgbFmqwhHkFTkngkDf djQWGM'", "assert encode(\"JJWNGDOT\") == 'jjwngdqt'", "assert encode(\"DXZBFN\") == 'dxzbfn'", "assert encode(\"DVKfMTlbOESs\") == 'dvkFmtLBqgsS'", "assert encode(\"UEeG\") == 'wgGg'", "assert encode(\"BCKPNMVO\") == 'bckpnmvq'", "assert encode(\"IMIJTK\") == 'kmkjtk'", "assert encode(\"ZyWrbakVZJKkkAmmKNRmUPDCi\") == 'zYwRBCKvzjkKKcMMknrMwpdcK'", "assert encode(\"URMC\") == 'wrmc'", "assert encode(\"CNJ\") == 'cnj'", "assert encode(\"grukYfBTTJtVX\") == 'GRWKyFbttjTvx'", "assert encode(\"FDMjHnZkEhmsNmlJNItsJQlasO\") == 'fdmJhNzKgHMSnMLjnkTSjqLCSq'", "assert encode(\"rRrZwWEjxTIMMSNiS\") == 'RrRzWwgJXtkmmsnKs'", "assert encode(\"LHfTwSNWVA\") == 'lhFtWsnwvc'", "assert encode(\"QwJoXypNyPZVVwtdhDxHhBKXS\") == 'qWjQxYPnYpzvvWTDHdXhHbkxs'", "assert encode(\"cJbiuaENQvBuUexfhUuJRbvP\") == 'CjBKWCgnqVbWwGXFHwWjrBVp'", "assert encode(\"Sjf\") == 'sJF'", "assert encode(\"DZAXVXQ\") == 'dzcxvxq'", "assert encode(\"HNDsWbIhInLlAGVoRFZw\") == 'hndSwBkHkNlLcgvQrfzW'", "assert encode(\"YaFsT\") == 'yCfSt'", "assert encode(\"WNYEUHDUE\") == 'wnygwhdwg'", "assert encode(\"ROWVCETC\") == 'rqwvcgtc'", "assert encode(\"Hmj\") == 'hMJ'", "assert encode(\"ApBJTja\") == 'cPbjtJC'", "assert encode(\"NNoTLfuGwSHDJdTlRXSyC\") == 'nnQtlFWgWshdjDtLrxsYc'", "assert encode(\"pvQeerpuzVbW\") == 'PVqGGRPWZvBw'", "assert encode(\"LCLBDYXRN\") == 'lclbdyxrn'", "assert encode(\"RcQZkLoILujJnUJ BK lQgY\") == 'rCqzKlQklWJjNwj bk LqGy'", "assert encode(\"IzXkNbTRYEDDLFF\") == 'kZxKnBtrygddlff'", "assert encode(\"bBSM\") == 'Bbsm'", "assert encode(\"rhgAVJOAnVugEnMSSKWsc\") == 'RHGcvjqcNvWGgNmsskwSC'", "assert encode(\"KTBXLNF\") == 'ktbxlnf'", "assert encode(\"gEQTanRJKhLxXlJDZQHPwvbnq\") == 'GgqtCNrjkHlXxLjdzqhpWVBNQ'", "assert encode(\"EjhSPNSJMPQ\") == 'gJHspnsjmpq'", "assert encode(\"TLU\") == 'tlw'", "assert encode(\"rjXQvzxCjzaWcAuNeOiaXPpdYVoxCt\") == 'RJxqVZXcJZCwCcWnGqKCxpPDyvQXcT'", "assert encode(\"ZVS\") == 'zvs'", "assert encode(\"BODPGNO\") == 'bqdpgnq'", "assert encode('This is a message') == 'tHKS KS C MGSSCGG'", "assert encode(\"jZheceVgKgTLjRwOLeRrrtwbE\") == 'JzHGCGvGkGtlJrWqlGrRRTWBg'", "assert encode(\"AZOCBJD\") == 'czqcbjd'", "assert encode(\"HrRcDpPaxYYXID\") == 'hRrCdPpCXyyxkd'", "assert encode(\"DNHIUUVX\") == 'dnhkwwvx'", "assert encode(\"TEGPKXNB\") == 'tggpkxnb'", "assert encode(\"OBEcrSHMuaCS\") == 'qbgCRshmWCcs'", "assert encode(\"jAqqTMHiqs\") == 'JcQQtmhKQS'", "assert encode(\"IYS\") == 'kys'", "assert encode(\"HKWXPGN\") == 'hkwxpgn'", "assert encode(\"aZPgQ vnmhPPOLdLIutuJO\") == 'CzpGq VNMHppqlDlkWTWjq'", "assert encode(\"fZoHFcbTcLTUWG VdZ\") == 'FzQhfCBtCltwwg vDz'", "assert encode(\"SSMAQL\") == 'ssmcql'", "assert encode(\"ITNaCJiUmgbbsXbJggeE\") == 'ktnCcjKwMGBBSxBjGGGg'", "assert encode(\"PKKLGPQOY\") == 'pkklgpqqy'", "assert encode(\"XgnELkHHAAUiCCpSfJ\") == 'xGNglKhhccwKccPsFj'", "assert encode(\"jjHqlFViqHz\") == 'JJhQLfvKQhZ'", "assert encode('Mudasir') == 'mWDCSKR'", "assert encode(\"OpzdoaiWPrtwH\") == 'qPZDQCKwpRTWh'", "assert encode(\" dNVahxVjKzB JTneIFjKfXsk \") == ' DnvCHXvJkZb jtNGkfJkFxSK '", "assert encode(\"c XkUXkBchEddL\") == 'C xKwxKbCHgDDl'", "assert encode(\"PSBSBey\") == 'psbsbGY'", "assert encode(\"mejsPoZxTWVZINkltbTC\") == 'MGJSpQzXtwvzknKLTBtc'", "assert encode(\"RkeGn HyKwTJKYqIJSWnu\") == 'rKGgN hYkWtjkyQkjswNW'", "assert encode(\"JMFDUNNFN\") == 'jmfdwnnfn'", "assert encode(\"DWUOPpLjiGck\") == 'dwwqpPlJKgCK'", "assert encode(\"KtvgHCwhJPHhZoPrTShCCFjb\") == 'kTVGhcWHjphHzQpRtsHccfJB'", "assert encode(\"BGPB\") == 'bgpb'", "assert encode(\"FVABgUJcvAO\") == 'fvcbGwjCVcq'", "assert encode(\"LPVHOUZC\") == 'lpvhqwzc'", "assert encode(\"vFk rhQEfvOP ZgydPEhvIVWD\") == 'VfK RHqgFVqp zGYDpgHVkvwd'", "assert encode(\"QRX\") == 'qrx'", "assert encode(\"DXV\") == 'dxv'", "assert encode(\"qmjcLnfY lObRZrX\") == 'QMJClNFy LqBrzRx'", "assert encode('YES') == 'ygs'", "assert encode(\"lljsyoqvdrgHLkvty\") == 'LLJSYQQVDRGhlKVTY'", "assert encode(\"OSWDQFIR\") == 'qswdqfkr'", "assert encode(\"ZfDqK\") == 'zFdQk'", "assert encode(\"BYRAIVE\") == 'byrckvg'", "assert encode(\"AGMBICYE\") == 'cgmbkcyg'", "assert encode(\"kqmseH\") == 'KQMSGh'", "assert encode(\"WYLLSZM\") == 'wyllszm'", "assert encode(\"hgxUMf\") == 'HGXwmF'", "assert encode(\"xOzJhrPNcVCLkJeMgwsBcYm\") == 'XqZjHRpnCvclKjGmGWSbCyM'", "assert encode(\"rKELArbzBNVyXuUr\") == 'RkglcRBZbnvYxWwR'", "assert encode(\"WNRIIJWGO\") == 'wnrkkjwgq'", "assert encode(\"UNVEY\") == 'wnvgy'"], "nl": "\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    ", "func": "def encode(message):", "examples": "Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    ", "completions": ["from typing import List\n## main.py\n\nimport string\n\ndef encode(message: str) -> str:\n    \"\"\"\n    Encodes a message by swapping the case of all letters and replacing vowels with the letter that appears 2 places ahead in the alphabet.\n    \n    Args:\n        message (str): The input message to be encoded.\n        \n    Returns:\n        str: The encoded message.\n    \"\"\"\n    def is_vowel(char: str) -> bool:\n        \"\"\"\n        Checks if a character is a vowel.\n        \n        Args:\n            char (str): The character to check.\n            \n        Returns:\n            bool: True if the character is a vowel, False otherwise.\n        \"\"\"\n        vowels = \"aeiouAEIOU\"\n        return char in vowels\n\n    def shift_vowel(char: str) -> str:\n        \"\"\"\n        Replaces a vowel with the letter that appears 2 places ahead in the alphabet.\n        \n        Args:\n            char (str): The vowel to be replaced.\n            \n        Returns:\n            str: The letter that appears 2 places ahead.\n        \"\"\"\n        vowels = \"aeiou\"\n        if char in vowels:\n            index = vowels.index(char)\n            new_index = (index + 2) % len(vowels)\n            return vowels[new_index]\n        return char\n\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += char.upper()\n            else:\n                encoded_message += char.lower()\n        else:\n            encoded_message += shift_vowel(char)\n    return encoded_message\n", "from typing import List\n## main.py\n\nimport string\n\ndef encode(message: str) -> str:\n    \"\"\"\n    Encodes a message by swapping the case of all letters and replacing all vowels with the letter that appears 2 places ahead in the alphabet.\n    \n    Args:\n        message (str): The input message to be encoded.\n        \n    Returns:\n        str: The encoded message.\n    \"\"\"\n    def shift_char(c: str) -> str:\n        \"\"\"\n        Shifts a character by 2 places in the alphabet, wrapping around if necessary.\n        \n        Args:\n            c (str): The character to be shifted.\n            \n        Returns:\n            str: The shifted character.\n        \"\"\"\n        if c in string.ascii_lowercase:\n            return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n        elif c in string.ascii_uppercase:\n            return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return c\n\n    def swap_case(c: str) -> str:\n        \"\"\"\n        Swaps the case of a character.\n        \n        Args:\n            c (str): The character to be swapped.\n            \n        Returns:\n            str: The swapped character.\n        \"\"\"\n        if c.islower():\n            return c.upper()\n        elif c.isupper():\n            return c.lower()\n        else:\n            return c\n\n    encoded_message = \"\"\n    for char in message:\n        if char.lower() in \"aeiou\":\n            encoded_message += shift_char(char)\n        else:\n            encoded_message += swap_case(char)\n\n    return encoded_message\n", "from typing import List\n## main.py\n\ndef encode(message: str) -> str:\n    \"\"\"\n    Encodes a message by swapping the case of all letters and replacing all vowels with the letter that appears 2 places ahead of that vowel in the English alphabet.\n    \n    Args:\n        message (str): The input message to be encoded.\n        \n    Returns:\n        str: The encoded message.\n    \"\"\"\n    def swap_case(char: str) -> str:\n        \"\"\"\n        Swaps the case of a given character.\n        \n        Args:\n            char (str): The character to swap the case.\n            \n        Returns:\n            str: The character with swapped case.\n        \"\"\"\n        if char.islower():\n            return char.upper()\n        elif char.isupper():\n            return char.lower()\n        else:\n            return char\n\n    def replace_vowel(char: str) -> str:\n        \"\"\"\n        Replaces a vowel with the letter that appears 2 places ahead of that vowel in the English alphabet.\n        \n        Args:\n            char (str): The vowel to be replaced.\n            \n        Returns:\n            str: The replacement character.\n        \"\"\"\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            index = vowels.index(char)\n            replacement_index = (index + 2) % len(vowels)\n            return vowels[replacement_index]\n        else:\n            return char\n\n    encoded_message = ''\n    for char in message:\n        swapped_char = swap_case(char)\n        replaced_char = replace_vowel(swapped_char)\n        encoded_message += replaced_char\n\n    return encoded_message\n", "from typing import List\n## main.py\n\nimport string\n\ndef encode(message: str) -> str:\n    \"\"\"\n    Encodes a message by swapping the case of all letters and replacing vowels with the letter that appears 2 places ahead in the alphabet.\n    \n    Args:\n        message (str): The input message to be encoded.\n        \n    Returns:\n        str: The encoded message.\n    \"\"\"\n    def swap_case(char: str) -> str:\n        \"\"\"\n        Swaps the case of a character.\n        \n        Args:\n            char (str): The character to swap the case.\n            \n        Returns:\n            str: The character with swapped case.\n        \"\"\"\n        return char.lower() if char.isupper() else char.upper()\n\n    def shift_vowel(char: str) -> str:\n        \"\"\"\n        Replaces a vowel with the letter that appears 2 places ahead in the alphabet.\n        \n        Args:\n            char (str): The vowel to be replaced.\n            \n        Returns:\n            str: The letter that appears 2 places ahead.\n        \"\"\"\n        vowels = 'aeiou'\n        index = vowels.index(char.lower())\n        new_index = (index + 2) % len(vowels)\n        return vowels[new_index] if char.islower() else vowels[new_index].upper()\n\n    encoded_message = []\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                if char in 'aeiou':\n                    encoded_message.append(shift_vowel(char))\n                else:\n                    encoded_message.append(swap_case(char))\n            else:\n                if char.lower() in 'aeiou':\n                    encoded_message.append(shift_vowel(char.lower()).upper())\n                else:\n                    encoded_message.append(swap_case(char).lower())\n        else:\n            encoded_message.append(char)\n    \n    return ''.join(encoded_message)\n", "from typing import List\n## main.py\n\nimport string\n\ndef encode(message: str) -> str:\n    \"\"\"\n    Encodes a message by swapping the case of all letters and replacing vowels with the letter that appears 2 places ahead in the alphabet.\n    \n    Args:\n        message (str): The input message to be encoded.\n        \n    Returns:\n        str: The encoded message.\n    \"\"\"\n    def swap_case(c: str) -> str:\n        \"\"\"\n        Swaps the case of a given character.\n        \n        Args:\n            c (str): The character to swap the case.\n            \n        Returns:\n            str: The character with swapped case.\n        \"\"\"\n        if c.islower():\n            return c.upper()\n        elif c.isupper():\n            return c.lower()\n        else:\n            return c\n\n    def replace_vowel(c: str) -> str:\n        \"\"\"\n        Replaces a vowel with the letter that appears 2 places ahead in the alphabet.\n        \n        Args:\n            c (str): The character to be replaced if it's a vowel.\n            \n        Returns:\n            str: The replaced character or the original character if not a vowel.\n        \"\"\"\n        vowels = \"aeiouAEIOU\"\n        if c in vowels:\n            index = string.ascii_lowercase.index(c.lower())\n            replacement = string.ascii_lowercase[(index + 2) % 26]\n            return replacement.upper() if c.isupper() else replacement\n        return c\n\n    encoded_message = \"\"\n    for char in message:\n        char = swap_case(char)\n        char = replace_vowel(char)\n        encoded_message += char\n\n    return encoded_message\n", "from typing import List\n## main.py\n\ndef encode(message: str) -> str:\n    \"\"\"\n    Encodes a message by swapping the case of all letters and replacing all vowels with the letter that appears 2 places ahead in the alphabet.\n    \n    Args:\n        message (str): The input message to be encoded.\n        \n    Returns:\n        str: The encoded message.\n    \"\"\"\n    def swap_case(char: str) -> str:\n        \"\"\"\n        Swaps the case of a given character.\n        \n        Args:\n            char (str): The character to swap the case.\n            \n        Returns:\n            str: The character with swapped case.\n        \"\"\"\n        if char.islower():\n            return char.upper()\n        elif char.isupper():\n            return char.lower()\n        else:\n            return char\n\n    def replace_vowel(char: str) -> str:\n        \"\"\"\n        Replaces a vowel with the letter that appears 2 places ahead in the alphabet.\n        \n        Args:\n            char (str): The character to be replaced if it's a vowel.\n            \n        Returns:\n            str: The replaced character or the original character if not a vowel.\n        \"\"\"\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            if char.lower() == 'a':\n                return 'C'\n            elif char.lower() == 'e':\n                return 'G'\n            elif char.lower() == 'i':\n                return 'K'\n            elif char.lower() == 'o':\n                return 'Q'\n            elif char.lower() == 'u':\n                return 'W'\n            elif char.lower() == 'A':\n                return 'c'\n            elif char.lower() == 'E':\n                return 'g'\n            elif char.lower() == 'I':\n                return 'k'\n            elif char.lower() == 'O':\n                return 'q'\n            elif char.lower() == 'U':\n                return 'w'\n        else:\n            return char\n\n    encoded_message = ''\n    for char in message:\n        swapped_char = swap_case(char)\n        replaced_char = replace_vowel(swapped_char)\n        encoded_message += replaced_char\n\n    return encoded_message\n", "from typing import List\n## main.py\n\ndef encode(message: str) -> str:\n    \"\"\"\n    Encodes the input message by swapping the case of each letter, and replacing vowels with the letter two places ahead in the alphabet.\n    \n    Args:\n        message (str): The input message to be encoded.\n        \n    Returns:\n        str: The encoded message.\n    \"\"\"\n    def is_vowel(char: str) -> bool:\n        \"\"\"\n        Checks if a character is a vowel.\n        \n        Args:\n            char (str): The character to check.\n            \n        Returns:\n            bool: True if the character is a vowel, False otherwise.\n        \"\"\"\n        vowels = \"aeiouAEIOU\"\n        return char in vowels\n\n    def shift_vowel(char: str) -> str:\n        \"\"\"\n        Replaces a vowel with the letter two places ahead in the alphabet.\n        \n        Args:\n            char (str): The vowel to be replaced.\n            \n        Returns:\n            str: The letter two places ahead.\n        \"\"\"\n        alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        index = alphabet.find(char.lower())\n        if index != -1:\n            new_index = (index + 2) % 26\n            if char.islower():\n                return alphabet[new_index]\n            else:\n                return alphabet[new_index].upper()\n        return char\n\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += char.upper() if is_vowel(char) else char\n            else:\n                encoded_message += char.lower() if is_vowel(char.lower()) else char\n        else:\n            encoded_message += char\n\n    return encoded_message\n\n# Example usage:\n# encoded_message = encode(\"Hello World!\")\n# print(encoded_message)  # Output: \"Ifmmp Xpsme!\"\n", "from typing import List\n## main.py\n\nimport string\n\ndef encode(message: str) -> str:\n    \"\"\"\n    Encodes the input message by iterating through each character, swapping its case if it's a letter,\n    and replacing vowels with the letter that appears 2 places ahead in the alphabet.\n    \n    Args:\n        message (str): The input message to be encoded.\n        \n    Returns:\n        str: The encoded message.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    \n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                if char in vowels:\n                    # Replace vowel with the letter 2 places ahead\n                    new_char = chr(ord(char) + 2)\n                    encoded_message += new_char if new_char in string.ascii_lowercase else char\n                else:\n                    # Swap case\n                    encoded_message += char.upper()\n            else:\n                if char in vowels:\n                    # Replace vowel with the letter 2 places ahead\n                    new_char = chr(ord(char) + 2)\n                    encoded_message += new_char if new_char in string.ascii_uppercase else char\n                else:\n                    # Swap case\n                    encoded_message += char.lower()\n        else:\n            # Non-alphabetic characters remain unchanged\n            encoded_message += char\n    \n    return encoded_message\n", "from typing import List\n## main.py\n\ndef encode(message: str) -> str:\n    def swap_case(c: str) -> str:\n        return c.lower() if c.isupper() else c.upper()\n\n    def replace_vowel(c: str) -> str:\n        vowels = 'aeiou'\n        if c in vowels:\n            index = vowels.index(c)\n            return vowels[(index + 2) % len(vowels)]\n        return c\n\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            char = swap_case(char)\n        char = replace_vowel(char)\n        encoded_message += char\n    return encoded_message\n", "from typing import List\n## main.py\n\ndef encode(message: str) -> str:\n    \"\"\"\n    Encodes a message by swapping the case of all letters and replacing vowels with the letter that appears 2 places ahead in the alphabet.\n    \n    Args:\n        message (str): The input message to be encoded.\n        \n    Returns:\n        str: The encoded message.\n    \"\"\"\n    def is_vowel(char: str) -> bool:\n        \"\"\"\n        Checks if a character is a vowel.\n        \n        Args:\n            char (str): The character to check.\n            \n        Returns:\n            bool: True if the character is a vowel, False otherwise.\n        \"\"\"\n        vowels = \"aeiouAEIOU\"\n        return char in vowels\n\n    def shift_vowel(char: str) -> str:\n        \"\"\"\n        Replaces a vowel with the letter that appears 2 places ahead in the alphabet.\n        \n        Args:\n            char (str): The vowel to be replaced.\n            \n        Returns:\n            str: The letter that appears 2 places ahead.\n        \"\"\"\n        vowels = \"aeiou\"\n        if char in vowels:\n            index = vowels.index(char)\n            new_index = (index + 2) % len(vowels)\n            return vowels[new_index]\n        return char\n\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += char.upper()\n            else:\n                encoded_message += char.lower()\n        else:\n            encoded_message += shift_vowel(char)\n    return encoded_message\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that encodes a message by swapping the case of all letters and replacing vowels with the letter that appears 2 places ahead in the alphabet. This function should handle only letters and should be able to handle both uppercase and lowercase letters appropriately.\nrequirement pool:\n- The main code should correctly swap the case of all letters in the message.\n- The function should replace all vowels in the message with the letter that appears 2 places ahead in the English alphabet.\n- Ensure the function handles both uppercase and lowercase letters correctly.\n- Implement the function in a way that is efficient and easy to understand.\nTo implement the function that encodes a message by swapping the case of all letters and replacing vowels with the letter that appears 2 places ahead in the alphabet, we will use Python's built-in string manipulation functions and a simple approach to handle the encoding. We will define a function `encode` that takes a string `message` as input and returns the encoded message.\n", "requirement analysis:\nThe requirement is to create a function that encodes a message by swapping the case of all letters and replacing all vowels with the letter that appears 2 places ahead in the alphabet. This function should handle only letters and should be able to handle both uppercase and lowercase letters correctly.\nrequirement pool:\n- The main code should correctly swap the case of all letters.\n- The main code should correctly replace all vowels with the letter that appears 2 places ahead in the alphabet.\n- The function should handle both uppercase and lowercase letters.\n- The function should be able to handle messages with multiple words.\nTo implement the function that encodes a message by swapping the case of all letters and replacing all vowels with the letter that appears 2 places ahead in the alphabet, we will use Python's built-in string manipulation functions and a simple approach to handle the encoding. We will define a function `encode` that takes a string `message` as input and returns the encoded string.\n", "requirement analysis:\nThe requirement is to create a function that encodes a message by swapping the case of all letters and replacing all vowels with the letter that appears 2 places ahead of that vowel in the English alphabet. This function should only process letters and should handle both uppercase and lowercase letters appropriately.\nrequirement pool:\n- The main code should correctly swap the case of all letters in the message.\n- The function should replace all vowels in the message with the letter that appears 2 places ahead in the alphabet.\n- Ensure the function handles both uppercase and lowercase letters correctly.\n- Implement the function in a way that is easy to understand and use.\nTo implement the function that encodes a message by swapping the case of all letters and replacing all vowels with the letter that appears 2 places ahead of that vowel in the English alphabet, we will use Python's built-in string manipulation functions and a simple mapping for vowel replacement. The function will iterate through each character in the input message, check if it's a letter, and then apply the case swap and vowel replacement as per the rules.\n", "requirement analysis:\nThe requirement is to create a function that encodes a message by swapping the case of all letters and replacing vowels with the letter that appears 2 places ahead in the alphabet. This function should handle only letters and should be able to handle both uppercase and lowercase letters correctly.\nrequirement pool:\n- The main code should correctly swap the case of all letters in the message.\n- The function should replace all vowels in the message with the letter that appears 2 places ahead in the alphabet.\n- Ensure the function handles both uppercase and lowercase letters correctly.\n- The function should be able to handle messages containing spaces and other non-letter characters.\nTo implement the function that encodes a message by swapping the case of all letters and replacing vowels with the letter that appears 2 places ahead in the alphabet, we will use Python's built-in string manipulation functions and a simple mapping for vowel replacement. The function will iterate through each character in the input message, check if it's a letter, and then apply the case swap and vowel replacement as per the requirements.\n", "requirement analysis:\nThe requirement is to create a function that encodes a message by swapping the case of all letters and replacing vowels with the letter that appears 2 places ahead in the alphabet. This function should handle only letters and should be able to handle both uppercase and lowercase letters correctly.\nrequirement pool:\n- The main code should correctly swap the case of all letters in the message.\n- The function should replace all vowels in the message with the letter that appears 2 places ahead in the alphabet.\n- Ensure the function handles both uppercase and lowercase letters correctly.\n- Implement the function in a way that is easy to understand and use.\nTo implement the function that encodes a message by swapping the case of all letters and replacing vowels with the letter that appears 2 places ahead in the alphabet, we will use Python's built-in string manipulation functions and a simple mapping for vowel replacement. The function will iterate through each character in the input message, check if it's a letter, and then apply the case swap and vowel replacement as per the requirements. This approach ensures simplicity and readability.\n", "requirement analysis:\nThe requirement is to create a function that encodes a message by swapping the case of all letters and replacing all vowels with the letter that appears 2 places ahead in the alphabet. This function should handle only letters and should be able to handle both uppercase and lowercase letters correctly.\nrequirement pool:\n- The main code should correctly swap the case of all letters.\n- The function should replace all vowels with the letter that appears 2 places ahead in the alphabet.\n- The function should handle both uppercase and lowercase letters.\n- The function should be able to handle messages containing only letters.\nTo implement the function that encodes a message by swapping the case of all letters and replacing all vowels with the letter that appears 2 places ahead in the alphabet, we will use Python's built-in string manipulation functions and a simple mapping for vowel replacement. The function will iterate through each character in the input message, check if it's a letter, and then apply the case swap and vowel replacement as per the requirements.\n", "requirement analysis:\nThe requirement is to create a function that encodes a message by swapping the case of all letters and replacing vowels with the letter that appears 2 places ahead in the alphabet. This function should handle only letters and should be able to handle both uppercase and lowercase letters correctly.\nrequirement pool:\n- The main code should correctly swap the case of all letters.\n- The code should replace all vowels with the letter that appears 2 places ahead in the alphabet.\n- The function should handle both uppercase and lowercase letters.\n- The function should be able to process and encode messages of varying lengths.\nTo implement the encoding function, we will use Python's built-in string manipulation methods and a simple mapping for vowel replacement. The function will iterate through each character in the input message, check if it's a letter, and then swap its case. For vowels, it will replace them with the letter that appears two places ahead in the alphabet. This approach ensures simplicity and efficiency.\n", "requirement analysis:\nThe requirement is to create a function that encodes a message by swapping the case of all letters and replacing vowels with the letter that appears 2 places ahead in the alphabet. This function should handle only letters and should be able to handle both uppercase and lowercase letters appropriately.\nrequirement pool:\n- The main code should correctly swap the case of all letters.\n- The main code should correctly replace all vowels with the letter that appears 2 places ahead in the alphabet.\n- The function should handle both uppercase and lowercase letters.\n- The function should be able to process messages containing various lengths and combinations of letters and vowels.\nWe will implement the function by iterating through each character in the input message. For each character, we will check if it is a letter and then swap its case. If it is a vowel, we will replace it with the letter that appears 2 places ahead in the alphabet. We will use Python's built-in string methods and a predefined list of vowels to achieve this.\n", "requirement analysis:\nThe requirement is to create a function that encodes a message by swapping the case of all letters and replacing vowels with the letter that appears 2 places ahead in the alphabet. This function should handle only letters and should be efficient and easy to understand.\nrequirement pool:\n- The main code should efficiently swap case and replace vowels.\n- Ensure the function is easy to understand and maintain.\n- Implement a user-friendly interface for encoding messages.\n- Include options for customizing the encoding process.\n- Allow users to input and output messages in a clear, readable format.\nTo implement the function efficiently and ensure it is easy to understand, we will use Python's built-in string manipulation methods and a simple approach to swapping cases and replacing vowels. We will define a function that takes a string as input, iterates through each character, swaps its case if it's a letter, and replaces vowels with the letter that appears 2 places ahead in the alphabet.\n", "requirement analysis:\nThe requirement is to create a function that encodes a message by swapping the case of all letters and replacing vowels with the letter that appears 2 places ahead in the alphabet. This function should handle only letters and should be able to handle both uppercase and lowercase letters correctly.\nrequirement pool:\n- The main code should correctly swap the case of all letters.\n- The main code should correctly replace all vowels with the letter that appears 2 places ahead in the alphabet.\n- The function should handle both uppercase and lowercase letters.\n- The function should be able to handle messages containing only letters.\nTo implement the function that encodes a message by swapping the case of all letters and replacing vowels with the letter that appears 2 places ahead in the alphabet, we will use Python's built-in string manipulation functions and a simple approach to handle the encoding. We will define a function `encode` that takes a string `message` as input and returns the encoded message.\n"], "scores": [0.1462, 0.1462, 0.1462, 0.1462, 1.0, 0.2692, 0.0, 0.1462, 0.1462, 0.1462], "pass_results": [false, false, false, false, true, false, false, false, false, false], "pass_test_cases_num": [19, 19, 19, 19, 130, 35, 0, 19, 19, 19], "completion": "from typing import List\n## main.py\n\ndef encode(message: str) -> str:\n    \"\"\"\n    Encodes a message by swapping the case of all letters and replacing vowels with the letter that appears 2 places ahead in the alphabet.\n    \n    Args:\n        message (str): The input message to be encoded.\n        \n    Returns:\n        str: The encoded message.\n    \"\"\"\n    def is_vowel(char: str) -> bool:\n        \"\"\"\n        Checks if a character is a vowel.\n        \n        Args:\n            char (str): The character to check.\n            \n        Returns:\n            bool: True if the character is a vowel, False otherwise.\n        \"\"\"\n        vowels = \"aeiouAEIOU\"\n        return char in vowels\n\n    def shift_vowel(char: str) -> str:\n        \"\"\"\n        Replaces a vowel with the letter that appears 2 places ahead in the alphabet.\n        \n        Args:\n            char (str): The vowel to be replaced.\n            \n        Returns:\n            str: The letter that appears 2 places ahead.\n        \"\"\"\n        vowels = \"aeiou\"\n        if char in vowels:\n            index = vowels.index(char)\n            new_index = (index + 2) % len(vowels)\n            return vowels[new_index]\n        return char\n\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += char.upper()\n            else:\n                encoded_message += char.lower()\n        else:\n            encoded_message += shift_vowel(char)\n    return encoded_message\n", "passed": true, "pass": true, "pass_num": 1, "round": 72, "repair_prompt": ["def encode(message):\t\n'''Write a function that takes a message, and encodes in such a way that it swaps case of all letters and replaces all vowels in the message with the letter that appears 2 places ahead of that vowel in the English alphabet. Assume only letters.\nExamples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    '''"], "mutate_method": "condense_two2one", "parent_index": 72}
