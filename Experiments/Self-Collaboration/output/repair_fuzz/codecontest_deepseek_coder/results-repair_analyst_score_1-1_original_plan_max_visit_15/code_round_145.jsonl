{"name": "1622_A. Construct a Rectangle", "description": "There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYou are asked to break exactly one of them into two pieces in such a way that: \n\n  * both pieces have positive (strictly greater than 0) integer length; \n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides. \n\n\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "tags": ["geometry", "math"], "difficulty": 7, "id": 1622, "sample_io": [{"input": "4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n", "output": ["YES\nNO\nYES\nYES\n"]}], "test_list": [{"input": "2\n1 2 3\n2 2 4\n", "output": ["YES\nYES\n"]}, {"input": "1\n1 98 99\n", "output": ["YES\n"]}, {"input": "3\n1 1 1\n2 1 3\n5 6 7\n", "output": ["NO\nYES\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 6\n1 2 3\n6 7 8\n10 10 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nYES\n"]}, {"input": "4\n6 1 5\n2 5 2\n2 4 2\n7 101 108\n", "output": ["YES\nNO\nYES\nYES\n"]}, {"input": "1\n100000 100000 100000\n", "output": ["YES\n"]}, {"input": "1\n12344 1 1\n", "output": ["YES\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 2 3\n4 5 6\n", "output": ["YES\nNO\n"]}, {"input": "2\n1 3 3\n2 2 4\n", "output": ["NO\nYES\n"]}, {"input": "1\n1 98 186\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 6 7\n", "output": ["NO\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 108\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "1\n100000 100000 100100\n", "output": ["YES\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 1\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 1 3\n4 5 6\n", "output": ["NO\nNO\n"]}, {"input": "4\n6 1 5\n2 5 2\n2 4 2\n5 9 4\n", "output": ["YES\nNO\nYES\nYES\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 179\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n2 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 1\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n2 1 3\n1 5 6\n", "output": ["YES\nYES\n"]}, {"input": "4\n6 1 10\n2 6 2\n2 4 2\n7 101 144\n", "output": ["NO\nYES\nYES\nNO\n"]}, {"input": "3\n2 1 1\n2 1 2\n3 8 12\n", "output": ["YES\nNO\nNO\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 3\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 2 3\n4 8 6\n", "output": ["YES\nNO\n"]}, {"input": "3\n1 1 1\n1 1 2\n5 6 12\n", "output": ["NO\nYES\nNO\n"]}, {"input": "4\n6 1 10\n2 6 2\n3 4 2\n7 101 144\n", "output": ["NO\nYES\nNO\nNO\n"]}, {"input": "3\n2 1 1\n1 1 2\n5 6 12\n", "output": ["YES\nYES\nNO\n"]}, {"input": "6\n2 2 6\n1 1 2\n3 10 6\n2 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "3\n3 1 1\n2 1 2\n1 8 9\n", "output": ["NO\nNO\nYES\n"]}, {"input": "6\n2 2 4\n1 1 1\n3 5 18\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n1 1 10\n2 6 2\n3 4 2\n7 101 144\n", "output": ["YES\nYES\nNO\nNO\n"]}, {"input": "3\n3 1 1\n2 2 2\n1 8 9\n", "output": ["NO\nYES\nYES\n"]}, {"input": "1\n12344 2 1\n", "output": ["NO\n"]}, {"input": "1\n2 98 186\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 6 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 10 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "1\n100010 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 2 1\n", "output": ["NO\n"]}, {"input": "2\n1 1 3\n1 5 6\n", "output": ["NO\nYES\n"]}, {"input": "1\n2 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 144\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n100110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 4 1\n", "output": ["NO\n"]}, {"input": "1\n1 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n3 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100110 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 3 1\n", "output": ["NO\n"]}, {"input": "1\n100111 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 3 1\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n1 8 12\n", "output": ["YES\nNO\nNO\n"]}, {"input": "1\n100011 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 3 2\n", "output": ["NO\n"]}, {"input": "1\n100011 101001 100100\n", "output": ["NO\n"]}, {"input": "1\n100011 101001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 101001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n100011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n100011 001001 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111001\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001111 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001010 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 111111\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 011111\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011100\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011000\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010011 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010111 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010111 100011 001000\n", "output": ["NO\n"]}, {"input": "1\n010111 000011 001000\n", "output": ["NO\n"]}, {"input": "1\n010111 000011 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 100010 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 100010 000001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 000001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 000011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 000011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 100011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 101011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 000011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 100011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 101011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 101001 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 101001 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 101101 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n010101 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n010101 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n110101 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n110101 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n110101 101101 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101101 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101100 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101110 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101110 101010\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 101010\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 101011\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 100011\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n011111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 101100 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 111110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n100111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n001111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n001101 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011111 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011101 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 111101 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100011\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100000\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 100000\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n000011 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n000011 111001 000011\n", "output": ["NO\n"]}, {"input": "1\n100011 111001 000011\n", "output": ["NO\n"]}, {"input": "1\n100011 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n100011 111101 000010\n", "output": ["NO\n"]}, {"input": "1\n100011 111101 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 111100 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 110100 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 111100 011010\n", "output": ["NO\n"]}, {"input": "1\n100011 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101011 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 110100 011110\n", "output": ["NO\n"]}, {"input": "1\n001111 110100 011110\n", "output": ["NO\n"]}, {"input": "1\n101111 010100 011110\n", "output": ["NO\n"]}, {"input": "1\n101111 010100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 111010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 111011\n", "output": ["NO\n"]}, {"input": "1\n001111 010000 111011\n", "output": ["NO\n"]}, {"input": "1\n001111 010000 111001\n", "output": ["NO\n"]}, {"input": "2\n1 4 3\n2 2 4\n", "output": ["YES\nYES\n"]}, {"input": "1\n1 98 108\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 4\n5 6 7\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100010 100000 100000\n", "output": ["YES\n"]}, {"input": "1\n2465 1 1\n", "output": ["NO\n"]}, {"input": "4\n6 2 5\n2 5 2\n2 4 2\n5 5 4\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "2\n1 3 3\n4 2 4\n", "output": ["NO\nYES\n"]}, {"input": "1\n3 98 186\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n5 6 7\n", "output": ["YES\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 10\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 3 2\n2 4 2\n7 101 108\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "1\n100010 100001 100000\n", "output": ["NO\n"]}, {"input": "1\n19251 2 1\n", "output": ["NO\n"]}, {"input": "2\n1 1 3\n4 5 1\n", "output": ["NO\nYES\n"]}, {"input": "4\n9 1 5\n2 5 2\n2 4 2\n5 9 4\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "6\n2 2 6\n1 1 2\n3 10 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n10 1 10\n2 5 2\n2 4 2\n7 101 179\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n110010 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n8323 2 1\n", "output": ["NO\n"]}, {"input": "1\n3 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 4\n5 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "4\n6 1 9\n2 5 2\n2 4 2\n7 101 144\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n101110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n21283 4 1\n", "output": ["NO\n"]}, {"input": "2\n2 1 3\n1 5 5\n", "output": ["YES\nNO\n"]}, {"input": "1\n1 98 468\n", "output": ["NO\n"]}, {"input": "1\n110110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n35510 2 1\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n3 8 17\n", "output": ["YES\nNO\nNO\n"]}, {"input": "1\n110111 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n12451 3 1\n", "output": ["NO\n"]}, {"input": "3\n3 1 1\n2 1 2\n1 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100001 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 2 2\n", "output": ["NO\n"]}, {"input": "1\n100010 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n100011 100001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 100010\n", "output": ["NO\n"]}, {"input": "1\n110011 000001 110000\n", "output": ["NO\n"]}, {"input": "1\n101011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 111000\n", "output": ["NO\n"]}, {"input": "1\n101011 001101 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 011101 111001\n", "output": ["NO\n"]}, {"input": "1\n100001 001101 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001111 011011\n", "output": ["NO\n"]}, {"input": "1\n101011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001110 110011\n", "output": ["YES\n"]}, {"input": "1\n110111 001010 111011\n", "output": ["NO\n"]}, {"input": "1\n010011 001011 111011\n", "output": ["NO\n"]}, {"input": "1\n110111 000011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 010011 011111\n", "output": ["NO\n"]}, {"input": "1\n010011 000011 011111\n", "output": ["NO\n"]}, {"input": "1\n110011 010011 011101\n", "output": ["NO\n"]}, {"input": "1\n110010 100011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011110\n", "output": ["NO\n"]}, {"input": "1\n111011 100011 011000\n", "output": ["YES\n"]}, {"input": "1\n110011 000011 001100\n", "output": ["NO\n"]}, {"input": "1\n010110 100011 001100\n", "output": ["NO\n"]}], "task_id": "codecontest/154", "prompt": "There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYou are asked to break exactly one of them into two pieces in such a way that: \n\n  * both pieces have positive (strictly greater than 0) integer length; \n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides.\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nConsider all possible ways to split the sticks to ensure thorough examination of potential rectangles or squares.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "repair_prompt": ["There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYou are asked to break exactly one of them into two pieces in such a way that: \n\n  * both pieces have positive (strictly greater than 0) integer length; \n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides.\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nConsider all possible ways to split the sticks to ensure thorough examination of potential rectangles or squares.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin", " There are three sticks with integer lengths l_1, l_2, and l_3. You need to break exactly one of them into two pieces, ensuring both pieces have positive integer lengths greater than 0 and their total length equals the original length of the stick. After this operation, you should check if it's possible to form a rectangle or a square using all four resulting sticks, with each stick serving as one side of the shape. Determine if this can be achieved. Explore all possible ways to split the sticks to ensure a comprehensive evaluation of potential rectangles or squares.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin", " There are three sticks with integer lengths l_1, l_2, and l_3. You are asked to break exactly one of them into two pieces such that both pieces have positive integer lengths and their total equals the original stick's length, and it's possible to form a rectangle or square from the resulting four sticks. Determine if this is possible by considering all possible splits.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin"], "completion": "def can_form_rectangle(l1, l2, l3):\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check all possible ways to split one of the sticks\n    for i in range(3):\n        for j in range(1, lengths[i]):\n            # Split the stick at length j\n            pieces = [j, lengths[i] - j, lengths[(i + 1) % 3], lengths[(i + 2) % 3]]\n            # Check if the pieces can form a rectangle or a square\n            if pieces[0] > 0 and pieces[1] > 0 and pieces[2] > 0 and pieces[3] > 0:\n                sides = sorted(pieces)\n                if sides[0] == sides[1] and sides[2] == sides[3]:\n                    return \"YES\"\n    return \"NO\"\n\ndef main():\n    t = int(input().strip())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().strip().split())\n        result = can_form_rectangle(l1, l2, l3)\n        print(result)\nmain()", "completions": ["def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks have the same length\n    if l1 == l2 or l2 == l3 or l1 == l3:\n        return \"YES\"\n    # Check if the sum of any two sticks equals the third stick\n    if l1 + l2 == l3 or l1 + l3 == l2 or l2 + l3 == l1:\n        return \"YES\"\n    return \"NO\"\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        result = can_form_rectangle(l1, l2, l3)\n        print(result)\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] % 2 == 0) or (l[1] == l[2] and l[0] % 2 == 0):\n            print(\"YES\")\n        else:\n            print(\"NO\")\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if the two smaller sticks can be split to form a rectangle or square\n    if lengths[0] + lengths[1] == lengths[2]:\n        return \"YES\"\n    elif lengths[0] == lengths[1] and lengths[1] < lengths[2]:\n        return \"YES\"\n    elif lengths[0] == lengths[1] == lengths[2]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        result = can_form_rectangle(l1, l2, l3)\n        print(result)\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Sort the lengths of the sticks\n    sticks = sorted([l1, l2, l3])\n    \n    # Check if the two smallest sticks can form a rectangle with the largest stick\n    if sticks[0] + sticks[1] > sticks[2]:\n        return \"YES\"\n    \n    # Check if breaking one of the sticks into two pieces can form a rectangle\n    for i in range(3):\n        for j in range(1, sticks[i]):\n            if j != sticks[i] - j and (sticks[i] - j) > 0:\n                other_sticks = sorted([sticks[k] if k != i else j for k in range(3)])\n                other_sticks.append(sticks[i] - j)\n                if other_sticks[0] + other_sticks[1] == other_sticks[2]:\n                    return \"YES\"\n    return \"NO\"\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n    \n    # Process each test case\n    for _ in range(t):\n        # Read the stick lengths for the current test case\n        l1, l2, l3 = map(int, input().split())\n        \n        # Check if a valid split is possible and output the result\n        print(can_form_rectangle(l1, l2, l3))\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] % 2 == 0) or (l[1] == l[2] and l[0] % 2 == 0):\n            print(\"YES\")\n        else:\n            print(\"NO\")\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Sort the lengths to simplify the splitting process\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if the two smaller sticks can be split to form a rectangle or square\n    if lengths[0] + lengths[1] == lengths[2]:\n        return \"YES\"\n    elif lengths[0] == lengths[1] and lengths[1] != lengths[2]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n    \n    # Process each test case\n    for _ in range(t):\n        # Read the lengths of the three sticks\n        l1, l2, l3 = map(int, input().split())\n        \n        # Output the result for each test case\n        print(can_form_rectangle(l1, l2, l3))\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check all possible splits of the three sticks\n    if l1 == l2 + l3 or l2 == l1 + l3 or l3 == l1 + l2:\n        return True\n    if l1 == l2 and l3 % 2 == 0:\n        return True\n    if l1 == l3 and l2 % 2 == 0:\n        return True\n    if l2 == l3 and l1 % 2 == 0:\n        return True\n    return False\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        if can_form_rectangle(l1, l2, l3):\n            print(\"YES\")\n        else:\n            print(\"NO\")\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Sort the lengths of the sticks\n    sticks = sorted([l1, l2, l3])\n    \n    # Check if the two smallest sticks can form a rectangle with the largest stick\n    if sticks[0] + sticks[1] > sticks[2]:\n        return \"YES\"\n    \n    # Check if breaking the middle stick into two equal parts can form a rectangle\n    if sticks[0] + sticks[0] > sticks[2]:\n        return \"YES\"\n    \n    return \"NO\"\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n    \n    # Process each test case\n    for _ in range(t):\n        # Read the lengths of the sticks\n        l1, l2, l3 = map(int, input().split())\n        \n        # Output the result\n        print(can_form_rectangle(l1, l2, l3))\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check all possible splits\n    if l1 == l2 + l3 or l2 == l1 + l3 or l3 == l1 + l2:\n        return True\n    if l1 == l2 and l3 % 2 == 0:\n        return True\n    if l1 == l3 and l2 % 2 == 0:\n        return True\n    if l2 == l3 and l1 % 2 == 0:\n        return True\n    return False\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        if can_form_rectangle(l1, l2, l3):\n            print(\"YES\")\n        else:\n            print(\"NO\")\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check all possible ways to split one of the sticks\n    for i in range(3):\n        for j in range(1, lengths[i]):\n            # Split the stick at length j\n            pieces = [j, lengths[i] - j, lengths[(i + 1) % 3], lengths[(i + 2) % 3]]\n            # Check if the pieces can form a rectangle or a square\n            if pieces[0] > 0 and pieces[1] > 0 and pieces[2] > 0 and pieces[3] > 0:\n                sides = sorted(pieces)\n                if sides[0] == sides[1] and sides[2] == sides[3]:\n                    return \"YES\"\n    return \"NO\"\n\ndef main():\n    t = int(input().strip())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().strip().split())\n        result = can_form_rectangle(l1, l2, l3)\n        print(result)\nmain()"], "session_history": {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"action\": \"Parse the input to get the number of test cases.\"\n      },\n      {\n        \"description\": \"Read the lengths of the three sticks for each test case.\",\n        \"action\": \"Parse the input to get the lengths of the sticks for each test case.\"\n      },\n      {\n        \"description\": \"Check if any stick can be split into two pieces to form a rectangle.\",\n        \"action\": \"For each test case, check all possible ways to split a stick and see if it can form a rectangle.\"\n      },\n      {\n        \"description\": \"Determine if a rectangle can be formed with the resulting four sticks.\",\n        \"action\": \"For each possible split, check if the resulting four sticks can form a rectangle or a square.\"\n      },\n      {\n        \"description\": \"Output the result for each test case.\",\n        \"action\": \"Print 'YES' if a rectangle can be formed, otherwise print 'NO' for each test case.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize the number of test cases.\",\n        \"action\": \"Read the number of test cases from the input.\"\n      },\n      {\n        \"step\": \"Iterate through each test case.\",\n        \"action\": \"For each test case, read the lengths of the three sticks.\"\n      },\n      {\n        \"step\": \"Check all possible ways to split a stick.\",\n        \"action\": \"For each stick, try all possible pairs of positive integer lengths that sum to the original length of the stick.\"\n      },\n      {\n        \"step\": \"Form a rectangle with the resulting four sticks.\",\n        \"action\": \"For each possible split, check if the resulting four sticks can form a rectangle or a square.\"\n      },\n      {\n        \"step\": \"Output the result.\",\n        \"action\": \"Print 'YES' if a rectangle can be formed, otherwise print 'NO' for each test case.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'rectangle formation': means that the four sticks can be arranged to form a rectangle or a square.\n    Explanation: A rectangle can be formed if there are two pairs of sticks with equal lengths, and a square is a special case where all four sides are equal.\n\n# [phrase showing quantity relationship]\n    'positive (strictly greater than 0)': means that each piece of the stick must be greater than 0.\n    Explanation: This ensures that the pieces can be used to form a rectangle or a square.\n\n# [degree adverb] \n   ", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check all possible ways to split one of the sticks\n    for i in range(3):\n        for j in range(1, lengths[i]):\n            # Split the stick at length j\n            pieces = [j, lengths[i] - j, lengths[(i + 1) % 3], lengths[(i + 2) % 3]]\n            # Check if the pieces can form a rectangle or a square\n            if pieces[0] > 0 and pieces[1] > 0 and pieces[2] > 0 and pieces[3] > 0:\n                sides = sorted(pieces)\n                if sides[0] == sides[1] and sides[2] == sides[3]:\n                    return \"YES\"\n    return \"NO\"\n\ndef main():\n    t = int(input().strip())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().strip().split())\n        result = can_form_rectangle(l1, l2, l3)\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Read the number of test cases.\",\n      \"For each test case, read the lengths of the three sticks.\",\n      \"Determine if any one of the sticks can be split into two pieces such that the sum of the two pieces equals the original stick's length and the resulting four pieces can form a rectangle or square.\",\n      \"Output 'YES' if such a split is possible, otherwise output 'NO'.\"\n    ],\n    \"high_level_steps\": [\n      \"Initialize a counter for the number of test cases.\",\n      \"Read the number of test cases.\",\n      \"Loop through each test case:\",\n      \"  Read the lengths of the three sticks.\",\n      \"  Check if any two sticks have the same length or if the sum of any two sticks is equal to the third stick.\",\n      \"  If the above condition is met, output 'YES'.\",\n      \"  Otherwise, output 'NO'.\",\n      \"End loop.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'rectangle or square formation': means that the four sticks can be arranged to form either a rectangle or a square.\n    'positive integer lengths': implies that the pieces obtained from breaking a stick must be greater than zero.\n\n# [phrase showing quantity relationship]\n    No specific phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    The steps should be implemented sequentially as each step relies on the previous one.\n\n# [edge case] \n    Edge case 1:\n    Input: [", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks have the same length\n    if l1 == l2 or l2 == l3 or l1 == l3:\n        return \"YES\"\n    # Check if the sum of any two sticks equals the third stick\n    if l1 + l2 == l3 or l1 + l3 == l2 or l2 + l3 == l1:\n        return \"YES\"\n    return \"NO\"\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        result = can_form_rectangle(l1, l2, l3)\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"steps\": [\n          \"Read the first line of input to get the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case.\",\n        \"steps\": [\n          \"For each test case, read the three integers representing the lengths of the sticks.\",\n          \"Check if any stick can be split into two pieces such that the sum of the two pieces equals the original stick's length and forms a rectangle or square with the other three pieces.\",\n          \"Output 'YES' if such a split is possible, otherwise output 'NO'.\"\n        ]\n      },\n      {\n        \"description\": \"Check if the split forms a rectangle or square.\",\n        \"steps\": [\n          \"For each test case, sort the three stick lengths.\",\n          \"Check if the two smallest lengths sum to the largest length, which would form a square.\",\n          \"If not, check if the two smallest lengths are equal and the largest length is twice the smallest, which would form a rectangle.\"\n        ]\n      }\n    ],\n    \"major_steps\": [\n      \"Initialize the number of test cases.\",\n      \"Loop through each test case.\",\n      \"Read the stick lengths for the current test case.\",\n      \"Sort the stick lengths.\",\n      \"Check if the conditions for forming a rectangle or square are met.\",\n      \"Output the result for each test case.\",\n      \"End the program.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"steps\": [\n          \"Read the first line of input to get the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case.\",\n        \"steps\": [\n          \"For each test case, read the three integers representing the lengths of the sticks.\",\n          \"Check if any stick can be split into two pieces such that the sum of the two pieces equals the original stick", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[1] == l[2]):\n            print(\"YES\")\n        else:\n            print(\"NO\")", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] % 2 == 0) or (l[1] == l[2] and l[0] % 2 == 0):\n            print(\"YES\")\n        else:\n            print(\"NO\")"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Read the number of test cases.\",\n      \"For each test case, read the lengths of the three sticks.\",\n      \"Check if any stick can be split into two pieces with positive integer lengths that can form a rectangle or square.\",\n      \"Determine if the resulting four sticks can form a rectangle or square.\"\n    ],\n    \"major_steps\": [\n      \"Initialize a loop to read the number of test cases.\",\n      \"For each test case, read the lengths of the three sticks.\",\n      \"Sort the lengths of the sticks to simplify the splitting logic.\",\n      \"Check if the two smaller sticks can be split to form a rectangle or square with the largest stick.\",\n      \"Output 'YES' if a valid split and formation of rectangle or square is possible, otherwise output 'NO'.\",\n      \"Repeat for all test cases.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'rectangle or square': means forming a shape with four sides where opposite sides are equal in length.\n    'positive integer lengths': means the split pieces must be greater than 0.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 3-5 should be considered simultaneously.\n    \"Sort the lengths of the sticks to simplify the splitting logic.\"\n    This will help in easily checking if two smaller sticks can be split to form a rectangle", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if the two smaller sticks can be split to form a rectangle or square\n    if lengths[0] + lengths[1] == lengths[2]:\n        return \"YES\"\n    elif lengths[0] == lengths[1] and lengths[1] < lengths[2]:\n        return \"YES\"\n    elif lengths[0] == lengths[1] == lengths[2]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        result = can_form_rectangle(l1, l2, l3)\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"steps\": [\n          \"Read the first line of input to get the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case.\",\n        \"steps\": [\n          \"For each test case, read the three integers representing the lengths of the sticks.\",\n          \"Check if any of the sticks can be split into two positive integer lengths that can form a rectangle.\",\n          \"Output 'YES' if a valid split is found, otherwise output 'NO'.\"\n        ]\n      },\n      {\n        \"description\": \"Determine if a valid split can form a rectangle.\",\n        \"steps\": [\n          \"Sort the lengths of the sticks.\",\n          \"Check if the two smallest sticks can form a rectangle with the two largest sticks.\",\n          \"Consider the possibility of breaking the middle stick to check all combinations.\"\n        ]\n      }\n    ],\n    \"major_steps\": [\n      \"Initialize the number of test cases.\",\n      \"Loop through each test case.\",\n      \"Read the stick lengths for the current test case.\",\n      \"Sort the stick lengths.\",\n      \"Check if the two smallest sticks can form a rectangle with the two largest sticks.\",\n      \"If a valid split is found, print 'YES'; otherwise, print 'NO'.\",\n      \"Repeat for the next test case until all test cases are processed.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'rectangle formation': means that the four sticks can be arranged to form a rectangle or a square.\n    Explanation: A rectangle can be formed if there are two pairs of sticks with equal lengths. A square is a special case of a rectangle where all sides are equal.\n\n# [phrase showing quantity relationship]\n    'positive (strictly greater than 0)': means that the pieces obtained after splitting a stick must be greater than 0.\n    Explanation: This ensures that the pieces formed are valid for constructing a rectangle.\n\n# [degree adverb] \n   ", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Sort the lengths of the sticks\n    sticks = sorted([l1, l2, l3])\n    \n    # Check if the two smallest sticks can form a rectangle with the largest stick\n    if sticks[0] + sticks[1] > sticks[2]:\n        return \"YES\"\n    \n    # Check if breaking one of the sticks into two pieces can form a rectangle\n    for i in range(3):\n        for j in range(1, sticks[i]):\n            if j != sticks[i] - j and (sticks[i] - j) > 0:\n                other_sticks = sorted([sticks[k] if k != i else j for k in range(3)])\n                other_sticks.append(sticks[i] - j)\n                if other_sticks[0] + other_sticks[1] == other_sticks[2]:\n                    return \"YES\"\n    return \"NO\"\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n    \n    # Process each test case\n    for _ in range(t):\n        # Read the stick lengths for the current test case\n        l1, l2, l3 = map(int, input().split())\n        \n        # Check if a valid split is possible and output the result\n        print(can_form_rectangle(l1, l2, l3))", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Read the number of test cases.\",\n      \"For each test case, read the lengths of the three sticks.\",\n      \"Check if any stick can be split into two pieces with positive integer lengths that can form a rectangle or square.\",\n      \"Determine if the resulting four sticks can form a rectangle or square.\"\n    ],\n    \"major_steps\": [\n      \"Initialize a loop to read the number of test cases.\",\n      \"For each test case, read the lengths of the three sticks.\",\n      \"Check if any two sticks have the same length (which would be one side of the rectangle or square) and the sum of the other two sticks equals the length of the two equal sticks (which would be the other side of the rectangle or square).\",\n      \"If such a condition is met, print 'YES'. Otherwise, print 'NO'.\",\n      \"Repeat the process for the next test case until all test cases are processed.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'rectangle or square formation': This involves checking if four sticks can be arranged to form a rectangle or a square, where opposite sides are equal in length.\n    Explanation: The problem requires determining if the given sticks can be rearranged to form a geometric shape with equal sides.\n\n# [phrase showing quantity relationship]\n    'positive integer lengths': This indicates that the lengths of the pieces after breaking a stick must be greater than 0.\n    Explanation: The requirement specifies that the pieces formed after breaking a stick must be positive integers, ensuring they are valid lengths.\n\n", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] % 2 == 0) or (l[1] == l[2] and l[0] % 2 == 0):\n            print(\"YES\")\n        else:\n            print(\"NO\")", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 1 was given"}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] % 2 == 0) or (l[1] == l[2] and l[0] % 2 == 0):\n            print(\"YES\")\n        else:\n            print(\"NO\")"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Read the number of test cases.\",\n      \"For each test case, read the lengths of the three sticks.\",\n      \"Check if any stick can be split into two pieces with positive integer lengths that can form a rectangle or square.\",\n      \"Determine if the resulting four lengths can form a rectangle or square.\",\n      \"Output 'YES' if a rectangle or square can be formed, otherwise output 'NO'.\"\n    ],\n    \"high_level_steps\": [\n      \"Initialize a loop to read the number of test cases.\",\n      \"For each test case, read the lengths of the three sticks.\",\n      \"Sort the lengths to simplify the splitting process.\",\n      \"Check if the two smaller sticks can be split to form a rectangle or square.\",\n      \"Output the result for each test case.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'rectangle or square formation': The requirement involves checking if three given stick lengths can be rearranged to form a rectangle or square by potentially splitting one of the sticks.\n    Explanation: A rectangle has opposite sides of equal length, and a square has all sides of equal length. Splitting a stick allows for the creation of additional lengths that can be used to form the desired shape.\n\n# [phrase showing quantity relationship]\n    'positive integer lengths': Indicates that the split lengths must be greater than 0.\n    Explanation: This means that when splitting a stick, the resulting", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Sort the lengths to simplify the splitting process\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if the two smaller sticks can be split to form a rectangle or square\n    if lengths[0] + lengths[1] == lengths[2]:\n        return \"YES\"\n    elif lengths[0] == lengths[1] and lengths[1] != lengths[2]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n    \n    # Process each test case\n    for _ in range(t):\n        # Read the lengths of the three sticks\n        l1, l2, l3 = map(int, input().split())\n        \n        # Output the result for each test case\n        print(can_form_rectangle(l1, l2, l3))", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"action\": \"Parse the input to get the number of test cases.\"\n      },\n      {\n        \"description\": \"Read the lengths of the three sticks for each test case.\",\n        \"action\": \"Parse the input to get the lengths of the sticks for each test case.\"\n      },\n      {\n        \"description\": \"Check if any stick can be split into two pieces to form a rectangle.\",\n        \"action\": \"Iterate through the lengths and check all possible splits to see if they can form a rectangle.\"\n      },\n      {\n        \"description\": \"Determine if the resulting four pieces can form a rectangle or a square.\",\n        \"action\": \"For each valid split, check if the four pieces can form a rectangle (or a square).\"\n      },\n      {\n        \"description\": \"Output the result for each test case.\",\n        \"action\": \"Print 'YES' if a valid split is found, otherwise print 'NO'.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"description\": \"Initialize the program to handle multiple test cases.\",\n        \"action\": \"Read the number of test cases.\"\n      },\n      {\n        \"description\": \"For each test case, read the lengths of the three sticks.\",\n        \"action\": \"Iterate through the number of test cases and read the stick lengths.\"\n      },\n      {\n        \"description\": \"Check all possible ways to split a stick to form a rectangle.\",\n        \"action\": \"For each stick, try all possible splits that result in positive integer lengths for both pieces.\"\n      },\n      {\n        \"description\": \"Verify if the resulting four pieces can form a rectangle or a square.\",\n        \"action\": \"For each valid split, check if the four pieces can form a rectangle or a square.\"\n      },\n      {\n        \"description\": \"Output the results.\",\n        \"action\": \"Print 'YES' or 'NO' for each test case based on whether a valid rectangle can be formed.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"action\": \"Parse the input to get the number of test cases.\"\n      },\n      {\n        \"description\": \"Read the lengths of the three sticks for each test case.\",\n        \"action\": \"Parse the input to get the lengths of the sticks for each test case.\"\n      },\n      {\n        \"description\": \"Check if any stick can be split into two pieces to form a rectangle.\",\n        \"action\": \"", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check all possible splits of the three sticks\n    if l1 == l2 + l3 or l2 == l1 + l3 or l3 == l1 + l2:\n        return True\n    if l1 == l2 and l3 % 2 == 0:\n        return True\n    if l1 == l3 and l2 % 2 == 0:\n        return True\n    if l2 == l3 and l1 % 2 == 0:\n        return True\n    return False\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        if can_form_rectangle(l1, l2, l3):\n            print(\"YES\")\n        else:\n            print(\"NO\")", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 3 were given"}, "Round_1": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check all possible splits of the three sticks\n    if l1 == l2 + l3 or l2 == l1 + l3 or l3 == l1 + l2:\n        return True\n    if l1 == l2 and l3 % 2 == 0:\n        return True\n    if l1 == l3 and l2 % 2 == 0:\n        return True\n    if l2 == l3 and l1 % 2 == 0:\n        return True\n    return False\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        if can_form_rectangle(l1, l2, l3):\n            print(\"YES\")\n        else:\n            print(\"NO\")", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"steps\": [\n          \"Read the first line of input to get the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case.\",\n        \"steps\": [\n          \"For each test case, read the three integers representing the lengths of the sticks.\",\n          \"Check if any of the sticks can be split into two positive integer lengths that can form a rectangle.\",\n          \"Output 'YES' if a valid split is found, otherwise output 'NO'.\"\n        ]\n      },\n      {\n        \"description\": \"Determine if a valid split can form a rectangle.\",\n        \"steps\": [\n          \"Sort the lengths of the sticks.\",\n          \"Check if the two smallest sticks can form a rectangle with the two largest sticks.\",\n          \"Consider the possibility of breaking the middle stick to form a rectangle.\",\n          \"Ensure that the pieces formed are strictly greater than 0 and that the rectangle can be formed.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize the number of test cases.\",\n      \"Loop through each test case.\",\n      \"Read the lengths of the sticks.\",\n      \"Sort the lengths to simplify the problem.\",\n      \"Check if the two smallest lengths can form a rectangle with the largest length.\",\n      \"If not, check if breaking the middle stick in half can form a rectangle.\",\n      \"Output the result for each test case.\",\n      \"End the program.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'rectangle formation': means that we need to check if four sticks can form a rectangle or square with positive integer lengths.\n    Explanation: A rectangle can be formed if there are two pairs of sticks with equal lengths. A square is a special case of a rectangle where all sides are equal.\n\n# [phrase showing quantity relationship]\n    'positive (strictly greater than 0)': means that the lengths of the pieces after splitting must be greater than 0.\n    Explanation: This ensures that the pieces formed are valid for constructing a rectangle.\n\n# [degree adverb", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Sort the lengths of the sticks\n    sticks = sorted([l1, l2, l3])\n    \n    # Check if the two smallest sticks can form a rectangle with the largest stick\n    if sticks[0] + sticks[1] > sticks[2]:\n        return \"YES\"\n    \n    # Check if breaking the middle stick into two equal parts can form a rectangle\n    if sticks[0] + sticks[0] > sticks[2]:\n        return \"YES\"\n    \n    return \"NO\"\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n    \n    # Process each test case\n    for _ in range(t):\n        # Read the lengths of the sticks\n        l1, l2, l3 = map(int, input().split())\n        \n        # Output the result\n        print(can_form_rectangle(l1, l2, l3))", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"steps\": [\n          \"Read the first line of input to get the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case.\",\n        \"steps\": [\n          \"For each test case, read the three integers representing the lengths of the sticks.\",\n          \"Check if any stick can be split into two pieces such that the sum of the two pieces equals the original stick's length and forms a rectangle or square with the other three pieces.\",\n          \"Output 'YES' if such a split is possible, otherwise output 'NO'.\"\n        ]\n      },\n      {\n        \"description\": \"Check if a split forms a rectangle or square.\",\n        \"steps\": [\n          \"For each test case, consider all possible ways to split one of the sticks.\",\n          \"Check if the resulting four pieces can form a rectangle or square with at least one pair of equal lengths.\"\n        ]\n      }\n    ],\n    \"major_steps\": [\n      \"Initialize the number of test cases.\",\n      \"Loop through each test case.\",\n      \"Read the lengths of the sticks for the current test case.\",\n      \"Check all possible splits for each stick.\",\n      \"Determine if the resulting four pieces can form a rectangle or square.\",\n      \"Output the result for each test case.\",\n      \"End the program.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"steps\": [\n          \"Read the first line of input to get the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case.\",\n        \"steps\": [\n          \"For each test case, read the three integers representing the lengths of the sticks.\",\n          \"Check if any stick can be split into two pieces such that the sum of the two pieces equals the original stick", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check all possible splits\n    if l1 == l2 + l3 or l2 == l1 + l3 or l3 == l1 + l2:\n        return True\n    if l1 == l2 and l3 % 2 == 0:\n        return True\n    if l1 == l3 and l2 % 2 == 0:\n        return True\n    if l2 == l3 and l1 % 2 == 0:\n        return True\n    return False\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        if can_form_rectangle(l1, l2, l3):\n            print(\"YES\")\n        else:\n            print(\"NO\")", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 3 were given"}, "Round_1": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check all possible splits\n    if l1 == l2 + l3 or l2 == l1 + l3 or l3 == l1 + l2:\n        return True\n    if l1 == l2 and l3 % 2 == 0:\n        return True\n    if l1 == l3 and l2 % 2 == 0:\n        return True\n    if l2 == l3 and l1 % 2 == 0:\n        return True\n    return False\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        if can_form_rectangle(l1, l2, l3):\n            print(\"YES\")\n        else:\n            print(\"NO\")"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"action\": \"Parse the input to get the number of test cases.\"\n      },\n      {\n        \"description\": \"Read the lengths of the three sticks for each test case.\",\n        \"action\": \"Parse the input to get the lengths of the sticks for each test case.\"\n      },\n      {\n        \"description\": \"Check if any stick can be split into two pieces to form a rectangle.\",\n        \"action\": \"For each test case, check all possible ways to split a stick and see if it can form a rectangle.\"\n      },\n      {\n        \"description\": \"Determine if a rectangle can be formed with the resulting four sticks.\",\n        \"action\": \"For each possible split, check if the resulting four sticks can form a rectangle or a square.\"\n      },\n      {\n        \"description\": \"Output the result for each test case.\",\n        \"action\": \"Print 'YES' if a rectangle can be formed, otherwise print 'NO' for each test case.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize the number of test cases.\",\n        \"action\": \"Read the number of test cases from the input.\"\n      },\n      {\n        \"step\": \"Iterate through each test case.\",\n        \"action\": \"For each test case, read the lengths of the three sticks.\"\n      },\n      {\n        \"step\": \"Check all possible ways to split a stick.\",\n        \"action\": \"For each stick, try all possible pairs of positive integer lengths that sum to the original length of the stick.\"\n      },\n      {\n        \"step\": \"Form a rectangle with the resulting four sticks.\",\n        \"action\": \"For each possible split, check if the resulting four sticks can form a rectangle or a square.\"\n      },\n      {\n        \"step\": \"Output the result.\",\n        \"action\": \"Print 'YES' if a rectangle can be formed, otherwise print 'NO' for each test case.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'rectangle formation': means that the four sticks can be arranged to form a rectangle or a square.\n    Explanation: A rectangle can be formed if there are two pairs of sticks with equal lengths, and a square is a special case where all four sides are equal.\n\n# [phrase showing quantity relationship]\n    'positive (strictly greater than 0)': means that each piece of the stick must be greater than 0.\n    Explanation: This ensures that the pieces can be used to form a rectangle or a square.\n\n# [degree adverb] \n   ", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check all possible ways to split one of the sticks\n    for i in range(3):\n        for j in range(1, lengths[i]):\n            # Split the stick at length j\n            pieces = [j, lengths[i] - j, lengths[(i + 1) % 3], lengths[(i + 2) % 3]]\n            # Check if the pieces can form a rectangle or a square\n            if pieces[0] > 0 and pieces[1] > 0 and pieces[2] > 0 and pieces[3] > 0:\n                sides = sorted(pieces)\n                if sides[0] == sides[1] and sides[2] == sides[3]:\n                    return \"YES\"\n    return \"NO\"\n\ndef main():\n    t = int(input().strip())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().strip().split())\n        result = can_form_rectangle(l1, l2, l3)\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [true, false, true, true, false, false, false, false, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 145, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "mutate_method": "add_1_sentence_at_end", "save_node": false, "parent_index": 101}
