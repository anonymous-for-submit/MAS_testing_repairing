{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts. Every song should be included in exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. He believes the difference can be minimized further. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts. Every song should be included in exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. He believes the difference can be minimized further. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin", " Luntik has decided to try singing. He has a one-minute song, b two-minute songs, and c three-minute songs. He wants to distribute all songs into two concerts. Every song should be included in exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin", " Luntik has songs with durations a (one-minute), b (two-minute), and c (three-minute). He wants to distribute these songs into two concerts, minimizing the absolute difference in their durations. Find the smallest possible difference.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin"], "completion": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total duration of all songs\n        total_duration = a + 2*b + 3*c\n        \n        # The optimal way to minimize the difference is to distribute the songs\n        # such that one concert has the sum of durations of one-minute and three-minute songs,\n        # and the other concert has the sum of durations of two-minute songs.\n        # This is because the two-minute songs can be balanced out between the two concerts.\n        first_concert_duration = a + c\n        second_concert_duration = b\n        \n        # Calculate the absolute difference\n        difference = abs(first_concert_duration - second_concert_duration)\n        \n        # Output the minimal possible difference\n        print(difference)\nmain()", "completions": ["def find_minimal_difference(a, b, c):\n    total_songs = a + b + c\n    min_diff = float('inf')\n    \n    # Try all combinations of distributing the songs\n    for i in range(4):\n        for j in range(4):\n            if (a + b + c - (i + 2 * j)) % 2 == 0:\n                x = (a + b + c - (i + 2 * j)) // 2\n                y = i + 2 * j - (a + b + c)\n                min_diff = min(min_diff, abs(x - y))\n    \n    return min_diff\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        result = find_minimal_difference(a, b, c)\n        results.append(result)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        # The optimal way to minimize the difference is to distribute the songs\n        # such that one concert has more songs of the medium duration (2 minutes)\n        # and the other concert has the rest.\n        # This ensures that the difference is minimized.\n        # We can use the fact that 2 is the median duration and distribute accordingly.\n        \n        # Calculate the total duration of all songs\n        total_duration = a + 2*b + 3*c\n        \n        # The optimal way to split the concerts is to have one concert with\n        # the sum of durations of one-minute and three-minute songs,\n        # and the other concert with the sum of durations of two-minute songs.\n        # This ensures that the difference is minimized.\n        first_concert_duration = a + c\n        second_concert_duration = b\n        \n        # Calculate the absolute difference\n        difference = abs(first_concert_duration - second_concert_duration)\n        \n        # Output the minimal possible difference\n        print(difference)\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try all possible distributions and find the minimum difference\n        for i in range(3):\n            for j in range(3):\n                if i * 1 + j * 2 <= a and (2 - i) * 1 + (3 - j) * 2 <= b and (3 - i) * 1 + (4 - j) * 2 <= c:\n                    duration1 = i * 1 + j * 2 + (a - i - j) * 3\n                    duration2 = (2 - i) * 1 + (3 - j) * 2 + (b - (2 - i) - (3 - j)) * 3\n                    diff = abs(duration1 - duration2)\n                    min_diff = min(min_diff, diff)\n        \n        print(min_diff)\nmain()", "def find_minimal_difference(a, b, c):\n    # Calculate the total duration of all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Try all combinations of distributing the songs\n    for i in range(4):\n        for j in range(4):\n            # Calculate the duration of the first concert\n            first_concert_duration = (a - i) * 1 + (b - i) * 2 + (c - i) * 3\n            # Calculate the duration of the second concert\n            second_concert_duration = total_duration - first_concert_duration\n            # Calculate the absolute difference\n            diff = abs(first_concert_duration - second_concert_duration)\n            # Update the minimal difference\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n    \n    # Loop through each test case\n    for _ in range(t):\n        # Read the values of a, b, and c\n        a, b, c = map(int, input().split())\n        \n        # Find the minimal possible difference\n        min_diff = find_minimal_difference(a, b, c)\n        \n        # Output the result\n        print(min_diff)\nmain()", "def find_min_difference(a, b, c):\n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Try all possible distributions of songs between two concerts\n    for i in range(4):\n        for j in range(4):\n            # Calculate the duration of the first concert\n            first_concert_duration = (a + b*2 + c*3) - (i * (1 + 2) + j * (3))\n            # Calculate the duration of the second concert\n            second_concert_duration = total_duration - first_concert_duration\n            # Update the minimum difference\n            min_diff = min(min_diff, abs(first_concert_duration - second_concert_duration))\n    \n    return min_diff\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n    \n    # Loop through each test case\n    for _ in range(t):\n        # Read the values of a, b, and c\n        a, b, c = map(int, input().split())\n        # Find and print the minimal possible difference\n        print(find_min_difference(a, b, c))\nmain()", "def find_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    # Try all combinations to find the minimal difference\n    for i in range(4):\n        for j in range(4):\n            if (a + i) % 2 == (b + j) % 2 == 0:\n                duration1 = (a + i) // 2 + (b + j) // 2 * 2 + c * 3\n                duration2 = total_duration - duration1\n                min_diff = min(min_diff, abs(duration1 - duration2))\n    \n    return min_diff\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        result = find_minimal_difference(a, b, c)\n        results.append(result)\n    \n    for result in results:\n        print(result)\nmain()", "def find_minimal_difference(a, b, c):\n    # Calculate the total number of songs and the total duration\n    total_songs = a + b + c\n    total_duration = a * 1 + b * 2 + c * 3\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Try all possible distributions and find the minimal difference\n    for i in range(4):\n        for j in range(4):\n            # Calculate the duration of the first concert\n            first_duration = (a - i) * 1 + (b - j) * 2 + c * 3\n            # Calculate the duration of the second concert\n            second_duration = total_duration - first_duration\n            # Calculate the absolute difference\n            diff = abs(first_duration - second_duration)\n            # Update the minimal difference\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n    \n    # Loop through each test case\n    for _ in range(t):\n        # Read the number of one-minute, two-minute, and three-minute songs\n        a, b, c = map(int, input().split())\n        \n        # Calculate and print the minimal possible difference\n        print(find_minimal_difference(a, b, c))\nmain()", "def find_minimal_difference(a, b, c):\n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Try all possible distributions and find the minimal difference\n    for i in range(4):\n        for j in range(4):\n            # Calculate the duration of the first concert\n            first_concert_duration = (a + b + c) - (i * 1 + j * 2)\n            # Calculate the duration of the second concert\n            second_concert_duration = total_duration - first_concert_duration\n            # Calculate the absolute difference\n            diff = abs(first_concert_duration - second_concert_duration)\n            # Update the minimal difference\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n    \n    # Iterate through each test case\n    for _ in range(t):\n        # Read the number of one-minute, two-minute, and three-minute songs\n        a, b, c = map(int, input().split())\n        \n        # Calculate the minimal possible difference\n        min_diff = find_minimal_difference(a, b, c)\n        \n        # Output the minimal possible difference\n        print(min_diff)\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        # The optimal way to minimize the difference is to distribute the songs\n        # as evenly as possible. We can use a greedy approach to achieve this.\n        # First, we try to balance the two concerts by using the most abundant songs.\n        \n        # Calculate the total duration if we put as many three-minute songs as possible\n        # into one concert and the rest into the other.\n        duration1 = min(c, b) * 3\n        duration2 = (b - min(c, b)) * 3 + (c - min(c, b)) * 2\n        \n        # Calculate the total duration if we put as many two-minute songs as possible\n        # into one concert and the rest into the other.\n        duration1 = min(b, a + (b - a) // 2) * 3\n        duration2 = a + b - duration1 // 3\n        \n        # Calculate the total duration if we put as many one-minute songs as possible\n        # into one concert and the rest into the other.\n        duration1 = min(a, b + (a - b) // 2) * 3\n        duration2 = a + b - duration1 // 3\n        \n        # The minimal possible difference is the absolute difference between the two durations.\n        difference = abs(duration1 - duration2)\n        print(difference)\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total duration of all songs\n        total_duration = a + 2*b + 3*c\n        \n        # The optimal way to minimize the difference is to distribute the songs\n        # such that one concert has the sum of durations of one-minute and three-minute songs,\n        # and the other concert has the sum of durations of two-minute songs.\n        # This is because the two-minute songs can be balanced out between the two concerts.\n        first_concert_duration = a + c\n        second_concert_duration = b\n        \n        # Calculate the absolute difference\n        difference = abs(first_concert_duration - second_concert_duration)\n        \n        # Output the minimal possible difference\n        print(difference)\nmain()"], "session_history": {"plan": " ```json\n{\n  \"Plan\": {\n    \"Subproblems\": [\n      {\n        \"Description\": \"Read the number of test cases.\",\n        \"Details\": \"The program should start by reading the number of test cases 't' from the input.\"\n      },\n      {\n        \"Description\": \"Read the number of one-minute, two-minute, and three-minute songs for each test case.\",\n        \"Details\": \"For each test case, read the values of 'a', 'b', and 'c' representing the number of one-minute, two-minute, and three-minute songs respectively.\"\n      },\n      {\n        \"Description\": \"Calculate the optimal distribution of songs to minimize the absolute difference in concert durations.\",\n        \"Details\": \"Determine the best way to distribute the songs into two concerts to minimize the absolute difference in their durations. This involves considering the distribution of the three-minute songs first, then the two-minute songs, and finally the one-minute songs.\"\n      },\n      {\n        \"Description\": \"Output the minimal possible difference for each test case.\",\n        \"Details\": \"For each test case, output the smallest possible difference in minutes between the durations of the two concerts.\"\n      }\n    ],\n    \"HighLevelSteps\": [\n      {\n        \"Step\": 1,\n        \"Description\": \"Initialize the program to read the number of test cases.\"\n      },\n      {\n        \"Step\": 2,\n        \"Description\": \"Loop through each test case.\"\n      },\n      {\n        \"Step\": 3,\n        \"Description\": \"For each test case, read the values of 'a', 'b', and 'c'.\"\n      },\n      {\n        \"Step\": 4,\n        \"Description\": \"Calculate the optimal distribution of songs to minimize the absolute difference.\"\n      },\n      {\n        \"Step\": 5,\n        \"Description\": \"Output the minimal possible difference for the current test case.\"\n      },\n      {\n        \"Step\": 6,\n        \"Description\": \"Repeat steps 2-5 for each test case until all test cases are processed.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups with the smallest possible difference in their total durations.\n    Explanation: The problem requires finding the optimal way to split the given songs into two concerts such that the absolute difference in their total durations is minimized.\n\n# [phrase showing quantity relationship]\n    'more than': means that the number of songs in one group should be greater than the number of songs in the other group.\n    'at least as many times': means that the number of songs in one group should be at least equal to the number of times the song'", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total duration of all songs\n        total_duration = a + 2*b + 3*c\n        \n        # The optimal way to minimize the difference is to distribute the songs\n        # such that one concert has the sum of durations of one-minute and three-minute songs,\n        # and the other concert has the sum of durations of two-minute songs.\n        # This is because the two-minute songs can be balanced out between the two concerts.\n        first_concert_duration = a + c\n        second_concert_duration = b\n        \n        # Calculate the absolute difference\n        difference = abs(first_concert_duration - second_concert_duration)\n        \n        # Output the minimal possible difference\n        print(difference)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Read the number of test cases.\",\n      \"For each test case, read the number of one-minute, two-minute, and three-minute songs.\",\n      \"Determine the optimal way to distribute the songs to minimize the absolute difference in concert durations.\",\n      \"Calculate the minimal possible difference in minutes between the concerts durations.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize a variable to store the total number of test cases.\",\n      \"Loop through each test case.\",\n      \"For each test case, read the number of one-minute, two-minute, and three-minute songs.\",\n      \"Calculate the total number of songs and their total duration.\",\n      \"Determine the optimal distribution of songs to minimize the absolute difference in concert durations.\",\n      \"Output the minimal possible difference for each test case.\",\n      \"End the loop after processing all test cases.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning songs to two concerts to minimize the difference in their total durations.\n    'absolute difference': means the smallest possible difference between the two concert durations.\n\n# [phrase showing quantity relationship]\n    No specific phrase showing quantity relationship.\n\n# [degree adverb] \n    No specific degree adverb.\n\n# [code logic]\n    The steps should be implemented sequentially as each test case needs to be processed independently.\n\n# [edge case] \n    Edge case 1:\n    Input: 1 1 1\n    Ex", "Round_0": {"code": "def find_minimal_difference(a, b, c):\n    total_songs = a + b + c\n    min_diff = float('inf')\n    \n    # Try all combinations of distributing the songs\n    for i in range(4):\n        for j in range(4):\n            if (a + b + c - (i + 2 * j)) % 2 == 0:\n                x = (a + b + c - (i + 2 * j)) // 2\n                y = i + 2 * j - (a + b + c)\n                min_diff = min(min_diff, abs(x - y))\n    \n    return min_diff\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        result = find_minimal_difference(a, b, c)\n        results.append(result)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Plan\": {\n    \"Subproblems\": [\n      {\n        \"Subproblem\": \"Read the number of test cases from input.\",\n        \"Details\": \"The program should start by reading the number of test cases, t, which is the first line of input.\"\n      },\n      {\n        \"Subproblem\": \"Read the number of one-minute, two-minute, and three-minute songs for each test case.\",\n        \"Details\": \"For each test case, read the values of a, b, and c, which represent the number of one-minute, two-minute, and three-minute songs, respectively.\"\n      },\n      {\n        \"Subproblem\": \"Calculate the optimal distribution of songs to minimize the absolute difference in concert durations.\",\n        \"Details\": \"Determine the best way to distribute the songs into two concerts to minimize the absolute difference in their durations. This involves considering the distribution of songs based on their durations and the constraints given.\"\n      },\n      {\n        \"Subproblem\": \"Output the minimal possible difference for each test case.\",\n        \"Details\": \"For each test case, output the smallest possible difference in minutes between the durations of the two concerts.\"\n      }\n    ],\n    \"HighLevelPlan\": [\n      {\n        \"Step\": \"Initialize the program to read the number of test cases.\",\n        \"Details\": \"Start by reading the number of test cases, t.\"\n      },\n      {\n        \"Step\": \"Loop through each test case.\",\n        \"Details\": \"For each test case, read the values of a, b, and c.\"\n      },\n      {\n        \"Step\": \"Calculate the optimal distribution of songs.\",\n        \"Details\": \"Determine the best way to distribute the songs into two concerts based on their durations. This can be approached by trying different combinations and calculating the differences to find the minimum.\"\n      },\n      {\n        \"Step\": \"Output the result for each test case.\",\n        \"Details\": \"For each test case, output the smallest possible difference in minutes between the durations of the two concerts.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups with minimal difference in total duration.\n    Explanation: The problem requires finding the optimal way to split the given songs into two concerts such that the absolute difference in their total durations is minimized.\n\n# [phrase showing quantity relationship]\n    'more than': means that the number of songs in one group should be greater than the other.\n    'at least as many times': means that the number of songs in one group should be at least equal to the number of songs in the other group.\n\n# [degree adverb]", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        # The optimal way to minimize the difference is to distribute the songs\n        # such that one concert has more songs of the medium duration (2 minutes)\n        # and the other concert has the rest.\n        # This ensures that the difference is minimized.\n        # We can use the fact that 2 is the median duration and distribute accordingly.\n        \n        # Calculate the total duration of all songs\n        total_duration = a + 2*b + 3*c\n        \n        # The optimal way to split the concerts is to have one concert with\n        # the sum of durations of one-minute and three-minute songs,\n        # and the other concert with the sum of durations of two-minute songs.\n        # This ensures that the difference is minimized.\n        first_concert_duration = a + c\n        second_concert_duration = b\n        \n        # Calculate the absolute difference\n        difference = abs(first_concert_duration - second_concert_duration)\n        \n        # Output the minimal possible difference\n        print(difference)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        # The optimal way to minimize the difference is to distribute the songs\n        # such that one concert has more songs of the medium duration (2 minutes)\n        # and the other concert has the rest.\n        # This ensures that the difference is minimized.\n        # We can use the fact that 2 is the median duration and distribute accordingly.\n        \n        # Calculate the total duration of all songs\n        total_duration = a + 2*b + 3*c\n        \n        # The optimal way to split the concerts is to have one concert with\n        # the sum of durations of one-minute and three-minute songs,\n        # and the other concert with the sum of durations of two-minute songs.\n        # This ensures that the difference is minimized.\n        first_concert_duration = a + c\n        second_concert_duration = b\n        \n        # Calculate the absolute difference\n        difference = abs(first_concert_duration - second_concert_duration)\n        \n        # Output the minimal possible difference\n        print(difference)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Calculate the total duration of all songs.\",\n        \"details\": \"Sum the durations of one-minute, two-minute, and three-minute songs.\"\n      },\n      {\n        \"description\": \"Determine the optimal way to distribute songs to two concerts to minimize the difference in durations.\",\n        \"details\": \"Try to balance the distribution by assigning songs to concerts in a way that the total durations of both concerts are as close as possible.\"\n      },\n      {\n        \"description\": \"Calculate the difference between the two concert durations.\",\n        \"details\": \"Subtract the smaller duration from the larger duration to find the absolute difference.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Read the number of test cases.\",\n        \"details\": \"Use input() to read the number of test cases.\"\n      },\n      {\n        \"step\": \"Iterate through each test case.\",\n        \"details\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs.\"\n      },\n      {\n        \"step\": \"Calculate the total duration of all songs for the current test case.\",\n        \"details\": \"Sum the durations of one-minute, two-minute, and three-minute songs.\"\n      },\n      {\n        \"step\": \"Distribute the songs to two concerts to minimize the difference in durations.\",\n        \"details\": \"Try to balance the distribution by assigning songs to concerts in a way that the total durations of both concerts are as close as possible.\"\n      },\n      {\n        \"step\": \"Calculate the difference between the two concert durations.\",\n        \"details\": \"Subtract the smaller duration from the larger duration to find the absolute difference.\"\n      },\n      {\n        \"step\": \"Output the minimal possible difference for the current test case.\",\n        \"details\": \"Use print() to output the result.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups with as close total duration as possible.\n    Explanation: Luntik wants to distribute his songs into two concerts such that the absolute difference in their durations is minimized. This involves balancing the total duration of songs in each concert.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship specifically mentioned.\n\n# [degree adverb] \n    No degree adverb specifically mentioned.\n\n# [code logic]\n    The steps should be implemented sequentially.\n    - Calculate the total duration of all songs.\n", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try all possible distributions and find the minimum difference\n        for i in range(3):\n            for j in range(3):\n                if i * 1 + j * 2 <= a and (2 - i) * 1 + (3 - j) * 2 <= b and (3 - i) * 1 + (4 - j) * 2 <= c:\n                    duration1 = i * 1 + j * 2 + (a - i - j) * 3\n                    duration2 = (2 - i) * 1 + (3 - j) * 2 + (b - (2 - i) - (3 - j)) * 3\n                    diff = abs(duration1 - duration2)\n                    min_diff = min(min_diff, diff)\n        \n        print(min_diff)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try all possible distributions and find the minimum difference\n        for i in range(3):\n            for j in range(3):\n                if i * 1 + j * 2 <= a and (2 - i) * 1 + (3 - j) * 2 <= b and (3 - i) * 1 + (4 - j) * 2 <= c:\n                    duration1 = i * 1 + j * 2 + (a - i - j) * 3\n                    duration2 = (2 - i) * 1 + (3 - j) * 2 + (b - (2 - i) - (3 - j)) * 3\n                    diff = abs(duration1 - duration2)\n                    min_diff = min(min_diff, diff)\n        \n        print(min_diff)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"details\": \"The program should start by reading the number of test cases, t, which is the first line of input.\"\n      },\n      {\n        \"description\": \"Read the number of one-minute, two-minute, and three-minute songs for each test case.\",\n        \"details\": \"For each test case, read the values of a, b, and c, which represent the number of one-minute, two-minute, and three-minute songs, respectively.\"\n      },\n      {\n        \"description\": \"Calculate the total duration of all songs.\",\n        \"details\": \"Compute the total duration of all songs by summing up the products of the number of each type of song and its duration.\"\n      },\n      {\n        \"description\": \"Determine the optimal distribution of songs to minimize the difference in concert durations.\",\n        \"details\": \"Distribute the songs between two concerts such that the absolute difference in their durations is minimized. This involves considering different combinations of songs to find the best distribution.\"\n      },\n      {\n        \"description\": \"Output the minimal possible difference for each test case.\",\n        \"details\": \"For each test case, output the minimal possible difference in minutes between the durations of the two concerts.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize the program to read the number of test cases.\",\n        \"details\": \"Start by reading the number of test cases, t.\"\n      },\n      {\n        \"step\": \"Loop through each test case.\",\n        \"details\": \"For each test case, read the values of a, b, and c.\"\n      },\n      {\n        \"step\": \"Calculate the total duration of all songs.\",\n        \"details\": \"Compute the total duration by summing the products of the number of each type of song and its duration.\"\n      },\n      {\n        \"step\": \"Distribute the songs to minimize the difference in concert durations.\",\n        \"details\": \"Attempt different distributions of songs between the two concerts and calculate the differences to find the minimal possible difference.\"\n      },\n      {\n        \"step\": \"Output the results.\",\n        \"details\": \"For\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means dividing the songs into two groups with minimal difference in total duration.\n    Explanation: The problem requires distributing the songs into two concerts such that the absolute difference in their durations is minimized. This involves finding an optimal way to allocate the songs to achieve the smallest possible difference.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be considered simultaneously. The optimal distribution can be achieved by trying different combinations of songs to find the one that", "Round_0": {"code": "def find_minimal_difference(a, b, c):\n    # Calculate the total duration of all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Try all combinations of distributing the songs\n    for i in range(4):\n        for j in range(4):\n            # Calculate the duration of the first concert\n            first_concert_duration = (a - i) * 1 + (b - i) * 2 + (c - i) * 3\n            # Calculate the duration of the second concert\n            second_concert_duration = total_duration - first_concert_duration\n            # Calculate the absolute difference\n            diff = abs(first_concert_duration - second_concert_duration)\n            # Update the minimal difference\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n    \n    # Loop through each test case\n    for _ in range(t):\n        # Read the values of a, b, and c\n        a, b, c = map(int, input().split())\n        \n        # Find the minimal possible difference\n        min_diff = find_minimal_difference(a, b, c)\n        \n        # Output the result\n        print(min_diff)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"details\": \"The program should start by reading the number of test cases, t, which is the first line of input.\"\n      },\n      {\n        \"description\": \"Read the number of one-minute, two-minute, and three-minute songs for each test case.\",\n        \"details\": \"For each test case, read the values of a, b, and c, which represent the number of one-minute, two-minute, and three-minute songs, respectively.\"\n      },\n      {\n        \"description\": \"Calculate the total duration of all songs.\",\n        \"details\": \"Compute the total duration of all songs by summing up the products of the number of each type of song and its duration.\"\n      },\n      {\n        \"description\": \"Determine the optimal distribution of songs to minimize the difference in concert durations.\",\n        \"details\": \"Distribute the songs between two concerts such that the absolute difference in their durations is minimized. This involves considering different combinations of songs to find the best distribution.\"\n      },\n      {\n        \"description\": \"Output the minimal possible difference for each test case.\",\n        \"details\": \"For each test case, output the minimal possible difference in minutes between the durations of the two concerts.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize the program to read the number of test cases.\",\n        \"details\": \"Start by reading the number of test cases, t.\"\n      },\n      {\n        \"step\": \"Loop through each test case.\",\n        \"details\": \"For each test case, read the values of a, b, and c.\"\n      },\n      {\n        \"step\": \"Calculate the total duration of all songs.\",\n        \"details\": \"Compute the total duration by summing the products of the number of each type of song and its duration.\"\n      },\n      {\n        \"step\": \"Distribute the songs to minimize the difference in concert durations.\",\n        \"details\": \"Attempt different distributions of songs between the two concerts and calculate the differences to find the minimal possible difference.\"\n      },\n      {\n        \"step\": \"Output the result for each test case.\",\n        \"\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': the process of dividing items or amounts into two or more groups or parts.\n    Explanation: In this problem, Luntik needs to distribute his songs into two concerts such that the absolute difference in their durations is minimized. This involves finding an optimal way to allocate the songs to achieve the smallest possible difference.\n\n# [phrase showing quantity relationship]\n    'more than': indicates that the number of songs of a certain duration should be considered when distributing them between concerts.\n    Explanation: For example, if there are multiple one-minute songs, they need to be", "Round_0": {"code": "def find_min_difference(a, b, c):\n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Try all possible distributions of songs between two concerts\n    for i in range(4):\n        for j in range(4):\n            # Calculate the duration of the first concert\n            first_concert_duration = (a + b*2 + c*3) - (i * (1 + 2) + j * (3))\n            # Calculate the duration of the second concert\n            second_concert_duration = total_duration - first_concert_duration\n            # Update the minimum difference\n            min_diff = min(min_diff, abs(first_concert_duration - second_concert_duration))\n    \n    return min_diff\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n    \n    # Loop through each test case\n    for _ in range(t):\n        # Read the values of a, b, and c\n        a, b, c = map(int, input().split())\n        # Find and print the minimal possible difference\n        print(find_min_difference(a, b, c))", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Read the number of test cases.\",\n      \"For each test case, read the number of one-minute, two-minute, and three-minute songs.\",\n      \"Calculate the total duration of all songs.\",\n      \"Determine the optimal way to distribute the songs into two concerts to minimize the absolute difference in durations.\",\n      \"Output the minimal possible difference for each test case.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize a variable to store the total number of test cases.\",\n      \"Loop through each test case.\",\n      \"For each test case, read the number of one-minute, two-minute, and three-minute songs.\",\n      \"Calculate the total duration of all songs.\",\n      \"Use a strategy to distribute the songs into two concerts to minimize the absolute difference in durations.\",\n      \"Output the minimal possible difference for each test case.\",\n      \"End loop after processing all test cases.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means dividing items into two groups with minimal difference in their sums.\n    Explanation: In this problem, Luntik has songs of different durations and he wants to distribute them into two concerts such that the difference in the total duration of the two concerts is minimized.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially.\n    - Read the number of test cases.\n    - For each test case, read", "Round_0": {"code": "def find_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    # Try all combinations to find the minimal difference\n    for i in range(4):\n        for j in range(4):\n            if (a + i) % 2 == (b + j) % 2 == 0:\n                duration1 = (a + i) // 2 + (b + j) // 2 * 2 + c * 3\n                duration2 = total_duration - duration1\n                min_diff = min(min_diff, abs(duration1 - duration2))\n    \n    return min_diff\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        result = find_minimal_difference(a, b, c)\n        results.append(result)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Read the number of test cases.\",\n      \"For each test case, read the number of one-minute, two-minute, and three-minute songs.\",\n      \"Determine the optimal way to distribute the songs to minimize the absolute difference in concert durations.\",\n      \"Calculate the minimal possible difference for each test case.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize a variable to store the total number of test cases.\",\n      \"Loop through each test case.\",\n      \"For each test case, read the number of one-minute, two-minute, and three-minute songs.\",\n      \"Calculate the total number of songs and the total duration.\",\n      \"Use a strategy to distribute the songs to minimize the absolute difference in concert durations.\",\n      \"Output the minimal possible difference for each test case.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning songs to two concerts to minimize the difference in their total durations.\n    'absolute difference': means the smallest possible difference between the two concert durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means to find the smallest difference between the two concert durations.\n\n# [code logic]\n    The steps should be implemented sequentially.\n    - Read the number of test cases.\n    - For each test case, read the number of one-minute,", "Round_0": {"code": "def find_minimal_difference(a, b, c):\n    # Calculate the total number of songs and the total duration\n    total_songs = a + b + c\n    total_duration = a * 1 + b * 2 + c * 3\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Try all possible distributions and find the minimal difference\n    for i in range(4):\n        for j in range(4):\n            # Calculate the duration of the first concert\n            first_duration = (a - i) * 1 + (b - j) * 2 + c * 3\n            # Calculate the duration of the second concert\n            second_duration = total_duration - first_duration\n            # Calculate the absolute difference\n            diff = abs(first_duration - second_duration)\n            # Update the minimal difference\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n    \n    # Loop through each test case\n    for _ in range(t):\n        # Read the number of one-minute, two-minute, and three-minute songs\n        a, b, c = map(int, input().split())\n        \n        # Calculate and print the minimal possible difference\n        print(find_minimal_difference(a, b, c))", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Calculate the total duration of all songs.\",\n        \"details\": \"Sum the durations of one-minute, two-minute, and three-minute songs.\"\n      },\n      {\n        \"description\": \"Determine the optimal way to distribute songs to two concerts to minimize the difference in durations.\",\n        \"details\": \"Try to balance the distribution by assigning songs to concerts in a way that the total durations of both concerts are as close as possible.\"\n      },\n      {\n        \"description\": \"Calculate the difference between the two concert durations.\",\n        \"details\": \"Subtract the smaller duration from the larger duration to find the absolute difference.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Read the number of test cases.\",\n        \"details\": \"Use input() to read the number of test cases.\"\n      },\n      {\n        \"step\": \"Iterate through each test case.\",\n        \"details\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs.\"\n      },\n      {\n        \"step\": \"Calculate the total duration of all songs for the current test case.\",\n        \"details\": \"Multiply the number of each type of song by its duration and sum these values.\"\n      },\n      {\n        \"step\": \"Distribute the songs to two concerts to minimize the difference in durations.\",\n        \"details\": \"Try to balance the distribution by assigning songs to concerts in a way that the total durations of both concerts are as close as possible.\"\n      },\n      {\n        \"step\": \"Calculate the difference between the two concert durations.\",\n        \"details\": \"Subtract the smaller duration from the larger duration to find the absolute difference.\"\n      },\n      {\n        \"step\": \"Output the minimal possible difference for the current test case.\",\n        \"details\": \"Use print() to output the calculated difference.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups with as close total duration as possible.\n    Explanation: Luntik wants to distribute his songs into two concerts such that the difference in the total duration of the two concerts is minimized.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implement simultaneously. The optimal distribution can be achieved by sorting the song durations and then trying to balance the total duration between the two concerts.\n\n", "Round_0": {"code": "def find_minimal_difference(a, b, c):\n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Try all possible distributions and find the minimal difference\n    for i in range(4):\n        for j in range(4):\n            # Calculate the duration of the first concert\n            first_concert_duration = (a + b + c) - (i * 1 + j * 2)\n            # Calculate the duration of the second concert\n            second_concert_duration = total_duration - first_concert_duration\n            # Calculate the absolute difference\n            diff = abs(first_concert_duration - second_concert_duration)\n            # Update the minimal difference\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n    \n    # Iterate through each test case\n    for _ in range(t):\n        # Read the number of one-minute, two-minute, and three-minute songs\n        a, b, c = map(int, input().split())\n        \n        # Calculate the minimal possible difference\n        min_diff = find_minimal_difference(a, b, c)\n        \n        # Output the minimal possible difference\n        print(min_diff)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Plan\": {\n    \"Subproblems\": [\n      {\n        \"Description\": \"Read the number of test cases.\",\n        \"Details\": \"The program should start by reading the number of test cases t from the input.\"\n      },\n      {\n        \"Description\": \"Read the number of one-minute, two-minute, and three-minute songs for each test case.\",\n        \"Details\": \"For each test case, read the values of a, b, and c.\"\n      },\n      {\n        \"Description\": \"Calculate the optimal distribution of songs into two concerts to minimize the absolute difference in their durations.\",\n        \"Details\": \"Determine the best way to allocate songs to two concerts to make their total durations as close as possible.\"\n      },\n      {\n        \"Description\": \"Output the minimal possible difference for each test case.\",\n        \"Details\": \"For each test case, output the smallest absolute difference between the durations of the two concerts.\"\n      }\n    ],\n    \"HighLevelSteps\": [\n      {\n        \"Step\": 1,\n        \"Description\": \"Initialize the program to read the number of test cases.\"\n      },\n      {\n        \"Step\": 2,\n        \"Description\": \"Loop through each test case.\"\n      },\n      {\n        \"Step\": 3,\n        \"Description\": \"For each test case, read the values of a, b, and c.\"\n      },\n      {\n        \"Step\": 4,\n        \"Description\": \"Calculate the optimal distribution of songs to minimize the absolute difference.\"\n      },\n      {\n        \"Step\": 5,\n        \"Description\": \"Output the result for each test case.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means the allocation of items or resources among different groups or containers to optimize a particular objective, in this case, minimizing the absolute difference in durations between two concerts.\n\n# [phrase showing quantity relationship]\n    No specific phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    The steps should be implemented sequentially.\n    - Read the number of test cases.\n    - For each test case, read the values of a, b, and c.\n    - Calculate the optimal distribution of songs", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        # The optimal way to minimize the difference is to distribute the songs\n        # as evenly as possible. We can use a greedy approach to achieve this.\n        # First, we try to balance the two concerts by using the most abundant songs.\n        \n        # Calculate the total duration if we put as many three-minute songs as possible\n        # into one concert and the rest into the other.\n        duration1 = min(c, b + (c - b) // 2) * 3\n        duration2 = b + c - duration1 // 3\n        \n        # Calculate the total duration if we put as many two-minute songs as possible\n        # into one concert and the rest into the other.\n        duration1 = min(b, a + (b - a) // 2) * 3\n        duration2 = a + b - duration1 // 3\n        \n        # Calculate the total duration if we put as many one-minute songs as possible\n        # into one concert and the rest into the other.\n        duration1 = min(a, b + (a - b) // 2) * 3\n        duration2 = a + b - duration1 // 3\n        \n        # The minimal possible difference is the absolute difference between the two durations.\n        difference = abs(duration1 - duration2)\n        print(difference)", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 1 was given"}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        # The optimal way to minimize the difference is to distribute the songs\n        # as evenly as possible. We can use a greedy approach to achieve this.\n        # First, we try to balance the two concerts by using the most abundant songs.\n        \n        # Calculate the total duration if we put as many three-minute songs as possible\n        # into one concert and the rest into the other.\n        duration1 = min(c, b) * 3\n        duration2 = (b - min(c, b)) * 3 + (c - min(c, b)) * 2\n        \n        # Calculate the total duration if we put as many two-minute songs as possible\n        # into one concert and the rest into the other.\n        duration1 = min(b, a + (b - a) // 2) * 3\n        duration2 = a + b - duration1 // 3\n        \n        # Calculate the total duration if we put as many one-minute songs as possible\n        # into one concert and the rest into the other.\n        duration1 = min(a, b + (a - b) // 2) * 3\n        duration2 = a + b - duration1 // 3\n        \n        # The minimal possible difference is the absolute difference between the two durations.\n        difference = abs(duration1 - duration2)\n        print(difference)"}}, {"plan": " ```json\n{\n  \"Plan\": {\n    \"Subproblems\": [\n      {\n        \"Description\": \"Read the number of test cases.\",\n        \"Details\": \"The program should start by reading the number of test cases 't' from the input.\"\n      },\n      {\n        \"Description\": \"Read the number of one-minute, two-minute, and three-minute songs for each test case.\",\n        \"Details\": \"For each test case, read the values of 'a', 'b', and 'c' representing the number of one-minute, two-minute, and three-minute songs respectively.\"\n      },\n      {\n        \"Description\": \"Calculate the optimal distribution of songs to minimize the absolute difference in concert durations.\",\n        \"Details\": \"Determine the best way to distribute the songs into two concerts to minimize the absolute difference in their durations. This involves considering the distribution of the three-minute songs first, then the two-minute songs, and finally the one-minute songs.\"\n      },\n      {\n        \"Description\": \"Output the minimal possible difference for each test case.\",\n        \"Details\": \"For each test case, output the smallest possible difference in minutes between the durations of the two concerts.\"\n      }\n    ],\n    \"HighLevelSteps\": [\n      {\n        \"Step\": 1,\n        \"Description\": \"Initialize the program to read the number of test cases.\"\n      },\n      {\n        \"Step\": 2,\n        \"Description\": \"Loop through each test case.\"\n      },\n      {\n        \"Step\": 3,\n        \"Description\": \"For each test case, read the values of 'a', 'b', and 'c'.\"\n      },\n      {\n        \"Step\": 4,\n        \"Description\": \"Calculate the optimal distribution of songs to minimize the absolute difference.\"\n      },\n      {\n        \"Step\": 5,\n        \"Description\": \"Output the minimal possible difference for the current test case.\"\n      },\n      {\n        \"Step\": 6,\n        \"Description\": \"Repeat steps 2-5 for each test case until all test cases are processed.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups with the smallest possible difference in their total durations.\n    Explanation: The problem requires finding the optimal way to split the given songs into two concerts such that the absolute difference in their total durations is minimized.\n\n# [phrase showing quantity relationship]\n    'more than': means that the number of songs in one group should be greater than the number of songs in the other group.\n    'at least as many times': means that the number of songs in one group should be at least equal to the number of times the song'", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total duration of all songs\n        total_duration = a + 2*b + 3*c\n        \n        # The optimal way to minimize the difference is to distribute the songs\n        # such that one concert has the sum of durations of one-minute and three-minute songs,\n        # and the other concert has the sum of durations of two-minute songs.\n        # This is because the two-minute songs can be balanced out between the two concerts.\n        first_concert_duration = a + c\n        second_concert_duration = b\n        \n        # Calculate the absolute difference\n        difference = abs(first_concert_duration - second_concert_duration)\n        \n        # Output the minimal possible difference\n        print(difference)", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [false, false, false, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": false, "pass": false, "pass_num": 1, "round": 90, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "expand_one2two", "save_node": true, "parent_index": 19}
