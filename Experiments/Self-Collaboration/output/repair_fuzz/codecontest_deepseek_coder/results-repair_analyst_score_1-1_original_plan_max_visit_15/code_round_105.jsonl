{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a of 3 positive integers, wrote out the sums of all non-empty subsequences of this array, and sorted them in non-decreasing order into an array b of 7 integers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8, and after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a and only has the array b left, so help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a of 3 positive integers, wrote out the sums of all non-empty subsequences of this array, and sorted them in non-decreasing order into an array b of 7 integers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8, and after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a and only has the array b left, so help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin", " Polycarp had an array a of 3 positive integers, wrote out the sums of all non-empty subsequences of this array, and sorted them in non-decreasing order into an array b of 7 integers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8, and after sorting, he got an array b = \\{1, \n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin", " Polycarp had an array b of 7 integers, which were the sums of all non-empty subsequences of the original array a of 3 positive integers, sorted in non-decreasing order. Help Polycarp restore the original array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin"], "completion": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The smallest three elements are a_1, a_2, and a_3\n        a_1 = b[0]\n        a_2 = b[1]\n        a_3 = b[6] - a_1 - a_2\n        \n        results.append(f\"{a_1} {a_2} {a_3}\")\n    \n    for result in results:\n        print(result)\nmain()", "completions": ["def restore_array(b):\n    b.sort()\n    a_1 = b[0] + b[1] - b[6]\n    a_2 = b[0] - a_1\n    a_3 = b[6] - a_1 - a_2\n    return a_1, a_2, a_3\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a_1, a_2, a_3 = restore_array(b)\n        print(a_1, a_2, a_3)\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        # The smallest three sums are the first three elements in the sorted array b\n        a = sorted(b[:3])\n        print(a[0], a[1], a[2])\nmain()", "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        print(a[0], a[1], a[2])\nmain()", "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The sum of all elements in the array a is the sum of all sums minus the sum of the 4 smallest sums\n        total_sum = sum(b)\n        a_sum = total_sum - b[0] - b[1] - b[2] - b[3]\n        \n        # The sum of the three elements in a is the sum of the 4 smallest sums minus the largest sum\n        a1 = a_sum - b[6]\n        a2 = a_sum - b[5]\n        a3 = a_sum - b[4]\n        \n        print(a1, a2, a3)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The smallest three sums are the original array a\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        results.append(' '.join(map(str, a)))\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[6] - b[0] - b[1]\n        print(a1, a2, a3)\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        # The smallest three sums will be the first three elements of the array b\n        a = [b[0], b[1] - b[0], b[6] - b[5] - b[0]]\n        print(a[0], a[1], a[2])\nmain()", "def restore_array():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The sum of all elements\n        total_sum = b[6]\n        \n        # The sum of three largest elements\n        max_sum = b[4] + b[5] + b[6]\n        \n        # The sum of two largest elements\n        second_max_sum = b[3] + b[4] + b[5]\n        \n        # The sum of the largest and smallest elements\n        max_min_sum = b[0] + b[4] + b[5]\n        \n        # The sum of the smallest and middle elements\n        min_mid_sum = b[0] + b[1] + b[2]\n        \n        # The sum of the middle and largest elements\n        mid_max_sum = b[1] + b[2] + b[3]\n        \n        # The sum of the smallest and second largest elements\n        min_second_max_sum = b[0] + b[1] + b[3]\n        \n        # The sum of the smallest and third largest elements\n        min_third_max_sum = b[0] + b[1] + b[2]\n        \n        # Solving these equations will give us the values of a[0], a[1], and a[2]\n        a2 = (min_mid_sum - min_second_max_sum + max_sum) // 2\n        a1 = (min_mid_sum - min_third_max_sum + max_sum) // 2\n        a0 = total_sum - a1 - a2\n        \n        results.append(f\"{a0} {a1} {a2}\")\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        # The smallest three sums are the first three elements in the sorted array b\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[6] - a1 - a2\n        print(a1, a2, a3)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The smallest three elements are a_1, a_2, and a_3\n        a_1 = b[0]\n        a_2 = b[1]\n        a_3 = b[6] - a_1 - a_2\n        \n        results.append(f\"{a_1} {a_2} {a_3}\")\n    \n    for result in results:\n        print(result)\nmain()"], "session_history": {"plan": " ```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      {\n        \"subproblem\": \"Read the number of test cases.\",\n        \"details\": \"The first line of input contains the number of test cases, t.\"\n      },\n      {\n        \"subproblem\": \"Read the array b for each test case.\",\n        \"details\": \"For each test case, read the 7 integers representing array b.\"\n      },\n      {\n        \"subproblem\": \"Determine the three integers a_1, a_2, and a_3.\",\n        \"details\": \"Given array b, reconstruct the original array a by identifying the sums that were used to form b.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize a list to store the results for all test cases.\",\n        \"details\": \"This will be a list where each element is the solution for a specific test case.\"\n      },\n      {\n        \"step\": \"Loop through each test case.\",\n        \"details\": \"For each test case, read the input and process to find the solution.\"\n      },\n      {\n        \"step\": \"Reconstruct array a from array b.\",\n        \"details\": \"Identify the three integers a_1, a_2, and a_3 by analyzing the sums in array b.\"\n      },\n      {\n        \"step\": \"Store the result for the current test case.\",\n        \"details\": \"Add the reconstructed array a to the results list.\"\n      },\n      {\n        \"step\": \"Output the results after processing all test cases.\",\n        \"details\": \"Print the results list.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"response\": {\n    \"plan\": {\n      \"subproblems\": [\n        \"Read the number of test cases.\",\n        \"Read the array b for each test case.\",\n        \"Determine the three integers a_1, a_2, and a_3.\"\n      ],\n      \"steps\": [\n        \"Initialize a list to store the results for all test cases.\",\n        \"Loop through each test case.\",\n        \"Reconstruct array a from array b.\",\n        \"Store the result for the current test case.\",\n        \"Output the results", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The smallest three elements are a_1, a_2, and a_3\n        a_1 = b[0]\n        a_2 = b[1]\n        a_3 = b[6] - a_1 - a_2\n        \n        results.append(f\"{a_1} {a_2} {a_3}\")\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The smallest three elements are a_1, a_2, and a_3\n        a_1 = b[0]\n        a_2 = b[1]\n        a_3 = b[6] - a_1 - a_2\n        \n        results.append(f\"{a_1} {a_2} {a_3}\")\n    \n    for result in results:\n        print(result)"}}, "session_historys": [{"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases from the input.\",\n        \"details\": \"The first line of the input contains the number of test cases, t.\"\n      },\n      {\n        \"description\": \"Read the array b for each test case.\",\n        \"details\": \"For each test case, read the 7 integers which represent the array b.\"\n      },\n      {\n        \"description\": \"Determine the possible values of a_1, a_2, and a_3.\",\n        \"details\": \"Given the array b, identify the possible values of a_1, a_2, and a_3. Since b is a sum of all non-empty subsequences of a, the smallest and second smallest elements of b must be sums of two elements from a, and the largest element of b must be the sum of all three elements of a.\"\n      },\n      {\n        \"description\": \"Sort and identify the original array a.\",\n        \"details\": \"Using the smallest and second smallest elements of b, deduce possible values for a_1 and a_2. Use the largest element of b to find a_3. Since a must be sorted, ensure the identified values are in non-decreasing order.\"\n      },\n      {\n        \"description\": \"Output the original array a for each test case.\",\n        \"details\": \"For each test case, output the values of a_1, a_2, and a_3 in non-decreasing order.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"description\": \"Initialize the program to read input.\",\n        \"details\": \"Start by reading the number of test cases t.\"\n      },\n      {\n        \"description\": \"Loop through each test case.\",\n        \"details\": \"For each test case, read the array b and process to find the original array a.\"\n      },\n      {\n        \"description\": \"Identify possible values for a_1, a_2, and a_3.\",\n        \"details\": \"Using the properties of subsequences and sums, deduce the values of a_1, a_2, and a_3 from the array b.\"\n      },\n      {\n        \"description\": \"Output the results.\",\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases from the input.\",\n        \"details\": \"The first line of the input contains the number of test cases, t.\"\n      },\n      {\n        \"description\": \"Read the array b for each test case.\",\n        \"details\": \"For each test case, read the 7 integers which represent the array b.\"\n      },\n      {\n        \"description\": \"Determine the possible values of a_1, a_2, and a", "Round_0": {"code": "def restore_array(b):\n    b.sort()\n    a_1 = b[0] + b[1] - b[6]\n    a_2 = b[0] - a_1\n    a_3 = b[6] - a_1 - a_2\n    return a_1, a_2, a_3\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a_1, a_2, a_3 = restore_array(b)\n        print(a_1, a_2, a_3)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def restore_array(b):\n    b.sort()\n    a_1 = b[0] + b[1] - b[6]\n    a_2 = b[0] - a_1\n    a_3 = b[6] - a_1 - a_2\n    return a_1, a_2, a_3\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a_1, a_2, a_3 = restore_array(b)\n        print(a_1, a_2, a_3)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      {\n        \"subproblem\": \"Read the input data for each test case.\",\n        \"details\": \"The program should read the number of test cases and then read the array b for each test case.\"\n      },\n      {\n        \"subproblem\": \"Identify the smallest three sums from the array b.\",\n        \"details\": \"Since the array b is sorted in non-decreasing order, the smallest three sums will be the first three elements of the array b.\"\n      },\n      {\n        \"subproblem\": \"Determine the original array a.\",\n        \"details\": \"Given the smallest three sums, the original array a can be reconstructed by finding the unique combination of three numbers that sum up to each of these smallest three sums.\"\n      },\n      {\n        \"subproblem\": \"Output the reconstructed array a for each test case.\",\n        \"details\": \"The program should output the reconstructed array a for each test case in the required format.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize the program to read input.\",\n        \"details\": \"Read the number of test cases and prepare to read the array b for each test case.\"\n      },\n      {\n        \"step\": \"Process each test case.\",\n        \"details\": \"For each test case, read the array b, identify the smallest three sums, and reconstruct the array a.\"\n      },\n      {\n        \"step\": \"Output the results.\",\n        \"details\": \"Output the reconstructed array a for each test case.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Read the input data for each test case.\",\n      \"Identify the smallest three sums from the array b.\",\n      \"Determine the original array a.\",\n      \"Output the reconstructed array a for each test case.\"\n    ],\n    \"steps\": [\n      \"Read the number of test cases.\",\n      \"For each test case, read the array b.\",\n      \"Identify the smallest three sums from the array b.\",\n      \"Reconstruct the original array a by finding the unique combination of three numbers that", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        # The smallest three sums are the first three elements in the sorted array b\n        a = sorted(b[:3])\n        print(a[0], a[1], a[2])", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        # The smallest three sums are the first three elements in the sorted array b\n        a = sorted(b[:3])\n        print(a[0], a[1], a[2])"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the input for the number of test cases and the arrays b for each test case.\",\n        \"steps\": [\n          \"Read the number of test cases t.\",\n          \"For each test case, read the 7 integers representing array b.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the three integers a_1, a_2, and a_3 from the array b.\",\n        \"steps\": [\n          \"For each test case, identify the three smallest integers in array b that can form a valid array a.\",\n          \"Since the sum of any two elements in array a will not appear in array b (because b contains all sums of non-empty subsequences), the three smallest elements in b will be a_1, a_2, and a_3.\"\n        ]\n      },\n      {\n        \"description\": \"Output the result for each test case.\",\n        \"steps\": [\n          \"For each test case, print the three integers a_1, a_2, and a_3.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize the number of test cases t.\",\n      \"For each test case:\",\n      \"  Read the array b of 7 integers.\",\n      \"  Identify the three smallest integers in array b.\",\n      \"  Print the three integers as the result for the current test case.\",\n      \"End loop for each test case.\",\n      \"End program.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the input for the number of test cases and the arrays b for each test case.\",\n        \"steps\": [\n          \"Read the number of test cases t.\",\n          \"For each test case, read the 7 integers representing array b.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the three integers a_1, a_2, and a_3 from the array b.\",\n        \"steps\": [\n          \"For each test case", "Round_0": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        print(a[0], a[1], a[2])", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        print(a[0], a[1], a[2])"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Read the number of test cases from the input.\",\n      \"For each test case, read the 7 integers representing the sums of all non-empty subsequences of the original array a.\",\n      \"Determine the possible values of the original array a by analyzing the given sums.\",\n      \"Output the original array a for each test case.\"\n    ],\n    \"high_level_steps\": [\n      \"Initialize a function to process each test case.\",\n      \"In the function, read the number of test cases.\",\n      \"For each test case, read the 7 integers representing the sums.\",\n      \"Analyze the given sums to deduce the possible values of the original array a.\",\n      \"Output the original array a for each test case.\",\n      \"Ensure the program handles multiple test cases efficiently.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'subsequence': a sequence that can be obtained from the original array by removing zero or more of its elements.\n    Explanation: In this problem, Polycarp is given the sums of all non-empty subsequences of an original array of 3 positive integers. These sums are provided in sorted order, and the task is to deduce the original array.\n\n# [phrase showing quantity relationship]\n    'non-empty subsequences': means that we need to consider all possible subsets of the original array, excluding the empty set.\n\n# [degree adverb] \n   ", "Round_0": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The sum of all elements in the array a is the sum of all sums minus the sum of the 4 smallest sums\n        total_sum = sum(b)\n        a_sum = total_sum - b[0] - b[1] - b[2] - b[3]\n        \n        # The sum of the three elements in a is the sum of the 4 smallest sums minus the largest sum\n        a1 = a_sum - b[6]\n        a2 = a_sum - b[5]\n        a3 = a_sum - b[4]\n        \n        print(a1, a2, a3)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The sum of all elements in the array a is the sum of all sums minus the sum of the 4 smallest sums\n        total_sum = sum(b)\n        a_sum = total_sum - b[0] - b[1] - b[2] - b[3]\n        \n        # The sum of the three elements in a is the sum of the 4 smallest sums minus the largest sum\n        a1 = a_sum - b[6]\n        a2 = a_sum - b[5]\n        a3 = a_sum - b[4]\n        \n        print(a1, a2, a3)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      {\n        \"subproblem\": \"Read the number of test cases.\",\n        \"details\": \"The first line of input contains the number of test cases, t.\"\n      },\n      {\n        \"subproblem\": \"Read the array b for each test case.\",\n        \"details\": \"For each test case, read the 7 integers representing array b.\"\n      },\n      {\n        \"subproblem\": \"Determine the three integers a_1, a_2, and a_3.\",\n        \"details\": \"Given array b, reconstruct the original array a by identifying the sums that form the elements of b.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize a list to store the results for all test cases.\",\n        \"details\": \"This will be a list where each element is the reconstructed array a for a corresponding test case.\"\n      },\n      {\n        \"step\": \"Loop through each test case.\",\n        \"details\": \"For each test case, read the input and process to find the original array a.\"\n      },\n      {\n        \"step\": \"Reconstruct the original array a.\",\n        \"details\": \"Using the sorted array b, identify the three integers that sum to each element in b. This can be done by iteratively subtracting known sums from b.\"\n      },\n      {\n        \"step\": \"Store the result for each test case.\",\n        \"details\": \"After reconstructing the array a for each test case, store it in the results list.\"\n      },\n      {\n        \"step\": \"Output the results.\",\n        \"details\": \"Print the results list, with each reconstructed array a on a new line.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'non-empty subsequences': means all possible combinations of the array elements excluding the empty set.\n    'sums of subsequences': means the sum of each non-empty subsequence.\n    'sorted in non-decreasing order': means the sums are arranged from smallest to largest.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implement simultaneously. The plan suggests iterating through the sorted array b to identify the three integers a_", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The smallest three sums are the original array a\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        results.append(' '.join(map(str, a)))\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      {\n        \"subproblem\": \"Read the number of test cases.\",\n        \"details\": \"The first line of input contains the number of test cases, t.\"\n      },\n      {\n        \"subproblem\": \"Read the array b for each test case.\",\n        \"details\": \"For each test case, read the 7 integers representing array b.\"\n      },\n      {\n        \"subproblem\": \"Determine the three integers a from array b.\",\n        \"details\": \"Given the sorted array b, identify the three integers a that were used to generate it. Since b is the sum of all non-empty subsequences of a, the smallest three elements in b must be a1, a2, and a3.\"\n      },\n      {\n        \"subproblem\": \"Output the three integers a for each test case.\",\n        \"details\": \"For each test case, output the three integers a that correspond to the smallest elements in the sorted array b.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize the program to read input.\",\n        \"details\": \"Start by reading the number of test cases t.\"\n      },\n      {\n        \"step\": \"Loop through each test case.\",\n        \"details\": \"For each test case, read the 7 integers representing array b.\"\n      },\n      {\n        \"step\": \"Identify the three smallest elements in array b.\",\n        \"details\": \"Sort the array b and select the first three elements as a1, a2, and a3.\"\n      },\n      {\n        \"step\": \"Output the result for each test case.\",\n        \"details\": \"Print the three integers a1, a2, and a3 for each test case.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Read the number of test cases.\",\n      \"Read the array b for each test case.\",\n      \"Determine the three integers a from array b.\",\n      \"Output the three integers a for each test case.\"\n    ],\n    \"steps\": [\n      \"Initialize the program to read input.\",\n      \"Read the number of test cases t.\",\n      \"Loop through each test case.\",\n      \"For each test case, read the 7 integers representing array b.\",\n      \"Identify the three smallest", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        print(a[0], a[1], a[2])", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[6] - b[0] - b[1]\n        print(a1, a2, a3)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      {\n        \"subproblem\": \"Read the input data for each test case.\",\n        \"details\": \"The program should read the number of test cases and then read the array b for each test case.\"\n      },\n      {\n        \"subproblem\": \"Identify the smallest three sums from the array b.\",\n        \"details\": \"Since the array b is sorted in non-decreasing order, the smallest three sums will be the first three elements of the array b.\"\n      },\n      {\n        \"subproblem\": \"Determine the original array a.\",\n        \"details\": \"Given the smallest three sums, the original array a can be reconstructed by finding the two missing elements from the sums. This can be done by subtracting the smallest sums from the next larger sums to find the individual elements of a.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Read the number of test cases.\",\n        \"details\": \"The program should start by reading the number of test cases t.\"\n      },\n      {\n        \"step\": \"Loop through each test case.\",\n        \"details\": \"For each test case, read the array b of 7 integers.\"\n      },\n      {\n        \"step\": \"Identify the smallest three sums.\",\n        \"details\": \"Extract the first three elements from the sorted array b as these will be the smallest sums.\"\n      },\n      {\n        \"step\": \"Reconstruct the original array a.\",\n        \"details\": \"Subtract the smallest sum from the second smallest sum to find the first element of a, repeat this process to find the second and third elements of a.\"\n      },\n      {\n        \"step\": \"Output the result for each test case.\",\n        \"details\": \"Print the reconstructed array a for each test case.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Read the input data for each test case.\",\n      \"Identify the smallest three sums from the array b.\",\n      \"Determine the original array a.\",\n      \"Output the result for each test case.\"\n    ],\n    \"steps\": [\n      \"Read the number of test cases t.\",\n      \"Loop through each test case.\",\n      {\n        \"step\": \"Read the array b of 7 integers for each test case.\",\n        \"details\": \"The program should read the array b which", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        # The smallest three sums will be the first three elements of the array b\n        a = [b[0], b[1] - b[0], b[6] - b[5] - b[0]]\n        print(a[0], a[1], a[2])", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        # The smallest three sums will be the first three elements of the array b\n        a = [b[0], b[1] - b[0], b[6] - b[5] - b[0]]\n        print(a[0], a[1], a[2])"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Read the number of test cases from the input.\",\n      \"For each test case, read the 7 integers representing the sums of all non-empty subsequences of the original array a.\",\n      \"Determine the possible values of the original array a based on the given sums.\",\n      \"Output the original array a for each test case.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize a list to store the results for all test cases.\",\n      \"Loop through each test case.\",\n      \"Read the 7 integers representing the sums.\",\n      \"Determine the possible values of the original array a by solving the equation that relates the sums to the elements of a.\",\n      \"Store the result for the current test case.\",\n      \"After processing all test cases, print the results.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'subsequence': A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n    Explanation: In this problem, Polycarp is given the sums of all non-empty subsequences of an original array of 3 positive integers. The goal is to restore the original array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially.\n    For", "Round_0": {"code": "def restore_array():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The sum of all non-empty subsequences of a 3-element array a can be expressed as:\n        # a[0] + a[1] + a[2], a[0] + a[1], a[0] + a[2], a[1] + a[2], a[0], a[1], a[2]\n        # Given the sums, we can deduce the values of a[0], a[1], and a[2] by solving the equations.\n        \n        # The sum of all elements\n        total_sum = b[6]\n        \n        # The sum of three largest elements\n        max_sum = b[4] + b[5] + b[6]\n        \n        # The sum of two largest elements\n        second_max_sum = b[3] + b[4] + b[5]\n        \n        # The sum of the largest and smallest elements\n        max_min_sum = b[0] + b[4] + b[5]\n        \n        # The sum of the smallest and middle elements\n        min_mid_sum = b[0] + b[1] + b[2]\n        \n        # The sum of the middle and largest elements\n        mid_max_sum = b[1] + b[2] + b[3]\n        \n        # The sum of the smallest and second largest elements\n        min_second_max_sum = b[0] + b[1] + b[3]\n        \n        # The sum of the smallest and third largest elements\n        min_third_max_sum = b[0] + b[1] + b[2]\n        \n        # Solving these equations will give us the values of a[0], a[1], and a[2]\n        a2 = (min_mid_sum - min_second_max_sum + max_sum) // 2\n        a1 = (min_mid_sum - min_third_max_sum + max_sum) //", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 39)"}, "Round_1": {"code": "def restore_array():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The sum of all elements\n        total_sum = b[6]\n        \n        # The sum of three largest elements\n        max_sum = b[4] + b[5] + b[6]\n        \n        # The sum of two largest elements\n        second_max_sum = b[3] + b[4] + b[5]\n        \n        # The sum of the largest and smallest elements\n        max_min_sum = b[0] + b[4] + b[5]\n        \n        # The sum of the smallest and middle elements\n        min_mid_sum = b[0] + b[1] + b[2]\n        \n        # The sum of the middle and largest elements\n        mid_max_sum = b[1] + b[2] + b[3]\n        \n        # The sum of the smallest and second largest elements\n        min_second_max_sum = b[0] + b[1] + b[3]\n        \n        # The sum of the smallest and third largest elements\n        min_third_max_sum = b[0] + b[1] + b[2]\n        \n        # Solving these equations will give us the values of a[0], a[1], and a[2]\n        a2 = (min_mid_sum - min_second_max_sum + max_sum) // 2\n        a1 = (min_mid_sum - min_third_max_sum + max_sum) // 2\n        a0 = total_sum - a1 - a2\n        \n        results.append(f\"{a0} {a1} {a2}\")\n    \n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Read the input data for each test case.\",\n        \"details\": \"The program should read the number of test cases and then read the array b for each test case.\"\n      },\n      {\n        \"subproblem\": \"Identify the smallest three sums from array b.\",\n        \"details\": \"Since the array b is sorted in non-decreasing order, the smallest three sums will be the first three elements of the array b.\"\n      },\n      {\n        \"subproblem\": \"Determine the original array a.\",\n        \"details\": \"Given the smallest three sums, the original array a can be reconstructed by finding the two numbers that, when added to the smallest sum, yield the next two smallest sums.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Read the number of test cases.\",\n        \"details\": \"The program should start by reading the number of test cases t.\"\n      },\n      {\n        \"step\": \"Iterate through each test case.\",\n        \"details\": \"For each test case, read the array b of 7 integers.\"\n      },\n      {\n        \"step\": \"Identify the smallest three sums.\",\n        \"details\": \"Extract the first three elements from the sorted array b as the smallest three sums.\"\n      },\n      {\n        \"step\": \"Reconstruct the original array a.\",\n        \"details\": \"Using the smallest three sums, determine the two additional numbers that, when added to the smallest sum, yield the next two smallest sums. These three numbers form the original array a.\"\n      },\n      {\n        \"step\": \"Output the result for each test case.\",\n        \"details\": \"Print the reconstructed array a for each test case.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Read the input data for each test case.\",\n        \"details\": \"The program should read the number of test cases and then read the array b for each test case.\"\n      },\n      {\n        \"subproblem\": \"Identify the smallest three sums from array b.\",\n        \"details\": \"Since the array b is sorted in non-decreasing order, the smallest three sums will be the first three elements of the array b.\"\n      },\n      {\n        \"subproblem", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        # The smallest three sums are the first three elements in the sorted array b\n        a1, a2, a3 = b[0], b[1], b[6] - b[0] - b[1]\n        print(a1, a2, a3)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        # The smallest three sums are the first three elements in the sorted array b\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[6] - a1 - a2\n        print(a1, a2, a3)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      {\n        \"subproblem\": \"Read the number of test cases.\",\n        \"details\": \"The first line of input contains the number of test cases, t.\"\n      },\n      {\n        \"subproblem\": \"Read the array b for each test case.\",\n        \"details\": \"For each test case, read the 7 integers representing array b.\"\n      },\n      {\n        \"subproblem\": \"Determine the three integers a_1, a_2, and a_3.\",\n        \"details\": \"Given array b, reconstruct the original array a by identifying the sums that were used to form b.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize a list to store the results for all test cases.\",\n        \"details\": \"This will be a list where each element is the solution for a specific test case.\"\n      },\n      {\n        \"step\": \"Loop through each test case.\",\n        \"details\": \"For each test case, read the input and process to find the solution.\"\n      },\n      {\n        \"step\": \"Reconstruct array a from array b.\",\n        \"details\": \"Identify the three integers a_1, a_2, and a_3 by analyzing the sums in array b.\"\n      },\n      {\n        \"step\": \"Store the result for the current test case.\",\n        \"details\": \"Add the reconstructed array a to the results list.\"\n      },\n      {\n        \"step\": \"Output the results after processing all test cases.\",\n        \"details\": \"Print the results list.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"response\": {\n    \"plan\": {\n      \"subproblems\": [\n        \"Read the number of test cases.\",\n        \"Read the array b for each test case.\",\n        \"Determine the three integers a_1, a_2, and a_3.\"\n      ],\n      \"steps\": [\n        \"Initialize a list to store the results for all test cases.\",\n        \"Loop through each test case.\",\n        \"Reconstruct array a from array b.\",\n        \"Store the result for the current test case.\",\n        \"Output the results", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The smallest three elements are a_1, a_2, and a_3\n        a_1 = b[0]\n        a_2 = b[1]\n        a_3 = b[6] - a_1 - a_2\n        \n        results.append(f\"{a_1} {a_2} {a_3}\")\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The smallest three elements are a_1, a_2, and a_3\n        a_1 = b[0]\n        a_2 = b[1]\n        a_3 = b[6] - a_1 - a_2\n        \n        results.append(f\"{a_1} {a_2} {a_3}\")\n    \n    for result in results:\n        print(result)"}}], "scores": [], "pass_results": [false, false, true, true, true, false, true, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 105, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "condense_two2one", "save_node": false, "parent_index": 86}
