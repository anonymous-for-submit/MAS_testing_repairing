{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a consisting of 3 positive integers and wrote down the totals of all non-empty subsequences of this array, arranged them in non-decreasing order, and formed an array b containing 7 integers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, and 4 + 3 = 7, then sorted to get an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a, and he only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a consisting of 3 positive integers and wrote down the totals of all non-empty subsequences of this array, arranged them in non-decreasing order, and formed an array b containing 7 integers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, and 4 + 3 = 7, then sorted to get an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a, and he only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin", " Polycarp had an array a consisting of 3 positive integers, and he wrote down the totals of all non-empty subsequences of this array, arranging them in non-decreasing order to form an array b containing 7 integers. For instance, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, and 4 + 3 = 7, then sorted to get an array b = {1, 3, 4, 4, 5\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin", " Polycarp has an array b consisting of 7 integers, which are the totals of all non-empty subsequences of another array a. Array a consists of 3 positive integers. Given b, help Polycarp restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin"], "completion": "def restore_array_a(b):\n    # The sum of all unique combinations of three elements from b should be the sum of array a\n    total_sum = sum(b)\n    a_sum = total_sum // 3\n    \n    # Find three elements in b whose sum equals a_sum\n    for i in range(7):\n        for j in range(i + 1, 7):\n            for k in range(j + 1, 7):\n                if b[i] + b[j] + b[k] == a_sum:\n                    return sorted([b[i], b[j], b[k]])\n    return None\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a = restore_array_a(b)\n        print(f\"{a[0]} {a[1]} {a[2]}\")\nmain()", "completions": ["def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        print(a[0], a[1], a[2])\nmain()", "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The sum of all unique combinations of three numbers in a should be one of the elements in b.\n        # We can use the fact that the sum of the smallest three elements in b should be one of the elements in b.\n        # Let's find the sum of the smallest three elements in b.\n        sum_of_three = b[0] + b[1] + b[2]\n        \n        # Now, we need to find three numbers in b that sum up to sum_of_three.\n        # We can iterate through b to find such a combination.\n        found = False\n        for i in range(7):\n            for j in range(i+1, 7):\n                for k in range(j+1, 7):\n                    if b[i] + b[j] + b[k] == sum_of_three:\n                        print(b[i], b[j], b[k])\n                        found = True\n                        break\n                if found:\n                    break\n            if found:\n                break\nmain()", "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = []\n        a.append(b[0])\n        a.append(b[6] - b[5])\n        a.append(b[6] - b[4])\n        print(a[0], a[1], a[2])\nmain()", "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        # The sum of all non-empty subsequences of array a can be derived from the sum of all combinations of its elements.\n        # Since array a has 3 elements, the sum of all non-empty subsequences will be the sum of all combinations of these 3 elements.\n        # The sum of all combinations of 3 elements can be derived from the sums of all subsequences of length 1, 2, and 3.\n        # By analyzing the given sums, we can deduce the values of the elements in array a.\n        \n        # Sorting the sums to simplify the deduction process\n        b.sort()\n        \n        # The smallest sum is the sum of the smallest element\n        a1 = b[0]\n        # The largest sum is the sum of all three elements\n        a3 = b[-1]\n        # The middle sum is the sum of the two larger elements\n        a2 = b[1]\n        \n        # Output the deduced integers for the current test case\n        print(a1, a2, a3)\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        print(a[0], a[1], a[2])\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [0] * 3\n        a[0] = b[0]\n        a[1] = b[1]\n        a[2] = b[6] - a[0] - a[1]\n        print(a[0], a[1], a[2])\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        print(a[0], a[1], a[2])\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = []\n        # The sum of the three smallest numbers in b will be the smallest number in a\n        a.append(b[0] - b[1] + b[6])\n        # The sum of the two smallest numbers in b and the largest number in b will be the second smallest number in a\n        a.append(b[0] - b[2] + b[5])\n        # The sum of the smallest and second smallest numbers in b will be the third smallest number in a\n        a.append(b[0] - b[3] + b[4])\n        print(a[0], a[1], a[2])\nmain()", "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        print(a[0], a[1], a[2])\nmain()", "def restore_array_a(b):\n    # The sum of all unique combinations of three elements from b should be the sum of array a\n    total_sum = sum(b)\n    a_sum = total_sum // 3\n    \n    # Find three elements in b whose sum equals a_sum\n    for i in range(7):\n        for j in range(i + 1, 7):\n            for k in range(j + 1, 7):\n                if b[i] + b[j] + b[k] == a_sum:\n                    return sorted([b[i], b[j], b[k]])\n    return None\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a = restore_array_a(b)\n        print(f\"{a[0]} {a[1]} {a[2]}\")\nmain()"], "session_history": {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the input for the number of test cases and the arrays b for each test case.\",\n        \"steps\": [\n          \"Read the number of test cases t.\",\n          \"For each test case, read the 7 integers representing array b.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the possible values of array a based on the given array b.\",\n        \"steps\": [\n          \"For each test case, identify the sum of all unique combinations of three elements from array b that could form array a.\",\n          \"Since array b is a sum of all non-empty subsequences of array a, the sum of any three elements from b should be the sum of array a.\"\n        ]\n      },\n      {\n        \"description\": \"Output the possible values of array a for each test case.\",\n        \"steps\": [\n          \"For each test case, output the three integers that make up array a.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Initialize the main function to handle the input and output.\",\n      \"Read the number of test cases t.\",\n      \"For each test case:\",\n      \"  Read the 7 integers representing array b.\",\n      \"  Identify the sum of all unique combinations of three elements from b.\",\n      \"  Output the three integers that make up array a.\",\n      \"End loop for each test case.\",\n      \"End main function.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the input for the number of test cases and the arrays b for each test case.\",\n        \"steps\": [\n          \"Read the number of test cases t.\",\n          \"For each test case, read the 7 integers representing array b.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the possible values of array a based on the given array b.\",\n        \"steps\": [\n          \"For each test case, identify the sum of all unique", "Round_0": {"code": "def restore_array_a(b):\n    # The sum of all unique combinations of three elements from b should be the sum of array a\n    total_sum = sum(b)\n    a_sum = total_sum // 3\n    \n    # Find three elements in b whose sum equals a_sum\n    for i in range(7):\n        for j in range(i + 1, 7):\n            for k in range(j + 1, 7):\n                if b[i] + b[j] + b[k] == a_sum:\n                    return sorted([b[i], b[j], b[k]])\n    return None\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a = restore_array_a(b)\n        print(f\"{a[0]} {a[1]} {a[2]}\")", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": " ```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      {\n        \"subproblem\": \"Read the input data for each test case.\",\n        \"details\": \"The program should read the number of test cases and then read the array b for each test case.\"\n      },\n      {\n        \"subproblem\": \"Identify the unique elements in the array b.\",\n        \"details\": \"Since the array b is sorted and contains the sums of all non-empty subsequences of a, we can identify the three original numbers by finding the three unique elements in b.\"\n      },\n      {\n        \"subproblem\": \"Determine the original array a.\",\n        \"details\": \"Once the three unique elements are identified, the original array a can be reconstructed by assigning the identified elements to a_1, a_2, and a_3.\"\n      },\n      {\n        \"subproblem\": \"Output the result for each test case.\",\n        \"details\": \"The program should output the reconstructed array a for each test case.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Read the number of test cases.\",\n        \"details\": \"The program should start by reading the number of test cases t.\"\n      },\n      {\n        \"step\": \"Iterate through each test case.\",\n        \"details\": \"For each test case, read the array b of 7 integers.\"\n      },\n      {\n        \"step\": \"Identify the three unique elements in b.\",\n        \"details\": \"Sort the array b and identify the three numbers that are not repeated.\"\n      },\n      {\n        \"step\": \"Reconstruct the original array a.\",\n        \"details\": \"Assign the identified three numbers to a_1, a_2, and a_3.\"\n      },\n      {\n        \"step\": \"Output the result.\",\n        \"details\": \"Print the reconstructed array a for the current test case.\"\n      },\n      {\n        \"step\": \"Repeat for all test cases.\",\n        \"details\": \"Continue the process for all test cases until all inputs are processed.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Read the input data for each test case.\",\n      \"Identify the three unique elements in the array b.\",\n      \"Determine the original array a.\",\n      \"Output the result for each test case.\"\n    ],\n    \"steps\": [\n      \"Read the number of test cases.\",\n      \"For each test case, read the array b of 7 integers.\",\n      \"Sort the array b and identify the three numbers that are not repeated.\",\n      \"Assign the identified three numbers to a_1", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        print(a[0], a[1], a[2])", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        print(a[0], a[1], a[2])"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the input for the number of test cases and the arrays b for each test case.\",\n        \"steps\": [\n          \"Read the number of test cases t.\",\n          \"For each test case, read the 7 integers representing array b.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the possible values of array a based on the given array b.\",\n        \"steps\": [\n          \"For each test case, identify the sum of all unique combinations of three numbers that could produce the given array b.\",\n          \"Since the sum of all non-empty subsequences of array a is given, the sum of any three numbers in a should be one of the elements in b.\"\n        ]\n      },\n      {\n        \"description\": \"Output the possible values of array a for each test case.\",\n        \"steps\": [\n          \"For each test case, find and output the three numbers that sum up to one of the elements in b.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Initialize the program to read the number of test cases.\",\n      \"For each test case, read the array b.\",\n      \"Determine the possible values of array a by identifying the sum of any three numbers in a that could produce the elements in b.\",\n      \"Output the three numbers for each test case.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"response\": {\n    \"plan\": {\n      \"subproblems\": [\n        {\n          \"description\": \"Read the input for the number of test cases and the arrays b for each test case.\",\n          \"steps\": [\n            \"Read the number of test cases t.\",\n            \"For each test case, read the 7 integers representing array b.\"\n          ]\n        },\n        {\n          \"description\": \"Determine the possible values of array a based on the given array b.\",\n          \"steps\": [\n            \"For each test case,", "Round_0": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The sum of all unique combinations of three numbers in a should be one of the elements in b.\n        # We can use the fact that the sum of the smallest three elements in b should be one of the elements in b.\n        # Let's find the sum of the smallest three elements in b.\n        sum_of_three = b[0] + b[1] + b[2]\n        \n        # Now, we need to find three numbers in b that sum up to sum_of_three.\n        # We can iterate through b to find such a combination.\n        found = False\n        for i in range(7):\n            for j in range(i+1, 7):\n                for k in range(j+1, 7):\n                    if b[i] + b[j] + b[k] == sum_of_three:\n                        print(b[i], b[j], b[k])\n                        found = True\n                        break\n                if found:\n                    break\n            if found:\n                break", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The sum of all unique combinations of three numbers in a should be one of the elements in b.\n        # We can use the fact that the sum of the smallest three elements in b should be one of the elements in b.\n        # Let's find the sum of the smallest three elements in b.\n        sum_of_three = b[0] + b[1] + b[2]\n        \n        # Now, we need to find three numbers in b that sum up to sum_of_three.\n        # We can iterate through b to find such a combination.\n        found = False\n        for i in range(7):\n            for j in range(i+1, 7):\n                for k in range(j+1, 7):\n                    if b[i] + b[j] + b[k] == sum_of_three:\n                        print(b[i], b[j], b[k])\n                        found = True\n                        break\n                if found:\n                    break\n            if found:\n                break"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the input data for each test case.\",\n        \"details\": \"For each test case, read the array b containing 7 integers.\"\n      },\n      {\n        \"description\": \"Identify the three original integers in the array a.\",\n        \"details\": \"Given the array b, identify the three integers that were summed to form the elements of b.\"\n      },\n      {\n        \"description\": \"Reconstruct the array a from the array b.\",\n        \"details\": \"Using the identified integers, reconstruct the original array a of three positive integers.\"\n      },\n      {\n        \"description\": \"Output the reconstructed array a for each test case.\",\n        \"details\": \"For each test case, print the reconstructed array a in the required format.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize the program to handle multiple test cases.\",\n        \"details\": \"Read the number of test cases t from the input.\"\n      },\n      {\n        \"step\": \"Process each test case individually.\",\n        \"details\": \"For each test case, read the array b and identify the three integers that form the array.\"\n      },\n      {\n        \"step\": \"Reconstruct the array a.\",\n        \"details\": \"Using the identified integers, reconstruct the original array a and print it.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"YES\": \"The plan needs further interpretation to ensure it covers all aspects of the requirement accurately. Here are the insights based on the given perspective:\",\n  \"core_concept\": {\n    \"concept\": \"non-empty subsequences\",\n    \"explanation\": \"In the requirement, Polycarp forms an array b by summing all non-empty subsequences of the array a. Each subsequence is a sequence obtained by removing zero or more elements from the original array a.\"\n  },\n  \"phrase_showing_quantity_relationship\": {\n    \"more_than\": {\n", "Round_0": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = []\n        a.append(b[0])\n        a.append(b[6] - b[5])\n        a.append(b[6] - b[4])\n        print(a[0], a[1], a[2])", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = []\n        a.append(b[0])\n        a.append(b[6] - b[5])\n        a.append(b[6] - b[4])\n        print(a[0], a[1], a[2])"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Read the number of test cases from the input.\",\n      \"For each test case, read the 7 integers representing the totals of all non-empty subsequences of array a.\",\n      \"Determine the three integers that make up array a.\",\n      \"Output the three integers for each test case.\"\n    ],\n    \"high_level_steps\": [\n      \"Initialize a loop to iterate through each test case.\",\n      \"Read the 7 integers for the current test case.\",\n      \"Use a method to deduce the three integers of array a from the 7 given integers.\",\n      \"Output the deduced integers for the current test case.\",\n      \"Repeat the process for the next test case until all test cases are processed.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'subsequence': a sequence that can be obtained from an array by removing zero or more of its elements.\n    Explanation: In this problem, we need to find three integers (a_1, a_2, a_3) such that the sum of all non-empty subsequences of the array a results in the given 7 integers (b_1, b_2, ..., b_7).\n\n# [phrase showing quantity relationship]\n    'totals of all non-empty subsequences': means we need to consider all possible combinations of the three integers to", "Round_0": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        # The sum of all non-empty subsequences of array a can be derived from the sum of all combinations of its elements.\n        # Since array a has 3 elements, the sum of all non-empty subsequences will be the sum of all combinations of these 3 elements.\n        # The sum of all combinations of 3 elements can be derived from the sums of all subsequences of length 1, 2, and 3.\n        # By analyzing the given sums, we can deduce the values of the elements in array a.\n        \n        # Sorting the sums to simplify the deduction process\n        b.sort()\n        \n        # The smallest sum is the sum of the smallest element\n        a1 = b[0]\n        # The largest sum is the sum of all three elements\n        a3 = b[-1]\n        # The middle sum is the sum of the two larger elements\n        a2 = b[1]\n        \n        # Output the deduced integers for the current test case\n        print(a1, a2, a3)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        # The sum of all non-empty subsequences of array a can be derived from the sum of all combinations of its elements.\n        # Since array a has 3 elements, the sum of all non-empty subsequences will be the sum of all combinations of these 3 elements.\n        # The sum of all combinations of 3 elements can be derived from the sums of all subsequences of length 1, 2, and 3.\n        # By analyzing the given sums, we can deduce the values of the elements in array a.\n        \n        # Sorting the sums to simplify the deduction process\n        b.sort()\n        \n        # The smallest sum is the sum of the smallest element\n        a1 = b[0]\n        # The largest sum is the sum of all three elements\n        a3 = b[-1]\n        # The middle sum is the sum of the two larger elements\n        a2 = b[1]\n        \n        # Output the deduced integers for the current test case\n        print(a1, a2, a3)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      {\n        \"subproblem\": \"Read the input data for each test case.\",\n        \"details\": \"The program should read the number of test cases and then read the array b for each test case.\"\n      },\n      {\n        \"subproblem\": \"Identify the unique elements in the array b.\",\n        \"details\": \"Since the array b is sorted and contains the sums of all non-empty subsequences of a, we can identify the three original numbers by finding the three unique elements in b.\"\n      },\n      {\n        \"subproblem\": \"Determine the original array a.\",\n        \"details\": \"Once the three unique elements are identified, the original array a can be reconstructed by assigning the identified elements to a_1, a_2, and a_3.\"\n      },\n      {\n        \"subproblem\": \"Output the result for each test case.\",\n        \"details\": \"The program should output the reconstructed array a for each test case.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Read the number of test cases.\",\n        \"details\": \"The program should start by reading the number of test cases t.\"\n      },\n      {\n        \"step\": \"Iterate through each test case.\",\n        \"details\": \"For each test case, read the array b of 7 integers.\"\n      },\n      {\n        \"step\": \"Identify the three unique elements in b.\",\n        \"details\": \"Sort the array b and identify the three numbers that are not repeated, which are the sums of the original array a.\"\n      },\n      {\n        \"step\": \"Reconstruct the original array a.\",\n        \"details\": \"Assign the identified three numbers to a_1, a_2, and a_3.\"\n      },\n      {\n        \"step\": \"Output the result.\",\n        \"details\": \"Print the reconstructed array a for the current test case.\"\n      },\n      {\n        \"step\": \"Repeat for all test cases.\",\n        \"details\": \"Continue the process for all test cases until all inputs are processed.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Read the input data for each test case.\",\n      \"Identify the three unique elements in the array b.\",\n      \"Determine the original array a.\",\n      \"Output the result for each test case.\"\n    ],\n    \"steps\": [\n      \"Read the number of test cases t.\",\n      \"For each test case, read the array b of 7 integers.\",\n      \"Sort the array b to identify the three unique elements, which are the sums of the original array a.\",\n      \"Re", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        print(a[0], a[1], a[2])", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        print(a[0], a[1], a[2])"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      {\n        \"subproblem\": \"Read the input data for test cases.\",\n        \"details\": \"The program should read the number of test cases and then read the 7 integers for each test case.\"\n      },\n      {\n        \"subproblem\": \"Determine the three integers in the original array a.\",\n        \"details\": \"Given the sorted array b of the sums of all non-empty subsequences, identify the three integers that were used to create b.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize the program to read input.\",\n        \"details\": \"Read the number of test cases and prepare to process each case.\"\n      },\n      {\n        \"step\": \"Process each test case.\",\n        \"details\": \"For each test case, read the 7 integers and determine the three integers that form the original array a.\"\n      },\n      {\n        \"step\": \"Output the results.\",\n        \"details\": \"For each test case, print the three integers that were used to generate the given array b.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'non-empty subsequences': means all possible combinations of the array elements excluding the empty set.\n    'sums of all non-empty subsequences': means calculating the sum for each possible combination of the array elements.\n\n# [phrase showing quantity relationship]\n    'more than': means greater than zero.\n    'non-decreasing order': means sorted in ascending order.\n\n# [degree adverb] \n    'largest': means the greatest value in the array.\n\n# [code logic]\n    The steps should be implement simultaneously. The program should read", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [0] * 3\n        a[0] = b[0]\n        a[1] = b[1]\n        a[2] = b[6] - a[0] - a[1]\n        print(a[0], a[1], a[2])", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [0] * 3\n        a[0] = b[0]\n        a[1] = b[1]\n        a[2] = b[6] - a[0] - a[1]\n        print(a[0], a[1], a[2])"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the input for the number of test cases and the arrays b for each test case.\",\n        \"steps\": [\n          \"Read the number of test cases t.\",\n          \"For each test case, read the 7 integers representing array b.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the three integers a from the array b.\",\n        \"steps\": [\n          \"For each test case, identify the three integers a that, when combined in all possible ways, produce the given array b.\",\n          \"Since the array b is already sorted and contains the sums of all non-empty subsequences of a, the smallest three elements of b must be a1, a2, and a3, in some order.\"\n        ]\n      },\n      {\n        \"description\": \"Output the three integers a for each test case.\",\n        \"steps\": [\n          \"For each test case, print the three integers a that were determined to produce the array b.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize the number of test cases t.\",\n      \"For each test case:\",\n      \"  Read the 7 integers representing array b.\",\n      \"  Identify the three integers a from the array b.\",\n      \"  Print the three integers a.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the input for the number of test cases and the arrays b for each test case.\",\n        \"steps\": [\n          \"Read the number of test cases t.\",\n          \"For each test case, read the 7 integers representing array b.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the three integers a from the array b.\",\n        \"steps\": [\n          \"For each test case, identify the three integers a that, when combined in", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        print(a[0], a[1], a[2])", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        print(a[0], a[1], a[2])"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      {\n        \"subproblem\": \"Read the input data for multiple test cases.\",\n        \"details\": \"The program should read the number of test cases followed by each test case which contains 7 integers.\"\n      },\n      {\n        \"subproblem\": \"Identify the pattern in the array b.\",\n        \"details\": \"Given the array b, we need to determine the three integers a_1, a_2, and a_3 that were used to generate b. The sum of any two of these integers will be one of the elements in b.\"\n      },\n      {\n        \"subproblem\": \"Reconstruct the original array a.\",\n        \"details\": \"Using the identified pattern, the program should reconstruct the original array a from the given array b.\"\n      },\n      {\n        \"subproblem\": \"Output the result for each test case.\",\n        \"details\": \"For each test case, the program should output the three integers a_1, a_2, and a_3.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize the program to handle multiple test cases.\",\n        \"details\": \"Read the number of test cases and prepare to process each one.\"\n      },\n      {\n        \"step\": \"For each test case, read the 7 integers into an array.\",\n        \"details\": \"This array represents the sorted sums of all non-empty subsequences of the original array a.\"\n      },\n      {\n        \"step\": \"Identify the three original integers a_1, a_2, and a_3.\",\n        \"details\": \"Using the properties of subsequences and the sorted sums, deduce the three integers that were used to generate the array b.\"\n      },\n      {\n        \"step\": \"Output the result for each test case.\",\n        \"details\": \"Print the three integers a_1, a_2, and a_3 for each test case.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Read the input data for multiple test cases.\",\n      \"Identify the pattern in the array b.\",\n      \"Reconstruct the original array a.\",\n      \"Output the result for each test case.\"\n    ],\n    \"steps\": [\n      \"Initialize the program to handle multiple test cases.\",\n      \"For each test case, read the 7 integers into an array.\",\n      \"Identify the three original integers a_1, a_2, and a_3.\",\n      \"Output the result for each", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a1 = a2 = a3 = None\n        for i in range(6):\n            for j in range(i+1, 6):\n                for k in range(j+1, 6):\n                    if b[i] + b[j] + b[k] == b[-1]:\n                        a1, a2, a3 = b[i], b[j], b[k]\n                        break\n                if a1 is not None:\n                    break\n            if a1 is not None:\n                break\n        print(a1, a2, a3)", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 1 was given"}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = []\n        # The sum of the three smallest numbers in b will be the smallest number in a\n        a.append(b[0] - b[1] + b[6])\n        # The sum of the two smallest numbers in b and the largest number in b will be the second smallest number in a\n        a.append(b[0] - b[2] + b[5])\n        # The sum of the smallest and second smallest numbers in b will be the third smallest number in a\n        a.append(b[0] - b[3] + b[4])\n        print(a[0], a[1], a[2])"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the input data for each test case.\",\n        \"details\": \"For each test case, read the array b containing 7 integers.\"\n      },\n      {\n        \"description\": \"Identify the three integers in array a.\",\n        \"details\": \"Given the array b, identify the three integers a_1, a_2, and a_3 such that all possible sums of non-empty subsequences of a are present in b in non-decreasing order.\"\n      },\n      {\n        \"description\": \"Implement the logic to find a_1, a_2, and a_3.\",\n        \"details\": \"Use the properties of the sums of subsequences to deduce the values of a_1, a_2, and a_3. Since b is sorted, the smallest three values in b must be a_1, a_2, and a_3, and the remaining values in b must be sums of these three values.\"\n      },\n      {\n        \"description\": \"Output the result for each test case.\",\n        \"details\": \"For each test case, print the identified values of a_1, a_2, and a_3.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize the program to handle multiple test cases.\",\n        \"details\": \"Read the number of test cases t from standard input.\"\n      },\n      {\n        \"step\": \"Process each test case.\",\n        \"details\": \"For each test case, read the array b and identify a_1, a_2, and a_3.\"\n      },\n      {\n        \"step\": \"Output the results.\",\n        \"details\": \"For each test case, print the identified values of a_1, a_2, and a_3.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the input data for each test case.\",\n        \"details\": \"For each test case, read the array b containing 7 integers.\"\n      },\n      {\n        \"description\": \"Identify the three integers in array a.\",\n        \"details\": \"Given the array b, identify the three integers a_1, a_2, and a_3 such that all possible sums of non-empty subsequences of a are present in b in non-decreasing order.\"\n      },", "Round_0": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        print(a[0], a[1], a[2])", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        print(a[0], a[1], a[2])"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the input for the number of test cases and the arrays b for each test case.\",\n        \"steps\": [\n          \"Read the number of test cases t.\",\n          \"For each test case, read the 7 integers representing array b.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the possible values of array a based on the given array b.\",\n        \"steps\": [\n          \"For each test case, identify the sum of all unique combinations of three elements from array b that could form array a.\",\n          \"Since array b is a sum of all non-empty subsequences of array a, the sum of any three elements from b should be the sum of array a.\"\n        ]\n      },\n      {\n        \"description\": \"Output the possible values of array a for each test case.\",\n        \"steps\": [\n          \"For each test case, output the three integers that make up array a.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Initialize the main function to handle the input and output.\",\n      \"Read the number of test cases t.\",\n      \"For each test case:\",\n      \"  Read the 7 integers representing array b.\",\n      \"  Identify the sum of all unique combinations of three elements from b.\",\n      \"  Output the three integers that make up array a.\",\n      \"End loop for each test case.\",\n      \"End main function.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the input for the number of test cases and the arrays b for each test case.\",\n        \"steps\": [\n          \"Read the number of test cases t.\",\n          \"For each test case, read the 7 integers representing array b.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the possible values of array a based on the given array b.\",\n        \"steps\": [\n          \"For each test case, identify the sum of all unique", "Round_0": {"code": "def restore_array_a(b):\n    # The sum of all unique combinations of three elements from b should be the sum of array a\n    total_sum = sum(b)\n    a_sum = total_sum // 3\n    \n    # Find three elements in b whose sum equals a_sum\n    for i in range(7):\n        for j in range(i + 1, 7):\n            for k in range(j + 1, 7):\n                if b[i] + b[j] + b[k] == a_sum:\n                    return sorted([b[i], b[j], b[k]])\n    return None\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a = restore_array_a(b)\n        print(f\"{a[0]} {a[1]} {a[2]}\")", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [true, false, false, true, false, true, false, true, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 124, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "condense_two2one", "save_node": false, "parent_index": 102}
