{"name": "1622_A. Construct a Rectangle", "description": "There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYou are asked to break exactly one of them into two pieces in such a way that: \n\n  * both pieces have positive (strictly greater than 0) integer length; \n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides. \n\n\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "tags": ["geometry", "math"], "difficulty": 7, "id": 1622, "sample_io": [{"input": "4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n", "output": ["YES\nNO\nYES\nYES\n"]}], "test_list": [{"input": "2\n1 2 3\n2 2 4\n", "output": ["YES\nYES\n"]}, {"input": "1\n1 98 99\n", "output": ["YES\n"]}, {"input": "3\n1 1 1\n2 1 3\n5 6 7\n", "output": ["NO\nYES\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 6\n1 2 3\n6 7 8\n10 10 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nYES\n"]}, {"input": "4\n6 1 5\n2 5 2\n2 4 2\n7 101 108\n", "output": ["YES\nNO\nYES\nYES\n"]}, {"input": "1\n100000 100000 100000\n", "output": ["YES\n"]}, {"input": "1\n12344 1 1\n", "output": ["YES\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 2 3\n4 5 6\n", "output": ["YES\nNO\n"]}, {"input": "2\n1 3 3\n2 2 4\n", "output": ["NO\nYES\n"]}, {"input": "1\n1 98 186\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 6 7\n", "output": ["NO\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 108\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "1\n100000 100000 100100\n", "output": ["YES\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 1\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 1 3\n4 5 6\n", "output": ["NO\nNO\n"]}, {"input": "4\n6 1 5\n2 5 2\n2 4 2\n5 9 4\n", "output": ["YES\nNO\nYES\nYES\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 179\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n2 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 1\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n2 1 3\n1 5 6\n", "output": ["YES\nYES\n"]}, {"input": "4\n6 1 10\n2 6 2\n2 4 2\n7 101 144\n", "output": ["NO\nYES\nYES\nNO\n"]}, {"input": "3\n2 1 1\n2 1 2\n3 8 12\n", "output": ["YES\nNO\nNO\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 3\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 2 3\n4 8 6\n", "output": ["YES\nNO\n"]}, {"input": "3\n1 1 1\n1 1 2\n5 6 12\n", "output": ["NO\nYES\nNO\n"]}, {"input": "4\n6 1 10\n2 6 2\n3 4 2\n7 101 144\n", "output": ["NO\nYES\nNO\nNO\n"]}, {"input": "3\n2 1 1\n1 1 2\n5 6 12\n", "output": ["YES\nYES\nNO\n"]}, {"input": "6\n2 2 6\n1 1 2\n3 10 6\n2 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "3\n3 1 1\n2 1 2\n1 8 9\n", "output": ["NO\nNO\nYES\n"]}, {"input": "6\n2 2 4\n1 1 1\n3 5 18\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n1 1 10\n2 6 2\n3 4 2\n7 101 144\n", "output": ["YES\nYES\nNO\nNO\n"]}, {"input": "3\n3 1 1\n2 2 2\n1 8 9\n", "output": ["NO\nYES\nYES\n"]}, {"input": "1\n12344 2 1\n", "output": ["NO\n"]}, {"input": "1\n2 98 186\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 6 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 10 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "1\n100010 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 2 1\n", "output": ["NO\n"]}, {"input": "2\n1 1 3\n1 5 6\n", "output": ["NO\nYES\n"]}, {"input": "1\n2 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 144\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n100110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 4 1\n", "output": ["NO\n"]}, {"input": "1\n1 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n3 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100110 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 3 1\n", "output": ["NO\n"]}, {"input": "1\n100111 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 3 1\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n1 8 12\n", "output": ["YES\nNO\nNO\n"]}, {"input": "1\n100011 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 3 2\n", "output": ["NO\n"]}, {"input": "1\n100011 101001 100100\n", "output": ["NO\n"]}, {"input": "1\n100011 101001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 101001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n100011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n100011 001001 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111001\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001111 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001010 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 111111\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 011111\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011100\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011000\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010011 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010111 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010111 100011 001000\n", "output": ["NO\n"]}, {"input": "1\n010111 000011 001000\n", "output": ["NO\n"]}, {"input": "1\n010111 000011 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 100010 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 100010 000001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 000001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 000011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 000011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 100011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 101011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 000011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 100011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 101011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 101001 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 101001 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 101101 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n010101 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n010101 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n110101 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n110101 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n110101 101101 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101101 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101100 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101110 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101110 101010\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 101010\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 101011\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 100011\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n011111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 101100 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 111110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n100111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n001111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n001101 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011111 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011101 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 111101 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100011\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100000\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 100000\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n000011 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n000011 111001 000011\n", "output": ["NO\n"]}, {"input": "1\n100011 111001 000011\n", "output": ["NO\n"]}, {"input": "1\n100011 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n100011 111101 000010\n", "output": ["NO\n"]}, {"input": "1\n100011 111101 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 111100 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 110100 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 111100 011010\n", "output": ["NO\n"]}, {"input": "1\n100011 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101011 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 110100 011110\n", "output": ["NO\n"]}, {"input": "1\n001111 110100 011110\n", "output": ["NO\n"]}, {"input": "1\n101111 010100 011110\n", "output": ["NO\n"]}, {"input": "1\n101111 010100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 111010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 111011\n", "output": ["NO\n"]}, {"input": "1\n001111 010000 111011\n", "output": ["NO\n"]}, {"input": "1\n001111 010000 111001\n", "output": ["NO\n"]}, {"input": "2\n1 4 3\n2 2 4\n", "output": ["YES\nYES\n"]}, {"input": "1\n1 98 108\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 4\n5 6 7\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100010 100000 100000\n", "output": ["YES\n"]}, {"input": "1\n2465 1 1\n", "output": ["NO\n"]}, {"input": "4\n6 2 5\n2 5 2\n2 4 2\n5 5 4\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "2\n1 3 3\n4 2 4\n", "output": ["NO\nYES\n"]}, {"input": "1\n3 98 186\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n5 6 7\n", "output": ["YES\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 10\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 3 2\n2 4 2\n7 101 108\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "1\n100010 100001 100000\n", "output": ["NO\n"]}, {"input": "1\n19251 2 1\n", "output": ["NO\n"]}, {"input": "2\n1 1 3\n4 5 1\n", "output": ["NO\nYES\n"]}, {"input": "4\n9 1 5\n2 5 2\n2 4 2\n5 9 4\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "6\n2 2 6\n1 1 2\n3 10 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n10 1 10\n2 5 2\n2 4 2\n7 101 179\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n110010 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n8323 2 1\n", "output": ["NO\n"]}, {"input": "1\n3 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 4\n5 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "4\n6 1 9\n2 5 2\n2 4 2\n7 101 144\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n101110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n21283 4 1\n", "output": ["NO\n"]}, {"input": "2\n2 1 3\n1 5 5\n", "output": ["YES\nNO\n"]}, {"input": "1\n1 98 468\n", "output": ["NO\n"]}, {"input": "1\n110110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n35510 2 1\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n3 8 17\n", "output": ["YES\nNO\nNO\n"]}, {"input": "1\n110111 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n12451 3 1\n", "output": ["NO\n"]}, {"input": "3\n3 1 1\n2 1 2\n1 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100001 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 2 2\n", "output": ["NO\n"]}, {"input": "1\n100010 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n100011 100001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 100010\n", "output": ["NO\n"]}, {"input": "1\n110011 000001 110000\n", "output": ["NO\n"]}, {"input": "1\n101011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 111000\n", "output": ["NO\n"]}, {"input": "1\n101011 001101 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 011101 111001\n", "output": ["NO\n"]}, {"input": "1\n100001 001101 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001111 011011\n", "output": ["NO\n"]}, {"input": "1\n101011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001110 110011\n", "output": ["YES\n"]}, {"input": "1\n110111 001010 111011\n", "output": ["NO\n"]}, {"input": "1\n010011 001011 111011\n", "output": ["NO\n"]}, {"input": "1\n110111 000011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 010011 011111\n", "output": ["NO\n"]}, {"input": "1\n010011 000011 011111\n", "output": ["NO\n"]}, {"input": "1\n110011 010011 011101\n", "output": ["NO\n"]}, {"input": "1\n110010 100011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011110\n", "output": ["NO\n"]}, {"input": "1\n111011 100011 011000\n", "output": ["YES\n"]}, {"input": "1\n110011 000011 001100\n", "output": ["NO\n"]}, {"input": "1\n010110 100011 001100\n", "output": ["NO\n"]}], "task_id": "codecontest/154", "prompt": "Three sticks have integer lengths l_1, l_2 and l_3. Your task is to split precisely one of them into two segments in such a manner that both segments possess positive integer lengths greater than zero, and their combined length equals the initial length of the stick, and it's feasible to form a rectangle with the four sticks that results, ensuring each stick serves as one of its sides exactly. A square is regarded as a rectangle as well. Determine if this is feasible. Assume the input lengths are always positive integers.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "repair_prompt": ["Three sticks have integer lengths l_1, l_2 and l_3. Your task is to split precisely one of them into two segments in such a manner that both segments possess positive integer lengths greater than zero, and their combined length equals the initial length of the stick, and it's feasible to form a rectangle with the four sticks that results, ensuring each stick serves as one of its sides exactly. A square is regarded as a rectangle as well. Determine if this is feasible. Assume the input lengths are always positive integers.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin", " Three sticks have integer lengths l_1, l_2, and l_3. Your task is to split precisely one of them into two segments in such a manner that both segments possess positive integer lengths greater than zero, and their combined length equals the initial length of the stick. Additionally, it's feasible to form a rectangle with the four sticks that result, ensuring each stick serves as one of its sides exactly. A square is also considered a rectangle. Determine if this is possible. Assume the input lengths are always positive integers.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin", " Three sticks have integer lengths l_1, l_2, and l_3. Your task is to split one of them into two segments with positive integer lengths greater than zero, such that the combined length of these segments equals the initial length of the stick, and it's possible to form a rectangle or square with all four sticks. Determine if this is feasible. Assume the input lengths are always positive integers.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin"], "completion": "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks can form the sides of a rectangle\n    if l1 == l2 and l2 == l3:\n        return \"YES\"  # All sides are equal, forms a square\n    elif l1 == l2 or l2 == l3 or l1 == l3:\n        # Two sides are equal, forms a rectangle\n        if l1 + l2 > l3 and l1 + l3 > l2 and l2 + l3 > l1:\n            return \"YES\"\n    return \"NO\"\n\ndef main():\n    t = int(input().strip())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().strip().split())\n        result = can_form_rectangle(l1, l2, l3)\n        print(result)\nmain()", "completions": ["def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] == l[3]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check all combinations to see if we can form a rectangle\n    if l1 == l2 and l2 == l3:\n        return \"YES\"  # All sides are equal, forms a square\n    elif l1 == l2 or l2 == l3 or l1 == l3:\n        # Two sides are equal, can form a rectangle\n        if l1 + l2 > l3 and l1 + l3 > l2 and l2 + l3 > l1:\n            return \"YES\"\n    return \"NO\"\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        result = can_form_rectangle(l1, l2, l3)\n        print(result)\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[1] == l[2]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] % 2 == 0) or (l[1] == l[2] and l[0] % 2 == 0):\n            print(\"YES\")\n        else:\n            print(\"NO\")\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] % 2 == 0) or (l[1] == l[2] and l[0] % 2 == 0):\n            print(\"YES\")\n        else:\n            print(\"NO\")\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[1] == l[2]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] % 2 == 0) or (l[1] == l[2] and l[0] % 2 == 0):\n            print(\"YES\")\n        else:\n            print(\"NO\")\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] == l[3]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check all possible splits of the three sticks\n    if l1 == l2 and l2 == l3:\n        return \"YES\"  # All sticks are equal, can form a square\n    if l1 == l2 or l2 == l3 or l1 == l3:\n        # Two sticks are equal, check if the third can be split to form a rectangle\n        if l1 == l2:\n            return \"YES\" if l3 % 2 == 0 else \"NO\"\n        if l2 == l3:\n            return \"YES\" if l1 % 2 == 0 else \"NO\"\n        if l1 == l3:\n            return \"YES\" if l2 % 2 == 0 else \"NO\"\n    # Check if the three sticks can form a rectangle with one split\n    if l1 + l2 == l3 or l1 + l3 == l2 or l2 + l3 == l1:\n        return \"YES\"\n    return \"NO\"\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        result = can_form_rectangle(l1, l2, l3)\n        print(result)\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks can form the sides of a rectangle\n    if l1 == l2 and l2 == l3:\n        return \"YES\"  # All sides are equal, forms a square\n    elif l1 == l2 or l2 == l3 or l1 == l3:\n        # Two sides are equal, forms a rectangle\n        if l1 + l2 > l3 and l1 + l3 > l2 and l2 + l3 > l1:\n            return \"YES\"\n    return \"NO\"\n\ndef main():\n    t = int(input().strip())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().strip().split())\n        result = can_form_rectangle(l1, l2, l3)\n        print(result)\nmain()"], "session_history": {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"details\": \"The program should start by reading the number of test cases 't' from the input.\"\n      },\n      {\n        \"description\": \"Read the lengths of the three sticks for each test case.\",\n        \"details\": \"For each test case, read the lengths of the three sticks 'l_1', 'l_2', and 'l_3'.\"\n      },\n      {\n        \"description\": \"Check if it's possible to form a rectangle or square with the sticks.\",\n        \"details\": \"For each set of stick lengths, determine if breaking one stick into two segments allows for the formation of a rectangle or square with all four sticks.\"\n      },\n      {\n        \"description\": \"Output the result for each test case.\",\n        \"details\": \"For each test case, output 'YES' if it's possible to form a rectangle or square, otherwise output 'NO'.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize the program to read the number of test cases.\",\n        \"details\": \"Read the number of test cases 't' from the input.\"\n      },\n      {\n        \"step\": \"Loop through each test case.\",\n        \"details\": \"For each test case, read the lengths of the three sticks 'l_1', 'l_2', and 'l_3'.\"\n      },\n      {\n        \"step\": \"Check the conditions for forming a rectangle or square.\",\n        \"details\": \"For each set of stick lengths, check if breaking one stick allows for the formation of a rectangle or square with all four sticks.\"\n      },\n      {\n        \"step\": \"Output the results.\",\n        \"details\": \"Output 'YES' if it's possible to form a rectangle or square, otherwise output 'NO' for each test case.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'rectangle or square': means that the four sticks can form a geometric shape with equal or different side lengths.\n    Explanation: A rectangle has opposite sides of equal length, while a square has all sides of equal length.\n\n# [phrase showing quantity relationship]\n    'greater than zero': means that the segments into which a stick is split must be positive integers.\n    Explanation: This ensures that the segments are valid lengths that can be used to form a geometric shape.\n\n# [degree adverb] \n    'largest': means that we need to consider the stick", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks can form the sides of a rectangle\n    if l1 == l2 and l2 == l3:\n        return \"YES\"  # All sides are equal, forms a square\n    elif l1 == l2 or l2 == l3 or l1 == l3:\n        # Two sides are equal, forms a rectangle\n        if l1 + l2 > l3 and l1 + l3 > l2 and l2 + l3 > l1:\n            return \"YES\"\n    return \"NO\"\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        result = can_form_rectangle(l1, l2, l3)\n        print(result)", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 3 were given"}, "Round_1": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks can form the sides of a rectangle\n    if l1 == l2 and l2 == l3:\n        return \"YES\"  # All sides are equal, forms a square\n    elif l1 == l2 or l2 == l3 or l1 == l3:\n        # Two sides are equal, forms a rectangle\n        if l1 + l2 > l3 and l1 + l3 > l2 and l2 + l3 > l1:\n            return \"YES\"\n    return \"NO\"\n\ndef main():\n    t = int(input().strip())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().strip().split())\n        result = can_form_rectangle(l1, l2, l3)\n        print(result)"}}, "session_historys": [{"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"details\": \"The program should start by reading the number of test cases, t, which is the first line of input.\"\n      },\n      {\n        \"description\": \"Read the lengths of the three sticks for each test case.\",\n        \"details\": \"For each test case, read the lengths of the three sticks, l_1, l_2, and l_3.\"\n      },\n      {\n        \"description\": \"Check if it's possible to form a rectangle or square with the sticks.\",\n        \"details\": \"For each set of stick lengths, determine if breaking one stick into two segments with positive integer lengths allows for the formation of a rectangle or square with all four sticks.\"\n      },\n      {\n        \"description\": \"Output the result for each test case.\",\n        \"details\": \"For each test case, output 'YES' if it's possible to form a rectangle or square, otherwise output 'NO'.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"description\": \"Initialize the program.\",\n        \"details\": \"Start the program by reading the number of test cases.\"\n      },\n      {\n        \"description\": \"Process each test case.\",\n        \"details\": \"For each test case, read the stick lengths and check if forming a rectangle or square is possible.\"\n      },\n      {\n        \"description\": \"Output the results.\",\n        \"details\": \"Output 'YES' or 'NO' for each test case based on the feasibility of forming a rectangle or square.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'rectangle or square formation': means that the combined lengths of the segments from breaking one stick can form a rectangle or square with the other three sticks.\n    Explanation: To form a rectangle or square, we need two pairs of equal lengths. This requires at least two sticks to be of the same length and the other two sticks to be of the same length or one pair to be equal and the other two to be equal to the first pair.\n\n# [phrase showing quantity relationship]\n    'more than': means that the segments from breaking one stick must be greater than zero.\n", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or l[0] == l[1] and l[2] == l[3]:\n            print(\"YES\")\n        else:\n            print(\"NO\")", "report": "The compilation output of the preceding code is: list index out of range"}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] == l[3]):\n            print(\"YES\")\n        else:\n            print(\"NO\")"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"details\": \"The first line of input contains the number of test cases, t.\"\n      },\n      {\n        \"description\": \"Read the lengths of the three sticks for each test case.\",\n        \"details\": \"For each test case, read three integers l_1, l_2, and l_3 representing the lengths of the sticks.\"\n      },\n      {\n        \"description\": \"Check if any stick can be split into two segments that can form a rectangle.\",\n        \"details\": \"For each test case, determine if one of the sticks can be split into two segments with positive integer lengths such that the combined length of these two segments equals the original length of the stick. Additionally, check if the resulting four segments can form a rectangle or a square.\"\n      },\n      {\n        \"description\": \"Output the result for each test case.\",\n        \"details\": \"For each test case, output 'YES' if it's possible to form a rectangle with the resulting four sticks, otherwise output 'NO'.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Read the number of test cases.\",\n        \"action\": \"Read the first line of input to get the number of test cases.\"\n      },\n      {\n        \"step\": \"Iterate through each test case.\",\n        \"action\": \"Loop through each test case based on the number of test cases read.\"\n      },\n      {\n        \"step\": \"Read the lengths of the three sticks for the current test case.\",\n        \"action\": \"Read the three integers representing the lengths of the sticks for the current test case.\"\n      },\n      {\n        \"step\": \"Check if a stick can be split to form a rectangle.\",\n        \"action\": \"Check each stick to see if it can be split into two segments that can form a rectangle. This involves checking if there exists a pair of positive integers that sum to the original length of the stick.\"\n      },\n      {\n        \"step\": \"Output the result.\",\n        \"action\": \"For each test case, output 'YES' if a rectangle can be formed, otherwise output 'NO'.\"\n      }\n    ]\n \nPlease read and understand the following inteperation before coding\n # [core concept]\n    'rectangle formation': The task involves checking if three given stick lengths can form a rectangle when one of them is split into two segments.\n    Explanation: A rectangle can be formed if there are two sticks of equal length and one stick of a different length, such that the two shorter sticks can form one side of the rectangle and the longer stick can form the other side.\n\n# [phrase showing quantity relationship]\n    'positive integer lengths': This indicates that the segments obtained from splitting a stick must be greater than zero.\n    Explanation: For example, if a stick of length", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check all combinations to see if we can form a rectangle\n    if l1 == l2 and l2 == l3:\n        return \"YES\"  # All sides are equal, forms a square\n    elif l1 == l2 or l2 == l3 or l1 == l3:\n        # Two sides are equal, can form a rectangle\n        if l1 + l2 > l3 and l1 + l3 > l2 and l2 + l3 > l1:\n            return \"YES\"\n        elif l1 + l2 > l3 and l1 + l3 > l2 and l2 + l3 > l1:\n            return \"YES\"\n        elif l1 + l3 > l2 and l1 + l2 > l3 and l2 + l3 > l1:\n            return \"YES\"\n    return \"NO\"\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        result = can_form_rectangle(l1, l2, l3)\n        print(result)", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 3 were given"}, "Round_1": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check all combinations to see if we can form a rectangle\n    if l1 == l2 and l2 == l3:\n        return \"YES\"  # All sides are equal, forms a square\n    elif l1 == l2 or l2 == l3 or l1 == l3:\n        # Two sides are equal, can form a rectangle\n        if l1 + l2 > l3 and l1 + l3 > l2 and l2 + l3 > l1:\n            return \"YES\"\n    return \"NO\"\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        result = can_form_rectangle(l1, l2, l3)\n        print(result)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"steps\": [\n          \"Read the first line of input to get the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case.\",\n        \"steps\": [\n          \"For each test case, read the three stick lengths (l_1, l_2, l_3).\",\n          \"Check if any two lengths are equal and the third length is the sum of these two.\",\n          \"If yes, print 'YES'.\",\n          \"If not, print 'NO'.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Read the number of test cases.\",\n      \"Iterate through each test case.\",\n      \"For each test case, read the stick lengths.\",\n      \"Check the condition for forming a rectangle.\",\n      \"Print 'YES' or 'NO' based on the condition.\",\n      \"Repeat for all test cases.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'rectangle formation': means forming a shape with four sides where opposite sides are equal.\n    'square': a special type of rectangle where all sides are equal.\n\n# [phrase showing quantity relationship]\n    'positive integer lengths greater than zero': means the segments and sides must be greater than 0.\n\n# [degree adverb] \n    'largest': not applicable in this context as it does not directly relate to the problem's requirements.\n\n# [code logic]\n    The steps should be implemented sequentially as each step is dependent on the previous one.\n", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[1] == l[2]):\n            print(\"YES\")\n        else:\n            print(\"NO\")", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"details\": \"The program should start by reading the number of test cases, t, from the input.\"\n      },\n      {\n        \"description\": \"Read the lengths of the three sticks for each test case.\",\n        \"details\": \"For each test case, read the lengths of the three sticks, l_1, l_2, and l_3.\"\n      },\n      {\n        \"description\": \"Check if the sticks can form a rectangle or square.\",\n        \"details\": \"Determine if it's possible to break one of the sticks into two segments with positive integer lengths such that the four sticks can form a rectangle or a square.\"\n      },\n      {\n        \"description\": \"Output the result for each test case.\",\n        \"details\": \"For each test case, output 'YES' if the sticks can form a rectangle or square, otherwise output 'NO'.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Read the number of test cases.\",\n        \"action\": \"Read the integer input for the number of test cases.\"\n      },\n      {\n        \"step\": \"Iterate through each test case.\",\n        \"action\": \"Loop through each test case based on the number of test cases read.\"\n      },\n      {\n        \"step\": \"Read the lengths of the three sticks for the current test case.\",\n        \"action\": \"Read the three integers representing the lengths of the sticks.\"\n      },\n      {\n        \"step\": \"Check the conditions for forming a rectangle or square.\",\n        \"action\": \"Determine if one of the sticks can be split into two segments that can form a rectangle or square with the remaining sticks.\"\n      },\n      {\n        \"step\": \"Output the result.\",\n        \"action\": \"Print 'YES' if the sticks can form a rectangle or square, otherwise print 'NO'.\"\n      },\n      {\n        \"step\": \"End of test cases.\",\n        \"action\": \"End the loop once all test cases have been processed.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"details\": \"The program should start by reading the number of test cases, t, from the input.\"\n      },\n      {\n        \"description\": \"Read the lengths of the three sticks for each test case.\",\n        \"details\": \"For each test case, read the lengths of the three sticks, l_1, l_2, and l_3.\"\n      },\n      {\n        \"description\": \"Check if the", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] % 2 == 0) or (l[1] == l[2] and l[0] % 2 == 0):\n            print(\"YES\")\n        else:\n            print(\"NO\")", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 1 was given"}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] % 2 == 0) or (l[1] == l[2] and l[0] % 2 == 0):\n            print(\"YES\")\n        else:\n            print(\"NO\")"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"steps\": [\n          \"Read the first line of input to get the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case.\",\n        \"steps\": [\n          \"For each test case, read the three stick lengths (l_1, l_2, l_3).\",\n          \"Check if any two lengths are equal and the third length is even with the sum of the two equal lengths.\",\n          \"If the conditions are met, output 'YES'; otherwise, output 'NO'.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Read the number of test cases.\",\n      \"Iterate through each test case.\",\n      \"For each test case, read the stick lengths.\",\n      \"Check the conditions for forming a rectangle.\",\n      \"Output the result for each test case.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'rectangle formation': The task involves checking if three given stick lengths can form a rectangle when one of the sticks is split into two positive integer lengths.\n\n# [phrase showing quantity relationship]\n    'positive integer lengths': This indicates that the split lengths must be greater than zero.\n\n# [degree adverb] \n    'positive': This implies that the lengths must be strictly greater than zero.\n\n# [code logic]\n    The steps should be implemented sequentially as follows:\n    1. Read the number of test cases.\n    2. For each test case,", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] % 2 == 0) or (l[1] == l[2] and l[0] % 2 == 0):\n            print(\"YES\")\n        else:\n            print(\"NO\")", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"steps\": [\n          \"Read the first line of input to get the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case.\",\n        \"steps\": [\n          \"For each test case, read the three integers representing the lengths of the sticks.\",\n          \"Check if it's possible to split one of the sticks into two segments with positive integer lengths that can form a rectangle.\",\n          \"Output 'YES' if feasible, otherwise 'NO'.\"\n        ]\n      },\n      {\n        \"description\": \"Determine if a rectangle can be formed.\",\n        \"steps\": [\n          \"Sort the lengths of the sticks.\",\n          \"Check if the two smallest sticks can form a rectangle with the two largest sticks.\",\n          \"Consider the case where the two smallest sticks are equal, which would form a square.\",\n          \"Ensure all segments are positive integers greater than zero.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Initialize the number of test cases.\",\n      \"Loop through each test case.\",\n      \"Read the lengths of the sticks.\",\n      \"Sort the lengths to simplify the rectangle formation check.\",\n      \"Check if the two smallest lengths are equal or if the sum of the two smallest equals the largest length to form a rectangle or a square.\",\n      \"Output the result for each test case.\",\n      \"End the program.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'rectangle formation': means that we can arrange the sticks to form a rectangle or a square.\n    Explanation: A rectangle can be formed if we can split one stick into two parts such that the four sticks can be arranged to form a rectangle. A square is a special case of a rectangle where the length and width are equal.\n\n# [phrase showing quantity relationship]\n    'positive integer lengths': means that the lengths of the segments after splitting must be greater than zero.\n    Explanation: This is important to ensure that the segments can be used to form a valid rectangle or", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[1] == l[2]):\n            print(\"YES\")\n        else:\n            print(\"NO\")", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 1 was given"}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[1] == l[2]):\n            print(\"YES\")\n        else:\n            print(\"NO\")"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"details\": \"The program should start by reading the number of test cases, t, which is the first line of input.\"\n      },\n      {\n        \"description\": \"Read the lengths of the three sticks for each test case.\",\n        \"details\": \"For each test case, read the lengths of the three sticks, l_1, l_2, and l_3.\"\n      },\n      {\n        \"description\": \"Check if it's possible to form a rectangle.\",\n        \"details\": \"For each set of stick lengths, determine if breaking one stick into two pieces allows for the formation of a rectangle with positive integer lengths.\"\n      },\n      {\n        \"description\": \"Output the result for each test case.\",\n        \"details\": \"For each test case, output 'YES' if a rectangle can be formed, otherwise output 'NO'.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Read the number of test cases.\",\n        \"action\": \"Read the first line of input to get the number of test cases.\"\n      },\n      {\n        \"step\": \"Iterate through each test case.\",\n        \"action\": \"Loop through each test case based on the number of test cases read.\"\n      },\n      {\n        \"step\": \"Read the lengths of the three sticks for the current test case.\",\n        \"action\": \"Read the next three integers for the current test case.\"\n      },\n      {\n        \"step\": \"Check if a rectangle can be formed.\",\n        \"action\": \"Determine if breaking one of the sticks into two pieces allows for the formation of a rectangle with positive integer lengths.\"\n      },\n      {\n        \"step\": \"Output the result.\",\n        \"action\": \"Print 'YES' if a rectangle can be formed, otherwise print 'NO' for the current test case.\"\n      },\n      {\n        \"step\": \"Repeat for the next test case.\",\n        \"action\": \"Continue the loop for the next test case until all test cases are processed.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'rectangle formation': means creating a rectangle with given stick lengths after potentially splitting one of them.\n    Explanation: A rectangle can be formed if we can split one stick into two parts such that the four resulting sticks can be arranged into two pairs of equal lengths. This includes the possibility of forming a square where all sides are equal.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implement simultaneously.\n    The logic involves checking if one", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] % 2 == 0) or (l[1] == l[2] and l[0] % 2 == 0):\n            print(\"YES\")\n        else:\n            print(\"NO\")", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 1 was given"}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] % 2 == 0) or (l[1] == l[2] and l[0] % 2 == 0):\n            print(\"YES\")\n        else:\n            print(\"NO\")"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"steps\": [\n          \"Read the first line of input to get the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case.\",\n        \"steps\": [\n          \"For each test case, read the three stick lengths (l_1, l_2, l_3).\",\n          \"Check if any stick can be split into two segments with positive integer lengths that can form a rectangle or square with the other three sticks.\",\n          \"Determine if it's possible to form a rectangle or square with the four sticks.\"\n        ]\n      },\n      {\n        \"description\": \"Check the conditions for forming a rectangle or square.\",\n        \"steps\": [\n          \"A rectangle or square requires two pairs of equal lengths.\",\n          \"Check if any two sticks are equal and the sum of the other two sticks is equal to this length.\",\n          \"Check if the three sticks can be split into two pairs of equal lengths.\"\n        ]\n      }\n    ],\n    \"major_steps\": [\n      \"Read the number of test cases.\",\n      \"Iterate through each test case.\",\n      \"For each test case, read the stick lengths.\",\n      \"Check the conditions for forming a rectangle or square.\",\n      \"Output 'YES' if it's possible to form a rectangle or square, otherwise output 'NO' for each test case.\",\n      \"Repeat for all test cases.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'rectangle or square': means that the four sticks can form a geometric shape with equal opposite sides.\n    'positive integer lengths': means that the segments into which a stick is split must be greater than zero.\n\n# [phrase showing quantity relationship]\n    'greater than zero': means that the segments into which a stick is split must be positive integers.\n\n# [degree adverb] \n    No degree adverb specific to this requirement.\n\n# [code logic]\n    Steps 2-4 should be considered simultaneously for each test case.\n    - Read the stick", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or l[0] == l[1] and l[2] == l[3]:\n            print(\"YES\")\n        else:\n            print(\"NO\")", "report": "The compilation output of the preceding code is: list index out of range"}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] == l[3]):\n            print(\"YES\")\n        else:\n            print(\"NO\")"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"details\": \"The program should start by reading the number of test cases 't' from the input.\"\n      },\n      {\n        \"description\": \"Read the lengths of the three sticks for each test case.\",\n        \"details\": \"For each test case, read the lengths of the three sticks 'l_1', 'l_2', and 'l_3'.\"\n      },\n      {\n        \"description\": \"Check if the sticks can form a rectangle or square.\",\n        \"details\": \"For each set of stick lengths, determine if one of the sticks can be split into two segments such that the combined length of these two segments equals the original length of the stick, and the remaining three sticks can form a rectangle or square.\"\n      },\n      {\n        \"description\": \"Output the result for each test case.\",\n        \"details\": \"For each test case, output 'YES' if it's possible to form a rectangle or square with the sticks, otherwise output 'NO'.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize the program to read the number of test cases.\",\n        \"details\": \"Start by reading the number of test cases 't' from the input.\"\n      },\n      {\n        \"step\": \"Loop through each test case.\",\n        \"details\": \"Use a loop to iterate through each test case based on the number of test cases 't'.\"\n      },\n      {\n        \"step\": \"Read the lengths of the three sticks for the current test case.\",\n        \"details\": \"For each test case, read the lengths of the three sticks 'l_1', 'l_2', and 'l_3' from the input.\"\n      },\n      {\n        \"step\": \"Check the conditions for forming a rectangle or square.\",\n        \"details\": \"Check if one of the sticks can be split into two segments such that the combined length of these two segments equals the original length of the stick, and the remaining three sticks can form a rectangle or square.\"\n      },\n      {\n        \"step\": \"Output the result for the current test case.\",\n        \"details\": \"Output 'YES' if it\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'rectangle formation': The task involves determining if four sticks can form a rectangle or square, considering one stick can be split into two segments.\n    Explanation: A rectangle or square is a shape with four sides where opposite sides are equal in length. Splitting one stick into two segments allows for flexibility in matching the lengths of the sides.\n\n# [phrase showing quantity relationship]\n    'positive integer lengths': Indicates that the lengths of the segments after splitting must be greater than zero and must be integers.\n    Explanation: This phrase ensures that the segments formed after splitting a stick are", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check all possible splits of the three sticks\n    if l1 == l2 and l2 == l3:\n        return \"YES\"  # All sticks are equal, can form a square\n    if l1 == l2 or l2 == l3 or l1 == l3:\n        # Two sticks are equal, check if the third can be split to form a rectangle\n        if l1 == l2:\n            return \"YES\" if l3 % 2 == 0 else \"NO\"\n        if l2 == l3:\n            return \"YES\" if l1 % 2 == 0 else \"NO\"\n        if l1 == l3:\n            return \"YES\" if l2 % 2 == 0 else \"NO\"\n    # Check if the three sticks can form a rectangle with one split\n    if l1 + l2 == l3 or l1 + l3 == l2 or l2 + l3 == l1:\n        return \"YES\"\n    return \"NO\"\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        result = can_form_rectangle(l1, l2, l3)\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"details\": \"The program should start by reading the number of test cases 't' from the input.\"\n      },\n      {\n        \"description\": \"Read the lengths of the three sticks for each test case.\",\n        \"details\": \"For each test case, read the lengths of the three sticks 'l_1', 'l_2', and 'l_3'.\"\n      },\n      {\n        \"description\": \"Check if it's possible to form a rectangle or square with the sticks.\",\n        \"details\": \"For each set of stick lengths, determine if breaking one stick into two segments allows for the formation of a rectangle or square with all four sticks.\"\n      },\n      {\n        \"description\": \"Output the result for each test case.\",\n        \"details\": \"For each test case, output 'YES' if it's possible to form a rectangle or square, otherwise output 'NO'.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize the program to read the number of test cases.\",\n        \"details\": \"Read the number of test cases 't' from the input.\"\n      },\n      {\n        \"step\": \"Loop through each test case.\",\n        \"details\": \"For each test case, read the lengths of the three sticks 'l_1', 'l_2', and 'l_3'.\"\n      },\n      {\n        \"step\": \"Check the conditions for forming a rectangle or square.\",\n        \"details\": \"For each set of stick lengths, check if breaking one stick allows for the formation of a rectangle or square with all four sticks.\"\n      },\n      {\n        \"step\": \"Output the results.\",\n        \"details\": \"Output 'YES' if it's possible to form a rectangle or square, otherwise output 'NO' for each test case.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'rectangle or square': means that the four sticks can form a geometric shape with equal or different side lengths.\n    Explanation: A rectangle has opposite sides of equal length, while a square has all sides of equal length.\n\n# [phrase showing quantity relationship]\n    'greater than zero': means that the segments into which a stick is split must be positive integers.\n    Explanation: This ensures that the segments are valid lengths that can be used to form a geometric shape.\n\n# [degree adverb] \n    'largest': means that we need to consider the stick", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks can form the sides of a rectangle\n    if l1 == l2 and l2 == l3:\n        return \"YES\"  # All sides are equal, forms a square\n    elif l1 == l2 or l2 == l3 or l1 == l3:\n        # Two sides are equal, forms a rectangle\n        if l1 + l2 > l3 and l1 + l3 > l2 and l2 + l3 > l1:\n            return \"YES\"\n    return \"NO\"\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        result = can_form_rectangle(l1, l2, l3)\n        print(result)", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 3 were given"}, "Round_1": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks can form the sides of a rectangle\n    if l1 == l2 and l2 == l3:\n        return \"YES\"  # All sides are equal, forms a square\n    elif l1 == l2 or l2 == l3 or l1 == l3:\n        # Two sides are equal, forms a rectangle\n        if l1 + l2 > l3 and l1 + l3 > l2 and l2 + l3 > l1:\n            return \"YES\"\n    return \"NO\"\n\ndef main():\n    t = int(input().strip())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().strip().split())\n        result = can_form_rectangle(l1, l2, l3)\n        print(result)"}}], "scores": [], "pass_results": [true, false, true, false, false, true, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 158, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "mutate_method": "add_1_sentence_at_end", "save_node": false, "parent_index": 87}
