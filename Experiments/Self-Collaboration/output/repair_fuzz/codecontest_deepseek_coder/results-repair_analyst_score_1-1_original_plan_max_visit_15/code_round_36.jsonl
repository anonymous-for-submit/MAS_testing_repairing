{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has made the decision to start singing. He has a one-minute songs, b two-minute songs and c three-minute songs, and he wants to distribute all songs into two concerts where every song should be included in exactly one concert. He wants to minimize the absolute difference in the lengths of the concerts as much as he can. The duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has made the decision to start singing. He has a one-minute songs, b two-minute songs and c three-minute songs, and he wants to distribute all songs into two concerts where every song should be included in exactly one concert. He wants to minimize the absolute difference in the lengths of the concerts as much as he can. The duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin", " Luntik has decided to begin singing. He has a collection of one-minute songs, b two-minute songs, and c three-minute songs, and he needs to allocate all these songs into two separate concerts. Each song must be included in exactly one concert. Luntik aims to minimize the difference in the total duration between the two concerts as much as possible. The total duration of a concert is the sum of the durations of all songs within it. Can you assist Luntik in determining the smallest possible difference in minutes between the concert durations?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin", " Luntik has decided to start singing, with a, b, and c representing one-minute, two-minute, and three-minute songs respectively. He wants to distribute all songs into two concerts, minimizing the absolute difference in their lengths. Find the smallest possible difference in minutes between the concert durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin"], "completion": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try to allocate songs to two concerts to minimize the difference\n        for x in range(3):  # x represents the number of three-minute songs in the first concert\n            for y in range(3):  # y represents the number of two-minute songs in the first concert\n                for z in range(3):  # z represents the number of one-minute songs in the first concert\n                    if x*3 + y*2 + z <= total_duration // 2:\n                        first_concert_duration = x*3 + y*2 + z\n                        second_concert_duration = total_duration - first_concert_duration\n                        min_diff = min(min_diff, abs(first_concert_duration - second_concert_duration))\n        \n        print(min_diff)\nmain()", "completions": ["def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total duration of the first concert\n        first_concert_duration = min(b, c // 2) * 3 + min(a, (b - min(b, c // 2)) // 2) * 3\n        \n        # Calculate the total duration of the second concert\n        second_concert_duration = min(a, b // 2) * 3 + min(c, (b - min(b, c // 2)) // 2) * 3\n        \n        # Calculate the absolute difference between the two concert durations\n        difference = abs(first_concert_duration - second_concert_duration)\n        \n        # Store the minimum difference found for the current test case\n        results.append(difference)\n    \n    # Output the minimum differences stored\n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total duration of all songs\n        total_duration = a + 2*b + 3*c\n        \n        # The optimal way to minimize the difference is to try to balance the durations as evenly as possible\n        # We can try to put as many 3-minute songs in one concert and the rest in the other\n        # The best we can do is to have one concert with a 3-minute song and the other with the rest\n        min_diff = min(total_duration - 2*(b + c + 1), total_duration - 2*(a + c + 1))\n        \n        # The minimum difference will be the absolute value of the difference between the two concerts\n        print(min(min_diff, abs(total_duration - 2*(a + b + 1))))\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try all combinations to find the minimal difference\n        for x in range(3):  # Number of three-minute songs in the first concert\n            for y in range(3):  # Number of two-minute songs in the first concert\n                for z in range(3):  # Number of one-minute songs in the first concert\n                    if x + y + z <= a + b + c:  # Ensure the total number of songs in the first concert does not exceed the total\n                        first_concert_duration = 3*x + 2*y + z\n                        second_concert_duration = total_duration - first_concert_duration\n                        diff = abs(first_concert_duration - second_concert_duration)\n                        min_diff = min(min_diff, diff)\n        \n        print(min_diff)\nmain()", "def min_difference(a, b, c):\n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Try all possible allocations of songs to two concerts\n    for i in range(4):\n        for j in range(4):\n            # Calculate the duration of the first concert\n            first_duration = i * 1 + (min(i, b) * 2) + (min(i, c) * 3)\n            # Calculate the duration of the second concert\n            second_duration = total_duration - first_duration\n            # Calculate the difference between the two concerts\n            diff = abs(first_duration - second_duration)\n            # Update the minimum difference if a smaller one is found\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n    \n    # Iterate through each test case\n    for _ in range(t):\n        # Read the values of a, b, and c\n        a, b, c = map(int, input().split())\n        # Calculate and print the minimal possible difference\n        print(min_difference(a, b, c))\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total duration of the first concert\n        first_concert_duration = min(b, c // 2) * 3 + min(a, (b - min(b, c // 2)) // 2) * 3\n        \n        # Calculate the total duration of the second concert\n        second_concert_duration = c * 3 + b * 2 + a\n        \n        # Calculate the absolute difference between the two concert durations\n        difference = abs(first_concert_duration - second_concert_duration)\n        \n        # Store the minimum difference found for the current test case\n        results.append(difference)\n    \n    # Output the minimum differences for all test cases\n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try all possible distributions and find the minimum difference\n        for i in range(3):\n            for j in range(3):\n                if i * 1 + j * 2 <= a and (total_duration - (i * 1 + j * 2) - (i + j) * 3) % 2 == 0:\n                    remaining = total_duration - (i * 1 + j * 2) - (i + j) * 3\n                    if remaining >= 0 and remaining <= c:\n                        diff = abs((i * 1 + j * 2) - ((total_duration - (i * 1 + j * 2)) // 2))\n                        min_diff = min(min_diff, diff)\n        \n        print(min_diff)\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try all combinations to find the minimal possible difference\n        for i in range(total_duration + 1):\n            if i <= total_duration // 2:\n                # Calculate the duration of the first concert\n                first_concert_duration = i\n                # Calculate the duration of the second concert\n                second_concert_duration = total_duration - i\n                # Calculate the absolute difference\n                diff = abs(first_concert_duration - second_concert_duration)\n                # Update the minimal possible difference\n                min_diff = min(min_diff, diff)\n        \n        print(min_diff)\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try all combinations to find the minimal difference\n        for i in range(total_duration + 1):\n            if i <= total_duration // 2:\n                duration1 = i\n                duration2 = total_duration - i\n                diff = abs(duration1 - duration2)\n                min_diff = min(min_diff, diff)\n        \n        print(min_diff)\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try all combinations to find the minimal possible difference\n        for x in range(2):  # Two concerts, x can be 0 or 1\n            for y in range(2):  # Two concerts, y can be 0 or 1\n                for z in range(2):  # Two concerts, z can be 0 or 1\n                    for w in range(2):  # Two concerts, w can be 0 or 1\n                        duration1 = x*a + y*b + z*c\n                        duration2 = total_duration - duration1\n                        diff = abs(duration1 - duration2)\n                        min_diff = min(min_diff, diff)\n        \n        print(min_diff)\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try to allocate songs to two concerts to minimize the difference\n        for x in range(3):  # x represents the number of three-minute songs in the first concert\n            for y in range(3):  # y represents the number of two-minute songs in the first concert\n                for z in range(3):  # z represents the number of one-minute songs in the first concert\n                    if x*3 + y*2 + z <= total_duration // 2:\n                        first_concert_duration = x*3 + y*2 + z\n                        second_concert_duration = total_duration - first_concert_duration\n                        min_diff = min(min_diff, abs(first_concert_duration - second_concert_duration))\n        \n        print(min_diff)\nmain()"], "session_history": {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"details\": \"The first line of input contains the number of test cases, t.\"\n      },\n      {\n        \"description\": \"Read the number of one-minute, two-minute, and three-minute songs for each test case.\",\n        \"details\": \"For each test case, read three integers a, b, and c.\"\n      },\n      {\n        \"description\": \"Calculate the total duration of all songs.\",\n        \"details\": \"Sum up the durations of all songs to get the total duration.\"\n      },\n      {\n        \"description\": \"Determine the optimal way to allocate songs to two concerts to minimize the difference in total duration.\",\n        \"details\": \"Use a strategy to allocate songs, considering the balance between the two concerts.\"\n      },\n      {\n        \"description\": \"Compute the smallest possible difference in minutes between the concert durations.\",\n        \"details\": \"Calculate the absolute difference between the total durations of the two concerts.\"\n      },\n      {\n        \"description\": \"Output the result for each test case.\",\n        \"details\": \"For each test case, print the minimal possible difference in minutes between the concerts durations.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize a loop to read the number of test cases.\",\n        \"details\": \"Loop through the input to read each test case.\"\n      },\n      {\n        \"step\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs.\",\n        \"details\": \"Read the values of a, b, and c for each test case.\"\n      },\n      {\n        \"step\": \"Calculate the total duration of all songs in the test case.\",\n        \"details\": \"Sum the durations of all songs to get the total duration.\"\n      },\n      {\n        \"step\": \"Allocate songs to two concerts to minimize the difference in total duration.\",\n        \"details\": \"Use a strategy to distribute songs, aiming for balance between the two concerts.\"\n      },\n      {\n        \"step\": \"Compute the difference in total duration between the two concerts.\",\n        \"details\": \"Calculate\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'allocation': means distributing songs between two concerts to balance their total durations.\n    'minimizing difference': means finding the smallest possible difference between the two concert durations.\n\n# [phrase showing quantity relationship]\n    'as many times as': means the number of times a song appears in a concert should be at least equal to the song's duration.\n\n# [degree adverb] \n    'smallest possible': means the goal is to find the minimum difference in total duration between the two concerts.\n\n# [code logic]\n    The steps should be implemented sequentially", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try to allocate songs to two concerts to minimize the difference\n        for x in range(3):  # x represents the number of three-minute songs in the first concert\n            for y in range(3):  # y represents the number of two-minute songs in the first concert\n                for z in range(3):  # z represents the number of one-minute songs in the first concert\n                    if x*3 + y*2 + z <= total_duration // 2:\n                        first_concert_duration = x*3 + y*2 + z\n                        second_concert_duration = total_duration - first_concert_duration\n                        min_diff = min(min_diff, abs(first_concert_duration - second_concert_duration))\n        \n        print(min_diff)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try to allocate songs to two concerts to minimize the difference\n        for x in range(3):  # x represents the number of three-minute songs in the first concert\n            for y in range(3):  # y represents the number of two-minute songs in the first concert\n                for z in range(3):  # z represents the number of one-minute songs in the first concert\n                    if x*3 + y*2 + z <= total_duration // 2:\n                        first_concert_duration = x*3 + y*2 + z\n                        second_concert_duration = total_duration - first_concert_duration\n                        min_diff = min(min_diff, abs(first_concert_duration - second_concert_duration))\n        \n        print(min_diff)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": " ```json\n{\n  \"Decomposition\": {\n    \"Subproblem1\": \"Read the number of test cases (t) from the input.\",\n    \"Subproblem2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs (a, b, c).\",\n    \"Subproblem3\": \"Determine the optimal way to distribute the songs into two concerts to minimize the absolute difference in their lengths.\",\n    \"Subproblem4\": \"Calculate the minimal possible difference in minutes between the concert durations for each test case.\"\n  },\n  \"High-Level Plan\": {\n    \"Step1\": \"Initialize a variable to store the total number of test cases (t).\",\n    \"Step2\": \"Read the value of t from the input.\",\n    \"Step3\": \"Loop through each test case from 1 to t:\",\n    \"Step4\": \"Read the values of a, b, and c for the current test case.\",\n    \"Step5\": \"Determine the optimal distribution of songs by considering the number of two-minute and three-minute songs:\",\n    \"Step6\": \"Calculate the total duration of the first concert by including as many two-minute and three-minute songs as possible.\",\n    \"Step7\": \"Calculate the total duration of the second concert by including the remaining one-minute and two-minute songs.\",\n    \"Step8\": \"Compute the absolute difference between the two concert durations.\",\n    \"Step9\": \"Store the minimum difference found for the current test case.\",\n    \"Step10\": \"After processing all test cases, output the minimum differences stored.\"\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"Decomposition\": {\n    \"Subproblem1\": \"Read the number of test cases (t) from the input.\",\n    \"Subproblem2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs (a, b, c).\",\n    \"Subproblem3\": \"Determine the optimal way to distribute the songs into two concerts to minimize the absolute difference in their lengths.\",\n    \"Subproblem4\": \"Calculate the minimal possible difference in minutes between the concert durations for each test case.\"\n  },\n ", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total duration of the first concert\n        first_concert_duration = min(b, c // 2) * 3 + min(a, (b - first_concert_duration) // 2) * 3\n        \n        # Calculate the total duration of the second concert\n        second_concert_duration = min(a, b // 2) * 3 + min(c, (b - min(b, c // 2)) // 2) * 3\n        \n        # Calculate the absolute difference between the two concert durations\n        difference = abs(first_concert_duration - second_concert_duration)\n        \n        # Store the minimum difference found for the current test case\n        results.append(difference)\n    \n    # Output the minimum differences stored\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total duration of the first concert\n        first_concert_duration = min(b, c // 2) * 3 + min(a, (b - min(b, c // 2)) // 2) * 3\n        \n        # Calculate the total duration of the second concert\n        second_concert_duration = min(a, b // 2) * 3 + min(c, (b - min(b, c // 2)) // 2) * 3\n        \n        # Calculate the absolute difference between the two concert durations\n        difference = abs(first_concert_duration - second_concert_duration)\n        \n        # Store the minimum difference found for the current test case\n        results.append(difference)\n    \n    # Output the minimum differences stored\n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"details\": \"The first line of input contains the number of test cases, t.\"\n      },\n      {\n        \"description\": \"Read the number of one-minute, two-minute, and three-minute songs for each test case.\",\n        \"details\": \"For each test case, read three integers a, b, and c representing the number of one-minute, two-minute, and three-minute songs respectively.\"\n      },\n      {\n        \"description\": \"Calculate the optimal distribution of songs to minimize the difference in concert durations.\",\n        \"details\": \"Determine the best way to allocate the songs to two concerts to minimize the difference in their total durations.\"\n      },\n      {\n        \"description\": \"Output the minimal possible difference for each test case.\",\n        \"details\": \"For each test case, output the smallest possible difference in minutes between the two concerts' durations.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Read the number of test cases.\",\n        \"action\": \"Read the first line of input to get the number of test cases.\"\n      },\n      {\n        \"step\": \"Iterate through each test case.\",\n        \"action\": \"Loop through the number of test cases to process each case individually.\"\n      },\n      {\n        \"step\": \"Read the number of songs for the current test case.\",\n        \"action\": \"For each test case, read the values of a, b, and c.\"\n      },\n      {\n        \"step\": \"Calculate the optimal distribution.\",\n        \"action\": \"Use a strategy to allocate the songs to two concerts, aiming to minimize the difference in their total durations. This could involve trying different combinations or using a mathematical approach to find the optimal distribution.\"\n      },\n      {\n        \"step\": \"Output the result.\",\n        \"action\": \"For each test case, output the smallest possible difference in minutes between the two concerts' durations.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means the allocation of songs to two concerts to minimize the difference in their total durations.\n    Explanation: The goal is to divide the songs into two groups such that the sum of the durations in each group is as close as possible.\n\n# [phrase showing quantity relationship]\n    'as much as possible': means to find the closest possible total durations for the two concerts.\n\n# [degree adverb] \n    'smallest possible': means the minimum difference between the two concerts' durations.\n\n# [code logic]\n    The steps should be considered", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total duration of all songs\n        total_duration = a + 2*b + 3*c\n        \n        # The optimal way to minimize the difference is to try to balance the durations as evenly as possible\n        # We can try to put as many 3-minute songs in one concert and the rest in the other\n        # The best we can do is to have one concert with a 3-minute song and the other with the rest\n        min_diff = min(total_duration - 2*(b + c + 1), total_duration - 2*(a + c + 1))\n        \n        # The minimum difference will be the absolute value of the difference between the two concerts\n        print(min(min_diff, abs(total_duration - 2*(a + b + 1))))", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total duration of all songs\n        total_duration = a + 2*b + 3*c\n        \n        # The optimal way to minimize the difference is to try to balance the durations as evenly as possible\n        # We can try to put as many 3-minute songs in one concert and the rest in the other\n        # The best we can do is to have one concert with a 3-minute song and the other with the rest\n        min_diff = min(total_duration - 2*(b + c + 1), total_duration - 2*(a + c + 1))\n        \n        # The minimum difference will be the absolute value of the difference between the two concerts\n        print(min(min_diff, abs(total_duration - 2*(a + b + 1))))"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"details\": \"The first line of input contains the number of test cases, t.\"\n      },\n      {\n        \"description\": \"Read the number of one-minute, two-minute, and three-minute songs for each test case.\",\n        \"details\": \"For each test case, read the integers a, b, and c.\"\n      },\n      {\n        \"description\": \"Calculate the total duration of all songs for each test case.\",\n        \"details\": \"Sum the durations of all songs a, b, and c to get the total duration.\"\n      },\n      {\n        \"description\": \"Determine the optimal way to distribute the songs to minimize the absolute difference in concert durations.\",\n        \"details\": \"Use a strategy to distribute the songs, preferably starting with the largest duration songs to balance the concerts as evenly as possible.\"\n      },\n      {\n        \"description\": \"Calculate the absolute difference between the two concert durations.\",\n        \"details\": \"After distributing the songs, calculate the absolute difference between the sum of the durations of the two concerts.\"\n      },\n      {\n        \"description\": \"Output the minimal possible difference for each test case.\",\n        \"details\": \"For each test case, output the minimal possible difference in minutes between the concerts durations.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize a variable to store the number of test cases.\",\n        \"details\": \"Read the first line of input to get the number of test cases.\"\n      },\n      {\n        \"step\": \"Loop through each test case.\",\n        \"details\": \"Iterate through the number of test cases to process each case individually.\"\n      },\n      {\n        \"step\": \"Read the number of one-minute, two-minute, and three-minute songs for the current test case.\",\n        \"details\": \"For each test case, read the integers a, b, and c.\"\n      },\n      {\n        \"step\": \"Calculate the total duration of all songs for the current test case.\",\n        \"details\": \"Sum the durations of all songs a, b, and c to get the total duration.\"\n      },\n\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups with minimal difference in total duration.\n    Explanation: Luntik wants to distribute his songs into two concerts such that the total duration of songs in each concert is as close as possible. This involves balancing the durations of the two concerts to minimize the absolute difference.\n\n# [phrase showing quantity relationship]\n    'as much as': means to find the minimal possible difference, which indicates that we need to balance the durations of the two concerts.\n\n# [degree adverb] \n    'minimal': means to find the smallest", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try all combinations to find the minimal difference\n        for x in range(3):  # Number of three-minute songs in the first concert\n            for y in range(3):  # Number of two-minute songs in the first concert\n                for z in range(3):  # Number of one-minute songs in the first concert\n                    if x + y + z <= a + b + c:  # Ensure the total number of songs in the first concert does not exceed the total\n                        first_concert_duration = 3*x + 2*y + z\n                        second_concert_duration = total_duration - first_concert_duration\n                        diff = abs(first_concert_duration - second_concert_duration)\n                        min_diff = min(min_diff, diff)\n        \n        print(min_diff)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try all combinations to find the minimal difference\n        for x in range(3):  # Number of three-minute songs in the first concert\n            for y in range(3):  # Number of two-minute songs in the first concert\n                for z in range(3):  # Number of one-minute songs in the first concert\n                    if x + y + z <= a + b + c:  # Ensure the total number of songs in the first concert does not exceed the total\n                        first_concert_duration = 3*x + 2*y + z\n                        second_concert_duration = total_duration - first_concert_duration\n                        diff = abs(first_concert_duration - second_concert_duration)\n                        min_diff = min(min_diff, diff)\n        \n        print(min_diff)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"details\": \"The program should start by reading the number of test cases, t, which is the first line of input.\"\n      },\n      {\n        \"description\": \"Read the number of one-minute, two-minute, and three-minute songs for each test case.\",\n        \"details\": \"For each test case, read the values of a, b, and c, which represent the number of one-minute, two-minute, and three-minute songs, respectively.\"\n      },\n      {\n        \"description\": \"Calculate the smallest possible difference in minutes between the concert durations.\",\n        \"details\": \"Determine the optimal way to allocate the songs to two concerts to minimize the difference in their total durations. This involves considering the distribution of the songs based on their durations.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize a variable to store the minimum difference found.\",\n        \"details\": \"This will keep track of the smallest difference across all test cases.\"\n      },\n      {\n        \"step\": \"Iterate through each test case.\",\n        \"details\": \"For each test case, read the values of a, b, and c.\"\n      },\n      {\n        \"step\": \"Calculate the possible differences for allocating the songs.\",\n        \"details\": \"Consider different ways to allocate the songs to two concerts and calculate the differences for each allocation.\"\n      },\n      {\n        \"step\": \"Update the minimum difference if a smaller difference is found.\",\n        \"details\": \"After considering all possible allocations, update the minimum difference if a smaller one is found.\"\n      },\n      {\n        \"step\": \"Output the minimum difference for each test case.\",\n        \"details\": \"For each test case, output the smallest possible difference in minutes between the concert durations.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'allocation': means distributing items (songs in this case) into two groups (concerts) with the goal of minimizing the difference in their total durations.\n    Explanation: Luntik has a collection of songs with different durations and he wants to divide these songs into two concerts such that the total duration of songs in each concert is as close as possible.\n\n# [phrase showing quantity relationship]\n    'as many times': means the number of times a song appears in a concert should be at least equal to its duration.\n\n# [degree adverb] \n    '", "Round_0": {"code": "def min_difference(a, b, c):\n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Try all possible allocations of songs to two concerts\n    for i in range(4):\n        for j in range(4):\n            # Calculate the duration of the first concert\n            first_duration = i * 1 + (min(i, b) * 2) + (min(i, c) * 3)\n            # Calculate the duration of the second concert\n            second_duration = total_duration - first_duration\n            # Calculate the difference between the two concerts\n            diff = abs(first_duration - second_duration)\n            # Update the minimum difference if a smaller one is found\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n    \n    # Iterate through each test case\n    for _ in range(t):\n        # Read the values of a, b, and c\n        a, b, c = map(int, input().split())\n        # Calculate and print the minimal possible difference\n        print(min_difference(a, b, c))", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": {\n    \"Subproblem1\": \"Read the number of test cases (t) from the input.\",\n    \"Subproblem2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs (a, b, c).\",\n    \"Subproblem3\": \"Determine the optimal way to distribute the songs into two concerts to minimize the absolute difference in their lengths.\",\n    \"Subproblem4\": \"Calculate the minimal possible difference in minutes between the concert durations for each test case.\"\n  },\n  \"High-Level Plan\": {\n    \"Step1\": \"Initialize a variable to store the total number of test cases (t).\",\n    \"Step2\": \"Read the value of t from the input.\",\n    \"Step3\": \"Loop through each test case from 1 to t:\",\n    \"Step4\": \"Read the values of a, b, and c for the current test case.\",\n    \"Step5\": \"Determine the optimal distribution of songs by considering the number of two-minute and three-minute songs:\",\n    \"Step6\": \"Calculate the total duration of the first concert by including as many two-minute and three-minute songs as possible.\",\n    \"Step7\": \"Calculate the total duration of the second concert by including the remaining songs.\",\n    \"Step8\": \"Compute the absolute difference between the two concert durations.\",\n    \"Step9\": \"Store the minimum difference found for the current test case.\",\n    \"Step10\": \"After processing all test cases, output the minimum differences.\"\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"Decomposition\": {\n    \"Subproblem1\": \"Read the number of test cases (t) from the input.\",\n    \"Subproblem2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs (a, b, c).\",\n    \"Subproblem3\": \"Determine the optimal way to distribute the songs into two concerts to minimize the absolute difference in their lengths.\",\n    \"Subproblem4\": \"Calculate the minimal possible difference in minutes between the concert durations for each test case.\"\n  },\n ", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total duration of the first concert\n        first_concert_duration = min(b, c // 2) * 3 + min(a, (b - first_concert_duration) // 2) * 3\n        \n        # Calculate the total duration of the second concert\n        second_concert_duration = c * 3 + b * 2 + a\n        \n        # Calculate the absolute difference between the two concert durations\n        difference = abs(first_concert_duration - second_concert_duration)\n        \n        # Store the minimum difference found for the current test case\n        results.append(difference)\n    \n    # Output the minimum differences for all test cases\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 1 was given"}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total duration of the first concert\n        first_concert_duration = min(b, c // 2) * 3 + min(a, (b - min(b, c // 2)) // 2) * 3\n        \n        # Calculate the total duration of the second concert\n        second_concert_duration = c * 3 + b * 2 + a\n        \n        # Calculate the absolute difference between the two concert durations\n        difference = abs(first_concert_duration - second_concert_duration)\n        \n        # Store the minimum difference found for the current test case\n        results.append(difference)\n    \n    # Output the minimum differences for all test cases\n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"Decomposition\": {\n    \"Subproblem1\": \"Read the number of test cases (t) from the input.\",\n    \"Subproblem2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs (a, b, c).\",\n    \"Subproblem3\": \"Calculate the optimal distribution of songs into two concerts to minimize the absolute difference in their lengths.\",\n    \"Subproblem4\": \"Output the minimal possible difference for each test case.\"\n  },\n  \"High-Level Plan\": {\n    \"Step1\": \"Initialize a variable to store the total number of test cases (t).\",\n    \"Step2\": \"Read the value of t from the input.\",\n    \"Step3\": \"Loop through each test case from 1 to t:\",\n    \"Step3.1\": \"Read the values of a, b, and c for the current test case.\",\n    \"Step3.2\": \"Calculate the total duration of all songs.\",\n    \"Step3.3\": \"Determine the optimal distribution of songs to minimize the absolute difference in concert lengths.\",\n    \"Step3.4\": \"Output the minimal possible difference for the current test case.\",\n    \"Step4\": \"End the loop after processing all test cases.\"\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups with the smallest possible difference in their lengths.\n    Explanation: The goal is to distribute the songs into two concerts such that the total duration of songs in each concert is as close as possible.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially.\n    - Read the number of test cases (t).\n    - For each test case, read the number of one", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try all possible distributions and find the minimum difference\n        for i in range(3):\n            for j in range(3):\n                if i * 1 + j * 2 <= a and (total_duration - (i * 1 + j * 2) - (i + j) * 3) % 2 == 0:\n                    remaining = total_duration - (i * 1 + j * 2) - (i + j) * 3\n                    if remaining >= 0 and remaining <= c:\n                        diff = abs((i * 1 + j * 2) - ((total_duration - (i * 1 + j * 2)) // 2))\n                        min_diff = min(min_diff, diff)\n        \n        print(min_diff)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"details\": \"The first line of input contains the number of test cases, t.\"\n      },\n      {\n        \"description\": \"Read the number of one-minute, two-minute, and three-minute songs for each test case.\",\n        \"details\": \"For each test case, read the integers a, b, and c.\"\n      },\n      {\n        \"description\": \"Calculate the total duration of all songs for each test case.\",\n        \"details\": \"Sum the durations of all songs a, b, and c to get the total duration.\"\n      },\n      {\n        \"description\": \"Determine the optimal way to distribute the songs to minimize the absolute difference in concert durations.\",\n        \"details\": \"Use a strategy to distribute the songs, preferably starting with the largest duration songs to balance the concerts as evenly as possible.\"\n      },\n      {\n        \"description\": \"Calculate the absolute difference between the two concert durations.\",\n        \"details\": \"After distributing the songs, calculate the absolute difference between the sum of the durations of the two concerts.\"\n      },\n      {\n        \"description\": \"Output the minimal possible difference for each test case.\",\n        \"details\": \"For each test case, output the minimal possible difference in minutes between the concerts durations.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize a variable to store the number of test cases.\",\n        \"details\": \"Read the first line of input to get the number of test cases.\"\n      },\n      {\n        \"step\": \"Loop through each test case.\",\n        \"details\": \"Iterate through the number of test cases to process each case individually.\"\n      },\n      {\n        \"step\": \"Read the number of one-minute, two-minute, and three-minute songs for the current test case.\",\n        \"details\": \"For each test case, read the integers a, b, and c.\"\n      },\n      {\n        \"step\": \"Calculate the total duration of all songs for the current test case.\",\n        \"details\": \"Sum the durations of all songs a, b, and c to get the total duration.\"\n      },\n\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups with minimal difference in total duration.\n    Explanation: Luntik wants to distribute his songs into two concerts such that the total duration of songs in each concert is as close as possible. This involves balancing the durations of the two concerts to minimize the absolute difference.\n\n# [phrase showing quantity relationship]\n    'as much as': means to find the closest possible total duration for the two concerts.\n    Explanation: The requirement asks to minimize the absolute difference in the lengths of the concerts, which directly translates to finding the closest", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try all combinations to find the minimal possible difference\n        for i in range(total_duration + 1):\n            if i <= total_duration // 2:\n                # Calculate the duration of the first concert\n                first_concert_duration = i\n                # Calculate the duration of the second concert\n                second_concert_duration = total_duration - i\n                # Calculate the absolute difference\n                diff = abs(first_concert_duration - second_concert_duration)\n                # Update the minimal possible difference\n                min_diff = min(min_diff, diff)\n        \n        print(min_diff)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"details\": \"The first line of input contains the number of test cases, t.\"\n      },\n      {\n        \"description\": \"Read the number of one-minute, two-minute, and three-minute songs for each test case.\",\n        \"details\": \"For each test case, read three integers a, b, and c.\"\n      },\n      {\n        \"description\": \"Calculate the total duration of all songs for each test case.\",\n        \"details\": \"Sum the durations of all songs a, b, and c to get the total duration.\"\n      },\n      {\n        \"description\": \"Determine the optimal way to distribute the songs to minimize the absolute difference in concert durations.\",\n        \"details\": \"Use a strategy to distribute the songs, preferably starting with the largest duration songs to balance the concerts as evenly as possible.\"\n      },\n      {\n        \"description\": \"Calculate the absolute difference between the two concert durations.\",\n        \"details\": \"After distributing the songs, calculate the absolute difference between the sum of the durations of the two concerts.\"\n      },\n      {\n        \"description\": \"Output the minimal possible difference for each test case.\",\n        \"details\": \"For each test case, output the minimal possible difference in minutes between the concerts durations.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize a variable to store the number of test cases.\",\n        \"details\": \"Read the first line of input to get the number of test cases.\"\n      },\n      {\n        \"step\": \"Loop through each test case.\",\n        \"details\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs.\"\n      },\n      {\n        \"step\": \"Calculate the total duration of all songs for each test case.\",\n        \"details\": \"Sum the durations of all songs to get the total duration.\"\n      },\n      {\n        \"step\": \"Distribute the songs to minimize the absolute difference.\",\n        \"details\": \"Use a strategy to distribute the songs, starting with the largest duration songs to balance the concerts as evenly as possible.\"\n      },\n      {\n\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups with minimal difference in total duration.\n    Explanation: Luntik wants to distribute his songs into two concerts such that the total duration of songs in each concert is as close as possible. This involves balancing the durations of the concerts to minimize the absolute difference.\n\n# [phrase showing quantity relationship]\n    'as much as': means to find the minimal possible difference in the total duration of the two concerts.\n    Explanation: The phrase 'as much as' indicates that we need to find the minimal absolute difference between the two", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try all combinations to find the minimal difference\n        for i in range(total_duration + 1):\n            if i <= total_duration // 2:\n                duration1 = i\n                duration2 = total_duration - i\n                diff = abs(duration1 - duration2)\n                min_diff = min(min_diff, diff)\n        \n        print(min_diff)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try all combinations to find the minimal difference\n        for i in range(total_duration + 1):\n            if i <= total_duration // 2:\n                duration1 = i\n                duration2 = total_duration - i\n                diff = abs(duration1 - duration2)\n                min_diff = min(min_diff, diff)\n        \n        print(min_diff)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Read the number of test cases.\",\n      \"For each test case, read the number of one-minute, two-minute, and three-minute songs.\",\n      \"Determine the optimal way to distribute the songs to minimize the absolute difference in the lengths of the concerts.\",\n      \"Calculate the minimal possible difference in minutes between the concerts durations.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize a variable to store the total number of test cases.\",\n      \"Loop through each test case.\",\n      \"For each test case, read the number of one-minute, two-minute, and three-minute songs.\",\n      \"Calculate the total duration of all songs.\",\n      \"Use a strategy to distribute the songs to minimize the absolute difference in the lengths of the concerts.\",\n      \"Output the minimal possible difference for each test case.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning songs to two concerts to minimize the absolute difference in their durations.\n    'absolute difference': means the difference without considering which concert is longer or shorter.\n\n# [phrase showing quantity relationship]\n    'as much as': means minimizing the difference, which is the goal of the distribution.\n\n# [degree adverb] \n    'minimal': means the smallest possible difference, which is the best outcome we aim for.\n\n# [code logic]\n    The steps should be implemented sequentially.\n    - Read the number of test cases.\n   ", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try all combinations to find the minimal possible difference\n        for x in range(2):  # Two concerts, x can be 0 or 1\n            for y in range(2):  # Two concerts, y can be 0 or 1\n                for z in range(2):  # Two concerts, z can be 0 or 1\n                    for w in range(2):  # Two concerts, w can be 0 or 1\n                        duration1 = x*a + y*b + z*c\n                        duration2 = total_duration - duration1\n                        diff = abs(duration1 - duration2)\n                        min_diff = min(min_diff, diff)\n        \n        print(min_diff)", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 1 was given"}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try all combinations to find the minimal possible difference\n        for x in range(2):  # Two concerts, x can be 0 or 1\n            for y in range(2):  # Two concerts, y can be 0 or 1\n                for z in range(2):  # Two concerts, z can be 0 or 1\n                    for w in range(2):  # Two concerts, w can be 0 or 1\n                        duration1 = x*a + y*b + z*c\n                        duration2 = total_duration - duration1\n                        diff = abs(duration1 - duration2)\n                        min_diff = min(min_diff, diff)\n        \n        print(min_diff)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"details\": \"The first line of input contains the number of test cases, t.\"\n      },\n      {\n        \"description\": \"Read the number of one-minute, two-minute, and three-minute songs for each test case.\",\n        \"details\": \"For each test case, read three integers a, b, and c.\"\n      },\n      {\n        \"description\": \"Calculate the total duration of all songs.\",\n        \"details\": \"Sum up the durations of all songs to get the total duration.\"\n      },\n      {\n        \"description\": \"Determine the optimal way to allocate songs to two concerts to minimize the difference in total duration.\",\n        \"details\": \"Use a strategy to allocate songs, considering the balance between the two concerts.\"\n      },\n      {\n        \"description\": \"Compute the smallest possible difference in minutes between the concert durations.\",\n        \"details\": \"Calculate the absolute difference between the total durations of the two concerts.\"\n      },\n      {\n        \"description\": \"Output the result for each test case.\",\n        \"details\": \"For each test case, print the minimal possible difference in minutes between the concerts durations.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize a loop to read the number of test cases.\",\n        \"details\": \"Loop through the input to read each test case.\"\n      },\n      {\n        \"step\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs.\",\n        \"details\": \"Read the values of a, b, and c for each test case.\"\n      },\n      {\n        \"step\": \"Calculate the total duration of all songs in the test case.\",\n        \"details\": \"Sum the durations of all songs to get the total duration.\"\n      },\n      {\n        \"step\": \"Allocate songs to two concerts to minimize the difference in total duration.\",\n        \"details\": \"Use a strategy to distribute songs, aiming for balance between the two concerts.\"\n      },\n      {\n        \"step\": \"Compute the difference in total duration between the two concerts.\",\n        \"details\": \"Calculate\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'allocation': means distributing songs between two concerts to balance their total durations.\n    'minimizing difference': means finding the smallest possible difference between the two concert durations.\n\n# [phrase showing quantity relationship]\n    'as many times as': means the number of times a song appears in a concert should be at least equal to the song's duration.\n\n# [degree adverb] \n    'smallest possible': means the goal is to find the minimum difference in total duration between the two concerts.\n\n# [code logic]\n    The steps should be implemented sequentially", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try to allocate songs to two concerts to minimize the difference\n        for x in range(3):  # x represents the number of three-minute songs in the first concert\n            for y in range(3):  # y represents the number of two-minute songs in the first concert\n                for z in range(3):  # z represents the number of one-minute songs in the first concert\n                    if x*3 + y*2 + z <= total_duration // 2:\n                        first_concert_duration = x*3 + y*2 + z\n                        second_concert_duration = total_duration - first_concert_duration\n                        min_diff = min(min_diff, abs(first_concert_duration - second_concert_duration))\n        \n        print(min_diff)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try to allocate songs to two concerts to minimize the difference\n        for x in range(3):  # x represents the number of three-minute songs in the first concert\n            for y in range(3):  # y represents the number of two-minute songs in the first concert\n                for z in range(3):  # z represents the number of one-minute songs in the first concert\n                    if x*3 + y*2 + z <= total_duration // 2:\n                        first_concert_duration = x*3 + y*2 + z\n                        second_concert_duration = total_duration - first_concert_duration\n                        min_diff = min(min_diff, abs(first_concert_duration - second_concert_duration))\n        \n        print(min_diff)", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [false, false, false, false, true, false, true, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 36, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "condense_two2one", "save_node": false, "parent_index": 32}
