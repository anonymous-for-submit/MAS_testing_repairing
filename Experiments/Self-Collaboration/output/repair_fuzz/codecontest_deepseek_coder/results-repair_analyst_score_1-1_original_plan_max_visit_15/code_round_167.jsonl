{"name": "1622_A. Construct a Rectangle", "description": "There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYou are asked to break exactly one of them into two pieces in such a way that: \n\n  * both pieces have positive (strictly greater than 0) integer length; \n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides. \n\n\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "tags": ["geometry", "math"], "difficulty": 7, "id": 1622, "sample_io": [{"input": "4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n", "output": ["YES\nNO\nYES\nYES\n"]}], "test_list": [{"input": "2\n1 2 3\n2 2 4\n", "output": ["YES\nYES\n"]}, {"input": "1\n1 98 99\n", "output": ["YES\n"]}, {"input": "3\n1 1 1\n2 1 3\n5 6 7\n", "output": ["NO\nYES\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 6\n1 2 3\n6 7 8\n10 10 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nYES\n"]}, {"input": "4\n6 1 5\n2 5 2\n2 4 2\n7 101 108\n", "output": ["YES\nNO\nYES\nYES\n"]}, {"input": "1\n100000 100000 100000\n", "output": ["YES\n"]}, {"input": "1\n12344 1 1\n", "output": ["YES\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 2 3\n4 5 6\n", "output": ["YES\nNO\n"]}, {"input": "2\n1 3 3\n2 2 4\n", "output": ["NO\nYES\n"]}, {"input": "1\n1 98 186\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 6 7\n", "output": ["NO\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 108\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "1\n100000 100000 100100\n", "output": ["YES\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 1\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 1 3\n4 5 6\n", "output": ["NO\nNO\n"]}, {"input": "4\n6 1 5\n2 5 2\n2 4 2\n5 9 4\n", "output": ["YES\nNO\nYES\nYES\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 179\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n2 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 1\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n2 1 3\n1 5 6\n", "output": ["YES\nYES\n"]}, {"input": "4\n6 1 10\n2 6 2\n2 4 2\n7 101 144\n", "output": ["NO\nYES\nYES\nNO\n"]}, {"input": "3\n2 1 1\n2 1 2\n3 8 12\n", "output": ["YES\nNO\nNO\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 3\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 2 3\n4 8 6\n", "output": ["YES\nNO\n"]}, {"input": "3\n1 1 1\n1 1 2\n5 6 12\n", "output": ["NO\nYES\nNO\n"]}, {"input": "4\n6 1 10\n2 6 2\n3 4 2\n7 101 144\n", "output": ["NO\nYES\nNO\nNO\n"]}, {"input": "3\n2 1 1\n1 1 2\n5 6 12\n", "output": ["YES\nYES\nNO\n"]}, {"input": "6\n2 2 6\n1 1 2\n3 10 6\n2 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "3\n3 1 1\n2 1 2\n1 8 9\n", "output": ["NO\nNO\nYES\n"]}, {"input": "6\n2 2 4\n1 1 1\n3 5 18\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n1 1 10\n2 6 2\n3 4 2\n7 101 144\n", "output": ["YES\nYES\nNO\nNO\n"]}, {"input": "3\n3 1 1\n2 2 2\n1 8 9\n", "output": ["NO\nYES\nYES\n"]}, {"input": "1\n12344 2 1\n", "output": ["NO\n"]}, {"input": "1\n2 98 186\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 6 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 10 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "1\n100010 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 2 1\n", "output": ["NO\n"]}, {"input": "2\n1 1 3\n1 5 6\n", "output": ["NO\nYES\n"]}, {"input": "1\n2 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 144\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n100110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 4 1\n", "output": ["NO\n"]}, {"input": "1\n1 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n3 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100110 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 3 1\n", "output": ["NO\n"]}, {"input": "1\n100111 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 3 1\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n1 8 12\n", "output": ["YES\nNO\nNO\n"]}, {"input": "1\n100011 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 3 2\n", "output": ["NO\n"]}, {"input": "1\n100011 101001 100100\n", "output": ["NO\n"]}, {"input": "1\n100011 101001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 101001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n100011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n100011 001001 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111001\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001111 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001010 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 111111\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 011111\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011100\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011000\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010011 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010111 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010111 100011 001000\n", "output": ["NO\n"]}, {"input": "1\n010111 000011 001000\n", "output": ["NO\n"]}, {"input": "1\n010111 000011 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 100010 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 100010 000001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 000001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 000011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 000011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 100011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 101011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 000011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 100011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 101011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 101001 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 101001 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 101101 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n010101 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n010101 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n110101 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n110101 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n110101 101101 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101101 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101100 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101110 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101110 101010\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 101010\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 101011\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 100011\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n011111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 101100 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 111110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n100111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n001111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n001101 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011111 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011101 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 111101 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100011\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100000\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 100000\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n000011 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n000011 111001 000011\n", "output": ["NO\n"]}, {"input": "1\n100011 111001 000011\n", "output": ["NO\n"]}, {"input": "1\n100011 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n100011 111101 000010\n", "output": ["NO\n"]}, {"input": "1\n100011 111101 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 111100 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 110100 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 111100 011010\n", "output": ["NO\n"]}, {"input": "1\n100011 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101011 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 110100 011110\n", "output": ["NO\n"]}, {"input": "1\n001111 110100 011110\n", "output": ["NO\n"]}, {"input": "1\n101111 010100 011110\n", "output": ["NO\n"]}, {"input": "1\n101111 010100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 111010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 111011\n", "output": ["NO\n"]}, {"input": "1\n001111 010000 111011\n", "output": ["NO\n"]}, {"input": "1\n001111 010000 111001\n", "output": ["NO\n"]}, {"input": "2\n1 4 3\n2 2 4\n", "output": ["YES\nYES\n"]}, {"input": "1\n1 98 108\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 4\n5 6 7\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100010 100000 100000\n", "output": ["YES\n"]}, {"input": "1\n2465 1 1\n", "output": ["NO\n"]}, {"input": "4\n6 2 5\n2 5 2\n2 4 2\n5 5 4\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "2\n1 3 3\n4 2 4\n", "output": ["NO\nYES\n"]}, {"input": "1\n3 98 186\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n5 6 7\n", "output": ["YES\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 10\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 3 2\n2 4 2\n7 101 108\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "1\n100010 100001 100000\n", "output": ["NO\n"]}, {"input": "1\n19251 2 1\n", "output": ["NO\n"]}, {"input": "2\n1 1 3\n4 5 1\n", "output": ["NO\nYES\n"]}, {"input": "4\n9 1 5\n2 5 2\n2 4 2\n5 9 4\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "6\n2 2 6\n1 1 2\n3 10 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n10 1 10\n2 5 2\n2 4 2\n7 101 179\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n110010 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n8323 2 1\n", "output": ["NO\n"]}, {"input": "1\n3 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 4\n5 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "4\n6 1 9\n2 5 2\n2 4 2\n7 101 144\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n101110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n21283 4 1\n", "output": ["NO\n"]}, {"input": "2\n2 1 3\n1 5 5\n", "output": ["YES\nNO\n"]}, {"input": "1\n1 98 468\n", "output": ["NO\n"]}, {"input": "1\n110110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n35510 2 1\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n3 8 17\n", "output": ["YES\nNO\nNO\n"]}, {"input": "1\n110111 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n12451 3 1\n", "output": ["NO\n"]}, {"input": "3\n3 1 1\n2 1 2\n1 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100001 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 2 2\n", "output": ["NO\n"]}, {"input": "1\n100010 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n100011 100001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 100010\n", "output": ["NO\n"]}, {"input": "1\n110011 000001 110000\n", "output": ["NO\n"]}, {"input": "1\n101011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 111000\n", "output": ["NO\n"]}, {"input": "1\n101011 001101 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 011101 111001\n", "output": ["NO\n"]}, {"input": "1\n100001 001101 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001111 011011\n", "output": ["NO\n"]}, {"input": "1\n101011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001110 110011\n", "output": ["YES\n"]}, {"input": "1\n110111 001010 111011\n", "output": ["NO\n"]}, {"input": "1\n010011 001011 111011\n", "output": ["NO\n"]}, {"input": "1\n110111 000011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 010011 011111\n", "output": ["NO\n"]}, {"input": "1\n010011 000011 011111\n", "output": ["NO\n"]}, {"input": "1\n110011 010011 011101\n", "output": ["NO\n"]}, {"input": "1\n110010 100011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011110\n", "output": ["NO\n"]}, {"input": "1\n111011 100011 011000\n", "output": ["YES\n"]}, {"input": "1\n110011 000011 001100\n", "output": ["NO\n"]}, {"input": "1\n010110 100011 001100\n", "output": ["NO\n"]}], "task_id": "codecontest/154", "prompt": "There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYou are asked to break exactly one of them into two pieces in such a way that: \n\n  * both pieces have positive (strictly greater than 0) integer length; \n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides. \n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that. Consider all possible ways to break each stick and verify if any of them meets the conditions.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "repair_prompt": ["There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYou are asked to break exactly one of them into two pieces in such a way that: \n\n  * both pieces have positive (strictly greater than 0) integer length; \n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides. \n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that. Consider all possible ways to break each stick and verify if any of them meets the conditions.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin", " There are three sticks with integer lengths l_1, l_2, and l_3. You need to break exactly one of them into two pieces, ensuring both pieces have positive integer lengths greater than 0 and their total length equals the original length of the stick. After breaking one stick, you should check if it's possible to form a rectangle or a square using all four resulting sticks, with each stick serving as one side of the rectangle. Determine if this is achievable for any of the sticks.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin", " There are three sticks with integer lengths l_1, l_2, and l_3. You are asked to break exactly one of them into two pieces in such a way that both pieces have positive integer length and their total length equals the original length of the stick. Determine if it's possible to do that and construct a rectangle (or square) from the resulting four sticks, with each stick used as one of its sides.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin"], "completion": "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] == l[3]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\nmain()", "completions": ["def can_form_rectangle(l1, l2, l3):\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if the two smallest lengths can form a rectangle\n    if lengths[0] + lengths[1] == lengths[2] and lengths[0] > 0 and lengths[1] > 0:\n        return \"YES\"\n    # Check if the two smallest lengths are equal and the largest length is twice the smallest\n    elif lengths[0] == lengths[1] and lengths[2] % 2 == 0 and lengths[2] == 2 * lengths[0]:\n        return \"YES\"\n    # Check if the two largest lengths are equal and the smallest length is twice the largest\n    elif lengths[1] == lengths[2] and lengths[0] % 2 == 0 and lengths[0] == 2 * lengths[1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        print(can_form_rectangle(l1, l2, l3))\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if the two smallest lengths can form a rectangle\n    if lengths[0] + lengths[1] > lengths[2]:\n        return True\n    \n    # Check if one of the lengths can be split into two equal parts\n    if lengths[0] == lengths[1] and lengths[0] > lengths[2]:\n        return True\n    if lengths[1] == lengths[2] and lengths[1] > lengths[0]:\n        return True\n    \n    return False\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        if can_form_rectangle(l1, l2, l3):\n            print(\"YES\")\n        else:\n            print(\"NO\")\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] % 2 == 0) or (l[1] == l[2] and l[0] % 2 == 0):\n            print(\"YES\")\n        else:\n            print(\"NO\")\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check all possible ways to break one of the sticks\n    if l1 == l2 + l3 and l1 > 0 and l2 > 0 and l3 > 0:\n        return \"YES\"\n    if l2 == l1 + l3 and l2 > 0 and l1 > 0 and l3 > 0:\n        return \"YES\"\n    if l3 == l1 + l2 and l3 > 0 and l1 > 0 and l2 > 0:\n        return \"YES\"\n    if l1 == l2 and l3 > 0:\n        return \"YES\"\n    if l1 == l3 and l2 > 0:\n        return \"YES\"\n    if l2 == l3 and l1 > 0:\n        return \"YES\"\n    return \"NO\"\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        result = can_form_rectangle(l1, l2, l3)\n        print(result)\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] % 2 == 0) or (l[1] == l[2] and l[0] % 2 == 0):\n            print(\"YES\")\n        else:\n            print(\"NO\")\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        sticks = list(map(int, input().split()))\n        sticks.sort()\n        if sticks[0] == sticks[1] and sticks[2] == sticks[3]:\n            print(\"YES\")\n        elif sticks[0] + sticks[1] == sticks[2] + sticks[3] and sticks[0] != sticks[1] and sticks[2] != sticks[3]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks can be broken into pieces that can form a rectangle or a square\n    if l1 == l2 and l2 == l3:\n        return False  # All sticks are equal, cannot form a rectangle\n    if l1 == l2 or l2 == l3 or l1 == l3:\n        return True  # Two sticks are equal, can form a rectangle with the other two\n    if l1 + l2 > l3 and l1 + l3 > l2 and l2 + l3 > l1:\n        return True  # Any two sticks can form a rectangle with the remaining stick\n    return False\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        if can_form_rectangle(l1, l2, l3):\n            print(\"YES\")\n        else:\n            print(\"NO\")\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] % 2 == 0) or (l[1] == l[2] and l[0] % 2 == 0):\n            print(\"YES\")\n        else:\n            print(\"NO\")\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check all possible ways to break one of the sticks\n    if l1 == l2 + l3 and l1 > 0 and l2 > 0 and l3 > 0:\n        return \"YES\"\n    if l2 == l1 + l3 and l2 > 0 and l1 > 0 and l3 > 0:\n        return \"YES\"\n    if l3 == l1 + l2 and l3 > 0 and l1 > 0 and l2 > 0:\n        return \"YES\"\n    if l1 == l2 and l3 > 0:\n        return \"YES\"\n    if l1 == l3 and l2 > 0:\n        return \"YES\"\n    if l2 == l3 and l1 > 0:\n        return \"YES\"\n    return \"NO\"\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        print(can_form_rectangle(l1, l2, l3))\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] == l[3]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\nmain()"], "session_history": {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Read the number of test cases.\",\n      \"For each test case, read the lengths of the three sticks.\",\n      \"Determine if any stick can be broken into two pieces to form a rectangle or square.\",\n      \"Check if the resulting four sticks can form a rectangle or square.\",\n      \"Output 'YES' if possible, 'NO' otherwise for each test case.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize a loop to read the number of test cases.\",\n      \"For each test case:\",\n      \"  Read the lengths of the three sticks.\",\n      \"  Check if any two sticks have the same length (to potentially form a square or rectangle with equal sides).\",\n      \"  If not, check if the three lengths can be rearranged to form a rectangle (two pairs of equal lengths).\",\n      \"  Output 'YES' if a valid configuration is found, 'NO' otherwise.\",\n      \"End loop after processing all test cases.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'breaking a stick into two pieces': means splitting one stick into two smaller sticks with positive integer lengths.\n    'forming a rectangle or square': means arranging the four sticks into a geometric shape with equal sides or opposite sides of equal length.\n\n# [phrase showing quantity relationship]\n    'positive integer lengths': means the lengths of the two pieces after breaking a stick must be greater than 0.\n\n# [degree adverb] \n    'largest': means we need to consider the stick with the maximum length to potentially break it for better chances of forming a rectangle or square.", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or l[0] == l[1] and l[2] == l[3]:\n            print(\"YES\")\n        else:\n            print(\"NO\")", "report": "The compilation output of the preceding code is: 'function' object has no attribute 'main'"}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] == l[3]):\n            print(\"YES\")\n        else:\n            print(\"NO\")"}}, "session_historys": [{"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"steps\": [\n          \"Read the first line of input to get the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case.\",\n        \"steps\": [\n          \"For each test case, read the three integers representing the lengths of the sticks.\",\n          \"Check all possible ways to break one of the sticks into two pieces such that the resulting four pieces can form a rectangle.\",\n          \"Determine if any of these ways meet the conditions for forming a rectangle.\"\n        ]\n      },\n      {\n        \"description\": \"Check if the resulting four pieces can form a rectangle.\",\n        \"steps\": [\n          \"For each test case, check if there are two pieces of the same length and two pieces of a different length.\",\n          \"If there are, then it is possible to form a rectangle.\",\n          \"If not, then it is not possible to form a rectangle.\"\n        ]\n      }\n    ],\n    \"major_steps\": [\n      \"Read the number of test cases.\",\n      \"Iterate through each test case.\",\n      \"For each test case, read the stick lengths.\",\n      \"Check all possible ways to break one of the sticks.\",\n      \"Determine if the resulting four pieces can form a rectangle.\",\n      \"Output 'YES' if a rectangle can be formed, otherwise output 'NO' for each test case.\",\n      \"Repeat for all test cases.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'rectangle formation': means that we need to check if we can form a rectangle or square with the given sticks after breaking one of them.\n    Explanation: A rectangle can be formed if we have two pairs of sticks with equal lengths. A square is a special case of a rectangle where all sides are equal.\n\n# [phrase showing quantity relationship]\n    'positive (strictly greater than 0)': means that the pieces we break off must be greater than 0.\n    Explanation: This ensures that both pieces of the stick are valid and can be used to form a", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check all possible ways to break one of the sticks\n    if l1 == l2 + l3 and l1 > 0 and l2 > 0 and l3 > 0:\n        return \"YES\"\n    if l2 == l1 + l3 and l2 > 0 and l1 > 0 and l3 > 0:\n        return \"YES\"\n    if l3 == l1 + l2 and l3 > 0 and l1 > 0 and l2 > 0:\n        return \"YES\"\n    if l1 == l2 and l3 > 0:\n        return \"YES\"\n    if l1 == l3 and l2 > 0:\n        return \"YES\"\n    if l2 == l3 and l1 > 0:\n        return \"YES\"\n    return \"NO\"\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        print(can_form_rectangle(l1, l2, l3))", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if the two smallest lengths can form a rectangle\n    if lengths[0] + lengths[1] == lengths[2] and lengths[0] > 0 and lengths[1] > 0:\n        return \"YES\"\n    # Check if the two smallest lengths are equal and the largest length is twice the smallest\n    elif lengths[0] == lengths[1] and lengths[2] % 2 == 0 and lengths[2] == 2 * lengths[0]:\n        return \"YES\"\n    # Check if the two largest lengths are equal and the smallest length is twice the largest\n    elif lengths[1] == lengths[2] and lengths[0] % 2 == 0 and lengths[0] == 2 * lengths[1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        print(can_form_rectangle(l1, l2, l3))"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"steps\": [\n          \"Read the first line of input to get the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case.\",\n        \"steps\": [\n          \"For each test case, read the three integers representing the lengths of the sticks.\",\n          \"Check all possible ways to break one of the sticks into two pieces such that the resulting four pieces can form a rectangle.\",\n          \"Determine if any of these ways meet the conditions for forming a rectangle.\"\n        ]\n      },\n      {\n        \"description\": \"Check if four pieces can form a rectangle.\",\n        \"steps\": [\n          \"For each test case, consider all possible pairs of the resulting pieces from breaking the sticks.\",\n          \"Check if any pair has the same length to form a rectangle or a square.\",\n          \"Ensure that both pieces of each pair are positive integers and strictly greater than 0.\"\n        ]\n      }\n    ],\n    \"major_steps\": [\n      \"Initialize the number of test cases.\",\n      \"Loop through each test case.\",\n      \"Read the lengths of the sticks for the current test case.\",\n      \"Check all possible ways to break one of the sticks.\",\n      \"Verify if the resulting four pieces can form a rectangle or a square.\",\n      \"Output 'YES' if a valid way is found, otherwise output 'NO' for each test case.\",\n      \"Repeat for all test cases.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'rectangle formation': means that we need to check if four sticks can form a rectangle or a square.\n    Explanation: A rectangle can be formed if we have two pairs of sticks with equal lengths. A square is a special case of a rectangle where all sides are equal.\n\n# [phrase showing quantity relationship]\n    'positive (strictly greater than 0)': means that the lengths of the pieces after breaking a stick must be greater than 0.\n    Explanation: This is crucial to ensure that the pieces can be used to form a rectangle or a square.\n", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check all possible ways to break one of the sticks\n    if l1 == l2 + l3 and l1 > 0 and l2 > 0 and l3 > 0:\n        return True\n    if l2 == l1 + l3 and l2 > 0 and l1 > 0 and l3 > 0:\n        return True\n    if l3 == l1 + l2 and l3 > 0 and l1 > 0 and l2 > 0:\n        return True\n    if l1 == l2 and l3 > 0 and l1 > 0:\n        return True\n    if l1 == l3 and l2 > 0 and l1 > 0:\n        return True\n    if l2 == l3 and l1 > 0 and l2 > 0:\n        return True\n    return False\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        if can_form_rectangle(l1, l2, l3):\n            print(\"YES\")\n        else:\n            print(\"NO\")", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 3 were given"}, "Round_1": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if the two smallest lengths can form a rectangle\n    if lengths[0] + lengths[1] > lengths[2]:\n        return True\n    \n    # Check if one of the lengths can be split into two equal parts\n    if lengths[0] == lengths[1] and lengths[0] > lengths[2]:\n        return True\n    if lengths[1] == lengths[2] and lengths[1] > lengths[0]:\n        return True\n    \n    return False\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        if can_form_rectangle(l1, l2, l3):\n            print(\"YES\")\n        else:\n            print(\"NO\")"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"details\": \"The program should start by reading the number of test cases 't' from the input.\"\n      },\n      {\n        \"description\": \"Read the lengths of the three sticks for each test case.\",\n        \"details\": \"For each test case, read the lengths of the three sticks 'l_1', 'l_2', and 'l_3'.\"\n      },\n      {\n        \"description\": \"Check if breaking one stick can form a rectangle.\",\n        \"details\": \"For each set of stick lengths, determine if breaking one stick into two pieces with positive integer lengths can result in four sides that can form a rectangle.\"\n      },\n      {\n        \"description\": \"Output the result for each test case.\",\n        \"details\": \"For each test case, output 'YES' if a rectangle can be formed, otherwise output 'NO'.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize the program to read the number of test cases.\",\n        \"details\": \"Read the number of test cases 't' from the input.\"\n      },\n      {\n        \"step\": \"Loop through each test case.\",\n        \"details\": \"For each test case, read the lengths of the three sticks 'l_1', 'l_2', and 'l_3'.\"\n      },\n      {\n        \"step\": \"Check the conditions for forming a rectangle.\",\n        \"details\": \"Check if the sum of any two lengths is greater than the third length and if the two lengths are equal for a rectangle.\"\n      },\n      {\n        \"step\": \"Output the result.\",\n        \"details\": \"Output 'YES' if a rectangle can be formed based on the conditions, otherwise output 'NO'.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'breaking a stick into two pieces': means splitting one stick into two smaller sticks with positive integer lengths.\n    'forming a rectangle': means having four sides where opposite sides are of equal length.\n\n# [phrase showing quantity relationship]\n    'positive integer length': means the lengths of the two pieces after breaking the stick must be greater than 0.\n\n# [degree adverb] \n    'largest': means we need to find the largest integer that can be broken into two pieces to form a rectangle.\n\n# [code logic]\n    The steps should be implement", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] % 2 == 0) or (l[1] == l[2] and l[0] % 2 == 0):\n            print(\"YES\")\n        else:\n            print(\"NO\")", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 1 was given"}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] % 2 == 0) or (l[1] == l[2] and l[0] % 2 == 0):\n            print(\"YES\")\n        else:\n            print(\"NO\")"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"steps\": [\n          \"Read the first line of input to get the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case.\",\n        \"steps\": [\n          \"For each test case, read the lengths of the three sticks.\",\n          \"Check all possible ways to break one of the sticks into two pieces such that the resulting four lengths can form a rectangle.\",\n          \"Determine if any of these ways can form a rectangle.\"\n        ]\n      },\n      {\n        \"description\": \"Check if four lengths can form a rectangle.\",\n        \"steps\": [\n          \"For each test case, check if there are two lengths that are equal and two lengths that are also equal.\",\n          \"Ensure that the sum of the two equal lengths is equal to the sum of the other two lengths.\"\n        ]\n      }\n    ],\n    \"major_steps\": [\n      \"Read the number of test cases.\",\n      \"Iterate over each test case.\",\n      \"For each test case, read the stick lengths.\",\n      \"Check all possible ways to break one of the sticks.\",\n      \"Verify if the resulting four lengths can form a rectangle.\",\n      \"Output 'YES' if a valid way is found, otherwise output 'NO' for each test case.\",\n      \"Repeat for all test cases.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'rectangle formation': means that we need to check if four sticks can form a rectangle or square.\n    Explanation: A rectangle can be formed if there are two pairs of sticks with equal lengths. A square is a special case of a rectangle where all sides are equal.\n\n# [phrase showing quantity relationship]\n    'positive (strictly greater than 0)': means that the pieces obtained after breaking a stick must be greater than 0.\n    Explanation: This ensures that the pieces formed are valid and can be used to construct a rectangle.\n\n# [degree adverb", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check all possible ways to break one of the sticks\n    if l1 == l2 + l3 and l1 > 0 and l2 > 0 and l3 > 0:\n        return \"YES\"\n    if l2 == l1 + l3 and l2 > 0 and l1 > 0 and l3 > 0:\n        return \"YES\"\n    if l3 == l1 + l2 and l3 > 0 and l1 > 0 and l2 > 0:\n        return \"YES\"\n    if l1 == l2 and l3 > 0:\n        return \"YES\"\n    if l1 == l3 and l2 > 0:\n        return \"YES\"\n    if l2 == l3 and l1 > 0:\n        return \"YES\"\n    return \"NO\"\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        result = can_form_rectangle(l1, l2, l3)\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"details\": \"The program should start by reading the number of test cases 't' from the input.\"\n      },\n      {\n        \"description\": \"Read the lengths of the three sticks for each test case.\",\n        \"details\": \"For each test case, read the lengths of the three sticks 'l_1', 'l_2', and 'l_3'.\"\n      },\n      {\n        \"description\": \"Check if breaking one stick can form a rectangle.\",\n        \"details\": \"For each set of stick lengths, determine if breaking one stick into two pieces with positive integer lengths can result in four sides that can form a rectangle.\"\n      },\n      {\n        \"description\": \"Output the result for each test case.\",\n        \"details\": \"For each test case, output 'YES' if a rectangle can be formed, otherwise output 'NO'.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize the program to read the number of test cases.\",\n        \"details\": \"Read the number of test cases 't' from the input.\"\n      },\n      {\n        \"step\": \"Loop through each test case.\",\n        \"details\": \"For each test case, read the lengths of the three sticks 'l_1', 'l_2', and 'l_3'.\"\n      },\n      {\n        \"step\": \"Check the conditions for forming a rectangle.\",\n        \"details\": \"Check if the sum of any two lengths is greater than the third length and if the two lengths are equal for a rectangle.\"\n      },\n      {\n        \"step\": \"Output the result.\",\n        \"details\": \"Output 'YES' if a rectangle can be formed based on the conditions, otherwise output 'NO'.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'breaking a stick into two pieces': means splitting one stick into two smaller sticks with positive integer lengths.\n    'forming a rectangle': means having four sides where two pairs of opposite sides are equal in length.\n\n# [phrase showing quantity relationship]\n    'more than': means greater than a certain value.\n    'positive integer length': means lengths greater than zero.\n\n# [degree adverb] \n    'largest': means the biggest value among the given lengths.\n\n# [code logic]\n    Steps 2-4 should be considered simultaneously.\n   ", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] % 2 == 0) or (l[1] == l[2] and l[0] % 2 == 0):\n            print(\"YES\")\n        else:\n            print(\"NO\")", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 1 was given"}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] % 2 == 0) or (l[1] == l[2] and l[0] % 2 == 0):\n            print(\"YES\")\n        else:\n            print(\"NO\")"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"steps\": [\n          \"Read the first line of input to get the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case.\",\n        \"steps\": [\n          \"For each test case, read the lengths of the three sticks.\",\n          \"Determine if one of the sticks can be broken into two pieces that can form a rectangle.\",\n          \"Check if the resulting four sticks can form a rectangle or square.\"\n        ]\n      },\n      {\n        \"description\": \"Check if a stick can be broken to form a rectangle.\",\n        \"steps\": [\n          \"Identify the two sticks that have the same length.\",\n          \"Check if breaking one of these sticks into two pieces results in two pieces that can form a rectangle.\"\n        ]\n      },\n      {\n        \"description\": \"Form a rectangle with the resulting sticks.\",\n        \"steps\": [\n          \"Ensure that the four sticks can be arranged into two pairs of equal length.\"\n        ]\n      }\n    ],\n    \"major_steps\": [\n      \"Read the number of test cases.\",\n      \"Iterate through each test case.\",\n      \"For each test case, read the stick lengths.\",\n      \"Check if one stick can be broken to form a rectangle.\",\n      \"Output 'YES' if a rectangle can be formed, otherwise output 'NO' for each test case.\",\n      \"Repeat for all test cases.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'rectangle formation': means that we need to check if four sticks can be arranged to form a rectangle or square.\n    'breaking a stick': means splitting one stick into two pieces with positive integer lengths.\n\n# [phrase showing quantity relationship]\n    'more than': means that we need to find sticks with the same length to break them.\n    'positive integer length': means that the split pieces must be greater than 0.\n\n# [degree adverb] \n    'largest': means that we need to consider the stick with the maximum length to break it.\n", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        sticks = list(map(int, input().split()))\n        sticks.sort()\n        if sticks[0] == sticks[1] and sticks[2] == sticks[3]:\n            print(\"YES\")\n        elif sticks[0] + sticks[1] == sticks[2] + sticks[3] and sticks[0] != sticks[1] and sticks[2] != sticks[3]:\n            print(\"YES\")\n        else:\n            print(\"NO\")", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Read the number of test cases.\",\n      \"For each test case, read the lengths of the three sticks.\",\n      \"Determine if any stick can be broken into two pieces such that the four resulting pieces can form a rectangle or a square.\",\n      \"Check if the sum of the lengths of any two sticks is greater than or equal to the third stick to ensure a rectangle can be formed.\",\n      \"Output 'YES' if a valid configuration is found, otherwise output 'NO'.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize a loop to read the number of test cases.\",\n      \"For each test case:\",\n      \"Read the lengths of the three sticks.\",\n      \"Check if any two sticks can be broken into pieces that can form a rectangle or a square.\",\n      \"Output the result for each test case.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'breaking a stick into two pieces': means splitting one stick into two smaller sticks with positive integer lengths.\n    'forming a rectangle or a square': means arranging the four sticks in such a way that they can form a rectangle or a square.\n\n# [phrase showing quantity relationship]\n    'positive integer lengths': means the lengths of the two pieces after breaking a stick must be greater than 0.\n    'greater than or equal to': means the sum of the lengths of the two pieces must be at least as much as the length of the original stick.\n\n# [", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks can be broken into pieces that can form a rectangle or a square\n    if l1 == l2 and l2 == l3:\n        return False  # All sticks are equal, cannot form a rectangle\n    if l1 == l2 or l2 == l3 or l1 == l3:\n        return True  # Two sticks are equal, can form a rectangle with the other two\n    if l1 + l2 > l3 and l1 + l3 > l2 and l2 + l3 > l1:\n        return True  # Any two sticks can form a rectangle with the remaining stick\n    return False\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        if can_form_rectangle(l1, l2, l3):\n            print(\"YES\")\n        else:\n            print(\"NO\")", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 3 were given"}, "Round_1": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks can be broken into pieces that can form a rectangle or a square\n    if l1 == l2 and l2 == l3:\n        return False  # All sticks are equal, cannot form a rectangle\n    if l1 == l2 or l2 == l3 or l1 == l3:\n        return True  # Two sticks are equal, can form a rectangle with the other two\n    if l1 + l2 > l3 and l1 + l3 > l2 and l2 + l3 > l1:\n        return True  # Any two sticks can form a rectangle with the remaining stick\n    return False\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        if can_form_rectangle(l1, l2, l3):\n            print(\"YES\")\n        else:\n            print(\"NO\")"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"details\": \"The program should start by reading the number of test cases t from the input.\"\n      },\n      {\n        \"description\": \"Read the lengths of the three sticks for each test case.\",\n        \"details\": \"For each test case, read the lengths of the three sticks l_1, l_2, and l_3.\"\n      },\n      {\n        \"description\": \"Check if breaking one stick can form a rectangle or square.\",\n        \"details\": \"For each set of stick lengths, determine if breaking one stick into two pieces allows for the formation of a rectangle or square using all four resulting sticks.\"\n      },\n      {\n        \"description\": \"Output the result for each test case.\",\n        \"details\": \"For each test case, output 'YES' if it's possible to form a rectangle or square, otherwise output 'NO'.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize the program to read the number of test cases.\",\n        \"details\": \"Read the number of test cases t from the input.\"\n      },\n      {\n        \"step\": \"Loop through each test case.\",\n        \"details\": \"For each test case, read the lengths of the three sticks.\"\n      },\n      {\n        \"step\": \"Check the conditions for forming a rectangle or square.\",\n        \"details\": \"For each set of stick lengths, check if breaking one stick allows for the formation of a rectangle or square. This involves checking if two of the sticks have the same length and the sum of the other two sticks is equal to this length (for rectangle) or if all four sticks are of equal length (for square).\"\n      },\n      {\n        \"step\": \"Output the results.\",\n        \"details\": \"For each test case, output 'YES' if it's possible to form a rectangle or square, otherwise output 'NO'. Ensure the output matches the case requirements (e.g., case-insensitive).\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'breaking a stick into two pieces': This involves splitting one stick into two smaller sticks, both with positive integer lengths.\n    Explanation: When breaking a stick, the sum of the lengths of the two new sticks must equal the original stick's length.\n\n# [phrase showing quantity relationship]\n    'positive integer lengths': This indicates that the lengths of the two new sticks must be greater than 0.\n    Explanation: The lengths of the two new sticks must be positive integers to ensure they are valid stick lengths.\n\n# [degree adverb] \n    '", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] % 2 == 0) or (l[1] == l[2] and l[0] % 2 == 0):\n            print(\"YES\")\n        else:\n            print(\"NO\")", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 1 was given"}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] % 2 == 0) or (l[1] == l[2] and l[0] % 2 == 0):\n            print(\"YES\")\n        else:\n            print(\"NO\")"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"steps\": [\n          \"Read the first line of input to get the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case.\",\n        \"steps\": [\n          \"For each test case, read the three integers representing the lengths of the sticks.\",\n          \"Check all possible ways to break one of the sticks into two pieces such that the resulting four pieces can form a rectangle.\",\n          \"Determine if any of these ways meet the conditions for forming a rectangle.\"\n        ]\n      },\n      {\n        \"description\": \"Check if the resulting four pieces can form a rectangle.\",\n        \"steps\": [\n          \"For each test case, check if there are two pieces of the same length and two pieces of a different length.\",\n          \"If there are, then it is possible to form a rectangle.\",\n          \"If not, then it is not possible to form a rectangle.\"\n        ]\n      }\n    ],\n    \"major_steps\": [\n      \"Read the number of test cases.\",\n      \"Iterate through each test case.\",\n      \"For each test case, read the stick lengths.\",\n      \"Check all possible ways to break one of the sticks.\",\n      \"Determine if the resulting four pieces can form a rectangle.\",\n      \"Output 'YES' if a rectangle can be formed, otherwise output 'NO' for each test case.\",\n      \"Repeat for all test cases.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'rectangle formation': means that we need to check if we can form a rectangle or square with the given sticks after breaking one of them.\n    Explanation: A rectangle can be formed if we have two pairs of sticks with equal lengths. A square is a special case of a rectangle where all sides are equal.\n\n# [phrase showing quantity relationship]\n    'positive (strictly greater than 0)': means that the pieces we break off must be greater than 0.\n    Explanation: This ensures that both pieces of the stick are valid and can be used to form a", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check all possible ways to break one of the sticks\n    if l1 == l2 + l3 and l1 > 0 and l2 > 0 and l3 > 0:\n        return \"YES\"\n    if l2 == l1 + l3 and l2 > 0 and l1 > 0 and l3 > 0:\n        return \"YES\"\n    if l3 == l1 + l2 and l3 > 0 and l1 > 0 and l2 > 0:\n        return \"YES\"\n    if l1 == l2 and l3 > 0:\n        return \"YES\"\n    if l1 == l3 and l2 > 0:\n        return \"YES\"\n    if l2 == l3 and l1 > 0:\n        return \"YES\"\n    return \"NO\"\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        print(can_form_rectangle(l1, l2, l3))", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check all possible ways to break one of the sticks\n    if l1 == l2 + l3 and l1 > 0 and l2 > 0 and l3 > 0:\n        return \"YES\"\n    if l2 == l1 + l3 and l2 > 0 and l1 > 0 and l3 > 0:\n        return \"YES\"\n    if l3 == l1 + l2 and l3 > 0 and l1 > 0 and l2 > 0:\n        return \"YES\"\n    if l1 == l2 and l3 > 0:\n        return \"YES\"\n    if l1 == l3 and l2 > 0:\n        return \"YES\"\n    if l2 == l3 and l1 > 0:\n        return \"YES\"\n    return \"NO\"\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l1, l2, l3 = map(int, input().split())\n        print(can_form_rectangle(l1, l2, l3))"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Read the number of test cases.\",\n      \"For each test case, read the lengths of the three sticks.\",\n      \"Determine if any stick can be broken into two pieces to form a rectangle or square.\",\n      \"Check if the resulting four sticks can form a rectangle or square.\",\n      \"Output 'YES' if possible, 'NO' otherwise for each test case.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize a loop to read the number of test cases.\",\n      \"For each test case:\",\n      \"  Read the lengths of the three sticks.\",\n      \"  Check if any two sticks have the same length (to potentially form a square or rectangle with equal sides).\",\n      \"  If not, check if the three lengths can be rearranged to form a rectangle (two pairs of equal lengths).\",\n      \"  Output 'YES' if a valid configuration is found, 'NO' otherwise.\",\n      \"End loop after processing all test cases.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'breaking a stick into two pieces': means splitting one stick into two smaller sticks with positive integer lengths.\n    'forming a rectangle or square': means arranging the four sticks into a geometric shape with equal sides or opposite sides of equal length.\n\n# [phrase showing quantity relationship]\n    'positive integer lengths': means the lengths of the two pieces after breaking a stick must be greater than 0.\n\n# [degree adverb] \n    'largest': means we need to consider the stick with the maximum length to potentially break it for better chances of forming a rectangle or square.", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or l[0] == l[1] and l[2] == l[3]:\n            print(\"YES\")\n        else:\n            print(\"NO\")", "report": "The compilation output of the preceding code is: 'function' object has no attribute 'main'"}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] + l[1] == l[2] or (l[0] == l[1] and l[2] == l[3]):\n            print(\"YES\")\n        else:\n            print(\"NO\")"}}], "scores": [], "pass_results": [true, false, false, false, false, false, false, true, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 167, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "mutate_method": "add_1_sentence_at_end", "save_node": false, "parent_index": 15}
