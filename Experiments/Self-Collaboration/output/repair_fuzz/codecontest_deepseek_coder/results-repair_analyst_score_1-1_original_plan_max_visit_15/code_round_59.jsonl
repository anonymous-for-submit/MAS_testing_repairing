{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has made the decision to start singing. He has a one-minute songs, b two-minute songs and c three-minute songs, and he wants to distribute all songs into two concerts where every song should be included in exactly one concert. He wants to minimize the absolute difference in the lengths of the concerts as much as he can. The duration of the concert is the sum of durations of all songs in that concert. It is important to remember that the duration is calculated by adding up the length of each song included. Please help Luntik and find the minimal possible difference in minutes between the concerts durations. Consider all possible distributions to ensure that the difference is indeed minimized.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has made the decision to start singing. He has a one-minute songs, b two-minute songs and c three-minute songs, and he wants to distribute all songs into two concerts where every song should be included in exactly one concert. He wants to minimize the absolute difference in the lengths of the concerts as much as he can. The duration of the concert is the sum of durations of all songs in that concert. It is important to remember that the duration is calculated by adding up the length of each song included. Please help Luntik and find the minimal possible difference in minutes between the concerts durations. Consider all possible distributions to ensure that the difference is indeed minimized.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin", " Luntik has decided to start singing. He has a one-minute song, b two-minute songs, and c three-minute songs, and he wants to distribute all songs into two concerts where every song should be included in exactly one concert. He wants to minimize the absolute difference in the lengths of the concerts as much as possible. The duration of the concert is the sum of durations of all songs in that concert. It is important to remember that the duration is calculated by adding up the length of each song included. Please help Luntik and find the minimal possible difference in minutes between the concerts durations. Consider all possible distributions\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin", " Luntik has decided to start singing and has one-minute, b two-minute, and c three-minute songs, aiming to distribute them into two concerts with each song included exactly once, minimizing the absolute difference in concert durations. Find the smallest possible difference in minutes between the two concerts.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin"], "completion": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try all possible distributions\n        for x in range(3):  # Number of three-minute songs in the first concert\n            for y in range(3):  # Number of two-minute songs in the first concert\n                for z in range(3):  # Number of one-minute songs in the first concert\n                    if x*3 + y*2 + z <= total_duration // 2:  # Check if the first concert is not too long\n                        first_concert_duration = x*3 + y*2 + z\n                        second_concert_duration = total_duration - first_concert_duration\n                        min_diff = min(min_diff, abs(first_concert_duration - second_concert_duration))\n        \n        print(min_diff)\nmain()", "completions": ["def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_songs = a + b + c\n        min_diff = float('inf')\n        \n        # Try all combinations to find the minimum difference\n        for i in range(4):\n            for j in range(4):\n                for k in range(4):\n                    if (i + j + k) % 2 == 0:\n                        duration1 = i * 1 + j * 2 + k * 3\n                        duration2 = total_songs - duration1\n                        diff = abs(duration1 - duration2)\n                        min_diff = min(min_diff, diff)\n        \n        results.append(min_diff)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Initialize the minimum difference to a large number\n        min_diff = float('inf')\n        \n        # Try all combinations of distributing the songs into two concerts\n        for i in range(c + 1):\n            for j in range(b + 1):\n                # Calculate the duration of the first concert\n                first_duration = i * 3 + j * 2 + (a - i) * 1\n                # Calculate the duration of the second concert\n                second_duration = total_duration - first_duration\n                # Calculate the absolute difference\n                diff = abs(first_duration - second_duration)\n                # Update the minimum difference\n                min_diff = min(min_diff, diff)\n        \n        # Append the result for this test case\n        results.append(min_diff)\n    \n    # Print the results for all test cases\n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total duration of all songs\n        total_duration = a + 2*b + 3*c\n        \n        # The optimal way to distribute the songs to minimize the difference\n        # is to try to balance the durations as evenly as possible\n        # We can use a simple heuristic: try to put the most abundant songs in both concerts\n        # and then adjust the rest to minimize the difference\n        \n        # Calculate the difference by trying different distributions\n        min_diff = float('inf')\n        for i in range(3):\n            for j in range(3):\n                for k in range(3):\n                    if (i * 1 + j * 2 + k * 3) * 2 == total_duration:\n                        diff = abs((a - i) + 2 * (b - j) + 3 * (c - k))\n                        min_diff = min(min_diff, diff)\n        \n        results.append(min_diff)\n    \n    # Output the results\n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total sum of minutes from all songs\n        total_minutes = a + 2*b + 3*c\n        \n        # The optimal way to distribute the songs to minimize the absolute difference\n        # is to try to balance the load between the two concerts as much as possible\n        # by using the most abundant songs first.\n        # We can distribute the songs in the following way:\n        # - Use as many three-minute songs as possible (since they are the largest)\n        # - Use as many one-minute songs as possible (since they are the smallest)\n        # - Use as many two-minute songs as possible (since they are in the middle)\n        \n        # Calculate the difference by distributing the songs in this way\n        min_difference = min(total_minutes % 2, (2 - total_minutes % 2))\n        \n        results.append(min_difference)\n    \n    # Output the minimal possible difference for each test case\n    for result in results:\n        print(result)\nmain()", "def find_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    # Consider all possible distributions\n    for i in range(total_duration + 1):\n        first_concert = i\n        second_concert = total_duration - i\n        \n        # Calculate the difference for this distribution\n        diff = abs(first_concert - second_concert)\n        \n        # Update the minimum difference\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\ndef main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        result = find_min_difference(a, b, c)\n        results.append(result)\n    \n    for result in results:\n        print(result)\nmain()", "def find_min_difference():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total possible durations\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Iterate through all possible distributions\n        for x in range(3):\n            for y in range(3):\n                for z in range(3):\n                    if (x + y + z) % 2 == 0:\n                        duration1 = a*x + b*y + c*z\n                        duration2 = total_duration - duration1\n                        min_diff = min(min_diff, abs(duration1 - duration2))\n        \n        results.append(min_diff)\n    \n    # Output the minimal possible difference for each test case\n    for result in results:\n        print(result)\n\n# Main function to read input and call the function to find the minimal possible difference\ndef main():\n    find_min_difference()\nmain()", "def find_min_difference():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        min_diff = float('inf')\n        # Consider all possible distributions\n        for i in range(3):\n            for j in range(3):\n                # First concert duration\n                first_duration = a + b * 2 + c * 3\n                # Second concert duration\n                second_duration = (a + b * 2 + c * 3) - (i * 1 + j * 2)\n                # Calculate the absolute difference\n                diff = abs(first_duration - second_duration)\n                # Update the minimum difference\n                min_diff = min(min_diff, diff)\n        results.append(min_diff)\n    # Output the results\n    for result in results:\n        print(result)\nmain()", "def find_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(total_duration + 1):\n        first_concert = i\n        second_concert = total_duration - i\n        diff = abs(first_concert - second_concert)\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\ndef main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        result = find_min_difference(a, b, c)\n        results.append(result)\n    \n    for result in results:\n        print(result)\nmain()", "def find_min_difference(a, b, c):\n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Try all combinations of distributing the songs\n    for i in range(4):\n        for j in range(4):\n            # Calculate the total duration of the first concert\n            first_duration = i * 1 + j * 2\n            # Calculate the total duration of the second concert\n            second_duration = (a - i) * 1 + (b - j) * 2 + c * 3\n            # Calculate the absolute difference\n            diff = abs(first_duration - second_duration)\n            # Update the minimum difference\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n    \n    # Loop through each test case\n    for _ in range(t):\n        # Read the number of one-minute, two-minute, and three-minute songs\n        a, b, c = map(int, input().split())\n        \n        # Find the minimal possible difference\n        min_diff = find_min_difference(a, b, c)\n        \n        # Print the result\n        print(min_diff)\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try all possible distributions\n        for x in range(3):  # Number of three-minute songs in the first concert\n            for y in range(3):  # Number of two-minute songs in the first concert\n                for z in range(3):  # Number of one-minute songs in the first concert\n                    if x*3 + y*2 + z <= total_duration // 2:  # Check if the first concert is not too long\n                        first_concert_duration = x*3 + y*2 + z\n                        second_concert_duration = total_duration - first_concert_duration\n                        min_diff = min(min_diff, abs(first_concert_duration - second_concert_duration))\n        \n        print(min_diff)\nmain()"], "session_history": {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"steps\": [\n          \"Read the first line of input to get the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case.\",\n        \"steps\": [\n          \"For each test case, read the values of a, b, and c.\",\n          \"Calculate the total duration of all songs.\",\n          \"Determine the optimal way to distribute the songs into two concerts to minimize the absolute difference in durations.\"\n        ]\n      },\n      {\n        \"description\": \"Calculate the optimal distribution.\",\n        \"steps\": [\n          \"Consider all possible distributions of songs between two concerts.\",\n          \"Calculate the duration of each possible distribution.\",\n          \"Find the distribution with the smallest absolute difference in durations.\"\n        ]\n      },\n      {\n        \"description\": \"Output the result.\",\n        \"steps\": [\n          \"For each test case, output the minimal possible difference in minutes between the concerts durations.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Initialize the number of test cases.\",\n      \"Loop through each test case.\",\n      \"Read the values of a, b, and c for the current test case.\",\n      \"Calculate the total duration of all songs.\",\n      \"Determine the optimal distribution of songs to minimize the absolute difference in durations.\",\n      \"Output the minimal possible difference for each test case.\",\n      \"Repeat for all test cases.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning songs to two concerts such that the absolute difference in their durations is minimized.\n    Explanation: The goal is to divide the songs into two groups (concerts) such that the sum of the durations in each group is as close as possible.\n\n# [phrase showing quantity relationship]\n    'as much as': means the same as 'at least as many times', indicating the minimum frequency a number must appear to be considered.\n\n# [degree adverb] \n    'minimal': means the smallest possible, indicating the goal is to find the smallest absolute", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try all possible distributions\n        for x in range(3):  # Number of three-minute songs in the first concert\n            for y in range(3):  # Number of two-minute songs in the first concert\n                for z in range(3):  # Number of one-minute songs in the first concert\n                    if x*3 + y*2 + z <= total_duration // 2:  # Check if the first concert is not too long\n                        first_concert_duration = x*3 + y*2 + z\n                        second_concert_duration = total_duration - first_concert_duration\n                        min_diff = min(min_diff, abs(first_concert_duration - second_concert_duration))\n        \n        print(min_diff)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try all possible distributions\n        for x in range(3):  # Number of three-minute songs in the first concert\n            for y in range(3):  # Number of two-minute songs in the first concert\n                for z in range(3):  # Number of one-minute songs in the first concert\n                    if x*3 + y*2 + z <= total_duration // 2:  # Check if the first concert is not too long\n                        first_concert_duration = x*3 + y*2 + z\n                        second_concert_duration = total_duration - first_concert_duration\n                        min_diff = min(min_diff, abs(first_concert_duration - second_concert_duration))\n        \n        print(min_diff)"}}, "session_historys": [{"plan": " ```json\n{\n  \"Decomposition\": {\n    \"Subproblem1\": \"Read the number of test cases and the details of each test case from standard input.\",\n    \"Subproblem2\": \"For each test case, calculate the optimal distribution of songs into two concerts to minimize the absolute difference in durations.\",\n    \"Subproblem3\": \"Determine the best way to distribute the songs by considering the total sum of minutes and trying to balance the load between the two concerts.\",\n    \"Subproblem4\": \"Output the minimal possible difference for each test case.\"\n  },\n  \"High-Level Plan\": {\n    \"Step1\": \"Read the number of test cases (t) from standard input.\",\n    \"Step2\": \"For each test case, read the values of a, b, and c.\",\n    \"Step3\": \"Calculate the total sum of minutes from all songs.\",\n    \"Step4\": \"Distribute the songs into two concerts to minimize the absolute difference in durations.\",\n    \"Step5\": \"Output the minimal possible difference for each test case.\",\n    \"Step6\": \"Repeat steps 2-5 for each test case until all test cases are processed.\"\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups with the smallest possible difference in total duration.\n    Explanation: The goal is to distribute the songs into two concerts such that the total duration of songs in each concert is as close as possible.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially.\n    - Read the number of test cases and the details of each test case.\n    - For each test case,", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_songs = a + b + c\n        min_diff = float('inf')\n        \n        # Try all combinations to find the minimum difference\n        for i in range(4):\n            for j in range(4):\n                for k in range(4):\n                    if (i + j + k) % 2 == 0:\n                        duration1 = i * 1 + j * 2 + k * 3\n                        duration2 = total_songs - duration1\n                        diff = abs(duration1 - duration2)\n                        min_diff = min(min_diff, diff)\n        \n        results.append(min_diff)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 1 was given"}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_songs = a + b + c\n        min_diff = float('inf')\n        \n        # Try all combinations to find the minimum difference\n        for i in range(4):\n            for j in range(4):\n                for k in range(4):\n                    if (i + j + k) % 2 == 0:\n                        duration1 = i * 1 + j * 2 + k * 3\n                        duration2 = total_songs - duration1\n                        diff = abs(duration1 - duration2)\n                        min_diff = min(min_diff, diff)\n        \n        results.append(min_diff)\n    \n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases and the details of each test case from the input.\",\n        \"steps\": [\n          \"Read the first line of input to get the number of test cases (t).\",\n          \"For each test case, read the next line to get the values of a, b, and c.\"\n        ]\n      },\n      {\n        \"description\": \"Calculate the total duration of songs for each possible distribution of concerts.\",\n        \"steps\": [\n          \"Calculate the total duration of the first concert by considering all combinations of one-minute, two-minute, and three-minute songs.\",\n          \"Calculate the total duration of the second concert by subtracting the first concert's duration from the total duration of all songs.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the minimal possible difference in the lengths of the concerts.\",\n        \"steps\": [\n          \"For each test case, compute the absolute difference between the two possible concert durations.\",\n          \"Track the minimum absolute difference found across all test cases.\"\n        ]\n      },\n      {\n        \"description\": \"Output the minimal possible difference for each test case.\",\n        \"steps\": [\n          \"For each test case, print the minimum absolute difference found.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Initialize variables to keep track of the minimum difference.\",\n      \"Loop through each test case.\",\n      \"For each test case, calculate all possible distributions of songs into two concerts.\",\n      \"Determine the minimal possible difference for each distribution.\",\n      \"Update the minimum difference if a new minimum is found.\",\n      \"After processing all test cases, print the minimum difference found.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups with the goal of minimizing the absolute difference in their durations.\n    Explanation: Luntik wants to distribute his songs into two concerts such that the total duration of songs in each concert is as close as possible. This involves finding the optimal way to split the songs to achieve the smallest possible difference in their sums.\n\n# [phrase showing quantity relationship]\n    'as much as': means to find the closest possible match or the smallest difference.\n    Explanation: The requirement asks to minimize the absolute difference in the lengths of the", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Initialize the minimum difference to a large number\n        min_diff = float('inf')\n        \n        # Try all combinations of distributing the songs into two concerts\n        for i in range(c + 1):\n            for j in range(b + 1):\n                # Calculate the duration of the first concert\n                first_duration = i * 3 + j * 2 + (a - i) * 1\n                # Calculate the duration of the second concert\n                second_duration = total_duration - first_duration\n                # Calculate the absolute difference\n                diff = abs(first_duration - second_duration)\n                # Update the minimum difference\n                min_diff = min(min_diff, diff)\n        \n        # Append the result for this test case\n        results.append(min_diff)\n    \n    # Print the results for all test cases\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 1 was given"}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Initialize the minimum difference to a large number\n        min_diff = float('inf')\n        \n        # Try all combinations of distributing the songs into two concerts\n        for i in range(c + 1):\n            for j in range(b + 1):\n                # Calculate the duration of the first concert\n                first_duration = i * 3 + j * 2 + (a - i) * 1\n                # Calculate the duration of the second concert\n                second_duration = total_duration - first_duration\n                # Calculate the absolute difference\n                diff = abs(first_duration - second_duration)\n                # Update the minimum difference\n                min_diff = min(min_diff, diff)\n        \n        # Append the result for this test case\n        results.append(min_diff)\n    \n    # Print the results for all test cases\n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"Decomposition\": {\n    \"Subproblem1\": \"Read the number of test cases and the details of each test case from standard input.\",\n    \"Subproblem2\": \"For each test case, calculate the optimal distribution of songs into two concerts to minimize the absolute difference in durations.\",\n    \"Subproblem3\": \"Determine the best way to distribute the songs by considering the total number of each type of song and their respective durations.\",\n    \"Subproblem4\": \"Calculate the difference between the two concert durations for each test case and output the smallest possible difference.\"\n  },\n  \"High-Level Plan\": {\n    \"Step1\": \"Read the number of test cases (t).\",\n    \"Step2\": \"For each test case, read the values of a, b, and c.\",\n    \"Step3\": \"Calculate the optimal distribution of songs into two concerts.\",\n    \"Step4\": \"Output the smallest possible difference in minutes between the two concerts for each test case.\",\n    \"Step5\": \"Repeat steps 2-4 for all test cases.\"\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups with the smallest possible difference in total duration.\n    Explanation: The goal is to distribute the songs into two concerts such that the total duration of songs in each concert is as close as possible.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially.\n    For each test case, we need to:\n    1. Calculate the total duration of all songs.\n    ", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total duration of all songs\n        total_duration = a + 2*b + 3*c\n        \n        # The optimal way to distribute the songs to minimize the difference\n        # is to try to balance the durations as evenly as possible\n        # We can use a simple heuristic: try to put the most abundant songs in both concerts\n        # and then adjust the rest to minimize the difference\n        \n        # Calculate the difference by trying different distributions\n        min_diff = float('inf')\n        for i in range(3):\n            for j in range(3):\n                for k in range(3):\n                    if (i * 1 + j * 2 + k * 3) * 2 == total_duration:\n                        diff = abs((a - i) + 2 * (b - j) + 3 * (c - k))\n                        min_diff = min(min_diff, diff)\n        \n        results.append(min_diff)\n    \n    # Output the results\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total duration of all songs\n        total_duration = a + 2*b + 3*c\n        \n        # The optimal way to distribute the songs to minimize the difference\n        # is to try to balance the durations as evenly as possible\n        # We can use a simple heuristic: try to put the most abundant songs in both concerts\n        # and then adjust the rest to minimize the difference\n        \n        # Calculate the difference by trying different distributions\n        min_diff = float('inf')\n        for i in range(3):\n            for j in range(3):\n                for k in range(3):\n                    if (i * 1 + j * 2 + k * 3) * 2 == total_duration:\n                        diff = abs((a - i) + 2 * (b - j) + 3 * (c - k))\n                        min_diff = min(min_diff, diff)\n        \n        results.append(min_diff)\n    \n    # Output the results\n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"Decomposition\": {\n    \"Subproblem1\": \"Read the number of test cases and the details of each test case from standard input.\",\n    \"Subproblem2\": \"For each test case, calculate the optimal distribution of songs into two concerts to minimize the absolute difference in durations.\",\n    \"Subproblem3\": \"Determine the best way to distribute the songs by considering the total sum of minutes and trying to balance the load between the two concerts.\",\n    \"Subproblem4\": \"Output the minimal possible difference for each test case.\"\n  },\n  \"High-Level Plan\": {\n    \"Step1\": \"Read the number of test cases (t) from standard input.\",\n    \"Step2\": \"For each test case, read the values of a, b, and c.\",\n    \"Step3\": \"Calculate the total sum of minutes from all songs.\",\n    \"Step4\": \"Distribute the songs into two concerts to minimize the absolute difference in durations.\",\n    \"Step5\": \"Output the minimal possible difference for each test case.\",\n    \"Step6\": \"Repeat steps 2-5 for each test case until all test cases are processed.\"\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups with the smallest possible difference in total duration.\n    Explanation: The goal is to distribute the songs into two concerts such that the total duration of songs in each concert is as close as possible.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially.\n    - Read the number of test cases and the details of each test case.\n    - For each test case,", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total sum of minutes from all songs\n        total_minutes = a + 2*b + 3*c\n        \n        # The optimal way to distribute the songs to minimize the absolute difference\n        # is to try to balance the load between the two concerts as much as possible\n        # by using the most abundant songs first.\n        # We can distribute the songs in the following way:\n        # - Use as many three-minute songs as possible (since they are the largest)\n        # - Use as many one-minute songs as possible (since they are the smallest)\n        # - Use as many two-minute songs as possible (since they are in the middle)\n        \n        # Calculate the difference by distributing the songs in this way\n        min_difference = min(total_minutes % 2, (2 - total_minutes % 2))\n        \n        results.append(min_difference)\n    \n    # Output the minimal possible difference for each test case\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 1 was given"}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total sum of minutes from all songs\n        total_minutes = a + 2*b + 3*c\n        \n        # The optimal way to distribute the songs to minimize the absolute difference\n        # is to try to balance the load between the two concerts as much as possible\n        # by using the most abundant songs first.\n        # We can distribute the songs in the following way:\n        # - Use as many three-minute songs as possible (since they are the largest)\n        # - Use as many one-minute songs as possible (since they are the smallest)\n        # - Use as many two-minute songs as possible (since they are in the middle)\n        \n        # Calculate the difference by distributing the songs in this way\n        min_difference = min(total_minutes % 2, (2 - total_minutes % 2))\n        \n        results.append(min_difference)\n    \n    # Output the minimal possible difference for each test case\n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"Plan\": {\n    \"Subproblems\": [\n      {\n        \"Description\": \"Read the input for the number of test cases and the details of each test case.\",\n        \"Steps\": [\n          \"Read the first line to get the number of test cases (t).\",\n          \"For each test case, read the next line to get the values of a, b, and c.\"\n        ]\n      },\n      {\n        \"Description\": \"Calculate the total possible durations for all songs.\",\n        \"Steps\": [\n          \"Calculate the total duration if all songs are in one concert.\",\n          \"Calculate the total duration if all songs are in the other concert.\"\n        ]\n      },\n      {\n        \"Description\": \"Determine the minimal possible difference in durations between the two concerts.\",\n        \"Steps\": [\n          \"Iterate through possible distributions of songs between the two concerts.\",\n          \"Calculate the absolute difference for each distribution.\",\n          \"Find the minimum absolute difference.\"\n        ]\n      },\n      {\n        \"Description\": \"Output the minimal possible difference for each test case.\",\n        \"Steps\": [\n          \"For each test case, output the minimum absolute difference found.\"\n        ]\n      }\n    ],\n    \"MajorSteps\": [\n      \"Initialize the program to read input.\",\n      \"Process each test case by reading the values of a, b, and c.\",\n      \"Calculate the total possible durations for all songs.\",\n      \"Determine the minimal possible difference in durations between the two concerts.\",\n      \"Output the result for each test case.\",\n      \"End the program.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"Plan\": {\n    \"Subproblems\": [\n      {\n        \"Description\": \"Read the input for the number of test cases and the details of each test case.\",\n        \"Steps\": [\n          \"Read the first line to get the number of test cases (t).\",\n          \"For each test case, read the next line to get the values of a, b, and c.\"\n        ]\n      },\n      {\n        \"Description\": \"Calculate the total possible durations for all songs.\",\n        \"Steps\": [\n          \"Calculate the total duration", "Round_0": {"code": "def find_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    # Consider all possible distributions\n    for i in range(total_duration + 1):\n        first_concert = i\n        second_concert = total_duration - i\n        \n        # Calculate the difference for this distribution\n        diff = abs(first_concert - second_concert)\n        \n        # Update the minimum difference\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\ndef main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        result = find_min_difference(a, b, c)\n        results.append(result)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases and the details of each test case from standard input.\",\n        \"steps\": [\n          \"Read the first line to get the number of test cases (t).\",\n          \"For each test case, read the next line to get the values of a, b, and c.\"\n        ]\n      },\n      {\n        \"description\": \"Calculate the total possible durations for all songs combined.\",\n        \"steps\": [\n          \"Calculate the total duration if all songs are in one concert.\",\n          \"Calculate the total duration if all songs are in the other concert.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the minimal possible difference in the lengths of the concerts.\",\n        \"steps\": [\n          \"Iterate through all possible distributions of songs between two concerts.\",\n          \"For each distribution, calculate the absolute difference in durations.\",\n          \"Track the minimum absolute difference found.\"\n        ]\n      },\n      {\n        \"description\": \"Output the minimal possible difference for each test case.\",\n        \"steps\": [\n          \"For each test case, print the minimum absolute difference found.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Initialize variables to store the minimum difference.\",\n      \"Loop through each test case.\",\n      \"For each test case, read the values of a, b, and c.\",\n      \"Calculate the total possible durations.\",\n      \"Iterate through all possible distributions to find the minimal possible difference.\",\n      \"Print the minimal possible difference for each test case.\",\n      \"End the program.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases and the details of each test case from standard input.\",\n        \"steps\": [\n          \"Read the first line to get the number of test cases (t).\",\n          \"For each test case, read the next line to get the values of a, b, and c.\"\n        ]\n      },\n      {\n        \"description\": \"Calculate the total possible durations for all songs combined.\",\n        \"steps\": [\n          \"Calculate the total", "Round_0": {"code": "def find_min_difference():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total possible durations\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Iterate through all possible distributions\n        for x in range(3):\n            for y in range(3):\n                for z in range(3):\n                    if (x + y + z) % 2 == 0:\n                        duration1 = a*x + b*y + c*z\n                        duration2 = total_duration - duration1\n                        min_diff = min(min_diff, abs(duration1 - duration2))\n        \n        results.append(min_diff)\n    \n    # Output the minimal possible difference for each test case\n    for result in results:\n        print(result)\n\n# Main function to read input and call the function to find the minimal possible difference\ndef main():\n    find_min_difference()", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def find_min_difference():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total possible durations\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Iterate through all possible distributions\n        for x in range(3):\n            for y in range(3):\n                for z in range(3):\n                    if (x + y + z) % 2 == 0:\n                        duration1 = a*x + b*y + c*z\n                        duration2 = total_duration - duration1\n                        min_diff = min(min_diff, abs(duration1 - duration2))\n        \n        results.append(min_diff)\n    \n    # Output the minimal possible difference for each test case\n    for result in results:\n        print(result)\n\n# Main function to read input and call the function to find the minimal possible difference\ndef main():\n    find_min_difference()"}}, {"plan": " ```json\n{\n  \"Plan\": {\n    \"Subproblems\": [\n      {\n        \"Description\": \"Read the input for the number of test cases and the details of each test case.\",\n        \"Steps\": [\n          \"Read the first line to get the number of test cases (t).\",\n          \"For each test case, read the next line to get the values of a, b, and c.\"\n        ]\n      },\n      {\n        \"Description\": \"Calculate the total possible durations for all combinations of distributing the songs between two concerts.\",\n        \"Steps\": [\n          \"Calculate the total duration if all songs go to the first concert.\",\n          \"Calculate the total duration if all songs go to the second concert.\",\n          \"Calculate the total duration if a certain number of two-minute and three-minute songs are split between the two concerts.\"\n        ]\n      },\n      {\n        \"Description\": \"Find the minimal possible difference in the durations of the two concerts.\",\n        \"Steps\": [\n          \"Iterate through all possible distributions to find the one with the smallest absolute difference.\"\n        ]\n      },\n      {\n        \"Description\": \"Output the minimal possible difference for each test case.\",\n        \"Steps\": [\n          \"For each test case, print the minimal possible difference found.\"\n        ]\n      }\n    ],\n    \"MajorSteps\": [\n      \"Initialize the program to read input.\",\n      \"Process each test case by calculating the possible durations and finding the minimal difference.\",\n      \"Output the results for each test case.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"Plan\": {\n    \"Subproblems\": [\n      {\n        \"Description\": \"Read the input for the number of test cases and the details of each test case.\",\n        \"Steps\": [\n          \"Read the first line to get the number of test cases (t).\",\n          \"For each test case, read the next line to get the values of a, b, and c.\"\n        ]\n      },\n      {\n        \"Description\": \"Calculate the total possible durations for all combinations of distributing the songs between two concerts.\",\n        \"Steps\": [", "Round_0": {"code": "def find_min_difference():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        min_diff = float('inf')\n        # Consider all possible distributions\n        for i in range(3):\n            for j in range(3):\n                # First concert duration\n                first_duration = a + b * 2 + c * 3\n                # Second concert duration\n                second_duration = (a + b * 2 + c * 3) - (i * 1 + j * 2)\n                # Calculate the absolute difference\n                diff = abs(first_duration - second_duration)\n                # Update the minimum difference\n                min_diff = min(min_diff, diff)\n        results.append(min_diff)\n    # Output the results\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def find_min_difference():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        min_diff = float('inf')\n        # Consider all possible distributions\n        for i in range(3):\n            for j in range(3):\n                # First concert duration\n                first_duration = a + b * 2 + c * 3\n                # Second concert duration\n                second_duration = (a + b * 2 + c * 3) - (i * 1 + j * 2)\n                # Calculate the absolute difference\n                diff = abs(first_duration - second_duration)\n                # Update the minimum difference\n                min_diff = min(min_diff, diff)\n        results.append(min_diff)\n    # Output the results\n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the input for the number of test cases and the details of each test case.\",\n        \"steps\": [\n          \"Read the first line to get the number of test cases (t).\",\n          \"For each test case, read the next line to get the values of a, b, and c.\"\n        ]\n      },\n      {\n        \"description\": \"Calculate the possible concert durations for each test case.\",\n        \"steps\": [\n          \"Calculate the total duration of all songs.\",\n          \"Determine the maximum possible duration for a single concert based on the total duration.\",\n          \"Iterate through possible concert durations to find the pair that minimizes the absolute difference.\"\n        ]\n      },\n      {\n        \"description\": \"Output the minimal possible difference for each test case.\",\n        \"steps\": [\n          \"For each test case, output the minimal possible difference in minutes between the concerts durations.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize the number of test cases (t).\",\n      \"Read the input for each test case.\",\n      \"Calculate the total duration of all songs.\",\n      \"Determine the maximum possible duration for a single concert.\",\n      \"Iterate through possible concert durations to find the pair that minimizes the absolute difference.\",\n      \"Output the minimal possible difference for each test case.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the input for the number of test cases and the details of each test case.\",\n        \"steps\": [\n          \"Read the first line to get the number of test cases (t).\",\n          \"For each test case, read the next line to get the values of a, b, and c.\"\n        ]\n      },\n      {\n        \"description\": \"Calculate the possible concert durations for each test case.\",\n        \"steps\": [\n          \"Calculate the total", "Round_0": {"code": "def find_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(total_duration + 1):\n        first_concert = i\n        second_concert = total_duration - i\n        diff = abs(first_concert - second_concert)\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\ndef main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        result = find_min_difference(a, b, c)\n        results.append(result)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases from the input.\",\n        \"steps\": [\n          \"Read the first line of input to get the number of test cases (t).\",\n          \"Initialize a loop to iterate through each test case.\"\n        ]\n      },\n      {\n        \"description\": \"Read the number of one-minute, two-minute, and three-minute songs for each test case.\",\n        \"steps\": [\n          \"For each test case, read the next line to get the values of a, b, and c.\",\n          \"Store these values for further processing.\"\n        ]\n      },\n      {\n        \"description\": \"Calculate the optimal distribution of songs to minimize the absolute difference in concert durations.\",\n        \"steps\": [\n          \"Determine all possible combinations of distributing the songs between two concerts.\",\n          \"Calculate the duration of each combination.\",\n          \"Find the combination with the smallest absolute difference between the two concert durations.\"\n        ]\n      },\n      {\n        \"description\": \"Output the minimal possible difference for each test case.\",\n        \"steps\": [\n          \"For each test case, print the smallest absolute difference found.\",\n          \"Ensure the output format matches the given example.\"\n        ]\n      }\n    ],\n    \"major_steps\": [\n      \"Initialize the program to read input.\",\n      \"Loop through each test case.\",\n      \"For each test case, read the number of songs of each duration.\",\n      \"Calculate all possible distributions and their corresponding durations.\",\n      \"Determine the distribution with the smallest absolute difference.\",\n      \"Print the result for each test case.\",\n      \"End the program after processing all test cases.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning songs to two concerts such that the absolute difference in their durations is minimized.\n    Explanation: The goal is to balance the total duration of songs in the two concerts as evenly as possible.\n\n# [phrase showing quantity relationship]\n    'as many times': means the number of times a song appears in a concert should be at least as much as the song's duration.\n    'as much as': means the number of times a song appears in a concert should be equal to the song's duration.\n\n# [degree adverb] \n", "Round_0": {"code": "def find_min_difference(a, b, c):\n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Try all combinations of distributing the songs\n    for i in range(4):\n        for j in range(4):\n            # Calculate the total duration of the first concert\n            first_duration = i * 1 + j * 2\n            # Calculate the total duration of the second concert\n            second_duration = (a - i) * 1 + (b - j) * 2 + c * 3\n            # Calculate the absolute difference\n            diff = abs(first_duration - second_duration)\n            # Update the minimum difference\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n    \n    # Loop through each test case\n    for _ in range(t):\n        # Read the number of one-minute, two-minute, and three-minute songs\n        a, b, c = map(int, input().split())\n        \n        # Find the minimal possible difference\n        min_diff = find_min_difference(a, b, c)\n        \n        # Print the result\n        print(min_diff)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"steps\": [\n          \"Read the first line of input to get the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case.\",\n        \"steps\": [\n          \"For each test case, read the values of a, b, and c.\",\n          \"Calculate the total duration of all songs.\",\n          \"Determine the optimal way to distribute the songs into two concerts to minimize the absolute difference in durations.\"\n        ]\n      },\n      {\n        \"description\": \"Calculate the optimal distribution.\",\n        \"steps\": [\n          \"Consider all possible distributions of songs between two concerts.\",\n          \"Calculate the duration of each possible distribution.\",\n          \"Find the distribution with the smallest absolute difference in durations.\"\n        ]\n      },\n      {\n        \"description\": \"Output the result.\",\n        \"steps\": [\n          \"For each test case, output the minimal possible difference in minutes between the concerts durations.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Initialize the number of test cases.\",\n      \"Loop through each test case.\",\n      \"Read the values of a, b, and c for the current test case.\",\n      \"Calculate the total duration of all songs.\",\n      \"Determine the optimal distribution of songs to minimize the absolute difference in durations.\",\n      \"Output the minimal possible difference for each test case.\",\n      \"Repeat for all test cases.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning songs to two concerts such that the absolute difference in their durations is minimized.\n    Explanation: The goal is to divide the songs into two groups (concerts) such that the sum of the durations in each group is as close as possible.\n\n# [phrase showing quantity relationship]\n    'as much as': means the same as 'at least as many times', indicating the minimum frequency a number must appear to be considered.\n\n# [degree adverb] \n    'minimal': means the smallest possible, indicating the goal is to find the smallest absolute", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try all possible distributions\n        for x in range(3):  # Number of three-minute songs in the first concert\n            for y in range(3):  # Number of two-minute songs in the first concert\n                for z in range(3):  # Number of one-minute songs in the first concert\n                    if x*3 + y*2 + z <= total_duration // 2:  # Check if the first concert is not too long\n                        first_concert_duration = x*3 + y*2 + z\n                        second_concert_duration = total_duration - first_concert_duration\n                        min_diff = min(min_diff, abs(first_concert_duration - second_concert_duration))\n        \n        print(min_diff)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try all possible distributions\n        for x in range(3):  # Number of three-minute songs in the first concert\n            for y in range(3):  # Number of two-minute songs in the first concert\n                for z in range(3):  # Number of one-minute songs in the first concert\n                    if x*3 + y*2 + z <= total_duration // 2:  # Check if the first concert is not too long\n                        first_concert_duration = x*3 + y*2 + z\n                        second_concert_duration = total_duration - first_concert_duration\n                        min_diff = min(min_diff, abs(first_concert_duration - second_concert_duration))\n        \n        print(min_diff)"}}], "scores": [], "pass_results": [false, false, false, false, false, true, true, false, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 59, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "add_1_sentence_at_end", "save_node": false, "parent_index": 53}
