{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 12, "prompt": "Write a function to sort a given matrix in ascending order. The matrix should be sorted according to the sum of its rows.", "code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "test_imports": [], "test_list": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "assert sort_matrix([[1, 5, 3], [3, 4, 10], [2, 1, 4]]) == [[2, 1, 4], [1, 5, 3], [3, 4, 10]]", "assert sort_matrix([[2, 5, 4], [3, 9, 3], [4, 2, 2]]) == [[4, 2, 2], [2, 5, 4], [3, 9, 3]]", "assert sort_matrix([[1, 1, 6], [7, 8, 3], [1, 1, 6]]) == [[1, 1, 6], [1, 1, 6], [7, 8, 3]]", "assert sort_matrix([[3, 3, 7], [2, 6, 10], [1, 3, 1]]) == [[1, 3, 1], [3, 3, 7], [2, 6, 10]]", "assert sort_matrix([[3, 2, 3], [4, 3, 8], [6, 2, 3]]) == [[3, 2, 3], [6, 2, 3], [4, 3, 8]]", "assert sort_matrix([[4, 5, 5], [6, 8, 6], [2, 5, 4]]) == [[2, 5, 4], [4, 5, 5], [6, 8, 6]]", "assert sort_matrix([[1, 2, 3], [3, 1, 4], [1, 2, 4]]) == [[1, 2, 3], [1, 2, 4], [3, 1, 4]]", "assert sort_matrix([[2, 2, 5], [4, 6, 9], [5, 2, 5]]) == [[2, 2, 5], [5, 2, 5], [4, 6, 9]]", "assert sort_matrix([[3, 4, 7], [7, 6, 5], [6, 3, 1]]) == [[6, 3, 1], [3, 4, 7], [7, 6, 5]]", "assert sort_matrix([[5, 1, 5], [4, 5, 1], [4, 5, 1]]) == [[4, 5, 1], [4, 5, 1], [5, 1, 5]]", "assert sort_matrix([[4, 1, 8], [7, 2, 10], [1, 3, 5]]) == [[1, 3, 5], [4, 1, 8], [7, 2, 10]]", "assert sort_matrix([[1, 3, 8], [6, 3, 7], [1, 4, 3]]) == [[1, 4, 3], [1, 3, 8], [6, 3, 7]]", "assert sort_matrix([[5, 5, 6], [6, 9, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 5, 6], [6, 9, 1]]", "assert sort_matrix([[5, 2, 2], [5, 5, 3], [5, 1, 1]]) == [[5, 1, 1], [5, 2, 2], [5, 5, 3]]", "assert sort_matrix([[1, 2, 3], [3, 5, 5], [6, 2, 3]]) == [[1, 2, 3], [6, 2, 3], [3, 5, 5]]", "assert sort_matrix([[3, 7, 7], [6, 7, 5], [1, 1, 2]]) == [[1, 1, 2], [3, 7, 7], [6, 7, 5]]", "assert sort_matrix([[1, 1, 5], [2, 5, 1], [5, 6, 5]]) == [[1, 1, 5], [2, 5, 1], [5, 6, 5]]", "assert sort_matrix([[6, 3, 8], [7, 9, 5], [4, 2, 6]]) == [[4, 2, 6], [6, 3, 8], [7, 9, 5]]", "assert sort_matrix([[3, 6, 4], [7, 5, 10], [6, 4, 5]]) == [[3, 6, 4], [6, 4, 5], [7, 5, 10]]", "assert sort_matrix([[3, 3, 7], [3, 5, 3], [3, 3, 3]]) == [[3, 3, 3], [3, 5, 3], [3, 3, 7]]", "assert sort_matrix([[6, 3, 6], [5, 1, 2], [6, 5, 3]]) == [[5, 1, 2], [6, 5, 3], [6, 3, 6]]", "assert sort_matrix([[2, 2, 8], [5, 9, 10], [5, 1, 5]]) == [[5, 1, 5], [2, 2, 8], [5, 9, 10]]", "assert sort_matrix([[5, 3, 5], [3, 8, 2], [1, 5, 2]]) == [[1, 5, 2], [5, 3, 5], [3, 8, 2]]", "assert sort_matrix([[2, 6, 8], [1, 9, 2], [5, 2, 4]]) == [[5, 2, 4], [1, 9, 2], [2, 6, 8]]", "assert sort_matrix([[1, 1, 3], [6, 4, 7], [1, 1, 2]]) == [[1, 1, 2], [1, 1, 3], [6, 4, 7]]", "assert sort_matrix([[5, 2, 8], [1, 4, 5], [2, 4, 2]]) == [[2, 4, 2], [1, 4, 5], [5, 2, 8]]", "assert sort_matrix([[3, 2, 4], [6, 4, 4], [2, 6, 6]]) == [[3, 2, 4], [6, 4, 4], [2, 6, 6]]", "assert sort_matrix([[5, 2, 4], [5, 1, 2], [1, 5, 3]]) == [[5, 1, 2], [1, 5, 3], [5, 2, 4]]", "assert sort_matrix([[5, 3, 1], [5, 9, 5], [5, 4, 1]]) == [[5, 3, 1], [5, 4, 1], [5, 9, 5]]", "assert sort_matrix([[6, 2, 6], [1, 6, 5], [5, 1, 3]]) == [[5, 1, 3], [1, 6, 5], [6, 2, 6]]", "assert sort_matrix([[6, 7, 8], [2, 2, 9], [6, 4, 1]]) == [[6, 4, 1], [2, 2, 9], [6, 7, 8]]", "assert sort_matrix([[2, 1, 1], [4, 4, 2], [3, 5, 4]]) == [[2, 1, 1], [4, 4, 2], [3, 5, 4]]", "assert sort_matrix([[6, 4, 4], [3, 4, 7], [4, 5, 3]]) == [[4, 5, 3], [6, 4, 4], [3, 4, 7]]", "assert sort_matrix([[1, 7, 7], [-6, 7, -6], [5, -2, 3]]) == [[-6, 7, -6], [5, -2, 3], [1, 7, 7]]", "assert sort_matrix([[1, 4, 5], [2, 4, 0], [5, -4, 3]]) == [[5, -4, 3], [2, 4, 0], [1, 4, 5]]", "assert sort_matrix([[5, 2, 3], [-6, 6, -7], [6, 1, 5]]) == [[-6, 6, -7], [5, 2, 3], [6, 1, 5]]", "assert sort_matrix([[1, 3, 4], [0, 6, -2], [5, -3, 6]]) == [[0, 6, -2], [1, 3, 4], [5, -3, 6]]", "assert sort_matrix([[3, 4, 4], [3, 3, -2], [3, 2, 6]]) == [[3, 3, -2], [3, 4, 4], [3, 2, 6]]", "assert sort_matrix([[6, 2, 7], [-5, 2, -1], [2, -6, 2]]) == [[-5, 2, -1], [2, -6, 2], [6, 2, 7]]", "assert sort_matrix([[1, 2, 1], [3, 7, -8], [3, -4, 1]]) == [[3, -4, 1], [3, 7, -8], [1, 2, 1]]", "assert sort_matrix([[3, 4, 7], [-6, 8, 0], [4, -5, 2]]) == [[4, -5, 2], [-6, 8, 0], [3, 4, 7]]", "assert sort_matrix([[4, 3, 5], [0, 6, 0], [1, -6, 2]]) == [[1, -6, 2], [0, 6, 0], [4, 3, 5]]", "assert sort_matrix([[5, 6, 1], [-7, 5, -6], [5, -1, 2]]) == [[-7, 5, -6], [5, -1, 2], [5, 6, 1]]", "assert sort_matrix([[3, 2, 8], [1, 2, -3], [6, 1, 2]]) == [[1, 2, -3], [6, 1, 2], [3, 2, 8]]", "assert sort_matrix([[3, 3, 1], [0, 9, -2], [1, -5, 5]]) == [[1, -5, 5], [3, 3, 1], [0, 9, -2]]", "assert sort_matrix([[5, 7, 1], [-6, 4, -1], [2, -2, 2]]) == [[-6, 4, -1], [2, -2, 2], [5, 7, 1]]", "assert sort_matrix([[6, 5, 2], [-6, 7, -1], [2, -5, 4]]) == [[-6, 7, -1], [2, -5, 4], [6, 5, 2]]", "assert sort_matrix([[2, 6, 7], [-1, 2, -2], [1, -2, 1]]) == [[-1, 2, -2], [1, -2, 1], [2, 6, 7]]", "assert sort_matrix([[1, 3, 8], [-1, 4, -2], [5, 2, 1]]) == [[-1, 4, -2], [5, 2, 1], [1, 3, 8]]", "assert sort_matrix([[6, 3, 3], [3, 3, 0], [3, 1, 3]]) == [[3, 3, 0], [3, 1, 3], [6, 3, 3]]", "assert sort_matrix([[4, 7, 8], [-7, 7, -1], [2, 1, 5]]) == [[-7, 7, -1], [2, 1, 5], [4, 7, 8]]", "assert sort_matrix([[6, 1, 2], [-3, 8, -9], [5, 3, 6]]) == [[-3, 8, -9], [6, 1, 2], [5, 3, 6]]", "assert sort_matrix([[3, 4, 3], [-2, 8, -10], [3, 0, 6]]) == [[-2, 8, -10], [3, 0, 6], [3, 4, 3]]", "assert sort_matrix([[3, 5, 5], [-4, 3, -9], [3, -1, 1]]) == [[-4, 3, -9], [3, -1, 1], [3, 5, 5]]", "assert sort_matrix([[4, 2, 2], [-2, 1, -8], [5, -5, 1]]) == [[-2, 1, -8], [5, -5, 1], [4, 2, 2]]", "assert sort_matrix([[5, 4, 7], [-5, 4, -8], [1, 1, 4]]) == [[-5, 4, -8], [1, 1, 4], [5, 4, 7]]", "assert sort_matrix([[6, 4, 5], [2, 7, -10], [1, 2, 2]]) == [[2, 7, -10], [1, 2, 2], [6, 4, 5]]", "assert sort_matrix([[5, 7, 6], [2, 1, -4], [5, -6, 4]]) == [[2, 1, -4], [5, -6, 4], [5, 7, 6]]", "assert sort_matrix([[5, 5, 8], [3, 3, -2], [3, -1, 3]]) == [[3, 3, -2], [3, -1, 3], [5, 5, 8]]", "assert sort_matrix([[5, 1, 8], [-2, 3, -6], [1, 0, 2]]) == [[-2, 3, -6], [1, 0, 2], [5, 1, 8]]", "assert sort_matrix([[4, 7, 5], [-4, 9, 0], [2, -4, 2]]) == [[2, -4, 2], [-4, 9, 0], [4, 7, 5]]", "assert sort_matrix([[1, 5, 6], [2, 1, -2], [1, 1, 3]]) == [[2, 1, -2], [1, 1, 3], [1, 5, 6]]", "assert sort_matrix([[4, 5, 8], [-3, 9, 0], [4, 3, 3]]) == [[-3, 9, 0], [4, 3, 3], [4, 5, 8]]", "assert sort_matrix([[3, 4, 4], [1, 6, -5], [5, 0, 2]]) == [[1, 6, -5], [5, 0, 2], [3, 4, 4]]", "assert sort_matrix([[4, 4, 2], [-6, 7, -3], [4, 3, 5]]) == [[-6, 7, -3], [4, 4, 2], [4, 3, 5]]", "assert sort_matrix([[4, 7, 7], [0, 5, -1], [1, -1, 4]]) == [[0, 5, -1], [1, -1, 4], [4, 7, 7]]", "assert sort_matrix([[10, 12, 8], [5, 1, 5], [2, 5, 8]]) == [[5, 1, 5], [2, 5, 8], [10, 12, 8]]", "assert sort_matrix([[3, 8, 13], [11, 9, 6], [3, 6, 4]]) == [[3, 6, 4], [3, 8, 13], [11, 9, 6]]", "assert sort_matrix([[1, 11, 8], [2, 5, 6], [6, 3, 5]]) == [[2, 5, 6], [6, 3, 5], [1, 11, 8]]", "assert sort_matrix([[1, 6, 11], [1, 8, 8], [2, 2, 6]]) == [[2, 2, 6], [1, 8, 8], [1, 6, 11]]", "assert sort_matrix([[9, 4, 8], [10, 7, 2], [1, 3, 2]]) == [[1, 3, 2], [10, 7, 2], [9, 4, 8]]", "assert sort_matrix([[7, 4, 4], [9, 2, 8], [1, 4, 2]]) == [[1, 4, 2], [7, 4, 4], [9, 2, 8]]", "assert sort_matrix([[4, 5, 12], [2, 9, 7], [5, 4, 5]]) == [[5, 4, 5], [2, 9, 7], [4, 5, 12]]", "assert sort_matrix([[3, 9, 4], [7, 3, 6], [3, 1, 9]]) == [[3, 1, 9], [3, 9, 4], [7, 3, 6]]", "assert sort_matrix([[1, 11, 11], [4, 9, 5], [4, 3, 7]]) == [[4, 3, 7], [4, 9, 5], [1, 11, 11]]", "assert sort_matrix([[6, 4, 6], [2, 6, 1], [6, 1, 4]]) == [[2, 6, 1], [6, 1, 4], [6, 4, 6]]", "assert sort_matrix([[9, 11, 11], [1, 4, 1], [4, 1, 8]]) == [[1, 4, 1], [4, 1, 8], [9, 11, 11]]", "assert sort_matrix([[1, 11, 4], [5, 7, 2], [5, 5, 6]]) == [[5, 7, 2], [1, 11, 4], [5, 5, 6]]", "assert sort_matrix([[9, 9, 11], [2, 8, 5], [3, 6, 6]]) == [[2, 8, 5], [3, 6, 6], [9, 9, 11]]", "assert sort_matrix([[3, 3, 4], [5, 1, 6], [2, 6, 4]]) == [[3, 3, 4], [5, 1, 6], [2, 6, 4]]", "assert sort_matrix([[1, 9, 13], [9, 9, 3], [6, 4, 4]]) == [[6, 4, 4], [9, 9, 3], [1, 9, 13]]", "assert sort_matrix([[9, 4, 11], [5, 7, 4], [3, 5, 4]]) == [[3, 5, 4], [5, 7, 4], [9, 4, 11]]", "assert sort_matrix([[5, 8, 12], [1, 3, 2], [6, 4, 8]]) == [[1, 3, 2], [6, 4, 8], [5, 8, 12]]", "assert sort_matrix([[10, 13, 6], [3, 6, 7], [6, 4, 4]]) == [[6, 4, 4], [3, 6, 7], [10, 13, 6]]", "assert sort_matrix([[7, 11, 7], [4, 1, 3], [5, 5, 7]]) == [[4, 1, 3], [5, 5, 7], [7, 11, 7]]", "assert sort_matrix([[9, 9, 10], [10, 2, 7], [5, 6, 9]]) == [[10, 2, 7], [5, 6, 9], [9, 9, 10]]", "assert sort_matrix([[8, 12, 11], [1, 5, 7], [4, 3, 5]]) == [[4, 3, 5], [1, 5, 7], [8, 12, 11]]", "assert sort_matrix([[2, 6, 14], [5, 2, 3], [3, 1, 5]]) == [[3, 1, 5], [5, 2, 3], [2, 6, 14]]", "assert sort_matrix([[6, 3, 5], [7, 5, 3], [6, 6, 7]]) == [[6, 3, 5], [7, 5, 3], [6, 6, 7]]", "assert sort_matrix([[1, 13, 4], [4, 4, 2], [4, 1, 9]]) == [[4, 4, 2], [4, 1, 9], [1, 13, 4]]", "assert sort_matrix([[8, 7, 4], [5, 8, 4], [2, 4, 1]]) == [[2, 4, 1], [5, 8, 4], [8, 7, 4]]", "assert sort_matrix([[4, 8, 9], [5, 4, 4], [2, 5, 6]]) == [[5, 4, 4], [2, 5, 6], [4, 8, 9]]", "assert sort_matrix([[5, 10, 14], [9, 7, 7], [5, 6, 7]]) == [[5, 6, 7], [9, 7, 7], [5, 10, 14]]", "assert sort_matrix([[5, 6, 4], [8, 8, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 6, 4], [8, 8, 1]]", "assert sort_matrix([[5, 12, 12], [3, 5, 3], [5, 3, 1]]) == [[5, 3, 1], [3, 5, 3], [5, 12, 12]]", "assert sort_matrix([[4, 7, 10], [10, 4, 8], [5, 6, 8]]) == [[5, 6, 8], [4, 7, 10], [10, 4, 8]]", "assert sort_matrix([[2, 4, 7], [10, 3, 3], [6, 4, 6]]) == [[2, 4, 7], [10, 3, 3], [6, 4, 6]]", "assert sort_matrix([[5, 5, 6], [11, 9, 3], [1, 3, 9]]) == [[1, 3, 9], [5, 5, 6], [11, 9, 3]]", "assert sort_matrix([[3, 8, 10], [7, 7, 7], [4, 3, 3]]) == [[4, 3, 3], [3, 8, 10], [7, 7, 7]]"], "entry_point": "sort_matrix", "repair_prompt": ["Write a function to sort a given matrix in ascending order. The matrix should be sorted according to the sum of its rows.\nexample:\nsort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", " Write a function to sort a given matrix in ascending order. The matrix should be sorted according to the sum of its rows. The function should take a matrix as input and return a new matrix where the rows are ordered by the sum of their elements from smallest to largest.\nexample:\nsort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", " Write a function to sort a given matrix in ascending order, with the matrix sorted by the sum of its rows.\nexample:\nsort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n"], "completion": "from typing import *\ndef sort_matrix(matrix):\n    # Step 1: Extract the sum of each row in the matrix\n    row_sums = [sum(row) for row in matrix]\n    \n    # Step 2: Sort the matrix based on the extracted sums\n    sorted_matrix = [row for _, row in sorted(zip(row_sums, matrix))]\n    \n    return sorted_matrix", "completions": ["from typing import *\ndef sort_matrix(matrix):\n    # Calculate the sum of each row and sort the matrix based on these sums\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix", "from typing import *\ndef sort_matrix(matrix):\n    # Calculate the sum of each row and sort the matrix based on these sums\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix", "from typing import *\ndef sort_matrix(matrix):\n    # Pair each row with its sum\n    paired_matrix = [(sum(row), row) for row in matrix]\n    \n    # Sort the pairs based on the sum\n    paired_matrix.sort(key=lambda x: x[0])\n    \n    # Extract the sorted rows from the pairs\n    sorted_matrix = [pair[1] for pair in paired_matrix]\n    \n    return sorted_matrix", "from typing import *\ndef sort_matrix(matrix):\n    # Step 1: Define the function `sort_matrix` which takes a matrix as input.\n    # Step 2: Initialize a list to store the sums of each row.\n    row_sums = []\n    \n    # Step 3: Iterate through the matrix to calculate the sum of each row and store these sums in a list.\n    for row in matrix:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    \n    # Step 4: Sort the matrix based on the sums stored in the list.\n    # Step 5: Return the sorted matrix.\n    # Using zip to pair the sums with their corresponding rows, then sort by the sums.\n    sorted_matrix = [list(row) for row in sorted(zip(row_sums, matrix), key=lambda x: x[0])]\n    sorted_matrix = [row[1] for row in sorted_matrix]\n    \n    return sorted_matrix", "from typing import *\ndef sort_matrix(matrix):\n    # Step 1: Define the function `sort_matrix` which takes a matrix as input.\n    # Step 2: Initialize a list to store the sums of each row.\n    row_sums = []\n    \n    # Step 3: Iterate through the matrix to calculate the sum of each row and store these sums in a list.\n    for row in matrix:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    \n    # Step 4: Sort the matrix based on the sums stored in the list.\n    # Using zip to pair sums with their corresponding rows, then sort by the sums.\n    sorted_matrix = [list(row) for row, _ in sorted(zip(matrix, row_sums), key=lambda x: x[1])]\n    \n    # Step 5: Return the sorted matrix.\n    return sorted_matrix", "from typing import *\ndef sort_matrix(matrix):\n    # Step 1: Define the function `sort_matrix` which takes a matrix as input.\n    # Step 2: Initialize a list to store the sums of each row.\n    row_sums = []\n    \n    # Step 3: Iterate through the matrix to calculate the sum of each row and store these sums in a list.\n    for row in matrix:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    \n    # Step 4: Sort the matrix based on the sums stored in the list.\n    # Using zip to pair sums with their corresponding rows, then sort by the sums.\n    sorted_matrix = [list(row) for row, _ in sorted(zip(matrix, row_sums), key=lambda x: x[1])]\n    \n    # Step 5: Return the sorted matrix.\n    return sorted_matrix", "from typing import *\ndef sort_matrix(matrix):\n    # Step 1: Calculate the sum of each row and store these sums along with their corresponding row indices\n    row_sums_with_indices = [(sum(row), i) for i, row in enumerate(matrix)]\n    \n    # Step 2: Sort the rows based on the sums calculated in the previous step\n    # If two rows have the same sum, maintain their relative order\n    row_sums_with_indices.sort(key=lambda x: x[0])\n    \n    # Step 3: Return the sorted matrix\n    sorted_matrix = [matrix[i] for _, i in row_sums_with_indices]\n    return sorted_matrix", "from typing import *\ndef sort_matrix(matrix):\n    # Calculate the sum of each row in the given matrix\n    sorted_matrix = sorted(matrix, key=sum)\n    # Return the sorted matrix\n    return sorted_matrix", "from typing import *\ndef sort_matrix(matrix):\n    # Step 1: Extract the sum of each row in the matrix\n    row_sums = [sum(row) for row in matrix]\n    \n    # Step 2: Sort the matrix based on the extracted sums\n    sorted_matrix = [row for _, row in sorted(zip(row_sums, matrix))]\n    \n    # Step 3: Return the sorted matrix\n    return sorted_matrix", "from typing import *\ndef sort_matrix(matrix):\n    # Step 1: Extract the sum of each row in the matrix\n    row_sums = [sum(row) for row in matrix]\n    \n    # Step 2: Sort the matrix based on the extracted sums\n    sorted_matrix = [row for _, row in sorted(zip(row_sums, matrix))]\n    \n    return sorted_matrix"], "session_history": {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Extract the sum of each row in the matrix.\",\n      \"Details\": \"Create a function that takes a matrix as input and returns a list of sums, where each sum corresponds to the sum of elements in a row of the matrix.\"\n    },\n    {\n      \"Subproblem\": \"Sort the matrix based on the sums of its rows.\",\n      \"Details\": \"Using the list of row sums obtained from the previous step, sort the matrix rows based on these sums in ascending order.\"\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"Extract the sum of each row in the matrix.\",\n      \"Details\": \"Iterate through each row of the matrix, calculate the sum of its elements, and store these sums in a list.\"\n    },\n    {\n      \"Step\": \"Sort the matrix based on the extracted sums.\",\n      \"Details\": \"Use the list of sums to sort the rows of the matrix in ascending order.\"\n    },\n    {\n      \"Step\": \"Return the sorted matrix.\",\n      \"Details\": \"After sorting the matrix, return the sorted matrix as the output of the function.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array with rows and columns\n    'sum of rows': the total of all elements in each row\n    'ascending order': arranging elements from smallest to largest\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 1 and 2 should be implement simultaneously.\n    \"Extract the sum of each row in the matrix.\"\n    \"Sort the matrix based on the sums of its rows.\"\n    This could", "Round_0": {"code": "def sort_matrix(matrix):\n    # Step 1: Extract the sum of each row in the matrix\n    row_sums = [sum(row) for row in matrix]\n    \n    # Step 2: Sort the matrix based on the extracted sums\n    sorted_matrix = [row for _, row in sorted(zip(row_sums, matrix))]\n    \n    return sorted_matrix", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Define the function signature and input parameters.\",\n        \"details\": \"The function should take a matrix as input, where the matrix is represented as a list of lists.\"\n      },\n      {\n        \"description\": \"Calculate the sum of each row in the matrix.\",\n        \"details\": \"Iterate through each row of the matrix and compute the sum of its elements.\"\n      },\n      {\n        \"description\": \"Sort the matrix based on the row sums.\",\n        \"details\": \"Use the calculated row sums to sort the rows of the matrix in ascending order.\"\n      },\n      {\n        \"description\": \"Return the sorted matrix.\",\n        \"details\": \"After sorting, return the new matrix with rows ordered by their sums.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"description\": \"Define the function and get the matrix as input.\",\n        \"details\": \"Start by defining the function sort_matrix that takes a matrix as an argument.\"\n      },\n      {\n        \"description\": \"Calculate the sum of each row.\",\n        \"details\": \"Use a nested loop to iterate through each row and calculate the sum of its elements.\"\n      },\n      {\n        \"description\": \"Sort the rows based on their sums.\",\n        \"details\": \"Use the calculated sums to sort the rows of the matrix. This can be efficiently done using the sorted function in Python with a custom key.\"\n      },\n      {\n        \"description\": \"Return the sorted matrix.\",\n        \"details\": \"After sorting, return the new matrix with the rows ordered by their sums.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array of numbers\n    Explanation: A matrix is a rectangular array of numbers, often used to represent mathematical or computational operations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 2-3 should be implement simultaneously.\n    \"Calculate the sum of each row in the matrix\" and \"Sort the matrix based on the row sums\" can be done in one code block by using the sorted function with a custom", "Round_0": {"code": "def sort_matrix(matrix):\n    # Calculate the sum of each row and sort the matrix based on these sums\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Define the function signature and input parameters.\",\n        \"details\": {\n          \"function_name\": \"sort_matrix\",\n          \"parameters\": {\n            \"matrix\": \"a list of lists representing the matrix\"\n          },\n          \"return_type\": \"a new matrix sorted by row sums\"\n        }\n      },\n      {\n        \"description\": \"Calculate the sum of each row in the matrix.\",\n        \"details\": {\n          \"process\": \"Iterate through each row in the matrix and compute the sum of its elements.\"\n        }\n      },\n      {\n        \"description\": \"Sort the matrix based on the row sums.\",\n        \"details\": {\n          \"process\": \"Use the calculated row sums to sort the rows of the matrix in ascending order.\"\n        }\n      },\n      {\n        \"description\": \"Return the sorted matrix.\",\n        \"details\": {\n          \"process\": \"After sorting, return the new matrix.\"\n        }\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": 1,\n        \"description\": \"Define the function and get the matrix as input.\"\n      },\n      {\n        \"step\": 2,\n        \"description\": \"Calculate the sum of each row in the matrix.\"\n      },\n      {\n        \"step\": 3,\n        \"description\": \"Sort the matrix based on the calculated row sums.\"\n      },\n      {\n        \"step\": 4,\n        \"description\": \"Return the sorted matrix.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array of numbers\n    Explanation: A matrix is a rectangular array of numbers, often used to represent a grid or table of data.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Steps 2 and 3 should be implemented simultaneously.\n    \"Calculate the sum of each row in the matrix.\" and \"Sort the matrix based on the calculated row sums.\" can be done in one code block by using a custom sorting", "Round_0": {"code": "def sort_matrix(matrix):\n    # Calculate the sum of each row and sort the matrix based on these sums\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Define the function signature and input parameters.\",\n        \"details\": \"The function should take a matrix as input, where the matrix is represented as a list of lists.\"\n      },\n      {\n        \"description\": \"Calculate the sum of each row in the matrix.\",\n        \"details\": \"Iterate through each row of the matrix and compute the sum of its elements.\"\n      },\n      {\n        \"description\": \"Sort the matrix based on the row sums.\",\n        \"details\": \"Use the calculated row sums to sort the rows of the matrix in ascending order.\"\n      },\n      {\n        \"description\": \"Return the sorted matrix.\",\n        \"details\": \"After sorting, return the new matrix with rows ordered by their sums.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"description\": \"Define the function and get the matrix as input.\",\n        \"details\": \"Start by defining the function sort_matrix that takes a matrix as an argument.\"\n      },\n      {\n        \"description\": \"Calculate the sum of each row.\",\n        \"details\": \"Use a nested loop or list comprehension to iterate through each row and calculate the sum of its elements.\"\n      },\n      {\n        \"description\": \"Sort the rows based on their sums.\",\n        \"details\": \"Pair each row with its sum, then sort these pairs based on the sum. Use Python's sort function with a custom key.\"\n      },\n      {\n        \"description\": \"Return the sorted matrix.\",\n        \"details\": \"After sorting, reconstruct the matrix with the sorted rows and return it.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array of numbers\n    Explanation: A matrix is a rectangular array of numbers, often used to represent linear transformations or systems of equations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 2-3 should be implement simultaneously.\n    \"Calculate the sum of each row in the matrix\" and \"Sort the matrix based on the row sums\" can be done in one code block by using a custom key in", "Round_0": {"code": "def sort_matrix(matrix):\n    # Pair each row with its sum\n    paired_matrix = [(sum(row), row) for row in matrix]\n    \n    # Sort the pairs based on the sum\n    paired_matrix.sort(key=lambda x: x[0])\n    \n    # Extract the sorted rows from the pairs\n    sorted_matrix = [pair[1] for pair in paired_matrix]\n    \n    return sorted_matrix", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Define the function signature for `sort_matrix`.\",\n      \"Calculate the sum of each row in the given matrix.\",\n      \"Sort the matrix based on the sums of its rows.\",\n      \"Return the sorted matrix.\"\n    ],\n    \"high_level_plan\": [\n      \"1. Define the function `sort_matrix` which takes a matrix as input.\",\n      \"2. Initialize a list to store the sums of each row.\",\n      \"3. Iterate through the matrix to calculate the sum of each row and store these sums in a list.\",\n      \"4. Sort the matrix based on the sums stored in the list.\",\n      \"5. Return the sorted matrix.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array with rows and columns\n    Explanation: A matrix is a rectangular array of numbers, often used to represent linear transformations or systems of equations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 3 and 4 should be implement simultaneously.\n    \"Calculate the sum of each row in the given matrix.\" and \"Sort the matrix based on the sums of its rows.\"\n    This could be done by", "Round_0": {"code": "def sort_matrix(matrix):\n    # Step 1: Define the function `sort_matrix` which takes a matrix as input.\n    # Step 2: Initialize a list to store the sums of each row.\n    row_sums = []\n    \n    # Step 3: Iterate through the matrix to calculate the sum of each row and store these sums in a list.\n    for row in matrix:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    \n    # Step 4: Sort the matrix based on the sums stored in the list.\n    # Step 5: Return the sorted matrix.\n    # Using zip to pair the sums with their corresponding rows, then sort by the sums.\n    sorted_matrix = [list(row) for row in sorted(zip(row_sums, matrix), key=lambda x: x[0])]\n    sorted_matrix = [row[1] for row in sorted_matrix]\n    \n    return sorted_matrix", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Define the function signature for `sort_matrix`.\",\n      \"Calculate the sum of each row in the given matrix.\",\n      \"Sort the matrix based on the sums of its rows.\",\n      \"Return the sorted matrix.\"\n    ],\n    \"high_level_plan\": [\n      \"1. Define the function `sort_matrix` which takes a matrix as input.\",\n      \"2. Initialize a list to store the sums of each row.\",\n      \"3. Iterate through the matrix to calculate the sum of each row and store these sums in a list.\",\n      \"4. Sort the matrix based on the sums stored in the list.\",\n      \"5. Return the sorted matrix.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array with rows and columns\n    Explanation: A matrix is a rectangular array of numbers, arranged in rows and columns. In this requirement, we are dealing with a matrix where each element is a positive integer.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 3-4 should be implement simultaneously.\n    \"Calculate the sum of each row in the given matrix.\" and \"Sort the matrix based on the", "Round_0": {"code": "def sort_matrix(matrix):\n    # Step 1: Define the function `sort_matrix` which takes a matrix as input.\n    # Step 2: Initialize a list to store the sums of each row.\n    row_sums = []\n    \n    # Step 3: Iterate through the matrix to calculate the sum of each row and store these sums in a list.\n    for row in matrix:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    \n    # Step 4: Sort the matrix based on the sums stored in the list.\n    # Using zip to pair sums with their corresponding rows, then sort by the sums.\n    sorted_matrix = [list(row) for row, _ in sorted(zip(matrix, row_sums), key=lambda x: x[1])]\n    \n    # Step 5: Return the sorted matrix.\n    return sorted_matrix", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Define the function signature for `sort_matrix`.\",\n      \"Calculate the sum of each row in the given matrix.\",\n      \"Sort the matrix based on the sums of its rows.\",\n      \"Return the sorted matrix.\"\n    ],\n    \"high_level_plan\": [\n      \"1. Define the function `sort_matrix` which takes a matrix as input.\",\n      \"2. Initialize a list to store the sums of each row.\",\n      \"3. Iterate through the matrix to calculate the sum of each row and store these sums in a list.\",\n      \"4. Sort the matrix based on the sums stored in the list.\",\n      \"5. Return the sorted matrix.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array with rows and columns\n    Explanation: A matrix is a rectangular array of numbers, arranged in rows and columns. In this requirement, we are dealing with a matrix where each element is a positive integer.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 3-4 should be implement simultaneously.\n    \"Calculate the sum of each row in the given matrix.\" and \"Sort the matrix based on the", "Round_0": {"code": "def sort_matrix(matrix):\n    # Step 1: Define the function `sort_matrix` which takes a matrix as input.\n    # Step 2: Initialize a list to store the sums of each row.\n    row_sums = []\n    \n    # Step 3: Iterate through the matrix to calculate the sum of each row and store these sums in a list.\n    for row in matrix:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    \n    # Step 4: Sort the matrix based on the sums stored in the list.\n    # Using zip to pair sums with their corresponding rows, then sort by the sums.\n    sorted_matrix = [list(row) for row, _ in sorted(zip(matrix, row_sums), key=lambda x: x[1])]\n    \n    # Step 5: Return the sorted matrix.\n    return sorted_matrix", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Define the function to sort the matrix by row sums.\",\n        \"steps\": [\n          \"Create a function named `sort_matrix` that takes a matrix as input.\",\n          \"Calculate the sum of each row in the matrix and store these sums along with their corresponding row indices.\"\n        ]\n      },\n      {\n        \"description\": \"Sort the rows based on the calculated sums.\",\n        \"steps\": [\n          \"Sort the rows based on the sums calculated in the previous step.\",\n          \"If two rows have the same sum, maintain their relative order.\"\n        ]\n      },\n      {\n        \"description\": \"Return the sorted matrix.\",\n        \"steps\": [\n          \"After sorting, return the matrix with the rows in the new order.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Analyze the user requirement to understand the need for a function that sorts a matrix by row sums.\",\n      \"Decompose the requirement into three main tasks: calculating row sums, sorting rows based on these sums, and returning the sorted matrix.\",\n      \"Implement the function `sort_matrix` to perform these tasks.\",\n      \"Test the function with the provided example to ensure it works as expected.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array with rows and columns\n    'row sums': the sum of all elements in a row\n    'sorting': arranging elements in ascending order\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 1-3 should be implement simultaneously.\n    \"Calculate the sum of each row in the matrix and store these sums along with their corresponding row indices.\"\n    This could be done by using a loop to iterate", "Round_0": {"code": "def sort_matrix(matrix):\n    # Step 1: Calculate the sum of each row and store these sums along with their corresponding row indices\n    row_sums_with_indices = [(sum(row), i) for i, row in enumerate(matrix)]\n    \n    # Step 2: Sort the rows based on the sums calculated in the previous step\n    # If two rows have the same sum, maintain their relative order\n    row_sums_with_indices.sort(key=lambda x: x[0])\n    \n    # Step 3: Return the sorted matrix\n    sorted_matrix = [matrix[i] for _, i in row_sums_with_indices]\n    return sorted_matrix", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Define the function signature for `sort_matrix`.\",\n      \"Calculate the sum of each row in the given matrix.\",\n      \"Sort the matrix based on the sums of its rows.\",\n      \"Return the sorted matrix.\"\n    ],\n    \"high_level_steps\": [\n      \"Initialize the function `sort_matrix` with a parameter for the matrix.\",\n      \"Iterate through each row in the matrix to calculate the sum of its elements.\",\n      \"Sort the matrix rows based on the sums calculated in the previous step.\",\n      \"Return the sorted matrix.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array with rows and columns\n    'sum of rows': the total of all elements in each row\n    'sorting': arranging elements in ascending order\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 2-3 should be implement simultaneously.\n    \"Calculate the sum of each row in the given matrix.\"\n    \"Sort the matrix rows based on the sums calculated in the previous step.\"\n    This", "Round_0": {"code": "def sort_matrix(matrix):\n    # Calculate the sum of each row in the given matrix\n    sorted_matrix = sorted(matrix, key=sum)\n    # Return the sorted matrix\n    return sorted_matrix", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Extract the sum of each row in the matrix.\",\n      \"Details\": \"Create a function that takes a matrix as input and returns a list of sums, where each sum corresponds to the sum of elements in a row of the matrix.\"\n    },\n    {\n      \"Subproblem\": \"Sort the matrix based on the sums of its rows.\",\n      \"Details\": \"Using the list of row sums obtained from the previous step, sort the matrix rows based on these sums in ascending order.\"\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"Extract the sum of each row in the matrix.\",\n      \"Details\": \"Iterate through each row of the matrix, calculate the sum of its elements, and store these sums in a list.\"\n    },\n    {\n      \"Step\": \"Sort the matrix based on the extracted sums.\",\n      \"Details\": \"Use the list of sums to sort the rows of the matrix in ascending order.\"\n    },\n    {\n      \"Step\": \"Return the sorted matrix.\",\n      \"Details\": \"After sorting the matrix, return the sorted matrix as the output of the function.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array with rows and columns\n    'sum of rows': the total of all elements in each row\n    'ascending order': arranging elements from smallest to largest\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 1-3 should be implement simultaneously.\n    \"Extract the sum of each row in the matrix.\": Calculate the sum of each row and store these sums in a list.\n    \"Sort", "Round_0": {"code": "def sort_matrix(matrix):\n    # Step 1: Extract the sum of each row in the matrix\n    row_sums = [sum(row) for row in matrix]\n    \n    # Step 2: Sort the matrix based on the extracted sums\n    sorted_matrix = [row for _, row in sorted(zip(row_sums, matrix))]\n    \n    # Step 3: Return the sorted matrix\n    return sorted_matrix", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Extract the sum of each row in the matrix.\",\n      \"Details\": \"Create a function that takes a matrix as input and returns a list of sums, where each sum corresponds to the sum of elements in a row of the matrix.\"\n    },\n    {\n      \"Subproblem\": \"Sort the matrix based on the sums of its rows.\",\n      \"Details\": \"Using the list of row sums obtained from the previous step, sort the matrix rows based on these sums in ascending order.\"\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"Extract the sum of each row in the matrix.\",\n      \"Details\": \"Iterate through each row of the matrix, calculate the sum of its elements, and store these sums in a list.\"\n    },\n    {\n      \"Step\": \"Sort the matrix based on the extracted sums.\",\n      \"Details\": \"Use the list of sums to sort the rows of the matrix in ascending order.\"\n    },\n    {\n      \"Step\": \"Return the sorted matrix.\",\n      \"Details\": \"After sorting the matrix, return the sorted matrix as the output of the function.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array with rows and columns\n    'sum of rows': the total of all elements in each row\n    'ascending order': arranging elements from smallest to largest\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 1 and 2 should be implement simultaneously.\n    \"Extract the sum of each row in the matrix.\"\n    \"Sort the matrix based on the sums of its rows.\"\n    This could", "Round_0": {"code": "def sort_matrix(matrix):\n    # Step 1: Extract the sum of each row in the matrix\n    row_sums = [sum(row) for row in matrix]\n    \n    # Step 2: Sort the matrix based on the extracted sums\n    sorted_matrix = [row for _, row in sorted(zip(row_sums, matrix))]\n    \n    return sorted_matrix", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "test": ["def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 5, 3], [3, 4, 10], [2, 1, 4]]) == [[2, 1, 4], [1, 5, 3], [3, 4, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 5, 4], [3, 9, 3], [4, 2, 2]]) == [[4, 2, 2], [2, 5, 4], [3, 9, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 6], [7, 8, 3], [1, 1, 6]]) == [[1, 1, 6], [1, 1, 6], [7, 8, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 7], [2, 6, 10], [1, 3, 1]]) == [[1, 3, 1], [3, 3, 7], [2, 6, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 3], [4, 3, 8], [6, 2, 3]]) == [[3, 2, 3], [6, 2, 3], [4, 3, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 5], [6, 8, 6], [2, 5, 4]]) == [[2, 5, 4], [4, 5, 5], [6, 8, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [3, 1, 4], [1, 2, 4]]) == [[1, 2, 3], [1, 2, 4], [3, 1, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 2, 5], [4, 6, 9], [5, 2, 5]]) == [[2, 2, 5], [5, 2, 5], [4, 6, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 7], [7, 6, 5], [6, 3, 1]]) == [[6, 3, 1], [3, 4, 7], [7, 6, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 1, 5], [4, 5, 1], [4, 5, 1]]) == [[4, 5, 1], [4, 5, 1], [5, 1, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 1, 8], [7, 2, 10], [1, 3, 5]]) == [[1, 3, 5], [4, 1, 8], [7, 2, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 8], [6, 3, 7], [1, 4, 3]]) == [[1, 4, 3], [1, 3, 8], [6, 3, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 6], [6, 9, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 5, 6], [6, 9, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 2], [5, 5, 3], [5, 1, 1]]) == [[5, 1, 1], [5, 2, 2], [5, 5, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [3, 5, 5], [6, 2, 3]]) == [[1, 2, 3], [6, 2, 3], [3, 5, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 7, 7], [6, 7, 5], [1, 1, 2]]) == [[1, 1, 2], [3, 7, 7], [6, 7, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 5], [2, 5, 1], [5, 6, 5]]) == [[1, 1, 5], [2, 5, 1], [5, 6, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 8], [7, 9, 5], [4, 2, 6]]) == [[4, 2, 6], [6, 3, 8], [7, 9, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 6, 4], [7, 5, 10], [6, 4, 5]]) == [[3, 6, 4], [6, 4, 5], [7, 5, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 7], [3, 5, 3], [3, 3, 3]]) == [[3, 3, 3], [3, 5, 3], [3, 3, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 6], [5, 1, 2], [6, 5, 3]]) == [[5, 1, 2], [6, 5, 3], [6, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 2, 8], [5, 9, 10], [5, 1, 5]]) == [[5, 1, 5], [2, 2, 8], [5, 9, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 3, 5], [3, 8, 2], [1, 5, 2]]) == [[1, 5, 2], [5, 3, 5], [3, 8, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 8], [1, 9, 2], [5, 2, 4]]) == [[5, 2, 4], [1, 9, 2], [2, 6, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 3], [6, 4, 7], [1, 1, 2]]) == [[1, 1, 2], [1, 1, 3], [6, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 8], [1, 4, 5], [2, 4, 2]]) == [[2, 4, 2], [1, 4, 5], [5, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 4], [6, 4, 4], [2, 6, 6]]) == [[3, 2, 4], [6, 4, 4], [2, 6, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 4], [5, 1, 2], [1, 5, 3]]) == [[5, 1, 2], [1, 5, 3], [5, 2, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 3, 1], [5, 9, 5], [5, 4, 1]]) == [[5, 3, 1], [5, 4, 1], [5, 9, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 2, 6], [1, 6, 5], [5, 1, 3]]) == [[5, 1, 3], [1, 6, 5], [6, 2, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 7, 8], [2, 2, 9], [6, 4, 1]]) == [[6, 4, 1], [2, 2, 9], [6, 7, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 1, 1], [4, 4, 2], [3, 5, 4]]) == [[2, 1, 1], [4, 4, 2], [3, 5, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 4], [3, 4, 7], [4, 5, 3]]) == [[4, 5, 3], [6, 4, 4], [3, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 7, 7], [-6, 7, -6], [5, -2, 3]]) == [[-6, 7, -6], [5, -2, 3], [1, 7, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 4, 5], [2, 4, 0], [5, -4, 3]]) == [[5, -4, 3], [2, 4, 0], [1, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 3], [-6, 6, -7], [6, 1, 5]]) == [[-6, 6, -7], [5, 2, 3], [6, 1, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 4], [0, 6, -2], [5, -3, 6]]) == [[0, 6, -2], [1, 3, 4], [5, -3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 4], [3, 3, -2], [3, 2, 6]]) == [[3, 3, -2], [3, 4, 4], [3, 2, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 2, 7], [-5, 2, -1], [2, -6, 2]]) == [[-5, 2, -1], [2, -6, 2], [6, 2, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 1], [3, 7, -8], [3, -4, 1]]) == [[3, -4, 1], [3, 7, -8], [1, 2, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 7], [-6, 8, 0], [4, -5, 2]]) == [[4, -5, 2], [-6, 8, 0], [3, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 3, 5], [0, 6, 0], [1, -6, 2]]) == [[1, -6, 2], [0, 6, 0], [4, 3, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 6, 1], [-7, 5, -6], [5, -1, 2]]) == [[-7, 5, -6], [5, -1, 2], [5, 6, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 8], [1, 2, -3], [6, 1, 2]]) == [[1, 2, -3], [6, 1, 2], [3, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 1], [0, 9, -2], [1, -5, 5]]) == [[1, -5, 5], [3, 3, 1], [0, 9, -2]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 7, 1], [-6, 4, -1], [2, -2, 2]]) == [[-6, 4, -1], [2, -2, 2], [5, 7, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 5, 2], [-6, 7, -1], [2, -5, 4]]) == [[-6, 7, -1], [2, -5, 4], [6, 5, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 7], [-1, 2, -2], [1, -2, 1]]) == [[-1, 2, -2], [1, -2, 1], [2, 6, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 8], [-1, 4, -2], [5, 2, 1]]) == [[-1, 4, -2], [5, 2, 1], [1, 3, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 3], [3, 3, 0], [3, 1, 3]]) == [[3, 3, 0], [3, 1, 3], [6, 3, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 8], [-7, 7, -1], [2, 1, 5]]) == [[-7, 7, -1], [2, 1, 5], [4, 7, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 1, 2], [-3, 8, -9], [5, 3, 6]]) == [[-3, 8, -9], [6, 1, 2], [5, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 3], [-2, 8, -10], [3, 0, 6]]) == [[-2, 8, -10], [3, 0, 6], [3, 4, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 5, 5], [-4, 3, -9], [3, -1, 1]]) == [[-4, 3, -9], [3, -1, 1], [3, 5, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 2, 2], [-2, 1, -8], [5, -5, 1]]) == [[-2, 1, -8], [5, -5, 1], [4, 2, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 4, 7], [-5, 4, -8], [1, 1, 4]]) == [[-5, 4, -8], [1, 1, 4], [5, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 5], [2, 7, -10], [1, 2, 2]]) == [[2, 7, -10], [1, 2, 2], [6, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 7, 6], [2, 1, -4], [5, -6, 4]]) == [[2, 1, -4], [5, -6, 4], [5, 7, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 8], [3, 3, -2], [3, -1, 3]]) == [[3, 3, -2], [3, -1, 3], [5, 5, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 1, 8], [-2, 3, -6], [1, 0, 2]]) == [[-2, 3, -6], [1, 0, 2], [5, 1, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 5], [-4, 9, 0], [2, -4, 2]]) == [[2, -4, 2], [-4, 9, 0], [4, 7, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 5, 6], [2, 1, -2], [1, 1, 3]]) == [[2, 1, -2], [1, 1, 3], [1, 5, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 8], [-3, 9, 0], [4, 3, 3]]) == [[-3, 9, 0], [4, 3, 3], [4, 5, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 4], [1, 6, -5], [5, 0, 2]]) == [[1, 6, -5], [5, 0, 2], [3, 4, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 4, 2], [-6, 7, -3], [4, 3, 5]]) == [[-6, 7, -3], [4, 4, 2], [4, 3, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 7], [0, 5, -1], [1, -1, 4]]) == [[0, 5, -1], [1, -1, 4], [4, 7, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[10, 12, 8], [5, 1, 5], [2, 5, 8]]) == [[5, 1, 5], [2, 5, 8], [10, 12, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 8, 13], [11, 9, 6], [3, 6, 4]]) == [[3, 6, 4], [3, 8, 13], [11, 9, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 8], [2, 5, 6], [6, 3, 5]]) == [[2, 5, 6], [6, 3, 5], [1, 11, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 6, 11], [1, 8, 8], [2, 2, 6]]) == [[2, 2, 6], [1, 8, 8], [1, 6, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 4, 8], [10, 7, 2], [1, 3, 2]]) == [[1, 3, 2], [10, 7, 2], [9, 4, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[7, 4, 4], [9, 2, 8], [1, 4, 2]]) == [[1, 4, 2], [7, 4, 4], [9, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 12], [2, 9, 7], [5, 4, 5]]) == [[5, 4, 5], [2, 9, 7], [4, 5, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 9, 4], [7, 3, 6], [3, 1, 9]]) == [[3, 1, 9], [3, 9, 4], [7, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 11], [4, 9, 5], [4, 3, 7]]) == [[4, 3, 7], [4, 9, 5], [1, 11, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 6], [2, 6, 1], [6, 1, 4]]) == [[2, 6, 1], [6, 1, 4], [6, 4, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 11, 11], [1, 4, 1], [4, 1, 8]]) == [[1, 4, 1], [4, 1, 8], [9, 11, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 4], [5, 7, 2], [5, 5, 6]]) == [[5, 7, 2], [1, 11, 4], [5, 5, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 9, 11], [2, 8, 5], [3, 6, 6]]) == [[2, 8, 5], [3, 6, 6], [9, 9, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 4], [5, 1, 6], [2, 6, 4]]) == [[3, 3, 4], [5, 1, 6], [2, 6, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 9, 13], [9, 9, 3], [6, 4, 4]]) == [[6, 4, 4], [9, 9, 3], [1, 9, 13]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 4, 11], [5, 7, 4], [3, 5, 4]]) == [[3, 5, 4], [5, 7, 4], [9, 4, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 8, 12], [1, 3, 2], [6, 4, 8]]) == [[1, 3, 2], [6, 4, 8], [5, 8, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[10, 13, 6], [3, 6, 7], [6, 4, 4]]) == [[6, 4, 4], [3, 6, 7], [10, 13, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[7, 11, 7], [4, 1, 3], [5, 5, 7]]) == [[4, 1, 3], [5, 5, 7], [7, 11, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 9, 10], [10, 2, 7], [5, 6, 9]]) == [[10, 2, 7], [5, 6, 9], [9, 9, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[8, 12, 11], [1, 5, 7], [4, 3, 5]]) == [[4, 3, 5], [1, 5, 7], [8, 12, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 14], [5, 2, 3], [3, 1, 5]]) == [[3, 1, 5], [5, 2, 3], [2, 6, 14]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 5], [7, 5, 3], [6, 6, 7]]) == [[6, 3, 5], [7, 5, 3], [6, 6, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 13, 4], [4, 4, 2], [4, 1, 9]]) == [[4, 4, 2], [4, 1, 9], [1, 13, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[8, 7, 4], [5, 8, 4], [2, 4, 1]]) == [[2, 4, 1], [5, 8, 4], [8, 7, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 8, 9], [5, 4, 4], [2, 5, 6]]) == [[5, 4, 4], [2, 5, 6], [4, 8, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 10, 14], [9, 7, 7], [5, 6, 7]]) == [[5, 6, 7], [9, 7, 7], [5, 10, 14]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 6, 4], [8, 8, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 6, 4], [8, 8, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 12, 12], [3, 5, 3], [5, 3, 1]]) == [[5, 3, 1], [3, 5, 3], [5, 12, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 10], [10, 4, 8], [5, 6, 8]]) == [[5, 6, 8], [4, 7, 10], [10, 4, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 4, 7], [10, 3, 3], [6, 4, 6]]) == [[2, 4, 7], [10, 3, 3], [6, 4, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 6], [11, 9, 3], [1, 3, 9]]) == [[1, 3, 9], [5, 5, 6], [11, 9, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 8, 10], [7, 7, 7], [4, 3, 3]]) == [[4, 3, 3], [3, 8, 10], [7, 7, 7]]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9216, 0.9216], "pass_results": [true, true, true, true, true, true, true, true, false, false], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 94, 94], "passed": true, "pass": true, "pass_num": 10, "round": 6, "mutate_method": "expand_one2two", "save_node": true, "parent_index": 6}
