{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 805, "prompt": "Write a function that returns the inner list from a list of lists where the sum of its elements is the largest.", "code": "def max_sum_list(lists):\n return max(lists, key=sum)", "test_imports": [], "test_list": ["assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] ", "assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] ", "assert max_sum_list([[2,3,1]])==[2,3,1] ", "assert max_sum_list([[4, 5, 1], [2, 2, 6], [5, 16, 17], [9, 8, 14]]) == [5, 16, 17]", "assert max_sum_list([[3, 3, 4], [9, 6, 1], [6, 15, 15], [2, 4, 11]]) == [6, 15, 15]", "assert max_sum_list([[1, 1, 8], [9, 7, 8], [7, 9, 9], [3, 4, 10]]) == [7, 9, 9]", "assert max_sum_list([[5, 7, 7], [2, 6, 5], [14, 14, 14], [6, 13, 10]]) == [14, 14, 14]", "assert max_sum_list([[1, 1, 6], [4, 1, 6], [15, 12, 16], [3, 10, 14]]) == [15, 12, 16]", "assert max_sum_list([[1, 7, 7], [7, 1, 10], [13, 15, 14], [2, 12, 8]]) == [13, 15, 14]", "assert max_sum_list([[2, 3, 5], [5, 3, 11], [13, 13, 17], [4, 9, 13]]) == [13, 13, 17]", "assert max_sum_list([[3, 3, 5], [9, 4, 6], [15, 6, 15], [8, 3, 9]]) == [15, 6, 15]", "assert max_sum_list([[5, 5, 3], [9, 2, 5], [5, 13, 13], [7, 3, 6]]) == [5, 13, 13]", "assert max_sum_list([[3, 3, 6], [8, 3, 4], [7, 16, 15], [9, 11, 10]]) == [7, 16, 15]", "assert max_sum_list([[3, 6, 2], [8, 5, 10], [12, 13, 10], [6, 10, 4]]) == [12, 13, 10]", "assert max_sum_list([[4, 1, 2], [2, 1, 11], [8, 7, 9], [10, 11, 12]]) == [10, 11, 12]", "assert max_sum_list([[6, 6, 4], [3, 6, 9], [6, 7, 11], [7, 7, 4]]) == [6, 7, 11]", "assert max_sum_list([[5, 7, 6], [5, 7, 4], [10, 6, 10], [10, 4, 8]]) == [10, 6, 10]", "assert max_sum_list([[6, 4, 7], [9, 10, 5], [11, 13, 17], [10, 5, 6]]) == [11, 13, 17]", "assert max_sum_list([[5, 2, 8], [8, 7, 8], [13, 11, 11], [2, 3, 10]]) == [13, 11, 11]", "assert max_sum_list([[5, 5, 2], [8, 10, 11], [5, 9, 9], [7, 12, 11]]) == [7, 12, 11]", "assert max_sum_list([[2, 1, 3], [2, 8, 3], [13, 14, 7], [8, 11, 14]]) == [13, 14, 7]", "assert max_sum_list([[6, 3, 3], [8, 5, 6], [14, 10, 14], [8, 8, 5]]) == [14, 10, 14]", "assert max_sum_list([[3, 2, 8], [2, 4, 2], [13, 13, 16], [7, 7, 7]]) == [13, 13, 16]", "assert max_sum_list([[2, 1, 7], [3, 2, 1], [10, 11, 13], [7, 6, 13]]) == [10, 11, 13]", "assert max_sum_list([[5, 1, 8], [2, 9, 8], [13, 7, 11], [10, 11, 10]]) == [13, 7, 11]", "assert max_sum_list([[1, 7, 8], [3, 2, 8], [6, 16, 12], [5, 6, 8]]) == [6, 16, 12]", "assert max_sum_list([[5, 2, 3], [7, 8, 6], [14, 7, 8], [5, 8, 8]]) == [14, 7, 8]", "assert max_sum_list([[2, 6, 6], [6, 6, 3], [8, 11, 16], [4, 8, 5]]) == [8, 11, 16]", "assert max_sum_list([[2, 3, 4], [1, 6, 9], [9, 6, 17], [3, 6, 10]]) == [9, 6, 17]", "assert max_sum_list([[3, 5, 1], [8, 1, 6], [10, 7, 14], [10, 6, 4]]) == [10, 7, 14]", "assert max_sum_list([[6, 2, 6], [6, 1, 6], [7, 9, 16], [10, 4, 14]]) == [7, 9, 16]", "assert max_sum_list([[3, 2, 7], [2, 9, 9], [13, 8, 12], [2, 13, 4]]) == [13, 8, 12]", "assert max_sum_list([[6, 4, 2], [2, 3, 11], [11, 7, 14], [8, 10, 9]]) == [11, 7, 14]", "assert max_sum_list([[5, 3, 1], [5, 5, 2], [13, 15, 14], [10, 10, 13]]) == [13, 15, 14]", "assert max_sum_list([[5, 6, 2], [4, 9, 1], [8, 12, 9], [7, 6, 4]]) == [8, 12, 9]", "assert max_sum_list([[5, 6, 7], [2, 4, 4], [12, 10, 8], [3, 8, 6]]) == [12, 10, 8]", "assert max_sum_list([[5, 3, 6], [4, 2, 9], [13, 15, 14]]) == [13, 15, 14]", "assert max_sum_list([[5, 1, 6], [8, 9, 1], [7, 9, 11]]) == [7, 9, 11]", "assert max_sum_list([[7, 3, 3], [6, 3, 5], [16, 9, 7]]) == [16, 9, 7]", "assert max_sum_list([[4, 2, 6], [9, 4, 8], [10, 11, 6]]) == [10, 11, 6]", "assert max_sum_list([[4, 5, 4], [5, 8, 2], [9, 7, 12]]) == [9, 7, 12]", "assert max_sum_list([[5, 5, 1], [10, 10, 9], [14, 14, 12]]) == [14, 14, 12]", "assert max_sum_list([[2, 2, 1], [8, 10, 7], [16, 11, 11]]) == [16, 11, 11]", "assert max_sum_list([[7, 5, 3], [9, 8, 2], [11, 13, 13]]) == [11, 13, 13]", "assert max_sum_list([[5, 4, 1], [11, 4, 6], [13, 11, 13]]) == [13, 11, 13]", "assert max_sum_list([[5, 4, 3], [10, 2, 4], [9, 8, 10]]) == [9, 8, 10]", "assert max_sum_list([[4, 6, 5], [1, 7, 8], [7, 13, 7]]) == [7, 13, 7]", "assert max_sum_list([[6, 2, 6], [8, 2, 1], [14, 8, 15]]) == [14, 8, 15]", "assert max_sum_list([[4, 6, 5], [11, 5, 3], [13, 13, 10]]) == [13, 13, 10]", "assert max_sum_list([[1, 6, 2], [7, 10, 1], [12, 11, 6]]) == [12, 11, 6]", "assert max_sum_list([[7, 4, 6], [1, 9, 2], [7, 16, 15]]) == [7, 16, 15]", "assert max_sum_list([[8, 3, 6], [6, 2, 4], [8, 10, 15]]) == [8, 10, 15]", "assert max_sum_list([[4, 2, 4], [1, 2, 2], [17, 8, 9]]) == [17, 8, 9]", "assert max_sum_list([[6, 7, 1], [4, 4, 9], [10, 6, 15]]) == [10, 6, 15]", "assert max_sum_list([[5, 1, 6], [2, 8, 1], [16, 6, 13]]) == [16, 6, 13]", "assert max_sum_list([[4, 3, 6], [3, 3, 1], [17, 10, 10]]) == [17, 10, 10]", "assert max_sum_list([[8, 6, 3], [2, 1, 1], [9, 8, 13]]) == [9, 8, 13]", "assert max_sum_list([[2, 4, 5], [7, 4, 3], [8, 8, 13]]) == [8, 8, 13]", "assert max_sum_list([[4, 6, 4], [5, 4, 7], [8, 16, 12]]) == [8, 16, 12]", "assert max_sum_list([[7, 7, 3], [5, 1, 4], [15, 11, 8]]) == [15, 11, 8]", "assert max_sum_list([[4, 2, 2], [10, 7, 7], [7, 16, 10]]) == [7, 16, 10]", "assert max_sum_list([[1, 7, 5], [2, 10, 1], [15, 9, 10]]) == [15, 9, 10]", "assert max_sum_list([[6, 6, 1], [10, 1, 7], [11, 15, 5]]) == [11, 15, 5]", "assert max_sum_list([[4, 3, 5], [2, 8, 2], [12, 10, 12]]) == [12, 10, 12]", "assert max_sum_list([[4, 1, 2], [6, 10, 7], [11, 16, 13]]) == [11, 16, 13]", "assert max_sum_list([[4, 3, 1], [9, 10, 4], [11, 13, 14]]) == [11, 13, 14]", "assert max_sum_list([[1, 4, 3], [7, 6, 4], [16, 8, 7]]) == [16, 8, 7]", "assert max_sum_list([[2, 7, 3], [7, 6, 4], [11, 16, 15]]) == [11, 16, 15]", "assert max_sum_list([[6, 2, 5], [11, 5, 2], [8, 11, 9]]) == [8, 11, 9]", "assert max_sum_list([[2, 8, 6]]) == [2, 8, 6]", "assert max_sum_list([[7, 7, 2]]) == [7, 7, 2]", "assert max_sum_list([[6, 5, 2]]) == [6, 5, 2]", "assert max_sum_list([[3, 1, 4]]) == [3, 1, 4]", "assert max_sum_list([[6, 4, 2]]) == [6, 4, 2]", "assert max_sum_list([[1, 3, 1]]) == [1, 3, 1]", "assert max_sum_list([[2, 7, 2]]) == [2, 7, 2]", "assert max_sum_list([[7, 1, 6]]) == [7, 1, 6]", "assert max_sum_list([[2, 3, 5]]) == [2, 3, 5]", "assert max_sum_list([[1, 2, 1]]) == [1, 2, 1]", "assert max_sum_list([[3, 7, 4]]) == [3, 7, 4]", "assert max_sum_list([[2, 3, 2]]) == [2, 3, 2]", "assert max_sum_list([[5, 5, 5]]) == [5, 5, 5]", "assert max_sum_list([[1, 6, 2]]) == [1, 6, 2]", "assert max_sum_list([[4, 5, 6]]) == [4, 5, 6]", "assert max_sum_list([[3, 4, 1]]) == [3, 4, 1]", "assert max_sum_list([[5, 1, 6]]) == [5, 1, 6]", "assert max_sum_list([[1, 4, 3]]) == [1, 4, 3]", "assert max_sum_list([[6, 3, 2]]) == [6, 3, 2]", "assert max_sum_list([[4, 2, 1]]) == [4, 2, 1]", "assert max_sum_list([[4, 7, 6]]) == [4, 7, 6]", "assert max_sum_list([[4, 4, 4]]) == [4, 4, 4]", "assert max_sum_list([[3, 7, 1]]) == [3, 7, 1]", "assert max_sum_list([[4, 5, 4]]) == [4, 5, 4]", "assert max_sum_list([[2, 6, 4]]) == [2, 6, 4]", "assert max_sum_list([[2, 3, 6]]) == [2, 3, 6]", "assert max_sum_list([[1, 4, 6]]) == [1, 4, 6]", "assert max_sum_list([[6, 5, 6]]) == [6, 5, 6]", "assert max_sum_list([[4, 8, 3]]) == [4, 8, 3]", "assert max_sum_list([[6, 4, 1]]) == [6, 4, 1]", "assert max_sum_list([[5, 1, 6]]) == [5, 1, 6]", "assert max_sum_list([[5, 5, 1]]) == [5, 5, 1]", "assert max_sum_list([[1, 1, 1]]) == [1, 1, 1]"], "entry_point": "max_sum_list", "repair_prompt": ["Write a function that returns the inner list from a list of lists where the sum of its elements is the largest.\nexample:\nmax_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \n", " Write a function that finds and returns the list within a list of lists whose elements sum to the greatest total.\nexample:\nmax_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \n", " Write a function to find the list within a list of lists whose elements sum to the greatest value.\nexample:\nmax_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \n"], "completion": "from typing import *\ndef calculate_sum(lst):\n    return sum(lst)\n\ndef find_max_sum_list(list_of_lists):\n    max_sum = float('-inf')\n    max_sum_list = []\n    for lst in list_of_lists:\n        current_sum = calculate_sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_list = lst\n    return max_sum_list\n\ndef max_sum_list(list_of_lists):\n    return find_max_sum_list(list_of_lists)", "completions": ["from typing import *\ndef max_sum_list(list_of_lists):\n    max_sum = float('-inf')\n    max_list = []\n    \n    for inner_list in list_of_lists:\n        current_sum = sum(inner_list)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = inner_list\n    \n    return max_list", "from typing import *\ndef max_sum_list(list_of_lists):\n    max_sum = float('-inf')\n    max_sum_list = []\n    \n    for sublist in list_of_lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_list = sublist\n    \n    return max_sum_list", "from typing import *\ndef max_sum_list(list_of_lists):\n    # Initialize variables to keep track of the maximum sum and the corresponding list\n    max_sum = float('-inf')\n    max_sum_list = []\n    \n    # Iterate through each list within the list of lists\n    for lst in list_of_lists:\n        # Calculate the sum of the current list\n        current_sum = sum(lst)\n        \n        # Compare the sum of the current list with the maximum sum found so far\n        if current_sum > max_sum:\n            # Update the maximum sum and the list associated with it\n            max_sum = current_sum\n            max_sum_list = lst\n    \n    # Return the list associated with the maximum sum\n    return max_sum_list", "from typing import *\ndef max_sum_list(list_of_lists):\n    max_sum = float('-inf')\n    max_sum_list = []\n    \n    for lst in list_of_lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_list = lst\n    \n    return max_sum_list", "from typing import *\ndef max_sum_list(list_of_lists):\n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in list_of_lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n            \n    return max_list", "from typing import *\ndef max_sum_list(list_of_lists):\n    # Initialize variables to keep track of the maximum sum and the corresponding list\n    max_sum = float('-inf')\n    max_sum_list = []\n    \n    # Iterate through each list within the list of lists\n    for lst in list_of_lists:\n        # Calculate the sum of the current list\n        current_sum = sum(lst)\n        \n        # Compare the sum of the current list with the maximum sum found so far\n        if current_sum > max_sum:\n            # Update the maximum sum and the list associated with it\n            max_sum = current_sum\n            max_sum_list = lst\n    \n    # Return the list associated with the maximum sum\n    return max_sum_list", "from typing import *\ndef max_sum_list(list_of_lists):\n    # Step 1: Calculate the sums of all sublists\n    sums = [sum(sublist) for sublist in list_of_lists]\n    \n    # Step 2: Find the sublist with the maximum sum\n    max_sum = max(sums)\n    max_index = sums.index(max_sum)\n    \n    # Step 3: Return the sublist with the maximum sum\n    return list_of_lists[max_index]", "from typing import *\ndef max_sum_list(list_of_lists):\n    # Initialize variables to keep track of the maximum sum and the corresponding list\n    max_sum = float('-inf')\n    max_sum_list = []\n    \n    # Iterate through each list within the list of lists\n    for current_list in list_of_lists:\n        # Calculate the sum of the current list\n        current_sum = sum(current_list)\n        \n        # Compare the sum of the current list with the maximum sum found so far\n        if current_sum > max_sum:\n            # Update the maximum sum and the list associated with it\n            max_sum = current_sum\n            max_sum_list = current_list\n    \n    # Return the list associated with the maximum sum\n    return max_sum_list", "from typing import *\ndef max_sum_list(list_of_lists):\n    # Initialize variables to keep track of the maximum sum and the corresponding list\n    max_sum = float('-inf')\n    max_sum_list = []\n    \n    # Iterate through each list within the list of lists\n    for current_list in list_of_lists:\n        # Calculate the sum of the current list\n        current_sum = sum(current_list)\n        \n        # Compare the sum of the current list with the maximum sum found so far\n        if current_sum > max_sum:\n            # Update the maximum sum and the list corresponding to the maximum sum\n            max_sum = current_sum\n            max_sum_list = current_list\n    \n    # Return the list corresponding to the maximum sum\n    return max_sum_list", "from typing import *\ndef calculate_sum(lst):\n    return sum(lst)\n\ndef find_max_sum_list(list_of_lists):\n    max_sum = float('-inf')\n    max_sum_list = []\n    for lst in list_of_lists:\n        current_sum = calculate_sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_list = lst\n    return max_sum_list\n\ndef max_sum_list(list_of_lists):\n    return find_max_sum_list(list_of_lists)"], "session_history": {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Define a function that calculates the sum of elements in a given list.\",\n      \"Description\": \"Create a function that takes a list as input and returns the sum of its elements.\"\n    },\n    {\n      \"Subproblem\": \"Define a function that finds the list with the maximum sum of its elements.\",\n      \"Description\": \"Create a function that takes a list of lists as input, calculates the sum of each list, and returns the list with the maximum sum.\"\n    },\n    {\n      \"Subproblem\": \"Implement the main function that uses the above two functions to solve the problem.\",\n      \"Description\": \"Create a main function that calls the sum calculation function for each list in the input list of lists, uses the sum finding function to find the list with the maximum sum, and returns it.\"\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"Define a function to calculate the sum of elements in a list.\",\n      \"Details\": \"This function will take a list as input and return the sum of its elements.\"\n    },\n    {\n      \"Step\": \"Define a function to find the list with the maximum sum of its elements.\",\n      \"Details\": \"This function will take a list of lists as input, calculate the sum of each list using the sum calculation function, and return the list with the maximum sum.\"\n    },\n    {\n      \"Step\": \"Implement the main function to solve the problem.\",\n      \"Details\": \"This function will call the sum calculation function for each list in the input list of lists, use the sum finding function to find the list with the maximum sum, and return it.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum': the total value of all elements in a list\n    'maximum': the largest value among a set of values\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 1-3 should be implement simultaneously.\n    \"Define a function to calculate the sum of elements in a list.\"\n    \"Define a function to find the list with the maximum sum of its elements.\"\n    \"Implement the main function to solve the problem.\"\n", "Round_0": {"code": "def calculate_sum(lst):\n    return sum(lst)\n\ndef find_max_sum_list(list_of_lists):\n    max_sum = float('-inf')\n    max_sum_list = []\n    for lst in list_of_lists:\n        current_sum = calculate_sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_list = lst\n    return max_sum_list\n\ndef max_sum_list(list_of_lists):\n    return find_max_sum_list(list_of_lists)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Define a function that takes a list of lists as input.\",\n      \"Calculate the sum of each inner list.\",\n      \"Identify the inner list with the maximum sum.\",\n      \"Return the inner list with the maximum sum.\"\n    ],\n    \"high_level_plan\": [\n      \"Define the function max_sum_list that takes a list of lists as an argument.\",\n      \"Initialize a variable to keep track of the maximum sum found so far.\",\n      \"Initialize a variable to store the inner list with the maximum sum.\",\n      \"Iterate through each inner list in the list of lists.\",\n      \"Calculate the sum of the current inner list.\",\n      \"Compare the sum of the current inner list with the maximum sum found so far.\",\n      \"If the current inner list sum is greater than the maximum sum, update the maximum sum and store the current inner list.\",\n      \"After iterating through all inner lists, return the inner list with the maximum sum.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum': means the total of all elements in a list\n    'largest': means the biggest sum of elements in a list\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 5-8 should be implement simultaneously.\n    \"Calculate the sum of the current inner list.\",\n    \"Compare the sum of the current inner list with the maximum sum found so far.\",\n    \"If the current inner list sum is greater than the maximum sum", "Round_0": {"code": "def max_sum_list(list_of_lists):\n    max_sum = float('-inf')\n    max_list = []\n    \n    for inner_list in list_of_lists:\n        current_sum = sum(inner_list)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = inner_list\n    \n    return max_list", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Extract the sum of elements for each sublist in the list of lists.\"\n    },\n    {\n      \"Subproblem\": \"Compare the sums of all sublists to find the one with the largest sum.\"\n    },\n    {\n      \"Subproblem\": \"Return the sublist with the largest sum.\"\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"Initialize a variable to keep track of the maximum sum found so far.\"\n    },\n    {\n      \"Step\": \"Initialize a variable to store the sublist with the maximum sum.\"\n    },\n    {\n      \"Step\": \"Iterate through each sublist in the list of lists.\"\n    },\n    {\n      \"Step\": \"Calculate the sum of the current sublist.\"\n    },\n    {\n      \"Step\": \"Compare the sum of the current sublist with the maximum sum found so far.\"\n    },\n    {\n      \"Step\": \"If the current sum is greater than the maximum sum, update the maximum sum and the corresponding sublist.\"\n    },\n    {\n      \"Step\": \"After iterating through all sublists, return the sublist with the maximum sum.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum': means the total of all elements in a list\n    'largest': means the biggest sum among all sublists\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'largest': means the sum of elements in the sublist should be the biggest among all sublists\n\n# [code logic]\n    The steps 4-6 should be implement simultaneously.\n    \"Calculate the sum of the current sublist.\"\n    \"Compare the sum of the current sublist with the maximum sum found so far", "Round_0": {"code": "def max_sum_list(list_of_lists):\n    max_sum = float('-inf')\n    max_sum_list = []\n    \n    for sublist in list_of_lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_list = sublist\n    \n    return max_sum_list", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Extract the sums of all lists within the list of lists.\"\n    },\n    {\n      \"Subproblem\": \"Compare the sums to find the maximum sum.\"\n    },\n    {\n      \"Subproblem\": \"Identify the list within the list of lists that corresponds to the maximum sum.\"\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"Initialize a variable to keep track of the maximum sum found so far.\"\n    },\n    {\n      \"Step\": \"Initialize a variable to store the list corresponding to the maximum sum.\"\n    },\n    {\n      \"Step\": \"Iterate through each list within the list of lists.\"\n    },\n    {\n      \"Step\": \"Calculate the sum of the current list.\"\n    },\n    {\n      \"Step\": \"Compare the sum of the current list with the maximum sum found so far.\"\n    },\n    {\n      \"Step\": \"If the current sum is greater than the maximum sum, update the maximum sum and the list associated with it.\"\n    },\n    {\n      \"Step\": \"After iterating through all lists, return the list associated with the maximum sum.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum': the total value obtained by adding numbers together\n    'greatest value': the highest sum of numbers in a list\n\n# [phrase showing quantity relationship]\n    'more than': indicates comparison between sums of lists\n\n# [degree adverb] \n    'greatest': refers to the highest sum among all lists\n\n# [code logic]\n    The steps 4-7 should be implemented simultaneously.\n    \"Calculate the sum of the current list\" and \"Compare the sum of the current list with the maximum sum found so far\" can be done within a single", "Round_0": {"code": "def max_sum_list(list_of_lists):\n    # Initialize variables to keep track of the maximum sum and the corresponding list\n    max_sum = float('-inf')\n    max_sum_list = []\n    \n    # Iterate through each list within the list of lists\n    for lst in list_of_lists:\n        # Calculate the sum of the current list\n        current_sum = sum(lst)\n        \n        # Compare the sum of the current list with the maximum sum found so far\n        if current_sum > max_sum:\n            # Update the maximum sum and the list associated with it\n            max_sum = current_sum\n            max_sum_list = lst\n    \n    # Return the list associated with the maximum sum\n    return max_sum_list", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Extract the sums of all lists within the list of lists.\"\n    },\n    {\n      \"Subproblem\": \"Compare the sums to find the maximum sum.\"\n    },\n    {\n      \"Subproblem\": \"Identify the list that corresponds to the maximum sum.\"\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"Initialize a variable to keep track of the maximum sum found so far.\"\n    },\n    {\n      \"Step\": \"Initialize a variable to store the list corresponding to the maximum sum.\"\n    },\n    {\n      \"Step\": \"Iterate through each list within the list of lists.\"\n    },\n    {\n      \"Step\": \"Calculate the sum of the current list.\"\n    },\n    {\n      \"Step\": \"Compare the sum of the current list with the maximum sum found so far.\"\n    },\n    {\n      \"Step\": \"If the current sum is greater than the maximum sum, update the maximum sum and the list corresponding to the maximum sum.\"\n    },\n    {\n      \"Step\": \"After iterating through all lists, return the list corresponding to the maximum sum.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum': the total value obtained by adding numbers together\n    'greatest value': the largest sum of numbers in a list\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the sum of the numbers in the list should be the largest among all lists\n\n# [code logic]\n    The steps 4-6 should be implement simultaneously.\n    \"Calculate the sum of the current list\",\n    \"Compare the sum of the current list with the maximum sum found so far\",\n   ", "Round_0": {"code": "def max_sum_list(list_of_lists):\n    max_sum = float('-inf')\n    max_sum_list = []\n    \n    for lst in list_of_lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_list = lst\n    \n    return max_sum_list", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Define a function that takes a list of lists as input.\",\n        \"steps\": []\n      },\n      {\n        \"description\": \"Iterate through each list in the input list to calculate the sum of its elements.\",\n        \"steps\": []\n      },\n      {\n        \"description\": \"Identify the list with the maximum sum of its elements.\",\n        \"steps\": []\n      },\n      {\n        \"description\": \"Return the identified list.\",\n        \"steps\": []\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"description\": \"Define the function max_sum_list that takes a list of lists as an argument.\",\n        \"steps\": []\n      },\n      {\n        \"description\": \"Initialize a variable to keep track of the maximum sum found so far.\",\n        \"steps\": []\n      },\n      {\n        \"description\": \"Initialize a variable to store the list with the maximum sum.\",\n        \"steps\": []\n      },\n      {\n        \"description\": \"Iterate through each list in the input list.\",\n        \"steps\": [\n          {\n            \"description\": \"Calculate the sum of the current list's elements.\",\n            \"steps\": []\n          },\n          {\n            \"description\": \"Compare the sum of the current list with the maximum sum found so far.\",\n            \"steps\": []\n          },\n          {\n            \"description\": \"If the current list's sum is greater than the maximum sum, update the maximum sum and the list associated with it.\",\n            \"steps\": []\n          }\n        ]\n      },\n      {\n        \"description\": \"Return the list associated with the maximum sum.\",\n        \"steps\": []\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of elements': means the total value obtained by adding all the numbers in a list.\n    'largest sum': means the greatest total value among all the sums of lists in a list of lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 2-4 should be implement simultaneously.\n    \"Iterate through each list in the input list to calculate the sum of its elements.\"\n    \"Identify the list with the maximum sum", "Round_0": {"code": "def max_sum_list(list_of_lists):\n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in list_of_lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n            \n    return max_list", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Extract the sums of all lists within the list of lists.\"\n    },\n    {\n      \"Subproblem\": \"Compare the sums to find the maximum sum.\"\n    },\n    {\n      \"Subproblem\": \"Identify the list within the list of lists that corresponds to the maximum sum.\"\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"Initialize a variable to keep track of the maximum sum found so far.\"\n    },\n    {\n      \"Step\": \"Initialize a variable to store the list associated with the maximum sum.\"\n    },\n    {\n      \"Step\": \"Iterate through each list within the list of lists.\"\n    },\n    {\n      \"Step\": \"Calculate the sum of the current list.\"\n    },\n    {\n      \"Step\": \"Compare the sum of the current list with the maximum sum found so far.\"\n    },\n    {\n      \"Step\": \"If the current sum is greater than the maximum sum, update the maximum sum and the list associated with it.\"\n    },\n    {\n      \"Step\": \"After iterating through all lists, return the list associated with the maximum sum.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum': the total value obtained by adding numbers together\n    'greatest value': the largest sum of numbers in a list\n\n# [phrase showing quantity relationship]\n    'more than': indicates comparison between sums of lists\n\n# [degree adverb] \n    'greatest': refers to the largest sum among all sums\n\n# [code logic]\n    The steps 4-6 should be considered simultaneously.\n    \"Calculate the sum of the current list\",\n    \"Compare the sum of the current list with the maximum sum found so far\",\n    \"If the", "Round_0": {"code": "def max_sum_list(list_of_lists):\n    # Initialize variables to keep track of the maximum sum and the corresponding list\n    max_sum = float('-inf')\n    max_sum_list = []\n    \n    # Iterate through each list within the list of lists\n    for lst in list_of_lists:\n        # Calculate the sum of the current list\n        current_sum = sum(lst)\n        \n        # Compare the sum of the current list with the maximum sum found so far\n        if current_sum > max_sum:\n            # Update the maximum sum and the list associated with it\n            max_sum = current_sum\n            max_sum_list = lst\n    \n    # Return the list associated with the maximum sum\n    return max_sum_list", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Extract the sum of each sublist.\",\n      \"Description\": \"Create a function that takes a list of lists and returns a list containing the sum of each sublist.\"\n    },\n    {\n      \"Subproblem\": \"Identify the sublist with the maximum sum.\",\n      \"Description\": \"From the list of sums obtained in the previous step, determine which sum is the largest and identify the corresponding sublist.\"\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"Calculate the sums of all sublists.\",\n      \"Details\": \"Iterate through each sublist, calculate the sum, and store these sums in a new list.\"\n    },\n    {\n      \"Step\": \"Find the sublist with the maximum sum.\",\n      \"Details\": \"Compare the sums in the list of sums to find the maximum value and note the index of this maximum value. Use this index to retrieve the corresponding sublist.\"\n    },\n    {\n      \"Step\": \"Return the sublist with the maximum sum.\",\n      \"Details\": \"Return the sublist identified in the previous step.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum': means the total of all elements in a list\n    'largest': means the biggest total among all sums\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'largest': means the sum of elements in the sublist is the biggest among all sublists\n\n# [code logic]\n    The steps 1-3 should be implement simultaneously.\n    \"Calculate the sums of all sublists.\": Iterate through each sublist, calculate the sum, and store these sums in a new list.", "Round_0": {"code": "def max_sum_list(list_of_lists):\n    # Step 1: Calculate the sums of all sublists\n    sums = [sum(sublist) for sublist in list_of_lists]\n    \n    # Step 2: Find the sublist with the maximum sum\n    max_sum = max(sums)\n    max_index = sums.index(max_sum)\n    \n    # Step 3: Return the sublist with the maximum sum\n    return list_of_lists[max_index]", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Extract the sums of all lists within the list of lists.\"\n    },\n    {\n      \"Subproblem\": \"Compare the sums to find the maximum sum.\"\n    },\n    {\n      \"Subproblem\": \"Return the list that corresponds to the maximum sum.\"\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"Initialize a variable to keep track of the maximum sum found so far.\"\n    },\n    {\n      \"Step\": \"Initialize a variable to store the list corresponding to the maximum sum.\"\n    },\n    {\n      \"Step\": \"Iterate through each list within the list of lists.\"\n    },\n    {\n      \"Step\": \"Calculate the sum of the current list.\"\n    },\n    {\n      \"Step\": \"Compare the sum of the current list with the maximum sum found so far.\"\n    },\n    {\n      \"Step\": \"If the current sum is greater than the maximum sum, update the maximum sum and the list associated with it.\"\n    },\n    {\n      \"Step\": \"After iterating through all lists, return the list associated with the maximum sum.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum': the total value of all elements in a list\n    'greatest total': the largest sum of elements in a list\n\n# [phrase showing quantity relationship]\n    'more than': indicates comparison between sums of lists\n\n# [degree adverb] \n    'greatest': indicates the need to find the list with the highest sum\n\n# [code logic]\n    The steps 4-6 should be implemented simultaneously.\n    \"Calculate the sum of the current list\"\n    \"Compare the sum of the current list with the maximum sum found so far\"\n", "Round_0": {"code": "def max_sum_list(list_of_lists):\n    # Initialize variables to keep track of the maximum sum and the corresponding list\n    max_sum = float('-inf')\n    max_sum_list = []\n    \n    # Iterate through each list within the list of lists\n    for current_list in list_of_lists:\n        # Calculate the sum of the current list\n        current_sum = sum(current_list)\n        \n        # Compare the sum of the current list with the maximum sum found so far\n        if current_sum > max_sum:\n            # Update the maximum sum and the list associated with it\n            max_sum = current_sum\n            max_sum_list = current_list\n    \n    # Return the list associated with the maximum sum\n    return max_sum_list", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Extract the sums of all lists within the list of lists.\"\n    },\n    {\n      \"Subproblem\": \"Compare the sums to find the maximum sum.\"\n    },\n    {\n      \"Subproblem\": \"Return the list that corresponds to the maximum sum.\"\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"Initialize a variable to keep track of the maximum sum found so far.\"\n    },\n    {\n      \"Step\": \"Initialize a variable to store the list corresponding to the maximum sum.\"\n    },\n    {\n      \"Step\": \"Iterate through each list within the list of lists.\"\n    },\n    {\n      \"Step\": \"Calculate the sum of the current list.\"\n    },\n    {\n      \"Step\": \"Compare the sum of the current list with the maximum sum found so far.\"\n    },\n    {\n      \"Step\": \"If the current sum is greater than the maximum sum, update the maximum sum and the list corresponding to the maximum sum.\"\n    },\n    {\n      \"Step\": \"After iterating through all lists, return the list corresponding to the maximum sum.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum': the total of all elements in a list\n    'greatest total': the largest sum of elements in a list\n\n# [phrase showing quantity relationship]\n    'more than': indicates comparison between sums of lists\n\n# [degree adverb] \n    'greatest': indicates the need to find the list with the highest sum\n\n# [code logic]\n    The steps 4-6 should be implemented simultaneously.\n    \"Calculate the sum of the current list\"\n    \"Compare the sum of the current list with the maximum sum found so far\"\n   ", "Round_0": {"code": "def max_sum_list(list_of_lists):\n    # Initialize variables to keep track of the maximum sum and the corresponding list\n    max_sum = float('-inf')\n    max_sum_list = []\n    \n    # Iterate through each list within the list of lists\n    for current_list in list_of_lists:\n        # Calculate the sum of the current list\n        current_sum = sum(current_list)\n        \n        # Compare the sum of the current list with the maximum sum found so far\n        if current_sum > max_sum:\n            # Update the maximum sum and the list corresponding to the maximum sum\n            max_sum = current_sum\n            max_sum_list = current_list\n    \n    # Return the list corresponding to the maximum sum\n    return max_sum_list", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Define a function that calculates the sum of elements in a given list.\",\n      \"Description\": \"Create a function that takes a list as input and returns the sum of its elements.\"\n    },\n    {\n      \"Subproblem\": \"Define a function that finds the list with the maximum sum of its elements.\",\n      \"Description\": \"Create a function that takes a list of lists as input, calculates the sum of each list, and returns the list with the maximum sum.\"\n    },\n    {\n      \"Subproblem\": \"Implement the main function that uses the above two functions to solve the problem.\",\n      \"Description\": \"Create a main function that calls the sum calculation function for each list in the input list of lists, uses the sum finding function to find the list with the maximum sum, and returns it.\"\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"Define a function to calculate the sum of elements in a list.\",\n      \"Details\": \"This function will take a list as input and return the sum of its elements.\"\n    },\n    {\n      \"Step\": \"Define a function to find the list with the maximum sum of its elements.\",\n      \"Details\": \"This function will take a list of lists as input, calculate the sum of each list using the sum calculation function, and return the list with the maximum sum.\"\n    },\n    {\n      \"Step\": \"Implement the main function to solve the problem.\",\n      \"Details\": \"This function will call the sum calculation function for each list in the input list of lists, use the sum finding function to find the list with the maximum sum, and return it.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum': the total value of all elements in a list\n    'maximum': the largest value among a set of values\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 1-3 should be implement simultaneously.\n    \"Define a function to calculate the sum of elements in a list.\"\n    \"Define a function to find the list with the maximum sum of its elements.\"\n    \"Implement the main function to solve the problem.\"\n", "Round_0": {"code": "def calculate_sum(lst):\n    return sum(lst)\n\ndef find_max_sum_list(list_of_lists):\n    max_sum = float('-inf')\n    max_sum_list = []\n    for lst in list_of_lists:\n        current_sum = calculate_sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_list = lst\n    return max_sum_list\n\ndef max_sum_list(list_of_lists):\n    return find_max_sum_list(list_of_lists)", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "test": ["def check(max_sum_list):\n\tassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] ", "def check(max_sum_list):\n\tassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] ", "def check(max_sum_list):\n\tassert max_sum_list([[2,3,1]])==[2,3,1] ", "def check(max_sum_list):\n\tassert max_sum_list([[4, 5, 1], [2, 2, 6], [5, 16, 17], [9, 8, 14]]) == [5, 16, 17]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 3, 4], [9, 6, 1], [6, 15, 15], [2, 4, 11]]) == [6, 15, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 1, 8], [9, 7, 8], [7, 9, 9], [3, 4, 10]]) == [7, 9, 9]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 7, 7], [2, 6, 5], [14, 14, 14], [6, 13, 10]]) == [14, 14, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 1, 6], [4, 1, 6], [15, 12, 16], [3, 10, 14]]) == [15, 12, 16]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 7, 7], [7, 1, 10], [13, 15, 14], [2, 12, 8]]) == [13, 15, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 5], [5, 3, 11], [13, 13, 17], [4, 9, 13]]) == [13, 13, 17]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 3, 5], [9, 4, 6], [15, 6, 15], [8, 3, 9]]) == [15, 6, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 3], [9, 2, 5], [5, 13, 13], [7, 3, 6]]) == [5, 13, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 3, 6], [8, 3, 4], [7, 16, 15], [9, 11, 10]]) == [7, 16, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 6, 2], [8, 5, 10], [12, 13, 10], [6, 10, 4]]) == [12, 13, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 1, 2], [2, 1, 11], [8, 7, 9], [10, 11, 12]]) == [10, 11, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 6, 4], [3, 6, 9], [6, 7, 11], [7, 7, 4]]) == [6, 7, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 7, 6], [5, 7, 4], [10, 6, 10], [10, 4, 8]]) == [10, 6, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 4, 7], [9, 10, 5], [11, 13, 17], [10, 5, 6]]) == [11, 13, 17]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 2, 8], [8, 7, 8], [13, 11, 11], [2, 3, 10]]) == [13, 11, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 2], [8, 10, 11], [5, 9, 9], [7, 12, 11]]) == [7, 12, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 1, 3], [2, 8, 3], [13, 14, 7], [8, 11, 14]]) == [13, 14, 7]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 3, 3], [8, 5, 6], [14, 10, 14], [8, 8, 5]]) == [14, 10, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 2, 8], [2, 4, 2], [13, 13, 16], [7, 7, 7]]) == [13, 13, 16]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 1, 7], [3, 2, 1], [10, 11, 13], [7, 6, 13]]) == [10, 11, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 8], [2, 9, 8], [13, 7, 11], [10, 11, 10]]) == [13, 7, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 7, 8], [3, 2, 8], [6, 16, 12], [5, 6, 8]]) == [6, 16, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 2, 3], [7, 8, 6], [14, 7, 8], [5, 8, 8]]) == [14, 7, 8]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 6, 6], [6, 6, 3], [8, 11, 16], [4, 8, 5]]) == [8, 11, 16]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 4], [1, 6, 9], [9, 6, 17], [3, 6, 10]]) == [9, 6, 17]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 5, 1], [8, 1, 6], [10, 7, 14], [10, 6, 4]]) == [10, 7, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 2, 6], [6, 1, 6], [7, 9, 16], [10, 4, 14]]) == [7, 9, 16]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 2, 7], [2, 9, 9], [13, 8, 12], [2, 13, 4]]) == [13, 8, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 4, 2], [2, 3, 11], [11, 7, 14], [8, 10, 9]]) == [11, 7, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 3, 1], [5, 5, 2], [13, 15, 14], [10, 10, 13]]) == [13, 15, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 6, 2], [4, 9, 1], [8, 12, 9], [7, 6, 4]]) == [8, 12, 9]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 6, 7], [2, 4, 4], [12, 10, 8], [3, 8, 6]]) == [12, 10, 8]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 3, 6], [4, 2, 9], [13, 15, 14]]) == [13, 15, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 6], [8, 9, 1], [7, 9, 11]]) == [7, 9, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 3, 3], [6, 3, 5], [16, 9, 7]]) == [16, 9, 7]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 2, 6], [9, 4, 8], [10, 11, 6]]) == [10, 11, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 5, 4], [5, 8, 2], [9, 7, 12]]) == [9, 7, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 1], [10, 10, 9], [14, 14, 12]]) == [14, 14, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 2, 1], [8, 10, 7], [16, 11, 11]]) == [16, 11, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 5, 3], [9, 8, 2], [11, 13, 13]]) == [11, 13, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 4, 1], [11, 4, 6], [13, 11, 13]]) == [13, 11, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 4, 3], [10, 2, 4], [9, 8, 10]]) == [9, 8, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 6, 5], [1, 7, 8], [7, 13, 7]]) == [7, 13, 7]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 2, 6], [8, 2, 1], [14, 8, 15]]) == [14, 8, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 6, 5], [11, 5, 3], [13, 13, 10]]) == [13, 13, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 6, 2], [7, 10, 1], [12, 11, 6]]) == [12, 11, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 4, 6], [1, 9, 2], [7, 16, 15]]) == [7, 16, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[8, 3, 6], [6, 2, 4], [8, 10, 15]]) == [8, 10, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 2, 4], [1, 2, 2], [17, 8, 9]]) == [17, 8, 9]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 7, 1], [4, 4, 9], [10, 6, 15]]) == [10, 6, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 6], [2, 8, 1], [16, 6, 13]]) == [16, 6, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 3, 6], [3, 3, 1], [17, 10, 10]]) == [17, 10, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[8, 6, 3], [2, 1, 1], [9, 8, 13]]) == [9, 8, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 4, 5], [7, 4, 3], [8, 8, 13]]) == [8, 8, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 6, 4], [5, 4, 7], [8, 16, 12]]) == [8, 16, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 7, 3], [5, 1, 4], [15, 11, 8]]) == [15, 11, 8]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 2, 2], [10, 7, 7], [7, 16, 10]]) == [7, 16, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 7, 5], [2, 10, 1], [15, 9, 10]]) == [15, 9, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 6, 1], [10, 1, 7], [11, 15, 5]]) == [11, 15, 5]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 3, 5], [2, 8, 2], [12, 10, 12]]) == [12, 10, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 1, 2], [6, 10, 7], [11, 16, 13]]) == [11, 16, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 3, 1], [9, 10, 4], [11, 13, 14]]) == [11, 13, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 4, 3], [7, 6, 4], [16, 8, 7]]) == [16, 8, 7]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 7, 3], [7, 6, 4], [11, 16, 15]]) == [11, 16, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 2, 5], [11, 5, 2], [8, 11, 9]]) == [8, 11, 9]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 8, 6]]) == [2, 8, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 7, 2]]) == [7, 7, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 5, 2]]) == [6, 5, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 1, 4]]) == [3, 1, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 4, 2]]) == [6, 4, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 3, 1]]) == [1, 3, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 7, 2]]) == [2, 7, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 1, 6]]) == [7, 1, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 5]]) == [2, 3, 5]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 2, 1]]) == [1, 2, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 7, 4]]) == [3, 7, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 2]]) == [2, 3, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 5]]) == [5, 5, 5]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 6, 2]]) == [1, 6, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 5, 6]]) == [4, 5, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 4, 1]]) == [3, 4, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 6]]) == [5, 1, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 4, 3]]) == [1, 4, 3]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 3, 2]]) == [6, 3, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 2, 1]]) == [4, 2, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 7, 6]]) == [4, 7, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 4, 4]]) == [4, 4, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 7, 1]]) == [3, 7, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 5, 4]]) == [4, 5, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 6, 4]]) == [2, 6, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 6]]) == [2, 3, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 4, 6]]) == [1, 4, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 5, 6]]) == [6, 5, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 8, 3]]) == [4, 8, 3]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 4, 1]]) == [6, 4, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 6]]) == [5, 1, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 1]]) == [5, 5, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 1, 1]]) == [1, 1, 1]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "passed": true, "pass": true, "pass_num": 10, "round": 410, "mutate_method": "rephrase_one", "save_node": false, "parent_index": 449}
