{"task_id": "HumanEval/7", "prompt": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter an input list of strings only for ones that contain given substring.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''", "entry_point": "filter_by_substring", "canonical_solution": "    return [x for x in strings if substring in x]\n", "test": ["def check(filter_by_substring):\n\tassert filter_by_substring(['ugk', 'lxpl', 'dofffwbjmkjs', 'dakolixjey', 'EKbFGGOve', 'jcu'], 'ak') == ['dakolixjey']", "def check(filter_by_substring):\n\tassert filter_by_substring(['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj'], '') == ['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj']", "def check(filter_by_substring):\n\tassert filter_by_substring(['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej'], '') == ['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn'], '') == ['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn']", "def check(filter_by_substring):\n\tassert filter_by_substring(['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq'], '') == ['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp'], '') == ['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp']", "def check(filter_by_substring):\n\tassert filter_by_substring(['vuk', 'miq', 'lpogymr', 'dwxkxx', 'zpZrzWLRQz', 'iygu'], 'yg') == ['iygu']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn'], '') == ['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kdtqsykk', 'bgykpzt', 'tkht', 'bgr'], 't') == ['kdtqsykk', 'bgykpzt', 'tkht']", "def check(filter_by_substring):\n\tassert filter_by_substring(['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg'], '') == ['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['oni', 'zleaohlkif', 'grzeqgllx', 'xsavijydab'], 'sa') == ['xsavijydab']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kqox', 'knr', 'qlaaxt', 'pst', 'XduWEmb', 'egaqop'], 'ps') == ['pst']", "def check(filter_by_substring):\n\tassert filter_by_substring(['rdce', 'pepwrjoo', 'ozdnanxsiqj', ' jclyvgb', 'sfsgenBWtFR', 'ozpzyu'], 's') == ['ozdnanxsiqj', 'sfsgenBWtFR']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fot', 'eum', 'pxgsbphx', 'gzaorjz', 'KFVOhWwpoC', 'leht'], 'le') == ['leht']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tconue', 'mlney', 'akxtnzl', 'edrad'], 'on') == ['tconue']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'john') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje'], '') == ['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje']", "def check(filter_by_substring):\n\tassert filter_by_substring(['eilf', 'mpj', 'nhqktxlz', 'tafvngt', 'rgP', 'lqedsgz'], 'h') == ['nhqktxlz']", "def check(filter_by_substring):\n\tassert filter_by_substring(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']", "def check(filter_by_substring):\n\tassert filter_by_substring(['exkbpmyod', 'wafdw', 'essen', 'gycuxrrp'], 'af') == ['wafdw']", "def check(filter_by_substring):\n\tassert filter_by_substring(['sxivcdjg', 'npgx', 'inpeumlqwmth', 'fckeci', 'LsDtYSsBmG', 'qicaol'], 'c') == ['sxivcdjg', 'fckeci', 'qicaol']", "def check(filter_by_substring):\n\tassert filter_by_substring(['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw'], '') == ['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw']", "def check(filter_by_substring):\n\tassert filter_by_substring(['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd'], '') == ['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd']", "def check(filter_by_substring):\n\tassert filter_by_substring(['rei', 'lfmvyvcl', 'uodn', 'bwbaijeudy'], 'od') == ['uodn']", "def check(filter_by_substring):\n\tassert filter_by_substring(['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh'], '') == ['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh']", "def check(filter_by_substring):\n\tassert filter_by_substring(['usqvhbm', 'igpyd', 'gszactxzm', 'vqiyslsqnfe', 'vOhpjWbUu', 'awuwl'], 'w') == ['awuwl']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig'], '') == ['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig']", "def check(filter_by_substring):\n\tassert filter_by_substring(['rzlmq', 'nypmkzsg', 'aqngjmg', 'hldubutw', 'ZoTIDt', 'fgohcqf'], 'zl') == ['rzlmq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['puma', 'ahtk', 'glkv', 'vkdc'], 'um') == ['puma']", "def check(filter_by_substring):\n\tassert filter_by_substring(['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb'], 's') == ['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb']", "def check(filter_by_substring):\n\tassert filter_by_substring(['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf'], '') == ['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fekndc', 'bey', 'xhysf', 'pwobsqo l', 'OSx', 'ftpidu'], 'p') == ['pwobsqo l', 'ftpidu']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tjbhxevmk', 'lutcztrn', 'vzwocf', 'lxmhqfqzcidl'], 'zw') == ['vzwocf']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'agw') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr'], '') == ['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jfrgxtn', 'emgcjlv', 'kzfda', 'wsgvtzsoe', 'ALCGgsNR', 'ryv'], 'e') == ['emgcjlv', 'wsgvtzsoe']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'y') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['btfesq', 'rkagnsvsnzrs', 'eubbokyrm', 'gaxepuosip'], 'ga') == ['gaxepuosip']", "def check(filter_by_substring):\n\tassert filter_by_substring(['zupqmk', 'rwsqpdth', 'nlocbgvg', 'icfuzakjtknb', 'hyo', 'bqtjtn'], 'oc') == ['nlocbgvg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['shxzctwmk', 'sdwufvy', 'olicmd', ' qjur', 'zTRvOovqTV', 'ehumiisy'], 'ol') == ['olicmd']", "def check(filter_by_substring):\n\tassert filter_by_substring(['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz'], '') == ['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jfgi', 'exrlzppdsje', 'tdpgsobl', 'yjok'], 't') == ['tdpgsobl']", "def check(filter_by_substring):\n\tassert filter_by_substring(['gfikjrgy', 'onqcptegu', 'eyzyby', 'wbixoc ym', 'FHqsfXhbS', 'ark'], 'yz') == ['eyzyby']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'ii') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['augunz', 'fsyn', 'rzbjmi', 'nesckl', 'oCjPtbazAEsA', 'eyxtyx'], 'b') == ['rzbjmi', 'oCjPtbazAEsA']", "def check(filter_by_substring):\n\tassert filter_by_substring(['scuasnve', 'yydy', 'fbjkc', 'syqw', 'zvO', 'pdlry'], 'y') == ['yydy', 'syqw', 'pdlry']", "def check(filter_by_substring):\n\tassert filter_by_substring(['xjp', 'mpsdixcyw', 'mfqlwxatj', 'fiorka', 'kJUIVY', 'dekjfnmm'], 'ek') == ['dekjfnmm']", "def check(filter_by_substring):\n\tassert filter_by_substring(['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq'], '') == ['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'hm') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag'], '') == ['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag']", "def check(filter_by_substring):\n\tassert filter_by_substring(['onw', 'vxqogmm', 'igoksz', 'sug xjoxjadz', 'PDxYMxKzL', 'caez'], 'P') == ['PDxYMxKzL']", "def check(filter_by_substring):\n\tassert filter_by_substring(['oxmaldkqp', 'oksz', 'mjo', 'hlyomadtjj'], 'ma') == ['oxmaldkqp', 'hlyomadtjj']", "def check(filter_by_substring):\n\tassert filter_by_substring(['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq'], '') == ['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['avdkvxgq', 'tcln', 'vvvmj', 'hgidnvs'], 'v') == ['avdkvxgq', 'vvvmj', 'hgidnvs']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fjtbhk', 'zagej', 'ecstspbf', 'dpftwhjpsdon', 'RcVDi', 'mmrqfzoed'], 'ag') == ['zagej']", "def check(filter_by_substring):\n\tassert filter_by_substring(['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt'], '') == ['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'u') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo'], '') == ['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo']", "def check(filter_by_substring):\n\tassert filter_by_substring(['vlzqs', 'vaa', 'jyokyuek', 'blq'], 'va') == ['vaa']", "def check(filter_by_substring):\n\tassert filter_by_substring(['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym'], '') == ['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym']", "def check(filter_by_substring):\n\tassert filter_by_substring(['yrbqlzt', 'yoljy', 'hgnst', 'egwkaepxkr', 'pHPzwAlLi', 'jnzsvjnqd'], 'j') == ['yoljy', 'jnzsvjnqd']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf'], '') == ['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf']", "def check(filter_by_substring):\n\tassert filter_by_substring(['eqthk', 'hnfe', 'ywjz', 'pntutudpdu', 'yJmt', 'eufmcif'], 'nf') == ['hnfe']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jwzdw', 'cft', 'tvleiwn', 'wnbp', 'yQfFUrje', 'uhg'], 'bp') == ['wnbp']", "def check(filter_by_substring):\n\tassert filter_by_substring(['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj'], '') == ['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jmftlg', 'svpf', 'ahstcm', 'ulxugoklqs'], 's') == ['svpf', 'ahstcm', 'ulxugoklqs']", "def check(filter_by_substring):\n\tassert filter_by_substring(['wfvacvya', 'rrz', 'vgsagcsb', 'mvn', 'aDs', 'mphoywuq'], 'fv') == ['wfvacvya']", "def check(filter_by_substring):\n\tassert filter_by_substring(['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv'], '') == ['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv']", "def check(filter_by_substring):\n\tassert filter_by_substring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']", "def check(filter_by_substring):\n\tassert filter_by_substring(['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg'], '') == ['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['potgjni', 'snwj', 'pzzoklax', 'wnxdznip', 'JTlXExklWu', 'wgb'], 'n') == ['potgjni', 'snwj', 'wnxdznip']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'p') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']", "def check(filter_by_substring):\n\tassert filter_by_substring(['usmxmm', 'lewsordxonk', 'ozdow', 'fgacbnf'], 'u') == ['usmxmm']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ysuub', 'ebnfgbery', 'scgbpwkjl', 'adenslpxeqwf'], 'u') == ['ysuub']", "def check(filter_by_substring):\n\tassert filter_by_substring(['sftm', 'dioyco', 'iuuqfi', 'rbqlkpykbbzf', 'bWJjEcloelv', 'bfbjmgjql'], 'W') == ['bWJjEcloelv']", "def check(filter_by_substring):\n\tassert filter_by_substring(['oqoinujt', 'rkikbewjm', 'zpgfpdmyn', 'dmwxjss', 'qcgDNg', 'rmpqswrd'], 'ki') == ['rkikbewjm']", "def check(filter_by_substring):\n\tassert filter_by_substring(['gnu', 'qounpksy', 'atrzxeqfp', 'lurboel', 'RjIGVEs', 'nwiq'], 'qo') == ['qounpksy']", "def check(filter_by_substring):\n\tassert filter_by_substring(['dkgduwon', 'gxku', 'dou', 'yuidgjkbxe'], 'id') == ['yuidgjkbxe']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jaqamxam', 'racvaeu', 'gpshdiwef', 'gmcaonpp'], 'ps') == ['gpshdiwef']", "def check(filter_by_substring):\n\tassert filter_by_substring(['dgscqyaz', 'dykyill', 'lvher', 'ibqz', 'SmsHmLTEgw', 'keisthr'], 'e') == ['lvher', 'keisthr']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jqbhage', 'ydq', 'ddcagpb', 'edvnjuevted', 'DZcBCg', 'hyrsi'], 'q') == ['jqbhage', 'ydq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['dhpuhk', 'cmayyfjgv', 'grutd', ' tu hovh', 'QGCCvFPAXHHQ', 'mbxovs'], 'm') == ['cmayyfjgv', 'mbxovs']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp'], '') == ['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp']", "def check(filter_by_substring):\n\tassert filter_by_substring(['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz'], '') == ['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ffq', 'ymkokonn', 'vtu', 'nzghjgyk'], 'm') == ['ymkokonn']", "def check(filter_by_substring):\n\tassert filter_by_substring(['qsut', 'igzl', 'zpaen', 'yphoctvqw'], 'yp') == ['yphoctvqw']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd'], '') == ['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ntbtue', 'xfmvt', 'wtrzaz', 'wuyjr ldgwwm', 'RxIxdKCol', 'hmt'], 'xf') == ['xfmvt']", "def check(filter_by_substring):\n\tassert filter_by_substring(['hvoihyj', 'ulmqpwdl', 'crhrgo', 'ukcsrdksd', 'jsNWfXSsxHE', 'mla'], 'a') == ['mla']", "def check(filter_by_substring):\n\tassert filter_by_substring(['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy'], '') == ['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fimum', 'xmnmw', 'chbdrhlkt', 'difxuhc', 'gTlhU', 'qdikcnl'], 'im') == ['fimum']", "def check(filter_by_substring):\n\tassert filter_by_substring(['cst', 'akmh', 'lva', 'fpy fm', 'gfqijgxkhm', 'jkriy'], 'k') == ['akmh', 'gfqijgxkhm', 'jkriy']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk'], '') == ['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk']", "def check(filter_by_substring):\n\tassert filter_by_substring(['qaplgtthu', 'ylkvtgeipq', 'qseb', 'ghigzmkfxss'], 'qa') == ['qaplgtthu']", "def check(filter_by_substring):\n\tassert filter_by_substring(['smcse', 'gxzwz', 'olbea', 'yukag', 'JaDjvdHbtfLM', 'kncvrbzg'], 'yu') == ['yukag']", "def check(filter_by_substring):\n\tassert filter_by_substring(['mskf', 'qltsxwf', 'vuxg', 'jty', 'rnyqYyDjQ', 'opmcslazf'], 'pm') == ['opmcslazf']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ygndao', 'umazijg', 'ujv', 'i kyrfjq', 'nyXNlvWstDr', 'kioxvagx'], 'u') == ['umazijg', 'ujv']", "def check(filter_by_substring):\n\tassert filter_by_substring(['dmnu', 'snp', 'khydvutwhm', 'cgv', 'LClfX', 'wihfwkg'], 'ih') == ['wihfwkg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq'], '') == ['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tbbahnqmx', 'yaw', 'upedb', 'bwz', 'xptoH', 'wxhm'], 'pe') == ['upedb']", "def check(filter_by_substring):\n\tassert filter_by_substring(['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg'], '') == ['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['nkvfmcpka', 'iugtl', 'tvjvei', 'vnhwdmwc i', 'ZzXH', 'bbh'], 'n') == ['nkvfmcpka', 'vnhwdmwc i']", "def check(filter_by_substring):\n\tassert filter_by_substring(['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh'], '') == ['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tcvb', 'idguap', 'ukgtnfzqj', 'vfwmburpzqgg', 'jDFfcfd', 'cfbauoso'], 'c') == ['tcvb', 'jDFfcfd', 'cfbauoso']", "def check(filter_by_substring):\n\tassert filter_by_substring(['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx'], '') == ['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx']"], "test_case_list": ["assert filter_by_substring(['ugk', 'lxpl', 'dofffwbjmkjs', 'dakolixjey', 'EKbFGGOve', 'jcu'], 'ak') == ['dakolixjey']", "assert filter_by_substring(['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj'], '') == ['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj']", "assert filter_by_substring(['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej'], '') == ['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej']", "assert filter_by_substring(['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn'], '') == ['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn']", "assert filter_by_substring(['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq'], '') == ['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq']", "assert filter_by_substring(['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp'], '') == ['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp']", "assert filter_by_substring(['vuk', 'miq', 'lpogymr', 'dwxkxx', 'zpZrzWLRQz', 'iygu'], 'yg') == ['iygu']", "assert filter_by_substring(['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn'], '') == ['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn']", "assert filter_by_substring(['kdtqsykk', 'bgykpzt', 'tkht', 'bgr'], 't') == ['kdtqsykk', 'bgykpzt', 'tkht']", "assert filter_by_substring(['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg'], '') == ['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg']", "assert filter_by_substring(['oni', 'zleaohlkif', 'grzeqgllx', 'xsavijydab'], 'sa') == ['xsavijydab']", "assert filter_by_substring(['kqox', 'knr', 'qlaaxt', 'pst', 'XduWEmb', 'egaqop'], 'ps') == ['pst']", "assert filter_by_substring(['rdce', 'pepwrjoo', 'ozdnanxsiqj', ' jclyvgb', 'sfsgenBWtFR', 'ozpzyu'], 's') == ['ozdnanxsiqj', 'sfsgenBWtFR']", "assert filter_by_substring(['fot', 'eum', 'pxgsbphx', 'gzaorjz', 'KFVOhWwpoC', 'leht'], 'le') == ['leht']", "assert filter_by_substring(['tconue', 'mlney', 'akxtnzl', 'edrad'], 'on') == ['tconue']", "assert filter_by_substring([], 'john') == []", "assert filter_by_substring(['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje'], '') == ['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje']", "assert filter_by_substring(['eilf', 'mpj', 'nhqktxlz', 'tafvngt', 'rgP', 'lqedsgz'], 'h') == ['nhqktxlz']", "assert filter_by_substring(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']", "assert filter_by_substring(['exkbpmyod', 'wafdw', 'essen', 'gycuxrrp'], 'af') == ['wafdw']", "assert filter_by_substring(['sxivcdjg', 'npgx', 'inpeumlqwmth', 'fckeci', 'LsDtYSsBmG', 'qicaol'], 'c') == ['sxivcdjg', 'fckeci', 'qicaol']", "assert filter_by_substring(['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw'], '') == ['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw']", "assert filter_by_substring(['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd'], '') == ['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd']", "assert filter_by_substring(['rei', 'lfmvyvcl', 'uodn', 'bwbaijeudy'], 'od') == ['uodn']", "assert filter_by_substring(['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh'], '') == ['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh']", "assert filter_by_substring(['usqvhbm', 'igpyd', 'gszactxzm', 'vqiyslsqnfe', 'vOhpjWbUu', 'awuwl'], 'w') == ['awuwl']", "assert filter_by_substring(['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig'], '') == ['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig']", "assert filter_by_substring(['rzlmq', 'nypmkzsg', 'aqngjmg', 'hldubutw', 'ZoTIDt', 'fgohcqf'], 'zl') == ['rzlmq']", "assert filter_by_substring(['puma', 'ahtk', 'glkv', 'vkdc'], 'um') == ['puma']", "assert filter_by_substring(['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb'], 's') == ['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb']", "assert filter_by_substring(['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf'], '') == ['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf']", "assert filter_by_substring(['fekndc', 'bey', 'xhysf', 'pwobsqo l', 'OSx', 'ftpidu'], 'p') == ['pwobsqo l', 'ftpidu']", "assert filter_by_substring(['tjbhxevmk', 'lutcztrn', 'vzwocf', 'lxmhqfqzcidl'], 'zw') == ['vzwocf']", "assert filter_by_substring([], 'agw') == []", "assert filter_by_substring(['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr'], '') == ['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr']", "assert filter_by_substring(['jfrgxtn', 'emgcjlv', 'kzfda', 'wsgvtzsoe', 'ALCGgsNR', 'ryv'], 'e') == ['emgcjlv', 'wsgvtzsoe']", "assert filter_by_substring([], 'y') == []", "assert filter_by_substring(['btfesq', 'rkagnsvsnzrs', 'eubbokyrm', 'gaxepuosip'], 'ga') == ['gaxepuosip']", "assert filter_by_substring(['zupqmk', 'rwsqpdth', 'nlocbgvg', 'icfuzakjtknb', 'hyo', 'bqtjtn'], 'oc') == ['nlocbgvg']", "assert filter_by_substring(['shxzctwmk', 'sdwufvy', 'olicmd', ' qjur', 'zTRvOovqTV', 'ehumiisy'], 'ol') == ['olicmd']", "assert filter_by_substring(['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz'], '') == ['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz']", "assert filter_by_substring(['jfgi', 'exrlzppdsje', 'tdpgsobl', 'yjok'], 't') == ['tdpgsobl']", "assert filter_by_substring(['gfikjrgy', 'onqcptegu', 'eyzyby', 'wbixoc ym', 'FHqsfXhbS', 'ark'], 'yz') == ['eyzyby']", "assert filter_by_substring([], 'ii') == []", "assert filter_by_substring(['augunz', 'fsyn', 'rzbjmi', 'nesckl', 'oCjPtbazAEsA', 'eyxtyx'], 'b') == ['rzbjmi', 'oCjPtbazAEsA']", "assert filter_by_substring(['scuasnve', 'yydy', 'fbjkc', 'syqw', 'zvO', 'pdlry'], 'y') == ['yydy', 'syqw', 'pdlry']", "assert filter_by_substring(['xjp', 'mpsdixcyw', 'mfqlwxatj', 'fiorka', 'kJUIVY', 'dekjfnmm'], 'ek') == ['dekjfnmm']", "assert filter_by_substring(['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq'], '') == ['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq']", "assert filter_by_substring([], 'hm') == []", "assert filter_by_substring(['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag'], '') == ['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag']", "assert filter_by_substring(['onw', 'vxqogmm', 'igoksz', 'sug xjoxjadz', 'PDxYMxKzL', 'caez'], 'P') == ['PDxYMxKzL']", "assert filter_by_substring(['oxmaldkqp', 'oksz', 'mjo', 'hlyomadtjj'], 'ma') == ['oxmaldkqp', 'hlyomadtjj']", "assert filter_by_substring(['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq'], '') == ['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq']", "assert filter_by_substring(['avdkvxgq', 'tcln', 'vvvmj', 'hgidnvs'], 'v') == ['avdkvxgq', 'vvvmj', 'hgidnvs']", "assert filter_by_substring(['fjtbhk', 'zagej', 'ecstspbf', 'dpftwhjpsdon', 'RcVDi', 'mmrqfzoed'], 'ag') == ['zagej']", "assert filter_by_substring(['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt'], '') == ['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt']", "assert filter_by_substring([], 'u') == []", "assert filter_by_substring(['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo'], '') == ['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo']", "assert filter_by_substring(['vlzqs', 'vaa', 'jyokyuek', 'blq'], 'va') == ['vaa']", "assert filter_by_substring(['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym'], '') == ['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym']", "assert filter_by_substring(['yrbqlzt', 'yoljy', 'hgnst', 'egwkaepxkr', 'pHPzwAlLi', 'jnzsvjnqd'], 'j') == ['yoljy', 'jnzsvjnqd']", "assert filter_by_substring(['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf'], '') == ['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf']", "assert filter_by_substring(['eqthk', 'hnfe', 'ywjz', 'pntutudpdu', 'yJmt', 'eufmcif'], 'nf') == ['hnfe']", "assert filter_by_substring(['jwzdw', 'cft', 'tvleiwn', 'wnbp', 'yQfFUrje', 'uhg'], 'bp') == ['wnbp']", "assert filter_by_substring(['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj'], '') == ['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj']", "assert filter_by_substring(['jmftlg', 'svpf', 'ahstcm', 'ulxugoklqs'], 's') == ['svpf', 'ahstcm', 'ulxugoklqs']", "assert filter_by_substring(['wfvacvya', 'rrz', 'vgsagcsb', 'mvn', 'aDs', 'mphoywuq'], 'fv') == ['wfvacvya']", "assert filter_by_substring(['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv'], '') == ['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv']", "assert filter_by_substring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']", "assert filter_by_substring(['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg'], '') == ['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg']", "assert filter_by_substring(['potgjni', 'snwj', 'pzzoklax', 'wnxdznip', 'JTlXExklWu', 'wgb'], 'n') == ['potgjni', 'snwj', 'wnxdznip']", "assert filter_by_substring([], 'p') == []", "assert filter_by_substring(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']", "assert filter_by_substring(['usmxmm', 'lewsordxonk', 'ozdow', 'fgacbnf'], 'u') == ['usmxmm']", "assert filter_by_substring(['ysuub', 'ebnfgbery', 'scgbpwkjl', 'adenslpxeqwf'], 'u') == ['ysuub']", "assert filter_by_substring(['sftm', 'dioyco', 'iuuqfi', 'rbqlkpykbbzf', 'bWJjEcloelv', 'bfbjmgjql'], 'W') == ['bWJjEcloelv']", "assert filter_by_substring(['oqoinujt', 'rkikbewjm', 'zpgfpdmyn', 'dmwxjss', 'qcgDNg', 'rmpqswrd'], 'ki') == ['rkikbewjm']", "assert filter_by_substring(['gnu', 'qounpksy', 'atrzxeqfp', 'lurboel', 'RjIGVEs', 'nwiq'], 'qo') == ['qounpksy']", "assert filter_by_substring(['dkgduwon', 'gxku', 'dou', 'yuidgjkbxe'], 'id') == ['yuidgjkbxe']", "assert filter_by_substring(['jaqamxam', 'racvaeu', 'gpshdiwef', 'gmcaonpp'], 'ps') == ['gpshdiwef']", "assert filter_by_substring(['dgscqyaz', 'dykyill', 'lvher', 'ibqz', 'SmsHmLTEgw', 'keisthr'], 'e') == ['lvher', 'keisthr']", "assert filter_by_substring(['jqbhage', 'ydq', 'ddcagpb', 'edvnjuevted', 'DZcBCg', 'hyrsi'], 'q') == ['jqbhage', 'ydq']", "assert filter_by_substring(['dhpuhk', 'cmayyfjgv', 'grutd', ' tu hovh', 'QGCCvFPAXHHQ', 'mbxovs'], 'm') == ['cmayyfjgv', 'mbxovs']", "assert filter_by_substring(['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp'], '') == ['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp']", "assert filter_by_substring(['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz'], '') == ['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz']", "assert filter_by_substring(['ffq', 'ymkokonn', 'vtu', 'nzghjgyk'], 'm') == ['ymkokonn']", "assert filter_by_substring(['qsut', 'igzl', 'zpaen', 'yphoctvqw'], 'yp') == ['yphoctvqw']", "assert filter_by_substring(['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd'], '') == ['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd']", "assert filter_by_substring(['ntbtue', 'xfmvt', 'wtrzaz', 'wuyjr ldgwwm', 'RxIxdKCol', 'hmt'], 'xf') == ['xfmvt']", "assert filter_by_substring(['hvoihyj', 'ulmqpwdl', 'crhrgo', 'ukcsrdksd', 'jsNWfXSsxHE', 'mla'], 'a') == ['mla']", "assert filter_by_substring(['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy'], '') == ['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy']", "assert filter_by_substring(['fimum', 'xmnmw', 'chbdrhlkt', 'difxuhc', 'gTlhU', 'qdikcnl'], 'im') == ['fimum']", "assert filter_by_substring(['cst', 'akmh', 'lva', 'fpy fm', 'gfqijgxkhm', 'jkriy'], 'k') == ['akmh', 'gfqijgxkhm', 'jkriy']", "assert filter_by_substring(['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk'], '') == ['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk']", "assert filter_by_substring(['qaplgtthu', 'ylkvtgeipq', 'qseb', 'ghigzmkfxss'], 'qa') == ['qaplgtthu']", "assert filter_by_substring(['smcse', 'gxzwz', 'olbea', 'yukag', 'JaDjvdHbtfLM', 'kncvrbzg'], 'yu') == ['yukag']", "assert filter_by_substring(['mskf', 'qltsxwf', 'vuxg', 'jty', 'rnyqYyDjQ', 'opmcslazf'], 'pm') == ['opmcslazf']", "assert filter_by_substring(['ygndao', 'umazijg', 'ujv', 'i kyrfjq', 'nyXNlvWstDr', 'kioxvagx'], 'u') == ['umazijg', 'ujv']", "assert filter_by_substring(['dmnu', 'snp', 'khydvutwhm', 'cgv', 'LClfX', 'wihfwkg'], 'ih') == ['wihfwkg']", "assert filter_by_substring(['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq'], '') == ['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq']", "assert filter_by_substring(['tbbahnqmx', 'yaw', 'upedb', 'bwz', 'xptoH', 'wxhm'], 'pe') == ['upedb']", "assert filter_by_substring(['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg'], '') == ['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg']", "assert filter_by_substring(['nkvfmcpka', 'iugtl', 'tvjvei', 'vnhwdmwc i', 'ZzXH', 'bbh'], 'n') == ['nkvfmcpka', 'vnhwdmwc i']", "assert filter_by_substring(['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh'], '') == ['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh']", "assert filter_by_substring(['tcvb', 'idguap', 'ukgtnfzqj', 'vfwmburpzqgg', 'jDFfcfd', 'cfbauoso'], 'c') == ['tcvb', 'jDFfcfd', 'cfbauoso']", "assert filter_by_substring(['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx'], '') == ['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx']"], "nl": " Filter an input list of strings only for ones that contain given substring\n    ", "func": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:", "examples": ">>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    ", "repair_prompt": ["def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter an input list of strings only for ones that contain given substring.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''", " def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n        '''\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result", " def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n        '''"], "completion": "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n        '''\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result", "completions": ["from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n        '''\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result", "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    return [string for string in strings if substring in string]", "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n        '''\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result", "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n        '''\n    filtered_results = []\n    for string in strings:\n        if substring in string:\n            filtered_results.append(string)\n    return filtered_results", "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    return [string for string in strings if substring in string]", "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    return [string for string in strings if substring in string]", "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n        '''\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result", "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n        '''\n    return [string for string in strings if substring in string]", "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    return [string for string in strings if substring in string]", "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n        '''\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result"], "session_history": {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define the function signature and docstring.\",\n        \"details\": \"Ensure the function is defined with the correct parameters and return type, and include a clear docstring that describes the function's purpose, parameters, and expected output.\"\n      },\n      {\n        \"subproblem\": \"Initialize an empty list to store results.\",\n        \"details\": \"This list will be used to collect strings that contain the specified substring.\"\n      },\n      {\n        \"subproblem\": \"Iterate through each string in the input list.\",\n        \"details\": \"For each string, check if the substring is present.\"\n      },\n      {\n        \"subproblem\": \"Check if the substring is in the current string.\",\n        \"details\": \"If the substring is found, append the string to the result list.\"\n      },\n      {\n        \"subproblem\": \"Return the result list.\",\n        \"details\": \"After iterating through all strings, return the list containing strings that contain the specified substring.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"1. Define the function and its docstring.\",\n        \"details\": \"Define the function 'filter_by_substring' with the appropriate parameters and type hints, and include a detailed docstring.\"\n      },\n      {\n        \"step\": \"2. Initialize the result list.\",\n        \"details\": \"Create an empty list named 'result' to store strings that match the substring criteria.\"\n      },\n      {\n        \"step\": \"3. Iterate through the input list of strings.\",\n        \"details\": \"Use a for loop to go through each string in the input list 'strings'.\"\n      },\n      {\n        \"step\": \"4. Check for the presence of the substring.\",\n        \"details\": \"Inside the loop, use an if statement to check if the 'substring' is present in the current string.\"\n      },\n      {\n        \"step\": \"5. Append matching strings to the result list.\",\n        \"details\": \"If the substring is found, append the string to the 'result' list.\"\n      },\n      {\n        \"step\": \"6. Return the result list.\",\n        \"details\": \"\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a sequence of characters within a string\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 3-5 should be implement simultaneously.\n    \"Iterate through each string in the input list.\"\n    \"Check if the substring is in the current string.\"\n    \"If the substring is found, append the string to the result list.\"\n    This can be achieved by using a for loop to iterate through the list of strings", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n        '''\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n        '''\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result"}}, "session_historys": [{"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define the function signature and docstring.\",\n        \"details\": \"Ensure the function is defined with the correct parameters and return type, and include a clear docstring that describes the function's purpose and examples of usage.\"\n      },\n      {\n        \"subproblem\": \"Initialize an empty list to store results.\",\n        \"details\": \"This list will be used to collect strings that contain the specified substring.\"\n      },\n      {\n        \"subproblem\": \"Iterate through each string in the input list.\",\n        \"details\": \"For each string, check if the substring is present.\"\n      },\n      {\n        \"subproblem\": \"Check if the substring is in the current string.\",\n        \"details\": \"If the substring is found, append the string to the result list.\"\n      },\n      {\n        \"subproblem\": \"Return the result list.\",\n        \"details\": \"Ensure the function returns the list of strings that contain the specified substring.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"1. Define the function and its docstring.\",\n        \"details\": \"Define the function 'filter_by_substring' with the appropriate parameters and type hints. Include a detailed docstring that explains the function's purpose, parameters, and expected output.\"\n      },\n      {\n        \"step\": \"2. Initialize the result list.\",\n        \"details\": \"Create an empty list named 'result' to store the strings that contain the substring.\"\n      },\n      {\n        \"step\": \"3. Iterate through the input list.\",\n        \"details\": \"Use a for loop to iterate through each string in the input list 'strings'.\"\n      },\n      {\n        \"step\": \"4. Check for the substring.\",\n        \"details\": \"Within the loop, use an if statement to check if the 'substring' is present in the current string.\"\n      },\n      {\n        \"step\": \"5. Append matching strings to the result list.\",\n        \"details\": \"If the substring is found, append the string to the 'result' list.\"\n      },\n      {\n        \"step\": \"6. Return the result list.\",\n        \"details\":\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a sequence of characters within a string\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    All steps should be implement simultaneously. The for loop and if statement can be combined to check for the substring in each string.\n\n# [edge case] \n    filter_by_substring([], 'a') = []\n    explanation: The input list is empty, so there are no strings to check for the substring, resulting in an empty", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n        '''\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n        '''\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Understand the requirement\",\n        \"details\": \"Clarify the purpose of the function and the expected behavior. Ensure the function filters strings based on the presence of a specified substring.\"\n      },\n      {\n        \"subproblem\": \"Design the function signature\",\n        \"details\": \"Define the function parameters and return type. Parameters should include a list of strings and a substring. The return type should be a list of strings.\"\n      },\n      {\n        \"subproblem\": \"Implement the filtering logic\",\n        \"details\": \"Write the logic to iterate through the list of strings and check if each string contains the specified substring. Use Python's list comprehension or a simple loop for this purpose.\"\n      },\n      {\n        \"subproblem\": \"Test the function\",\n        \"details\": \"Create test cases to verify the function works as expected. Include edge cases such as an empty list, a list with no matching strings, and a list with all strings matching the substring.\"\n      },\n      {\n        \"subproblem\": \"Document the function\",\n        \"details\": \"Add a docstring to the function to explain its purpose, parameters, and return type. This will help the developer and any other users of the function understand how to use it.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"1. Analyze the requirement\",\n        \"details\": \"Clarify the user's need for a function that filters a list of strings based on the presence of a substring.\"\n      },\n      {\n        \"step\": \"2. Design the function\",\n        \"details\": \"Define the function signature with parameters for the list of strings and the substring, and specify the return type as a list of strings.\"\n      },\n      {\n        \"step\": \"3. Implement the function\",\n        \"details\": \"Write the Python code to implement the filtering logic using list comprehension or a loop. Ensure the function works correctly for various inputs.\"\n      },\n      {\n        \"step\": \"4. Test the function\",\n        \"details\": \"Run test cases to verify that the function filters strings correctly. Check for edge cases and adjust the implementation as necessary.\"\n      },\n      {\n        \"step\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a sequence of characters within a string\n\n    Explanation: The core concept here is the use of a substring within a string. The requirement is to filter a list of strings to include only those that contain a specific substring.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 2-4 should be implement simultaneously.\n    \"Design the function signature\"\n    \"Implement the filtering logic\"\n    \"Test the function", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    return [string for string in strings if substring in string]", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    return [string for string in strings if substring in string]"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define the function signature and docstring.\",\n        \"details\": \"Ensure the function is defined with the correct parameters and return type, and include a clear docstring that describes the function's purpose and examples of usage.\"\n      },\n      {\n        \"subproblem\": \"Initialize an empty list to store results.\",\n        \"details\": \"This list will be used to collect strings that contain the specified substring.\"\n      },\n      {\n        \"subproblem\": \"Iterate through each string in the input list.\",\n        \"details\": \"For each string, check if the substring is present.\"\n      },\n      {\n        \"subproblem\": \"Check if the substring is in the current string.\",\n        \"details\": \"If the substring is found, append the string to the result list.\"\n      },\n      {\n        \"subproblem\": \"Return the result list.\",\n        \"details\": \"Ensure the function returns the list of strings that contain the specified substring.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"1. Define the function and its docstring.\",\n        \"details\": \"Define the function 'filter_by_substring' with the appropriate parameters and type hints. Include a detailed docstring that explains the function's purpose, parameters, and expected output.\"\n      },\n      {\n        \"step\": \"2. Initialize the result list.\",\n        \"details\": \"Create an empty list named 'result' to store the strings that contain the substring.\"\n      },\n      {\n        \"step\": \"3. Iterate through the input list.\",\n        \"details\": \"Use a for loop to iterate through each string in the input list 'strings'.\"\n      },\n      {\n        \"step\": \"4. Check for the substring.\",\n        \"details\": \"Within the loop, use an if statement to check if the 'substring' is present in the current string.\"\n      },\n      {\n        \"step\": \"5. Append matching strings to the result list.\",\n        \"details\": \"If the substring is found, append the string to the 'result' list.\"\n      },\n      {\n        \"step\": \"6. Return the result list.\",\n        \"details\":\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a sequence of characters within a string\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 3-5 should be implement simultaneously.\n    \"Iterate through each string in the input list.\"\n    \"Check if the substring is present in the current string.\"\n    \"If the substring is found, append the string to the result list.\"\n    This can be achieved by using a for loop to iterate through each string in", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n        '''\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n        '''\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Understand the requirement: Ensure the function filters a list of strings based on the presence of a specified substring.\",\n      \"Design the function signature: Define the function parameters and return type.\",\n      \"Implement the filtering logic: Write the code to check each string in the list for the presence of the substring.\",\n      \"Handle edge cases: Consider scenarios where the input list is empty or the substring is not found.\",\n      \"Test the function: Validate the function works as expected with various inputs.\"\n    ],\n    \"high_level_steps\": [\n      \"Receive the function signature and parameters from the requirement.\",\n      \"Initialize an empty list to store the filtered results.\",\n      \"Iterate through each string in the input list.\",\n      \"Check if the substring is present in the current string.\",\n      \"If the substring is present, add the string to the filtered results list.\",\n      \"Return the filtered results list.\",\n      \"Test the function with the provided examples and additional test cases.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring presence': means checking if a specific substring is present in a given string.\n    Explanation: The requirement is to filter a list of strings to include only those that contain a specified substring. This involves checking each string for the presence of the substring.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    The steps 3-5 should be implement simultaneously.\n    \"Iterate through each string in the input list.\"\n    \"Check", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n        '''\n    filtered_results = []\n    for string in strings:\n        if substring in string:\n            filtered_results.append(string)\n    return filtered_results", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n        '''\n    filtered_results = []\n    for string in strings:\n        if substring in string:\n            filtered_results.append(string)\n    return filtered_results"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Understand the requirement\",\n        \"details\": \"Clarify the purpose of the function and the expected behavior. Ensure the function filters strings based on the presence of a specified substring.\"\n      },\n      {\n        \"subproblem\": \"Design the function signature\",\n        \"details\": \"Define the function parameters and return type. Parameters should include a list of strings and a substring. The return type should be a list of strings.\"\n      },\n      {\n        \"subproblem\": \"Implement the filtering logic\",\n        \"details\": \"Write the logic to iterate through the list of strings and check if each string contains the specified substring. Use Python's list comprehension or a simple loop for this purpose.\"\n      },\n      {\n        \"subproblem\": \"Test the function\",\n        \"details\": \"Create test cases to verify the function works as expected. Include edge cases such as an empty list, a list with no matching strings, and a list with all strings matching the substring.\"\n      },\n      {\n        \"subproblem\": \"Document the function\",\n        \"details\": \"Add a docstring to the function to explain its purpose, parameters, and return type. This will help the developer and any other users of the function understand how to use it.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"1. Analyze the requirement\",\n        \"details\": \"Clarify the user's need for a function that filters a list of strings based on the presence of a substring.\"\n      },\n      {\n        \"step\": \"2. Define the function signature\",\n        \"details\": \"Define the function with parameters for the list of strings and the substring, and specify the return type as a list of strings.\"\n      },\n      {\n        \"step\": \"3. Implement the filtering logic\",\n        \"details\": \"Use Python's list comprehension or a loop to iterate through the list and check for the presence of the substring in each string. Collect the results in a new list.\"\n      },\n      {\n        \"step\": \"4. Test the function\",\n        \"details\": \"Run the function with various inputs to ensure it behaves as expected. Check for correct handling of edge cases.\"\n     \nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a sequence of characters within a string\n    Explanation: In the requirement, the function is designed to filter a list of strings, keeping only those that contain a specific substring. The core concept here is the presence of a substring within a string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 2-4 should be implement simultaneously.\n    \"Define the function signature\",\n    \"Implement the filtering logic\",\n   ", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    return [string for string in strings if substring in string]", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    return [string for string in strings if substring in string]"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Understand the requirement\",\n        \"details\": \"Clarify the purpose of the function and the expected behavior from the user's perspective.\"\n      },\n      {\n        \"subproblem\": \"Design the function signature\",\n        \"details\": \"Define the function name, parameters, and return type based on the requirement.\"\n      },\n      {\n        \"subproblem\": \"Implement the function logic\",\n        \"details\": \"Write the code to filter the list of strings based on the presence of the substring.\"\n      },\n      {\n        \"subproblem\": \"Write test cases\",\n        \"details\": \"Create test cases to verify the correctness of the function implementation.\"\n      },\n      {\n        \"subproblem\": \"Document the function\",\n        \"details\": \"Add a docstring to the function to explain its purpose, parameters, and return type.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"1. Analyze the requirement\",\n        \"details\": \"Ensure the team understands the user's need for a function that filters strings based on a substring.\"\n      },\n      {\n        \"step\": \"2. Design the function\",\n        \"details\": \"Define the function name, parameters, and expected output as per the requirement.\"\n      },\n      {\n        \"step\": \"3. Implement the function\",\n        \"details\": \"Write the Python code to filter the list of strings. This involves iterating through the list and checking for the presence of the substring.\"\n      },\n      {\n        \"step\": \"4. Test the function\",\n        \"details\": \"Run the test cases to verify that the function works as expected. This includes edge cases like empty list or no matching strings.\"\n      },\n      {\n        \"step\": \"5. Document the function\",\n        \"details\": \"Add a clear and concise docstring to the function to help users and other developers understand its usage.\"\n      },\n      {\n        \"step\": \"6. Review and refine\",\n        \"details\": \"Review the implementation and refine it if necessary. Ensure the code is efficient and easy to understand.\"\n      },\n      {\n        \"step\": \"7. Deliver the\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a sequence of characters within a string\n\n    Explanation: In the requirement, the function is designed to filter a list of strings, keeping only those that contain a specific substring. The core concept here is the presence of a substring within a string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 2-4 should be implement simultaneously.\n    \"Define the function name, parameters, and return type based on the requirement", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    return [string for string in strings if substring in string]", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    return [string for string in strings if substring in string]"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Understand the requirement: Ensure the function filters a list of strings based on the presence of a specified substring.\",\n      \"Design the function signature: Define the function parameters and return type.\",\n      \"Implement the filtering logic: Write the code to check each string in the list for the presence of the substring.\",\n      \"Handle edge cases: Consider scenarios where the input list is empty or the substring is not found.\",\n      \"Test the function: Validate the function works as expected with various inputs.\"\n    ],\n    \"high_level_steps\": [\n      \"Define the function with the required parameters and return type.\",\n      \"Iterate through each string in the input list.\",\n      \"Check if the substring is present in the current string.\",\n      \"If the substring is present, add the string to the result list.\",\n      \"Return the result list after processing all strings.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring presence': means checking if a specific substring is present in a given string.\n    Explanation: The requirement is to filter a list of strings to include only those that contain a specified substring. This involves checking each string for the presence of the substring.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    The steps 2-4 should be implement simultaneously.\n    \"Iterate through each string in the input list.\"\n    \"Check", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n        '''\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n        '''\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Understand the requirement\",\n        \"details\": \"Clarify the purpose of the function and the expected behavior. Ensure the function filters strings based on the presence of a specified substring.\"\n      },\n      {\n        \"subproblem\": \"Design the function signature\",\n        \"details\": \"Define the function parameters and return type. Parameters should include a list of strings and a substring. The return type should be a list of strings.\"\n      },\n      {\n        \"subproblem\": \"Implement the filtering logic\",\n        \"details\": \"Write the logic to iterate through the list of strings and check for the presence of the substring. Use Python's list comprehension or a simple loop for this purpose.\"\n      },\n      {\n        \"subproblem\": \"Test the function\",\n        \"details\": \"Create test cases to verify the function works as expected. Include edge cases such as an empty list, a list with no matching strings, and a list with all strings matching the substring.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"1. Analyze the requirement\",\n        \"details\": \"Clarify the requirement with the user to ensure a clear understanding of what the function should do.\"\n      },\n      {\n        \"step\": \"2. Design the function\",\n        \"details\": \"Define the function signature based on the requirement. This includes parameter names and types, and the return type.\"\n      },\n      {\n        \"step\": \"3. Implement the function\",\n        \"details\": \"Write the Python function using Python's list comprehension or a loop to filter the strings based on the presence of the substring.\"\n      },\n      {\n        \"step\": \"4. Test the function\",\n        \"details\": \"Run the function with the test cases to ensure it behaves as expected. Make any necessary adjustments to the function based on the test results.\"\n      },\n      {\n        \"step\": \"5. Document the function\",\n        \"details\": \"Provide a docstring for the function to explain its purpose, parameters, and return type.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a sequence of characters within a string\n    Explanation: In the requirement, the function is designed to filter a list of strings, keeping only those that contain a specified substring. The core concept here is the presence of a substring within a string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 2-3 should be implement simultaneously.\n    \"Design the function signature\" and \"Implement the function\" can be done in", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n        '''\n    return [string for string in strings if substring in string]", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n        '''\n    return [string for string in strings if substring in string]"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Understand the requirement\",\n        \"details\": \"Clarify the purpose of the function and the expected behavior. Ensure the function filters strings based on the presence of a specified substring.\"\n      },\n      {\n        \"subproblem\": \"Design the function signature\",\n        \"details\": \"Define the function parameters and return type. Parameters should include a list of strings and a substring. The return type should be a list of strings.\"\n      },\n      {\n        \"subproblem\": \"Implement the filtering logic\",\n        \"details\": \"Write the logic to iterate through the list of strings and check if each string contains the specified substring. Use Python's list comprehension or a simple loop for this purpose.\"\n      },\n      {\n        \"subproblem\": \"Test the function\",\n        \"details\": \"Create test cases to verify the function works as expected. Include edge cases such as an empty list, a list with no matching strings, and a list with all strings matching the substring.\"\n      },\n      {\n        \"subproblem\": \"Document the function\",\n        \"details\": \"Add a docstring to the function to explain its purpose, parameters, and return type. This will help the developer and any other users of the function understand how to use it.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"1. Analyze the requirement\",\n        \"details\": \"Clarify the user's need for a function that filters a list of strings based on the presence of a substring.\"\n      },\n      {\n        \"step\": \"2. Define the function signature\",\n        \"details\": \"Define the function parameters and return type based on the requirement.\"\n      },\n      {\n        \"step\": \"3. Implement the filtering logic\",\n        \"details\": \"Write the Python code to filter the list of strings based on the presence of the substring.\"\n      },\n      {\n        \"step\": \"4. Test the function\",\n        \"details\": \"Run the function with various test cases to ensure it behaves as expected.\"\n      },\n      {\n        \"step\": \"5. Document the function\",\n        \"details\": \"Add a docstring to the function to explain its usage and behavior.\"\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a sequence of characters within a string\n    Explanation: In the requirement, the function is designed to filter a list of strings, keeping only those that contain a specific substring. The core concept here is the presence of a substring within a string.\n\n# [phrase showing quantity relationship]\n    'more than': means greater than\n    Explanation: The requirement does not explicitly use the phrase \"more than\" but implies that we are looking for strings where the substring appears. This can be interpreted as \"greater than zero\" times, meaning the substring must appear at least", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    return [string for string in strings if substring in string]", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    return [string for string in strings if substring in string]"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define the function signature and docstring.\",\n        \"details\": \"Ensure the function is defined with the correct parameters and return type, and include a clear docstring that describes the function's purpose, parameters, and expected output.\"\n      },\n      {\n        \"subproblem\": \"Initialize an empty list to store results.\",\n        \"details\": \"This list will be used to collect strings that contain the specified substring.\"\n      },\n      {\n        \"subproblem\": \"Iterate through each string in the input list.\",\n        \"details\": \"For each string, check if the substring is present.\"\n      },\n      {\n        \"subproblem\": \"Check if the substring is in the current string.\",\n        \"details\": \"If the substring is found, append the string to the result list.\"\n      },\n      {\n        \"subproblem\": \"Return the result list.\",\n        \"details\": \"After iterating through all strings, return the list containing strings that contain the specified substring.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"1. Define the function and its docstring.\",\n        \"details\": \"Define the function 'filter_by_substring' with the appropriate parameters and type hints, and include a detailed docstring.\"\n      },\n      {\n        \"step\": \"2. Initialize the result list.\",\n        \"details\": \"Create an empty list named 'result' to store strings that match the substring criteria.\"\n      },\n      {\n        \"step\": \"3. Iterate through the input list of strings.\",\n        \"details\": \"Use a for loop to go through each string in the input list 'strings'.\"\n      },\n      {\n        \"step\": \"4. Check for the presence of the substring.\",\n        \"details\": \"Inside the loop, use an if statement to check if the 'substring' is present in the current string.\"\n      },\n      {\n        \"step\": \"5. Append matching strings to the result list.\",\n        \"details\": \"If the substring is found, append the string to the 'result' list.\"\n      },\n      {\n        \"step\": \"6. Return the result list.\",\n        \"details\": \"\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a sequence of characters within a string\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 3-5 should be implement simultaneously.\n    \"Iterate through each string in the input list.\"\n    \"Check if the substring is in the current string.\"\n    \"If the substring is found, append the string to the result list.\"\n    This can be achieved by using a for loop to iterate through the list of strings", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n        '''\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n        '''\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result"}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [106, 106, 106, 106, 106, 106, 106, 106, 106, 106], "passed": true, "pass": true, "pass_num": 6, "round": 816, "mutate_method": "condense_two2one", "save_node": false, "parent_index": 586}
