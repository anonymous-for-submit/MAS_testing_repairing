{"task_id": "HumanEval/7", "prompt": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter an input list of strings only for ones that contain given substring.\n\nDescription:\nYou are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the output and handle uppercase and lowercase characters appropriately.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''", "entry_point": "filter_by_substring", "canonical_solution": "    return [x for x in strings if substring in x]\n", "test": ["def check(filter_by_substring):\n\tassert filter_by_substring(['ugk', 'lxpl', 'dofffwbjmkjs', 'dakolixjey', 'EKbFGGOve', 'jcu'], 'ak') == ['dakolixjey']", "def check(filter_by_substring):\n\tassert filter_by_substring(['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj'], '') == ['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj']", "def check(filter_by_substring):\n\tassert filter_by_substring(['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej'], '') == ['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn'], '') == ['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn']", "def check(filter_by_substring):\n\tassert filter_by_substring(['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq'], '') == ['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp'], '') == ['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp']", "def check(filter_by_substring):\n\tassert filter_by_substring(['vuk', 'miq', 'lpogymr', 'dwxkxx', 'zpZrzWLRQz', 'iygu'], 'yg') == ['iygu']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn'], '') == ['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kdtqsykk', 'bgykpzt', 'tkht', 'bgr'], 't') == ['kdtqsykk', 'bgykpzt', 'tkht']", "def check(filter_by_substring):\n\tassert filter_by_substring(['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg'], '') == ['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['oni', 'zleaohlkif', 'grzeqgllx', 'xsavijydab'], 'sa') == ['xsavijydab']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kqox', 'knr', 'qlaaxt', 'pst', 'XduWEmb', 'egaqop'], 'ps') == ['pst']", "def check(filter_by_substring):\n\tassert filter_by_substring(['rdce', 'pepwrjoo', 'ozdnanxsiqj', ' jclyvgb', 'sfsgenBWtFR', 'ozpzyu'], 's') == ['ozdnanxsiqj', 'sfsgenBWtFR']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fot', 'eum', 'pxgsbphx', 'gzaorjz', 'KFVOhWwpoC', 'leht'], 'le') == ['leht']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tconue', 'mlney', 'akxtnzl', 'edrad'], 'on') == ['tconue']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'john') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje'], '') == ['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje']", "def check(filter_by_substring):\n\tassert filter_by_substring(['eilf', 'mpj', 'nhqktxlz', 'tafvngt', 'rgP', 'lqedsgz'], 'h') == ['nhqktxlz']", "def check(filter_by_substring):\n\tassert filter_by_substring(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']", "def check(filter_by_substring):\n\tassert filter_by_substring(['exkbpmyod', 'wafdw', 'essen', 'gycuxrrp'], 'af') == ['wafdw']", "def check(filter_by_substring):\n\tassert filter_by_substring(['sxivcdjg', 'npgx', 'inpeumlqwmth', 'fckeci', 'LsDtYSsBmG', 'qicaol'], 'c') == ['sxivcdjg', 'fckeci', 'qicaol']", "def check(filter_by_substring):\n\tassert filter_by_substring(['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw'], '') == ['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw']", "def check(filter_by_substring):\n\tassert filter_by_substring(['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd'], '') == ['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd']", "def check(filter_by_substring):\n\tassert filter_by_substring(['rei', 'lfmvyvcl', 'uodn', 'bwbaijeudy'], 'od') == ['uodn']", "def check(filter_by_substring):\n\tassert filter_by_substring(['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh'], '') == ['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh']", "def check(filter_by_substring):\n\tassert filter_by_substring(['usqvhbm', 'igpyd', 'gszactxzm', 'vqiyslsqnfe', 'vOhpjWbUu', 'awuwl'], 'w') == ['awuwl']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig'], '') == ['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig']", "def check(filter_by_substring):\n\tassert filter_by_substring(['rzlmq', 'nypmkzsg', 'aqngjmg', 'hldubutw', 'ZoTIDt', 'fgohcqf'], 'zl') == ['rzlmq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['puma', 'ahtk', 'glkv', 'vkdc'], 'um') == ['puma']", "def check(filter_by_substring):\n\tassert filter_by_substring(['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb'], 's') == ['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb']", "def check(filter_by_substring):\n\tassert filter_by_substring(['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf'], '') == ['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fekndc', 'bey', 'xhysf', 'pwobsqo l', 'OSx', 'ftpidu'], 'p') == ['pwobsqo l', 'ftpidu']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tjbhxevmk', 'lutcztrn', 'vzwocf', 'lxmhqfqzcidl'], 'zw') == ['vzwocf']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'agw') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr'], '') == ['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jfrgxtn', 'emgcjlv', 'kzfda', 'wsgvtzsoe', 'ALCGgsNR', 'ryv'], 'e') == ['emgcjlv', 'wsgvtzsoe']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'y') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['btfesq', 'rkagnsvsnzrs', 'eubbokyrm', 'gaxepuosip'], 'ga') == ['gaxepuosip']", "def check(filter_by_substring):\n\tassert filter_by_substring(['zupqmk', 'rwsqpdth', 'nlocbgvg', 'icfuzakjtknb', 'hyo', 'bqtjtn'], 'oc') == ['nlocbgvg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['shxzctwmk', 'sdwufvy', 'olicmd', ' qjur', 'zTRvOovqTV', 'ehumiisy'], 'ol') == ['olicmd']", "def check(filter_by_substring):\n\tassert filter_by_substring(['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz'], '') == ['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jfgi', 'exrlzppdsje', 'tdpgsobl', 'yjok'], 't') == ['tdpgsobl']", "def check(filter_by_substring):\n\tassert filter_by_substring(['gfikjrgy', 'onqcptegu', 'eyzyby', 'wbixoc ym', 'FHqsfXhbS', 'ark'], 'yz') == ['eyzyby']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'ii') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['augunz', 'fsyn', 'rzbjmi', 'nesckl', 'oCjPtbazAEsA', 'eyxtyx'], 'b') == ['rzbjmi', 'oCjPtbazAEsA']", "def check(filter_by_substring):\n\tassert filter_by_substring(['scuasnve', 'yydy', 'fbjkc', 'syqw', 'zvO', 'pdlry'], 'y') == ['yydy', 'syqw', 'pdlry']", "def check(filter_by_substring):\n\tassert filter_by_substring(['xjp', 'mpsdixcyw', 'mfqlwxatj', 'fiorka', 'kJUIVY', 'dekjfnmm'], 'ek') == ['dekjfnmm']", "def check(filter_by_substring):\n\tassert filter_by_substring(['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq'], '') == ['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'hm') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag'], '') == ['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag']", "def check(filter_by_substring):\n\tassert filter_by_substring(['onw', 'vxqogmm', 'igoksz', 'sug xjoxjadz', 'PDxYMxKzL', 'caez'], 'P') == ['PDxYMxKzL']", "def check(filter_by_substring):\n\tassert filter_by_substring(['oxmaldkqp', 'oksz', 'mjo', 'hlyomadtjj'], 'ma') == ['oxmaldkqp', 'hlyomadtjj']", "def check(filter_by_substring):\n\tassert filter_by_substring(['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq'], '') == ['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['avdkvxgq', 'tcln', 'vvvmj', 'hgidnvs'], 'v') == ['avdkvxgq', 'vvvmj', 'hgidnvs']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fjtbhk', 'zagej', 'ecstspbf', 'dpftwhjpsdon', 'RcVDi', 'mmrqfzoed'], 'ag') == ['zagej']", "def check(filter_by_substring):\n\tassert filter_by_substring(['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt'], '') == ['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'u') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo'], '') == ['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo']", "def check(filter_by_substring):\n\tassert filter_by_substring(['vlzqs', 'vaa', 'jyokyuek', 'blq'], 'va') == ['vaa']", "def check(filter_by_substring):\n\tassert filter_by_substring(['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym'], '') == ['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym']", "def check(filter_by_substring):\n\tassert filter_by_substring(['yrbqlzt', 'yoljy', 'hgnst', 'egwkaepxkr', 'pHPzwAlLi', 'jnzsvjnqd'], 'j') == ['yoljy', 'jnzsvjnqd']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf'], '') == ['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf']", "def check(filter_by_substring):\n\tassert filter_by_substring(['eqthk', 'hnfe', 'ywjz', 'pntutudpdu', 'yJmt', 'eufmcif'], 'nf') == ['hnfe']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jwzdw', 'cft', 'tvleiwn', 'wnbp', 'yQfFUrje', 'uhg'], 'bp') == ['wnbp']", "def check(filter_by_substring):\n\tassert filter_by_substring(['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj'], '') == ['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jmftlg', 'svpf', 'ahstcm', 'ulxugoklqs'], 's') == ['svpf', 'ahstcm', 'ulxugoklqs']", "def check(filter_by_substring):\n\tassert filter_by_substring(['wfvacvya', 'rrz', 'vgsagcsb', 'mvn', 'aDs', 'mphoywuq'], 'fv') == ['wfvacvya']", "def check(filter_by_substring):\n\tassert filter_by_substring(['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv'], '') == ['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv']", "def check(filter_by_substring):\n\tassert filter_by_substring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']", "def check(filter_by_substring):\n\tassert filter_by_substring(['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg'], '') == ['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['potgjni', 'snwj', 'pzzoklax', 'wnxdznip', 'JTlXExklWu', 'wgb'], 'n') == ['potgjni', 'snwj', 'wnxdznip']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'p') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']", "def check(filter_by_substring):\n\tassert filter_by_substring(['usmxmm', 'lewsordxonk', 'ozdow', 'fgacbnf'], 'u') == ['usmxmm']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ysuub', 'ebnfgbery', 'scgbpwkjl', 'adenslpxeqwf'], 'u') == ['ysuub']", "def check(filter_by_substring):\n\tassert filter_by_substring(['sftm', 'dioyco', 'iuuqfi', 'rbqlkpykbbzf', 'bWJjEcloelv', 'bfbjmgjql'], 'W') == ['bWJjEcloelv']", "def check(filter_by_substring):\n\tassert filter_by_substring(['oqoinujt', 'rkikbewjm', 'zpgfpdmyn', 'dmwxjss', 'qcgDNg', 'rmpqswrd'], 'ki') == ['rkikbewjm']", "def check(filter_by_substring):\n\tassert filter_by_substring(['gnu', 'qounpksy', 'atrzxeqfp', 'lurboel', 'RjIGVEs', 'nwiq'], 'qo') == ['qounpksy']", "def check(filter_by_substring):\n\tassert filter_by_substring(['dkgduwon', 'gxku', 'dou', 'yuidgjkbxe'], 'id') == ['yuidgjkbxe']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jaqamxam', 'racvaeu', 'gpshdiwef', 'gmcaonpp'], 'ps') == ['gpshdiwef']", "def check(filter_by_substring):\n\tassert filter_by_substring(['dgscqyaz', 'dykyill', 'lvher', 'ibqz', 'SmsHmLTEgw', 'keisthr'], 'e') == ['lvher', 'keisthr']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jqbhage', 'ydq', 'ddcagpb', 'edvnjuevted', 'DZcBCg', 'hyrsi'], 'q') == ['jqbhage', 'ydq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['dhpuhk', 'cmayyfjgv', 'grutd', ' tu hovh', 'QGCCvFPAXHHQ', 'mbxovs'], 'm') == ['cmayyfjgv', 'mbxovs']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp'], '') == ['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp']", "def check(filter_by_substring):\n\tassert filter_by_substring(['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz'], '') == ['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ffq', 'ymkokonn', 'vtu', 'nzghjgyk'], 'm') == ['ymkokonn']", "def check(filter_by_substring):\n\tassert filter_by_substring(['qsut', 'igzl', 'zpaen', 'yphoctvqw'], 'yp') == ['yphoctvqw']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd'], '') == ['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ntbtue', 'xfmvt', 'wtrzaz', 'wuyjr ldgwwm', 'RxIxdKCol', 'hmt'], 'xf') == ['xfmvt']", "def check(filter_by_substring):\n\tassert filter_by_substring(['hvoihyj', 'ulmqpwdl', 'crhrgo', 'ukcsrdksd', 'jsNWfXSsxHE', 'mla'], 'a') == ['mla']", "def check(filter_by_substring):\n\tassert filter_by_substring(['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy'], '') == ['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fimum', 'xmnmw', 'chbdrhlkt', 'difxuhc', 'gTlhU', 'qdikcnl'], 'im') == ['fimum']", "def check(filter_by_substring):\n\tassert filter_by_substring(['cst', 'akmh', 'lva', 'fpy fm', 'gfqijgxkhm', 'jkriy'], 'k') == ['akmh', 'gfqijgxkhm', 'jkriy']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk'], '') == ['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk']", "def check(filter_by_substring):\n\tassert filter_by_substring(['qaplgtthu', 'ylkvtgeipq', 'qseb', 'ghigzmkfxss'], 'qa') == ['qaplgtthu']", "def check(filter_by_substring):\n\tassert filter_by_substring(['smcse', 'gxzwz', 'olbea', 'yukag', 'JaDjvdHbtfLM', 'kncvrbzg'], 'yu') == ['yukag']", "def check(filter_by_substring):\n\tassert filter_by_substring(['mskf', 'qltsxwf', 'vuxg', 'jty', 'rnyqYyDjQ', 'opmcslazf'], 'pm') == ['opmcslazf']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ygndao', 'umazijg', 'ujv', 'i kyrfjq', 'nyXNlvWstDr', 'kioxvagx'], 'u') == ['umazijg', 'ujv']", "def check(filter_by_substring):\n\tassert filter_by_substring(['dmnu', 'snp', 'khydvutwhm', 'cgv', 'LClfX', 'wihfwkg'], 'ih') == ['wihfwkg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq'], '') == ['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tbbahnqmx', 'yaw', 'upedb', 'bwz', 'xptoH', 'wxhm'], 'pe') == ['upedb']", "def check(filter_by_substring):\n\tassert filter_by_substring(['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg'], '') == ['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['nkvfmcpka', 'iugtl', 'tvjvei', 'vnhwdmwc i', 'ZzXH', 'bbh'], 'n') == ['nkvfmcpka', 'vnhwdmwc i']", "def check(filter_by_substring):\n\tassert filter_by_substring(['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh'], '') == ['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tcvb', 'idguap', 'ukgtnfzqj', 'vfwmburpzqgg', 'jDFfcfd', 'cfbauoso'], 'c') == ['tcvb', 'jDFfcfd', 'cfbauoso']", "def check(filter_by_substring):\n\tassert filter_by_substring(['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx'], '') == ['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx']"], "test_case_list": ["assert filter_by_substring(['ugk', 'lxpl', 'dofffwbjmkjs', 'dakolixjey', 'EKbFGGOve', 'jcu'], 'ak') == ['dakolixjey']", "assert filter_by_substring(['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj'], '') == ['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj']", "assert filter_by_substring(['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej'], '') == ['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej']", "assert filter_by_substring(['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn'], '') == ['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn']", "assert filter_by_substring(['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq'], '') == ['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq']", "assert filter_by_substring(['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp'], '') == ['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp']", "assert filter_by_substring(['vuk', 'miq', 'lpogymr', 'dwxkxx', 'zpZrzWLRQz', 'iygu'], 'yg') == ['iygu']", "assert filter_by_substring(['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn'], '') == ['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn']", "assert filter_by_substring(['kdtqsykk', 'bgykpzt', 'tkht', 'bgr'], 't') == ['kdtqsykk', 'bgykpzt', 'tkht']", "assert filter_by_substring(['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg'], '') == ['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg']", "assert filter_by_substring(['oni', 'zleaohlkif', 'grzeqgllx', 'xsavijydab'], 'sa') == ['xsavijydab']", "assert filter_by_substring(['kqox', 'knr', 'qlaaxt', 'pst', 'XduWEmb', 'egaqop'], 'ps') == ['pst']", "assert filter_by_substring(['rdce', 'pepwrjoo', 'ozdnanxsiqj', ' jclyvgb', 'sfsgenBWtFR', 'ozpzyu'], 's') == ['ozdnanxsiqj', 'sfsgenBWtFR']", "assert filter_by_substring(['fot', 'eum', 'pxgsbphx', 'gzaorjz', 'KFVOhWwpoC', 'leht'], 'le') == ['leht']", "assert filter_by_substring(['tconue', 'mlney', 'akxtnzl', 'edrad'], 'on') == ['tconue']", "assert filter_by_substring([], 'john') == []", "assert filter_by_substring(['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje'], '') == ['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje']", "assert filter_by_substring(['eilf', 'mpj', 'nhqktxlz', 'tafvngt', 'rgP', 'lqedsgz'], 'h') == ['nhqktxlz']", "assert filter_by_substring(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']", "assert filter_by_substring(['exkbpmyod', 'wafdw', 'essen', 'gycuxrrp'], 'af') == ['wafdw']", "assert filter_by_substring(['sxivcdjg', 'npgx', 'inpeumlqwmth', 'fckeci', 'LsDtYSsBmG', 'qicaol'], 'c') == ['sxivcdjg', 'fckeci', 'qicaol']", "assert filter_by_substring(['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw'], '') == ['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw']", "assert filter_by_substring(['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd'], '') == ['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd']", "assert filter_by_substring(['rei', 'lfmvyvcl', 'uodn', 'bwbaijeudy'], 'od') == ['uodn']", "assert filter_by_substring(['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh'], '') == ['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh']", "assert filter_by_substring(['usqvhbm', 'igpyd', 'gszactxzm', 'vqiyslsqnfe', 'vOhpjWbUu', 'awuwl'], 'w') == ['awuwl']", "assert filter_by_substring(['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig'], '') == ['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig']", "assert filter_by_substring(['rzlmq', 'nypmkzsg', 'aqngjmg', 'hldubutw', 'ZoTIDt', 'fgohcqf'], 'zl') == ['rzlmq']", "assert filter_by_substring(['puma', 'ahtk', 'glkv', 'vkdc'], 'um') == ['puma']", "assert filter_by_substring(['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb'], 's') == ['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb']", "assert filter_by_substring(['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf'], '') == ['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf']", "assert filter_by_substring(['fekndc', 'bey', 'xhysf', 'pwobsqo l', 'OSx', 'ftpidu'], 'p') == ['pwobsqo l', 'ftpidu']", "assert filter_by_substring(['tjbhxevmk', 'lutcztrn', 'vzwocf', 'lxmhqfqzcidl'], 'zw') == ['vzwocf']", "assert filter_by_substring([], 'agw') == []", "assert filter_by_substring(['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr'], '') == ['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr']", "assert filter_by_substring(['jfrgxtn', 'emgcjlv', 'kzfda', 'wsgvtzsoe', 'ALCGgsNR', 'ryv'], 'e') == ['emgcjlv', 'wsgvtzsoe']", "assert filter_by_substring([], 'y') == []", "assert filter_by_substring(['btfesq', 'rkagnsvsnzrs', 'eubbokyrm', 'gaxepuosip'], 'ga') == ['gaxepuosip']", "assert filter_by_substring(['zupqmk', 'rwsqpdth', 'nlocbgvg', 'icfuzakjtknb', 'hyo', 'bqtjtn'], 'oc') == ['nlocbgvg']", "assert filter_by_substring(['shxzctwmk', 'sdwufvy', 'olicmd', ' qjur', 'zTRvOovqTV', 'ehumiisy'], 'ol') == ['olicmd']", "assert filter_by_substring(['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz'], '') == ['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz']", "assert filter_by_substring(['jfgi', 'exrlzppdsje', 'tdpgsobl', 'yjok'], 't') == ['tdpgsobl']", "assert filter_by_substring(['gfikjrgy', 'onqcptegu', 'eyzyby', 'wbixoc ym', 'FHqsfXhbS', 'ark'], 'yz') == ['eyzyby']", "assert filter_by_substring([], 'ii') == []", "assert filter_by_substring(['augunz', 'fsyn', 'rzbjmi', 'nesckl', 'oCjPtbazAEsA', 'eyxtyx'], 'b') == ['rzbjmi', 'oCjPtbazAEsA']", "assert filter_by_substring(['scuasnve', 'yydy', 'fbjkc', 'syqw', 'zvO', 'pdlry'], 'y') == ['yydy', 'syqw', 'pdlry']", "assert filter_by_substring(['xjp', 'mpsdixcyw', 'mfqlwxatj', 'fiorka', 'kJUIVY', 'dekjfnmm'], 'ek') == ['dekjfnmm']", "assert filter_by_substring(['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq'], '') == ['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq']", "assert filter_by_substring([], 'hm') == []", "assert filter_by_substring(['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag'], '') == ['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag']", "assert filter_by_substring(['onw', 'vxqogmm', 'igoksz', 'sug xjoxjadz', 'PDxYMxKzL', 'caez'], 'P') == ['PDxYMxKzL']", "assert filter_by_substring(['oxmaldkqp', 'oksz', 'mjo', 'hlyomadtjj'], 'ma') == ['oxmaldkqp', 'hlyomadtjj']", "assert filter_by_substring(['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq'], '') == ['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq']", "assert filter_by_substring(['avdkvxgq', 'tcln', 'vvvmj', 'hgidnvs'], 'v') == ['avdkvxgq', 'vvvmj', 'hgidnvs']", "assert filter_by_substring(['fjtbhk', 'zagej', 'ecstspbf', 'dpftwhjpsdon', 'RcVDi', 'mmrqfzoed'], 'ag') == ['zagej']", "assert filter_by_substring(['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt'], '') == ['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt']", "assert filter_by_substring([], 'u') == []", "assert filter_by_substring(['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo'], '') == ['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo']", "assert filter_by_substring(['vlzqs', 'vaa', 'jyokyuek', 'blq'], 'va') == ['vaa']", "assert filter_by_substring(['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym'], '') == ['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym']", "assert filter_by_substring(['yrbqlzt', 'yoljy', 'hgnst', 'egwkaepxkr', 'pHPzwAlLi', 'jnzsvjnqd'], 'j') == ['yoljy', 'jnzsvjnqd']", "assert filter_by_substring(['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf'], '') == ['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf']", "assert filter_by_substring(['eqthk', 'hnfe', 'ywjz', 'pntutudpdu', 'yJmt', 'eufmcif'], 'nf') == ['hnfe']", "assert filter_by_substring(['jwzdw', 'cft', 'tvleiwn', 'wnbp', 'yQfFUrje', 'uhg'], 'bp') == ['wnbp']", "assert filter_by_substring(['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj'], '') == ['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj']", "assert filter_by_substring(['jmftlg', 'svpf', 'ahstcm', 'ulxugoklqs'], 's') == ['svpf', 'ahstcm', 'ulxugoklqs']", "assert filter_by_substring(['wfvacvya', 'rrz', 'vgsagcsb', 'mvn', 'aDs', 'mphoywuq'], 'fv') == ['wfvacvya']", "assert filter_by_substring(['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv'], '') == ['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv']", "assert filter_by_substring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']", "assert filter_by_substring(['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg'], '') == ['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg']", "assert filter_by_substring(['potgjni', 'snwj', 'pzzoklax', 'wnxdznip', 'JTlXExklWu', 'wgb'], 'n') == ['potgjni', 'snwj', 'wnxdznip']", "assert filter_by_substring([], 'p') == []", "assert filter_by_substring(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']", "assert filter_by_substring(['usmxmm', 'lewsordxonk', 'ozdow', 'fgacbnf'], 'u') == ['usmxmm']", "assert filter_by_substring(['ysuub', 'ebnfgbery', 'scgbpwkjl', 'adenslpxeqwf'], 'u') == ['ysuub']", "assert filter_by_substring(['sftm', 'dioyco', 'iuuqfi', 'rbqlkpykbbzf', 'bWJjEcloelv', 'bfbjmgjql'], 'W') == ['bWJjEcloelv']", "assert filter_by_substring(['oqoinujt', 'rkikbewjm', 'zpgfpdmyn', 'dmwxjss', 'qcgDNg', 'rmpqswrd'], 'ki') == ['rkikbewjm']", "assert filter_by_substring(['gnu', 'qounpksy', 'atrzxeqfp', 'lurboel', 'RjIGVEs', 'nwiq'], 'qo') == ['qounpksy']", "assert filter_by_substring(['dkgduwon', 'gxku', 'dou', 'yuidgjkbxe'], 'id') == ['yuidgjkbxe']", "assert filter_by_substring(['jaqamxam', 'racvaeu', 'gpshdiwef', 'gmcaonpp'], 'ps') == ['gpshdiwef']", "assert filter_by_substring(['dgscqyaz', 'dykyill', 'lvher', 'ibqz', 'SmsHmLTEgw', 'keisthr'], 'e') == ['lvher', 'keisthr']", "assert filter_by_substring(['jqbhage', 'ydq', 'ddcagpb', 'edvnjuevted', 'DZcBCg', 'hyrsi'], 'q') == ['jqbhage', 'ydq']", "assert filter_by_substring(['dhpuhk', 'cmayyfjgv', 'grutd', ' tu hovh', 'QGCCvFPAXHHQ', 'mbxovs'], 'm') == ['cmayyfjgv', 'mbxovs']", "assert filter_by_substring(['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp'], '') == ['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp']", "assert filter_by_substring(['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz'], '') == ['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz']", "assert filter_by_substring(['ffq', 'ymkokonn', 'vtu', 'nzghjgyk'], 'm') == ['ymkokonn']", "assert filter_by_substring(['qsut', 'igzl', 'zpaen', 'yphoctvqw'], 'yp') == ['yphoctvqw']", "assert filter_by_substring(['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd'], '') == ['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd']", "assert filter_by_substring(['ntbtue', 'xfmvt', 'wtrzaz', 'wuyjr ldgwwm', 'RxIxdKCol', 'hmt'], 'xf') == ['xfmvt']", "assert filter_by_substring(['hvoihyj', 'ulmqpwdl', 'crhrgo', 'ukcsrdksd', 'jsNWfXSsxHE', 'mla'], 'a') == ['mla']", "assert filter_by_substring(['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy'], '') == ['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy']", "assert filter_by_substring(['fimum', 'xmnmw', 'chbdrhlkt', 'difxuhc', 'gTlhU', 'qdikcnl'], 'im') == ['fimum']", "assert filter_by_substring(['cst', 'akmh', 'lva', 'fpy fm', 'gfqijgxkhm', 'jkriy'], 'k') == ['akmh', 'gfqijgxkhm', 'jkriy']", "assert filter_by_substring(['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk'], '') == ['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk']", "assert filter_by_substring(['qaplgtthu', 'ylkvtgeipq', 'qseb', 'ghigzmkfxss'], 'qa') == ['qaplgtthu']", "assert filter_by_substring(['smcse', 'gxzwz', 'olbea', 'yukag', 'JaDjvdHbtfLM', 'kncvrbzg'], 'yu') == ['yukag']", "assert filter_by_substring(['mskf', 'qltsxwf', 'vuxg', 'jty', 'rnyqYyDjQ', 'opmcslazf'], 'pm') == ['opmcslazf']", "assert filter_by_substring(['ygndao', 'umazijg', 'ujv', 'i kyrfjq', 'nyXNlvWstDr', 'kioxvagx'], 'u') == ['umazijg', 'ujv']", "assert filter_by_substring(['dmnu', 'snp', 'khydvutwhm', 'cgv', 'LClfX', 'wihfwkg'], 'ih') == ['wihfwkg']", "assert filter_by_substring(['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq'], '') == ['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq']", "assert filter_by_substring(['tbbahnqmx', 'yaw', 'upedb', 'bwz', 'xptoH', 'wxhm'], 'pe') == ['upedb']", "assert filter_by_substring(['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg'], '') == ['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg']", "assert filter_by_substring(['nkvfmcpka', 'iugtl', 'tvjvei', 'vnhwdmwc i', 'ZzXH', 'bbh'], 'n') == ['nkvfmcpka', 'vnhwdmwc i']", "assert filter_by_substring(['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh'], '') == ['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh']", "assert filter_by_substring(['tcvb', 'idguap', 'ukgtnfzqj', 'vfwmburpzqgg', 'jDFfcfd', 'cfbauoso'], 'c') == ['tcvb', 'jDFfcfd', 'cfbauoso']", "assert filter_by_substring(['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx'], '') == ['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx']"], "nl": " Filter an input list of strings only for ones that contain given substring\n    ", "func": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:", "examples": ">>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    ", "repair_prompt": ["def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter an input list of strings only for ones that contain given substring.\n\nDescription:\nYou are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the output and handle uppercase and lowercase characters appropriately.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''", " def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the", " def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the"], "completion": "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the output and handle uppercase and lowercase characters appropriately.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    if not strings:\n        return []\n    \n    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings", "completions": ["from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the output and handle uppercase and lowercase characters appropriately.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    if not strings:\n        return []\n    \n    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings", "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the\n    '''\n    if not strings:\n        return [\"The list is empty\"]\n    \n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    \n    if not filtered_strings:\n        return [f\"No strings contain the substring '{substring}'\"]\n    \n    return filtered_strings", "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the\n    '''\n    if not strings:\n        return []\n    \n    filtered_strings = [string for string in strings if substring in string]\n    \n    return filtered_strings", "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the\n    '''\n    if not strings:\n        return []\n    \n    filtered_strings = [s for s in strings if substring in s]\n    \n    return filtered_strings", "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the\n    '''\n    if not strings:\n        return []\n    \n    filtered_strings = [s for s in strings if substring in s]\n    \n    return filtered_strings", "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the output and handle uppercase and lowercase characters appropriately.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    if not strings:\n        return []\n    \n    substring_lower = substring.lower()\n    filtered_strings = [s for s in strings if substring_lower in s.lower()]\n    \n    return filtered_strings", "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the output and handle uppercase and lowercase characters appropriately.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    if not strings:\n        return []\n    \n    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings", "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the\n    '''\n    if not strings:\n        return []\n    \n    filtered_strings = [s for s in strings if substring in s]\n    \n    return filtered_strings", "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the\n    '''\n    if not strings:\n        return []\n    \n    filtered_strings = [s for s in strings if substring in s]\n    \n    return filtered_strings", "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the output and handle uppercase and lowercase characters appropriately.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    if not strings:\n        return []\n    \n    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings"], "session_history": {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define the function signature and parameters.\",\n        \"details\": \"The function should be named 'filter_by_substring', take two parameters: 'strings' (a list of strings) and 'substring' (a string), and return a list of strings.\"\n      },\n      {\n        \"subproblem\": \"Check for edge cases.\",\n        \"details\": \"Handle cases where the input list is empty or the substring is not found in any of the strings.\"\n      },\n      {\n        \"subproblem\": \"Filter the list of strings.\",\n        \"details\": \"Iterate through the list of strings and check if each string contains the specified substring, considering case sensitivity.\"\n      },\n      {\n        \"subproblem\": \"Preserve the order of the original list.\",\n        \"details\": \"Ensure that the order of the strings in the original list is maintained in the output list.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Define the function signature and parameters.\",\n        \"details\": \"Define the function 'filter_by_substring' with parameters 'strings' and 'substring'.\"\n      },\n      {\n        \"step\": \"Check for edge cases.\",\n        \"details\": \"Check if the 'strings' list is empty. If it is, return an empty list. Also, check if the 'substring' is found in any of the strings.\"\n      },\n      {\n        \"step\": \"Filter the list of strings.\",\n        \"details\": \"Iterate through the 'strings' list and use a list comprehension to include only those strings that contain the 'substring', ensuring case sensitivity is handled.\"\n      },\n      {\n        \"step\": \"Return the filtered list.\",\n        \"details\": \"Return the list of strings that contain the 'substring', preserving the order from the original list.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a sequence of characters within a string\n    Explanation: In the requirement, the substring is a part of the string that we are looking for within other strings. It is important to consider case sensitivity when filtering the list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 2-4 should be considered simultaneously.\n    \"Check for edge cases.\" and \"Filter the list of strings.\" can be combined to ensure that the", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the output and handle uppercase and lowercase characters appropriately.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    if not strings:\n        return []\n    \n    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the output and handle uppercase and lowercase characters appropriately.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    if not strings:\n        return []\n    \n    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings"}}, "session_historys": [{"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define the function signature and parameters.\",\n        \"details\": \"The function should be named 'filter_by_substring', take two parameters: 'strings' (a list of strings) and 'substring' (a string), and return a list of strings.\"\n      },\n      {\n        \"subproblem\": \"Check for edge cases.\",\n        \"details\": \"Handle cases where the input list is empty or the substring is not found in any of the strings.\"\n      },\n      {\n        \"subproblem\": \"Filter the list of strings.\",\n        \"details\": \"Iterate through the list of strings and check if each string contains the specified substring, considering case sensitivity.\"\n      },\n      {\n        \"subproblem\": \"Preserve the order of the original list.\",\n        \"details\": \"Ensure that the order of the strings in the original list is maintained in the output list.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Define the function signature and parameters.\",\n        \"details\": \"Define the function 'filter_by_substring' with parameters 'strings' and 'substring'.\"\n      },\n      {\n        \"step\": \"Check for edge cases.\",\n        \"details\": \"Check if the 'strings' list is empty. If it is, return an empty list. Also, check if the 'substring' is found in any of the strings.\"\n      },\n      {\n        \"step\": \"Filter the list of strings.\",\n        \"details\": \"Iterate through the 'strings' list and use a list comprehension to include only those strings that contain the 'substring', ensuring case sensitivity is handled.\"\n      },\n      {\n        \"step\": \"Return the filtered list.\",\n        \"details\": \"Return the list of strings that contain the 'substring', preserving the order from the original list.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a sequence of characters within a string\n    Explanation: In the requirement, the substring is a part of the string that we are looking for within other strings. It is important to consider case sensitivity when filtering the list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 2-4 should be considered simultaneously.\n    \"Check for edge cases.\" and \"Filter the list of strings.\" can be combined to ensure that the", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the output and handle uppercase and lowercase characters appropriately.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    if not strings:\n        return []\n    \n    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the output and handle uppercase and lowercase characters appropriately.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    if not strings:\n        return []\n    \n    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define the function signature and parameters.\",\n        \"details\": \"Ensure the function is defined with the correct name, parameters, and return type.\"\n      },\n      {\n        \"subproblem\": \"Implement error handling for invalid inputs.\",\n        \"details\": \"Check for edge cases such as empty list or substring not found.\"\n      },\n      {\n        \"subproblem\": \"Filter the list of strings based on the substring.\",\n        \"details\": \"Iterate through the list and check if each string contains the specified substring.\"\n      },\n      {\n        \"subproblem\": \"Preserve the order of the original list.\",\n        \"details\": \"Ensure that the order of the filtered results matches the order of the original list.\"\n      },\n      {\n        \"subproblem\": \"Test the function with various inputs to ensure correctness.\",\n        \"details\": \"Use a variety of test cases to verify that the function works as expected.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"1. Define the function with the required parameters.\",\n        \"details\": \"Create a function named `filter_by_substring` that takes a list of strings and a substring as arguments.\"\n      },\n      {\n        \"step\": \"2. Implement error handling.\",\n        \"details\": \"Check if the input list is empty or if the substring is not found in any of the strings. Return an appropriate message or handle the error gracefully.\"\n      },\n      {\n        \"step\": \"3. Filter the list of strings.\",\n        \"details\": \"Iterate through the list and use a conditional check to include only those strings that contain the specified substring.\"\n      },\n      {\n        \"step\": \"4. Preserve the order of the original list.\",\n        \"details\": \"Use a list to store the filtered results and ensure that the order is maintained.\"\n      },\n      {\n        \"step\": \"5. Test the function.\",\n        \"details\": \"Run several test cases to verify that the function works correctly, including edge cases.\"\n      },\n      {\n        \"step\": \"6. Document the function.\",\n        \"details\": \"Provide a clear and concise docstring that explains the function'\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a sequence of characters within a string.\n    Explanation: In the requirement, the substring is a part of the string that we are looking for within other strings. It is important because we need to filter the list of strings based on the presence of this substring.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 3 and 4 should be implement simultaneously.\n    \"Filter the list of strings based on the substring.\"", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the\n    '''\n    if not strings:\n        return [\"The list is empty\"]\n    \n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    \n    if not filtered_strings:\n        return [f\"No strings contain the substring '{substring}'\"]\n    \n    return filtered_strings", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the\n    '''\n    if not strings:\n        return [\"The list is empty\"]\n    \n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    \n    if not filtered_strings:\n        return [f\"No strings contain the substring '{substring}'\"]\n    \n    return filtered_strings"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define the function signature and parameters.\",\n        \"details\": \"Ensure the function is defined with the correct name, parameters, and return type.\"\n      },\n      {\n        \"subproblem\": \"Implement error handling for invalid inputs.\",\n        \"details\": \"Check for edge cases such as empty list or substring not found.\"\n      },\n      {\n        \"subproblem\": \"Filter the list of strings based on the substring.\",\n        \"details\": \"Iterate through the list and check if each string contains the specified substring.\"\n      },\n      {\n        \"subproblem\": \"Preserve the order of the original list.\",\n        \"details\": \"Ensure that the order of the strings in the original list is maintained in the filtered list.\"\n      },\n      {\n        \"subproblem\": \"Test the function with various inputs to ensure correctness.\",\n        \"details\": \"Create test cases that cover different scenarios including edge cases.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"1. Define the function with appropriate name and parameters.\",\n        \"details\": \"Define the function 'filter_by_substring' with parameters 'strings' (list of strings) and 'substring' (string).\"\n      },\n      {\n        \"step\": \"2. Implement error handling.\",\n        \"details\": \"Check if 'strings' is an empty list or if 'substring' is not found in any of the strings. Return an appropriate message or empty list in such cases.\"\n      },\n      {\n        \"step\": \"3. Filter the list.\",\n        \"details\": \"Iterate through the list 'strings' and use a list comprehension or a loop to filter out the strings that contain the 'substring'.\"\n      },\n      {\n        \"step\": \"4. Preserve the order of the original list.\",\n        \"details\": \"Ensure that the filtered list maintains the order of the original list by using a list comprehension that checks for the presence of the substring in each string.\"\n      },\n      {\n        \"step\": \"5. Test the function.\",\n        \"details\": \"Test the function with various inputs including edge cases to ensure it works as expected.\"\n      },\n      {\n        \"step\": \"\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a sequence of characters within a string\n    Explanation: In the requirement, the substring is a part of a string that we are interested in finding within other strings. It is a sequence of characters that we want to search for within the list of strings.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 3 and 4 should be implement simultaneously.\n    \"Filter the list of strings based on the substring\" and \"", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the\n    '''\n    if not strings:\n        return []\n    \n    filtered_strings = [string for string in strings if substring in string]\n    \n    return filtered_strings", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the\n    '''\n    if not strings:\n        return []\n    \n    filtered_strings = [string for string in strings if substring in string]\n    \n    return filtered_strings"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define the function signature and parameters.\",\n        \"details\": \"Ensure the function is defined with the correct name, parameters, and return type.\"\n      },\n      {\n        \"subproblem\": \"Implement error handling for edge cases.\",\n        \"details\": \"Handle cases where the input list is empty or the substring is not found in any of the strings.\"\n      },\n      {\n        \"subproblem\": \"Filter the list of strings based on the substring.\",\n        \"details\": \"Iterate through the list and check if each string contains the specified substring.\"\n      },\n      {\n        \"subproblem\": \"Preserve the order of the original list.\",\n        \"details\": \"Ensure that the order of the strings in the original list is maintained in the filtered list.\"\n      },\n      {\n        \"subproblem\": \"Test the function with various inputs.\",\n        \"details\": \"Create test cases to verify the correctness of the function for different scenarios.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"1. Define the function with the required parameters.\",\n        \"details\": \"Create a function named 'filter_by_substring' that takes a list of strings and a substring as arguments.\"\n      },\n      {\n        \"step\": \"2. Implement error handling.\",\n        \"details\": \"Check if the input list is empty or if the substring is not found in any of the strings. Return an appropriate message or an empty list in such cases.\"\n      },\n      {\n        \"step\": \"3. Filter the list.\",\n        \"details\": \"Iterate through the list of strings and use a list comprehension or a loop to filter out the strings that contain the specified substring.\"\n      },\n      {\n        \"step\": \"4. Preserve the order of the original list.\",\n        \"details\": \"Ensure that the filtered list maintains the same order as the original list.\"\n      },\n      {\n        \"step\": \"5. Test the function.\",\n        \"details\": \"Run test cases to verify that the function works correctly for various inputs, including edge cases.\"\n      },\n      {\n        \"step\": \"6. Document the function.\",\n        \"details\": \"Provide a\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a sequence of characters within a string\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 3-4 should be implement simultaneously.\n    \"Iterate through the list of strings\" and \"check if each string contains the specified substring\" can be done in a single loop or list comprehension.\n\n# [edge case] \n    filter_by_substring([], 'a') = []\n    Explanation: The", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the\n    '''\n    if not strings:\n        return []\n    \n    filtered_strings = [s for s in strings if substring in s]\n    \n    return filtered_strings", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the\n    '''\n    if not strings:\n        return []\n    \n    filtered_strings = [s for s in strings if substring in s]\n    \n    return filtered_strings"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define the function signature and parameters.\",\n        \"details\": \"Ensure the function is defined with the correct name, parameters, and return type.\"\n      },\n      {\n        \"subproblem\": \"Implement error handling for edge cases.\",\n        \"details\": \"Handle cases where the input list is empty or the substring is not found in any of the strings.\"\n      },\n      {\n        \"subproblem\": \"Filter the list of strings based on the substring.\",\n        \"details\": \"Iterate through the list and check if each string contains the specified substring.\"\n      },\n      {\n        \"subproblem\": \"Preserve the order of the original list.\",\n        \"details\": \"Ensure that the order of the strings in the original list is maintained in the filtered list.\"\n      },\n      {\n        \"subproblem\": \"Test the function with various inputs.\",\n        \"details\": \"Create test cases to verify the correctness of the function for different scenarios.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"1. Define the function with the required parameters.\",\n        \"details\": \"Create a function named 'filter_by_substring' that takes a list of strings and a substring as arguments.\"\n      },\n      {\n        \"step\": \"2. Implement error handling.\",\n        \"details\": \"Check if the input list is empty or if the substring is not found in any of the strings. Return an appropriate message or an empty list in such cases.\"\n      },\n      {\n        \"step\": \"3. Filter the list.\",\n        \"details\": \"Iterate through the list of strings and use a list comprehension or a loop to filter out the strings that do not contain the specified substring.\"\n      },\n      {\n        \"step\": \"4. Preserve the order of the original list.\",\n        \"details\": \"Ensure that the filtered list maintains the same order as the original list.\"\n      },\n      {\n        \"step\": \"5. Test the function.\",\n        \"details\": \"Run several test cases to verify that the function works correctly for different inputs, including edge cases.\"\n      },\n      {\n        \"step\": \"6. Document the function.\",\n        \"details\":\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a sequence of characters within a string\n    Explanation: In the requirement, the substring is a part of a string that we are interested in finding within other strings. It is a sequence of characters that we want to search for within the list of strings.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 3 and 4 should be implement simultaneously.\n    \"Filter the list of strings based on the substring\" and \"", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the\n    '''\n    if not strings:\n        return []\n    \n    filtered_strings = [s for s in strings if substring in s]\n    \n    return filtered_strings", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the\n    '''\n    if not strings:\n        return []\n    \n    filtered_strings = [s for s in strings if substring in s]\n    \n    return filtered_strings"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define the function signature and parameters.\",\n        \"details\": \"The function should be named filter_by_substring, take two parameters: strings (a list of strings) and substring (a string). It should return a list of strings.\"\n      },\n      {\n        \"subproblem\": \"Check for edge cases.\",\n        \"details\": \"Ensure the function handles empty lists and cases where the substring is not found. Return an empty list in such cases.\"\n      },\n      {\n        \"subproblem\": \"Filter the list of strings.\",\n        \"details\": \"Iterate through the list of strings and check if each string contains the substring. Use a list comprehension to filter the strings that contain the substring.\"\n      },\n      {\n        \"subproblem\": \"Handle case sensitivity.\",\n        \"details\": \"Ensure the function is case-insensitive. This can be achieved by converting both the strings and the substring to lowercase before checking for the substring.\"\n      },\n      {\n        \"subproblem\": \"Preserve the order of the original list.\",\n        \"details\": \"Ensure that the order of the strings in the original list is preserved in the output list.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Define the function signature and parameters.\",\n        \"details\": \"Define the function signature and parameters as per the requirement.\"\n      },\n      {\n        \"step\": \"Check for edge cases.\",\n        \"details\": \"Implement checks for empty list and no occurrence of the substring.\"\n      },\n      {\n        \"step\": \"Filter the list of strings.\",\n        \"details\": \"Use a list comprehension to filter the strings that contain the substring, ensuring case-insensitivity.\"\n      },\n      {\n        \"step\": \"Return the filtered list.\",\n        \"details\": \"Return the filtered list preserving the order of the original list.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a sequence of characters within a string\n    'case-insensitivity': means the function should treat uppercase and lowercase characters as the same\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 3 and 4 should be implement simultaneously.\n    \"Filter the list of strings\" and \"Handle case sensitivity\" can be done in one code block by using a list comprehension and converting both the strings and the substring to lowercase.\n", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the output and handle uppercase and lowercase characters appropriately.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    if not strings:\n        return []\n    \n    substring_lower = substring.lower()\n    filtered_strings = [s for s in strings if substring_lower in s.lower()]\n    \n    return filtered_strings", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the output and handle uppercase and lowercase characters appropriately.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    if not strings:\n        return []\n    \n    substring_lower = substring.lower()\n    filtered_strings = [s for s in strings if substring_lower in s.lower()]\n    \n    return filtered_strings"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define the function signature and parameters.\",\n        \"details\": \"The function should be named 'filter_by_substring', take two parameters: 'strings' (a list of strings) and 'substring' (a string), and return a list of strings.\"\n      },\n      {\n        \"subproblem\": \"Check for edge cases.\",\n        \"details\": \"Handle cases where the input list is empty or the substring is not found in any of the strings.\"\n      },\n      {\n        \"subproblem\": \"Filter the list of strings.\",\n        \"details\": \"Iterate through the list of strings and check if each string contains the specified substring, considering case sensitivity.\"\n      },\n      {\n        \"subproblem\": \"Preserve the order of the original list.\",\n        \"details\": \"Ensure that the order of the strings in the original list is maintained in the output list.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Define the function signature and parameters.\",\n        \"details\": \"Define the function 'filter_by_substring' with parameters 'strings' and 'substring'.\"\n      },\n      {\n        \"step\": \"Check for edge cases.\",\n        \"details\": \"Check if the 'strings' list is empty. If it is, return an empty list. Also, check if the 'substring' is found in any of the strings.\"\n      },\n      {\n        \"step\": \"Filter the list of strings.\",\n        \"details\": \"Iterate through the 'strings' list and use a list comprehension to include only those strings that contain the 'substring', ensuring case sensitivity is handled.\"\n      },\n      {\n        \"step\": \"Return the filtered list.\",\n        \"details\": \"Return the list of strings that contain the 'substring', preserving the order from the original list.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a sequence of characters within a string\n    Explanation: In the requirement, the substring is a part of the string that we are looking for within other strings. It is important to consider case sensitivity when filtering the list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 2-4 should be considered simultaneously.\n    \"Check for edge cases.\" and \"Filter the list of strings.\" should be done before iterating through", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the output and handle uppercase and lowercase characters appropriately.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    if not strings:\n        return []\n    \n    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the output and handle uppercase and lowercase characters appropriately.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    if not strings:\n        return []\n    \n    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define the function signature and parameters.\",\n        \"details\": \"Ensure the function is defined with the correct name, parameters, and return type.\"\n      },\n      {\n        \"subproblem\": \"Implement error handling for edge cases.\",\n        \"details\": \"Handle cases where the input list is empty or the substring is not found in any of the strings.\"\n      },\n      {\n        \"subproblem\": \"Filter the list of strings based on the substring.\",\n        \"details\": \"Iterate through the list and check if each string contains the specified substring.\"\n      },\n      {\n        \"subproblem\": \"Preserve the order of the original list.\",\n        \"details\": \"Ensure that the order of the strings in the original list is maintained in the filtered list.\"\n      },\n      {\n        \"subproblem\": \"Test the function with various inputs.\",\n        \"details\": \"Create test cases to verify the correctness of the function and ensure it handles all edge cases.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"1. Define the function with the required parameters.\",\n        \"details\": \"Create a function named `filter_by_substring` that takes a list of strings and a substring as arguments.\"\n      },\n      {\n        \"step\": \"2. Implement error handling.\",\n        \"details\": \"Check if the input list is empty or if the substring is not found in any of the strings. Return an appropriate message or an empty list in such cases.\"\n      },\n      {\n        \"step\": \"3. Filter the list.\",\n        \"details\": \"Iterate through the list of strings and use a list comprehension or a loop to filter out the strings that do not contain the specified substring.\"\n      },\n      {\n        \"step\": \"4. Preserve the order of the original list.\",\n        \"details\": \"Ensure that the filtered list maintains the order of the original list by using a list comprehension that checks for the presence of the substring in each string.\"\n      },\n      {\n        \"step\": \"5. Test the function.\",\n        \"details\": \"Run various test cases to verify that the function works correctly, including edge cases.\"\n      },\n      {\n\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a sequence of characters within a string\n    Explanation: In the requirement, the substring is a part of a string that we are interested in finding within other strings. It is a sequence of characters that we want to search for within the list of strings.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 3 and 4 should be implement simultaneously.\n    \"Filter the list of strings based on the substring\" and \"", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the\n    '''\n    if not strings:\n        return []\n    \n    filtered_strings = [s for s in strings if substring in s]\n    \n    return filtered_strings", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the\n    '''\n    if not strings:\n        return []\n    \n    filtered_strings = [s for s in strings if substring in s]\n    \n    return filtered_strings"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define the function signature and parameters.\",\n        \"details\": \"Ensure the function is defined with the correct name, parameters, and return type.\"\n      },\n      {\n        \"subproblem\": \"Implement error handling for edge cases.\",\n        \"details\": \"Handle cases where the input list is empty or the substring is not found in any of the strings.\"\n      },\n      {\n        \"subproblem\": \"Filter the list of strings based on the substring.\",\n        \"details\": \"Iterate through the list and check if each string contains the specified substring.\"\n      },\n      {\n        \"subproblem\": \"Preserve the order of the original list.\",\n        \"details\": \"Ensure that the order of the strings in the original list is maintained in the filtered list.\"\n      },\n      {\n        \"subproblem\": \"Test the function with various inputs.\",\n        \"details\": \"Create test cases to verify the correctness of the function for different scenarios.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"1. Define the function with the required parameters.\",\n        \"details\": \"Create a function named 'filter_by_substring' that takes a list of strings and a substring as arguments.\"\n      },\n      {\n        \"step\": \"2. Implement error handling.\",\n        \"details\": \"Check if the input list is empty or if the substring is not found in any of the strings. If so, return an appropriate message or an empty list.\"\n      },\n      {\n        \"step\": \"3. Filter the list.\",\n        \"details\": \"Iterate through the list of strings and use a list comprehension or a loop to check for the presence of the substring in each string. Collect the strings that contain the substring.\"\n      },\n      {\n        \"step\": \"4. Preserve the order of the original list.\",\n        \"details\": \"Ensure that the filtered list maintains the same order as the original list by using a list comprehension that includes an index check or by using a loop with a conditional append.\"\n      },\n      {\n        \"step\": \"5. Test the function.\",\n        \"details\": \"Run various tests with different inputs to ensure the function works correctly. This includes edge\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a sequence of characters within a string\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 3 and 4 should be implement simultaneously.\n    \"Check if each string contains the specified substring\" and \"Collect the strings that contain the substring\" can be done in a single loop or list comprehension.\n\n# [edge case] \n    filter_by_substring([], 'a') = []\n    Explanation:", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the\n    '''\n    if not strings:\n        return []\n    \n    filtered_strings = [s for s in strings if substring in s]\n    \n    return filtered_strings", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the\n    '''\n    if not strings:\n        return []\n    \n    filtered_strings = [s for s in strings if substring in s]\n    \n    return filtered_strings"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define the function signature and parameters.\",\n        \"details\": \"The function should be named 'filter_by_substring', take two parameters: 'strings' (a list of strings) and 'substring' (a string), and return a list of strings.\"\n      },\n      {\n        \"subproblem\": \"Check for edge cases.\",\n        \"details\": \"Handle cases where the input list is empty or the substring is not found in any of the strings.\"\n      },\n      {\n        \"subproblem\": \"Filter the list of strings.\",\n        \"details\": \"Iterate through the list of strings and check if each string contains the specified substring, considering case sensitivity.\"\n      },\n      {\n        \"subproblem\": \"Preserve the order of the original list.\",\n        \"details\": \"Ensure that the order of the strings in the original list is maintained in the output list.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Define the function signature and parameters.\",\n        \"details\": \"Define the function 'filter_by_substring' with parameters 'strings' and 'substring'.\"\n      },\n      {\n        \"step\": \"Check for edge cases.\",\n        \"details\": \"Check if the 'strings' list is empty. If it is, return an empty list. Also, check if the 'substring' is found in any of the strings.\"\n      },\n      {\n        \"step\": \"Filter the list of strings.\",\n        \"details\": \"Iterate through the 'strings' list and use a list comprehension to include only those strings that contain the 'substring', ensuring case sensitivity is handled.\"\n      },\n      {\n        \"step\": \"Return the filtered list.\",\n        \"details\": \"Return the list of strings that contain the 'substring', preserving the order from the original list.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a sequence of characters within a string\n    Explanation: In the requirement, the substring is a part of the string that we are looking for within other strings. It is important to consider case sensitivity when filtering the list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 2-4 should be considered simultaneously.\n    \"Check for edge cases.\" and \"Filter the list of strings.\" can be combined to ensure that the", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the output and handle uppercase and lowercase characters appropriately.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    if not strings:\n        return []\n    \n    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain given substring.\n\n    Description:\n    You are given a list of strings and a substring. Your task is to filter the list so that it only contains strings that have the specified substring. Write a function that takes in the list of strings and the substring as arguments and returns a new list with the filtered results. Consider edge cases such as an empty list or no occurrence of the substring. Make sure to preserve the order of the original list in the output and handle uppercase and lowercase characters appropriately.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    if not strings:\n        return []\n    \n    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings"}}], "scores": [1.0, 0.934, 1.0, 1.0, 1.0, 0.9811, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, false, true, true, true, false, true, true, true, true], "pass_test_cases_num": [106, 99, 106, 106, 106, 104, 106, 106, 106, 106], "passed": true, "pass": true, "pass_num": 6, "round": 439, "mutate_method": "add_1_sentence_at_end", "save_node": true, "parent_index": 383}
