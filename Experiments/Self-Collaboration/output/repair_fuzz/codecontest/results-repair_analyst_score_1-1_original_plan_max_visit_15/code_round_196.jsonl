{"name": "1598_C. Delete Two Elements", "description": "Monocarp has got an array a consisting of n integers. Let's denote k as the mathematic mean of these elements (note that it's possible that k is not an integer). \n\nThe mathematic mean of an array of n elements is the sum of elements divided by the number of these elements (i. e. sum divided by n).\n\nMonocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k.\n\nYour task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.", "tags": ["data structures", "dp", "implementation", "math", "two pointers"], "difficulty": 9, "id": 1598, "sample_io": [{"input": "4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["6\n0\n2\n3\n"]}], "test_list": [{"input": "1\n3\n228 1337 228\n", "output": ["0\n"]}, {"input": "1\n3\n228 1144 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 2 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 0 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 0 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 2 2 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["4\n0\n2\n3\n"]}, {"input": "4\n4\n8 9 8 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n34 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["6\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n0\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 7\n", "output": ["6\n0\n0\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 2 7 5 5\n7\n1 2 3 4 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 0\n", "output": ["6\n0\n0\n9\n"]}, {"input": "4\n4\n10 8 13 5\n3\n50 25 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["2\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 13 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 8 8\n3\n83 18 1\n5\n1 2 7 3 5\n7\n0 2 3 4 5 4 10\n", "output": ["6\n0\n0\n2\n"]}, {"input": "4\n4\n8 8 8 1\n3\n83 18 1\n5\n1 0 7 3 5\n7\n0 2 3 4 5 4 10\n", "output": ["0\n0\n0\n2\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n2 2 3 7 1 4 9\n", "output": ["6\n0\n1\n1\n"]}, {"input": "4\n4\n8 8 0 8\n3\n222 20 10\n5\n1 2 7 0 5\n7\n2 2 3 7 1 4 9\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n4\n8 8 0 8\n3\n222 20 6\n5\n1 2 7 0 5\n7\n0 2 3 7 1 4 9\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n4\n8 2 2 8\n3\n50 20 10\n5\n1 4 7 0 5\n7\n1 2 3 4 5 6 7\n", "output": ["4\n0\n0\n3\n"]}, {"input": "4\n4\n8 8 13 5\n3\n50 28 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n4\n8 8 5 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 0\n", "output": ["0\n0\n0\n9\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n4 2 3 7 1 4 7\n", "output": ["6\n0\n1\n3\n"]}, {"input": "4\n4\n5 8 11 8\n3\n9 24 10\n5\n1 4 2 3 5\n7\n0 2 3 3 5 8 20\n", "output": ["2\n0\n2\n0\n"]}, {"input": "4\n4\n5 8 5 8\n3\n9 34 10\n5\n1 4 4 3 5\n7\n0 2 3 3 5 8 20\n", "output": ["4\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "1\n1\n228 1337 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 4 4 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 1337 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 6 4 0 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n-1 2 4 4 0 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 1512 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 2 2 11\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 7 3 5\n7\n0 2 3 8 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 6 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 2063 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 2063 2\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 24 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 6 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 18 14\n3\n44 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 3 5\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 40 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 3 5\n7\n-1 2 3 12 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 8 0 3 5\n7\n-1 2 3 12 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n228 1337 127\n", "output": ["0\n"]}, {"input": "1\n3\n40 1144 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n9 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 3 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 9\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 18 1\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 0 2 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 1 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 -1 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n342 1512 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 2 2 11\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 0 4 5 6 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n50 25 9\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 2063 0\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 2 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 -1 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 10\n5\n1 4 7 5 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n228 4021 2\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 24 8\n3\n89 20 10\n5\n1 8 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 3 6 3 5\n7\n0 2 3 8 6 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 5\n3\n50 25 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 14 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 13 8\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 6 5\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 3 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 40 1\n5\n0 4 0 5 5\n7\n-1 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 5\n7\n-1 2 3 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n228 1337 103\n", "output": ["0\n"]}, {"input": "1\n3\n40 270 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 10\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 44\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n6 8 8 8\n3\n89 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 18 1\n5\n1 2 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 14\n3\n50 37 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 3\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 8 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n0 4 7 5 5\n7\n1 2 3 2 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 10\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n228 4021 1\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 13 5\n3\n50 25 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 13 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 2\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 3 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 3 8 8\n3\n50 40 1\n5\n0 4 0 5 5\n7\n-1 2 3 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 5\n7\n-1 2 3 0 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n382 1337 103\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 8\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 14 8\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 4 0 1 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 74\n", "output": ["0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n12 8 8 8\n3\n89 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n83 18 1\n5\n1 2 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 46 10\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 14\n3\n50 53 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n1 2 3 4 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 10\n5\n0 4 8 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n0 4 7 5 5\n7\n1 2 3 2 5 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 3\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n298 4021 1\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n93 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 8 9 3 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 3 8 8\n3\n50 40 1\n5\n0 4 0 5 5\n7\n-1 2 4 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 5\n7\n-1 1 3 0 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 1337 103\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 15\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 4 11\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 14 8\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 8 0 1 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 93\n", "output": ["0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 5 6 5\n", "output": ["0\n0\n0\n3\n"]}, {"input": "4\n4\n12 8 8 8\n3\n130 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n38 46 10\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 28\n3\n50 53 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n1 2 3 7 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 0\n", "output": ["6\n0\n0\n9\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 19\n5\n0 4 8 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 18\n5\n0 4 7 5 5\n7\n1 2 3 2 5 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 2 3\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n10 8 13 5\n3\n50 29 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["2\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 17 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 8 8\n3\n141 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 8 9 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 3 8 8\n3\n50 40 1\n5\n0 4 0 10 5\n7\n-1 2 4 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 0\n7\n-1 1 3 0 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 1055 103\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 7\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 4 20\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 14 16\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 11 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 8 0 1 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n148 141 93\n", "output": ["0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 7 6 5\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n12 8 8 8\n3\n130 20 10\n5\n0 4 7 3 5\n7\n1 2 0 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n83 18 1\n5\n1 0 7 3 5\n7\n0 2 3 4 5 4 10\n", "output": ["6\n0\n0\n2\n"]}, {"input": "4\n4\n8 8 13 8\n3\n38 46 4\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 28\n3\n50 53 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 5\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n2 2 3 7 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 1 4 0\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 19\n5\n0 4 8 3 5\n7\n0 2 7 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 18\n5\n0 4 7 5 7\n7\n1 2 3 2 5 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 2 5\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n6 1 17 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 8 8\n3\n233 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 11 9 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 1055 22\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 7\n5\n1 4 12 3 5\n7\n1 2 3 4 5 5 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 8 20\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 14 16\n3\n4 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 37 10\n5\n1 4 3 3 5\n7\n1 4 3 4 7 6 5\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n12 8 8 8\n3\n130 20 10\n5\n0 4 7 3 5\n7\n1 2 0 4 1 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 0\n3\n38 46 4\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 6 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 1 4 0\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 19\n5\n0 4 8 6 5\n7\n0 2 7 4 1 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 18\n5\n0 4 7 5 7\n7\n1 2 3 2 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 2 5\n5\n0 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n6 1 24 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 12 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 11 7 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 461 22\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 7\n5\n1 4 12 3 5\n7\n1 2 3 4 1 5 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 4 3 5\n7\n0 2 3 4 5 8 20\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 14 28\n3\n4 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 15 2 12\n3\n50 37 10\n5\n1 4 3 3 5\n7\n1 4 3 4 7 6 5\n", "output": ["0\n0\n0\n0\n"]}], "task_id": "codecontest/60", "repair_prompt": ["Monocarp has an array a made up of n integers, denoting k as the average value of these elements (note that k might not be an integer), and the mathematic mean of an array of n elements is the sum of elements divided by the number of these elements (i.e., sum divided by n). Monocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k. Your task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Monocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k. In other words, he is looking to find the number of pairs of positions [i, j] (i < j) that satisfy this condition. \nMonocarp has an array a made up of n integers, denoting k as the average value of these elements (note that k might not be an integer), and the mathematic mean of an array of n elements is the sum of elements divided by the number of these elements (i.e., sum divided by n). Monocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k. Your task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Monocarp wants to delete exactly two elements from array a so that the mathematic mean of the remaining elements is equal to k, calculate the number of pairs of positions [i, j] (i < j) that meet this condition.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    # Read the number of elements in the array\n    n = int(input())\n    \n    # Read the sequence of integers in the array\n    arr = list(map(int, input().split()))\n    \n    # Calculate the average value of the elements in the array\n    k = sum(arr) / n\n    \n    # Initialize a counter for pairs\n    pairs = 0\n    \n    # Iterate over all pairs of positions [i, j] (i < j)\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the sum of elements excluding elements at positions i and j\n            total = sum(arr) - arr[i] - arr[j]\n            # Calculate the average value of the remaining (n - 2) elements\n            avg = total / (n - 2)\n            # Check if the average value is equal to k\n            if avg == k:\n                pairs += 1\n    \n    # Output the total number of pairs for each testcase\n    print(pairs)\n\nmain()", "completions": ["from collections import defaultdict\n\ndef calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs_with_mean(arr, k):\n    count = 0\n    sum_dict = defaultdict(int)\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            sum_dict[i+j] += arr[i] + arr[j]\n    \n    for key, value in sum_dict.items():\n        mean = value / (len(arr) - 2)\n        if mean == k:\n            count += 1\n    \n    return count\n\nif __name__ == \"__main__\":\n    t = int(input())\n    \n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        k = calculate_mean(arr)\n        \n        result = count_pairs_with_mean(arr, k)\n        print(result)\n\nmain()", "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    total_sum = sum(a)\n    a.sort()\n    \n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if (total_sum - a[i] - a[j]) / (n - 2) == a[i] + a[j]:\n                count += 1\n    \n    print(count)\n\nmain()", "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    total_sum = sum(a)\n    count_pairs = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            sum_without_ij = total_sum - a[i] - a[j]\n            if sum_without_ij == (n-2) * a[i]:\n                count_pairs += 1\n    \n    print(count_pairs)\n\nmain()", "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    \n    total_sum = sum(arr)\n    k = total_sum / n\n    \n    count = 0\n    prefix_sum = 0\n    prefix_count = {}\n    \n    for i in range(n):\n        prefix_sum += arr[i]\n        if prefix_sum - k * (i + 1) in prefix_count:\n            count += prefix_count[prefix_sum - k * (i + 1)]\n        if prefix_sum not in prefix_count:\n            prefix_count[prefix_sum] = 1\n        else:\n            prefix_count[prefix_sum] += 1\n    \n    print(count)\n\nmain()", "from collections import Counter\n\ndef calculate_pairs(t, testcases):\n    results = []\n    \n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        \n        total_sum = sum(arr)\n        k = total_sum / n\n        \n        count = 0\n        freq = Counter(arr)\n        \n        for i in range(n):\n            count += freq[k * 2 - arr[i]]\n            if arr[i] == k:\n                count -= 2\n        \n        results.append(count // 2)\n    \n    return results\n\n# Input\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\n# Calculate and output results\noutput = calculate_pairs(t, testcases)\nfor res in output:\n    print(res)\n\nmain()", "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    \n    total_sum = sum(arr)\n    k = total_sum / n\n    \n    count = 0\n    prefix_sum = 0\n    prefix_count = {}\n    \n    for i in range(n):\n        prefix_sum += arr[i]\n        if prefix_sum - k * (i + 1) in prefix_count:\n            count += prefix_count[prefix_sum - k * (i + 1)]\n        if prefix_sum not in prefix_count:\n            prefix_count[prefix_sum] = 1\n        else:\n            prefix_count[prefix_sum] += 1\n    \n    print(count)\n\nmain()", "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    total_pairs = 0\n    total_sum = sum(a)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            current_sum = total_sum - a[i] - a[j]\n            remaining_elements = n - 2\n            if current_sum / remaining_elements == a[i] + a[j]:\n                total_pairs += 1\n    \n    print(total_pairs)\n\nmain()", "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    \n    total_sum = sum(arr)\n    total_pairs = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if (total_sum - arr[i] - arr[j]) / (n - 2) == arr[i] + arr[j] / 2:\n                total_pairs += 1\n                \n    print(total_pairs)\n\nmain()", "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    count = 0\n    total_sum = sum(a)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            sum_without_i_j = total_sum - a[i] - a[j]\n            if sum_without_i_j == (n-2) * a[i]:\n                count += 1\n    \n    print(count)\n\nmain()", "# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    # Read the number of elements in the array\n    n = int(input())\n    \n    # Read the sequence of integers in the array\n    arr = list(map(int, input().split()))\n    \n    # Calculate the average value of the elements in the array\n    k = sum(arr) / n\n    \n    # Initialize a counter for pairs\n    pairs = 0\n    \n    # Iterate over all pairs of positions [i, j] (i < j)\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the sum of elements excluding elements at positions i and j\n            total = sum(arr) - arr[i] - arr[j]\n            # Calculate the average value of the remaining (n - 2) elements\n            avg = total / (n - 2)\n            # Check if the average value is equal to k\n            if avg == k:\n                pairs += 1\n    \n    # Output the total number of pairs for each testcase\n    print(pairs)\n\nmain()"], "session_history": {"plan": "{\n  \"subproblems\": [\n    \"Calculate the average value of the elements in the array\",\n    \"Identify pairs of positions [i, j] (i < j) that satisfy the condition of deleting two elements and maintaining the average value\",\n    \"Count the number of pairs that satisfy the condition\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases (t)\",\n    \"Step 2\": \"For each testcase, read the number of elements in the array (n)\",\n    \"Step 3\": \"Read the sequence of integers in the array (a_1, a_2, ..., a_n)\",\n    \"Step 4\": \"Calculate the average value of the elements in the array\",\n    \"Step 5\": \"Identify pairs of positions [i, j] (i < j) that satisfy the condition of deleting two elements and maintaining the average value\",\n    \"Step 6\": \"Count the number of pairs that satisfy the condition\",\n    \"Step 7\": \"Output the total number of pairs for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The average value of a set of numbers calculated by summing all the numbers and dividing by the total count of numbers.\n\n    'delete exactly two elements'\n    Explanation: Removing two elements from the array to maintain the average value.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    Input:\n    4\n    4\n    8 8 8 8\n    Output:\n    6\n    Explanation: Any pair of elements can be removed since all of them are equal.\n\n    Input:\n    3\n    50 20 10\n    Output:\n    0\n    Explanation: There is no way to delete two elements so the mathematic mean doesn't change.\n\n    Input:\n    5\n    1 4 7 3 5\n    Output:\n    2\n    Explanation: It is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)", "Round_0": {"code": "# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    # Read the number of elements in the array\n    n = int(input())\n    \n    # Read the sequence of integers in the array\n    arr = list(map(int, input().split()))\n    \n    # Calculate the average value of the elements in the array\n    k = sum(arr) / n\n    \n    # Initialize a counter for pairs\n    pairs = 0\n    \n    # Iterate over all pairs of positions [i, j] (i < j)\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the sum of elements excluding elements at positions i and j\n            total = sum(arr) - arr[i] - arr[j]\n            # Calculate the average value of the remaining (n - 2) elements\n            avg = total / (n - 2)\n            # Check if the average value is equal to k\n            if avg == k:\n                pairs += 1\n    \n    # Output the total number of pairs for each testcase\n    print(pairs)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    # Read the number of elements in the array\n    n = int(input())\n    \n    # Read the sequence of integers in the array\n    arr = list(map(int, input().split()))\n    \n    # Calculate the average value of the elements in the array\n    k = sum(arr) / n\n    \n    # Initialize a counter for pairs\n    pairs = 0\n    \n    # Iterate over all pairs of positions [i, j] (i < j)\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the sum of elements excluding elements at positions i and j\n            total = sum(arr) - arr[i] - arr[j]\n            # Calculate the average value of the remaining (n - 2) elements\n            avg = total / (n - 2)\n            # Check if the average value is equal to k\n            if avg == k:\n                pairs += 1\n    \n    # Output the total number of pairs for each testcase\n    print(pairs)\n"}}, "session_historys": [{"plan": "{\n  \"subproblems\": [\n    \"Calculate the sum of all elements in the array\",\n    \"Iterate through all pairs of positions [i, j] (i < j) and calculate the sum of elements excluding elements at positions i and j\",\n    \"Check if the mean of the remaining elements is equal to k\"\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to get the number of testcases\",\n    \"For each testcase, parse the input to get the number of elements in the array and the array itself\",\n    \"For each pair of positions [i, j] (i < j), calculate the sum of elements excluding elements at positions i and j\",\n    \"Check if the mean of the remaining elements is equal to k and increment the count if it is\",\n    \"Print the total count for each testcase\"\n  ]\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean': It refers to the average value of a set of numbers, calculated by dividing the sum of the numbers by the count of numbers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    All steps should be implemented step by step as described in the plan.\n\n# [edge case] \n    Input:\n    4\n    4\n    8 8 8 8\n    Output:\n    6\n    Explanation:\n    In this case, any pair of elements can be removed since all of them are equal, resulting in the same mean.\n\n    Input:\n    3\n    50 20 10\n    Output:\n    0\n    Explanation:\n    There is no way to delete two elements so the mathematic mean doesn't change.\n\n    Input:\n    5\n    1 4 7 3 5\n    Output:\n    2\n    Explanation:\n    It is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)", "Round_0": {"code": "from collections import defaultdict\n\ndef calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs_with_mean(arr, k):\n    count = 0\n    sum_dict = defaultdict(int)\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            sum_dict[i+j] += arr[i] + arr[j]\n    \n    for key, value in sum_dict.items():\n        mean = value / (len(arr) - 2)\n        if mean == k:\n            count += 1\n    \n    return count\n\nif __name__ == \"__main__\":\n    t = int(input())\n    \n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        k = calculate_mean(arr)\n        \n        result = count_pairs_with_mean(arr, k)\n        print(result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 37)"}, "Round_1": {"code": "from collections import defaultdict\n\ndef calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs_with_mean(arr, k):\n    count = 0\n    sum_dict = defaultdict(int)\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            sum_dict[i+j] += arr[i] + arr[j]\n    \n    for key, value in sum_dict.items():\n        mean = value / (len(arr) - 2)\n        if mean == k:\n            count += 1\n    \n    return count\n\nif __name__ == \"__main__\":\n    t = int(input())\n    \n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        k = calculate_mean(arr)\n        \n        result = count_pairs_with_mean(arr, k)\n        print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the average value of the elements in the array\",\n    \"Identify pairs of positions [i, j] (i < j) that satisfy the condition of deleting two elements and maintaining the average value\",\n    \"Count the number of pairs that satisfy the condition\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases (t)\",\n    \"Step 2\": \"For each testcase, read the number of elements in the array (n)\",\n    \"Step 3\": \"Read the sequence of integers a_1, a_2, ..., a_n\",\n    \"Step 4\": \"Calculate the average value of the elements in the array\",\n    \"Step 5\": \"Identify pairs of positions [i, j] (i < j) that satisfy the condition of deleting two elements and maintaining the average value\",\n    \"Step 6\": \"Count the number of pairs that satisfy the condition\",\n    \"Step 7\": \"Output the total number of pairs for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The average value of a set of numbers calculated by summing all the numbers and dividing by the total count of numbers.\n\n    'delete exactly two elements'\n    Explanation: Removing two elements from the array to maintain the average value.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as described in the plan.\n\n# [edge case] \n    Input:\n    4\n    4\n    8 8 8 8\n    Output:\n    6\n    Explanation: Any pair of elements can be removed since all of them are equal.\n\n    Input:\n    3\n    50 20 10\n    Output:\n    0\n    Explanation: There is no way to delete two elements so the mathematic mean doesn't change.\n\n    Input:\n    5\n    1 4 7 3 5\n    Output:\n    2\n    Explanation: It is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case) \n\nNO", "Round_0": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    total_sum = sum(a)\n    a.sort()\n    \n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if (total_sum - a[i] - a[j]) / (n - 2) == a[i] + a[j]:\n                count += 1\n    \n    print(count)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 23)"}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    total_sum = sum(a)\n    a.sort()\n    \n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if (total_sum - a[i] - a[j]) / (n - 2) == a[i] + a[j]:\n                count += 1\n    \n    print(count)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the sum of all elements in the array\",\n    \"Iterate through all pairs of positions [i, j] (i < j) and calculate the sum of elements excluding elements at positions i and j\",\n    \"Check if the mean of the remaining elements is equal to k\"\n  ],\n  \"high_level_plan\": [\n    \"Read the number of testcases (t)\",\n    \"For each testcase:\",\n    \"  Read the number of elements in the array (n)\",\n    \"  Read the elements of the array\",\n    \"  Calculate the sum of all elements in the array\",\n    \"  Iterate through all pairs of positions [i, j] (i < j):\",\n    \"    Calculate the sum of elements excluding elements at positions i and j\",\n    \"    Check if the mean of the remaining elements is equal to k\",\n    \"    If yes, increment the count of pairs\",\n    \"  Print the count of pairs for the current testcase\"\n  ]\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean': It refers to the average value of a set of numbers, calculated by dividing the sum of the numbers by the count of numbers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    Input:\n    1\n    3\n    1 1 1\n    Output:\n    3\n    Explanation: In this case, any pair of elements can be removed since all of them are equal, resulting in the same mean.\n\n    Input:\n    1\n    5\n    1 2 3 4 5\n    Output:\n    0\n    Explanation: In this case, there is no way to delete two elements so the mathematic mean doesn't change.\n\n    Input:\n    1\n    4\n    1 2 3 4\n    Output:\n    3\n    Explanation: It is possible to delete the elements at positions 1 and 3, or the elements at positions 2 and 4.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case) \n\nNO", "Round_0": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    total_sum = sum(a)\n    count_pairs = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            sum_without_ij = total_sum - a[i] - a[j]\n            if sum_without_ij == (n-2) * a[i]:\n                count_pairs += 1\n    \n    print(count_pairs)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 23)"}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    total_sum = sum(a)\n    count_pairs = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            sum_without_ij = total_sum - a[i] - a[j]\n            if sum_without_ij == (n-2) * a[i]:\n                count_pairs += 1\n    \n    print(count_pairs)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the average value of the array a\",\n    \"Identify pairs of positions [i, j] where deleting elements will result in the same average value\",\n    \"Count the number of such pairs\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases (t)\",\n    \"Step 2\": \"For each testcase, read the number of elements in the array (n)\",\n    \"Step 3\": \"Read the elements of the array (a)\",\n    \"Step 4\": \"Calculate the average value of the array a\",\n    \"Step 5\": \"Identify pairs of positions [i, j] where deleting elements will result in the same average value\",\n    \"Step 6\": \"Count the number of such pairs\",\n    \"Step 7\": \"Output the total number of pairs for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'average value': The average value of the array is the sum of all elements divided by the number of elements in the array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    Input:\n    4\n    4\n    8 8 8 8\n    Output:\n    6\n    Explanation:\n    In this case, any pair of elements can be removed since all of them are equal, resulting in the same average value.\n\n    Input:\n    3\n    50 20 10\n    Output:\n    0\n    Explanation:\n    There is no way to delete two elements so the average value doesn't change.\n\n    Input:\n    5\n    1 4 7 3 5\n    Output:\n    2\n    Explanation:\n    It is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle the edge cases.", "Round_0": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    \n    total_sum = sum(arr)\n    k = total_sum / n\n    \n    count = 0\n    prefix_sum = 0\n    prefix_count = {}\n    \n    for i in range(n):\n        prefix_sum += arr[i]\n        if prefix_sum - k * (i + 1) in prefix_count:\n            count += prefix_count[prefix_sum - k * (i + 1)]\n        if prefix_sum not in prefix_count:\n            prefix_count[prefix_sum] = 1\n        else:\n            prefix_count[prefix_sum] += 1\n    \n    print(count)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 29)"}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    \n    total_sum = sum(arr)\n    k = total_sum / n\n    \n    count = 0\n    prefix_sum = 0\n    prefix_count = {}\n    \n    for i in range(n):\n        prefix_sum += arr[i]\n        if prefix_sum - k * (i + 1) in prefix_count:\n            count += prefix_count[prefix_sum - k * (i + 1)]\n        if prefix_sum not in prefix_count:\n            prefix_count[prefix_sum] = 1\n        else:\n            prefix_count[prefix_sum] += 1\n    \n    print(count)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the average value of the array a\",\n    \"Identify pairs of positions [i, j] where deleting elements will result in the same average value\",\n    \"Count the number of such pairs\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases (t)\",\n    \"Step 2\": \"For each testcase, read the number of elements in the array (n)\",\n    \"Step 3\": \"Read the elements of the array (a)\",\n    \"Step 4\": \"Calculate the average value (k) of the array\",\n    \"Step 5\": \"Identify pairs of positions [i, j] where deleting elements will result in the same average value\",\n    \"Step 6\": \"Count the number of such pairs\",\n    \"Step 7\": \"Output the total number of pairs for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'average value': The average value of the array is the sum of all elements divided by the number of elements.\n    'pairs of positions': Refers to combinations of two positions in the array where elements can be deleted.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    All steps should be implemented step by step as described in the plan.\n\n# [edge case] \n    Input:\n    4\n    4\n    8 8 8 8\n    Output:\n    6\n    Explanation:\n    In this case, any pair of elements can be removed since all of them are equal. So, there are 6 possible pairs to delete: (1,2), (1,3), (1,4), (2,3), (2,4), (3,4).\n\n    Input:\n    3\n    50 20 10\n    Output:\n    0\n    Explanation:\n    There is no way to delete two elements so the mathematic mean doesn't change.\n\n    Input:\n    5\n    1 4 7 3 5\n    Output:\n    2\n    Explanation:\n    It is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)", "Round_0": {"code": "from collections import Counter\n\ndef calculate_pairs(t, testcases):\n    results = []\n    \n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        \n        total_sum = sum(arr)\n        k = total_sum / n\n        \n        count = 0\n        freq = Counter(arr)\n        \n        for i in range(n):\n            count += freq[k * 2 - arr[i]]\n            if arr[i] == k:\n                count -= 2\n        \n        results.append(count // 2)\n    \n    return results\n\n# Input\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\n# Calculate and output results\noutput = calculate_pairs(t, testcases)\nfor res in output:\n    print(res)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 43)"}, "Round_1": {"code": "from collections import Counter\n\ndef calculate_pairs(t, testcases):\n    results = []\n    \n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        \n        total_sum = sum(arr)\n        k = total_sum / n\n        \n        count = 0\n        freq = Counter(arr)\n        \n        for i in range(n):\n            count += freq[k * 2 - arr[i]]\n            if arr[i] == k:\n                count -= 2\n        \n        results.append(count // 2)\n    \n    return results\n\n# Input\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\n# Calculate and output results\noutput = calculate_pairs(t, testcases)\nfor res in output:\n    print(res)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the average value of the array a\",\n    \"Identify pairs of positions [i, j] where deleting elements will result in the same average value\",\n    \"Count the number of such pairs\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases (t)\",\n    \"Step 2\": \"For each testcase, read the number of elements in the array (n)\",\n    \"Step 3\": \"Read the elements of the array (a)\",\n    \"Step 4\": \"Calculate the average value of the array a\",\n    \"Step 5\": \"Identify pairs of positions [i, j] where deleting elements will result in the same average value\",\n    \"Step 6\": \"Count the number of such pairs\",\n    \"Step 7\": \"Output the total number of pairs for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'average value': The average value of the array is the sum of all elements divided by the number of elements in the array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    Input:\n    4\n    4\n    8 8 8 8\n    Output:\n    6\n    Explanation:\n    In this case, any pair of elements can be removed since all of them are equal, resulting in the same average value.\n\n    Input:\n    3\n    50 20 10\n    Output:\n    0\n    Explanation:\n    There is no way to delete two elements so the average value doesn't change.\n\n    Input:\n    5\n    1 4 7 3 5\n    Output:\n    2\n    Explanation:\n    It is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle the edge cases.", "Round_0": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    \n    total_sum = sum(arr)\n    k = total_sum / n\n    \n    count = 0\n    prefix_sum = 0\n    prefix_count = {}\n    \n    for i in range(n):\n        prefix_sum += arr[i]\n        if prefix_sum - k * (i + 1) in prefix_count:\n            count += prefix_count[prefix_sum - k * (i + 1)]\n        if prefix_sum not in prefix_count:\n            prefix_count[prefix_sum] = 1\n        else:\n            prefix_count[prefix_sum] += 1\n    \n    print(count)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 30)"}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    \n    total_sum = sum(arr)\n    k = total_sum / n\n    \n    count = 0\n    prefix_sum = 0\n    prefix_count = {}\n    \n    for i in range(n):\n        prefix_sum += arr[i]\n        if prefix_sum - k * (i + 1) in prefix_count:\n            count += prefix_count[prefix_sum - k * (i + 1)]\n        if prefix_sum not in prefix_count:\n            prefix_count[prefix_sum] = 1\n        else:\n            prefix_count[prefix_sum] += 1\n    \n    print(count)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the sum of all elements in the array\",\n    \"Iterate through all pairs of positions [i, j] (i < j) and calculate the sum of elements excluding elements at positions i and j\",\n    \"Check if the mean of the remaining elements is equal to k\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Read the number of testcases (t)\",\n    \"step_2\": \"For each testcase, read the number of elements in the array (n)\",\n    \"step_3\": \"Read the sequence of integers in the array\",\n    \"step_4\": \"Calculate the sum of all elements in the array\",\n    \"step_5\": \"Iterate through all pairs of positions [i, j] (i < j)\",\n    \"step_6\": \"Calculate the sum of elements excluding elements at positions i and j\",\n    \"step_7\": \"Check if the mean of the remaining elements is equal to k\",\n    \"step_8\": \"Count the number of pairs that meet the condition\",\n    \"step_9\": \"Print the total count of pairs for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean': It refers to the average value of a set of numbers, calculated by dividing the sum of the numbers by the count of numbers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 5, 6, and 7 should be implemented simultaneously as they involve iterating through pairs of positions, calculating the sum of elements excluding those positions, and checking if the mean is equal to k. This can be done by nested loops to iterate through all pairs of positions and perform the necessary calculations.\n\n# [edge case] \n    Input:\n    4\n    4\n    8 8 8 8\n    Output:\n    6\n    Explanation:\n    In this case, any pair of elements can be removed since all of them are equal, resulting in the same mean.\n\n    Input:\n    3\n    50 20 10\n    Output:\n    0\n    Explanation:\n    There is no way to delete two elements such that the mean changes in this case.\n\n    Input:\n    5\n    1 4 7 3 5\n    Output:\n    2\n    Explanation:\n    It is possible to delete the elements at positions 1 and 3, or the elements at positions 4 and 5, to achieve the required mean.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)", "Round_0": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    total_pairs = 0\n    total_sum = sum(a)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            current_sum = total_sum - a[i] - a[j]\n            remaining_elements = n - 2\n            if current_sum / remaining_elements == a[i] + a[j]:\n                total_pairs += 1\n    \n    print(total_pairs)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 24)"}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    total_pairs = 0\n    total_sum = sum(a)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            current_sum = total_sum - a[i] - a[j]\n            remaining_elements = n - 2\n            if current_sum / remaining_elements == a[i] + a[j]:\n                total_pairs += 1\n    \n    print(total_pairs)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the average value of the array a\",\n    \"Identify pairs of positions [i, j] where deleting elements will result in the same average value\",\n    \"Count the number of such pairs\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases (t)\",\n    \"Step 2\": \"For each testcase, read the number of elements in the array (n)\",\n    \"Step 3\": \"Read the elements of the array (a)\",\n    \"Step 4\": \"Calculate the average value (k) of the array\",\n    \"Step 5\": \"Identify pairs of positions [i, j] where deleting elements will result in the same average value\",\n    \"Step 6\": \"Count the number of such pairs\",\n    \"Step 7\": \"Output the total number of pairs for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'average value': The average value of the array is the sum of all elements divided by the number of elements in the array.\n\n    'pairs of positions': Refers to combinations of two positions in the array where deleting the elements at those positions will result in the same average value.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 5 and 6 should be implemented simultaneously as they are interdependent. \n    To identify pairs of positions [i, j] where deleting elements will result in the same average value, you can iterate through all possible pairs of positions and calculate the new average after deleting those elements. If the new average is equal to the original average, increment the count of pairs.\n\n# [edge case] \n    4\n    8 8 8 8\n    Output: 6\n    Explanation: Any pair of elements can be removed since all of them are equal.\n    \n    3\n    50 20 10\n    Output: 0\n    Explanation: There is no way to delete two elements so the mathematic mean doesn't change.\n    \n    5\n    1 4 7 3 5\n    Output: 2\n    Explanation: It is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)", "Round_0": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    \n    total_sum = sum(arr)\n    total_pairs = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if (total_sum - arr[i] - arr[j]) / (n - 2) == arr[i] + arr[j] / 2:\n                total_pairs += 1\n                \n    print(total_pairs)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 22)"}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    \n    total_sum = sum(arr)\n    total_pairs = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if (total_sum - arr[i] - arr[j]) / (n - 2) == arr[i] + arr[j] / 2:\n                total_pairs += 1\n                \n    print(total_pairs)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the average value of the elements in the array\",\n    \"Identify pairs of positions [i, j] (i < j) that satisfy the condition of deleting two elements and maintaining the average value\",\n    \"Count the number of pairs that satisfy the condition\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases (t)\",\n    \"Step 2\": \"For each testcase, read the number of elements in the array (n)\",\n    \"Step 3\": \"Read the sequence of integers (a) for the array\",\n    \"Step 4\": \"Calculate the average value of the elements in the array\",\n    \"Step 5\": \"Identify pairs of positions [i, j] (i < j) that satisfy the condition of deleting two elements and maintaining the average value\",\n    \"Step 6\": \"Count the number of pairs that satisfy the condition\",\n    \"Step 7\": \"Output the total number of pairs for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The average value of a set of numbers calculated by summing all the numbers and dividing by the total count of numbers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 4, 5, and 6 should be implemented simultaneously as they are interdependent. \n    - Calculate the average value of the elements in the array.\n    - Identify pairs of positions [i, j] (i < j) that satisfy the condition of deleting two elements and maintaining the average value.\n    - Count the number of pairs that satisfy the condition.\n    This can be achieved by iterating through all pairs of positions [i, j], calculating the average after removing elements at those positions, and counting the valid pairs.\n\n# [edge case] \n    4\n    8 8 8 8\n    Output: 6\n    Explanation: Any pair of elements can be removed since all of them are equal.\n    \n    3\n    50 20 10\n    Output: 0\n    Explanation: There is no way to delete two elements so the mathematic mean doesn't change.\n    \n    5\n    1 4 7 3 5\n    Output: 2\n    Explanation: It is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)", "Round_0": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split())\n    \n    count = 0\n    total_sum = sum(a)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            sum_without_i_j = total_sum - a[i] - a[j]\n            if sum_without_i_j == (n-2) * a[i]:\n                count += 1\n    \n    print(count)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 7)"}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    count = 0\n    total_sum = sum(a)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            sum_without_i_j = total_sum - a[i] - a[j]\n            if sum_without_i_j == (n-2) * a[i]:\n                count += 1\n    \n    print(count)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the average value of the elements in the array\",\n    \"Identify pairs of positions [i, j] (i < j) that satisfy the condition of deleting two elements and maintaining the average value\",\n    \"Count the number of pairs that satisfy the condition\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases (t)\",\n    \"Step 2\": \"For each testcase, read the number of elements in the array (n)\",\n    \"Step 3\": \"Read the sequence of integers in the array (a_1, a_2, ..., a_n)\",\n    \"Step 4\": \"Calculate the average value of the elements in the array\",\n    \"Step 5\": \"Identify pairs of positions [i, j] (i < j) that satisfy the condition of deleting two elements and maintaining the average value\",\n    \"Step 6\": \"Count the number of pairs that satisfy the condition\",\n    \"Step 7\": \"Output the total number of pairs for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The average value of a set of numbers calculated by summing all the numbers and dividing by the total count of numbers.\n\n    'delete exactly two elements'\n    Explanation: Removing two elements from the array to maintain the average value.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    Input:\n    4\n    4\n    8 8 8 8\n    Output:\n    6\n    Explanation: Any pair of elements can be removed since all of them are equal.\n\n    Input:\n    3\n    50 20 10\n    Output:\n    0\n    Explanation: There is no way to delete two elements so the mathematic mean doesn't change.\n\n    Input:\n    5\n    1 4 7 3 5\n    Output:\n    2\n    Explanation: It is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)", "Round_0": {"code": "# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    # Read the number of elements in the array\n    n = int(input())\n    \n    # Read the sequence of integers in the array\n    arr = list(map(int, input().split()))\n    \n    # Calculate the average value of the elements in the array\n    k = sum(arr) / n\n    \n    # Initialize a counter for pairs\n    pairs = 0\n    \n    # Iterate over all pairs of positions [i, j] (i < j)\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the sum of elements excluding elements at positions i and j\n            total = sum(arr) - arr[i] - arr[j]\n            # Calculate the average value of the remaining (n - 2) elements\n            avg = total / (n - 2)\n            # Check if the average value is equal to k\n            if avg == k:\n                pairs += 1\n    \n    # Output the total number of pairs for each testcase\n    print(pairs)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    # Read the number of elements in the array\n    n = int(input())\n    \n    # Read the sequence of integers in the array\n    arr = list(map(int, input().split()))\n    \n    # Calculate the average value of the elements in the array\n    k = sum(arr) / n\n    \n    # Initialize a counter for pairs\n    pairs = 0\n    \n    # Iterate over all pairs of positions [i, j] (i < j)\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the sum of elements excluding elements at positions i and j\n            total = sum(arr) - arr[i] - arr[j]\n            # Calculate the average value of the remaining (n - 2) elements\n            avg = total / (n - 2)\n            # Check if the average value is equal to k\n            if avg == k:\n                pairs += 1\n    \n    # Output the total number of pairs for each testcase\n    print(pairs)\n"}}], "scores": [], "pass_results": [false, false, false, false, false, false, true, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 196, "prompt": "Monocarp has an array a made up of n integers, denoting k as the average value of these elements (note that k might not be an integer), and the mathematic mean of an array of n elements is the sum of elements divided by the number of these elements (i.e., sum divided by n). Monocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k. Your task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.", "mutate_method": "condense_two2one", "save_node": true, "parent_index": 24}
