{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "repair_prompt": ["Luntik has decided to try singing. He has a songs that last one minute, b songs that last two minutes and c songs that last three minutes. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Luntik wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Luntik has decided to try singing and wants to distribute all songs into two concerts with the smallest possible difference of durations to help find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "import itertools\n\n# Function to calculate the total duration of a concert\ndef calculate_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(a, b, c):\n    total_songs = a + b + c\n    min_diff = float('inf')\n    \n    # Generate all possible combinations of songs for each concert\n    for i in range(total_songs // 2 + 1):\n        for combination in itertools.combinations(range(total_songs), i):\n            concert1_duration = sum([1 if x in combination else 0 for x in range(total_songs)])  # Calculate duration of concert 1\n            concert2_duration = total_songs - concert1_duration  # Calculate duration of concert 2\n            diff = abs(calculate_duration(concert1_duration, b, c) - calculate_duration(concert2_duration, b, c))\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(find_minimal_difference(a, b, c))\n\nmain()", "completions": ["import itertools\n\n# Function to calculate the total duration of a concert\ndef calculate_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        durations = [calculate_duration(a, b, c), 0]\n        min_diff = float('inf')\n        \n        for comb in itertools.product(range(a+1), range(b+1), range(c+1)):\n            duration1 = calculate_duration(comb[0], comb[1], comb[2])\n            duration2 = calculate_duration(a-comb[0], b-comb[1], c-comb[2])\n            diff = abs(duration1 - duration2)\n            if diff < min_diff:\n                min_diff = diff\n        \n        print(min_diff)\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Find and output the minimal possible difference in minutes between the concerts durations\nfind_minimal_difference(t, test_cases)\n\nmain()", "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(2**3):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        \n        for j in range(3):\n            if i & (1 << j):\n                duration_concert1 += (j+1)\n            else:\n                duration_concert2 += (j+1)\n        \n        min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(calculate_min_difference(a, b, c))\n\nmain()", "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Calculate the minimum difference by trying all possible combinations\n    min_diff = float('inf')\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                diff = abs(concert1_duration - concert2_duration)\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n\nmain()", "def min_difference_between_concerts(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        if total_duration % 2 == 0:\n            print(0)\n        else:\n            if a == b == c == 1:\n                print(1)\n            else:\n                if a == b == c:\n                    print(0)\n                else:\n                    if half_duration % 2 == 0:\n                        print(0)\n                    else:\n                        print(1)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output\nmin_difference_between_concerts(t, test_cases)\n\nmain()", "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        min_diff = abs(half_duration - (a + 2*b))\n        if total_duration % 2 == 1:\n            min_diff = min(min_diff, abs(half_duration + 1 - (a + 2*b)))\n        \n        print(min_diff)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output\ncalculate_minimal_difference(t, test_cases)\n\nmain()", "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs for the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Distribute the songs into two concerts with the smallest possible difference in durations\n    songs = [(1, a), (2, b), (3, c)]\n    songs.sort(key=lambda x: x[0], reverse=True)\n    \n    concert1 = []\n    concert2 = []\n    total_concert1 = 0\n    total_concert2 = 0\n    \n    for song in songs:\n        if total_concert1 <= total_duration // 2:\n            concert1.extend([song[0]] * song[1])\n            total_concert1 += song[0] * song[1]\n        else:\n            concert2.extend([song[0]] * song[1])\n            total_concert2 += song[0] * song[1]\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(abs(total_concert1 - total_concert2))\n\nmain()", "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs for the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Distribute the songs into two concerts with the smallest possible difference in durations\n    songs = [a, b, c]\n    songs.sort(reverse=True)  # Sort the songs by duration in descending order\n    \n    concert1 = []\n    concert2 = []\n    diff = 0\n    \n    for song in songs:\n        if sum(concert1) <= sum(concert2):\n            concert1.append(song)\n        else:\n            concert2.append(song)\n    \n    diff = abs(sum(concert1) - sum(concert2))\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(diff)\n\nmain()", "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        min_diff = abs((a * 1 + b * 2 + c * 3) - max(a * 1 + b * 2 + c * 3, (a * 2 + b * 1 + c * 3)))\n        print(min_diff)\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Calculate and output minimal possible difference\ncalculate_minimal_difference(t, test_cases)\n\nmain()", "def distribute_songs(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        dp = [False] * (half_duration + 1)\n        dp[0] = True\n        \n        for x in [a, b, c]:\n            for j in range(half_duration, x-1, -1):\n                dp[j] |= dp[j - x]\n        \n        min_diff = total_duration\n        for j in range(half_duration+1):\n            if dp[j]:\n                min_diff = min(min_diff, total_duration - 2*j)\n        \n        print(min_diff)\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Call the function with input\ndistribute_songs(t, test_cases)\n\nmain()", "import itertools\n\n# Function to calculate the total duration of a concert\ndef calculate_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(a, b, c):\n    total_songs = a + b + c\n    min_diff = float('inf')\n    \n    # Generate all possible combinations of songs for each concert\n    for i in range(total_songs // 2 + 1):\n        for combination in itertools.combinations(range(total_songs), i):\n            concert1_duration = sum([1 if x in combination else 0 for x in range(total_songs)])  # Calculate duration of concert 1\n            concert2_duration = total_songs - concert1_duration  # Calculate duration of concert 2\n            diff = abs(calculate_duration(concert1_duration, b, c) - calculate_duration(concert2_duration, b, c))\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(find_minimal_difference(a, b, c))\n\nmain()"], "session_history": {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of each concert based on the given number of one-minute, two-minute, and three-minute songs\",\n    \"Find all possible combinations of songs for each concert\",\n    \"Calculate the absolute difference in durations between the two concerts\",\n    \"Identify the combination of songs that results in the smallest absolute difference in durations\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Parse the input to get the number of test cases\",\n    \"step_2\": \"For each test case, calculate the total duration of each concert\",\n    \"step_3\": \"Generate all possible combinations of songs for each concert\",\n    \"step_4\": \"Calculate the absolute difference in durations between the two concerts for each combination\",\n    \"step_5\": \"Identify the combination that results in the smallest absolute difference in durations\",\n    \"step_6\": \"Output the minimal possible difference in minutes between the concerts durations for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'duration of the concert': The total time taken for all songs in a concert.\n    'absolute difference': The positive difference between two values without considering direction.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': Indicates the need to find the minimum value.\n\n# [code logic]\n    There are no steps that should be implemented simultaneously. Each step should be executed sequentially as outlined in the plan.\n\n# [edge case] \n    Test Case 1:\n    Input: 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    Test Case 2:\n    Input: 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs, a two-minute song, and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The absolute difference is |7-6| = 1.\n    \n    Test Case 3:\n    Input: 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally among the concerts, resulting in the smallest absolute difference of 0.\n    \n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        - Consider cases where the number of songs in each category is not equal.\n        - Handle scenarios where the total number of songs is odd to ensure fair distribution.\n        - Implement logic to handle cases where the number of test cases is at the boundaries (1 or 1000).", "Round_0": {"code": "import itertools\n\n# Function to calculate the total duration of a concert\ndef calculate_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(a, b, c):\n    total_songs = a + b + c\n    min_diff = float('inf')\n    \n    # Generate all possible combinations of songs for each concert\n    for i in range(total_songs // 2 + 1):\n        for combination in itertools.combinations(range(total_songs), i):\n            concert1_duration = sum([1 if x in combination else 0 for x in range(total_songs)])  # Calculate duration of concert 1\n            concert2_duration = total_songs - concert1_duration  # Calculate duration of concert 2\n            diff = abs(calculate_duration(concert1_duration, b, c) - calculate_duration(concert2_duration, b, c))\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(find_minimal_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 35)"}, "Round_1": {"code": "import itertools\n\n# Function to calculate the total duration of a concert\ndef calculate_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(a, b, c):\n    total_songs = a + b + c\n    min_diff = float('inf')\n    \n    # Generate all possible combinations of songs for each concert\n    for i in range(total_songs // 2 + 1):\n        for combination in itertools.combinations(range(total_songs), i):\n            concert1_duration = sum([1 if x in combination else 0 for x in range(total_songs)])  # Calculate duration of concert 1\n            concert2_duration = total_songs - concert1_duration  # Calculate duration of concert 2\n            diff = abs(calculate_duration(concert1_duration, b, c) - calculate_duration(concert2_duration, b, c))\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(find_minimal_difference(a, b, c))\n"}}, "session_historys": [{"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of each concert based on the given number of one-minute, two-minute, and three-minute songs\",\n    \"Find all possible combinations of songs for each concert\",\n    \"Calculate the absolute difference in durations between the two concerts\",\n    \"Identify the combination of songs that results in the smallest absolute difference in durations\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Parse the input to get the number of test cases\",\n    \"step_2\": \"For each test case, calculate the total duration of each concert\",\n    \"step_3\": \"Generate all possible combinations of songs for each concert\",\n    \"step_4\": \"Calculate the absolute difference in durations between the two concerts for each combination\",\n    \"step_5\": \"Identify the combination that results in the smallest absolute difference in durations\",\n    \"step_6\": \"Output the minimal possible difference in minutes between the concerts durations for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'duration of the concert': The total time taken for all songs in a concert.\n    'absolute difference': The positive difference between two values without considering direction.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': Indicates the need to find the minimum value.\n\n# [code logic]\n    There are no steps that should be implemented simultaneously. Each step should be executed sequentially as outlined in the plan.\n\n# [edge case] \n    Test Case 1:\n    Input: 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    Test Case 2:\n    Input: 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs, a two-minute song, and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The absolute difference is |7-6| = 1.\n    \n    Test Case 3:\n    Input: 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally among the concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers the scenarios effectively.", "Round_0": {"code": "import itertools\n\n# Function to calculate the total duration of a concert\ndef calculate_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        durations = [calculate_duration(a, b, c), 0]\n        min_diff = float('inf')\n        \n        for comb in itertools.product(range(a+1), range(b+1), range(c+1)):\n            duration1 = calculate_duration(comb[0], comb[1], comb[2])\n            duration2 = calculate_duration(a-comb[0], b-comb[1], c-comb[2])\n            diff = abs(duration1 - duration2)\n            if diff < min_diff:\n                min_diff = diff\n        \n        print(min_diff)\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Find and output the minimal possible difference in minutes between the concerts durations\nfind_minimal_difference(t, test_cases)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 38)"}, "Round_1": {"code": "import itertools\n\n# Function to calculate the total duration of a concert\ndef calculate_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        durations = [calculate_duration(a, b, c), 0]\n        min_diff = float('inf')\n        \n        for comb in itertools.product(range(a+1), range(b+1), range(c+1)):\n            duration1 = calculate_duration(comb[0], comb[1], comb[2])\n            duration2 = calculate_duration(a-comb[0], b-comb[1], c-comb[2])\n            diff = abs(duration1 - duration2)\n            if diff < min_diff:\n                min_diff = diff\n        \n        print(min_diff)\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Find and output the minimal possible difference in minutes between the concerts durations\nfind_minimal_difference(t, test_cases)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the possible combinations of songs for each concert\",\n    \"Calculate the duration of each concert for each combination\",\n    \"Find the combination that minimizes the absolute difference in durations between the concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"Step 2\": \"Generate all possible combinations of songs for each concert\",\n    \"Step 3\": \"Calculate the duration of each concert for each combination by summing the durations of the songs in the combination\",\n    \"Step 4\": \"Find the combination that minimizes the absolute difference in durations between the concerts\",\n    \"Step 5\": \"Output the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'durations': The duration of each song in minutes.\n    'concerts': Events where songs are performed.\n    Explanation: The core concept involves distributing songs of different durations into two concerts to minimize the absolute difference in durations between the concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': Indicates the goal of minimizing the absolute difference in durations between the concerts.\n    Explanation: The algorithm should aim to reduce the difference in durations between the two concerts as much as possible.\n\n# [code logic]\n    The steps should be implemented sequentially as they involve calculations and comparisons at each stage.\n\n# [edge case] \n    1 1 1 = 0\n    Explanation: In this case, one-minute, two-minute, and three-minute songs are distributed such that the difference in concert durations is minimized.\n    2 1 3 = 1\n    Explanation: By distributing the songs strategically, the difference in concert durations is minimized to 1 minute.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)", "Round_0": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(2**3):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        \n        for j in range(3):\n            if i & (1 << j):\n                duration_concert1 += (j+1)\n            else:\n                duration_concert2 += (j+1)\n        \n        min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(calculate_min_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 32)"}, "Round_1": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(2**3):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        \n        for j in range(3):\n            if i & (1 << j):\n                duration_concert1 += (j+1)\n            else:\n                duration_concert2 += (j+1)\n        \n        min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(calculate_min_difference(a, b, c))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the possible combinations of distributing songs into two concerts\",\n    \"Calculate the duration of each possible combination\",\n    \"Find the combination with the minimal possible difference in durations between the concerts\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible combinations of distributing songs into two concerts\",\n    \"step_3\": \"Calculate the duration of each combination by summing the durations of songs in each concert\",\n    \"step_4\": \"Find the combination with the minimal possible difference in durations between the concerts\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs into two concerts'\n    Explanation: The core concept is to divide the songs into two concerts in a way that minimizes the difference in total duration between the concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': means that we need to minimize the absolute difference in durations between the concerts\n\n# [code logic]\n    The steps should be implemented sequentially as they involve calculations and comparisons that depend on previous results.\n\n# [edge case] \n    Case 1: 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    Case 2: 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    Case 3: 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same total duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of distributing songs and calculating the difference in durations covers all scenarios.", "Round_0": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Calculate the minimum difference by trying all possible combinations\n    min_diff = float('inf')\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                diff = abs(concert1_duration - concert2_duration)\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Calculate the minimum difference by trying all possible combinations\n    min_diff = float('inf')\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                diff = abs(concert1_duration - concert2_duration)\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the possible combinations of songs for each concert\",\n    \"Calculate the duration of each concert for each combination\",\n    \"Find the combination that minimizes the absolute difference in durations between the concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"Step 2\": \"Generate all possible combinations of songs for each concert\",\n    \"Step 3\": \"Calculate the duration of each concert for each combination by summing the durations of the songs in the combination\",\n    \"Step 4\": \"Find the combination that minimizes the absolute difference in durations between the concerts\",\n    \"Step 5\": \"Output the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'durations': The duration of each song in minutes.\n    'concerts': Events where songs are performed.\n    Explanation: The core concept involves distributing songs of different durations into two concerts to minimize the absolute difference in durations between the concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': Indicates the goal of minimizing the absolute difference in durations between the concerts.\n    Explanation: The algorithm should aim to reduce the difference in durations between the two concerts as much as possible.\n\n# [code logic]\n    The steps should be implemented sequentially as they involve calculations and comparisons.\n    Step 1: Calculate the total duration of all songs by multiplying the number of songs by their respective durations.\n    Step 2: Generate all possible combinations of songs for each concert.\n    Step 3: Calculate the duration of each concert for each combination by summing the durations of the songs in the combination.\n    Step 4: Find the combination that minimizes the absolute difference in durations between the concerts.\n    Step 5: Output the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    Case 1: 1 1 1\n    Expected Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    Case 2: 2 1 3\n    Expected Output: 1\n    Explanation: Luntik can include two one-minute songs, a two-minute song, and a three-minute song into the first concert, and two three-minute songs into the second concert. The difference will be |7-6| = 1.\n    \n    Case 3: 5 5 5\n    Expected Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The algorithm should be able to handle different combinations of songs and calculate the minimal difference in durations effectively.", "Round_0": {"code": "def min_difference_between_concerts(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        if total_duration % 2 == 0:\n            print(0)\n        else:\n            if a == b == c == 1:\n                print(1)\n            else:\n                if a == b == c:\n                    print(0)\n                else:\n                    if half_duration % 2 == 0:\n                        print(0)\n                    else:\n                        print(1)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output\nmin_difference_between_concerts(t, test_cases)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 36)"}, "Round_1": {"code": "def min_difference_between_concerts(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        if total_duration % 2 == 0:\n            print(0)\n        else:\n            if a == b == c == 1:\n                print(1)\n            else:\n                if a == b == c:\n                    print(0)\n                else:\n                    if half_duration % 2 == 0:\n                        print(0)\n                    else:\n                        print(1)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output\nmin_difference_between_concerts(t, test_cases)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the possible combinations of songs for each concert\",\n    \"Calculate the duration of each concert for each combination\",\n    \"Find the combination that minimizes the absolute difference in durations between the concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"Step 2\": \"Generate all possible combinations of songs for each concert\",\n    \"Step 3\": \"Calculate the duration of each concert for each combination by summing the durations of the songs in the combination\",\n    \"Step 4\": \"Find the combination that minimizes the absolute difference in durations between the concerts\",\n    \"Step 5\": \"Output the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'durations': The duration of each song in minutes.\n    'concerts': Events where songs are performed.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': Indicates the goal of minimizing the absolute difference in durations between the concerts.\n\n# [code logic]\n    The steps should be implemented sequentially as they involve calculations and comparisons.\n    - Calculate the total duration of all songs.\n    - Generate all possible combinations of songs for each concert.\n    - Calculate the duration of each concert for each combination.\n    - Find the combination that minimizes the absolute difference in durations between the concerts.\n    - Output the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    1. 1 1 1\n       Expected Output: 0\n       Explanation: Luntik can distribute one-minute, two-minute, and three-minute songs evenly between the two concerts, resulting in a difference of 0 minutes.\n       \n    2. 2 1 3\n       Expected Output: 1\n       Explanation: Luntik can distribute the songs in a way that the first concert has a duration of 7 minutes and the second concert has a duration of 6 minutes, resulting in a difference of 1 minute.\n       \n    3. 5 5 5\n       Expected Output: 0\n       Explanation: Luntik can evenly distribute all songs between the two concerts, resulting in an equal duration for both concerts and a difference of 0 minutes.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers the scenarios effectively.", "Round_0": {"code": "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        min_diff = abs(half_duration - (a + 2*b))\n        if total_duration % 2 == 1:\n            min_diff = min(min_diff, abs(half_duration + 1 - (a + 2*b)))\n        \n        print(min_diff)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output\ncalculate_minimal_difference(t, test_cases)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 28)"}, "Round_1": {"code": "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        min_diff = abs(half_duration - (a + 2*b))\n        if total_duration % 2 == 1:\n            min_diff = min(min_diff, abs(half_duration + 1 - (a + 2*b)))\n        \n        print(min_diff)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output\ncalculate_minimal_difference(t, test_cases)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs for each test case\",\n    \"Distribute the songs into two concerts with the smallest possible difference in durations\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases (t)\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs (a, b, c)\",\n    \"Step 3\": \"Calculate the total duration of all songs for the test case (total_duration = a + 2*b + 3*c)\",\n    \"Step 4\": \"Distribute the songs into two concerts with the smallest possible difference in durations\",\n    \"Step 5\": \"Print the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate or divide something among different parts or people\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest possible': means the minimum or least difference between the durations of the two concerts\n\n# [code logic]\n    The steps 3 and 4 should be implemented simultaneously as they are interdependent. \n    To distribute the songs with the smallest possible difference, we can sort the songs in descending order of duration (3-minute songs first, then 2-minute, then 1-minute). \n    Then, we can start allocating the songs to the concerts one by one until we reach the total duration of songs divided by 2. \n    The difference between the total duration of the two concerts will be the minimal possible difference.\n\n# [edge case] \n    1 1 1\n    Output: 0\n    Explanation: Since there is only one song of each duration, they can be evenly distributed between the two concerts resulting in 0 difference.\n    \n    2 1 3\n    Output: 1\n    Explanation: The total duration is 2 + 2 + 3*3 = 11. We can distribute the songs as [3, 3, 2, 2] and [3, 1, 1] resulting in a difference of 1.\n    \n    5 5 5\n    Output: 0\n    Explanation: Each concert can have 5 three-minute songs, resulting in an equal distribution and 0 difference.\n    \n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == b == c:\n            print(0)\n        elif a == b == c == 1:\n            print(0)\n        (other code)\n\nNO", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs for the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Distribute the songs into two concerts with the smallest possible difference in durations\n    songs = [(1, a), (2, b), (3, c)]\n    songs.sort(key=lambda x: x[0], reverse=True)\n    \n    concert1 = []\n    concert2 = []\n    total_concert1 = 0\n    total_concert2 = 0\n    \n    for song in songs:\n        if total_concert1 <= total_duration // 2:\n            concert1.extend([song[0]] * song[1])\n            total_concert1 += song[0] * song[1]\n        else:\n            concert2.extend([song[0]] * song[1])\n            total_concert2 += song[0] * song[1]\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(abs(total_concert1 - total_concert2))\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs for the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Distribute the songs into two concerts with the smallest possible difference in durations\n    songs = [(1, a), (2, b), (3, c)]\n    songs.sort(key=lambda x: x[0], reverse=True)\n    \n    concert1 = []\n    concert2 = []\n    total_concert1 = 0\n    total_concert2 = 0\n    \n    for song in songs:\n        if total_concert1 <= total_duration // 2:\n            concert1.extend([song[0]] * song[1])\n            total_concert1 += song[0] * song[1]\n        else:\n            concert2.extend([song[0]] * song[1])\n            total_concert2 += song[0] * song[1]\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(abs(total_concert1 - total_concert2))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs for each test case\",\n    \"Distribute the songs into two concerts with the smallest possible difference in durations\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs\",\n    \"Step 3\": \"Calculate the total duration of all songs for the test case\",\n    \"Step 4\": \"Distribute the songs into two concerts with the smallest possible difference in durations\",\n    \"Step 5\": \"Print the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate or divide the songs into two concerts with the smallest possible difference in durations\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest possible': means to find the minimal difference in minutes between the concerts durations\n\n# [code logic]\n    The steps 3 and 4 should be implemented simultaneously as they are interdependent. \n    To distribute the songs with the smallest possible difference, we can sort the songs by their durations and then greedily assign them to the concerts starting from the longest songs to the shortest songs until the difference is minimized.\n\n# [edge case] \n    1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally into two concerts, resulting in 0 difference in durations.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of sorting and greedy assignment should cover all scenarios.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs for the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Distribute the songs into two concerts with the smallest possible difference in durations\n    songs = [a, b, c]\n    songs.sort(reverse=True)  # Sort the songs by duration in descending order\n    \n    concert1 = []\n    concert2 = []\n    diff = 0\n    \n    for song in songs:\n        if sum(concert1) <= sum(concert2):\n            concert1.append(song)\n        else:\n            concert2.append(song)\n    \n    diff = abs(sum(concert1) - sum(concert2))\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(diff)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs for the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Distribute the songs into two concerts with the smallest possible difference in durations\n    songs = [a, b, c]\n    songs.sort(reverse=True)  # Sort the songs by duration in descending order\n    \n    concert1 = []\n    concert2 = []\n    diff = 0\n    \n    for song in songs:\n        if sum(concert1) <= sum(concert2):\n            concert1.append(song)\n        else:\n            concert2.append(song)\n    \n    diff = abs(sum(concert1) - sum(concert2))\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(diff)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of each concert based on the given number of one-minute, two-minute, and three-minute songs\",\n    \"Find all possible combinations of songs for each concert\",\n    \"Calculate the absolute difference in durations between the two concerts\",\n    \"Identify the combination of songs that results in the smallest absolute difference in durations\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Parse the input to get the number of test cases\",\n    \"step_2\": \"For each test case, calculate the total duration of each concert\",\n    \"step_3\": \"Generate all possible combinations of songs for each concert\",\n    \"step_4\": \"Calculate the absolute difference in durations between the two concerts for each combination\",\n    \"step_5\": \"Identify the combination that results in the smallest absolute difference in durations\",\n    \"step_6\": \"Output the minimal possible difference in minutes between the concerts durations for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'duration of the concert': The total time taken for all songs in a concert.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': Indicates the need to find the minimum absolute difference in durations between concerts.\n\n# [code logic]\n    There are no steps that should be implemented simultaneously. Each step should be executed sequentially as outlined in the plan.\n\n# [edge case] \n    Test Case 1:\n    Input: 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    Test Case 2:\n    Input: 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    Test Case 3:\n    Input: 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally among the concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers the scenarios effectively.", "Round_0": {"code": "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        min_diff = abs((a * 1 + b * 2 + c * 3) - max(a * 1 + b * 2 + c * 3, (a * 2 + b * 1 + c * 3)))\n        print(min_diff)\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Calculate and output minimal possible difference\ncalculate_minimal_difference(t, test_cases)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 22)"}, "Round_1": {"code": "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        min_diff = abs((a * 1 + b * 2 + c * 3) - max(a * 1 + b * 2 + c * 3, (a * 2 + b * 1 + c * 3)))\n        print(min_diff)\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Calculate and output minimal possible difference\ncalculate_minimal_difference(t, test_cases)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs for each test case\",\n    \"Distribute the songs into two concerts with the smallest possible difference in durations\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs\",\n    \"Step 3\": \"Calculate the total duration of all songs for each test case\",\n    \"Step 4\": \"Distribute the songs into two concerts with the smallest possible difference in durations\",\n    \"Step 5\": \"Print the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate or divide the songs into two concerts with the smallest possible difference in durations\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': means to find the minimal possible difference in minutes between the concerts durations\n\n# [code logic]\n    The steps 3 and 4 should be implemented simultaneously as they are interdependent. \n    To calculate the total duration of all songs for each test case, sum the products of the number of songs with their respective durations. \n    To distribute the songs into two concerts with the smallest possible difference in durations, you can use a dynamic programming approach to find the optimal solution.\n\n# [edge case] \n    1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally into two concerts, resulting in 0 difference in durations.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should cover all scenarios.", "Round_0": {"code": "def distribute_songs(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        dp = [False] * (half_duration + 1)\n        dp[0] = True\n        \n        for x in [a, b, c]:\n            for j in range(half_duration, x-1, -1):\n                dp[j] |= dp[j - x]\n        \n        min_diff = total_duration\n        for j in range(half_duration+1):\n            if dp[j]:\n                min_diff = min(min_diff, total_duration - 2*j)\n        \n        print(min_diff)\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Call the function with input\ndistribute_songs(t, test_cases)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 36)"}, "Round_1": {"code": "def distribute_songs(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        dp = [False] * (half_duration + 1)\n        dp[0] = True\n        \n        for x in [a, b, c]:\n            for j in range(half_duration, x-1, -1):\n                dp[j] |= dp[j - x]\n        \n        min_diff = total_duration\n        for j in range(half_duration+1):\n            if dp[j]:\n                min_diff = min(min_diff, total_duration - 2*j)\n        \n        print(min_diff)\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Call the function with input\ndistribute_songs(t, test_cases)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of each concert based on the given number of one-minute, two-minute, and three-minute songs\",\n    \"Find all possible combinations of songs for each concert\",\n    \"Calculate the absolute difference in durations between the two concerts\",\n    \"Identify the combination of songs that results in the smallest absolute difference in durations\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Parse the input to get the number of test cases\",\n    \"step_2\": \"For each test case, calculate the total duration of each concert\",\n    \"step_3\": \"Generate all possible combinations of songs for each concert\",\n    \"step_4\": \"Calculate the absolute difference in durations between the two concerts for each combination\",\n    \"step_5\": \"Identify the combination that results in the smallest absolute difference in durations\",\n    \"step_6\": \"Output the minimal possible difference in minutes between the concerts durations for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'duration of the concert': The total time taken for all songs in a concert.\n    'absolute difference': The positive difference between two values without considering direction.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': Indicates the need to find the minimum value.\n\n# [code logic]\n    There are no steps that should be implemented simultaneously. Each step should be executed sequentially as outlined in the plan.\n\n# [edge case] \n    Test Case 1:\n    Input: 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    Test Case 2:\n    Input: 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs, a two-minute song, and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The absolute difference is |7-6| = 1.\n    \n    Test Case 3:\n    Input: 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally among the concerts, resulting in the smallest absolute difference of 0.\n    \n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        - Consider cases where the number of songs in each category is not equal.\n        - Handle scenarios where the total number of songs is odd to ensure fair distribution.\n        - Implement logic to handle cases where the number of test cases is at the boundaries (1 or 1000).", "Round_0": {"code": "import itertools\n\n# Function to calculate the total duration of a concert\ndef calculate_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(a, b, c):\n    total_songs = a + b + c\n    min_diff = float('inf')\n    \n    # Generate all possible combinations of songs for each concert\n    for i in range(total_songs // 2 + 1):\n        for combination in itertools.combinations(range(total_songs), i):\n            concert1_duration = sum([1 if x in combination else 0 for x in range(total_songs)])  # Calculate duration of concert 1\n            concert2_duration = total_songs - concert1_duration  # Calculate duration of concert 2\n            diff = abs(calculate_duration(concert1_duration, b, c) - calculate_duration(concert2_duration, b, c))\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(find_minimal_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 35)"}, "Round_1": {"code": "import itertools\n\n# Function to calculate the total duration of a concert\ndef calculate_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(a, b, c):\n    total_songs = a + b + c\n    min_diff = float('inf')\n    \n    # Generate all possible combinations of songs for each concert\n    for i in range(total_songs // 2 + 1):\n        for combination in itertools.combinations(range(total_songs), i):\n            concert1_duration = sum([1 if x in combination else 0 for x in range(total_songs)])  # Calculate duration of concert 1\n            concert2_duration = total_songs - concert1_duration  # Calculate duration of concert 2\n            diff = abs(calculate_duration(concert1_duration, b, c) - calculate_duration(concert2_duration, b, c))\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(find_minimal_difference(a, b, c))\n"}}], "scores": [], "pass_results": [false, false, true, false, false, false, false, true, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 178, "prompt": "Luntik has decided to try singing. He has a songs that last one minute, b songs that last two minutes and c songs that last three minutes. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "rephrase_one", "save_node": true, "parent_index": 5}
