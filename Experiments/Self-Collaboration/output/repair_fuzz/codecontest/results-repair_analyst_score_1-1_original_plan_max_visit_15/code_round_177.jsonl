{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "repair_prompt": ["Luntik has decided to try singing and he has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Luntik wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Luntik has one-minute, two-minute, and three-minute songs that he wants to distribute into two concerts, aiming for the smallest possible difference in duration between the concerts.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        min_diff = abs((a * 1 + b * 2 + c * 3) - max(a, b, c) * 3)\n        print(min_diff)\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Calculate and output minimal possible difference\ncalculate_minimal_difference(t, test_cases)\n\nmain()", "completions": ["# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs in the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Distribute the songs into two concerts to minimize the difference in duration between them\n    songs = [a, b, c]\n    songs.sort(reverse=True)\n    \n    concert1 = 0\n    concert2 = 0\n    for i, song in enumerate(songs):\n        if i % 2 == 0:\n            concert1 += song\n        else:\n            concert2 += song\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(abs(concert1 - concert2))\n\nmain()", "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs in the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Distribute the songs into two concerts to minimize the difference in duration between them\n    # We can distribute the songs in a way that minimizes the difference by trying all possible combinations\n    min_diff = float('inf')\n    for i in range(8):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        for j in range(3):\n            if i & (1 << j):\n                duration_concert1 += (j + 1) * [a, b, c][j]\n            else:\n                duration_concert2 += (j + 1) * [a, b, c][j]\n        min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n\nmain()", "t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    if a == b and b == c:\n        print(0)\n    elif a == b or b == c or a == c:\n        print(1)\n    else:\n        print(0)\n\nmain()", "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the input for each test case\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Calculate the minimal possible difference in minutes between the concerts durations\n    # The difference will be the absolute difference between half of the total duration and the total duration\n    min_diff = abs(total_duration // 2 - total_duration)\n    \n    # Output the result for each test case\n    print(min_diff)\n\nmain()", "t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    total_duration = a + 2*b + 3*c\n    \n    min_diff = float('inf')\n    \n    for i in range(8):\n        duration_1 = 0\n        duration_2 = 0\n        \n        if i & 1:\n            duration_1 += a\n        else:\n            duration_2 += a\n        \n        if i & 2:\n            duration_1 += b\n        else:\n            duration_2 += b\n        \n        if i & 4:\n            duration_1 += c\n        else:\n            duration_2 += c\n        \n        min_diff = min(min_diff, abs(duration_1 - duration_2))\n    \n    print(min_diff)\n\nmain()", "import itertools\n\n# Function to calculate the total duration of a concert\ndef calculate_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the combination with the smallest absolute difference\ndef find_min_difference(a, b, c):\n    total_songs = a + b + c\n    min_diff = float('inf')\n    \n    for comb in itertools.product(range(a+1), range(b+1), range(c+1)):\n        duration_concert1 = calculate_duration(comb[0], comb[1], comb[2])\n        duration_concert2 = calculate_duration(a-comb[0], b-comb[1], c-comb[2])\n        diff = abs(duration_concert1 - duration_concert2)\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_min_difference(a, b, c)\n    print(result)\n\nmain()", "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Find the minimum difference by trying all possible combinations\n    min_diff = float('inf')\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                diff = abs(concert1_duration - concert2_duration)\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n\nmain()", "t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    total_duration = a + 2*b + 3*c\n    \n    min_diff = float('inf')\n    \n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n    \n    print(min_diff)\n\nmain()", "import itertools\n\n# Function to calculate the total duration of a concert\ndef calculate_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        durations = [calculate_duration(a, b, c), 0]\n        for comb in itertools.product(range(a+1), range(b+1), range(c+1)):\n            durations[1] = max(durations[1], calculate_duration(comb[0], comb[1], comb[2]))\n        print(abs(durations[0] - durations[1]))\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Find and output the minimal possible difference in minutes between the concerts durations\nfind_minimal_difference(t, test_cases)\n\nmain()", "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        min_diff = abs((a * 1 + b * 2 + c * 3) - max(a, b, c) * 3)\n        print(min_diff)\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Calculate and output minimal possible difference\ncalculate_minimal_difference(t, test_cases)\n\nmain()"], "session_history": {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of each concert based on the given number of one-minute, two-minute, and three-minute songs\",\n    \"Find all possible combinations of songs for each concert\",\n    \"Calculate the absolute difference in duration between the two concerts\",\n    \"Identify the combination of songs that results in the smallest absolute difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Parse the input to get the number of test cases\",\n    \"step_2\": \"For each test case, calculate the total duration of each concert\",\n    \"step_3\": \"Generate all possible combinations of songs for each concert\",\n    \"step_4\": \"Calculate the absolute difference in duration between the two concerts for each combination\",\n    \"step_5\": \"Identify the combination that results in the smallest absolute difference in duration\",\n    \"step_6\": \"Output the minimal possible difference in minutes between the concerts durations for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'duration of the concert': The total time taken for all songs in a concert.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': Indicates the minimum difference in duration between concerts.\n\n# [code logic]\n    The steps should be implemented sequentially as they involve calculations and comparisons.\n\n# [edge case] \n    Input: \n    1 1 1\n    Output: \n    0\n    Explanation: \n    In this case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n\n    Input: \n    2 1 3\n    Output: \n    1\n    Explanation: \n    Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n    Input: \n    5 5 5\n    Output: \n    0\n    Explanation: \n    Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        min_diff = abs((a * 1 + b * 2 + c * 3) - max(a, b, c) * 3)\n        print(min_diff)\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Calculate and output minimal possible difference\ncalculate_minimal_difference(t, test_cases)\n", "report": "The compilation output of the preceding code is: closing parenthesis ']' does not match opening parenthesis '(' (<string>, line 22)"}, "Round_1": {"code": "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        min_diff = abs((a * 1 + b * 2 + c * 3) - max(a, b, c) * 3)\n        print(min_diff)\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Calculate and output minimal possible difference\ncalculate_minimal_difference(t, test_cases)\n"}}, "session_historys": [{"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs in each test case\",\n    \"Distribute the songs into two concerts to minimize the difference in duration between them\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs\",\n    \"Step 3\": \"Calculate the total duration of all songs in the test case\",\n    \"Step 4\": \"Distribute the songs into two concerts to minimize the difference in duration between them\",\n    \"Step 5\": \"Print the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate or divide the songs into two concerts to minimize the difference in duration between them\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest possible': means to find the minimum difference in duration between the concerts\n\n# [code logic]\n    The steps 3 and 4 should be implemented simultaneously as they are interdependent. \n    To calculate the total duration of all songs, sum the product of each song duration with its count. \n    To distribute the songs into two concerts, sort the songs by duration, then allocate the longest songs to each concert alternately until all songs are distributed.\n\n# [edge case] \n    1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally into two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided can handle all scenarios.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs in the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Distribute the songs into two concerts to minimize the difference in duration between them\n    songs = [a, b, c]\n    songs.sort(reverse=True)\n    \n    concert1 = 0\n    concert2 = 0\n    for i, song in enumerate(songs):\n        if i % 2 == 0:\n            concert1 += song\n        else:\n            concert2 += song\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(abs(concert1 - concert2))\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs in the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Distribute the songs into two concerts to minimize the difference in duration between them\n    songs = [a, b, c]\n    songs.sort(reverse=True)\n    \n    concert1 = 0\n    concert2 = 0\n    for i, song in enumerate(songs):\n        if i % 2 == 0:\n            concert1 += song\n        else:\n            concert2 += song\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(abs(concert1 - concert2))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs in each test case\",\n    \"Distribute the songs into two concerts to minimize the difference in duration between them\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs\",\n    \"Step 3\": \"Calculate the total duration of all songs in the test case\",\n    \"Step 4\": \"Distribute the songs into two concerts to minimize the difference in duration between them\",\n    \"Step 5\": \"Print the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate or divide the songs into two concerts to minimize the difference in duration between them\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest possible': means to find the minimum difference in duration between the concerts\n\n# [code logic]\n    The steps 3 and 4 should be implemented simultaneously.\n    \"Calculate the total duration of all songs in the test case\",\n    \"Distribute the songs into two concerts to minimize the difference in duration between them\"\n    This could be done by calculating the total duration of all songs, then distributing the songs in a way that minimizes the difference in duration between the two concerts.\n\n# [edge case] \n    1 1 1\n    Output: 0\n    Explanation: In this case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally into two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of distributing the songs to minimize the difference in duration already covers all scenarios.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs in the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Distribute the songs into two concerts to minimize the difference in duration between them\n    # We can distribute the songs in a way that minimizes the difference by trying all possible combinations\n    min_diff = float('inf')\n    for i in range(8):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        for j in range(3):\n            if i & (1 << j):\n                duration_concert1 += (j + 1) * [a, b, c][j]\n            else:\n                duration_concert2 += (j + 1) * [a, b, c][j]\n        min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs in the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Distribute the songs into two concerts to minimize the difference in duration between them\n    # We can distribute the songs in a way that minimizes the difference by trying all possible combinations\n    min_diff = float('inf')\n    for i in range(8):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        for j in range(3):\n            if i & (1 << j):\n                duration_concert1 += (j + 1) * [a, b, c][j]\n            else:\n                duration_concert2 += (j + 1) * [a, b, c][j]\n        min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs in each test case\",\n    \"Distribute the songs into two concerts to minimize the difference in duration between them\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs\",\n    \"Step 3\": \"Calculate the total duration of all songs in the test case\",\n    \"Step 4\": \"Distribute the songs into two concerts to minimize the difference in duration between them\",\n    \"Step 5\": \"Print the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate or divide the songs into two concerts to minimize the difference in duration between them\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest possible': means to find the minimum difference in duration between the concerts\n\n# [code logic]\n    The steps 3 and 4 should be implemented simultaneously as they are interdependent. \n    To calculate the total duration of all songs, sum the product of each song duration with its count. \n    To distribute the songs into two concerts, sort the songs by duration, then distribute the longest songs to balance the duration.\n\n# [edge case] \n    1 1 1\n    Output: 0\n    Explanation: All songs can be distributed equally between the two concerts, resulting in a 0-minute difference.\n    2 1 3\n    Output: 1\n    Explanation: Distributing songs (1, 1, 2) and (3) results in a 1-minute difference.\n    5 5 5\n    Output: 0\n    Explanation: All songs can be distributed equally between the two concerts, resulting in a 0-minute difference.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == b and b == c:\n            print(0)\n        elif a == b or b == c or a == c:\n            print(1)\n        else:\n            print(0)", "Round_0": {"code": "t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    if a == b and b == c:\n        print(0)\n    elif a == b or b == c or a == c:\n        print(1)\n    else:\n        print(0)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 18)"}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    if a == b and b == c:\n        print(0)\n    elif a == b or b == c or a == c:\n        print(1)\n    else:\n        print(0)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Determine the total duration of all songs\",\n    \"Find all possible combinations of distributing songs into two concerts\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Find the minimum difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible combinations of distributing songs into two concerts\",\n    \"step_3\": \"Calculate the duration of each concert for each combination\",\n    \"step_4\": \"Find the minimum difference in duration between the two concerts\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs into two concerts'\n    Explanation: The core concept is to divide the songs into two concerts in a way that minimizes the difference in duration between the concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': means to minimize the difference in duration between the concerts\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve different calculations and comparisons to find the minimum difference in duration.\n\n# [edge case] \n    1. 1 1 1\n       Expected output: 0\n       Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be 0.\n       \n    2. 2 1 3\n       Expected output: 1\n       Explanation: Luntik can include two one-minute songs, a two-minute song, and a three-minute song into the first concert, and two three-minute songs into the second concert. The difference will be 1.\n       \n    3. 5 5 5\n       Expected output: 0\n       Explanation: Luntik can distribute all songs equally into both concerts, resulting in 0 difference in duration.\n       \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to find the minimum difference in duration between the concerts covers all scenarios.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the input for each test case\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Calculate the minimal possible difference in minutes between the concerts durations\n    # The difference will be the absolute difference between half of the total duration and the total duration\n    min_diff = abs(total_duration // 2 - total_duration)\n    \n    # Output the result for each test case\n    print(min_diff)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 24)"}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the input for each test case\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Calculate the minimal possible difference in minutes between the concerts durations\n    # The difference will be the absolute difference between half of the total duration and the total duration\n    min_diff = abs(total_duration // 2 - total_duration)\n    \n    # Output the result for each test case\n    print(min_diff)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Determine the total duration of all songs\",\n    \"Find all possible combinations of distributing songs into two concerts\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Find the minimum difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible combinations of distributing songs into two concerts\",\n    \"step_3\": \"Calculate the duration of each concert for each combination\",\n    \"step_4\": \"Find the minimum difference in duration between the two concerts\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs into two concerts'\n    Explanation: The core concept is to divide the songs into two concerts in a way that minimizes the difference in duration between the concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': means that we need to minimize the difference in duration between the concerts\n\n# [code logic]\n    The steps should be implemented sequentially as they involve different calculations and comparisons to find the minimum difference in duration.\n\n# [edge case] \n    1. 1 1 1\n       Expected output: 0\n       Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    2. 2 1 3\n       Expected output: 1\n       Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    3. 5 5 5\n       Expected output: 0\n       Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to find the minimum difference in duration between the concerts covers all scenarios.", "Round_0": {"code": "t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    total_duration = a + 2*b + 3*c\n    \n    min_diff = float('inf')\n    \n    for i in range(8):\n        duration_1 = 0\n        duration_2 = 0\n        \n        if i & 1:\n            duration_1 += a\n        else:\n            duration_2 += a\n        \n        if i & 2:\n            duration_1 += b\n        else:\n            duration_2 += b\n        \n        if i & 4:\n            duration_1 += c\n        else:\n            duration_2 += c\n        \n        min_diff = min(min_diff, abs(duration_1 - duration_2))\n    \n    print(min_diff)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    total_duration = a + 2*b + 3*c\n    \n    min_diff = float('inf')\n    \n    for i in range(8):\n        duration_1 = 0\n        duration_2 = 0\n        \n        if i & 1:\n            duration_1 += a\n        else:\n            duration_2 += a\n        \n        if i & 2:\n            duration_1 += b\n        else:\n            duration_2 += b\n        \n        if i & 4:\n            duration_1 += c\n        else:\n            duration_2 += c\n        \n        min_diff = min(min_diff, abs(duration_1 - duration_2))\n    \n    print(min_diff)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of each concert based on the given number of one-minute, two-minute, and three-minute songs\",\n    \"Find all possible combinations of songs for each concert\",\n    \"Calculate the absolute difference in durations between the two concerts\",\n    \"Identify the combination of songs that results in the smallest absolute difference in durations\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Parse the input to get the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case\",\n    \"step_2\": \"For each test case, calculate the total duration of each concert\",\n    \"step_3\": \"Generate all possible combinations of songs for each concert\",\n    \"step_4\": \"Calculate the absolute difference in durations between the two concerts for each combination\",\n    \"step_5\": \"Identify the combination of songs that results in the smallest absolute difference in durations\",\n    \"step_6\": \"Output the minimal possible difference in minutes between the concerts durations for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'duration of the concert': The total time taken for all songs in a concert.\n    'absolute difference': The positive difference between two values without considering their sign.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': Indicates the need to find the minimum value.\n\n# [code logic]\n    The steps should be implemented sequentially as they involve calculations and comparisons that depend on previous results.\n\n# [edge case] \n    Test Case 1:\n    Input: 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be 0.\n    \n    Test Case 2:\n    Input: 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs, a two-minute song, and a three-minute song into the first concert, and two three-minute songs into the second concert. The difference will be |7-6| = 1.\n    \n    Test Case 3:\n    Input: 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        - Consider cases where the number of songs for each duration is not equal.\n        - Handle scenarios where the total number of songs is odd to ensure fair distribution.\n        - Implement logic to find the combination with the smallest absolute difference.", "Round_0": {"code": "import itertools\n\n# Function to calculate the total duration of a concert\ndef calculate_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the combination with the smallest absolute difference\ndef find_min_difference(a, b, c):\n    total_songs = a + b + c\n    min_diff = float('inf')\n    \n    for comb in itertools.product(range(a+1), range(b+1), range(c+1)):\n        duration_concert1 = calculate_duration(comb[0], comb[1], comb[2])\n        duration_concert2 = calculate_duration(a-comb[0], b-comb[1], c-comb[2])\n        diff = abs(duration_concert1 - duration_concert2)\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_min_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 34)"}, "Round_1": {"code": "import itertools\n\n# Function to calculate the total duration of a concert\ndef calculate_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the combination with the smallest absolute difference\ndef find_min_difference(a, b, c):\n    total_songs = a + b + c\n    min_diff = float('inf')\n    \n    for comb in itertools.product(range(a+1), range(b+1), range(c+1)):\n        duration_concert1 = calculate_duration(comb[0], comb[1], comb[2])\n        duration_concert2 = calculate_duration(a-comb[0], b-comb[1], c-comb[2])\n        diff = abs(duration_concert1 - duration_concert2)\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_min_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Determine the total duration of all songs\",\n    \"Find all possible combinations of distributing songs into two concerts\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Find the minimum difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible combinations of distributing songs into two concerts\",\n    \"step_3\": \"Calculate the duration of each concert for each combination\",\n    \"step_4\": \"Calculate the absolute difference in duration between the two concerts for each combination\",\n    \"step_5\": \"Find the combination with the minimum difference in duration\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs into two concerts'\n    Explanation: The core concept is to divide the songs into two concerts in a way that minimizes the absolute difference in durations between the concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': means finding the minimum difference in minutes between the concerts durations\n\n# [code logic]\n    The steps in the plan should be implemented step by step as they are sequential and do not require simultaneous implementation.\n\n# [edge case] \n    1. 1 1 1\n       Output: 0\n       Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    2. 2 1 3\n       Output: 1\n       Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    3. 5 5 5\n       Output: 0\n       Explanation: Luntik can distribute the songs equally into two concerts, resulting in the same duration for both concerts.\n       \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Find the minimum difference by trying all possible combinations\n    min_diff = float('inf')\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                diff = abs(concert1_duration - concert2_duration)\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Find the minimum difference by trying all possible combinations\n    min_diff = float('inf')\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                diff = abs(concert1_duration - concert2_duration)\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Determine the total duration of all songs\",\n    \"Find all possible combinations of distributing songs into two concerts\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Find the minimum difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible combinations of distributing songs into two concerts\",\n    \"step_3\": \"Calculate the duration of each concert for each combination\",\n    \"step_4\": \"Calculate the absolute difference in duration between the two concerts for each combination\",\n    \"step_5\": \"Find the combination with the minimum difference in duration\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs into two concerts'\n    Explanation: The core concept is to divide the songs into two concerts in a way that minimizes the difference in duration between the concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': means to minimize the difference in duration between the concerts\n\n# [code logic]\n    The steps in the plan should be implemented step by step as they are not dependent on each other.\n\n# [edge case] \n    1. 1 1 1\n       Output: 0\n       Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    2. 2 1 3\n       Output: 1\n       Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    3. 5 5 5\n       Output: 0\n       Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n       \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    total_duration = a + 2*b + 3*c\n    \n    min_diff = float('inf')\n    \n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n    \n    print(min_diff)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    total_duration = a + 2*b + 3*c\n    \n    min_diff = float('inf')\n    \n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n    \n    print(min_diff)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of each concert based on the given number of one-minute, two-minute, and three-minute songs\",\n    \"Find all possible combinations of songs for each concert\",\n    \"Calculate the absolute difference in durations between the two concerts\",\n    \"Identify the combination of songs that results in the smallest absolute difference in durations\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Parse the input to get the number of test cases\",\n    \"step_2\": \"For each test case, calculate the total duration of each concert\",\n    \"step_3\": \"Generate all possible combinations of songs for each concert\",\n    \"step_4\": \"Calculate the absolute difference in durations between the two concerts for each combination\",\n    \"step_5\": \"Identify the combination that results in the smallest absolute difference in durations\",\n    \"step_6\": \"Output the minimal possible difference in minutes between the concerts durations for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'duration of the concert': The total time taken for all songs in a concert.\n    'absolute difference': The positive difference between two values without considering their sign.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': Indicates the need to find the minimum value.\n\n# [code logic]\n    The steps should be implemented sequentially as they involve calculations and comparisons at each stage.\n\n# [edge case] \n    Test Case 1:\n    Input: 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be 0.\n    \n    Test Case 2:\n    Input: 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs, a two-minute song, and a three-minute song into the first concert, and two three-minute songs into the second concert. The difference will be |7-6| = 1.\n    \n    Test Case 3:\n    Input: 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers the scenarios effectively.", "Round_0": {"code": "import itertools\n\n# Function to calculate the total duration of a concert\ndef calculate_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        durations = [calculate_duration(a, b, c), 0]\n        for comb in itertools.product(range(a+1), range(b+1), range(c+1)):\n            durations[1] = max(durations[1], calculate_duration(comb[0], comb[1], comb[2]))\n        print(abs(durations[0] - durations[1]))\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Find and output the minimal possible difference in minutes between the concerts durations\nfind_minimal_difference(t, test_cases)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 31)"}, "Round_1": {"code": "import itertools\n\n# Function to calculate the total duration of a concert\ndef calculate_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        durations = [calculate_duration(a, b, c), 0]\n        for comb in itertools.product(range(a+1), range(b+1), range(c+1)):\n            durations[1] = max(durations[1], calculate_duration(comb[0], comb[1], comb[2]))\n        print(abs(durations[0] - durations[1]))\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Find and output the minimal possible difference in minutes between the concerts durations\nfind_minimal_difference(t, test_cases)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of each concert based on the given number of one-minute, two-minute, and three-minute songs\",\n    \"Find all possible combinations of songs for each concert\",\n    \"Calculate the absolute difference in duration between the two concerts\",\n    \"Identify the combination of songs that results in the smallest absolute difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Parse the input to get the number of test cases\",\n    \"step_2\": \"For each test case, calculate the total duration of each concert\",\n    \"step_3\": \"Generate all possible combinations of songs for each concert\",\n    \"step_4\": \"Calculate the absolute difference in duration between the two concerts for each combination\",\n    \"step_5\": \"Identify the combination that results in the smallest absolute difference in duration\",\n    \"step_6\": \"Output the minimal possible difference in minutes between the concerts durations for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'duration of the concert': The total time taken for all songs in a concert.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': Indicates the minimum difference in duration between concerts.\n\n# [code logic]\n    The steps should be implemented sequentially as they involve calculations and comparisons.\n\n# [edge case] \n    Input: \n    1 1 1\n    Output: \n    0\n    Explanation: \n    In this case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n\n    Input: \n    2 1 3\n    Output: \n    1\n    Explanation: \n    Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n    Input: \n    5 5 5\n    Output: \n    0\n    Explanation: \n    Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        min_diff = abs((a * 1 + b * 2 + c * 3) - max(a, b, c) * 3)\n        print(min_diff)\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Calculate and output minimal possible difference\ncalculate_minimal_difference(t, test_cases)\n", "report": "The compilation output of the preceding code is: closing parenthesis ']' does not match opening parenthesis '(' (<string>, line 22)"}, "Round_1": {"code": "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        min_diff = abs((a * 1 + b * 2 + c * 3) - max(a, b, c) * 3)\n        print(min_diff)\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Calculate and output minimal possible difference\ncalculate_minimal_difference(t, test_cases)\n"}}], "scores": [], "pass_results": [false, true, false, false, false, false, true, true, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 177, "prompt": "Luntik has decided to try singing and he has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "condense_two2one", "save_node": true, "parent_index": 5}
