{"name": "1622_E. Math Test", "description": "Petya is a math teacher. n of his students has written a test consisting of m questions. For each student, it is known which questions he has answered correctly and which he has not.\n\nIf the student answers the j-th question correctly, he gets p_j points (otherwise, he gets 0 points). Moreover, the points for the questions are distributed in such a way that the array p is a permutation of numbers from 1 to m.\n\nFor the i-th student, Petya knows that he expects to get x_i points for the test. Petya wonders how unexpected the results could be. Petya believes that the surprise value of the results for students is equal to \u2211_{i=1}^{n} |x_i - r_i|, where r_i is the number of points that the i-th student has got for the test.\n\nYour task is to help Petya find such a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 10; 1 \u2264 m \u2264 10^4) \u2014 the number of students and the number of questions, respectively.\n\nThe second line contains n integers x_1, x_2, ..., x_n (0 \u2264 x_i \u2264 (m(m+1))/(2)), where x_i is the number of points that the i-th student expects to get.\n\nThis is followed by n lines, the i-th line contains the string s_i (|s_i| = m; s_{i, j} \u2208 \\{0, 1\\}), where s_{i, j} is 1 if the i-th student has answered the j-th question correctly, and 0 otherwise.\n\nThe sum of m for all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case, print m integers \u2014 a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n010110\n000101\n111111\n\n\nOutput\n\n\n3 1 2 \n2 3 4 1 \n3 1 4 5 2 6 ", "tags": ["bitmasks", "brute force", "greedy"], "difficulty": 11, "id": 1622, "sample_io": [{"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n010110\n000101\n111111\n", "output": ["3 1 2 \n2 3 4 1 \n3 1 4 5 2 6 \n"]}], "test_list": [{"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n3 1 4 5 2 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n2 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0111\n0101\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n001\n100\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["3 2 1\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n8 3 2\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n1 4 2 6 3 5\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n100\n001\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 2 1\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n8 3 2\n010110\n100101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 4 1 6 2 5\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n13 3 2\n010110\n100101\n111101\n", "output": ["3 1 2\n2 3 4 1\n5 2 3 4 1 6\n"]}, {"input": "3\n4 3\n5 1 4 2\n111\n101\n101\n000\n4 4\n16 1 1 11\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n4 1 1 2\n101\n100\n000\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 2\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n2 1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n000110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n2 3 4 5 1 6\n"]}, {"input": "3\n4 3\n3 1 2 2\n110\n100\n101\n100\n4 4\n2 1 0 10\n1001\n0010\n0110\n0101\n3 6\n38 2 8\n010110\n000101\n111001\n", "output": ["3 1 2\n3 1 4 2\n4 2 5 3 1 6\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1101\n0010\n0110\n0101\n3 2\n20 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n2 1\n"]}, {"input": "3\n4 3\n5 1 1 0\n111\n000\n101\n010\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["1 2 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 7\n010110\n000001\n111111\n", "output": ["3 1 2\n2 3 4 1\n4 1 5 2 3 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1101\n0010\n0110\n0111\n3 6\n38 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n3 4 1 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n100\n4 4\n2 4 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 8\n010110\n000101\n111101\n", "output": ["3 1 2\n4 1 2 3\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n2 1 0 10\n1001\n0011\n0110\n0001\n3 6\n38 2 8\n010110\n000101\n111101\n", "output": ["3 1 2\n1 2 4 3\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n001\n110\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 4 7\n010110\n000101\n111101\n", "output": ["3 2 1\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1101\n0010\n0010\n0101\n3 2\n20 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n2 1\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n101\n000\n101\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["2 1 3\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n9 1 4 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 7\n010110\n000100\n111101\n", "output": ["3 1 2\n2 3 4 1\n4 3 5 1 2 6\n"]}, {"input": "3\n4 3\n1 1 2 2\n110\n100\n111\n100\n4 4\n6 2 0 10\n1001\n0011\n0111\n0101\n3 1\n20 3 2\n010110\n000101\n111011\n", "output": ["3 2 1\n1 2 4 3\n1\n"]}, {"input": "3\n4 3\n5 1 2 4\n110\n100\n001\n110\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 4 7\n010110\n000101\n111101\n", "output": ["2 1 3\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 4\n110\n100\n001\n110\n4 4\n0 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 4 7\n010110\n000101\n111101\n", "output": ["2 1 3\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n100\n4 4\n6 3 0 10\n1001\n0110\n0110\n0101\n3 6\n13 3 1\n010110\n100100\n111101\n", "output": ["3 1 2\n2 3 4 1\n6 2 3 4 1 5\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n1 2 0 10\n1101\n0010\n0100\n0111\n3 6\n38 3 7\n010110\n100101\n111101\n", "output": ["3 1 2\n3 4 1 2\n5 2 3 4 1 6\n"]}, {"input": "3\n4 3\n1 1 2 0\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0011\n0111\n0101\n3 1\n20 3 2\n011110\n000101\n111011\n", "output": ["3 1 2\n1 2 4 3\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n000\n4 4\n6 3 0 10\n0001\n0110\n0110\n0101\n3 6\n13 3 1\n010110\n100100\n111101\n", "output": ["2 1 3\n2 3 4 1\n6 2 3 4 1 5\n"]}, {"input": "3\n4 3\n5 1 3 4\n100\n100\n101\n100\n4 4\n12 2 0 10\n1001\n0010\n0111\n0101\n3 1\n20 3 4\n010110\n010101\n111111\n", "output": ["1 2 3\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n3 1 2 2\n110\n000\n100\n100\n4 4\n6 2 1 11\n1001\n0010\n0110\n0101\n3 6\n38 0 7\n110110\n000101\n111101\n", "output": ["3 2 1\n2 3 4 1\n2 3 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n000\n4 4\n6 3 0 1\n0001\n0110\n0110\n0101\n3 6\n13 3 1\n010110\n100100\n111101\n", "output": ["2 1 3\n1 4 3 2\n6 2 3 4 1 5\n"]}, {"input": "3\n4 3\n3 1 3 2\n110\n000\n100\n100\n4 4\n6 2 1 11\n1001\n0010\n0110\n0101\n3 6\n38 0 7\n110110\n000101\n111101\n", "output": ["1 3 2\n2 3 4 1\n2 3 4 5 1 6\n"]}, {"input": "3\n4 3\n0 1 2 1\n110\n100\n100\n101\n4 4\n2 2 0 13\n1101\n0110\n0110\n0101\n3 6\n38 3 12\n010110\n000001\n111101\n", "output": ["3 1 2\n2 3 4 1\n4 2 5 3 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0001\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n2 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 8\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n2 1 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 8\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n2 1 0 10\n1001\n0010\n0110\n0101\n3 6\n38 2 8\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 11\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n10 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n3 1 4 5 2 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1101\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 2\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n101\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 2 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0001\n3 1\n30 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n2 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 12\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 11\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n0 1 2 2\n110\n100\n101\n100\n4 4\n2 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 8\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0110\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0001\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n3 1 2 2\n110\n100\n101\n100\n4 4\n2 1 0 10\n1001\n0010\n0110\n0101\n3 6\n38 2 8\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 11\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1101\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n100\n001\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 2 1\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n1 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0111\n0101\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n101\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 0 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 4 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0001\n3 1\n30 0 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n2 3 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 12\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 4 2\n111\n100\n101\n000\n4 4\n11 1 0 11\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 1 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0001\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 17\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1101\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n1 1 2 2\n110\n101\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0111\n0101\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0001\n3 1\n30 1 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 4 2\n111\n100\n101\n000\n4 4\n11 1 1 11\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 1 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 0 2 2\n111\n100\n101\n000\n4 4\n11 1 0 17\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n100\n000\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 2 1\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 4 2\n111\n100\n101\n000\n4 4\n16 1 1 11\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 1 0\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 1 2\n101\n100\n000\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 2 1\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n13 3 2\n010110\n100101\n111101\n", "output": ["3 1 2\n2 3 4 1\n5 2 3 4 1 6\n"]}, {"input": "3\n4 3\n5 1 1 0\n111\n000\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n4 1 1 2\n101\n100\n000\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n4 1 1 2\n101\n100\n000\n100\n4 4\n6 1 0 10\n1001\n0010\n0100\n0100\n3 2\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n2 1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n3 1 4 5 2 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000001\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n1 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 4 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0111\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n011\n100\n101\n100\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1101\n0010\n0110\n0101\n3 6\n38 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 4\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0001\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n36 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n2 0 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n100\n4 4\n2 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 8\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n1101\n3 1\n34 3 7\n010110\n000101\n110111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 1\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n2 1 0 10\n1001\n0010\n0110\n0001\n3 6\n38 2 8\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 11\n1001\n0010\n0110\n0101\n3 1\n34 3 1\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n10 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 18\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n3 1 4 5 2 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1101\n0010\n0110\n0101\n3 1\n20 3 7\n010010\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n4 1 2 2\n101\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 1\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 2\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 4\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n101\n4 4\n11 1 0 10\n0001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n100\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 2 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n1 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0001\n3 1\n30 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n001\n100\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111101\n", "output": ["3 2 1\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n0 1 2 2\n110\n100\n101\n100\n4 4\n2 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 12\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 11\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n110110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n0 1 2 0\n110\n100\n101\n100\n4 4\n2 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 8\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0110\n0110\n0101\n3 1\n34 3 7\n110110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0001\n3 1\n54 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 11\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000101\n110101\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n100\n4 4\n1 1 0 10\n1101\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n100\n001\n100\n4 4\n6 1 0 10\n1001\n0110\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 2 1\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n1 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0111\n0101\n3 1\n20 3 2\n010110\n000101\n111011\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n101\n4 4\n11 1 0 4\n1001\n0010\n0110\n0101\n3 1\n20 0 7\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n110\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 4 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 4 2\n111\n100\n101\n000\n4 4\n4 1 0 11\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n000\n101\n000\n4 4\n11 1 0 17\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000101\n110111\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n100\n001\n100\n4 4\n6 1 0 10\n1001\n0110\n0110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 2 1\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n8 3 2\n010110\n100101\n110101\n", "output": ["3 1 2\n2 3 4 1\n3 4 1 6 2 5\n"]}, {"input": "3\n4 3\n1 1 2 2\n110\n101\n101\n100\n4 4\n6 2 0 10\n1001\n0000\n0111\n0101\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0010\n0001\n3 1\n30 1 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 4 2\n111\n100\n101\n000\n4 4\n11 1 1 11\n1001\n0010\n1110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 1 2\n111\n100\n101\n000\n4 4\n11 2 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 0 2 2\n111\n100\n101\n000\n4 4\n11 1 0 17\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000101\n110110\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n100\n000\n101\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n13 1 2\n010110\n100101\n111101\n", "output": ["3 1 2\n2 3 4 1\n5 2 3 4 1 6\n"]}, {"input": "3\n4 3\n5 1 1 0\n011\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 1 2\n101\n100\n000\n100\n4 4\n6 1 0 10\n1001\n0010\n1110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 2 1\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n100\n4 4\n6 2 0 10\n1001\n0110\n0110\n0101\n3 6\n13 3 2\n010110\n100101\n111101\n", "output": ["3 1 2\n2 3 4 1\n5 2 3 4 1 6\n"]}, {"input": "3\n4 3\n5 1 4 2\n111\n101\n101\n000\n4 4\n16 1 1 11\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111011\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n4 1 1 2\n101\n100\n000\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 6 7\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n1110\n0101\n3 6\n20 3 15\n000110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n2 3 4 5 1 6\n"]}, {"input": "3\n4 3\n2 1 2 2\n110\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n1 1\n20 3 7\n010110\n010101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n9 1 4 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n011\n100\n101\n101\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 4\n110\n101\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0001\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n36 3 7\n010100\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n100\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 1\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n10 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 18\n1001\n0010\n0110\n0101\n3 6\n20 3 0\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n3 1 4 5 2 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1101\n0010\n0100\n0101\n3 1\n20 3 7\n010010\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n4 1 2 2\n101\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n011110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 4\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 2\n010110\n010101\n111111\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n101\n4 4\n3 1 0 10\n0001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n100\n100\n4 4\n6 2 0 11\n1001\n0010\n0110\n0101\n3 6\n38 2 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n0 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0001\n3 1\n30 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n000\n100\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n0 1 2 2\n110\n100\n101\n100\n4 4\n2 2 0 17\n1001\n0010\n0110\n0101\n3 6\n38 3 12\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n0 1 2 0\n110\n100\n101\n100\n4 4\n2 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 6\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n2 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0110\n0110\n0101\n3 1\n34 3 7\n110110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n0 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0001\n3 1\n54 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n3 1 2 2\n010\n100\n101\n100\n4 4\n2 1 0 10\n1001\n0010\n0110\n0101\n3 6\n38 2 8\n010110\n000101\n111001\n", "output": ["3 1 2\n3 1 4 2\n4 2 5 3 1 6\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n000\n4 4\n11 1 0 11\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000101\n110101\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n100\n4 4\n1 2 0 10\n1101\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n1 1 2 2\n110\n100\n111\n100\n4 4\n6 2 0 10\n1001\n0010\n0111\n0101\n3 1\n20 3 2\n010110\n000101\n111011\n", "output": ["3 2 1\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n2 1 2 2\n111\n000\n101\n000\n4 4\n11 1 0 17\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000101\n110111\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n100\n001\n100\n4 4\n8 1 0 10\n1001\n0110\n0110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 2 1\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n010\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n8 3 2\n010110\n100101\n110101\n", "output": ["3 1 2\n2 3 4 1\n3 4 1 6 2 5\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0010\n0001\n3 1\n30 0 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 1 2\n111\n100\n101\n000\n4 4\n11 2 0 10\n1001\n0010\n0110\n0100\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 0 2 2\n111\n100\n101\n000\n4 4\n11 1 0 17\n1001\n0010\n0110\n0101\n2 1\n66 3 2\n010110\n000101\n110110\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 1 0\n011\n100\n111\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 1 2\n101\n100\n000\n100\n4 4\n6 1 0 10\n1001\n0010\n1110\n0100\n3 1\n20 0 7\n010110\n000101\n111111\n", "output": ["3 2 1\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n100\n4 4\n6 2 0 10\n1001\n0110\n0110\n0101\n3 6\n13 3 1\n010110\n100101\n111101\n", "output": ["3 1 2\n2 3 4 1\n5 2 3 4 1 6\n"]}, {"input": "3\n4 3\n5 2 4 2\n111\n101\n101\n000\n4 4\n16 1 1 11\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111011\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 0 1 0\n111\n000\n101\n010\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["1 2 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n4 1 1 2\n101\n100\n000\n101\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 6 7\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n6 1 0 17\n1001\n0010\n0110\n0101\n1 1\n20 3 7\n010110\n010101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 4 2\n011\n100\n101\n101\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1101\n0010\n0100\n0111\n3 6\n38 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n3 4 1 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n100\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0001\n3 1\n34 3 1\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 0\n110\n100\n101\n100\n4 4\n2 1 0 10\n1001\n0011\n0110\n0001\n3 6\n38 2 8\n010110\n000101\n111101\n", "output": ["3 1 2\n1 2 4 3\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n10 1 2 2\n110\n110\n101\n100\n4 4\n6 2 0 18\n1001\n0010\n0110\n0101\n3 6\n20 3 0\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n3 1 4 5 2 6\n"]}, {"input": "3\n4 3\n4 1 2 2\n101\n110\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n011110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 4\n100\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 2\n010110\n010101\n111111\n", "output": ["1 2 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n100\n100\n4 4\n6 2 1 11\n1001\n0010\n0110\n0101\n3 6\n38 2 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n4 1 2 2\n111\n100\n000\n100\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n0 1 2 2\n110\n100\n101\n100\n4 4\n2 2 0 17\n1001\n0110\n0110\n0101\n3 6\n38 3 12\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n2 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0110\n0110\n0101\n3 1\n34 3 7\n110110\n000100\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n0 1 2 2\n111\n100\n101\n000\n4 4\n4 1 0 10\n1001\n0010\n0110\n0001\n3 1\n54 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n3 1 2 2\n011\n100\n101\n100\n4 4\n2 1 0 10\n1001\n0010\n0110\n0101\n3 6\n38 2 8\n010110\n000101\n111001\n", "output": ["3 1 2\n3 1 4 2\n4 2 5 3 1 6\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n000\n4 4\n12 1 0 11\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000101\n110101\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n100\n4 4\n1 0 0 10\n1101\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n2 1 2 2\n111\n000\n101\n000\n4 4\n11 1 0 17\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000111\n110111\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n000\n4 4\n6 1 0 10\n1101\n0010\n0010\n0101\n3 2\n20 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n2 1\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n100\n001\n100\n4 4\n8 1 0 10\n1001\n0110\n0110\n0100\n3 1\n20 6 7\n010110\n000101\n111111\n", "output": ["3 2 1\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 4 2\n101\n101\n000\n101\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["2 1 3\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 1 0\n011\n100\n111\n000\n4 4\n20 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n100\n4 4\n6 3 0 10\n1001\n0110\n0110\n0101\n3 6\n13 3 1\n010110\n100101\n111101\n", "output": ["3 1 2\n2 3 4 1\n5 2 3 4 1 6\n"]}, {"input": "3\n4 3\n4 1 1 2\n101\n100\n000\n101\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 6 7\n010110\n000101\n111110\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n6 1 0 17\n1001\n0010\n0110\n0101\n1 1\n20 3 8\n010110\n010101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}], "task_id": "codecontest/158", "repair_prompt": ["Petya is a math teacher. n of his students has written a test consisting of m questions, and for each student, it is known which questions he has answered correctly and which he has not. \n\nIf the student answers the j-th question correctly, he gets p_j points (otherwise, he gets 0 points), and the points for the questions are distributed in such a way that the array p is a permutation of numbers from 1 to m.\n\nFor the i-th student, Petya knows that he expects to get x_i points for the test and wonders how unexpected the results could be. Petya believes that the surprise value of the results for students is equal to \u2211_{i=1}^{n} |x_i - r_i|, where r_i is the number of points that the i-th student has got for the test.\n\nYour task is to help Petya find such a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them. Consider how the distribution of points affects the surprise value for Petya's students.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 10; 1 \u2264 m \u2264 10^4) \u2014 the number of students and the number of questions, respectively.\n\nThe second line contains n integers x_1, x_2, ..., x_n (0 \u2264 x_i \u2264 (m(m+1))/(2)), where x_i is the number of points that the i-th student expects to get.\n\nThis is followed by n lines, the i-th line contains the string s_i (|s_i| = m; s_{i, j} \u2208 \\{0, 1\\}), where s_{i, j} is 1 if the i-th student has answered the j-th question correctly, and 0 otherwise.\n\nThe sum of m for all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case, print m integers \u2014 a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n010110\n000101\n111111\n\n\nOutput\n\n\n3 1 2 \n2 3 4 1 \n3 1 4 5 2 6 \n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Petya knows that he expects to get x_i points for the test and wonders how unexpected the results could be. He believes that the surprise value of the results for students is equal to \u2211_{i=1}^{n} |x_i - r_i|, where r_i is the number of points that the i-th student has got for the test.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 10; 1 \u2264 m \u2264 10^4) \u2014 the number of students and the number of questions, respectively.\n\nThe second line contains n integers x_1, x_2, ..., x_n (0 \u2264 x_i \u2264 (m(m+1))/(2)), where x_i is the number of points that the i-th student expects to get.\n\nThis is followed by n lines, the i-th line contains the string s_i (|s_i| = m; s_{i, j} \u2208 \\{0, 1\\}), where s_{i, j} is 1 if the i-th student has answered the j-th question correctly, and 0 otherwise.\n\nThe sum of m for all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case, print m integers \u2014 a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n010110\n000101\n111111\n\n\nOutput\n\n\n3 1 2 \n2 3 4 1 \n3 1 4 5 2 6 \n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Petya is a math teacher whose students take a test with multiple questions, and he wants to find a permutation of points to maximize the surprise value of their results by comparing expected points to actual points.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 10; 1 \u2264 m \u2264 10^4) \u2014 the number of students and the number of questions, respectively.\n\nThe second line contains n integers x_1, x_2, ..., x_n (0 \u2264 x_i \u2264 (m(m+1))/(2)), where x_i is the number of points that the i-th student expects to get.\n\nThis is followed by n lines, the i-th line contains the string s_i (|s_i| = m; s_{i, j} \u2208 \\{0, 1\\}), where s_{i, j} is 1 if the i-th student has answered the j-th question correctly, and 0 otherwise.\n\nThe sum of m for all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case, print m integers \u2014 a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n010110\n000101\n111111\n\n\nOutput\n\n\n3 1 2 \n2 3 4 1 \n3 1 4 5 2 6 \n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def calculate_surprise_value(points, answers):\n    surprise_values = []\n    for i in range(1, len(points)+1):\n        permutation = list(range(1, i+1))\n        max_surprise = 0\n        for _ in range(1, len(points)-i+2):\n            surprise = sum([points[p-1] for p in permutation])\n            max_surprise = max(max_surprise, surprise)\n            if _ < len(points)-i+1:\n                permutation = permutation[1:] + [permutation[0]]\n        surprise_values.append(max_surprise)\n    return permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    permutation = calculate_surprise_value(points, answers)\n    print(*permutation)\n\nmain()", "completions": ["from itertools import permutations\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of students and questions\n    n, m = map(int, input().split())\n    \n    # Read the expected points for each student\n    expected_points = list(map(int, input().split()))\n    \n    # Read the answers for each student\n    answers = [input() for _ in range(n)]\n    \n    # Generate all possible permutations of points\n    points_permutations = permutations(range(1, m+1))\n    \n    max_surprise_value = float('-inf')\n    max_permutation = None\n    \n    # Calculate the surprise value for each permutation\n    for perm in points_permutations:\n        surprise_value = sum((perm[j-1] for j in range(1, m+1) if answers[i][j-1] == '1') for i in range(n)) - sum(expected_points)\n        if surprise_value > max_surprise_value:\n            max_surprise_value = surprise_value\n            max_permutation = perm\n    \n    # Print the permutation that maximizes the surprise value\n    print(*max_permutation)\n\nmain()", "from itertools import permutations\n\ndef calculate_surprise_value(points, expected_points):\n    return sum(abs(exp - act) for exp, act in zip(expected_points, points))\n\ndef find_max_surprise_permutation(n, m, expected_points, answers):\n    max_surprise_value = float('-inf')\n    max_permutation = None\n    \n    for perm in permutations(range(1, m+1)):\n        points = [sum(int(answers[i][j]) * perm[j] for j in range(m)) for i in range(n)]\n        surprise_value = calculate_surprise_value(points, expected_points)\n        \n        if surprise_value > max_surprise_value:\n            max_surprise_value = surprise_value\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    result = find_max_surprise_permutation(n, m, expected_points, answers)\n    print(*result)\n\nmain()", "def calculate_surprise_value(expected_points, actual_points):\n    return sum(abs(exp - act) for exp, act in zip(expected_points, actual_points))\n\ndef find_max_surprise_permutation(expected_points, answers):\n    n = len(expected_points)\n    m = len(answers[0])\n    \n    max_surprise = float('-inf')\n    max_permutation = []\n    \n    for perm in permutations(range(1, m+1)):\n        surprise = 0\n        for i in range(n):\n            actual_points = [perm[j-1] for j in range(1, m+1) if answers[i][j-1] == '1']\n            surprise += abs(expected_points[i] - sum(actual_points))\n        \n        if surprise > max_surprise:\n            max_surprise = surprise\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_points = list(map(int, input().split()))\n    answers = [input().strip() for _ in range(n)]\n    \n    from itertools import permutations\n    result = find_max_surprise_permutation(expected_points, answers)\n    print(*result)\n\nmain()", "from itertools import permutations\n\ndef calculate_surprise_value(points, answers):\n    surprise_value = 0\n    for answer in answers:\n        for i, a in enumerate(answer):\n            if a == '1':\n                surprise_value += points[i]\n    return surprise_value\n\nt = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    max_surprise_value = 0\n    max_permutation = []\n    \n    for perm in permutations(range(1, n+1)):\n        perm_points = [points[i-1] for i in perm]\n        surprise_value = calculate_surprise_value(perm_points, answers)\n        if surprise_value > max_surprise_value:\n            max_surprise_value = surprise_value\n            max_permutation = perm\n    \n    print(*max_permutation)\n\nmain()", "def calculate_surprise_value(n, m, expected_points, answers):\n    surprise_values = []\n    for i in range(n):\n        surprise_value = sum(abs(expected_points[i] - int(''.join(answers[j][i] for j in range(m)), 2)) for i in range(m))\n        surprise_values.append((surprise_value, i+1))\n    \n    surprise_values.sort(reverse=True)\n    return [sv[1] for sv in surprise_values]\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        expected_points = list(map(int, input().split()))\n        answers = [input() for _ in range(n)]\n        \n        permutation = calculate_surprise_value(n, m, expected_points, answers)\n        print(*permutation)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "from itertools import permutations\n\ndef calculate_surprise_value(expected_points, actual_points):\n    return sum(abs(exp - act) for exp, act in zip(expected_points, actual_points))\n\ndef find_max_surprise_permutation(expected_points, answers):\n    n = len(expected_points)\n    m = len(answers[0])\n    \n    max_surprise = float('-inf')\n    max_permutation = []\n    \n    for perm in permutations(range(1, m+1)):\n        actual_points = [0] * n\n        for i, p in enumerate(perm):\n            for j in range(n):\n                if answers[j][p-1] == '1':\n                    actual_points[j] += 1\n        \n        surprise = calculate_surprise_value(expected_points, actual_points)\n        if surprise > max_surprise:\n            max_surprise = surprise\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_points = list(map(int, input().split()))\n    answers = [input().strip() for _ in range(n)]\n    \n    result = find_max_surprise_permutation(expected_points, answers)\n    print(*result)\n\nmain()", "from itertools import permutations\n\ndef calculate_surprise_value(points, expected_points):\n    return sum(abs(exp - act) for exp, act in zip(expected_points, points))\n\ndef find_max_surprise_permutation(n, m, expected_points, answers):\n    max_surprise = float('-inf')\n    max_permutation = None\n    \n    for perm in permutations(range(1, m+1)):\n        points = [sum(int(answers[i][j]) * perm[j] for j in range(m)) for i in range(n)]\n        surprise_value = calculate_surprise_value(points, expected_points)\n        \n        if surprise_value > max_surprise:\n            max_surprise = surprise_value\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    max_permutation = find_max_surprise_permutation(n, m, expected_points, answers)\n    print(*max_permutation)\n\nmain()", "from itertools import permutations\n\ndef calculate_surprise_value(points, expected_points):\n    return sum(abs(exp - act) for exp, act in zip(expected_points, points))\n\ndef find_max_surprise_permutation(n, m, expected_points, answers):\n    max_surprise = float('-inf')\n    max_permutation = None\n    \n    for perm in permutations(range(1, m+1)):\n        points = [sum(int(answers[i][j]) * perm[j] for j in range(m)) for i in range(n)]\n        surprise_value = calculate_surprise_value(points, expected_points)\n        \n        if surprise_value > max_surprise:\n            max_surprise = surprise_value\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    result = find_max_surprise_permutation(n, m, expected_points, answers)\n    print(*result)\n\nmain()", "from itertools import permutations\n\ndef calculate_surprise_value(points, expected_points):\n    return sum(abs(expected_points[i] - points[i]) for i in range(len(points))\n\ndef find_max_surprise_permutation(n, m, expected_points, answers):\n    max_surprise_value = float('-inf')\n    max_permutation = None\n    \n    for perm in permutations(range(1, m+1)):\n        points = [0] * m\n        for i in range(m):\n            for j in range(n):\n                if answers[j][i] == '1':\n                    points[i] += perm[i]\n        \n        surprise_value = calculate_surprise_value(points, expected_points)\n        if surprise_value > max_surprise_value:\n            max_surprise_value = surprise_value\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    result = find_max_surprise_permutation(n, m, expected_points, answers)\n    print(*result)\n\nmain()", "def calculate_surprise_value(points, answers):\n    surprise_values = []\n    for i in range(1, len(points)+1):\n        permutation = list(range(1, i+1))\n        max_surprise = 0\n        for _ in range(1, len(points)-i+2):\n            surprise = sum([points[p-1] for p in permutation])\n            max_surprise = max(max_surprise, surprise)\n            if _ < len(points)-i+1:\n                permutation = permutation[1:] + [permutation[0]]\n        surprise_values.append(max_surprise)\n    return permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    permutation = calculate_surprise_value(points, answers)\n    print(*permutation)\n\nmain()"], "session_history": {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Parse the input data for each test case\",\n      \"Calculate the surprise value for each possible permutation of points\",\n      \"Find the permutation that maximizes the surprise value\"\n    ],\n    \"major_steps\": [\n      \"Read the number of test cases\",\n      \"For each test case:\",\n      \"   - Read the number of students and questions\",\n      \"   - Read the expected points for each student\",\n      \"   - Read the answers for each student\",\n      \"   - Calculate the surprise value for each permutation of points\",\n      \"   - Find the permutation that maximizes the surprise value\",\n      \"   - Print the permutation\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation': In this context, permutation refers to rearranging the order of points assigned to students to maximize the surprise value of their results.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum possible': Indicates the need to find the permutation that results in the highest surprise value.\n\n# [code logic]\n    The major steps should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    Edge Case 1:\n    Input:\n    1\n    1 1\n    1\n    1\n    Output:\n    1\n    Explanation: With only one student and one question, the permutation is straightforward.\n    \n    Edge Case 2:\n    Input:\n    1\n    2 2\n    2 1\n    10\n    01\n    Output:\n    2 1\n    Explanation: The expected points are different for each student, and the correct permutation is required.\n    \n    Edge Case 3:\n    Input:\n    1\n    3 3\n    3 2 1\n    111\n    000\n    111\n    Output:\n    3 2 1\n    Explanation: The students have different expected points, and the correct permutation is needed.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge cases)\n\nNO", "Round_0": {"code": "def calculate_surprise_value(points, answers):\n    surprise_values = []\n    for i in range(1, len(points)+1):\n        permutation = list(range(1, i+1))\n        max_surprise = 0\n        for _ in range(1, len(points)-i+2):\n            surprise = sum([points[p-1] for p in permutation])\n            max_surprise = max(max_surprise, surprise)\n            if _ < len(points)-i+1:\n                permutation = permutation[1:] + [permutation[0]]\n        surprise_values.append(max_surprise)\n    return surprise_values.index(max(surprise_values)) + 1\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    permutation = calculate_surprise_value(points, answers)\n    print(*permutation)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 28)"}, "Round_1": {"code": "def calculate_surprise_value(points, answers):\n    surprise_values = []\n    for i in range(1, len(points)+1):\n        permutation = list(range(1, i+1))\n        max_surprise = 0\n        for _ in range(1, len(points)-i+2):\n            surprise = sum([points[p-1] for p in permutation])\n            max_surprise = max(max_surprise, surprise)\n            if _ < len(points)-i+1:\n                permutation = permutation[1:] + [permutation[0]]\n        surprise_values.append(max_surprise)\n    return permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    permutation = calculate_surprise_value(points, answers)\n    print(*permutation)\n"}}, "session_historys": [{"plan": "{\n  \"subproblems\": [\n    \"Parse the input data for each test case\",\n    \"Calculate the surprise value for each possible permutation of points\",\n    \"Find the permutation that maximizes the surprise value\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of students and questions, their expected points, and their answers\",\n    \"Step 3\": \"Generate all possible permutations of points\",\n    \"Step 4\": \"Calculate the surprise value for each permutation\",\n    \"Step 5\": \"Find the permutation that maximizes the surprise value\",\n    \"Step 6\": \"Print the permutation\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation': refers to the arrangement of points for each student to maximize the surprise value of their results.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum possible': indicates the need to find the permutation that results in the highest surprise value.\n\n# [code logic]\n    All steps should be implemented step by step as described in the plan.\n\n# [edge case] \n    Edge Case 1:\n    1\n    1 1\n    1\n    1\n    Output:\n    1\n    Explanation: With only one student and one question, the only possible permutation is 1.\n\n    Edge Case 2:\n    2\n    1 2\n    1 2\n    01\n    10\n    Output:\n    2 1\n    Explanation: With two students and two questions, the permutation that maximizes the surprise value is 2 1.\n\n    Edge Case 3:\n    3\n    3 3\n    3 2 1\n    111\n    000\n    101\n    Output:\n    1 3 2\n    Explanation: With three students and three questions, the permutation that maximizes the surprise value is 1 3 2.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case) \n\nNO", "Round_0": {"code": "from itertools import permutations\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of students and questions\n    n, m = map(int, input().split())\n    \n    # Read the expected points for each student\n    expected_points = list(map(int, input().split()))\n    \n    # Read the answers for each student\n    answers = [input() for _ in range(n)]\n    \n    # Generate all possible permutations of points\n    points_permutations = permutations(range(1, m+1))\n    \n    max_surprise_value = float('-inf')\n    max_permutation = None\n    \n    # Calculate the surprise value for each permutation\n    for perm in points_permutations:\n        surprise_value = sum((perm[j-1] for j in range(1, m+1) if answers[i][j-1] == '1') for i in range(n)) - sum(expected_points)\n        if surprise_value > max_surprise_value:\n            max_surprise_value = surprise_value\n            max_permutation = perm\n    \n    # Print the permutation that maximizes the surprise value\n    print(*max_permutation)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "from itertools import permutations\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of students and questions\n    n, m = map(int, input().split())\n    \n    # Read the expected points for each student\n    expected_points = list(map(int, input().split()))\n    \n    # Read the answers for each student\n    answers = [input() for _ in range(n)]\n    \n    # Generate all possible permutations of points\n    points_permutations = permutations(range(1, m+1))\n    \n    max_surprise_value = float('-inf')\n    max_permutation = None\n    \n    # Calculate the surprise value for each permutation\n    for perm in points_permutations:\n        surprise_value = sum((perm[j-1] for j in range(1, m+1) if answers[i][j-1] == '1') for i in range(n)) - sum(expected_points)\n        if surprise_value > max_surprise_value:\n            max_surprise_value = surprise_value\n            max_permutation = perm\n    \n    # Print the permutation that maximizes the surprise value\n    print(*max_permutation)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input data for each test case\",\n    \"Calculate the maximum possible surprise value for each test case\",\n    \"Generate a permutation p that maximizes the surprise value\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input data for each test case\",\n    \"Step 2\": \"For each test case, calculate the maximum possible surprise value by iterating through all possible permutations of p\",\n    \"Step 3\": \"Generate a permutation p that maximizes the surprise value by selecting the permutation with the highest surprise value\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: In this requirement, a permutation refers to an arrangement of numbers from 1 to m in a specific order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum possible': means finding the arrangement that results in the highest surprise value\n\n# [code logic]\n    The steps should be implemented sequentially as they involve parsing input, calculating surprise value, and generating permutations.\n\n# [edge case] \n    Test Case 1:\n    4 3\n    5 1 2 2\n    110\n    100\n    101\n    100\n    Output:\n    3 1 2 \n    Explanation: The expected points for students are [5, 1, 2, 2]. The maximum surprise value is achieved by arranging the points in descending order [5, 2, 2, 1].\n    \n    Test Case 2:\n    4 4\n    6 2 0 10\n    1001\n    0010\n    0110\n    0101\n    Output:\n    2 3 4 1 \n    Explanation: The expected points for students are [6, 2, 0, 10]. The maximum surprise value is achieved by arranging the points in descending order [10, 6, 2, 0].\n    \n    Test Case 3:\n    3 6\n    20 3 15\n    010110\n    000101\n    111111\n    Output:\n    3 1 4 5 2 6 \n    Explanation: The expected points for students are [20, 3, 15]. The maximum surprise value is achieved by arranging the points in descending order [20, 15, 3].\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case) \n\nNO", "Round_0": {"code": "from itertools import permutations\n\ndef calculate_surprise_value(points, expected_points):\n    return sum(abs(exp - act) for exp, act in zip(expected_points, points))\n\ndef find_max_surprise_permutation(n, m, expected_points, answers):\n    max_surprise_value = float('-inf')\n    max_permutation = None\n    \n    for perm in permutations(range(1, m+1)):\n        points = [sum(int(answers[i][j]) * perm[j] for j in range(m)) for i in range(n)]\n        surprise_value = calculate_surprise_value(points, expected_points)\n        \n        if surprise_value > max_surprise_value:\n            max_surprise_value = surprise_value\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    result = find_max_surprise_permutation(n, m, expected_points, answers)\n    print(*result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 34)"}, "Round_1": {"code": "from itertools import permutations\n\ndef calculate_surprise_value(points, expected_points):\n    return sum(abs(exp - act) for exp, act in zip(expected_points, points))\n\ndef find_max_surprise_permutation(n, m, expected_points, answers):\n    max_surprise_value = float('-inf')\n    max_permutation = None\n    \n    for perm in permutations(range(1, m+1)):\n        points = [sum(int(answers[i][j]) * perm[j] for j in range(m)) for i in range(n)]\n        surprise_value = calculate_surprise_value(points, expected_points)\n        \n        if surprise_value > max_surprise_value:\n            max_surprise_value = surprise_value\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    result = find_max_surprise_permutation(n, m, expected_points, answers)\n    print(*result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input data for each test case\",\n    \"Calculate the surprise value for each test case\",\n    \"Find a permutation that maximizes the surprise value\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of students and questions\",\n    \"Step 3\": \"Read the expected points for each student and their answers\",\n    \"Step 4\": \"Calculate the surprise value for each test case using the given formula\",\n    \"Step 5\": \"Find a permutation that maximizes the surprise value\",\n    \"Step 6\": \"Print the permutation for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'surprise value'\n    Explanation: The surprise value is calculated as the sum of the absolute differences between the expected points and the actual points obtained by each student.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve different subproblems that build upon each other.\n\n# [edge case] \n    Edge Case 1:\n    1\n    1 1\n    1\n    1\n    Expected Output:\n    1\n    Explanation: With only one student and one question, the permutation is straightforward.\n\n    Edge Case 2:\n    2\n    1 1\n    0 1\n    1\n    1\n    Expected Output:\n    1\n    Explanation: The surprise value is maximized when the student with expected points 0 gets the question correct.\n\n    Edge Case 3:\n    2\n    2 2\n    1 2\n    10\n    01\n    10\n    01\n    Expected Output:\n    2 1\n    Explanation: The surprise value is maximized when the student with expected points 2 gets both questions correct.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge cases)\n\nNO", "Round_0": {"code": "def calculate_surprise_value(expected_points, actual_points):\n    return sum(abs(exp - act) for exp, act in zip(expected_points, actual_points))\n\ndef find_max_surprise_permutation(expected_points, answers):\n    n = len(expected_points)\n    m = len(answers[0])\n    \n    max_surprise = float('-inf')\n    max_permutation = []\n    \n    for perm in permutations(range(1, m+1)):\n        surprise = 0\n        for i in range(n):\n            actual_points = [perm[j-1] for j in range(1, m+1) if answers[i][j-1] == '1']\n            surprise += abs(expected_points[i] - sum(actual_points))\n        \n        if surprise > max_surprise:\n            max_surprise = surprise\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_points = list(map(int, input().split()))\n    answers = [input().strip() for _ in range(n)]\n    \n    from itertools import permutations\n    result = find_max_surprise_permutation(expected_points, answers)\n    print(*result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_surprise_value(expected_points, actual_points):\n    return sum(abs(exp - act) for exp, act in zip(expected_points, actual_points))\n\ndef find_max_surprise_permutation(expected_points, answers):\n    n = len(expected_points)\n    m = len(answers[0])\n    \n    max_surprise = float('-inf')\n    max_permutation = []\n    \n    for perm in permutations(range(1, m+1)):\n        surprise = 0\n        for i in range(n):\n            actual_points = [perm[j-1] for j in range(1, m+1) if answers[i][j-1] == '1']\n            surprise += abs(expected_points[i] - sum(actual_points))\n        \n        if surprise > max_surprise:\n            max_surprise = surprise\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_points = list(map(int, input().split()))\n    answers = [input().strip() for _ in range(n)]\n    \n    from itertools import permutations\n    result = find_max_surprise_permutation(expected_points, answers)\n    print(*result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input data for each test case\",\n    \"Calculate the surprise value for each possible permutation of points\",\n    \"Find the permutation that maximizes the surprise value\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of students and questions, their expected points, and their answers\",\n    \"Step 3\": \"Generate all possible permutations of points\",\n    \"Step 4\": \"Calculate the surprise value for each permutation\",\n    \"Step 5\": \"Find the permutation that maximizes the surprise value\",\n    \"Step 6\": \"Print the permutation\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation': In this context, it refers to rearranging the points of students to maximize the surprise value of their results.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum possible': Indicates the need to find the best permutation that maximizes the surprise value.\n\n# [code logic]\n    The steps 3, 4, and 5 should be implemented simultaneously as they involve generating permutations, calculating surprise values, and finding the best permutation. This can be achieved by using a nested loop to generate all permutations, calculating the surprise value for each permutation, and keeping track of the maximum surprise value and corresponding permutation.\n\n# [edge case] \n    Edge Case 1:\n    1 2 3\n    Explanation: In this case, all students expect different points, and all questions are answered correctly. The best permutation would be the original order of students.\n    \n    Edge Case 2:\n    3 2 1\n    Explanation: In this case, students expect points in descending order, and all questions are answered correctly. The best permutation would be the reverse order of students.\n    \n    Edge Case 3:\n    2 2 2\n    Explanation: In this case, all students expect the same points, and all questions are answered correctly. Any permutation would result in the same surprise value.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge cases)\n\nNO", "Round_0": {"code": "from itertools import permutations\n\ndef calculate_surprise_value(points, answers):\n    surprise_value = 0\n    for answer in answers:\n        for i, a in enumerate(answer):\n            if a == '1':\n                surprise_value += points[i]\n    return surprise_value\n\nt = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    max_surprise_value = 0\n    max_permutation = []\n    \n    for perm in permutations(range(1, n+1)):\n        perm_points = [points[i-1] for i in perm]\n        surprise_value = calculate_surprise_value(perm_points, answers)\n        if surprise_value > max_surprise_value:\n            max_surprise_value = surprise_value\n            max_permutation = perm\n    \n    print(*max_permutation)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "from itertools import permutations\n\ndef calculate_surprise_value(points, answers):\n    surprise_value = 0\n    for answer in answers:\n        for i, a in enumerate(answer):\n            if a == '1':\n                surprise_value += points[i]\n    return surprise_value\n\nt = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    max_surprise_value = 0\n    max_permutation = []\n    \n    for perm in permutations(range(1, n+1)):\n        perm_points = [points[i-1] for i in perm]\n        surprise_value = calculate_surprise_value(perm_points, answers)\n        if surprise_value > max_surprise_value:\n            max_surprise_value = surprise_value\n            max_permutation = perm\n    \n    print(*max_permutation)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input data for each test case\",\n    \"Calculate the surprise value for each test case\",\n    \"Find a permutation that maximizes the surprise value\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of students and questions\",\n    \"Step 3\": \"Read the expected points for each student and their answers\",\n    \"Step 4\": \"Calculate the surprise value for each test case using the given formula\",\n    \"Step 5\": \"Find a permutation that maximizes the surprise value\",\n    \"Step 6\": \"Print the permutation for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'surprise value'\n    Explanation: The surprise value is calculated as the sum of the absolute differences between the expected points and the actual points obtained by each student.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as they involve reading input, calculating values, and finding permutations.\n\n# [edge case] \n    Edge Case 1:\n    1\n    1 1\n    1\n    1\n    Output:\n    1\n    Explanation: With only one student and one question, the permutation is straightforward.\n\n    Edge Case 2:\n    2\n    1 1\n    0 1\n    1\n    0\n    Output:\n    1\n    Explanation: When there are two students and one question, the permutation can still be determined.\n\n    Edge Case 3:\n    2\n    2 2\n    1 2\n    10\n    01\n    Output:\n    2 1\n    Explanation: In this case, the permutation needs to maximize the surprise value.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge cases)\n\nNO", "Round_0": {"code": "def calculate_surprise_value(n, m, expected_points, answers):\n    surprise_values = []\n    for i in range(n):\n        surprise_value = sum(abs(expected_points[i] - int(''.join(answers[j][i] for j in range(m)), 2)) for i in range(m))\n        surprise_values.append((surprise_value, i+1))\n    \n    surprise_values.sort(reverse=True)\n    return [sv[1] for sv in surprise_values]\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        expected_points = list(map(int, input().split()))\n        answers = [input() for _ in range(m)]\n        \n        permutation = calculate_surprise_value(n, m, expected_points, answers)\n        print(*permutation)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: string index out of range"}, "Round_1": {"code": "def calculate_surprise_value(n, m, expected_points, answers):\n    surprise_values = []\n    for i in range(n):\n        surprise_value = sum(abs(expected_points[i] - int(''.join(answers[j][i] for j in range(m)), 2)) for i in range(m))\n        surprise_values.append((surprise_value, i+1))\n    \n    surprise_values.sort(reverse=True)\n    return [sv[1] for sv in surprise_values]\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        expected_points = list(map(int, input().split()))\n        answers = [input() for _ in range(n)]\n        \n        permutation = calculate_surprise_value(n, m, expected_points, answers)\n        print(*permutation)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input data for each test case\",\n    \"Calculate the surprise value for each test case\",\n    \"Find a permutation that maximizes the surprise value\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of students and questions\",\n    \"Step 3\": \"Read the expected points for each student and their answers\",\n    \"Step 4\": \"Calculate the surprise value for each test case using the given formula\",\n    \"Step 5\": \"Find a permutation that maximizes the surprise value\",\n    \"Step 6\": \"Print the permutation for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'surprise value'\n    Explanation: The surprise value is calculated as the sum of the absolute differences between the expected points and the actual points obtained by each student.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as they involve reading input, calculating values, and finding permutations.\n\n# [edge case] \n    Edge Case 1:\n    1\n    1 1\n    1\n    1\n    Output:\n    1\n    Explanation: With only one student and one question, the permutation is straightforward.\n\n    Edge Case 2:\n    2\n    1 1\n    0 1\n    1\n    1\n    Output:\n    1\n    Explanation: The surprise value is maximized when the student with expected points 0 gets the question correct.\n\n    Edge Case 3:\n    2\n    2 2\n    1 2\n    01\n    10\n    Output:\n    2 1\n    Explanation: The surprise value is maximized when the student with expected points 2 gets the questions correct.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case) \n\nNO", "Round_0": {"code": "def calculate_surprise_value(expected_points, actual_points):\n    return sum(abs(exp - act) for exp, act in zip(expected_points, actual_points))\n\ndef find_max_surprise_permutation(expected_points, answers):\n    n = len(expected_points)\n    m = len(answers[0])\n    \n    max_surprise = float('-inf')\n    max_permutation = []\n    \n    for perm in permutations(range(1, m+1)):\n        actual_points = [0] * n\n        for i, p in enumerate(perm):\n            for j in range(n):\n                if answers[j][p-1] == '1':\n                    actual_points[j] += 1\n        \n        surprise = calculate_surprise_value(expected_points, actual_points)\n        if surprise > max_surprise:\n            max_surprise = surprise\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_points = list(map(int, input().split()))\n    answers = [input().strip() for _ in range(n)]\n    \n    result = find_max_surprise_permutation(expected_points, answers)\n    print(*result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "from itertools import permutations\n\ndef calculate_surprise_value(expected_points, actual_points):\n    return sum(abs(exp - act) for exp, act in zip(expected_points, actual_points))\n\ndef find_max_surprise_permutation(expected_points, answers):\n    n = len(expected_points)\n    m = len(answers[0])\n    \n    max_surprise = float('-inf')\n    max_permutation = []\n    \n    for perm in permutations(range(1, m+1)):\n        actual_points = [0] * n\n        for i, p in enumerate(perm):\n            for j in range(n):\n                if answers[j][p-1] == '1':\n                    actual_points[j] += 1\n        \n        surprise = calculate_surprise_value(expected_points, actual_points)\n        if surprise > max_surprise:\n            max_surprise = surprise\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_points = list(map(int, input().split()))\n    answers = [input().strip() for _ in range(n)]\n    \n    result = find_max_surprise_permutation(expected_points, answers)\n    print(*result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input data for each test case\",\n    \"Calculate the maximum possible surprise value for each test case\",\n    \"Generate a permutation p that maximizes the surprise value\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input data for each test case\",\n    \"Step 2\": \"For each test case, calculate the maximum possible surprise value by iterating through all possible permutations of p\",\n    \"Step 3\": \"Generate a permutation p that maximizes the surprise value by selecting the permutation with the highest surprise value\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation is an arrangement of all the elements of a set in a specific order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum possible': means finding the highest value possible\n    'multiple answers': means there could be more than one correct solution\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve parsing input, calculating surprise value, and generating permutations.\n\n# [edge case] \n    Test Case 1:\n    4 3\n    5 1 2 2\n    110\n    100\n    101\n    100\n    Output:\n    3 1 2 \n    Explanation: The permutation [3, 1, 2] maximizes the surprise value for the given test case.\n\n    Test Case 2:\n    4 4\n    6 2 0 10\n    1001\n    0010\n    0110\n    0101\n    Output:\n    2 3 4 1 \n    Explanation: The permutation [2, 3, 4, 1] maximizes the surprise value for the given test case.\n\n    Test Case 3:\n    3 6\n    20 3 15\n    010110\n    000101\n    111111\n    Output:\n    3 1 4 5 2 6 \n    Explanation: The permutation [3, 1, 4, 5, 2, 6] maximizes the surprise value for the given test case.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case) \n\nNO", "Round_0": {"code": "from itertools import permutations\n\ndef calculate_surprise_value(points, expected_points):\n    return sum(abs(exp - act) for exp, act in zip(expected_points, points))\n\ndef find_max_surprise_permutation(n, m, expected_points, answers):\n    max_surprise = float('-inf')\n    max_permutation = None\n    \n    for perm in permutations(range(1, m+1)):\n        points = [sum(int(answers[i][j]) * perm[j] for j in range(m)) for i in range(n)]\n        surprise_value = calculate_surprise_value(points, expected_points)\n        \n        if surprise_value > max_surprise:\n            max_surprise = surprise_value\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    max_permutation = find_max_surprise_permutation(n, m, expected_points, answers)\n    print(*max_permutation)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 34)"}, "Round_1": {"code": "from itertools import permutations\n\ndef calculate_surprise_value(points, expected_points):\n    return sum(abs(exp - act) for exp, act in zip(expected_points, points))\n\ndef find_max_surprise_permutation(n, m, expected_points, answers):\n    max_surprise = float('-inf')\n    max_permutation = None\n    \n    for perm in permutations(range(1, m+1)):\n        points = [sum(int(answers[i][j]) * perm[j] for j in range(m)) for i in range(n)]\n        surprise_value = calculate_surprise_value(points, expected_points)\n        \n        if surprise_value > max_surprise:\n            max_surprise = surprise_value\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    max_permutation = find_max_surprise_permutation(n, m, expected_points, answers)\n    print(*max_permutation)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input data for each test case\",\n    \"Calculate the maximum possible surprise value for each test case\",\n    \"Generate a permutation p that maximizes the surprise value\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input data for each test case\",\n    \"Step 2\": \"For each test case, calculate the maximum possible surprise value by iterating through all possible permutations of p\",\n    \"Step 3\": \"Generate a permutation p that maximizes the surprise value by selecting the permutation with the highest surprise value\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: In this requirement, a permutation refers to an arrangement of numbers from 1 to m in a specific order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum possible': means finding the arrangement that results in the highest surprise value\n\n# [code logic]\n    The steps should be implemented sequentially as they involve parsing input, calculating surprise value, and generating permutations.\n\n# [edge case] \n    Test Case 1:\n    4 3\n    5 1 2 2\n    110\n    100\n    101\n    100\n    Output: 3 1 2\n    Explanation: The permutation [3, 1, 2] results in the maximum surprise value for the given test case.\n\n    Test Case 2:\n    4 4\n    6 2 0 10\n    1001\n    0010\n    0110\n    0101\n    Output: 2 3 4 1\n    Explanation: The permutation [2, 3, 4, 1] maximizes the surprise value in this case.\n\n    Test Case 3:\n    3 6\n    20 3 15\n    010110\n    000101\n    111111\n    Output: 3 1 4 5 2 6\n    Explanation: The permutation [3, 1, 4, 5, 2, 6] maximizes the surprise value for the given test case.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case) \n\nNO", "Round_0": {"code": "from itertools import permutations\n\ndef calculate_surprise_value(points, expected_points):\n    return sum(abs(exp - act) for exp, act in zip(expected_points, points))\n\ndef find_max_surprise_permutation(n, m, expected_points, answers):\n    max_surprise = float('-inf')\n    max_permutation = None\n    \n    for perm in permutations(range(1, m+1)):\n        points = [sum(int(answers[i][j]) * perm[j] for j in range(m)) for i in range(n)]\n        surprise_value = calculate_surprise_value(points, expected_points)\n        \n        if surprise_value > max_surprise:\n            max_surprise = surprise_value\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    result = find_max_surprise_permutation(n, m, expected_points, answers)\n    print(*result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 34)"}, "Round_1": {"code": "from itertools import permutations\n\ndef calculate_surprise_value(points, expected_points):\n    return sum(abs(exp - act) for exp, act in zip(expected_points, points))\n\ndef find_max_surprise_permutation(n, m, expected_points, answers):\n    max_surprise = float('-inf')\n    max_permutation = None\n    \n    for perm in permutations(range(1, m+1)):\n        points = [sum(int(answers[i][j]) * perm[j] for j in range(m)) for i in range(n)]\n        surprise_value = calculate_surprise_value(points, expected_points)\n        \n        if surprise_value > max_surprise:\n            max_surprise = surprise_value\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    result = find_max_surprise_permutation(n, m, expected_points, answers)\n    print(*result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input data for each test case\",\n    \"Calculate the maximum possible surprise value for each test case\",\n    \"Generate a permutation p that maximizes the surprise value\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input data for each test case\",\n    \"Step 2\": \"For each test case, calculate the maximum possible surprise value by iterating through all possible permutations of numbers from 1 to m\",\n    \"Step 3\": \"Generate a permutation p that maximizes the surprise value by selecting the permutation with the highest calculated surprise value\",\n    \"Step 4\": \"Output the generated permutation p for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'surprise value'\n    Explanation: The surprise value is the sum of the absolute differences between the expected points and the actual points obtained by each student.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum possible': means finding the permutation that maximizes the surprise value\n\n# [code logic]\n    The steps should be implemented sequentially as they involve parsing input, calculating surprise value, and generating the permutation.\n\n# [edge case] \n    Test Case 1:\n    4 3\n    5 1 2 2\n    110\n    100\n    101\n    100\n    Output: 3 1 2\n    Explanation: The permutation 3 1 2 maximizes the surprise value for the given test case.\n    \n    Test Case 2:\n    4 4\n    6 2 0 10\n    1001\n    0010\n    0110\n    0101\n    Output: 2 3 4 1\n    Explanation: The permutation 2 3 4 1 maximizes the surprise value for the given test case.\n    \n    Test Case 3:\n    3 6\n    20 3 15\n    010110\n    000101\n    111111\n    Output: 3 1 4 5 2 6\n    Explanation: The permutation 3 1 4 5 2 6 maximizes the surprise value for the given test case.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case) \n\nNO", "Round_0": {"code": "from itertools import permutations\n\ndef calculate_surprise_value(points, expected_points):\n    return sum(abs(expected_points[i] - points[i]) for i in range(len(points)))\n\ndef find_max_surprise_permutation(n, m, expected_points, answers):\n    max_surprise_value = float('-inf')\n    max_permutation = None\n    \n    for perm in permutations(range(1, m+1)):\n        points = [0] * m\n        for i in range(m):\n            for j in range(n):\n                if answers[j][i] == '1':\n                    points[i] += perm[i]\n        \n        surprise_value = calculate_surprise_value(points, expected_points)\n        if surprise_value > max_surprise_value:\n            max_surprise_value = surprise_value\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    result = find_max_surprise_permutation(n, m, expected_points, answers)\n    print(*result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 38)"}, "Round_1": {"code": "from itertools import permutations\n\ndef calculate_surprise_value(points, expected_points):\n    return sum(abs(expected_points[i] - points[i]) for i in range(len(points))\n\ndef find_max_surprise_permutation(n, m, expected_points, answers):\n    max_surprise_value = float('-inf')\n    max_permutation = None\n    \n    for perm in permutations(range(1, m+1)):\n        points = [0] * m\n        for i in range(m):\n            for j in range(n):\n                if answers[j][i] == '1':\n                    points[i] += perm[i]\n        \n        surprise_value = calculate_surprise_value(points, expected_points)\n        if surprise_value > max_surprise_value:\n            max_surprise_value = surprise_value\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    result = find_max_surprise_permutation(n, m, expected_points, answers)\n    print(*result)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Parse the input data for each test case\",\n      \"Calculate the surprise value for each possible permutation of points\",\n      \"Find the permutation that maximizes the surprise value\"\n    ],\n    \"major_steps\": [\n      \"Read the number of test cases\",\n      \"For each test case:\",\n      \"   - Read the number of students and questions\",\n      \"   - Read the expected points for each student\",\n      \"   - Read the answers for each student\",\n      \"   - Calculate the surprise value for each permutation of points\",\n      \"   - Find the permutation that maximizes the surprise value\",\n      \"   - Print the permutation\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation': In this context, permutation refers to rearranging the order of points assigned to students to maximize the surprise value of their results.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum possible': Indicates the need to find the permutation that results in the highest surprise value.\n\n# [code logic]\n    The major steps should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    Edge Case 1:\n    Input:\n    1\n    1 1\n    1\n    1\n    Output:\n    1\n    Explanation: With only one student and one question, the permutation is straightforward.\n    \n    Edge Case 2:\n    Input:\n    1\n    2 2\n    2 1\n    10\n    01\n    Output:\n    2 1\n    Explanation: The expected points are different for each student, and the correct permutation is required.\n    \n    Edge Case 3:\n    Input:\n    1\n    3 3\n    3 2 1\n    111\n    000\n    111\n    Output:\n    3 2 1\n    Explanation: The students have different expected points, and the correct permutation is needed.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge cases)\n\nNO", "Round_0": {"code": "def calculate_surprise_value(points, answers):\n    surprise_values = []\n    for i in range(1, len(points)+1):\n        permutation = list(range(1, i+1))\n        max_surprise = 0\n        for _ in range(1, len(points)-i+2):\n            surprise = sum([points[p-1] for p in permutation])\n            max_surprise = max(max_surprise, surprise)\n            if _ < len(points)-i+1:\n                permutation = permutation[1:] + [permutation[0]]\n        surprise_values.append(max_surprise)\n    return surprise_values.index(max(surprise_values)) + 1\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    permutation = calculate_surprise_value(points, answers)\n    print(*permutation)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 28)"}, "Round_1": {"code": "def calculate_surprise_value(points, answers):\n    surprise_values = []\n    for i in range(1, len(points)+1):\n        permutation = list(range(1, i+1))\n        max_surprise = 0\n        for _ in range(1, len(points)-i+2):\n            surprise = sum([points[p-1] for p in permutation])\n            max_surprise = max(max_surprise, surprise)\n            if _ < len(points)-i+1:\n                permutation = permutation[1:] + [permutation[0]]\n        surprise_values.append(max_surprise)\n    return permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    permutation = calculate_surprise_value(points, answers)\n    print(*permutation)\n"}}], "scores": [], "pass_results": [false, true, true, false, false, true, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 22, "prompt": "Petya is a math teacher. n of his students has written a test consisting of m questions, and for each student, it is known which questions he has answered correctly and which he has not. \n\nIf the student answers the j-th question correctly, he gets p_j points (otherwise, he gets 0 points), and the points for the questions are distributed in such a way that the array p is a permutation of numbers from 1 to m.\n\nFor the i-th student, Petya knows that he expects to get x_i points for the test and wonders how unexpected the results could be. Petya believes that the surprise value of the results for students is equal to \u2211_{i=1}^{n} |x_i - r_i|, where r_i is the number of points that the i-th student has got for the test.\n\nYour task is to help Petya find such a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them. Consider how the distribution of points affects the surprise value for Petya's students.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 10; 1 \u2264 m \u2264 10^4) \u2014 the number of students and the number of questions, respectively.\n\nThe second line contains n integers x_1, x_2, ..., x_n (0 \u2264 x_i \u2264 (m(m+1))/(2)), where x_i is the number of points that the i-th student expects to get.\n\nThis is followed by n lines, the i-th line contains the string s_i (|s_i| = m; s_{i, j} \u2208 \\{0, 1\\}), where s_{i, j} is 1 if the i-th student has answered the j-th question correctly, and 0 otherwise.\n\nThe sum of m for all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case, print m integers \u2014 a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n010110\n000101\n111111\n\n\nOutput\n\n\n3 1 2 \n2 3 4 1 \n3 1 4 5 2 6 ", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 10; 1 \u2264 m \u2264 10^4) \u2014 the number of students and the number of questions, respectively.\n\nThe second line contains n integers x_1, x_2, ..., x_n (0 \u2264 x_i \u2264 (m(m+1))/(2)), where x_i is the number of points that the i-th student expects to get.\n\nThis is followed by n lines, the i-th line contains the string s_i (|s_i| = m; s_{i, j} \u2208 \\{0, 1\\}), where s_{i, j} is 1 if the i-th student has answered the j-th question correctly, and 0 otherwise.\n\nThe sum of m for all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case, print m integers \u2014 a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n010110\n000101\n111111\n\n\nOutput\n\n\n3 1 2 \n2 3 4 1 \n3 1 4 5 2 6 ", "mutate_method": "add_1_sentence_at_end", "save_node": false, "parent_index": 34}
