{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "repair_prompt": ["Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that each song must be part of one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Explore all potential distributions to guarantee the difference is minimized accurately. Ensure that no song is left out in the allocation between the two concerts.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Luntik wants to ensure that each song is part of a concert and minimize the absolute difference in durations between the two concerts. One way to achieve this is by exploring all potential distributions of songs to accurately minimize the difference in minutes.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Luntik has one-minute, two-minute, and three-minute songs that he wants to distribute into two concerts to minimize the absolute difference in durations between them. Explore all potential distributions to find the minimal possible difference in minutes accurately, ensuring that all songs are included in the concerts.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to generate all possible distributions of songs into two concerts\ndef generate_distributions(a, b, c):\n    songs = [1]*a + [2]*b + [3]*c\n    distributions = []\n    for r in range(1, len(songs)):\n        for combo in itertools.combinations(songs, r):\n            distributions.append((set(combo), set(songs) - set(combo)))\n    return distributions\n\n# Function to calculate the duration of each concert for each distribution\ndef calculate_concert_durations(distribution):\n    concert1_duration = sum(song for song in distribution[0])\n    concert2_duration = sum(song for song in distribution[1])\n    return abs(concert1_duration - concert2_duration)\n\n# Function to find the distribution that minimizes the absolute difference in durations between the concerts\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    distributions = generate_distributions(a, b, c)\n    min_difference = float('inf')\n    for distribution in distributions:\n        difference = calculate_concert_durations(distribution)\n        min_difference = min(min_difference, difference)\n    return min_difference\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(find_minimal_difference(a, b, c))\n\nmain()", "completions": ["import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to generate all possible distributions of songs into two concerts\ndef generate_distributions(a, b, c):\n    songs = [1]*a + [2]*b + [3]*c\n    distributions = []\n    for r in range(1, len(songs)):\n        for combo in itertools.combinations(songs, r):\n            distributions.append((set(combo), set(songs) - set(combo)))\n    return distributions\n\n# Function to calculate the duration of each concert for each distribution\ndef calculate_concert_durations(distribution):\n    concert1_duration = sum(song for song in distribution[0])\n    concert2_duration = sum(song for song in distribution[1])\n    return abs(concert1_duration - concert2_duration)\n\n# Function to find the distribution that minimizes the absolute difference in durations between the concerts\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    distributions = generate_distributions(a, b, c)\n    min_difference = float('inf')\n    for distribution in distributions:\n        difference = calculate_concert_durations(distribution)\n        min_difference = min(min_difference, difference)\n    return min_difference\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(find_minimal_difference(a, b, c))\n\nmain()", "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Initialize the minimal difference as a large number\n    minimal_difference = float('inf')\n    \n    # Generate all possible combinations of songs for the two concerts\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                difference = abs(concert1_duration - concert2_duration)\n                \n                # Update the minimal difference if a new minimum is found\n                minimal_difference = min(minimal_difference, difference)\n    \n    return minimal_difference\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n\nmain()", "import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to generate all possible distributions of songs into two concerts\ndef generate_distributions(a, b, c):\n    songs = [1]*a + [2]*b + [3]*c\n    distributions = []\n    for r in range(1, len(songs)):\n        for combo in itertools.combinations(songs, r):\n            distributions.append((list(combo), [x for x in songs if x not in combo]))\n    return distributions\n\n# Function to calculate the duration of each concert for each distribution\ndef calculate_concert_durations(distribution):\n    return sum(distribution[0]), sum(distribution[1])\n\n# Function to find the distribution that minimizes the absolute difference in durations between the concerts\ndef find_minimal_difference(distributions):\n    min_diff = float('inf')\n    for distribution in distributions:\n        concert1_duration, concert2_duration = calculate_concert_durations(distribution)\n        diff = abs(concert1_duration - concert2_duration)\n        min_diff = min(min_diff, diff)\n    return min_diff\n\n# Main function to handle input and output\ndef main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = calculate_total_duration(a, b, c)\n        distributions = generate_distributions(a, b, c)\n        min_diff = find_minimal_difference(distributions)\n        print(min_diff)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Initialize the minimal difference as a large number\n    minimal_difference = float('inf')\n    \n    # Generate all possible combinations of songs for the two concerts\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                difference = abs(concert1_duration - concert2_duration)\n                \n                # Update the minimal difference if a new minimum is found\n                minimal_difference = min(minimal_difference, difference)\n    \n    return minimal_difference\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n\nmain()", "import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    min_duration = total_duration // 2\n    possible_distributions = itertools.combinations([a, b, c], 2)\n    min_difference = float('inf')\n    \n    for dist in possible_distributions:\n        concert1_duration = dist[0] + 2*(total_duration - sum(dist)) + 3*dist[1]\n        concert2_duration = total_duration - concert1_duration\n        difference = abs(concert1_duration - concert2_duration)\n        min_difference = min(min_difference, difference)\n    \n    return min_difference\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(find_minimal_difference(a, b, c))\n\nmain()", "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    # Generate all possible distributions of songs into two concerts\n    for i in range(1 << 3):\n        concert1_duration = 0\n        concert2_duration = 0\n        \n        # Calculate the duration of each concert for each distribution\n        for j in range(3):\n            if i & (1 << j):\n                concert1_duration += (j + 1) * [a, b, c][j]\n            else:\n                concert2_duration += (j + 1) * [a, b, c][j]\n        \n        # Find the distribution that minimizes the absolute difference in durations between the concerts\n        min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(calculate_minimal_difference(a, b, c))\n\nmain()", "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Initialize minimal difference as a large number\n    minimal_difference = float('inf')\n    \n    # Generate all possible combinations of songs for the two concerts\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                difference = abs(concert1_duration - concert2_duration)\n                \n                # Update minimal difference if a new minimum is found\n                minimal_difference = min(minimal_difference, difference)\n    \n    return minimal_difference\n\n# Input number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n\nmain()", "import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    min_diff = float('inf')\n    \n    for distribution in itertools.product(range(a+1), range(b+1), range(c+1)):\n        concert1_duration = distribution[0] + 2*distribution[1] + 3*distribution[2]\n        concert2_duration = total_duration - concert1_duration\n        diff = abs(concert1_duration - concert2_duration)\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(find_minimal_difference(a, b, c))\n\nmain()", "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_duration_concert1 = total_duration // 2\n    min_duration_concert2 = total_duration - min_duration_concert1\n    min_difference = abs(min_duration_concert1 - min_duration_concert2)\n    return min_difference\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(calculate_min_difference(a, b, c))\n\nmain()", "import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to generate all possible distributions of songs into two concerts\ndef generate_distributions(a, b, c):\n    songs = [1]*a + [2]*b + [3]*c\n    distributions = []\n    for r in range(1, len(songs)):\n        for combo in itertools.combinations(songs, r):\n            distributions.append((set(combo), set(songs) - set(combo)))\n    return distributions\n\n# Function to calculate the duration of each concert for each distribution\ndef calculate_concert_durations(distribution):\n    concert1_duration = sum(song for song in distribution[0])\n    concert2_duration = sum(song for song in distribution[1])\n    return abs(concert1_duration - concert2_duration)\n\n# Function to find the distribution that minimizes the absolute difference in durations between the concerts\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    distributions = generate_distributions(a, b, c)\n    min_difference = float('inf')\n    for distribution in distributions:\n        difference = calculate_concert_durations(distribution)\n        min_difference = min(min_difference, difference)\n    return min_difference\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(find_minimal_difference(a, b, c))\n\nmain()"], "session_history": {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the total duration of all songs\",\n      \"Generate all possible distributions of songs into two concerts\",\n      \"Calculate the duration of each concert for each distribution\",\n      \"Find the distribution that minimizes the absolute difference in durations between the concerts\"\n    ],\n    \"steps\": [\n      \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n      \"Generate all possible distributions of songs into two concerts by iterating through all possible combinations of songs\",\n      \"Calculate the duration of each concert for each distribution by summing the durations of the songs in each concert\",\n      \"Find the distribution that minimizes the absolute difference in durations between the concerts by comparing the differences and selecting the smallest one\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'durations': The total time taken by all the songs combined.\n    'distributions': How the songs are split between two concerts.\n    Explanation: The core concept involves calculating the total duration of all songs and finding the optimal way to distribute them between two concerts to minimize the difference in concert durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': Indicates the need to minimize the absolute difference in durations between the concerts.\n    Explanation: The goal is to find the smallest possible difference in minutes between the durations of the two concerts.\n\n# [code logic]\n    There are no steps that should be implemented simultaneously. Each step should be executed sequentially to achieve the desired outcome.\n\n# [edge case] \n    1. 1 1 1\n       Expected Output: 0\n       Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be 0.\n    \n    2. 2 1 3\n       Expected Output: 1\n       Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The difference will be |7-6| = 1.\n    \n    3. 5 5 5\n       Expected Output: 0\n       Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)", "Round_0": {"code": "import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to generate all possible distributions of songs into two concerts\ndef generate_distributions(a, b, c):\n    songs = [1]*a + [2]*b + [3]*c\n    distributions = []\n    for r in range(1, len(songs)):\n        for combo in itertools.combinations(songs, r):\n            distributions.append((set(combo), set(songs) - set(combo)))\n    return distributions\n\n# Function to calculate the duration of each concert for each distribution\ndef calculate_concert_durations(distribution):\n    concert1_duration = sum(song for song in distribution[0])\n    concert2_duration = sum(song for song in distribution[1])\n    return abs(concert1_duration - concert2_duration)\n\n# Function to find the distribution that minimizes the absolute difference in durations between the concerts\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    distributions = generate_distributions(a, b, c)\n    min_difference = float('inf')\n    for distribution in distributions:\n        difference = calculate_concert_durations(distribution)\n        min_difference = min(min_difference, difference)\n    return min_difference\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(find_minimal_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 44)"}, "Round_1": {"code": "import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to generate all possible distributions of songs into two concerts\ndef generate_distributions(a, b, c):\n    songs = [1]*a + [2]*b + [3]*c\n    distributions = []\n    for r in range(1, len(songs)):\n        for combo in itertools.combinations(songs, r):\n            distributions.append((set(combo), set(songs) - set(combo)))\n    return distributions\n\n# Function to calculate the duration of each concert for each distribution\ndef calculate_concert_durations(distribution):\n    concert1_duration = sum(song for song in distribution[0])\n    concert2_duration = sum(song for song in distribution[1])\n    return abs(concert1_duration - concert2_duration)\n\n# Function to find the distribution that minimizes the absolute difference in durations between the concerts\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    distributions = generate_distributions(a, b, c)\n    min_difference = float('inf')\n    for distribution in distributions:\n        difference = calculate_concert_durations(distribution)\n        min_difference = min(min_difference, difference)\n    return min_difference\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(find_minimal_difference(a, b, c))\n"}}, "session_historys": [{"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the total duration of all songs\",\n      \"Generate all possible distributions of songs into two concerts\",\n      \"Calculate the duration of each concert for each distribution\",\n      \"Find the distribution that minimizes the absolute difference in durations between the concerts\"\n    ],\n    \"steps\": [\n      \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n      \"Generate all possible distributions of songs into two concerts by iterating through all possible combinations of songs\",\n      \"Calculate the duration of each concert for each distribution by summing the durations of the songs in each concert\",\n      \"Find the distribution that minimizes the absolute difference in durations between the concerts by comparing the differences and selecting the smallest one\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'durations': The total length of songs in minutes.\n    'distributions': How the songs are split between two concerts.\n    Explanation: The core concept involves distributing songs to minimize the difference in concert durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as they involve calculations and comparisons at each stage.\n\n# [edge case] \n    t = 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be 0.\n    \n    t = 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The difference will be 1.\n\n    t = 1 1 2\n    Output: 1\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be 1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)", "Round_0": {"code": "import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to generate all possible distributions of songs into two concerts\ndef generate_distributions(a, b, c):\n    songs = [1]*a + [2]*b + [3]*c\n    distributions = []\n    for r in range(1, len(songs)):\n        for combo in itertools.combinations(songs, r):\n            distributions.append((set(combo), set(songs) - set(combo)))\n    return distributions\n\n# Function to calculate the duration of each concert for each distribution\ndef calculate_concert_durations(distribution):\n    concert1_duration = sum(song for song in distribution[0])\n    concert2_duration = sum(song for song in distribution[1])\n    return abs(concert1_duration - concert2_duration)\n\n# Function to find the distribution that minimizes the absolute difference in durations between the concerts\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    distributions = generate_distributions(a, b, c)\n    min_difference = float('inf')\n    for distribution in distributions:\n        difference = calculate_concert_durations(distribution)\n        min_difference = min(min_difference, difference)\n    return min_difference\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(find_minimal_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 44)"}, "Round_1": {"code": "import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to generate all possible distributions of songs into two concerts\ndef generate_distributions(a, b, c):\n    songs = [1]*a + [2]*b + [3]*c\n    distributions = []\n    for r in range(1, len(songs)):\n        for combo in itertools.combinations(songs, r):\n            distributions.append((set(combo), set(songs) - set(combo)))\n    return distributions\n\n# Function to calculate the duration of each concert for each distribution\ndef calculate_concert_durations(distribution):\n    concert1_duration = sum(song for song in distribution[0])\n    concert2_duration = sum(song for song in distribution[1])\n    return abs(concert1_duration - concert2_duration)\n\n# Function to find the distribution that minimizes the absolute difference in durations between the concerts\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    distributions = generate_distributions(a, b, c)\n    min_difference = float('inf')\n    for distribution in distributions:\n        difference = calculate_concert_durations(distribution)\n        min_difference = min(min_difference, difference)\n    return min_difference\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(find_minimal_difference(a, b, c))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Generate all possible combinations of songs for the two concerts\",\n    \"Calculate the duration of each concert for each combination\",\n    \"Find the combination that minimizes the absolute difference in durations between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs (total_duration)\",\n    \"step_2\": \"Generate all possible combinations of songs for the two concerts\",\n    \"step_3\": \"For each combination, calculate the duration of each concert (concert1_duration, concert2_duration)\",\n    \"step_4\": \"Find the combination that minimizes the absolute difference in durations between the two concerts\",\n    \"step_5\": \"Output the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute into two concerts to minimize the absolute difference in durations'\n    Explanation: The core concept is to distribute the songs into two concerts in a way that the absolute difference in durations between the two concerts is minimized.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': means finding the smallest possible difference in durations between the concerts\n\n# [code logic]\n    The steps should be implemented step by step as they are sequential and do not require simultaneous implementation.\n\n# [edge case] \n    1 1 1\n    Output: 0\n    Explanation: In this case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Initialize the minimal difference as a large number\n    minimal_difference = float('inf')\n    \n    # Generate all possible combinations of songs for the two concerts\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                difference = abs(concert1_duration - concert2_duration)\n                \n                # Update the minimal difference if a new minimum is found\n                minimal_difference = min(minimal_difference, difference)\n    \n    return minimal_difference\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 36)"}, "Round_1": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Initialize the minimal difference as a large number\n    minimal_difference = float('inf')\n    \n    # Generate all possible combinations of songs for the two concerts\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                difference = abs(concert1_duration - concert2_duration)\n                \n                # Update the minimal difference if a new minimum is found\n                minimal_difference = min(minimal_difference, difference)\n    \n    return minimal_difference\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the total duration of all songs\",\n      \"Generate all possible distributions of songs into two concerts\",\n      \"Calculate the duration of each concert for each distribution\",\n      \"Find the distribution that minimizes the absolute difference in durations between the concerts\"\n    ],\n    \"steps\": [\n      \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n      \"Generate all possible distributions of songs into two concerts by iterating through all possible combinations of songs\",\n      \"Calculate the duration of each concert for each distribution by summing the durations of the songs in each concert\",\n      \"Find the distribution that minimizes the absolute difference in durations between the concerts by comparing the differences and selecting the smallest one\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'durations': The total length of songs in minutes.\n    'distributions': How the songs are split between two concerts.\n    Explanation: The core concept involves distributing songs into two concerts to minimize the absolute difference in durations between the concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': Indicates the need to minimize the absolute difference in durations between the concerts.\n    Explanation: We need to find the distribution that results in the smallest difference in durations between the two concerts.\n\n# [code logic]\n    The steps do not require simultaneous implementation.\n\n# [edge case] \n    1. 1 1 1\n       Expected Output: 0\n       Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be 0.\n    2. 2 1 3\n       Expected Output: 1\n       Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The difference will be 1.\n    3. 5 5 5\n       Expected Output: 0\n       Explanation: Luntik can distribute the songs equally between the two concerts, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)", "Round_0": {"code": "import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to generate all possible distributions of songs into two concerts\ndef generate_distributions(a, b, c):\n    songs = [1]*a + [2]*b + [3]*c\n    distributions = []\n    for r in range(1, len(songs)):\n        for combo in itertools.combinations(songs, r):\n            distributions.append((list(combo), [x for x in songs if x not in combo]))\n    return distributions\n\n# Function to calculate the duration of each concert for each distribution\ndef calculate_concert_durations(distribution):\n    return sum(distribution[0]), sum(distribution[1])\n\n# Function to find the distribution that minimizes the absolute difference in durations between the concerts\ndef find_minimal_difference(distributions):\n    min_diff = float('inf')\n    for distribution in distributions:\n        concert1_duration, concert2_duration = calculate_concert_durations(distribution)\n        diff = abs(concert1_duration - concert2_duration)\n        min_diff = min(min_diff, diff)\n    return min_diff\n\n# Main function to handle input and output\ndef main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = calculate_total_duration(a, b, c)\n        distributions = generate_distributions(a, b, c)\n        min_diff = find_minimal_difference(distributions)\n        print(min_diff)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 3 were given"}, "Round_1": {"code": "import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to generate all possible distributions of songs into two concerts\ndef generate_distributions(a, b, c):\n    songs = [1]*a + [2]*b + [3]*c\n    distributions = []\n    for r in range(1, len(songs)):\n        for combo in itertools.combinations(songs, r):\n            distributions.append((list(combo), [x for x in songs if x not in combo]))\n    return distributions\n\n# Function to calculate the duration of each concert for each distribution\ndef calculate_concert_durations(distribution):\n    return sum(distribution[0]), sum(distribution[1])\n\n# Function to find the distribution that minimizes the absolute difference in durations between the concerts\ndef find_minimal_difference(distributions):\n    min_diff = float('inf')\n    for distribution in distributions:\n        concert1_duration, concert2_duration = calculate_concert_durations(distribution)\n        diff = abs(concert1_duration - concert2_duration)\n        min_diff = min(min_diff, diff)\n    return min_diff\n\n# Main function to handle input and output\ndef main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = calculate_total_duration(a, b, c)\n        distributions = generate_distributions(a, b, c)\n        min_diff = find_minimal_difference(distributions)\n        print(min_diff)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Generate all possible combinations of songs for the two concerts\",\n    \"Calculate the duration of each concert for each combination\",\n    \"Find the combination that minimizes the absolute difference in durations between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs (total_duration)\",\n    \"step_2\": \"Generate all possible combinations of songs for the two concerts\",\n    \"step_3\": \"For each combination, calculate the duration of each concert (concert1_duration, concert2_duration)\",\n    \"step_4\": \"Find the combination that minimizes the absolute difference in durations between the two concerts\",\n    \"step_5\": \"Output the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute into two concerts to minimize the absolute difference in durations'\n    Explanation: The core concept is to distribute the songs into two concerts in a way that the absolute difference in durations between the two concerts is minimized.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': means finding the smallest possible difference in durations between the concerts\n\n# [code logic]\n    The steps should be implemented step by step as they are sequential and do not require simultaneous implementation.\n\n# [edge case] \n    1 1 1\n    Output: 0\n    Explanation: In this case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of finding the combination that minimizes the absolute difference in durations between the two concerts should cover all scenarios.", "Round_0": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Initialize the minimal difference as a large number\n    minimal_difference = float('inf')\n    \n    # Generate all possible combinations of songs for the two concerts\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                difference = abs(concert1_duration - concert2_duration)\n                \n                # Update the minimal difference if a new minimum is found\n                minimal_difference = min(minimal_difference, difference)\n    \n    return minimal_difference\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 36)"}, "Round_1": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Initialize the minimal difference as a large number\n    minimal_difference = float('inf')\n    \n    # Generate all possible combinations of songs for the two concerts\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                difference = abs(concert1_duration - concert2_duration)\n                \n                # Update the minimal difference if a new minimum is found\n                minimal_difference = min(minimal_difference, difference)\n    \n    return minimal_difference\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the minimum and maximum possible durations for each concert\",\n    \"Find all possible distributions of songs between the two concerts\",\n    \"Calculate the absolute difference in durations between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Calculate the total duration of all songs by multiplying the number of each type of song by its duration\",\n    \"Step 2\": \"Determine the minimum and maximum possible durations for each concert by dividing the total duration by 2\",\n    \"Step 3\": \"Find all possible distributions of songs between the two concerts by iterating through all combinations of songs\",\n    \"Step 4\": \"Calculate the absolute difference in durations between the two concerts and find the minimum difference\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distributions of songs'\n    Explanation: It refers to the different ways in which songs can be divided between two concerts to minimize the absolute difference in durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    Case 1:\n    1 1 1\n    Output:\n    0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    Case 2:\n    2 1 3\n    Output:\n    1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    Case 3:\n    5 5 5\n    Output:\n    0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in a minimal difference of 0.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers the scenarios effectively.", "Round_0": {"code": "import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    min_duration = total_duration // 2\n    possible_distributions = itertools.combinations([a, b, c], 2)\n    min_difference = float('inf')\n    \n    for dist in possible_distributions:\n        concert1_duration = dist[0] + 2*(total_duration - sum(dist)) + 3*dist[1]\n        concert2_duration = total_duration - concert1_duration\n        difference = abs(concert1_duration - concert2_duration)\n        min_difference = min(min_difference, difference)\n    \n    return min_difference\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(find_minimal_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 34)"}, "Round_1": {"code": "import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    min_duration = total_duration // 2\n    possible_distributions = itertools.combinations([a, b, c], 2)\n    min_difference = float('inf')\n    \n    for dist in possible_distributions:\n        concert1_duration = dist[0] + 2*(total_duration - sum(dist)) + 3*dist[1]\n        concert2_duration = total_duration - concert1_duration\n        difference = abs(concert1_duration - concert2_duration)\n        min_difference = min(min_difference, difference)\n    \n    return min_difference\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(find_minimal_difference(a, b, c))\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the total duration of all songs\",\n      \"Generate all possible distributions of songs into two concerts\",\n      \"Calculate the duration of each concert for each distribution\",\n      \"Find the distribution that minimizes the absolute difference in durations between the concerts\"\n    ],\n    \"steps\": [\n      \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n      \"Generate all possible distributions of songs into two concerts by iterating through all possible combinations of songs\",\n      \"Calculate the duration of each concert for each distribution by summing the durations of the songs in each concert\",\n      \"Find the distribution that minimizes the absolute difference in durations between the concerts by comparing the differences and selecting the smallest one\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'durations': The total length of songs in minutes.\n    'distributions': How the songs are split between two concerts.\n    Explanation: The core concept involves distributing songs into two concerts to minimize the absolute difference in durations between the concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': Indicates the need to minimize the absolute difference in durations between the concerts.\n    Explanation: We need to find the distribution that results in the smallest difference in durations.\n\n# [code logic]\n    The steps should be implemented sequentially as they involve calculations and comparisons.\n    \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\"\n    \"Generate all possible distributions of songs into two concerts by iterating through all possible combinations of songs\"\n    \"Calculate the duration of each concert for each distribution by summing the durations of the songs in each concert\"\n    \"Find the distribution that minimizes the absolute difference in durations between the concerts by comparing the differences and selecting the smallest one\"\n\n# [edge case] \n    1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be 0.\n    \n    2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The difference will be 1.\n    \n    5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in 0 difference in durations.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios adequately.", "Round_0": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    # Generate all possible distributions of songs into two concerts\n    for i in range(1 << 3):\n        concert1_duration = 0\n        concert2_duration = 0\n        \n        # Calculate the duration of each concert for each distribution\n        for j in range(3):\n            if i & (1 << j):\n                concert1_duration += (j + 1) * [a, b, c][j]\n            else:\n                concert2_duration += (j + 1) * [a, b, c][j]\n        \n        # Find the distribution that minimizes the absolute difference in durations between the concerts\n        min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(calculate_minimal_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 36)"}, "Round_1": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    # Generate all possible distributions of songs into two concerts\n    for i in range(1 << 3):\n        concert1_duration = 0\n        concert2_duration = 0\n        \n        # Calculate the duration of each concert for each distribution\n        for j in range(3):\n            if i & (1 << j):\n                concert1_duration += (j + 1) * [a, b, c][j]\n            else:\n                concert2_duration += (j + 1) * [a, b, c][j]\n        \n        # Find the distribution that minimizes the absolute difference in durations between the concerts\n        min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(calculate_minimal_difference(a, b, c))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Generate all possible combinations of songs for the two concerts\",\n    \"Calculate the duration of each concert for each combination\",\n    \"Find the combination that minimizes the absolute difference in durations between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs (total_duration)\",\n    \"step_2\": \"Generate all possible combinations of songs for the two concerts\",\n    \"step_3\": \"For each combination, calculate the duration of each concert (concert1_duration, concert2_duration)\",\n    \"step_4\": \"Find the combination that minimizes the absolute difference in durations between the two concerts\",\n    \"step_5\": \"Output the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute into two concerts': Luntik needs to split the songs into two concerts to minimize the absolute difference in durations between them.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': Luntik wants to find the smallest possible difference in minutes between the concerts durations.\n\n# [code logic]\n    The steps should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    1. 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    2. 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    3. 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in 0 difference in durations.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Initialize minimal difference as a large number\n    minimal_difference = float('inf')\n    \n    # Generate all possible combinations of songs for the two concerts\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                difference = abs(concert1_duration - concert2_duration)\n                \n                # Update minimal difference if a new minimum is found\n                minimal_difference = min(minimal_difference, difference)\n    \n    return minimal_difference\n\n# Input number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Initialize minimal difference as a large number\n    minimal_difference = float('inf')\n    \n    # Generate all possible combinations of songs for the two concerts\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                difference = abs(concert1_duration - concert2_duration)\n                \n                # Update minimal difference if a new minimum is found\n                minimal_difference = min(minimal_difference, difference)\n    \n    return minimal_difference\n\n# Input number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the minimum and maximum possible durations for each concert\",\n    \"Find all possible distributions of songs between the two concerts\",\n    \"Calculate the absolute difference in durations between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Calculate the total duration of all songs by multiplying the number of each type of song by its duration\",\n    \"Step 2\": \"Determine the minimum and maximum possible durations for each concert by dividing the total duration by 2\",\n    \"Step 3\": \"Find all possible distributions of songs between the two concerts by iterating through all combinations of songs\",\n    \"Step 4\": \"Calculate the absolute difference in durations between the two concerts and keep track of the minimum difference found\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distributions of songs'\n    Explanation: It refers to how the songs can be divided between two concerts to minimize the absolute difference in durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as they are dependent on each other.\n\n# [edge case] \n    4\n    1 1 1\n    Output\n    0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    5\n    5 5 5\n    Output\n    0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in a difference of 0.\n    \n    1\n    1 1 2\n    Output\n    1\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    min_diff = float('inf')\n    \n    for distribution in itertools.product(range(a+1), range(b+1), range(c+1)):\n        concert1_duration = distribution[0] + 2*distribution[1] + 3*distribution[2]\n        concert2_duration = total_duration - concert1_duration\n        diff = abs(concert1_duration - concert2_duration)\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(find_minimal_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 32)"}, "Round_1": {"code": "import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    min_diff = float('inf')\n    \n    for distribution in itertools.product(range(a+1), range(b+1), range(c+1)):\n        concert1_duration = distribution[0] + 2*distribution[1] + 3*distribution[2]\n        concert2_duration = total_duration - concert1_duration\n        diff = abs(concert1_duration - concert2_duration)\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(find_minimal_difference(a, b, c))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the minimum and maximum possible durations for each concert\",\n    \"Find all possible distributions of songs between the two concerts\",\n    \"Calculate the absolute difference in durations between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Calculate the total duration of all songs by multiplying the number of each type of song by its duration\",\n    \"Step 2\": \"Determine the minimum and maximum possible durations for each concert based on the total duration of all songs\",\n    \"Step 3\": \"Generate all possible distributions of songs between the two concerts by iterating through all combinations of songs\",\n    \"Step 4\": \"Calculate the absolute difference in durations between the two concerts for each distribution and keep track of the minimum difference\",\n    \"Step 5\": \"Output the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'durations': The time length of each song.\n    'concerts': Separate events where songs are performed.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': Indicates the smallest possible value.\n\n# [code logic]\n    No steps should be implemented simultaneously. All steps should be followed sequentially.\n\n# [edge case] \n    Test Case 1:\n    1 1 1\n    Output:\n    0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    Test Case 2:\n    2 1 3\n    Output:\n    1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    Test Case 3:\n    5 5 5\n    Output:\n    0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in a minimal difference of 0.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_duration_concert1 = total_duration // 2\n    min_duration_concert2 = total_duration - min_duration_concert1\n    min_difference = abs(min_duration_concert1 - min_duration_concert2)\n    return min_difference\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(calculate_min_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 18)"}, "Round_1": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_duration_concert1 = total_duration // 2\n    min_duration_concert2 = total_duration - min_duration_concert1\n    min_difference = abs(min_duration_concert1 - min_duration_concert2)\n    return min_difference\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(calculate_min_difference(a, b, c))\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the total duration of all songs\",\n      \"Generate all possible distributions of songs into two concerts\",\n      \"Calculate the duration of each concert for each distribution\",\n      \"Find the distribution that minimizes the absolute difference in durations between the concerts\"\n    ],\n    \"steps\": [\n      \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n      \"Generate all possible distributions of songs into two concerts by iterating through all possible combinations of songs\",\n      \"Calculate the duration of each concert for each distribution by summing the durations of the songs in each concert\",\n      \"Find the distribution that minimizes the absolute difference in durations between the concerts by comparing the differences and selecting the smallest one\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'durations': The total time taken by all the songs combined.\n    'distributions': How the songs are split between two concerts.\n    Explanation: The core concept involves calculating the total duration of all songs and finding the optimal way to distribute them between two concerts to minimize the difference in concert durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': Indicates the need to minimize the absolute difference in durations between the concerts.\n    Explanation: The goal is to find the smallest possible difference in minutes between the durations of the two concerts.\n\n# [code logic]\n    There are no steps that should be implemented simultaneously. Each step should be executed sequentially to achieve the desired outcome.\n\n# [edge case] \n    1. 1 1 1\n       Expected Output: 0\n       Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be 0.\n    \n    2. 2 1 3\n       Expected Output: 1\n       Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The difference will be |7-6| = 1.\n    \n    3. 5 5 5\n       Expected Output: 0\n       Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)", "Round_0": {"code": "import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to generate all possible distributions of songs into two concerts\ndef generate_distributions(a, b, c):\n    songs = [1]*a + [2]*b + [3]*c\n    distributions = []\n    for r in range(1, len(songs)):\n        for combo in itertools.combinations(songs, r):\n            distributions.append((set(combo), set(songs) - set(combo)))\n    return distributions\n\n# Function to calculate the duration of each concert for each distribution\ndef calculate_concert_durations(distribution):\n    concert1_duration = sum(song for song in distribution[0])\n    concert2_duration = sum(song for song in distribution[1])\n    return abs(concert1_duration - concert2_duration)\n\n# Function to find the distribution that minimizes the absolute difference in durations between the concerts\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    distributions = generate_distributions(a, b, c)\n    min_difference = float('inf')\n    for distribution in distributions:\n        difference = calculate_concert_durations(distribution)\n        min_difference = min(min_difference, difference)\n    return min_difference\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(find_minimal_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 44)"}, "Round_1": {"code": "import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to generate all possible distributions of songs into two concerts\ndef generate_distributions(a, b, c):\n    songs = [1]*a + [2]*b + [3]*c\n    distributions = []\n    for r in range(1, len(songs)):\n        for combo in itertools.combinations(songs, r):\n            distributions.append((set(combo), set(songs) - set(combo)))\n    return distributions\n\n# Function to calculate the duration of each concert for each distribution\ndef calculate_concert_durations(distribution):\n    concert1_duration = sum(song for song in distribution[0])\n    concert2_duration = sum(song for song in distribution[1])\n    return abs(concert1_duration - concert2_duration)\n\n# Function to find the distribution that minimizes the absolute difference in durations between the concerts\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    distributions = generate_distributions(a, b, c)\n    min_difference = float('inf')\n    for distribution in distributions:\n        difference = calculate_concert_durations(distribution)\n        min_difference = min(min_difference, difference)\n    return min_difference\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(find_minimal_difference(a, b, c))\n"}}], "scores": [], "pass_results": [false, true, false, false, true, true, true, false, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 165, "prompt": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that each song must be part of one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Explore all potential distributions to guarantee the difference is minimized accurately. Ensure that no song is left out in the allocation between the two concerts.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "rephrase_one", "save_node": false, "parent_index": 132}
