{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "repair_prompt": ["Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Consider the case where he has no songs to ensure your solution accounts for an empty set.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Luntik wants to distribute his one-minute, two-minute, and three-minute songs into two concerts with the smallest possible difference in durations. This difference is calculated as the absolute value of the sum of durations in each concert. Can you help Luntik find the minimal possible difference in minutes between the concerts durations, even when he has no songs to distribute?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Luntik has one-minute, two-minute, and three-minute songs that he wants to distribute into two concerts to minimize the absolute difference in durations of the concerts. Find the minimal possible difference in minutes.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(1 << 3):\n        sum_concert_1 = 0\n        sum_concert_2 = 0\n        \n        for j in range(3):\n            if i & (1 << j):\n                sum_concert_1 += (j + 1) * [a, b, c][j]\n            else:\n                sum_concert_2 += (j + 1) * [a, b, c][j]\n        \n        min_diff = min(min_diff, abs(sum_concert_1 - sum_concert_2))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n\nmain()", "completions": ["def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(half_duration - (a + 2*b))\n    if abs(half_duration - (b + 3*c)) < min_diff:\n        min_diff = abs(half_duration - (b + 3*c))\n    \n    return min_diff\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(calculate_minimal_difference(a, b, c))\n\nmain()", "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(half_duration - (a + 2*b))\n    for i in range(a+1):\n        for j in range(b+1):\n            if 2*i + j <= half_duration:\n                diff = abs(half_duration - (2*i + j))\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(calculate_min_difference(a, b, c))\n\nmain()", "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Try all possible combinations of distributing songs into two concerts\n    min_diff = float('inf')\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                diff = abs(concert1_duration - concert2_duration)\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n\nmain()", "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Initialize the minimal difference as a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of songs for the first concert\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert_duration = i + 2*j + 3*k\n                diff = abs(concert_duration - (total_duration - concert_duration))\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n\nmain()", "import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    min_diff = float('inf')\n    \n    # Generate all possible combinations of distributing songs into two concerts\n    for combo in itertools.product([0, 1], repeat=a+b+c):\n        concert1_duration = sum((i+1) for i, include in enumerate(combo) if include == 1)\n        concert2_duration = total_duration - concert1_duration\n        min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(find_minimal_difference(a, b, c))\n\nmain()", "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Initialize the minimum difference as a large number\n    min_diff = float('inf')\n    \n    # Generate all possible combinations of songs for the two concerts\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                diff = abs(concert1_duration - concert2_duration)\n                \n                # Update the minimum difference if a smaller difference is found\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n\nmain()", "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Initialize the minimum difference as a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of songs for each concert\n    for i in range(8):\n        duration_concert1 = duration_concert2 = 0\n        for j in range(3):\n            if (i >> j) & 1:\n                duration_concert1 += (j + 1)\n            else:\n                duration_concert2 += (j + 1)\n        \n        # Calculate the absolute difference in duration between the two concerts\n        diff = abs(duration_concert1 - duration_concert2)\n        min_diff = min(min_diff, diff)\n    \n    # Print the minimal possible difference in minutes for each test case\n    print(min_diff)\n\nmain()", "import sys\n\ndef calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(total_duration - 2*half_duration)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n\nmain()", "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    dp = [False] * (half_duration + 1)\n    dp[0] = True\n    \n    for i in [a, b, c]:\n        for j in range(half_duration, i-1, -1):\n            dp[j] |= dp[j - i]\n    \n    minimal_difference = total_duration - 2 * max(i for i in range(half_duration + 1) if dp[i])\n    \n    return minimal_difference\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n\nmain()", "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(1 << 3):\n        sum_concert_1 = 0\n        sum_concert_2 = 0\n        \n        for j in range(3):\n            if i & (1 << j):\n                sum_concert_1 += (j + 1) * [a, b, c][j]\n            else:\n                sum_concert_2 += (j + 1) * [a, b, c][j]\n        \n        min_diff = min(min_diff, abs(sum_concert_1 - sum_concert_2))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n\nmain()"], "session_history": {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Generate all possible combinations of songs for the two concerts\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Find the combination with the smallest difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs (total_duration = a + 2b + 3c)\",\n    \"step_2\": \"Generate all possible combinations of songs for the two concerts\",\n    \"step_3\": \"For each combination, calculate the difference in duration between the two concerts (abs(sum_of_songs_in_concert_1 - sum_of_songs_in_concert_2))\",\n    \"step_4\": \"Find the combination with the smallest difference in duration and output it\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'difference in durations'\n    Explanation: The core concept is to find the minimal possible difference in minutes between the concerts durations by distributing songs into two concerts with the smallest possible difference in durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest possible': means finding the minimum difference in durations\n\n# [code logic]\n    The steps should be implemented sequentially as they involve different calculations and comparisons.\n\n# [edge case] \n    1 1 1 = 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    2 1 3 = 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    5 5 5 = 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in a difference of 0.\n    1 1 2 = 1\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and two three-minute songs into the second concert. The difference will be 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers all scenarios effectively.", "Round_0": {"code": "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(1 << 3):\n        sum_concert_1 = 0\n        sum_concert_2 = 0\n        \n        for j in range(3):\n            if i & (1 << j):\n                sum_concert_1 += (j + 1) * [a, b, c][j]\n            else:\n                sum_concert_2 += (j + 1) * [a, b, c][j]\n        \n        min_diff = min(min_diff, abs(sum_concert_1 - sum_concert_2))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(1 << 3):\n        sum_concert_1 = 0\n        sum_concert_2 = 0\n        \n        for j in range(3):\n            if i & (1 << j):\n                sum_concert_1 += (j + 1) * [a, b, c][j]\n            else:\n                sum_concert_2 += (j + 1) * [a, b, c][j]\n        \n        min_diff = min(min_diff, abs(sum_concert_1 - sum_concert_2))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"}}, "session_historys": [{"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine all possible combinations of songs for each concert\",\n    \"Calculate the duration of each concert for each combination\",\n    \"Find the minimal possible difference in durations between the concerts\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of each type of song by its duration\",\n    \"step_2\": \"Generate all possible combinations of songs for each concert by iterating through all possible combinations\",\n    \"step_3\": \"Calculate the duration of each concert for each combination by summing the durations of the selected songs\",\n    \"step_4\": \"Find the minimal possible difference in durations between the concerts by comparing the durations of all combinations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute into two concerts': Luntik wants to split the songs into two concerts to minimize the absolute difference in durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': Indicates the smallest possible difference in minutes between the concerts durations.\n\n# [code logic]\n    The steps should be implemented step by step as they are not dependent on each other.\n\n# [edge case] \n    1. 1 1 1\n       Expected output: 0\n       Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n       \n    2. 2 1 3\n       Expected output: 1\n       Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n       \n    3. 5 5 5\n       Expected output: 0\n       Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n       \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(half_duration - (a + 2*b))\n    if abs(half_duration - (b + 3*c)) < min_diff:\n        min_diff = abs(half_duration - (b + 3*c))\n    \n    return min_diff\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(calculate_minimal_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(half_duration - (a + 2*b))\n    if abs(half_duration - (b + 3*c)) < min_diff:\n        min_diff = abs(half_duration - (b + 3*c))\n    \n    return min_diff\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(calculate_minimal_difference(a, b, c))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine all possible combinations of songs for each concert\",\n    \"Calculate the duration of each concert for each combination\",\n    \"Find the combination that minimizes the absolute difference in durations\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of each type of song by its duration\",\n    \"step_2\": \"Generate all possible combinations of songs for each concert using a recursive function\",\n    \"step_3\": \"Calculate the duration of each concert for each combination by summing the durations of the selected songs\",\n    \"step_4\": \"Find the combination that minimizes the absolute difference in durations and output the result\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimize the absolute difference in durations'\n    Explanation: The core concept is to distribute songs into two concerts in a way that the absolute difference in durations between the concerts is minimized.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as they involve different calculations and comparisons.\n\n# [edge case] \n    1 1 1\n    Output\n    0\n    Explanation: In this case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    2 1 3\n    Output\n    1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    5 5 5\n    Output\n    0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(half_duration - (a + 2*b))\n    for i in range(a+1):\n        for j in range(b+1):\n            if 2*i + j <= half_duration:\n                diff = abs(half_duration - (2*i + j))\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(calculate_min_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(half_duration - (a + 2*b))\n    for i in range(a+1):\n        for j in range(b+1):\n            if 2*i + j <= half_duration:\n                diff = abs(half_duration - (2*i + j))\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(calculate_min_difference(a, b, c))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Determine the total duration of all songs\",\n    \"Find all possible combinations of distributing songs into two concerts\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Find the minimum difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible combinations of distributing songs into two concerts\",\n    \"step_3\": \"Calculate the duration of each concert for each combination\",\n    \"step_4\": \"Calculate the absolute difference in duration between the two concerts for each combination\",\n    \"step_5\": \"Find the combination with the minimum difference in duration\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs into two concerts'\n    Explanation: The core concept is to divide the songs into two concerts in a way that minimizes the absolute difference in durations between the concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': means finding the minimum possible difference in durations between the concerts\n\n# [code logic]\n    The steps in the plan should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    1. 1 1 1\n       Expected output: 0\n       Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    2. 2 1 3\n       Expected output: 1\n       Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    3. 5 5 5\n       Expected output: 0\n       Explanation: Luntik can distribute the songs equally into two concerts, resulting in the same duration for both concerts.\n       \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of finding the minimum difference in durations between the concerts covers all scenarios.", "Round_0": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Try all possible combinations of distributing songs into two concerts\n    min_diff = float('inf')\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                diff = abs(concert1_duration - concert2_duration)\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Try all possible combinations of distributing songs into two concerts\n    min_diff = float('inf')\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                diff = abs(concert1_duration - concert2_duration)\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the minimum and maximum possible duration of each concert\",\n    \"Find all possible combinations of songs for each concert\",\n    \"Calculate the difference in duration between the two concerts\",\n    \"Find the minimal possible difference in minutes between the concerts durations\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Determine the minimum and maximum possible duration of each concert by dividing the total duration by 2\",\n    \"step_3\": \"Find all possible combinations of songs for each concert by generating all subsets of the songs\",\n    \"step_4\": \"Calculate the difference in duration between the two concerts by subtracting the duration of one concert from the other\",\n    \"step_5\": \"Find the minimal possible difference in minutes between the concerts durations by iterating through all possible combinations and selecting the one with the smallest difference\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate or divide something among different parts or people\n    'absolute difference': means the positive difference between two values without considering their order\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': means to minimize the difference between the durations of the two concerts\n\n# [code logic]\n    The steps should be implemented step by step as they are not dependent on each other.\n\n# [edge case] \n    1. 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    2. 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    3. 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute all songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers all scenarios.", "Round_0": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Initialize the minimal difference as a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of songs for the first concert\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert_duration = i + 2*j + 3*k\n                diff = abs(concert_duration - (total_duration - concert_duration))\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 33)"}, "Round_1": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Initialize the minimal difference as a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of songs for the first concert\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert_duration = i + 2*j + 3*k\n                diff = abs(concert_duration - (total_duration - concert_duration))\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Determine the total duration of all songs\",\n    \"Find all possible combinations of distributing songs into two concerts\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Find the minimum difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible combinations of distributing songs into two concerts\",\n    \"step_3\": \"Calculate the duration of each concert for each combination\",\n    \"step_4\": \"Find the minimum difference in duration between the two concerts\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs into two concerts'\n    Explanation: The core concept is to divide the songs into two concerts in a way that minimizes the difference in duration between the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': means that we need to minimize the difference in duration between the two concerts\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve different calculations and comparisons to find the minimum difference in duration.\n\n# [edge case] \n    1. 1 1 1\n       Expected output: 0\n       Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n       \n    2. 2 1 3\n       Expected output: 1\n       Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n       \n    3. 5 5 5\n       Expected output: 0\n       Explanation: Luntik can distribute the songs equally into two concerts, resulting in the same duration for both concerts.\n       \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to find the minimum difference in duration between the two concerts should cover all scenarios.", "Round_0": {"code": "import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    min_diff = float('inf')\n    \n    # Generate all possible combinations of distributing songs into two concerts\n    for combo in itertools.product([0, 1], repeat=a+b+c):\n        concert1_duration = sum((i+1) for i, include in enumerate(combo) if include == 1)\n        concert2_duration = total_duration - concert1_duration\n        min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(find_minimal_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    min_diff = float('inf')\n    \n    # Generate all possible combinations of distributing songs into two concerts\n    for combo in itertools.product([0, 1], repeat=a+b+c):\n        concert1_duration = sum((i+1) for i, include in enumerate(combo) if include == 1)\n        concert2_duration = total_duration - concert1_duration\n        min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(find_minimal_difference(a, b, c))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Generate all possible combinations of songs for the two concerts\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Find the combination with the smallest difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs (total_duration)\",\n    \"step_2\": \"Generate all possible combinations of songs for the two concerts\",\n    \"step_3\": \"For each combination, calculate the difference in duration between the two concerts\",\n    \"step_4\": \"Find the combination with the smallest difference in duration and output it\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs': means to allocate songs into two concerts with the smallest possible difference in durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest possible': means to minimize the difference in durations between the two concerts\n\n# [code logic]\n    The steps should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    1. 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    2. 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    3. 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in a difference of 0.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers all scenarios.", "Round_0": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Initialize the minimum difference as a large number\n    min_diff = float('inf')\n    \n    # Generate all possible combinations of songs for the two concerts\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                diff = abs(concert1_duration - concert2_duration)\n                \n                # Update the minimum difference if a smaller difference is found\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 36)"}, "Round_1": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Initialize the minimum difference as a large number\n    min_diff = float('inf')\n    \n    # Generate all possible combinations of songs for the two concerts\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                diff = abs(concert1_duration - concert2_duration)\n                \n                # Update the minimum difference if a smaller difference is found\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the possible combinations of songs for each concert\",\n    \"Calculate the difference in duration between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs\",\n    \"Step 3\": \"Calculate the total duration of all songs\",\n    \"Step 4\": \"Determine the possible combinations of songs for each concert\",\n    \"Step 5\": \"Calculate the difference in duration between the two concerts\",\n    \"Step 6\": \"Print the minimal possible difference in minutes for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute into two concerts'\n    Explanation: The core concept is to divide the songs into two concerts to minimize the absolute difference in durations of the concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 3, 4, and 5 should be implemented simultaneously as they are interdependent.\n    - Calculate the total duration of all songs\n    - Determine the possible combinations of songs for each concert\n    - Calculate the difference in duration between the two concerts\n    This can be achieved by iterating through all possible combinations of songs for each concert and calculating the difference in duration.\n\n# [edge case] \n    1. 1 1 1\n       Expected output: 0\n       Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    2. 2 1 3\n       Expected output: 1\n       Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    3. 5 5 5\n       Expected output: 0\n       Explanation: Luntik can distribute the songs equally between the two concerts, resulting in a minimal difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to find the minimal possible difference in minutes already considers all scenarios.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Initialize the minimum difference as a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of songs for each concert\n    for i in range(8):\n        duration_concert1 = duration_concert2 = 0\n        for j in range(3):\n            if (i >> j) & 1:\n                duration_concert1 += (j + 1)\n            else:\n                duration_concert2 += (j + 1)\n        \n        # Calculate the absolute difference in duration between the two concerts\n        diff = abs(duration_concert1 - duration_concert2)\n        min_diff = min(min_diff, diff)\n    \n    # Print the minimal possible difference in minutes for each test case\n    print(min_diff)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Initialize the minimum difference as a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of songs for each concert\n    for i in range(8):\n        duration_concert1 = duration_concert2 = 0\n        for j in range(3):\n            if (i >> j) & 1:\n                duration_concert1 += (j + 1)\n            else:\n                duration_concert2 += (j + 1)\n        \n        # Calculate the absolute difference in duration between the two concerts\n        diff = abs(duration_concert1 - duration_concert2)\n        min_diff = min(min_diff, diff)\n    \n    # Print the minimal possible difference in minutes for each test case\n    print(min_diff)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the possible combinations of songs for each concert\",\n    \"Calculate the difference in duration between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible combinations of songs for each concert using a recursive function\",\n    \"step_3\": \"Calculate the duration of each concert for every combination and find the minimum difference between the two concerts\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'durations': refers to the length of each song in minutes\n    'concerts': refers to the events where songs are performed\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': indicates the need to minimize the difference in durations between the concerts\n\n# [code logic]\n    The steps should be implemented sequentially as they involve different calculations and comparisons.\n\n# [edge case] \n    1. 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    2. 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    3. 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == b == c:\n            print(0)\n        elif a == b or b == c or a == c:\n            print(1)\n        else:\n            # Perform the calculations to find the minimal possible difference in minutes between the concerts durations.", "Round_0": {"code": "import sys\n\ndef calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(total_duration - 2*half_duration)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 25)"}, "Round_1": {"code": "import sys\n\ndef calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(total_duration - 2*half_duration)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Generate all possible combinations of songs for the two concerts\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Find the combination with the smallest difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs (total_duration)\",\n    \"step_2\": \"Generate all possible combinations of songs for the two concerts\",\n    \"step_3\": \"For each combination, calculate the difference in duration between the two concerts\",\n    \"step_4\": \"Find the combination with the smallest difference in duration and output it\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs': means to allocate songs into two concerts with the smallest possible difference in durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest possible': means to minimize the difference in durations between the two concerts\n\n# [code logic]\n    The steps should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    1. 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    2. 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    3. 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in a difference of 0.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided can handle all scenarios effectively.", "Round_0": {"code": "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    dp = [False] * (half_duration + 1)\n    dp[0] = True\n    \n    for i in [a, b, c]:\n        for j in range(half_duration, i-1, -1):\n            dp[j] |= dp[j - i]\n    \n    minimal_difference = total_duration - 2 * max(i for i in range(half_duration + 1) if dp[i])\n    \n    return minimal_difference\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 30)"}, "Round_1": {"code": "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    dp = [False] * (half_duration + 1)\n    dp[0] = True\n    \n    for i in [a, b, c]:\n        for j in range(half_duration, i-1, -1):\n            dp[j] |= dp[j - i]\n    \n    minimal_difference = total_duration - 2 * max(i for i in range(half_duration + 1) if dp[i])\n    \n    return minimal_difference\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Generate all possible combinations of songs for the two concerts\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Find the combination with the smallest difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs (total_duration = a + 2b + 3c)\",\n    \"step_2\": \"Generate all possible combinations of songs for the two concerts\",\n    \"step_3\": \"For each combination, calculate the difference in duration between the two concerts (abs(sum_of_songs_in_concert_1 - sum_of_songs_in_concert_2))\",\n    \"step_4\": \"Find the combination with the smallest difference in duration and output it\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'difference in durations'\n    Explanation: The core concept is to find the minimal possible difference in minutes between the concerts durations by distributing songs into two concerts with the smallest possible difference in durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest possible': means finding the minimum difference in durations\n\n# [code logic]\n    The steps should be implemented sequentially as they involve different calculations and comparisons.\n\n# [edge case] \n    1 1 1 = 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    2 1 3 = 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    5 5 5 = 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in a difference of 0.\n    1 1 2 = 1\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and two three-minute songs into the second concert. The difference will be 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers all scenarios effectively.", "Round_0": {"code": "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(1 << 3):\n        sum_concert_1 = 0\n        sum_concert_2 = 0\n        \n        for j in range(3):\n            if i & (1 << j):\n                sum_concert_1 += (j + 1) * [a, b, c][j]\n            else:\n                sum_concert_2 += (j + 1) * [a, b, c][j]\n        \n        min_diff = min(min_diff, abs(sum_concert_1 - sum_concert_2))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(1 << 3):\n        sum_concert_1 = 0\n        sum_concert_2 = 0\n        \n        for j in range(3):\n            if i & (1 << j):\n                sum_concert_1 += (j + 1) * [a, b, c][j]\n            else:\n                sum_concert_2 += (j + 1) * [a, b, c][j]\n        \n        min_diff = min(min_diff, abs(sum_concert_1 - sum_concert_2))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"}}], "scores": [], "pass_results": [false, true, true, true, false, true, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 176, "prompt": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Consider the case where he has no songs to ensure your solution accounts for an empty set.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "add_1_sentence_at_end", "save_node": true, "parent_index": 5}
