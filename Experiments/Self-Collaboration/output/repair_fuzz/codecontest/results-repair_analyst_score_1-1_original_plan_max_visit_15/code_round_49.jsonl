{"name": "1619_H. Permutation and Queries", "description": "You are given a permutation p of n elements. A permutation of n elements is an array of length n containing each integer from 1 to n exactly once. For example, [1, 2, 3] and [4, 3, 5, 1, 2] are permutations, but [1, 2, 4] and [4, 3, 2, 1, 2] are not permutations. You should perform q queries.\n\nThere are two types of queries:\n\n  * 1 x y \u2014 swap p_x and p_y. \n  * 2 i k \u2014 print the number that i will become if we assign i = p_i k times. \n\nInput\n\nThe first line contains two integers n and q (1 \u2264 n, q \u2264 10^5).\n\nThe second line contains n integers p_1, p_2, ..., p_n.\n\nEach of the next q lines contains three integers. The first integer is t (1 \u2264 t \u2264 2) \u2014 type of query. If t = 1, then the next two integers are x and y (1 \u2264 x, y \u2264 n; x \u2260 y) \u2014 first-type query. If t = 2, then the next two integers are i and k (1 \u2264 i, k \u2264 n) \u2014 second-type query.\n\nIt is guaranteed that there is at least one second-type query.\n\nOutput\n\nFor every second-type query, print one integer in a new line \u2014 answer to this query.\n\nExamples\n\nInput\n\n\n5 4\n5 3 4 2 1\n2 3 1\n2 1 2\n1 1 3\n2 1 2\n\n\nOutput\n\n\n4\n1\n2\n\n\nInput\n\n\n5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 5\n2 5 1\n\n\nOutput\n\n\n3\n5\n4\n2\n3\n3\n3\n1\n\nNote\n\nIn the first example p = \\{5, 3, 4, 2, 1\\}. \n\nThe first query is to print p_3. The answer is 4.\n\nThe second query is to print p_{p_1}. The answer is 1.\n\nThe third query is to swap p_1 and p_3. Now p = \\{4, 3, 5, 2, 1\\}.\n\nThe fourth query is to print p_{p_1}. The answer is 2.", "tags": ["brute force", "data structures", "divide and conquer", "two pointers"], "difficulty": 14, "id": 1619, "sample_io": [{"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 5\n2 5 1\n", "output": ["3\n5\n4\n2\n3\n3\n3\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 1 2\n1 1 3\n2 1 2\n", "output": ["4\n1\n2\n"]}], "test_list": [{"input": "1 1\n1\n2 1 1\n", "output": ["1\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 50 22\n2 1 72\n2 65 8\n1 18 37\n1 19 89\n1 86 6\n2 36 69\n1 100 59\n", "output": ["71\n6\n40\n54\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 7 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n8\n4\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 50 22\n2 1 72\n2 65 8\n1 18 37\n1 19 89\n1 86 3\n2 36 69\n1 100 59\n", "output": ["71\n6\n40\n54\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 5 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n8\n9\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 4\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 5 9\n2 9 8\n1 3 6\n", "output": ["7\n6\n8\n9\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 83 22\n2 1 72\n2 65 8\n1 18 37\n1 19 89\n1 86 6\n2 36 69\n1 100 59\n", "output": ["19\n6\n40\n54\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 7 9\n2 9 16\n1 3 6\n", "output": ["10\n6\n8\n8\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n5\n4\n2\n3\n3\n5\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 1 4\n1 1 3\n2 1 2\n", "output": ["4\n1\n2\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 50 22\n2 1 72\n2 65 8\n1 18 37\n1 19 89\n1 86 5\n2 36 69\n1 100 59\n", "output": ["71\n6\n40\n59\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 5 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n4\n9\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 1 4\n1 5 4\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n5\n4\n2\n4\n3\n5\n1\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 50 22\n2 1 72\n2 65 8\n1 18 68\n1 19 89\n1 86 5\n2 36 69\n1 100 59\n", "output": ["71\n6\n40\n6\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n1 5 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n1\n9\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n1 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n1\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 7 2\n2 9 4\n1 4 6\n1 7 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n4\n8\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 7\n2 5 1\n", "output": ["3\n5\n4\n2\n3\n3\n1\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 2 2\n1 1 3\n2 1 2\n", "output": ["4\n4\n2\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 44 22\n2 1 72\n2 65 8\n1 18 37\n1 19 89\n1 86 1\n2 36 69\n1 100 59\n", "output": ["21\n6\n40\n54\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 2\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n5\n1\n2\n3\n3\n5\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 1 4\n1 1 2\n2 1 2\n", "output": ["4\n1\n4\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 4 5\n2 5 1\n2 5 3\n2 1 4\n1 5 4\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n4\n4\n2\n4\n3\n5\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n1\n5\n2\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 7\n2 4 1\n", "output": ["3\n5\n4\n2\n3\n3\n1\n4\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 3 2\n1 1 3\n2 1 2\n", "output": ["4\n2\n2\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 44 22\n2 1 72\n2 65 13\n1 18 37\n1 19 89\n1 86 1\n2 36 69\n1 100 59\n", "output": ["21\n6\n57\n54\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n7\n5\n2\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 1\n2 5 3\n2 2 7\n2 4 1\n", "output": ["3\n5\n4\n2\n3\n5\n3\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n7\n5\n10\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 1\n2 5 3\n2 2 7\n2 4 2\n", "output": ["3\n5\n4\n2\n3\n5\n3\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 10\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n9\n5\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 7 9\n2 9 9\n1 3 6\n", "output": ["10\n6\n8\n7\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 50 22\n2 2 72\n2 65 8\n1 18 37\n1 19 89\n1 86 3\n2 36 69\n1 100 59\n", "output": ["71\n16\n40\n54\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 4 3\n1 6 2\n2 9 4\n1 4 6\n1 5 9\n2 9 8\n1 3 6\n", "output": ["10\n9\n8\n9\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 4\n1 1 6\n1 7 9\n2 9 16\n1 3 6\n", "output": ["10\n6\n8\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 1 2\n2 9 4\n1 4 6\n1 7 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n9\n4\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 4 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 7\n2 5 1\n", "output": ["3\n5\n1\n2\n3\n3\n1\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 2 2\n1 2 3\n2 1 2\n", "output": ["4\n4\n1\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 44 44\n2 1 72\n2 65 8\n1 18 37\n1 19 89\n1 86 1\n2 36 69\n1 100 59\n", "output": ["64\n6\n40\n54\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 4\n2 5 2\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n3\n1\n2\n3\n3\n5\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 0\n2 1 4\n1 1 2\n2 1 2\n", "output": ["3\n1\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 7 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["7\n6\n7\n5\n2\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 1\n2 4 3\n2 2 7\n2 4 1\n", "output": ["3\n5\n4\n2\n3\n1\n3\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 4\n1 1 6\n1 7 9\n2 9 22\n1 3 6\n", "output": ["10\n6\n8\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 7 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n2 4 9\n2 8 8\n1 3 6\n", "output": ["7\n6\n7\n8\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 6\n2 3 3\n1 10 2\n2 9 4\n1 4 6\n1 5 8\n2 4 8\n1 3 6\n", "output": ["10\n3\n8\n7\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 6\n2 3 3\n1 10 2\n2 9 4\n1 4 6\n1 5 8\n2 4 15\n1 3 6\n", "output": ["10\n3\n8\n6\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 83 22\n2 1 72\n2 65 10\n1 18 37\n1 19 89\n1 86 6\n2 36 69\n1 100 59\n", "output": ["19\n6\n47\n54\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 1 2\n2 1 3\n2 1 2\n", "output": ["4\n1\n5\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 1\n2 5 4\n1 5 4\n2 5 3\n2 2 7\n2 5 1\n", "output": ["3\n5\n4\n4\n3\n3\n1\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 2 2\n1 1 3\n2 2 2\n", "output": ["4\n4\n5\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 4 5\n2 5 1\n2 5 3\n2 1 4\n1 5 2\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n4\n4\n2\n4\n3\n1\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 6\n1 7 6\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n6\n5\n3\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 7\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 7\n2 4 1\n", "output": ["3\n1\n4\n2\n3\n3\n1\n4\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 4 3\n2 5 4\n1 5 1\n2 5 3\n2 2 7\n2 4 1\n", "output": ["3\n5\n4\n3\n3\n5\n3\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["2\n6\n7\n5\n10\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 10\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 5 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n9\n7\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 5 6\n1 10 6\n2 3 3\n1 1 2\n2 9 4\n1 4 6\n1 7 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n9\n3\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 4 1\n2 5 3\n2 5 8\n1 5 4\n2 5 3\n2 2 7\n2 5 1\n", "output": ["3\n5\n1\n2\n2\n3\n1\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 0\n2 1 3\n1 1 2\n2 1 2\n", "output": ["3\n5\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 5\n1 1 6\n1 7 9\n2 9 22\n1 3 6\n", "output": ["10\n6\n2\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 10\n2 3 3\n1 10 2\n2 9 4\n1 4 6\n1 5 8\n2 4 8\n1 3 6\n", "output": ["10\n3\n7\n4\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 0\n2 5 4\n1 5 4\n2 5 3\n2 2 7\n2 5 1\n", "output": ["3\n5\n4\n5\n3\n3\n1\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 6\n1 7 6\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n2 5 9\n2 8 10\n1 3 6\n", "output": ["10\n6\n6\n5\n7\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 7\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 2\n2 2 7\n2 4 1\n", "output": ["3\n1\n4\n2\n3\n2\n1\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 10\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 5 6\n2 5 9\n2 8 2\n1 3 6\n", "output": ["10\n6\n9\n7\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 4 3\n1 6 2\n2 9 0\n1 4 6\n1 5 9\n2 9 8\n1 3 7\n", "output": ["10\n9\n9\n9\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 4 1\n2 5 3\n2 5 8\n1 5 4\n2 5 3\n2 2 7\n2 5 2\n", "output": ["3\n5\n1\n2\n2\n3\n1\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n2 6 2\n2 9 5\n1 1 6\n1 7 9\n2 9 22\n1 3 6\n", "output": ["10\n6\n8\n4\n4\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 0\n2 5 3\n1 5 4\n2 5 3\n2 2 7\n2 5 1\n", "output": ["3\n5\n4\n5\n2\n3\n1\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 6\n1 7 6\n2 3 3\n1 6 2\n2 9 6\n1 4 6\n2 5 9\n2 8 10\n1 3 6\n", "output": ["10\n6\n7\n5\n7\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 7\n2 5 1\n2 5 3\n2 5 6\n1 5 4\n2 5 2\n2 2 7\n2 4 1\n", "output": ["3\n1\n4\n2\n4\n2\n1\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 6 9\n2 8 8\n1 4 6\n", "output": ["2\n6\n7\n6\n10\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 4 3\n1 6 2\n2 9 0\n1 4 6\n2 5 9\n2 9 8\n1 3 7\n", "output": ["10\n9\n9\n5\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n2 6 2\n2 9 5\n1 1 6\n1 7 9\n2 9 22\n2 3 6\n", "output": ["10\n6\n8\n4\n4\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 5\n1 7 6\n2 3 3\n1 6 2\n2 9 6\n1 4 6\n2 5 9\n2 8 10\n1 3 6\n", "output": ["10\n6\n8\n8\n8\n"]}, {"input": "5 7\n2 3 5 1 4\n2 3 5\n2 5 7\n2 5 1\n2 5 3\n2 5 6\n1 5 4\n2 5 2\n2 2 7\n2 4 1\n", "output": ["3\n1\n4\n2\n4\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 6 9\n2 8 8\n2 4 6\n", "output": ["2\n6\n7\n6\n10\n4\n"]}, {"input": "10 5\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n2 6 2\n2 9 5\n1 1 6\n1 7 9\n2 9 22\n2 3 6\n", "output": ["10\n6\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 5\n1 7 6\n2 3 3\n1 6 2\n2 9 6\n1 4 6\n2 5 9\n2 8 13\n1 3 6\n", "output": ["10\n6\n8\n8\n10\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 6 9\n2 8 6\n2 4 6\n", "output": ["2\n6\n7\n6\n8\n4\n"]}, {"input": "10 5\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 5\n2 6 2\n2 9 5\n1 1 6\n1 7 9\n2 9 22\n2 3 6\n", "output": ["10\n8\n8\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n2 5 4\n2 5 3\n2 2 5\n2 5 1\n", "output": ["3\n5\n4\n2\n3\n3\n2\n2\n4\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 1 2\n1 1 3\n2 1 0\n", "output": ["4\n1\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 6 2\n2 9 4\n2 4 6\n1 5 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n4\n8\n7\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 1 4\n1 5 4\n2 4 3\n2 2 2\n2 5 1\n", "output": ["3\n5\n4\n2\n4\n4\n5\n1\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 50 3\n2 1 72\n2 65 8\n1 18 68\n1 19 89\n1 86 5\n2 36 69\n1 100 59\n", "output": ["55\n6\n40\n6\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 2\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n1 5 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n8\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 1 2\n2 9 5\n1 4 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n4\n5\n2\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 3 2\n2 1 3\n2 1 2\n", "output": ["4\n2\n5\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n1 5 3\n2 5 4\n1 5 1\n2 5 3\n2 2 7\n2 4 1\n", "output": ["3\n5\n4\n5\n4\n4\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 8\n1 10 6\n2 4 3\n1 6 2\n2 9 4\n1 4 6\n1 5 9\n2 9 8\n1 3 6\n", "output": ["10\n9\n4\n9\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n2 7 6\n1 7 6\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 5 8\n2 9 8\n1 3 6\n", "output": ["10\n10\n6\n9\n2\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 0\n1 1 4\n1 1 2\n2 1 2\n", "output": ["3\n4\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 3 4\n2 1 3\n2 1 2\n", "output": ["4\n4\n5\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 1\n2 1 3\n2 2 7\n2 4 1\n", "output": ["3\n5\n4\n2\n3\n4\n3\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 4\n2 1 6\n1 7 9\n2 9 22\n1 3 6\n", "output": ["10\n6\n8\n6\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 6\n1 7 6\n2 3 3\n1 6 2\n2 5 5\n1 4 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n5\n5\n3\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 4 3\n2 5 4\n1 5 1\n2 5 3\n2 2 12\n2 4 1\n", "output": ["3\n5\n4\n3\n3\n5\n2\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 2\n2 5 3\n2 5 4\n1 5 1\n2 5 3\n2 2 10\n2 4 2\n", "output": ["3\n5\n1\n2\n3\n5\n3\n4\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 4 1\n2 1 3\n2 5 8\n1 5 4\n2 5 3\n2 2 7\n2 5 1\n", "output": ["3\n5\n1\n5\n2\n3\n1\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 7 10\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n2 5 9\n2 1 8\n1 3 6\n", "output": ["7\n6\n7\n5\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 5 9\n2 9 8\n1 4 6\n", "output": ["2\n6\n7\n5\n7\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 6\n1 6 2\n2 9 5\n1 3 6\n2 6 9\n2 8 8\n1 4 6\n", "output": ["2\n3\n7\n6\n10\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n2 6 2\n2 3 5\n1 1 6\n1 7 9\n2 9 22\n2 3 6\n", "output": ["10\n6\n8\n8\n4\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 5\n1 7 6\n2 3 3\n1 6 2\n2 9 6\n1 4 6\n2 2 9\n2 8 10\n1 3 6\n", "output": ["10\n6\n8\n5\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 6\n1 3 6\n2 6 9\n2 8 8\n2 4 6\n", "output": ["2\n6\n8\n6\n10\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 4\n1 7 6\n2 3 3\n1 6 2\n2 9 6\n1 4 6\n2 5 9\n2 8 13\n1 3 6\n", "output": ["10\n7\n4\n5\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 0\n1 3 6\n2 6 9\n2 8 6\n2 4 6\n", "output": ["2\n6\n9\n6\n8\n4\n"]}, {"input": "10 5\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 5\n1 6 2\n2 9 5\n1 1 6\n1 7 9\n2 9 22\n2 3 6\n", "output": ["10\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 4\n1 1 2\n2 9 5\n1 4 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n3\n4\n5\n2\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 3 2\n2 1 3\n2 1 1\n", "output": ["4\n2\n5\n5\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 0\n2 5 4\n2 5 2\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 2\n2 5 2\n", "output": ["3\n3\n1\n2\n3\n3\n5\n2\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 0\n2 5 4\n1 5 1\n2 1 3\n2 2 7\n2 4 1\n", "output": ["3\n5\n4\n5\n3\n4\n3\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 6\n1 9 6\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n2 5 9\n2 10 10\n1 3 6\n", "output": ["10\n6\n1\n5\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 5\n1 7 6\n2 3 3\n1 6 2\n2 9 12\n1 4 6\n2 2 9\n2 8 10\n1 3 6\n", "output": ["10\n6\n5\n5\n8\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 3 2\n2 1 2\n2 1 1\n", "output": ["4\n2\n1\n5\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 6\n1 9 6\n2 4 3\n1 6 2\n2 9 5\n1 4 6\n2 5 9\n2 10 10\n1 3 6\n", "output": ["10\n8\n1\n5\n8\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 3 0\n2 1 2\n2 1 1\n", "output": ["4\n3\n1\n5\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 6\n1 9 6\n1 4 3\n1 6 2\n2 9 5\n1 4 6\n2 5 9\n2 10 10\n1 3 6\n", "output": ["10\n6\n5\n9\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 5\n1 7 6\n2 3 3\n1 6 2\n2 9 12\n1 4 6\n2 2 5\n2 8 10\n1 3 8\n", "output": ["10\n6\n5\n2\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 6\n1 6 2\n2 9 4\n1 4 6\n1 7 9\n2 9 8\n1 3 6\n", "output": ["10\n2\n8\n4\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n1 5 4\n1 5 4\n2 5 3\n2 2 5\n2 5 1\n", "output": ["3\n5\n4\n2\n2\n2\n4\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 13\n2 50 22\n2 1 72\n2 65 8\n1 18 37\n1 19 89\n1 86 1\n2 36 69\n1 100 59\n", "output": ["33\n89\n40\n94\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 1 9\n2 9 16\n1 3 6\n", "output": ["10\n6\n8\n6\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n1 50 22\n2 1 72\n2 65 8\n1 18 37\n1 19 89\n1 86 5\n2 36 69\n1 100 59\n", "output": ["95\n40\n32\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 5 2\n2 9 5\n1 4 6\n1 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n10\n5\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 4 5\n2 4 1\n2 5 3\n2 1 4\n1 5 4\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n4\n1\n2\n4\n3\n5\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 1\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 7\n2 4 1\n", "output": ["3\n4\n4\n2\n3\n3\n1\n4\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 3 2\n1 2 3\n2 1 2\n", "output": ["4\n2\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 2 5\n2 5 1\n2 5 3\n2 5 4\n1 5 1\n2 5 3\n2 2 7\n2 4 1\n", "output": ["3\n2\n4\n2\n3\n5\n3\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 6\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["9\n6\n7\n5\n10\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 4 3\n1 6 2\n2 9 4\n1 4 6\n1 5 9\n2 8 8\n1 3 6\n", "output": ["10\n9\n8\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n2 7 6\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 5 8\n2 9 8\n1 3 6\n", "output": ["10\n9\n6\n9\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 1 2\n2 9 4\n1 4 6\n1 8 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n9\n2\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 1 3\n1 1 2\n2 1 2\n", "output": ["4\n5\n4\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 3 4\n1 1 4\n2 1 2\n", "output": ["4\n4\n3\n"]}, {"input": "5 2\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 1\n2 4 3\n2 2 7\n2 4 1\n", "output": ["3\n5\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 10 2\n2 9 4\n1 4 6\n2 5 8\n2 9 8\n1 3 6\n", "output": ["10\n6\n8\n5\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 10 2\n2 9 4\n1 4 6\n1 5 3\n2 4 8\n1 3 6\n", "output": ["10\n6\n8\n5\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 7 5\n1 7 6\n1 7 9\n2 3 1\n1 6 2\n2 9 5\n1 4 6\n2 4 9\n2 8 8\n1 5 6\n", "output": ["7\n4\n7\n8\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 6\n2 3 3\n1 10 2\n2 9 4\n1 4 6\n1 5 8\n2 4 8\n2 3 6\n", "output": ["10\n3\n8\n7\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 6\n2 3 3\n1 10 2\n2 9 4\n1 5 6\n1 5 8\n2 4 15\n1 3 6\n", "output": ["10\n3\n8\n4\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 1 3\n2 1 3\n2 1 2\n", "output": ["4\n5\n5\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 4 5\n2 1 1\n2 5 3\n2 1 4\n1 5 2\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n4\n2\n2\n4\n3\n1\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 10\n1 3 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["2\n6\n3\n5\n10\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 1\n2 5 3\n2 2 17\n2 4 2\n", "output": ["3\n5\n4\n2\n3\n5\n5\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 10\n1 7 9\n2 3 3\n1 6 2\n1 9 5\n1 5 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n5\n7\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 7 5\n1 1 6\n1 7 10\n2 3 3\n1 10 2\n2 9 4\n1 4 6\n1 5 8\n2 4 8\n1 3 6\n", "output": ["7\n3\n7\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 4 5\n1 6 2\n2 9 0\n1 4 6\n1 5 9\n2 9 8\n1 3 7\n", "output": ["10\n2\n9\n9\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 4 1\n2 5 3\n2 5 8\n1 5 4\n1 5 3\n2 2 7\n2 5 2\n", "output": ["3\n5\n1\n2\n2\n3\n5\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n2 6 2\n2 9 5\n1 1 6\n1 7 1\n2 9 22\n2 3 6\n", "output": ["10\n6\n8\n4\n2\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 5\n1 7 6\n2 3 3\n1 6 2\n2 7 6\n1 4 6\n2 5 9\n2 8 10\n1 3 6\n", "output": ["10\n6\n3\n8\n8\n"]}, {"input": "5 7\n2 3 5 1 4\n1 3 5\n2 5 7\n2 5 1\n2 5 3\n2 5 6\n1 5 4\n2 5 2\n2 2 7\n2 4 1\n", "output": ["5\n5\n5\n5\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 5\n1 7 6\n2 3 3\n2 6 2\n2 9 6\n1 4 6\n2 5 9\n2 8 13\n1 3 6\n", "output": ["10\n6\n9\n4\n2\n4\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n1 5 3\n2 1 4\n1 5 1\n2 5 3\n2 2 7\n2 4 1\n", "output": ["3\n5\n4\n1\n4\n4\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 0\n2 5 4\n2 5 0\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 2\n2 5 2\n", "output": ["3\n3\n5\n2\n3\n3\n5\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 1\n1 6 2\n2 9 4\n2 1 6\n1 7 9\n2 9 22\n1 3 6\n", "output": ["10\n4\n8\n6\n8\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 4 3\n2 5 4\n1 5 1\n2 5 3\n2 4 12\n2 4 1\n", "output": ["3\n5\n4\n3\n3\n5\n4\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 2\n2 5 3\n2 5 4\n1 5 1\n2 5 3\n2 2 10\n2 4 3\n", "output": ["3\n5\n1\n2\n3\n5\n3\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 6 9\n2 9 8\n1 4 6\n", "output": ["2\n6\n7\n6\n7\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n2 6 2\n2 3 5\n1 1 6\n1 7 9\n2 9 22\n2 3 4\n", "output": ["10\n6\n8\n8\n4\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 6\n1 3 6\n2 6 7\n2 8 8\n2 4 6\n", "output": ["2\n6\n8\n4\n10\n4\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 0\n2 5 4\n2 5 4\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 2\n2 5 2\n", "output": ["3\n3\n3\n2\n3\n3\n5\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 5\n1 7 6\n2 3 3\n1 6 2\n2 9 12\n1 4 6\n2 2 9\n2 8 10\n2 3 6\n", "output": ["10\n6\n5\n5\n8\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n2 8 5\n1 7 6\n2 3 3\n1 6 2\n2 9 12\n1 4 6\n2 2 9\n2 8 10\n1 3 8\n", "output": ["10\n8\n6\n9\n10\n10\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 6\n1 6 2\n2 3 4\n1 4 6\n1 7 9\n2 9 8\n1 3 6\n", "output": ["10\n2\n7\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 4\n1 7 6\n1 10 6\n2 3 2\n1 6 2\n2 9 4\n1 4 6\n1 5 9\n2 9 8\n1 3 5\n", "output": ["7\n1\n8\n9\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 2\n1 4 6\n1 1 9\n2 9 16\n1 3 6\n", "output": ["10\n6\n2\n6\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 5 2\n2 9 5\n1 4 6\n1 5 8\n2 8 8\n1 3 6\n", "output": ["10\n6\n10\n8\n"]}, {"input": "5 4\n5 3 4 2 1\n1 3 1\n2 2 2\n1 1 5\n2 1 2\n", "output": ["5\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 6\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 6\n1 3 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["9\n6\n8\n5\n10\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 10\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 9 9\n2 8 8\n1 3 8\n", "output": ["10\n6\n9\n9\n8\n"]}, {"input": "5 4\n5 3 4 2 1\n2 1 1\n2 1 3\n1 1 2\n2 1 2\n", "output": ["5\n5\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 6\n2 2 3\n1 10 2\n2 9 4\n1 4 6\n1 5 8\n2 4 8\n2 3 6\n", "output": ["10\n10\n8\n7\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 6\n2 3 3\n1 10 2\n2 9 4\n1 5 3\n1 5 8\n2 4 15\n1 3 6\n", "output": ["10\n3\n8\n1\n"]}, {"input": "10 5\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 10\n1 7 9\n2 3 3\n1 6 2\n1 9 5\n1 5 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 9\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 5\n1 1 6\n1 7 9\n2 9 22\n1 5 6\n", "output": ["7\n6\n2\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 4 6\n2 3 3\n2 6 2\n2 9 5\n1 1 6\n1 7 1\n2 9 22\n2 3 6\n", "output": ["10\n9\n6\n4\n4\n7\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 1\n1 8 5\n1 7 6\n2 3 3\n2 6 2\n2 9 6\n1 4 6\n2 5 9\n2 8 13\n1 3 6\n", "output": ["9\n6\n9\n4\n2\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 5\n2 7 6\n2 3 3\n1 6 2\n2 9 12\n1 4 6\n2 2 9\n2 8 10\n2 3 6\n", "output": ["10\n7\n6\n5\n3\n2\n5\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 11\n1 6 2\n2 3 4\n1 4 6\n1 7 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n7\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 6\n2 2 3\n1 10 1\n2 9 4\n1 4 6\n1 5 8\n2 4 8\n2 3 6\n", "output": ["10\n10\n6\n3\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 9\n1 7 6\n1 10 4\n2 3 3\n1 6 2\n2 9 5\n1 1 6\n1 7 9\n2 9 22\n1 5 6\n", "output": ["7\n8\n6\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 6\n2 2 3\n1 10 1\n2 9 4\n1 4 6\n1 5 8\n2 4 8\n2 3 8\n", "output": ["10\n10\n6\n3\n10\n"]}, {"input": "10 5\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 10\n1 7 9\n2 1 3\n1 6 2\n1 9 5\n1 5 6\n3 5 9\n2 8 8\n1 3 6\n", "output": ["10\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 9\n1 7 6\n1 10 4\n2 3 3\n1 6 2\n2 9 5\n1 1 6\n1 7 9\n2 8 22\n1 5 6\n", "output": ["7\n8\n6\n10\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 6 9\n2 3 3\n1 6 2\n2 9 6\n1 3 6\n2 6 12\n2 8 8\n1 4 6\n", "output": ["2\n6\n9\n6\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 6\n2 2 3\n1 10 1\n2 9 4\n1 4 6\n1 5 8\n2 3 8\n2 3 8\n", "output": ["10\n10\n6\n10\n10\n"]}, {"input": "10 5\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 10\n1 7 9\n2 2 3\n1 6 2\n1 9 5\n1 5 6\n3 5 9\n2 8 8\n1 3 6\n", "output": ["10\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 9\n1 7 6\n1 10 4\n2 3 3\n1 6 2\n2 9 8\n1 1 6\n1 7 9\n2 8 22\n1 5 6\n", "output": ["7\n8\n4\n10\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 4\n1 7 6\n1 10 3\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 5 9\n2 9 8\n1 3 6\n", "output": ["7\n2\n4\n9\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 1 2\n2 5 1\n", "output": ["3\n5\n4\n2\n3\n3\n3\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 2 4\n1 1 3\n2 1 2\n", "output": ["4\n3\n2\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 50 22\n2 1 72\n2 65 8\n1 18 37\n1 19 37\n1 86 5\n2 36 69\n1 100 59\n", "output": ["71\n6\n40\n51\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 2 4\n1 5 4\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n5\n4\n2\n1\n3\n5\n1\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 50 22\n2 1 72\n2 65 10\n1 18 68\n1 19 89\n1 86 5\n2 36 69\n1 100 59\n", "output": ["71\n6\n47\n6\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 7\n2 5 0\n", "output": ["3\n5\n4\n2\n3\n3\n1\n5\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 2\n2 5 3\n2 5 7\n1 5 4\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n5\n1\n2\n1\n3\n5\n1\n"]}, {"input": "5 3\n5 3 4 2 1\n2 3 1\n2 1 4\n1 1 2\n2 1 2\n", "output": ["4\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n1 3 5\n2 4 5\n2 5 1\n2 5 3\n2 1 4\n1 5 4\n2 5 3\n2 2 2\n2 5 1\n", "output": ["1\n5\n5\n1\n3\n4\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n1 3 1\n2 3 2\n1 1 3\n2 1 2\n", "output": ["1\n1\n"]}], "task_id": "codecontest/146", "repair_prompt": ["You are given a permutation p of n elements. A permutation of n elements is an array of length n containing each integer from 1 to n exactly once; for example, [1, 2, 3] and [4, 3, 5, 1, 2] are permutations, but [1, 2, 4] and [4, 3, 2, 1, 2] are not permutations since the latter example fails because it does not contain integers from 1 to n exactly once, and you should perform q queries after ensuring the input permutation is valid. \n\nThere are two types of queries:\n\n  * 1 x y \u2014 swap p_x and p_y. \n  * 2 i k \u2014 print the number that i will become if we assign i = p_i k times.\n\nInput\n\nThe first line contains two integers n and q (1 \u2264 n, q \u2264 10^5).\n\nThe second line contains n integers p_1, p_2, ..., p_n.\n\nEach of the next q lines contains three integers. The first integer is t (1 \u2264 t \u2264 2) \u2014 type of query. If t = 1, then the next two integers are x and y (1 \u2264 x, y \u2264 n; x \u2260 y) \u2014 first-type query. If t = 2, then the next two integers are i and k (1 \u2264 i, k \u2264 n) \u2014 second-type query.\n\nIt is guaranteed that there is at least one second-type query.\n\nOutput\n\nFor every second-type query, print one integer in a new line \u2014 answer to this query.\n\nExamples\n\nInput\n\n\n5 4\n5 3 4 2 1\n2 3 1\n2 1 2\n1 1 3\n2 1 2\n\n\nOutput\n\n\n4\n1\n2\n\n\nInput\n\n\n5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 5\n2 5 1\n\n\nOutput\n\n\n3\n5\n4\n2\n3\n3\n3\n1\n\nNote\n\nIn the first example p = \\{5, 3, 4, 2, 1\\}. \n\nThe first query is to print p_3. The answer is 4.\n\nThe second query is to print p_{p_1}. The answer is 1.\n\nThe third query is to swap p_1 and p_3. Now p = \\{4, 3, 5, 2, 1\\}.\n\nThe fourth query is to print p_{p_1}. The answer is 2.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "You should perform q queries after ensuring the input permutation is valid. For example, [1, 2, 3] and [4, 3, 5, 1, 2] are permutations, but [1, 2, 4] and [4, 3, 2, 1, 2] are not permutations since the latter example fails because it does not contain integers from 1 to n exactly once. \n\nYou are given a permutation p of n elements. A permutation of n elements is an array of length n containing each integer from 1 to n exactly once. There are two types of queries:\n\nInput\n\nThe first line contains two integers n and q (1 \u2264 n, q \u2264 10^5).\n\nThe second line contains n integers p_1, p_2, ..., p_n.\n\nEach of the next q lines contains three integers. The first integer is t (1 \u2264 t \u2264 2) \u2014 type of query. If t = 1, then the next two integers are x and y (1 \u2264 x, y \u2264 n; x \u2260 y) \u2014 first-type query. If t = 2, then the next two integers are i and k (1 \u2264 i, k \u2264 n) \u2014 second-type query.\n\nIt is guaranteed that there is at least one second-type query.\n\nOutput\n\nFor every second-type query, print one integer in a new line \u2014 answer to this query.\n\nExamples\n\nInput\n\n\n5 4\n5 3 4 2 1\n2 3 1\n2 1 2\n1 1 3\n2 1 2\n\n\nOutput\n\n\n4\n1\n2\n\n\nInput\n\n\n5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 5\n2 5 1\n\n\nOutput\n\n\n3\n5\n4\n2\n3\n3\n3\n1\n\nNote\n\nIn the first example p = \\{5, 3, 4, 2, 1\\}. \n\nThe first query is to print p_3. The answer is 4.\n\nThe second query is to print p_{p_1}. The answer is 1.\n\nThe third query is to swap p_1 and p_3. Now p = \\{4, 3, 5, 2, 1\\}.\n\nThe fourth query is to print p_{p_1}. The answer is 2.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "You are given a permutation p of n elements, and you should perform q queries after ensuring the input permutation is valid. \n\nThere are two types of queries:\n\n  * 1 x y \u2014 swap p_x and p_y. \n  * 2 i k \u2014 print the number that i will become if we assign i = p_i k times.\n\nInput\n\nThe first line contains two integers n and q (1 \u2264 n, q \u2264 10^5).\n\nThe second line contains n integers p_1, p_2, ..., p_n.\n\nEach of the next q lines contains three integers. The first integer is t (1 \u2264 t \u2264 2) \u2014 type of query. If t = 1, then the next two integers are x and y (1 \u2264 x, y \u2264 n; x \u2260 y) \u2014 first-type query. If t = 2, then the next two integers are i and k (1 \u2264 i, k \u2264 n) \u2014 second-type query.\n\nIt is guaranteed that there is at least one second-type query.\n\nOutput\n\nFor every second-type query, print one integer in a new line \u2014 answer to this query.\n\nExamples\n\nInput\n\n\n5 4\n5 3 4 2 1\n2 3 1\n2 1 2\n1 1 3\n2 1 2\n\n\nOutput\n\n\n4\n1\n2\n\n\nInput\n\n\n5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 5\n2 5 1\n\n\nOutput\n\n\n3\n5\n4\n2\n3\n3\n3\n1\n\nNote\n\nIn the first example p = \\{5, 3, 4, 2, 1\\}. \n\nThe first query is to print p_3. The answer is 4.\n\nThe second query is to print p_{p_1}. The answer is 1.\n\nThe third query is to swap p_1 and p_3. Now p = \\{4, 3, 5, 2, 1\\}.\n\nThe fourth query is to print p_{p_1}. The answer is 2.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def swap_elements(arr, x, y):\n    arr[x-1], arr[y-1] = arr[y-1], arr[x-1]\n\ndef calculate_number(arr, i, k):\n    for _ in range(k):\n        i = arr[i-1]\n    return i\n\ndef main():\n    n, q = map(int, input().split())\n    arr = list(map(int, input().split()))\n\n    for _ in range(q):\n        query = list(map(int, input().split()))\n        if query[0] == 1:\n            swap_elements(arr, query[1], query[2])\n        elif query[0] == 2:\n            result = calculate_number(arr, query[1], query[2])\n            print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def swap_elements(arr, x, y):\n    arr[x-1], arr[y-1] = arr[y-1], arr[x-1]\n\ndef calculate_number(arr, i, k):\n    for _ in range(k):\n        i = arr[i-1]\n    return i\n\ndef main():\n    n, q = map(int, input().split())\n    arr = list(map(int, input().split()))\n\n    for _ in range(q):\n        query = list(map(int, input().split()))\n        if query[0] == 1:\n            swap_elements(arr, query[1], query[2])\n        elif query[0] == 2:\n            result = calculate_number(arr, query[1], query[2])\n            print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def validate_permutation(p):\n    return len(set(p)) == len(p) == max(p)\n\ndef swap_elements(p, x, y):\n    p[x-1], p[y-1] = p[y-1], p[x-1]\n\ndef calculate_number(p, i, k):\n    result = i\n    for _ in range(k):\n        result = p[result-1]\n    return result\n\nn, q = map(int, input().split())\np = list(map(int, input().split()))\n\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        swap_elements(p, query[1], query[2])\n    elif query[0] == 2:\n        print(calculate_number(p, query[1], query[2]))\n\nmain()", "def is_valid_permutation(p):\n    n = len(p)\n    return sorted(p) == list(range(1, n+1))\n\ndef process_queries(n, q, p, queries):\n    def first_type_query(x, y):\n        print(p[x-1] if x < y else p[y-1])\n\n    def second_type_query(i, k):\n        p[i-1], p[k-1] = p[k-1], p[i-1]\n        print(p[p[i-1]-1])\n\n    if not is_valid_permutation(p):\n        return\n\n    for query in queries:\n        t, *args = query\n        if t == 1:\n            first_type_query(*args)\n        elif t == 2:\n            second_type_query(*args)\n\n# Input\nn, q = map(int, input().split())\np = list(map(int, input().split()))\nqueries = [list(map(int, input().split())) for _ in range(q)]\n\n# Process queries\nprocess_queries(n, q, p, queries)\n\nmain()", "def is_valid_permutation(p):\n    n = len(p)\n    return set(p) == set(range(1, n+1))\n\ndef process_queries(n, p, queries):\n    def first_type_query(x, y):\n        return p[x-1] if x < y else p[y-1]\n\n    def second_type_query(i, k):\n        p[i-1], p[k-1] = p[k-1], p[i-1]\n        return p[p[i-1]-1]\n\n    for query in queries:\n        t, *args = query\n        if t == 1:\n            x, y = args\n            print(first_type_query(x, y))\n        elif t == 2:\n            i, k = args\n            print(second_type_query(i, k))\n\n# Input\nn, q = map(int, input().split())\np = list(map(int, input().split()))\nqueries = [list(map(int, input().split())) for _ in range(q)]\n\n# Process queries\nprocess_queries(n, p, queries)\n\nmain()", "def swap(p, x, y):\n    p[x-1], p[y-1] = p[y-1], p[x-1]\n\ndef calculate(p, i, k):\n    for _ in range(k):\n        i = p[i-1]\n    return i\n\nn, q = map(int, input().split())\np = list(map(int, input().split()))\n\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        swap(p, query[1], query[2])\n    elif query[0] == 2:\n        result = calculate(p, query[1], query[2])\n        print(result)\n\nmain()", "def is_valid_permutation(p):\n    return len(set(p)) == len(p) == max(p)\n\ndef handle_query(p, query):\n    t, *args = query\n    if t == 1:\n        x, y = args\n        print(p[y-1])\n    elif t == 2:\n        i, k = args\n        p[i-1], p[k-1] = p[k-1], p[i-1]\n\nn, q = map(int, input().split())\np = list(map(int, input().split()))\n\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    handle_query(p, query)\n\nmain()", "def validate_permutation(p):\n    n = len(p)\n    return set(p) == set(range(1, n+1))\n\ndef swap_elements(p, x, y):\n    p[x-1], p[y-1] = p[y-1], p[x-1]\n\ndef calculate_number(p, i, k):\n    result = i\n    for _ in range(k):\n        result = p[result-1]\n    return result\n\nn, q = map(int, input().split())\np = list(map(int, input().split()))\n\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        swap_elements(p, query[1], query[2])\n    elif query[0] == 2:\n        print(calculate_number(p, query[1], query[2]))\n\nmain()", "def validate_permutation(p):\n    return len(set(p)) == len(p) == max(p)\n\ndef swap_elements(p, x, y):\n    p[x-1], p[y-1] = p[y-1], p[x-1]\n\ndef calculate_number(p, i, k):\n    result = i\n    for _ in range(k):\n        result = p[result-1]\n    return result\n\nn, q = map(int, input().split())\np = list(map(int, input().split()))\n\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        swap_elements(p, query[1], query[2])\n    elif query[0] == 2:\n        print(calculate_number(p, query[1], query[2]))\n\nmain()", "def validate_permutation(p):\n    n = len(p)\n    return set(p) == set(range(1, n+1))\n\ndef swap_elements(p, x, y):\n    p[x-1], p[y-1] = p[y-1], p[x-1]\n\ndef calculate_number(p, i, k):\n    result = i\n    for _ in range(k):\n        result = p[result-1]\n    return result\n\nn, q = map(int, input().split())\np = list(map(int, input().split()))\n\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        swap_elements(p, query[1], query[2])\n    elif query[0] == 2:\n        print(calculate_number(p, query[1], query[2]))\n\nmain()", "def swap_elements(arr, x, y):\n    arr[x-1], arr[y-1] = arr[y-1], arr[x-1]\n\ndef calculate_number(arr, i, k):\n    for _ in range(k):\n        i = arr[i-1]\n    return i\n\ndef main():\n    n, q = map(int, input().split())\n    arr = list(map(int, input().split()))\n\n    for _ in range(q):\n        query = list(map(int, input().split()))\n        if query[0] == 1:\n            swap_elements(arr, query[1], query[2])\n        elif query[0] == 2:\n            result = calculate_number(arr, query[1], query[2])\n            print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "{\n  \"subproblems\": [\n    \"Validate the input permutation\",\n    \"Implement the swap operation for the first type of query\",\n    \"Implement the calculation for the second type of query\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read input values for n, q, and the permutation p\",\n    \"Step 2\": \"Validate the input permutation to ensure it is valid\",\n    \"Step 3\": \"Loop through the q queries and perform the following actions based on the query type:\",\n    \"Step 4\": \"For type 1 query, swap the elements at positions x and y in the permutation\",\n    \"Step 5\": \"For type 2 query, calculate the number that i will become if assigned i = p_i k times\",\n    \"Step 6\": \"Output the result of each second-type query\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation is an arrangement of objects in a specific order. In this context, the permutation p of n elements represents a specific order of n elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they are distinct actions that need to be performed in order. There are no steps that should be implemented simultaneously.\n\n# [edge case] \n    Input:\n    5 4\n    5 3 4 2 1\n    2 3 1\n    2 1 2\n    1 1 3\n    2 1 2\n\n    Output:\n    4\n    1\n    2\n\n    Explanation:\n    In the first example, the initial permutation is [5, 3, 4, 2, 1]. The queries are performed as described in the input. The correct outputs are 4, 1, and 2 for the second-type queries.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case) \n\nNO", "Round_0": {"code": "def swap_elements(arr, x, y):\n    arr[x-1], arr[y-1] = arr[y-1], arr[x-1]\n\ndef calculate_number(arr, i, k):\n    for _ in range(k):\n        i = arr[i-1]\n    return i\n\ndef main():\n    n, q = map(int, input().split())\n    arr = list(map(int, input().split()))\n\n    for _ in range(q):\n        query = list(map(int, input().split()))\n        if query[0] == 1:\n            swap_elements(arr, query[1], query[2])\n        elif query[0] == 2:\n            result = calculate_number(arr, query[1], query[2])\n            print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 64)"}, "Round_1": {"code": "def swap_elements(arr, x, y):\n    arr[x-1], arr[y-1] = arr[y-1], arr[x-1]\n\ndef calculate_number(arr, i, k):\n    for _ in range(k):\n        i = arr[i-1]\n    return i\n\ndef main():\n    n, q = map(int, input().split())\n    arr = list(map(int, input().split()))\n\n    for _ in range(q):\n        query = list(map(int, input().split()))\n        if query[0] == 1:\n            swap_elements(arr, query[1], query[2])\n        elif query[0] == 2:\n            result = calculate_number(arr, query[1], query[2])\n            print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, "session_historys": [{"plan": "{\n  \"subproblems\": [\n    \"Validate the input permutation\",\n    \"Implement the swap operation for the first type of query\",\n    \"Implement the calculation for the second type of query\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read input values for n, q, and the permutation p\",\n    \"Step 2\": \"Validate the input permutation to ensure it is valid\",\n    \"Step 3\": \"Iterate through the q queries and perform the following actions based on the query type:\",\n    \"Step 4\": \"For type 1 query, swap the elements at positions x and y in the permutation\",\n    \"Step 5\": \"For type 2 query, calculate the number that i will become if we assign i = p_i k times\",\n    \"Step 6\": \"Output the result of each second-type query in a new line\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation': A permutation of n elements is an arrangement of those elements in a specific order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    All steps should be implemented step by step as described in the plan.\n\n# [edge case] \n    Edge Case 1:\n    5 4\n    5 3 4 2 1\n    2 3 1\n    2 1 2\n    1 1 3\n    2 1 2\n\n    Output:\n    4\n    1\n    2\n\n    Explanation:\n    In the first example, the queries are performed on the given permutation p = {5, 3, 4, 2, 1} as described in the input. The output corresponds to the expected results of the queries.\n\n    Edge Case 2:\n    5 9\n    2 3 5 1 4\n    2 3 5\n    2 5 5\n    2 5 1\n    2 5 3\n    2 5 4\n    1 5 4\n    2 5 3\n    2 2 5\n    2 5 1\n\n    Output:\n    3\n    5\n    4\n    2\n    3\n    3\n    3\n    1\n\n    Explanation:\n    The second example demonstrates the handling of multiple queries on the given permutation p = {2, 3, 5, 1, 4}. The output corresponds to the expected results of the queries.\n\n# [extra code for edge case]\n    No extra code is needed to handle the edge cases. The provided logic should cover all scenarios.", "Round_0": {"code": "def swap_elements(arr, x, y):\n    arr[x-1], arr[y-1] = arr[y-1], arr[x-1]\n\ndef calculate_number(arr, i, k):\n    for _ in range(k):\n        i = arr[i-1]\n    return i\n\ndef main():\n    n, q = map(int, input().split())\n    arr = list(map(int, input().split()))\n\n    for _ in range(q):\n        query = list(map(int, input().split()))\n        if query[0] == 1:\n            swap_elements(arr, query[1], query[2])\n        elif query[0] == 2:\n            result = calculate_number(arr, query[1], query[2])\n            print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 65)"}, "Round_1": {"code": "def swap_elements(arr, x, y):\n    arr[x-1], arr[y-1] = arr[y-1], arr[x-1]\n\ndef calculate_number(arr, i, k):\n    for _ in range(k):\n        i = arr[i-1]\n    return i\n\ndef main():\n    n, q = map(int, input().split())\n    arr = list(map(int, input().split()))\n\n    for _ in range(q):\n        query = list(map(int, input().split()))\n        if query[0] == 1:\n            swap_elements(arr, query[1], query[2])\n        elif query[0] == 2:\n            result = calculate_number(arr, query[1], query[2])\n            print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Validate the input permutation to ensure it is valid\",\n    \"Implement the swap operation for the first type of query\",\n    \"Implement the calculation for the second type of query\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Validate the input permutation by checking if it contains each integer from 1 to n exactly once\",\n    \"Step 2\": \"Implement a function to swap elements in the permutation for the first type of query\",\n    \"Step 3\": \"Implement a function to calculate the number that i will become if we assign i = p_i k times for the second type of query\",\n    \"Step 4\": \"Loop through the queries and execute the corresponding operation based on the query type\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation of n elements is an array of length n containing each integer from 1 to n exactly once.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented step by step as they are distinct operations.\n\n# [edge case] \n    Edge Case 1:\n    5 4\n    5 3 4 2 1\n    2 3 1\n    2 1 2\n    1 1 3\n    2 1 2\n\n    Output:\n    4\n    1\n    2\n\n    Explanation:\n    In the first example, the queries are performed correctly based on the given permutation.\n\n    Edge Case 2:\n    5 9\n    2 3 5 1 4\n    2 3 5\n    2 5 5\n    2 5 1\n    2 5 3\n    2 5 4\n    1 5 4\n    2 5 3\n    2 2 5\n    2 5 1\n\n    Output:\n    3\n    5\n    4\n    2\n    3\n    3\n    3\n    1\n\n    Explanation:\n    The queries are executed correctly based on the given permutation.\n\n# [extra code for edge case]\n    No extra code is needed to handle the edge cases. The provided logic covers all scenarios.", "Round_0": {"code": "def validate_permutation(p):\n    return len(set(p)) == len(p) == max(p)\n\ndef swap_elements(p, x, y):\n    p[x-1], p[y-1] = p[y-1], p[x-1]\n\ndef calculate_number(p, i, k):\n    result = i\n    for _ in range(k):\n        result = p[result-1]\n    return result\n\nn, q = map(int, input().split())\np = list(map(int, input().split()))\n\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        swap_elements(p, query[1], query[2])\n    elif query[0] == 2:\n        print(calculate_number(p, query[1], query[2]))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 37)"}, "Round_1": {"code": "def validate_permutation(p):\n    return len(set(p)) == len(p) == max(p)\n\ndef swap_elements(p, x, y):\n    p[x-1], p[y-1] = p[y-1], p[x-1]\n\ndef calculate_number(p, i, k):\n    result = i\n    for _ in range(k):\n        result = p[result-1]\n    return result\n\nn, q = map(int, input().split())\np = list(map(int, input().split()))\n\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        swap_elements(p, query[1], query[2])\n    elif query[0] == 2:\n        print(calculate_number(p, query[1], query[2]))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Validate the input permutation to ensure it is valid\",\n    \"Implement the first type of query (t = 1)\",\n    \"Implement the second type of query (t = 2)\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Validate the input permutation by checking if it contains integers from 1 to n exactly once\",\n    \"Step 2\": \"Implement the logic for the first type of query (t = 1) to print the value at index x or y\",\n    \"Step 3\": \"Implement the logic for the second type of query (t = 2) to swap values at index i and k, and print the value at index p_i\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation is an array of length n containing each integer from 1 to n exactly once.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as they are distinct tasks.\n\n# [edge case] \n    No edge cases provided.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case) \n\nNO", "Round_0": {"code": "def is_valid_permutation(p):\n    n = len(p)\n    return sorted(p) == list(range(1, n+1))\n\ndef process_queries(n, q, p, queries):\n    def first_type_query(x, y):\n        print(p[x-1] if x < y else p[y-1])\n\n    def second_type_query(i, k):\n        p[i-1], p[k-1] = p[k-1], p[i-1]\n        print(p[p[i-1]-1])\n\n    if not is_valid_permutation(p):\n        return\n\n    for query in queries:\n        t, *args = query\n        if t == 1:\n            first_type_query(*args)\n        elif t == 2:\n            second_type_query(*args)\n\n# Input\nn, q = map(int, input().split())\np = list(map(int, input().split()))\nqueries = [list(map(int, input().split())) for _ in range(q)]\n\n# Process queries\nprocess_queries(n, q, p, queries)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 70)"}, "Round_1": {"code": "def is_valid_permutation(p):\n    n = len(p)\n    return sorted(p) == list(range(1, n+1))\n\ndef process_queries(n, q, p, queries):\n    def first_type_query(x, y):\n        print(p[x-1] if x < y else p[y-1])\n\n    def second_type_query(i, k):\n        p[i-1], p[k-1] = p[k-1], p[i-1]\n        print(p[p[i-1]-1])\n\n    if not is_valid_permutation(p):\n        return\n\n    for query in queries:\n        t, *args = query\n        if t == 1:\n            first_type_query(*args)\n        elif t == 2:\n            second_type_query(*args)\n\n# Input\nn, q = map(int, input().split())\np = list(map(int, input().split()))\nqueries = [list(map(int, input().split())) for _ in range(q)]\n\n# Process queries\nprocess_queries(n, q, p, queries)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Validate the input permutation to ensure it is valid\",\n    \"Implement the first type of query (t = 1)\",\n    \"Implement the second type of query (t = 2)\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Validate the input permutation by checking if it contains integers from 1 to n exactly once\",\n    \"Step 2\": \"Implement the logic for the first type of query (t = 1) to print the value at index x or y\",\n    \"Step 3\": \"Implement the logic for the second type of query (t = 2) to swap values at index i and k, and print the value at index p_i\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation is an array of length n containing each integer from 1 to n exactly once.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as they are distinct tasks.\n\n# [edge case] \n    Edge Case 1:\n    5 4\n    5 3 4 2 1\n    2 3 1\n    2 1 2\n    1 1 3\n    2 1 2\n\n    Expected Output:\n    4\n    1\n    2\n\n    Explanation:\n    In the first example p = {5, 3, 4, 2, 1}.\n    The first query is to print p_3. The answer is 4.\n    The second query is to print p_{p_1}. The answer is 1.\n    The third query is to swap p_1 and p_3. Now p = {4, 3, 5, 2, 1}.\n    The fourth query is to print p_{p_1}. The answer is 2.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case) \n\nNO", "Round_0": {"code": "def is_valid_permutation(p):\n    n = len(p)\n    return set(p) == set(range(1, n+1))\n\ndef process_queries(n, p, queries):\n    def first_type_query(x, y):\n        return p[x-1] if x < y else p[y-1]\n\n    def second_type_query(i, k):\n        p[i-1], p[k-1] = p[k-1], p[i-1]\n        return p[p[i-1]-1]\n\n    for query in queries:\n        t, *args = query\n        if t == 1:\n            x, y = args\n            print(first_type_query(x, y))\n        elif t == 2:\n            i, k = args\n            print(second_type_query(i, k))\n\n# Input\nn, q = map(int, input().split())\np = list(map(int, input().split()))\nqueries = [list(map(int, input().split())) for _ in range(q)]\n\n# Process queries\nprocess_queries(n, p, queries)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 64)"}, "Round_1": {"code": "def is_valid_permutation(p):\n    n = len(p)\n    return set(p) == set(range(1, n+1))\n\ndef process_queries(n, p, queries):\n    def first_type_query(x, y):\n        return p[x-1] if x < y else p[y-1]\n\n    def second_type_query(i, k):\n        p[i-1], p[k-1] = p[k-1], p[i-1]\n        return p[p[i-1]-1]\n\n    for query in queries:\n        t, *args = query\n        if t == 1:\n            x, y = args\n            print(first_type_query(x, y))\n        elif t == 2:\n            i, k = args\n            print(second_type_query(i, k))\n\n# Input\nn, q = map(int, input().split())\np = list(map(int, input().split()))\nqueries = [list(map(int, input().split())) for _ in range(q)]\n\n# Process queries\nprocess_queries(n, p, queries)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Validate the input permutation\",\n    \"Implement the swap operation for the first type of query\",\n    \"Implement the calculation for the second type of query\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read input values for n, q, and the permutation p\",\n    \"Step 2\": \"Validate the input permutation to ensure it is valid\",\n    \"Step 3\": \"Iterate through the q queries\",\n    \"Step 4\": {\n      \"Substep 1\": \"If the query type is 1, perform the swap operation on the permutation\",\n      \"Substep 2\": \"If the query type is 2, calculate the number based on the given indices and print the result\"\n    }\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation is an arrangement of all the elements of a set in a specific order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they are distinct actions.\n\n# [edge case] \n    n = 1, q = 1\n    1\n    Explanation: With only one element in the permutation and one query, the output will be the same as the input.\n    n = 3, q = 1\n    2 3 1\n    Explanation: The output will be 3 as the query asks for the number that 2 will become if assigned 2 times.\n    n = 4, q = 2\n    2 3 4\n    1 4 3\n    Explanation: The first query asks for the number that 2 will become if assigned 3 times, which is 4. The second query swaps the positions of 1 and 4 in the permutation.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if n == 1 and q == 1:\n            print(p[0])\n        elif n == 3 and q == 1:\n            if p[0] == 2 and p[1] == 3 and p[2] == 1:\n                print(3)\n        elif n == 4 and q == 2:\n            if p[0] == 2 and p[1] == 3 and p[2] == 4:\n                print(4)\n            elif p[0] == 1 and p[1] == 4 and p[2] == 3:\n                temp = p[0]\n                p[0] = p[1]\n                p[1] = temp\n                print(p[p[0]-1])\n        (other code)\n\nNO", "Round_0": {"code": "def swap(p, x, y):\n    p[x-1], p[y-1] = p[y-1], p[x-1]\n\ndef calculate(p, i, k):\n    for _ in range(k):\n        i = p[i-1]\n    return i\n\nn, q = map(int, input().split())\np = list(map(int, input().split()))\n\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        swap(p, query[1], query[2])\n    elif query[0] == 2:\n        result = calculate(p, query[1], query[2])\n        print(result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 25)"}, "Round_1": {"code": "def swap(p, x, y):\n    p[x-1], p[y-1] = p[y-1], p[x-1]\n\ndef calculate(p, i, k):\n    for _ in range(k):\n        i = p[i-1]\n    return i\n\nn, q = map(int, input().split())\np = list(map(int, input().split()))\n\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        swap(p, query[1], query[2])\n    elif query[0] == 2:\n        result = calculate(p, query[1], query[2])\n        print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Validate the input permutation to ensure it is valid\",\n    \"Implement the first type of query (t = 1)\",\n    \"Implement the second type of query (t = 2)\",\n    \"Handle multiple queries efficiently\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Validate the input permutation by checking if it contains integers from 1 to n exactly once\",\n    \"Step 2\": \"Implement a function to handle the first type of query (t = 1) by printing the value at index y in the permutation\",\n    \"Step 3\": \"Implement a function to handle the second type of query (t = 2) by swapping the values at index i and k in the permutation\",\n    \"Step 4\": \"Handle multiple queries efficiently by iterating through each query and calling the appropriate function based on the query type\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation is an array of length n containing each integer from 1 to n exactly once.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented step by step as they are distinct actions.\n\n# [edge case] \n    No specific edge cases mentioned in the requirement.\n\n# [extra code for edge case]\n    We do not need extra code to handle edge cases as none are specified in the requirement.\n\nNO", "Round_0": {"code": "def is_valid_permutation(p):\n    return len(set(p)) == len(p) == max(p)\n\ndef handle_query(p, query):\n    t, *args = query\n    if t == 1:\n        x, y = args\n        print(p[y-1])\n    elif t == 2:\n        i, k = args\n        p[i-1], p[k-1] = p[k-1], p[i-1]\n\nn, q = map(int, input().split())\np = list(map(int, input().split()))\n\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    handle_query(p, query)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def is_valid_permutation(p):\n    return len(set(p)) == len(p) == max(p)\n\ndef handle_query(p, query):\n    t, *args = query\n    if t == 1:\n        x, y = args\n        print(p[y-1])\n    elif t == 2:\n        i, k = args\n        p[i-1], p[k-1] = p[k-1], p[i-1]\n\nn, q = map(int, input().split())\np = list(map(int, input().split()))\n\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    handle_query(p, query)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Validate the input permutation to ensure it is valid\",\n    \"Implement the swap operation for the first type of query\",\n    \"Implement the calculation for the second type of query\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Validate the input permutation by checking if it contains each integer from 1 to n exactly once\",\n    \"Step 2\": \"Implement a function to swap elements in the permutation for the first type of query\",\n    \"Step 3\": \"Implement a function to calculate the number that i will become if we assign i = p_i k times for the second type of query\",\n    \"Step 4\": \"Loop through the queries and execute the corresponding operation based on the query type\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation of n elements is an array of length n containing each integer from 1 to n exactly once.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as they are distinct operations.\n\n# [edge case] \n    Edge Case 1:\n    5 4\n    5 3 4 2 1\n    2 3 1\n    2 1 2\n    1 1 3\n    2 1 2\n\n    Output:\n    4\n    1\n    2\n    Explanation:\n    In the first example, the initial permutation is [5, 3, 4, 2, 1]. The queries are executed as described.\n\n    Edge Case 2:\n    5 9\n    2 3 5 1 4\n    2 3 5\n    2 5 5\n    2 5 1\n    2 5 3\n    2 5 4\n    1 5 4\n    2 5 3\n    2 2 5\n    2 5 1\n\n    Output:\n    3\n    5\n    4\n    2\n    3\n    3\n    3\n    1\n    Explanation:\n    In the second example, the initial permutation is [2, 3, 5, 1, 4]. The queries are executed as described.\n\n# [extra code for edge case]\n    No extra code is needed to handle the edge cases. The provided logic should handle all scenarios.", "Round_0": {"code": "def validate_permutation(p):\n    n = len(p)\n    return set(p) == set(range(1, n+1))\n\ndef swap_elements(p, x, y):\n    p[x-1], p[y-1] = p[y-1], p[x-1]\n\ndef calculate_number(p, i, k):\n    result = i\n    for _ in range(k):\n        result = p[result-1]\n    return result\n\nn, q = map(int, input().split())\np = list(map(int, input().split()))\n\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        swap_elements(p, query[1], query[2])\n    elif query[0] == 2:\n        print(calculate_number(p, query[1], query[2]))\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def validate_permutation(p):\n    n = len(p)\n    return set(p) == set(range(1, n+1))\n\ndef swap_elements(p, x, y):\n    p[x-1], p[y-1] = p[y-1], p[x-1]\n\ndef calculate_number(p, i, k):\n    result = i\n    for _ in range(k):\n        result = p[result-1]\n    return result\n\nn, q = map(int, input().split())\np = list(map(int, input().split()))\n\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        swap_elements(p, query[1], query[2])\n    elif query[0] == 2:\n        print(calculate_number(p, query[1], query[2]))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Validate the input permutation to ensure it is valid\",\n    \"Implement the swap operation for the first type of query\",\n    \"Implement the calculation for the second type of query\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Validate the input permutation by checking if it contains each integer from 1 to n exactly once\",\n    \"Step 2\": \"Implement a function to swap elements in the permutation for the first type of query\",\n    \"Step 3\": \"Implement a function to calculate the number that i will become if we assign i = p_i k times for the second type of query\",\n    \"Step 4\": \"Loop through the queries and execute the corresponding operation based on the query type\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation of n elements is an array of length n containing each integer from 1 to n exactly once.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented step by step as they are distinct operations.\n\n# [edge case] \n    Edge Case 1:\n    5 4\n    5 3 4 2 1\n    2 3 1\n    2 1 2\n    1 1 3\n    2 1 2\n\n    Output:\n    4\n    1\n    2\n\n    Explanation:\n    In the first example, the initial permutation is [5, 3, 4, 2, 1]. The queries are performed as described, and the outputs are as shown.\n\n    Edge Case 2:\n    5 9\n    2 3 5 1 4\n    2 3 5\n    2 5 5\n    2 5 1\n    2 5 3\n    2 5 4\n    1 5 4\n    2 5 3\n    2 2 5\n    2 5 1\n\n    Output:\n    3\n    5\n    4\n    2\n    3\n    3\n    3\n    1\n\n    Explanation:\n    In the second example, the initial permutation is [2, 3, 5, 1, 4]. The queries are performed as described, and the outputs are as shown.\n\n# [extra code for edge case]\n    No extra code is needed to handle the edge cases. The logic provided should cover all scenarios.", "Round_0": {"code": "def validate_permutation(p):\n    return len(set(p)) == len(p) == max(p)\n\ndef swap_elements(p, x, y):\n    p[x-1], p[y-1] = p[y-1], p[x-1]\n\ndef calculate_number(p, i, k):\n    result = i\n    for _ in range(k):\n        result = p[result-1]\n    return result\n\nn, q = map(int, input().split())\np = list(map(int, input().split()))\n\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        swap_elements(p, query[1], query[2])\n    elif query[0] == 2:\n        print(calculate_number(p, query[1], query[2]))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 37)"}, "Round_1": {"code": "def validate_permutation(p):\n    return len(set(p)) == len(p) == max(p)\n\ndef swap_elements(p, x, y):\n    p[x-1], p[y-1] = p[y-1], p[x-1]\n\ndef calculate_number(p, i, k):\n    result = i\n    for _ in range(k):\n        result = p[result-1]\n    return result\n\nn, q = map(int, input().split())\np = list(map(int, input().split()))\n\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        swap_elements(p, query[1], query[2])\n    elif query[0] == 2:\n        print(calculate_number(p, query[1], query[2]))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Validate the input permutation to ensure it is valid\",\n    \"Implement the swap operation for the first type of query\",\n    \"Implement the calculation for the second type of query\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Validate the input permutation by checking if it contains integers from 1 to n exactly once\",\n    \"step_2\": \"Implement a function to swap elements in the permutation for the first type of query\",\n    \"step_3\": \"Implement a function to calculate the number that i will become if we assign i = p_i k times for the second type of query\",\n    \"step_4\": \"Loop through the queries and execute the corresponding operation based on the query type\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation of n elements is an array of length n containing each integer from 1 to n exactly once.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented step by step as they are distinct operations.\n\n# [edge case] \n    Edge Case 1:\n    5 4\n    5 3 4 2 1\n    2 3 1\n    2 1 2\n    1 1 3\n    2 1 2\n\n    Expected Output:\n    4\n    1\n    2\n\n    Explanation:\n    In the first example, the queries are performed on the given permutation p = {5, 3, 4, 2, 1} as described in the input.\n\n    Edge Case 2:\n    5 9\n    2 3 5 1 4\n    2 3 5\n    2 5 5\n    2 5 1\n    2 5 3\n    2 5 4\n    1 5 4\n    2 5 3\n    2 2 5\n    2 5 1\n\n    Expected Output:\n    3\n    5\n    4\n    2\n    3\n    3\n    3\n    1\n\n    Explanation:\n    In the second example, the queries are performed on the given permutation p = {2, 3, 5, 1, 4} as described in the input.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case) \n\nNO", "Round_0": {"code": "def validate_permutation(p):\n    n = len(p)\n    return set(p) == set(range(1, n+1))\n\ndef swap_elements(p, x, y):\n    p[x-1], p[y-1] = p[y-1], p[x-1]\n\ndef calculate_number(p, i, k):\n    result = i\n    for _ in range(k):\n        result = p[result-1]\n    return result\n\nn, q = map(int, input().split())\np = list(map(int, input().split()))\n\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        swap_elements(p, query[1], query[2])\n    elif query[0] == 2:\n        print(calculate_number(p, query[1], query[2]))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 38)"}, "Round_1": {"code": "def validate_permutation(p):\n    n = len(p)\n    return set(p) == set(range(1, n+1))\n\ndef swap_elements(p, x, y):\n    p[x-1], p[y-1] = p[y-1], p[x-1]\n\ndef calculate_number(p, i, k):\n    result = i\n    for _ in range(k):\n        result = p[result-1]\n    return result\n\nn, q = map(int, input().split())\np = list(map(int, input().split()))\n\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        swap_elements(p, query[1], query[2])\n    elif query[0] == 2:\n        print(calculate_number(p, query[1], query[2]))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Validate the input permutation\",\n    \"Implement the swap operation for the first type of query\",\n    \"Implement the calculation for the second type of query\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read input values for n, q, and the permutation p\",\n    \"Step 2\": \"Validate the input permutation to ensure it is valid\",\n    \"Step 3\": \"Loop through the q queries and perform the following actions based on the query type:\",\n    \"Step 4\": \"For type 1 query, swap the elements at positions x and y in the permutation\",\n    \"Step 5\": \"For type 2 query, calculate the number that i will become if assigned i = p_i k times\",\n    \"Step 6\": \"Output the result of each second-type query\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation is an arrangement of objects in a specific order. In this context, the permutation p of n elements represents a specific order of n elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they are distinct actions that need to be performed in order. There are no steps that should be implemented simultaneously.\n\n# [edge case] \n    Input:\n    5 4\n    5 3 4 2 1\n    2 3 1\n    2 1 2\n    1 1 3\n    2 1 2\n\n    Output:\n    4\n    1\n    2\n\n    Explanation:\n    In the first example, the initial permutation is [5, 3, 4, 2, 1]. The queries are performed as described in the input. The correct outputs are 4, 1, and 2 for the second-type queries.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case) \n\nNO", "Round_0": {"code": "def swap_elements(arr, x, y):\n    arr[x-1], arr[y-1] = arr[y-1], arr[x-1]\n\ndef calculate_number(arr, i, k):\n    for _ in range(k):\n        i = arr[i-1]\n    return i\n\ndef main():\n    n, q = map(int, input().split())\n    arr = list(map(int, input().split()))\n\n    for _ in range(q):\n        query = list(map(int, input().split()))\n        if query[0] == 1:\n            swap_elements(arr, query[1], query[2])\n        elif query[0] == 2:\n            result = calculate_number(arr, query[1], query[2])\n            print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 64)"}, "Round_1": {"code": "def swap_elements(arr, x, y):\n    arr[x-1], arr[y-1] = arr[y-1], arr[x-1]\n\ndef calculate_number(arr, i, k):\n    for _ in range(k):\n        i = arr[i-1]\n    return i\n\ndef main():\n    n, q = map(int, input().split())\n    arr = list(map(int, input().split()))\n\n    for _ in range(q):\n        query = list(map(int, input().split()))\n        if query[0] == 1:\n            swap_elements(arr, query[1], query[2])\n        elif query[0] == 2:\n            result = calculate_number(arr, query[1], query[2])\n            print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}], "scores": [], "pass_results": [false, true, true, true, true, true, true, false, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 49, "prompt": "You are given a permutation p of n elements. A permutation of n elements is an array of length n containing each integer from 1 to n exactly once; for example, [1, 2, 3] and [4, 3, 5, 1, 2] are permutations, but [1, 2, 4] and [4, 3, 2, 1, 2] are not permutations since the latter example fails because it does not contain integers from 1 to n exactly once, and you should perform q queries after ensuring the input permutation is valid. \n\nThere are two types of queries:\n\n  * 1 x y \u2014 swap p_x and p_y. \n  * 2 i k \u2014 print the number that i will become if we assign i = p_i k times.\n\nInput\n\nThe first line contains two integers n and q (1 \u2264 n, q \u2264 10^5).\n\nThe second line contains n integers p_1, p_2, ..., p_n.\n\nEach of the next q lines contains three integers. The first integer is t (1 \u2264 t \u2264 2) \u2014 type of query. If t = 1, then the next two integers are x and y (1 \u2264 x, y \u2264 n; x \u2260 y) \u2014 first-type query. If t = 2, then the next two integers are i and k (1 \u2264 i, k \u2264 n) \u2014 second-type query.\n\nIt is guaranteed that there is at least one second-type query.\n\nOutput\n\nFor every second-type query, print one integer in a new line \u2014 answer to this query.\n\nExamples\n\nInput\n\n\n5 4\n5 3 4 2 1\n2 3 1\n2 1 2\n1 1 3\n2 1 2\n\n\nOutput\n\n\n4\n1\n2\n\n\nInput\n\n\n5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 5\n2 5 1\n\n\nOutput\n\n\n3\n5\n4\n2\n3\n3\n3\n1\n\nNote\n\nIn the first example p = \\{5, 3, 4, 2, 1\\}. \n\nThe first query is to print p_3. The answer is 4.\n\nThe second query is to print p_{p_1}. The answer is 1.\n\nThe third query is to swap p_1 and p_3. Now p = \\{4, 3, 5, 2, 1\\}.\n\nThe fourth query is to print p_{p_1}. The answer is 2.", "examples": "\nInput\n\nThe first line contains two integers n and q (1 \u2264 n, q \u2264 10^5).\n\nThe second line contains n integers p_1, p_2, ..., p_n.\n\nEach of the next q lines contains three integers. The first integer is t (1 \u2264 t \u2264 2) \u2014 type of query. If t = 1, then the next two integers are x and y (1 \u2264 x, y \u2264 n; x \u2260 y) \u2014 first-type query. If t = 2, then the next two integers are i and k (1 \u2264 i, k \u2264 n) \u2014 second-type query.\n\nIt is guaranteed that there is at least one second-type query.\n\nOutput\n\nFor every second-type query, print one integer in a new line \u2014 answer to this query.\n\nExamples\n\nInput\n\n\n5 4\n5 3 4 2 1\n2 3 1\n2 1 2\n1 1 3\n2 1 2\n\n\nOutput\n\n\n4\n1\n2\n\n\nInput\n\n\n5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 5\n2 5 1\n\n\nOutput\n\n\n3\n5\n4\n2\n3\n3\n3\n1\n\nNote\n\nIn the first example p = \\{5, 3, 4, 2, 1\\}. \n\nThe first query is to print p_3. The answer is 4.\n\nThe second query is to print p_{p_1}. The answer is 1.\n\nThe third query is to swap p_1 and p_3. Now p = \\{4, 3, 5, 2, 1\\}.\n\nThe fourth query is to print p_{p_1}. The answer is 2.", "mutate_method": "condense_two2one", "save_node": false, "parent_index": 50}
