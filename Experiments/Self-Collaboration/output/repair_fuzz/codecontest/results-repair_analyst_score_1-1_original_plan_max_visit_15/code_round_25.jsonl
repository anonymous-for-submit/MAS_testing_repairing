{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "repair_prompt": ["Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He desires to allocate all songs into two concerts. Every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "He desires to allocate all songs into two concerts, making the absolute difference of durations of the concerts as small as possible. The minimal possible difference in minutes between the concerts durations needs to be found to help Luntik.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Luntik has decided to try singing, with one-minute songs, two-minute songs, and three-minute songs that he wants to allocate into two concerts, aiming to minimize the absolute difference in durations between the concerts. Can you help him find the minimal possible difference in minutes between the concerts durations?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs in the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the minimum and maximum possible durations for each concert\n    min_duration = total_duration // 2\n    max_duration = total_duration - min_duration\n    \n    # Calculate the absolute difference between the durations of the two concerts\n    abs_diff = abs(max_duration - min_duration)\n    \n    # Print the absolute difference for each test case\n    print(abs_diff)\n\nmain()", "completions": ["# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs in the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the minimum and maximum possible durations for each concert\n    min_duration = total_duration // 2\n    max_duration = total_duration - min_duration\n    \n    # Calculate the absolute difference between the durations of the two concerts\n    abs_diff = abs(max_duration - min_duration)\n    \n    # Print the absolute difference for each test case\n    print(abs_diff)\n\nmain()", "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Calculate the minimum difference by trying all possible combinations\n    min_diff = float('inf')\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                diff = abs(concert1_duration - concert2_duration)\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n\nmain()", "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = float('inf')\n    \n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                duration = i + 2*j + 3*k\n                if duration <= half_duration:\n                    min_diff = min(min_diff, half_duration - duration)\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(calculate_min_difference(a, b, c))\n\nmain()", "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs in the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the minimum and maximum possible durations for each concert\n    min_duration = (total_duration + 1) // 2\n    max_duration = total_duration // 2 + total_duration % 2\n    \n    # Calculate the absolute difference between the durations of the two concerts\n    minimal_difference = abs(min_duration - max_duration)\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(minimal_difference)\n\nmain()", "import itertools\n\ndef calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = float('inf')\n    \n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                duration = i + 2*j + 3*k\n                if duration <= half_duration:\n                    min_diff = min(min_diff, abs(total_duration - 2*duration))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n\nmain()", "import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find all possible combinations of songs for the two concerts\ndef generate_combinations(a, b, c):\n    songs = [1]*a + [2]*b + [3]*c\n    all_combinations = []\n    for r in range(1, len(songs)//2 + 1):\n        combinations = itertools.combinations(songs, r)\n        all_combinations.extend(combinations)\n    return all_combinations\n\n# Function to calculate the duration of each concert for each combination\ndef calculate_concert_durations(combination):\n    concert1 = sum(song for song in combination)\n    concert2 = sum(song for song in set(combination))\n    return abs(concert1 - concert2)\n\n# Main function to handle test cases\ndef main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = calculate_total_duration(a, b, c)\n        combinations = generate_combinations(a, b, c)\n        min_difference = float('inf')\n        for combination in combinations:\n            difference = calculate_concert_durations(combination)\n            min_difference = min(min_difference, difference)\n        print(min_difference)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(half_duration - (min(total_duration, half_duration) - a))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n\nmain()", "import itertools\n\ndef calculate_min_difference(a, b, c):\n    songs = [1] * a + [2] * b + [3] * c\n    total_duration = sum(songs)\n    min_diff = float('inf')\n    \n    for combo in itertools.combinations(songs, len(songs)//2):\n        concert1_duration = sum(combo)\n        concert2_duration = total_duration - concert1_duration\n        diff = abs(concert1_duration - concert2_duration)\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(calculate_min_difference(a, b, c))\n\nmain()", "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(total_duration - 2*half_duration)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n\nmain()", "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs in the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the minimum and maximum possible durations for each concert\n    min_duration = total_duration // 2\n    max_duration = total_duration - min_duration\n    \n    # Calculate the absolute difference between the durations of the two concerts\n    abs_diff = abs(max_duration - min_duration)\n    \n    # Print the absolute difference for each test case\n    print(abs_diff)\n\nmain()"], "session_history": {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs in each test case\",\n    \"Determine the minimum and maximum possible durations for each concert\",\n    \"Calculate the absolute difference between the durations of the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases (t)\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs (a, b, c)\",\n    \"Step 3\": \"Calculate the total duration of all songs in the test case (total_duration = a + 2*b + 3*c)\",\n    \"Step 4\": \"Determine the minimum and maximum possible durations for each concert (min_duration = total_duration/2, max_duration = total_duration - min_duration)\",\n    \"Step 5\": \"Calculate the absolute difference between the durations of the two concerts (abs_diff = |max_duration - min_duration|)\",\n    \"Step 6\": \"Print the absolute difference for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimize the absolute difference in durations between the concerts'\n    Explanation: The core concept is to allocate songs into two concerts in a way that the absolute difference in durations between the concerts is minimized.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    All steps should be implemented step by step as per the plan.\n\n# [edge case] \n    1 1 1 = 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    2 1 3 = 1\n    Explanation: Luntik can include two one-minute songs, a two-minute song, and a three-minute song into the first concert, and two three-minute songs into the second concert. The difference will be 1.\n    5 5 5 = 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in a difference of 0.\n    1 1 2 = 1\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers all scenarios.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs in the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the minimum and maximum possible durations for each concert\n    min_duration = total_duration // 2\n    max_duration = total_duration - min_duration\n    \n    # Calculate the absolute difference between the durations of the two concerts\n    abs_diff = abs(max_duration - min_duration)\n    \n    # Print the absolute difference for each test case\n    print(abs_diff)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 27)"}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs in the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the minimum and maximum possible durations for each concert\n    min_duration = total_duration // 2\n    max_duration = total_duration - min_duration\n    \n    # Calculate the absolute difference between the durations of the two concerts\n    abs_diff = abs(max_duration - min_duration)\n    \n    # Print the absolute difference for each test case\n    print(abs_diff)\n"}}, "session_historys": [{"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs in each test case\",\n    \"Determine the minimum and maximum possible durations for each concert\",\n    \"Calculate the absolute difference between the durations of the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases (t)\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs (a, b, c)\",\n    \"Step 3\": \"Calculate the total duration of all songs in the test case (total_duration = a + 2*b + 3*c)\",\n    \"Step 4\": \"Determine the minimum and maximum possible durations for each concert (min_duration = total_duration/2, max_duration = total_duration - min_duration)\",\n    \"Step 5\": \"Calculate the absolute difference between the durations of the two concerts (abs_diff = |max_duration - min_duration|)\",\n    \"Step 6\": \"Print the absolute difference for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimize the absolute difference in durations between the concerts'\n    Explanation: The core concept is to allocate songs into two concerts in a way that the absolute difference in durations between the concerts is minimized.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    There are no steps that should be implemented simultaneously. All steps should be followed sequentially as outlined in the plan.\n\n# [edge case] \n    1 1 1 = 0\n    Explanation: In this case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    2 1 3 = 1\n    Explanation: Luntik can include two one-minute songs, a two-minute song, and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 7, and the duration of the second concert will be 6. The absolute difference is 1.\n    5 5 5 = 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in a minimal difference of 0.\n    1 1 2 = 1\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and two three-minute songs into the second concert. The difference will be 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers all scenarios.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs in the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the minimum and maximum possible durations for each concert\n    min_duration = total_duration // 2\n    max_duration = total_duration - min_duration\n    \n    # Calculate the absolute difference between the durations of the two concerts\n    abs_diff = abs(max_duration - min_duration)\n    \n    # Print the absolute difference for each test case\n    print(abs_diff)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 27)"}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs in the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the minimum and maximum possible durations for each concert\n    min_duration = total_duration // 2\n    max_duration = total_duration - min_duration\n    \n    # Calculate the absolute difference between the durations of the two concerts\n    abs_diff = abs(max_duration - min_duration)\n    \n    # Print the absolute difference for each test case\n    print(abs_diff)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Generate all possible combinations of songs for the two concerts\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Find the combination with the smallest difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible combinations of songs for the two concerts using a recursive function\",\n    \"step_3\": \"Calculate the difference in duration between the two concerts for each combination by summing the durations of songs in each concert and finding the absolute difference\",\n    \"step_4\": \"Find the combination with the smallest difference in duration and output it as the result\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'duration': The total length of time taken by all the songs combined.\n    'concerts': Dividing the songs into two groups to create two concerts.\n    Explanation: The core concept involves distributing songs into two concerts to minimize the difference in total duration between them.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    There are no steps that should be implemented simultaneously. Each step should be executed sequentially as outlined in the plan.\n\n# [edge case] \n    1. 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    2. 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    3. 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Calculate the minimum difference by trying all possible combinations\n    min_diff = float('inf')\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                diff = abs(concert1_duration - concert2_duration)\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Calculate the minimum difference by trying all possible combinations\n    min_diff = float('inf')\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                diff = abs(concert1_duration - concert2_duration)\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine all possible combinations of songs for each concert\",\n    \"Calculate the duration of each concert for each combination\",\n    \"Find the minimum absolute difference between the durations of the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Calculate the total duration of all songs by multiplying the number of each type of song by its duration\",\n    \"Step 2\": \"Generate all possible combinations of songs for each concert using a recursive function\",\n    \"Step 3\": \"Calculate the duration of each concert for each combination by summing the durations of the songs in the combination\",\n    \"Step 4\": \"Find the minimum absolute difference between the durations of the two concerts and output the result\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference': The absolute difference refers to the positive difference between two values, regardless of their order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': Indicates the smallest possible value.\n\n# [code logic]\n    The steps should be implemented sequentially as they involve different calculations and comparisons.\n\n# [edge case] \n    1 1 1\n    Output: 0\n    Explanation: In this case, Luntik can allocate one one-minute song and one two-minute song to each concert, resulting in an absolute difference of 0.\n    \n    5 5 5\n    Output: 0\n    Explanation: Luntik can evenly distribute the songs between the two concerts, resulting in an absolute difference of 0.\n    \n    1 1 2\n    Output: 1\n    Explanation: Luntik can allocate one one-minute song and one two-minute song to one concert, and one three-minute song to the other concert, resulting in an absolute difference of 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "import itertools\n\ndef calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = float('inf')\n    \n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                duration = i + 2*j + 3*k\n                if duration <= half_duration:\n                    min_diff = min(min_diff, half_duration - duration)\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(calculate_min_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 31)"}, "Round_1": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = float('inf')\n    \n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                duration = i + 2*j + 3*k\n                if duration <= half_duration:\n                    min_diff = min(min_diff, half_duration - duration)\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(calculate_min_difference(a, b, c))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs in each test case\",\n    \"Determine the minimum and maximum possible durations for each concert\",\n    \"Calculate the absolute difference between the durations of the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs\",\n    \"Step 3\": \"Calculate the total duration of all songs in the test case\",\n    \"Step 4\": \"Determine the minimum and maximum possible durations for each concert\",\n    \"Step 5\": \"Calculate the absolute difference between the durations of the two concerts\",\n    \"Step 6\": \"Print the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimize the absolute difference in durations between the concerts'\n    Explanation: The core concept is to allocate songs into two concerts in a way that the absolute difference in durations between the concerts is minimized.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as they are. There are no steps that need to be implemented simultaneously.\n\n# [edge case] \n    Test Case 1:\n    1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    Test Case 2:\n    2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    Test Case 3:\n    5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle the edge cases.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs in the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the minimum and maximum possible durations for each concert\n    min_duration = (total_duration + 1) // 2\n    max_duration = total_duration // 2 + total_duration % 2\n    \n    # Calculate the absolute difference between the durations of the two concerts\n    minimal_difference = abs(min_duration - max_duration)\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(minimal_difference)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 27)"}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs in the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the minimum and maximum possible durations for each concert\n    min_duration = (total_duration + 1) // 2\n    max_duration = total_duration // 2 + total_duration % 2\n    \n    # Calculate the absolute difference between the durations of the two concerts\n    minimal_difference = abs(min_duration - max_duration)\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(minimal_difference)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine all possible combinations of songs for each concert\",\n    \"Calculate the duration of each concert for each combination\",\n    \"Find the combination that minimizes the absolute difference in durations between the concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"Step 2\": \"Generate all possible combinations of songs for each concert using a recursive function\",\n    \"Step 3\": \"Calculate the duration of each concert for each combination by summing the durations of the songs\",\n    \"Step 4\": \"Find the combination that minimizes the absolute difference in durations between the concerts\",\n    \"Step 5\": \"Output the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'total duration of all songs'\n    Explanation: The sum of the durations of all songs in the input.\n\n    'combinations of songs for each concert'\n    Explanation: Different ways of allocating songs to two concerts.\n\n    'duration of each concert'\n    Explanation: The total duration of songs in each concert.\n\n    'minimizes the absolute difference in durations'\n    Explanation: Finding the allocation that makes the difference in concert durations as small as possible.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': Indicates the smallest possible difference in durations.\n\n# [code logic]\n    All steps should be implemented sequentially as they involve different calculations and comparisons.\n\n# [edge case] \n    1. 1 1 1\n       Output: 0\n       Explanation: Luntik can allocate one one-minute song and one two-minute song to the first concert, and a three-minute song to the second concert, resulting in a difference of 0.\n       \n    2. 2 1 3\n       Output: 1\n       Explanation: Luntik can allocate two one-minute songs, one two-minute song, and one three-minute song to the first concert, and two three-minute songs to the second concert, resulting in a difference of 1.\n       \n    3. 5 5 5\n       Output: 0\n       Explanation: Luntik can allocate all songs evenly between the two concerts, resulting in a difference of 0.\n       \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should cover all scenarios.", "Round_0": {"code": "import itertools\n\ndef calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = float('inf')\n    \n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                duration = i + 2*j + 3*k\n                if duration <= half_duration:\n                    min_diff = min(min_diff, abs(total_duration - 2*duration))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "import itertools\n\ndef calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = float('inf')\n    \n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                duration = i + 2*j + 3*k\n                if duration <= half_duration:\n                    min_diff = min(min_diff, abs(total_duration - 2*duration))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Find all possible combinations of songs for the two concerts\",\n    \"Calculate the duration of each concert for each combination\",\n    \"Find the minimum absolute difference in durations between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of each type of song by its duration\",\n    \"step_2\": \"Generate all possible combinations of songs for the two concerts using a recursive function\",\n    \"step_3\": \"Calculate the duration of each concert for each combination by summing the durations of the songs in each concert\",\n    \"step_4\": \"Find the minimum absolute difference in durations between the two concerts and output the result\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference': The absolute difference refers to the positive difference between two values without considering their direction.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': Indicates the smallest possible value.\n\n# [code logic]\n    The steps should be implemented sequentially as they involve calculations that depend on previous results.\n\n# [edge case] \n    Test Case 1:\n    Input: 1 1 1\n    Output: 0\n    Explanation: Since all songs have the same duration, they can be evenly distributed between the two concerts resulting in a difference of 0.\n    \n    Test Case 2:\n    Input: 2 1 3\n    Output: 1\n    Explanation: One possible distribution is [1, 1, 2, 3] and [3, 3], resulting in durations of 7 and 6 for the two concerts, respectively. The absolute difference is |7-6| = 1.\n    \n    Test Case 3:\n    Input: 5 5 5\n    Output: 0\n    Explanation: All songs can be evenly distributed between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers the scenarios effectively.", "Round_0": {"code": "import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find all possible combinations of songs for the two concerts\ndef generate_combinations(a, b, c):\n    songs = [1]*a + [2]*b + [3]*c\n    all_combinations = []\n    for r in range(1, len(songs)//2 + 1):\n        combinations = itertools.combinations(songs, r)\n        all_combinations.extend(combinations)\n    return all_combinations\n\n# Function to calculate the duration of each concert for each combination\ndef calculate_concert_durations(combination):\n    concert1 = sum(song for song in combination)\n    concert2 = sum(song for song in set(combination))\n    return abs(concert1 - concert2)\n\n# Main function to handle test cases\ndef main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = calculate_total_duration(a, b, c)\n        combinations = generate_combinations(a, b, c)\n        min_difference = float('inf')\n        for combination in combinations:\n            difference = calculate_concert_durations(combination)\n            min_difference = min(min_difference, difference)\n        print(min_difference)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 3 were given"}, "Round_1": {"code": "import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find all possible combinations of songs for the two concerts\ndef generate_combinations(a, b, c):\n    songs = [1]*a + [2]*b + [3]*c\n    all_combinations = []\n    for r in range(1, len(songs)//2 + 1):\n        combinations = itertools.combinations(songs, r)\n        all_combinations.extend(combinations)\n    return all_combinations\n\n# Function to calculate the duration of each concert for each combination\ndef calculate_concert_durations(combination):\n    concert1 = sum(song for song in combination)\n    concert2 = sum(song for song in set(combination))\n    return abs(concert1 - concert2)\n\n# Main function to handle test cases\ndef main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        total_duration = calculate_total_duration(a, b, c)\n        combinations = generate_combinations(a, b, c)\n        min_difference = float('inf')\n        for combination in combinations:\n            difference = calculate_concert_durations(combination)\n            min_difference = min(min_difference, difference)\n        print(min_difference)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Generate all possible combinations of songs for the two concerts\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Find the combination with the smallest difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible combinations of songs for the two concerts using a recursive function\",\n    \"step_3\": \"Calculate the difference in duration between the two concerts for each combination by summing the durations of the songs in each concert and finding the absolute difference\",\n    \"step_4\": \"Find the combination with the smallest difference in duration and output it as the result\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'duration': The total length of time taken by all the songs combined.\n    'concerts': Dividing the songs into two groups to create two concerts.\n    Explanation: The core concept involves calculating the total duration of all songs and then finding the minimal possible difference in minutes between the concerts durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': Indicates the need to find the minimum difference in duration between the concerts.\n    Explanation: We need to minimize the difference in duration between the two concerts.\n\n# [code logic]\n    The steps should be implemented sequentially as they involve different calculations and comparisons to find the optimal solution.\n\n# [edge case] \n    1. 1 1 1\n       Expected Output: 0\n       Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert, resulting in a difference of 0.\n    2. 2 1 3\n       Expected Output: 1\n       Explanation: Luntik can include two one-minute songs, a two-minute song, and a three-minute song into the first concert, and two three-minute songs into the second concert, resulting in a difference of 1.\n    3. 5 5 5\n       Expected Output: 0\n       Explanation: Luntik can distribute the songs equally between the two concerts, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle the scenarios and find the minimal possible difference in minutes between the concerts durations.", "Round_0": {"code": "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(half_duration - (min(total_duration, half_duration) - a))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(half_duration - (min(total_duration, half_duration) - a))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Generate all possible combinations of songs for the two concerts\",\n    \"Calculate the duration of each concert for each combination\",\n    \"Find the combination that minimizes the absolute difference in durations between the concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Calculate the total duration of all songs (total_duration)\",\n    \"Step 2\": \"Generate all possible combinations of songs for the two concerts\",\n    \"Step 3\": \"For each combination, calculate the duration of each concert (concert1_duration, concert2_duration)\",\n    \"Step 4\": \"Find the combination that minimizes the absolute difference in durations between the concerts\",\n    \"Step 5\": \"Output the minimal possible difference in minutes between the concerts\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference': The absolute difference refers to the positive difference between two values, regardless of their order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal possible': Indicates the smallest or least possible value.\n\n# [code logic]\n    The steps 3 and 4 should be implemented simultaneously:\n    - For each combination, calculate the duration of each concert.\n    - Find the combination that minimizes the absolute difference in durations between the concerts.\n    This can be achieved by iterating through all possible combinations, calculating the duration of each concert, and keeping track of the combination with the minimal absolute difference.\n\n# [edge case] \n    1 1 1 = 0\n    Explanation: In this case, one-minute, two-minute, and three-minute songs are equal in number. Luntik can distribute them equally, resulting in 0 difference.\n    2 1 3 = 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song in one concert, and a three-minute song in the other concert. The difference will be 1.\n    5 5 5 = 0\n    Explanation: All song durations are equal, so they can be distributed equally resulting in 0 difference.\n    \n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == b and b == c:\n            return 0\n        elif a == b or b == c or a == c:\n            return 1\n        (other code)\n\nNO", "Round_0": {"code": "import itertools\n\ndef calculate_min_difference(a, b, c):\n    songs = [1] * a + [2] * b + [3] * c\n    total_duration = sum(songs)\n    min_diff = float('inf')\n    \n    for combo in itertools.combinations(songs, len(songs)//2):\n        concert1_duration = sum(combo)\n        concert2_duration = total_duration - concert1_duration\n        diff = abs(concert1_duration - concert2_duration)\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(calculate_min_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 28)"}, "Round_1": {"code": "import itertools\n\ndef calculate_min_difference(a, b, c):\n    songs = [1] * a + [2] * b + [3] * c\n    total_duration = sum(songs)\n    min_diff = float('inf')\n    \n    for combo in itertools.combinations(songs, len(songs)//2):\n        concert1_duration = sum(combo)\n        concert2_duration = total_duration - concert1_duration\n        diff = abs(concert1_duration - concert2_duration)\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(calculate_min_difference(a, b, c))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Generate all possible combinations of songs for the two concerts\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Find the combination with the smallest difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible combinations of songs for the two concerts using a recursive function\",\n    \"step_3\": \"Calculate the difference in duration between the two concerts for each combination by summing the durations of the songs in each concert\",\n    \"step_4\": \"Find the combination with the smallest difference in duration and output it as the result\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'duration': The total length of time taken by all the songs combined.\n    'concerts': Dividing the songs into two groups to create two concerts.\n    Explanation: The core concept involves distributing songs into two concerts to minimize the difference in total duration between them.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': Indicates the need to find the minimum difference in duration between the concerts.\n    Explanation: The goal is to minimize the difference in total duration between the two concerts.\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve distinct calculations and operations.\n\n# [edge case] \n    1. 1 1 1\n       Expected Output: 0\n       Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert, resulting in a difference of 0.\n    2. 2 1 3\n       Expected Output: 1\n       Explanation: Luntik can include two one-minute songs, a two-minute song, and a three-minute song into the first concert, and two three-minute songs into the second concert, resulting in a difference of 1.\n    3. 5 5 5\n       Expected Output: 0\n       Explanation: Luntik can distribute the songs equally between the two concerts, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle the scenarios.", "Round_0": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(total_duration - 2*half_duration)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(total_duration - 2*half_duration)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs in each test case\",\n    \"Determine the minimum and maximum possible durations for each concert\",\n    \"Calculate the absolute difference between the durations of the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases (t)\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs (a, b, c)\",\n    \"Step 3\": \"Calculate the total duration of all songs in the test case (total_duration = a + 2*b + 3*c)\",\n    \"Step 4\": \"Determine the minimum and maximum possible durations for each concert (min_duration = total_duration/2, max_duration = total_duration - min_duration)\",\n    \"Step 5\": \"Calculate the absolute difference between the durations of the two concerts (abs_diff = |max_duration - min_duration|)\",\n    \"Step 6\": \"Print the absolute difference for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimize the absolute difference in durations between the concerts'\n    Explanation: The core concept is to allocate songs into two concerts in a way that the absolute difference in durations between the concerts is minimized.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    All steps should be implemented step by step as per the plan.\n\n# [edge case] \n    1 1 1 = 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    2 1 3 = 1\n    Explanation: Luntik can include two one-minute songs, a two-minute song, and a three-minute song into the first concert, and two three-minute songs into the second concert. The difference will be 1.\n    5 5 5 = 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in a difference of 0.\n    1 1 2 = 1\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers all scenarios.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs in the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the minimum and maximum possible durations for each concert\n    min_duration = total_duration // 2\n    max_duration = total_duration - min_duration\n    \n    # Calculate the absolute difference between the durations of the two concerts\n    abs_diff = abs(max_duration - min_duration)\n    \n    # Print the absolute difference for each test case\n    print(abs_diff)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 27)"}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs in the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the minimum and maximum possible durations for each concert\n    min_duration = total_duration // 2\n    max_duration = total_duration - min_duration\n    \n    # Calculate the absolute difference between the durations of the two concerts\n    abs_diff = abs(max_duration - min_duration)\n    \n    # Print the absolute difference for each test case\n    print(abs_diff)\n"}}], "scores": [], "pass_results": [false, true, true, true, true, false, true, true, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 25, "prompt": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He desires to allocate all songs into two concerts. Every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "rephrase_one", "save_node": true, "parent_index": 22}
