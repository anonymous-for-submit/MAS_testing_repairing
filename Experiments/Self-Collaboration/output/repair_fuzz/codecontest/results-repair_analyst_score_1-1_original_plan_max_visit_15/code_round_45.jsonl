{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "repair_prompt": ["Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs, and he desires to allocate all songs into two concerts. Every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible, where the duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Luntik has decided to try singing. He has a one-minute songs, but also two-minute songs and three-minute songs, and he desires to allocate all songs into two concerts. Every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible, where the duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Luntik has decided to try singing and has one-minute songs, two-minute songs, and three-minute songs, wanting to allocate them into two concerts to minimize the absolute difference in durations of the concerts. Can you find the minimal possible difference in minutes between the concerts durations?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def min_diff_between_concerts(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        if total_duration % 2 == 0:\n            print(0)\n        else:\n            if a == b == c == 1:\n                print(1)\n            else:\n                if a > b:\n                    a, b = b, a\n                if b > c:\n                    b, c = c, b\n                if a > b:\n                    a, b = b, a\n                \n                if a == 0:\n                    print(abs(c - b))\n                else:\n                    print(abs((a + 1) // 2 * 2 + b - c))\n                    \n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output\nmin_diff_between_concerts(t, test_cases)\n\nmain()", "completions": ["def min_diff_between_concerts(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        if total_duration % 2 == 0:\n            print(0)\n        else:\n            if a == b == c == 1:\n                print(1)\n            else:\n                if a > b:\n                    a, b = b, a\n                if b > c:\n                    b, c = c, b\n                if a > b:\n                    a, b = b, a\n                \n                if a == 0:\n                    print(abs(c - b))\n                else:\n                    print(abs((a + 1) // 2 * 2 + b - c))\n                    \n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output\nmin_diff_between_concerts(t, test_cases)\n\nmain()", "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Initialize the minimum difference as a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of songs for the two concerts\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                diff = abs(concert1_duration - concert2_duration)\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n\nmain()", "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs in the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the possible combinations of songs for each concert\n    # We can distribute the songs as evenly as possible between the two concerts\n    # by putting the three-minute songs in one concert and the one-minute and two-minute songs in the other concert\n    # or by putting the three-minute and two-minute songs in one concert and the one-minute songs in the other concert\n    # and calculate the difference in duration between the two concerts\n    min_diff = abs((a + b) - c)\n    \n    # Output the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n\nmain()", "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs in the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the possible combinations of songs for each concert\n    # We can distribute the songs in a way that minimizes the absolute difference\n    # by putting the three-minute songs in the concert with fewer total minutes\n    min_diff = abs((total_duration + 1) // 2 - (total_duration // 2))\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n\nmain()", "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs in the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the possible combinations of songs for each concert\n    # We can distribute the songs in a way that minimizes the absolute difference\n    # by putting the three-minute songs in the concert with the lower total duration\n    min_diff = abs((total_duration + 1) // 2 - (total_duration // 2))\n    \n    # Output the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n\nmain()", "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    dp = [[False] * (half_duration + 1) for _ in range(2)]\n    dp[0][0] = True\n    \n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                duration = i + 2*j + 3*k\n                if duration <= half_duration:\n                    dp[1][duration] = dp[0][duration] or dp[0][duration - total_duration]\n    \n        dp[0] = dp[1][:]\n    \n    min_diff = half_duration\n    for i in range(half_duration + 1):\n        if dp[0][i]:\n            min_diff = min(min_diff, total_duration - 2*i)\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(calculate_min_difference(a, b, c))\n\nmain()", "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    if total_duration % 2 == 0:\n        return 0\n    else:\n        if a > 0 and b > 0 and c > 0:\n            return min(abs(total_duration - 2*(a-1) - 2*b - 3*c), abs(total_duration - a - 2*(b-1) - 3*c), abs(total_duration - a - 2*b - 3*(c-1)))\n        elif a == 0:\n            return abs(total_duration - 2*b - 3*c)\n        elif b == 0:\n            return abs(total_duration - a - 3*c)\n        elif c == 0:\n            return abs(total_duration - a - 2*b)\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(calculate_minimal_difference(a, b, c))\n\nmain()", "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    dp = [[False] * (half_duration + 1) for _ in range(2)]\n    dp[0][0] = True\n    \n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                duration = i + 2*j + 3*k\n                if duration <= half_duration:\n                    dp[1][duration] = dp[0][duration] or dp[0][duration - total_duration]\n    \n    min_diff = half_duration\n    for i in range(half_duration + 1):\n        if dp[1][i]:\n            min_diff = min(min_diff, abs(total_duration - 2*i))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(calculate_min_difference(a, b, c))\n\nmain()", "import itertools\n\n# Function to calculate the total duration of all songs\ndef total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(a, b, c):\n    total_dur = total_duration(a, b, c)\n    min_diff = float('inf')\n    \n    # Generate all possible combinations of songs for each concert\n    for comb in itertools.product([0, 1, 2], repeat=3):\n        concert1_dur = sum([x*y for x, y in zip(comb, [a, b, c])])\n        concert2_dur = total_dur - concert1_dur\n        diff = abs(concert1_dur - concert2_dur)\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(find_minimal_difference(a, b, c))\n\nmain()", "def min_diff_between_concerts(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        if total_duration % 2 == 0:\n            print(0)\n        else:\n            if a == b == c == 1:\n                print(1)\n            else:\n                if a > b:\n                    a, b = b, a\n                if b > c:\n                    b, c = c, b\n                if a > b:\n                    a, b = b, a\n                \n                if a == 0:\n                    print(abs(c - b))\n                else:\n                    print(abs((a + 1) // 2 * 2 + b - c))\n                    \n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output\nmin_diff_between_concerts(t, test_cases)\n\nmain()"], "session_history": {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine all possible combinations of songs for the two concerts\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Find the combination with the smallest difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible combinations of songs for the two concerts\",\n    \"step_3\": \"Calculate the duration of each concert for each combination\",\n    \"step_4\": \"Find the combination with the smallest difference in duration between the two concerts\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'duration': The total length of time taken by all the songs combined.\n    'concerts': Separate events where songs are performed.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    Test Case 1:\n    1 1 1\n    Output:\n    0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n\n    Test Case 2:\n    2 1 3\n    Output:\n    1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n    Test Case 3:\n    5 5 5\n    Output:\n    0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers all scenarios.", "Round_0": {"code": "def min_diff_between_concerts(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        if total_duration % 2 == 0:\n            print(0)\n        else:\n            if a == b == c == 1:\n                print(1)\n            else:\n                if a > b:\n                    a, b = b, a\n                if b > c:\n                    b, c = c, b\n                if a > b:\n                    a, b = b, a\n                \n                if a == 0:\n                    print(abs(c - b))\n                else:\n                    print(abs((a + 1) // 2 * 2 + b - c))\n                    \n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output\nmin_diff_between_concerts(t, test_cases)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 41)"}, "Round_1": {"code": "def min_diff_between_concerts(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        if total_duration % 2 == 0:\n            print(0)\n        else:\n            if a == b == c == 1:\n                print(1)\n            else:\n                if a > b:\n                    a, b = b, a\n                if b > c:\n                    b, c = c, b\n                if a > b:\n                    a, b = b, a\n                \n                if a == 0:\n                    print(abs(c - b))\n                else:\n                    print(abs((a + 1) // 2 * 2 + b - c))\n                    \n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output\nmin_diff_between_concerts(t, test_cases)\n"}}, "session_historys": [{"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine all possible combinations of songs for the two concerts\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Find the combination with the smallest difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible combinations of songs for the two concerts\",\n    \"step_3\": \"Calculate the duration of each concert for each combination\",\n    \"step_4\": \"Find the combination with the smallest difference in duration between the two concerts\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'duration': The total length of time taken by all the songs combined.\n    'concerts': Separate events where songs are performed.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    Test Case 1:\n    1 1 1\n    Output:\n    0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n\n    Test Case 2:\n    2 1 3\n    Output:\n    1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n    Test Case 3:\n    5 5 5\n    Output:\n    0\n    Explanation: Luntik can evenly distribute the songs between the two concerts, resulting in the same duration for both concerts.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers all scenarios.", "Round_0": {"code": "def min_diff_between_concerts(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        if total_duration % 2 == 0:\n            print(0)\n        else:\n            if a == b == c == 1:\n                print(1)\n            else:\n                if a > b:\n                    a, b = b, a\n                if b > c:\n                    b, c = c, b\n                if a > b:\n                    a, b = b, a\n                \n                if a == 0:\n                    print(abs(c - b))\n                else:\n                    print(abs((a + 1) // 2 * 2 + b - c))\n                    \n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output\nmin_diff_between_concerts(t, test_cases)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 41)"}, "Round_1": {"code": "def min_diff_between_concerts(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        if total_duration % 2 == 0:\n            print(0)\n        else:\n            if a == b == c == 1:\n                print(1)\n            else:\n                if a > b:\n                    a, b = b, a\n                if b > c:\n                    b, c = c, b\n                if a > b:\n                    a, b = b, a\n                \n                if a == 0:\n                    print(abs(c - b))\n                else:\n                    print(abs((a + 1) // 2 * 2 + b - c))\n                    \n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output\nmin_diff_between_concerts(t, test_cases)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Generate all possible combinations of songs for the two concerts\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Find the combination with the smallest difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible combinations of songs for the two concerts using a recursive function\",\n    \"step_3\": \"Calculate the difference in duration between the two concerts for each combination by summing the durations of songs in each concert and finding the absolute difference\",\n    \"step_4\": \"Find the combination with the smallest difference in duration and output it as the result\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'duration': The total length of time taken by all the songs combined.\n    'concerts': Dividing the songs into two groups to create two concerts.\n    Explanation: The core concept involves allocating songs into two concerts to minimize the absolute difference in durations between the concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    There are no steps that should be implemented simultaneously. Each step should be executed sequentially as outlined in the plan.\n\n# [edge case] \n    Test Case 1:\n    1 1 1\n    Output:\n    0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    Test Case 2:\n    2 1 3\n    Output:\n    1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference between them is |7-6| = 1.\n    \n    Test Case 3:\n    5 5 5\n    Output:\n    0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Initialize the minimum difference as a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of songs for the two concerts\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                diff = abs(concert1_duration - concert2_duration)\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 34)"}, "Round_1": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Initialize the minimum difference as a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of songs for the two concerts\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                diff = abs(concert1_duration - concert2_duration)\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs in each test case\",\n    \"Determine the possible combinations of songs for each concert\",\n    \"Calculate the difference in duration between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs\",\n    \"Step 3\": \"Calculate the total duration of all songs in the test case\",\n    \"Step 4\": \"Determine the possible combinations of songs for each concert\",\n    \"Step 5\": \"Calculate the difference in duration between the two concerts\",\n    \"Step 6\": \"Output the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimize the absolute difference in durations of the concerts'\n    Explanation: The core concept is to allocate songs into two concerts in a way that the absolute difference in durations between the concerts is minimized.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as they are dependent on each other.\n\n# [edge case] \n    1 1 1 = 0\n    Explanation: In this case, one-minute, two-minute, and three-minute songs are equal in number. Luntik can distribute them equally into two concerts, resulting in 0 difference.\n    2 1 3 = 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song in one concert, and two three-minute songs in the other concert. The difference will be 1.\n    5 5 5 = 0\n    Explanation: Luntik can distribute the songs equally into two concerts, resulting in 0 difference.\n    1 1 2 = 1\n    Explanation: Luntik can include a one-minute song and a two-minute song in one concert, and a three-minute song in the other concert. The difference will be 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided can handle all scenarios.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs in the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the possible combinations of songs for each concert\n    # We can distribute the songs as evenly as possible between the two concerts\n    # by putting the three-minute songs in one concert and the one-minute and two-minute songs in the other concert\n    # or by putting the three-minute and two-minute songs in one concert and the one-minute songs in the other concert\n    # and calculate the difference in duration between the two concerts\n    min_diff = abs((a + b) - c)\n    \n    # Output the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs in the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the possible combinations of songs for each concert\n    # We can distribute the songs as evenly as possible between the two concerts\n    # by putting the three-minute songs in one concert and the one-minute and two-minute songs in the other concert\n    # or by putting the three-minute and two-minute songs in one concert and the one-minute songs in the other concert\n    # and calculate the difference in duration between the two concerts\n    min_diff = abs((a + b) - c)\n    \n    # Output the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs in each test case\",\n    \"Determine the possible combinations of songs for each concert\",\n    \"Calculate the difference in duration between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs\",\n    \"Step 3\": \"Calculate the total duration of all songs in the test case\",\n    \"Step 4\": \"Determine the possible combinations of songs for each concert\",\n    \"Step 5\": \"Calculate the difference in duration between the two concerts\",\n    \"Step 6\": \"Print the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimize the absolute difference in durations of the concerts'\n    Explanation: The core concept is to allocate songs into two concerts in a way that the absolute difference in durations between the concerts is minimized.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as they are dependent on each other.\n\n# [edge case] \n    1 1 1 = 0\n    Explanation: In this case, one-minute, two-minute, and three-minute songs are equal in number. Luntik can distribute them equally between the two concerts, resulting in 0 difference.\n    2 1 3 = 1\n    Explanation: Luntik can include two one-minute songs, one two-minute song, and one three-minute song in the first concert, and two three-minute songs in the second concert. The difference will be 1.\n    5 5 5 = 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in 0 difference.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of distributing songs and calculating the difference covers all scenarios.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs in the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the possible combinations of songs for each concert\n    # We can distribute the songs in a way that minimizes the absolute difference\n    # by putting the three-minute songs in the concert with fewer total minutes\n    min_diff = abs((total_duration + 1) // 2 - (total_duration // 2))\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs in the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the possible combinations of songs for each concert\n    # We can distribute the songs in a way that minimizes the absolute difference\n    # by putting the three-minute songs in the concert with fewer total minutes\n    min_diff = abs((total_duration + 1) // 2 - (total_duration // 2))\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs in each test case\",\n    \"Determine the possible combinations of songs for each concert\",\n    \"Calculate the difference in duration between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs\",\n    \"Step 3\": \"Calculate the total duration of all songs in the test case\",\n    \"Step 4\": \"Determine the possible combinations of songs for each concert\",\n    \"Step 5\": \"Calculate the difference in duration between the two concerts\",\n    \"Step 6\": \"Output the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimize the absolute difference in durations of the concerts'\n    Explanation: The core concept is to allocate songs into two concerts in a way that the absolute difference in durations between the concerts is minimized.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as they are dependent on each other.\n\n# [edge case] \n    1 1 1 = 0\n    Explanation: In this case, one-minute, two-minute, and three-minute songs are equal in number. Luntik can distribute them equally between the two concerts, resulting in 0 difference.\n    2 1 3 = 1\n    Explanation: Luntik can include two one-minute songs, one two-minute song, and one three-minute song in the first concert, and two three-minute songs in the second concert. The difference will be 1.\n    5 5 5 = 0\n    Explanation: Luntik has an equal number of each type of song, so they can be evenly distributed between the two concerts, resulting in 0 difference.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of distributing songs and calculating the difference covers all scenarios.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs in the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the possible combinations of songs for each concert\n    # We can distribute the songs in a way that minimizes the absolute difference\n    # by putting the three-minute songs in the concert with the lower total duration\n    min_diff = abs((total_duration + 1) // 2 - (total_duration // 2))\n    \n    # Output the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs in the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the possible combinations of songs for each concert\n    # We can distribute the songs in a way that minimizes the absolute difference\n    # by putting the three-minute songs in the concert with the lower total duration\n    min_diff = abs((total_duration + 1) // 2 - (total_duration // 2))\n    \n    # Output the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine all possible combinations of songs for each concert\",\n    \"Calculate the duration of each combination\",\n    \"Find the combination that minimizes the absolute difference in durations between the concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"Step 2\": \"Generate all possible combinations of songs for each concert using a recursive function\",\n    \"Step 3\": \"Calculate the duration of each combination by summing the durations of the songs in the combination\",\n    \"Step 4\": \"Find the combination that minimizes the absolute difference in durations between the concerts\",\n    \"Step 5\": \"Output the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'concerts allocation'\n    Explanation: Luntik needs to allocate songs into two concerts in a way that minimizes the absolute difference in durations between the concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': means that we need to minimize the absolute difference in durations between the concerts\n\n# [code logic]\n    The steps should be implemented sequentially as they involve calculations and comparisons. There are no steps that should be implemented simultaneously.\n\n# [edge case] \n    1. 1 1 1\n       Output: 0\n       Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    2. 2 1 3\n       Output: 1\n       Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The difference will be |7-6| = 1.\n    3. 5 5 5\n       Output: 0\n       Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n       \n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)", "Round_0": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    dp = [[False] * (half_duration + 1) for _ in range(2)]\n    dp[0][0] = True\n    \n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                duration = i + 2*j + 3*k\n                if duration <= half_duration:\n                    dp[1][duration] = dp[0][duration] or dp[0][duration - total_duration]\n    \n        dp[0] = dp[1][:]\n    \n    min_diff = half_duration\n    for i in range(half_duration + 1):\n        if dp[0][i]:\n            min_diff = min(min_diff, total_duration - 2*i)\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(calculate_min_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 36)"}, "Round_1": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    dp = [[False] * (half_duration + 1) for _ in range(2)]\n    dp[0][0] = True\n    \n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                duration = i + 2*j + 3*k\n                if duration <= half_duration:\n                    dp[1][duration] = dp[0][duration] or dp[0][duration - total_duration]\n    \n        dp[0] = dp[1][:]\n    \n    min_diff = half_duration\n    for i in range(half_duration + 1):\n        if dp[0][i]:\n            min_diff = min(min_diff, total_duration - 2*i)\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(calculate_min_difference(a, b, c))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine all possible combinations of songs for the two concerts\",\n    \"Calculate the duration of each combination\",\n    \"Find the combination with the minimal possible difference in duration between the concerts\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible combinations of songs for the two concerts using a recursive function\",\n    \"step_3\": \"Calculate the duration of each combination by summing the durations of the songs in each concert\",\n    \"step_4\": \"Find the combination with the minimal possible difference in duration between the concerts by comparing the durations of all combinations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'duration': The total length of time taken by all the songs combined.\n    'concerts': Separate events where songs are performed.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': Indicates the desire to minimize the difference in durations between the concerts.\n\n# [code logic]\n    The steps in the plan should be implemented step by step as they are all sequential and do not require simultaneous execution.\n\n# [edge case] \n    Case 1:\n    1 1 1\n    Output:\n    0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    Case 2:\n    2 1 3\n    Output:\n    1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    Case 3:\n    5 5 5\n    Output:\n    0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    if total_duration % 2 == 0:\n        return 0\n    else:\n        if a > 0 and b > 0 and c > 0:\n            return min(abs(total_duration - 2*(a-1) - 2*b - 3*c), abs(total_duration - a - 2*(b-1) - 3*c), abs(total_duration - a - 2*b - 3*(c-1)))\n        elif a == 0:\n            return abs(total_duration - 2*b - 3*c)\n        elif b == 0:\n            return abs(total_duration - a - 3*c)\n        elif c == 0:\n            return abs(total_duration - a - 2*b)\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(calculate_minimal_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 27)"}, "Round_1": {"code": "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    if total_duration % 2 == 0:\n        return 0\n    else:\n        if a > 0 and b > 0 and c > 0:\n            return min(abs(total_duration - 2*(a-1) - 2*b - 3*c), abs(total_duration - a - 2*(b-1) - 3*c), abs(total_duration - a - 2*b - 3*(c-1)))\n        elif a == 0:\n            return abs(total_duration - 2*b - 3*c)\n        elif b == 0:\n            return abs(total_duration - a - 3*c)\n        elif c == 0:\n            return abs(total_duration - a - 2*b)\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(calculate_minimal_difference(a, b, c))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine all possible combinations of songs for each concert\",\n    \"Calculate the duration of each combination\",\n    \"Find the combination that minimizes the absolute difference in durations between the concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"Step 2\": \"Generate all possible combinations of songs for each concert using a recursive function\",\n    \"Step 3\": \"Calculate the duration of each combination by summing the durations of the songs\",\n    \"Step 4\": \"Find the combination that minimizes the absolute difference in durations between the concerts\",\n    \"Step 5\": \"Output the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'concerts allocation'\n    Explanation: Luntik needs to allocate songs into two concerts in a way that minimizes the absolute difference in durations between the concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': means finding the minimum difference in durations between the concerts\n\n# [code logic]\n    The steps should be implemented sequentially as they involve calculations and comparisons. There are no steps that should be implemented simultaneously.\n\n# [edge case] \n    1. 1 1 1\n       Output: 0\n       Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    2. 2 1 3\n       Output: 1\n       Explanation: Luntik can include two one-minute songs, a two-minute song, and a three-minute song into the first concert, and two three-minute songs into the second concert. The difference will be |7-6| = 1.\n    3. 5 5 5\n       Output: 0\n       Explanation: Luntik can distribute the songs equally between the two concerts, resulting in 0 difference.\n       \n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)", "Round_0": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    dp = [[False] * (half_duration + 1) for _ in range(2)]\n    dp[0][0] = True\n    \n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                duration = i + 2*j + 3*k\n                if duration <= half_duration:\n                    dp[1][duration] = dp[0][duration] or dp[0][duration - total_duration]\n    \n    min_diff = half_duration\n    for i in range(half_duration + 1):\n        if dp[1][i]:\n            min_diff = min(min_diff, abs(total_duration - 2*i))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(calculate_min_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 34)"}, "Round_1": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    dp = [[False] * (half_duration + 1) for _ in range(2)]\n    dp[0][0] = True\n    \n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                duration = i + 2*j + 3*k\n                if duration <= half_duration:\n                    dp[1][duration] = dp[0][duration] or dp[0][duration - total_duration]\n    \n    min_diff = half_duration\n    for i in range(half_duration + 1):\n        if dp[1][i]:\n            min_diff = min(min_diff, abs(total_duration - 2*i))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(calculate_min_difference(a, b, c))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Determine the total duration of all songs\",\n    \"Find all possible combinations of songs for each concert\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Find the combination with the smallest difference in duration\"\n  ],\n  \"high_level_plan\": [\n    \"Calculate the total duration of all songs\",\n    \"Generate all possible combinations of songs for each concert\",\n    \"Calculate the duration of each concert for each combination\",\n    \"Find the combination with the smallest difference in duration\",\n    \"Output the minimal possible difference in minutes between the concerts durations\"\n  ]\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'total duration of all songs'\n    Explanation: Refers to the sum of the durations of all songs in the input.\n\n    'combinations of songs for each concert'\n    Explanation: Refers to different ways of allocating songs to two concerts.\n\n    'difference in duration between the two concerts'\n    Explanation: Refers to the absolute difference in total duration between the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': Indicates the need to find the minimum difference in duration between the concerts.\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve calculations and comparisons that depend on previous results.\n\n# [edge case] \n    1 1 1 = 0\n    Explanation: In this case, one-minute, two-minute, and three-minute songs are equal in number. Luntik can allocate one one-minute and one two-minute song to each concert, resulting in a difference of 0 minutes.\n    \n    2 1 3 = 1\n    Explanation: Luntik can allocate two one-minute songs, one two-minute song, and one three-minute song to the first concert, and two three-minute songs to the second concert. The difference will be 1 minute.\n    \n    5 5 5 = 0\n    Explanation: Luntik can evenly distribute the songs among the concerts, resulting in an equal duration for both concerts.\n    \n    1 1 2 = 1\n    Explanation: Luntik can allocate one one-minute and one two-minute song to the first concert, and one three-minute song to the second concert, resulting in a difference of 1 minute.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)", "Round_0": {"code": "import itertools\n\n# Function to calculate the total duration of all songs\ndef total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(a, b, c):\n    total_dur = total_duration(a, b, c)\n    min_diff = float('inf')\n    \n    # Generate all possible combinations of songs for each concert\n    for comb in itertools.product([0, 1, 2], repeat=3):\n        concert1_dur = sum([x*y for x, y in zip(comb, [a, b, c])])\n        concert2_dur = total_dur - concert1_dur\n        diff = abs(concert1_dur - concert2_dur)\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(find_minimal_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "import itertools\n\n# Function to calculate the total duration of all songs\ndef total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(a, b, c):\n    total_dur = total_duration(a, b, c)\n    min_diff = float('inf')\n    \n    # Generate all possible combinations of songs for each concert\n    for comb in itertools.product([0, 1, 2], repeat=3):\n        concert1_dur = sum([x*y for x, y in zip(comb, [a, b, c])])\n        concert2_dur = total_dur - concert1_dur\n        diff = abs(concert1_dur - concert2_dur)\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(find_minimal_difference(a, b, c))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine all possible combinations of songs for the two concerts\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Find the combination with the smallest difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible combinations of songs for the two concerts\",\n    \"step_3\": \"Calculate the duration of each concert for each combination\",\n    \"step_4\": \"Find the combination with the smallest difference in duration between the two concerts\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'duration': The total length of time taken by all the songs combined.\n    'concerts': Separate events where songs are performed.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    Test Case 1:\n    1 1 1\n    Output:\n    0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n\n    Test Case 2:\n    2 1 3\n    Output:\n    1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n    Test Case 3:\n    5 5 5\n    Output:\n    0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers all scenarios.", "Round_0": {"code": "def min_diff_between_concerts(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        if total_duration % 2 == 0:\n            print(0)\n        else:\n            if a == b == c == 1:\n                print(1)\n            else:\n                if a > b:\n                    a, b = b, a\n                if b > c:\n                    b, c = c, b\n                if a > b:\n                    a, b = b, a\n                \n                if a == 0:\n                    print(abs(c - b))\n                else:\n                    print(abs((a + 1) // 2 * 2 + b - c))\n                    \n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output\nmin_diff_between_concerts(t, test_cases)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 41)"}, "Round_1": {"code": "def min_diff_between_concerts(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        if total_duration % 2 == 0:\n            print(0)\n        else:\n            if a == b == c == 1:\n                print(1)\n            else:\n                if a > b:\n                    a, b = b, a\n                if b > c:\n                    b, c = c, b\n                if a > b:\n                    a, b = b, a\n                \n                if a == 0:\n                    print(abs(c - b))\n                else:\n                    print(abs((a + 1) // 2 * 2 + b - c))\n                    \n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output\nmin_diff_between_concerts(t, test_cases)\n"}}], "scores": [], "pass_results": [false, false, false, false, false, true, false, true, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 45, "prompt": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs, and he desires to allocate all songs into two concerts. Every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible, where the duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "condense_two2one", "save_node": true, "parent_index": 40}
