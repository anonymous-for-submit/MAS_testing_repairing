{"name": "1613_A. Long Comparison", "description": "Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.", "tags": ["implementation", "math"], "difficulty": 7, "id": 1613, "sample_io": [{"input": "5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": [">\n=\n<\n=\n<\n"]}], "test_list": [{"input": "1\n2000 0\n2 3\n", "output": ["=\n"]}, {"input": "1\n1 6\n1000000 0\n", "output": ["=\n"]}, {"input": "3\n1 3\n100 1\n2 3\n200 1\n6 3\n600 1\n", "output": ["=\n=\n=\n"]}, {"input": "1\n1201 0\n12 2\n", "output": [">\n"]}, {"input": "1\n50 2\n500 1\n", "output": ["=\n"]}, {"input": "1\n21 4\n210010 0\n", "output": ["<\n"]}, {"input": "1\n12 2\n1205 0\n", "output": ["<\n"]}, {"input": "1\n12 2\n1204 0\n", "output": ["<\n"]}, {"input": "1\n100000 1\n1000000 0\n", "output": ["=\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "1\n1000000 10\n1000000 10\n", "output": ["=\n"]}, {"input": "1\n1 5\n101 3\n", "output": ["<\n"]}, {"input": "1\n105 0\n1 2\n", "output": [">\n"]}, {"input": "1\n402 2\n4 4\n", "output": [">\n"]}, {"input": "1\n1011 2\n1023 2\n", "output": ["<\n"]}, {"input": "2\n4 0\n7 0\n5 0\n6 0\n", "output": ["<\n<\n"]}, {"input": "1\n12 2\n1201 0\n", "output": ["<\n"]}, {"input": "1\n12001 59\n12 62\n", "output": [">\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n=\n=\n=\n"]}, {"input": "1\n1 6\n10101 2\n", "output": ["<\n"]}, {"input": "1\n999999 0\n999999 0\n", "output": ["=\n"]}, {"input": "1\n999999 0\n1000000 0\n", "output": ["<\n"]}, {"input": "5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": [">\n=\n<\n=\n<\n"]}, {"input": "1\n4 4\n402 2\n", "output": ["<\n"]}, {"input": "1\n12 5\n1204 3\n", "output": ["<\n"]}, {"input": "1\n100000 1\n100 4\n", "output": ["=\n"]}, {"input": "1\n1562 0\n2 3\n", "output": ["<\n"]}, {"input": "3\n1 3\n100 1\n4 3\n200 1\n6 3\n600 1\n", "output": ["=\n>\n=\n"]}, {"input": "1\n21 4\n72620 0\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "2\n4 0\n7 0\n5 0\n1 0\n", "output": ["<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n362 1\n6 3\n600 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n>\n=\n=\n"]}, {"input": "5\n2 1\n19 1\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": ["<\n=\n<\n=\n<\n"]}, {"input": "3\n1 3\n100 1\n4 3\n200 1\n5 3\n600 1\n", "output": ["=\n>\n<\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "2\n4 0\n7 0\n5 -1\n1 0\n", "output": ["<\n<\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n362 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n>\n>\n=\n"]}, {"input": "5\n2 1\n33 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 0\n", "output": ["<\n=\n<\n=\n>\n"]}, {"input": "3\n1 3\n100 1\n4 3\n200 1\n5 3\n465 1\n", "output": ["=\n>\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 6\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n<\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 0\n", "output": [">\n=\n<\n=\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 6\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 7\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n<\n=\n<\n=\n=\n=\n<\n=\n=\n=\n=\n<\n>\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 0\n1 0\n1 0\n99 0\n1 0\n", "output": [">\n=\n>\n=\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n6 3\n300 1\n4 3\n400 1\n4 3\n352 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n>\n=\n>\n>\n=\n"]}, {"input": "3\n1 3\n100 1\n8 0\n200 1\n5 0\n465 1\n", "output": ["=\n<\n<\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n6 3\n300 1\n5 3\n400 1\n4 3\n352 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n>\n>\n>\n>\n=\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1100 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 6\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1101 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n>\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 6\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1101 7\n1010000 4\n10000 7\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n>\n<\n=\n=\n>\n>\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "3\n1 3\n100 1\n2 3\n200 1\n11 3\n600 1\n", "output": ["=\n=\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1010000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n>\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n59 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "2\n4 0\n2 0\n5 0\n6 0\n", "output": [">\n<\n"]}, {"input": "5\n3 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": [">\n=\n<\n=\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 7\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 0\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n>\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 2\n362 1\n6 3\n600 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n<\n=\n=\n"]}, {"input": "5\n2 1\n19 1\n3 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": ["<\n<\n<\n=\n<\n"]}, {"input": "5\n2 1\n33 0\n10 2\n100 0\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 0\n", "output": ["<\n>\n<\n=\n>\n"]}, {"input": "3\n1 3\n110 1\n4 3\n200 1\n5 3\n600 1\n", "output": ["<\n>\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000010 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 10\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n<\n=\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n362 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n>\n>\n>\n=\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10001 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000010 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 6\n1000000 4\n100 8\n1000000 6\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n<\n<\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n4 3\n362 1\n6 3\n316 1\n1 2\n1000000 4\n", "output": ["=\n=\n=\n=\n>\n>\n<\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 0\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 0\n", "output": [">\n>\n<\n=\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n3 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n<\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1001000 4\n100 8\n1000000 6\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 7\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n<\n<\n=\n<\n=\n=\n=\n<\n=\n=\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 5\n200 1\n3 3\n300 1\n4 3\n400 1\n4 3\n352 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n>\n=\n=\n>\n>\n=\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 0\n1 0\n1 1\n99 0\n1 0\n", "output": [">\n=\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 2\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n<\n<\n>\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 0\n1 1\n1 0\n29 0\n1 0\n", "output": [">\n=\n>\n>\n>\n"]}, {"input": "3\n2 3\n100 1\n8 0\n200 1\n5 0\n465 1\n", "output": [">\n<\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000001 1\n1000011 1\n999999 1\n999998 1\n839388 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n>\n>\n"]}, {"input": "5\n2 1\n33 -1\n4 2\n100 1\n1999 0\n2 0\n1 0\n1 0\n29 0\n2 0\n", "output": [">\n<\n>\n=\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 5\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1100 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n>\n=\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 6\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1101 7\n1010000 4\n10000 2\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n>\n<\n=\n=\n>\n<\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1010000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 0\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n>\n=\n=\n=\n<\n>\n>\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n59 1\n3 3\n300 1\n4 3\n400 1\n5 3\n200 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n>\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "2\n4 0\n2 0\n5 0\n6 -1\n", "output": [">\n>\n"]}, {"input": "5\n3 1\n19 0\n10 2\n101 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": [">\n<\n<\n=\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 7\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 8\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n>\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 0\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1010 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n>\n=\n>\n=\n=\n=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 14\n1000010 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 0\n1000000 4\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 10\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n<\n=\n<\n=\n=\n=\n=\n<\n=\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n362 1\n6 3\n316 1\n1 10\n1000000 8\n", "output": ["=\n=\n=\n>\n>\n>\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10001 6\n1000000 4\n1000 7\n1000000 3\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000010 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n<\n=\n<\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 6\n1000000 4\n100 8\n1000000 6\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 2\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n<\n<\n=\n<\n=\n=\n=\n=\n=\n<\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n462 1\n4 3\n362 1\n6 3\n316 1\n1 2\n1000000 4\n", "output": ["=\n=\n=\n<\n>\n>\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n3 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n110 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n<\n=\n<\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 5\n200 1\n3 3\n300 1\n4 2\n400 1\n4 3\n352 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n>\n=\n<\n>\n>\n=\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 2\n1999 0\n2 0\n1 0\n1 1\n99 0\n1 0\n", "output": [">\n<\n>\n<\n>\n"]}, {"input": "3\n2 3\n100 1\n8 3\n200 1\n5 -1\n465 1\n", "output": [">\n>\n<\n"]}, {"input": "23\n1 3\n100 0\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 2\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": [">\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n<\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n121 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000001 1\n1000011 1\n999999 1\n999998 1\n839388 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n>\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n>\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 1\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1100 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n<\n=\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 6\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1101 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1010011 1\n999999 1\n999998 1\n1793536 1\n45690 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n>\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 6\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 2\n1101 7\n1010000 4\n10000 2\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n>\n<\n=\n>\n>\n<\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n1201 -1\n12 2\n", "output": ["<\n"]}, {"input": "1\n50 1\n500 1\n", "output": ["<\n"]}, {"input": "1\n12 2\n1205 1\n", "output": ["<\n"]}, {"input": "1\n5 2\n1204 0\n", "output": ["<\n"]}, {"input": "1\n100000 1\n1000000 -1\n", "output": [">\n"]}, {"input": "1\n1100000 10\n1000000 10\n", "output": [">\n"]}, {"input": "1\n2 5\n101 3\n", "output": [">\n"]}, {"input": "1\n105 -1\n1 2\n", "output": ["<\n"]}, {"input": "1\n402 0\n4 4\n", "output": ["<\n"]}, {"input": "1\n1011 2\n1023 3\n", "output": ["<\n"]}, {"input": "1\n12 2\n802 0\n", "output": [">\n"]}, {"input": "1\n12001 59\n12 2\n", "output": [">\n"]}, {"input": "1\n1 6\n11101 2\n", "output": ["<\n"]}, {"input": "1\n1603908 0\n999999 0\n", "output": [">\n"]}, {"input": "1\n999999 0\n1001000 0\n", "output": ["<\n"]}, {"input": "1\n4 3\n402 2\n", "output": ["<\n"]}, {"input": "1\n21 5\n1204 3\n", "output": [">\n"]}, {"input": "1\n100100 1\n100 4\n", "output": [">\n"]}, {"input": "5\n2 1\n33 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": ["<\n=\n<\n=\n<\n"]}, {"input": "1\n1562 -1\n2 3\n", "output": ["<\n"]}, {"input": "1\n1201 -1\n20 2\n", "output": ["<\n"]}, {"input": "1\n83 2\n500 1\n", "output": [">\n"]}, {"input": "1\n21 4\n114481 0\n", "output": [">\n"]}, {"input": "1\n2 2\n1205 1\n", "output": ["<\n"]}, {"input": "1\n5 4\n1204 0\n", "output": [">\n"]}, {"input": "1\n100100 1\n1000000 -1\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n1100000 19\n1000000 10\n", "output": [">\n"]}, {"input": "1\n2 5\n111 3\n", "output": [">\n"]}, {"input": "1\n105 -1\n2 2\n", "output": ["<\n"]}, {"input": "1\n402 0\n1 4\n", "output": ["<\n"]}, {"input": "1\n1111 2\n1023 3\n", "output": ["<\n"]}, {"input": "1\n12 2\n802 1\n", "output": ["<\n"]}, {"input": "1\n12001 59\n12 3\n", "output": [">\n"]}, {"input": "1\n1 6\n11100 2\n", "output": ["<\n"]}, {"input": "1\n1603908 0\n1801851 0\n", "output": ["<\n"]}, {"input": "1\n999999 0\n1001010 0\n", "output": ["<\n"]}, {"input": "1\n5 4\n402 2\n", "output": [">\n"]}, {"input": "1\n25 5\n1204 3\n", "output": [">\n"]}, {"input": "1\n100100 1\n110 4\n", "output": ["<\n"]}, {"input": "1\n1927 -1\n20 2\n", "output": ["<\n"]}, {"input": "1\n83 2\n952 1\n", "output": ["<\n"]}, {"input": "1\n21 4\n114481 -1\n", "output": [">\n"]}, {"input": "1\n2 2\n743 1\n", "output": ["<\n"]}, {"input": "1\n5 5\n1204 0\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000010 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n2 5\n111 5\n", "output": ["<\n"]}, {"input": "1\n402 0\n1 1\n", "output": [">\n"]}, {"input": "1\n1111 2\n1023 0\n", "output": [">\n"]}, {"input": "1\n12 2\n831 1\n", "output": ["<\n"]}, {"input": "1\n12001 59\n12 0\n", "output": [">\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n4 3\n362 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n>\n>\n=\n"]}, {"input": "1\n1 1\n11100 2\n", "output": ["<\n"]}, {"input": "1\n1603908 -1\n1801851 0\n", "output": ["<\n"]}, {"input": "1\n362052 0\n1001010 0\n", "output": ["<\n"]}, {"input": "1\n25 4\n1204 3\n", "output": ["<\n"]}, {"input": "1\n100100 1\n010 4\n", "output": [">\n"]}, {"input": "3\n1 3\n100 1\n8 3\n200 1\n5 3\n465 1\n", "output": ["=\n>\n>\n"]}, {"input": "1\n1927 -1\n16 2\n", "output": ["<\n"]}, {"input": "1\n132 2\n952 1\n", "output": [">\n"]}, {"input": "1\n21 4\n177954 -1\n", "output": [">\n"]}, {"input": "1\n2 4\n743 1\n", "output": [">\n"]}, {"input": "1\n5 5\n1216 0\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n2 5\n011 5\n", "output": ["<\n"]}, {"input": "1\n468 0\n1 1\n", "output": [">\n"]}, {"input": "1\n1111 3\n1023 0\n", "output": [">\n"]}, {"input": "1\n7 2\n831 1\n", "output": ["<\n"]}, {"input": "1\n12001 59\n18 0\n", "output": [">\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n4 3\n352 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n>\n>\n=\n"]}, {"input": "1\n1 1\n11100 0\n", "output": ["<\n"]}, {"input": "1\n2992743 -1\n1801851 0\n", "output": ["<\n"]}, {"input": "1\n362052 0\n1001011 0\n", "output": ["<\n"]}, {"input": "1\n25 4\n1990 3\n", "output": ["<\n"]}, {"input": "3\n1 3\n100 1\n8 3\n200 1\n5 0\n465 1\n", "output": ["=\n>\n<\n"]}, {"input": "1\n1927 -2\n16 2\n", "output": ["<\n"]}, {"input": "1\n132 2\n1561 1\n", "output": ["<\n"]}, {"input": "1\n2 4\n768 1\n", "output": [">\n"]}, {"input": "1\n5 9\n1216 0\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n2 5\n010 5\n", "output": ["<\n"]}, {"input": "1\n15 0\n1 1\n", "output": [">\n"]}, {"input": "1\n1111 3\n533 0\n", "output": [">\n"]}, {"input": "1\n7 2\n1076 1\n", "output": ["<\n"]}, {"input": "1\n12001 59\n11 0\n", "output": [">\n"]}, {"input": "1\n1 1\n11100 1\n", "output": ["<\n"]}, {"input": "1\n2992743 0\n1801851 0\n", "output": [">\n"]}, {"input": "1\n122308 0\n1001011 0\n", "output": ["<\n"]}, {"input": "1\n25 5\n1990 3\n", "output": [">\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 0\n1 0\n1 0\n29 0\n1 0\n", "output": [">\n=\n>\n=\n>\n"]}, {"input": "1\n1927 -3\n16 2\n", "output": ["<\n"]}, {"input": "1\n132 2\n2693 1\n", "output": ["<\n"]}, {"input": "1\n2 4\n768 0\n", "output": [">\n"]}, {"input": "1\n5 14\n1216 0\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000001 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n2 2\n011 5\n", "output": ["<\n"]}, {"input": "1\n7 0\n1 1\n", "output": ["<\n"]}, {"input": "1\n1111 3\n950 0\n", "output": [">\n"]}, {"input": "1\n7 2\n1076 2\n", "output": ["<\n"]}, {"input": "1\n12001 59\n11 1\n", "output": [">\n"]}, {"input": "1\n1 0\n11100 1\n", "output": ["<\n"]}, {"input": "1\n2992743 1\n1801851 0\n", "output": [">\n"]}, {"input": "1\n25 4\n1990 0\n", "output": [">\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 0\n1 0\n1 0\n29 0\n2 0\n", "output": [">\n=\n>\n=\n>\n"]}, {"input": "3\n1 3\n100 1\n8 0\n200 0\n5 0\n465 1\n", "output": ["=\n<\n<\n"]}, {"input": "1\n132 2\n73 1\n", "output": [">\n"]}, {"input": "1\n5 19\n1216 0\n", "output": [">\n"]}, {"input": "1\n2 1\n011 5\n", "output": ["<\n"]}, {"input": "1\n7 0\n1 2\n", "output": ["<\n"]}, {"input": "1\n1111 3\n1246 0\n", "output": [">\n"]}, {"input": "1\n12001 59\n11 2\n", "output": [">\n"]}, {"input": "1\n1 0\n11100 0\n", "output": ["<\n"]}, {"input": "1\n2992743 1\n28222 0\n", "output": [">\n"]}, {"input": "1\n34 4\n1990 0\n", "output": [">\n"]}, {"input": "3\n1 3\n100 1\n8 0\n200 0\n5 0\n465 2\n", "output": ["=\n<\n<\n"]}, {"input": "1\n132 1\n73 1\n", "output": [">\n"]}, {"input": "1\n5 19\n1216 1\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1101 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n7 0\n2 2\n", "output": ["<\n"]}, {"input": "1\n1111 3\n2222 0\n", "output": [">\n"]}, {"input": "1\n12001 59\n21 2\n", "output": [">\n"]}, {"input": "1\n1 0\n11000 1\n", "output": ["<\n"]}, {"input": "1\n2992743 1\n28222 1\n", "output": [">\n"]}, {"input": "1\n7 4\n1990 0\n", "output": [">\n"]}, {"input": "1\n229 1\n73 1\n", "output": [">\n"]}, {"input": "1\n2 19\n1216 1\n", "output": [">\n"]}], "task_id": "codecontest/113", "repair_prompt": ["Monocarp wrote down two numbers on a whiteboard. Both of these numbers follow a specific format. Each of the numbers is a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him? Write a function that takes two pairs of integers (x1, p1) and (x2, p2) and returns '>' if the first number is greater than the second, '<' if it is smaller, and '=' if they are equal.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Monocarp wrote down two numbers on a whiteboard. Each of the numbers is a positive integer x with p zeros appended to its end, indicating a specific format.\n\nNow Monocarp asks you to compare these two numbers. Can you help him? Write a function that takes two pairs of integers (x1, p1) and (x2, p2) and returns '>' if the first number is greater than the second, '<' if it is smaller, and '=' if they are equal.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Monocarp wrote down two numbers on a whiteboard, both positive integers x with p zeros appended to the end. Now, he asks you to compare these numbers. Can you help him? Write a function that takes two pairs of integers (x1, p1) and (x2, p2) and returns '>' if the first number is greater than the second, '<' if it is smaller, and '=' if they are equal.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate through each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n\nmain()", "completions": ["def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n\nmain()", "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate through each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n\nmain()", "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n\nmain()", "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n\nmain()", "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n\nmain()", "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate through each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n\nmain()", "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate through each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n\nmain()", "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n\nmain()", "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 < num2:\n        return '<'\n    elif num1 > num2:\n        return '>'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n\nmain()", "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate through each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n\nmain()"], "session_history": {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the values of x1, p1, x2, and p2 for each testcase\",\n    \"Calculate the actual values of the two numbers by appending the zeros to the end of x1 and x2\",\n    \"Compare the two numbers and determine if the first number is greater, smaller, or equal to the second number\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases (t)\",\n    \"Step 2\": \"For each testcase, read the values of x1, p1, x2, and p2\",\n    \"Step 3\": \"Calculate the actual values of the two numbers by appending the zeros to the end of x1 and x2\",\n    \"Step 4\": \"Compare the two numbers and determine the result of the comparison\",\n    \"Step 5\": \"Print the result of the comparison for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integer with p zeros appended': Each number is a positive integer followed by a certain number of zeros at the end.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    All steps should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    (1, 0) vs (1, 0) = =\n    Explanation: Both numbers are the same as they are positive integers without any zeros appended.\n    (1, 0) vs (99, 0) = <\n    Explanation: The first number is smaller than the second number as 1 is less than 99.\n    (1, 2) vs (1, 0) = >\n    Explanation: The first number is greater than the second number as 100 is greater than 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle the comparisons.", "Round_0": {"code": "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate through each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate through each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n"}}, "session_historys": [{"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the values of x1, p1, x2, and p2 for each testcase\",\n    \"Compare the two numbers based on the given format\",\n    \"Output the result of the comparison for each testcase\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases (t)\",\n    \"Step 2\": \"For each testcase, read the values of x1, p1, x2, and p2\",\n    \"Step 3\": \"Compare the two numbers based on the given format\",\n    \"Step 4\": \"Output the result of the comparison for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integer': The numbers provided are positive integers.\n    'appended with p zeros': The numbers have p zeros appended to their end, indicating a specific format.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    There are no steps that should be implemented simultaneously. Each step should be executed sequentially as outlined in the plan.\n\n# [edge case] \n    (1, 0) vs (1, 0) = =\n    Explanation: Both numbers are the same as they have no zeros appended.\n    (1, 0) vs (10, 0) = <\n    Explanation: The first number is smaller than the second number as 1 < 10.\n    (100, 2) vs (1000, 1) = >\n    Explanation: The first number is greater than the second number as 10000 > 1000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The comparison logic covers all scenarios adequately.", "Round_0": {"code": "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the integers x1, p1, x2, and p2 for each testcase\",\n    \"Calculate the actual numbers by appending p zeros to the end of x1 and x2\",\n    \"Compare the two numbers and determine if the first number is greater, smaller, or equal to the second number\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases t\",\n    \"Step 2\": \"For each testcase, read the values of x1, p1, x2, and p2\",\n    \"Step 3\": \"Calculate the actual numbers by multiplying x1 and x2 by 10^p1 and 10^p2 respectively\",\n    \"Step 4\": \"Compare the two numbers and print the result of the comparison\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integers': All numbers involved are greater than 0.\n    'appended to the end': Adding zeros to the end of a number.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    All steps should be implemented sequentially as described in the plan.\n\n# [edge case] \n    1 0\n    99 0\n    Expected Output: <\n    Explanation: 1 is less than 99.\n    \n    1 2\n    1 0\n    Expected Output: =\n    Explanation: Both numbers are equal after appending zeros.\n    \n    1999 0\n    2000 0\n    Expected Output: <\n    Explanation: 1999 is less than 2000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios.", "Round_0": {"code": "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate through each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate through each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the values of x1, p1, x2, and p2 for each testcase\",\n    \"Calculate the actual values of the two numbers by appending the zeros to the end of x1 and x2\",\n    \"Compare the two numbers and determine if the first number is greater, smaller, or equal to the second number\",\n    \"Print the result of the comparison for each testcase\"\n  ],\n  \"high_level_plan\": {\n    \"steps\": [\n      \"Read the number of testcases (t)\",\n      \"For each testcase:\",\n      \"   - Read the values of x1, p1, x2, and p2\",\n      \"   - Calculate the actual values of the two numbers by appending the zeros to the end of x1 and x2\",\n      \"   - Compare the two numbers and determine the result of the comparison\",\n      \"   - Print the result of the comparison\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integer with zeros appended'\n    Explanation: The core concept is to compare two positive integers with a specific number of zeros appended to the end.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    All steps should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    (1, 0) vs (1, 0) = =\n    Explanation: Both numbers are the same as they are positive integers with no zeros appended.\n    (1, 0) vs (99, 0) = <\n    Explanation: The first number is smaller than the second number as 1 is less than 99.\n    (1, 2) vs (1, 0) = >\n    Explanation: The first number is greater than the second number as 100 is greater than 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The comparison logic covers all scenarios.", "Round_0": {"code": "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the values of x1, p1, x2, and p2 for each testcase\",\n    \"Calculate the actual values of the two numbers by appending the zeros to the end of x1 and x2\",\n    \"Compare the two numbers and determine if the first number is greater, smaller, or equal to the second number\",\n    \"Print the result of the comparison for each testcase\"\n  ],\n  \"high_level_plan\": {\n    \"steps\": [\n      \"Read the number of testcases (t)\",\n      \"For each testcase:\",\n      \"   - Read the values of x1, p1, x2, and p2\",\n      \"   - Calculate the actual values of the two numbers by appending the zeros to the end of x1 and x2\",\n      \"   - Compare the two numbers and determine the result of the comparison\",\n      \"   - Print the result of the comparison\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integer with zeros appended'\n    Explanation: The core concept is to compare two positive integers with a specific number of zeros appended to the end.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    All steps should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    (1, 0) vs (1, 0) = =\n    Explanation: Both numbers are the same as they have no zeros appended.\n    (1, 0) vs (99, 0) = <\n    Explanation: 1 is less than 99 when compared with the same number of zeros appended.\n    (999, 0) vs (1, 2) = >\n    Explanation: 999 is greater than 1000 when compared with the same number of zeros appended.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The comparison logic covers all scenarios.", "Round_0": {"code": "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the integers x1, p1, x2, and p2 for each testcase\",\n    \"Calculate the actual numbers by appending p zeros to the end of x1 and x2\",\n    \"Compare the two numbers and determine if the first number is greater, smaller, or equal to the second number\",\n    \"Print the result of the comparison for each testcase\"\n  ],\n  \"high_level_plan\": {\n    \"steps\": [\n      \"Read the number of testcases t\",\n      \"For each testcase:\",\n      \"   - Read x1 and p1\",\n      \"   - Read x2 and p2\",\n      \"   - Calculate the actual numbers by appending p zeros to x1 and x2\",\n      \"   - Compare the two numbers and determine the result\",\n      \"   - Print the result\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integers': Numbers that are greater than zero.\n    'appended to the end': Adding zeros to the end of a number.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    All steps should be implemented step by step as described in the plan.\n\n# [edge case] \n    (1, 0) vs (1, 0) = =\n    Explanation: Both numbers are the same as they have no zeros appended.\n    (1, 0) vs (10, 1) = <\n    Explanation: The first number is smaller than the second number after appending zeros.\n    (100, 2) vs (10, 1) = >\n    Explanation: The first number is greater than the second number after appending zeros.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios.", "Round_0": {"code": "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the values of x1, p1, x2, and p2 for each testcase\",\n    \"Calculate the actual values of the two numbers by appending the zeros to the end of x1 and x2\",\n    \"Compare the two numbers and determine if the first number is greater, smaller, or equal to the second number\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases (t)\",\n    \"Step 2\": \"For each testcase, read the values of x1, p1, x2, and p2\",\n    \"Step 3\": \"Calculate the actual values of the two numbers by appending the zeros to the end of x1 and x2\",\n    \"Step 4\": \"Compare the two numbers and determine the result of the comparison\",\n    \"Step 5\": \"Print the result of the comparison for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integer with p zeros appended': Each number is a positive integer followed by a certain number of zeros at the end.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    All steps should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    (1, 0) vs (1, 0) = =\n    Explanation: Both numbers are the same as they are both 1 with no zeros appended.\n    (1, 0) vs (99, 0) = <\n    Explanation: The first number is smaller than the second number as 1 is less than 99.\n    (100, 2) vs (100, 1) = >\n    Explanation: The first number is greater than the second number as 1000 is greater than 100.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The comparison logic covers all scenarios.", "Round_0": {"code": "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate through each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate through each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the integers x1, p1, x2, and p2 for each testcase\",\n    \"Calculate the actual numbers by appending p zeros to x1 and x2\",\n    \"Compare the two calculated numbers and determine if the first number is greater, smaller, or equal to the second number\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases t\",\n    \"Step 2\": \"For each testcase, read the values of x1, p1, x2, and p2\",\n    \"Step 3\": \"Calculate the actual numbers by multiplying x1 and x2 by 10^p1 and 10^p2 respectively\",\n    \"Step 4\": \"Compare the two calculated numbers and print the result ('>', '<', or '=') for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integers': All numbers involved are greater than 0.\n    'appended to the end': Adding zeros to the end of a number.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    All steps should be implemented sequentially as described in the plan.\n\n# [edge case] \n    1 0\n    99 0\n    Expected Output: <\n    Explanation: 1 is less than 99.\n    \n    1 2\n    99 0\n    Expected Output: >\n    Explanation: 100 is greater than 99.\n    \n    1 0\n    1 0\n    Expected Output: =\n    Explanation: Both numbers are equal.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios.", "Round_0": {"code": "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate through each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate through each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the integers x1, p1, x2, and p2 for each testcase\",\n    \"Compare the two numbers based on the given format\",\n    \"Output the result of the comparison for each testcase\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases (t)\",\n    \"Step 2\": \"For each testcase, read the integers x1, p1, x2, and p2\",\n    \"Step 3\": \"Compare the two numbers based on the given format\",\n    \"Step 4\": \"Output the result of the comparison for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integer': The numbers provided are positive integers.\n    'appended zeros': The numbers have zeros appended to their end, indicating a specific format.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    There are no steps that should be implemented simultaneously. Each step should be executed sequentially as outlined in the plan.\n\n# [edge case] \n    (1, 0) vs (1, 0) = =\n    Explanation: Both numbers are the same, so the comparison should result in '='.\n    (1, 0) vs (99, 0) = <\n    Explanation: The first number is smaller than the second number, so the comparison should result in '<'.\n    (2, 3) vs (1, 0) = >\n    Explanation: The first number is greater than the second number, so the comparison should result in '>'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should cover all scenarios.", "Round_0": {"code": "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the values of x1, p1, x2, and p2 for each testcase\",\n    \"Compare the two numbers based on the given format\",\n    \"Output the result of the comparison for each testcase\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases (t)\",\n    \"Step 2\": \"For each testcase, read the values of x1, p1, x2, and p2\",\n    \"Step 3\": \"Compare the two numbers based on the given format\",\n    \"Step 4\": \"Output the result of the comparison for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integer': The numbers provided are positive integers.\n    'appended zeros': Zeros are added to the end of the numbers to indicate a specific format.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    All steps should be implemented step by step as described in the plan.\n\n# [edge case] \n    1 0, 1 0 = =\n    Explanation: Both numbers are the same, so the comparison should result in '='.\n    1 0, 99 0 = <\n    Explanation: The first number is smaller than the second number, so the comparison should result in '<'.\n    2 1, 19 0 = >\n    Explanation: The first number is greater than the second number, so the comparison should result in '>'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios.", "Round_0": {"code": "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 < num2:\n        return '<'\n    elif num1 > num2:\n        return '>'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 < num2:\n        return '<'\n    elif num1 > num2:\n        return '>'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the values of x1, p1, x2, and p2 for each testcase\",\n    \"Calculate the actual values of the two numbers by appending the zeros to the end of x1 and x2\",\n    \"Compare the two numbers and determine if the first number is greater, smaller, or equal to the second number\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases (t)\",\n    \"Step 2\": \"For each testcase, read the values of x1, p1, x2, and p2\",\n    \"Step 3\": \"Calculate the actual values of the two numbers by appending the zeros to the end of x1 and x2\",\n    \"Step 4\": \"Compare the two numbers and determine the result of the comparison\",\n    \"Step 5\": \"Print the result of the comparison for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integer with p zeros appended': Each number is a positive integer followed by a certain number of zeros at the end.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    All steps should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    (1, 0) vs (1, 0) = =\n    Explanation: Both numbers are the same as they are positive integers without any zeros appended.\n    (1, 0) vs (99, 0) = <\n    Explanation: The first number is smaller than the second number as 1 is less than 99.\n    (1, 2) vs (1, 0) = >\n    Explanation: The first number is greater than the second number as 100 is greater than 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle the comparisons.", "Round_0": {"code": "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate through each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def compare_numbers(x1, p1, x2, p2):\n    num1 = x1 * 10**p1\n    num2 = x2 * 10**p2\n    \n    if num1 > num2:\n        return '>'\n    elif num1 < num2:\n        return '<'\n    else:\n        return '='\n\n# Read the number of testcases\nt = int(input())\n\n# Iterate through each testcase\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n"}}], "scores": [], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 2, "round": 67, "prompt": "Monocarp wrote down two numbers on a whiteboard. Both of these numbers follow a specific format. Each of the numbers is a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him? Write a function that takes two pairs of integers (x1, p1) and (x2, p2) and returns '>' if the first number is greater than the second, '<' if it is smaller, and '=' if they are equal.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.", "mutate_method": "expand_one2two", "save_node": false, "parent_index": 30}
