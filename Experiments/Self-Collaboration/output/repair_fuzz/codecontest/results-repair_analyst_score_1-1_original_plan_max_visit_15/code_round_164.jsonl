{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "repair_prompt": ["Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Consider all possible distributions to ensure accuracy in minimizing the difference. Ensure that no song is left out in the allocation between the two concerts.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Luntik wants to distribute his one-minute, two-minute, and three-minute songs into two concerts. He aims to minimize the absolute difference of durations between the concerts by including every song exactly once in a concert. Please assist Luntik in finding the smallest possible difference in minutes between the durations of the concerts while ensuring all songs are allocated.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Luntik has a one-minute songs, b two-minute songs and c three-minute songs, and he wants to distribute all songs into two concerts such that the absolute difference of durations between the concerts is minimal. Find the minimal possible difference in minutes.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the possible combinations of songs for each concert\n    min_diff = float('inf')\n    for i in range(8):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        for j in range(3):\n            if i & (1 << j):\n                duration_concert1 += (j + 1) * [a, b, c][j]\n            else:\n                duration_concert2 += (j + 1) * [a, b, c][j]\n        min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    # Print the minimal possible difference in minutes\n    print(min_diff)\n\nmain()", "completions": ["def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(2**(a+b+c)):\n        duration_1 = 0\n        duration_2 = 0\n        \n        for j in range(a+b+c):\n            if i & (1 << j):\n                duration_1 += j+1\n            else:\n                duration_2 += j+1\n        \n        min_diff = min(min_diff, abs(duration_1 - duration_2))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(calculate_min_difference(a, b, c))\n\nmain()", "import itertools\n\n# Function to calculate the total duration of all songs\ndef total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(a, b, c):\n    total_dur = total_duration(a, b, c)\n    half_dur = total_dur // 2\n    min_diff = float('inf')\n    \n    # Generate all possible combinations of songs for each concert\n    for perm in itertools.permutations([a, b, c]):\n        for i in range(3):\n            for j in range(3):\n                if i != j:\n                    dur1 = perm[i]\n                    dur2 = perm[j]\n                    diff = abs((dur1 + 2*perm[3-i-j] + 3*perm[j]) - (total_dur - dur1 - dur2))\n                    min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(find_minimal_difference(a, b, c))\n\nmain()", "import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    min_diff = float('inf')\n    \n    # Generate all possible distributions of songs into two concerts\n    for distribution in itertools.combinations(range(a + b + c), a + b):\n        concert1_duration = sum(d+1 for d in distribution)\n        concert2_duration = total_duration - concert1_duration\n        min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(find_minimal_difference(a, b, c))\n\nmain()", "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(2**(a+b+c)):\n        duration_1 = 0\n        duration_2 = 0\n        \n        for j in range(a+b+c):\n            if i & (1 << j):\n                duration_1 += j+1\n            else:\n                duration_2 += j+1\n        \n        min_diff = min(min_diff, abs(duration_1 - duration_2))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(calculate_min_difference(a, b, c))\n\nmain()", "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Initialize the minimum difference as a large number\n    min_diff = float('inf')\n    \n    # Generate all possible combinations of songs for each concert\n    for i in range(1 << 3):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        \n        # Calculate the duration for each concert based on the combination\n        for j in range(3):\n            if i & (1 << j):\n                duration_concert1 += (j + 1)\n            else:\n                duration_concert2 += (j + 1)\n        \n        # Calculate the absolute difference in duration between the two concerts\n        diff = abs(duration_concert1 - duration_concert2)\n        \n        # Update the minimum difference if a smaller difference is found\n        min_diff = min(min_diff, diff)\n    \n    # Output the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n\nmain()", "import itertools\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Generate all possible combinations of songs for each concert\n    songs = [1]*a + [2]*b + [3]*c\n    min_diff = float('inf')\n    \n    # Iterate over all possible combinations\n    for comb in itertools.combinations(songs, len(songs)//2):\n        duration1 = sum(comb)\n        duration2 = sum(songs) - duration1\n        diff = abs(duration1 - duration2)\n        min_diff = min(min_diff, diff)\n    \n    # Output the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n\nmain()", "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(2**(a+b+c)):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        \n        for j in range(a+b+c):\n            if i & (1 << j):\n                duration_concert1 += j+1\n            else:\n                duration_concert2 += j+1\n        \n        min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(calculate_min_difference(a, b, c))\n\nmain()", "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(half_duration - (a + 2*b))\n    if abs(half_duration - (b + 3*c)) < min_diff:\n        min_diff = abs(half_duration - (b + 3*c))\n    if abs(half_duration - (a + b + c)) < min_diff:\n        min_diff = abs(half_duration - (a + b + c))\n    \n    return min_diff\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(calculate_minimal_difference(a, b, c))\n\nmain()", "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the possible combinations of songs for each concert\n    min_diff = float('inf')\n    for i in range(8):\n        concert1 = concert2 = 0\n        for j in range(3):\n            if i & (1 << j):\n                concert1 += (j + 1)\n            else:\n                concert2 += (j + 1)\n        diff = abs(concert1 - concert2)\n        min_diff = min(min_diff, diff)\n    \n    # Print the minimal possible difference in minutes\n    print(min_diff)\n\nmain()", "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the possible combinations of songs for each concert\n    min_diff = float('inf')\n    for i in range(8):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        for j in range(3):\n            if i & (1 << j):\n                duration_concert1 += (j + 1) * [a, b, c][j]\n            else:\n                duration_concert2 += (j + 1) * [a, b, c][j]\n        min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    # Print the minimal possible difference in minutes\n    print(min_diff)\n\nmain()"], "session_history": {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the total duration of all songs\",\n      \"Determine the possible combinations of songs for each concert\",\n      \"Calculate the difference in duration between the two concerts\"\n    ],\n    \"major_steps\": [\n      \"Read the number of test cases\",\n      \"For each test case:\",\n      \"   - Read the number of one-minute, two-minute, and three-minute songs\",\n      \"   - Calculate the total duration of all songs\",\n      \"   - Determine the possible combinations of songs for each concert\",\n      \"   - Calculate the difference in duration between the two concerts\",\n      \"   - Print the minimal possible difference in minutes\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate or divide something among different parts or people\n    'minimal possible difference': means the smallest absolute value of the difference between two quantities\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The major steps should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the possible combinations of songs for each concert\n    min_diff = float('inf')\n    for i in range(8):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        for j in range(3):\n            if i & (1 << j):\n                duration_concert1 += (j + 1) * [a, b, c][j]\n            else:\n                duration_concert2 += (j + 1) * [a, b, c][j]\n        min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    # Print the minimal possible difference in minutes\n    print(min_diff)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the possible combinations of songs for each concert\n    min_diff = float('inf')\n    for i in range(8):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        for j in range(3):\n            if i & (1 << j):\n                duration_concert1 += (j + 1) * [a, b, c][j]\n            else:\n                duration_concert2 += (j + 1) * [a, b, c][j]\n        min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    # Print the minimal possible difference in minutes\n    print(min_diff)\n"}}, "session_historys": [{"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Find all possible distributions of songs into two concerts\",\n    \"Calculate the duration of each concert for each distribution\",\n    \"Find the minimum possible difference in duration between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible distributions of songs into two concerts using a recursive function\",\n    \"step_3\": \"Calculate the duration of each concert for each distribution by summing the durations of the songs in each concert\",\n    \"step_4\": \"Find the minimum possible difference in duration between the two concerts by iterating through all distributions and keeping track of the minimum difference\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'durations': The time length of each song.\n    'concerts': Events where songs are performed.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': Indicates the need to minimize the difference in durations between the concerts.\n\n# [code logic]\n    The steps should be implemented sequentially as they involve calculations and comparisons that depend on previous results.\n\n# [edge case] \n    Case 1: 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    Case 2: 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    Case 3: 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers all scenarios.", "Round_0": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(2**(a+b+c)):\n        duration_1 = 0\n        duration_2 = 0\n        \n        for j in range(a+b+c):\n            if i & (1 << j):\n                duration_1 += j+1\n            else:\n                duration_2 += j+1\n        \n        min_diff = min(min_diff, abs(duration_1 - duration_2))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(calculate_min_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 32)"}, "Round_1": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(2**(a+b+c)):\n        duration_1 = 0\n        duration_2 = 0\n        \n        for j in range(a+b+c):\n            if i & (1 << j):\n                duration_1 += j+1\n            else:\n                duration_2 += j+1\n        \n        min_diff = min(min_diff, abs(duration_1 - duration_2))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(calculate_min_difference(a, b, c))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Determine the total duration of all songs\",\n    \"Find all possible combinations of songs for each concert\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Select the combination with the smallest difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of each type of song by their respective durations\",\n    \"step_2\": \"Generate all possible combinations of songs for each concert by iterating through all possible permutations of the songs\",\n    \"step_3\": \"Calculate the duration of each concert for each combination and find the absolute difference in duration between the two concerts\",\n    \"step_4\": \"Select the combination with the smallest difference in duration as the optimal solution\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimize the absolute difference of durations between the concerts'\n    Explanation: Luntik wants to distribute songs into two concerts in a way that the absolute difference in duration between the concerts is minimized.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': means the minimum difference in minutes between the concerts\n\n# [code logic]\n    The steps should be implemented sequentially as they involve calculations based on previous results.\n\n# [edge case] \n    Test Case 1:\n    1 1 1\n    Output:\n    0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    Test Case 2:\n    5 5 5\n    Output:\n    0\n    Explanation: Luntik can distribute all songs equally between the two concerts, resulting in a difference of 0 minutes.\n    \n    Test Case 3:\n    1 1 2\n    Output:\n    1\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers all scenarios.", "Round_0": {"code": "import itertools\n\n# Function to calculate the total duration of all songs\ndef total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(a, b, c):\n    total_dur = total_duration(a, b, c)\n    half_dur = total_dur // 2\n    min_diff = float('inf')\n    \n    # Generate all possible combinations of songs for each concert\n    for perm in itertools.permutations([a, b, c]):\n        for i in range(3):\n            for j in range(3):\n                if i != j:\n                    dur1 = perm[i]\n                    dur2 = perm[j]\n                    diff = abs((dur1 + 2*perm[3-i-j] + 3*perm[j]) - (total_dur - dur1 - dur2))\n                    min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(find_minimal_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "import itertools\n\n# Function to calculate the total duration of all songs\ndef total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(a, b, c):\n    total_dur = total_duration(a, b, c)\n    half_dur = total_dur // 2\n    min_diff = float('inf')\n    \n    # Generate all possible combinations of songs for each concert\n    for perm in itertools.permutations([a, b, c]):\n        for i in range(3):\n            for j in range(3):\n                if i != j:\n                    dur1 = perm[i]\n                    dur2 = perm[j]\n                    diff = abs((dur1 + 2*perm[3-i-j] + 3*perm[j]) - (total_dur - dur1 - dur2))\n                    min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(find_minimal_difference(a, b, c))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Find all possible distributions of songs into two concerts\",\n    \"Calculate the duration of each concert for each distribution\",\n    \"Find the minimum possible difference in duration between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"Step 2\": \"Generate all possible distributions of songs into two concerts by iterating through all possible combinations of songs\",\n    \"Step 3\": \"Calculate the duration of each concert for each distribution by summing the durations of the songs in each concert\",\n    \"Step 4\": \"Find the minimum possible difference in duration between the two concerts by comparing the durations of the two concerts for each distribution\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'durations': The time length of each song.\n    'concerts': Events where songs are performed.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': Indicates the need to minimize the difference in durations between the concerts.\n\n# [code logic]\n    The steps should be implemented sequentially as they involve calculations and comparisons that depend on previous results.\n\n# [edge case] \n    Case 1: 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    Case 2: 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    Case 3: 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers all scenarios.", "Round_0": {"code": "import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    min_diff = float('inf')\n    \n    # Generate all possible distributions of songs into two concerts\n    for distribution in itertools.combinations(range(a + b + c), a + b):\n        concert1_duration = sum(d+1 for d in distribution)\n        concert2_duration = total_duration - concert1_duration\n        min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(find_minimal_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 32)"}, "Round_1": {"code": "import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    min_diff = float('inf')\n    \n    # Generate all possible distributions of songs into two concerts\n    for distribution in itertools.combinations(range(a + b + c), a + b):\n        concert1_duration = sum(d+1 for d in distribution)\n        concert2_duration = total_duration - concert1_duration\n        min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    # Output\n    print(find_minimal_difference(a, b, c))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Find all possible distributions of songs into two concerts\",\n    \"Calculate the duration of each concert for each distribution\",\n    \"Find the minimum possible difference in duration between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible distributions of songs into two concerts using a recursive function\",\n    \"step_3\": \"Calculate the duration of each concert for each distribution by summing the durations of the songs in each concert\",\n    \"step_4\": \"Find the minimum possible difference in duration between the two concerts by iterating through all distributions and keeping track of the minimum difference\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'durations': The time length of each song.\n    'concerts': Events where songs are performed.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': Indicates the need to minimize the difference in durations between the concerts.\n\n# [code logic]\n    The steps should be implemented sequentially as they involve calculations that depend on previous results.\n\n# [edge case] \n    Case 1: 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be 0.\n    \n    Case 2: 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The difference will be 1.\n    \n    Case 3: 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in 0 difference in durations.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers all scenarios.", "Round_0": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(2**(a+b+c)):\n        duration_1 = 0\n        duration_2 = 0\n        \n        for j in range(a+b+c):\n            if i & (1 << j):\n                duration_1 += j+1\n            else:\n                duration_2 += j+1\n        \n        min_diff = min(min_diff, abs(duration_1 - duration_2))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(calculate_min_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 32)"}, "Round_1": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(2**(a+b+c)):\n        duration_1 = 0\n        duration_2 = 0\n        \n        for j in range(a+b+c):\n            if i & (1 << j):\n                duration_1 += j+1\n            else:\n                duration_2 += j+1\n        \n        min_diff = min(min_diff, abs(duration_1 - duration_2))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(calculate_min_difference(a, b, c))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Determine the total duration of all songs\",\n    \"Find all possible combinations of songs for each concert\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Select the combination with the smallest difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs\",\n    \"Step 3\": \"Calculate the total duration of all songs\",\n    \"Step 4\": \"Generate all possible combinations of songs for each concert\",\n    \"Step 5\": \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Step 6\": \"Select the combination with the smallest difference in duration\",\n    \"Step 7\": \"Output the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimize the absolute difference of durations between the concerts'\n    Explanation: Luntik wants to distribute songs into two concerts in a way that the absolute difference in duration between the concerts is minimized.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': means finding the minimum possible difference in minutes between the concerts durations\n\n# [code logic]\n    The steps should be implemented sequentially as they are dependent on each other.\n\n# [edge case] \n    Test Case 1:\n    1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    Test Case 2:\n    5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in 0 difference in duration.\n    \n    Test Case 3:\n    1 1 2\n    Output: 1\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Initialize the minimum difference as a large number\n    min_diff = float('inf')\n    \n    # Generate all possible combinations of songs for each concert\n    for i in range(1 << 3):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        \n        # Calculate the duration for each concert based on the combination\n        for j in range(3):\n            if i & (1 << j):\n                duration_concert1 += (j + 1)\n            else:\n                duration_concert2 += (j + 1)\n        \n        # Calculate the absolute difference in duration between the two concerts\n        diff = abs(duration_concert1 - duration_concert2)\n        \n        # Update the minimum difference if a smaller difference is found\n        min_diff = min(min_diff, diff)\n    \n    # Output the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 41)"}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Initialize the minimum difference as a large number\n    min_diff = float('inf')\n    \n    # Generate all possible combinations of songs for each concert\n    for i in range(1 << 3):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        \n        # Calculate the duration for each concert based on the combination\n        for j in range(3):\n            if i & (1 << j):\n                duration_concert1 += (j + 1)\n            else:\n                duration_concert2 += (j + 1)\n        \n        # Calculate the absolute difference in duration between the two concerts\n        diff = abs(duration_concert1 - duration_concert2)\n        \n        # Update the minimum difference if a smaller difference is found\n        min_diff = min(min_diff, diff)\n    \n    # Output the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Determine the total duration of all songs\",\n    \"Find all possible combinations of songs for each concert\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Select the combination with the smallest difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs\",\n    \"Step 3\": \"Calculate the total duration of all songs\",\n    \"Step 4\": \"Generate all possible combinations of songs for each concert\",\n    \"Step 5\": \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Step 6\": \"Select the combination with the smallest difference in duration\",\n    \"Step 7\": \"Output the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimize the absolute difference of durations between the concerts': Luntik wants to distribute songs into two concerts in a way that the absolute difference in total duration between the two concerts is minimized.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest possible': Indicates the need to find the smallest difference in minutes between the durations of the concerts.\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve calculations and comparisons at each stage.\n\n# [edge case] \n    Test Case 1:\n    1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    Test Case 2:\n    2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    Test Case 3:\n    5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "import itertools\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Generate all possible combinations of songs for each concert\n    songs = [1]*a + [2]*b + [3]*c\n    min_diff = float('inf')\n    \n    # Iterate over all possible combinations\n    for comb in itertools.combinations(songs, len(songs)//2):\n        duration1 = sum(comb)\n        duration2 = sum(songs) - duration1\n        diff = abs(duration1 - duration2)\n        min_diff = min(min_diff, diff)\n    \n    # Output the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "import itertools\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Generate all possible combinations of songs for each concert\n    songs = [1]*a + [2]*b + [3]*c\n    min_diff = float('inf')\n    \n    # Iterate over all possible combinations\n    for comb in itertools.combinations(songs, len(songs)//2):\n        duration1 = sum(comb)\n        duration2 = sum(songs) - duration1\n        diff = abs(duration1 - duration2)\n        min_diff = min(min_diff, diff)\n    \n    # Output the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Find all possible distributions of songs into two concerts\",\n    \"Calculate the duration of each concert for each distribution\",\n    \"Find the minimum possible difference in duration between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"Step 2\": \"Generate all possible distributions of songs into two concerts using a recursive function\",\n    \"Step 3\": \"For each distribution, calculate the duration of each concert by summing the durations of the songs in each concert\",\n    \"Step 4\": \"Find the minimum possible difference in duration between the two concerts by comparing the durations of all distributions\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'durations': The time length of each song.\n    'concerts': Events where songs are performed.\n    Explanation: The core concept involves distributing songs into concerts to minimize the difference in total duration.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as they involve different calculations and comparisons.\n\n# [edge case] \n    Case 1: 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    Case 2: 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    Case 3: 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally into two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers all scenarios.", "Round_0": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(2**(a+b+c)):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        \n        for j in range(a+b+c):\n            if i & (1 << j):\n                duration_concert1 += j+1\n            else:\n                duration_concert2 += j+1\n        \n        min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(calculate_min_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 32)"}, "Round_1": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(2**(a+b+c)):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        \n        for j in range(a+b+c):\n            if i & (1 << j):\n                duration_concert1 += j+1\n            else:\n                duration_concert2 += j+1\n        \n        min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(calculate_min_difference(a, b, c))\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the total duration of all songs\",\n      \"Determine all possible combinations of distributing songs into two concerts\",\n      \"Calculate the absolute difference in durations between the concerts for each combination\"\n    ],\n    \"major_steps\": [\n      \"Read the number of test cases\",\n      \"For each test case:\",\n      \"   - Read the number of one-minute, two-minute, and three-minute songs\",\n      \"   - Calculate the total duration of all songs\",\n      \"   - Determine all possible combinations of distributing songs into two concerts\",\n      \"   - Calculate the absolute difference in durations between the concerts for each combination\",\n      \"   - Print the minimal possible difference in minutes between the concerts durations\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate or divide something among different parts or people\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': means the smallest or least possible amount\n\n# [code logic]\n    The major steps should be implemented step by step as they are. There are no steps that should be implemented simultaneously.\n\n# [edge case] \n    1. 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    2. 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    3. 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally into two concerts, resulting in 0 difference in durations.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should cover all scenarios.", "Round_0": {"code": "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(half_duration - (a + 2*b))\n    if abs(half_duration - (b + 3*c)) < min_diff:\n        min_diff = abs(half_duration - (b + 3*c))\n    if abs(half_duration - (a + b + c)) < min_diff:\n        min_diff = abs(half_duration - (a + b + c))\n    \n    return min_diff\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(calculate_minimal_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 23)"}, "Round_1": {"code": "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(half_duration - (a + 2*b))\n    if abs(half_duration - (b + 3*c)) < min_diff:\n        min_diff = abs(half_duration - (b + 3*c))\n    if abs(half_duration - (a + b + c)) < min_diff:\n        min_diff = abs(half_duration - (a + b + c))\n    \n    return min_diff\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(calculate_minimal_difference(a, b, c))\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the total duration of all songs\",\n      \"Determine the possible combinations of songs for each concert\",\n      \"Calculate the difference in duration between the two concerts\"\n    ],\n    \"major_steps\": [\n      \"Read the number of test cases\",\n      \"For each test case:\",\n      \"   - Read the number of one-minute, two-minute, and three-minute songs\",\n      \"   - Calculate the total duration of all songs\",\n      \"   - Determine the possible combinations of songs for each concert\",\n      \"   - Calculate the difference in duration between the two concerts\",\n      \"   - Print the minimal possible difference in minutes\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate or divide something among different parts or people\n    'minimal possible difference': means the smallest absolute difference between two values\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': means the smallest or least possible\n\n# [code logic]\n    There are no steps that should be implemented simultaneously. All steps should be executed sequentially as described in the plan.\n\n# [edge case] \n    1. 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    2. 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    3. 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute all songs equally between the two concerts, resulting in 0 difference in duration.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers all scenarios.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the possible combinations of songs for each concert\n    min_diff = float('inf')\n    for i in range(8):\n        concert1 = concert2 = 0\n        for j in range(3):\n            if i & (1 << j):\n                concert1 += (j + 1)\n            else:\n                concert2 += (j + 1)\n        diff = abs(concert1 - concert2)\n        min_diff = min(min_diff, diff)\n    \n    # Print the minimal possible difference in minutes\n    print(min_diff)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the possible combinations of songs for each concert\n    min_diff = float('inf')\n    for i in range(8):\n        concert1 = concert2 = 0\n        for j in range(3):\n            if i & (1 << j):\n                concert1 += (j + 1)\n            else:\n                concert2 += (j + 1)\n        diff = abs(concert1 - concert2)\n        min_diff = min(min_diff, diff)\n    \n    # Print the minimal possible difference in minutes\n    print(min_diff)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the total duration of all songs\",\n      \"Determine the possible combinations of songs for each concert\",\n      \"Calculate the difference in duration between the two concerts\"\n    ],\n    \"major_steps\": [\n      \"Read the number of test cases\",\n      \"For each test case:\",\n      \"   - Read the number of one-minute, two-minute, and three-minute songs\",\n      \"   - Calculate the total duration of all songs\",\n      \"   - Determine the possible combinations of songs for each concert\",\n      \"   - Calculate the difference in duration between the two concerts\",\n      \"   - Print the minimal possible difference in minutes\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate or divide something among different parts or people\n    'minimal possible difference': means the smallest absolute value of the difference between two quantities\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The major steps should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the possible combinations of songs for each concert\n    min_diff = float('inf')\n    for i in range(8):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        for j in range(3):\n            if i & (1 << j):\n                duration_concert1 += (j + 1) * [a, b, c][j]\n            else:\n                duration_concert2 += (j + 1) * [a, b, c][j]\n        min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    # Print the minimal possible difference in minutes\n    print(min_diff)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the possible combinations of songs for each concert\n    min_diff = float('inf')\n    for i in range(8):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        for j in range(3):\n            if i & (1 << j):\n                duration_concert1 += (j + 1) * [a, b, c][j]\n            else:\n                duration_concert2 += (j + 1) * [a, b, c][j]\n        min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    # Print the minimal possible difference in minutes\n    print(min_diff)\n"}}], "scores": [], "pass_results": [false, true, false, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 164, "prompt": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Consider all possible distributions to ensure accuracy in minimizing the difference. Ensure that no song is left out in the allocation between the two concerts.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "add_1_sentence_at_end", "save_node": true, "parent_index": 131}
