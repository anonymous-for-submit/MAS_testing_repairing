{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "repair_prompt": ["Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. Luntik aims to allocate all songs into two concerts so that each song is assigned to precisely one concert. He wants the absolute difference in lengths of the concerts to be minimized as much as possible. The duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. Luntik aims to allocate all songs into two concerts. Each song is assigned to precisely one concert. He wants the absolute difference in lengths of the concerts to be minimized as much as possible. The duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs, and he aims to allocate all songs into two concerts so that each song is assigned to precisely one concert. He wants the absolute difference in lengths of the concerts to be minimized as much as possible. The duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If total duration is odd, the minimal difference is 1\n        # If total duration is even, the minimal difference is 0\n        minimal_diff = total_duration % 2\n        results.append(minimal_diff)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nmain()", "completions": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        index += 3\n        \n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Determine the minimal possible difference\n        if total_duration % 2 == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If total duration is odd, the minimal difference is 1\n        # If total duration is even, the minimal difference is 0\n        if total_duration % 2 == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If the total duration is odd, the minimal difference is 1\n        # If the total duration is even, the minimal difference is 0\n        minimal_diff = total_duration % 2\n        results.append(minimal_diff)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If the total duration is odd, the minimal difference is 1\n        if total_duration % 2 == 1:\n            results.append(1)\n        else:\n            results.append(0)\n\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # The problem can be reduced to finding the closest sum to half of the total_duration\n        # using the available songs. This is a variation of the subset sum problem.\n        \n        # We can use dynamic programming to solve this problem efficiently.\n        # dp[x] will be True if a sum of x can be formed using the available songs.\n        \n        max_possible_sum = total_duration // 2\n        dp = [False] * (max_possible_sum + 1)\n        dp[0] = True\n        \n        # Process one-minute songs\n        for _ in range(a):\n            for j in range(max_possible_sum, 0, -1):\n                if j >= 1:\n                    dp[j] = dp[j] or dp[j - 1]\n        \n        # Process two-minute songs\n        for _ in range(b):\n            for j in range(max_possible_sum, 1, -1):\n                if j >= 2:\n                    dp[j] = dp[j] or dp[j - 2]\n        \n        # Process three-minute songs\n        for _ in range(c):\n            for j in range(max_possible_sum, 2, -1):\n                if j >= 3:\n                    dp[j] = dp[j] or dp[j - 3]\n        \n        # Find the closest sum to half of the total_duration\n        for i in range(max_possible_sum, -1, -1):\n            if dp[i]:\n                closest_sum = i\n                break\n        \n        # Calculate the minimal possible difference\n        difference = abs(total_duration - 2 * closest_sum)\n        results.append(difference)\n    \n    return results\n\n# Input reading\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nt = int(data[0])\ntest_cases = []\nindex = 1\nfor _ in range(t):\n    a = int(data[index])\n    b = int(data[index + 1])\n    c = int(data[index + 2])\n    test_cases.append((a, b, c))\n    index += 3\n\n# Get results\nresults = minimal_difference(t, test_cases)\n\n# Output results\nfor result in results:\n    print(result)\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If total duration is odd, the minimal difference is 1\n        if total_duration % 2 != 0:\n            results.append(1)\n        else:\n            # If total duration is even, the minimal difference is 0\n            results.append(0)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If the total duration is odd, the minimal difference is 1\n        if total_duration % 2 == 1:\n            results.append(1)\n        else:\n            # If the total duration is even, the minimal difference can be 0\n            results.append(0)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Since the number of songs can be very large, we need a more efficient approach\n        # Calculate the total number of minutes\n        total_minutes = a + 2 * b + 3 * c\n        \n        # The minimal difference is the remainder when total_minutes is divided by 2\n        # This is because we can always split the songs into two groups with nearly equal durations\n        min_difference = total_minutes % 2\n        \n        results.append(min_difference)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If the total duration is odd, the minimal difference is 1\n        if total_duration % 2 == 1:\n            results.append(1)\n        else:\n            results.append(0)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If total duration is odd, the minimal difference is 1\n        # If total duration is even, the minimal difference is 0\n        minimal_diff = total_duration % 2\n        results.append(minimal_diff)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the total duration of all songs.\",\n      \"details\": \"Given the number of one-minute, two-minute, and three-minute songs, calculate the total duration by summing up the products of the number of songs and their respective durations.\"\n    },\n    {\n      \"description\": \"Determine possible distributions of songs between two concerts.\",\n      \"details\": \"Explore different combinations of song distributions between two concerts to minimize the absolute difference in their durations.\"\n    },\n    {\n      \"description\": \"Calculate the absolute difference in durations for each distribution.\",\n      \"details\": \"For each possible distribution of songs, calculate the absolute difference between the total durations of the two concerts.\"\n    },\n    {\n      \"description\": \"Find the minimal possible difference.\",\n      \"details\": \"Identify the distribution that results in the minimal absolute difference in concert durations.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, perform the following steps:\",\n    \"  Calculate the total duration of all songs.\",\n    \"  Generate all possible distributions of songs between two concerts.\",\n    \"  For each distribution, calculate the absolute difference in concert durations.\",\n    \"  Track the minimal absolute difference found.\",\n    \"Output the minimal possible difference for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference'\n    Explanation: The requirement is asking to minimize the absolute difference between the durations of two concerts, meaning the non-negative difference between the total durations of songs assigned to each concert.\n\n    'minimized as much as possible'\n    Explanation: This means finding the distribution of songs that results in the smallest possible absolute difference between the two concerts.\n\n# [phrase showing quantity relationship]\n    'one-minute', 'two-minute', 'three-minute'\n    Explanation: These phrases indicate the duration of each type of song. The total duration of songs in a concert is calculated by multiplying the number of songs by their respective durations.\n\n# [degree adverb]\n    'minimal'\n    Explanation: The requirement is to find the smallest possible absolute difference between the durations of the two concerts.\n\n# [code logic]\n    The steps \"Calculate the total duration of all songs\" and \"Generate all possible distributions of songs between two concerts\" should be considered simultaneously. This can be done by iterating through combinations of song distributions while calculating the total duration for each concert.\n\n# [edge case]\n    Test case: 1 0 0 = 1\n    Explanation: With only one one-minute song, the minimal difference is 1 since it can only be assigned to one concert.\n\n    Test case: 0 0 0 = 0\n    Explanation: With no songs, the difference is 0 as both concerts have a duration of 0.\n\n    Test case: 1 1 0 = 1\n    Explanation: With one one-minute song and one two-minute song, the minimal difference is 1 by assigning one song to each concert.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Code for handling edge cases:\n    ```python\n    if a == 0 and b == 0 and c == 0:\n        return 0\n    if a == 0 and b == 0:\n        return c % 2\n    if a == 0 and c == 0:\n        return b % 2\n    if b == 0 and c == 0:\n        return a % 2\n    ```\n\nYES", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If total duration is odd, the minimal difference is 1\n        # If total duration is even, the minimal difference is 0\n        minimal_diff = total_duration % 2\n        results.append(minimal_diff)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the number of songs of each type for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the first line, which represents the number of test cases.\",\n        \"For each test case, read the integers a, b, c from the subsequent lines, representing the number of one-minute, two-minute, and three-minute songs respectively.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the total duration of all songs for each test case.\",\n      \"steps\": [\n        \"For each test case, calculate the total duration as total_duration = a * 1 + b * 2 + c * 3.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the minimal possible difference in concert durations.\",\n      \"steps\": [\n        \"For each test case, check if the total duration is even or odd.\",\n        \"If the total duration is even, the minimal possible difference is 0.\",\n        \"If the total duration is odd, the minimal possible difference is 1.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"For each test case, print the minimal possible difference calculated in the previous step.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the song counts for each test case.\",\n    \"For each test case, calculate the total duration of all songs.\",\n    \"Determine the minimal possible difference in concert durations based on the total duration.\",\n    \"Output the minimal possible difference for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'concerts'\n    Explanation: In the requirement, concerts refer to two separate events where songs are allocated. The goal is to minimize the difference in total duration between these two events.\n\n    'absolute difference'\n    Explanation: This means the non-negative difference between the total durations of the two concerts, calculated as |duration1 - duration2|.\n\n# [phrase showing quantity relationship]\n    'one-minute', 'two-minute', 'three-minute'\n    Explanation: These phrases indicate the duration of each type of song. The total duration of songs in a concert is calculated by multiplying the number of songs by their respective durations.\n\n    'minimal possible difference'\n    Explanation: This means finding the smallest non-negative difference between the total durations of the two concerts.\n\n# [degree adverb]\n    'minimal'\n    Explanation: The requirement is to achieve the smallest possible difference in concert durations. This can be implemented by checking if the total duration is even or odd, as described in the plan.\n\n# [code logic]\n    The steps for checking if the total duration is even or odd and determining the minimal possible difference should be implemented simultaneously. This can be done using an if-else statement to decide the output based on the parity of the total duration.\n\n# [edge case]\n    Test case: 1 0 0 = 1\n    Explanation: With one one-minute song and no other songs, the total duration is 1, which is odd, so the minimal possible difference is 1.\n\n    Test case: 0 0 0 = 0\n    Explanation: With no songs, the total duration is 0, which is even, so the minimal possible difference is 0.\n\n    Test case: 1 1 1 = 0\n    Explanation: The total duration is 1 + 2 + 3 = 6, which is even, so the minimal possible difference is 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking the parity of the total duration will handle these cases correctly.\n\nNO", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        index += 3\n        \n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Determine the minimal possible difference\n        if total_duration % 2 == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the number of songs of each type for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the first line, which represents the number of test cases.\",\n        \"For each test case, read the integers a, b, c from the subsequent lines, representing the number of one-minute, two-minute, and three-minute songs.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the total duration of all songs for each test case.\",\n      \"steps\": [\n        \"For each test case, compute the total duration of all songs as total_duration = a * 1 + b * 2 + c * 3.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the minimal possible difference in concert durations for each test case.\",\n      \"steps\": [\n        \"For each test case, attempt to partition the songs into two groups such that the absolute difference in their total durations is minimized.\",\n        \"Use a strategy to balance the total duration of songs between two concerts, possibly using a greedy or dynamic programming approach.\"\n      ]\n    },\n    {\n      \"description\": \"Output the minimal possible difference for each test case.\",\n      \"steps\": [\n        \"For each test case, print the calculated minimal possible difference in minutes between the durations of the two concerts.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and song counts for each test case.\",\n    \"For each test case, calculate the total duration of all songs.\",\n    \"For each test case, determine the minimal possible difference in concert durations using an appropriate algorithm.\",\n    \"Output the minimal possible difference for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'concert': refers to the two groups where songs are allocated, aiming to balance their durations.\n    'absolute difference': means the non-negative difference between the durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    'one-minute', 'two-minute', 'three-minute': indicates the duration of each type of song, which affects the total duration calculation.\n    'minimal possible difference': means finding the smallest difference between the durations of the two concerts.\n\n# [degree adverb]\n    'minimal': means the smallest possible difference between the durations of the two concerts.\n\n# [code logic]\n    The steps in the plan related to calculating the total duration and partitioning the songs should be considered simultaneously. Specifically, calculating the total duration and attempting to partition the songs should be integrated into a single process to efficiently minimize the difference.\n\n# [edge case]\n    Test case: 1 0 0 = 1\n    Explanation: With only one one-minute song, the minimal difference is 1 since it can only be placed in one concert.\n    \n    Test case: 0 0 0 = 0\n    Explanation: With no songs, the difference is 0 as both concerts have a duration of 0.\n    \n    Test case: 1 1 0 = 1\n    Explanation: With one one-minute song and one two-minute song, the minimal difference is 1 by placing the one-minute song in one concert and the two-minute song in the other.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the number of songs is extremely unbalanced or zero.\n    ```python\n    if a == 0 and b == 0 and c == 0:\n        return 0\n    if a + b + c == 1:\n        return min(a, b, c)\n    ```\n\nYES", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If total duration is odd, the minimal difference is 1\n        # If total duration is even, the minimal difference is 0\n        if total_duration % 2 == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the total duration of all songs.\",\n      \"details\": \"Given the number of one-minute, two-minute, and three-minute songs, calculate the total duration by summing up the products of the number of songs and their respective durations.\"\n    },\n    {\n      \"description\": \"Determine possible distributions of songs between two concerts.\",\n      \"details\": \"Explore different combinations of song distributions between two concerts to minimize the absolute difference in their durations.\"\n    },\n    {\n      \"description\": \"Calculate the absolute difference in durations for each distribution.\",\n      \"details\": \"For each possible distribution of songs, calculate the absolute difference between the total durations of the two concerts.\"\n    },\n    {\n      \"description\": \"Find the minimal possible difference.\",\n      \"details\": \"Identify the distribution that results in the minimal absolute difference in concert durations.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Input Parsing\",\n      \"action\": \"Read the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case.\"\n    },\n    {\n      \"step\": \"Total Duration Calculation\",\n      \"action\": \"For each test case, calculate the total duration of all songs.\"\n    },\n    {\n      \"step\": \"Distribution Exploration\",\n      \"action\": \"For each test case, explore different ways to distribute songs between two concerts to minimize the difference in durations.\"\n    },\n    {\n      \"step\": \"Difference Calculation\",\n      \"action\": \"Calculate the absolute difference in durations for each distribution.\"\n    },\n    {\n      \"step\": \"Output Result\",\n      \"action\": \"For each test case, output the minimal possible difference in minutes between the concert durations.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'concerts'\n    Explanation: In the requirement, concerts refer to two separate events where songs are performed. The goal is to distribute songs between these two concerts to minimize the difference in their total durations.\n\n    'absolute difference'\n    Explanation: This refers to the non-negative difference between the total durations of the two concerts. The aim is to make this difference as small as possible.\n\n# [phrase showing quantity relationship]\n    'one-minute', 'two-minute', 'three-minute'\n    Explanation: These phrases indicate the duration of each type of song. The total duration of songs is calculated by multiplying the number of each type of song by its duration.\n\n# [degree adverb]\n    'minimal'\n    Explanation: This indicates the smallest possible value. In this context, it refers to the smallest possible absolute difference in the durations of the two concerts.\n\n# [code logic]\n    The steps \"Distribution Exploration\" and \"Difference Calculation\" should be considered simultaneously. This is because exploring distributions and calculating their differences are inherently linked; as you explore each distribution, you immediately calculate its difference to determine if it's the minimal one.\n\n# [edge case]\n    1 0 0 = 1\n    Explanation: With only one one-minute song, the minimal difference is 1 since it can only be placed in one concert.\n\n    0 0 0 = 0\n    Explanation: With no songs, the difference is 0 as both concerts have a duration of 0.\n\n    1 1 1 = 0\n    Explanation: As given in the example, the songs can be distributed to achieve a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the total number of songs is odd, as it might not be possible to perfectly balance the concerts.\n    ```python\n    if total_duration % 2 != 0:\n        # Handle the case where the total duration is odd\n        # Implement logic to find the closest possible balance\n    ```\n\nYES", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # We need to find the closest possible sum to total_duration // 2\n        # This is a variation of the subset sum problem\n        max_possible_sum = total_duration // 2\n        possible_sums = {0}\n        \n        # Try to form sums using the available songs\n        for _ in range(a):\n            possible_sums.update({x + 1 for x in possible_sums})\n        for _ in range(b):\n            possible_sums.update({x + 2 for x in possible_sums})\n        for _ in range(c):\n            possible_sums.update({x + 3 for x in possible_sums})\n        \n        # Find the closest sum to total_duration // 2\n        closest_sum = max(x for x in possible_sums if x <= max_possible_sum)\n        minimal_diff = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_diff)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: timed out"}, "Round_1": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If the total duration is odd, the minimal difference is 1\n        # If the total duration is even, the minimal difference is 0\n        minimal_diff = total_duration % 2\n        results.append(minimal_diff)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case.\",\n      \"input\": \"A single integer t followed by t lines, each containing three integers a, b, c.\",\n      \"output\": \"A list of tuples, each containing three integers (a, b, c) for each test case.\"\n    },\n    {\n      \"description\": \"Calculate the total duration of all songs for each test case.\",\n      \"input\": \"A tuple (a, b, c) representing the number of one-minute, two-minute, and three-minute songs.\",\n      \"output\": \"An integer representing the total duration of all songs.\"\n    },\n    {\n      \"description\": \"Determine the minimal possible difference in concert durations by exploring possible allocations of songs.\",\n      \"input\": \"The total duration of all songs and the tuple (a, b, c).\",\n      \"output\": \"An integer representing the minimal possible difference in minutes between the concert durations.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input to get the number of test cases and the list of song counts for each test case.\",\n    \"For each test case, calculate the total duration of all songs using the formula: total_duration = a * 1 + b * 2 + c * 3.\",\n    \"For each test case, explore possible allocations of songs to two concerts to minimize the absolute difference in their durations. This can be approached as a variation of the partition problem, where the goal is to find a subset of songs whose total duration is as close as possible to half of the total duration.\",\n    \"Output the minimal possible difference for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'concert': refers to the two separate events where songs are allocated.\n    'absolute difference': means the non-negative difference between the durations of the two concerts.\n    'minimized': means the goal is to make the difference as small as possible.\n\n# [phrase showing quantity relationship]\n    'one-minute songs', 'two-minute songs', 'three-minute songs': these phrases indicate the duration of each type of song. The relationship is that each song contributes to the total duration of a concert based on its length.\n    Implementation: Calculate the total duration using the formula: total_duration = a * 1 + b * 2 + c * 3.\n\n# [degree adverb]\n    'minimal': means the smallest possible value for the difference between concert durations.\n    Implementation: This involves finding a partition of songs that results in the smallest absolute difference between the two concert durations.\n\n# [code logic]\n    The steps of calculating total duration and exploring allocations should be considered simultaneously. The exploration of allocations is directly dependent on the total duration calculated.\n    Implementation: Use a dynamic programming approach or a greedy algorithm to partition the songs such that the difference in durations is minimized.\n\n# [edge case]\n    Test case: 1 0 0 = 1\n    Explanation: With only one one-minute song, the minimal difference is 1 since it can only be placed in one concert.\n    \n    Test case: 0 0 0 = 0\n    Explanation: With no songs, the difference is 0 as both concerts have a duration of 0.\n    \n    Test case: 1000000000 1000000000 1000000000 = 0\n    Explanation: With equal numbers of each type of song, they can be perfectly balanced between the two concerts.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the number of songs is extremely large or zero.\n    Implementation: Consider edge cases in the logic by checking if the total number of songs is zero or if the numbers are extremely large, ensuring the algorithm handles these efficiently.\n\nYES", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If the total duration is odd, the minimal difference is 1\n        if total_duration % 2 == 1:\n            results.append(1)\n        else:\n            results.append(0)\n\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the total duration of all songs.\",\n      \"details\": \"Given the number of one-minute, two-minute, and three-minute songs, calculate the total duration by summing up the products of the number of songs and their respective durations.\"\n    },\n    {\n      \"description\": \"Determine the possible ways to split songs into two concerts.\",\n      \"details\": \"Explore different combinations of songs that can be allocated to two concerts to minimize the difference in their durations.\"\n    },\n    {\n      \"description\": \"Calculate the difference in durations between two concerts for each combination.\",\n      \"details\": \"For each possible allocation of songs, calculate the absolute difference in durations between the two concerts.\"\n    },\n    {\n      \"description\": \"Find the minimal possible difference.\",\n      \"details\": \"Identify the combination that results in the minimal difference in durations between the two concerts.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Input Parsing\",\n      \"details\": \"Read the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case.\"\n    },\n    {\n      \"step\": \"Total Duration Calculation\",\n      \"details\": \"For each test case, calculate the total duration of all songs using the formula: total_duration = a * 1 + b * 2 + c * 3.\"\n    },\n    {\n      \"step\": \"Concert Allocation\",\n      \"details\": \"For each test case, explore different ways to allocate songs into two concerts to minimize the difference in durations.\"\n    },\n    {\n      \"step\": \"Difference Calculation\",\n      \"details\": \"Calculate the absolute difference in durations between the two concerts for each allocation.\"\n    },\n    {\n      \"step\": \"Output Minimal Difference\",\n      \"details\": \"For each test case, output the minimal possible difference in durations between the two concerts.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'concert allocation'\n    Explanation: This refers to the process of distributing songs into two separate concerts such that the difference in their total durations is minimized.\n\n# [phrase showing quantity relationship]\n    'minimal possible difference': This means finding the smallest absolute difference between the total durations of the two concerts.\n    Implementation: This can be achieved by iterating through possible allocations and calculating the absolute difference for each, then selecting the smallest difference.\n\n# [degree adverb]\n    'minimal': This indicates the need to find the smallest possible value for the difference between concert durations.\n    Implementation: Use a variable to track the smallest difference encountered during the allocation process.\n\n# [code logic]\n    The steps \"Concert Allocation\" and \"Difference Calculation\" should be considered simultaneously.\n    Explanation: As you explore different allocations, you should immediately calculate the difference for each allocation to determine if it is the minimal difference.\n\n# [edge case]\n    Case 1: 1 0 0 = 1\n    Explanation: With only one one-minute song, the minimal difference is 1 since it can only be placed in one concert.\n    \n    Case 2: 0 0 0 = 0\n    Explanation: With no songs, the difference is 0 as both concerts have a duration of 0.\n    \n    Case 3: 1000000000 1000000000 1000000000 = 0\n    Explanation: With equal numbers of each type of song, they can be perfectly balanced between the two concerts, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Explanation: Special handling is required for cases where there are no songs or when the number of songs is extremely large to ensure performance and correctness.\n    Code:\n    ```python\n    if a == 0 and b == 0 and c == 0:\n        print(0)\n    else:\n        # Implement logic to handle large numbers efficiently\n    ```\n\nNO", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # The problem can be reduced to finding the closest sum to half of the total_duration\n        # using the available songs. This is a variation of the subset sum problem.\n        \n        # We can use dynamic programming to solve this problem efficiently.\n        # dp[x] will be True if a sum of x can be formed using the available songs.\n        \n        max_possible_sum = total_duration // 2\n        dp = [False] * (max_possible_sum + 1)\n        dp[0] = True\n        \n        # Process one-minute songs\n        for _ in range(a):\n            for j in range(max_possible_sum, 0, -1):\n                if j >= 1:\n                    dp[j] = dp[j] or dp[j - 1]\n        \n        # Process two-minute songs\n        for _ in range(b):\n            for j in range(max_possible_sum, 1, -1):\n                if j >= 2:\n                    dp[j] = dp[j] or dp[j - 2]\n        \n        # Process three-minute songs\n        for _ in range(c):\n            for j in range(max_possible_sum, 2, -1):\n                if j >= 3:\n                    dp[j] = dp[j] or dp[j - 3]\n        \n        # Find the closest sum to half of the total_duration\n        for i in range(max_possible_sum, -1, -1):\n            if dp[i]:\n                closest_sum = i\n                break\n        \n        # Calculate the minimal possible difference\n        difference = abs(total_duration - 2 * closest_sum)\n        results.append(difference)\n    \n    return results\n\n# Input reading\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nt = int(data[0])\ntest_cases = []\nindex = 1\nfor _ in range(t):\n    a = int(data[index])\n    b = int(data[index + 1])\n    c = int(data[index + 2])\n    test_cases.append((a, b, c))\n    index += 3\n\n# Get results\nresults = minimal_difference(t, test_cases)\n\n# Output results\nfor result in results:\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # The problem can be reduced to finding the closest sum to half of the total_duration\n        # using the available songs. This is a variation of the subset sum problem.\n        \n        # We can use dynamic programming to solve this problem efficiently.\n        # dp[x] will be True if a sum of x can be formed using the available songs.\n        \n        max_possible_sum = total_duration // 2\n        dp = [False] * (max_possible_sum + 1)\n        dp[0] = True\n        \n        # Process one-minute songs\n        for _ in range(a):\n            for j in range(max_possible_sum, 0, -1):\n                if j >= 1:\n                    dp[j] = dp[j] or dp[j - 1]\n        \n        # Process two-minute songs\n        for _ in range(b):\n            for j in range(max_possible_sum, 1, -1):\n                if j >= 2:\n                    dp[j] = dp[j] or dp[j - 2]\n        \n        # Process three-minute songs\n        for _ in range(c):\n            for j in range(max_possible_sum, 2, -1):\n                if j >= 3:\n                    dp[j] = dp[j] or dp[j - 3]\n        \n        # Find the closest sum to half of the total_duration\n        for i in range(max_possible_sum, -1, -1):\n            if dp[i]:\n                closest_sum = i\n                break\n        \n        # Calculate the minimal possible difference\n        difference = abs(total_duration - 2 * closest_sum)\n        results.append(difference)\n    \n    return results\n\n# Input reading\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nt = int(data[0])\ntest_cases = []\nindex = 1\nfor _ in range(t):\n    a = int(data[index])\n    b = int(data[index + 1])\n    c = int(data[index + 2])\n    test_cases.append((a, b, c))\n    index += 3\n\n# Get results\nresults = minimal_difference(t, test_cases)\n\n# Output results\nfor result in results:\n    print(result)\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case.\",\n      \"input\": \"A single integer t followed by t lines, each containing three integers a, b, c.\",\n      \"output\": \"A list of tuples, each containing three integers (a, b, c) for each test case.\"\n    },\n    {\n      \"description\": \"Calculate the total duration of all songs for each test case.\",\n      \"input\": \"A tuple (a, b, c) representing the number of one-minute, two-minute, and three-minute songs.\",\n      \"output\": \"An integer representing the total duration of all songs.\"\n    },\n    {\n      \"description\": \"Determine the minimal possible difference in concert durations by exploring possible distributions of songs between two concerts.\",\n      \"input\": \"The total duration of all songs and the tuple (a, b, c).\",\n      \"output\": \"An integer representing the minimal possible difference in minutes between the concerts' durations.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input to get the number of test cases and the list of song counts for each test case.\",\n    \"For each test case, calculate the total duration of all songs using the formula: total_duration = a * 1 + b * 2 + c * 3.\",\n    \"For each test case, explore possible distributions of songs between two concerts to minimize the absolute difference in their durations. This can be approached as a variation of the partition problem, where the goal is to split the total duration as evenly as possible.\",\n    \"Output the minimal possible difference for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'concert': A performance event where music is played. In this context, it refers to the grouping of songs into two separate events.\n    'absolute difference': The non-negative difference between two values. Here, it refers to the difference in total duration between two concerts.\n\n# [phrase showing quantity relationship]\n    'one-minute', 'two-minute', 'three-minute': These phrases indicate the duration of each type of song. They are used to calculate the total duration of songs in each concert.\n    'minimized as much as possible': This means finding the smallest possible value for the absolute difference in concert durations.\n\n# [degree adverb]\n    'minimal': Refers to the smallest possible value. In this context, it means the smallest possible difference in concert durations.\n\n# [code logic]\n    The steps to calculate the total duration and explore possible distributions should be considered simultaneously. Specifically, calculating the total duration and then using it to explore distributions can be done in a single loop or function for each test case.\n\n# [edge case]\n    1. (1, 0, 0) = 1\n       Explanation: With only one one-minute song, the minimal difference is 1 since it can only be placed in one concert.\n    2. (0, 0, 0) = 0\n       Explanation: No songs to distribute, so the difference is 0.\n    3. (1, 1, 1) = 0\n       Explanation: As given in the example, the songs can be distributed to achieve a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where there are no songs or only one type of song.\n    ```python\n    if a == 0 and b == 0 and c == 0:\n        return 0\n    if a + b + c == 1:\n        return a * 1 + b * 2 + c * 3\n    ```\n\nYES", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If total duration is odd, the minimal difference is 1\n        if total_duration % 2 != 0:\n            results.append(1)\n        else:\n            # If total duration is even, the minimal difference is 0\n            results.append(0)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case.\",\n      \"input\": \"A single integer t followed by t lines, each containing three integers a, b, c.\",\n      \"output\": \"A list of tuples, each containing three integers (a, b, c) for each test case.\"\n    },\n    {\n      \"description\": \"Calculate the total duration of all songs for each test case.\",\n      \"input\": \"A tuple (a, b, c) representing the number of one-minute, two-minute, and three-minute songs.\",\n      \"output\": \"An integer representing the total duration of all songs.\"\n    },\n    {\n      \"description\": \"Determine the minimal possible difference in concert durations by exploring possible allocations of songs.\",\n      \"input\": \"The total duration of songs and the counts of one-minute, two-minute, and three-minute songs.\",\n      \"output\": \"An integer representing the minimal possible difference in minutes between the concert durations.\"\n    },\n    {\n      \"description\": \"Output the minimal possible difference for each test case.\",\n      \"input\": \"A list of minimal possible differences for each test case.\",\n      \"output\": \"Print each minimal possible difference on a new line.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input to get the number of test cases and the song counts for each test case.\",\n    \"For each test case, calculate the total duration of all songs.\",\n    \"For each test case, explore possible allocations of songs to minimize the difference in concert durations. This can be done by iterating over possible combinations or using a dynamic programming approach to find the closest possible split of the total duration.\",\n    \"Store the minimal possible difference for each test case.\",\n    \"Output the minimal possible difference for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'concert': refers to the two separate events where songs are allocated.\n    'absolute difference': means the non-negative difference between the total durations of the two concerts.\n    Explanation: The requirement is to distribute songs into two concerts such that the difference in their total durations is minimized.\n\n# [phrase showing quantity relationship]\n    'one-minute', 'two-minute', 'three-minute': refers to the duration of each type of song.\n    Explanation: These phrases indicate the duration of each song type, which is crucial for calculating the total duration of concerts.\n    Implementation: Use these durations to calculate the total duration of songs in each concert.\n\n# [degree adverb]\n    'minimal': means the smallest possible difference between the durations of the two concerts.\n    Explanation: The goal is to achieve the smallest possible difference in concert durations.\n    Implementation: Use optimization techniques to find the minimal difference.\n\n# [code logic]\n    The steps for calculating total duration and exploring allocations should be considered simultaneously.\n    Explanation: Calculating the total duration and exploring allocations are interdependent and can be implemented in a single code block using dynamic programming or combinatorial optimization.\n\n# [edge case]\n    Edge Case 1: (1, 0, 0) = 1\n    Explanation: With only one one-minute song, the difference between concerts is 1.\n    Edge Case 2: (0, 0, 0) = 0\n    Explanation: No songs to allocate, so the difference is 0.\n    Edge Case 3: (1, 1, 1) = 0\n    Explanation: As shown in the example, the difference can be minimized to 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Explanation: Special handling is required for cases with zero songs or minimal song counts.\n    Code for handling the edge case:\n    ```python\n    if a == 0 and b == 0 and c == 0:\n        return 0\n    ```\n\nYES", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If the total duration is odd, the minimal difference is 1\n        if total_duration % 2 == 1:\n            results.append(1)\n        else:\n            # If the total duration is even, the minimal difference can be 0\n            results.append(0)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case.\",\n      \"input\": \"A single integer t followed by t lines, each containing three integers a, b, c.\",\n      \"output\": \"A list of tuples, each containing three integers (a, b, c) for each test case.\"\n    },\n    {\n      \"description\": \"Calculate the total duration of all songs for each test case.\",\n      \"input\": \"A tuple (a, b, c) representing the number of one-minute, two-minute, and three-minute songs.\",\n      \"output\": \"An integer representing the total duration of all songs.\"\n    },\n    {\n      \"description\": \"Determine the minimal possible difference in concert durations for each test case.\",\n      \"input\": \"The total duration of all songs and the number of each type of song (a, b, c).\",\n      \"output\": \"An integer representing the minimal possible difference in minutes between the concert durations.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input to get the number of test cases and the song counts for each test case.\",\n    \"For each test case, calculate the total duration of all songs using the formula: total_duration = a * 1 + b * 2 + c * 3.\",\n    \"For each test case, use a dynamic programming approach to find the minimal possible difference in concert durations. This involves finding a subset of songs that can be allocated to one concert such that the absolute difference between the two concert durations is minimized.\",\n    \"Output the minimal possible difference for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'concert': Refers to the two separate groups or sets of songs that need to be formed.\n    'absolute difference': The non-negative difference between the total durations of the two concerts.\n    'minimized': The goal is to make the absolute difference as small as possible.\n\n# [phrase showing quantity relationship]\n    'one-minute', 'two-minute', 'three-minute': These phrases indicate the duration of each type of song. In code, this can be represented by multiplying the count of each type of song by its respective duration (1, 2, or 3) to get the total duration.\n\n# [degree adverb]\n    'minimal': This indicates the smallest possible value. In the context of the problem, it means finding the smallest possible absolute difference between the durations of the two concerts. This can be implemented using a dynamic programming approach to explore all possible distributions of songs.\n\n# [code logic]\n    The steps in the plan are sequential and do not require simultaneous execution. However, the dynamic programming approach to find the minimal possible difference will involve iterating over possible subsets of songs, which can be complex and may require careful implementation to ensure efficiency.\n\n# [edge case]\n    1. (1, 0, 0) = 1\n       Explanation: With only one one-minute song, the minimal difference is 1 since it must be assigned to one concert.\n    2. (0, 0, 0) = 0\n       Explanation: No songs to distribute, so the difference is 0.\n    3. (1, 1, 1) = 0\n       Explanation: As explained in the example, the songs can be distributed to achieve a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases, especially when there are no songs or when the distribution is straightforward.\n    ```python\n    if a == 0 and b == 0 and c == 0:\n        return 0\n    if a + b * 2 + c * 3 == 0:\n        return 0\n    ```\n\nYES", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Dynamic programming approach to find the minimal possible difference\n        # We will use a set to track possible sums of one concert\n        possible_sums = {0}\n        \n        # Add one-minute songs\n        for _ in range(a):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 1)\n            possible_sums.update(new_sums)\n        \n        # Add two-minute songs\n        for _ in range(b):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 2)\n            possible_sums.update(new_sums)\n        \n        # Add three-minute songs\n        for _ in range(c):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 3)\n            possible_sums.update(new_sums)\n        \n        # Find the minimal possible difference\n        min_difference = float('inf')\n        for s in possible_sums:\n            difference = abs(total_duration - 2 * s)\n            min_difference = min(min_difference, difference)\n        \n        results.append(min_difference)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: timed out"}, "Round_1": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Since the number of songs can be very large, we need a more efficient approach\n        # Calculate the total number of minutes\n        total_minutes = a + 2 * b + 3 * c\n        \n        # The minimal difference is the remainder when total_minutes is divided by 2\n        # This is because we can always split the songs into two groups with nearly equal durations\n        min_difference = total_minutes % 2\n        \n        results.append(min_difference)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the total duration of all songs.\",\n      \"details\": \"Sum the durations of all one-minute, two-minute, and three-minute songs.\"\n    },\n    {\n      \"description\": \"Determine the target duration for each concert.\",\n      \"details\": \"Divide the total duration by 2 to find the target duration for each concert.\"\n    },\n    {\n      \"description\": \"Allocate songs to minimize the difference between concert durations.\",\n      \"details\": \"Use a strategy to distribute songs between two concerts such that the absolute difference in their durations is minimized.\"\n    },\n    {\n      \"description\": \"Calculate the minimal possible difference.\",\n      \"details\": \"Compute the absolute difference between the durations of the two concerts after allocation.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data\",\n      \"details\": \"Parse the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case.\"\n    },\n    {\n      \"step\": \"Iterate over each test case\",\n      \"details\": \"For each test case, perform the following steps.\"\n    },\n    {\n      \"step\": \"Calculate total duration\",\n      \"details\": \"Sum the durations of all songs to get the total duration.\"\n    },\n    {\n      \"step\": \"Determine target duration\",\n      \"details\": \"Divide the total duration by 2 to find the target duration for each concert.\"\n    },\n    {\n      \"step\": \"Allocate songs\",\n      \"details\": \"Use a method (e.g., dynamic programming or greedy algorithm) to allocate songs between two concerts to minimize the difference in durations.\"\n    },\n    {\n      \"step\": \"Calculate minimal difference\",\n      \"details\": \"Compute the absolute difference between the durations of the two concerts.\"\n    },\n    {\n      \"step\": \"Output results\",\n      \"details\": \"Print the minimal possible difference for each test case.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference'\n    Explanation: The absolute difference between two values is the non-negative difference between them, calculated as |a - b|. In this context, it refers to the difference in total durations of the two concerts.\n\n    'minimized as much as possible'\n    Explanation: This means that the goal is to make the absolute difference between the durations of the two concerts as small as possible, ideally zero.\n\n# [phrase showing quantity relationship]\n    'one-minute', 'two-minute', 'three-minute'\n    Explanation: These phrases indicate the duration of each type of song. In code, this can be represented by multiplying the number of each type of song by its duration to get the total duration.\n\n# [degree adverb]\n    'minimal'\n    Explanation: This indicates the smallest possible value. In this context, it refers to the smallest possible absolute difference between the durations of the two concerts.\n\n# [code logic]\n    The steps \"Calculate total duration\" and \"Determine target duration\" should be implemented simultaneously as they are directly related. Calculating the total duration is a prerequisite for determining the target duration.\n\n# [edge case]\n    1. (1, 0, 0) = 1\n       Explanation: With only one one-minute song, the best allocation is one concert with the song and the other empty, resulting in a difference of 1.\n    2. (0, 0, 0) = 0\n       Explanation: No songs to allocate, so both concerts have a duration of 0, resulting in a difference of 0.\n    3. (1, 1, 1) = 0\n       Explanation: As explained in the example, one possible allocation is one one-minute and one two-minute song in one concert, and the three-minute song in the other, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where there are no songs or only one type of song.\n    ```python\n    if a == 0 and b == 0 and c == 0:\n        return 0\n    if a + b + c == 1:\n        return max(a, b, c)\n    ```\n\nYES", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If the total duration is odd, the minimal difference is 1\n        if total_duration % 2 == 1:\n            results.append(1)\n        else:\n            results.append(0)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the total duration of all songs.\",\n      \"details\": \"Given the number of one-minute, two-minute, and three-minute songs, calculate the total duration by summing up the products of the number of songs and their respective durations.\"\n    },\n    {\n      \"description\": \"Determine possible distributions of songs between two concerts.\",\n      \"details\": \"Explore different combinations of song distributions between two concerts to minimize the absolute difference in their durations.\"\n    },\n    {\n      \"description\": \"Calculate the absolute difference in durations for each distribution.\",\n      \"details\": \"For each possible distribution of songs, calculate the absolute difference between the total durations of the two concerts.\"\n    },\n    {\n      \"description\": \"Find the minimal possible difference.\",\n      \"details\": \"Identify the distribution that results in the minimal absolute difference in concert durations.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, perform the following steps:\",\n    \"  Calculate the total duration of all songs.\",\n    \"  Generate all possible distributions of songs between two concerts.\",\n    \"  For each distribution, calculate the absolute difference in concert durations.\",\n    \"  Track the minimal absolute difference found.\",\n    \"Output the minimal possible difference for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference'\n    Explanation: The requirement is asking to minimize the absolute difference between the durations of two concerts, meaning the non-negative difference between the total durations of songs assigned to each concert.\n\n    'minimized as much as possible'\n    Explanation: This means finding the distribution of songs that results in the smallest possible absolute difference between the two concerts.\n\n# [phrase showing quantity relationship]\n    'one-minute', 'two-minute', 'three-minute'\n    Explanation: These phrases indicate the duration of each type of song. The total duration of songs in a concert is calculated by multiplying the number of songs by their respective durations.\n\n# [degree adverb]\n    'minimal'\n    Explanation: The requirement is to find the smallest possible absolute difference between the durations of the two concerts.\n\n# [code logic]\n    The steps \"Calculate the total duration of all songs\" and \"Generate all possible distributions of songs between two concerts\" should be considered simultaneously. This can be done by iterating through combinations of song distributions while calculating the total duration for each concert.\n\n# [edge case]\n    Test case: 1 0 0 = 1\n    Explanation: With only one one-minute song, the minimal difference is 1 since it can only be assigned to one concert.\n\n    Test case: 0 0 0 = 0\n    Explanation: With no songs, the difference is 0 as both concerts have a duration of 0.\n\n    Test case: 1 1 0 = 1\n    Explanation: With one one-minute song and one two-minute song, the minimal difference is 1 by assigning one song to each concert.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Code for handling edge cases:\n    ```python\n    if a == 0 and b == 0 and c == 0:\n        return 0\n    if a == 0 and b == 0:\n        return c % 2\n    if a == 0 and c == 0:\n        return b % 2\n    if b == 0 and c == 0:\n        return a % 2\n    ```\n\nYES", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If total duration is odd, the minimal difference is 1\n        # If total duration is even, the minimal difference is 0\n        minimal_diff = total_duration % 2\n        results.append(minimal_diff)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 120, "prompt": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. Luntik aims to allocate all songs into two concerts so that each song is assigned to precisely one concert. He wants the absolute difference in lengths of the concerts to be minimized as much as possible. The duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "rephrase_one", "save_node": false, "parent_index": 100}
