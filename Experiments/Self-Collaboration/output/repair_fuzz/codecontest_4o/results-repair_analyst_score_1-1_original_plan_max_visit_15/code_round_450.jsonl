{"name": "1622_A. Construct a Rectangle", "description": "There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYou are asked to break exactly one of them into two pieces in such a way that: \n\n  * both pieces have positive (strictly greater than 0) integer length; \n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides. \n\n\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "tags": ["geometry", "math"], "difficulty": 7, "id": 1622, "sample_io": [{"input": "4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n", "output": ["YES\nNO\nYES\nYES\n"]}], "test_list": [{"input": "2\n1 2 3\n2 2 4\n", "output": ["YES\nYES\n"]}, {"input": "1\n1 98 99\n", "output": ["YES\n"]}, {"input": "3\n1 1 1\n2 1 3\n5 6 7\n", "output": ["NO\nYES\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 6\n1 2 3\n6 7 8\n10 10 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nYES\n"]}, {"input": "4\n6 1 5\n2 5 2\n2 4 2\n7 101 108\n", "output": ["YES\nNO\nYES\nYES\n"]}, {"input": "1\n100000 100000 100000\n", "output": ["YES\n"]}, {"input": "1\n12344 1 1\n", "output": ["YES\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 2 3\n4 5 6\n", "output": ["YES\nNO\n"]}, {"input": "2\n1 3 3\n2 2 4\n", "output": ["NO\nYES\n"]}, {"input": "1\n1 98 186\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 6 7\n", "output": ["NO\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 108\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "1\n100000 100000 100100\n", "output": ["YES\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 1\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 1 3\n4 5 6\n", "output": ["NO\nNO\n"]}, {"input": "4\n6 1 5\n2 5 2\n2 4 2\n5 9 4\n", "output": ["YES\nNO\nYES\nYES\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 179\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n2 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 1\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n2 1 3\n1 5 6\n", "output": ["YES\nYES\n"]}, {"input": "4\n6 1 10\n2 6 2\n2 4 2\n7 101 144\n", "output": ["NO\nYES\nYES\nNO\n"]}, {"input": "3\n2 1 1\n2 1 2\n3 8 12\n", "output": ["YES\nNO\nNO\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 3\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 2 3\n4 8 6\n", "output": ["YES\nNO\n"]}, {"input": "3\n1 1 1\n1 1 2\n5 6 12\n", "output": ["NO\nYES\nNO\n"]}, {"input": "4\n6 1 10\n2 6 2\n3 4 2\n7 101 144\n", "output": ["NO\nYES\nNO\nNO\n"]}, {"input": "3\n2 1 1\n1 1 2\n5 6 12\n", "output": ["YES\nYES\nNO\n"]}, {"input": "6\n2 2 6\n1 1 2\n3 10 6\n2 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "3\n3 1 1\n2 1 2\n1 8 9\n", "output": ["NO\nNO\nYES\n"]}, {"input": "6\n2 2 4\n1 1 1\n3 5 18\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n1 1 10\n2 6 2\n3 4 2\n7 101 144\n", "output": ["YES\nYES\nNO\nNO\n"]}, {"input": "3\n3 1 1\n2 2 2\n1 8 9\n", "output": ["NO\nYES\nYES\n"]}, {"input": "1\n12344 2 1\n", "output": ["NO\n"]}, {"input": "1\n2 98 186\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 6 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 10 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "1\n100010 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 2 1\n", "output": ["NO\n"]}, {"input": "2\n1 1 3\n1 5 6\n", "output": ["NO\nYES\n"]}, {"input": "1\n2 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 144\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n100110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 4 1\n", "output": ["NO\n"]}, {"input": "1\n1 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n3 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100110 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 3 1\n", "output": ["NO\n"]}, {"input": "1\n100111 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 3 1\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n1 8 12\n", "output": ["YES\nNO\nNO\n"]}, {"input": "1\n100011 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 3 2\n", "output": ["NO\n"]}, {"input": "1\n100011 101001 100100\n", "output": ["NO\n"]}, {"input": "1\n100011 101001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 101001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n100011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n100011 001001 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111001\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001111 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001010 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 111111\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 011111\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011100\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011000\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010011 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010111 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010111 100011 001000\n", "output": ["NO\n"]}, {"input": "1\n010111 000011 001000\n", "output": ["NO\n"]}, {"input": "1\n010111 000011 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 100010 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 100010 000001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 000001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 000011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 000011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 100011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 101011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 000011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 100011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 101011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 101001 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 101001 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 101101 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n010101 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n010101 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n110101 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n110101 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n110101 101101 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101101 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101100 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101110 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101110 101010\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 101010\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 101011\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 100011\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n011111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 101100 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 111110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n100111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n001111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n001101 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011111 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011101 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 111101 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100011\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100000\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 100000\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n000011 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n000011 111001 000011\n", "output": ["NO\n"]}, {"input": "1\n100011 111001 000011\n", "output": ["NO\n"]}, {"input": "1\n100011 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n100011 111101 000010\n", "output": ["NO\n"]}, {"input": "1\n100011 111101 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 111100 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 110100 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 111100 011010\n", "output": ["NO\n"]}, {"input": "1\n100011 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101011 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 110100 011110\n", "output": ["NO\n"]}, {"input": "1\n001111 110100 011110\n", "output": ["NO\n"]}, {"input": "1\n101111 010100 011110\n", "output": ["NO\n"]}, {"input": "1\n101111 010100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 111010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 111011\n", "output": ["NO\n"]}, {"input": "1\n001111 010000 111011\n", "output": ["NO\n"]}, {"input": "1\n001111 010000 111001\n", "output": ["NO\n"]}, {"input": "2\n1 4 3\n2 2 4\n", "output": ["YES\nYES\n"]}, {"input": "1\n1 98 108\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 4\n5 6 7\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100010 100000 100000\n", "output": ["YES\n"]}, {"input": "1\n2465 1 1\n", "output": ["NO\n"]}, {"input": "4\n6 2 5\n2 5 2\n2 4 2\n5 5 4\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "2\n1 3 3\n4 2 4\n", "output": ["NO\nYES\n"]}, {"input": "1\n3 98 186\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n5 6 7\n", "output": ["YES\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 10\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 3 2\n2 4 2\n7 101 108\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "1\n100010 100001 100000\n", "output": ["NO\n"]}, {"input": "1\n19251 2 1\n", "output": ["NO\n"]}, {"input": "2\n1 1 3\n4 5 1\n", "output": ["NO\nYES\n"]}, {"input": "4\n9 1 5\n2 5 2\n2 4 2\n5 9 4\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "6\n2 2 6\n1 1 2\n3 10 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n10 1 10\n2 5 2\n2 4 2\n7 101 179\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n110010 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n8323 2 1\n", "output": ["NO\n"]}, {"input": "1\n3 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 4\n5 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "4\n6 1 9\n2 5 2\n2 4 2\n7 101 144\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n101110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n21283 4 1\n", "output": ["NO\n"]}, {"input": "2\n2 1 3\n1 5 5\n", "output": ["YES\nNO\n"]}, {"input": "1\n1 98 468\n", "output": ["NO\n"]}, {"input": "1\n110110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n35510 2 1\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n3 8 17\n", "output": ["YES\nNO\nNO\n"]}, {"input": "1\n110111 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n12451 3 1\n", "output": ["NO\n"]}, {"input": "3\n3 1 1\n2 1 2\n1 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100001 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 2 2\n", "output": ["NO\n"]}, {"input": "1\n100010 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n100011 100001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 100010\n", "output": ["NO\n"]}, {"input": "1\n110011 000001 110000\n", "output": ["NO\n"]}, {"input": "1\n101011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 111000\n", "output": ["NO\n"]}, {"input": "1\n101011 001101 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 011101 111001\n", "output": ["NO\n"]}, {"input": "1\n100001 001101 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001111 011011\n", "output": ["NO\n"]}, {"input": "1\n101011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001110 110011\n", "output": ["YES\n"]}, {"input": "1\n110111 001010 111011\n", "output": ["NO\n"]}, {"input": "1\n010011 001011 111011\n", "output": ["NO\n"]}, {"input": "1\n110111 000011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 010011 011111\n", "output": ["NO\n"]}, {"input": "1\n010011 000011 011111\n", "output": ["NO\n"]}, {"input": "1\n110011 010011 011101\n", "output": ["NO\n"]}, {"input": "1\n110010 100011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011110\n", "output": ["NO\n"]}, {"input": "1\n111011 100011 011000\n", "output": ["YES\n"]}, {"input": "1\n110011 000011 001100\n", "output": ["NO\n"]}, {"input": "1\n010110 100011 001100\n", "output": ["NO\n"]}], "task_id": "codecontest/154", "repair_prompt": ["There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYour task is to divide precisely one of them into two sections. When you divide the stick, you must ensure that each section has a positive integer length and cannot be zero.\n\n  * the total length of the pieces is equal to the original length of the stick;\n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides.\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYour task is to divide precisely one of them into two sections. When you divide the stick, you must ensure that each section has a positive integer length and cannot be zero. The integers representing the lengths of these pieces should be greater than zero.\n\n  * the total length of the pieces is equal to the original length of the stick;\n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides.\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "There are three sticks with integer lengths l_1, l_2 and l_3. Your task is to divide precisely one of them into two sections, ensuring that each section has a positive integer length and the total length of the pieces is equal to the original length of the stick. When you divide the stick, you must ensure that each section has a positive integer length and cannot be zero. * the total length of the pieces is equal to the original length of the stick; * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides. A square is also considered a rectangle. Determine if it's possible to do that.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def can_form_rectangle(l1, l2, l3):\n    # Check if any of the sticks can be split to form a rectangle\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if the largest stick can be split into two equal parts\n    # and the other two sticks are equal\n    if lengths[0] == lengths[1] and lengths[2] % 2 == 0:\n        return True\n    \n    # Check if the two smaller sticks can be combined to form a pair\n    # with the largest stick\n    if lengths[0] + lengths[1] == lengths[2]:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def can_form_rectangle(l1, l2, l3):\n    # Check if any stick can be split to form a rectangle\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if the largest stick can be split into two equal parts\n    if lengths[2] == lengths[0] + lengths[1]:\n        return True\n    \n    # Check if the two smaller sticks can be equal and the largest can be split\n    if lengths[0] == lengths[1] and lengths[2] % 2 == 0:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if the largest stick can be broken into two equal parts\n    if lengths[2] == lengths[0] + lengths[1]:\n        return True\n    \n    # Check if any two sticks are equal, and the third can be broken into two equal parts\n    if lengths[0] == lengths[1] or lengths[1] == lengths[2]:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if we can form a rectangle by breaking one of the sticks\n    # into two parts and pairing the resulting four sticks into two equal pairs.\n    \n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if we can form a rectangle by breaking the longest stick\n    # into two parts that match the other two sticks\n    if lengths[0] == lengths[1] or lengths[1] == lengths[2]:\n        return True\n    \n    # Check if we can form a rectangle by breaking the longest stick\n    # into two equal parts\n    if lengths[0] + lengths[1] == lengths[2]:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if any stick can be split to form a rectangle\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if the largest stick can be split into two equal parts\n    # and the other two sticks are equal\n    if lengths[0] == lengths[1] and lengths[2] % 2 == 0:\n        return True\n    \n    # Check if the two smaller sticks can be combined to form one side\n    # and the largest stick can be split into two equal parts\n    if lengths[0] + lengths[1] == lengths[2]:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if any stick can be split to form a rectangle\n    sticks = [l1, l2, l3]\n    # Sort the sticks to simplify the logic\n    sticks.sort()\n    \n    # Check if splitting the largest stick can form a rectangle\n    # If the sum of the two smaller sticks equals the largest stick, it can form a rectangle\n    if sticks[0] + sticks[1] == sticks[2]:\n        return True\n    \n    # Check if splitting the largest stick into two equal parts can form a square\n    if sticks[2] % 2 == 0 and sticks[0] == sticks[1] and sticks[0] == sticks[2] // 2:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks have equal lengths and the third stick can be split into two equal parts\n    if l1 == l2 and l3 % 2 == 0:\n        return True\n    if l1 == l3 and l2 % 2 == 0:\n        return True\n    if l2 == l3 and l1 % 2 == 0:\n        return True\n    \n    # Check if the sum of any two sticks equals the third stick\n    if l1 + l2 == l3:\n        return True\n    if l1 + l3 == l2:\n        return True\n    if l2 + l3 == l1:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if any stick can be split to form a rectangle\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if the largest stick can be split into two equal parts\n    if lengths[2] == lengths[0] + lengths[1]:\n        return True\n    \n    # Check if the largest stick can be split into two parts that match the other two sticks\n    if lengths[0] == lengths[1] and lengths[2] % 2 == 0:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Check if breaking l1 can form a rectangle\n    if (l2 == l3) or (l1 % 2 == 0 and l1 // 2 == l2) or (l1 % 2 == 0 and l1 // 2 == l3):\n        return True\n    # Check if breaking l2 can form a rectangle\n    if (l1 == l3) or (l2 % 2 == 0 and l2 // 2 == l1) or (l2 % 2 == 0 and l2 // 2 == l3):\n        return True\n    # Check if breaking l3 can form a rectangle\n    if (l1 == l2) or (l3 % 2 == 0 and l3 // 2 == l1) or (l3 % 2 == 0 and l3 // 2 == l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if any stick can be divided to form a rectangle\n    # Case 1: Divide l1 into two parts\n    if (l2 == l3) or (l1 == l2 + l3):\n        return True\n    # Case 2: Divide l2 into two parts\n    if (l1 == l3) or (l2 == l1 + l3):\n        return True\n    # Case 3: Divide l3 into two parts\n    if (l1 == l2) or (l3 == l1 + l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if any of the sticks can be split to form a rectangle\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if the largest stick can be split into two equal parts\n    # and the other two sticks are equal\n    if lengths[0] == lengths[1] and lengths[2] % 2 == 0:\n        return True\n    \n    # Check if the two smaller sticks can be combined to form a pair\n    # with the largest stick\n    if lengths[0] + lengths[1] == lengths[2]:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Read the first line to get the number of test cases 't'. For each test case, read the line containing three integers representing the lengths of the sticks.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to break one stick into two pieces such that a rectangle can be formed.\",\n      \"details\": \"For each test case, check if any of the three sticks can be split into two parts that, along with the other two sticks, can form a rectangle.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Input Parsing\",\n      \"action\": \"Read the number of test cases 't'. For each test case, read the lengths of the three sticks.\"\n    },\n    {\n      \"step\": \"Rectangle Formation Check\",\n      \"action\": \"For each test case, iterate over the three sticks and attempt to split each stick into two parts. Check if the resulting four sticks can form a rectangle by verifying if there are two pairs of equal lengths.\"\n    },\n    {\n      \"step\": \"Output Results\",\n      \"action\": \"For each test case, output 'YES' if a rectangle can be formed, otherwise output 'NO'.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n    'positive integer length'\n    Explanation: When dividing a stick, each resulting piece must have a length greater than zero.\n\n# [phrase showing quantity relationship]\n    'greater than zero': This means that when dividing a stick, each piece must have a length > 0. In code, this can be checked by ensuring the lengths of the divided pieces are both greater than zero.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps for checking if a rectangle can be formed should be implemented simultaneously. Specifically, when checking if a stick can be split into two parts to form a rectangle, the logic for verifying if two pairs of equal lengths exist should be done in one code block.\n\n# [edge case] \n    Test case: 1 1 1 = YES\n    Explanation: The stick of length 1 can be split into two pieces of length 1 each, forming a square (which is a rectangle).\n\n    Test case: 1 2 3 = NO\n    Explanation: No matter how the sticks are split, it's impossible to form a rectangle with these lengths.\n\n    Test case: 10 5 5 = YES\n    Explanation: The stick of length 10 can be split into two pieces of length 5 each, forming a rectangle with opposite sides of length 5.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if two pairs of equal lengths can be formed will naturally handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any of the sticks can be split to form a rectangle\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if the largest stick can be split into two equal parts\n    # and the other two sticks are equal\n    if lengths[0] == lengths[1] and lengths[2] % 2 == 0:\n        return True\n    \n    # Check if the two smaller sticks can be combined to form a pair\n    # with the largest stick\n    if lengths[0] + lengths[1] == lengths[2]:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Read the first line to get the integer t, which represents the number of test cases. For each subsequent line, read three integers l_1, l_2, and l_3, which represent the lengths of the sticks.\"\n    },\n    {\n      \"description\": \"Determine if a rectangle can be formed by breaking one stick into two pieces.\",\n      \"details\": \"For each test case, check if any of the three sticks can be split into two parts such that the resulting four sticks can form a rectangle. A rectangle can be formed if there are two pairs of equal lengths among the four sticks.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input data to get the number of test cases and the lengths of the sticks for each test case.\",\n    \"For each test case, iterate over the three sticks and attempt to split each stick into two parts.\",\n    \"For each possible split, check if the resulting four sticks can form a rectangle by verifying if there are two pairs of equal lengths.\",\n    \"Store the result ('YES' or 'NO') for each test case based on whether a rectangle can be formed.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. In this context, it means that after breaking one stick, the resulting four sticks should form two pairs of equal lengths.\n\n    'positive integer length'\n    Explanation: When breaking a stick, each resulting piece must have a length greater than zero.\n\n# [phrase showing quantity relationship]\n    'precisely one'\n    Explanation: Only one of the three sticks can be divided into two sections.\n\n    'equal to'\n    Explanation: The total length of the pieces after breaking a stick must be equal to the original length of the stick.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps of iterating over the three sticks and attempting to split each stick into two parts, and checking if the resulting four sticks can form a rectangle should be implemented simultaneously. This can be done by using a loop to iterate over each stick, and within that loop, checking all possible splits and verifying if they form a rectangle.\n\n# [edge case]\n    1. (1, 1, 2) = YES\n       Explanation: The stick of length 2 can be split into two sticks of length 1 each, forming a rectangle with sides 1, 1, 1, 1.\n    2. (1, 1, 1) = NO\n       Explanation: No stick can be split to form a rectangle since all sticks are of length 1.\n    3. (10^8, 10^8, 1) = YES\n       Explanation: The stick of length 10^8 can be split into two sticks of length 5*10^7 each, forming a rectangle with sides 5*10^7, 5*10^7, 10^8, 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking all possible splits and verifying if they form a rectangle will handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any stick can be split to form a rectangle\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if the largest stick can be split into two equal parts\n    if lengths[2] == lengths[0] + lengths[1]:\n        return True\n    \n    # Check if the two smaller sticks can be equal and the largest can be split\n    if lengths[0] == lengths[1] and lengths[2] % 2 == 0:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the first line, which represents the number of test cases.\",\n        \"For each test case, read the three integers l_1, l_2, and l_3 from the input.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if it's possible to break one stick into two pieces such that a rectangle can be formed.\",\n      \"steps\": [\n        \"For each test case, consider each stick as a candidate to be broken into two pieces.\",\n        \"Check if breaking the stick results in two pieces that, along with the other two sticks, can form a rectangle.\",\n        \"A rectangle can be formed if there are two pairs of equal lengths among the four resulting sticks.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"For each test case, print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to get the number of test cases and the lengths of the sticks for each test case.\",\n    \"For each test case, iterate over the three sticks and attempt to break each stick into two pieces.\",\n    \"For each possible break, check if the resulting four sticks can form a rectangle by verifying if there are two pairs of equal lengths.\",\n    \"Store the result ('YES' or 'NO') for each test case.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: In the requirement, a rectangle is defined as a shape with opposite sides of equal length. A square is also considered a rectangle.\n\n# [phrase showing quantity relationship]\n    'precisely one': means that only one stick can be divided into two sections.\n    'positive integer length': means that each section must have a length greater than zero.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented simultaneously when checking if a rectangle can be formed. Specifically, when considering each stick as a candidate to be broken, the check for forming a rectangle should be done in the same code block to ensure efficiency and clarity.\n\n# [edge case] \n    Test case: 1 1 1 = YES\n    Explanation: Breaking any stick into two sections of length 1 results in four sticks of length 1, which can form a square (a type of rectangle).\n    \n    Test case: 1 2 3 = NO\n    Explanation: No matter how you break one of the sticks, you cannot form two pairs of equal lengths.\n    \n    Test case: 10 10 20 = YES\n    Explanation: Breaking the stick of length 20 into two sections of length 10 results in four sticks of lengths 10, 10, 10, and 10, which can form a square.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking for two pairs of equal lengths among the four resulting sticks will handle these cases correctly.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if the largest stick can be broken into two equal parts\n    if lengths[2] == lengths[0] + lengths[1]:\n        return True\n    \n    # Check if any two sticks are equal, and the third can be broken into two equal parts\n    if lengths[0] == lengths[1] or lengths[1] == lengths[2]:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Determine if a stick can be divided into two positive integer lengths.\",\n      \"description\": \"For each stick, check if it can be split into two parts such that both parts are positive integers and their sum equals the original stick length.\"\n    },\n    {\n      \"subproblem\": \"Check if the resulting four sticks can form a rectangle.\",\n      \"description\": \"After dividing one stick, verify if the four sticks can be paired into two equal-length pairs, which is necessary to form a rectangle.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data\",\n      \"description\": \"Read the number of test cases and the lengths of the three sticks for each test case.\"\n    },\n    {\n      \"step\": \"Iterate over each test case\",\n      \"description\": \"For each test case, perform the following steps.\"\n    },\n    {\n      \"step\": \"Check each stick for possible division\",\n      \"description\": \"For each stick, attempt to divide it into two positive integer lengths and check if the resulting four sticks can form a rectangle.\"\n    },\n    {\n      \"step\": \"Determine rectangle formation\",\n      \"description\": \"Check if the four sticks can be paired into two equal-length pairs. If possible, print 'YES'; otherwise, print 'NO'.\"\n    },\n    {\n      \"step\": \"Output results\",\n      \"description\": \"Print the result for each test case, indicating whether a rectangle can be formed.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n# [phrase showing quantity relationship]\n    'precisely one': means that only one stick can be divided into two sections.\n    'positive integer length': means that each section must be greater than zero.\n    'equal to the original length': means the sum of the two sections must be equal to the original stick length.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps \"Check each stick for possible division\" and \"Determine rectangle formation\" should be considered simultaneously. For each stick, attempt to divide it and immediately check if the resulting four sticks can form a rectangle. This can be implemented using a loop that iterates over each stick, attempts division, and checks for rectangle formation in one block.\n\n# [edge case] \n    1 1 1 = NO\n    Explanation: No matter how you divide one of the sticks, you cannot form a rectangle with equal opposite sides.\n    \n    2 2 2 = YES\n    Explanation: Any stick can be divided into two sections of length 1, resulting in four sticks of length 1, which can form a square.\n    \n    10 1 1 = NO\n    Explanation: Dividing the stick of length 10 into two sections results in lengths that cannot pair with the other sticks to form a rectangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking each stick for possible division and rectangle formation will naturally handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if we can form a rectangle by breaking one of the sticks\n    # into two parts and pairing the resulting four sticks into two equal pairs.\n    \n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if we can form a rectangle by breaking the longest stick\n    # into two parts that match the other two sticks\n    if lengths[0] == lengths[1] or lengths[1] == lengths[2]:\n        return True\n    \n    # Check if we can form a rectangle by breaking the longest stick\n    # into two equal parts\n    if lengths[0] + lengths[1] == lengths[2]:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Read the first line to get the number of test cases 't'. For each test case, read the line containing three integers representing the lengths of the sticks.\"\n    },\n    {\n      \"description\": \"Determine if a rectangle can be formed by breaking one stick into two pieces.\",\n      \"details\": \"For each test case, check if any of the three sticks can be split into two parts such that the resulting four sticks can form a rectangle.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Input Parsing\",\n      \"action\": \"Read the number of test cases and the lengths of the sticks for each test case from standard input.\"\n    },\n    {\n      \"step\": \"Rectangle Formation Check\",\n      \"action\": \"For each test case, iterate over the three sticks and attempt to split each stick into two parts. Check if the resulting four sticks can form a rectangle by verifying if there are two pairs of equal lengths.\"\n    },\n    {\n      \"step\": \"Output Results\",\n      \"action\": \"For each test case, output 'YES' if a rectangle can be formed, otherwise output 'NO'.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'divide precisely one of them into two sections'\n    Explanation: This means that only one of the three sticks can be split into two parts, and the sum of the lengths of these two parts must equal the original stick's length.\n\n    'construct a rectangle'\n    Explanation: A rectangle requires two pairs of equal-length sides. After splitting one stick, the four resulting sticks must be able to form such a configuration.\n\n# [phrase showing quantity relationship]\n    'equal to the original length'\n    Explanation: When a stick is divided, the sum of the two resulting sections must be equal to the original stick's length. This can be implemented by ensuring that the sum of the two new lengths equals the original length.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps \"Parse the input\" and \"Output the result\" are separate and should not be implemented simultaneously. However, within the \"Rectangle Formation Check\" step, the logic to split a stick and check for rectangle formation should be implemented in a loop or conditional structure to efficiently handle each test case.\n\n# [edge case]\n    1. (1, 1, 1) = NO\n       Explanation: No matter how you split any stick, you cannot form a rectangle with two pairs of equal lengths.\n    2. (2, 2, 4) = YES\n       Explanation: Split the stick of length 4 into two sticks of length 2, resulting in four sticks of length 2, which can form a square.\n    3. (1, 2, 3) = NO\n       Explanation: No possible split of any stick will result in two pairs of equal lengths.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if any stick can be split to form two pairs of equal lengths will naturally handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any stick can be split to form a rectangle\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if the largest stick can be split into two equal parts\n    # and the other two sticks are equal\n    if lengths[0] == lengths[1] and lengths[2] % 2 == 0:\n        return True\n    \n    # Check if the two smaller sticks can be combined to form one side\n    # and the largest stick can be split into two equal parts\n    if lengths[0] + lengths[1] == lengths[2]:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Determine if a stick can be divided into two sections with positive integer lengths.\",\n      \"details\": \"For each stick, check if it can be split into two parts such that both parts are positive integers and their sum equals the original stick length.\"\n    },\n    {\n      \"description\": \"Check if the resulting four sticks can form a rectangle.\",\n      \"details\": \"After splitting one stick, verify if the four sticks can be paired into two equal-length pairs, which is necessary to form a rectangle.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data\",\n      \"details\": \"Read the number of test cases and the lengths of the three sticks for each test case.\"\n    },\n    {\n      \"step\": \"Iterate over each test case\",\n      \"details\": \"For each test case, perform the following steps.\"\n    },\n    {\n      \"step\": \"Try splitting each stick\",\n      \"details\": \"For each stick, attempt to split it into two sections with positive integer lengths.\"\n    },\n    {\n      \"step\": \"Check rectangle formation\",\n      \"details\": \"For each valid split, check if the resulting four sticks can form a rectangle by verifying if there are two pairs of equal lengths.\"\n    },\n    {\n      \"step\": \"Output result\",\n      \"details\": \"For each test case, output 'YES' if a rectangle can be formed, otherwise output 'NO'.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n# [phrase showing quantity relationship]\n    'equal to': The total length of the pieces after splitting a stick must be equal to the original length of the stick.\n    Implementation: Ensure that the sum of the two sections after splitting a stick equals the original stick length.\n\n# [degree adverb] \n    'precisely': Indicates that exactly one stick must be divided into two sections.\n    Implementation: Ensure that only one stick is split in each test case.\n\n# [code logic]\n    The steps \"Try splitting each stick\" and \"Check rectangle formation\" should be implemented simultaneously.\n    Explanation: For each stick, attempt to split it and immediately check if the resulting four sticks can form a rectangle. This can be done using nested loops or a combined logic block.\n\n# [edge case] \n    Test case: 1 1 1 = YES\n    Explanation: Any stick can be split into two sections of length 1, resulting in four sticks of length 1, which can form a square.\n    \n    Test case: 1 2 3 = NO\n    Explanation: No matter how you split the sticks, you cannot form two pairs of equal lengths.\n    \n    Test case: 10 10 1 = YES\n    Explanation: The stick of length 1 can be split into two sections of length 0.5 each, resulting in two pairs of sticks with lengths 10 and 0.5, forming a rectangle.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Code for handling the edge case:\n    ```python\n    def can_form_rectangle(l1, l2, l3):\n        # Check if any stick can be split to form a rectangle\n        sticks = [l1, l2, l3]\n        for i in range(3):\n            for j in range(1, sticks[i]):\n                if (sticks[i] - j) in sticks and j in sticks:\n                    return True\n        return False\n    ```\n\nYES", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any stick can be split to form a rectangle\n    sticks = [l1, l2, l3]\n    for i in range(3):\n        # Try splitting the stick at index i\n        for j in range(1, sticks[i]):\n            # Create a new list of sticks after splitting\n            new_sticks = sticks[:i] + [j, sticks[i] - j] + sticks[i+1:]\n            # Check if the new list can form a rectangle\n            new_sticks.sort()\n            if new_sticks[0] == new_sticks[1] and new_sticks[2] == new_sticks[3]:\n                return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: timed out"}, "Round_1": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any stick can be split to form a rectangle\n    sticks = [l1, l2, l3]\n    # Sort the sticks to simplify the logic\n    sticks.sort()\n    \n    # Check if splitting the largest stick can form a rectangle\n    # If the sum of the two smaller sticks equals the largest stick, it can form a rectangle\n    if sticks[0] + sticks[1] == sticks[2]:\n        return True\n    \n    # Check if splitting the largest stick into two equal parts can form a square\n    if sticks[2] % 2 == 0 and sticks[0] == sticks[1] and sticks[0] == sticks[2] // 2:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"input\": \"A single integer t followed by t lines, each containing three integers l_1, l_2, l_3.\",\n      \"output\": \"A list of tuples, each containing three integers representing the lengths of the sticks for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, determine if it's possible to break one of the sticks into two pieces such that a rectangle can be formed.\",\n      \"input\": \"A tuple of three integers representing the lengths of the sticks.\",\n      \"output\": \"A boolean value indicating whether a rectangle can be formed.\"\n    },\n    {\n      \"description\": \"Output the result for each test case as 'YES' or 'NO'.\",\n      \"input\": \"A list of boolean values for each test case.\",\n      \"output\": \"A list of strings 'YES' or 'NO' for each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input to get the number of test cases and the lengths of the sticks for each test case.\",\n    \"For each test case, check the following conditions to determine if a rectangle can be formed:\",\n    \"  a. Check if any two sticks have equal lengths and the third stick can be split into two equal parts.\",\n    \"  b. Check if the sum of any two sticks equals the third stick, allowing the third stick to be split into two parts.\",\n    \"Store the result ('YES' or 'NO') for each test case based on the above checks.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'divide precisely one of them into two sections'\n    Explanation: This means that only one stick can be split into two parts, and the sum of the lengths of these two parts must equal the original stick's length.\n\n    'construct a rectangle'\n    Explanation: A rectangle requires two pairs of equal-length sides. After splitting one stick, the four resulting sticks must form two pairs of equal lengths.\n\n# [phrase showing quantity relationship]\n    'equal to'\n    Explanation: The total length of the pieces after splitting must equal the original stick's length. In code, this means ensuring that the sum of the two new pieces equals the original stick's length.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps to check if a rectangle can be formed should be implemented simultaneously. Specifically, the conditions:\n    - Check if any two sticks have equal lengths and the third stick can be split into two equal parts.\n    - Check if the sum of any two sticks equals the third stick, allowing the third stick to be split into two parts.\n    These checks can be done in a single if-else block for each test case.\n\n# [edge case]\n    (1, 1, 2) = YES\n    Explanation: The third stick can be split into two parts of length 1 each, forming a rectangle with sides 1, 1, 1, 1.\n    \n    (1, 2, 3) = NO\n    Explanation: No matter how you split any stick, you cannot form two pairs of equal lengths.\n    \n    (2, 2, 4) = YES\n    Explanation: The third stick can be split into two parts of length 2 each, forming a rectangle with sides 2, 2, 2, 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking the conditions for forming a rectangle will naturally handle these cases.\n\nYES", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks have equal lengths and the third stick can be split into two equal parts\n    if l1 == l2 and l3 % 2 == 0:\n        return True\n    if l1 == l3 and l2 % 2 == 0:\n        return True\n    if l2 == l3 and l1 % 2 == 0:\n        return True\n    \n    # Check if the sum of any two sticks equals the third stick\n    if l1 + l2 == l3:\n        return True\n    if l1 + l3 == l2:\n        return True\n    if l2 + l3 == l1:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Determine if a stick can be divided into two sections with positive integer lengths.\",\n      \"details\": \"For each stick, check if it can be split into two parts such that both parts are greater than zero and their sum equals the original stick length.\"\n    },\n    {\n      \"description\": \"Check if the resulting four sticks can form a rectangle.\",\n      \"details\": \"After dividing one stick, check if the four sticks can be paired into two equal-length pairs, which is necessary to form a rectangle.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read the number of test cases.\",\n      \"details\": \"Parse the integer t from the input, which represents the number of test cases.\"\n    },\n    {\n      \"step\": \"Iterate over each test case.\",\n      \"details\": \"For each test case, read the three stick lengths l_1, l_2, and l_3.\"\n    },\n    {\n      \"step\": \"For each test case, attempt to divide each stick.\",\n      \"details\": \"For each stick, try dividing it into two parts and check if the resulting four sticks can form a rectangle.\"\n    },\n    {\n      \"step\": \"Check rectangle formation.\",\n      \"details\": \"Verify if the four sticks can be paired into two equal-length pairs. If possible, print 'YES'; otherwise, print 'NO'.\"\n    },\n    {\n      \"step\": \"Output the result for each test case.\",\n      \"details\": \"Print 'YES' or 'NO' for each test case based on whether a rectangle can be formed.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'divide precisely one of them into two sections'\n    Explanation: This means that only one of the three sticks can be split into two parts, and the sum of these two parts must equal the original stick length.\n\n    'construct a rectangle'\n    Explanation: This means that after splitting one stick, the resulting four sticks must be able to form a rectangle, which requires two pairs of equal-length sticks.\n\n# [phrase showing quantity relationship]\n    'greater than zero'\n    Explanation: Each section of the divided stick must have a length greater than zero. In code, this means ensuring that both parts of the split stick are positive integers.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps \"For each test case, attempt to divide each stick\" and \"Check rectangle formation\" should be implemented simultaneously. This can be done by iterating over each stick, attempting to split it, and immediately checking if the resulting four sticks can form a rectangle.\n\n# [edge case]\n    1. (1, 1, 2) = NO\n       Explanation: No matter how you split any stick, you cannot form two pairs of equal-length sticks.\n    2. (2, 2, 2) = YES\n       Explanation: Split any stick into two parts of length 1 and 1, resulting in four sticks of lengths 1, 1, 2, 2, which can form a rectangle.\n    3. (1, 2, 3) = NO\n       Explanation: Splitting any stick will not result in two pairs of equal-length sticks.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of attempting to split each stick and checking for rectangle formation will naturally handle these cases.\n\nYES", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any stick can be split to form a rectangle\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if the largest stick can be split into two equal parts\n    if lengths[2] == lengths[0] + lengths[1]:\n        return True\n    \n    # Check if the largest stick can be split into two parts that match the other two sticks\n    if lengths[0] == lengths[1] and lengths[2] % 2 == 0:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the first line, which represents the number of test cases.\",\n        \"For each test case, read the three integers l_1, l_2, and l_3 from the subsequent lines.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if it's possible to break one stick into two pieces such that a rectangle can be formed.\",\n      \"steps\": [\n        \"For each test case, consider each stick as a candidate to be broken into two pieces.\",\n        \"Check if breaking the stick results in two pieces that, along with the other two sticks, can form a rectangle.\",\n        \"A rectangle can be formed if there are two pairs of equal lengths among the four resulting sticks.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"For each test case, print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n    \"For each test case, iterate over the three sticks and attempt to break each stick into two pieces.\",\n    \"For each attempt, check if the resulting four sticks can form a rectangle by verifying if there are two pairs of equal lengths.\",\n    \"Store the result ('YES' or 'NO') for each test case.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n    'positive integer length'\n    Explanation: When dividing a stick, each resulting piece must have a length greater than zero.\n\n# [phrase showing quantity relationship]\n    'greater than zero'\n    Explanation: This means that when dividing a stick, each piece must have a length that is strictly positive, i.e., greater than zero. In code, this can be implemented by ensuring that the lengths of the divided pieces are both greater than zero.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan related to checking if a rectangle can be formed should be implemented simultaneously. Specifically, when considering breaking a stick, the check for forming a rectangle should be done in the same code block where the stick is divided.\n\n# [edge case]\n    Case 1: (1, 1, 1) = NO\n    Explanation: No matter how you divide one of the sticks, you cannot form a rectangle because you cannot have two pairs of equal lengths.\n    \n    Case 2: (2, 2, 4) = YES\n    Explanation: You can break the stick of length 4 into two pieces of length 2 each, resulting in four sticks of lengths 2, 2, 2, 2, which can form a square.\n    \n    Case 3: (3, 3, 6) = YES\n    Explanation: You can break the stick of length 6 into two pieces of length 3 each, resulting in four sticks of lengths 3, 3, 3, 3, which can form a square.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking for two pairs of equal lengths among the four sticks will naturally handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Check if breaking l1 can form a rectangle\n    if (l2 == l3) or (l1 % 2 == 0 and l1 // 2 == l2) or (l1 % 2 == 0 and l1 // 2 == l3):\n        return True\n    # Check if breaking l2 can form a rectangle\n    if (l1 == l3) or (l2 % 2 == 0 and l2 // 2 == l1) or (l2 % 2 == 0 and l2 // 2 == l3):\n        return True\n    # Check if breaking l3 can form a rectangle\n    if (l1 == l2) or (l3 % 2 == 0 and l3 // 2 == l1) or (l3 % 2 == 0 and l3 // 2 == l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Determine if a stick can be divided into two positive integer lengths.\",\n      \"description\": \"For each stick, check if it can be split into two parts such that both parts are positive integers and their sum equals the original stick length.\"\n    },\n    {\n      \"subproblem\": \"Check if the resulting four sticks can form a rectangle.\",\n      \"description\": \"After dividing one stick, verify if the four sticks can be paired into two equal-length pairs, which is necessary to form a rectangle.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data\",\n      \"description\": \"Read the number of test cases and the lengths of the three sticks for each test case.\"\n    },\n    {\n      \"step\": \"Iterate over each test case\",\n      \"description\": \"For each test case, perform the following steps.\"\n    },\n    {\n      \"step\": \"Check each stick for possible division\",\n      \"description\": \"For each stick, attempt to divide it into two positive integer lengths and check if the resulting four sticks can form a rectangle.\"\n    },\n    {\n      \"step\": \"Determine rectangle formation\",\n      \"description\": \"For each division attempt, check if the four sticks can be paired into two equal-length pairs.\"\n    },\n    {\n      \"step\": \"Output result\",\n      \"description\": \"For each test case, output 'YES' if a rectangle can be formed, otherwise output 'NO'.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'divide precisely one of them into two sections'\n    Explanation: This means that only one of the three sticks can be split into two parts, and the sum of these parts must equal the original stick length.\n\n    'construct a rectangle'\n    Explanation: This means that after dividing one stick, the resulting four sticks must be able to form a rectangle, which requires two pairs of equal-length sticks.\n\n# [phrase showing quantity relationship]\n    'precisely one': This indicates that only one stick can be divided, not more than one.\n    'equal to the original length': This means the sum of the two sections must be exactly the same as the original stick length.\n    'four sticks': This refers to the total number of sticks after one stick is divided into two.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps \"Check each stick for possible division\" and \"Determine rectangle formation\" should be implemented simultaneously. This can be done by iterating over each stick, attempting to divide it, and immediately checking if the resulting four sticks can form a rectangle.\n\n# [edge case]\n    1. (1, 1, 1) = NO\n       Explanation: No matter how you divide any stick, you cannot form a rectangle with four sticks of these lengths.\n    2. (2, 2, 4) = YES\n       Explanation: Divide the stick of length 4 into two sticks of length 2, resulting in four sticks of length 2, which can form a square.\n    3. (3, 3, 6) = YES\n       Explanation: Divide the stick of length 6 into two sticks of length 3, resulting in four sticks of length 3, which can form a square.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking each stick for possible division and rectangle formation will naturally handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any stick can be divided to form a rectangle\n    # Case 1: Divide l1 into two parts\n    if (l2 == l3) or (l1 == l2 + l3):\n        return True\n    # Case 2: Divide l2 into two parts\n    if (l1 == l3) or (l2 == l1 + l3):\n        return True\n    # Case 3: Divide l3 into two parts\n    if (l1 == l2) or (l3 == l1 + l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Read the first line to get the number of test cases 't'. For each test case, read the line containing three integers representing the lengths of the sticks.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to break one stick into two pieces such that a rectangle can be formed.\",\n      \"details\": \"For each test case, check if any of the three sticks can be split into two parts that, along with the other two sticks, can form a rectangle.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Input Parsing\",\n      \"action\": \"Read the number of test cases 't'. For each test case, read the lengths of the three sticks.\"\n    },\n    {\n      \"step\": \"Rectangle Formation Check\",\n      \"action\": \"For each test case, iterate over the three sticks and attempt to split each stick into two parts. Check if the resulting four sticks can form a rectangle by verifying if there are two pairs of equal lengths.\"\n    },\n    {\n      \"step\": \"Output Results\",\n      \"action\": \"For each test case, output 'YES' if a rectangle can be formed, otherwise output 'NO'.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n    'positive integer length'\n    Explanation: When dividing a stick, each resulting piece must have a length greater than zero.\n\n# [phrase showing quantity relationship]\n    'greater than zero': This means that when dividing a stick, each piece must have a length > 0. In code, this can be checked by ensuring the lengths of the divided pieces are both greater than zero.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps for checking if a rectangle can be formed should be implemented simultaneously. Specifically, when checking if a stick can be split into two parts to form a rectangle, the logic for verifying if two pairs of equal lengths exist should be done in one code block.\n\n# [edge case] \n    Test case: 1 1 1 = YES\n    Explanation: The stick of length 1 can be split into two pieces of length 1 each, forming a square (which is a rectangle).\n\n    Test case: 1 2 3 = NO\n    Explanation: No matter how the sticks are split, it's impossible to form a rectangle with these lengths.\n\n    Test case: 10 5 5 = YES\n    Explanation: The stick of length 10 can be split into two pieces of length 5 each, forming a rectangle with opposite sides of length 5.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if two pairs of equal lengths can be formed will naturally handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any of the sticks can be split to form a rectangle\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if the largest stick can be split into two equal parts\n    # and the other two sticks are equal\n    if lengths[0] == lengths[1] and lengths[2] % 2 == 0:\n        return True\n    \n    # Check if the two smaller sticks can be combined to form a pair\n    # with the largest stick\n    if lengths[0] + lengths[1] == lengths[2]:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [false, false, false, true, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 450, "prompt": "There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYour task is to divide precisely one of them into two sections. When you divide the stick, you must ensure that each section has a positive integer length and cannot be zero.\n\n  * the total length of the pieces is equal to the original length of the stick;\n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides.\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "mutate_method": "expand_one2two", "save_node": true, "parent_index": 115}
