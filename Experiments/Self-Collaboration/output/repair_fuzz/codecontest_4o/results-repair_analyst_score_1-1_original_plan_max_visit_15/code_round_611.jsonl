{"name": "1579_B. Shifting Sort", "description": "The new generation external memory contains an array of integers a[1 \u2026 n] = [a_1, a_2, \u2026, a_n].\n\nThis type of memory does not support changing the value of an arbitrary element. Instead, it allows you to cut out any segment of the given array, cyclically shift (rotate) it by any offset and insert it back into the same place.\n\nTechnically, each cyclic shift consists of two consecutive actions: \n\n  1. You may select arbitrary indices l and r (1 \u2264 l < r \u2264 n) as the boundaries of the segment. \n  2. Then you replace the segment a[l \u2026 r] with it's cyclic shift to the left by an arbitrary offset d. The concept of a cyclic shift can be also explained by following relations: the sequence [1, 4, 1, 3] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by the offset 1 and the sequence [4, 1, 3, 1] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by the offset 2. \n\n\n\nFor example, if a = [1, \\color{blue}{3, 2, 8}, 5], then choosing l = 2, r = 4 and d = 2 yields a segment a[2 \u2026 4] = [3, 2, 8]. This segment is then shifted by the offset d = 2 to the left, and you get a segment [8, 3, 2] which then takes the place of of the original elements of the segment. In the end you get a = [1, \\color{blue}{8, 3, 2}, 5].\n\nSort the given array a using no more than n cyclic shifts of any of its segments. Note that you don't need to minimize the number of cyclic shifts. Any method that requires n or less cyclic shifts will be accepted.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain the descriptions of the test cases. \n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 50) \u2014 the length of the array. The second line consists of space-separated elements of the array a_i (-10^9 \u2264 a_i \u2264 10^9). Elements of array a may repeat and don't have to be unique.\n\nOutput\n\nPrint t answers to all input test cases. \n\nThe first line of the answer of each test case should contain an integer k (0 \u2264 k \u2264 n) \u2014 the number of actions to sort the array. The next k lines should contain descriptions of the actions formatted as \"l r d\" (without quotes) where l and r (1 \u2264 l < r \u2264 n) are the boundaries of the segment being shifted, while d (1 \u2264 d \u2264 r - l) is the offset value. Please remember that only the cyclic shifts to the left are considered so the chosen segment will be shifted by the offset d to the to the left.\n\nNote that you are not required to find the minimum number of cyclic shifts needed for sorting. Any sorting method where the number of shifts does not exceed n will be accepted.\n\nIf the given array a is already sorted, one of the possible answers is k = 0 and an empty sequence of cyclic shifts.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n\n\nOutput\n\n\n1\n1 2 1\n1\n1 3 2\n3\n2 4 1\n2 3 1\n1 3 2\n4\n2 4 2\n1 5 3\n1 2 1\n1 3 1\n\nNote\n\nExplanation of the fourth data set in the example: \n\n  1. The segment a[2 \u2026 4] is selected and is shifted to the left by 2: [2, \\color{blue}{5, 1, 4}, 3] \\longrightarrow [2, \\color{blue}{4, 5, 1}, 3] \n  2. The segment a[1 \u2026 5] is then selected and is shifted to the left by 3: [\\color{blue}{2, 4, 5, 1, 3}] \\longrightarrow [\\color{blue}{1, 3, 2, 4, 5}] \n  3. After that the segment a[1 \u2026 2] is selected and is shifted to the left by 1: [\\color{blue}{1, 3}, 2, 4, 5] \\longrightarrow [\\color{blue}{3, 1}, 2, 4, 5] \n  4. And in the end the segment a[1 \u2026 3] is selected and is shifted to the left by 1: [\\color{blue}{3, 1, 2}, 4, 5] \\longrightarrow [\\color{blue}{1, 2, 3}, 4, 5] ", "tags": ["implementation", "sortings"], "difficulty": 8, "id": 1579, "sample_io": [{"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}], "test_list": [{"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 0 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n2 4 1 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 1 1\n4\n2 4 -1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n0\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 6\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n2\n1 3 2\n3 4 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 0\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 0 3\n5\n2 5 1 4 0\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n1 4 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 4\n5\n2 5 1 4 6\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 0\n4\n0 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 1\n4\n1 4 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 1 1\n4\n1 4 0 3\n5\n2 5 1 4 0\n", "output": ["1\n1 2 1\n0\n2\n1 3 2\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 1 1\n4\n2 4 -1 5\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n0\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 0\n4\n2 4 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n2 4 0\n4\n0 6 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 0 5\n5\n2 10 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 1\n3\n1 2 1\n4\n0 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 0 5\n5\n2 10 2 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n1 3 2\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 1 1\n4\n2 4 -1 5\n5\n2 6 1 4 3\n", "output": ["0\n0\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 4 0\n4\n-1 0 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n0\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n1 1\n3\n1 2 1\n4\n1 4 0 3\n5\n2 5 1 4 0\n", "output": ["0\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 1\n4\n1 2 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n1\n2 3 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 4 0\n4\n0 6 1 3\n5\n2 5 1 0 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 4 3\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n2 4 0\n4\n0 6 1 3\n5\n2 5 1 4 0\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 3 0\n4\n0 6 1 3\n5\n2 3 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n2\n1 3 2\n4 5 1\n"]}, {"input": "4\n2\n1 2\n3\n1 2 1\n4\n1 4 1 3\n5\n2 5 1 6 3\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n2 2\n3\n1 2 1\n4\n2 4 0 5\n5\n2 10 1 4 3\n", "output": ["0\n1\n2 3 1\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 1\n3\n1 2 1\n4\n0 4 1 3\n5\n2 0 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 2 1\n2 3 1\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n0 2 0\n4\n-1 6 1 3\n5\n0 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n2 4 0\n4\n0 9 1 3\n5\n1 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 6 0 5\n5\n2 10 2 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n1 1\n3\n1 2 1\n4\n1 4 0 3\n5\n0 5 1 4 0\n", "output": ["0\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n2 5 3\n3 4 1\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n0 4 -1 4\n5\n2 5 2 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 0\n4\n2 3 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 1\n4\n2 4 0 5\n5\n2 3 1 4 3\n", "output": ["0\n1\n2 3 1\n1\n1 3 2\n2\n1 3 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n4 8 -1 3\n5\n0 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n2 4 2\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 3 1\n4\n2 13 -1 3\n5\n0 0 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n1\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 1 1\n4\n2 13 -1 3\n5\n0 0 1 4 3\n", "output": ["1\n1 2 1\n0\n2\n1 3 2\n3 4 1\n1\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n0 4 -1 3\n5\n2 0 -1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n2 3 1\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n0 4 -1 3\n5\n2 0 -1 1 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n2 3 1\n3 4 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 4\n5\n2 8 1 4 6\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n1 3 2\n3\n1 3 2\n3 4 1\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 2 4 6\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n2\n2 3 1\n3 4 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 0\n4\n-1 2 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n1\n2 3 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n0 2 0\n4\n-1 6 1 0\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 4 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n0 4 -1 4\n5\n2 5 1 8 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n2 1\n3\n1 4 0\n4\n0 2 1 3\n5\n2 5 1 0 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n1\n2 3 1\n3\n1 4 3\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n2 4 0\n4\n0 6 1 3\n5\n2 5 1 4 0\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n4 3 0\n4\n0 6 1 3\n5\n2 3 1 4 3\n", "output": ["1\n1 2 1\n2\n1 3 2\n2 3 1\n2\n2 3 1\n3 4 1\n2\n1 3 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n0 0 0\n4\n-1 6 1 3\n5\n2 5 1 4 3\n", "output": ["0\n0\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 4 0\n4\n-1 0 0 3\n5\n2 5 1 8 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n0\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n3 0\n3\n2 4 0\n4\n0 15 1 0\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 4 2\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 1 4\n5\n0 5 1 4 11\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 1\n4\n2 1 0 5\n5\n2 3 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n1 3 2\n2 3 1\n2\n1 3 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n2 8 -1 3\n5\n0 5 1 8 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n2\n2 3 1\n3 5 2\n"]}, {"input": "4\n2\n0 1\n3\n2 4 0\n4\n1 9 1 3\n5\n1 5 2 4 0\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 5 4\n3 4 1\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 1 1\n4\n4 8 -1 3\n5\n0 5 1 4 3\n", "output": ["1\n1 2 1\n0\n2\n1 3 2\n2 4 2\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n1 4 -1 3\n5\n1 28 -1 4 5\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 4 1\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n0 2 -1 3\n5\n2 0 -1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n1 3 2\n3\n1 3 2\n2 3 1\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 2\n4\n2 4 2 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n0\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n2 4 0\n4\n0 6 1 3\n5\n2 5 1 0 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 4 3\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 3 0\n4\n0 6 1 0\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 4 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 1\n3\n1 2 1\n4\n1 4 0 3\n5\n0 10 1 4 0\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n2 5 3\n3 4 1\n4 5 1\n"]}, {"input": "4\n2\n4 1\n3\n1 5 0\n4\n0 6 1 3\n5\n2 5 1 7 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n3 1\n3\n1 2 1\n4\n0 8 1 3\n5\n2 5 1 8 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n2 2\n3\n1 4 1\n4\n2 4 0 5\n5\n2 10 2 4 3\n", "output": ["0\n1\n2 3 1\n1\n1 3 2\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 4 0\n4\n0 2 1 3\n5\n4 5 1 0 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n1\n2 3 1\n3\n1 4 3\n2 4 2\n3 5 2\n"]}, {"input": "4\n2\n2 2\n3\n1 2 -1\n4\n2 4 -1 4\n5\n4 5 1 6 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n2\n1 3 2\n2 5 3\n"]}, {"input": "4\n2\n2 2\n3\n1 2 1\n4\n1 4 1 3\n5\n2 5 1 6 5\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n2\n1 3 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 1\n4\n2 7 0 5\n5\n2 10 2 4 3\n", "output": ["0\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n4 2\n3\n0 2 0\n4\n-1 2 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n2 3 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 1\n3\n1 2 1\n4\n1 7 0 3\n5\n2 0 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 2 1\n2 3 1\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n0 4 0\n4\n0 9 0 3\n5\n1 6 2 4 3\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 2\n4\n2 4 2 3\n5\n2 5 1 4 0\n", "output": ["1\n1 2 1\n0\n2\n2 3 1\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n1 2\n3\n1 1 1\n4\n2 4 0 3\n5\n2 5 1 4 3\n", "output": ["0\n0\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n1 1\n3\n1 2 0\n4\n0 0 1 3\n5\n2 5 0 4 3\n", "output": ["0\n1\n1 3 2\n0\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 1\n3\n1 2 1\n4\n0 8 1 3\n5\n4 5 1 8 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n2\n1 3 2\n2 5 3\n"]}, {"input": "4\n2\n0 1\n3\n1 4 0\n4\n0 2 1 3\n5\n4 5 1 0 3\n", "output": ["0\n1\n1 3 2\n1\n2 3 1\n3\n1 4 3\n2 4 2\n3 5 2\n"]}, {"input": "4\n2\n2 2\n3\n1 2 -1\n4\n2 4 -1 4\n5\n1 5 1 6 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n2\n2 3 1\n3 5 2\n"]}, {"input": "4\n2\n2 1\n3\n0 4 -1\n4\n-1 6 1 3\n5\n0 5 1 8 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n2\n2 3 1\n3 5 2\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n2 1 -1 3\n5\n0 5 0 8 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n2 3 1\n2\n2 3 1\n3 5 2\n"]}, {"input": "4\n2\n2 1\n3\n1 2 2\n4\n2 2 2 3\n5\n2 5 1 4 0\n", "output": ["1\n1 2 1\n0\n0\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n1 1\n3\n1 2 0\n4\n0 0 1 3\n5\n2 5 0 6 3\n", "output": ["0\n1\n1 3 2\n0\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n3 1\n3\n1 2 2\n4\n0 8 1 3\n5\n4 5 1 8 3\n", "output": ["1\n1 2 1\n0\n2\n2 3 1\n3 4 1\n2\n1 3 2\n2 5 3\n"]}, {"input": "4\n2\n2 1\n3\n-2 2 0\n4\n3 8 1 6\n5\n2 5 1 6 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n2 4 1 3\n5\n2 0 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n1 2 1\n2 3 1\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 0 3\n5\n2 5 1 5 0\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n2\n1 5 4\n2 4 2\n"]}, {"input": "4\n2\n2 0\n3\n1 2 0\n4\n2 4 1 3\n5\n2 5 1 4 6\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n2\n1 3 2\n3 4 1\n"]}, {"input": "4\n2\n3 0\n3\n1 2 1\n4\n2 4 -1 0\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n2 4 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 3 0\n4\n0 6 1 3\n5\n1 2 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n2\n2 3 1\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n2 8 1 6\n5\n1 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n0 2 0\n4\n2 4 1 3\n5\n2 5 1 6 3\n", "output": ["0\n1\n2 3 1\n2\n1 3 2\n3 4 1\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n2 1\n3\n1 2 -1\n4\n2 4 1 3\n5\n2 5 1 8 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n2 1\n3\n0 4 0\n4\n0 6 1 3\n5\n2 5 1 0 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 4 3\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n2 4 0\n4\n0 9 1 3\n5\n1 2 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n2\n2 3 1\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n2 1 0\n4\n0 9 1 3\n5\n1 5 2 4 3\n", "output": ["0\n2\n1 3 2\n2 3 1\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n1 2 0\n4\n2 3 1 3\n5\n2 9 2 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n1\n1 3 2\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n2 4 0\n4\n0 9 0 3\n5\n1 8 2 4 1\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 5 3\n3 4 1\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 1 1\n4\n4 18 -1 3\n5\n0 0 1 4 3\n", "output": ["1\n1 2 1\n0\n2\n1 3 2\n2 4 2\n1\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 1 2\n4\n2 18 -1 3\n5\n0 -1 1 4 3\n", "output": ["1\n1 2 1\n0\n2\n1 3 2\n3 4 1\n2\n1 2 1\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 0\n4\n1 4 0 3\n5\n2 5 1 4 0\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 2 8 6\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n2\n2 3 1\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n0 2 0\n4\n2 4 0 3\n5\n2 5 1 4 6\n", "output": ["0\n1\n2 3 1\n2\n1 3 2\n3 4 1\n2\n1 3 2\n3 4 1\n"]}, {"input": "4\n2\n2 2\n3\n0 2 0\n4\n0 4 -1 4\n5\n2 5 1 8 3\n", "output": ["0\n1\n2 3 1\n1\n1 3 2\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n2 1\n3\n1 4 1\n4\n0 2 1 3\n5\n2 5 1 0 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n2 3 1\n3\n1 4 3\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 4 0\n4\n-1 0 -1 3\n5\n2 5 1 8 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n1\n2 3 1\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n2 -1\n3\n2 1 3\n4\n1 18 -1 3\n5\n0 0 1 4 3\n", "output": ["1\n1 2 1\n1\n1 2 1\n2\n1 3 2\n3 4 1\n1\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 2\n4\n2 4 2 3\n5\n2 5 1 4 6\n", "output": ["1\n1 2 1\n0\n2\n2 3 1\n3 4 1\n2\n1 3 2\n3 4 1\n"]}, {"input": "4\n2\n3 1\n3\n1 2 1\n4\n1 2 0 3\n5\n0 10 1 4 0\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n1 3 2\n3\n2 5 3\n3 4 1\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 -1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 -1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n2 4 0 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n1 4 0 3\n5\n2 5 1 4 0\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 -1 3\n5\n2 5 0 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n1 4 0 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 0\n4\n0 6 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 1\n4\n1 4 2 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n1 4 -1 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 4 0\n4\n0 6 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n2 4 0\n4\n0 6 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 4 0\n4\n0 6 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 3 0\n4\n0 6 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 6 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 0 3\n5\n2 10 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n2 8 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 6\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n2\n1 3 2\n3 4 1\n"]}, {"input": "4\n2\n2 2\n3\n1 3 0\n4\n1 4 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n1 2 1\n4\n2 4 -1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n2 4 -1 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 1\n3\n1 2 0\n4\n0 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 1\n3\n1 2 1\n4\n1 4 0 3\n5\n2 5 1 4 0\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n1 2\n3\n1 2 1\n4\n1 4 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 -1 3\n5\n2 5 -1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 0\n4\n-1 6 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 2\n3\n1 2 0\n4\n1 4 -1 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n4 1\n3\n1 4 0\n4\n0 6 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 4 0\n4\n0 8 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 3 0\n4\n0 6 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 4 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n2 8 1 6\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 1 1\n4\n2 4 -1 5\n5\n2 6 1 4 3\n", "output": ["1\n1 2 1\n0\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 0\n4\n2 6 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n1 2 1\n4\n0 4 -1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n0 2 0\n4\n-1 6 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 2\n3\n1 2 0\n4\n1 4 -1 2\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 4 0\n4\n0 6 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n2 4 0\n4\n0 9 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 4 0\n4\n-1 8 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 3 1\n4\n0 6 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n0 2 1\n4\n0 4 -1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n0 2 0\n4\n-1 6 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 4 0\n4\n0 9 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n0 2 0\n4\n-1 8 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 4 0\n4\n0 15 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 4 1\n4\n2 4 0 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n0 2 0\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 -1\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n2 4 -1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 4\n3\n1 2 0\n4\n2 4 0 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 1 4\n5\n2 5 1 4 6\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n0 4 -1 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n2 3 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 -1\n4\n2 4 -1 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n1 7 0 3\n5\n2 5 1 4 0\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n1 4 -1 3\n5\n2 5 -1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n1 2\n3\n1 2 0\n4\n1 4 -1 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 4 0\n4\n0 8 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n2 3 0\n4\n0 6 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n0 2 0\n4\n2 8 1 6\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 2\n3\n1 2 -1\n4\n1 4 -1 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n2 4 0\n4\n-1 8 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n0 4 0\n4\n-1 6 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 4 0\n4\n-1 0 0 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n0\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n0 2 0\n4\n-1 11 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n2 4 0\n4\n0 15 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 2\n3\n0 2 0\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n2 4 -1 3\n5\n0 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 4\n3\n1 2 0\n4\n2 4 0 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 1 4\n5\n2 5 1 4 11\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 -1\n4\n2 4 -1 4\n5\n2 9 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n1 4 -1 3\n5\n2 9 -1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 0\n3\n2 3 0\n4\n0 6 1 3\n5\n1 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 1\n3\n1 2 1\n4\n0 7 1 3\n5\n2 0 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 2 1\n2 3 1\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n-1 2 0\n4\n-1 6 1 3\n5\n0 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n2 4 0\n4\n0 9 1 3\n5\n1 5 2 4 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 -2\n3\n2 4 0\n4\n-1 8 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n2 4 -1\n4\n0 15 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n2 8 -1 3\n5\n0 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n1 2 0\n4\n2 3 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 -1\n4\n2 4 -1 6\n5\n2 9 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n1 4 -1 3\n5\n2 9 -1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n-1 2 0\n4\n-1 12 1 3\n5\n0 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n2 4 0\n4\n1 9 1 3\n5\n1 5 2 4 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 -2\n3\n2 4 0\n4\n-1 8 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n2 4 -1\n4\n0 15 1 3\n5\n1 5 1 4 2\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n1 2 0\n4\n2 3 1 3\n5\n2 9 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n1 4 -1 3\n5\n2 14 -1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n2 4 0\n4\n0 9 0 3\n5\n1 5 2 4 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n2 6 -1\n4\n0 15 1 3\n5\n1 5 1 4 2\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}], "task_id": "codecontest/14", "repair_prompt": ["The new generation external memory contains an array of integers a[1 \u2026 n] = [a_1, a_2, \u2026, a_n]. This type of memory does not support changing the value of an arbitrary element. However, it allows you to cut out any segment of the given array, cyclically shift (rotate) it by any offset, and insert it back into the same place. Technically, each cyclic shift consists of two consecutive actions: 1. You may select arbitrary indices l and r (1 \u2264 l < r \u2264 n) as the boundaries of the segment. 2. Then you replace the segment a[l \u2026 r] with its cyclic shift to the left by an arbitrary offset d; the sequence [1, 4, 1, 3] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by offset 1, and the sequence [4, 1, 3, 1] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by offset 2. For example, if a = [1, \\color{blue}{3, 2, 8}, 5], then choosing l = 2, r = 4 and d = 2 yields a segment a[2 \u2026 4] = [3, 2, 8] which is then shifted by the offset d = 2 to the left, and you get a segment [8, 3, 2] which then takes the place of the original elements of the segment, resulting in a = [1, \\color{blue}{8, 3, 2}, 5]. Sort the given array a using no more than n cyclic shifts of any of its segments; note that you don't need to minimize the number of cyclic shifts, and any method that requires n or fewer cyclic shifts will be accepted.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain the descriptions of the test cases. \n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 50) \u2014 the length of the array. The second line consists of space-separated elements of the array a_i (-10^9 \u2264 a_i \u2264 10^9). Elements of array a may repeat and don't have to be unique.\n\nOutput\n\nPrint t answers to all input test cases. \n\nThe first line of the answer of each test case should contain an integer k (0 \u2264 k \u2264 n) \u2014 the number of actions to sort the array. The next k lines should contain descriptions of the actions formatted as \"l r d\" (without quotes) where l and r (1 \u2264 l < r \u2264 n) are the boundaries of the segment being shifted, while d (1 \u2264 d \u2264 r - l) is the offset value. Please remember that only the cyclic shifts to the left are considered so the chosen segment will be shifted by the offset d to the to the left.\n\nNote that you are not required to find the minimum number of cyclic shifts needed for sorting. Any sorting method where the number of shifts does not exceed n will be accepted.\n\nIf the given array a is already sorted, one of the possible answers is k = 0 and an empty sequence of cyclic shifts.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n\n\nOutput\n\n\n1\n1 2 1\n1\n1 3 2\n3\n2 4 1\n2 3 1\n1 3 2\n4\n2 4 2\n1 5 3\n1 2 1\n1 3 1\n\nNote\n\nExplanation of the fourth data set in the example: \n\n  1. The segment a[2 \u2026 4] is selected and is shifted to the left by 2: [2, \\color{blue}{5, 1, 4}, 3] \\longrightarrow [2, \\color{blue}{4, 5, 1}, 3] \n  2. The segment a[1 \u2026 5] is then selected and is shifted to the left by 3: [\\color{blue}{2, 4, 5, 1, 3}] \\longrightarrow [\\color{blue}{1, 3, 2, 4, 5}] \n  3. After that the segment a[1 \u2026 2] is selected and is shifted to the left by 1: [\\color{blue}{1, 3}, 2, 4, 5] \\longrightarrow [\\color{blue}{3, 1}, 2, 4, 5] \n  4. And in the end the segment a[1 \u2026 3] is selected and is shifted to the left by 1: [\\color{blue}{3, 1, 2}, 4, 5] \\longrightarrow [\\color{blue}{1, 2, 3}, 4, 5] \n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "The new generation external memory contains an array of integers a[1 \u2026 n] = [a_1, a_2, \u2026, a_n]. This type of memory does not support changing the value of an arbitrary element. However, it allows you to cut out any segment of the given array. You can then cyclically shift (rotate) it by any offset and insert it back into the same place. Technically, each cyclic shift consists of two consecutive actions: 1. You may select arbitrary indices l and r (1 \u2264 l < r \u2264 n) as the boundaries of the segment. 2. Then you replace the segment a[l \u2026 r] with its cyclic shift to the left by an arbitrary offset d; the sequence [1, 4, 1, 3] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by offset 1, and the sequence [4, 1, 3, 1] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by offset 2. For example, if a = [1, \\color{blue}{3, 2, 8}, 5], then choosing l = 2, r = 4 and d = 2 yields a segment a[2 \u2026 4] = [3, 2, 8] which is then shifted by the offset d = 2 to the left, and you get a segment [8, 3, 2] which then takes the place of the original elements of the segment, resulting in a = [1, \\color{blue}{8, 3, 2}, 5]. Sort the given array a using no more than n cyclic shifts of any of its segments; note that you don't need to minimize the number of cyclic shifts, and any method that requires n or fewer cyclic shifts will be accepted.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain the descriptions of the test cases. \n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 50) \u2014 the length of the array. The second line consists of space-separated elements of the array a_i (-10^9 \u2264 a_i \u2264 10^9). Elements of array a may repeat and don't have to be unique.\n\nOutput\n\nPrint t answers to all input test cases. \n\nThe first line of the answer of each test case should contain an integer k (0 \u2264 k \u2264 n) \u2014 the number of actions to sort the array. The next k lines should contain descriptions of the actions formatted as \"l r d\" (without quotes) where l and r (1 \u2264 l < r \u2264 n) are the boundaries of the segment being shifted, while d (1 \u2264 d \u2264 r - l) is the offset value. Please remember that only the cyclic shifts to the left are considered so the chosen segment will be shifted by the offset d to the to the left.\n\nNote that you are not required to find the minimum number of cyclic shifts needed for sorting. Any sorting method where the number of shifts does not exceed n will be accepted.\n\nIf the given array a is already sorted, one of the possible answers is k = 0 and an empty sequence of cyclic shifts.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n\n\nOutput\n\n\n1\n1 2 1\n1\n1 3 2\n3\n2 4 1\n2 3 1\n1 3 2\n4\n2 4 2\n1 5 3\n1 2 1\n1 3 1\n\nNote\n\nExplanation of the fourth data set in the example: \n\n  1. The segment a[2 \u2026 4] is selected and is shifted to the left by 2: [2, \\color{blue}{5, 1, 4}, 3] \\longrightarrow [2, \\color{blue}{4, 5, 1}, 3] \n  2. The segment a[1 \u2026 5] is then selected and is shifted to the left by 3: [\\color{blue}{2, 4, 5, 1, 3}] \\longrightarrow [\\color{blue}{1, 3, 2, 4, 5}] \n  3. After that the segment a[1 \u2026 2] is selected and is shifted to the left by 1: [\\color{blue}{1, 3}, 2, 4, 5] \\longrightarrow [\\color{blue}{3, 1}, 2, 4, 5] \n  4. And in the end the segment a[1 \u2026 3] is selected and is shifted to the left by 1: [\\color{blue}{3, 1, 2}, 4, 5] \\longrightarrow [\\color{blue}{1, 2, 3}, 4, 5] \n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "The new generation external memory contains an array of integers a[1 \u2026 n] = [a_1, a_2, \u2026, a_n]. This type of memory does not support changing the value of an arbitrary element, but it allows you to cut out any segment of the given array, cyclically shift (rotate) it by any offset, and insert it back into the same place. Technically, each cyclic shift consists of two consecutive actions: 1. You may select arbitrary indices l and r (1 \u2264 l < r \u2264 n) as the boundaries of the segment; then you replace the segment a[l \u2026 r] with its cyclic shift to the left by an arbitrary offset d; the sequence [1, 4, 1, 3] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by offset 1, and the sequence [4, 1, 3, 1] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by offset 2. For example, if a = [1, \\color{blue}{3, 2, 8}, 5], then choosing l = 2, r = 4 and d = 2 yields a segment a[2 \u2026 4] = [3, 2, 8] which is then shifted by the offset d = 2 to the left, and you get a segment [8, 3, 2] which then takes the place of the original elements of the segment, resulting in a = [1, \\color{blue}{8, 3, 2}, 5]. Sort the given array a using no more than n cyclic shifts of any of its segments; note that you don't need to minimize the number of cyclic shifts, and any method that requires n or fewer cyclic shifts will be accepted.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain the descriptions of the test cases. \n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 50) \u2014 the length of the array. The second line consists of space-separated elements of the array a_i (-10^9 \u2264 a_i \u2264 10^9). Elements of array a may repeat and don't have to be unique.\n\nOutput\n\nPrint t answers to all input test cases. \n\nThe first line of the answer of each test case should contain an integer k (0 \u2264 k \u2264 n) \u2014 the number of actions to sort the array. The next k lines should contain descriptions of the actions formatted as \"l r d\" (without quotes) where l and r (1 \u2264 l < r \u2264 n) are the boundaries of the segment being shifted, while d (1 \u2264 d \u2264 r - l) is the offset value. Please remember that only the cyclic shifts to the left are considered so the chosen segment will be shifted by the offset d to the to the left.\n\nNote that you are not required to find the minimum number of cyclic shifts needed for sorting. Any sorting method where the number of shifts does not exceed n will be accepted.\n\nIf the given array a is already sorted, one of the possible answers is k = 0 and an empty sequence of cyclic shifts.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n\n\nOutput\n\n\n1\n1 2 1\n1\n1 3 2\n3\n2 4 1\n2 3 1\n1 3 2\n4\n2 4 2\n1 5 3\n1 2 1\n1 3 1\n\nNote\n\nExplanation of the fourth data set in the example: \n\n  1. The segment a[2 \u2026 4] is selected and is shifted to the left by 2: [2, \\color{blue}{5, 1, 4}, 3] \\longrightarrow [2, \\color{blue}{4, 5, 1}, 3] \n  2. The segment a[1 \u2026 5] is then selected and is shifted to the left by 3: [\\color{blue}{2, 4, 5, 1, 3}] \\longrightarrow [\\color{blue}{1, 3, 2, 4, 5}] \n  3. After that the segment a[1 \u2026 2] is selected and is shifted to the left by 1: [\\color{blue}{1, 3}, 2, 4, 5] \\longrightarrow [\\color{blue}{3, 1}, 2, 4, 5] \n  4. And in the end the segment a[1 \u2026 3] is selected and is shifted to the left by 1: [\\color{blue}{3, 1, 2}, 4, 5] \\longrightarrow [\\color{blue}{1, 2, 3}, 4, 5] \n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for n, array in test_cases:\n        actions = []\n        \n        # Check if the array is already sorted\n        if array == sorted(array):\n            results.append((0, actions))\n            continue\n        \n        # Perform cyclic shifts to sort the array\n        for i in range(n):\n            min_index = i\n            for j in range(i + 1, n):\n                if array[j] < array[min_index]:\n                    min_index = j\n            \n            if min_index != i:\n                # Perform cyclic shift\n                l = i + 1\n                r = min_index + 1\n                d = r - l\n                segment = array[l-1:r]\n                shifted_segment = segment[d:] + segment[:d]\n                array[l-1:r] = shifted_segment\n                actions.append((l, r, d))\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        array = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, array))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for case in test_cases:\n        n, a = case\n        sorted_a = sorted(a)\n        \n        if a == sorted_a:\n            results.append((0, []))\n            continue\n        \n        actions = []\n        \n        # A simple strategy: bubble sort-like approach using cyclic shifts\n        for i in range(n):\n            for j in range(n - 1, i, -1):\n                if a[j] < a[j - 1]:\n                    # Perform a cyclic shift to swap a[j] and a[j-1]\n                    l = j\n                    r = j + 1\n                    d = 1\n                    a[l-1:r] = a[l-1:r][d:] + a[l-1:r][:d]\n                    actions.append((l, r, d))\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, a))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for action in actions:\n            print(*action)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for i in range(t):\n        n, array = test_cases[i]\n        sorted_array = sorted(array)\n        \n        if array == sorted_array:\n            results.append((0, []))\n            continue\n        \n        actions = []\n        \n        # A simple approach to sort using cyclic shifts\n        for j in range(n):\n            if array[j] != sorted_array[j]:\n                # Find the position of the element that should be here\n                correct_pos = array.index(sorted_array[j], j)\n                \n                # Perform a cyclic shift to bring the correct element to position j\n                if correct_pos > j:\n                    actions.append((j + 1, correct_pos + 1, correct_pos - j))\n                    segment = array[j:correct_pos + 1]\n                    offset = correct_pos - j\n                    shifted_segment = segment[offset:] + segment[:offset]\n                    array[j:correct_pos + 1] = shifted_segment\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        array = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, array))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for action in actions:\n            print(*action)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def parse_input():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    \n    for _ in range(t):\n        n = int(data[index])\n        array = list(map(int, data[index + 1].split()))\n        test_cases.append((n, array))\n        index += 2\n    \n    return test_cases\n\ndef is_sorted(array):\n    return all(array[i] <= array[i + 1] for i in range(len(array) - 1))\n\ndef cyclic_shift(array, l, r, d):\n    segment = array[l:r]\n    d = d % len(segment)\n    shifted_segment = segment[d:] + segment[:d]\n    return array[:l] + shifted_segment + array[r:]\n\ndef sort_with_cyclic_shifts(n, array):\n    actions = []\n    \n    if is_sorted(array):\n        return actions\n    \n    # Simple strategy: bubble sort-like approach using cyclic shifts\n    for i in range(n):\n        for j in range(n - 1, i, -1):\n            if array[j] < array[j - 1]:\n                # Perform a cyclic shift to swap array[j] and array[j-1]\n                array = cyclic_shift(array, j - 1, j + 1, 1)\n                actions.append((j, j + 1, 1))\n    \n    return actions\n\ndef main():\n    test_cases = parse_input()\n    results = []\n    \n    for n, array in test_cases:\n        actions = sort_with_cyclic_shifts(n, array)\n        results.append((len(actions), actions))\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for i in range(t):\n        n, array = test_cases[i]\n        sorted_array = sorted(array)\n        \n        if array == sorted_array:\n            results.append((0, []))\n            continue\n        \n        actions = []\n        \n        # A simple strategy to sort the array using cyclic shifts\n        # This is not optimized but ensures the number of shifts does not exceed n\n        for j in range(n):\n            if array[j] != sorted_array[j]:\n                # Find the position of the correct element in the unsorted array\n                correct_pos = array.index(sorted_array[j], j)\n                \n                # Perform a cyclic shift to move the correct element to the j-th position\n                if correct_pos > j:\n                    # Calculate the offset for the cyclic shift\n                    offset = correct_pos - j\n                    # Perform the cyclic shift\n                    segment = array[j:correct_pos+1]\n                    shifted_segment = segment[offset:] + segment[:offset]\n                    array[j:correct_pos+1] = shifted_segment\n                    actions.append((j+1, correct_pos+1, offset))\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        array = list(map(int, data[index:index+n]))\n        index += n\n        test_cases.append((n, array))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for action in actions:\n            print(*action)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for case in test_cases:\n        n, a = case\n        sorted_a = sorted(a)\n        \n        if a == sorted_a:\n            results.append((0, []))\n            continue\n        \n        actions = []\n        \n        # A simple strategy to sort the array using cyclic shifts\n        for i in range(n):\n            if a[i] != sorted_a[i]:\n                # Find the correct position of a[i] in the sorted array\n                correct_pos = sorted_a.index(a[i], i)\n                \n                # Perform a cyclic shift to move a[i] to its correct position\n                if correct_pos > i:\n                    l = i + 1\n                    r = correct_pos + 1\n                    d = correct_pos - i\n                    actions.append((l, r, d))\n                    \n                    # Perform the cyclic shift\n                    segment = a[l-1:r]\n                    a[l-1:r] = segment[d:] + segment[:d]\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, a))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for action in actions:\n            print(*action)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for i in range(t):\n        n, array = test_cases[i]\n        sorted_array = sorted(array)\n        \n        if array == sorted_array:\n            results.append((0, []))\n            continue\n        \n        actions = []\n        \n        # A simple strategy to sort the array using cyclic shifts\n        for j in range(n):\n            if array[j] != sorted_array[j]:\n                # Find the correct position of the current element\n                correct_pos = array.index(sorted_array[j], j)\n                \n                # Perform a cyclic shift to move the element to its correct position\n                if correct_pos > j:\n                    d = correct_pos - j\n                    actions.append((j + 1, correct_pos + 1, d))\n                    # Perform the cyclic shift\n                    array[j:correct_pos + 1] = array[j + d:correct_pos + 1] + array[j:j + d]\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        array = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, array))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for i in range(t):\n        n, a = test_cases[i]\n        sorted_a = sorted(a)\n        \n        if a == sorted_a:\n            results.append((0, []))\n            continue\n        \n        actions = []\n        \n        # Simple strategy: bubble sort-like approach using cyclic shifts\n        for j in range(n):\n            for k in range(n - 1, j, -1):\n                if a[k] < a[k - 1]:\n                    # Perform a cyclic shift on the segment [k-1, k]\n                    l = k\n                    r = k + 1\n                    d = 1\n                    a[l-1:r] = a[l-1:r][d:] + a[l-1:r][:d]\n                    actions.append((l, r, d))\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, a))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for i in range(t):\n        n, array = test_cases[i]\n        sorted_array = sorted(array)\n        \n        if array == sorted_array:\n            results.append((0, []))\n            continue\n        \n        actions = []\n        \n        # Simple strategy: repeatedly find the largest unsorted segment and shift it\n        for j in range(n):\n            if array[j:] != sorted_array[j:]:\n                l = j + 1\n                r = n\n                d = 1\n                actions.append((l, r, d))\n                segment = array[l-1:r]\n                shifted_segment = segment[d:] + segment[:d]\n                array[l-1:r] = shifted_segment\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        array = list(map(int, data[index:index+n]))\n        index += n\n        test_cases.append((n, array))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for action in actions:\n            print(*action)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for i in range(t):\n        n, a = test_cases[i]\n        actions = []\n        \n        # Check if the array is already sorted\n        if a == sorted(a):\n            results.append((0, actions))\n            continue\n        \n        # Sort the array using cyclic shifts\n        sorted_a = sorted(a)\n        for j in range(n):\n            if a[j] != sorted_a[j]:\n                # Find the correct position of a[j] in the sorted array\n                correct_pos = j\n                for k in range(j, n):\n                    if sorted_a[k] == a[j]:\n                        correct_pos = k\n                        break\n                \n                # Perform cyclic shift\n                l = j + 1\n                r = correct_pos + 1\n                d = (r - l) % n\n                \n                # Perform the cyclic shift\n                segment = a[l-1:r]\n                shifted_segment = segment[d:] + segment[:d]\n                a[l-1:r] = shifted_segment\n                \n                actions.append((l, r, d))\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, a))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for n, array in test_cases:\n        actions = []\n        \n        # Check if the array is already sorted\n        if array == sorted(array):\n            results.append((0, actions))\n            continue\n        \n        # Perform cyclic shifts to sort the array\n        for i in range(n):\n            min_index = i\n            for j in range(i + 1, n):\n                if array[j] < array[min_index]:\n                    min_index = j\n            \n            if min_index != i:\n                # Perform cyclic shift\n                l = i + 1\n                r = min_index + 1\n                d = r - l\n                segment = array[l-1:r]\n                shifted_segment = segment[d:] + segment[:d]\n                array[l-1:r] = shifted_segment\n                actions.append((l, r, d))\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        array = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, array))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the arrays for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the input, which represents the number of test cases.\",\n        \"For each test case, read the integer n, which represents the length of the array.\",\n        \"Read the array of integers a_i for each test case.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if the array is already sorted.\",\n      \"steps\": [\n        \"For each test case, check if the array is sorted in non-decreasing order.\",\n        \"If the array is sorted, set k = 0 and prepare an empty sequence of cyclic shifts.\"\n      ]\n    },\n    {\n      \"description\": \"Sort the array using cyclic shifts.\",\n      \"steps\": [\n        \"For each test case where the array is not sorted, identify segments that can be cyclically shifted to move elements into their correct positions.\",\n        \"Determine the indices l and r for the segment to be shifted and the offset d for the cyclic shift.\",\n        \"Perform the cyclic shift and update the array.\",\n        \"Repeat the process until the array is sorted or the number of shifts reaches n.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"For each test case, output the integer k, which represents the number of cyclic shifts performed.\",\n        \"Output the sequence of cyclic shifts in the format 'l r d' for each shift.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the arrays for each test case.\",\n    \"For each test case, check if the array is already sorted. If sorted, output k = 0 and an empty sequence.\",\n    \"For unsorted arrays, apply cyclic shifts to sort the array using no more than n shifts.\",\n    \"Output the number of shifts and the details of each shift for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: A cyclic shift involves rotating a segment of the array to the left by a specified offset, effectively rearranging the elements within that segment.\n\n    'sorted'\n    Explanation: The requirement is to sort the array using cyclic shifts, meaning the final array should be in non-decreasing order.\n\n# [phrase showing quantity relationship]\n    'no more than n'\n    Explanation: The number of cyclic shifts performed should not exceed the length of the array, n. This means the solution must be efficient enough to sort the array within n operations.\n\n# [degree adverb]\n    'arbitrary'\n    Explanation: The indices l and r, as well as the offset d, can be chosen freely within the given constraints, allowing flexibility in how the array is manipulated.\n\n# [code logic]\n    The steps for checking if the array is sorted and preparing an empty sequence of cyclic shifts should be considered simultaneously. If the array is already sorted, the output should directly reflect this without further processing.\n\n# [edge case]\n    Test case with already sorted array:\n    Input: [1, 2, 3, 4, 5]\n    Expected output: 0\n    Explanation: The array is already sorted, so no cyclic shifts are needed.\n\n    Test case with minimum length array:\n    Input: [2, 1]\n    Expected output: 1\n    Explanation: A single cyclic shift of the segment [1, 2] will sort the array.\n\n    Test case with all identical elements:\n    Input: [3, 3, 3, 3]\n    Expected output: 0\n    Explanation: The array is already sorted as all elements are identical, so no cyclic shifts are needed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the array is sorted and applying cyclic shifts as needed will naturally handle these cases.\n\nNO", "Round_0": {"code": "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for n, array in test_cases:\n        actions = []\n        \n        # Check if the array is already sorted\n        if array == sorted(array):\n            results.append((0, actions))\n            continue\n        \n        # Perform cyclic shifts to sort the array\n        for i in range(n):\n            min_index = i\n            for j in range(i + 1, n):\n                if array[j] < array[min_index]:\n                    min_index = j\n            \n            if min_index != i:\n                # Perform cyclic shift\n                l = i + 1\n                r = min_index + 1\n                d = r - l\n                segment = array[l-1:r]\n                shifted_segment = segment[d:] + segment[:d]\n                array[l-1:r] = shifted_segment\n                actions.append((l, r, d))\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        array = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, array))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the arrays for each test case.\",\n      \"details\": \"Read the integer t from the first line, then for each test case, read the integer n and the array of integers a.\"\n    },\n    {\n      \"description\": \"Determine if the array is already sorted.\",\n      \"details\": \"Check if the array a is in non-decreasing order.\"\n    },\n    {\n      \"description\": \"If the array is not sorted, identify segments that can be cyclically shifted to sort the array.\",\n      \"details\": \"Find segments within the array that can be shifted to move elements into their correct positions.\"\n    },\n    {\n      \"description\": \"Perform cyclic shifts on identified segments to sort the array.\",\n      \"details\": \"For each identified segment, perform a cyclic shift to the left by the appropriate offset to move elements into their correct positions.\"\n    },\n    {\n      \"description\": \"Output the number of actions and the details of each action for each test case.\",\n      \"details\": \"Print the integer k followed by k lines describing the actions in the format 'l r d'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input data to extract the number of test cases and the arrays for each test case.\",\n    \"For each test case, check if the array is already sorted. If sorted, output k = 0.\",\n    \"If the array is not sorted, identify segments that can be cyclically shifted to sort the array.\",\n    \"Perform the necessary cyclic shifts on the identified segments to sort the array.\",\n    \"Output the number of actions and the details of each action for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: A cyclic shift involves rotating a segment of the array to the left by a specified offset, effectively rearranging the elements within that segment.\n\n    'segment'\n    Explanation: A segment refers to a contiguous subarray defined by two indices, l and r, within the array.\n\n# [phrase showing quantity relationship]\n    'no more than n'\n    Explanation: The number of cyclic shifts performed should not exceed the length of the array, n. This means the solution should be efficient enough to sort the array using n or fewer shifts.\n\n# [degree adverb]\n    'arbitrary'\n    Explanation: The indices l and r, as well as the offset d, can be chosen freely within the given constraints, allowing flexibility in how the array is manipulated.\n\n# [code logic]\n    The steps \"Identify segments that can be cyclically shifted to sort the array\" and \"Perform cyclic shifts on identified segments to sort the array\" should be considered simultaneously. This involves selecting segments and immediately performing shifts to move elements into their correct positions.\n\n# [edge case]\n    Test case with already sorted array:\n    Input: [1, 2, 3, 4, 5]\n    Expected output: 0\n    Explanation: The array is already sorted, so no cyclic shifts are needed.\n\n    Test case with all identical elements:\n    Input: [3, 3, 3, 3, 3]\n    Expected output: 0\n    Explanation: All elements are identical, so the array is trivially sorted.\n\n    Test case with smallest possible array:\n    Input: [2, 1]\n    Expected output: 1\n    Explanation: A single shift of the segment [1, 2] with l = 1, r = 2, d = 1 will sort the array.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the array is sorted and performing shifts as needed will naturally handle these cases.\n\nNO", "Round_0": {"code": "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for case in test_cases:\n        n, a = case\n        sorted_a = sorted(a)\n        \n        if a == sorted_a:\n            results.append((0, []))\n            continue\n        \n        actions = []\n        \n        # A simple strategy: bubble sort-like approach using cyclic shifts\n        for i in range(n):\n            for j in range(n - 1, i, -1):\n                if a[j] < a[j - 1]:\n                    # Perform a cyclic shift to swap a[j] and a[j-1]\n                    l = j\n                    r = j + 1\n                    d = 1\n                    a[l-1:r] = a[l-1:r][d:] + a[l-1:r][:d]\n                    actions.append((l, r, d))\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, a))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for action in actions:\n            print(*action)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"name\": \"Parse Input\",\n      \"description\": \"Read the number of test cases and the arrays for each test case from the input.\"\n    },\n    {\n      \"name\": \"Check Sorted\",\n      \"description\": \"Determine if the array is already sorted. If sorted, output 0 actions.\"\n    },\n    {\n      \"name\": \"Perform Cyclic Shifts\",\n      \"description\": \"Identify segments within the array that can be cyclically shifted to move elements into their correct positions.\"\n    },\n    {\n      \"name\": \"Output Actions\",\n      \"description\": \"Output the number of actions and the details of each cyclic shift performed.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize\",\n      \"description\": \"Start by reading the number of test cases and initializing necessary data structures.\"\n    },\n    {\n      \"step\": \"Iterate Over Test Cases\",\n      \"description\": \"For each test case, read the array and check if it is already sorted.\"\n    },\n    {\n      \"step\": \"Sort Using Cyclic Shifts\",\n      \"description\": \"If the array is not sorted, identify segments to cyclically shift and perform the shifts until the array is sorted.\"\n    },\n    {\n      \"step\": \"Output Results\",\n      \"description\": \"For each test case, output the number of actions and the details of each action.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: A cyclic shift involves rotating a segment of the array to the left by a specified offset. This operation is used to rearrange elements within the array without changing the overall size or structure of the array.\n\n    'segment'\n    Explanation: A segment refers to a contiguous subarray defined by two indices, l and r, where 1 \u2264 l < r \u2264 n. This segment is the part of the array that can be cyclically shifted.\n\n# [phrase showing quantity relationship]\n    'no more than n cyclic shifts'\n    Explanation: The requirement specifies that the array should be sorted using at most n cyclic shifts. This means the number of shifts performed should not exceed the length of the array.\n\n    '1 \u2264 l < r \u2264 n'\n    Explanation: This defines the valid range for selecting the segment boundaries for the cyclic shift. It ensures that the segment is non-empty and within the bounds of the array.\n\n    '1 \u2264 d \u2264 r - l'\n    Explanation: This specifies the valid range for the offset d, ensuring that the shift is meaningful and does not exceed the length of the segment.\n\n# [degree adverb]\n    'already sorted'\n    Explanation: This refers to the condition where the array is in non-decreasing order. If the array is already sorted, no cyclic shifts are needed, and the output should be 0 actions.\n\n# [code logic]\n    The steps \"Check Sorted\" and \"Perform Cyclic Shifts\" should be considered simultaneously. If the array is already sorted, we can immediately output 0 actions. Otherwise, we proceed to identify and perform cyclic shifts.\n\n# [edge case]\n    Test case with a sorted array:\n    Input: [1, 2, 3, 4, 5]\n    Expected Output: 0\n    Explanation: The array is already sorted, so no actions are needed.\n\n    Test case with a two-element array:\n    Input: [2, 1]\n    Expected Output: 1\n    Explanation: A single cyclic shift of the segment [1, 2] with d = 1 will sort the array.\n\n    Test case with all elements the same:\n    Input: [3, 3, 3, 3]\n    Expected Output: 0\n    Explanation: The array is already sorted as all elements are the same.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original", "Round_0": {"code": "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for i in range(t):\n        n, array = test_cases[i]\n        sorted_array = sorted(array)\n        \n        if array == sorted_array:\n            results.append((0, []))\n            continue\n        \n        actions = []\n        \n        # A simple approach to sort using cyclic shifts\n        for j in range(n):\n            if array[j] != sorted_array[j]:\n                # Find the position of the element that should be here\n                correct_pos = array.index(sorted_array[j], j)\n                \n                # Perform a cyclic shift to bring the correct element to position j\n                if correct_pos > j:\n                    actions.append((j + 1, correct_pos + 1, correct_pos - j))\n                    segment = array[j:correct_pos + 1]\n                    offset = correct_pos - j\n                    shifted_segment = segment[offset:] + segment[:offset]\n                    array[j:correct_pos + 1] = shifted_segment\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        array = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, array))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for action in actions:\n            print(*action)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details of each test case, including the length of the array and the array elements.\",\n      \"output\": \"A list of test cases, where each test case is a tuple containing the length of the array and the array itself.\"\n    },\n    {\n      \"description\": \"Implement a function to determine if an array is already sorted.\",\n      \"output\": \"A boolean value indicating whether the array is sorted.\"\n    },\n    {\n      \"description\": \"Implement a function to perform a cyclic shift on a segment of the array given the indices l, r, and offset d.\",\n      \"output\": \"The modified array after performing the cyclic shift.\"\n    },\n    {\n      \"description\": \"Develop a strategy to sort the array using cyclic shifts. This involves identifying segments and offsets that can be used to sort the array in no more than n shifts.\",\n      \"output\": \"A list of actions (l, r, d) that describe the cyclic shifts needed to sort the array.\"\n    },\n    {\n      \"description\": \"Format the output for each test case, including the number of actions and the list of actions, and print the results.\",\n      \"output\": \"Formatted output for each test case as specified in the requirement.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input data and parse it into a list of test cases.\",\n    \"For each test case, check if the array is already sorted. If it is, output 0 and an empty sequence of actions.\",\n    \"If the array is not sorted, apply the sorting strategy to determine the necessary cyclic shifts.\",\n    \"For each determined action, perform the cyclic shift on the array and keep track of the actions.\",\n    \"Once the array is sorted, format the output to include the number of actions and the list of actions.\",\n    \"Print the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: A cyclic shift involves rotating a segment of the array to the left by a specified offset. This operation is crucial for sorting the array as it allows rearranging elements without directly modifying them.\n\n    'segment'\n    Explanation: A segment is a contiguous subarray defined by two indices, l and r, within the array. The cyclic shift operation is applied to this segment.\n\n# [phrase showing quantity relationship]\n    'no more than n'\n    Explanation: The requirement specifies that the array should be sorted using at most n cyclic shifts. This means the number of operations (shifts) should not exceed the length of the array.\n\n# [degree adverb]\n    'already sorted'\n    Explanation: This indicates that if the array is in non-decreasing order, no cyclic shifts are needed, and the output should be 0 with no actions.\n\n# [code logic]\n    The steps for checking if the array is sorted and determining the necessary cyclic shifts should be considered simultaneously. Specifically, after checking if the array is sorted, if it is not, the strategy to sort the array using cyclic shifts should be immediately applied.\n\n# [edge case]\n    Test case: [1, 1]\n    Expected output: 0\n    Explanation: The array is already sorted, so no cyclic shifts are needed.\n\n    Test case: [3, 3, 3]\n    Expected output: 0\n    Explanation: All elements are the same, so the array is already sorted.\n\n    Test case: [5, 4, 3, 2, 1]\n    Expected output: 4\n    Explanation: The array is in reverse order, requiring multiple shifts to sort.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the array is sorted and applying cyclic shifts as needed will naturally handle these cases.\n\nNO", "Round_0": {"code": "def parse_input():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    \n    for _ in range(t):\n        n = int(data[index])\n        array = list(map(int, data[index + 1].split()))\n        test_cases.append((n, array))\n        index += 2\n    \n    return test_cases\n\ndef is_sorted(array):\n    return all(array[i] <= array[i + 1] for i in range(len(array) - 1))\n\ndef cyclic_shift(array, l, r, d):\n    segment = array[l:r]\n    d = d % len(segment)\n    shifted_segment = segment[d:] + segment[:d]\n    return array[:l] + shifted_segment + array[r:]\n\ndef sort_with_cyclic_shifts(n, array):\n    actions = []\n    \n    if is_sorted(array):\n        return actions\n    \n    # Simple strategy: bubble sort-like approach using cyclic shifts\n    for i in range(n):\n        for j in range(n - 1, i, -1):\n            if array[j] < array[j - 1]:\n                # Perform a cyclic shift to swap array[j] and array[j-1]\n                array = cyclic_shift(array, j - 1, j + 1, 1)\n                actions.append((j, j + 1, 1))\n    \n    return actions\n\ndef main():\n    test_cases = parse_input()\n    results = []\n    \n    for n, array in test_cases:\n        actions = sort_with_cyclic_shifts(n, array)\n        results.append((len(actions), actions))\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 106)"}, "Round_1": {"code": "def parse_input():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    \n    for _ in range(t):\n        n = int(data[index])\n        array = list(map(int, data[index + 1].split()))\n        test_cases.append((n, array))\n        index += 2\n    \n    return test_cases\n\ndef is_sorted(array):\n    return all(array[i] <= array[i + 1] for i in range(len(array) - 1))\n\ndef cyclic_shift(array, l, r, d):\n    segment = array[l:r]\n    d = d % len(segment)\n    shifted_segment = segment[d:] + segment[:d]\n    return array[:l] + shifted_segment + array[r:]\n\ndef sort_with_cyclic_shifts(n, array):\n    actions = []\n    \n    if is_sorted(array):\n        return actions\n    \n    # Simple strategy: bubble sort-like approach using cyclic shifts\n    for i in range(n):\n        for j in range(n - 1, i, -1):\n            if array[j] < array[j - 1]:\n                # Perform a cyclic shift to swap array[j] and array[j-1]\n                array = cyclic_shift(array, j - 1, j + 1, 1)\n                actions.append((j, j + 1, 1))\n    \n    return actions\n\ndef main():\n    test_cases = parse_input()\n    results = []\n    \n    for n, array in test_cases:\n        actions = sort_with_cyclic_shifts(n, array)\n        results.append((len(actions), actions))\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the arrays for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the input, which represents the number of test cases.\",\n        \"For each test case, read the integer n, which represents the length of the array.\",\n        \"Read the array of integers a_i for each test case.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if the array is already sorted.\",\n      \"steps\": [\n        \"For each test case, check if the array is sorted in non-decreasing order.\",\n        \"If the array is sorted, set k = 0 and prepare an empty sequence of cyclic shifts.\"\n      ]\n    },\n    {\n      \"description\": \"Sort the array using cyclic shifts.\",\n      \"steps\": [\n        \"For each test case where the array is not sorted, identify segments that can be cyclically shifted to move elements into their correct positions.\",\n        \"Select indices l and r to define the segment boundaries and choose an offset d for the cyclic shift.\",\n        \"Perform the cyclic shift and update the array.\",\n        \"Repeat the process until the array is sorted, ensuring the number of shifts does not exceed n.\"\n      ]\n    },\n    {\n      \"description\": \"Format the output for each test case.\",\n      \"steps\": [\n        \"For each test case, output the integer k, which represents the number of cyclic shifts performed.\",\n        \"For each shift, output the indices l, r, and the offset d in the format 'l r d'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the arrays for each test case.\",\n    \"For each test case, check if the array is already sorted. If sorted, output k = 0 and an empty sequence.\",\n    \"For unsorted arrays, apply cyclic shifts to sort the array, ensuring the number of shifts does not exceed n.\",\n    \"Output the number of shifts and the details of each shift for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: A cyclic shift involves rotating a segment of the array to the left by a specified offset, effectively rearranging the elements within that segment.\n\n    'sorted'\n    Explanation: The array is considered sorted if its elements are in non-decreasing order.\n\n# [phrase showing quantity relationship]\n    'no more than n'\n    Explanation: The number of cyclic shifts performed to sort the array should not exceed the length of the array, n. This means the maximum number of shifts allowed is n.\n\n# [degree adverb] \n    'arbitrary'\n    Explanation: The indices l and r, as well as the offset d, can be chosen freely within the given constraints, allowing flexibility in how the cyclic shifts are applied.\n\n# [code logic]\n    The steps in the plan related to checking if the array is sorted and preparing an empty sequence of cyclic shifts if it is sorted should be implemented simultaneously. This can be done using an if-else statement to check the sorted status and decide the output accordingly.\n\n# [edge case] \n    Test case with already sorted array: \n    Input: [1, 2, 3, 4, 5]\n    Expected output: 0\n    Explanation: Since the array is already sorted, no cyclic shifts are needed.\n\n    Test case with minimum length array:\n    Input: [2, 1]\n    Expected output: 1\n    Explanation: A single cyclic shift of the entire array will sort it.\n\n    Test case with all identical elements:\n    Input: [3, 3, 3, 3]\n    Expected output: 0\n    Explanation: The array is already sorted as all elements are identical.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the array is sorted and applying cyclic shifts as needed will naturally handle these cases.\n\nNO", "Round_0": {"code": "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for i in range(t):\n        n, array = test_cases[i]\n        sorted_array = sorted(array)\n        \n        if array == sorted_array:\n            results.append((0, []))\n            continue\n        \n        actions = []\n        \n        # A simple strategy to sort the array using cyclic shifts\n        # This is not optimized but ensures the number of shifts does not exceed n\n        for j in range(n):\n            if array[j] != sorted_array[j]:\n                # Find the position of the correct element in the unsorted array\n                correct_pos = array.index(sorted_array[j], j)\n                \n                # Perform a cyclic shift to move the correct element to the j-th position\n                if correct_pos > j:\n                    # Calculate the offset for the cyclic shift\n                    offset = correct_pos - j\n                    # Perform the cyclic shift\n                    segment = array[j:correct_pos+1]\n                    shifted_segment = segment[offset:] + segment[:offset]\n                    array[j:correct_pos+1] = shifted_segment\n                    actions.append((j+1, correct_pos+1, offset))\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        array = list(map(int, data[index:index+n]))\n        index += n\n        test_cases.append((n, array))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for action in actions:\n            print(*action)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the arrays for each test case.\",\n      \"details\": \"Read the integer t from the first line, then for each test case, read the integer n and the array of integers a.\"\n    },\n    {\n      \"description\": \"Determine if the array is already sorted.\",\n      \"details\": \"Compare the array a with its sorted version. If they are equal, no cyclic shifts are needed.\"\n    },\n    {\n      \"description\": \"Implement a sorting algorithm using cyclic shifts.\",\n      \"details\": \"Develop a strategy to sort the array using cyclic shifts. This can be done by identifying segments that can be shifted to move elements into their correct positions.\"\n    },\n    {\n      \"description\": \"Generate the output format for the number of actions and the details of each action.\",\n      \"details\": \"For each test case, output the number of actions k followed by k lines describing each action in the format 'l r d'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input data to get the number of test cases and the arrays for each test case.\",\n    \"For each test case, check if the array is already sorted. If sorted, output 0 and move to the next test case.\",\n    \"If the array is not sorted, apply a sorting strategy using cyclic shifts. Ensure the number of shifts does not exceed n.\",\n    \"For each shift, determine the segment boundaries l and r, and the offset d, then apply the shift.\",\n    \"Record each shift action and count the total number of actions.\",\n    \"Output the number of actions and the details of each action for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: A cyclic shift involves rotating a segment of the array to the left by a specified offset. This operation is used to rearrange elements within the array without changing the overall size or structure of the array.\n\n    'segment'\n    Explanation: A segment refers to a contiguous subarray defined by two indices, l and r, where 1 \u2264 l < r \u2264 n. This segment is the part of the array that can be cyclically shifted.\n\n# [phrase showing quantity relationship]\n    'no more than n'\n    Explanation: The number of cyclic shifts used to sort the array should not exceed the length of the array, n. This means that the solution must be efficient enough to sort the array within n operations.\n\n# [degree adverb]\n    'arbitrary'\n    Explanation: The term 'arbitrary' in this context means that the indices l, r, and the offset d can be chosen freely within the given constraints. This allows flexibility in selecting which parts of the array to shift and by how much.\n\n# [code logic]\n    The steps in the plan should be implemented in sequence, but the actual sorting strategy using cyclic shifts (step 3) may involve multiple operations that are determined dynamically based on the current state of the array. The plan does not specify simultaneous operations, but rather a sequence of decisions that lead to sorting.\n\n# [edge case]\n    Edge Case 1: An already sorted array, e.g., [1, 2, 3, 4, 5]\n    Expected Output: 0\n    Explanation: Since the array is already sorted, no cyclic shifts are needed.\n\n    Edge Case 2: An array with all identical elements, e.g., [3, 3, 3, 3]\n    Expected Output: 0\n    Explanation: The array is trivially sorted as all elements are the same, so no shifts are needed.\n\n    Edge Case 3: An array with the maximum allowed size, e.g., [50, 49, ..., 1]\n    Expected Output: A sequence of shifts that sorts the array in at most 50 operations.\n    Explanation: The array is in reverse order, requiring a series of shifts to sort it. The exact sequence will depend on the chosen strategy.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the array is already sorted and applying cyclic shifts as needed", "Round_0": {"code": "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for case in test_cases:\n        n, a = case\n        sorted_a = sorted(a)\n        \n        if a == sorted_a:\n            results.append((0, []))\n            continue\n        \n        actions = []\n        \n        # A simple strategy to sort the array using cyclic shifts\n        for i in range(n):\n            if a[i] != sorted_a[i]:\n                # Find the correct position of a[i] in the sorted array\n                correct_pos = sorted_a.index(a[i], i)\n                \n                # Perform a cyclic shift to move a[i] to its correct position\n                if correct_pos > i:\n                    l = i + 1\n                    r = correct_pos + 1\n                    d = correct_pos - i\n                    actions.append((l, r, d))\n                    \n                    # Perform the cyclic shift\n                    segment = a[l-1:r]\n                    a[l-1:r] = segment[d:] + segment[:d]\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, a))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for action in actions:\n            print(*action)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details of each test case, including the length of the array and the array elements.\",\n      \"output\": \"A list of test cases, where each test case contains the length of the array and the array elements.\"\n    },\n    {\n      \"description\": \"For each test case, determine if the array is already sorted.\",\n      \"output\": \"A boolean value indicating whether the array is sorted.\"\n    },\n    {\n      \"description\": \"If the array is not sorted, identify segments of the array that can be cyclically shifted to move elements closer to their sorted positions.\",\n      \"output\": \"A list of actions, where each action is defined by the indices l, r, and the offset d for the cyclic shift.\"\n    },\n    {\n      \"description\": \"Ensure that the number of actions does not exceed the length of the array.\",\n      \"output\": \"A valid sequence of actions that sorts the array within the allowed number of shifts.\"\n    },\n    {\n      \"description\": \"Format the output for each test case, including the number of actions and the details of each action.\",\n      \"output\": \"Formatted output for each test case, ready to be printed.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input data and parse it into a structured format.\",\n    \"Iterate over each test case to process the array.\",\n    \"Check if the array is already sorted. If it is, output 0 actions.\",\n    \"If the array is not sorted, devise a strategy to sort the array using cyclic shifts.\",\n    \"For each unsorted array, identify segments that can be shifted to move elements towards their sorted positions.\",\n    \"Record each shift action and ensure the total number of actions does not exceed the array length.\",\n    \"Output the number of actions and the details of each action for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: A cyclic shift involves rotating a segment of the array to the left by a specified offset. This operation allows rearranging elements within a specified range without changing the rest of the array.\n\n    'sorted'\n    Explanation: The array is considered sorted if its elements are in non-decreasing order.\n\n# [phrase showing quantity relationship]\n    'no more than n'\n    Explanation: The number of cyclic shifts used to sort the array should not exceed the length of the array, n. This means you can perform up to n shifts, but not more.\n\n# [degree adverb]\n    'arbitrary'\n    Explanation: This indicates that the indices l and r, as well as the offset d, can be chosen freely within the given constraints.\n\n# [code logic]\n    The steps \"Check if the array is already sorted\" and \"If the array is not sorted, devise a strategy to sort the array using cyclic shifts\" should be considered simultaneously. If the array is already sorted, you can immediately output 0 actions. If not, proceed to identify segments for cyclic shifts.\n\n# [edge case]\n    Test case with already sorted array:\n    Input: [1, 2, 3, 4, 5]\n    Expected output: 0\n    Explanation: The array is already sorted, so no actions are needed.\n\n    Test case with minimum length array:\n    Input: [2, 1]\n    Expected output: 1\n    Explanation: A single shift of the segment [1, 2] by offset 1 will sort the array.\n\n    Test case with all identical elements:\n    Input: [3, 3, 3, 3]\n    Expected output: 0\n    Explanation: The array is already sorted as all elements are identical.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the array is sorted and then applying cyclic shifts as needed will naturally handle these cases.\n\nNO", "Round_0": {"code": "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for i in range(t):\n        n, array = test_cases[i]\n        sorted_array = sorted(array)\n        \n        if array == sorted_array:\n            results.append((0, []))\n            continue\n        \n        actions = []\n        \n        # A simple strategy to sort the array using cyclic shifts\n        for j in range(n):\n            if array[j] != sorted_array[j]:\n                # Find the correct position of the current element\n                correct_pos = array.index(sorted_array[j], j)\n                \n                # Perform a cyclic shift to move the element to its correct position\n                if correct_pos > j:\n                    d = correct_pos - j\n                    actions.append((j + 1, correct_pos + 1, d))\n                    # Perform the cyclic shift\n                    array[j:correct_pos + 1] = array[j + d:correct_pos + 1] + array[j:j + d]\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        array = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, array))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the arrays for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the first line, which represents the number of test cases.\",\n        \"For each test case, read the integer n and the array of integers a.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if the array is already sorted.\",\n      \"steps\": [\n        \"Compare the array a with its sorted version.\",\n        \"If the array is already sorted, set k = 0 and prepare an empty sequence of cyclic shifts.\"\n      ]\n    },\n    {\n      \"description\": \"Sort the array using cyclic shifts.\",\n      \"steps\": [\n        \"Identify segments of the array that need to be shifted to achieve sorting.\",\n        \"For each segment, determine the indices l and r and the offset d for the cyclic shift.\",\n        \"Perform the cyclic shift and update the array.\",\n        \"Repeat the process until the array is sorted or the number of shifts reaches n.\"\n      ]\n    },\n    {\n      \"description\": \"Format the output for each test case.\",\n      \"steps\": [\n        \"Output the integer k, representing the number of cyclic shifts performed.\",\n        \"For each shift, output the indices l, r, and the offset d.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the arrays for each test case.\",\n    \"For each test case, check if the array is already sorted.\",\n    \"If the array is not sorted, apply cyclic shifts to sort the array.\",\n    \"Ensure the number of shifts does not exceed n.\",\n    \"Format and output the results for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: A cyclic shift involves rotating a segment of the array to the left by a specified offset. This operation is crucial for sorting the array as it allows rearranging elements without directly modifying them.\n\n    'segment'\n    Explanation: A segment refers to a contiguous subarray defined by indices l and r. This is the part of the array that will be cyclically shifted.\n\n# [phrase showing quantity relationship]\n    'no more than n'\n    Explanation: The number of cyclic shifts performed to sort the array should not exceed the length of the array, n. This ensures that the solution is efficient and adheres to the problem constraints.\n\n# [degree adverb]\n    'arbitrary'\n    Explanation: The term 'arbitrary' in this context means that the indices l, r, and the offset d can be chosen freely within the given constraints to achieve the desired cyclic shift.\n\n# [code logic]\n    The steps for checking if the array is already sorted and for sorting the array using cyclic shifts should be considered simultaneously. Specifically, if the array is not sorted, the logic for identifying segments and performing cyclic shifts should be executed in a loop until the array is sorted or the maximum number of shifts is reached.\n\n# [edge case]\n    Test case with already sorted array:\n    Input: [1, 2, 3, 4, 5]\n    Expected output: 0\n    Explanation: The array is already sorted, so no cyclic shifts are needed.\n\n    Test case with minimum size array:\n    Input: [2, 1]\n    Expected output: 1\n    Explanation: A single cyclic shift of the entire array will sort it.\n\n    Test case with all identical elements:\n    Input: [3, 3, 3, 3]\n    Expected output: 0\n    Explanation: The array is already sorted as all elements are identical.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the array is already sorted and performing cyclic shifts as needed will naturally handle these cases.\n\nNO", "Round_0": {"code": "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for i in range(t):\n        n, a = test_cases[i]\n        sorted_a = sorted(a)\n        \n        if a == sorted_a:\n            results.append((0, []))\n            continue\n        \n        actions = []\n        \n        # Simple strategy: bubble sort-like approach using cyclic shifts\n        for j in range(n):\n            for k in range(n - 1, j, -1):\n                if a[k] < a[k - 1]:\n                    # Perform a cyclic shift on the segment [k-1, k]\n                    l = k\n                    r = k + 1\n                    d = 1\n                    a[l-1:r] = a[l-1:r][d:] + a[l-1:r][:d]\n                    actions.append((l, r, d))\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, a))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the arrays for each test case.\",\n      \"steps\": [\n        \"Read the integer t, which represents the number of test cases.\",\n        \"For each test case, read the integer n, which represents the length of the array.\",\n        \"Read the array of integers a_i.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if the array is already sorted.\",\n      \"steps\": [\n        \"Compare the array a with its sorted version.\",\n        \"If the array is already sorted, set k = 0 and prepare an empty sequence of cyclic shifts.\"\n      ]\n    },\n    {\n      \"description\": \"Sort the array using cyclic shifts.\",\n      \"steps\": [\n        \"Identify segments within the array that can be cyclically shifted to move elements into their correct positions.\",\n        \"Perform cyclic shifts on identified segments, ensuring the number of shifts does not exceed n.\",\n        \"Record each shift as a tuple (l, r, d) where l and r are the boundaries of the segment and d is the offset.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"For each test case, print the integer k, which represents the number of actions taken.\",\n        \"Print the k lines describing the actions in the format 'l r d'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the arrays for each test case.\",\n    \"For each test case, check if the array is already sorted. If sorted, output k = 0.\",\n    \"If not sorted, apply cyclic shifts to sort the array, ensuring the number of shifts does not exceed n.\",\n    \"Record and output the number of shifts and the details of each shift for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: A cyclic shift involves rotating a segment of the array to the left by a specified offset. This operation is used to rearrange elements within the array without changing the overall size or structure of the array.\n\n    'segment'\n    Explanation: A segment refers to a contiguous subarray defined by two indices, l and r, where 1 \u2264 l < r \u2264 n. This segment is the part of the array that can be cyclically shifted.\n\n# [phrase showing quantity relationship]\n    'no more than n'\n    Explanation: The number of cyclic shifts performed to sort the array should not exceed the length of the array, n. This means that the solution must be efficient enough to sort the array within n operations.\n\n# [degree adverb]\n    'already sorted'\n    Explanation: This refers to the condition where the array is in non-decreasing order. If the array is already sorted, no cyclic shifts are needed, and the output should reflect that with k = 0.\n\n# [code logic]\n    The steps for checking if the array is already sorted and setting k = 0 if it is should be implemented simultaneously. This can be done by comparing the array with its sorted version and immediately deciding the output if they match.\n\n# [edge case]\n    Test case with a sorted array: \n    Input: [1, 2, 3, 4, 5]\n    Expected output: 0\n    Explanation: The array is already sorted, so no cyclic shifts are needed.\n\n    Test case with a single element out of place:\n    Input: [2, 1]\n    Expected output: 1\n    Explanation: A single cyclic shift can sort the array, e.g., shifting the segment [1, 2] by 1.\n\n    Test case with all elements the same:\n    Input: [3, 3, 3, 3]\n    Expected output: 0\n    Explanation: The array is already sorted as all elements are identical.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the array is already sorted and performing cyclic shifts as needed will naturally handle these cases.\n\nNO", "Round_0": {"code": "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for i in range(t):\n        n, array = test_cases[i]\n        sorted_array = sorted(array)\n        \n        if array == sorted_array:\n            results.append((0, []))\n            continue\n        \n        actions = []\n        \n        # Simple strategy: repeatedly find the largest unsorted segment and shift it\n        for j in range(n):\n            if array[j:] != sorted_array[j:]:\n                l = j + 1\n                r = n\n                d = 1\n                actions.append((l, r, d))\n                segment = array[l-1:r]\n                shifted_segment = segment[d:] + segment[:d]\n                array[l-1:r] = shifted_segment\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        array = list(map(int, data[index:index+n]))\n        index += n\n        test_cases.append((n, array))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for action in actions:\n            print(*action)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the arrays for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the first line, which represents the number of test cases.\",\n        \"For each test case, read the integer n and the array of integers a.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if the array is already sorted.\",\n      \"steps\": [\n        \"Check if the array a is in non-decreasing order.\",\n        \"If sorted, set k = 0 and prepare an empty sequence of cyclic shifts.\"\n      ]\n    },\n    {\n      \"description\": \"Sort the array using cyclic shifts.\",\n      \"steps\": [\n        \"Identify segments within the array that can be cyclically shifted to move elements into their correct positions.\",\n        \"Perform cyclic shifts on selected segments to sort the array.\",\n        \"Ensure the number of shifts does not exceed n.\"\n      ]\n    },\n    {\n      \"description\": \"Format the output for each test case.\",\n      \"steps\": [\n        \"For each test case, output the integer k, representing the number of cyclic shifts.\",\n        \"Output the k lines describing each cyclic shift in the format 'l r d'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the arrays for each test case.\",\n    \"For each test case, check if the array is already sorted.\",\n    \"If the array is not sorted, apply cyclic shifts to sort the array.\",\n    \"Ensure the number of cyclic shifts does not exceed n.\",\n    \"Format and output the results for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: A cyclic shift involves rotating a segment of the array to the left by a specified offset. This operation is used to rearrange elements within the array without changing the overall size or structure of the array.\n\n    'segment'\n    Explanation: A segment refers to a contiguous subarray defined by two indices, l and r, where 1 \u2264 l < r \u2264 n. This segment is the part of the array that can be cyclically shifted.\n\n# [phrase showing quantity relationship]\n    'no more than n'\n    Explanation: The number of cyclic shifts performed to sort the array should not exceed the length of the array, n. This ensures that the sorting process is efficient and within the given constraints.\n\n# [degree adverb]\n    'arbitrary'\n    Explanation: The term 'arbitrary' in this context means that the indices l, r, and the offset d can be chosen freely within the given constraints, allowing flexibility in how the array is manipulated.\n\n# [code logic]\n    The steps for checking if the array is already sorted and preparing an empty sequence of cyclic shifts if it is sorted should be considered simultaneously. This can be implemented using an if-else statement to handle both cases in one code block.\n\n# [edge case]\n    Edge Case 1: An array that is already sorted, e.g., [1, 2, 3, 4, 5]\n    Expected Output: 0\n    Explanation: Since the array is already sorted, no cyclic shifts are needed, and the output should be 0.\n\n    Edge Case 2: An array with all identical elements, e.g., [2, 2, 2, 2]\n    Expected Output: 0\n    Explanation: The array is technically sorted since all elements are the same, so no cyclic shifts are needed.\n\n    Edge Case 3: An array with the maximum number of elements, e.g., [5, 4, 3, 2, 1] for n = 5\n    Expected Output: 4\n    Explanation: This array is in reverse order, and it will require multiple cyclic shifts to sort it. The exact sequence of shifts can vary, but the number of shifts should not exceed n.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the array is sorted and applying cyclic shifts as needed will naturally handle these cases.\n\n", "Round_0": {"code": "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for i in range(t):\n        n, a = test_cases[i]\n        actions = []\n        \n        # Check if the array is already sorted\n        if a == sorted(a):\n            results.append((0, actions))\n            continue\n        \n        # Sort the array using cyclic shifts\n        sorted_a = sorted(a)\n        for j in range(n):\n            if a[j] != sorted_a[j]:\n                # Find the correct position of a[j] in the sorted array\n                correct_pos = sorted_a.index(a[j], j)\n                \n                # Perform cyclic shift\n                l = j + 1\n                r = correct_pos + 1\n                d = (r - l) % n\n                \n                # Perform the cyclic shift\n                segment = a[l-1:r]\n                shifted_segment = segment[d:] + segment[:d]\n                a[l-1:r] = shifted_segment\n                \n                actions.append((l, r, d))\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, a))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: 1 is not in list"}, "Round_1": {"code": "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for i in range(t):\n        n, a = test_cases[i]\n        actions = []\n        \n        # Check if the array is already sorted\n        if a == sorted(a):\n            results.append((0, actions))\n            continue\n        \n        # Sort the array using cyclic shifts\n        sorted_a = sorted(a)\n        for j in range(n):\n            if a[j] != sorted_a[j]:\n                # Find the correct position of a[j] in the sorted array\n                correct_pos = j\n                for k in range(j, n):\n                    if sorted_a[k] == a[j]:\n                        correct_pos = k\n                        break\n                \n                # Perform cyclic shift\n                l = j + 1\n                r = correct_pos + 1\n                d = (r - l) % n\n                \n                # Perform the cyclic shift\n                segment = a[l-1:r]\n                shifted_segment = segment[d:] + segment[:d]\n                a[l-1:r] = shifted_segment\n                \n                actions.append((l, r, d))\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, a))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the arrays for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the input, which represents the number of test cases.\",\n        \"For each test case, read the integer n, which represents the length of the array.\",\n        \"Read the array of integers a_i for each test case.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if the array is already sorted.\",\n      \"steps\": [\n        \"For each test case, check if the array is sorted in non-decreasing order.\",\n        \"If the array is sorted, set k = 0 and prepare an empty sequence of cyclic shifts.\"\n      ]\n    },\n    {\n      \"description\": \"Sort the array using cyclic shifts.\",\n      \"steps\": [\n        \"For each test case where the array is not sorted, identify segments that can be cyclically shifted to move elements into their correct positions.\",\n        \"Determine the indices l and r for the segment to be shifted and the offset d for the cyclic shift.\",\n        \"Perform the cyclic shift and update the array.\",\n        \"Repeat the process until the array is sorted or the number of shifts reaches n.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"For each test case, output the integer k, which represents the number of cyclic shifts performed.\",\n        \"Output the sequence of cyclic shifts in the format 'l r d' for each shift.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the arrays for each test case.\",\n    \"For each test case, check if the array is already sorted. If sorted, output k = 0 and an empty sequence.\",\n    \"For unsorted arrays, apply cyclic shifts to sort the array using no more than n shifts.\",\n    \"Output the number of shifts and the details of each shift for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: A cyclic shift involves rotating a segment of the array to the left by a specified offset, effectively rearranging the elements within that segment.\n\n    'sorted'\n    Explanation: The requirement is to sort the array using cyclic shifts, meaning the final array should be in non-decreasing order.\n\n# [phrase showing quantity relationship]\n    'no more than n'\n    Explanation: The number of cyclic shifts performed should not exceed the length of the array, n. This means the solution must be efficient enough to sort the array within n operations.\n\n# [degree adverb]\n    'arbitrary'\n    Explanation: The indices l and r, as well as the offset d, can be chosen freely within the given constraints, allowing flexibility in how the array is manipulated.\n\n# [code logic]\n    The steps for checking if the array is sorted and preparing an empty sequence of cyclic shifts should be considered simultaneously. If the array is already sorted, the output should directly reflect this without further processing.\n\n# [edge case]\n    Test case with already sorted array:\n    Input: [1, 2, 3, 4, 5]\n    Expected output: 0\n    Explanation: The array is already sorted, so no cyclic shifts are needed.\n\n    Test case with minimum length array:\n    Input: [2, 1]\n    Expected output: 1\n    Explanation: A single cyclic shift of the segment [1, 2] will sort the array.\n\n    Test case with all identical elements:\n    Input: [3, 3, 3, 3]\n    Expected output: 0\n    Explanation: The array is already sorted as all elements are identical, so no cyclic shifts are needed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the array is sorted and applying cyclic shifts as needed will naturally handle these cases.\n\nNO", "Round_0": {"code": "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for n, array in test_cases:\n        actions = []\n        \n        # Check if the array is already sorted\n        if array == sorted(array):\n            results.append((0, actions))\n            continue\n        \n        # Perform cyclic shifts to sort the array\n        for i in range(n):\n            min_index = i\n            for j in range(i + 1, n):\n                if array[j] < array[min_index]:\n                    min_index = j\n            \n            if min_index != i:\n                # Perform cyclic shift\n                l = i + 1\n                r = min_index + 1\n                d = r - l\n                segment = array[l-1:r]\n                shifted_segment = segment[d:] + segment[:d]\n                array[l-1:r] = shifted_segment\n                actions.append((l, r, d))\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        array = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, array))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [true, true, false, false, false, true, true, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 2, "round": 611, "prompt": "The new generation external memory contains an array of integers a[1 \u2026 n] = [a_1, a_2, \u2026, a_n]. This type of memory does not support changing the value of an arbitrary element. However, it allows you to cut out any segment of the given array, cyclically shift (rotate) it by any offset, and insert it back into the same place. Technically, each cyclic shift consists of two consecutive actions: 1. You may select arbitrary indices l and r (1 \u2264 l < r \u2264 n) as the boundaries of the segment. 2. Then you replace the segment a[l \u2026 r] with its cyclic shift to the left by an arbitrary offset d; the sequence [1, 4, 1, 3] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by offset 1, and the sequence [4, 1, 3, 1] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by offset 2. For example, if a = [1, \\color{blue}{3, 2, 8}, 5], then choosing l = 2, r = 4 and d = 2 yields a segment a[2 \u2026 4] = [3, 2, 8] which is then shifted by the offset d = 2 to the left, and you get a segment [8, 3, 2] which then takes the place of the original elements of the segment, resulting in a = [1, \\color{blue}{8, 3, 2}, 5]. Sort the given array a using no more than n cyclic shifts of any of its segments; note that you don't need to minimize the number of cyclic shifts, and any method that requires n or fewer cyclic shifts will be accepted.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain the descriptions of the test cases. \n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 50) \u2014 the length of the array. The second line consists of space-separated elements of the array a_i (-10^9 \u2264 a_i \u2264 10^9). Elements of array a may repeat and don't have to be unique.\n\nOutput\n\nPrint t answers to all input test cases. \n\nThe first line of the answer of each test case should contain an integer k (0 \u2264 k \u2264 n) \u2014 the number of actions to sort the array. The next k lines should contain descriptions of the actions formatted as \"l r d\" (without quotes) where l and r (1 \u2264 l < r \u2264 n) are the boundaries of the segment being shifted, while d (1 \u2264 d \u2264 r - l) is the offset value. Please remember that only the cyclic shifts to the left are considered so the chosen segment will be shifted by the offset d to the to the left.\n\nNote that you are not required to find the minimum number of cyclic shifts needed for sorting. Any sorting method where the number of shifts does not exceed n will be accepted.\n\nIf the given array a is already sorted, one of the possible answers is k = 0 and an empty sequence of cyclic shifts.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n\n\nOutput\n\n\n1\n1 2 1\n1\n1 3 2\n3\n2 4 1\n2 3 1\n1 3 2\n4\n2 4 2\n1 5 3\n1 2 1\n1 3 1\n\nNote\n\nExplanation of the fourth data set in the example: \n\n  1. The segment a[2 \u2026 4] is selected and is shifted to the left by 2: [2, \\color{blue}{5, 1, 4}, 3] \\longrightarrow [2, \\color{blue}{4, 5, 1}, 3] \n  2. The segment a[1 \u2026 5] is then selected and is shifted to the left by 3: [\\color{blue}{2, 4, 5, 1, 3}] \\longrightarrow [\\color{blue}{1, 3, 2, 4, 5}] \n  3. After that the segment a[1 \u2026 2] is selected and is shifted to the left by 1: [\\color{blue}{1, 3}, 2, 4, 5] \\longrightarrow [\\color{blue}{3, 1}, 2, 4, 5] \n  4. And in the end the segment a[1 \u2026 3] is selected and is shifted to the left by 1: [\\color{blue}{3, 1, 2}, 4, 5] \\longrightarrow [\\color{blue}{1, 2, 3}, 4, 5] ", "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain the descriptions of the test cases. \n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 50) \u2014 the length of the array. The second line consists of space-separated elements of the array a_i (-10^9 \u2264 a_i \u2264 10^9). Elements of array a may repeat and don't have to be unique.\n\nOutput\n\nPrint t answers to all input test cases. \n\nThe first line of the answer of each test case should contain an integer k (0 \u2264 k \u2264 n) \u2014 the number of actions to sort the array. The next k lines should contain descriptions of the actions formatted as \"l r d\" (without quotes) where l and r (1 \u2264 l < r \u2264 n) are the boundaries of the segment being shifted, while d (1 \u2264 d \u2264 r - l) is the offset value. Please remember that only the cyclic shifts to the left are considered so the chosen segment will be shifted by the offset d to the to the left.\n\nNote that you are not required to find the minimum number of cyclic shifts needed for sorting. Any sorting method where the number of shifts does not exceed n will be accepted.\n\nIf the given array a is already sorted, one of the possible answers is k = 0 and an empty sequence of cyclic shifts.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n\n\nOutput\n\n\n1\n1 2 1\n1\n1 3 2\n3\n2 4 1\n2 3 1\n1 3 2\n4\n2 4 2\n1 5 3\n1 2 1\n1 3 1\n\nNote\n\nExplanation of the fourth data set in the example: \n\n  1. The segment a[2 \u2026 4] is selected and is shifted to the left by 2: [2, \\color{blue}{5, 1, 4}, 3] \\longrightarrow [2, \\color{blue}{4, 5, 1}, 3] \n  2. The segment a[1 \u2026 5] is then selected and is shifted to the left by 3: [\\color{blue}{2, 4, 5, 1, 3}] \\longrightarrow [\\color{blue}{1, 3, 2, 4, 5}] \n  3. After that the segment a[1 \u2026 2] is selected and is shifted to the left by 1: [\\color{blue}{1, 3}, 2, 4, 5] \\longrightarrow [\\color{blue}{3, 1}, 2, 4, 5] \n  4. And in the end the segment a[1 \u2026 3] is selected and is shifted to the left by 1: [\\color{blue}{3, 1, 2}, 4, 5] \\longrightarrow [\\color{blue}{1, 2, 3}, 4, 5] ", "mutate_method": "expand_one2two", "save_node": true, "parent_index": 311}
