{"name": "1607_D. Blue-Red Permutation", "description": "You are given an array of integers a of length n. The elements of the array can be either different or the same. \n\nEach element of the array is colored either blue or red. There are no unpainted elements in the array. One of the two operations described below can be applied to an array in a single step:\n\n  * either you can select any blue element and decrease its value by 1; \n  * or you can select any red element and increase its value by 1. \n\n\n\nSituations in which there are no elements of some color at all are also possible. For example, if the whole array is colored blue or red, one of the operations becomes unavailable.\n\nDetermine whether it is possible to make 0 or more steps such that the resulting array is a permutation of numbers from 1 to n?\n\nIn other words, check whether there exists a sequence of steps (possibly empty) such that after applying it, the array a contains in some order all numbers from 1 to n (inclusive), each exactly once.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of input data sets in the test.\n\nThe description of each set of input data consists of three lines. The first line contains an integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the original array a. The second line contains n integers a_1, a_2, ..., a_n (-10^9 \u2264 a_i \u2264 10^9) \u2014 the array elements themselves.\n\nThe third line has length n and consists exclusively of the letters 'B' and/or 'R': ith character is 'B' if a_i is colored blue, and is 'R' if colored red.\n\nIt is guaranteed that the sum of n over all input sets does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case of the input. Print YES as an answer if the corresponding array can be transformed into a permutation, and NO otherwise.\n\nYou can print the answer in any case (for example, the strings yEs, yes, Yes, and YES will be recognized as a positive answer).\n\nExample\n\nInput\n\n\n8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n\nNote\n\nIn the first test case of the example, the following sequence of moves can be performed:\n\n  * choose i=3, element a_3=5 is blue, so we decrease it, we get a=[1,2,4,2]; \n  * choose i=2, element a_2=2 is red, so we increase it, we get a=[1,3,4,2]; \n  * choose i=3, element a_3=4 is blue, so we decrease it, we get a=[1,3,3,2]; \n  * choose i=2, element a_2=2 is red, so we increase it, we get a=[1,4,3,2]. \n\n\n\nWe got that a is a permutation. Hence the answer is YES.", "tags": ["greedy", "math", "sortings"], "difficulty": 10, "id": 1607, "sample_io": [{"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}], "test_list": [{"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n4 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n5 1 3 1 3\nRBRRB\n5\n5 1 5 1 2\nRBRRB\n4\n2 2 0 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "8\n4\n0 2 6 1\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 3\nRBRRB\n5\n3 1 3 1 5\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["NO\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 2 6 1\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 3\nRBRRB\n5\n3 1 6 1 5\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["NO\nNO\nYES\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 2 6 1\nBRBR\n2\n1 1\nBB\n5\n3 0 4 2 3\nRBRRB\n5\n5 1 6 1 5\nRBRRB\n5\n5 2 5 1 5\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 -1\nRRRR\n", "output": ["NO\nNO\nNO\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n2 1 4 2 5\nRBRRB\n5\n4 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 7 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nNO\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n3 1 3 1 1\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 3 5\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n4 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 0 4 2 5\nRBRRB\n5\n5 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nNO\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 3 9\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n0 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nNO\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 2\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n4 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRA\n4\n2 2 2 2\nBRBR\n2\n1 -3\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n6 1 4 2 5\nRBRRB\n5\n5 1 3 1 3\nRBRRB\n5\n5 1 5 1 2\nRBRRB\n4\n2 2 0 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nNO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n5 1 3 1 3\nRBRRB\n5\n0 1 5 1 2\nRBRRB\n4\n0 3 0 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 3 9\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 0 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n0 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nYES\nYES\nNO\nYES\n"]}, {"input": "8\n4\n1 1 5 2\nRBRB\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n5 1 3 1 3\nRBRRB\n5\n5 1 5 1 2\nRBRRB\n4\n0 2 0 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["NO\nNO\nYES\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "8\n4\n0 2 6 1\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 3\nRBRRB\n5\n3 1 6 1 10\nRBRRB\n5\n5 2 5 1 5\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nRB\n4\n-2 -1 2 -1\nRRRR\n", "output": ["NO\nNO\nYES\nNO\nNO\nYES\nNO\nYES\n"]}, {"input": "8\n4\n0 1 6 1\nBRBR\n2\n1 1\nBB\n5\n3 0 7 2 0\nRBRRB\n5\n5 1 3 1 5\nRBRRB\n5\n5 2 5 1 5\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["NO\nNO\nNO\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 0 4 2 2\nRBRRB\n5\n5 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nRB\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nNO\nYES\nNO\nYES\nNO\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n2 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n5 1 3 2 3\nRBRRB\n5\n0 1 5 1 2\nRBRRB\n4\n0 3 0 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBBRR\n2\n1 1\nBB\n5\n3 1 4 2 2\nRBRRB\n5\n5 1 3 1 3\nRBRRB\n5\n5 1 5 2 2\nRBRRB\n4\n0 3 0 2\nBRBR\n2\n1 -2\nRB\n4\n-2 -1 4 0\nRRRR\n", "output": ["NO\nNO\nYES\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nRBRB\n2\n1 1\nBB\n5\n3 0 4 2 2\nRBRRB\n5\n5 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nRB\n4\n-2 -1 4 0\nRRRR\n", "output": ["NO\nNO\nNO\nYES\nNO\nYES\nNO\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 2\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n4 1 6 1 4\nRBRRB\n5\n5 1 5 1 10\nRBRRA\n4\n2 2 2 2\nBRBR\n2\n1 -3\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nYES\nYES\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 6 1\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 3\nRBRRB\n5\n3 1 6 1 10\nRBRRB\n5\n5 2 5 1 7\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nRB\n4\n-2 -1 0 -1\nRRRR\n", "output": ["YES\nNO\nYES\nNO\nNO\nYES\nNO\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n5 1 3 1 3\nRBRRB\n5\n5 1 5 1 2\nRBRRB\n4\n0 3 0 2\nBRBR\n2\n0 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n2 1 4 2 5\nRBRRB\n5\n4 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nRB\n4\n-2 -1 7 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "8\n4\n0 2 6 1\nBRBR\n2\n1 2\nBB\n5\n3 1 4 2 3\nRBRRB\n5\n3 1 6 1 5\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nRBRB\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["NO\nYES\nYES\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 2\nBB\n5\n3 1 8 2 5\nBRRBR\n5\n4 1 3 1 4\nRBRRB\n5\n5 1 5 1 5\nRBRRA\n4\n2 2 2 2\nBRBR\n2\n1 -3\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nYES\nNO\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 6 9\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 0 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n0 -2\nRB\n4\n-1 -1 4 0\nRRRR\n", "output": ["YES\nNO\nNO\nYES\nYES\nYES\nNO\nYES\n"]}, {"input": "8\n4\n1 1 5 2\nRBRB\n2\n1 2\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n5 1 3 1 3\nRBRRB\n5\n5 1 5 1 2\nRBRRB\n4\n0 2 -1 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["NO\nYES\nYES\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBBRR\n2\n1 1\nBB\n5\n3 1 4 2 2\nRBRRB\n5\n8 1 3 1 3\nRBRRB\n5\n5 1 5 2 2\nRBRRB\n4\n0 3 0 2\nBRBR\n2\n1 -2\nRB\n4\n-2 -1 4 0\nRRRR\n", "output": ["NO\nNO\nYES\nNO\nNO\nNO\nNO\nYES\n"]}, {"input": "8\n4\n1 2 6 1\nBRBR\n2\n1 2\nBB\n5\n3 1 4 2 3\nRBRRB\n5\n3 1 6 1 10\nRBRRB\n5\n5 2 5 1 7\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nRB\n4\n-2 -1 0 -1\nRRRR\n", "output": ["YES\nYES\nYES\nNO\nNO\nYES\nNO\nYES\n"]}, {"input": "8\n4\n1 2 6 1\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 3\nRBRRB\n5\n3 1 6 1 10\nRBRRB\n5\n3 2 5 1 7\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nRB\n4\n-2 -1 0 -1\nRRRR\n", "output": ["YES\nNO\nYES\nNO\nYES\nYES\nNO\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n2 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n5 1 3 1 3\nRBRRB\n5\n5 1 5 1 2\nRBRRB\n4\n2 1 0 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nYES\nYES\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n3 1 5 1 3\nRBRRB\n5\n5 1 4 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-1 -1 8 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nYES\nYES\nYES\nNO\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 6 9\nRBRRB\n5\n3 1 3 1 1\nRBRRB\n5\n5 1 0 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n0 -2\nRB\n4\n-1 -1 4 0\nRRRR\n", "output": ["YES\nNO\nNO\nNO\nYES\nYES\nNO\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nRBRB\n2\n1 1\nBB\n5\n3 0 4 2 5\nRBRRB\n5\n1 1 3 1 1\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-1 -1 8 0\nRRRR\n", "output": ["NO\nNO\nNO\nNO\nNO\nYES\nYES\nNO\n"]}, {"input": "8\n4\n1 2 5 2\nRBRB\n2\n1 1\nBB\n5\n3 1 4 2 2\nRBRRB\n5\n0 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nRB\n4\n-2 -1 4 0\nRRRR\n", "output": ["NO\nNO\nYES\nYES\nNO\nYES\nNO\nYES\n"]}, {"input": "8\n4\n1 2 6 1\nBRBR\n2\n1 2\nBB\n5\n3 1 7 2 3\nRBRRB\n5\n3 1 6 1 10\nRBRRB\n5\n5 2 5 1 7\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nRB\n4\n-2 -1 0 -1\nRRRR\n", "output": ["YES\nYES\nNO\nNO\nNO\nYES\nNO\nYES\n"]}, {"input": "8\n4\n0 2 6 1\nBRBR\n2\n1 1\nBB\n5\n3 1 1 4 3\nRBRRB\n5\n3 1 6 0 5\nRBRRB\n5\n5 2 4 1 5\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 -2\nRRRR\n", "output": ["NO\nNO\nYES\nNO\nYES\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 6 1\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 0\nRBRRB\n5\n0 1 6 1 10\nRBRRA\n5\n5 2 5 1 7\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 0 -1\nRRRR\n", "output": ["YES\nNO\nNO\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 0 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n7 1 3 1 3\nRBRRB\n5\n5 1 2 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 0 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nNO\nYES\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 2 6 1\nBRBR\n2\n2 1\nBB\n5\n3 0 4 2 3\nRBRRB\n5\n5 1 6 1 5\nRBRRB\n5\n5 2 5 1 5\nBRRBR\n4\n3 2 2 2\nBRBR\n2\n1 -1\nBR\n4\n-2 -1 2 -1\nRRRR\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 2 6 1\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 4\nRBRRB\n5\n5 1 6 1 5\nRBRRB\n5\n5 2 5 1 5\nRBRRB\n4\n1 2 1 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 -2\nRRRR\n", "output": ["NO\nNO\nYES\nNO\nNO\nNO\nYES\nYES\n"]}, {"input": "8\n4\n1 1 5 2\nBRBR\n2\n1 2\nBB\n5\n3 1 4 2 10\nBRRBR\n5\n4 1 6 1 4\nRBRRB\n5\n5 1 5 1 10\nRBRRA\n4\n2 2 2 3\nBRBR\n2\n1 -3\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nYES\nNO\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n2 1 4 2 5\nRBRRB\n5\n4 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n4 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 3 5\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n4 1 3 1 4\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 3 10\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 4 5\nBRRBR\n5\n4 1 3 1 4\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n5 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 0 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n4 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n2 1 4 2 5\nRBRRB\n5\n2 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n4 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -3\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 3 9\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n4 1 3 0 4\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nRRBB\n2\n1 1\nBB\n5\n3 1 4 3 10\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 0 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 4 5\nBRRBR\n5\n4 1 3 1 4\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n5 1 3 1 3\nRBRRB\n5\n5 1 5 1 2\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 3\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n4 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRA\n4\n2 2 2 2\nBRBR\n2\n1 -3\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 4 9\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n4 1 3 0 4\nRBRRB\n5\n5 1 5 1 2\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nRRBB\n2\n1 1\nBB\n5\n3 1 4 3 10\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -1\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 0 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 7 5\nBRRBR\n5\n4 1 3 1 4\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 3\nRBRRB\n5\n3 1 3 1 5\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n4 1 3 1 3\nRBRRB\n5\n5 1 9 1 5\nRBRRA\n4\n2 2 2 2\nBRBR\n2\n1 -3\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 4 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 4 9\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n4 1 3 0 4\nRBRRB\n5\n5 1 5 1 2\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n5 1 3 1 3\nRBRRB\n5\n5 1 5 1 2\nRBRRB\n4\n0 2 0 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 1\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 3\nRBRRB\n5\n3 1 3 1 5\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n0 1 3 1 3\nRBRRB\n5\n5 1 9 1 5\nRBRRA\n4\n2 2 2 2\nBRBR\n2\n1 -3\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 4 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 4 9\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 3\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 3 5\nBRRBR\n5\n4 1 3 0 4\nRBRRB\n5\n5 1 5 1 2\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n5 1 3 1 3\nRBRRB\n5\n5 1 5 1 2\nRBRRB\n4\n0 3 0 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "8\n4\n2 2 6 1\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 3\nRBRRB\n5\n3 1 3 1 5\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n0 1 3 1 3\nRBRRB\n5\n5 1 9 0 5\nRBRRA\n4\n2 2 2 2\nBRBR\n2\n1 -3\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n5 1 3 1 3\nRBRRB\n5\n5 1 5 2 2\nRBRRB\n4\n0 3 0 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "8\n4\n1 1 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n0 1 3 1 3\nRBRRB\n5\n5 1 9 0 5\nRBRRA\n4\n2 2 2 2\nBRBR\n2\n1 -3\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 1 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n0 1 3 1 3\nRBRRB\n5\n5 1 9 -1 5\nRBRRA\n4\n2 2 2 2\nBRBR\n2\n1 -3\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 2 6 1\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 3\nRBRRB\n5\n3 1 6 1 5\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["NO\nNO\nYES\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 2 6 1\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 3\nRBRRB\n5\n3 1 6 1 5\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 -1\nRRRR\n", "output": ["NO\nNO\nYES\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 2 6 1\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 3\nRBRRB\n5\n3 1 6 1 5\nRBRRB\n5\n5 2 5 1 5\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 -1\nRRRR\n", "output": ["NO\nNO\nYES\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 2 6 1\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 3\nRBRRB\n5\n5 1 6 1 5\nRBRRB\n5\n5 2 5 1 5\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 -1\nRRRR\n", "output": ["NO\nNO\nYES\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 2 6 1\nBRBR\n2\n1 1\nBB\n5\n3 0 4 2 3\nRBRRB\n5\n5 1 6 1 5\nRBRRB\n5\n5 2 5 1 5\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["NO\nNO\nNO\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 2 6 1\nBRBR\n2\n1 1\nBB\n5\n3 0 4 2 0\nRBRRB\n5\n5 1 6 1 5\nRBRRB\n5\n5 2 5 1 5\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["NO\nNO\nNO\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 1 6 1\nBRBR\n2\n1 1\nBB\n5\n3 0 4 2 0\nRBRRB\n5\n5 1 6 1 5\nRBRRB\n5\n5 2 5 1 5\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["NO\nNO\nNO\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 1 6 1\nBRBR\n2\n1 1\nBB\n5\n3 0 4 2 0\nRBRRB\n5\n5 1 6 1 5\nRBRRB\n5\n5 4 5 1 5\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["NO\nNO\nNO\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 1 6 1\nBRBR\n2\n1 1\nBB\n5\n3 0 4 2 0\nRBRRB\n5\n5 1 6 0 5\nRBRRB\n5\n5 4 5 1 5\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["NO\nNO\nNO\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n3 1 5 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n1 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n4 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nBRRBR\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n4 1 3 1 4\nRBRRB\n5\n5 1 5 1 4\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 3 10\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 3 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n3 1 5 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRRBBR\n5\n4 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -3\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nRRBB\n2\n1 1\nBB\n5\n3 1 4 3 10\nRBRRB\n5\n3 1 6 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 0 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 1 4 5\nBRRBR\n5\n4 1 3 1 4\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 6 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 3\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 4 9\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 0 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n3 1 3 0 4\nRBRRB\n5\n5 1 5 1 2\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nRRBB\n2\n1 1\nBB\n5\n3 1 4 3 10\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 1 2\nBRBR\n2\n1 -1\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 0 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 7 5\nBRRBR\n5\n4 1 3 1 4\nRBRRB\n5\n5 0 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n4 1 0 1 3\nRBRRB\n5\n5 1 9 1 5\nRBRRA\n4\n2 2 2 2\nBRBR\n2\n1 -3\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 4 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 4 9\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 0 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n5 1 4 2 5\nBRRBR\n5\n4 1 3 0 4\nRBRRB\n5\n5 1 5 1 2\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 1 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n5 1 3 1 3\nRBRRB\n5\n5 1 5 1 2\nRBRRB\n4\n0 2 0 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 1\nRBBR\n2\n1 1\nBB\n5\n3 1 4 2 3\nRBRRB\n5\n3 1 3 1 5\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n0 1 3 1 3\nRBRRB\n5\n5 1 9 1 5\nRBRRA\n4\n0 2 2 2\nBRBR\n2\n1 -3\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "8\n4\n2 4 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 4 9\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n1 2 2 3\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 0\nBRBR\n2\n1 1\nBB\n5\n3 1 4 3 5\nBRRBR\n5\n4 1 3 0 4\nRBRRB\n5\n5 1 5 1 2\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 6 1\nBRBR\n2\n0 1\nBB\n5\n3 1 4 2 3\nRBRRB\n5\n3 1 3 1 5\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n0 1 3 1 3\nRBRRB\n5\n5 1 9 0 5\nRBRRA\n4\n2 2 2 2\nBRBR\n2\n1 -3\nBR\n4\n-4 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 2\nRBRRB\n5\n5 1 3 1 3\nRBRRB\n5\n5 1 5 2 2\nRBRRB\n4\n0 3 0 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "8\n4\n0 2 6 1\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n3 1 3 1 5\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["NO\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 2 6 1\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 3\nRBRRB\n5\n3 1 6 1 5\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nRBRB\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["NO\nNO\nYES\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 2 6 1\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 3\nRBRRB\n5\n3 1 6 1 5\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n3 3 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["NO\nNO\nYES\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 2 6 1\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 3\nRBRRB\n5\n3 1 6 1 10\nRBRRB\n5\n5 2 5 1 5\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 -1\nRRRR\n", "output": ["NO\nNO\nYES\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 2 6 1\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 3\nRBRRB\n5\n5 1 6 1 5\nRBRRB\n5\n5 2 5 1 5\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 -2\nRRRR\n", "output": ["NO\nNO\nYES\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 2 6 1\nBRBR\n2\n1 1\nBB\n5\n3 0 4 2 1\nRBRRB\n5\n5 1 6 1 5\nRBRRB\n5\n5 2 5 1 5\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["NO\nNO\nNO\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 1 6 1\nBRBR\n2\n1 1\nBB\n5\n3 0 7 2 0\nRBRRB\n5\n5 1 6 1 5\nRBRRB\n5\n5 2 5 1 5\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["NO\nNO\nNO\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 1 6 1\nBRBR\n2\n1 1\nBB\n5\n3 0 4 2 0\nRBRRB\n5\n5 1 6 1 6\nRBRRB\n5\n5 4 5 1 5\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["NO\nNO\nNO\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 1 6 1\nBRBR\n2\n1 1\nBB\n5\n6 0 4 2 0\nRBRRB\n5\n5 1 6 0 5\nRBRRB\n5\n5 4 5 1 5\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["NO\nNO\nNO\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n3 1 5 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-1 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 0 4 2 5\nRBRRB\n5\n1 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nNO\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n4 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nBRRBR\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 0 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 3 5\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n4 1 5 1 5\nRBRRB\n4\n2 2 2 3\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n4 1 3 1 4\nRBRRB\n5\n5 1 5 1 4\nRBBRR\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 0 4 2 2\nRBRRB\n5\n5 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nNO\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n3 1 5 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRQB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 3 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRRBBR\n5\n4 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -3\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 2\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n4 1 3 1 4\nRBRRB\n5\n5 1 5 1 5\nRBRRA\n4\n2 2 2 2\nBRBR\n2\n1 -3\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 4 9\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-4 -1 0 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 0 5 2\nBRBR\n2\n1 1\nBB\n5\n3 0 4 7 5\nBRRBR\n5\n4 1 3 1 4\nRBRRB\n5\n5 0 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n4 1 0 1 3\nRBRRB\n5\n5 1 9 1 5\nRBRRA\n4\n2 2 2 2\nBRBR\n2\n1 -3\nBR\n4\n-3 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 4 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 4 9\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 0 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 0 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nRBBR\n2\n1 1\nBB\n5\n5 1 4 2 5\nBRRBR\n5\n4 1 3 0 4\nRBRRB\n5\n5 1 5 1 2\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 1\nRBBR\n2\n1 1\nBB\n5\n3 1 5 2 3\nRBRRB\n5\n3 1 3 1 5\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 0\nBRBR\n2\n1 1\nBB\n5\n3 1 4 3 5\nBRRBR\n5\n4 1 3 0 4\nRBRRB\n5\n5 1 4 1 2\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n5 1 3 2 3\nRBRRB\n5\n0 1 5 1 2\nRBRRB\n4\n0 3 0 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n0 1 3 1 6\nRBRRB\n5\n5 1 9 0 5\nRBRRA\n4\n2 2 2 2\nBRBR\n2\n1 -3\nBR\n4\n-4 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBBRR\n2\n1 1\nBB\n5\n3 1 4 2 2\nRBRRB\n5\n5 1 3 1 3\nRBRRB\n5\n5 1 5 2 2\nRBRRB\n4\n0 3 0 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["NO\nNO\nYES\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "8\n4\n0 2 6 1\nBRBR\n2\n1 1\nBB\n5\n3 1 1 2 3\nRBRRB\n5\n5 1 6 1 5\nRBRRB\n5\n5 2 5 1 5\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 -2\nRRRR\n", "output": ["NO\nNO\nYES\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 2 6 1\nBRBR\n2\n1 1\nBB\n5\n3 0 4 2 1\nRBRRB\n5\n5 1 6 1 5\nRBRRB\n5\n5 3 5 1 5\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["NO\nNO\nNO\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 1 6 1\nBRBR\n2\n1 1\nBB\n5\n3 0 4 2 0\nRBRRB\n5\n5 1 6 1 6\nRBRRB\n5\n5 4 5 1 5\nRBRRB\n4\n3 2 2 1\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["NO\nNO\nNO\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n3 1 5 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-1 -1 4 -1\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nRBRB\n2\n1 1\nBB\n5\n3 0 4 2 5\nRBRRB\n5\n1 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["NO\nNO\nNO\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n4 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nBRRBR\n4\n2 2 2 2\nBRBR\n2\n1 -2\nRB\n4\n-2 0 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nNO\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 3 5\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n4 1 5 1 5\nBRRBR\n4\n2 2 2 3\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 3\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n4 1 3 1 4\nRBRRB\n5\n5 1 5 1 4\nRBBRR\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n0 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n3 1 5 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRQB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 3 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRRBBR\n5\n4 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nRBRB\n2\n1 -3\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 3 9\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 0 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n0 -2\nRB\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nYES\nYES\nNO\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 2\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n4 1 3 1 4\nRBRRB\n5\n5 1 5 1 10\nRBRRA\n4\n2 2 2 2\nBRBR\n2\n1 -3\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 4 9\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nRB\n4\n-4 -1 0 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nNO\nYES\n"]}, {"input": "8\n4\n1 0 5 2\nBRBR\n2\n1 1\nBB\n5\n3 0 4 7 5\nBRRBR\n5\n4 1 3 1 4\nRBRRB\n5\n5 -1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 9 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n4 1 0 1 3\nRBRRB\n5\n5 1 9 1 5\nRBRRA\n4\n2 2 2 2\nBRBR\n2\n1 -3\nBR\n4\n-3 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n4 4 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 4 9\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 0 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 0 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 1 5 2\nRBRB\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n5 1 3 1 3\nRBRRB\n5\n5 1 5 1 2\nRBRRB\n4\n0 2 -1 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["NO\nNO\nYES\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 1\nRBBR\n2\n1 1\nBB\n5\n3 1 5 2 3\nRBRRB\n5\n3 1 3 1 5\nRBRRB\n5\n5 1 5 1 8\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 0\nBRBR\n2\n1 1\nBB\n5\n3 1 4 3 5\nBRRBR\n5\n4 1 3 0 4\nRBRRB\n5\n5 1 4 1 2\nRBRRB\n4\n3 2 2 4\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n0 1 3 1 6\nRBRRB\n5\n5 1 9 0 5\nRBRRA\n4\n2 3 2 2\nBRBR\n2\n1 -3\nBR\n4\n-4 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 2 6 1\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 3\nRBRRB\n5\n3 1 6 1 10\nRBRRB\n5\n5 2 5 1 7\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nRB\n4\n-2 -1 2 -1\nRRRR\n", "output": ["NO\nNO\nYES\nNO\nNO\nYES\nNO\nYES\n"]}, {"input": "8\n4\n0 2 6 1\nBRBR\n2\n1 1\nBB\n5\n3 1 1 4 3\nRBRRB\n5\n5 1 6 1 5\nRBRRB\n5\n5 2 5 1 5\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 -2\nRRRR\n", "output": ["NO\nNO\nYES\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 2 6 1\nBRBR\n2\n1 1\nBB\n5\n5 0 4 2 1\nRBRRB\n5\n5 1 6 1 5\nRBRRB\n5\n5 3 5 1 5\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["NO\nNO\nNO\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 1 6 1\nBRBR\n2\n1 1\nBB\n5\n3 0 5 2 0\nRBRRB\n5\n5 1 3 1 5\nRBRRB\n5\n5 2 5 1 5\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["NO\nNO\nNO\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 1 6 1\nBRBR\n2\n1 1\nBB\n5\n3 0 4 2 0\nRBRRB\n5\n5 1 6 2 6\nRBRRB\n5\n5 4 5 1 5\nRBRRB\n4\n3 2 2 1\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["NO\nNO\nNO\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nRBRB\n2\n1 1\nBB\n5\n3 0 4 2 5\nRBRRB\n5\n1 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-1 -1 4 0\nRRRR\n", "output": ["NO\nNO\nNO\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n4 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 3 5\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n4 1 5 1 5\nBRRBR\n4\n2 2 2 3\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 3\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n4 1 3 1 4\nRBRRB\n5\n5 1 5 1 4\nRBBRR\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -2 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n0 1\nBB\n5\n5 1 4 2 5\nRBRRB\n5\n3 1 5 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRQB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 3 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 1\nRRBBR\n5\n4 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nRBRB\n2\n1 -3\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 3 9\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 0 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n0 -2\nRB\n4\n-1 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nYES\nYES\nNO\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 2\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n4 1 5 1 4\nRBRRB\n5\n5 1 5 1 10\nRBRRA\n4\n2 2 2 2\nBRBR\n2\n1 -3\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 4 9\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 4 2 2\nBRBR\n2\n1 -2\nRB\n4\n-4 -1 0 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nNO\nYES\n"]}, {"input": "8\n4\n1 0 5 2\nBRBR\n2\n1 1\nBB\n5\n3 0 4 7 5\nBRRBR\n5\n4 1 3 1 4\nRBRRB\n5\n5 -1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nRB\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nNO\nYES\n"]}, {"input": "8\n4\n4 4 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 4 9\nRBRRB\n5\n3 1 3 1 0\nRBRRB\n5\n5 1 5 0 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 0 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 1 5 2\nRBRB\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n5 1 3 1 3\nRBRRB\n5\n5 1 5 1 2\nRBRRB\n4\n-1 2 -1 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["NO\nNO\nYES\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 0\nBRBR\n2\n1 1\nBB\n5\n3 1 4 3 5\nBRRBR\n5\n4 1 2 0 4\nRBRRB\n5\n5 1 4 1 2\nRBRRB\n4\n3 2 2 4\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n2 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n5 1 3 1 3\nRBRRB\n5\n0 1 5 1 2\nRBRRB\n4\n0 3 0 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBBRR\n2\n1 1\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n0 1 3 1 6\nRBRRB\n5\n5 1 9 0 5\nRBRRA\n4\n2 3 2 2\nBRBR\n2\n1 -3\nBR\n4\n-4 -1 4 0\nRRRR\n", "output": ["NO\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 2 6 1\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 3\nRBRRB\n5\n3 1 6 1 10\nRBRRB\n5\n5 2 5 1 7\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nRB\n4\n-2 -1 0 -1\nRRRR\n", "output": ["NO\nNO\nYES\nNO\nNO\nYES\nNO\nYES\n"]}, {"input": "8\n4\n0 2 6 1\nBRBR\n2\n1 1\nBB\n5\n3 1 1 4 3\nRBRRB\n5\n5 1 6 0 5\nRBRRB\n5\n5 2 5 1 5\nRBRRB\n4\n3 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 -2\nRRRR\n", "output": ["NO\nNO\nYES\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 1 6 1\nBRBR\n2\n1 1\nBB\n5\n3 0 5 2 0\nRBRRB\n5\n5 1 3 1 5\nRBRRB\n5\n5 2 5 1 5\nRBRRB\n4\n3 2 2 1\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["NO\nNO\nNO\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 1 6 1\nBRBR\n2\n1 1\nBB\n5\n3 0 4 2 0\nRBRRB\n5\n5 0 6 2 6\nRBRRB\n5\n5 4 5 1 5\nRBRRB\n4\n3 2 2 1\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["NO\nNO\nNO\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRRB\n2\n1 1\nBB\n5\n3 0 4 2 5\nRBRRB\n5\n1 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-1 -1 4 0\nRRRR\n", "output": ["NO\nNO\nNO\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 3\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n4 1 3 1 4\nRBRRB\n5\n5 1 5 2 4\nRBBRR\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -2 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 3 2\nBRBR\n2\n0 1\nBB\n5\n5 1 4 2 5\nRBRRB\n5\n3 1 5 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRQB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 3 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 1\nRRBBR\n5\n4 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nRBRB\n2\n1 -3\nBR\n4\n-2 -1 4 1\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 3 9\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 0 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n0 -4\nRB\n4\n-1 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nYES\nYES\nNO\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 4 9\nRBRRB\n5\n3 1 1 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 4 2 2\nBRBR\n2\n1 -2\nRB\n4\n-4 -1 0 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nNO\nYES\n"]}, {"input": "8\n4\n1 0 5 2\nBRBR\n2\n1 1\nBB\n5\n3 0 4 7 5\nBRRBR\n5\n4 1 3 1 4\nRBRRB\n5\n5 -2 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nRB\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nNO\nYES\nNO\nYES\n"]}, {"input": "8\n4\n4 4 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 4 9\nRBRRB\n5\n3 1 3 1 1\nRBRRB\n5\n5 1 5 0 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 0 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nNO\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 0\nBRBR\n2\n1 1\nBB\n5\n3 1 4 3 5\nBRRBR\n5\n4 1 2 0 4\nRBRRB\n5\n5 1 4 1 2\nRBRRB\n4\n3 2 2 4\nBRBR\n2\n1 -2\nBR\n4\n-1 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBBRR\n2\n1 1\nBB\n5\n6 1 4 2 5\nBRRBR\n5\n0 1 3 1 6\nRBRRB\n5\n5 1 9 0 5\nRBRRA\n4\n2 3 2 2\nBRBR\n2\n1 -3\nBR\n4\n-4 -1 4 0\nRRRR\n", "output": ["NO\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n0 1 6 1\nBRBR\n2\n1 1\nBB\n5\n3 0 5 2 0\nRBRRB\n5\n5 1 3 1 5\nRBRRB\n5\n5 2 5 1 5\nRBRRB\n4\n3 2 2 1\nBRBR\n2\n2 -2\nBR\n4\n-2 -1 2 0\nRRRR\n", "output": ["NO\nNO\nNO\nYES\nNO\nYES\nYES\nYES\n"]}, {"input": "8\n4\n2 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 3 9\nRBRRB\n5\n3 1 3 1 5\nRBRRB\n5\n5 1 0 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n0 -4\nRB\n4\n-1 -1 4 0\nRRRR\n", "output": ["YES\nNO\nYES\nYES\nYES\nYES\nNO\nYES\n"]}, {"input": "8\n4\n1 2 5 2\nBRBR\n2\n1 4\nBB\n5\n3 1 4 2 5\nBRRBR\n5\n4 1 6 1 4\nRBRRB\n5\n5 1 5 1 10\nRBRRA\n4\n2 2 2 2\nBRBR\n2\n1 -3\nBR\n4\n-2 -1 4 0\nRRRR\n", "output": ["YES\nYES\nYES\nNO\nNO\nYES\nYES\nYES\n"]}], "task_id": "codecontest/101", "repair_prompt": ["You are given an array of integers a of length n; each element of the array is colored either blue or red, with no unpainted elements, and they can be either different or the same. One of the two operations described below can be applied to an array in a single step:\n\n  * either you can select any blue element and decrease its value by 1; \n  * or you can select any red element and increase its value by 1.\n\nSituations in which there are no elements of some color at all are also possible. For example, if the whole array is colored blue or red, one of the operations becomes unavailable.\n\nDetermine whether it is possible to make 0 or more steps such that the resulting array is a permutation of numbers from 1 to n?\n\nIn other words, check whether there exists a sequence of steps (possibly empty) such that after applying it, the array a contains in some order all numbers from 1 to n (inclusive), each exactly once.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of input data sets in the test.\n\nThe description of each set of input data consists of three lines. The first line contains an integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the original array a. The second line contains n integers a_1, a_2, ..., a_n (-10^9 \u2264 a_i \u2264 10^9) \u2014 the array elements themselves.\n\nThe third line has length n and consists exclusively of the letters 'B' and/or 'R': ith character is 'B' if a_i is colored blue, and is 'R' if colored red.\n\nIt is guaranteed that the sum of n over all input sets does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case of the input. Print YES as an answer if the corresponding array can be transformed into a permutation, and NO otherwise.\n\nYou can print the answer in any case (for example, the strings yEs, yes, Yes, and YES will be recognized as a positive answer).\n\nExample\n\nInput\n\n\n8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n\nNote\n\nIn the first test case of the example, the following sequence of moves can be performed:\n\n  * choose i=3, element a_3=5 is blue, so we decrease it, we get a=[1,2,4,2]; \n  * choose i=2, element a_2=2 is red, so we increase it, we get a=[1,3,4,2]; \n  * choose i=3, element a_3=4 is blue, so we decrease it, we get a=[1,3,3,2]; \n  * choose i=2, element a_2=2 is red, so we increase it, we get a=[1,4,3,2]. \n\n\n\nWe got that a is a permutation. Hence the answer is YES.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "You are given an array of integers a of length n; each element of the array is colored either blue or red, with no unpainted elements, and they can be either different or the same. One of the two operations described below can be applied to an array in a single step:\n\n  * either you can select any blue element. You are allowed to decrease its value by 1;\n  * or you can select any red element and increase its value by 1.\n\nSituations in which there are no elements of some color at all are also possible. For example, if the whole array is colored blue or red, one of the operations becomes unavailable.\n\nDetermine whether it is possible to make 0 or more steps such that the resulting array is a permutation of numbers from 1 to n?\n\nIn other words, check whether there exists a sequence of steps (possibly empty) such that after applying it, the array a contains in some order all numbers from 1 to n (inclusive), each exactly once.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of input data sets in the test.\n\nThe description of each set of input data consists of three lines. The first line contains an integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the original array a. The second line contains n integers a_1, a_2, ..., a_n (-10^9 \u2264 a_i \u2264 10^9) \u2014 the array elements themselves.\n\nThe third line has length n and consists exclusively of the letters 'B' and/or 'R': ith character is 'B' if a_i is colored blue, and is 'R' if colored red.\n\nIt is guaranteed that the sum of n over all input sets does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case of the input. Print YES as an answer if the corresponding array can be transformed into a permutation, and NO otherwise.\n\nYou can print the answer in any case (for example, the strings yEs, yes, Yes, and YES will be recognized as a positive answer).\n\nExample\n\nInput\n\n\n8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n\nNote\n\nIn the first test case of the example, the following sequence of moves can be performed:\n\n  * choose i=3, element a_3=5 is blue, so we decrease it, we get a=[1,2,4,2]; \n  * choose i=2, element a_2=2 is red, so we increase it, we get a=[1,3,4,2]; \n  * choose i=3, element a_3=4 is blue, so we decrease it, we get a=[1,3,3,2]; \n  * choose i=2, element a_2=2 is red, so we increase it, we get a=[1,4,3,2]. \n\n\n\nWe got that a is a permutation. Hence the answer is YES.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "You are given an array of integers a of length n; each element of the array is colored either blue or red, with no unpainted elements, and they can be either different or the same, and in the process of manipulating the array, situations in which there are no elements of some color at all are also possible. One of the two operations described below can be applied to an array in a single step:\n\n  * either you can select any blue element and decrease its value by 1; \n  * or you can select any red element and increase its value by 1.\n\nFor example, if the whole array is colored blue or red, one of the operations becomes unavailable.\n\nDetermine whether it is possible to make 0 or more steps such that the resulting array is a permutation of numbers from 1 to n?\n\nIn other words, check whether there exists a sequence of steps (possibly empty) such that after applying it, the array a contains in some order all numbers from 1 to n (inclusive), each exactly once.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of input data sets in the test.\n\nThe description of each set of input data consists of three lines. The first line contains an integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the original array a. The second line contains n integers a_1, a_2, ..., a_n (-10^9 \u2264 a_i \u2264 10^9) \u2014 the array elements themselves.\n\nThe third line has length n and consists exclusively of the letters 'B' and/or 'R': ith character is 'B' if a_i is colored blue, and is 'R' if colored red.\n\nIt is guaranteed that the sum of n over all input sets does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case of the input. Print YES as an answer if the corresponding array can be transformed into a permutation, and NO otherwise.\n\nYou can print the answer in any case (for example, the strings yEs, yes, Yes, and YES will be recognized as a positive answer).\n\nExample\n\nInput\n\n\n8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n\nNote\n\nIn the first test case of the example, the following sequence of moves can be performed:\n\n  * choose i=3, element a_3=5 is blue, so we decrease it, we get a=[1,2,4,2]; \n  * choose i=2, element a_2=2 is red, so we increase it, we get a=[1,3,4,2]; \n  * choose i=3, element a_3=4 is blue, so we decrease it, we get a=[1,3,3,2]; \n  * choose i=2, element a_2=2 is red, so we increase it, we get a=[1,4,3,2]. \n\n\n\nWe got that a is a permutation. Hence the answer is YES.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def can_form_permutation(n, a, colors):\n    # Create two lists to track the minimum and maximum possible values\n    min_possible = [0] * n\n    max_possible = [0] * n\n\n    for i in range(n):\n        if colors[i] == 'B':\n            # Blue elements can be decreased, so they must be at least 1\n            min_possible[i] = max(1, a[i])\n            max_possible[i] = n\n        else:  # colors[i] == 'R'\n            # Red elements can be increased, so they must be at most n\n            min_possible[i] = 1\n            max_possible[i] = min(n, a[i])\n\n    # Sort the min_possible and max_possible lists\n    min_possible.sort()\n    max_possible.sort()\n\n    # Check if we can form a permutation from 1 to n\n    for i in range(n):\n        if min_possible[i] > i + 1 or max_possible[i] < i + 1:\n            return \"NO\"\n    \n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        colors = data[index]\n        index += 1\n\n        result = can_form_permutation(n, a, colors)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def can_form_permutation(n, a, colors):\n    # Initialize lists to track minimum and maximum possible values\n    min_possible = []\n    max_possible = []\n    \n    for i in range(n):\n        if colors[i] == 'B':\n            # Blue elements can be decreased to at least 1\n            min_possible.append(max(1, a[i]))\n            max_possible.append(a[i])\n        else:  # colors[i] == 'R'\n            # Red elements can be increased to at most n\n            min_possible.append(a[i])\n            max_possible.append(min(n, a[i]))\n    \n    # Sort the possible values\n    min_possible.sort()\n    max_possible.sort()\n    \n    # Check if we can form a permutation from 1 to n\n    for i in range(n):\n        if min_possible[i] > i + 1 or max_possible[i] < i + 1:\n            return \"NO\"\n    \n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        colors = data[index]\n        index += 1\n        \n        result = can_form_permutation(n, a, colors)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_transform_to_permutation(n, a, colors):\n    # Create lists to track the minimum and maximum possible values\n    min_possible = [0] * n\n    max_possible = [0] * n\n\n    # Fill the min_possible and max_possible based on colors\n    for i in range(n):\n        if colors[i] == 'B':\n            min_possible[i] = max(1, a[i])\n            max_possible[i] = n\n        else:  # colors[i] == 'R'\n            min_possible[i] = 1\n            max_possible[i] = min(n, a[i])\n\n    # Check if a valid permutation exists\n    for target in range(1, n + 1):\n        found = False\n        for i in range(n):\n            if min_possible[i] <= target <= max_possible[i]:\n                found = True\n                # Mark this position as used by setting its range to an invalid one\n                min_possible[i] = max_possible[i] = -1\n                break\n        if not found:\n            return False\n    return True\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        colors = data[index]\n        index += 1\n\n        if can_transform_to_permutation(n, a, colors):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_permutation(n, a, colors):\n    blue_elements = []\n    red_elements = []\n    \n    for i in range(n):\n        if colors[i] == 'B':\n            blue_elements.append(a[i])\n        else:\n            red_elements.append(a[i])\n    \n    # Sort the blue elements in ascending order and red elements in descending order\n    blue_elements.sort()\n    red_elements.sort(reverse=True)\n    \n    # Check if blue elements can be decreased to fit within the range [1, n]\n    for i, value in enumerate(blue_elements):\n        if value < i + 1:\n            return \"NO\"\n    \n    # Check if red elements can be increased to fit within the range [1, n]\n    for i, value in enumerate(red_elements):\n        if value > n - i:\n            return \"NO\"\n    \n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        colors = data[index]\n        index += 1\n        \n        result = can_form_permutation(n, a, colors)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_permutation(n, a, colors):\n    # Separate the elements based on their colors\n    blue_elements = []\n    red_elements = []\n    \n    for i in range(n):\n        if colors[i] == 'B':\n            blue_elements.append(a[i])\n        else:\n            red_elements.append(a[i])\n    \n    # Sort the blue elements in descending order (to decrease them)\n    blue_elements.sort(reverse=True)\n    # Sort the red elements in ascending order (to increase them)\n    red_elements.sort()\n    \n    # Check if we can form a permutation from 1 to n\n    current_number = 1\n    \n    # Process blue elements\n    for value in blue_elements:\n        if value >= current_number:\n            current_number += 1\n    \n    # Process red elements\n    for value in red_elements:\n        if value <= current_number:\n            current_number += 1\n    \n    # If we have reached n+1, it means we can form a permutation from 1 to n\n    return current_number == n + 1\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        colors = data[index]\n        index += 1\n        \n        if can_form_permutation(n, a, colors):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_permutation(n, array, colors):\n    # Separate the elements based on their colors\n    blue_elements = []\n    red_elements = []\n    \n    for i in range(n):\n        if colors[i] == 'B':\n            blue_elements.append(array[i])\n        else:\n            red_elements.append(array[i])\n    \n    # Sort the elements\n    blue_elements.sort()\n    red_elements.sort()\n    \n    # Check if we can form a permutation from 1 to n\n    for i in range(1, n + 1):\n        # Check if we can use a blue element for this position\n        if blue_elements and blue_elements[0] <= i:\n            blue_elements.pop(0)\n        # Otherwise, check if we can use a red element\n        elif red_elements and red_elements[-1] >= i:\n            red_elements.pop()\n        else:\n            return \"NO\"\n    \n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        array = list(map(int, data[index:index + n]))\n        index += n\n        colors = data[index]\n        index += 1\n        \n        result = can_form_permutation(n, array, colors)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_permutation(n, a, colors):\n    # Initialize lists to track the minimum and maximum possible values\n    min_possible = [0] * n\n    max_possible = [0] * n\n    \n    # Iterate over the array and color string\n    for i in range(n):\n        if colors[i] == 'B':\n            # Blue elements can only decrease, so they must be >= 1\n            min_possible[i] = max(1, a[i])\n            max_possible[i] = a[i]\n        else:  # colors[i] == 'R'\n            # Red elements can only increase, so they must be <= n\n            min_possible[i] = a[i]\n            max_possible[i] = min(n, a[i])\n    \n    # Sort the min_possible and max_possible lists\n    min_possible.sort()\n    max_possible.sort()\n    \n    # Check if a valid permutation can be formed\n    for i in range(n):\n        if min_possible[i] > i + 1 or max_possible[i] < i + 1:\n            return \"NO\"\n    \n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        colors = data[index]\n        index += 1\n        \n        result = can_form_permutation(n, a, colors)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_permutation(n, a, colors):\n    blue_elements = []\n    red_elements = []\n    \n    for i in range(n):\n        if colors[i] == 'B':\n            blue_elements.append(a[i])\n        else:\n            red_elements.append(a[i])\n    \n    blue_elements.sort()\n    red_elements.sort(reverse=True)\n    \n    for i in range(1, n + 1):\n        if blue_elements and blue_elements[0] < i:\n            blue_elements.pop(0)\n        elif red_elements and red_elements[0] > i:\n            red_elements.pop(0)\n        else:\n            return \"NO\"\n    \n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        colors = data[index]\n        index += 1\n        \n        result = can_form_permutation(n, a, colors)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_permutation(n, a, colors):\n    blue_min = 1\n    red_max = n\n    \n    # Create a list of tuples (value, color) and sort it\n    elements = sorted((a[i], colors[i]) for i in range(n))\n    \n    for i in range(n):\n        value, color = elements[i]\n        if color == 'B':\n            if value < blue_min:\n                return \"NO\"\n            blue_min += 1\n        elif color == 'R':\n            if value > red_max:\n                return \"NO\"\n            red_max -= 1\n    \n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        colors = data[index]\n        index += 1\n        \n        result = can_form_permutation(n, a, colors)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_transform_to_permutation(t, test_cases):\n    results = []\n    for n, a, colors in test_cases:\n        blue = []\n        red = []\n        \n        for i in range(n):\n            if colors[i] == 'B':\n                blue.append(a[i])\n            else:\n                red.append(a[i])\n        \n        blue.sort()\n        red.sort(reverse=True)\n        \n        # Check conditions\n        possible = True\n        for i in range(n):\n            if i < len(blue) and blue[i] < i + 1:\n                possible = False\n                break\n            if i < len(red) and red[i] > n - i:\n                possible = False\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nt = int(data[0])\nindex = 1\ntest_cases = []\n\nfor _ in range(t):\n    n = int(data[index])\n    index += 1\n    a = list(map(int, data[index:index + n]))\n    index += n\n    colors = data[index]\n    index += 1\n    test_cases.append((n, a, colors))\n\nresults = can_transform_to_permutation(t, test_cases)\nfor result in results:\n    print(result)\n\nmain()", "def can_form_permutation(n, a, colors):\n    # Create two lists to track the minimum and maximum possible values\n    min_possible = [0] * n\n    max_possible = [0] * n\n\n    for i in range(n):\n        if colors[i] == 'B':\n            # Blue elements can be decreased, so they must be at least 1\n            min_possible[i] = max(1, a[i])\n            max_possible[i] = n\n        else:  # colors[i] == 'R'\n            # Red elements can be increased, so they must be at most n\n            min_possible[i] = 1\n            max_possible[i] = min(n, a[i])\n\n    # Sort the min_possible and max_possible lists\n    min_possible.sort()\n    max_possible.sort()\n\n    # Check if we can form a permutation from 1 to n\n    for i in range(n):\n        if min_possible[i] > i + 1 or max_possible[i] < i + 1:\n            return \"NO\"\n    \n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        colors = data[index]\n        index += 1\n\n        result = can_form_permutation(n, a, colors)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case, including the array length, the array elements, and their corresponding colors.\",\n      \"output\": \"A structured representation of the input data for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, determine if it is possible to transform the array into a permutation of numbers from 1 to n using the allowed operations.\",\n      \"output\": \"A boolean value indicating whether the transformation is possible for each test case.\"\n    },\n    {\n      \"description\": \"Output the result for each test case as 'YES' or 'NO' based on the boolean value obtained in the previous step.\",\n      \"output\": \"A list of strings ('YES' or 'NO') corresponding to each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the entire input data at once and split it into manageable parts.\",\n    \"Iterate over each test case and extract the array length, elements, and colors.\",\n    \"For each test case, perform the following steps:\",\n    \"  a. Initialize two lists to track the minimum and maximum possible values for each position in the permutation.\",\n    \"  b. Iterate over the array elements and their colors:\",\n    \"     i. If the element is blue, ensure it can be decreased to fit within the range [1, n].\",\n    \"     ii. If the element is red, ensure it can be increased to fit within the range [1, n].\",\n    \"  c. Check if the constructed ranges allow for a valid permutation of numbers from 1 to n.\",\n    \"  d. If a valid permutation is possible, mark the test case as 'YES', otherwise 'NO'.\",\n    \"Output the results for all test cases in the required format.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: In the context of this requirement, a permutation refers to a rearrangement of numbers from 1 to n such that each number appears exactly once. The task is to determine if the array can be transformed into such a permutation using the allowed operations.\n\n# [phrase showing quantity relationship]\n    'from 1 to n': This indicates that the numbers in the permutation should be consecutive integers starting from 1 up to n. In code, this can be implemented by checking if the transformed array contains all integers from 1 to n without any duplicates or missing numbers.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    Steps 3a and 3b should be implemented simultaneously. Specifically, while iterating over the array elements and their colors, the logic to adjust the elements based on their color (blue or red) should be handled in a single loop. This can be done using an if-else statement to decide whether to decrease or increase the element based on its color.\n\n# [edge case]\n    Case 1: n = 1, a = [1], colors = \"B\"\n    Expected output: YES\n    Explanation: The array already contains the permutation [1], so no operations are needed.\n\n    Case 2: n = 2, a = [2, 1], colors = \"RR\"\n    Expected output: NO\n    Explanation: Both elements are red, and increasing them would result in values greater than 2, making it impossible to form the permutation [1, 2].\n\n    Case 3: n = 3, a = [3, 3, 3], colors = \"BBB\"\n    Expected output: NO\n    Explanation: All elements are blue, and decreasing them would result in values less than 1, making it impossible to form the permutation [1, 2, 3].\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Specifically, we need to ensure that:\n    - Blue elements can be decreased to at least 1.\n    - Red elements can be increased to at most n.\n    - The final array can be rearranged to form a permutation of numbers from 1 to n.\n\n    Example code for handling edge cases:\n    ```python\n    for i in range(n):\n        if colors[i] == 'B' and a[i] > n:\n            return \"NO\"\n        if colors", "Round_0": {"code": "def can_form_permutation(n, a, colors):\n    # Create two lists to track the minimum and maximum possible values\n    min_possible = [0] * n\n    max_possible = [0] * n\n\n    for i in range(n):\n        if colors[i] == 'B':\n            # Blue elements can be decreased, so they must be at least 1\n            min_possible[i] = max(1, a[i])\n            max_possible[i] = n\n        else:  # colors[i] == 'R'\n            # Red elements can be increased, so they must be at most n\n            min_possible[i] = 1\n            max_possible[i] = min(n, a[i])\n\n    # Sort the min_possible and max_possible lists\n    min_possible.sort()\n    max_possible.sort()\n\n    # Check if we can form a permutation from 1 to n\n    for i in range(n):\n        if min_possible[i] > i + 1 or max_possible[i] < i + 1:\n            return \"NO\"\n    \n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        colors = data[index]\n        index += 1\n\n        result = can_form_permutation(n, a, colors)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case, including the array of integers and their corresponding colors.\",\n      \"steps\": [\n        \"Read the integer t, the number of test cases.\",\n        \"For each test case, read the integer n, the length of the array.\",\n        \"Read the array of integers a of length n.\",\n        \"Read the string of colors of length n, where each character is either 'B' or 'R'.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if the array can be transformed into a permutation of numbers from 1 to n using the allowed operations.\",\n      \"steps\": [\n        \"For each test case, initialize two lists to track the minimum and maximum possible values for each position in the permutation.\",\n        \"Iterate over the array and colors to populate the minimum and maximum lists based on the color of each element.\",\n        \"For blue elements, ensure they can be decreased to at least 1 and for red elements, ensure they can be increased to at most n.\",\n        \"Check if there exists a valid permutation by ensuring that the minimum and maximum constraints can be satisfied for all positions from 1 to n.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"For each test case, if a valid permutation is possible, output 'YES'.\",\n        \"If not, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, determine if the array can be transformed into a permutation of numbers from 1 to n using the allowed operations.\",\n    \"Output 'YES' if the transformation is possible, otherwise output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: In the context of this requirement, a permutation refers to rearranging the elements of the array such that it contains all numbers from 1 to n exactly once, in any order.\n\n# [phrase showing quantity relationship]\n    'from 1 to n': This indicates that the array should contain all integers starting from 1 up to n, inclusive.\n    Implementation: This can be checked by ensuring that after performing the allowed operations, the array contains each integer from 1 to n exactly once.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the second subproblem should be considered simultaneously:\n    - \"For blue elements, ensure they can be decreased to at least 1 and for red elements, ensure they can be increased to at most n.\"\n    - \"Check if there exists a valid permutation by ensuring that the minimum and maximum constraints can be satisfied for all positions from 1 to n.\"\n    These steps can be implemented in a single loop that checks both conditions for each element in the array.\n\n# [edge case]\n    Case 1: n = 1, a = [1], colors = \"B\"\n    Expected output: YES\n    Explanation: The array already contains the permutation [1], no operations are needed.\n\n    Case 2: n = 2, a = [2, 1], colors = \"RR\"\n    Expected output: NO\n    Explanation: Both elements are red, and we can only increase them, but they are already at the maximum values for a permutation of size 2.\n\n    Case 3: n = 3, a = [3, 2, 1], colors = \"BRB\"\n    Expected output: YES\n    Explanation: We can decrease the first element (blue) to 1, increase the second element (red) to 3, and the third element (blue) can stay as 1, resulting in the permutation [1, 3, 2].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the array can be transformed into a permutation by ensuring the constraints for blue and red elements should suffice.\n\nYES", "Round_0": {"code": "def can_form_permutation(n, a, colors):\n    # Initialize lists to track minimum and maximum possible values\n    min_possible = []\n    max_possible = []\n    \n    for i in range(n):\n        if colors[i] == 'B':\n            # Blue elements can be decreased to at least 1\n            min_possible.append(max(1, a[i]))\n            max_possible.append(a[i])\n        else:  # colors[i] == 'R'\n            # Red elements can be increased to at most n\n            min_possible.append(a[i])\n            max_possible.append(min(n, a[i]))\n    \n    # Sort the possible values\n    min_possible.sort()\n    max_possible.sort()\n    \n    # Check if we can form a permutation from 1 to n\n    for i in range(n):\n        if min_possible[i] > i + 1 or max_possible[i] < i + 1:\n            return \"NO\"\n    \n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        colors = data[index]\n        index += 1\n        \n        result = can_form_permutation(n, a, colors)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case, including the array of integers and their corresponding colors.\",\n      \"output\": \"A list of test cases, where each test case contains the integer n, the array a, and the color string.\"\n    },\n    {\n      \"description\": \"For each test case, determine if it is possible to transform the array into a permutation of numbers from 1 to n using the allowed operations.\",\n      \"output\": \"A boolean value indicating whether the transformation is possible for each test case.\"\n    },\n    {\n      \"description\": \"Output the result for each test case as 'YES' or 'NO' based on the boolean value obtained in the previous step.\",\n      \"output\": \"A list of strings, each being 'YES' or 'NO' corresponding to each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input data and parse it into the number of test cases and the details for each test case.\",\n    \"For each test case, perform the following steps:\",\n    \"  a. Initialize two lists to track the minimum and maximum possible values for each position in the array based on the color constraints.\",\n    \"  b. Iterate through the array and update the minimum and maximum lists based on the color of each element ('B' for blue and 'R' for red).\",\n    \"  c. Check if there exists a valid permutation of numbers from 1 to n that fits within the constraints defined by the minimum and maximum lists.\",\n    \"  d. If a valid permutation exists, mark the test case as 'YES', otherwise mark it as 'NO'.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: In the context of this requirement, a permutation refers to rearranging the array elements such that they contain all numbers from 1 to n exactly once, in any order.\n\n# [phrase showing quantity relationship]\n    'from 1 to n': This indicates that the array should contain all integers starting from 1 up to n, inclusive.\n    '0 or more steps': This means that the transformation can be achieved without any steps or with multiple steps.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Steps 2b and 2c should be considered simultaneously. \n    Explanation: While iterating through the array to update the minimum and maximum lists based on the color, we can simultaneously check if a valid permutation is possible by ensuring that each number from 1 to n can fit within the constraints defined by these lists.\n\n# [edge case] \n    Case 1: n = 1, a = [1], colors = \"B\" => YES\n    Explanation: The array already contains the permutation [1], so no steps are needed.\n\n    Case 2: n = 3, a = [3, 3, 3], colors = \"RRR\" => NO\n    Explanation: All elements are red and cannot be decreased, making it impossible to form the permutation [1, 2, 3].\n\n    Case 3: n = 2, a = [2, 1], colors = \"BR\" => YES\n    Explanation: The array can be transformed to [1, 2] by decreasing the first element (blue) and increasing the second element (red).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if a valid permutation exists by comparing the constraints defined by the minimum and maximum lists should suffice.\n\nYES", "Round_0": {"code": "def can_transform_to_permutation(n, a, colors):\n    # Create lists to track the minimum and maximum possible values\n    min_possible = [0] * n\n    max_possible = [0] * n\n\n    # Fill the min_possible and max_possible based on colors\n    for i in range(n):\n        if colors[i] == 'B':\n            min_possible[i] = max(1, a[i])\n            max_possible[i] = n\n        else:  # colors[i] == 'R'\n            min_possible[i] = 1\n            max_possible[i] = min(n, a[i])\n\n    # Check if a valid permutation exists\n    for target in range(1, n + 1):\n        found = False\n        for i in range(n):\n            if min_possible[i] <= target <= max_possible[i]:\n                found = True\n                # Mark this position as used by setting its range to an invalid one\n                min_possible[i] = max_possible[i] = -1\n                break\n        if not found:\n            return False\n    return True\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        colors = data[index]\n        index += 1\n\n        if can_transform_to_permutation(n, a, colors):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, and for each test case, extract the array length, the array elements, and their corresponding colors.\",\n      \"steps\": [\n        \"Read the integer t from the input, which represents the number of test cases.\",\n        \"For each test case, read the integer n, which represents the length of the array.\",\n        \"Read the array of integers a of length n.\",\n        \"Read the string of colors of length n, consisting of 'B' and 'R'.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if the array can be transformed into a permutation of numbers from 1 to n using the allowed operations.\",\n      \"steps\": [\n        \"For each test case, initialize two lists: one for blue elements and one for red elements.\",\n        \"Separate the elements of the array into blue and red lists based on their corresponding color.\",\n        \"Check if the blue elements can be decreased to fit within the range [1, n] and if the red elements can be increased to fit within the range [1, n].\",\n        \"Ensure that the combined elements from both lists can form a permutation of numbers from 1 to n.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"For each test case, if the array can be transformed into a permutation, output 'YES'.\",\n        \"Otherwise, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, separate the array elements into blue and red lists based on their color.\",\n    \"Check if the elements can be adjusted to form a permutation of numbers from 1 to n using the allowed operations.\",\n    \"Output 'YES' if the transformation is possible, otherwise output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: In the context of this requirement, a permutation of numbers from 1 to n means that the array should contain each number from 1 to n exactly once, but the order does not matter.\n\n# [phrase showing quantity relationship]\n    'from 1 to n': This indicates that the numbers in the resulting array should be within the range of 1 to n, inclusive.\n    Implementation: Ensure that after operations, all numbers in the array are within this range and form a complete set from 1 to n.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the second subproblem should be considered simultaneously:\n    - \"Separate the elements of the array into blue and red lists based on their corresponding color.\"\n    - \"Check if the blue elements can be decreased to fit within the range [1, n] and if the red elements can be increased to fit within the range [1, n].\"\n    - \"Ensure that the combined elements from both lists can form a permutation of numbers from 1 to n.\"\n    These steps can be implemented in a single loop where you iterate through the array, separate elements by color, and simultaneously check if they can be adjusted to fit the required range.\n\n# [edge case]\n    Case 1: n = 1, a = [1], colors = \"B\"\n    Expected output: YES\n    Explanation: The array already contains the permutation [1].\n\n    Case 2: n = 2, a = [2, 1], colors = \"RR\"\n    Expected output: NO\n    Explanation: Both elements are red, and we can only increase them, so we cannot form the permutation [1, 2].\n\n    Case 3: n = 3, a = [3, 3, 3], colors = \"BRB\"\n    Expected output: NO\n    Explanation: The blue elements cannot be decreased to form a permutation of [1, 2, 3].\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    - Check if the blue elements can be decreased to fit within the range [1, n].\n    - Check if the red elements can be increased to fit within the range [1, n].\n    - Ensure that the combined elements from both lists can form a permutation of numbers from 1 to n.\n\n```python\ndef can_form_permutation(n,", "Round_0": {"code": "def can_form_permutation(n, a, colors):\n    blue_elements = []\n    red_elements = []\n    \n    for i in range(n):\n        if colors[i] == 'B':\n            blue_elements.append(a[i])\n        else:\n            red_elements.append(a[i])\n    \n    # Sort the blue elements in ascending order and red elements in descending order\n    blue_elements.sort()\n    red_elements.sort(reverse=True)\n    \n    # Check if blue elements can be decreased to fit within the range [1, n]\n    for i, value in enumerate(blue_elements):\n        if value < i + 1:\n            return \"NO\"\n    \n    # Check if red elements can be increased to fit within the range [1, n]\n    for i, value in enumerate(red_elements):\n        if value > n - i:\n            return \"NO\"\n    \n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        colors = data[index]\n        index += 1\n        \n        result = can_form_permutation(n, a, colors)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"details\": \"Read the integer t for the number of test cases. For each test case, read the integer n, the array of integers a, and the string of colors.\"\n    },\n    {\n      \"description\": \"Determine the feasibility of transforming the array into a permutation of numbers from 1 to n.\",\n      \"details\": \"For each test case, check if it's possible to adjust the elements of the array using the allowed operations to form a permutation of numbers from 1 to n.\"\n    },\n    {\n      \"description\": \"Implement the logic to check if a permutation is possible.\",\n      \"details\": \"For each element in the array, based on its color, determine if it can be adjusted to fit into the permutation. Blue elements can only decrease, and red elements can only increase.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, output 'YES' if the array can be transformed into a permutation, otherwise output 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, perform the following steps:\",\n    \"  - Read the integer n, the array a, and the color string.\",\n    \"  - Initialize two lists to track the minimum and maximum possible values for each position in the permutation.\",\n    \"  - Iterate over the array and color string:\",\n    \"    - If the element is blue, ensure it can be decreased to fit within the range [1, n].\",\n    \"    - If the element is red, ensure it can be increased to fit within the range [1, n].\",\n    \"  - Check if all positions from 1 to n can be filled with the adjusted values.\",\n    \"  - If possible, append 'YES' to the results list; otherwise, append 'NO'.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation of numbers from 1 to n means that the array should contain all numbers from 1 to n exactly once, in any order.\n\n# [phrase showing quantity relationship]\n    '0 or more steps': This indicates that the transformation can involve any number of operations, including none.\n    'from 1 to n': This specifies the range of numbers that should appear in the permutation.\n\n# [degree adverb]\n    'no': In the context of \"no unpainted elements,\" it means that every element in the array is either blue or red, with no exceptions.\n\n# [code logic]\n    The steps related to checking feasibility and implementing logic to check permutation should be considered simultaneously. Specifically:\n    - \"Iterate over the array and color string\" and \"Check if all positions from 1 to n can be filled with the adjusted values\" should be implemented in a single loop where adjustments are made and feasibility is checked concurrently.\n\n# [edge case]\n    Test case with all elements blue and already in permutation order:\n    Input: 3, [1, 2, 3], 'BBB'\n    Expected output: YES\n    Explanation: No changes are needed as the array is already a permutation of numbers from 1 to 3.\n\n    Test case with all elements red and needing increase:\n    Input: 3, [0, 0, 0], 'RRR'\n    Expected output: NO\n    Explanation: All elements need to be increased to fit the permutation, but starting from 0 makes it impossible to reach 1, 2, 3.\n\n    Test case with mixed colors and impossible permutation:\n    Input: 3, [3, 3, 3], 'BRB'\n    Expected output: NO\n    Explanation: The elements cannot be adjusted to form a permutation of 1, 2, 3 due to their initial values and color restrictions.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    - Implement logic to ensure that blue elements can be decreased to fit within the range [1, n] and red elements can be increased to fit within the range [1, n].\n    - Check if the adjusted values can fill all positions from 1 to n.\n\nYES", "Round_0": {"code": "def can_form_permutation(n, a, colors):\n    # Separate the elements based on their colors\n    blue_elements = []\n    red_elements = []\n    \n    for i in range(n):\n        if colors[i] == 'B':\n            blue_elements.append(a[i])\n        else:\n            red_elements.append(a[i])\n    \n    # Sort the blue elements in descending order (to decrease them)\n    blue_elements.sort(reverse=True)\n    # Sort the red elements in ascending order (to increase them)\n    red_elements.sort()\n    \n    # Check if we can form a permutation from 1 to n\n    current_number = 1\n    \n    # Process blue elements\n    for value in blue_elements:\n        if value >= current_number:\n            current_number += 1\n    \n    # Process red elements\n    for value in red_elements:\n        if value <= current_number:\n            current_number += 1\n    \n    # If we have reached n+1, it means we can form a permutation from 1 to n\n    return current_number == n + 1\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        colors = data[index]\n        index += 1\n        \n        if can_form_permutation(n, a, colors):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case, including the array length, the array elements, and their corresponding colors.\",\n      \"output\": \"A structured representation of the input data for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, determine if it is possible to transform the array into a permutation of numbers from 1 to n using the allowed operations on blue and red elements.\",\n      \"output\": \"A boolean value indicating whether the transformation is possible for each test case.\"\n    },\n    {\n      \"description\": \"Output the result for each test case as 'YES' or 'NO' based on the boolean value obtained in the previous step.\",\n      \"output\": \"A list of strings, each being 'YES' or 'NO' corresponding to each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input data and parse it into a structured format, extracting the number of test cases and the details for each test case.\",\n    \"For each test case, perform the following steps:\",\n    \"  a. Initialize a list to track the required numbers from 1 to n.\",\n    \"  b. Iterate over the array elements and their colors:\",\n    \"     i. If the element is blue, check if it can be decreased to fit into the required range (1 to n) without violating the constraints.\",\n    \"     ii. If the element is red, check if it can be increased to fit into the required range (1 to n) without violating the constraints.\",\n    \"  c. Ensure that all numbers from 1 to n can be formed using the available operations.\",\n    \"  d. If all numbers can be formed, mark the test case as 'YES', otherwise 'NO'.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation of numbers from 1 to n means that the array should contain all numbers from 1 to n exactly once, in any order.\n\n# [phrase showing quantity relationship]\n    'from 1 to n': This indicates that the numbers in the permutation should range from 1 to n, inclusive. In code, this can be implemented by checking if all numbers from 1 to n are present in the array after performing the allowed operations.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented simultaneously when iterating over the array elements and their colors. Specifically, steps \"b.i\" and \"b.ii\" should be considered together in a loop that processes each element based on its color and adjusts its value accordingly.\n\n# [edge case] \n    Test case with all elements already forming a permutation: \n    Input: 3, [1, 2, 3], 'BRB'\n    Expected output: YES\n    Explanation: The array already contains a permutation of numbers from 1 to 3.\n\n    Test case with all elements of one color:\n    Input: 3, [3, 3, 3], 'BBB'\n    Expected output: NO\n    Explanation: All elements are blue and cannot be decreased to form a permutation of numbers from 1 to 3.\n\n    Test case with negative numbers:\n    Input: 3, [-1, -2, -3], 'RRR'\n    Expected output: NO\n    Explanation: Negative numbers cannot be increased to form a permutation of numbers from 1 to 3.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Specifically, we need to ensure that:\n    - Blue elements can be decreased to fit within the range 1 to n.\n    - Red elements can be increased to fit within the range 1 to n.\n    - Handle cases where all elements are of one color and cannot be adjusted to form a permutation.\n\n    Example code snippet:\n    ```python\n    def can_form_permutation(n, array, colors):\n        required_numbers = set(range(1, n + 1))\n        for i in range(n):\n            if colors[i] == 'B' and array[i] > n:\n                array[i] = max(array[i] - (array[i] - n), 1)\n            elif colors[i", "Round_0": {"code": "def can_form_permutation(n, array, colors):\n    # Separate the elements based on their colors\n    blue_elements = []\n    red_elements = []\n    \n    for i in range(n):\n        if colors[i] == 'B':\n            blue_elements.append(array[i])\n        else:\n            red_elements.append(array[i])\n    \n    # Sort the elements\n    blue_elements.sort()\n    red_elements.sort()\n    \n    # Check if we can form a permutation from 1 to n\n    for i in range(1, n + 1):\n        # Check if we can use a blue element for this position\n        if blue_elements and blue_elements[0] <= i:\n            blue_elements.pop(0)\n        # Otherwise, check if we can use a red element\n        elif red_elements and red_elements[-1] >= i:\n            red_elements.pop()\n        else:\n            return \"NO\"\n    \n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        array = list(map(int, data[index:index + n]))\n        index += n\n        colors = data[index]\n        index += 1\n        \n        result = can_form_permutation(n, array, colors)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case, including the array of integers and their corresponding colors.\",\n      \"output\": \"A list of test cases, where each test case contains the integer n, the array a, and the color string.\"\n    },\n    {\n      \"description\": \"For each test case, determine if it is possible to transform the array into a permutation of numbers from 1 to n using the allowed operations.\",\n      \"output\": \"A boolean value indicating whether the transformation is possible for each test case.\"\n    },\n    {\n      \"description\": \"Output the result for each test case as 'YES' or 'NO' based on the boolean value obtained in the previous step.\",\n      \"output\": \"A list of strings, each being 'YES' or 'NO', corresponding to each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input data and parse it to extract the number of test cases and the details for each test case.\",\n    \"For each test case, perform the following steps:\",\n    \"  a. Initialize two lists to keep track of the minimum and maximum possible values for each position in the permutation.\",\n    \"  b. Iterate over the array and color string to update the minimum and maximum possible values based on the color of each element.\",\n    \"  c. Check if there exists a valid permutation by ensuring that each position can be filled with a number within its allowed range.\",\n    \"  d. If a valid permutation is found, mark the test case as 'YES'; otherwise, mark it as 'NO'.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: In the context of this requirement, a permutation refers to a rearrangement of numbers from 1 to n such that each number appears exactly once. The task is to determine if the array can be transformed into such a permutation using the allowed operations.\n\n# [phrase showing quantity relationship]\n    '0 or more steps': This means that the transformation can be achieved without any operations or with multiple operations.\n    'from 1 to n': This indicates that the resulting array should contain all integers starting from 1 up to n, inclusive.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    Steps 2b and 2c should be considered simultaneously. \n    Explanation: While iterating over the array and color string to update the minimum and maximum possible values, we should simultaneously check if each position can be filled with a number within its allowed range. This can be done in a single loop to optimize the process.\n\n# [edge case]\n    Case 1: n = 1, a = [1], colors = \"B\"\n    Expected output: YES\n    Explanation: The array already contains the permutation [1], so no operations are needed.\n\n    Case 2: n = 2, a = [2, 1], colors = \"RR\"\n    Expected output: NO\n    Explanation: Both elements are red, and we need to increase them to form a permutation [1, 2], but 2 cannot be increased to 1.\n\n    Case 3: n = 3, a = [3, 3, 3], colors = \"BBB\"\n    Expected output: NO\n    Explanation: All elements are blue and need to be decreased to form a permutation [1, 2, 3], but starting from 3, we cannot reach 1 or 2.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    ```\n    for i in range(n):\n        if colors[i] == 'B' and a[i] < 1:\n            return \"NO\"\n        if colors[i] == 'R' and a[i] > n:\n            return \"NO\"\n    ```\n\nYES", "Round_0": {"code": "def can_form_permutation(n, a, colors):\n    # Initialize lists to track the minimum and maximum possible values\n    min_possible = [0] * n\n    max_possible = [0] * n\n    \n    # Iterate over the array and color string\n    for i in range(n):\n        if colors[i] == 'B':\n            # Blue elements can only decrease, so they must be >= 1\n            min_possible[i] = max(1, a[i])\n            max_possible[i] = a[i]\n        else:  # colors[i] == 'R'\n            # Red elements can only increase, so they must be <= n\n            min_possible[i] = a[i]\n            max_possible[i] = min(n, a[i])\n    \n    # Sort the min_possible and max_possible lists\n    min_possible.sort()\n    max_possible.sort()\n    \n    # Check if a valid permutation can be formed\n    for i in range(n):\n        if min_possible[i] > i + 1 or max_possible[i] < i + 1:\n            return \"NO\"\n    \n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        colors = data[index]\n        index += 1\n        \n        result = can_form_permutation(n, a, colors)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"details\": \"Read the integer t for the number of test cases. For each test case, read the integer n, the array of integers a, and the string of colors.\"\n    },\n    {\n      \"description\": \"Determine if the array can be transformed into a permutation of numbers from 1 to n.\",\n      \"details\": \"For each test case, check if it's possible to adjust the elements of the array using the allowed operations to form a permutation of numbers from 1 to n.\"\n    },\n    {\n      \"description\": \"Implement the logic to check the feasibility of forming a permutation.\",\n      \"details\": \"For each element in the array, check if it can be adjusted to fit into the permutation range [1, n] based on its color. Blue elements can only decrease, and red elements can only increase.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, output 'YES' if the array can be transformed into a permutation, otherwise output 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, perform the following steps:\",\n    \"  a. Read the integer n, the array a, and the color string.\",\n    \"  b. Initialize two lists to track the minimum and maximum possible values for each position in the permutation.\",\n    \"  c. Iterate over the array and color string to determine the feasible range for each element:\",\n    \"     i. If the element is blue, ensure it can be decreased to fit within the range [1, n].\",\n    \"     ii. If the element is red, ensure it can be increased to fit within the range [1, n].\",\n    \"  d. Check if a valid permutation can be formed by ensuring all numbers from 1 to n can be covered by the feasible ranges.\",\n    \"  e. If all numbers can be covered, append 'YES' to the results; otherwise, append 'NO'.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation of numbers from 1 to n means that the array should contain all numbers from 1 to n exactly once, in any order.\n\n# [phrase showing quantity relationship]\n    'from 1 to n': This indicates the range of numbers that must be present in the array after transformation. The array must contain all integers from 1 to n.\n    Implementation: Ensure that after performing the allowed operations, the array contains all numbers from 1 to n.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially. However, within step 3c, the checks for blue and red elements can be considered simultaneously as they both contribute to determining the feasible range for each element.\n\n# [edge case]\n    Case 1: n = 1, a = [1], colors = 'B' => YES\n    Explanation: The array already contains the permutation [1], no operations are needed.\n    \n    Case 2: n = 3, a = [3, 3, 3], colors = 'RRR' => NO\n    Explanation: All elements are red and can only be increased, but they need to be decreased to form the permutation [1, 2, 3].\n    \n    Case 3: n = 2, a = [2, 1], colors = 'BR' => YES\n    Explanation: The array can be transformed into [1, 2] by decreasing the first element (blue) and increasing the second element (red).\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Code for handling edge cases:\n    ```python\n    def can_form_permutation(n, a, colors):\n        blue_elements = []\n        red_elements = []\n        \n        for i in range(n):\n            if colors[i] == 'B':\n                blue_elements.append(a[i])\n            else:\n                red_elements.append(a[i])\n        \n        blue_elements.sort()\n        red_elements.sort(reverse=True)\n        \n        for i in range(1, n + 1):\n            if blue_elements and blue_elements[0] < i:\n                blue_elements.pop(0)\n            elif red_elements and red_elements[0] > i:\n                red_elements.pop(0)\n            else:\n                return \"NO\"\n        \n        return \"YES\"\n    ```\n\nYES", "Round_0": {"code": "def can_form_permutation(n, a, colors):\n    blue_elements = []\n    red_elements = []\n    \n    for i in range(n):\n        if colors[i] == 'B':\n            blue_elements.append(a[i])\n        else:\n            red_elements.append(a[i])\n    \n    blue_elements.sort()\n    red_elements.sort(reverse=True)\n    \n    for i in range(1, n + 1):\n        if blue_elements and blue_elements[0] < i:\n            blue_elements.pop(0)\n        elif red_elements and red_elements[0] > i:\n            red_elements.pop(0)\n        else:\n            return \"NO\"\n    \n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        colors = data[index]\n        index += 1\n        \n        result = can_form_permutation(n, a, colors)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t, which represents the number of test cases.\",\n        \"For each test case, read the integer n, the array of integers a, and the string of colors.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if the array can be transformed into a permutation of numbers from 1 to n.\",\n      \"steps\": [\n        \"For each test case, identify the minimum and maximum values that can be achieved by blue and red elements respectively.\",\n        \"Check if the blue elements can be decreased to cover all numbers from 1 to n.\",\n        \"Check if the red elements can be increased to cover all numbers from 1 to n.\",\n        \"Ensure that the combination of blue and red elements can form a complete permutation from 1 to n.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"For each test case, print 'YES' if the array can be transformed into a permutation, otherwise print 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, analyze the array and color pattern to determine if a permutation from 1 to n can be formed.\",\n    \"Implement logic to check the feasibility of transforming the array into a permutation using the allowed operations.\",\n    \"Output the result for each test case based on the analysis.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation of numbers from 1 to n means that the array should contain all integers from 1 to n exactly once, in any order.\n\n# [phrase showing quantity relationship]\n    'from 1 to n': This indicates that the numbers in the permutation should range from 1 to n, inclusive. In code, this can be implemented by checking if the transformed array contains all numbers from 1 to n.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps \"Check if the blue elements can be decreased to cover all numbers from 1 to n\" and \"Check if the red elements can be increased to cover all numbers from 1 to n\" should be considered simultaneously. This can be done by iterating through the array and checking both conditions in a single pass.\n\n# [edge case] \n    Test case with all elements blue and already a permutation: \n    Input: 3, [1, 2, 3], 'BBB'\n    Expected output: YES\n    Explanation: The array is already a permutation of numbers from 1 to 3.\n\n    Test case with all elements red and already a permutation:\n    Input: 3, [1, 2, 3], 'RRR'\n    Expected output: YES\n    Explanation: The array is already a permutation of numbers from 1 to 3.\n\n    Test case with elements that cannot be adjusted to form a permutation:\n    Input: 3, [1, 1, 1], 'BRB'\n    Expected output: NO\n    Explanation: The array cannot be adjusted to form a permutation of numbers from 1 to 3.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the array is already a permutation or cannot be adjusted to form a permutation.\n    Code for handling the edge case:\n    ```python\n    def can_form_permutation(n, a, colors):\n        blue_min = 1\n        red_max = n\n        for i in range(n):\n            if colors[i] == 'B' and a[i] < blue_min:\n                return \"NO\"\n            if colors[i] == 'R' and a[i] > red_max:\n                return \"NO\"\n        return \"YES\"\n    ```\n\nYES", "Round_0": {"code": "def can_form_permutation(n, a, colors):\n    blue_min = 1\n    red_max = n\n    \n    # Create a list of tuples (value, color) and sort it\n    elements = sorted((a[i], colors[i]) for i in range(n))\n    \n    for i in range(n):\n        value, color = elements[i]\n        if color == 'B':\n            if value < blue_min:\n                return \"NO\"\n            blue_min += 1\n        elif color == 'R':\n            if value > red_max:\n                return \"NO\"\n            red_max -= 1\n    \n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        colors = data[index]\n        index += 1\n        \n        result = can_form_permutation(n, a, colors)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t, which represents the number of test cases.\",\n        \"For each test case, read the integer n, the array of integers a, and the string of colors.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if the array can be transformed into a permutation of numbers from 1 to n.\",\n      \"steps\": [\n        \"For each test case, separate the elements of the array into two lists based on their color: blue and red.\",\n        \"Sort the blue list in non-decreasing order and the red list in non-increasing order.\",\n        \"Check if the smallest element in the blue list is greater than or equal to 1 and the largest element in the red list is less than or equal to n.\",\n        \"Ensure that the number of elements in the blue list that are greater than or equal to 1 plus the number of elements in the red list that are less than or equal to n is at least n.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"For each test case, if the conditions are met, output 'YES'. Otherwise, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, separate the array elements into blue and red lists based on their color.\",\n    \"Sort the blue list in non-decreasing order and the red list in non-increasing order.\",\n    \"Check the conditions for transforming the array into a permutation of numbers from 1 to n.\",\n    \"Output 'YES' if the conditions are met, otherwise output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation of numbers from 1 to n means that the array should contain all numbers from 1 to n exactly once, in any order.\n\n# [phrase showing quantity relationship]\n    '0 or more steps': This indicates that the transformation can be done without any steps or with multiple steps.\n    'from 1 to n': This specifies the range of numbers that should be present in the permutation.\n\n# [degree adverb] \n    'smallest': Refers to the minimum value in the blue list that should be greater than or equal to 1.\n    'largest': Refers to the maximum value in the red list that should be less than or equal to n.\n\n# [code logic]\n    The steps of sorting the blue list and red list should be considered simultaneously with checking the conditions for transforming the array into a permutation. This can be done in a single code block where both lists are sorted and conditions are checked in sequence.\n\n# [edge case] \n    Case 1: n = 1, a = [1], colors = 'B' => YES\n    Explanation: The array already contains the permutation [1].\n    \n    Case 2: n = 3, a = [3, 3, 3], colors = 'RRR' => NO\n    Explanation: All elements are the same and cannot be transformed into [1, 2, 3].\n    \n    Case 3: n = 2, a = [2, 1], colors = 'BR' => YES\n    Explanation: The array can be transformed into [1, 2] by decreasing the blue element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and checking conditions will handle these cases.\n\nNO", "Round_0": {"code": "def can_transform_to_permutation(t, test_cases):\n    results = []\n    for n, a, colors in test_cases:\n        blue = []\n        red = []\n        \n        for i in range(n):\n            if colors[i] == 'B':\n                blue.append(a[i])\n            else:\n                red.append(a[i])\n        \n        blue.sort()\n        red.sort(reverse=True)\n        \n        # Check conditions\n        possible = True\n        for i in range(n):\n            if i < len(blue) and blue[i] < i + 1:\n                possible = False\n                break\n            if i < len(red) and red[i] > n - i:\n                possible = False\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nt = int(data[0])\nindex = 1\ntest_cases = []\n\nfor _ in range(t):\n    n = int(data[index])\n    index += 1\n    a = list(map(int, data[index:index + n]))\n    index += n\n    colors = data[index]\n    index += 1\n    test_cases.append((n, a, colors))\n\nresults = can_transform_to_permutation(t, test_cases)\nfor result in results:\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def can_transform_to_permutation(t, test_cases):\n    results = []\n    for n, a, colors in test_cases:\n        blue = []\n        red = []\n        \n        for i in range(n):\n            if colors[i] == 'B':\n                blue.append(a[i])\n            else:\n                red.append(a[i])\n        \n        blue.sort()\n        red.sort(reverse=True)\n        \n        # Check conditions\n        possible = True\n        for i in range(n):\n            if i < len(blue) and blue[i] < i + 1:\n                possible = False\n                break\n            if i < len(red) and red[i] > n - i:\n                possible = False\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nt = int(data[0])\nindex = 1\ntest_cases = []\n\nfor _ in range(t):\n    n = int(data[index])\n    index += 1\n    a = list(map(int, data[index:index + n]))\n    index += n\n    colors = data[index]\n    index += 1\n    test_cases.append((n, a, colors))\n\nresults = can_transform_to_permutation(t, test_cases)\nfor result in results:\n    print(result)\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case, including the array length, the array elements, and their corresponding colors.\",\n      \"output\": \"A structured representation of the input data for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, determine if it is possible to transform the array into a permutation of numbers from 1 to n using the allowed operations.\",\n      \"output\": \"A boolean value indicating whether the transformation is possible for each test case.\"\n    },\n    {\n      \"description\": \"Output the result for each test case as 'YES' or 'NO' based on the boolean value obtained in the previous step.\",\n      \"output\": \"A list of strings ('YES' or 'NO') corresponding to each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the entire input data at once and split it into manageable parts.\",\n    \"Iterate over each test case and extract the array length, elements, and colors.\",\n    \"For each test case, perform the following steps:\",\n    \"  a. Initialize two lists to track the minimum and maximum possible values for each position in the permutation.\",\n    \"  b. Iterate over the array elements and their colors:\",\n    \"     i. If the element is blue, ensure it can be decreased to fit within the range [1, n].\",\n    \"     ii. If the element is red, ensure it can be increased to fit within the range [1, n].\",\n    \"  c. Check if the constructed ranges allow for a valid permutation of numbers from 1 to n.\",\n    \"  d. If a valid permutation is possible, mark the test case as 'YES', otherwise 'NO'.\",\n    \"Output the results for all test cases in the required format.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: In the context of this requirement, a permutation refers to a rearrangement of numbers from 1 to n such that each number appears exactly once. The task is to determine if the array can be transformed into such a permutation using the allowed operations.\n\n# [phrase showing quantity relationship]\n    'from 1 to n': This indicates that the numbers in the permutation should be consecutive integers starting from 1 up to n. In code, this can be implemented by checking if the transformed array contains all integers from 1 to n without any duplicates or missing numbers.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    Steps 3a and 3b should be implemented simultaneously. Specifically, while iterating over the array elements and their colors, the logic to adjust the elements based on their color (blue or red) should be handled in a single loop. This can be done using an if-else statement to decide whether to decrease or increase the element based on its color.\n\n# [edge case]\n    Case 1: n = 1, a = [1], colors = \"B\"\n    Expected output: YES\n    Explanation: The array already contains the permutation [1], so no operations are needed.\n\n    Case 2: n = 2, a = [2, 1], colors = \"RR\"\n    Expected output: NO\n    Explanation: Both elements are red, and increasing them would result in values greater than 2, making it impossible to form the permutation [1, 2].\n\n    Case 3: n = 3, a = [3, 3, 3], colors = \"BBB\"\n    Expected output: NO\n    Explanation: All elements are blue, and decreasing them would result in values less than 1, making it impossible to form the permutation [1, 2, 3].\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Specifically, we need to ensure that:\n    - Blue elements can be decreased to at least 1.\n    - Red elements can be increased to at most n.\n    - The final array can be rearranged to form a permutation of numbers from 1 to n.\n\n    Example code for handling edge cases:\n    ```python\n    for i in range(n):\n        if colors[i] == 'B' and a[i] > n:\n            return \"NO\"\n        if colors", "Round_0": {"code": "def can_form_permutation(n, a, colors):\n    # Create two lists to track the minimum and maximum possible values\n    min_possible = [0] * n\n    max_possible = [0] * n\n\n    for i in range(n):\n        if colors[i] == 'B':\n            # Blue elements can be decreased, so they must be at least 1\n            min_possible[i] = max(1, a[i])\n            max_possible[i] = n\n        else:  # colors[i] == 'R'\n            # Red elements can be increased, so they must be at most n\n            min_possible[i] = 1\n            max_possible[i] = min(n, a[i])\n\n    # Sort the min_possible and max_possible lists\n    min_possible.sort()\n    max_possible.sort()\n\n    # Check if we can form a permutation from 1 to n\n    for i in range(n):\n        if min_possible[i] > i + 1 or max_possible[i] < i + 1:\n            return \"NO\"\n    \n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        colors = data[index]\n        index += 1\n\n        result = can_form_permutation(n, a, colors)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [false, false, false, true, false, false, false, true, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 4, "round": 69, "prompt": "You are given an array of integers a of length n; each element of the array is colored either blue or red, with no unpainted elements, and they can be either different or the same. One of the two operations described below can be applied to an array in a single step:\n\n  * either you can select any blue element and decrease its value by 1; \n  * or you can select any red element and increase its value by 1.\n\nSituations in which there are no elements of some color at all are also possible. For example, if the whole array is colored blue or red, one of the operations becomes unavailable.\n\nDetermine whether it is possible to make 0 or more steps such that the resulting array is a permutation of numbers from 1 to n?\n\nIn other words, check whether there exists a sequence of steps (possibly empty) such that after applying it, the array a contains in some order all numbers from 1 to n (inclusive), each exactly once.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of input data sets in the test.\n\nThe description of each set of input data consists of three lines. The first line contains an integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the original array a. The second line contains n integers a_1, a_2, ..., a_n (-10^9 \u2264 a_i \u2264 10^9) \u2014 the array elements themselves.\n\nThe third line has length n and consists exclusively of the letters 'B' and/or 'R': ith character is 'B' if a_i is colored blue, and is 'R' if colored red.\n\nIt is guaranteed that the sum of n over all input sets does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case of the input. Print YES as an answer if the corresponding array can be transformed into a permutation, and NO otherwise.\n\nYou can print the answer in any case (for example, the strings yEs, yes, Yes, and YES will be recognized as a positive answer).\n\nExample\n\nInput\n\n\n8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n\nNote\n\nIn the first test case of the example, the following sequence of moves can be performed:\n\n  * choose i=3, element a_3=5 is blue, so we decrease it, we get a=[1,2,4,2]; \n  * choose i=2, element a_2=2 is red, so we increase it, we get a=[1,3,4,2]; \n  * choose i=3, element a_3=4 is blue, so we decrease it, we get a=[1,3,3,2]; \n  * choose i=2, element a_2=2 is red, so we increase it, we get a=[1,4,3,2]. \n\n\n\nWe got that a is a permutation. Hence the answer is YES.", "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of input data sets in the test.\n\nThe description of each set of input data consists of three lines. The first line contains an integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the original array a. The second line contains n integers a_1, a_2, ..., a_n (-10^9 \u2264 a_i \u2264 10^9) \u2014 the array elements themselves.\n\nThe third line has length n and consists exclusively of the letters 'B' and/or 'R': ith character is 'B' if a_i is colored blue, and is 'R' if colored red.\n\nIt is guaranteed that the sum of n over all input sets does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case of the input. Print YES as an answer if the corresponding array can be transformed into a permutation, and NO otherwise.\n\nYou can print the answer in any case (for example, the strings yEs, yes, Yes, and YES will be recognized as a positive answer).\n\nExample\n\nInput\n\n\n8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n\nNote\n\nIn the first test case of the example, the following sequence of moves can be performed:\n\n  * choose i=3, element a_3=5 is blue, so we decrease it, we get a=[1,2,4,2]; \n  * choose i=2, element a_2=2 is red, so we increase it, we get a=[1,3,4,2]; \n  * choose i=3, element a_3=4 is blue, so we decrease it, we get a=[1,3,3,2]; \n  * choose i=2, element a_2=2 is red, so we increase it, we get a=[1,4,3,2]. \n\n\n\nWe got that a is a permutation. Hence the answer is YES.", "mutate_method": "condense_two2one", "save_node": false, "parent_index": 79}
