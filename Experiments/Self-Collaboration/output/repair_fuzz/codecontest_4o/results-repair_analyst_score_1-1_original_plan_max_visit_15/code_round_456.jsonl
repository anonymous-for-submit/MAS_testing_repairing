{"name": "1622_A. Construct a Rectangle", "description": "There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYou are asked to break exactly one of them into two pieces in such a way that: \n\n  * both pieces have positive (strictly greater than 0) integer length; \n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides. \n\n\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "tags": ["geometry", "math"], "difficulty": 7, "id": 1622, "sample_io": [{"input": "4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n", "output": ["YES\nNO\nYES\nYES\n"]}], "test_list": [{"input": "2\n1 2 3\n2 2 4\n", "output": ["YES\nYES\n"]}, {"input": "1\n1 98 99\n", "output": ["YES\n"]}, {"input": "3\n1 1 1\n2 1 3\n5 6 7\n", "output": ["NO\nYES\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 6\n1 2 3\n6 7 8\n10 10 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nYES\n"]}, {"input": "4\n6 1 5\n2 5 2\n2 4 2\n7 101 108\n", "output": ["YES\nNO\nYES\nYES\n"]}, {"input": "1\n100000 100000 100000\n", "output": ["YES\n"]}, {"input": "1\n12344 1 1\n", "output": ["YES\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 2 3\n4 5 6\n", "output": ["YES\nNO\n"]}, {"input": "2\n1 3 3\n2 2 4\n", "output": ["NO\nYES\n"]}, {"input": "1\n1 98 186\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 6 7\n", "output": ["NO\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 108\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "1\n100000 100000 100100\n", "output": ["YES\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 1\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 1 3\n4 5 6\n", "output": ["NO\nNO\n"]}, {"input": "4\n6 1 5\n2 5 2\n2 4 2\n5 9 4\n", "output": ["YES\nNO\nYES\nYES\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 179\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n2 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 1\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n2 1 3\n1 5 6\n", "output": ["YES\nYES\n"]}, {"input": "4\n6 1 10\n2 6 2\n2 4 2\n7 101 144\n", "output": ["NO\nYES\nYES\nNO\n"]}, {"input": "3\n2 1 1\n2 1 2\n3 8 12\n", "output": ["YES\nNO\nNO\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 3\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 2 3\n4 8 6\n", "output": ["YES\nNO\n"]}, {"input": "3\n1 1 1\n1 1 2\n5 6 12\n", "output": ["NO\nYES\nNO\n"]}, {"input": "4\n6 1 10\n2 6 2\n3 4 2\n7 101 144\n", "output": ["NO\nYES\nNO\nNO\n"]}, {"input": "3\n2 1 1\n1 1 2\n5 6 12\n", "output": ["YES\nYES\nNO\n"]}, {"input": "6\n2 2 6\n1 1 2\n3 10 6\n2 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "3\n3 1 1\n2 1 2\n1 8 9\n", "output": ["NO\nNO\nYES\n"]}, {"input": "6\n2 2 4\n1 1 1\n3 5 18\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n1 1 10\n2 6 2\n3 4 2\n7 101 144\n", "output": ["YES\nYES\nNO\nNO\n"]}, {"input": "3\n3 1 1\n2 2 2\n1 8 9\n", "output": ["NO\nYES\nYES\n"]}, {"input": "1\n12344 2 1\n", "output": ["NO\n"]}, {"input": "1\n2 98 186\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 6 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 10 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "1\n100010 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 2 1\n", "output": ["NO\n"]}, {"input": "2\n1 1 3\n1 5 6\n", "output": ["NO\nYES\n"]}, {"input": "1\n2 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 144\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n100110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 4 1\n", "output": ["NO\n"]}, {"input": "1\n1 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n3 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100110 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 3 1\n", "output": ["NO\n"]}, {"input": "1\n100111 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 3 1\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n1 8 12\n", "output": ["YES\nNO\nNO\n"]}, {"input": "1\n100011 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 3 2\n", "output": ["NO\n"]}, {"input": "1\n100011 101001 100100\n", "output": ["NO\n"]}, {"input": "1\n100011 101001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 101001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n100011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n100011 001001 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111001\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001111 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001010 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 111111\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 011111\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011100\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011000\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010011 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010111 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010111 100011 001000\n", "output": ["NO\n"]}, {"input": "1\n010111 000011 001000\n", "output": ["NO\n"]}, {"input": "1\n010111 000011 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 100010 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 100010 000001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 000001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 000011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 000011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 100011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 101011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 000011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 100011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 101011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 101001 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 101001 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 101101 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n010101 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n010101 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n110101 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n110101 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n110101 101101 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101101 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101100 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101110 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101110 101010\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 101010\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 101011\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 100011\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n011111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 101100 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 111110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n100111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n001111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n001101 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011111 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011101 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 111101 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100011\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100000\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 100000\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n000011 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n000011 111001 000011\n", "output": ["NO\n"]}, {"input": "1\n100011 111001 000011\n", "output": ["NO\n"]}, {"input": "1\n100011 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n100011 111101 000010\n", "output": ["NO\n"]}, {"input": "1\n100011 111101 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 111100 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 110100 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 111100 011010\n", "output": ["NO\n"]}, {"input": "1\n100011 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101011 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 110100 011110\n", "output": ["NO\n"]}, {"input": "1\n001111 110100 011110\n", "output": ["NO\n"]}, {"input": "1\n101111 010100 011110\n", "output": ["NO\n"]}, {"input": "1\n101111 010100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 111010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 111011\n", "output": ["NO\n"]}, {"input": "1\n001111 010000 111011\n", "output": ["NO\n"]}, {"input": "1\n001111 010000 111001\n", "output": ["NO\n"]}, {"input": "2\n1 4 3\n2 2 4\n", "output": ["YES\nYES\n"]}, {"input": "1\n1 98 108\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 4\n5 6 7\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100010 100000 100000\n", "output": ["YES\n"]}, {"input": "1\n2465 1 1\n", "output": ["NO\n"]}, {"input": "4\n6 2 5\n2 5 2\n2 4 2\n5 5 4\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "2\n1 3 3\n4 2 4\n", "output": ["NO\nYES\n"]}, {"input": "1\n3 98 186\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n5 6 7\n", "output": ["YES\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 10\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 3 2\n2 4 2\n7 101 108\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "1\n100010 100001 100000\n", "output": ["NO\n"]}, {"input": "1\n19251 2 1\n", "output": ["NO\n"]}, {"input": "2\n1 1 3\n4 5 1\n", "output": ["NO\nYES\n"]}, {"input": "4\n9 1 5\n2 5 2\n2 4 2\n5 9 4\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "6\n2 2 6\n1 1 2\n3 10 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n10 1 10\n2 5 2\n2 4 2\n7 101 179\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n110010 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n8323 2 1\n", "output": ["NO\n"]}, {"input": "1\n3 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 4\n5 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "4\n6 1 9\n2 5 2\n2 4 2\n7 101 144\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n101110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n21283 4 1\n", "output": ["NO\n"]}, {"input": "2\n2 1 3\n1 5 5\n", "output": ["YES\nNO\n"]}, {"input": "1\n1 98 468\n", "output": ["NO\n"]}, {"input": "1\n110110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n35510 2 1\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n3 8 17\n", "output": ["YES\nNO\nNO\n"]}, {"input": "1\n110111 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n12451 3 1\n", "output": ["NO\n"]}, {"input": "3\n3 1 1\n2 1 2\n1 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100001 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 2 2\n", "output": ["NO\n"]}, {"input": "1\n100010 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n100011 100001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 100010\n", "output": ["NO\n"]}, {"input": "1\n110011 000001 110000\n", "output": ["NO\n"]}, {"input": "1\n101011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 111000\n", "output": ["NO\n"]}, {"input": "1\n101011 001101 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 011101 111001\n", "output": ["NO\n"]}, {"input": "1\n100001 001101 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001111 011011\n", "output": ["NO\n"]}, {"input": "1\n101011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001110 110011\n", "output": ["YES\n"]}, {"input": "1\n110111 001010 111011\n", "output": ["NO\n"]}, {"input": "1\n010011 001011 111011\n", "output": ["NO\n"]}, {"input": "1\n110111 000011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 010011 011111\n", "output": ["NO\n"]}, {"input": "1\n010011 000011 011111\n", "output": ["NO\n"]}, {"input": "1\n110011 010011 011101\n", "output": ["NO\n"]}, {"input": "1\n110010 100011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011110\n", "output": ["NO\n"]}, {"input": "1\n111011 100011 011000\n", "output": ["YES\n"]}, {"input": "1\n110011 000011 001100\n", "output": ["NO\n"]}, {"input": "1\n010110 100011 001100\n", "output": ["NO\n"]}], "task_id": "codecontest/154", "repair_prompt": ["There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYou are asked to break exactly one of them into two pieces in such a way that:\n\n  * both pieces have positive (strictly greater than 0) integer length; \n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides.\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nConsider edge cases and possible combinations to ensure the conditions can be met.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYou are asked to break exactly one of them into two pieces in such a way that:\n\n  * both pieces have positive (strictly greater than 0) integer length. You cannot break the stick into pieces where any piece has a length of zero or less; \n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides.\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nConsider edge cases and possible combinations to ensure the conditions can be met.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYou are asked to break exactly one of them into two pieces in such a way that both pieces have positive integer length and the total length of the pieces is equal to the original length of the stick so it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides.\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nConsider edge cases and possible combinations to ensure the conditions can be met.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    if (l1 % 2 == 0 and l2 == l3) or (l2 % 2 == 0 and l1 == l3) or (l3 % 2 == 0 and l1 == l2):\n        return True\n    # Check if the sum of any two sticks equals the third\n    if l1 + l2 == l3 or l1 + l3 == l2 or l2 + l3 == l1:\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if breaking the longest stick can form a rectangle\n    # If the longest stick is equal to the sum of the other two, it can be broken into two equal parts\n    if lengths[2] == lengths[0] + lengths[1]:\n        return True\n    \n    # Check if breaking the second longest stick can form a rectangle\n    # If the second longest stick is equal to the sum of the smallest and the longest, it can be broken into two equal parts\n    if lengths[1] == lengths[0] + lengths[2]:\n        return True\n    \n    # Check if breaking the smallest stick can form a rectangle\n    # If the smallest stick is equal to the sum of the other two, it can be broken into two equal parts\n    if lengths[0] == lengths[1] + lengths[2]:\n        return True\n    \n    # Check if any two sticks are equal and the third one is even\n    # This means we can break the third stick into two equal parts\n    if lengths[0] == lengths[1] and lengths[2] % 2 == 0:\n        return True\n    if lengths[1] == lengths[2] and lengths[0] % 2 == 0:\n        return True\n    if lengths[0] == lengths[2] and lengths[1] % 2 == 0:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Sort the lengths to easily identify the longest stick\n    lengths = sorted([l1, l2, l3])\n    # Check if the sum of the two smaller sticks is equal to the longest stick\n    if lengths[0] + lengths[1] == lengths[2]:\n        return True\n    # Check if any two sticks are equal, which means we can break the third stick into two equal parts\n    if lengths[0] == lengths[1] or lengths[1] == lengths[2]:\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Try breaking l1 into two parts\n    if (l2 == l3) or (l1 == l2 + l3):\n        return True\n    # Try breaking l2 into two parts\n    if (l1 == l3) or (l2 == l1 + l3):\n        return True\n    # Try breaking l3 into two parts\n    if (l1 == l2) or (l3 == l1 + l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Try breaking l1\n    if (l2 == l3) or (l1 == l2 + l3):\n        return True\n    # Try breaking l2\n    if (l1 == l3) or (l2 == l1 + l3):\n        return True\n    # Try breaking l3\n    if (l1 == l2) or (l3 == l1 + l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if any stick can be broken to form a rectangle\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if breaking the longest stick can form a rectangle\n    # If the sum of the two smaller sticks equals the longest stick, we can form a rectangle\n    if lengths[0] + lengths[1] == lengths[2]:\n        return True\n    \n    # Check if breaking the second longest stick can form a rectangle\n    # If the sum of the smallest stick and half of the second longest stick equals the longest stick\n    # We can form a rectangle\n    if lengths[0] == lengths[1] and lengths[2] % 2 == 0:\n        return True\n    \n    # Check if breaking the smallest stick can form a rectangle\n    # If the sum of half of the smallest stick and the second longest stick equals the longest stick\n    # We can form a rectangle\n    if lengths[1] == lengths[2] and lengths[0] % 2 == 0:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks have equal lengths and the third can be split into two equal parts\n    if (l1 == l2 and l3 % 2 == 0) or (l1 == l3 and l2 % 2 == 0) or (l2 == l3 and l1 % 2 == 0):\n        return True\n    # Check if the sum of the lengths of any two sticks equals the length of the third stick\n    if l1 + l2 == l3 or l1 + l3 == l2 or l2 + l3 == l1:\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if breaking the longest stick can form a rectangle\n    # If the sum of the two smaller sticks equals the longest stick, we can form a rectangle\n    if lengths[0] + lengths[1] == lengths[2]:\n        return True\n    \n    # Check if breaking the second longest stick can form a rectangle\n    # If the longest stick is even, we can break it into two equal parts\n    if lengths[2] % 2 == 0 and lengths[0] == lengths[1]:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if breaking the longest stick can form a rectangle\n    # If the sum of the two smaller sticks equals the longest stick, we can form a rectangle\n    if lengths[0] + lengths[1] == lengths[2]:\n        return True\n    \n    # Check if breaking the second longest stick can form a rectangle\n    # If the sum of the smallest stick and half of the second longest stick equals the longest stick, we can form a rectangle\n    if lengths[0] == lengths[1] and lengths[2] % 2 == 0:\n        return True\n    \n    # Check if breaking the smallest stick can form a rectangle\n    # If the sum of half of the smallest stick and the second longest stick equals the longest stick, we can form a rectangle\n    if lengths[1] == lengths[2] and lengths[0] % 2 == 0:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Sort the lengths to simplify the comparison\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if breaking the largest stick can form a rectangle\n    # If the largest stick can be split into two equal parts, it can form a square\n    if lengths[2] == lengths[0] + lengths[1]:\n        return True\n    \n    # Check if breaking the middle stick can form a rectangle\n    # If the middle stick can be split into two equal parts, it can form a square\n    if lengths[1] == lengths[0] + lengths[2]:\n        return True\n    \n    # Check if breaking the smallest stick can form a rectangle\n    # If the smallest stick can be split into two equal parts, it can form a square\n    if lengths[0] == lengths[1] + lengths[2]:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    if (l1 % 2 == 0 and l2 == l3) or (l2 % 2 == 0 and l1 == l3) or (l3 % 2 == 0 and l1 == l2):\n        return True\n    # Check if the sum of any two sticks equals the third\n    if l1 + l2 == l3 or l1 + l3 == l2 or l2 + l3 == l1:\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Determine if a rectangle can be formed by breaking one of the sticks into two pieces.\",\n      \"details\": [\n        \"Check if any of the three sticks can be broken into two parts such that the resulting four sticks can form a rectangle.\",\n        \"A rectangle can be formed if there are two pairs of equal lengths among the four sticks.\"\n      ]\n    },\n    {\n      \"description\": \"Handle multiple test cases efficiently.\",\n      \"details\": [\n        \"Read the number of test cases.\",\n        \"Iterate through each test case and apply the logic to determine if a rectangle can be formed.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, perform the following steps:\",\n    \"  1. Read the lengths of the three sticks: l1, l2, l3.\",\n    \"  2. Check the following conditions to determine if a rectangle can be formed:\",\n    \"     a. If l1 is even, check if l1/2, l2, l2, l3 can form a rectangle.\",\n    \"     b. If l2 is even, check if l1, l1, l2/2, l3 can form a rectangle.\",\n    \"     c. If l3 is even, check if l1, l2, l2, l3/2 can form a rectangle.\",\n    \"     d. Check if l1 + l2 == l3, l1 + l3 == l2, or l2 + l3 == l1 to form a rectangle.\",\n    \"  3. If any of the above conditions are satisfied, output 'YES'. Otherwise, output 'NO'.\",\n    \"Output the result for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. In this context, it means that after breaking one stick, the resulting four sticks should form two pairs of equal lengths.\n\n    'break exactly one of them'\n    Explanation: Only one stick can be broken into two pieces, and the sum of the lengths of the two pieces must equal the original stick's length.\n\n# [phrase showing quantity relationship]\n    'strictly greater than 0'\n    Explanation: Both pieces obtained from breaking a stick must have lengths greater than 0. This ensures that the pieces are valid sticks.\n\n    'equal to the original length'\n    Explanation: The sum of the lengths of the two pieces must be equal to the length of the stick that was broken. This ensures that no length is lost or gained in the process.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The conditions in step 2 should be checked simultaneously for each stick:\n    - If l1 is even, check if l1/2, l2, l2, l3 can form a rectangle.\n    - If l2 is even, check if l1, l1, l2/2, l3 can form a rectangle.\n    - If l3 is even, check if l1, l2, l2, l3/2 can form a rectangle.\n    - Check if l1 + l2 == l3, l1 + l3 == l2, or l2 + l3 == l1 to form a rectangle.\n    These conditions can be implemented using if-else statements to determine if any condition is satisfied.\n\n# [edge case]\n    1. (1, 1, 2) = YES\n    Explanation: Break the stick of length 2 into two pieces of length 1 each. The resulting sticks are 1, 1, 1, 1, which can form a square.\n\n    2. (1, 1, 1) = NO\n    Explanation: No matter how you break one stick, you cannot form two pairs of equal lengths.\n\n    3. (2, 2, 4) = YES\n    Explanation: Break the stick of length 4 into two pieces of length 2 each. The resulting sticks are 2, 2, 2, 2, which can form a square.\n\n# [extra code for edge case]\n    We do", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    if (l1 % 2 == 0 and l2 == l3) or (l2 % 2 == 0 and l1 == l3) or (l3 % 2 == 0 and l1 == l2):\n        return True\n    # Check if the sum of any two sticks equals the third\n    if l1 + l2 == l3 or l1 + l3 == l2 or l2 + l3 == l1:\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Determine if a stick can be broken into two pieces with positive integer lengths.\",\n      \"details\": \"For each stick, check if it can be split into two parts such that both parts are greater than 0 and their sum equals the original stick length.\"\n    },\n    {\n      \"description\": \"Check if the resulting four sticks can form a rectangle.\",\n      \"details\": \"After breaking one stick, verify if the four sticks can be paired into two sets of equal lengths.\"\n    },\n    {\n      \"description\": \"Handle multiple test cases efficiently.\",\n      \"details\": \"Iterate over each test case and apply the above checks to determine the possibility of forming a rectangle.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data\",\n      \"details\": \"Parse the number of test cases and the lengths of the sticks for each test case.\"\n    },\n    {\n      \"step\": \"Iterate over each test case\",\n      \"details\": \"For each test case, extract the stick lengths and apply the subproblem solutions.\"\n    },\n    {\n      \"step\": \"Check each stick for possible breakage\",\n      \"details\": \"For each stick, attempt to break it into two parts and check if the resulting four sticks can form a rectangle.\"\n    },\n    {\n      \"step\": \"Determine rectangle formation\",\n      \"details\": \"Check if any combination of breaking a stick results in two pairs of equal lengths among the four sticks.\"\n    },\n    {\n      \"step\": \"Output results\",\n      \"details\": \"For each test case, print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n    'break one stick'\n    Explanation: You can only break one of the three sticks into two pieces, and the sum of the lengths of these pieces must equal the original stick length.\n\n# [phrase showing quantity relationship]\n    'strictly greater than 0'\n    Explanation: Both pieces obtained from breaking a stick must have lengths greater than 0. In code, this means checking that both pieces are positive integers.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps \"Check each stick for possible breakage\" and \"Determine rectangle formation\" should be considered simultaneously. For each stick, attempt to break it and immediately check if the resulting four sticks can form a rectangle. This can be implemented using nested loops or conditional checks within a single iteration over the sticks.\n\n# [edge case]\n    Case 1: (1, 1, 2) = YES\n    Explanation: Break the stick of length 2 into two sticks of length 1 each. The resulting sticks are 1, 1, 1, 1, which can form a square.\n\n    Case 2: (1, 2, 3) = NO\n    Explanation: No matter how you break any stick, you cannot form two pairs of equal lengths.\n\n    Case 3: (2, 2, 4) = YES\n    Explanation: Break the stick of length 4 into two sticks of length 2 each. The resulting sticks are 2, 2, 2, 2, which can form a square.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking each possible breakage and rectangle formation will naturally handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if breaking the longest stick can form a rectangle\n    # If the longest stick is equal to the sum of the other two, it can be broken into two equal parts\n    if lengths[2] == lengths[0] + lengths[1]:\n        return True\n    \n    # Check if breaking the second longest stick can form a rectangle\n    # If the second longest stick is equal to the sum of the smallest and the longest, it can be broken into two equal parts\n    if lengths[1] == lengths[0] + lengths[2]:\n        return True\n    \n    # Check if breaking the smallest stick can form a rectangle\n    # If the smallest stick is equal to the sum of the other two, it can be broken into two equal parts\n    if lengths[0] == lengths[1] + lengths[2]:\n        return True\n    \n    # Check if any two sticks are equal and the third one is even\n    # This means we can break the third stick into two equal parts\n    if lengths[0] == lengths[1] and lengths[2] % 2 == 0:\n        return True\n    if lengths[1] == lengths[2] and lengths[0] % 2 == 0:\n        return True\n    if lengths[0] == lengths[2] and lengths[1] % 2 == 0:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Determine if a rectangle can be formed by breaking one stick into two pieces.\",\n      \"steps\": [\n        \"Identify the longest stick among the three given sticks.\",\n        \"Check if the sum of the lengths of the other two sticks is equal to or greater than the length of the longest stick.\",\n        \"If the sum is equal to the longest stick, a rectangle can be formed by breaking the longest stick into two equal parts.\",\n        \"If the sum is greater than the longest stick, check if breaking the longest stick into two parts can result in two pairs of equal lengths.\"\n      ]\n    },\n    {\n      \"description\": \"Handle multiple test cases efficiently.\",\n      \"steps\": [\n        \"Read the number of test cases.\",\n        \"Iterate through each test case and apply the rectangle formation logic.\",\n        \"Store the result for each test case.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, read the lengths of the three sticks.\",\n    \"Identify the longest stick and the other two sticks.\",\n    \"Check if a rectangle can be formed by breaking the longest stick.\",\n    \"Output 'YES' if a rectangle can be formed, otherwise output 'NO'.\",\n    \"Repeat the process for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n    'break one stick'\n    Explanation: This means that one of the sticks must be split into two parts, and the sum of the lengths of these parts must equal the original length of the stick.\n\n# [phrase showing quantity relationship]\n    'equal to': This indicates that the sum of the lengths of the two pieces must be exactly equal to the original length of the stick.\n    'greater than': This indicates that the sum of the lengths of the other two sticks must be greater than or equal to the length of the longest stick to potentially form a rectangle.\n\n# [degree adverb] \n    'longest': This refers to the stick with the maximum length among the three given sticks.\n\n# [code logic]\n    The steps \"Identify the longest stick among the three given sticks\" and \"Check if the sum of the lengths of the other two sticks is equal to or greater than the length of the longest stick\" should be implemented simultaneously. This can be done by sorting the sticks and checking the conditions in one code block.\n\n# [edge case] \n    1 1 1 = NO\n    Explanation: Breaking any stick results in lengths that cannot form a rectangle.\n    \n    1 2 3 = NO\n    Explanation: Breaking the stick of length 3 results in lengths that cannot form a rectangle.\n    \n    2 2 4 = YES\n    Explanation: Breaking the stick of length 4 into two parts of length 2 each results in a square.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking the sum of the two smaller sticks against the longest stick and considering possible breaks will handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Sort the lengths to easily identify the longest stick\n    lengths = sorted([l1, l2, l3])\n    # Check if the sum of the two smaller sticks is equal to the longest stick\n    if lengths[0] + lengths[1] == lengths[2]:\n        return True\n    # Check if any two sticks are equal, which means we can break the third stick into two equal parts\n    if lengths[0] == lengths[1] or lengths[1] == lengths[2]:\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Determine if a stick can be broken into two pieces with positive integer lengths.\",\n      \"details\": \"For each stick, check if it can be split into two parts such that both parts are greater than 0 and their sum equals the original stick length.\"\n    },\n    {\n      \"description\": \"Check if the resulting four sticks can form a rectangle.\",\n      \"details\": \"After breaking one stick, verify if the four sticks can be paired into two sets of equal lengths.\"\n    },\n    {\n      \"description\": \"Handle multiple test cases efficiently.\",\n      \"details\": \"Iterate over each test case and apply the above checks to determine if a rectangle can be formed.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data\",\n      \"details\": \"Parse the number of test cases and the lengths of the sticks for each test case.\"\n    },\n    {\n      \"step\": \"Iterate over each test case\",\n      \"details\": \"For each test case, retrieve the stick lengths and apply the subproblem solutions.\"\n    },\n    {\n      \"step\": \"Check possible breaks for each stick\",\n      \"details\": \"For each stick, attempt to break it into two parts and check if the resulting four sticks can form a rectangle.\"\n    },\n    {\n      \"step\": \"Determine rectangle formation\",\n      \"details\": \"Check if any combination of breaking a stick results in two pairs of equal lengths among the four sticks.\"\n    },\n    {\n      \"step\": \"Output results\",\n      \"details\": \"For each test case, print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n    'break one stick'\n    Explanation: You can only break one of the three sticks into two pieces, and both pieces must have positive integer lengths.\n\n# [phrase showing quantity relationship]\n    'strictly greater than 0'\n    Explanation: When breaking a stick, both resulting pieces must have lengths greater than 0. This ensures that the pieces are valid sides of a rectangle.\n    Implementation: Ensure that when breaking a stick, both parts are greater than 0.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps \"Check possible breaks for each stick\" and \"Determine rectangle formation\" should be considered simultaneously.\n    Explanation: For each stick, attempt to break it and immediately check if the resulting four sticks can form a rectangle. This can be done in a loop where you try breaking each stick and check the condition in the same iteration.\n\n# [edge case]\n    1 1 1 = NO\n    Explanation: Breaking any stick results in lengths that cannot form a rectangle.\n    \n    1 2 3 = NO\n    Explanation: Breaking any stick results in lengths that cannot form a rectangle.\n    \n    2 2 4 = YES\n    Explanation: Breaking the stick of length 4 into two pieces of length 2 results in four sticks of lengths 2, 2, 2, 2, which can form a square.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking each possible break and verifying rectangle formation will handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Try breaking l1 into two parts\n    if (l2 == l3) or (l1 == l2 + l3):\n        return True\n    # Try breaking l2 into two parts\n    if (l1 == l3) or (l2 == l1 + l3):\n        return True\n    # Try breaking l3 into two parts\n    if (l1 == l2) or (l3 == l1 + l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Determine if a rectangle can be formed by breaking one of the sticks into two pieces.\",\n      \"steps\": [\n        \"Identify the three sticks with lengths l1, l2, and l3.\",\n        \"Consider each stick as a candidate to be broken into two pieces.\",\n        \"For each candidate stick, calculate all possible pairs of positive integer lengths that sum to the length of the stick.\",\n        \"Check if any combination of the resulting four sticks can form a rectangle.\"\n      ]\n    },\n    {\n      \"description\": \"Check if four sticks can form a rectangle.\",\n      \"steps\": [\n        \"Sort the four stick lengths.\",\n        \"Check if the two smallest sticks are equal and the two largest sticks are equal (i.e., a rectangle can be formed).\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, perform the following:\",\n    \"  - Read the lengths of the three sticks, l1, l2, and l3.\",\n    \"  - For each stick, consider it as the one to be broken and generate possible pairs of lengths.\",\n    \"  - For each pair, combine with the other two sticks to form a set of four sticks.\",\n    \"  - Check if the set of four sticks can form a rectangle using the rectangle check subproblem.\",\n    \"  - If any combination can form a rectangle, output 'YES'. Otherwise, output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n# [phrase showing quantity relationship]\n    'strictly greater than 0': means that when breaking a stick, both resulting pieces must have lengths greater than 0.\n    'equal to the original length': means that the sum of the lengths of the two pieces must be equal to the length of the stick before breaking.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the subproblem \"Determine if a rectangle can be formed by breaking one of the sticks into two pieces\" should be implemented simultaneously. Specifically, for each stick considered for breaking, the generation of possible pairs and the rectangle check should be done in one code block to efficiently determine if a rectangle can be formed.\n\n# [edge case]\n    1 1 1 = NO\n    Explanation: Breaking any stick results in lengths that cannot form a rectangle since all resulting sticks would be of length 1.\n    \n    1 2 3 = NO\n    Explanation: Breaking any stick results in lengths that cannot form a rectangle since no two pairs of opposite sides can be equal.\n    \n    2 2 4 = YES\n    Explanation: Breaking the stick of length 4 into lengths 2 and 2 results in four sticks of lengths 2, 2, 2, and 2, which can form a square.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking combinations of stick lengths will naturally handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Try breaking l1\n    if (l2 == l3) or (l1 == l2 + l3):\n        return True\n    # Try breaking l2\n    if (l1 == l3) or (l2 == l1 + l3):\n        return True\n    # Try breaking l3\n    if (l1 == l2) or (l3 == l1 + l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Determine if a stick can be broken into two pieces with positive integer lengths.\",\n      \"details\": \"For each stick, check if it can be split into two parts such that both parts are greater than 0 and their sum equals the original stick length.\"\n    },\n    {\n      \"description\": \"Check if the resulting four sticks can form a rectangle.\",\n      \"details\": \"After breaking one stick, verify if the four sticks can be paired into two sets of equal lengths.\"\n    },\n    {\n      \"description\": \"Handle multiple test cases efficiently.\",\n      \"details\": \"Iterate over each test case and apply the above checks to determine if a rectangle can be formed.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read the number of test cases.\",\n      \"details\": \"Parse the integer t from the input.\"\n    },\n    {\n      \"step\": \"Iterate over each test case.\",\n      \"details\": \"For each test case, read the three stick lengths l_1, l_2, l_3.\"\n    },\n    {\n      \"step\": \"For each stick, attempt to break it into two pieces.\",\n      \"details\": \"For each stick, consider all possible ways to split it into two positive integer lengths.\"\n    },\n    {\n      \"step\": \"Check if the resulting four sticks can form a rectangle.\",\n      \"details\": \"Verify if any combination of breaking a stick results in two pairs of equal lengths among the four sticks.\"\n    },\n    {\n      \"step\": \"Output the result for each test case.\",\n      \"details\": \"Print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n# [phrase showing quantity relationship]\n    'strictly greater than 0': This means that when breaking a stick, both resulting pieces must have lengths greater than zero.\n    Implementation: Ensure that when breaking a stick, both parts are positive integers.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps \"For each stick, attempt to break it into two pieces\" and \"Check if the resulting four sticks can form a rectangle\" should be considered simultaneously.\n    Implementation: For each stick, try breaking it into two parts and immediately check if the resulting four sticks can form a rectangle.\n\n# [edge case]\n    Case 1: (1, 1, 1) = NO\n    Explanation: No matter how you break any stick, you cannot form a rectangle with equal opposite sides.\n    \n    Case 2: (2, 2, 4) = YES\n    Explanation: Break the stick of length 4 into two sticks of length 2, resulting in four sticks of lengths 2, 2, 2, 2, which can form a square.\n    \n    Case 3: (3, 3, 6) = YES\n    Explanation: Break the stick of length 6 into two sticks of length 3, resulting in four sticks of lengths 3, 3, 3, 3, which can form a square.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking combinations of stick lengths will naturally handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any stick can be broken to form a rectangle\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if breaking the longest stick can form a rectangle\n    # If the sum of the two smaller sticks equals the longest stick, we can form a rectangle\n    if lengths[0] + lengths[1] == lengths[2]:\n        return True\n    \n    # Check if breaking the second longest stick can form a rectangle\n    # If the sum of the smallest stick and half of the second longest stick equals the longest stick\n    # We can form a rectangle\n    if lengths[0] == lengths[1] and lengths[2] % 2 == 0:\n        return True\n    \n    # Check if breaking the smallest stick can form a rectangle\n    # If the sum of half of the smallest stick and the second longest stick equals the longest stick\n    # We can form a rectangle\n    if lengths[1] == lengths[2] and lengths[0] % 2 == 0:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Read the first line to get the number of test cases, t. For each subsequent line, read three integers representing the lengths of the sticks.\"\n    },\n    {\n      \"description\": \"Determine if a rectangle can be formed by breaking one stick into two pieces.\",\n      \"details\": \"For each test case, check if breaking one of the sticks into two pieces allows the formation of a rectangle. This involves checking if any of the following conditions hold: (1) Two sticks have equal lengths, and the third stick can be split into two equal parts. (2) The sum of the lengths of any two sticks equals the length of the third stick.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, read the lengths of the three sticks.\",\n    \"For each test case, check the following conditions to determine if a rectangle can be formed:\",\n    \"  - Check if any two sticks have equal lengths and the third stick can be split into two equal parts.\",\n    \"  - Check if the sum of the lengths of any two sticks equals the length of the third stick.\",\n    \"If any of the above conditions are met, append 'YES' to the results list; otherwise, append 'NO'.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n    'break one stick'\n    Explanation: This means you can only split one of the three sticks into two parts, and the sum of the parts must equal the original stick length.\n\n# [phrase showing quantity relationship]\n    'strictly greater than 0': This means that when breaking a stick, both resulting pieces must have lengths greater than zero.\n    'sum of the lengths': This refers to the condition where the total length of the two pieces must equal the original stick length.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps to check if a rectangle can be formed should be implemented simultaneously. Specifically, the conditions:\n    - Check if any two sticks have equal lengths and the third stick can be split into two equal parts.\n    - Check if the sum of the lengths of any two sticks equals the length of the third stick.\n    These checks can be done in a single if-else block for each test case.\n\n# [edge case]\n    1. (1, 1, 2) = YES\n       Explanation: The third stick can be split into two parts of length 1 each, forming a rectangle with sides 1, 1, 1, 1 (a square).\n    2. (1, 2, 3) = NO\n       Explanation: No combination of breaking one stick results in four sides that can form a rectangle.\n    3. (2, 2, 4) = YES\n       Explanation: The third stick can be split into two parts of length 2 each, forming a rectangle with sides 2, 2, 2, 2 (a square).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking the conditions for forming a rectangle will naturally handle these cases.\n\nYES", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks have equal lengths and the third can be split into two equal parts\n    if (l1 == l2 and l3 % 2 == 0) or (l1 == l3 and l2 % 2 == 0) or (l2 == l3 and l1 % 2 == 0):\n        return True\n    # Check if the sum of the lengths of any two sticks equals the length of the third stick\n    if l1 + l2 == l3 or l1 + l3 == l2 or l2 + l3 == l1:\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Determine if a rectangle can be formed by breaking one of the sticks into two pieces.\",\n      \"steps\": [\n        \"Identify the three stick lengths: l1, l2, l3.\",\n        \"Check if any of the sticks can be broken into two pieces such that the resulting four sticks can form a rectangle.\"\n      ]\n    },\n    {\n      \"description\": \"Check if a rectangle can be formed by breaking each stick.\",\n      \"steps\": [\n        \"For each stick, consider breaking it into two pieces with lengths x and y, where x + y equals the original stick length.\",\n        \"Check if the resulting four sticks can form a rectangle by verifying if there are two pairs of equal lengths.\"\n      ]\n    },\n    {\n      \"description\": \"Handle multiple test cases.\",\n      \"steps\": [\n        \"Read the number of test cases.\",\n        \"For each test case, apply the logic to determine if a rectangle can be formed.\",\n        \"Output 'YES' if a rectangle can be formed, otherwise output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, perform the following:\",\n    \"  - Read the three stick lengths.\",\n    \"  - For each stick, attempt to break it into two pieces and check if a rectangle can be formed:\",\n    \"    - If breaking the stick results in two pairs of equal lengths, output 'YES'.\",\n    \"    - If no valid break is found for any stick, output 'NO'.\",\n    \"Ensure the program handles edge cases, such as minimum and maximum stick lengths.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n    'break one stick'\n    Explanation: This means you can only break one of the three sticks into two pieces, and the sum of the lengths of these two pieces must equal the original stick length.\n\n# [phrase showing quantity relationship]\n    'exactly one'\n    Explanation: This indicates that only one stick can be broken, not more than one.\n\n    'equal to'\n    Explanation: The sum of the lengths of the two pieces must be equal to the original stick length.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan related to checking if a rectangle can be formed by breaking each stick should be implemented simultaneously. Specifically, for each stick, you should attempt to break it into two pieces and immediately check if the resulting four sticks can form a rectangle. This can be done using a loop that iterates over each stick and checks the condition in one block of code.\n\n# [edge case]\n    1. (1, 1, 2) = YES\n       Explanation: Break the stick of length 2 into two sticks of length 1 each. The resulting lengths are 1, 1, 1, 1, which can form a square.\n       \n    2. (1, 1, 1) = NO\n       Explanation: No matter how you break any stick, you cannot form a rectangle because you need two pairs of equal lengths.\n       \n    3. (10^8, 10^8, 10^8) = YES\n       Explanation: Break one stick of length 10^8 into two sticks of length 5*10^7 each. The resulting lengths are 10^8, 10^8, 5*10^7, 5*10^7, which can form a rectangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if a rectangle can be formed by breaking each stick and checking for two pairs of equal lengths will handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if breaking the longest stick can form a rectangle\n    # If the sum of the two smaller sticks equals the longest stick, we can form a rectangle\n    if lengths[0] + lengths[1] == lengths[2]:\n        return True\n    \n    # Check if breaking the second longest stick can form a rectangle\n    # If the longest stick is even, we can break it into two equal parts\n    if lengths[2] % 2 == 0 and lengths[0] == lengths[1]:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Determine if a stick can be broken into two pieces with positive integer lengths.\",\n      \"details\": \"For each stick, check if it can be split into two parts such that both parts are greater than 0 and their sum equals the original stick length.\"\n    },\n    {\n      \"description\": \"Check if the resulting four sticks can form a rectangle.\",\n      \"details\": \"After breaking one stick, verify if the four sticks can be paired into two sets of equal lengths.\"\n    },\n    {\n      \"description\": \"Handle multiple test cases efficiently.\",\n      \"details\": \"Iterate over each test case and apply the above checks to determine the possibility of forming a rectangle.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, read the lengths of the three sticks.\",\n    \"For each stick, attempt to break it into two pieces and check if the resulting four sticks can form a rectangle.\",\n    \"To form a rectangle, check if any two pairs of sticks have equal lengths.\",\n    \"Output 'YES' if a rectangle can be formed, otherwise output 'NO'.\",\n    \"Ensure the solution handles edge cases and large input sizes efficiently.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n    'break one stick'\n    Explanation: You can only break one of the three sticks into two pieces, and the sum of the two pieces must equal the original stick length.\n\n# [phrase showing quantity relationship]\n    'strictly greater than 0': This means that when breaking a stick, both resulting pieces must have lengths greater than 0.\n    Implementation: Ensure that when breaking a stick, both parts are at least 1.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps \"For each stick, attempt to break it into two pieces and check if the resulting four sticks can form a rectangle\" and \"To form a rectangle, check if any two pairs of sticks have equal lengths\" should be implemented simultaneously. This can be done by iterating over each stick, breaking it, and immediately checking if the resulting four sticks can form a rectangle.\n\n# [edge case]\n    (1, 1, 2) = NO\n    Explanation: Breaking any stick results in lengths that cannot form a rectangle.\n    \n    (2, 2, 4) = YES\n    Explanation: Break the stick of length 4 into two sticks of length 2, resulting in four sticks of length 2, which can form a square.\n\n    (1, 2, 3) = NO\n    Explanation: Breaking any stick results in lengths that cannot form a rectangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking each possible break and verifying rectangle formation will naturally handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if breaking the longest stick can form a rectangle\n    # If the sum of the two smaller sticks equals the longest stick, we can form a rectangle\n    if lengths[0] + lengths[1] == lengths[2]:\n        return True\n    \n    # Check if breaking the second longest stick can form a rectangle\n    # If the sum of the smallest stick and half of the second longest stick equals the longest stick, we can form a rectangle\n    if lengths[0] == lengths[1] and lengths[2] % 2 == 0:\n        return True\n    \n    # Check if breaking the smallest stick can form a rectangle\n    # If the sum of half of the smallest stick and the second longest stick equals the longest stick, we can form a rectangle\n    if lengths[1] == lengths[2] and lengths[0] % 2 == 0:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Determine if a rectangle can be formed by breaking one of the sticks into two pieces.\",\n      \"steps\": [\n        \"Identify the three stick lengths: l1, l2, l3.\",\n        \"Consider each stick as a candidate to be broken into two pieces.\",\n        \"For each candidate stick, calculate all possible pairs of positive integer lengths that sum to the original stick length.\",\n        \"Check if any combination of the resulting four sticks can form a rectangle.\"\n      ]\n    },\n    {\n      \"description\": \"Check if four given stick lengths can form a rectangle.\",\n      \"steps\": [\n        \"Sort the four stick lengths.\",\n        \"Check if the first two lengths are equal and the last two lengths are equal (i.e., a rectangle or square can be formed).\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, perform the following:\",\n    \"  - Read the three stick lengths: l1, l2, l3.\",\n    \"  - For each stick, consider it as the one to be broken and generate possible pairs of lengths.\",\n    \"  - For each pair, combine with the other two sticks to form a set of four sticks.\",\n    \"  - Check if the four sticks can form a rectangle using the rectangle check subproblem.\",\n    \"  - If any combination can form a rectangle, output 'YES'. Otherwise, output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n    'break one stick'\n    Explanation: This means you can only split one of the three sticks into two parts, and both parts must be positive integers.\n\n# [phrase showing quantity relationship]\n    'exactly one': This means only one stick can be broken, not more than one.\n    'positive integer length': This means the resulting pieces from breaking a stick must be greater than zero.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the subproblem \"Determine if a rectangle can be formed by breaking one of the sticks into two pieces\" should be implemented simultaneously. Specifically, for each stick considered for breaking, you should generate possible pairs and immediately check if they can form a rectangle with the other two sticks.\n\n# [edge case]\n    1. (1, 1, 2) = YES\n       Explanation: Break the stick of length 2 into two sticks of length 1 each. The resulting sticks are 1, 1, 1, 1, which can form a square.\n    2. (1, 1, 1) = NO\n       Explanation: No matter how you break one stick, you cannot form a rectangle because you need at least two pairs of equal lengths.\n    3. (100000000, 1, 1) = NO\n       Explanation: Breaking the stick of length 100000000 into two positive integer lengths will not allow forming a rectangle with the other two sticks of length 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking all possible pairs and verifying if they can form a rectangle will naturally handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Sort the lengths to simplify the comparison\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if breaking the largest stick can form a rectangle\n    # If the largest stick can be split into two equal parts, it can form a square\n    if lengths[2] == lengths[0] + lengths[1]:\n        return True\n    \n    # Check if breaking the middle stick can form a rectangle\n    # If the middle stick can be split into two equal parts, it can form a square\n    if lengths[1] == lengths[0] + lengths[2]:\n        return True\n    \n    # Check if breaking the smallest stick can form a rectangle\n    # If the smallest stick can be split into two equal parts, it can form a square\n    if lengths[0] == lengths[1] + lengths[2]:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Determine if a rectangle can be formed by breaking one of the sticks into two pieces.\",\n      \"details\": [\n        \"Check if any of the three sticks can be broken into two parts such that the resulting four sticks can form a rectangle.\",\n        \"A rectangle can be formed if there are two pairs of equal lengths among the four sticks.\"\n      ]\n    },\n    {\n      \"description\": \"Handle multiple test cases efficiently.\",\n      \"details\": [\n        \"Read the number of test cases.\",\n        \"Iterate through each test case and apply the logic to determine if a rectangle can be formed.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, perform the following steps:\",\n    \"  1. Read the lengths of the three sticks: l1, l2, l3.\",\n    \"  2. Check the following conditions to determine if a rectangle can be formed:\",\n    \"     a. If l1 is even, check if l1/2, l2, l2, l3 can form a rectangle.\",\n    \"     b. If l2 is even, check if l1, l1, l2/2, l3 can form a rectangle.\",\n    \"     c. If l3 is even, check if l1, l2, l2, l3/2 can form a rectangle.\",\n    \"     d. Check if l1 + l2 == l3, l1 + l3 == l2, or l2 + l3 == l1 to form a rectangle.\",\n    \"  3. If any of the above conditions are satisfied, output 'YES'. Otherwise, output 'NO'.\",\n    \"Output the result for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. In this context, it means that after breaking one stick, the resulting four sticks should form two pairs of equal lengths.\n\n    'break exactly one of them'\n    Explanation: Only one stick can be broken into two pieces, and the sum of the lengths of the two pieces must equal the original stick's length.\n\n# [phrase showing quantity relationship]\n    'strictly greater than 0'\n    Explanation: Both pieces obtained from breaking a stick must have lengths greater than 0. This ensures that the pieces are valid sticks.\n\n    'equal to the original length'\n    Explanation: The sum of the lengths of the two pieces must be equal to the length of the stick that was broken. This ensures that no length is lost or gained in the process.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The conditions in step 2 should be checked simultaneously for each stick:\n    - If l1 is even, check if l1/2, l2, l2, l3 can form a rectangle.\n    - If l2 is even, check if l1, l1, l2/2, l3 can form a rectangle.\n    - If l3 is even, check if l1, l2, l2, l3/2 can form a rectangle.\n    - Check if l1 + l2 == l3, l1 + l3 == l2, or l2 + l3 == l1 to form a rectangle.\n    These conditions can be implemented using if-else statements to determine if any condition is satisfied.\n\n# [edge case]\n    1. (1, 1, 2) = YES\n    Explanation: Break the stick of length 2 into two pieces of length 1 each. The resulting sticks are 1, 1, 1, 1, which can form a square.\n\n    2. (1, 1, 1) = NO\n    Explanation: No matter how you break one stick, you cannot form two pairs of equal lengths.\n\n    3. (2, 2, 4) = YES\n    Explanation: Break the stick of length 4 into two pieces of length 2 each. The resulting sticks are 2, 2, 2, 2, which can form a square.\n\n# [extra code for edge case]\n    We do", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    if (l1 % 2 == 0 and l2 == l3) or (l2 % 2 == 0 and l1 == l3) or (l3 % 2 == 0 and l1 == l2):\n        return True\n    # Check if the sum of any two sticks equals the third\n    if l1 + l2 == l3 or l1 + l3 == l2 or l2 + l3 == l1:\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [true, true, false, true, false, false, true, false, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 456, "prompt": "There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYou are asked to break exactly one of them into two pieces in such a way that:\n\n  * both pieces have positive (strictly greater than 0) integer length; \n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides.\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nConsider edge cases and possible combinations to ensure the conditions can be met.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "mutate_method": "add_1_sentence_at_end", "save_node": true, "parent_index": 52}
