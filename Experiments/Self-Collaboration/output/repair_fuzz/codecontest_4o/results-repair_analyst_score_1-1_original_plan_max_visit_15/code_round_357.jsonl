{"name": "1591_A. Life of a Flower", "description": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "tags": ["implementation"], "difficulty": 7, "id": 1591, "sample_io": [{"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}], "test_list": [{"input": "1\n10\n1 1 1 1 1 1 1 1 1 1\n", "output": ["47\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n7\n3\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 0\n", "output": ["33\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 1\n", "output": ["29\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n-1\n8\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 0 1 1 1 1 1\n", "output": ["24\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["7\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n12\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n7\n8\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["7\n-1\n8\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 0 1 1\n", "output": ["20\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["12\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["-1\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["12\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 1 1 1\n1\n1\n", "output": ["3\n7\n12\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n3\n17\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n7\n8\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 0\n", "output": ["28\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n7\n17\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["2\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["7\n-1\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n3\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n1\n", "output": ["3\n7\n3\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["12\n12\n-1\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n3\n12\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 0 1\n", "output": ["15\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n1\n", "output": ["3\n-1\n17\n2\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 1 1\n", "output": ["42\n"]}, {"input": "4\n3\n0 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n-1\n3\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n2\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["3\n2\n8\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["2\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n2\n-1\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n3\n8\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["12\n-1\n17\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 0\n", "output": ["19\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n1\n", "output": ["3\n-1\n7\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n2\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n3\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 0\n1\n0\n", "output": ["-1\n7\n3\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n1\n", "output": ["-1\n-1\n7\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 1\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n12\n17\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n3\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n7\n17\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["12\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 0\n1\n1\n", "output": ["3\n-1\n12\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 1 0 1\n1\n0\n", "output": ["3\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n7\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n12\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["12\n7\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n3\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["12\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["-1\n7\n17\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["-1\n12\n-1\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 0\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 1 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 0 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 2 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n2 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 -1 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 1\n", "output": ["29\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 0\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 0 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "1\n10\n0 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 1\n", "output": ["15\n"]}, {"input": "1\n10\n1 0 0 1 0 2 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "1\n10\n0 1 0 0 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 2 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 3 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 2 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 1 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 0 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 -1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 0\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 0\n", "output": ["24\n"]}, {"input": "1\n10\n1 1 0 1 1 1 0 0 0 0\n", "output": ["-1\n"]}], "task_id": "codecontest/45", "repair_prompt": ["Petya has got an interesting flower. Petya is a person who has many responsibilities and is often occupied with various tasks. As a result, he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n  \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Petya has got an interesting flower. Petya is a person who has many responsibilities. He is often occupied with various tasks. As a result, he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n  \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Petya has got an interesting flower and many responsibilities and is often occupied with various tasks, sometimes causing him to forget to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n  \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def flower_growth_simulation():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        watering_days = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        consecutive_unwatered_days = 0\n        flower_dead = False\n        \n        for i in range(n):\n            if watering_days[i] == 1:\n                if i > 0 and watering_days[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    flower_dead = True\n                    break\n        \n        if flower_dead:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\nflower_growth_simulation()\n\nmain()", "completions": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        flower_died = False\n        \n        for i in range(n):\n            if a[i] == 1:\n                if i > 0 and a[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n            else:\n                if i > 0 and a[i - 1] == 0:\n                    flower_died = True\n                    break\n        \n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def flower_growth_simulation():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        watering_days = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        consecutive_unwatered_days = 0\n        flower_died = False\n        \n        for i in range(n):\n            if watering_days[i] == 1:\n                if i > 0 and watering_days[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    flower_died = True\n                    break\n        \n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\nflower_growth_simulation()\n\nmain()", "def flower_growth_simulation():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        flower_dies = False\n        \n        for i in range(n):\n            if i > 0 and a[i] == 0 and a[i - 1] == 0:\n                flower_dies = True\n                break\n            if a[i] == 1:\n                if i > 0 and a[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n        \n        if flower_dies:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\nflower_growth_simulation()\n\nmain()", "def flower_growth_simulation():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        dead = False\n        \n        for i in range(n):\n            if a[i] == 1:\n                if i > 0 and a[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n            else:\n                if i > 0 and a[i - 1] == 0:\n                    dead = True\n                    break\n        \n        if dead:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        days = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        consecutive_unwatered_days = 0\n        flower_died = False\n        \n        for i in range(n):\n            if days[i] == 1:\n                if i > 0 and days[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    flower_died = True\n                    break\n        \n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        dead = False\n        \n        for i in range(n):\n            if a[i] == 1:\n                if i > 0 and a[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n            else:\n                if i > 0 and a[i - 1] == 0:\n                    dead = True\n                    break\n        \n        if dead:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def flower_growth():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n == 1 and a[0] == 0:\n            results.append(-1)\n            continue\n        \n        height = 1\n        consecutive_unwatered_days = 0\n        \n        for i in range(n):\n            if a[i] == 1:\n                if i > 0 and a[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    height = -1\n                    break\n        \n        results.append(height)\n    \n    for result in results:\n        print(result)\n\nflower_growth()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        days = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        flower_dies = False\n        \n        for i in range(n):\n            if days[i] == 1:\n                if i > 0 and days[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n            else:\n                if i > 0 and days[i - 1] == 0:\n                    flower_dies = True\n                    break\n        \n        if flower_dies:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def flower_growth(test_cases):\n    results = []\n    for n, days in test_cases:\n        height = 1\n        consecutive_unwatered_days = 0\n        for i in range(n):\n            if days[i] == 1:\n                if i > 0 and days[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    height = -1\n                    break\n        results.append(height)\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        days = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, days))\n    \n    results = flower_growth(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def flower_growth_simulation():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        watering_days = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        consecutive_unwatered_days = 0\n        flower_dead = False\n        \n        for i in range(n):\n            if watering_days[i] == 1:\n                if i > 0 and watering_days[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    flower_dead = True\n                    break\n        \n        if flower_dead:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\nflower_growth_simulation()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"details\": \"Read the first line to get the number of test cases, t. For each test case, read the number of days, n, and the sequence of integers representing whether the flower is watered each day.\"\n    },\n    {\n      \"description\": \"Simulate the growth of the flower for each test case based on the watering pattern.\",\n      \"details\": \"Initialize the flower height to 1 cm. Iterate over the days and update the height based on the watering rules. If the flower is not watered for two consecutive days, mark it as dead.\"\n    },\n    {\n      \"description\": \"Determine the final height of the flower or if it is dead for each test case.\",\n      \"details\": \"After simulating the days, check if the flower is dead. If so, the result is -1. Otherwise, the result is the final height of the flower.\"\n    },\n    {\n      \"description\": \"Output the results for all test cases.\",\n      \"details\": \"For each test case, print the result (either the final height or -1 if the flower is dead).\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, perform the following steps:\",\n    \"  a. Read the number of days, n, and the sequence of integers representing watering days.\",\n    \"  b. Initialize the flower height to 1 cm.\",\n    \"  c. Iterate over the sequence of days:\",\n    \"     i. If the flower is watered on the current day, increase the height by 1 cm.\",\n    \"     ii. If the flower is watered on consecutive days, increase the height by an additional 4 cm (total 5 cm for that day).\",\n    \"     iii. If the flower is not watered for two consecutive days, mark the flower as dead and break the loop.\",\n    \"  d. After processing all days, check if the flower is dead. If so, set the result to -1. Otherwise, set the result to the final height.\",\n    \"Output the result for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around simulating the growth of a flower based on specific watering conditions over a series of days.\n\n# [phrase showing quantity relationship]\n    'two days in a row': If the flower isn't watered for two consecutive days, it dies.\n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm.\n    'grows by 5 centimeters': If watered on consecutive days, the flower grows by 5 cm on the second day.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    Steps 3.c.i and 3.c.ii should be implemented simultaneously. When iterating over the sequence of days, you need to check if the flower is watered on the current day and if it was watered on the previous day to determine the correct growth increment.\n\n# [edge case]\n    Test case: 1\n    Input: 1\n           0\n    Expected output: 1\n    Explanation: The flower starts at 1 cm and is not watered, but it doesn't die because it hasn't been two consecutive days without water.\n\n    Test case: 2\n    Input: 2\n           0 0\n    Expected output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Test case: 3\n    Input: 3\n           1 1 0\n    Expected output: 6\n    Explanation: The flower grows by 1 cm on the first day, 5 cm on the second day (since it's consecutive), and doesn't grow on the third day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking consecutive days and updating the height or marking the flower as dead will handle these cases correctly.\n\nYES", "Round_0": {"code": "def flower_growth_simulation():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        watering_days = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        consecutive_unwatered_days = 0\n        flower_dead = False\n        \n        for i in range(n):\n            if watering_days[i] == 1:\n                if i > 0 and watering_days[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    flower_dead = True\n                    break\n        \n        if flower_dead:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\nflower_growth_simulation()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def flower_growth_simulation():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        watering_days = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        consecutive_unwatered_days = 0\n        flower_dead = False\n        \n        for i in range(n):\n            if watering_days[i] == 1:\n                if i > 0 and watering_days[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    flower_dead = True\n                    break\n        \n        if flower_dead:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\nflower_growth_simulation()\n"}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the number of test cases, t.\",\n        \"For each test case, read the integer n representing the number of days.\",\n        \"Read the sequence of integers a_1, a_2, ..., a_n representing whether the flower is watered each day.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the growth of the flower over n days for each test case.\",\n      \"steps\": [\n        \"Initialize the flower's height to 1 centimeter at the start of the first day.\",\n        \"Iterate over the sequence of days:\",\n        \"  - If the flower is watered on the current day (a_i = 1):\",\n        \"    - Check if it was watered the previous day (a_(i-1) = 1) and increase height by 5 centimeters.\",\n        \"    - Otherwise, increase height by 1 centimeter.\",\n        \"  - If the flower is not watered on the current day (a_i = 0):\",\n        \"    - Check if it was not watered the previous day (a_(i-1) = 0). If true, the flower dies and the result is -1.\",\n        \"    - Otherwise, continue without changing the height.\"\n      ]\n    },\n    {\n      \"description\": \"Output the final height of the flower for each test case.\",\n      \"steps\": [\n        \"For each test case, print the final height of the flower or -1 if the flower died.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, simulate the growth of the flower over n days based on the watering pattern.\",\n    \"Output the final height of the flower for each test case, or -1 if the flower dies.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around simulating the growth of a flower based on watering patterns over a series of days. The flower's growth is affected by whether it is watered or not, and specific rules dictate how much it grows or if it dies.\n\n# [phrase showing quantity relationship]\n    'two days in a row': This indicates a sequence of two consecutive days where the flower is not watered, leading to its death.\n    Implementation: Check for two consecutive zeros in the list of days.\n    \n    'grows by 1 centimeter': This indicates the flower grows by 1 cm if watered on a single day.\n    Implementation: Increment height by 1 if the current day is watered and the previous day was not.\n    \n    'grows by 5 centimeters': This indicates the flower grows by 5 cm if watered on consecutive days.\n    Implementation: Increment height by 5 if both the current and previous days are watered.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps related to checking the watering pattern and updating the flower's height should be implemented simultaneously within the loop iterating over the days. Specifically:\n    - \"If the flower is watered on the current day (a_i = 1):\"\n    - \"Check if it was watered the previous day (a_(i-1) = 1) and increase height by 5 centimeters.\"\n    - \"Otherwise, increase height by 1 centimeter.\"\n    - \"If the flower is not watered on the current day (a_i = 0):\"\n    - \"Check if it was not watered the previous day (a_(i-1) = 0). If true, the flower dies and the result is -1.\"\n\n# [edge case] \n    Test case: 1\n    Input: 1 0\n    Expected output: 1\n    Explanation: The flower is not watered on the only day, but it does not die because it requires two consecutive days of not being watered to die.\n\n    Test case: 2\n    Input: 2 0 0\n    Expected output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Test case: 3\n    Input: 3 1 1 0\n    Expected output: 6\n    Explanation: The flower grows by 5 cm on the second day due to consecutive watering,", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        flower_died = False\n        \n        for i in range(n):\n            if a[i] == 1:\n                if i > 0 and a[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n            else:\n                if i > 0 and a[i - 1] == 0:\n                    flower_died = True\n                    break\n        \n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 2 were given"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        flower_died = False\n        \n        for i in range(n):\n            if a[i] == 1:\n                if i > 0 and a[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n            else:\n                if i > 0 and a[i - 1] == 0:\n                    flower_died = True\n                    break\n        \n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the number of test cases, t.\",\n        \"For each test case, read the integer n and the list of integers representing whether the flower is watered each day.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the growth of the flower for each test case based on the watering pattern.\",\n      \"steps\": [\n        \"Initialize the flower height to 1 centimeter at the start of each test case.\",\n        \"Iterate over the days and update the flower's height based on the watering rules.\",\n        \"Check if the flower dies due to not being watered for two consecutive days.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the final height of the flower or if it dies for each test case.\",\n      \"steps\": [\n        \"If the flower dies, set the result for that test case to -1.\",\n        \"Otherwise, record the final height of the flower.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for all test cases.\",\n      \"steps\": [\n        \"Print the result for each test case on a new line.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the watering pattern for each test case.\",\n    \"For each test case, simulate the growth of the flower day by day, updating its height according to the rules provided.\",\n    \"Check for the condition where the flower dies and handle it appropriately.\",\n    \"Store the final height or death status for each test case.\",\n    \"Output the results for all test cases in the specified format.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around simulating the growth of a flower based on specific watering conditions over a series of days.\n\n# [phrase showing quantity relationship]\n    'two days in a row': If the flower isn't watered for two consecutive days, it dies.\n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm.\n    'grows by 5 centimeters': If watered on consecutive days, the flower grows by 5 cm on the second day.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for checking if the flower dies and updating the height based on watering should be implemented simultaneously. Specifically, while iterating over the days, you should check for consecutive days without water and update the height based on the watering pattern in a single loop.\n\n# [edge case]\n    1. Input: 1, 0 = 1\n       Explanation: The flower is not watered on the only day, so it remains at its initial height of 1 cm.\n    2. Input: 2, 0 0 = -1\n       Explanation: The flower is not watered for two consecutive days, so it dies.\n    3. Input: 3, 1 1 1 = 12\n       Explanation: The flower is watered on three consecutive days, growing by 1 cm on the first day, and by 5 cm on the second and third days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking consecutive days without water and updating the height based on the watering pattern will naturally handle these cases.\n\nNO", "Round_0": {"code": "def flower_growth_simulation():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        watering_days = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        consecutive_unwatered_days = 0\n        flower_died = False\n        \n        for i in range(n):\n            if watering_days[i] == 1:\n                if i > 0 and watering_days[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    flower_died = True\n                    break\n        \n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\nflower_growth_simulation()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 85)"}, "Round_1": {"code": "def flower_growth_simulation():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        watering_days = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        consecutive_unwatered_days = 0\n        flower_died = False\n        \n        for i in range(n):\n            if watering_days[i] == 1:\n                if i > 0 and watering_days[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    flower_died = True\n                    break\n        \n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\nflower_growth_simulation()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"details\": \"Read the number of test cases t. For each test case, read the integer n and the list of integers a representing whether the flower is watered on each day.\"\n    },\n    {\n      \"description\": \"Simulate the growth of the flower for each test case based on the watering pattern.\",\n      \"details\": \"Initialize the flower height to 1 cm. Iterate over the list of integers a for each test case and update the flower height according to the rules provided.\"\n    },\n    {\n      \"description\": \"Determine if the flower dies during the simulation.\",\n      \"details\": \"Check for any occurrence of two consecutive days without watering (two consecutive 0s in the list a). If found, the flower dies and the result for that test case is -1.\"\n    },\n    {\n      \"description\": \"Calculate the final height of the flower if it does not die.\",\n      \"details\": \"If the flower survives, calculate the final height based on the watering rules: +1 cm for a single watered day, +5 cm for consecutive watered days.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, output the final height of the flower or -1 if the flower dies.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases t.\",\n    \"For each test case, perform the following steps:\",\n    \"  a. Read the integer n and the list of integers a.\",\n    \"  b. Initialize the flower height to 1 cm.\",\n    \"  c. Iterate over the list a to simulate the growth of the flower:\",\n    \"     i. If two consecutive 0s are found, set the result to -1 and break the loop.\",\n    \"     ii. If a[i] is 1 and a[i-1] is 1, increase the height by 5 cm.\",\n    \"     iii. If a[i] is 1 and a[i-1] is 0, increase the height by 1 cm.\",\n    \"  d. If the flower does not die, output the final height.\",\n    \"Output the result for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around simulating the growth of a flower based on specific watering rules over a series of days.\n\n# [phrase showing quantity relationship]\n    'two days in a row': This indicates a sequence of two consecutive days. In code, this can be checked using a loop to see if two consecutive elements in the list are both 0.\n    'grows by 1 centimeter': This means the flower's height increases by 1 cm when watered on a single day.\n    'grows by 5 centimeters': This means the flower's height increases by 5 cm when watered on two consecutive days.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps for checking if the flower dies and updating the height should be implemented simultaneously. Specifically, while iterating through the list to simulate growth, you should also check for two consecutive days without watering. This can be done in a single loop.\n\n# [edge case] \n    Test case: 1\n    Input: 1\n           0\n    Output: 1\n    Explanation: The flower starts at 1 cm and is not watered, but it doesn't die because there's only one day.\n\n    Test case: 2\n    Input: 2\n           0 0\n    Output: -1\n    Explanation: The flower dies because it is not watered for two consecutive days.\n\n    Test case: 3\n    Input: 3\n           1 1 0\n    Output: 7\n    Explanation: The flower grows by 5 cm on the second day (two consecutive watered days) and remains the same on the third day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking for two consecutive zeros and updating the height based on the watering pattern will handle these cases.\n\nNO", "Round_0": {"code": "def flower_growth_simulation():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        flower_dies = False\n        \n        for i in range(n):\n            if i > 0 and a[i] == 0 and a[i - 1] == 0:\n                flower_dies = True\n                break\n            if a[i] == 1:\n                if i > 0 and a[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n        \n        if flower_dies:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\nflower_growth_simulation()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 74)"}, "Round_1": {"code": "def flower_growth_simulation():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        flower_dies = False\n        \n        for i in range(n):\n            if i > 0 and a[i] == 0 and a[i - 1] == 0:\n                flower_dies = True\n                break\n            if a[i] == 1:\n                if i > 0 and a[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n        \n        if flower_dies:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\nflower_growth_simulation()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the number of test cases, t.\",\n        \"For each test case, read the integer n representing the number of days.\",\n        \"Read the sequence of integers a_1, a_2, ..., a_n representing whether the flower is watered each day.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the growth of the flower over n days for each test case.\",\n      \"steps\": [\n        \"Initialize the flower's height to 1 centimeter at the start of the first day.\",\n        \"Iterate over each day in the sequence:\",\n        \"If the flower is watered (a_i = 1), check if it was watered the previous day (a_(i-1) = 1).\",\n        \"If watered consecutively, increase the height by 5 centimeters.\",\n        \"If watered but not consecutively, increase the height by 1 centimeter.\",\n        \"If not watered (a_i = 0), check if it was not watered the previous day (a_(i-1) = 0).\",\n        \"If not watered consecutively for two days, mark the flower as dead.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the final height of the flower or if it died.\",\n      \"steps\": [\n        \"If the flower is marked as dead, output -1 for that test case.\",\n        \"Otherwise, output the final height of the flower after n days.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, simulate the growth of the flower over n days based on the watering pattern.\",\n    \"Determine the final height of the flower or if it died, and output the result for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around simulating the growth of a flower based on watering patterns over a series of days.\n\n# [phrase showing quantity relationship]\n    'two days in a row': This indicates a consecutive sequence of days. In code, this can be implemented by checking if two consecutive elements in the list are both 0.\n    'grows by 1 centimeter': This means the flower's height increases by 1 unit when watered on a single day. In code, this can be implemented by incrementing the height variable by 1.\n    'grows by 5 centimeters': This means the flower's height increases by 5 units when watered on consecutive days. In code, this can be implemented by incrementing the height variable by 5.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps related to checking the watering pattern and updating the flower's height should be implemented simultaneously. Specifically:\n    - \"If the flower is watered (a_i = 1), check if it was watered the previous day (a_(i-1) = 1).\"\n    - \"If watered consecutively, increase the height by 5 centimeters.\"\n    - \"If watered but not consecutively, increase the height by 1 centimeter.\"\n    These can be implemented in a single loop with conditional checks.\n\n# [edge case] \n    Test case: 1\n    Input: 1 0\n    Expected output: 1\n    Explanation: The flower is not watered on the only day, but it doesn't die because it hasn't been two consecutive days without water.\n    \n    Test case: 2\n    Input: 2 0 0\n    Expected output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n    \n    Test case: 3\n    Input: 3 1 1 0\n    Expected output: 6\n    Explanation: The flower is watered on the first two days consecutively, growing by 5 cm, and not watered on the third day, growing by 1 cm on the first day.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Specifically, we need to check for consecutive days without watering and mark the flower as dead if this occurs.\n    ```python\n    height = 1\n    dead = False\n    for i in range(n", "Round_0": {"code": "def flower_growth_simulation():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        dead = False\n        \n        for i in range(n):\n            if a[i] == 1:\n                if i > 0 and a[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n            else:\n                if i > 0 and a[i - 1] == 0:\n                    dead = True\n                    break\n        \n        if dead:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the number of test cases, t.\",\n        \"For each test case, read the integer n and the list of integers representing whether the flower is watered each day.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the growth of the flower for each test case based on the watering pattern.\",\n      \"steps\": [\n        \"Initialize the flower height to 1 centimeter at the start of each test case.\",\n        \"Iterate over the days and update the flower's height based on the watering pattern.\",\n        \"Check if the flower dies due to not being watered for two consecutive days.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the final height of the flower or if it dies for each test case.\",\n      \"steps\": [\n        \"If the flower dies, set the result for that test case to -1.\",\n        \"Otherwise, record the final height of the flower after n days.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for all test cases.\",\n      \"steps\": [\n        \"Print the result for each test case on a new line.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to get the number of test cases and the watering pattern for each test case.\",\n    \"For each test case, simulate the growth of the flower day by day.\",\n    \"Check for the condition where the flower dies and handle it appropriately.\",\n    \"Calculate the final height of the flower if it does not die.\",\n    \"Output the results for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around simulating the growth of a flower based on whether it is watered or not over a series of days. The flower's growth is affected by consecutive watering and lack of watering.\n\n# [phrase showing quantity relationship]\n    'two days in a row': If the flower isn't watered for two consecutive days, it dies. This can be implemented by checking if two consecutive elements in the list are 0.\n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm. Implemented by adding 1 to the height.\n    'grows by 5 centimeters': If watered on consecutive days, the flower grows by 5 cm instead of 1. Implemented by adding 5 to the height if two consecutive days are watered.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for checking if the flower dies and updating the height based on watering should be implemented simultaneously. Specifically, while iterating over the days, you should check for consecutive watering and non-watering conditions in the same loop to update the height or determine if the flower dies.\n\n# [edge case]\n    1. Input: 1 0\n       Output: 1\n       Explanation: With only one day and no watering, the flower remains at its initial height of 1 cm.\n    2. Input: 2 0 0\n       Output: -1\n       Explanation: The flower is not watered for two consecutive days, so it dies.\n    3. Input: 3 1 1 1\n       Output: 11\n       Explanation: The flower is watered every day, growing by 1 cm on the first day and 5 cm on the second and third days (total growth: 1 + 5 + 5 = 11 cm).\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the flower dies due to not being watered for two consecutive days.\n    ```python\n    for test_case in test_cases:\n        height = 1\n        consecutive_unwatered_days = 0\n        for day in test_case:\n            if day == 1:\n                if consecutive_unwatered_days == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwater", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        days = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        consecutive_unwatered_days = 0\n        flower_died = False\n        \n        for i in range(n):\n            if days[i] == 1:\n                if i > 0 and days[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    flower_died = True\n                    break\n        \n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the number of test cases, t.\",\n        \"For each test case, read the integer n representing the number of days.\",\n        \"Read the sequence of integers a_1, a_2, ..., a_n representing whether the flower is watered each day.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the growth of the flower for each test case based on the watering pattern.\",\n      \"steps\": [\n        \"Initialize the flower height to 1 centimeter at the start of each test case.\",\n        \"Iterate over the sequence of days:\",\n        \"If the flower is watered (a_i = 1), check if it was watered the previous day (a_(i-1) = 1) to determine growth (5 cm if consecutive, otherwise 1 cm).\",\n        \"If the flower is not watered (a_i = 0), check if it was not watered the previous day (a_(i-1) = 0) to determine if the flower dies (-1).\",\n        \"Update the flower height accordingly.\"\n      ]\n    },\n    {\n      \"description\": \"Output the final height of the flower for each test case.\",\n      \"steps\": [\n        \"For each test case, print the final height of the flower or -1 if the flower dies.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, simulate the growth of the flower based on the watering pattern.\",\n    \"Output the final height of the flower for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around simulating the growth of a flower based on a sequence of watering days. The flower's growth is determined by whether it is watered on consecutive days or not watered at all.\n\n# [phrase showing quantity relationship]\n    'two days in a row': If the flower isn't watered for two consecutive days, it dies.\n    Implementation: Check for two consecutive zeros in the sequence.\n    \n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm.\n    Implementation: Increment height by 1 if a_i = 1 and a_(i-1) \u2260 1.\n    \n    'grows by 5 centimeters': If watered on consecutive days, the flower grows by 5 cm.\n    Implementation: Increment height by 5 if a_i = 1 and a_(i-1) = 1.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for checking if the flower is watered and updating the height should be implemented simultaneously within the loop iterating over the days. Specifically, the logic for determining growth (1 cm or 5 cm) and checking for death (two consecutive days without water) should be handled in the same iteration block.\n\n# [edge case]\n    Test case: 1\n    Input: 0\n    Expected output: 1\n    Explanation: The flower is not watered on the only day, but it doesn't die because it needs two consecutive days without water to die.\n\n    Test case: 2\n    Input: 1 0 0\n    Expected output: -1\n    Explanation: The flower is watered on the first day but not on the next two consecutive days, so it dies.\n\n    Test case: 3\n    Input: 1 1 0 1\n    Expected output: 8\n    Explanation: The flower grows by 5 cm on the second day (consecutive watering), does not grow on the third day, and grows by 1 cm on the fourth day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking consecutive zeros and updating height based on watering conditions will handle these cases correctly.\n\nNO", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        dead = False\n        \n        for i in range(n):\n            if a[i] == 1:\n                if i > 0 and a[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n            else:\n                if i > 0 and a[i - 1] == 0:\n                    dead = True\n                    break\n        \n        if dead:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 2 were given"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        dead = False\n        \n        for i in range(n):\n            if a[i] == 1:\n                if i > 0 and a[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n            else:\n                if i > 0 and a[i - 1] == 0:\n                    dead = True\n                    break\n        \n        if dead:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the number of test cases, t.\",\n        \"For each test case, read the integer n and the list of integers representing whether the flower is watered each day.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the growth of the flower for each test case based on the watering pattern.\",\n      \"steps\": [\n        \"Initialize the flower height to 1 centimeter at the start of each test case.\",\n        \"Iterate over the days and update the flower's height based on the watering pattern.\",\n        \"Check if the flower dies due to not being watered for two consecutive days.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the final height of the flower or if it dies for each test case.\",\n      \"steps\": [\n        \"If the flower dies, set the result for that test case to -1.\",\n        \"Otherwise, record the final height of the flower after n days.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for all test cases.\",\n      \"steps\": [\n        \"Print the result for each test case on a new line.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to get the number of test cases and the watering pattern for each test case.\",\n    \"For each test case, simulate the growth of the flower day by day.\",\n    \"Check for the condition where the flower dies and update the height accordingly.\",\n    \"Store the result for each test case, either the final height or -1 if the flower dies.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    The requirement revolves around simulating the growth of a flower based on specific watering patterns over a number of days.\n\n    'watering pattern'\n    The sequence of days on which the flower is watered (represented by 1) or not watered (represented by 0).\n\n# [phrase showing quantity relationship]\n    'two days in a row': If the flower isn't watered for two consecutive days, it dies. This can be implemented by checking if two consecutive elements in the list are 0.\n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm. Implemented by incrementing the height by 1.\n    'grows by 5 centimeters': If watered on consecutive days, the flower grows by 5 cm. Implemented by checking if both the current and previous day are watered, then incrementing the height by 5.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps related to simulating the growth of the flower should be implemented simultaneously:\n    - \"Initialize the flower height to 1 centimeter at the start of each test case.\"\n    - \"Iterate over the days and update the flower's height based on the watering pattern.\"\n    - \"Check if the flower dies due to not being watered for two consecutive days.\"\n    These can be implemented in a single loop that iterates over the days, updating the height and checking for death conditions.\n\n# [edge case] \n    Test case with all days watered: [1, 1, 1, 1] = 21\n    Explanation: The flower grows by 5 cm each day after the first, resulting in a total height of 21 cm.\n    \n    Test case with no days watered: [0, 0, 0, 0] = -1\n    Explanation: The flower dies after the first two days of not being watered.\n    \n    Test case with alternating days watered: [1, 0, 1, 0] = 3\n    Explanation: The flower grows by 1 cm on the first and third days, resulting in a total height of 3 cm.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the flower dies.\n        if n == 1 and a[0] == 0:\n            return -1\n        height = 1\n        for i in range(n):\n", "Round_0": {"code": "def flower_growth():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n == 1 and a[0] == 0:\n            results.append(-1)\n            continue\n        \n        height = 1\n        consecutive_unwatered_days = 0\n        \n        for i in range(n):\n            if a[i] == 1:\n                if i > 0 and a[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    height = -1\n                    break\n        \n        results.append(height)\n    \n    for result in results:\n        print(result)\n\nflower_growth()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def flower_growth():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n == 1 and a[0] == 0:\n            results.append(-1)\n            continue\n        \n        height = 1\n        consecutive_unwatered_days = 0\n        \n        for i in range(n):\n            if a[i] == 1:\n                if i > 0 and a[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    height = -1\n                    break\n        \n        results.append(height)\n    \n    for result in results:\n        print(result)\n\nflower_growth()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the number of test cases, t.\",\n        \"For each test case, read the integer n and the list of integers representing whether the flower is watered each day.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the growth of the flower for each test case based on the watering pattern.\",\n      \"steps\": [\n        \"Initialize the flower height to 1 centimeter at the start of each test case.\",\n        \"Iterate over the days and update the flower height based on the watering pattern.\",\n        \"Check if the flower dies due to not being watered for two consecutive days.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the final height of the flower or if it dies for each test case.\",\n      \"steps\": [\n        \"If the flower dies, set the result for that test case to -1.\",\n        \"Otherwise, set the result to the final height of the flower.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for all test cases.\",\n      \"steps\": [\n        \"Print the result for each test case on a new line.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, initialize the flower height and simulate its growth based on the watering pattern.\",\n    \"Check for conditions where the flower dies and update the result accordingly.\",\n    \"Output the final height or death status for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around simulating the growth of a flower based on whether it is watered or not over a series of days. The flower's growth is affected by consecutive watering and non-watering days.\n\n# [phrase showing quantity relationship]\n    'two days in a row': If the flower isn't watered for two consecutive days, it dies.\n    Implementation: Check for two consecutive zeros in the list of days.\n    \n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm.\n    Implementation: Increment height by 1 if the current day is watered.\n    \n    'grows by 5 centimeters': If watered on consecutive days, the flower grows by 5 cm on the second day.\n    Implementation: Increment height by 5 if both the current and previous days are watered.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for checking if the flower dies and updating the height based on watering should be implemented simultaneously. Specifically, while iterating over the days, you should check for consecutive zeros to determine if the flower dies and update the height based on the watering pattern in the same loop.\n\n# [edge case]\n    Test case: 1\n    Input: 1 0\n    Expected output: 1\n    Explanation: The flower is not watered on the only day, but it doesn't die because it needs two consecutive days of not being watered to die.\n\n    Test case: 2\n    Input: 2 0 0\n    Expected output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Test case: 3\n    Input: 3 1 1 0\n    Expected output: 6\n    Explanation: The flower is watered on the first two days (grows by 1 cm on the first day and 5 cm on the second day), and not watered on the third day, so it doesn't die.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking for two consecutive zeros and updating the height based on the watering pattern will handle these cases correctly.\n\nNO", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        days = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        flower_dies = False\n        \n        for i in range(n):\n            if days[i] == 1:\n                if i > 0 and days[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n            else:\n                if i > 0 and days[i - 1] == 0:\n                    flower_dies = True\n                    break\n        \n        if flower_dies:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the number of test cases, t.\",\n        \"For each test case, read the integer n representing the number of days.\",\n        \"For each test case, read the sequence of integers a_1, a_2, ..., a_n representing whether the flower is watered each day.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the growth of the flower over n days for each test case.\",\n      \"steps\": [\n        \"Initialize the flower's height to 1 centimeter at the start of the first day.\",\n        \"Iterate over each day in the sequence:\",\n        \"If the flower is watered (a_i = 1), check if it was watered the previous day (a_(i-1) = 1).\",\n        \"If watered consecutively, increase the height by 5 centimeters.\",\n        \"If watered but not consecutively, increase the height by 1 centimeter.\",\n        \"If the flower is not watered (a_i = 0), check if it was not watered the previous day (a_(i-1) = 0).\",\n        \"If not watered for two consecutive days, mark the flower as dead and set the height to -1.\"\n      ]\n    },\n    {\n      \"description\": \"Output the final height of the flower for each test case.\",\n      \"steps\": [\n        \"For each test case, print the final height of the flower.\",\n        \"If the flower died, print -1.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the sequence of days for each test case.\",\n    \"For each test case, simulate the growth of the flower over the given days based on the watering pattern.\",\n    \"Determine the final height of the flower or if it died, and output the result for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around simulating the growth of a flower based on whether it is watered or not over a series of days. The growth rules are specific and depend on consecutive watering days.\n\n# [phrase showing quantity relationship]\n    'two days in a row': If the flower isn't watered for two consecutive days, it dies.\n    Implementation: Check for two consecutive zeros in the input list.\n    \n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm.\n    Implementation: Increment height by 1 if a_i = 1 and a_(i-1) \u2260 1.\n    \n    'grows by 5 centimeters': If watered on consecutive days, the flower grows by 5 cm.\n    Implementation: Increment height by 5 if a_i = 1 and a_(i-1) = 1.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for checking if the flower is watered and updating the height should be implemented simultaneously. Specifically, the logic for checking consecutive watering and non-watering days should be handled in a single loop over the days.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, but it doesn't die because it needs two consecutive days of not being watered to die.\n\n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is watered on the first day but not on the next two consecutive days, so it dies.\n\n    Test case: [1, 1, 1, 1] = 16\n    Explanation: The flower is watered every day, with consecutive watering, so it grows by 5 cm each day after the first, resulting in a height of 1 + 5 + 5 + 5 = 16.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking consecutive zeros and updating height based on watering rules will handle these cases correctly.\n\nNO", "Round_0": {"code": "def flower_growth(test_cases):\n    results = []\n    for n, days in test_cases:\n        height = 1\n        consecutive_unwatered_days = 0\n        for i in range(n):\n            if days[i] == 1:\n                if i > 0 and days[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    height = -1\n                    break\n        results.append(height)\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        days = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, days))\n    \n    results = flower_growth(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"details\": \"Read the first line to get the number of test cases, t. For each test case, read the number of days, n, and the sequence of integers representing whether the flower is watered each day.\"\n    },\n    {\n      \"description\": \"Simulate the growth of the flower for each test case based on the watering pattern.\",\n      \"details\": \"Initialize the flower height to 1 cm. Iterate over the days and update the height based on the watering rules. If the flower is not watered for two consecutive days, mark it as dead.\"\n    },\n    {\n      \"description\": \"Determine the final height of the flower or if it is dead for each test case.\",\n      \"details\": \"After simulating the days, check if the flower is dead. If so, the result is -1. Otherwise, the result is the final height of the flower.\"\n    },\n    {\n      \"description\": \"Output the results for all test cases.\",\n      \"details\": \"For each test case, print the result (either the final height or -1 if the flower is dead).\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, perform the following steps:\",\n    \"  a. Read the number of days, n, and the sequence of integers representing watering days.\",\n    \"  b. Initialize the flower height to 1 cm.\",\n    \"  c. Iterate over the sequence of days:\",\n    \"     i. If the flower is watered on the current day, increase the height by 1 cm.\",\n    \"     ii. If the flower is watered on consecutive days, increase the height by an additional 4 cm (total 5 cm for that day).\",\n    \"     iii. If the flower is not watered for two consecutive days, mark the flower as dead and break the loop.\",\n    \"  d. After processing all days, check if the flower is dead. If so, set the result to -1. Otherwise, set the result to the final height.\",\n    \"Output the result for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around simulating the growth of a flower based on specific watering conditions over a series of days.\n\n# [phrase showing quantity relationship]\n    'two days in a row': If the flower isn't watered for two consecutive days, it dies.\n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm.\n    'grows by 5 centimeters': If watered on consecutive days, the flower grows by 5 cm on the second day.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    Steps 3.c.i and 3.c.ii should be implemented simultaneously. When iterating over the sequence of days, you need to check if the flower is watered on the current day and if it was watered on the previous day to determine the correct growth increment.\n\n# [edge case]\n    Test case: 1\n    Input: 1\n           0\n    Expected output: 1\n    Explanation: The flower starts at 1 cm and is not watered, but it doesn't die because it hasn't been two consecutive days without water.\n\n    Test case: 2\n    Input: 2\n           0 0\n    Expected output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Test case: 3\n    Input: 3\n           1 1 0\n    Expected output: 6\n    Explanation: The flower grows by 1 cm on the first day, 5 cm on the second day (since it's consecutive), and doesn't grow on the third day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking consecutive days and updating the height or marking the flower as dead will handle these cases correctly.\n\nYES", "Round_0": {"code": "def flower_growth_simulation():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        watering_days = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        consecutive_unwatered_days = 0\n        flower_dead = False\n        \n        for i in range(n):\n            if watering_days[i] == 1:\n                if i > 0 and watering_days[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    flower_dead = True\n                    break\n        \n        if flower_dead:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\nflower_growth_simulation()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def flower_growth_simulation():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        watering_days = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        consecutive_unwatered_days = 0\n        flower_dead = False\n        \n        for i in range(n):\n            if watering_days[i] == 1:\n                if i > 0 and watering_days[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    flower_dead = True\n                    break\n        \n        if flower_dead:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\nflower_growth_simulation()\n"}}], "scores": [], "pass_results": [true, false, true, false, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 9, "round": 357, "prompt": "Petya has got an interesting flower. Petya is a person who has many responsibilities and is often occupied with various tasks. As a result, he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n  \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "mutate_method": "expand_one2two", "save_node": false, "parent_index": 108}
