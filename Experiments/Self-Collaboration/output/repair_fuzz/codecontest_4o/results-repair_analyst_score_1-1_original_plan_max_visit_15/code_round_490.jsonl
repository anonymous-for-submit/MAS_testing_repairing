{"name": "1580_C. Train Maintenance", "description": "Kawasiro Nitori is excellent in engineering. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. In the beginning, there are no trains, at each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), then it is in maintenance for y_i days, then in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.", "tags": ["brute force", "data structures", "implementation"], "difficulty": 9, "id": 1580, "sample_io": [{"input": "3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}], "test_list": [{"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n10 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "3 4\n10 15\n12 10\n2 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "3 4\n23 15\n14 10\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n2 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n2 19\n7 19\n2 9\n26 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n5\n4\n3\n5\n7\n8\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n21 15\n7 3\n19 7\n1 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n2\n2\n2\n1\n2\n3\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n5\n4\n3\n5\n7\n8\n"]}, {"input": "5 2\n1 1\n10000011 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n1 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "10 7\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n8 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n8\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n3 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 2\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n0\n"]}, {"input": "20 7\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n4 9\n5 10\n657453515 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n3 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n"]}, {"input": "3 2\n9 15\n12 9\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n2 9\n14 19\n7 19\n2 9\n21 15\n7 3\n19 7\n1 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n2\n2\n2\n1\n3\n4\n4\n4\n4\n5\n5\n4\n3\n4\n6\n8\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 9\n2 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 2\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n3 9\n49 15\n7 6\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n6\n5\n6\n7\n7\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n1 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n14 9\n14 19\n7 19\n2 9\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n4\n3\n4\n7\n8\n"]}, {"input": "3 4\n16 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 15\n15 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 15\n10 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "3 4\n10 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000011 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 000000000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "3 4\n9 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n9 15\n12 1\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 0\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n733475792 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n13 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n467159628 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 8\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000001 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1258790837 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n26 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 0\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000011 100000000\n998244353 1\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n9 15\n12 0\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n21 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n13 15\n14 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n369260158 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n16 16\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n26 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n16 6\n2 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n23 15\n14 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n2 1\n10000001 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n2 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n450441171 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000101 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 7\n15 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "3 4\n16 15\n10 17\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000011 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000011 000000000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n9 15\n12 9\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 -1\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 241782432\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n2 1\n1 5\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 801909796\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n5 15\n12 10\n2 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "5 4\n1 1\n10000000 100000001\n733475792 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 8\n12 18\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10001011 100000000\n998244353 1\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n2 1\n10000011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n1166046831 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n26 15\n10 17\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000011 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000011 000000000\n998244353 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1425917046 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 241782432\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 11\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "20 20\n1 4\n864803385 801909796\n17 4\n12 1\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "5 4\n1 1\n10000000 100000001\n733475792 1\n2 2\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "3 4\n16 8\n12 25\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 2\n10000011 100000000\n998244353 0\n2 2\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1011185365 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000001\n733475792 0\n2 2\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 2\n1 1\n", "output": ["0\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n211018821 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n211018821 0\n3 1\n2 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "5 4\n3 1\n10000011 101000000\n211018821 0\n3 1\n2 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n4 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "3 4\n14 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 1\n2 1\n1 3\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 15\n12 15\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 0\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n14 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000011 000000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 1\n9 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n"]}, {"input": "5 4\n1 1\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n9 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n10 18\n12 10\n2 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n733475792 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n22 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 0\n430995384 733598623\n2 9\n5 13\n433415385 169535970\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n9 6\n752625088 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1258790837 0\n3 0\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 173113793\n3 10\n16 6\n2 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n2 2\n10000001 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n9 6\n450441171 733598623\n2 9\n3 10\n433415385 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n16 21\n10 17\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n9 6\n12 9\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1683854825 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 241782432\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 38795044\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n2 1\n1 10\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 0\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "3 4\n16 12\n12 18\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n4 1\n10000011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n1908812372 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n2 1\n", "output": ["0\n"]}, {"input": "5 4\n3 1\n10010011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 2\n10000011 100000000\n998244353 0\n2 4\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 2\n1 2\n", "output": ["0\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n211018821 0\n4 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n3 1\n10000011 101000000\n211018821 0\n3 1\n2 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n4 29\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "3 4\n14 15\n12 13\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 1\n3 1\n1 3\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n2 1\n10000001 100000000\n998244353 0\n2 0\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n14 15\n10 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "3 1\n9 15\n12 9\n2 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n"]}, {"input": "5 4\n1 1\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 0\n430995384 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n9 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n2 2\n10000001 100000000\n1258790837 0\n5 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n5\n4\n3\n5\n7\n8\n"]}, {"input": "5 2\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n"]}, {"input": "3 4\n16 21\n10 17\n2 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1683854825 0\n3 1\n2 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n4 1\n1 10\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "5 1\n1 0\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n3 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "3 4\n16 12\n12 22\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000000 100000000\n1908812372 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000101 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n2 1\n", "output": ["0\n"]}, {"input": "5 1\n1 1\n10000101 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 2\n1 2\n", "output": ["0\n"]}, {"input": "3 1\n9 15\n12 9\n2 2\n1 3\n1 1\n1 1\n2 3\n", "output": ["0\n"]}, {"input": "5 4\n1 0\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n0 0\n430995384 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 2\n1 1\n10000000 100010000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n"]}, {"input": "10 7\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 1\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 9\n2 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "3 4\n1 12\n12 22\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000000 100000000\n1908812372 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n2 1\n10000101 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n2 1\n", "output": ["0\n"]}, {"input": "3 1\n9 15\n12 9\n2 4\n1 3\n1 1\n1 1\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n0 0\n140846265 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 9\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n8\n"]}, {"input": "5 2\n1 2\n10000000 100010000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n"]}, {"input": "10 7\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 1\n2 9\n1 1\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 13\n2 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n12 9\n2 4\n1 3\n1 1\n0 1\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n-1 0\n140846265 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 7\n3 10\n9 6\n529113291 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 1\n2 9\n1 1\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "3 1\n9 15\n12 9\n2 4\n1 3\n1 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 7\n3 10\n-1 0\n140846265 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n17 2\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n292159474 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n3 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n7\n"]}, {"input": "3 1\n9 15\n12 11\n2 4\n1 3\n1 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 2\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n12 11\n2 4\n1 3\n0 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 1\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n12 11\n4 4\n1 3\n0 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 1\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 6\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n16 11\n4 4\n1 3\n0 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 0\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 6\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 -1\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 6\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 2\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n0 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n2 1\n10000001 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}], "task_id": "codecontest/22", "repair_prompt": ["Kawasiro Nitori is excellent in engineering. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. At the beginning, there are no trains present in the department. At each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), then it is in maintenance for y_i days, then in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Kawasiro Nitori is excellent in engineering. Due to her expertise, she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. At the beginning, there are no trains present in the department. At each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), then it is in maintenance for y_i days, then in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Kawasiro Nitori is excellent in engineering. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment, and at the beginning, there are no trains present in the department. At each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), then it is in maintenance for y_i days, then in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    work_maintenance_periods = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        work_maintenance_periods.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # Initialize train states\n    train_states = {}\n    maintenance_count = [0] * m\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            x_i, y_i = work_maintenance_periods[k]\n            train_states[k] = {'cycle_day': 0, 'x_i': x_i, 'y_i': y_i}\n        \n        elif op == 2:  # Remove train\n            if k in train_states:\n                del train_states[k]\n        \n        # Calculate maintenance count for the current day\n        count = 0\n        for state in train_states.values():\n            cycle_length = state['x_i'] + state['y_i']\n            current_cycle_day = state['cycle_day'] % cycle_length\n            if current_cycle_day >= state['x_i']:\n                count += 1\n            state['cycle_day'] += 1\n        \n        maintenance_count[day] = count\n    \n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    work_maintenance = []\n    index = 2\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        work_maintenance.append((x_i, y_i))\n        index += 2\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to 0-based index\n        operations.append((op, k))\n        index += 2\n    \n    # State of trains: (day added, current cycle day)\n    train_state = [None] * n\n    maintenance_count = [0] * m\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            train_state[k] = (day, 0)\n        elif op == 2:  # Remove train\n            train_state[k] = None\n        \n        # Calculate maintenance count for the current day\n        count = 0\n        for i in range(n):\n            if train_state[i] is not None:\n                day_added, cycle_day = train_state[i]\n                x_i, y_i = work_maintenance[i]\n                \n                # Calculate the total cycle length\n                cycle_length = x_i + y_i\n                \n                # Determine the current cycle day\n                current_cycle_day = (day - day_added) % cycle_length\n                \n                # Check if the train is in maintenance\n                if current_cycle_day >= x_i:\n                    count += 1\n        \n        maintenance_count[day] = count\n    \n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    work_maintenance = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        work_maintenance.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # Initialize the status of each train model\n    train_status = [None] * n  # None means no train of this model is present\n    results = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = work_maintenance[k]\n            train_status[k] = (0, x_i, y_i)  # (current_day_in_cycle, work_days, maintenance_days)\n        \n        elif op == 2:  # Remove train of model k\n            train_status[k] = None\n        \n        # Count trains in maintenance\n        current_maintenance_count = 0\n        for i in range(n):\n            if train_status[i] is not None:\n                current_day_in_cycle, x_i, y_i = train_status[i]\n                if current_day_in_cycle >= x_i:  # In maintenance\n                    current_maintenance_count += 1\n        \n        results.append(current_maintenance_count)\n        \n        # Update the cycle day for each train\n        for i in range(n):\n            if train_status[i] is not None:\n                current_day_in_cycle, x_i, y_i = train_status[i]\n                total_cycle = x_i + y_i\n                train_status[i] = ((current_day_in_cycle + 1) % total_cycle, x_i, y_i)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    x = []\n    y = []\n    \n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        x.append(x_i)\n        y.append(y_i)\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index])\n        index += 1\n        operations.append((op, k))\n    \n    train_states = {}\n    maintenance_count = [0] * m\n    \n    for day in range(m):\n        op, k = operations[day]\n        if op == 1:  # Add train\n            train_states[k] = {'working_days': x[k-1], 'maintenance_days': y[k-1], 'current_state': 'working', 'days_in_current_state': 0}\n        elif op == 2:  # Remove train\n            if k in train_states:\n                del train_states[k]\n        \n        # Update train states\n        maintenance_today = 0\n        for model in train_states:\n            train = train_states[model]\n            train['days_in_current_state'] += 1\n            \n            if train['current_state'] == 'working':\n                if train['days_in_current_state'] == train['working_days']:\n                    train['current_state'] = 'maintenance'\n                    train['days_in_current_state'] = 0\n            elif train['current_state'] == 'maintenance':\n                maintenance_today += 1\n                if train['days_in_current_state'] == train['maintenance_days']:\n                    train['current_state'] = 'working'\n                    train['days_in_current_state'] = 0\n        \n        maintenance_count[day] = maintenance_today\n    \n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    m = int(data[index + 1])\n    index += 2\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        train_cycles.append((x_i, y_i))\n        index += 2\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to 0-based index\n        operations.append((op, k))\n        index += 2\n    \n    # State of each train model: (is_present, current_cycle_day)\n    train_state = [None] * n\n    maintenance_count = 0\n    \n    results = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = train_cycles[k]\n            train_state[k] = (True, 1)  # Start with day 1 of the cycle\n        elif op == 2:  # Remove train of model k\n            if train_state[k] is not None:\n                is_present, current_cycle_day = train_state[k]\n                if is_present:\n                    x_i, y_i = train_cycles[k]\n                    # Check if it was in maintenance\n                    if current_cycle_day > x_i:\n                        maintenance_count -= 1\n                train_state[k] = None\n        \n        # Update maintenance count\n        current_maintenance_count = 0\n        for i in range(n):\n            if train_state[i] is not None:\n                is_present, current_cycle_day = train_state[i]\n                if is_present:\n                    x_i, y_i = train_cycles[i]\n                    if current_cycle_day > x_i:\n                        current_maintenance_count += 1\n                    # Update the cycle day\n                    total_cycle = x_i + y_i\n                    train_state[i] = (True, (current_cycle_day % total_cycle) + 1)\n        \n        results.append(current_maintenance_count)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    work_maintenance = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        work_maintenance.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # State of each train model\n    train_state = [None] * n  # None means not in department, otherwise (cycle_type, days_left)\n    \n    # Result for each day\n    result = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        # Update the state of each train\n        maintenance_count = 0\n        for i in range(n):\n            if train_state[i] is not None:\n                cycle_type, days_left = train_state[i]\n                days_left -= 1\n                if days_left == 0:\n                    if cycle_type == 'work':\n                        train_state[i] = ('maintenance', work_maintenance[i][1])\n                    else:\n                        train_state[i] = ('work', work_maintenance[i][0])\n                else:\n                    train_state[i] = (cycle_type, days_left)\n                \n                if train_state[i][0] == 'maintenance':\n                    maintenance_count += 1\n        \n        # Process the operation of the day\n        if op == 1:  # Add train\n            train_state[k] = ('work', work_maintenance[k][0])\n        elif op == 2:  # Remove train\n            train_state[k] = None\n        \n        # On the day a train is removed, it is not counted as in maintenance\n        if op == 2 and train_state[k] is not None and train_state[k][0] == 'maintenance':\n            maintenance_count -= 1\n        \n        result.append(maintenance_count)\n    \n    # Output the result for each day\n    for count in result:\n        print(count)\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    train_cycles = []\n    index = 2\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        train_cycles.append((x_i, y_i))\n        index += 2\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to zero-based index\n        operations.append((op, k))\n        index += 2\n    \n    # Initialize train status\n    train_status = [None] * n  # None means no train of that model is present\n    \n    # Result list to store the number of trains in maintenance each day\n    result = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = train_cycles[k]\n            train_status[k] = (0, x_i, y_i)  # (current day in cycle, work days, maintenance days)\n        \n        elif op == 2:  # Remove train of model k\n            train_status[k] = None\n        \n        # Calculate number of trains in maintenance\n        maintenance_count = 0\n        for status in train_status:\n            if status is not None:\n                current_day, x_i, y_i = status\n                # Check if the train is in maintenance\n                if current_day >= x_i:\n                    maintenance_count += 1\n                # Update the cycle day\n                status = (current_day + 1, x_i, y_i)\n                if status[0] >= x_i + y_i:\n                    status = (0, x_i, y_i)\n        \n        result.append(maintenance_count)\n    \n    # Print the result for each day\n    for count in result:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    m = int(data[index + 1])\n    index += 2\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        train_cycles.append((x_i, y_i))\n        index += 2\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to 0-based index\n        operations.append((op, k))\n        index += 2\n    \n    # Initialize the state of each train model\n    train_status = [None] * n  # None means no train of this model is present\n    maintenance_count = 0\n    results = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = train_cycles[k]\n            train_status[k] = (0, x_i, y_i)  # (current_day_in_cycle, x_i, y_i)\n        \n        elif op == 2:  # Remove train of model k\n            if train_status[k] is not None:\n                current_day_in_cycle, x_i, y_i = train_status[k]\n                if current_day_in_cycle >= x_i:\n                    maintenance_count -= 1\n                train_status[k] = None\n        \n        # Update maintenance count\n        for i in range(n):\n            if train_status[i] is not None:\n                current_day_in_cycle, x_i, y_i = train_status[i]\n                if current_day_in_cycle >= x_i and current_day_in_cycle < x_i + y_i:\n                    if current_day_in_cycle == x_i:\n                        maintenance_count += 1\n                elif current_day_in_cycle == x_i + y_i:\n                    maintenance_count -= 1\n                \n                # Update the cycle day\n                current_day_in_cycle = (current_day_in_cycle + 1) % (x_i + y_i)\n                train_status[i] = (current_day_in_cycle, x_i, y_i)\n        \n        results.append(maintenance_count)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    m = int(data[index + 1])\n    index += 2\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        train_cycles.append((x_i, y_i))\n        index += 2\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to 0-based index\n        operations.append((op, k))\n        index += 2\n    \n    # Initialize data structures\n    train_states = {}  # To track the state of each train model\n    maintenance_count = [0] * m  # To store the number of trains in maintenance each day\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            train_states[k] = 0  # Start its cycle at day 0\n        \n        elif op == 2:  # Remove train\n            if k in train_states:\n                del train_states[k]\n        \n        # Calculate the number of trains in maintenance\n        count_in_maintenance = 0\n        for model, start_day in train_states.items():\n            x_i, y_i = train_cycles[model]\n            # Calculate the current cycle day\n            current_day = day - start_day\n            cycle_length = x_i + y_i\n            # Determine if the train is in maintenance\n            if current_day % cycle_length >= x_i:\n                count_in_maintenance += 1\n        \n        maintenance_count[day] = count_in_maintenance\n    \n    # Output the maintenance count for each day\n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    # Read train model work and maintenance periods\n    train_cycles = []\n    index = 2\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        train_cycles.append((x_i, y_i))\n        index += 2\n    \n    # Read operations\n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to 0-based index\n        operations.append((op, k))\n        index += 2\n    \n    # Initialize state tracking\n    train_states = [None] * n  # None means no train of this model is present\n    maintenance_count = 0\n    result = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_k, y_k = train_cycles[k]\n            train_states[k] = (day, x_k, y_k)  # Store the start day and cycle lengths\n        elif op == 2:  # Remove train of model k\n            train_states[k] = None\n        \n        # Calculate maintenance count for the current day\n        maintenance_count = 0\n        for state in train_states:\n            if state is not None:\n                start_day, x_k, y_k = state\n                cycle_length = x_k + y_k\n                days_since_start = day - start_day\n                \n                # Determine if the train is in maintenance\n                if days_since_start >= x_k:\n                    cycle_position = days_since_start % cycle_length\n                    if cycle_position >= x_k:\n                        maintenance_count += 1\n        \n        result.append(maintenance_count)\n    \n    # Output the result\n    for count in result:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    work_maintenance_periods = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        work_maintenance_periods.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # Initialize train states\n    train_states = {}\n    maintenance_count = [0] * m\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            x_i, y_i = work_maintenance_periods[k]\n            train_states[k] = {'cycle_day': 0, 'x_i': x_i, 'y_i': y_i}\n        \n        elif op == 2:  # Remove train\n            if k in train_states:\n                del train_states[k]\n        \n        # Calculate maintenance count for the current day\n        count = 0\n        for state in train_states.values():\n            cycle_length = state['x_i'] + state['y_i']\n            current_cycle_day = state['cycle_day'] % cycle_length\n            if current_cycle_day >= state['x_i']:\n                count += 1\n            state['cycle_day'] += 1\n        \n        maintenance_count[day] = count\n    \n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), the work and maintenance periods for each train model, and the operations for each day.\",\n      \"steps\": [\n        \"Read the first line to get n and m.\",\n        \"Read the next n lines to get the work (x_i) and maintenance (y_i) periods for each train model.\",\n        \"Read the next m lines to get the operations (op, k) for each day.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the addition and removal of trains over the m days, keeping track of their work and maintenance cycles.\",\n      \"steps\": [\n        \"Initialize a data structure to keep track of the current state of each train model (whether it is present and its current cycle).\",\n        \"For each day, perform the operation specified (add or remove a train) and update the state of the trains accordingly.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"For each day, iterate over the current state of all train models.\",\n        \"Determine if each train is in its maintenance period based on its cycle and the current day.\",\n        \"Count the number of trains in maintenance and store the result for that day.\"\n      ]\n    },\n    {\n      \"description\": \"Output the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"Iterate over the stored results for each day.\",\n        \"Print the number of trains in maintenance for each day.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data.\",\n    \"Initialize data structures to track train states and cycles.\",\n    \"Iterate over each day, updating train states based on operations.\",\n    \"For each day, calculate the number of trains in maintenance.\",\n    \"Output the results for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maintenance'\n    Explanation: In the context of the requirement, maintenance refers to the period during which a train is not operational and is being serviced. The train alternates between working and maintenance periods.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': This means that there can be zero or one train of each model at any given time.\n    '1 \u2264 n,m \u2264 2 \u22c5 10^5': This indicates the maximum number of train models and days, which affects the scalability of the solution.\n    '1 \u2264 x_i,y_i \u2264 10^9': This indicates the range for the work and maintenance periods, which affects the calculation of cycles.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they build upon each other. However, within the simulation of train addition and removal, the update of train states and the calculation of maintenance status can be done simultaneously for efficiency.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: Only one train is added and it starts working immediately, so no train is in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           1 2\n    Output: 0\n            0\n    Explanation: Both trains are added and start working immediately, so no train is in maintenance.\n\n    Input: 1 3\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n            0\n    Explanation: The train is added, works for one day, and then is removed before it can enter maintenance.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where trains are added and removed before entering maintenance.\n    Code for handling the edge case:\n    ```python\n    if op == 1:  # Add train\n        # Initialize train state and cycle\n        train_states[k] = {'cycle_day': 0, 'in_maintenance': False}\n    elif op == 2:  # Remove train\n        # Remove train state\n        if k in train_states:\n            del train_states[k]\n    ```\n\nYES", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    work_maintenance_periods = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        work_maintenance_periods.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # Initialize train states\n    train_states = {}\n    maintenance_count = [0] * m\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            x_i, y_i = work_maintenance_periods[k]\n            train_states[k] = {'cycle_day': 0, 'x_i': x_i, 'y_i': y_i}\n        \n        elif op == 2:  # Remove train\n            if k in train_states:\n                del train_states[k]\n        \n        # Calculate maintenance count for the current day\n        count = 0\n        for state in train_states.values():\n            cycle_length = state['x_i'] + state['y_i']\n            current_cycle_day = state['cycle_day'] % cycle_length\n            if current_cycle_day >= state['x_i']:\n                count += 1\n            state['cycle_day'] += 1\n        \n        maintenance_count[day] = count\n    \n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 102)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    work_maintenance_periods = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        work_maintenance_periods.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # Initialize train states\n    train_states = {}\n    maintenance_count = [0] * m\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            x_i, y_i = work_maintenance_periods[k]\n            train_states[k] = {'cycle_day': 0, 'x_i': x_i, 'y_i': y_i}\n        \n        elif op == 2:  # Remove train\n            if k in train_states:\n                del train_states[k]\n        \n        # Calculate maintenance count for the current day\n        count = 0\n        for state in train_states.values():\n            cycle_length = state['x_i'] + state['y_i']\n            current_cycle_day = state['cycle_day'] % cycle_length\n            if current_cycle_day >= state['x_i']:\n                count += 1\n            state['cycle_day'] += 1\n        \n        maintenance_count[day] = count\n    \n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), the work and maintenance periods for each train model, and the operations for each day.\",\n      \"output\": \"A structured representation of the input data, including train models' work and maintenance periods and daily operations.\"\n    },\n    {\n      \"description\": \"Simulate the addition and removal of trains over the m days, keeping track of which trains are currently in the department.\",\n      \"output\": \"A dynamic list or set of active trains in the department for each day.\"\n    },\n    {\n      \"description\": \"For each day, calculate the number of trains that are in maintenance based on their work and maintenance cycles.\",\n      \"output\": \"A list of integers representing the number of trains in maintenance for each day.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract n, m, the work and maintenance periods for each train model, and the operations for each day.\",\n    \"Initialize a data structure to keep track of the current state of each train model (whether it is present and its current cycle state).\",\n    \"Iterate over each of the m days, performing the following steps:\",\n    \"  - If the operation is to add a train, update the state to reflect that the train is now present and starting its work cycle.\",\n    \"  - If the operation is to remove a train, update the state to reflect that the train is no longer present.\",\n    \"  - For each train currently present, determine if it is in its maintenance period based on its cycle and the current day.\",\n    \"  - Count the number of trains in maintenance and store this count for the current day.\",\n    \"Output the list of maintenance counts for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maintenance': refers to the period when a train is not operational and is being serviced.\n    'work cycle': refers to the alternating periods of operation and maintenance for each train model.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': means that there can be zero or one train of each model in the department at any time.\n    'x_i days', 'y_i days': specify the duration of work and maintenance periods for each train model.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for adding and removing trains should be considered simultaneously within the iteration over each day. This can be implemented using an if-else statement to handle the operations for adding or removing trains.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: Only one train is added and it starts its work cycle, so no train is in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: A train is added and then removed the next day, so no train is in maintenance.\n\n    Input: 1 3\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n            0\n    Explanation: A train is added, then removed, and no train is in maintenance throughout.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of simulating train addition and removal while checking maintenance periods will naturally handle these cases.\n\nNO", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    work_maintenance = []\n    index = 2\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        work_maintenance.append((x_i, y_i))\n        index += 2\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to 0-based index\n        operations.append((op, k))\n        index += 2\n    \n    # State of trains: (day added, current cycle day)\n    train_state = [None] * n\n    maintenance_count = [0] * m\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            train_state[k] = (day, 0)\n        elif op == 2:  # Remove train\n            train_state[k] = None\n        \n        # Calculate maintenance count for the current day\n        count = 0\n        for i in range(n):\n            if train_state[i] is not None:\n                day_added, cycle_day = train_state[i]\n                x_i, y_i = work_maintenance[i]\n                \n                # Calculate the total cycle length\n                cycle_length = x_i + y_i\n                \n                # Determine the current cycle day\n                current_cycle_day = (day - day_added) % cycle_length\n                \n                # Check if the train is in maintenance\n                if current_cycle_day >= x_i:\n                    count += 1\n        \n        maintenance_count[day] = count\n    \n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), and the list of train operation schedules.\",\n      \"steps\": [\n        \"Read the first line to get integers n and m.\",\n        \"Read the next n lines to get pairs of integers (x_i, y_i) representing the work and maintenance periods for each train model.\",\n        \"Read the next m lines to get pairs of integers (op, k) representing the operations (add or remove) for each day.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the daily operations of adding and removing trains, and track the maintenance status of each train model.\",\n      \"steps\": [\n        \"Initialize a data structure to keep track of the current status of each train model (whether it is present and its current cycle day).\",\n        \"For each day, update the status of the train models based on the operation (add or remove) and their respective cycles (work and maintenance).\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"For each day, iterate through the train models and count how many are in the maintenance phase.\",\n        \"Ensure that trains removed on a given day are not counted as in maintenance.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each day.\",\n      \"steps\": [\n        \"For each day, output the number of trains in maintenance.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data.\",\n    \"Initialize data structures to track train status and cycles.\",\n    \"Simulate the daily operations, updating train statuses and cycles.\",\n    \"Calculate and output the number of trains in maintenance for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models'\n    Explanation: Refers to different types of trains, each with its own work and maintenance schedule.\n\n    'maintenance'\n    Explanation: A period during which a train is not operational and is being serviced.\n\n    'operation schedules'\n    Explanation: The sequence of actions (add or remove) performed on trains over a series of days.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: This means that there can be zero or one train of each model in the department at any time, but not more than one.\n\n    'x_i days', 'y_i days'\n    Explanation: These represent the number of days a train is operational (x_i) and in maintenance (y_i) respectively.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the subproblem \"Simulate the daily operations of adding and removing trains, and track the maintenance status of each train model\" should be implemented simultaneously. Specifically, updating the status of train models and their cycles should be done in a single loop for each day to ensure accurate tracking of train statuses.\n\n# [edge case]\n    1. Input: 1 1\n             1 1\n             1 1\n       Output: 0\n       Explanation: Only one train is added and it is in its working phase on the first day, so no train is in maintenance.\n\n    2. Input: 1 2\n             1 1\n             1 1\n             2 1\n       Output: 0\n               0\n       Explanation: A train is added on the first day and removed on the second day. It is in its working phase on the first day, and on the second day, it is removed, so no train is in maintenance.\n\n    3. Input: 2 3\n             1 1\n             1 1\n             1 1\n             1 2\n             2 1\n       Output: 0\n               0\n               0\n       Explanation: Two trains are added on the first two days, both in their working phase. The first train is removed on the third day, so no train is in maintenance throughout.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of updating train statuses and checking their maintenance phase should", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    work_maintenance = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        work_maintenance.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # Initialize the status of each train model\n    train_status = [None] * n  # None means no train of this model is present\n    results = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = work_maintenance[k]\n            train_status[k] = (0, x_i, y_i)  # (current_day_in_cycle, work_days, maintenance_days)\n        \n        elif op == 2:  # Remove train of model k\n            train_status[k] = None\n        \n        # Count trains in maintenance\n        current_maintenance_count = 0\n        for i in range(n):\n            if train_status[i] is not None:\n                current_day_in_cycle, x_i, y_i = train_status[i]\n                if current_day_in_cycle >= x_i:  # In maintenance\n                    current_maintenance_count += 1\n        \n        results.append(current_maintenance_count)\n        \n        # Update the cycle day for each train\n        for i in range(n):\n            if train_status[i] is not None:\n                current_day_in_cycle, x_i, y_i = train_status[i]\n                total_cycle = x_i + y_i\n                train_status[i] = ((current_day_in_cycle + 1) % total_cycle, x_i, y_i)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), and the list of train operations.\",\n      \"details\": \"Read the first line to get n and m. Read the next n lines to get the x_i and y_i values for each train model. Read the next m lines to get the operations (op, k) for each day.\"\n    },\n    {\n      \"description\": \"Track the state of each train model over the days.\",\n      \"details\": \"Maintain a data structure to keep track of whether a train of each model is present and its current state (working or maintenance).\"\n    },\n    {\n      \"description\": \"Simulate the daily operations and update the train states accordingly.\",\n      \"details\": \"For each day, based on the operation (add or remove), update the state of the train model. If a train is added, start its cycle of working and maintenance. If a train is removed, ensure it is no longer counted.\"\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day.\",\n      \"details\": \"For each day, count the number of trains that are in the maintenance state and store the result.\"\n    },\n    {\n      \"description\": \"Output the results for each day.\",\n      \"details\": \"Print the number of trains in maintenance for each of the m days.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize data structures to store train model states and maintenance counts.\",\n    \"Parse the input to extract train model details and daily operations.\",\n    \"Iterate over each day and perform the operation specified (add or remove train).\",\n    \"For each train addition, start its cycle of working and maintenance based on x_i and y_i.\",\n    \"For each train removal, update the state to ensure it is no longer counted.\",\n    \"At the end of each day, count and record the number of trains in maintenance.\",\n    \"Output the recorded maintenance counts for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models': Refers to different types of trains, each with its own working and maintenance cycle.\n    'working and maintenance cycle': Each train model has a specific number of days it works (x_i) and is in maintenance (y_i).\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': Indicates that there can be zero or one train of each model at any time.\n    'x_i days': The number of days a train works before going into maintenance.\n    'y_i days': The number of days a train is in maintenance before it starts working again.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps related to updating the train state and counting maintenance should be considered simultaneously. Specifically:\n    - \"Simulate the daily operations and update the train states accordingly.\"\n    - \"Calculate the number of trains in maintenance for each day.\"\n    These can be implemented in a single loop that processes each day's operations and updates the maintenance count.\n\n# [edge case]\n    1. Input: 1 1\\n1 1\\n1 1\\n\n       Output: 0\n       Explanation: Only one train is added and it starts working, so no train is in maintenance.\n    2. Input: 1 2\\n1 1\\n1 1\\n2 1\\n\n       Output: 0\\n0\n       Explanation: A train is added and then removed the next day, never entering maintenance.\n    3. Input: 2 3\\n1 1\\n1 1\\n1 1\\n1 2\\n2 1\\n\n       Output: 0\\n0\\n0\n       Explanation: Two trains are added, but both start working, so no train is in maintenance.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where trains are added and removed without entering maintenance.\n    ```python\n    # Example code snippet to handle edge cases\n    train_states = {}  # Dictionary to track train states\n    maintenance_count = [0] * m  # List to store maintenance counts for each day\n\n    for day in range(m):\n        op, k = operations[day]\n        if op == 1:  # Add train\n            train_states[k] = {'working_days': x[k-1], 'maintenance_days': y[k-1], 'current_state': 'working'}\n       ", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    x = []\n    y = []\n    \n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        x.append(x_i)\n        y.append(y_i)\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index])\n        index += 1\n        operations.append((op, k))\n    \n    train_states = {}\n    maintenance_count = [0] * m\n    \n    for day in range(m):\n        op, k = operations[day]\n        if op == 1:  # Add train\n            train_states[k] = {'working_days': x[k-1], 'maintenance_days': y[k-1], 'current_state': 'working', 'days_in_current_state': 0}\n        elif op == 2:  # Remove train\n            if k in train_states:\n                del train_states[k]\n        \n        # Update train states\n        maintenance_today = 0\n        for model in train_states:\n            train = train_states[model]\n            train['days_in_current_state'] += 1\n            \n            if train['current_state'] == 'working':\n                if train['days_in_current_state'] == train['working_days']:\n                    train['current_state'] = 'maintenance'\n                    train['days_in_current_state'] = 0\n            elif train['current_state'] == 'maintenance':\n                maintenance_today += 1\n                if train['days_in_current_state'] == train['maintenance_days']:\n                    train['current_state'] = 'working'\n                    train['days_in_current_state'] = 0\n        \n        maintenance_count[day] = maintenance_today\n    \n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), and the list of train operations.\",\n      \"steps\": [\n        \"Read the first line to get integers n and m.\",\n        \"Read the next n lines to get pairs of integers (x_i, y_i) representing work and maintenance days for each train model.\",\n        \"Read the next m lines to get pairs of integers (op, k) representing operations on train models.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the addition and removal of trains over m days and track their maintenance status.\",\n      \"steps\": [\n        \"Initialize a data structure to keep track of the current state of each train model (whether it is present and its current cycle day).\",\n        \"Iterate over each of the m operations, updating the state of the train models accordingly.\",\n        \"For each day, determine how many trains are in maintenance based on their current cycle day.\"\n      ]\n    },\n    {\n      \"description\": \"Output the number of trains in maintenance for each of the m days.\",\n      \"steps\": [\n        \"For each day, after processing the operation, calculate the number of trains in maintenance.\",\n        \"Print the result for each day.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data.\",\n    \"Initialize data structures to track train states and maintenance cycles.\",\n    \"Process each day's operation, updating train states and cycles.\",\n    \"Calculate and output the number of trains in maintenance for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models'\n    Explanation: Refers to different types of trains, each with its own work and maintenance cycle.\n\n    'maintenance'\n    Explanation: A period during which a train is not operational and is being serviced.\n\n    'cycle'\n    Explanation: The repeating pattern of work and maintenance days for each train model.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: There can be zero or one train of each model at any time, but not more than one.\n\n    'x_i days', 'y_i days'\n    Explanation: x_i represents the number of days a train works before going into maintenance, and y_i represents the number of days it stays in maintenance.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the subproblem \"Simulate the addition and removal of trains over m days and track their maintenance status\" should be implemented simultaneously. Specifically, updating the state of train models and determining how many are in maintenance should be done in the same loop over the m operations.\n\n# [edge case]\n    1. Input: 1 1\n             1 1\n             1 1\n       Output: 0\n       Explanation: A single train is added and it starts working immediately, so no train is in maintenance on the first day.\n\n    2. Input: 1 2\n             1 1\n             1 1\n             2 1\n       Output: 0\n               0\n       Explanation: A train is added and then removed the next day. It never enters maintenance.\n\n    3. Input: 2 3\n             1 1\n             1 1\n             1 1\n             1 2\n             2 1\n       Output: 0\n               0\n               0\n       Explanation: Two trains are added, but both start working immediately and are removed before entering maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of tracking the state and cycle of each train model will naturally handle these scenarios.\n\nNO", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    m = int(data[index + 1])\n    index += 2\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        train_cycles.append((x_i, y_i))\n        index += 2\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to 0-based index\n        operations.append((op, k))\n        index += 2\n    \n    # State of each train model: (is_present, current_cycle_day)\n    train_state = [None] * n\n    maintenance_count = 0\n    \n    results = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = train_cycles[k]\n            train_state[k] = (True, 1)  # Start with day 1 of the cycle\n        elif op == 2:  # Remove train of model k\n            if train_state[k] is not None:\n                is_present, current_cycle_day = train_state[k]\n                if is_present:\n                    x_i, y_i = train_cycles[k]\n                    # Check if it was in maintenance\n                    if current_cycle_day > x_i:\n                        maintenance_count -= 1\n                train_state[k] = None\n        \n        # Update maintenance count\n        current_maintenance_count = 0\n        for i in range(n):\n            if train_state[i] is not None:\n                is_present, current_cycle_day = train_state[i]\n                if is_present:\n                    x_i, y_i = train_cycles[i]\n                    if current_cycle_day > x_i:\n                        current_maintenance_count += 1\n                    # Update the cycle day\n                    total_cycle = x_i + y_i\n                    train_state[i] = (True, (current_cycle_day % total_cycle) + 1)\n        \n        results.append(current_maintenance_count)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), the work and maintenance periods for each train model, and the operations for each day.\",\n      \"output\": \"A structured representation of the input data, including train models' work and maintenance periods and daily operations.\"\n    },\n    {\n      \"description\": \"Implement a data structure to track the state of each train model, specifically whether it is currently in the department and its current cycle (working or maintenance).\",\n      \"output\": \"A data structure that maintains the state of each train model, including its current cycle and time remaining in that cycle.\"\n    },\n    {\n      \"description\": \"Simulate each day's operations, updating the state of the trains based on the operation (add or remove) and the current cycle of each train.\",\n      \"output\": \"An updated state of the trains for each day, reflecting the addition or removal of trains and their current cycles.\"\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day based on the updated state of the trains.\",\n      \"output\": \"A list of integers representing the number of trains in maintenance for each day.\"\n    },\n    {\n      \"description\": \"Output the result for each day as specified in the requirement.\",\n      \"output\": \"Print the number of trains in maintenance for each day.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of train models, number of days, work and maintenance periods for each train model, and daily operations.\",\n    \"Initialize a data structure to track the state of each train model, including whether it is in the department and its current cycle.\",\n    \"Iterate over each day, performing the following steps:\",\n    \"  - If a train is added, update its state to reflect it is in the department and start its work cycle.\",\n    \"  - If a train is removed, update its state to reflect it is no longer in the department.\",\n    \"  - Update the cycle of each train currently in the department, decrementing the time remaining in its current cycle.\",\n    \"  - Count the number of trains in maintenance based on their current cycle.\",\n    \"Output the number of trains in maintenance for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models': Refers to different types of trains, each with unique work and maintenance cycles.\n    'work and maintenance periods': Indicates the duration a train is operational and the duration it is under maintenance.\n    'operations': Refers to actions taken each day, either adding or removing a train.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': Implies that there can be zero or one train of each model in the department at any time.\n    'x_i days', 'y_i days': Specifies the duration of work and maintenance cycles for each train model.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for adding and removing trains should be considered simultaneously within the daily iteration loop. Specifically:\n    - When a train is added, its state should be updated to start its work cycle.\n    - When a train is removed, its state should be updated to reflect it is no longer in the department.\n    These operations can be handled using if-else statements within the loop for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: Only one train is added and it starts working immediately, so no train is in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           1 2\n    Output: 0\n            0\n    Explanation: Both trains are added and start working immediately, so no train is in maintenance.\n\n    Input: 2 3\n           1 1\n           1 1\n           1 1\n           2 1\n           1 2\n    Output: 0\n            0\n            0\n    Explanation: Train 1 is added and removed before it can enter maintenance, and train 2 is added and starts working immediately.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of updating train states and counting maintenance trains will naturally handle these scenarios.\n\nNO", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    work_maintenance = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        work_maintenance.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # State of each train model\n    train_state = [None] * n  # None means not in department, otherwise (cycle_type, days_left)\n    \n    # Result for each day\n    result = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        # Update the state of each train\n        maintenance_count = 0\n        for i in range(n):\n            if train_state[i] is not None:\n                cycle_type, days_left = train_state[i]\n                days_left -= 1\n                if days_left == 0:\n                    if cycle_type == 'work':\n                        train_state[i] = ('maintenance', work_maintenance[i][1])\n                    else:\n                        train_state[i] = ('work', work_maintenance[i][0])\n                else:\n                    train_state[i] = (cycle_type, days_left)\n                \n                if train_state[i][0] == 'maintenance':\n                    maintenance_count += 1\n        \n        # Process the operation of the day\n        if op == 1:  # Add train\n            train_state[k] = ('work', work_maintenance[k][0])\n        elif op == 2:  # Remove train\n            train_state[k] = None\n        \n        # On the day a train is removed, it is not counted as in maintenance\n        if op == 2 and train_state[k] is not None and train_state[k][0] == 'maintenance':\n            maintenance_count -= 1\n        \n        result.append(maintenance_count)\n    \n    # Output the result for each day\n    for count in result:\n        print(count)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), and the list of train operation schedules.\",\n      \"steps\": [\n        \"Read the first line to get integers n and m.\",\n        \"Read the next n lines to get pairs of integers (x_i, y_i) representing the work and maintenance periods for each train model.\",\n        \"Read the next m lines to get pairs of integers (op, k) representing the operations (add or remove) for each day.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the daily operations of adding and removing trains, and track the maintenance status of each train model.\",\n      \"steps\": [\n        \"Initialize a data structure to keep track of the current status of each train model (whether it is present and its current cycle position).\",\n        \"For each day, update the status of train models based on the operation (add or remove).\",\n        \"For added trains, start their cycle and update their status accordingly.\",\n        \"For removed trains, ensure they are not counted as in maintenance.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"For each day, iterate over the train models and check their current cycle position.\",\n        \"Count the number of trains that are in the maintenance phase of their cycle.\",\n        \"Output the count for each day.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data.\",\n    \"Initialize data structures to track train status and cycles.\",\n    \"Iterate over each day and update train statuses based on operations.\",\n    \"Calculate and output the number of trains in maintenance for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models'\n    Explanation: Refers to different types of trains, each with its own work and maintenance schedule.\n\n    'maintenance'\n    Explanation: A period during which a train is not operational and is being serviced.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: There can be zero or one train of each model in the department at any time.\n\n    'x_i days', 'y_i days'\n    Explanation: x_i represents the number of days a train works, and y_i represents the number of days it is in maintenance.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for updating train status and calculating maintenance should be considered simultaneously. Specifically, when updating the status of trains for each day, the calculation of how many trains are in maintenance should be done in the same loop to ensure accurate daily counts.\n\n# [edge case]\n    1. Input: 1 1\n             1 1\n             1 1\n       Output: 0\n       Explanation: On the first day, a train is added and starts working, so no train is in maintenance.\n\n    2. Input: 1 2\n             1 1\n             1 1\n             2 1\n       Output: 0\n               0\n       Explanation: On the first day, a train is added and starts working. On the second day, it is removed, so no train is in maintenance on either day.\n\n    3. Input: 2 3\n             1 1\n             1 1\n             1 1\n             1 2\n             2 1\n       Output: 0\n               0\n               0\n       Explanation: On the first day, a train of model 1 is added and starts working. On the second day, a train of model 2 is added and starts working. On the third day, the train of model 1 is removed, so no train is in maintenance on any day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of updating train status and checking maintenance status should naturally handle these cases.\n\nNO", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    train_cycles = []\n    index = 2\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        train_cycles.append((x_i, y_i))\n        index += 2\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to zero-based index\n        operations.append((op, k))\n        index += 2\n    \n    # Initialize train status\n    train_status = [None] * n  # None means no train of that model is present\n    \n    # Result list to store the number of trains in maintenance each day\n    result = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = train_cycles[k]\n            train_status[k] = (0, x_i, y_i)  # (current day in cycle, work days, maintenance days)\n        \n        elif op == 2:  # Remove train of model k\n            train_status[k] = None\n        \n        # Calculate number of trains in maintenance\n        maintenance_count = 0\n        for status in train_status:\n            if status is not None:\n                current_day, x_i, y_i = status\n                # Check if the train is in maintenance\n                if current_day >= x_i:\n                    maintenance_count += 1\n                # Update the cycle day\n                status = (current_day + 1, x_i, y_i)\n                if status[0] >= x_i + y_i:\n                    status = (0, x_i, y_i)\n        \n        result.append(maintenance_count)\n    \n    # Print the result for each day\n    for count in result:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models, number of days, and the operation details for each day.\",\n      \"steps\": [\n        \"Read the first line to get integers n (number of train models) and m (number of days).\",\n        \"Read the next n lines to get the working and maintenance periods (x_i, y_i) for each train model.\",\n        \"Read the next m lines to get the operations (op, k) for each day, where op indicates adding or removing a train of model k.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the daily operations to track the status of trains (working or maintenance) and count the number of trains in maintenance each day.\",\n      \"steps\": [\n        \"Initialize a data structure to keep track of the current status of each train model (whether it is present and its current cycle day).\",\n        \"For each day, perform the operation specified (add or remove a train) and update the status of the train models.\",\n        \"Calculate the number of trains in maintenance for each day based on their current cycle day and status.\"\n      ]\n    },\n    {\n      \"description\": \"Output the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"For each day, after performing the operation and updating the status, append the count of trains in maintenance to the output list.\",\n        \"Print the output list, where each element corresponds to the number of trains in maintenance for that day.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data for train models and daily operations.\",\n    \"Initialize data structures to track the status and cycle of each train model.\",\n    \"Iterate over each day, perform the specified operation, update train statuses, and calculate the number of trains in maintenance.\",\n    \"Store the maintenance count for each day and output the results.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models'\n    Explanation: Refers to different types of trains, each with its own working and maintenance schedule.\n\n    'maintenance'\n    Explanation: A period during which a train is not operational and is being serviced.\n\n    'operation'\n    Explanation: Refers to the action of adding or removing a train on a given day.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: This means that there can be zero or one train of each model at any time, but not more than one.\n\n    'x_i days', 'y_i days'\n    Explanation: These are the periods for which a train is operational and in maintenance, respectively.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan are well-structured and do not require simultaneous implementation. Each step logically follows the previous one, ensuring that the train status is updated before calculating the maintenance count.\n\n# [edge case]\n    1. Input: 1 1\n       1 1\n       1 1\n       Output: 0\n       Explanation: On the first day, a train is added and is operational, so no train is in maintenance.\n\n    2. Input: 2 2\n       1 1\n       1 1\n       1 1\n       1 2\n       Output: 0\n       0\n       Explanation: On both days, trains are added and are operational, so no train is in maintenance.\n\n    3. Input: 1 2\n       1 1\n       1 1\n       2 1\n       Output: 0\n       0\n       Explanation: On the first day, a train is added and is operational. On the second day, it is removed, so no train is in maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of updating train status and calculating maintenance count should handle these cases correctly.\n\nNO", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    m = int(data[index + 1])\n    index += 2\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        train_cycles.append((x_i, y_i))\n        index += 2\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to 0-based index\n        operations.append((op, k))\n        index += 2\n    \n    # Initialize the state of each train model\n    train_status = [None] * n  # None means no train of this model is present\n    maintenance_count = 0\n    results = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = train_cycles[k]\n            train_status[k] = (0, x_i, y_i)  # (current_day_in_cycle, x_i, y_i)\n        \n        elif op == 2:  # Remove train of model k\n            if train_status[k] is not None:\n                current_day_in_cycle, x_i, y_i = train_status[k]\n                if current_day_in_cycle >= x_i:\n                    maintenance_count -= 1\n                train_status[k] = None\n        \n        # Update maintenance count\n        for i in range(n):\n            if train_status[i] is not None:\n                current_day_in_cycle, x_i, y_i = train_status[i]\n                if current_day_in_cycle >= x_i and current_day_in_cycle < x_i + y_i:\n                    if current_day_in_cycle == x_i:\n                        maintenance_count += 1\n                elif current_day_in_cycle == x_i + y_i:\n                    maintenance_count -= 1\n                \n                # Update the cycle day\n                current_day_in_cycle = (current_day_in_cycle + 1) % (x_i + y_i)\n                train_status[i] = (current_day_in_cycle, x_i, y_i)\n        \n        results.append(maintenance_count)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: unexpected EOF while parsing (<string>, line 104)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    m = int(data[index + 1])\n    index += 2\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        train_cycles.append((x_i, y_i))\n        index += 2\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to 0-based index\n        operations.append((op, k))\n        index += 2\n    \n    # Initialize the state of each train model\n    train_status = [None] * n  # None means no train of this model is present\n    maintenance_count = 0\n    results = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = train_cycles[k]\n            train_status[k] = (0, x_i, y_i)  # (current_day_in_cycle, x_i, y_i)\n        \n        elif op == 2:  # Remove train of model k\n            if train_status[k] is not None:\n                current_day_in_cycle, x_i, y_i = train_status[k]\n                if current_day_in_cycle >= x_i:\n                    maintenance_count -= 1\n                train_status[k] = None\n        \n        # Update maintenance count\n        for i in range(n):\n            if train_status[i] is not None:\n                current_day_in_cycle, x_i, y_i = train_status[i]\n                if current_day_in_cycle >= x_i and current_day_in_cycle < x_i + y_i:\n                    if current_day_in_cycle == x_i:\n                        maintenance_count += 1\n                elif current_day_in_cycle == x_i + y_i:\n                    maintenance_count -= 1\n                \n                # Update the cycle day\n                current_day_in_cycle = (current_day_in_cycle + 1) % (x_i + y_i)\n                train_status[i] = (current_day_in_cycle, x_i, y_i)\n        \n        results.append(maintenance_count)\n    \n    for result in results:\n        print(result)"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), and the list of train operation schedules.\",\n      \"details\": \"Read the first line to get n and m. Then read the next n lines to get the x_i and y_i values for each train model. Finally, read the next m lines to get the operations (op, k) for each day.\"\n    },\n    {\n      \"description\": \"Simulate the addition and removal of trains over m days.\",\n      \"details\": \"Maintain a data structure to track the current state of each train model (whether it is present and its current cycle position). Update this structure based on the operations for each day.\"\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day.\",\n      \"details\": \"For each day, based on the current state of the trains, determine how many are in the maintenance phase and store the result.\"\n    },\n    {\n      \"description\": \"Output the number of trains in maintenance for each day.\",\n      \"details\": \"Print the calculated number of trains in maintenance for each of the m days.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize data structures to store train models' schedules and their current states.\",\n    \"Iterate over each day, processing the operation (add or remove) for the specified train model.\",\n    \"For each train addition, start its cycle and update its state accordingly.\",\n    \"For each train removal, update the state to reflect its absence.\",\n    \"After processing each day's operations, calculate the number of trains in maintenance based on their current states.\",\n    \"Output the maintenance count for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models', 'maintenance', 'operation schedule'\n    Explanation: The requirement involves managing different train models, each with a specific operation schedule that includes periods of work and maintenance. The core task is to track these schedules and determine how many trains are in maintenance on each day.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': This means that there can be zero or one train of each model at any time.\n    'x_i days', 'y_i days': These specify the duration of work and maintenance periods for each train model.\n    Implementation: Use these values to simulate the train's cycle and determine its state on any given day.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps related to simulating train operations and calculating maintenance should be implemented simultaneously. Specifically:\n    - \"Simulate the addition and removal of trains over m days\" and \"Calculate the number of trains in maintenance for each day\" should be done in a single loop over the days, updating the state and calculating the maintenance count in one pass.\n\n# [edge case]\n    1. Input: 1 1\\n1 1\\n1 1\\nOutput: 0\n       Explanation: Only one train is added and it starts working immediately, so no train is in maintenance.\n    2. Input: 1 2\\n1 1\\n1 1\\n2 1\\nOutput: 0\\n0\n       Explanation: A train is added and then removed the next day, never entering maintenance.\n    3. Input: 2 3\\n1 1\\n1 1\\n1 1\\n1 2\\n2 1\\nOutput: 0\\n0\\n0\n       Explanation: Two trains are added but both start working immediately, and one is removed before entering maintenance.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where trains are added and removed without entering maintenance.\n    Code for handling the edge case:\n    ```python\n    # Initialize data structures\n    train_states = {}  # To track the state of each train model\n    maintenance_count = [0] * m  # To store the number of trains in maintenance each day\n\n    for day in range(m):\n        op, k = operations[day]\n        if op == 1:  # Add train\n            train_states[k] = 0  # Start its", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    m = int(data[index + 1])\n    index += 2\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        train_cycles.append((x_i, y_i))\n        index += 2\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to 0-based index\n        operations.append((op, k))\n        index += 2\n    \n    # Initialize data structures\n    train_states = {}  # To track the state of each train model\n    maintenance_count = [0] * m  # To store the number of trains in maintenance each day\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            train_states[k] = 0  # Start its cycle at day 0\n        \n        elif op == 2:  # Remove train\n            if k in train_states:\n                del train_states[k]\n        \n        # Calculate the number of trains in maintenance\n        count_in_maintenance = 0\n        for model, start_day in train_states.items():\n            x_i, y_i = train_cycles[model]\n            # Calculate the current cycle day\n            current_day = day - start_day\n            cycle_length = x_i + y_i\n            # Determine if the train is in maintenance\n            if current_day % cycle_length >= x_i:\n                count_in_maintenance += 1\n        \n        maintenance_count[day] = count_in_maintenance\n    \n    # Output the maintenance count for each day\n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), and the list of train operation details.\",\n      \"steps\": [\n        \"Read the first line to get integers n and m.\",\n        \"Read the next n lines to get pairs of integers (x_i, y_i) representing work and maintenance periods for each train model.\",\n        \"Read the next m lines to get pairs of integers (op, k) representing operations on train models.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the addition and removal of trains and track their maintenance status over m days.\",\n      \"steps\": [\n        \"Initialize a data structure to keep track of the current state of each train model (whether it is present and its current cycle status).\",\n        \"Iterate over each of the m operations:\",\n        \"For op=1, add the train model k and start its cycle with x_k days of work.\",\n        \"For op=2, remove the train model k and ensure it is not counted in maintenance.\",\n        \"Update the cycle status of each train model daily, checking if it is in maintenance or work.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day and prepare the output.\",\n      \"steps\": [\n        \"For each day, count the number of trains currently in maintenance.\",\n        \"Store the count for each day in a list.\",\n        \"Output the list of maintenance counts, one per line.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data.\",\n    \"Initialize data structures to track train models and their cycles.\",\n    \"Simulate the daily operations, updating train states and cycles.\",\n    \"Calculate and output the number of trains in maintenance for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models'\n    Explanation: Refers to different types of trains, each with its own work and maintenance cycle.\n\n    'work and maintenance cycle'\n    Explanation: Each train model has a specific number of days it works (x_i) and then goes into maintenance for a certain number of days (y_i).\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: This means that there can be zero or one train of each model in the department at any time.\n\n    '1 \u2264 n,m \u2264 2 \u22c5 10^5'\n    Explanation: The number of train models and days can be as large as 200,000, indicating the need for efficient algorithms.\n\n    '1 \u2264 x_i,y_i \u2264 10^9'\n    Explanation: The work and maintenance periods can be very large, suggesting the need for careful handling of large numbers in cycles.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for simulating the addition and removal of trains and tracking their maintenance status should be implemented simultaneously. Specifically, the steps:\n    - \"For op=1, add the train model k and start its cycle with x_k days of work.\"\n    - \"For op=2, remove the train model k and ensure it is not counted in maintenance.\"\n    - \"Update the cycle status of each train model daily, checking if it is in maintenance or work.\"\n    These steps should be handled in a single loop iterating over the m operations, updating the state of each train model as needed.\n\n# [edge case]\n    1. Input: 1 1\\n1 1\\n1 1\\n1 1\n       Output: 0\n       Explanation: Only one train is added and it starts working, so no train is in maintenance.\n\n    2. Input: 1 2\\n1 1\\n1 1\\n2 1\n       Output: 0\\n0\n       Explanation: A train is added and then removed the next day, never entering maintenance.\n\n    3. Input: 2 3\\n1 1\\n1 1\\n1 1\\n1 2\\n2 1\n       Output: 0\\n0\\n0\n       Explanation: Two trains are added but both start working, and one is removed before entering maintenance.\n\n# [extra code for edge case]\n    We need extra code to handle the edge", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    # Read train model work and maintenance periods\n    train_cycles = []\n    index = 2\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        train_cycles.append((x_i, y_i))\n        index += 2\n    \n    # Read operations\n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to 0-based index\n        operations.append((op, k))\n        index += 2\n    \n    # Initialize state tracking\n    train_states = [None] * n  # None means no train of this model is present\n    maintenance_count = 0\n    result = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_k, y_k = train_cycles[k]\n            train_states[k] = (day, x_k, y_k)  # Store the start day and cycle lengths\n        elif op == 2:  # Remove train of model k\n            train_states[k] = None\n        \n        # Calculate maintenance count for the current day\n        maintenance_count = 0\n        for state in train_states:\n            if state is not None:\n                start_day, x_k, y_k = state\n                cycle_length = x_k + y_k\n                days_since_start = day - start_day\n                \n                # Determine if the train is in maintenance\n                if days_since_start >= x_k:\n                    cycle_position = days_since_start % cycle_length\n                    if cycle_position >= x_k:\n                        maintenance_count += 1\n        \n        result.append(maintenance_count)\n    \n    # Output the result\n    for count in result:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), the work and maintenance periods for each train model, and the operations for each day.\",\n      \"steps\": [\n        \"Read the first line to get n and m.\",\n        \"Read the next n lines to get the work (x_i) and maintenance (y_i) periods for each train model.\",\n        \"Read the next m lines to get the operations (op, k) for each day.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the addition and removal of trains over the m days, keeping track of their work and maintenance cycles.\",\n      \"steps\": [\n        \"Initialize a data structure to keep track of the current state of each train model (whether it is present and its current cycle).\",\n        \"For each day, perform the operation specified (add or remove a train) and update the state of the trains accordingly.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"For each day, iterate over the current state of all train models.\",\n        \"Determine if each train is in its maintenance period based on its cycle and the current day.\",\n        \"Count the number of trains in maintenance and store the result for that day.\"\n      ]\n    },\n    {\n      \"description\": \"Output the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"Iterate over the stored results for each day.\",\n        \"Print the number of trains in maintenance for each day.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data.\",\n    \"Initialize data structures to track train states and cycles.\",\n    \"Iterate over each day, updating train states based on operations.\",\n    \"For each day, calculate the number of trains in maintenance.\",\n    \"Output the results for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maintenance'\n    Explanation: In the context of the requirement, maintenance refers to the period during which a train is not operational and is being serviced. The train alternates between working and maintenance periods.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': This means that there can be zero or one train of each model at any given time.\n    '1 \u2264 n,m \u2264 2 \u22c5 10^5': This indicates the maximum number of train models and days, which affects the scalability of the solution.\n    '1 \u2264 x_i,y_i \u2264 10^9': This indicates the range for the work and maintenance periods, which affects the calculation of cycles.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they build upon each other. However, within the simulation of train addition and removal, the update of train states and the calculation of maintenance status can be done simultaneously for efficiency.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: Only one train is added and it starts working immediately, so no train is in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           1 2\n    Output: 0\n            0\n    Explanation: Both trains are added and start working immediately, so no train is in maintenance.\n\n    Input: 1 3\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n            0\n    Explanation: The train is added, works for one day, and then is removed before it can enter maintenance.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where trains are added and removed before entering maintenance.\n    Code for handling the edge case:\n    ```python\n    if op == 1:  # Add train\n        # Initialize train state and cycle\n        train_states[k] = {'cycle_day': 0, 'in_maintenance': False}\n    elif op == 2:  # Remove train\n        # Remove train state\n        if k in train_states:\n            del train_states[k]\n    ```\n\nYES", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    work_maintenance_periods = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        work_maintenance_periods.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # Initialize train states\n    train_states = {}\n    maintenance_count = [0] * m\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            x_i, y_i = work_maintenance_periods[k]\n            train_states[k] = {'cycle_day': 0, 'x_i': x_i, 'y_i': y_i}\n        \n        elif op == 2:  # Remove train\n            if k in train_states:\n                del train_states[k]\n        \n        # Calculate maintenance count for the current day\n        count = 0\n        for state in train_states.values():\n            cycle_length = state['x_i'] + state['y_i']\n            current_cycle_day = state['cycle_day'] % cycle_length\n            if current_cycle_day >= state['x_i']:\n                count += 1\n            state['cycle_day'] += 1\n        \n        maintenance_count[day] = count\n    \n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 102)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    work_maintenance_periods = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        work_maintenance_periods.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # Initialize train states\n    train_states = {}\n    maintenance_count = [0] * m\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            x_i, y_i = work_maintenance_periods[k]\n            train_states[k] = {'cycle_day': 0, 'x_i': x_i, 'y_i': y_i}\n        \n        elif op == 2:  # Remove train\n            if k in train_states:\n                del train_states[k]\n        \n        # Calculate maintenance count for the current day\n        count = 0\n        for state in train_states.values():\n            cycle_length = state['x_i'] + state['y_i']\n            current_cycle_day = state['cycle_day'] % cycle_length\n            if current_cycle_day >= state['x_i']:\n                count += 1\n            state['cycle_day'] += 1\n        \n        maintenance_count[day] = count\n    \n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [true, false, true, true, false, true, false, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 9, "round": 490, "prompt": "Kawasiro Nitori is excellent in engineering. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. At the beginning, there are no trains present in the department. At each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), then it is in maintenance for y_i days, then in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.", "examples": "\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.", "mutate_method": "expand_one2two", "save_node": true, "parent_index": 11}
