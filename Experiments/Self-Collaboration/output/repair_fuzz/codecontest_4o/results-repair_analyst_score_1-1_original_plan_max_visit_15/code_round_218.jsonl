{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "repair_prompt": ["Luntik wants to divide all songs between two concerts such that each song is included in exactly one concert.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Luntik wants to divide all songs between two concerts. He wants to ensure that each song is included in exactly one concert.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Luntik wants to divide all songs between two concerts such that each song is included in exactly one concert.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If total duration is odd, the minimal difference is 1\n        if total_duration % 2 != 0:\n            results.append(1)\n        else:\n            # If total duration is even, the minimal difference is 0\n            results.append(0)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    test_cases = [tuple(map(int, line.split())) for line in data[1:t+1]]\n    \n    results = minimal_difference(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If the total duration is odd, the minimal difference is 1\n        if total_duration % 2 == 1:\n            results.append(1)\n        else:\n            # If the total duration is even, the minimal difference can be 0\n            results.append(0)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        # The minimal possible difference is the remainder when total_duration is divided by 2\n        minimal_diff = total_duration % 2\n        results.append(minimal_diff)\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    test_cases = [tuple(map(int, line.split())) for line in data[1:t+1]]\n    \n    results = minimal_difference(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If the total duration is odd, the minimal difference is 1\n        if total_duration % 2 != 0:\n            results.append(1)\n        else:\n            results.append(0)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    test_cases = [tuple(map(int, line.split())) for line in data[1:t+1]]\n    \n    results = minimal_difference(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If total duration is odd, the minimal difference is 1\n        if total_duration % 2 == 1:\n            results.append(1)\n        else:\n            results.append(0)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    test_cases = [tuple(map(int, line.split())) for line in data[1:t+1]]\n    \n    results = minimal_difference(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # The minimal possible difference is the remainder when total_duration is divided by 2\n        min_difference = total_duration % 2\n        \n        results.append(min_difference)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        # Check if total_duration is odd or even\n        if total_duration % 2 == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    test_cases = []\n    \n    for i in range(1, t + 1):\n        a, b, c = map(int, data[i].split())\n        test_cases.append((a, b, c))\n    \n    results = minimal_difference(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If total duration is odd, the minimal difference is 1\n        if total_duration % 2 != 0:\n            results.append(1)\n        else:\n            # If total duration is even, check if we can split it evenly\n            half_duration = total_duration // 2\n            # Check if it's possible to reach exactly half_duration\n            # Using dynamic programming to check if we can reach half_duration\n            dp = [False] * (half_duration + 1)\n            dp[0] = True\n            \n            # Check one-minute songs\n            for _ in range(a):\n                for j in range(half_duration, 0, -1):\n                    if j >= 1 and dp[j - 1]:\n                        dp[j] = True\n            \n            # Check two-minute songs\n            for _ in range(b):\n                for j in range(half_duration, 1, -1):\n                    if j >= 2 and dp[j - 2]:\n                        dp[j] = True\n            \n            # Check three-minute songs\n            for _ in range(c):\n                for j in range(half_duration, 2, -1):\n                    if j >= 3 and dp[j - 3]:\n                        dp[j] = True\n            \n            # If we can reach exactly half_duration, the minimal difference is 0\n            if dp[half_duration]:\n                results.append(0)\n            else:\n                results.append(1)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If there are no songs, the difference is 0\n        if a == 0 and b == 0 and c == 0:\n            results.append(0)\n            continue\n        \n        # If there is only one song, the difference is the duration of that song\n        if a + b + c == 1:\n            results.append(max(a, b, c))\n            continue\n        \n        # Calculate the minimal possible difference\n        # The idea is to check if the total duration is odd or even\n        # If even, the minimal difference is 0, if odd, the minimal difference is 1\n        if total_duration % 2 == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # The minimal difference can be found by checking the parity of the total duration\n        if total_duration % 2 == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If total duration is odd, the minimal difference is 1\n        if total_duration % 2 != 0:\n            results.append(1)\n        else:\n            # If total duration is even, the minimal difference is 0\n            results.append(0)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    test_cases = [tuple(map(int, line.split())) for line in data[1:t+1]]\n    \n    results = minimal_difference(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case.\",\n      \"input\": \"A string containing multiple lines, where the first line is the number of test cases, and each subsequent line contains three integers representing the number of one-minute, two-minute, and three-minute songs.\",\n      \"output\": \"A list of tuples, each containing three integers (a, b, c) for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, calculate the total duration of all songs and determine the minimal possible difference in minutes between the two concerts.\",\n      \"input\": \"A tuple of three integers (a, b, c) representing the number of one-minute, two-minute, and three-minute songs.\",\n      \"output\": \"An integer representing the minimal possible difference in minutes between the two concerts.\"\n    },\n    {\n      \"description\": \"Output the minimal possible difference for each test case.\",\n      \"input\": \"A list of integers, each representing the minimal possible difference for a test case.\",\n      \"output\": \"A string with each integer on a new line.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input from standard input and parse it to extract the number of test cases and the song counts for each test case.\",\n    \"For each test case, calculate the total duration of all songs as a * 1 + b * 2 + c * 3.\",\n    \"Determine the minimal possible difference in minutes between the two concerts by considering all possible ways to distribute the songs between the two concerts.\",\n    \"For each test case, store the minimal possible difference.\",\n    \"Output the minimal possible difference for each test case, each on a new line.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimal possible difference'\n    Explanation: The requirement is to divide the songs into two concerts such that the absolute difference in total duration between the two concerts is minimized.\n\n# [phrase showing quantity relationship]\n    'each song is included in exactly one concert': This means that no song can be shared between concerts, and each song must be assigned to one of the two concerts.\n    'minimal possible difference': This refers to finding the smallest absolute difference in total duration between the two concerts.\n\n# [degree adverb] \n    'minimal': This indicates that the goal is to achieve the smallest possible difference in duration between the two concerts.\n\n# [code logic]\n    The steps to calculate the total duration and determine the minimal possible difference should be considered simultaneously. Specifically, calculating the total duration and then exploring all possible distributions of songs to minimize the difference should be done in a cohesive manner.\n\n# [edge case] \n    1. (1, 0, 0) = 1\n       Explanation: With only one one-minute song, the minimal difference is 1 since it must be assigned to one concert.\n    2. (0, 0, 0) = 0\n       Explanation: If there are no songs, the difference is naturally 0.\n    3. (1, 1, 1) = 0\n       Explanation: As given in the example, the songs can be distributed to achieve a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where there are no songs or only one type of song.\n    ```python\n    if a == 0 and b == 0 and c == 0:\n        return 0\n    if a + b + c == 1:\n        return a * 1 + b * 2 + c * 3\n    ```\n\nYES", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If total duration is odd, the minimal difference is 1\n        if total_duration % 2 != 0:\n            results.append(1)\n        else:\n            # If total duration is even, the minimal difference is 0\n            results.append(0)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    test_cases = [tuple(map(int, line.split())) for line in data[1:t+1]]\n    \n    results = minimal_difference(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case.\",\n      \"input\": \"A single integer t followed by t lines, each containing three integers a, b, c.\",\n      \"output\": \"A list of tuples, each containing three integers (a, b, c) for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, calculate the total duration of all songs and determine the minimal possible difference in minutes between the two concerts.\",\n      \"input\": \"A tuple of three integers (a, b, c) representing the number of one-minute, two-minute, and three-minute songs.\",\n      \"output\": \"An integer representing the minimal possible difference in minutes between the two concerts.\"\n    },\n    {\n      \"description\": \"Output the minimal possible difference for each test case.\",\n      \"input\": \"A list of integers representing the minimal possible differences for each test case.\",\n      \"output\": \"Print each integer on a new line.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input to get the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case.\",\n    \"For each test case, calculate the total duration of all songs as a*1 + b*2 + c*3.\",\n    \"Determine the minimal possible difference in minutes between the two concerts by trying to distribute the songs such that the difference is minimized.\",\n    \"Use a dynamic programming approach or a greedy strategy to find the optimal distribution of songs.\",\n    \"Store the result for each test case.\",\n    \"Output the results for all test cases, each on a new line.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'divide all songs between two concerts'\n    Explanation: This means that each song must be assigned to one of the two concerts, and no song can be left out or assigned to both concerts.\n\n    'minimal possible difference in minutes'\n    Explanation: The goal is to distribute the songs such that the absolute difference in total duration between the two concerts is as small as possible.\n\n# [phrase showing quantity relationship]\n    'minimal possible difference': This indicates that we need to find the smallest absolute difference between the total durations of the two concerts. In code, this can be implemented by calculating the total duration of all songs and then trying different distributions to minimize the difference.\n\n# [degree adverb]\n    'minimal': This means the smallest possible value. In the context of the requirement, it refers to the smallest possible difference in concert durations. In code, this can be achieved by iterating through possible distributions and keeping track of the smallest difference found.\n\n# [code logic]\n    The steps \"Calculate the total duration of all songs\" and \"Determine the minimal possible difference in minutes between the two concerts\" should be considered simultaneously. This can be done by calculating the total duration first and then using a strategy (like dynamic programming or greedy) to find the minimal difference in one code block.\n\n# [edge case]\n    1. (1, 0, 0) = 1\n       Explanation: With only one one-minute song, the minimal difference is 1 since one concert will have the song and the other will have none.\n    2. (0, 0, 0) = 0\n       Explanation: If there are no songs, the difference is 0 because both concerts have a duration of 0.\n    3. (1, 1, 1) = 0\n       Explanation: As given in the example, the songs can be distributed to achieve a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where there are no songs or only one type of song.\n    ```python\n    if a == 0 and b == 0 and c == 0:\n        return 0\n    if a + b + c == 1:\n        return max(a, b, c)\n    # Continue with the original logic for other cases\n    ```\n\nYES", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If the total duration is odd, the minimal difference is 1\n        if total_duration % 2 == 1:\n            results.append(1)\n        else:\n            # If the total duration is even, the minimal difference can be 0\n            results.append(0)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case.\",\n      \"input\": \"A string containing multiple lines, where the first line is the number of test cases, and each subsequent line contains three integers representing the number of one-minute, two-minute, and three-minute songs.\",\n      \"output\": \"A list of tuples, each containing three integers (a, b, c) for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, calculate the total duration of all songs and determine the minimal possible difference in minutes between the two concerts.\",\n      \"input\": \"A tuple of three integers (a, b, c) representing the number of one-minute, two-minute, and three-minute songs.\",\n      \"output\": \"An integer representing the minimal possible difference in minutes between the two concerts.\"\n    },\n    {\n      \"description\": \"Output the minimal possible difference for each test case.\",\n      \"input\": \"A list of integers, each representing the minimal possible difference for a test case.\",\n      \"output\": \"A string with each integer on a new line.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input from standard input and parse it to extract the number of test cases and the song counts for each test case.\",\n    \"For each test case, calculate the total duration of all songs as a * 1 + b * 2 + c * 3.\",\n    \"Determine the minimal possible difference in minutes between the two concerts by considering all possible distributions of songs.\",\n    \"Store the result for each test case.\",\n    \"Output the results for all test cases, each on a new line.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'divide all songs between two concerts': This means that each song must be assigned to one of the two concerts, and no song can be left out or assigned to both concerts.\n\n    'minimal possible difference': This refers to finding the smallest difference in total duration between the two concerts after distributing the songs.\n\n# [phrase showing quantity relationship]\n    'each song is included in exactly one concert': This implies that the sum of songs in both concerts must equal the total number of songs, and no song can be shared or omitted.\n\n# [degree adverb] \n    'minimal': This indicates that the goal is to achieve the smallest possible difference in duration between the two concerts.\n\n# [code logic]\n    The steps to calculate the total duration and determine the minimal possible difference should be considered simultaneously. Specifically, calculating the total duration and then iterating through possible distributions to find the minimal difference can be done in a single loop or function.\n\n# [edge case] \n    (1, 0, 0) = 1\n    Explanation: With only one one-minute song, the minimal difference is 1 since it must be assigned to one concert.\n    \n    (0, 0, 0) = 0\n    Explanation: With no songs, the difference is naturally 0 as there are no durations to compare.\n    \n    (1, 1, 1) = 0\n    Explanation: As in the example, one possible distribution is one one-minute and one two-minute song in one concert, and the three-minute song in the other, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the number of songs is very small or zero.\n    ```python\n    if a == 0 and b == 0 and c == 0:\n        return 0\n    if a + b + c == 1:\n        return a * 1 + b * 2 + c * 3\n    ```\n\nYES", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        # The minimal possible difference is the remainder when total_duration is divided by 2\n        minimal_diff = total_duration % 2\n        results.append(minimal_diff)\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    test_cases = [tuple(map(int, line.split())) for line in data[1:t+1]]\n    \n    results = minimal_difference(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case.\",\n      \"input\": \"A string containing multiple lines, where the first line is the number of test cases, and each subsequent line contains three integers representing the number of one-minute, two-minute, and three-minute songs.\",\n      \"output\": \"A list of tuples, each containing three integers (a, b, c) for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, calculate the total duration of all songs and determine the minimal possible difference in minutes between the two concerts.\",\n      \"input\": \"A tuple of three integers (a, b, c) representing the number of one-minute, two-minute, and three-minute songs.\",\n      \"output\": \"An integer representing the minimal possible difference in minutes between the two concerts.\"\n    },\n    {\n      \"description\": \"Output the minimal possible difference for each test case.\",\n      \"input\": \"A list of integers, each representing the minimal possible difference for a test case.\",\n      \"output\": \"A string where each line contains the minimal possible difference for a test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input from standard input and parse it to extract the number of test cases and the song counts for each test case.\",\n    \"For each test case, calculate the total duration of all songs as a*1 + b*2 + c*3.\",\n    \"Determine the minimal possible difference in minutes between the two concerts by trying to distribute the songs such that the difference is minimized.\",\n    \"Store the result for each test case.\",\n    \"Output the results for all test cases, each on a new line.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimal possible difference'\n    Explanation: The requirement is to divide the songs into two groups (concerts) such that the absolute difference in their total durations is minimized.\n\n# [phrase showing quantity relationship]\n    'each song is included in exactly one concert': This means that no song can be shared between the two concerts, and each song must be assigned to one of the concerts.\n    'minimal possible difference': This implies finding the smallest absolute difference between the total durations of the two concerts.\n\n# [degree adverb]\n    'minimal': This indicates that the goal is to achieve the smallest possible difference in the total durations of the two concerts.\n\n# [code logic]\n    The steps to calculate the total duration and determine the minimal possible difference should be considered simultaneously. Specifically, calculating the total duration and then attempting to distribute the songs to minimize the difference should be done in a cohesive manner, likely within a loop or recursive function that explores different distributions.\n\n# [edge case]\n    1 0 0 = 1\n    Explanation: With only one one-minute song, the minimal difference is 1 since one concert will have 1 minute and the other will have 0 minutes.\n    \n    0 0 0 = 0\n    Explanation: With no songs, both concerts have 0 minutes, so the difference is 0.\n    \n    1 1 1 = 0\n    Explanation: As explained in the example, one possible distribution is one one-minute song and one two-minute song in one concert, and the three-minute song in the other, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the number of songs is very small or zero.\n    ```python\n    if a == 0 and b == 0 and c == 0:\n        return 0\n    if a + b + c == 1:\n        return a + 2*b + 3*c\n    ```\n\nYES", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If the total duration is odd, the minimal difference is 1\n        if total_duration % 2 != 0:\n            results.append(1)\n        else:\n            results.append(0)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    test_cases = [tuple(map(int, line.split())) for line in data[1:t+1]]\n    \n    results = minimal_difference(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case.\",\n      \"input\": \"A string containing multiple lines, where the first line is the number of test cases, and each subsequent line contains three integers representing the number of one-minute, two-minute, and three-minute songs.\",\n      \"output\": \"A list of tuples, each containing three integers (a, b, c) for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, calculate the total duration of all songs and determine the minimal possible difference in minutes between the two concerts.\",\n      \"input\": \"A tuple of three integers (a, b, c) representing the number of one-minute, two-minute, and three-minute songs.\",\n      \"output\": \"An integer representing the minimal possible difference in minutes between the two concerts.\"\n    },\n    {\n      \"description\": \"Output the minimal possible difference for each test case.\",\n      \"input\": \"A list of integers, each representing the minimal possible difference for a test case.\",\n      \"output\": \"A string with each integer on a new line.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input from standard input and parse it to extract the number of test cases and the song counts for each test case.\",\n    \"For each test case, calculate the total duration of all songs as a * 1 + b * 2 + c * 3.\",\n    \"Determine the minimal possible difference in minutes between the two concerts by considering all possible ways to distribute the songs between the two concerts.\",\n    \"For each test case, store the minimal possible difference.\",\n    \"Output the minimal possible difference for each test case, each on a new line.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimal possible difference'\n    Explanation: The requirement is to divide songs between two concerts such that the absolute difference in their total durations is minimized.\n\n# [phrase showing quantity relationship]\n    'minimal possible difference': This means finding the smallest possible absolute difference between the total durations of the two concerts.\n\n# [degree adverb] \n    'minimal': This indicates that the goal is to achieve the smallest possible difference in concert durations.\n\n# [code logic]\n    The steps to calculate the total duration and determine the minimal possible difference should be considered simultaneously. This involves calculating the total duration and then exploring all possible distributions of songs to minimize the difference.\n\n# [edge case] \n    (1, 0, 0) = 1\n    Explanation: With only one one-minute song, the minimal difference is 1 since it can only be placed in one concert.\n    (0, 0, 0) = 0\n    Explanation: No songs are present, so the difference is 0.\n    (1, 1, 1) = 0\n    Explanation: As shown in the example, the songs can be distributed to achieve a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the number of songs is very small or zero.\n        if a == 0 and b == 0 and c == 0:\n            return 0\n        if a + b + c == 1:\n            return a * 1 + b * 2 + c * 3\n\nYES", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If total duration is odd, the minimal difference is 1\n        if total_duration % 2 == 1:\n            results.append(1)\n        else:\n            results.append(0)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    test_cases = [tuple(map(int, line.split())) for line in data[1:t+1]]\n    \n    results = minimal_difference(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the first line, which represents the number of test cases.\",\n        \"For each test case, read the integers a, b, c from the subsequent lines, representing the number of one-minute, two-minute, and three-minute songs.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the total duration of songs for each test case.\",\n      \"steps\": [\n        \"For each test case, calculate the total duration of songs as total_duration = a * 1 + b * 2 + c * 3.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the minimal possible difference in minutes between the concerts durations.\",\n      \"steps\": [\n        \"For each test case, iterate over possible distributions of songs between two concerts.\",\n        \"Calculate the duration of each concert and the difference between them.\",\n        \"Track the minimal difference encountered during the iteration.\"\n      ]\n    },\n    {\n      \"description\": \"Output the minimal possible difference for each test case.\",\n      \"steps\": [\n        \"For each test case, print the minimal difference calculated.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and song counts for each test case.\",\n    \"For each test case, calculate the total duration of songs.\",\n    \"For each test case, iterate over possible distributions of songs between two concerts to find the minimal difference in durations.\",\n    \"Output the minimal difference for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimal possible difference'\n    Explanation: The requirement is to divide songs between two concerts such that the difference in total duration of songs between the two concerts is minimized.\n\n# [phrase showing quantity relationship]\n    'minimal possible difference': This means finding the smallest absolute difference between the total durations of songs in two concerts.\n\n# [degree adverb] \n    'minimal': This indicates that the goal is to achieve the smallest possible difference in concert durations.\n\n# [code logic]\n    The steps for calculating the total duration and iterating over possible distributions should be considered simultaneously. Specifically, the calculation of total duration and the iteration over possible distributions can be integrated into a single loop for efficiency.\n\n# [edge case] \n    1 0 0 = 1\n    Explanation: With one one-minute song and no other songs, the minimal difference is 1 since the song must be placed in one concert.\n    0 0 0 = 0\n    Explanation: With no songs, the difference is 0 as both concerts have a duration of 0.\n    1 1 1 = 0\n    Explanation: As shown in the example, the songs can be distributed to achieve a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where there are no songs or only one type of song.\n        if a == 0 and b == 0 and c == 0:\n            print(0)\n        elif a == 0 and b == 0:\n            print(c)\n        elif a == 0 and c == 0:\n            print(b * 2)\n        elif b == 0 and c == 0:\n            print(a)\n        else:\n            # (other code for handling general cases)\n\nYES", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Handle edge cases\n        if a == 0 and b == 0 and c == 0:\n            results.append(0)\n            continue\n        elif a == 0 and b == 0:\n            results.append(c)\n            continue\n        elif a == 0 and c == 0:\n            results.append(b * 2)\n            continue\n        elif b == 0 and c == 0:\n            results.append(a)\n            continue\n        \n        # General case\n        min_difference = total_duration  # Start with the maximum possible difference\n        for x in range(a + 1):\n            for y in range(b + 1):\n                for z in range(c + 1):\n                    concert1_duration = x * 1 + y * 2 + z * 3\n                    concert2_duration = total_duration - concert1_duration\n                    difference = abs(concert1_duration - concert2_duration)\n                    min_difference = min(min_difference, difference)\n        \n        results.append(min_difference)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: timed out"}, "Round_1": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # The minimal possible difference is the remainder when total_duration is divided by 2\n        min_difference = total_duration % 2\n        \n        results.append(min_difference)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case.\",\n      \"input\": \"A string containing multiple lines, where the first line is the number of test cases, and each subsequent line contains three integers representing the number of one-minute, two-minute, and three-minute songs.\",\n      \"output\": \"A list of tuples, each containing three integers (a, b, c) for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, calculate the total duration of all songs and determine the minimal possible difference in minutes between the two concerts.\",\n      \"input\": \"A tuple of three integers (a, b, c) representing the number of one-minute, two-minute, and three-minute songs.\",\n      \"output\": \"An integer representing the minimal possible difference in minutes between the two concerts.\"\n    },\n    {\n      \"description\": \"Output the minimal possible difference for each test case.\",\n      \"input\": \"A list of integers, each representing the minimal possible difference for a test case.\",\n      \"output\": \"A string with each integer on a new line.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input from standard input and parse it to extract the number of test cases and the song counts for each test case.\",\n    \"For each test case, calculate the total duration of all songs as a * 1 + b * 2 + c * 3.\",\n    \"Determine the minimal possible difference in minutes between the two concerts by exploring possible distributions of songs between the two concerts.\",\n    \"Store the result for each test case.\",\n    \"Output the results for all test cases, each on a new line.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimal possible difference'\n    Explanation: The requirement is to divide songs between two concerts such that the absolute difference in total duration of songs in each concert is minimized.\n\n# [phrase showing quantity relationship]\n    'between two concerts'\n    Explanation: This indicates that the songs must be divided into two groups, each representing a concert, and the difference in their total durations should be calculated.\n    Implementation: Use a method to explore all possible distributions of songs between the two concerts and calculate the difference in their durations.\n\n# [degree adverb]\n    'minimal'\n    Explanation: The goal is to achieve the smallest possible difference in duration between the two concerts.\n    Implementation: Use an algorithm to find the distribution of songs that results in the smallest difference in total duration.\n\n# [code logic]\n    The steps \"Calculate the total duration of all songs\" and \"Determine the minimal possible difference in minutes between the two concerts\" should be considered simultaneously.\n    Implementation: Calculate the total duration first, then use this information to explore distributions and find the minimal difference.\n\n# [edge case]\n    Edge Case 1: (1, 0, 0) = 1\n    Explanation: With only one one-minute song, the minimal difference is 1 since it can only be placed in one concert.\n    \n    Edge Case 2: (0, 0, 0) = 0\n    Explanation: No songs are present, so the difference is 0.\n    \n    Edge Case 3: (1, 1, 1) = 0\n    Explanation: The songs can be distributed such that the total duration of each concert is equal, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Implementation:\n    ```python\n    def minimal_difference(t, test_cases):\n        results = []\n        for a, b, c in test_cases:\n            total_duration = a * 1 + b * 2 + c * 3\n            # Check if total_duration is odd or even\n            if total_duration % 2 == 0:\n                results.append(0)\n            else:\n                results.append(1)\n        return results\n    ```\n\nYES", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        # Check if total_duration is odd or even\n        if total_duration % 2 == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    test_cases = []\n    \n    for i in range(1, t + 1):\n        a, b, c = map(int, data[i].split())\n        test_cases.append((a, b, c))\n    \n    results = minimal_difference(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the first line, which represents the number of test cases.\",\n        \"For each test case, read the integers a, b, c from the subsequent lines, representing the number of one-minute, two-minute, and three-minute songs.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the total duration of songs for each test case.\",\n      \"steps\": [\n        \"For each test case, calculate the total duration of songs as total_duration = a * 1 + b * 2 + c * 3.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the minimal possible difference in minutes between the concerts durations.\",\n      \"steps\": [\n        \"For each test case, iterate over possible distributions of songs between two concerts.\",\n        \"Calculate the duration of each concert and the difference between them.\",\n        \"Track the minimal difference encountered during the iteration.\"\n      ]\n    },\n    {\n      \"description\": \"Output the minimal possible difference for each test case.\",\n      \"steps\": [\n        \"For each test case, print the minimal difference calculated.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and song counts for each test case.\",\n    \"For each test case, calculate the total duration of songs.\",\n    \"For each test case, iterate over possible distributions of songs between two concerts to find the minimal difference in durations.\",\n    \"Output the minimal difference for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimal possible difference'\n    Explanation: The requirement is to divide songs between two concerts such that the difference in total duration of songs between the two concerts is minimized.\n\n# [phrase showing quantity relationship]\n    'minimal possible difference': This means finding the smallest difference in total duration between the two concerts. In code, this involves iterating over possible distributions and calculating the absolute difference between the total durations of the two concerts.\n\n# [degree adverb] \n    'minimal': This indicates that the goal is to achieve the smallest possible difference in concert durations. In code, this can be implemented by keeping track of the smallest difference encountered during the iteration over possible distributions.\n\n# [code logic]\n    The steps for calculating the total duration and determining the minimal possible difference should be considered simultaneously. Specifically, while iterating over possible distributions, the calculation of concert durations and the tracking of minimal difference should occur in the same loop.\n\n# [edge case] \n    1 0 0 = 1\n    Explanation: With only one one-minute song, the minimal difference is 1, as one concert will have 1 minute and the other will have 0 minutes.\n    \n    0 0 0 = 0\n    Explanation: With no songs, both concerts have a duration of 0, so the minimal difference is 0.\n    \n    1 1 1 = 0\n    Explanation: As shown in the example, the songs can be distributed to achieve a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where there are no songs or only one type of song.\n        if a == 0 and b == 0 and c == 0:\n            print(0)\n        elif a == 0 and b == 0:\n            print(c)\n        elif a == 0 and c == 0:\n            print(b * 2)\n        elif b == 0 and c == 0:\n            print(a)\n        (other code for general case)\n\nYES", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If total duration is odd, the minimal difference is 1\n        if total_duration % 2 != 0:\n            results.append(1)\n        else:\n            # If total duration is even, check if we can split it evenly\n            half_duration = total_duration // 2\n            # Check if it's possible to reach exactly half_duration\n            # Using dynamic programming to check if we can reach half_duration\n            dp = [False] * (half_duration + 1)\n            dp[0] = True\n            \n            # Check one-minute songs\n            for _ in range(a):\n                for j in range(half_duration, 0, -1):\n                    if j >= 1 and dp[j - 1]:\n                        dp[j] = True\n            \n            # Check two-minute songs\n            for _ in range(b):\n                for j in range(half_duration, 1, -1):\n                    if j >= 2 and dp[j - 2]:\n                        dp[j] = True\n            \n            # Check three-minute songs\n            for _ in range(c):\n                for j in range(half_duration, 2, -1):\n                    if j >= 3 and dp[j - 3]:\n                        dp[j] = True\n            \n            # If we can reach exactly half_duration, the minimal difference is 0\n            if dp[half_duration]:\n                results.append(0)\n            else:\n                results.append(1)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: timed out"}, "Round_1": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If total duration is odd, the minimal difference is 1\n        if total_duration % 2 != 0:\n            results.append(1)\n        else:\n            # If total duration is even, check if we can split it evenly\n            half_duration = total_duration // 2\n            # Check if it's possible to reach exactly half_duration\n            # Using dynamic programming to check if we can reach half_duration\n            dp = [False] * (half_duration + 1)\n            dp[0] = True\n            \n            # Check one-minute songs\n            for _ in range(a):\n                for j in range(half_duration, 0, -1):\n                    if j >= 1 and dp[j - 1]:\n                        dp[j] = True\n            \n            # Check two-minute songs\n            for _ in range(b):\n                for j in range(half_duration, 1, -1):\n                    if j >= 2 and dp[j - 2]:\n                        dp[j] = True\n            \n            # Check three-minute songs\n            for _ in range(c):\n                for j in range(half_duration, 2, -1):\n                    if j >= 3 and dp[j - 3]:\n                        dp[j] = True\n            \n            # If we can reach exactly half_duration, the minimal difference is 0\n            if dp[half_duration]:\n                results.append(0)\n            else:\n                results.append(1)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the first line, which represents the number of test cases.\",\n        \"For each test case, read the integers a, b, c from the subsequent lines, representing the number of one-minute, two-minute, and three-minute songs.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the total duration of songs for each test case.\",\n      \"steps\": [\n        \"For each test case, calculate the total duration of songs as total_duration = a * 1 + b * 2 + c * 3.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the minimal possible difference in minutes between the concerts durations.\",\n      \"steps\": [\n        \"For each test case, find a way to divide the songs into two groups such that the absolute difference between the total durations of the two groups is minimized.\",\n        \"Consider the possible combinations of songs to achieve the minimal difference.\"\n      ]\n    },\n    {\n      \"description\": \"Output the minimal possible difference for each test case.\",\n      \"steps\": [\n        \"For each test case, print the minimal possible difference calculated in the previous step.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the song durations for each test case.\",\n    \"For each test case, calculate the total duration of all songs.\",\n    \"Determine the minimal possible difference in minutes between the durations of two concerts by considering different combinations of songs.\",\n    \"Output the minimal possible difference for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'divide': means that each song must be assigned to one of the two concerts, ensuring no song is left out or duplicated.\n    'minimal possible difference': means that the goal is to make the total duration of songs in each concert as close as possible.\n\n# [phrase showing quantity relationship]\n    'exactly one': means each song must be included in one concert only, not both.\n    'minimal possible difference': means the difference in total duration between the two concerts should be as small as possible.\n\n# [degree adverb] \n    'minimal': means the smallest possible difference in duration between the two concerts.\n\n# [code logic]\n    The steps for calculating the total duration and determining the minimal possible difference should be considered simultaneously. This involves iterating through possible combinations of songs to find the optimal distribution that minimizes the difference.\n\n# [edge case] \n    Test case: 1 0 0 = 1\n    Explanation: With only one one-minute song, the minimal difference is 1 since it must be assigned to one concert.\n    \n    Test case: 0 0 0 = 0\n    Explanation: With no songs, the difference is 0 as both concerts have a duration of 0.\n    \n    Test case: 1 1 0 = 1\n    Explanation: Assigning one one-minute song to one concert and one two-minute song to the other results in a difference of 1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the number of songs is very small or zero.\n        if a == 0 and b == 0 and c == 0:\n            print(0)\n        elif a + b + c == 1:\n            print(max(a, b, c))\n        else:\n            # Implement logic to find minimal difference\n\nYES", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If there are no songs, the difference is 0\n        if a == 0 and b == 0 and c == 0:\n            results.append(0)\n            continue\n        \n        # If there is only one song, the difference is the duration of that song\n        if a + b + c == 1:\n            results.append(max(a, b, c))\n            continue\n        \n        # Calculate the minimal possible difference\n        # The idea is to check if the total duration is odd or even\n        # If even, the minimal difference is 0, if odd, the minimal difference is 1\n        if total_duration % 2 == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the first line, which represents the number of test cases.\",\n        \"For each test case, read the integers a, b, c from the subsequent lines, representing the number of one-minute, two-minute, and three-minute songs.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the total duration of songs for each test case.\",\n      \"steps\": [\n        \"For each test case, calculate the total duration of songs as total_duration = a * 1 + b * 2 + c * 3.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the minimal possible difference in minutes between the concerts durations.\",\n      \"steps\": [\n        \"For each test case, find a way to divide the songs into two groups such that the absolute difference between the total durations of the two groups is minimized.\",\n        \"Consider the possible combinations of songs to achieve the minimal difference.\"\n      ]\n    },\n    {\n      \"description\": \"Output the minimal possible difference for each test case.\",\n      \"steps\": [\n        \"Print the minimal possible difference for each test case.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and song durations for each test case.\",\n    \"For each test case, calculate the total duration of all songs.\",\n    \"For each test case, determine the minimal possible difference in minutes between the concerts durations by considering possible combinations of songs.\",\n    \"Output the minimal possible difference for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimal possible difference'\n    Explanation: The requirement is to divide songs into two concerts such that the absolute difference in their total durations is minimized.\n\n# [phrase showing quantity relationship]\n    'difference in minutes'\n    Explanation: This refers to the absolute difference in the total duration of songs between the two concerts. In code, this can be implemented using the absolute value function, e.g., `abs(duration_concert1 - duration_concert2)`.\n\n# [degree adverb] \n    'minimal'\n    Explanation: This means the smallest possible value of the difference between the durations of the two concerts. In code, this involves finding combinations of songs that result in the smallest absolute difference.\n\n# [code logic]\n    The steps for calculating the total duration and determining the minimal possible difference should be considered simultaneously. Specifically, while calculating the total duration, we should also consider how to split the songs to achieve the minimal difference. This can be done using a dynamic programming approach or a greedy algorithm to explore possible combinations.\n\n# [edge case] \n    Test case: 1 0 0 = 1\n    Explanation: With only one one-minute song, the minimal difference is 1 since it cannot be split.\n    \n    Test case: 0 0 0 = 0\n    Explanation: With no songs, the difference is 0.\n    \n    Test case: 1 1 0 = 0\n    Explanation: One one-minute song and one two-minute song can be split into two concerts with durations 1 and 2, resulting in a difference of 1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the number of songs is very small or zero.\n    ```python\n    if a == 0 and b == 0 and c == 0:\n        print(0)\n    elif a + b + c == 1:\n        print(min(a, b, c))\n    else:\n        # Implement logic to find minimal difference\n    ```\n\nNO", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # The minimal difference can be found by checking the parity of the total duration\n        if total_duration % 2 == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case.\",\n      \"input\": \"A string containing multiple lines, where the first line is the number of test cases, and each subsequent line contains three integers representing the number of one-minute, two-minute, and three-minute songs.\",\n      \"output\": \"A list of tuples, each containing three integers (a, b, c) for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, calculate the total duration of all songs and determine the minimal possible difference in minutes between the two concerts.\",\n      \"input\": \"A tuple of three integers (a, b, c) representing the number of one-minute, two-minute, and three-minute songs.\",\n      \"output\": \"An integer representing the minimal possible difference in minutes between the two concerts.\"\n    },\n    {\n      \"description\": \"Output the minimal possible difference for each test case.\",\n      \"input\": \"A list of integers, each representing the minimal possible difference for a test case.\",\n      \"output\": \"A string with each integer on a new line.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input from standard input and parse it to extract the number of test cases and the song counts for each test case.\",\n    \"For each test case, calculate the total duration of all songs as a * 1 + b * 2 + c * 3.\",\n    \"Determine the minimal possible difference in minutes between the two concerts by considering all possible ways to distribute the songs between the two concerts.\",\n    \"For each test case, store the minimal possible difference.\",\n    \"Output the minimal possible difference for each test case, each on a new line.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimal possible difference'\n    Explanation: The requirement is to divide the songs into two concerts such that the absolute difference in total duration between the two concerts is minimized.\n\n# [phrase showing quantity relationship]\n    'each song is included in exactly one concert': This means that no song can be shared between concerts, and each song must be assigned to one of the two concerts.\n    'minimal possible difference': This refers to finding the smallest absolute difference in total duration between the two concerts.\n\n# [degree adverb] \n    'minimal': This indicates that the goal is to achieve the smallest possible difference in duration between the two concerts.\n\n# [code logic]\n    The steps to calculate the total duration and determine the minimal possible difference should be considered simultaneously. Specifically, calculating the total duration and then exploring all possible distributions of songs to minimize the difference should be done in a cohesive manner.\n\n# [edge case] \n    1. (1, 0, 0) = 1\n       Explanation: With only one one-minute song, the minimal difference is 1 since it must be assigned to one concert.\n    2. (0, 0, 0) = 0\n       Explanation: If there are no songs, the difference is naturally 0.\n    3. (1, 1, 1) = 0\n       Explanation: As given in the example, the songs can be distributed to achieve a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where there are no songs or only one type of song.\n    ```python\n    if a == 0 and b == 0 and c == 0:\n        return 0\n    if a + b + c == 1:\n        return a * 1 + b * 2 + c * 3\n    ```\n\nYES", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If total duration is odd, the minimal difference is 1\n        if total_duration % 2 != 0:\n            results.append(1)\n        else:\n            # If total duration is even, the minimal difference is 0\n            results.append(0)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    test_cases = [tuple(map(int, line.split())) for line in data[1:t+1]]\n    \n    results = minimal_difference(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 218, "prompt": "Luntik wants to divide all songs between two concerts such that each song is included in exactly one concert.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "rephrase_one", "save_node": false, "parent_index": 139}
