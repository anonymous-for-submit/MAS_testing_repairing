{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "repair_prompt": ["Luntik wants to allocate all songs between two concerts, ensuring each song is part of precisely one concert.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Luntik wants to allocate all songs between two concerts, ensuring each song is part of precisely one concert. He must make certain that no song appears in more than one concert. Every song should be unique to either the first or the second concert.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Luntik wants to allocate all songs between two concerts, ensuring each song is part of one concert only.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Edge cases\n        if a == 0 and b == 0 and c == 0:\n            results.append(0)\n            continue\n        if a + b + c == 1:\n            results.append(total_duration)\n            continue\n        \n        # Dynamic programming approach to find the closest sum to half of total_duration\n        half_duration = total_duration // 2\n        dp = [False] * (half_duration + 1)\n        dp[0] = True\n        \n        for _ in range(a):\n            for j in range(half_duration, 0, -1):\n                if j >= 1:\n                    dp[j] = dp[j] or dp[j - 1]\n        \n        for _ in range(b):\n            for j in range(half_duration, 0, -1):\n                if j >= 2:\n                    dp[j] = dp[j] or dp[j - 2]\n        \n        for _ in range(c):\n            for j in range(half_duration, 0, -1):\n                if j >= 3:\n                    dp[j] = dp[j] or dp[j - 3]\n        \n        closest_sum = 0\n        for i in range(half_duration + 1):\n            if dp[i]:\n                closest_sum = i\n        \n        minimal_diff = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_diff)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nmain()", "completions": ["def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Handle edge cases\n        if a == 0 and b == 0 and c == 0:\n            results.append(0)\n            continue\n        if a + b + c == 1:\n            results.append(1)\n            continue\n        \n        # Calculate minimal possible difference\n        # The strategy is to check if the total duration is even or odd\n        if total_duration % 2 == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        # Calculate total duration\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Edge cases\n        if a == 0 and b == 0 and c == 0:\n            results.append(0)\n            continue\n        if a + b + c == 1:\n            results.append(max(a, b, c))\n            continue\n        \n        # Calculate minimal possible difference\n        # The idea is to check if the total duration is even or odd\n        if total_duration % 2 == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Edge cases\n        if a == 0 and b == 0 and c == 0:\n            results.append(0)\n            continue\n        if a + b + c == 1:\n            results.append(total_duration)\n            continue\n        \n        # Calculate minimal possible difference\n        # We need to find the closest sum to half of total_duration\n        half_duration = total_duration // 2\n        possible_sums = {0}\n        \n        for _ in range(a):\n            possible_sums.update({x + 1 for x in possible_sums})\n        for _ in range(b):\n            possible_sums.update({x + 2 for x in possible_sums})\n        for _ in range(c):\n            possible_sums.update({x + 3 for x in possible_sums})\n        \n        closest_sum = max(x for x in possible_sums if x <= half_duration)\n        minimal_diff = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_diff)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = [(int(data[i]), int(data[i+1]), int(data[i+2])) for i in range(1, len(data), 3)]\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        # Calculate total duration\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Edge cases\n        if a == 0 and b == 0 and c == 0:\n            results.append(0)\n            continue\n        elif a + b + c == 1:\n            results.append(1)\n            continue\n        \n        # Calculate minimal possible difference\n        # The idea is to check if the total duration is even or odd\n        if total_duration % 2 == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # The minimal difference can be found by checking if the total duration is even or odd\n        if total_duration % 2 == 1:\n            results.append(1)\n        else:\n            results.append(0)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If total_duration is odd, the minimal difference is 1\n        if total_duration % 2 != 0:\n            results.append(1)\n        else:\n            # If total_duration is even, the minimal difference is 0\n            results.append(0)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    test_cases = [tuple(map(int, line.split())) for line in data[1:t+1]]\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nmain()", "def minimal_difference_between_concerts():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    results = []\n    \n    for i in range(1, t + 1):\n        a, b, c = map(int, data[i].split())\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Determine the minimal possible difference\n        if total_duration % 2 == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    \n    for result in results:\n        print(result)\n\nminimal_difference_between_concerts()\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        half_duration = total_duration // 2\n        \n        # Initialize a DP array to track possible sums\n        dp = [False] * (half_duration + 1)\n        dp[0] = True\n        \n        # Process each song type\n        for duration, count in [(1, a), (2, b), (3, c)]:\n            for _ in range(count):\n                for j in range(half_duration, duration - 1, -1):\n                    if dp[j - duration]:\n                        dp[j] = True\n        \n        # Find the closest sum to half_duration\n        closest_sum = max(i for i, can_make in enumerate(dp) if can_make)\n        \n        # Calculate the minimal possible difference\n        difference = abs(total_duration - 2 * closest_sum)\n        results.append(difference)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = [(int(data[i * 3 + 1]), int(data[i * 3 + 2]), int(data[i * 3 + 3])) for i in range(t)]\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        if total_duration % 2 == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Edge cases\n        if a == 0 and b == 0 and c == 0:\n            results.append(0)\n            continue\n        if a + b + c == 1:\n            results.append(total_duration)\n            continue\n        \n        # Dynamic programming approach to find the closest sum to half of total_duration\n        half_duration = total_duration // 2\n        dp = [False] * (half_duration + 1)\n        dp[0] = True\n        \n        for _ in range(a):\n            for j in range(half_duration, 0, -1):\n                if j >= 1:\n                    dp[j] = dp[j] or dp[j - 1]\n        \n        for _ in range(b):\n            for j in range(half_duration, 0, -1):\n                if j >= 2:\n                    dp[j] = dp[j] or dp[j - 2]\n        \n        for _ in range(c):\n            for j in range(half_duration, 0, -1):\n                if j >= 3:\n                    dp[j] = dp[j] or dp[j - 3]\n        \n        closest_sum = 0\n        for i in range(half_duration + 1):\n            if dp[i]:\n                closest_sum = i\n        \n        minimal_diff = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_diff)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case.\",\n      \"input\": \"A single integer t followed by t lines, each containing three integers a, b, c.\",\n      \"output\": \"A list of tuples, each containing three integers (a, b, c) for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, calculate the total duration of all songs and determine the minimal possible difference in minutes between the two concerts.\",\n      \"input\": \"A tuple of three integers (a, b, c) representing the number of one-minute, two-minute, and three-minute songs.\",\n      \"output\": \"An integer representing the minimal possible difference in minutes between the two concerts.\"\n    },\n    {\n      \"description\": \"Output the minimal possible difference for each test case.\",\n      \"input\": \"A list of integers representing the minimal possible differences for each test case.\",\n      \"output\": \"Print each integer on a new line.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input to get the number of test cases and the song counts for each test case.\",\n    \"For each test case, calculate the total duration of all songs: total_duration = a * 1 + b * 2 + c * 3.\",\n    \"Determine the minimal possible difference by trying to partition the songs into two groups with the closest possible total durations.\",\n    \"Use a dynamic programming approach to find the closest possible sum to half of the total_duration.\",\n    \"Calculate the minimal difference as the absolute difference between twice the closest sum and the total_duration.\",\n    \"Store the result for each test case.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'allocate all songs between two concerts'\n    Explanation: This means that each song must be assigned to one of the two concerts, ensuring no song is left unassigned.\n\n    'minimal possible difference in minutes between the concerts durations'\n    Explanation: The goal is to distribute the songs such that the total duration of songs in each concert is as close as possible, minimizing the absolute difference in their total durations.\n\n# [phrase showing quantity relationship]\n    'precisely one concert': Each song must be assigned to exactly one concert, not both or neither.\n    \n    'minimal possible difference': This means finding the smallest absolute difference between the total durations of the two concerts.\n\n# [degree adverb]\n    'minimal': This indicates the need to find the smallest possible value for the difference in durations between the two concerts.\n\n# [code logic]\n    The steps for calculating the total duration and determining the minimal possible difference should be considered simultaneously. Specifically, calculating the total duration and using dynamic programming to partition the songs should be integrated into a single process for each test case.\n\n# [edge case]\n    1. (1, 0, 0) = 1\n       Explanation: With only one one-minute song, the minimal difference is 1 since it must be assigned to one concert.\n    2. (0, 0, 0) = 0\n       Explanation: If there are no songs, the difference is 0 as both concerts have a duration of 0.\n    3. (1, 1, 1) = 0\n       Explanation: As in the example, one possible allocation is one one-minute and one two-minute song in one concert, and the three-minute song in the other, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where there are no songs or only one type of song.\n    ```python\n    if a == 0 and b == 0 and c == 0:\n        return 0\n    if a + b + c == 1:\n        return a + 2 * b + 3 * c\n    ```\n\nYES", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Edge cases\n        if a == 0 and b == 0 and c == 0:\n            results.append(0)\n            continue\n        if a + b + c == 1:\n            results.append(total_duration)\n            continue\n        \n        # Dynamic programming approach to find the closest sum to half of total_duration\n        half_duration = total_duration // 2\n        dp = [False] * (half_duration + 1)\n        dp[0] = True\n        \n        for _ in range(a):\n            for j in range(half_duration, 0, -1):\n                if j >= 1:\n                    dp[j] = dp[j] or dp[j - 1]\n        \n        for _ in range(b):\n            for j in range(half_duration, 0, -1):\n                if j >= 2:\n                    dp[j] = dp[j] or dp[j - 2]\n        \n        for _ in range(c):\n            for j in range(half_duration, 0, -1):\n                if j >= 3:\n                    dp[j] = dp[j] or dp[j - 3]\n        \n        closest_sum = 0\n        for i in range(half_duration + 1):\n            if dp[i]:\n                closest_sum = i\n        \n        minimal_diff = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_diff)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: timed out"}, "Round_1": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Edge cases\n        if a == 0 and b == 0 and c == 0:\n            results.append(0)\n            continue\n        if a + b + c == 1:\n            results.append(total_duration)\n            continue\n        \n        # Dynamic programming approach to find the closest sum to half of total_duration\n        half_duration = total_duration // 2\n        dp = [False] * (half_duration + 1)\n        dp[0] = True\n        \n        for _ in range(a):\n            for j in range(half_duration, 0, -1):\n                if j >= 1:\n                    dp[j] = dp[j] or dp[j - 1]\n        \n        for _ in range(b):\n            for j in range(half_duration, 0, -1):\n                if j >= 2:\n                    dp[j] = dp[j] or dp[j - 2]\n        \n        for _ in range(c):\n            for j in range(half_duration, 0, -1):\n                if j >= 3:\n                    dp[j] = dp[j] or dp[j - 3]\n        \n        closest_sum = 0\n        for i in range(half_duration + 1):\n            if dp[i]:\n                closest_sum = i\n        \n        minimal_diff = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_diff)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n"}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the first line, which represents the number of test cases.\",\n        \"For each test case, read the integers a, b, c from the subsequent lines, representing the number of one-minute, two-minute, and three-minute songs.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the total duration of songs for each test case.\",\n      \"steps\": [\n        \"For each test case, calculate the total duration of songs as total_duration = a * 1 + b * 2 + c * 3.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the minimal possible difference in minutes between the concerts durations.\",\n      \"steps\": [\n        \"For each test case, find a way to split the total_duration into two parts such that the difference between the two parts is minimized.\",\n        \"Use a strategy to allocate songs to two concerts and calculate the difference in their durations.\"\n      ]\n    },\n    {\n      \"description\": \"Output the minimal possible difference for each test case.\",\n      \"steps\": [\n        \"For each test case, print the calculated minimal difference.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and song durations for each test case.\",\n    \"For each test case, calculate the total duration of all songs.\",\n    \"Implement a strategy to allocate songs between two concerts to minimize the difference in their durations.\",\n    \"Output the minimal possible difference for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'allocate': means to distribute or assign songs to two concerts.\n    'minimal possible difference': means the smallest difference in total duration between the two concerts.\n\n# [phrase showing quantity relationship]\n    'precisely one': means each song must be assigned to exactly one concert, not both.\n    'minimal possible difference': means finding the smallest possible difference in total duration between the two concerts.\n\n# [degree adverb]\n    'minimal': means the smallest possible value, in this context, the smallest difference in duration between the two concerts.\n\n# [code logic]\n    The steps in the plan related to calculating the total duration and determining the minimal possible difference should be considered simultaneously. Specifically, calculating the total duration and then immediately using that information to determine the minimal difference should be done in a cohesive block of logic.\n\n# [edge case]\n    1 0 0 = 1\n    Explanation: With only one one-minute song, the minimal difference is 1 since it must be assigned to one concert.\n    \n    0 0 0 = 0\n    Explanation: With no songs, the difference is 0 as there are no durations to compare.\n    \n    1 1 1 = 0\n    Explanation: As in the example, one possible allocation is one one-minute song and one two-minute song in one concert, and the three-minute song in the other, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the number of songs is very small or zero.\n    ```python\n    if a == 0 and b == 0 and c == 0:\n        print(0)\n        continue\n    if a + b + c == 1:\n        print(1)\n        continue\n    ```\n\nYES", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Handle edge cases\n        if a == 0 and b == 0 and c == 0:\n            results.append(0)\n            continue\n        if a + b + c == 1:\n            results.append(1)\n            continue\n        \n        # Calculate minimal possible difference\n        # The strategy is to check if the total duration is even or odd\n        if total_duration % 2 == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the first line of input, representing the number of test cases.\",\n        \"For each test case, read the integers a, b, c from the subsequent lines, representing the number of one-minute, two-minute, and three-minute songs.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the minimal possible difference in minutes between the durations of the two concerts for each test case.\",\n      \"steps\": [\n        \"For each test case, calculate the total duration of all songs: total_duration = a * 1 + b * 2 + c * 3.\",\n        \"Determine the target duration for each concert: target_duration = total_duration / 2.\",\n        \"Use a method (e.g., dynamic programming or greedy algorithm) to allocate songs to two concerts such that the difference between their durations is minimized.\",\n        \"Calculate the actual difference in durations between the two concerts.\"\n      ]\n    },\n    {\n      \"description\": \"Output the minimal possible difference for each test case.\",\n      \"steps\": [\n        \"For each test case, print the calculated minimal difference.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and song durations for each test case.\",\n    \"For each test case, calculate the total duration of all songs.\",\n    \"Determine the target duration for each concert and allocate songs to minimize the difference in durations.\",\n    \"Output the minimal possible difference for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'allocate': means distributing songs between two concerts such that each song is assigned to exactly one concert.\n    'minimal possible difference': means finding the smallest difference in total duration between the two concerts.\n\n# [phrase showing quantity relationship]\n    'precisely one': means each song must be assigned to exactly one concert, not both.\n    'minimal possible difference': means the goal is to make the difference in total duration between the two concerts as small as possible.\n\n# [degree adverb]\n    'minimal': means the smallest possible difference in duration between the two concerts.\n\n# [code logic]\n    The steps for calculating the total duration and determining the target duration should be considered simultaneously. Specifically, calculating the total duration and then using it to determine the target duration for each concert can be done in a single code block.\n\n# [edge case]\n    1. (1, 0, 0) = 1\n       Explanation: With only one one-minute song, the difference is 1 since it can only be assigned to one concert.\n    2. (0, 0, 0) = 0\n       Explanation: No songs to allocate, so the difference is 0.\n    3. (1, 1, 1) = 0\n       Explanation: As in the example, one possible allocation is one one-minute and one two-minute song in one concert, and the three-minute song in the other, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where there are no songs or only one song.\n    ```python\n    if a == 0 and b == 0 and c == 0:\n        return 0\n    if a + b + c == 1:\n        return max(a, b, c)\n    ```\n\nYES", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        # Calculate total duration\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Edge cases\n        if a == 0 and b == 0 and c == 0:\n            results.append(0)\n            continue\n        if a + b + c == 1:\n            results.append(max(a, b, c))\n            continue\n        \n        # Calculate minimal possible difference\n        # The idea is to check if the total duration is even or odd\n        if total_duration % 2 == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the first line of input, which represents the number of test cases.\",\n        \"For each test case, read the integers a, b, and c from the input, representing the number of one-minute, two-minute, and three-minute songs respectively.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the minimal possible difference in minutes between the durations of the two concerts for each test case.\",\n      \"steps\": [\n        \"For each test case, calculate the total duration of all songs as total_duration = a * 1 + b * 2 + c * 3.\",\n        \"Determine if it's possible to split the songs into two groups such that the difference in their total durations is minimized.\",\n        \"Use a dynamic programming approach or a greedy strategy to find the minimal difference between the two groups.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"For each test case, output the minimal possible difference in minutes between the two concerts.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the song counts for each test case.\",\n    \"For each test case, calculate the total duration of all songs.\",\n    \"Implement a strategy to split the songs into two groups with minimal difference in total duration.\",\n    \"Output the minimal difference for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'allocate': means to distribute or assign songs to two concerts.\n    'minimal possible difference': means the smallest difference in total duration between the two concerts.\n\n# [phrase showing quantity relationship]\n    'one-minute, two-minute, three-minute': refers to the duration of each type of song.\n    'minimal possible difference': means finding the smallest difference in total duration between the two concerts.\n\n# [degree adverb] \n    'minimal': means the smallest possible value for the difference in total duration between the two concerts.\n\n# [code logic]\n    The steps for calculating the total duration and determining the minimal difference should be considered simultaneously. Specifically, calculating the total duration and then using a strategy (dynamic programming or greedy) to split the songs should be done in a cohesive manner to ensure the minimal difference is achieved.\n\n# [edge case] \n    1 0 0 = 1\n    Explanation: With only one one-minute song, the minimal difference is the duration of that song itself, as it cannot be split.\n    \n    0 0 0 = 0\n    Explanation: With no songs, the difference is naturally zero since both concerts have a duration of zero.\n    \n    1 1 1 = 0\n    Explanation: As explained in the example, the songs can be split to achieve a zero difference.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the number of songs is very small or zero.\n    ```python\n    if a == 0 and b == 0 and c == 0:\n        print(0)\n        continue\n    if a + b + c == 1:\n        print(a * 1 + b * 2 + c * 3)\n        continue\n    ```\n\nYES", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Edge cases\n        if a == 0 and b == 0 and c == 0:\n            results.append(0)\n            continue\n        if a + b + c == 1:\n            results.append(total_duration)\n            continue\n        \n        # Calculate minimal possible difference\n        # We need to find the closest sum to half of total_duration\n        half_duration = total_duration // 2\n        possible_sums = {0}\n        \n        for _ in range(a):\n            possible_sums.update({x + 1 for x in possible_sums})\n        for _ in range(b):\n            possible_sums.update({x + 2 for x in possible_sums})\n        for _ in range(c):\n            possible_sums.update({x + 3 for x in possible_sums})\n        \n        closest_sum = max(x for x in possible_sums if x <= half_duration)\n        minimal_diff = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_diff)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = [(int(data[i]), int(data[i+1]), int(data[i+2])) for i in range(1, len(data), 3)]\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: timed out"}, "Round_1": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Edge cases\n        if a == 0 and b == 0 and c == 0:\n            results.append(0)\n            continue\n        if a + b + c == 1:\n            results.append(total_duration)\n            continue\n        \n        # Calculate minimal possible difference\n        # We need to find the closest sum to half of total_duration\n        half_duration = total_duration // 2\n        possible_sums = {0}\n        \n        for _ in range(a):\n            possible_sums.update({x + 1 for x in possible_sums})\n        for _ in range(b):\n            possible_sums.update({x + 2 for x in possible_sums})\n        for _ in range(c):\n            possible_sums.update({x + 3 for x in possible_sums})\n        \n        closest_sum = max(x for x in possible_sums if x <= half_duration)\n        minimal_diff = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_diff)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = [(int(data[i]), int(data[i+1]), int(data[i+2])) for i in range(1, len(data), 3)]\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the song durations for each test case.\",\n      \"details\": \"Read the integer t from the first line, then read the subsequent lines to get the integers a, b, c for each test case.\"\n    },\n    {\n      \"description\": \"Calculate the total duration of songs for each test case.\",\n      \"details\": \"For each test case, compute the total duration as total_duration = a * 1 + b * 2 + c * 3.\"\n    },\n    {\n      \"description\": \"Determine the minimal possible difference in concert durations.\",\n      \"details\": \"For each test case, find a way to split the total_duration into two parts such that the absolute difference between the two parts is minimized.\"\n    },\n    {\n      \"description\": \"Output the minimal possible difference for each test case.\",\n      \"details\": \"Print the result for each test case on a new line.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input data to get the number of test cases and the song durations for each test case.\",\n    \"For each test case, calculate the total duration of all songs.\",\n    \"Implement a strategy to split the total duration into two parts with minimal difference. This may involve iterating over possible combinations of song allocations.\",\n    \"Output the minimal difference for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'concert': refers to the event where songs are allocated, and each song must be unique to one concert.\n    'minimal possible difference': means finding the smallest difference in total duration between two concerts.\n\n# [phrase showing quantity relationship]\n    'precisely one': means each song must be allocated to exactly one concert, ensuring no overlap.\n    'minimal possible difference': means the goal is to achieve the smallest difference in total duration between the two concerts.\n\n# [degree adverb] \n    'minimal': means the smallest possible difference in duration between the two concerts.\n\n# [code logic]\n    The steps for calculating total duration and determining minimal difference should be considered simultaneously. Specifically, the calculation of total duration and the strategy to split it into two parts with minimal difference should be integrated into one logical block to efficiently find the solution.\n\n# [edge case] \n    Test case: 1 0 0 = 1\n    Explanation: Only one song of one-minute duration, it must be allocated to one concert, resulting in a difference of 1.\n    Test case: 0 0 0 = 0\n    Explanation: No songs to allocate, hence the difference is 0.\n    Test case: 1 1 0 = 1\n    Explanation: One one-minute song and one two-minute song, the minimal difference is achieved by allocating them to different concerts, resulting in a difference of 1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the number of songs is very small or zero.\n        if a == 0 and b == 0 and c == 0:\n            print(0)\n        elif a + b + c == 1:\n            print(1)\n        else:\n            # Implement logic to find minimal difference\n\nYES", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        # Calculate total duration\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Edge cases\n        if a == 0 and b == 0 and c == 0:\n            results.append(0)\n            continue\n        elif a + b + c == 1:\n            results.append(1)\n            continue\n        \n        # Calculate minimal possible difference\n        # The idea is to check if the total duration is even or odd\n        if total_duration % 2 == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the first line, which represents the number of test cases.\",\n        \"For each test case, read the integers a, b, c from the subsequent lines, representing the number of one-minute, two-minute, and three-minute songs.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the total duration of songs for each test case.\",\n      \"steps\": [\n        \"For each test case, calculate the total duration of songs as total_duration = a * 1 + b * 2 + c * 3.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the minimal possible difference in minutes between the durations of the two concerts.\",\n      \"steps\": [\n        \"For each test case, iterate over possible allocations of songs between two concerts.\",\n        \"Calculate the duration of each concert based on the allocation.\",\n        \"Compute the absolute difference between the durations of the two concerts.\",\n        \"Track the minimal difference encountered during the iterations.\"\n      ]\n    },\n    {\n      \"description\": \"Output the minimal possible difference for each test case.\",\n      \"steps\": [\n        \"For each test case, print the minimal difference calculated.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and song counts for each test case.\",\n    \"For each test case, calculate the total duration of songs.\",\n    \"For each test case, iterate over possible allocations of songs between two concerts to find the minimal difference in durations.\",\n    \"Output the minimal difference for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'allocate': Distribute the songs between two concerts such that each song is part of only one concert.\n    'minimal possible difference': The smallest difference in total duration between the two concerts.\n\n# [phrase showing quantity relationship]\n    'minimal possible difference': This means finding the smallest absolute difference between the total durations of the two concerts. In code, this involves iterating over possible distributions of songs and calculating the absolute difference in their durations.\n\n# [degree adverb]\n    'minimal': This indicates the need to find the smallest possible value. In code, this can be implemented by initializing a variable to a large number and updating it whenever a smaller difference is found.\n\n# [code logic]\n    The steps in the plan related to calculating the total duration and determining the minimal possible difference should be considered simultaneously. Specifically, the steps:\n    - \"Calculate the total duration of songs as total_duration = a * 1 + b * 2 + c * 3.\"\n    - \"Iterate over possible allocations of songs between two concerts.\"\n    - \"Calculate the duration of each concert based on the allocation.\"\n    - \"Compute the absolute difference between the durations of the two concerts.\"\n    - \"Track the minimal difference encountered during the iterations.\"\n    These steps can be implemented in a loop that iterates over possible allocations and updates the minimal difference.\n\n# [edge case]\n    1 0 0 = 1\n    Explanation: With only one one-minute song, the minimal difference is 1 since it can only be allocated to one concert.\n    \n    0 0 0 = 0\n    Explanation: With no songs, the difference is 0 as both concerts have a duration of 0.\n    \n    1 1 1 = 0\n    Explanation: As shown in the example, the songs can be distributed to achieve a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the number of songs is very small or zero.\n    ```python\n    if a == 0 and b == 0 and c == 0:\n        print(0)\n        continue\n    if a + b + c == 1:\n        print(1)\n        continue\n    ```\n\nYES", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Edge cases\n        if a == 0 and b == 0 and c == 0:\n            results.append(0)\n            continue\n        if a + b + c == 1:\n            results.append(1)\n            continue\n        \n        # Calculate minimal possible difference\n        min_difference = float('inf')\n        \n        # Iterate over possible allocations\n        for x in range(a + 1):\n            for y in range(b + 1):\n                for z in range(c + 1):\n                    concert1_duration = x * 1 + y * 2 + z * 3\n                    concert2_duration = total_duration - concert1_duration\n                    difference = abs(concert1_duration - concert2_duration)\n                    min_difference = min(min_difference, difference)\n        \n        results.append(min_difference)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: timed out"}, "Round_1": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # The minimal difference can be found by checking if the total duration is even or odd\n        if total_duration % 2 == 1:\n            results.append(1)\n        else:\n            results.append(0)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the first line of input, which represents the number of test cases.\",\n        \"For each test case, read the integers a, b, and c from the input, representing the number of one-minute, two-minute, and three-minute songs respectively.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the minimal possible difference in minutes between the durations of the two concerts for each test case.\",\n      \"steps\": [\n        \"For each test case, calculate the total duration of all songs as total_duration = a * 1 + b * 2 + c * 3.\",\n        \"Determine if it's possible to split the songs into two groups such that the difference in their total durations is minimized.\",\n        \"Use a dynamic programming approach or a greedy strategy to find the minimal difference between the two groups.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"For each test case, output the minimal possible difference in minutes between the two concerts.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the song counts for each test case.\",\n    \"For each test case, calculate the total duration of all songs.\",\n    \"Implement a strategy to split the songs into two groups with minimal difference in total duration.\",\n    \"Output the minimal difference for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'allocate': means to distribute or assign songs to two concerts.\n    'minimal possible difference': means the smallest difference in total duration between the two concerts.\n\n# [phrase showing quantity relationship]\n    'one-minute, two-minute, three-minute': refers to the duration of each type of song.\n    Implementation: Calculate the total duration by multiplying the number of each type of song by its duration (e.g., total_duration = a * 1 + b * 2 + c * 3).\n\n# [degree adverb]\n    'minimal': means the smallest possible value.\n    Implementation: Use an algorithm (e.g., dynamic programming or greedy strategy) to find the smallest difference in total duration between the two concerts.\n\n# [code logic]\n    The steps for calculating the total duration and determining the minimal difference should be considered simultaneously. Specifically, after calculating the total duration, the logic to split the songs into two groups with minimal difference should be implemented in a single code block.\n\n# [edge case]\n    1 0 0 = 1\n    Explanation: With only one one-minute song, the minimal difference is 1 since it can only be assigned to one concert.\n    \n    0 0 0 = 0\n    Explanation: With no songs, the difference is 0 as both concerts have a duration of 0.\n    \n    1 1 1 = 0\n    Explanation: As explained in the example, the songs can be split to achieve a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the number of songs is extremely unbalanced or when there are no songs. This can be managed by checking if the total number of songs is zero and directly returning 0 in such cases.\n\nYES", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If total_duration is odd, the minimal difference is 1\n        if total_duration % 2 != 0:\n            results.append(1)\n        else:\n            # If total_duration is even, the minimal difference is 0\n            results.append(0)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    test_cases = [tuple(map(int, line.split())) for line in data[1:t+1]]\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case.\",\n      \"input\": \"Raw input string containing multiple test cases.\",\n      \"output\": \"A list of tuples, each containing three integers (a, b, c) for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, calculate the total duration of all songs and determine the minimal possible difference in minutes between the two concerts.\",\n      \"input\": \"A tuple (a, b, c) representing the number of one-minute, two-minute, and three-minute songs.\",\n      \"output\": \"An integer representing the minimal possible difference in minutes between the two concerts.\"\n    },\n    {\n      \"description\": \"Output the minimal possible difference for each test case.\",\n      \"input\": \"A list of integers representing the minimal possible differences for each test case.\",\n      \"output\": \"Formatted output where each integer is printed on a new line.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the entire input at once and split it into lines.\",\n    \"Extract the number of test cases from the first line.\",\n    \"Iterate over each test case, parsing the number of one-minute, two-minute, and three-minute songs.\",\n    \"For each test case, calculate the total duration of all songs as a * 1 + b * 2 + c * 3.\",\n    \"Determine the minimal possible difference by checking if the total duration is even or odd. If even, the difference can be 0; if odd, the difference will be 1.\",\n    \"Store the result for each test case.\",\n    \"Print the results, each on a new line.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimal possible difference'\n    Explanation: The requirement is to allocate songs between two concerts such that the difference in their total durations is minimized.\n\n# [phrase showing quantity relationship]\n    'precisely one concert': Each song must be allocated to one concert only, meaning no song can be shared between concerts.\n\n# [degree adverb] \n    'minimal': The goal is to achieve the smallest possible difference in duration between the two concerts.\n\n# [code logic]\n    The steps of calculating the total duration and determining the minimal possible difference should be considered simultaneously. This can be done by calculating the total duration and immediately checking if it is even or odd to decide the minimal difference.\n\n# [edge case] \n    1 0 0 = 1\n    Explanation: With only one one-minute song, the difference between concerts will be 1 since it cannot be split.\n    0 0 0 = 0\n    Explanation: No songs are present, so the difference is 0.\n    1 1 1 = 0\n    Explanation: The total duration is 6, which is even, allowing for a difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the total duration is even or odd will suffice.\n\nNO", "Round_0": {"code": "def minimal_difference_between_concerts():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    results = []\n    \n    for i in range(1, t + 1):\n        a, b, c = map(int, data[i].split())\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Determine the minimal possible difference\n        if total_duration % 2 == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    \n    for result in results:\n        print(result)\n\nminimal_difference_between_concerts()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def minimal_difference_between_concerts():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    results = []\n    \n    for i in range(1, t + 1):\n        a, b, c = map(int, data[i].split())\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Determine the minimal possible difference\n        if total_duration % 2 == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    \n    for result in results:\n        print(result)\n\nminimal_difference_between_concerts()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case.\",\n      \"input\": \"A single integer t followed by t lines, each containing three integers a, b, c.\",\n      \"output\": \"A list of tuples, each containing three integers (a, b, c) for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, calculate the total duration of all songs and determine the minimal possible difference in minutes between the two concerts.\",\n      \"input\": \"A tuple of three integers (a, b, c) representing the number of one-minute, two-minute, and three-minute songs.\",\n      \"output\": \"An integer representing the minimal possible difference in minutes between the two concerts.\"\n    },\n    {\n      \"description\": \"Output the minimal possible difference for each test case.\",\n      \"input\": \"A list of integers representing the minimal possible differences for each test case.\",\n      \"output\": \"Print each integer on a new line.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input to get the number of test cases and the song counts for each test case.\",\n    \"For each test case, calculate the total duration of all songs: total_duration = a * 1 + b * 2 + c * 3.\",\n    \"Determine the minimal possible difference between the two concerts by considering all possible allocations of songs.\",\n    \"Use a dynamic programming approach to find the closest possible sum to half of the total_duration.\",\n    \"Calculate the difference between the two concerts as the absolute difference between the closest sum and the remaining songs.\",\n    \"Store the result for each test case.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'allocate all songs between two concerts'\n    Explanation: This means that each song must be assigned to one of the two concerts, ensuring no song is repeated in both concerts.\n\n    'minimal possible difference in minutes between the concerts durations'\n    Explanation: The goal is to distribute the songs such that the total duration of songs in each concert is as close as possible, minimizing the absolute difference in their total durations.\n\n# [phrase showing quantity relationship]\n    'precisely one concert': Each song must be assigned to exactly one concert, not both.\n    'minimal possible difference': The difference in total duration between the two concerts should be as small as possible.\n\n# [degree adverb]\n    'minimal': This indicates the need to find the smallest possible difference in the total duration of songs between the two concerts.\n\n# [code logic]\n    The steps for calculating the total duration and determining the minimal possible difference should be considered simultaneously. Specifically, calculating the total duration and using a dynamic programming approach to find the closest possible sum to half of the total duration should be integrated into a single process.\n\n# [edge case]\n    1. (1, 0, 0) = 1\n       Explanation: With only one one-minute song, the difference is 1 since it must be assigned to one concert.\n    2. (0, 0, 0) = 0\n       Explanation: No songs to allocate, so the difference is 0.\n    3. (1, 1, 1) = 0\n       Explanation: One of each type of song can be perfectly balanced between the two concerts.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where there are no songs or only one type of song.\n    ```python\n    if a == 0 and b == 0 and c == 0:\n        return 0\n    if a + b + c == 1:\n        return a * 1 + b * 2 + c * 3\n    ```\n\nYES", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        half_duration = total_duration // 2\n        \n        # Initialize a DP array to track possible sums\n        dp = [False] * (half_duration + 1)\n        dp[0] = True\n        \n        # Process each song type\n        for duration, count in [(1, a), (2, b), (3, c)]:\n            for _ in range(count):\n                for j in range(half_duration, duration - 1, -1):\n                    if dp[j - duration]:\n                        dp[j] = True\n        \n        # Find the closest sum to half_duration\n        closest_sum = max(i for i, can_make in enumerate(dp) if can_make)\n        \n        # Calculate the minimal possible difference\n        difference = abs(total_duration - 2 * closest_sum)\n        results.append(difference)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = [(int(data[i * 3 + 1]), int(data[i * 3 + 2]), int(data[i * 3 + 3])) for i in range(t)]\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: timed out"}, "Round_1": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        half_duration = total_duration // 2\n        \n        # Initialize a DP array to track possible sums\n        dp = [False] * (half_duration + 1)\n        dp[0] = True\n        \n        # Process each song type\n        for duration, count in [(1, a), (2, b), (3, c)]:\n            for _ in range(count):\n                for j in range(half_duration, duration - 1, -1):\n                    if dp[j - duration]:\n                        dp[j] = True\n        \n        # Find the closest sum to half_duration\n        closest_sum = max(i for i, can_make in enumerate(dp) if can_make)\n        \n        # Calculate the minimal possible difference\n        difference = abs(total_duration - 2 * closest_sum)\n        results.append(difference)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = [(int(data[i * 3 + 1]), int(data[i * 3 + 2]), int(data[i * 3 + 3])) for i in range(t)]\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the first line, which represents the number of test cases.\",\n        \"For each test case, read the integers a, b, c from the subsequent lines, representing the number of one-minute, two-minute, and three-minute songs.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the total duration of songs for each test case.\",\n      \"steps\": [\n        \"For each test case, calculate the total duration of songs as total_duration = a * 1 + b * 2 + c * 3.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the minimal possible difference in minutes between the concerts durations.\",\n      \"steps\": [\n        \"For each test case, check if the total_duration is even or odd.\",\n        \"If total_duration is even, the minimal possible difference is 0.\",\n        \"If total_duration is odd, the minimal possible difference is 1.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"For each test case, print the minimal possible difference calculated in the previous step.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and song durations for each test case.\",\n    \"For each test case, calculate the total duration of songs.\",\n    \"Determine the minimal possible difference in minutes between the concerts durations based on the total duration.\",\n    \"Output the minimal possible difference for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'allocate': means distributing the songs between two concerts such that each song is part of exactly one concert.\n    'minimal possible difference': means finding the smallest difference in total duration between the two concerts.\n\n# [phrase showing quantity relationship]\n    'precisely one': means each song must be assigned to exactly one concert, not both or none.\n    'minimal possible difference': means the smallest possible difference in total duration between the two concerts.\n\n# [degree adverb] \n    'minimal': means the smallest possible value for the difference in concert durations.\n\n# [code logic]\n    The steps for checking if the total_duration is even or odd and determining the minimal possible difference should be implemented simultaneously. This can be done using an if-else statement to check the parity of total_duration and assign the difference accordingly.\n\n# [edge case] \n    1 0 0 = 1\n    Explanation: With only one one-minute song, it must be assigned to one concert, resulting in a difference of 1.\n    \n    0 0 0 = 0\n    Explanation: With no songs, both concerts have a duration of 0, resulting in a difference of 0.\n    \n    1 1 1 = 0\n    Explanation: The total duration is 6, which is even, so the minimal possible difference is 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking the parity of total_duration and assigning the difference based on that is sufficient.\n\nNO", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        if total_duration % 2 == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the number of one-minute, two-minute, and three-minute songs for each test case.\",\n      \"input\": \"A single integer t followed by t lines, each containing three integers a, b, c.\",\n      \"output\": \"A list of tuples, each containing three integers (a, b, c) for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, calculate the total duration of all songs and determine the minimal possible difference in minutes between the two concerts.\",\n      \"input\": \"A tuple of three integers (a, b, c) representing the number of one-minute, two-minute, and three-minute songs.\",\n      \"output\": \"An integer representing the minimal possible difference in minutes between the two concerts.\"\n    },\n    {\n      \"description\": \"Output the minimal possible difference for each test case.\",\n      \"input\": \"A list of integers representing the minimal possible differences for each test case.\",\n      \"output\": \"Print each integer on a new line.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input to get the number of test cases and the song counts for each test case.\",\n    \"For each test case, calculate the total duration of all songs: total_duration = a * 1 + b * 2 + c * 3.\",\n    \"Determine the minimal possible difference by trying to partition the songs into two groups with the closest possible total durations.\",\n    \"Use a dynamic programming approach to find the closest possible sum to half of the total_duration.\",\n    \"Calculate the minimal difference as the absolute difference between twice the closest sum and the total_duration.\",\n    \"Store the result for each test case.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'allocate all songs between two concerts'\n    Explanation: This means that each song must be assigned to one of the two concerts, ensuring no song is left unassigned.\n\n    'minimal possible difference in minutes between the concerts durations'\n    Explanation: The goal is to distribute the songs such that the total duration of songs in each concert is as close as possible, minimizing the absolute difference in their total durations.\n\n# [phrase showing quantity relationship]\n    'precisely one concert': Each song must be assigned to exactly one concert, not both or neither.\n    \n    'minimal possible difference': This means finding the smallest absolute difference between the total durations of the two concerts.\n\n# [degree adverb]\n    'minimal': This indicates the need to find the smallest possible value for the difference in durations between the two concerts.\n\n# [code logic]\n    The steps for calculating the total duration and determining the minimal possible difference should be considered simultaneously. Specifically, calculating the total duration and using dynamic programming to partition the songs should be integrated into a single process for each test case.\n\n# [edge case]\n    1. (1, 0, 0) = 1\n       Explanation: With only one one-minute song, the minimal difference is 1 since it must be assigned to one concert.\n    2. (0, 0, 0) = 0\n       Explanation: If there are no songs, the difference is 0 as both concerts have a duration of 0.\n    3. (1, 1, 1) = 0\n       Explanation: As in the example, one possible allocation is one one-minute and one two-minute song in one concert, and the three-minute song in the other, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where there are no songs or only one type of song.\n    ```python\n    if a == 0 and b == 0 and c == 0:\n        return 0\n    if a + b + c == 1:\n        return a + 2 * b + 3 * c\n    ```\n\nYES", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Edge cases\n        if a == 0 and b == 0 and c == 0:\n            results.append(0)\n            continue\n        if a + b + c == 1:\n            results.append(total_duration)\n            continue\n        \n        # Dynamic programming approach to find the closest sum to half of total_duration\n        half_duration = total_duration // 2\n        dp = [False] * (half_duration + 1)\n        dp[0] = True\n        \n        for _ in range(a):\n            for j in range(half_duration, 0, -1):\n                if j >= 1:\n                    dp[j] = dp[j] or dp[j - 1]\n        \n        for _ in range(b):\n            for j in range(half_duration, 0, -1):\n                if j >= 2:\n                    dp[j] = dp[j] or dp[j - 2]\n        \n        for _ in range(c):\n            for j in range(half_duration, 0, -1):\n                if j >= 3:\n                    dp[j] = dp[j] or dp[j - 3]\n        \n        closest_sum = 0\n        for i in range(half_duration + 1):\n            if dp[i]:\n                closest_sum = i\n        \n        minimal_diff = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_diff)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: timed out"}, "Round_1": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Edge cases\n        if a == 0 and b == 0 and c == 0:\n            results.append(0)\n            continue\n        if a + b + c == 1:\n            results.append(total_duration)\n            continue\n        \n        # Dynamic programming approach to find the closest sum to half of total_duration\n        half_duration = total_duration // 2\n        dp = [False] * (half_duration + 1)\n        dp[0] = True\n        \n        for _ in range(a):\n            for j in range(half_duration, 0, -1):\n                if j >= 1:\n                    dp[j] = dp[j] or dp[j - 1]\n        \n        for _ in range(b):\n            for j in range(half_duration, 0, -1):\n                if j >= 2:\n                    dp[j] = dp[j] or dp[j - 2]\n        \n        for _ in range(c):\n            for j in range(half_duration, 0, -1):\n                if j >= 3:\n                    dp[j] = dp[j] or dp[j - 3]\n        \n        closest_sum = 0\n        for i in range(half_duration + 1):\n            if dp[i]:\n                closest_sum = i\n        \n        minimal_diff = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_diff)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n"}}], "scores": [], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 563, "prompt": "Luntik wants to allocate all songs between two concerts, ensuring each song is part of precisely one concert.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "condense_two2one", "save_node": false, "parent_index": 277}
