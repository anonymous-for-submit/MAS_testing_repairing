{"name": "1622_A. Construct a Rectangle", "description": "There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYou are asked to break exactly one of them into two pieces in such a way that: \n\n  * both pieces have positive (strictly greater than 0) integer length; \n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides. \n\n\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "tags": ["geometry", "math"], "difficulty": 7, "id": 1622, "sample_io": [{"input": "4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n", "output": ["YES\nNO\nYES\nYES\n"]}], "test_list": [{"input": "2\n1 2 3\n2 2 4\n", "output": ["YES\nYES\n"]}, {"input": "1\n1 98 99\n", "output": ["YES\n"]}, {"input": "3\n1 1 1\n2 1 3\n5 6 7\n", "output": ["NO\nYES\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 6\n1 2 3\n6 7 8\n10 10 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nYES\n"]}, {"input": "4\n6 1 5\n2 5 2\n2 4 2\n7 101 108\n", "output": ["YES\nNO\nYES\nYES\n"]}, {"input": "1\n100000 100000 100000\n", "output": ["YES\n"]}, {"input": "1\n12344 1 1\n", "output": ["YES\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 2 3\n4 5 6\n", "output": ["YES\nNO\n"]}, {"input": "2\n1 3 3\n2 2 4\n", "output": ["NO\nYES\n"]}, {"input": "1\n1 98 186\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 6 7\n", "output": ["NO\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 108\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "1\n100000 100000 100100\n", "output": ["YES\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 1\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 1 3\n4 5 6\n", "output": ["NO\nNO\n"]}, {"input": "4\n6 1 5\n2 5 2\n2 4 2\n5 9 4\n", "output": ["YES\nNO\nYES\nYES\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 179\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n2 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 1\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n2 1 3\n1 5 6\n", "output": ["YES\nYES\n"]}, {"input": "4\n6 1 10\n2 6 2\n2 4 2\n7 101 144\n", "output": ["NO\nYES\nYES\nNO\n"]}, {"input": "3\n2 1 1\n2 1 2\n3 8 12\n", "output": ["YES\nNO\nNO\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 3\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 2 3\n4 8 6\n", "output": ["YES\nNO\n"]}, {"input": "3\n1 1 1\n1 1 2\n5 6 12\n", "output": ["NO\nYES\nNO\n"]}, {"input": "4\n6 1 10\n2 6 2\n3 4 2\n7 101 144\n", "output": ["NO\nYES\nNO\nNO\n"]}, {"input": "3\n2 1 1\n1 1 2\n5 6 12\n", "output": ["YES\nYES\nNO\n"]}, {"input": "6\n2 2 6\n1 1 2\n3 10 6\n2 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "3\n3 1 1\n2 1 2\n1 8 9\n", "output": ["NO\nNO\nYES\n"]}, {"input": "6\n2 2 4\n1 1 1\n3 5 18\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n1 1 10\n2 6 2\n3 4 2\n7 101 144\n", "output": ["YES\nYES\nNO\nNO\n"]}, {"input": "3\n3 1 1\n2 2 2\n1 8 9\n", "output": ["NO\nYES\nYES\n"]}, {"input": "1\n12344 2 1\n", "output": ["NO\n"]}, {"input": "1\n2 98 186\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 6 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 10 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "1\n100010 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 2 1\n", "output": ["NO\n"]}, {"input": "2\n1 1 3\n1 5 6\n", "output": ["NO\nYES\n"]}, {"input": "1\n2 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 144\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n100110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 4 1\n", "output": ["NO\n"]}, {"input": "1\n1 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n3 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100110 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 3 1\n", "output": ["NO\n"]}, {"input": "1\n100111 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 3 1\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n1 8 12\n", "output": ["YES\nNO\nNO\n"]}, {"input": "1\n100011 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 3 2\n", "output": ["NO\n"]}, {"input": "1\n100011 101001 100100\n", "output": ["NO\n"]}, {"input": "1\n100011 101001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 101001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n100011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n100011 001001 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111001\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001111 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001010 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 111111\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 011111\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011100\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011000\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010011 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010111 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010111 100011 001000\n", "output": ["NO\n"]}, {"input": "1\n010111 000011 001000\n", "output": ["NO\n"]}, {"input": "1\n010111 000011 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 100010 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 100010 000001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 000001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 000011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 000011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 100011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 101011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 000011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 100011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 101011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 101001 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 101001 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 101101 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n010101 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n010101 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n110101 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n110101 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n110101 101101 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101101 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101100 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101110 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101110 101010\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 101010\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 101011\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 100011\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n011111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 101100 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 111110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n100111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n001111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n001101 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011111 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011101 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 111101 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100011\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100000\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 100000\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n000011 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n000011 111001 000011\n", "output": ["NO\n"]}, {"input": "1\n100011 111001 000011\n", "output": ["NO\n"]}, {"input": "1\n100011 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n100011 111101 000010\n", "output": ["NO\n"]}, {"input": "1\n100011 111101 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 111100 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 110100 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 111100 011010\n", "output": ["NO\n"]}, {"input": "1\n100011 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101011 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 110100 011110\n", "output": ["NO\n"]}, {"input": "1\n001111 110100 011110\n", "output": ["NO\n"]}, {"input": "1\n101111 010100 011110\n", "output": ["NO\n"]}, {"input": "1\n101111 010100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 111010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 111011\n", "output": ["NO\n"]}, {"input": "1\n001111 010000 111011\n", "output": ["NO\n"]}, {"input": "1\n001111 010000 111001\n", "output": ["NO\n"]}, {"input": "2\n1 4 3\n2 2 4\n", "output": ["YES\nYES\n"]}, {"input": "1\n1 98 108\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 4\n5 6 7\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100010 100000 100000\n", "output": ["YES\n"]}, {"input": "1\n2465 1 1\n", "output": ["NO\n"]}, {"input": "4\n6 2 5\n2 5 2\n2 4 2\n5 5 4\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "2\n1 3 3\n4 2 4\n", "output": ["NO\nYES\n"]}, {"input": "1\n3 98 186\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n5 6 7\n", "output": ["YES\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 10\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 3 2\n2 4 2\n7 101 108\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "1\n100010 100001 100000\n", "output": ["NO\n"]}, {"input": "1\n19251 2 1\n", "output": ["NO\n"]}, {"input": "2\n1 1 3\n4 5 1\n", "output": ["NO\nYES\n"]}, {"input": "4\n9 1 5\n2 5 2\n2 4 2\n5 9 4\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "6\n2 2 6\n1 1 2\n3 10 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n10 1 10\n2 5 2\n2 4 2\n7 101 179\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n110010 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n8323 2 1\n", "output": ["NO\n"]}, {"input": "1\n3 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 4\n5 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "4\n6 1 9\n2 5 2\n2 4 2\n7 101 144\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n101110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n21283 4 1\n", "output": ["NO\n"]}, {"input": "2\n2 1 3\n1 5 5\n", "output": ["YES\nNO\n"]}, {"input": "1\n1 98 468\n", "output": ["NO\n"]}, {"input": "1\n110110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n35510 2 1\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n3 8 17\n", "output": ["YES\nNO\nNO\n"]}, {"input": "1\n110111 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n12451 3 1\n", "output": ["NO\n"]}, {"input": "3\n3 1 1\n2 1 2\n1 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100001 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 2 2\n", "output": ["NO\n"]}, {"input": "1\n100010 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n100011 100001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 100010\n", "output": ["NO\n"]}, {"input": "1\n110011 000001 110000\n", "output": ["NO\n"]}, {"input": "1\n101011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 111000\n", "output": ["NO\n"]}, {"input": "1\n101011 001101 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 011101 111001\n", "output": ["NO\n"]}, {"input": "1\n100001 001101 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001111 011011\n", "output": ["NO\n"]}, {"input": "1\n101011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001110 110011\n", "output": ["YES\n"]}, {"input": "1\n110111 001010 111011\n", "output": ["NO\n"]}, {"input": "1\n010011 001011 111011\n", "output": ["NO\n"]}, {"input": "1\n110111 000011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 010011 011111\n", "output": ["NO\n"]}, {"input": "1\n010011 000011 011111\n", "output": ["NO\n"]}, {"input": "1\n110011 010011 011101\n", "output": ["NO\n"]}, {"input": "1\n110010 100011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011110\n", "output": ["NO\n"]}, {"input": "1\n111011 100011 011000\n", "output": ["YES\n"]}, {"input": "1\n110011 000011 001100\n", "output": ["NO\n"]}, {"input": "1\n010110 100011 001100\n", "output": ["NO\n"]}], "task_id": "codecontest/154", "repair_prompt": ["There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYou are asked to break exactly one of them into two pieces in such a way that: \n\n  * both pieces have positive (strictly greater than 0) integer length. Each piece must have a length greater than zero; \n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides. \n\n\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYou are asked to break exactly one of them into two pieces in such a way that: \n\n  * both pieces have positive (strictly greater than 0) integer length. Each piece must have a length greater than zero;\n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks. You must ensure that each stick is used as exactly one of its sides in the rectangle construction.\n\n\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYou are asked to break exactly one of them into two pieces in such a way that: \n\n  * both pieces have positive (strictly greater than 0) integer length and the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides.\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Case 1: Break l1 into two parts\n    if (l2 == l3 and l1 % 2 == 0) or (l1 == l2 + l3):\n        return True\n    # Case 2: Break l2 into two parts\n    if (l1 == l3 and l2 % 2 == 0) or (l2 == l1 + l3):\n        return True\n    # Case 3: Break l3 into two parts\n    if (l1 == l2 and l3 % 2 == 0) or (l3 == l1 + l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Break l1 into two parts and check\n    if (l2 == l3) or (l1 == l2 + l3):\n        return True\n    # Break l2 into two parts and check\n    if (l1 == l3) or (l2 == l1 + l3):\n        return True\n    # Break l3 into two parts and check\n    if (l1 == l2) or (l3 == l1 + l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking l1 can form a rectangle\n    if (l2 == l3) or (l1 % 2 == 0 and l1 // 2 == l2) or (l1 % 2 == 0 and l1 // 2 == l3):\n        return True\n    # Check if breaking l2 can form a rectangle\n    if (l1 == l3) or (l2 % 2 == 0 and l2 // 2 == l1) or (l2 % 2 == 0 and l2 // 2 == l3):\n        return True\n    # Check if breaking l3 can form a rectangle\n    if (l1 == l2) or (l3 % 2 == 0 and l3 // 2 == l1) or (l3 % 2 == 0 and l3 // 2 == l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Break l1 into two parts and check\n    if (l2 == l3) or (l1 % 2 == 0 and l1 // 2 == l2):\n        return True\n    # Break l2 into two parts and check\n    if (l1 == l3) or (l2 % 2 == 0 and l2 // 2 == l1):\n        return True\n    # Break l3 into two parts and check\n    if (l1 == l2) or (l3 % 2 == 0 and l3 // 2 == l1):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Break l1 into two parts\n    if (l2 == l3) or (l1 == l2 + l3):\n        return True\n    # Break l2 into two parts\n    if (l1 == l3) or (l2 == l1 + l3):\n        return True\n    # Break l3 into two parts\n    if (l1 == l2) or (l3 == l1 + l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Try breaking l1\n    if (l2 == l3) or (l1 == l2 + l3):\n        return True\n    # Try breaking l2\n    if (l1 == l3) or (l2 == l1 + l3):\n        return True\n    # Try breaking l3\n    if (l1 == l2) or (l3 == l1 + l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Break l1 into two parts\n    if (l2 == l3) or (l1 == l2 + l3):\n        return True\n    # Break l2 into two parts\n    if (l1 == l3) or (l2 == l1 + l3):\n        return True\n    # Break l3 into two parts\n    if (l1 == l2) or (l3 == l1 + l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if two sticks are equal and the third can be split into two equal parts\n    if l1 == l2 and l3 % 2 == 0:\n        return True\n    if l1 == l3 and l2 % 2 == 0:\n        return True\n    if l2 == l3 and l1 % 2 == 0:\n        return True\n    \n    # Check if the sum of any two sticks equals the third stick\n    if l1 + l2 == l3:\n        return True\n    if l1 + l3 == l2:\n        return True\n    if l2 + l3 == l1:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Break l1 into two parts and check\n    if (l1 % 2 == 0 and l1 // 2 == l2) or (l1 % 2 == 0 and l1 // 2 == l3) or (l2 == l3):\n        return True\n    # Break l2 into two parts and check\n    if (l2 % 2 == 0 and l2 // 2 == l1) or (l2 % 2 == 0 and l2 // 2 == l3) or (l1 == l3):\n        return True\n    # Break l3 into two parts and check\n    if (l3 % 2 == 0 and l3 // 2 == l1) or (l3 % 2 == 0 and l3 // 2 == l2) or (l1 == l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Break l1 into two parts\n    if (l2 == l3) or (l1 == l2 + l3):\n        return True\n    # Break l2 into two parts\n    if (l1 == l3) or (l2 == l1 + l3):\n        return True\n    # Break l3 into two parts\n    if (l1 == l2) or (l3 == l1 + l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Case 1: Break l1 into two parts\n    if (l2 == l3 and l1 % 2 == 0) or (l1 == l2 + l3):\n        return True\n    # Case 2: Break l2 into two parts\n    if (l1 == l3 and l2 % 2 == 0) or (l2 == l1 + l3):\n        return True\n    # Case 3: Break l3 into two parts\n    if (l1 == l2 and l3 % 2 == 0) or (l3 == l1 + l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Read the first line to get the number of test cases, t. For each test case, read the line containing three integers l_1, l_2, and l_3.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to break one stick into two pieces to form a rectangle.\",\n      \"details\": \"For each test case, check if any of the three sticks can be broken into two pieces such that the resulting four sticks can form a rectangle.\"\n    },\n    {\n      \"description\": \"Check the conditions for forming a rectangle.\",\n      \"details\": \"For each possible way of breaking a stick, verify if there are two pairs of equal lengths among the four resulting sticks.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, print 'YES' if it's possible to form a rectangle, otherwise print 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, read the lengths l_1, l_2, and l_3.\",\n    \"For each stick, consider breaking it into two pieces in all possible ways.\",\n    \"For each way of breaking a stick, check if the resulting four sticks can form a rectangle by checking for two pairs of equal lengths.\",\n    \"If any way of breaking a stick results in a rectangle, output 'YES'. Otherwise, output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n    'break one stick'\n    Explanation: This means that one of the three sticks must be split into two parts, and the sum of the lengths of these parts must equal the original stick length.\n\n# [phrase showing quantity relationship]\n    'greater than 0'\n    Explanation: Each piece after breaking a stick must have a length strictly greater than zero. This ensures that the pieces are valid sticks.\n    Implementation: Ensure that when breaking a stick, both resulting pieces have lengths greater than zero.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for checking if a rectangle can be formed should be considered simultaneously:\n    \"For each stick, consider breaking it into two pieces in all possible ways.\"\n    \"For each way of breaking a stick, check if the resulting four sticks can form a rectangle by checking for two pairs of equal lengths.\"\n    Implementation: Use nested loops or conditional checks to iterate through each stick and each possible break, then check for pairs of equal lengths.\n\n# [edge case]\n    Test case: 1 1 1 = YES\n    Explanation: Breaking any stick into two pieces of length 1 results in four sticks of length 1, which can form a square.\n\n    Test case: 1 2 3 = NO\n    Explanation: No matter how you break any stick, you cannot form two pairs of equal lengths.\n\n    Test case: 10 10 1 = YES\n    Explanation: Break the stick of length 1 into two pieces of length 0.5 each (not possible as per integer constraint, but hypothetically), or break one of the sticks of length 10 into two pieces of length 5 each, resulting in two pairs of equal lengths (5, 5, 10, 10).\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Code for handling the edge case:\n    ```python\n    def can_form_rectangle(l1, l2, l3):\n        # Check if breaking any stick can form a rectangle\n        if (l1 == l2 and l3 % 2 == 0) or (l1 == l3 and l2 % 2 == 0) or (l2 == l3 and l1 % 2 == ", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Case 1: Break l1 into two parts\n    if (l2 == l3 and l1 % 2 == 0) or (l1 == l2 + l3):\n        return True\n    # Case 2: Break l2 into two parts\n    if (l1 == l3 and l2 % 2 == 0) or (l2 == l1 + l3):\n        return True\n    # Case 3: Break l3 into two parts\n    if (l1 == l2 and l3 % 2 == 0) or (l3 == l1 + l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Determine if a stick can be broken into two pieces such that the sum of the pieces equals the original length and both pieces have positive integer lengths.\",\n      \"solution\": \"For a stick of length l, it can be broken into two pieces of lengths a and b if a + b = l and a > 0, b > 0.\"\n    },\n    {\n      \"description\": \"Check if the resulting four sticks can form a rectangle.\",\n      \"solution\": \"A rectangle can be formed if there are two pairs of equal lengths among the four sticks.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read the number of test cases, t.\"\n    },\n    {\n      \"step\": \"For each test case, read the lengths of the three sticks: l1, l2, l3.\"\n    },\n    {\n      \"step\": \"For each stick, attempt to break it into two pieces and check if the resulting four sticks can form a rectangle.\",\n      \"details\": [\n        \"Break stick l1 into two pieces and check if the resulting lengths can form a rectangle.\",\n        \"Break stick l2 into two pieces and check if the resulting lengths can form a rectangle.\",\n        \"Break stick l3 into two pieces and check if the resulting lengths can form a rectangle.\"\n      ]\n    },\n    {\n      \"step\": \"If any of the attempts result in a rectangle, print 'YES'. Otherwise, print 'NO'.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n# [phrase showing quantity relationship]\n    'greater than 0': means each piece after breaking a stick must have a length strictly greater than zero.\n    'equal to': means the sum of the lengths of the two pieces must be equal to the original length of the stick.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps for breaking each stick and checking if they can form a rectangle should be considered simultaneously for each stick. This can be implemented using a loop that iterates over each stick and checks the conditions in one block.\n\n# [edge case] \n    Test case: 1 1 1 = NO\n    Explanation: Breaking any stick results in lengths that cannot form a rectangle.\n    \n    Test case: 2 2 2 = YES\n    Explanation: Breaking any stick into two pieces of length 1 results in four sticks of length 1, which can form a square (a type of rectangle).\n    \n    Test case: 10 1 1 = NO\n    Explanation: Breaking the stick of length 10 into any two positive lengths results in lengths that cannot form a rectangle with the other sticks.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking each stick and attempting to form a rectangle will naturally handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Break l1 into two parts and check\n    if (l2 == l3) or (l1 == l2 + l3):\n        return True\n    # Break l2 into two parts and check\n    if (l1 == l3) or (l2 == l1 + l3):\n        return True\n    # Break l3 into two parts and check\n    if (l1 == l2) or (l3 == l1 + l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Determine if a stick can be broken into two pieces with positive integer lengths.\",\n      \"details\": \"For each stick, check if it can be split into two parts such that both parts are greater than 0 and their sum equals the original stick length.\"\n    },\n    {\n      \"description\": \"Check if the resulting four sticks can form a rectangle.\",\n      \"details\": \"After breaking one stick, verify if the four sticks can be paired into two sets of equal lengths.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read the number of test cases.\",\n      \"details\": \"Parse the integer t from the input.\"\n    },\n    {\n      \"step\": \"Iterate over each test case.\",\n      \"details\": \"For each test case, read the three stick lengths l_1, l_2, and l_3.\"\n    },\n    {\n      \"step\": \"For each stick, attempt to break it into two pieces.\",\n      \"details\": \"For each stick, consider all possible ways to split it into two positive integer lengths.\"\n    },\n    {\n      \"step\": \"Check if the resulting four sticks can form a rectangle.\",\n      \"details\": \"Verify if any combination of breaking a stick results in two pairs of equal lengths among the four sticks.\"\n    },\n    {\n      \"step\": \"Output the result for each test case.\",\n      \"details\": \"Print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n    'break one stick'\n    Explanation: You can only break one of the three sticks into two pieces, and the sum of the lengths of the two pieces must equal the original stick length.\n\n# [phrase showing quantity relationship]\n    'strictly greater than 0'\n    Explanation: Both pieces obtained from breaking a stick must have lengths greater than 0. This ensures that the pieces are valid sides of a rectangle.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps \"For each stick, attempt to break it into two pieces\" and \"Check if the resulting four sticks can form a rectangle\" should be considered simultaneously. This can be implemented by iterating over each stick, breaking it into two pieces, and immediately checking if the resulting four sticks can form a rectangle.\n\n# [edge case] \n    1 1 1 = NO\n    Explanation: Breaking any stick results in lengths that cannot form a rectangle.\n    \n    2 2 2 = YES\n    Explanation: Breaking any stick into two pieces of length 1 results in four sticks of length 1, which can form a square.\n    \n    10 1 1 = NO\n    Explanation: Breaking the stick of length 10 into any two positive integer lengths results in lengths that cannot form a rectangle with the other sticks.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of breaking each stick and checking for rectangle formation will handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking l1 can form a rectangle\n    if (l2 == l3) or (l1 % 2 == 0 and l1 // 2 == l2) or (l1 % 2 == 0 and l1 // 2 == l3):\n        return True\n    # Check if breaking l2 can form a rectangle\n    if (l1 == l3) or (l2 % 2 == 0 and l2 // 2 == l1) or (l2 % 2 == 0 and l2 // 2 == l3):\n        return True\n    # Check if breaking l3 can form a rectangle\n    if (l1 == l2) or (l3 % 2 == 0 and l3 // 2 == l1) or (l3 % 2 == 0 and l3 // 2 == l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Determine if a stick can be broken into two pieces such that the sum of the pieces equals the original length and both pieces have positive integer lengths.\",\n      \"solution\": \"For a stick of length l, it can be broken into two pieces of lengths a and b if a + b = l and a > 0, b > 0.\"\n    },\n    {\n      \"description\": \"Check if the resulting four sticks can form a rectangle.\",\n      \"solution\": \"A rectangle can be formed if there are two pairs of equal lengths among the four sticks.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, read the lengths of the three sticks: l1, l2, l3.\",\n    \"For each stick, attempt to break it into two pieces in all possible ways.\",\n    \"For each possible break, check if the resulting four sticks can form a rectangle.\",\n    \"If any break results in a rectangle, output 'YES'. Otherwise, output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n# [phrase showing quantity relationship]\n    'strictly greater than 0': means that the lengths of the pieces after breaking a stick must be positive integers.\n    Implementation: Ensure that when breaking a stick, both resulting pieces have lengths greater than 0.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps \"For each stick, attempt to break it into two pieces in all possible ways\" and \"For each possible break, check if the resulting four sticks can form a rectangle\" should be implemented simultaneously.\n    Implementation: For each stick, iterate through possible breaks and immediately check if the resulting configuration can form a rectangle.\n\n# [edge case] \n    Case 1: (1, 1, 1) = NO\n    Explanation: Breaking any stick results in lengths that cannot form a rectangle.\n    \n    Case 2: (2, 2, 2) = YES\n    Explanation: Breaking one stick into two pieces of length 1 each results in four sticks of lengths 1, 1, 2, 2, which can form a rectangle.\n    \n    Case 3: (10^8, 1, 1) = NO\n    Explanation: Breaking the longest stick results in lengths that cannot form a rectangle with the other two sticks.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of attempting all possible breaks and checking for rectangle formation will cover these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Break l1 into two parts and check\n    if (l2 == l3) or (l1 % 2 == 0 and l1 // 2 == l2):\n        return True\n    # Break l2 into two parts and check\n    if (l1 == l3) or (l2 % 2 == 0 and l2 // 2 == l1):\n        return True\n    # Break l3 into two parts and check\n    if (l1 == l2) or (l3 % 2 == 0 and l3 // 2 == l1):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Read the first line to get the number of test cases, t. For each test case, read the line containing three integers representing the lengths of the sticks.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to break one stick into two pieces to form a rectangle.\",\n      \"details\": \"For each test case, check if any of the three sticks can be broken into two pieces such that the resulting four sticks can form a rectangle.\"\n    },\n    {\n      \"description\": \"Check the conditions for forming a rectangle.\",\n      \"details\": \"A rectangle can be formed if there are two pairs of equal lengths among the four sticks. Consider breaking each stick and check if the resulting lengths can form two pairs of equal lengths.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, output 'YES' if it's possible to form a rectangle, otherwise output 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, read the lengths l1, l2, l3.\",\n    \"For each stick, consider breaking it into two pieces and check if the resulting four sticks can form a rectangle.\",\n    \"To check if a rectangle can be formed, verify if there are two pairs of equal lengths among the four sticks.\",\n    \"Output 'YES' if a rectangle can be formed, otherwise output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. In this context, it means that after breaking one stick, the resulting four sticks should be able to form two pairs of equal lengths.\n\n    'break exactly one of them'\n    Explanation: Only one stick can be broken into two pieces, and the sum of the lengths of these two pieces must equal the original stick's length.\n\n# [phrase showing quantity relationship]\n    'greater than 0'\n    Explanation: Each piece resulting from breaking a stick must have a length strictly greater than zero. In code, this means ensuring that when a stick is broken into two parts, both parts must be positive integers.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps to check if a rectangle can be formed should be implemented simultaneously. Specifically, when considering breaking a stick, the logic to check if the resulting lengths can form two pairs of equal lengths should be done in the same code block.\n\n# [edge case]\n    1. (1, 1, 1) = NO\n       Explanation: Breaking any stick results in lengths that cannot form two pairs of equal lengths.\n    2. (2, 2, 4) = YES\n       Explanation: Breaking the stick of length 4 into two parts of length 2 each results in four sticks of lengths 2, 2, 2, 2, which can form a square.\n    3. (1, 2, 3) = NO\n       Explanation: No matter how you break any stick, you cannot form two pairs of equal lengths.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if two pairs of equal lengths can be formed after breaking one stick is sufficient.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Break l1 into two parts\n    if (l2 == l3) or (l1 == l2 + l3):\n        return True\n    # Break l2 into two parts\n    if (l1 == l3) or (l2 == l1 + l3):\n        return True\n    # Break l3 into two parts\n    if (l1 == l2) or (l3 == l1 + l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Determine if a stick can be broken into two pieces with positive integer lengths.\",\n      \"steps\": [\n        \"For each stick, check if it can be split into two parts such that both parts are greater than zero.\"\n      ]\n    },\n    {\n      \"description\": \"Check if the resulting four sticks can form a rectangle.\",\n      \"steps\": [\n        \"After breaking one stick, check if there are two pairs of equal lengths among the four sticks.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, read the lengths of the three sticks.\",\n    \"For each stick, attempt to break it into two pieces and check if the resulting four sticks can form a rectangle.\",\n    \"If any configuration allows forming a rectangle, output 'YES'. Otherwise, output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n# [phrase showing quantity relationship]\n    'greater than 0': means that each piece after breaking a stick must have a length strictly greater than zero.\n    'equal to': means the total length of the pieces after breaking a stick must be equal to the original length of the stick.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the subproblem \"Determine if a stick can be broken into two pieces with positive integer lengths\" and \"Check if the resulting four sticks can form a rectangle\" should be considered simultaneously. \n    Implementation: For each stick, attempt to break it into two pieces and immediately check if the resulting four sticks can form a rectangle by checking if there are two pairs of equal lengths.\n\n# [edge case] \n    Case 1: (1, 1, 1) = NO\n    Explanation: Breaking any stick results in lengths that cannot form a rectangle.\n    \n    Case 2: (2, 2, 3) = YES\n    Explanation: Breaking the stick of length 3 into lengths 1 and 2 results in sticks of lengths 1, 2, 2, 2, which can form a rectangle.\n    \n    Case 3: (3, 3, 3) = YES\n    Explanation: Breaking any stick into lengths 1 and 2 results in sticks of lengths 1, 2, 3, 3, which can form a rectangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of attempting to break each stick and checking for rectangle formation will handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Try breaking l1\n    if (l2 == l3) or (l1 == l2 + l3):\n        return True\n    # Try breaking l2\n    if (l1 == l3) or (l2 == l1 + l3):\n        return True\n    # Try breaking l3\n    if (l1 == l2) or (l3 == l1 + l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Read the first line to get the number of test cases, t. For each of the next t lines, read three integers representing the lengths of the sticks.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to break one stick into two pieces to form a rectangle with the resulting four sticks.\",\n      \"details\": \"For each test case, check if any of the three sticks can be broken into two pieces such that the four resulting sticks can form a rectangle.\"\n    },\n    {\n      \"description\": \"Check the conditions for forming a rectangle.\",\n      \"details\": \"A rectangle can be formed if there are two pairs of equal lengths among the four sticks.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, read the lengths of the three sticks.\",\n    \"For each stick, consider breaking it into two pieces in all possible ways.\",\n    \"For each possible break, check if the resulting four sticks can form a rectangle by checking for two pairs of equal lengths.\",\n    \"If any break results in a rectangle, output 'YES'. Otherwise, output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n    'break one stick'\n    Explanation: This means you can only break one of the three sticks into two pieces, and the sum of the lengths of the two pieces must equal the original stick's length.\n\n# [phrase showing quantity relationship]\n    'strictly greater than 0': This means that when breaking a stick, both resulting pieces must have lengths greater than zero.\n    'equal to the original length': This means the sum of the lengths of the two pieces must be exactly the same as the original stick's length.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps to check if a rectangle can be formed should be implemented simultaneously. Specifically, when considering breaking a stick, you should immediately check if the resulting four sticks can form a rectangle by checking for two pairs of equal lengths.\n\n# [edge case] \n    1. (1, 1, 2) = YES\n       Explanation: Break the stick of length 2 into two sticks of length 1 each. The resulting sticks are 1, 1, 1, 1, which can form a square.\n    2. (1, 1, 1) = NO\n       Explanation: No matter how you break one of the sticks, you cannot form two pairs of equal lengths.\n    3. (2, 2, 4) = YES\n       Explanation: Break the stick of length 4 into two sticks of length 2 each. The resulting sticks are 2, 2, 2, 2, which can form a square.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking all possible breaks and verifying if they can form a rectangle will naturally handle these cases.\n\nYES", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Break l1 into two parts\n    if (l2 == l3) or (l1 == l2 + l3):\n        return True\n    # Break l2 into two parts\n    if (l1 == l3) or (l2 == l1 + l3):\n        return True\n    # Break l3 into two parts\n    if (l1 == l2) or (l3 == l1 + l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Read the first line to get the number of test cases, t. For each test case, read the line containing three integers representing the lengths of the sticks.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to break one stick into two pieces to form a rectangle.\",\n      \"details\": \"For each test case, check if any of the three sticks can be broken into two pieces such that the resulting four sticks can form a rectangle.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, print 'YES' if it's possible to form a rectangle, otherwise print 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, perform the following steps:\",\n    \"  a. Read the lengths of the three sticks, l1, l2, and l3.\",\n    \"  b. Check if breaking any of the sticks can result in four sticks that form a rectangle:\",\n    \"     i. Check if two of the sticks have equal lengths and the third stick can be broken into two equal parts.\",\n    \"     ii. Check if the sum of the lengths of any two sticks equals the length of the third stick.\",\n    \"  c. If any of the above conditions are met, output 'YES'. Otherwise, output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n    'break one stick'\n    Explanation: This means that one of the sticks can be split into two parts, and these parts must be positive integers and sum up to the original length of the stick.\n\n# [phrase showing quantity relationship]\n    'strictly greater than 0'\n    Explanation: This means that when breaking a stick, both resulting pieces must have lengths greater than 0. In code, this can be implemented by ensuring that both parts are positive integers.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan related to checking conditions for forming a rectangle should be considered simultaneously. Specifically, the conditions:\n    - Two sticks have equal lengths and the third stick can be broken into two equal parts.\n    - The sum of the lengths of any two sticks equals the length of the third stick.\n    These checks can be implemented using if-else statements to determine if any of these conditions are met for each test case.\n\n# [edge case]\n    1 1 2 = YES\n    Explanation: The stick of length 2 can be broken into two sticks of length 1, forming a rectangle with sides 1, 1, 1, 1 (a square).\n\n    1 2 3 = NO\n    Explanation: No matter how you break any stick, you cannot form a rectangle with the resulting lengths.\n\n    3 3 6 = YES\n    Explanation: The stick of length 6 can be broken into two sticks of length 3, forming a rectangle with sides 3, 3, 3, 3 (a square).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking the conditions for forming a rectangle will naturally handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if two sticks are equal and the third can be split into two equal parts\n    if l1 == l2 and l3 % 2 == 0:\n        return True\n    if l1 == l3 and l2 % 2 == 0:\n        return True\n    if l2 == l3 and l1 % 2 == 0:\n        return True\n    \n    # Check if the sum of any two sticks equals the third stick\n    if l1 + l2 == l3:\n        return True\n    if l1 + l3 == l2:\n        return True\n    if l2 + l3 == l1:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Read the first line to get the number of test cases, t. For each test case, read the line containing three integers l_1, l_2, and l_3.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to break one stick into two pieces to form a rectangle.\",\n      \"details\": \"For each test case, check if any of the three sticks can be broken into two pieces such that the resulting four sticks can form a rectangle.\"\n    },\n    {\n      \"description\": \"Check the conditions for forming a rectangle.\",\n      \"details\": \"A rectangle can be formed if there are two pairs of equal lengths among the four sticks. Consider breaking each stick and check if the resulting lengths can form two pairs of equal lengths.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, output 'YES' if it's possible to form a rectangle, otherwise output 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, perform the following steps:\",\n    \"  - Read the lengths of the three sticks, l_1, l_2, and l_3.\",\n    \"  - For each stick, consider breaking it into two pieces in all possible ways.\",\n    \"  - Check if the resulting four sticks can form a rectangle by verifying if there are two pairs of equal lengths.\",\n    \"  - If any configuration allows forming a rectangle, record 'YES', otherwise record 'NO'.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n# [phrase showing quantity relationship]\n    'greater than 0': means each piece after breaking a stick must have a length strictly greater than zero.\n    'equal to': means the sum of the lengths of the two pieces must be equal to the original length of the stick.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps to check if a stick can be broken into two pieces and form a rectangle should be considered simultaneously. For each stick, break it into two pieces in all possible ways and check if the resulting four sticks can form two pairs of equal lengths.\n\n# [edge case] \n    Test case: 1 1 1 = YES\n    Explanation: Breaking any stick into two pieces of length 1 and 1 results in four sticks of length 1, which can form a square.\n    \n    Test case: 1 2 3 = NO\n    Explanation: No matter how you break any stick, you cannot form two pairs of equal lengths.\n    \n    Test case: 2 2 4 = YES\n    Explanation: Breaking the stick of length 4 into two pieces of length 2 and 2 results in four sticks of length 2, which can form a square.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking all possible ways to break a stick and form two pairs of equal lengths will cover these edge cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Break l1 into two parts and check\n    if (l1 % 2 == 0 and l1 // 2 == l2) or (l1 % 2 == 0 and l1 // 2 == l3) or (l2 == l3):\n        return True\n    # Break l2 into two parts and check\n    if (l2 % 2 == 0 and l2 // 2 == l1) or (l2 % 2 == 0 and l2 // 2 == l3) or (l1 == l3):\n        return True\n    # Break l3 into two parts and check\n    if (l3 % 2 == 0 and l3 // 2 == l1) or (l3 % 2 == 0 and l3 // 2 == l2) or (l1 == l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Determine if a stick can be broken into two pieces with positive integer lengths.\",\n      \"details\": \"For each stick, check if it can be split into two parts such that both parts are greater than zero and their sum equals the original stick length.\"\n    },\n    {\n      \"description\": \"Check if the resulting four sticks can form a rectangle.\",\n      \"details\": \"After breaking one stick, verify if the four sticks can be paired into two sets of equal lengths.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read the number of test cases.\",\n      \"details\": \"Parse the input to get the integer t, which represents the number of test cases.\"\n    },\n    {\n      \"step\": \"Iterate over each test case.\",\n      \"details\": \"For each test case, read the lengths of the three sticks.\"\n    },\n    {\n      \"step\": \"For each stick, attempt to break it into two pieces.\",\n      \"details\": \"For each stick, consider all possible ways to break it into two positive integer lengths.\"\n    },\n    {\n      \"step\": \"Check if the resulting four sticks can form a rectangle.\",\n      \"details\": \"After breaking a stick, check if the four sticks can be paired into two sets of equal lengths.\"\n    },\n    {\n      \"step\": \"Output the result for each test case.\",\n      \"details\": \"Print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'break one stick into two pieces'\n    Explanation: This means that for each test case, you need to consider breaking one of the three given sticks into two parts such that both parts are positive integers and their sum equals the original stick length.\n\n    'construct a rectangle'\n    Explanation: This means that after breaking one stick, you should be able to use the resulting four sticks to form a rectangle, which requires two pairs of sticks with equal lengths.\n\n# [phrase showing quantity relationship]\n    'greater than 0': This means that when breaking a stick, both resulting pieces must have lengths greater than zero.\n    Implementation: Ensure that when breaking a stick of length `l`, the two resulting pieces `a` and `b` satisfy `a > 0`, `b > 0`, and `a + b = l`.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps \"For each stick, attempt to break it into two pieces\" and \"Check if the resulting four sticks can form a rectangle\" should be implemented simultaneously. \n    Implementation: For each stick, try breaking it into two parts and immediately check if the resulting four sticks can form a rectangle.\n\n# [edge case]\n    1. (1, 1, 1) = NO\n       Explanation: No matter how you break any stick, you cannot form a rectangle because you cannot have two pairs of equal lengths.\n    2. (2, 2, 3) = YES\n       Explanation: Break the stick of length 3 into two parts of 1 and 2. The resulting lengths (2, 2, 1, 2) can form a rectangle with sides 2 and 2.\n    3. (10^8, 10^8, 1) = YES\n       Explanation: Break one of the sticks of length 10^8 into two parts of 1 and (10^8 - 1). The resulting lengths (1, 10^8 - 1, 1, 10^8) can form a rectangle with sides 1 and 10^8.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking all possible ways to break a stick and forming a rectangle will naturally handle these cases.\n\nYES", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Break l1 into two parts\n    if (l2 == l3) or (l1 == l2 + l3):\n        return True\n    # Break l2 into two parts\n    if (l1 == l3) or (l2 == l1 + l3):\n        return True\n    # Break l3 into two parts\n    if (l1 == l2) or (l3 == l1 + l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Read the first line to get the number of test cases, t. For each test case, read the line containing three integers l_1, l_2, and l_3.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to break one stick into two pieces to form a rectangle.\",\n      \"details\": \"For each test case, check if any of the three sticks can be broken into two pieces such that the resulting four sticks can form a rectangle.\"\n    },\n    {\n      \"description\": \"Check the conditions for forming a rectangle.\",\n      \"details\": \"For each possible way of breaking a stick, verify if there are two pairs of equal lengths among the four resulting sticks.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, print 'YES' if it's possible to form a rectangle, otherwise print 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, read the lengths l_1, l_2, and l_3.\",\n    \"For each stick, consider breaking it into two pieces in all possible ways.\",\n    \"For each way of breaking a stick, check if the resulting four sticks can form a rectangle by checking for two pairs of equal lengths.\",\n    \"If any way of breaking a stick results in a rectangle, output 'YES'. Otherwise, output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n    'break one stick'\n    Explanation: This means that one of the three sticks must be split into two parts, and the sum of the lengths of these parts must equal the original stick length.\n\n# [phrase showing quantity relationship]\n    'greater than 0'\n    Explanation: Each piece after breaking a stick must have a length strictly greater than zero. This ensures that the pieces are valid sticks.\n    Implementation: Ensure that when breaking a stick, both resulting pieces have lengths greater than zero.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for checking if a rectangle can be formed should be considered simultaneously:\n    \"For each stick, consider breaking it into two pieces in all possible ways.\"\n    \"For each way of breaking a stick, check if the resulting four sticks can form a rectangle by checking for two pairs of equal lengths.\"\n    Implementation: Use nested loops or conditional checks to iterate through each stick and each possible break, then check for pairs of equal lengths.\n\n# [edge case]\n    Test case: 1 1 1 = YES\n    Explanation: Breaking any stick into two pieces of length 1 results in four sticks of length 1, which can form a square.\n\n    Test case: 1 2 3 = NO\n    Explanation: No matter how you break any stick, you cannot form two pairs of equal lengths.\n\n    Test case: 10 10 1 = YES\n    Explanation: Break the stick of length 1 into two pieces of length 0.5 each (not possible as per integer constraint, but hypothetically), or break one of the sticks of length 10 into two pieces of length 5 each, resulting in two pairs of equal lengths (5, 5, 10, 10).\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Code for handling the edge case:\n    ```python\n    def can_form_rectangle(l1, l2, l3):\n        # Check if breaking any stick can form a rectangle\n        if (l1 == l2 and l3 % 2 == 0) or (l1 == l3 and l2 % 2 == 0) or (l2 == l3 and l1 % 2 == ", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Case 1: Break l1 into two parts\n    if (l2 == l3 and l1 % 2 == 0) or (l1 == l2 + l3):\n        return True\n    # Case 2: Break l2 into two parts\n    if (l1 == l3 and l2 % 2 == 0) or (l2 == l1 + l3):\n        return True\n    # Case 3: Break l3 into two parts\n    if (l1 == l2 and l3 % 2 == 0) or (l3 == l1 + l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [false, false, false, false, false, false, false, false, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 451, "prompt": "There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYou are asked to break exactly one of them into two pieces in such a way that: \n\n  * both pieces have positive (strictly greater than 0) integer length. Each piece must have a length greater than zero; \n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides. \n\n\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "mutate_method": "expand_one2two", "save_node": true, "parent_index": 52}
