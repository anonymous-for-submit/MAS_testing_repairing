{"name": "1607_E. Robot on the Board 1", "description": "The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nThe sequence of commands s executed by the robot is given. Each command is denoted by one of the symbols 'L', 'R', 'D' or 'U', and triggers the movement to left, right, down or up, respectively.\n\nThe robot can start its movement in any cell. The robot executes the commands starting from the first one, strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's task is to execute as many commands as possible without falling off the board. For example, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nDetermine the cell from which the robot should start its movement in order to execute as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "tags": ["implementation"], "difficulty": 11, "id": 1607, "sample_io": [{"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}], "test_list": [{"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n5 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n1 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 1\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 4\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n1 1\n3 4\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n2 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 1\n2 1\n4 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRUDLLLDU\n", "output": ["1 2\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n2 2\nLUUDRLDLRLUU\n", "output": ["1 1\n1 2\n2 1\n2 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 1\nUULDRR\n4 2\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 1\n1 1\n4 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 1\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nLRDRUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 2\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n17 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 1\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 1\n3 1\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n4 4\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n5 2\nL\n3 3\nRRDLUU\n6 3\nLUUURRDLLLDU\n", "output": ["1 1\n1 2\n2 1\n4 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n4 4\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 4\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 1\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n4 3\nRRDLUU\n3 4\nDUULRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n2 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 2\nUULRRD\n6 2\nUULULDRRDULL\n", "output": ["1 1\n1 2\n3 2\n4 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n13 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n9 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n22 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n8 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n6 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n1 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRDRLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n5 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n4 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUT\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n6 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRDRLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n4 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n6 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDURDURL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n10 3\nRRDLUU\n6 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 2\nLUUDRLDLRLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n7 3\nRRDLUU\n8 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n8 3\nLUUDRRDLLLUT\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n5 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n3 3\nRRDUUL\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n6 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n3 3\nUULDRR\n11 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n7 3\nRRDLUU\n8 2\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n3 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nDRRLUU\n6 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n12 3\nRRDLUU\n8 2\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n2 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n5 2\nL\n3 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n10 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n4 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nLUULRRDLDLUU\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n2 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n5 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n2 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n10 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n6 3\nRRDLUU\n9 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRRDLUU\n8 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n2 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nUULDRR\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n4 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRDRLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nLUULRRDDLLUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nUULDRR\n4 2\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n6 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 4\nLUUDRRLLLDUU\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDURDURL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n1 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n2 2\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n5 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n8 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nDRRLUU\n6 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n5 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n12 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nUULDRR\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDTUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n5 3\nUUULLDRRDULL\n", "output": ["1 1\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 1\nL\n10 2\nL\n2 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 2\nUULDRR\n10 3\nLUULRRDDLLUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n23 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDTUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n13 2\nL\n2 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n6 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n9 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n15 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLRUURDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n4 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDUUL\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n4 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n11 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUV\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n5 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n12 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nUULRDR\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}], "task_id": "codecontest/102", "repair_prompt": ["The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nThe sequence of commands s executed by the robot is given. Each command is denoted by one of the symbols 'L', 'R', 'D' or 'U'. These are the symbol commands that the robot understands and uses. They are responsible for triggering movement to the left, right, down, or up, respectively.\n\nThe robot can start its movement in any cell. The robot executes the commands starting from the first one, strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's task is to execute as many commands as possible without falling off the board. For example, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nDetermine the cell from which the robot should start its movement in order to execute as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nThe sequence of commands s executed by the robot is given. Each command is denoted by one of the symbols 'L', 'R', 'D' or 'U'. The commands are conveyed using these particular symbols. They are responsible for triggering movement to the left, right, down, or up, respectively.\n\nThe robot can start its movement in any cell. The robot executes the commands starting from the first one, strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's task is to execute as many commands as possible without falling off the board. For example, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nDetermine the cell from which the robot should start its movement in order to execute as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns); the rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right. The robot is able to move from the current cell to one of the four cells adjacent by side.\n\nThe sequence of commands s executed by the robot is given. Each command is denoted by one of the symbols 'L', 'R', 'D' or 'U'. These are the symbol commands that the robot understands and uses and they are responsible for triggering movement to the left, right, down, or up, respectively.\n\nThe robot can start its movement in any cell. The robot executes the commands starting from the first one, strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's task is to execute as many commands as possible without falling off the board. For example, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nDetermine the cell from which the robot should start its movement in order to execute as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def find_starting_position(n, m, commands):\n    # Initialize the best starting position and maximum commands executed\n    best_r, best_c = 1, 1\n    max_commands_executed = 0\n\n    # Iterate over all possible starting positions\n    for start_r in range(1, n + 1):\n        for start_c in range(1, m + 1):\n            r, c = start_r, start_c\n            commands_executed = 0\n\n            # Simulate the robot's movement\n            for command in commands:\n                if command == 'L':\n                    c -= 1\n                elif command == 'R':\n                    c += 1\n                elif command == 'U':\n                    r -= 1\n                elif command == 'D':\n                    r += 1\n\n                # Check if the robot falls off the board\n                if r < 1 or r > n or c < 1 or c > m:\n                    break\n\n                commands_executed += 1\n\n            # Update the best starting position if more commands are executed\n            if commands_executed > max_commands_executed:\n                max_commands_executed = commands_executed\n                best_r, best_c = start_r, start_c\n\n    return best_r, best_c\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n\n    results = []\n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        commands = data[index + 2]\n        index += 3\n\n        r, c = find_starting_position(n, m, commands)\n        results.append(f\"{r} {c}\")\n\n    print(\"\\n\".join(results))\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        s = data[index]\n        index += 1\n        \n        # Initialize variables to track the best starting position\n        max_commands = 0\n        best_start = (1, 1)\n        \n        # Simulate the robot's movement\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                row, col = start_row, start_col\n                commands_executed = 0\n                \n                for command in s:\n                    if command == 'L':\n                        col -= 1\n                    elif command == 'R':\n                        col += 1\n                    elif command == 'U':\n                        row -= 1\n                    elif command == 'D':\n                        row += 1\n                    \n                    # Check if the robot falls off the board\n                    if row < 1 or row > n or col < 1 or col > m:\n                        break\n                    commands_executed += 1\n                \n                # Update the best starting position if this one is better\n                if commands_executed > max_commands:\n                    max_commands = commands_executed\n                    best_start = (start_row, start_col)\n        \n        results.append(f\"{best_start[0]} {best_start[1]}\")\n    \n    # Print all results for each test case\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        s = data[index + 2]\n        index += 3\n        \n        # Initialize the starting position\n        max_commands = 0\n        best_start = (1, 1)\n        \n        # Simulate the robot's movement\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                row, col = start_row, start_col\n                commands_executed = 0\n                for command in s:\n                    if command == 'L':\n                        col -= 1\n                    elif command == 'R':\n                        col += 1\n                    elif command == 'U':\n                        row -= 1\n                    elif command == 'D':\n                        row += 1\n                    \n                    # Check if the robot is still on the board\n                    if 1 <= row <= n and 1 <= col <= m:\n                        commands_executed += 1\n                    else:\n                        break\n                \n                # Update the best starting position if needed\n                if commands_executed > max_commands:\n                    max_commands = commands_executed\n                    best_start = (start_row, start_col)\n        \n        results.append(f\"{best_start[0]} {best_start[1]}\")\n    \n    # Output the results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        s = data[index + 2]\n        index += 3\n        \n        # Initialize variables to track the best starting position\n        max_commands = 0\n        best_r, best_c = 1, 1\n        \n        # Simulate the robot's movement\n        for start_r in range(1, n + 1):\n            for start_c in range(1, m + 1):\n                r, c = start_r, start_c\n                commands_executed = 0\n                for command in s:\n                    if command == 'L':\n                        c -= 1\n                    elif command == 'R':\n                        c += 1\n                    elif command == 'U':\n                        r -= 1\n                    elif command == 'D':\n                        r += 1\n                    \n                    # Check if the robot falls off the board\n                    if r < 1 or r > n or c < 1 or c > m:\n                        break\n                    commands_executed += 1\n                \n                # Update the best starting position if more commands are executed\n                if commands_executed > max_commands:\n                    max_commands = commands_executed\n                    best_r, best_c = start_r, start_c\n        \n        results.append(f\"{best_r} {best_c}\")\n    \n    # Print all results for each test case\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def find_optimal_starting_position(n, m, commands):\n    # Initialize the boundaries for the starting position\n    min_row, max_row = 1, n\n    min_col, max_col = 1, m\n    \n    # Initialize the current position\n    current_row, current_col = 1, 1\n    \n    # Iterate over each command to adjust the boundaries\n    for command in commands:\n        if command == 'L':\n            max_col = min(max_col, current_col - 1)\n        elif command == 'R':\n            min_col = max(min_col, current_col + 1)\n        elif command == 'U':\n            max_row = min(max_row, current_row - 1)\n        elif command == 'D':\n            min_row = max(min_row, current_row + 1)\n        \n        # Update the current position based on the command\n        if command == 'L':\n            current_col -= 1\n        elif command == 'R':\n            current_col += 1\n        elif command == 'U':\n            current_row -= 1\n        elif command == 'D':\n            current_row += 1\n        \n        # Check if the current position is out of bounds\n        if current_row < 1 or current_row > n or current_col < 1 or current_col > m:\n            break\n    \n    # Return the optimal starting position\n    return min_row, min_col\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        commands = data[index]\n        index += 1\n        \n        # Find the optimal starting position for the current test case\n        optimal_row, optimal_col = find_optimal_starting_position(n, m, commands)\n        results.append(f\"{optimal_row} {optimal_col}\")\n    \n    # Print all results for each test case\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def simulate_movement(n, m, commands):\n    # Initialize variables to track the best starting position\n    max_commands_executed = 0\n    best_starting_position = (1, 1)\n    \n    # Iterate over all possible starting positions\n    for start_row in range(1, n + 1):\n        for start_col in range(1, m + 1):\n            # Simulate the robot's movement from the current starting position\n            current_row, current_col = start_row, start_col\n            commands_executed = 0\n            \n            for command in commands:\n                if command == 'L':\n                    current_col -= 1\n                elif command == 'R':\n                    current_col += 1\n                elif command == 'U':\n                    current_row -= 1\n                elif command == 'D':\n                    current_row += 1\n                \n                # Check if the robot falls off the board\n                if current_row < 1 or current_row > n or current_col < 1 or current_col > m:\n                    break\n                \n                commands_executed += 1\n            \n            # Update the best starting position if more commands are executed\n            if commands_executed > max_commands_executed:\n                max_commands_executed = commands_executed\n                best_starting_position = (start_row, start_col)\n    \n    return best_starting_position\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        commands = data[index]\n        index += 1\n        \n        result = simulate_movement(n, m, commands)\n        results.append(result)\n    \n    for result in results:\n        print(result[0], result[1])\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def find_optimal_starting_position(n, m, s):\n    # Initialize the boundaries for the robot's movement\n    min_row, max_row = 0, 0\n    min_col, max_col = 0, 0\n    \n    # Current position of the robot\n    current_row, current_col = 0, 0\n    \n    # Iterate over the command sequence\n    for command in s:\n        if command == 'L':\n            current_col -= 1\n        elif command == 'R':\n            current_col += 1\n        elif command == 'U':\n            current_row -= 1\n        elif command == 'D':\n            current_row += 1\n        \n        # Update the boundaries\n        min_row = min(min_row, current_row)\n        max_row = max(max_row, current_row)\n        min_col = min(min_col, current_col)\n        max_col = max(max_col, current_col)\n    \n    # Calculate the optimal starting position\n    start_row = 1 - min_row\n    start_col = 1 - min_col\n    \n    # Ensure the starting position is within the board\n    if start_row + max_row <= n and start_col + max_col <= m:\n        return start_row, start_col\n    else:\n        return None\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        s = data[index]\n        index += 1\n        \n        result = find_optimal_starting_position(n, m, s)\n        if result:\n            results.append(f\"{result[0]} {result[1]}\")\n    \n    # Print all results for each test case\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def find_optimal_starting_position(n, m, s):\n    # Initialize boundaries\n    min_row, max_row = 0, 0\n    min_col, max_col = 0, 0\n    \n    # Current position\n    current_row, current_col = 0, 0\n    \n    # Simulate the movement\n    for command in s:\n        if command == 'L':\n            current_col -= 1\n        elif command == 'R':\n            current_col += 1\n        elif command == 'U':\n            current_row -= 1\n        elif command == 'D':\n            current_row += 1\n        \n        # Update boundaries\n        min_row = min(min_row, current_row)\n        max_row = max(max_row, current_row)\n        min_col = min(min_col, current_col)\n        max_col = max(max_col, current_col)\n    \n    # Calculate the optimal starting position\n    start_row = 1 - min_row\n    start_col = 1 - min_col\n    \n    # Ensure the starting position is within the board\n    if start_row + max_row < n and start_col + max_col < m:\n        return start_row, start_col\n    else:\n        return None\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        s = data[index]\n        index += 1\n        \n        result = find_optimal_starting_position(n, m, s)\n        if result:\n            results.append(f\"{result[0]} {result[1]}\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        s = data[index + 2]\n        index += 3\n        \n        # Initialize the boundaries\n        min_row, max_row = 0, 0\n        min_col, max_col = 0, 0\n        \n        # Current position\n        current_row, current_col = 0, 0\n        \n        # Traverse the command sequence\n        for command in s:\n            if command == 'L':\n                current_col -= 1\n            elif command == 'R':\n                current_col += 1\n            elif command == 'U':\n                current_row -= 1\n            elif command == 'D':\n                current_row += 1\n            \n            # Update boundaries\n            min_row = min(min_row, current_row)\n            max_row = max(max_row, current_row)\n            min_col = min(min_col, current_col)\n            max_col = max(max_col, current_col)\n        \n        # Calculate the optimal starting position\n        start_row = 1 - min_row\n        start_col = 1 - min_col\n        \n        # Ensure the starting position is within the board\n        if max_row - min_row < n and max_col - min_col < m:\n            results.append(f\"{start_row} {start_col}\")\n        else:\n            # If the calculated starting position is invalid, adjust it\n            if max_row - min_row >= n:\n                start_row = n - max_row\n            if max_col - min_col >= m:\n                start_col = m - max_col\n            results.append(f\"{start_row} {start_col}\")\n    \n    # Print all results\n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def find_optimal_starting_position(t, test_cases):\n    results = []\n    for n, m, s in test_cases:\n        # Initialize the boundaries for the robot's movement\n        min_row, max_row = 0, 0\n        min_col, max_col = 0, 0\n        \n        # Current position of the robot\n        current_row, current_col = 0, 0\n        \n        # Track the furthest extent of movement in each direction\n        for command in s:\n            if command == 'L':\n                current_col -= 1\n            elif command == 'R':\n                current_col += 1\n            elif command == 'U':\n                current_row -= 1\n            elif command == 'D':\n                current_row += 1\n            \n            # Update the boundaries\n            min_row = min(min_row, current_row)\n            max_row = max(max_row, current_row)\n            min_col = min(min_col, current_col)\n            max_col = max(max_col, current_col)\n        \n        # Calculate the optimal starting position\n        start_row = 1 - min_row\n        start_col = 1 - min_col\n        \n        # Ensure the starting position is within the board\n        if start_row + max_row < n and start_col + max_col < m:\n            results.append((start_row, start_col))\n        else:\n            # Adjust if the calculated position is out of bounds\n            results.append((n - max_row, m - max_col))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        s = data[index + 2]\n        test_cases.append((n, m, s))\n        index += 3\n    \n    results = find_optimal_starting_position(t, test_cases)\n    \n    for result in results:\n        print(result[0], result[1])\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def find_starting_position(n, m, commands):\n    # Initialize the best starting position and maximum commands executed\n    best_r, best_c = 1, 1\n    max_commands_executed = 0\n\n    # Iterate over all possible starting positions\n    for start_r in range(1, n + 1):\n        for start_c in range(1, m + 1):\n            r, c = start_r, start_c\n            commands_executed = 0\n\n            # Simulate the robot's movement\n            for command in commands:\n                if command == 'L':\n                    c -= 1\n                elif command == 'R':\n                    c += 1\n                elif command == 'U':\n                    r -= 1\n                elif command == 'D':\n                    r += 1\n\n                # Check if the robot falls off the board\n                if r < 1 or r > n or c < 1 or c > m:\n                    break\n\n                commands_executed += 1\n\n            # Update the best starting position if more commands are executed\n            if commands_executed > max_commands_executed:\n                max_commands_executed = commands_executed\n                best_r, best_c = start_r, start_c\n\n    return best_r, best_c\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n\n    results = []\n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        commands = data[index + 2]\n        index += 3\n\n        r, c = find_starting_position(n, m, commands)\n        results.append(f\"{r} {c}\")\n\n    print(\"\\n\".join(results))\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, board dimensions, and command sequences.\",\n      \"details\": \"Read the first integer as the number of test cases. For each test case, read two integers representing the board dimensions (n and m) and a string representing the command sequence.\"\n    },\n    {\n      \"description\": \"Simulate the robot's movement on the board for each test case.\",\n      \"details\": \"For each test case, iterate over possible starting positions on the board. For each starting position, simulate the execution of the command sequence and track the number of successfully executed commands.\"\n    },\n    {\n      \"description\": \"Determine the starting position that allows the maximum number of commands to be executed without the robot falling off the board.\",\n      \"details\": \"Compare the number of successfully executed commands for each starting position and select the position with the maximum count.\"\n    },\n    {\n      \"description\": \"Output the optimal starting position for each test case.\",\n      \"details\": \"For each test case, output the row and column of the starting position that allows the maximum number of commands to be executed.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases from the input.\",\n    \"For each test case, read the board dimensions and command sequence.\",\n    \"Initialize variables to track the maximum number of commands executed and the corresponding starting position.\",\n    \"Iterate over all possible starting positions on the board.\",\n    \"For each starting position, simulate the robot's movement according to the command sequence.\",\n    \"Track the number of commands executed successfully without the robot falling off the board.\",\n    \"Update the maximum number of commands executed and the corresponding starting position if a better position is found.\",\n    \"Output the optimal starting position for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The requirement involves simulating the movement of a robot on a board based on a sequence of commands. The robot can move left, right, up, or down, and the goal is to determine the starting position that allows the robot to execute the maximum number of commands without falling off the board.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible': This means maximizing the number of commands executed without the robot falling off the board. In code, this involves iterating over possible starting positions and tracking the number of commands executed successfully.\n\n# [degree adverb]\n    'maximum': This refers to the highest number of commands that can be executed from a starting position without the robot falling off the board. In code, this involves maintaining a variable to track the maximum number of commands executed and updating it when a better starting position is found.\n\n# [code logic]\n    The steps related to simulating the robot's movement and tracking the number of commands executed should be implemented simultaneously. Specifically, the steps:\n    - \"Iterate over all possible starting positions on the board.\"\n    - \"For each starting position, simulate the robot's movement according to the command sequence.\"\n    - \"Track the number of commands executed successfully without the robot falling off the board.\"\n    These steps can be combined into a nested loop where the outer loop iterates over starting positions and the inner loop simulates the command sequence.\n\n# [edge case]\n    1 1\n    L\n    = 1 1\n    Explanation: On a 1x1 board, any command will cause the robot to fall off immediately. The only starting position is (1, 1), and no commands can be executed successfully.\n\n    2 2\n    RR\n    = 1 1\n    Explanation: On a 2x2 board, starting from (1, 1), the robot can execute the first 'R' command but will fall off on the second 'R'. Starting from (1, 1) allows the maximum number of commands (1) to be executed.\n\n    3 3\n    UUU\n    = 3 1\n    Explanation: On a 3x3 board, starting from (3, 1), the robot can execute two 'U' commands before falling off. This is the maximum number of commands that can be executed.\n\n# [extra code for edge case]\n    We need extra code to handle the", "Round_0": {"code": "def find_starting_position(n, m, commands):\n    # Initialize the best starting position and maximum commands executed\n    best_r, best_c = 1, 1\n    max_commands_executed = 0\n\n    # Iterate over all possible starting positions\n    for start_r in range(1, n + 1):\n        for start_c in range(1, m + 1):\n            r, c = start_r, start_c\n            commands_executed = 0\n\n            # Simulate the robot's movement\n            for command in commands:\n                if command == 'L':\n                    c -= 1\n                elif command == 'R':\n                    c += 1\n                elif command == 'U':\n                    r -= 1\n                elif command == 'D':\n                    r += 1\n\n                # Check if the robot falls off the board\n                if r < 1 or r > n or c < 1 or c > m:\n                    break\n\n                commands_executed += 1\n\n            # Update the best starting position if more commands are executed\n            if commands_executed > max_commands_executed:\n                max_commands_executed = commands_executed\n                best_r, best_c = start_r, start_c\n\n    return best_r, best_c\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n\n    results = []\n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        commands = data[index + 2]\n        index += 3\n\n        r, c = find_starting_position(n, m, commands)\n        results.append(f\"{r} {c}\")\n\n    print(\"\\n\".join(results))\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, board dimensions, and command sequences.\",\n      \"details\": \"Read the first integer as the number of test cases. For each test case, read two integers representing the board dimensions (n and m) and a string representing the sequence of commands.\"\n    },\n    {\n      \"description\": \"Simulate the robot's movement on the board for each test case.\",\n      \"details\": \"For each test case, iterate over possible starting positions on the board. For each starting position, simulate the execution of the command sequence and track the number of successfully executed commands before the robot falls off the board.\"\n    },\n    {\n      \"description\": \"Determine the starting position that allows the maximum number of commands to be executed without the robot falling off the board.\",\n      \"details\": \"Compare the number of successfully executed commands for each starting position and select the position with the maximum count.\"\n    },\n    {\n      \"description\": \"Output the optimal starting position for each test case.\",\n      \"details\": \"For each test case, print the row and column of the starting position that allows the maximum number of commands to be executed.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read and parse the input to extract the number of test cases, board dimensions, and command sequences.\",\n    \"For each test case, iterate over all possible starting positions on the board.\",\n    \"Simulate the robot's movement from each starting position using the given command sequence.\",\n    \"Track the number of commands executed successfully before the robot falls off the board.\",\n    \"Identify the starting position that allows the maximum number of commands to be executed.\",\n    \"Output the optimal starting position for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The requirement is about simulating the movement of a robot on a board based on a sequence of commands. The robot can move left, right, up, or down, and the goal is to determine the starting position that allows the robot to execute the maximum number of commands without falling off the board.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible': This means we need to maximize the number of commands executed without the robot falling off the board. In code, this involves simulating the robot's movement and counting the number of commands executed before a fall occurs.\n\n# [degree adverb]\n    'maximum': This refers to the highest number of commands that can be executed from a starting position without the robot falling off the board. In code, this involves comparing the number of successfully executed commands from different starting positions and selecting the highest.\n\n# [code logic]\n    The steps \"Simulate the robot's movement from each starting position using the given command sequence\" and \"Track the number of commands executed successfully before the robot falls off the board\" should be implemented simultaneously. This can be done by iterating over each possible starting position and simulating the command sequence, updating the count of successfully executed commands in the same loop.\n\n# [edge case]\n    1 1\n    L\n    = 1 1\n    Explanation: On a 1x1 board, any command will cause the robot to fall immediately, so the starting position doesn't matter, and the robot will execute 0 commands successfully.\n\n    2 2\n    UUDD\n    = 1 1\n    Explanation: On a 2x2 board, starting from (1,1), the robot can execute the first 'U' command, but the second 'U' will cause it to fall. Starting from (2,1), the robot can execute 'U' and 'U' successfully, but the first 'D' will cause it to fall. The maximum number of commands executed is 2.\n\n    3 3\n    RRR\n    = 1 1\n    Explanation: On a 3x3 board, starting from (1,1), the robot can execute all 'R' commands successfully without falling.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the board size is minimal (1x1) or where the command sequence is such that any starting position results", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        s = data[index]\n        index += 1\n        \n        # Initialize variables to track the best starting position\n        max_commands = 0\n        best_start = (1, 1)\n        \n        # Simulate the robot's movement\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                row, col = start_row, start_col\n                commands_executed = 0\n                \n                for command in s:\n                    if command == 'L':\n                        col -= 1\n                    elif command == 'R':\n                        col += 1\n                    elif command == 'U':\n                        row -= 1\n                    elif command == 'D':\n                        row += 1\n                    \n                    # Check if the robot falls off the board\n                    if row < 1 or row > n or col < 1 or col > m:\n                        break\n                    commands_executed += 1\n                \n                # Update the best starting position if this one is better\n                if commands_executed > max_commands:\n                    max_commands = commands_executed\n                    best_start = (start_row, start_col)\n        \n        results.append(f\"{best_start[0]} {best_start[1]}\")\n    \n    # Print all results for each test case\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t, which represents the number of test cases.\",\n        \"For each test case, read the integers n and m, which represent the dimensions of the board.\",\n        \"Read the string s, which represents the sequence of commands.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the robot's movement on the board for each test case to determine the optimal starting position.\",\n      \"steps\": [\n        \"Initialize variables to track the maximum number of commands executed and the corresponding starting position.\",\n        \"For each possible starting position on the board, simulate the robot's movement according to the command sequence s.\",\n        \"Track the robot's position and ensure it does not move beyond the board's boundaries.\",\n        \"Count the number of successfully executed commands before the robot falls off the board.\",\n        \"Update the maximum number of commands executed and the starting position if a better result is found.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"For each test case, output the row and column of the starting position that allows the maximum number of commands to be executed.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, iterate over all possible starting positions on the board.\",\n    \"Simulate the robot's movement for each starting position and track the number of commands executed.\",\n    \"Determine the starting position that allows the maximum number of commands to be executed without the robot falling off the board.\",\n    \"Output the optimal starting position for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The requirement involves simulating the movement of a robot on a grid based on a sequence of commands ('L', 'R', 'D', 'U') and determining the optimal starting position to maximize the number of commands executed without falling off the grid.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible': This means the goal is to execute the maximum number of commands from the sequence without the robot falling off the board. In code, this involves iterating over possible starting positions and counting the number of commands executed before the robot falls off.\n\n# [degree adverb] \n    'maximum': This refers to the highest number of commands that can be executed from a starting position without the robot falling off the board. In code, this involves keeping track of the maximum number of commands executed and updating it when a better starting position is found.\n\n# [code logic]\n    The steps in the plan related to simulating the robot's movement and tracking the number of commands executed should be implemented simultaneously. Specifically, the steps:\n    - \"Simulate the robot's movement according to the command sequence s.\"\n    - \"Track the robot's position and ensure it does not move beyond the board's boundaries.\"\n    - \"Count the number of successfully executed commands before the robot falls off the board.\"\n    These can be implemented in a single loop that iterates over the command sequence and updates the robot's position while checking boundaries.\n\n# [edge case] \n    1. n = 1, m = 1, s = \"L\" = 1 1\n       Explanation: The board is 1x1, so any move will cause the robot to fall off immediately. The only starting position is (1, 1).\n    2. n = 2, m = 2, s = \"RR\" = 1 1\n       Explanation: The robot can only move right once before falling off, starting from (1, 1) or (2, 1).\n    3. n = 3, m = 3, s = \"UUU\" = 3 1\n       Explanation: Starting from the bottom row (3, 1), the robot can execute all 'U' commands without falling off.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the board size is minimal (1x1) or the command sequence is such that any move results", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        s = data[index + 2]\n        index += 3\n        \n        # Initialize the starting position\n        max_commands = 0\n        best_start = (1, 1)\n        \n        # Simulate the robot's movement\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                row, col = start_row, start_col\n                commands_executed = 0\n                for command in s:\n                    if command == 'L':\n                        col -= 1\n                    elif command == 'R':\n                        col += 1\n                    elif command == 'U':\n                        row -= 1\n                    elif command == 'D':\n                        row += 1\n                    \n                    # Check if the robot is still on the board\n                    if 1 <= row <= n and 1 <= col <= m:\n                        commands_executed += 1\n                    else:\n                        break\n                \n                # Update the best starting position if needed\n                if commands_executed > max_commands:\n                    max_commands = commands_executed\n                    best_start = (start_row, start_col)\n        \n        results.append(f\"{best_start[0]} {best_start[1]}\")\n    \n    # Output the results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case, including the board dimensions and the sequence of commands.\",\n      \"output\": \"A list of test cases, where each test case contains the board dimensions (n, m) and the command sequence (s).\"\n    },\n    {\n      \"description\": \"For each test case, determine the starting cell (r, c) that allows the robot to execute the maximum number of commands without falling off the board.\",\n      \"output\": \"For each test case, the coordinates (r, c) of the optimal starting cell.\"\n    },\n    {\n      \"description\": \"Simulate the robot's movement on the board for each possible starting cell and track the number of successfully executed commands.\",\n      \"output\": \"The number of commands executed for each starting cell.\"\n    },\n    {\n      \"description\": \"Identify the starting cell that results in the maximum number of executed commands for each test case.\",\n      \"output\": \"The coordinates (r, c) of the starting cell that maximizes the number of executed commands.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input to get the number of test cases and the details for each test case.\",\n    \"For each test case, iterate over all possible starting cells on the board.\",\n    \"For each starting cell, simulate the robot's movement according to the command sequence.\",\n    \"Track the number of commands executed before the robot falls off the board.\",\n    \"Compare the results for all starting cells and select the one with the maximum executed commands.\",\n    \"Output the coordinates of the optimal starting cell for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board'\n    This refers to the grid-like structure of the board where the robot can move. Each cell is a potential starting point for the robot.\n\n    'adjacent by side'\n    This means the robot can move to cells directly next to its current position, either left, right, up, or down.\n\n    'sequence of commands'\n    This is the list of movements the robot will attempt to execute, which dictates its path on the board.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible'\n    This implies maximizing the number of commands executed without the robot falling off the board.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially, as each step builds upon the previous one. However, the simulation of the robot's movement and tracking the number of executed commands can be done simultaneously for each starting cell.\n\n# [edge case]\n    Test case with a 1x1 board and a command sequence that immediately causes the robot to fall off:\n    1 1\n    R\n    Expected output: 1 1\n    Explanation: The robot can only start at (1, 1) and any command will cause it to fall off immediately.\n\n    Test case with a board where all commands lead to falling off:\n    2 2\n    RRR\n    Expected output: 1 1\n    Explanation: Starting at (1, 1), the robot will fall off after the first command. No other starting position allows more commands to be executed.\n\n    Test case with a board where the robot can execute all commands without falling:\n    3 3\n    LURD\n    Expected output: 2 2\n    Explanation: Starting at (2, 2), the robot can execute all commands without falling off.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the board is very small or the command sequence is very long.\n    Code for handling edge cases:\n    ```python\n    def handle_edge_cases(n, m, s):\n        if n == 1 and m == 1:\n            return 1, 1\n        if len(s) > n * m:\n            return 1, 1\n        # Other logic to determine the best starting point\n    ```\n\nYES", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        s = data[index + 2]\n        index += 3\n        \n        # Initialize variables to track the best starting position\n        max_commands = 0\n        best_r, best_c = 1, 1\n        \n        # Simulate the robot's movement\n        for start_r in range(1, n + 1):\n            for start_c in range(1, m + 1):\n                r, c = start_r, start_c\n                commands_executed = 0\n                for command in s:\n                    if command == 'L':\n                        c -= 1\n                    elif command == 'R':\n                        c += 1\n                    elif command == 'U':\n                        r -= 1\n                    elif command == 'D':\n                        r += 1\n                    \n                    # Check if the robot falls off the board\n                    if r < 1 or r > n or c < 1 or c > m:\n                        break\n                    commands_executed += 1\n                \n                # Update the best starting position if more commands are executed\n                if commands_executed > max_commands:\n                    max_commands = commands_executed\n                    best_r, best_c = start_r, start_c\n        \n        results.append(f\"{best_r} {best_c}\")\n    \n    # Print all results for each test case\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case, including the board dimensions and the sequence of commands.\",\n      \"output\": \"A list of test cases, each containing the board dimensions (n, m) and the command sequence (s).\"\n    },\n    {\n      \"description\": \"For each test case, determine the starting position on the board that allows the robot to execute the maximum number of commands without falling off the board.\",\n      \"output\": \"The optimal starting position (r, c) for each test case.\"\n    },\n    {\n      \"description\": \"Simulate the robot's movement on the board for a given starting position and command sequence, checking if the robot falls off the board.\",\n      \"output\": \"The number of successfully executed commands before the robot falls off the board.\"\n    },\n    {\n      \"description\": \"Iterate over all possible starting positions on the board to find the one that allows the maximum number of commands to be executed.\",\n      \"output\": \"The starting position (r, c) that maximizes the number of executed commands for each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases from the input.\",\n    \"For each test case, read the board dimensions (n, m) and the command sequence (s).\",\n    \"Initialize variables to track the maximum number of commands executed and the corresponding starting position.\",\n    \"For each possible starting position on the board:\",\n    \"  Simulate the robot's movement using the command sequence.\",\n    \"  Track the number of commands executed before the robot falls off the board.\",\n    \"  If the current starting position allows more commands to be executed than previously recorded, update the maximum and the starting position.\",\n    \"Output the optimal starting position for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board'\n    Explanation: This refers to the grid-like structure of the board where the robot can move. Each cell is a square, and the board is defined by its dimensions n (rows) and m (columns).\n\n    'sequence of commands'\n    Explanation: This is the list of movements the robot will execute, represented by the characters 'L', 'R', 'D', and 'U', which stand for left, right, down, and up, respectively.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible'\n    Explanation: This means the goal is to execute the maximum number of commands without the robot falling off the board. In code, this involves simulating the robot's movement and counting the number of successful moves.\n\n# [degree adverb]\n    'maximum'\n    Explanation: This refers to the highest number of commands that can be executed without the robot falling off the board. In code, this involves keeping track of the highest count of successful moves for each starting position.\n\n# [code logic]\n    The steps in the plan should be implemented sequentially, as each step builds upon the previous one. However, the simulation of the robot's movement and the tracking of commands executed can be done in a single loop for each starting position.\n\n# [edge case]\n    1 1 L = 1 1\n    Explanation: With a 1x1 board, any move will cause the robot to fall off, so the starting position is the only cell available.\n\n    1 2 L = 1 2\n    Explanation: On a 1x2 board, starting at the second column allows the robot to execute the 'L' command without falling off.\n\n    3 3 UUU = 3 1\n    Explanation: Starting at the bottom row allows the robot to execute all 'U' commands without falling off.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the board dimensions are minimal (e.g., 1x1 or 1x2). This can be handled by checking the board dimensions before simulating movements and directly returning the only possible starting position if the board is too small for any movement.\n\nYES", "Round_0": {"code": "def find_optimal_starting_position(n, m, commands):\n    # Initialize the boundaries for the starting position\n    min_row, max_row = 1, n\n    min_col, max_col = 1, m\n    \n    # Initialize the current position\n    current_row, current_col = 1, 1\n    \n    # Iterate over each command to adjust the boundaries\n    for command in commands:\n        if command == 'L':\n            max_col = min(max_col, current_col - 1)\n        elif command == 'R':\n            min_col = max(min_col, current_col + 1)\n        elif command == 'U':\n            max_row = min(max_row, current_row - 1)\n        elif command == 'D':\n            min_row = max(min_row, current_row + 1)\n        \n        # Update the current position based on the command\n        if command == 'L':\n            current_col -= 1\n        elif command == 'R':\n            current_col += 1\n        elif command == 'U':\n            current_row -= 1\n        elif command == 'D':\n            current_row += 1\n        \n        # Check if the current position is out of bounds\n        if current_row < 1 or current_row > n or current_col < 1 or current_col > m:\n            break\n    \n    # Return the optimal starting position\n    return min_row, min_col\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        commands = data[index]\n        index += 1\n        \n        # Find the optimal starting position for the current test case\n        optimal_row, optimal_col = find_optimal_starting_position(n, m, commands)\n        results.append(f\"{optimal_row} {optimal_col}\")\n    \n    # Print all results for each test case\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case, including the board dimensions and the sequence of commands.\",\n      \"output\": \"A list of test cases, where each test case contains the board dimensions and the command sequence.\"\n    },\n    {\n      \"description\": \"For each test case, determine the starting cell that allows the robot to execute the maximum number of commands without falling off the board.\",\n      \"output\": \"The coordinates of the starting cell for each test case.\"\n    },\n    {\n      \"description\": \"Simulate the robot's movement on the board for a given starting cell and command sequence, checking if the robot falls off the board.\",\n      \"output\": \"The number of successfully executed commands for a given starting cell.\"\n    },\n    {\n      \"description\": \"Iterate over all possible starting cells on the board to find the one that allows the maximum number of commands to be executed.\",\n      \"output\": \"The starting cell coordinates that maximize the number of executed commands.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases from the input.\",\n    \"For each test case, read the board dimensions and the command sequence.\",\n    \"Initialize variables to track the maximum number of commands executed and the corresponding starting cell.\",\n    \"For each possible starting cell on the board, simulate the robot's movement using the command sequence.\",\n    \"Check if the robot falls off the board during the simulation. If not, count the number of commands executed.\",\n    \"Update the maximum number of commands executed and the starting cell if the current simulation results in more commands executed.\",\n    \"After checking all starting cells, store the coordinates of the starting cell that allows the maximum number of commands to be executed.\",\n    \"Output the starting cell coordinates for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The requirement involves simulating the movement of a robot on a board based on a sequence of commands. The robot can move left, right, up, or down, and the goal is to determine the starting position that allows the robot to execute the maximum number of commands without falling off the board.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible': This means maximizing the number of commands executed without the robot falling off the board. In code, this involves iterating over possible starting positions and tracking the number of commands executed for each.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps related to simulating the robot's movement and checking if it falls off the board should be implemented simultaneously. Specifically, the simulation of the robot's movement and the check for falling off the board should occur within the same loop or function to efficiently determine the number of commands executed for each starting position.\n\n# [edge case] \n    1. Board size 1x1 with any command: (1, 1)\n       Explanation: The robot cannot move without falling off, so the starting position is the only cell available.\n    2. Command sequence longer than board size: For a 2x2 board with commands \"RRUU\", starting at (1, 1) results in falling off after two commands.\n       Explanation: The robot will fall off after executing the second command, so the starting position should be chosen to maximize the number of commands before falling.\n    3. Large board with a short command sequence: For a 1000x1000 board with commands \"L\", starting at (1, 2) allows executing the command without falling.\n       Explanation: The robot can execute the command without falling, so any starting position that allows this is valid.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Specifically, we need to ensure that the simulation correctly handles the boundaries of the board and stops executing commands when the robot would fall off. This can be done by checking the robot's position after each command and ensuring it remains within the board's dimensions.\n\n```python\ndef simulate_movement(n, m, commands):\n    # Initialize variables to track the best starting position\n    max_commands_executed = 0\n    best_starting_position = (1, 1)\n    \n    # Iterate over all possible starting positions\n    for", "Round_0": {"code": "def simulate_movement(n, m, commands):\n    # Initialize variables to track the best starting position\n    max_commands_executed = 0\n    best_starting_position = (1, 1)\n    \n    # Iterate over all possible starting positions\n    for start_row in range(1, n + 1):\n        for start_col in range(1, m + 1):\n            # Simulate the robot's movement from the current starting position\n            current_row, current_col = start_row, start_col\n            commands_executed = 0\n            \n            for command in commands:\n                if command == 'L':\n                    current_col -= 1\n                elif command == 'R':\n                    current_col += 1\n                elif command == 'U':\n                    current_row -= 1\n                elif command == 'D':\n                    current_row += 1\n                \n                # Check if the robot falls off the board\n                if current_row < 1 or current_row > n or current_col < 1 or current_col > m:\n                    break\n                \n                commands_executed += 1\n            \n            # Update the best starting position if more commands are executed\n            if commands_executed > max_commands_executed:\n                max_commands_executed = commands_executed\n                best_starting_position = (start_row, start_col)\n    \n    return best_starting_position\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        commands = data[index]\n        index += 1\n        \n        result = simulate_movement(n, m, commands)\n        results.append(result)\n    \n    for result in results:\n        print(result[0], result[1])\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, board dimensions, and command sequences.\",\n      \"steps\": [\n        \"Read the integer t from the input, representing the number of test cases.\",\n        \"For each test case, read the integers n and m, representing the board dimensions.\",\n        \"Read the string s, representing the sequence of commands.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the robot's movement on the board for each test case to determine the optimal starting position.\",\n      \"steps\": [\n        \"Initialize variables to track the robot's position and the number of successfully executed commands.\",\n        \"Iterate over all possible starting positions on the board.\",\n        \"For each starting position, simulate the robot's movement according to the command sequence s.\",\n        \"Check if the robot moves beyond the board's boundaries after each command.\",\n        \"Track the starting position that allows the maximum number of commands to be executed without falling off the board.\"\n      ]\n    },\n    {\n      \"description\": \"Output the optimal starting position for each test case.\",\n      \"steps\": [\n        \"For each test case, output the row and column of the optimal starting position that allows the maximum number of commands to be executed.\",\n        \"Ensure the output format matches the specified requirements.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases, board dimensions, and command sequences.\",\n    \"For each test case, iterate over all possible starting positions on the board.\",\n    \"Simulate the robot's movement from each starting position according to the command sequence.\",\n    \"Track the starting position that allows the maximum number of commands to be executed without falling off the board.\",\n    \"Output the optimal starting position for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The requirement involves simulating the movement of a robot on a board based on a sequence of commands. The robot can move left, right, up, or down, and the goal is to determine the starting position that allows the robot to execute the maximum number of commands without falling off the board.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible': This means the goal is to maximize the number of commands executed without the robot falling off the board. In code, this involves iterating over possible starting positions and tracking the number of commands executed successfully.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan related to simulating the robot's movement and checking boundaries should be implemented simultaneously. Specifically, the steps:\n    - \"Simulate the robot's movement according to the command sequence s.\"\n    - \"Check if the robot moves beyond the board's boundaries after each command.\"\n    These can be implemented in a single loop that processes each command and checks the robot's position.\n\n# [edge case]\n    1. n = 1, m = 1, s = \"L\" = (1, 1)\n       Explanation: The board is 1x1, so any move will cause the robot to fall. The only starting position is (1, 1), and no commands can be executed.\n    2. n = 2, m = 2, s = \"UDLR\" = (1, 1)\n       Explanation: The board is 2x2, and the sequence of commands will cause the robot to fall immediately from any starting position. The output can be any valid starting position, such as (1, 1).\n    3. n = 3, m = 3, s = \"RRR\" = (1, 1)\n       Explanation: The robot can start at (1, 1) and execute two 'R' commands before falling off the board on the third 'R'. The starting position (1, 1) allows the maximum number of commands to be executed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over all possible starting positions and simulating the robot's movement will naturally handle these cases.\n\nNO", "Round_0": {"code": "def find_optimal_starting_position(n, m, s):\n    # Initialize the boundaries for the robot's movement\n    min_row, max_row = 0, 0\n    min_col, max_col = 0, 0\n    \n    # Current position of the robot\n    current_row, current_col = 0, 0\n    \n    # Iterate over the command sequence\n    for command in s:\n        if command == 'L':\n            current_col -= 1\n        elif command == 'R':\n            current_col += 1\n        elif command == 'U':\n            current_row -= 1\n        elif command == 'D':\n            current_row += 1\n        \n        # Update the boundaries\n        min_row = min(min_row, current_row)\n        max_row = max(max_row, current_row)\n        min_col = min(min_col, current_col)\n        max_col = max(max_col, current_col)\n    \n    # Calculate the optimal starting position\n    start_row = 1 - min_row\n    start_col = 1 - min_col\n    \n    # Ensure the starting position is within the board\n    if start_row + max_row <= n and start_col + max_col <= m:\n        return start_row, start_col\n    else:\n        return None\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        s = data[index]\n        index += 1\n        \n        result = find_optimal_starting_position(n, m, s)\n        if result:\n            results.append(f\"{result[0]} {result[1]}\")\n    \n    # Print all results for each test case\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, board dimensions, and command sequences.\",\n      \"steps\": [\n        \"Read the integer t from the input, which represents the number of test cases.\",\n        \"For each test case, read the integers n and m, which represent the dimensions of the board.\",\n        \"Read the string s, which represents the sequence of commands.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the robot's movement on the board for each test case to determine the optimal starting position.\",\n      \"steps\": [\n        \"Initialize variables to track the robot's position and the number of successfully executed commands.\",\n        \"Iterate over all possible starting positions on the board.\",\n        \"For each starting position, simulate the robot's movement according to the command sequence s.\",\n        \"Check if the robot moves beyond the board's boundaries after each command.\",\n        \"Track the starting position that allows the maximum number of commands to be executed without the robot falling off the board.\"\n      ]\n    },\n    {\n      \"description\": \"Output the optimal starting position for each test case.\",\n      \"steps\": [\n        \"For each test case, output the row and column of the starting position that allows the maximum number of commands to be executed.\",\n        \"Ensure the output format matches the specified requirements.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases, board dimensions, and command sequences.\",\n    \"For each test case, iterate over all possible starting positions on the board.\",\n    \"Simulate the robot's movement for each starting position and track the number of successfully executed commands.\",\n    \"Determine the starting position that allows the maximum number of commands to be executed without falling off the board.\",\n    \"Output the optimal starting position for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The requirement involves simulating the movement of a robot on a board based on a sequence of commands ('L', 'R', 'D', 'U') and determining the optimal starting position to execute the maximum number of commands without falling off the board.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible': This means the goal is to maximize the number of commands executed without the robot falling off the board. In code, this involves iterating over possible starting positions and tracking the number of commands executed successfully.\n\n# [degree adverb] \n    'maximum': This refers to the highest number of commands that can be executed from a starting position without the robot falling off the board. In code, this involves comparing the number of successfully executed commands for different starting positions and selecting the one with the highest count.\n\n# [code logic]\n    The steps in the plan related to simulating the robot's movement and checking boundaries should be implemented simultaneously. Specifically, the steps:\n    - \"For each starting position, simulate the robot's movement according to the command sequence s.\"\n    - \"Check if the robot moves beyond the board's boundaries after each command.\"\n    These can be implemented in a single loop that iterates over the command sequence and checks boundaries in each iteration.\n\n# [edge case] \n    Edge Case 1: n = 1, m = 1, s = \"L\"\n    Expected Output: 1 1\n    Explanation: The board is 1x1, so any command will cause the robot to fall off immediately. The only starting position is (1, 1).\n\n    Edge Case 2: n = 1, m = 2, s = \"L\"\n    Expected Output: 1 2\n    Explanation: Starting at (1, 2) allows the robot to execute the 'L' command without falling off, as it moves to (1, 1).\n\n    Edge Case 3: n = 2, m = 2, s = \"RR\"\n    Expected Output: 1 1\n    Explanation: Starting at (1, 1) allows the robot to execute the first 'R' command, but the second 'R' would cause it to fall off. Starting at (1, 2) would cause it to fall off immediately.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of", "Round_0": {"code": "def find_optimal_starting_position(n, m, s):\n    # Initialize boundaries\n    min_row, max_row = 0, 0\n    min_col, max_col = 0, 0\n    \n    # Current position\n    current_row, current_col = 0, 0\n    \n    # Simulate the movement\n    for command in s:\n        if command == 'L':\n            current_col -= 1\n        elif command == 'R':\n            current_col += 1\n        elif command == 'U':\n            current_row -= 1\n        elif command == 'D':\n            current_row += 1\n        \n        # Update boundaries\n        min_row = min(min_row, current_row)\n        max_row = max(max_row, current_row)\n        min_col = min(min_col, current_col)\n        max_col = max(max_col, current_col)\n    \n    # Calculate the optimal starting position\n    start_row = 1 - min_row\n    start_col = 1 - min_col\n    \n    # Ensure the starting position is within the board\n    if start_row + max_row < n and start_col + max_col < m:\n        return start_row, start_col\n    else:\n        return None\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        s = data[index]\n        index += 1\n        \n        result = find_optimal_starting_position(n, m, s)\n        if result:\n            results.append(f\"{result[0]} {result[1]}\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, board dimensions, and command sequences.\",\n      \"steps\": [\n        \"Read the integer t representing the number of test cases.\",\n        \"For each test case, read integers n and m representing the board dimensions.\",\n        \"Read the string s representing the sequence of commands.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the robot's movement on the board for each test case to determine the optimal starting position.\",\n      \"steps\": [\n        \"Initialize variables to track the robot's position and the number of successfully executed commands.\",\n        \"Iterate over all possible starting positions on the board.\",\n        \"For each starting position, simulate the robot's movement according to the command sequence s.\",\n        \"Check if the robot falls off the board after each command and stop the simulation if it does.\",\n        \"Track the starting position that allows the maximum number of commands to be executed successfully.\"\n      ]\n    },\n    {\n      \"description\": \"Output the optimal starting position for each test case.\",\n      \"steps\": [\n        \"For each test case, output the row and column of the starting position that allows the maximum number of commands to be executed.\",\n        \"Ensure the output format matches the specified requirements.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract test cases, board dimensions, and command sequences.\",\n    \"For each test case, iterate over all possible starting positions on the board.\",\n    \"Simulate the robot's movement for each starting position and track the number of successfully executed commands.\",\n    \"Determine the starting position that allows the maximum number of commands to be executed without falling off the board.\",\n    \"Output the optimal starting position for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The requirement involves simulating the movement of a robot on a board based on a sequence of commands. The robot can move left, right, up, or down, and the goal is to determine the starting position that allows the robot to execute the maximum number of commands without falling off the board.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible': This means the goal is to maximize the number of commands executed without the robot falling off the board. In code, this involves simulating the robot's movement from different starting positions and counting the number of commands executed before the robot falls off.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan related to simulating the robot's movement and checking if it falls off the board should be implemented simultaneously. Specifically, the steps:\n    - \"For each starting position, simulate the robot's movement according to the command sequence s.\"\n    - \"Check if the robot falls off the board after each command and stop the simulation if it does.\"\n    These can be implemented in a single loop that iterates over the command sequence and updates the robot's position, checking after each move if the robot is still on the board.\n\n# [edge case]\n    1 1\n    L\n    = 1 1\n    Explanation: On a 1x1 board, any move will cause the robot to fall off immediately. The only starting position is (1, 1), and no commands can be executed successfully.\n\n    2 2\n    UUDD\n    = 1 1\n    Explanation: On a 2x2 board, starting at (1, 1) allows the robot to execute the first 'U' command, but it will fall off on the second 'U'. Starting at (2, 1) or (2, 2) allows executing 'U' twice, but the robot will fall off on the first 'D'. The optimal starting position is (1, 1) or (1, 2).\n\n    3 3\n    RRR\n    = 1 1\n    Explanation: On a 3x3 board, starting at (1, 1) allows the robot to execute all 'R' commands without falling off. Starting at (1, 2) or (1, 3) will cause the robot to fall off after fewer commands.\n\n", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        s = data[index + 2]\n        index += 3\n        \n        # Initialize the boundaries\n        min_row, max_row = 0, 0\n        min_col, max_col = 0, 0\n        \n        # Current position\n        current_row, current_col = 0, 0\n        \n        # Traverse the command sequence\n        for command in s:\n            if command == 'L':\n                current_col -= 1\n            elif command == 'R':\n                current_col += 1\n            elif command == 'U':\n                current_row -= 1\n            elif command == 'D':\n                current_row += 1\n            \n            # Update boundaries\n            min_row = min(min_row, current_row)\n            max_row = max(max_row, current_row)\n            min_col = min(min_col, current_col)\n            max_col = max(max_col, current_col)\n        \n        # Calculate the optimal starting position\n        start_row = 1 - min_row\n        start_col = 1 - min_col\n        \n        # Ensure the starting position is within the board\n        if max_row - min_row < n and max_col - min_col < m:\n            results.append(f\"{start_row} {start_col}\")\n        else:\n            # If the calculated starting position is invalid, adjust it\n            if max_row - min_row >= n:\n                start_row = n - max_row\n            if max_col - min_col >= m:\n                start_col = m - max_col\n            results.append(f\"{start_row} {start_col}\")\n    \n    # Print all results\n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, board dimensions, and command sequences.\",\n      \"steps\": [\n        \"Read the integer t from the input, representing the number of test cases.\",\n        \"For each test case, read two integers n and m, representing the board dimensions.\",\n        \"Read the string s, representing the sequence of commands.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the robot's movement on the board for each test case to determine the optimal starting position.\",\n      \"steps\": [\n        \"Initialize variables to track the robot's position and the number of successfully executed commands.\",\n        \"Iterate over each possible starting position on the board.\",\n        \"For each starting position, simulate the robot's movement according to the command sequence s.\",\n        \"Check if the robot moves beyond the board's boundaries after each command.\",\n        \"Track the starting position that allows the maximum number of commands to be executed without the robot falling off the board.\"\n      ]\n    },\n    {\n      \"description\": \"Output the optimal starting position for each test case.\",\n      \"steps\": [\n        \"For each test case, output the row and column of the starting position that allows the maximum number of commands to be executed.\",\n        \"Ensure the output format matches the required format: two integers separated by a space.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases, board dimensions, and command sequences.\",\n    \"For each test case, iterate over all possible starting positions on the board.\",\n    \"Simulate the robot's movement from each starting position according to the command sequence.\",\n    \"Track the starting position that allows the maximum number of commands to be executed without falling off the board.\",\n    \"Output the optimal starting position for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The robot can move in four directions: left ('L'), right ('R'), down ('D'), and up ('U'). The task is to find the starting position on the board that allows the robot to execute the maximum number of commands without falling off the board.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible': This means we need to maximize the number of commands executed without the robot falling off the board. In code, this can be implemented by keeping track of the number of commands executed from each starting position and selecting the position with the highest count.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan related to simulating the robot's movement and checking boundaries should be implemented simultaneously. Specifically:\n    - \"Iterate over each possible starting position on the board.\"\n    - \"For each starting position, simulate the robot's movement according to the command sequence s.\"\n    - \"Check if the robot moves beyond the board's boundaries after each command.\"\n    These steps can be combined in a nested loop where the outer loop iterates over starting positions and the inner loop simulates the movement and checks boundaries.\n\n# [edge case]\n    1 1\n    L\n    = 1 1\n    Explanation: With a 1x1 board, any command will cause the robot to fall off immediately, so the starting position doesn't matter; the robot will execute 0 commands successfully.\n\n    2 2\n    LRUD\n    = 1 1\n    Explanation: On a 2x2 board, starting from (1,1) allows the robot to execute all commands without falling off, as it can move left and right or up and down within the board.\n\n    3 3\n    UUU\n    = 3 1\n    Explanation: Starting from the bottom row (3,1) allows the robot to execute the maximum number of 'U' commands without falling off.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the board size is minimal (1x1) or the command sequence is such that any starting position results in immediate failure.\n    ```python\n    if n == 1 and m == 1:\n        print(1, 1)\n        continue\n    ```\n\nYES", "Round_0": {"code": "def find_optimal_starting_position(t, test_cases):\n    results = []\n    for n, m, s in test_cases:\n        # Initialize the boundaries for the robot's movement\n        min_row, max_row = 0, 0\n        min_col, max_col = 0, 0\n        \n        # Current position of the robot\n        current_row, current_col = 0, 0\n        \n        # Track the furthest extent of movement in each direction\n        for command in s:\n            if command == 'L':\n                current_col -= 1\n            elif command == 'R':\n                current_col += 1\n            elif command == 'U':\n                current_row -= 1\n            elif command == 'D':\n                current_row += 1\n            \n            # Update the boundaries\n            min_row = min(min_row, current_row)\n            max_row = max(max_row, current_row)\n            min_col = min(min_col, current_col)\n            max_col = max(max_col, current_col)\n        \n        # Calculate the optimal starting position\n        start_row = 1 - min_row\n        start_col = 1 - min_col\n        \n        # Ensure the starting position is within the board\n        if start_row + max_row < n and start_col + max_col < m:\n            results.append((start_row, start_col))\n        else:\n            # Adjust if the calculated position is out of bounds\n            results.append((n - max_row, m - max_col))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        s = data[index + 2]\n        test_cases.append((n, m, s))\n        index += 3\n    \n    results = find_optimal_starting_position(t, test_cases)\n    \n    for result in results:\n        print(result[0], result[1])\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, board dimensions, and command sequences.\",\n      \"details\": \"Read the first integer as the number of test cases. For each test case, read two integers representing the board dimensions (n and m) and a string representing the command sequence.\"\n    },\n    {\n      \"description\": \"Simulate the robot's movement on the board for each test case.\",\n      \"details\": \"For each test case, iterate over possible starting positions on the board. For each starting position, simulate the execution of the command sequence and track the number of successfully executed commands.\"\n    },\n    {\n      \"description\": \"Determine the starting position that allows the maximum number of commands to be executed without the robot falling off the board.\",\n      \"details\": \"Compare the number of successfully executed commands for each starting position and select the position with the maximum count.\"\n    },\n    {\n      \"description\": \"Output the optimal starting position for each test case.\",\n      \"details\": \"For each test case, output the row and column of the starting position that allows the maximum number of commands to be executed.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases from the input.\",\n    \"For each test case, read the board dimensions and command sequence.\",\n    \"Initialize variables to track the maximum number of commands executed and the corresponding starting position.\",\n    \"Iterate over all possible starting positions on the board.\",\n    \"For each starting position, simulate the robot's movement according to the command sequence.\",\n    \"Track the number of commands executed successfully without the robot falling off the board.\",\n    \"Update the maximum number of commands executed and the corresponding starting position if a better position is found.\",\n    \"Output the optimal starting position for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The requirement involves simulating the movement of a robot on a board based on a sequence of commands. The robot can move left, right, up, or down, and the goal is to determine the starting position that allows the robot to execute the maximum number of commands without falling off the board.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible': This means maximizing the number of commands executed without the robot falling off the board. In code, this involves iterating over possible starting positions and tracking the number of commands executed successfully.\n\n# [degree adverb]\n    'maximum': This refers to the highest number of commands that can be executed from a starting position without the robot falling off the board. In code, this involves maintaining a variable to track the maximum number of commands executed and updating it when a better starting position is found.\n\n# [code logic]\n    The steps related to simulating the robot's movement and tracking the number of commands executed should be implemented simultaneously. Specifically, the steps:\n    - \"Iterate over all possible starting positions on the board.\"\n    - \"For each starting position, simulate the robot's movement according to the command sequence.\"\n    - \"Track the number of commands executed successfully without the robot falling off the board.\"\n    These steps can be combined into a nested loop where the outer loop iterates over starting positions and the inner loop simulates the command sequence.\n\n# [edge case]\n    1 1\n    L\n    = 1 1\n    Explanation: On a 1x1 board, any command will cause the robot to fall off immediately. The only starting position is (1, 1), and no commands can be executed successfully.\n\n    2 2\n    RR\n    = 1 1\n    Explanation: On a 2x2 board, starting from (1, 1), the robot can execute the first 'R' command but will fall off on the second 'R'. Starting from (1, 1) allows the maximum number of commands (1) to be executed.\n\n    3 3\n    UUU\n    = 3 1\n    Explanation: On a 3x3 board, starting from (3, 1), the robot can execute two 'U' commands before falling off. This is the maximum number of commands that can be executed.\n\n# [extra code for edge case]\n    We need extra code to handle the", "Round_0": {"code": "def find_starting_position(n, m, commands):\n    # Initialize the best starting position and maximum commands executed\n    best_r, best_c = 1, 1\n    max_commands_executed = 0\n\n    # Iterate over all possible starting positions\n    for start_r in range(1, n + 1):\n        for start_c in range(1, m + 1):\n            r, c = start_r, start_c\n            commands_executed = 0\n\n            # Simulate the robot's movement\n            for command in commands:\n                if command == 'L':\n                    c -= 1\n                elif command == 'R':\n                    c += 1\n                elif command == 'U':\n                    r -= 1\n                elif command == 'D':\n                    r += 1\n\n                # Check if the robot falls off the board\n                if r < 1 or r > n or c < 1 or c > m:\n                    break\n\n                commands_executed += 1\n\n            # Update the best starting position if more commands are executed\n            if commands_executed > max_commands_executed:\n                max_commands_executed = commands_executed\n                best_r, best_c = start_r, start_c\n\n    return best_r, best_c\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n\n    results = []\n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        commands = data[index + 2]\n        index += 3\n\n        r, c = find_starting_position(n, m, commands)\n        results.append(f\"{r} {c}\")\n\n    print(\"\\n\".join(results))\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [true, false, false, false, true, true, false, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 6, "round": 278, "prompt": "The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nThe sequence of commands s executed by the robot is given. Each command is denoted by one of the symbols 'L', 'R', 'D' or 'U'. These are the symbol commands that the robot understands and uses. They are responsible for triggering movement to the left, right, down, or up, respectively.\n\nThe robot can start its movement in any cell. The robot executes the commands starting from the first one, strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's task is to execute as many commands as possible without falling off the board. For example, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nDetermine the cell from which the robot should start its movement in order to execute as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "mutate_method": "expand_one2two", "save_node": false, "parent_index": 163}
