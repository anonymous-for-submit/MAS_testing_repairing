{"name": "1580_C. Train Maintenance", "description": "Kawasiro Nitori is excellent in engineering. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. In the beginning, there are no trains, at each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), then it is in maintenance for y_i days, then in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.", "tags": ["brute force", "data structures", "implementation"], "difficulty": 9, "id": 1580, "sample_io": [{"input": "3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}], "test_list": [{"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n10 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "3 4\n10 15\n12 10\n2 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "3 4\n23 15\n14 10\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n2 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n2 19\n7 19\n2 9\n26 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n5\n4\n3\n5\n7\n8\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n21 15\n7 3\n19 7\n1 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n2\n2\n2\n1\n2\n3\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n5\n4\n3\n5\n7\n8\n"]}, {"input": "5 2\n1 1\n10000011 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n1 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "10 7\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n8 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n8\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n3 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 2\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n0\n"]}, {"input": "20 7\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n4 9\n5 10\n657453515 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n3 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n"]}, {"input": "3 2\n9 15\n12 9\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n2 9\n14 19\n7 19\n2 9\n21 15\n7 3\n19 7\n1 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n2\n2\n2\n1\n3\n4\n4\n4\n4\n5\n5\n4\n3\n4\n6\n8\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 9\n2 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 2\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n3 9\n49 15\n7 6\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n6\n5\n6\n7\n7\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n1 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n14 9\n14 19\n7 19\n2 9\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n4\n3\n4\n7\n8\n"]}, {"input": "3 4\n16 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 15\n15 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 15\n10 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "3 4\n10 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000011 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 000000000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "3 4\n9 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n9 15\n12 1\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 0\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n733475792 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n13 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n467159628 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 8\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000001 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1258790837 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n26 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 0\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000011 100000000\n998244353 1\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n9 15\n12 0\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n21 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n13 15\n14 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n369260158 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n16 16\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n26 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n16 6\n2 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n23 15\n14 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n2 1\n10000001 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n2 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n450441171 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000101 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 7\n15 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "3 4\n16 15\n10 17\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000011 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000011 000000000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n9 15\n12 9\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 -1\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 241782432\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n2 1\n1 5\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 801909796\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n5 15\n12 10\n2 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "5 4\n1 1\n10000000 100000001\n733475792 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 8\n12 18\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10001011 100000000\n998244353 1\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n2 1\n10000011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n1166046831 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n26 15\n10 17\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000011 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000011 000000000\n998244353 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1425917046 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 241782432\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 11\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "20 20\n1 4\n864803385 801909796\n17 4\n12 1\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "5 4\n1 1\n10000000 100000001\n733475792 1\n2 2\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "3 4\n16 8\n12 25\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 2\n10000011 100000000\n998244353 0\n2 2\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1011185365 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000001\n733475792 0\n2 2\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 2\n1 1\n", "output": ["0\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n211018821 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n211018821 0\n3 1\n2 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "5 4\n3 1\n10000011 101000000\n211018821 0\n3 1\n2 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n4 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "3 4\n14 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 1\n2 1\n1 3\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 15\n12 15\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 0\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n14 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000011 000000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 1\n9 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n"]}, {"input": "5 4\n1 1\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n9 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n10 18\n12 10\n2 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n733475792 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n22 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 0\n430995384 733598623\n2 9\n5 13\n433415385 169535970\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n9 6\n752625088 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1258790837 0\n3 0\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 173113793\n3 10\n16 6\n2 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n2 2\n10000001 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n9 6\n450441171 733598623\n2 9\n3 10\n433415385 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n16 21\n10 17\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n9 6\n12 9\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1683854825 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 241782432\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 38795044\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n2 1\n1 10\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 0\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "3 4\n16 12\n12 18\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n4 1\n10000011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n1908812372 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n2 1\n", "output": ["0\n"]}, {"input": "5 4\n3 1\n10010011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 2\n10000011 100000000\n998244353 0\n2 4\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 2\n1 2\n", "output": ["0\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n211018821 0\n4 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n3 1\n10000011 101000000\n211018821 0\n3 1\n2 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n4 29\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "3 4\n14 15\n12 13\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 1\n3 1\n1 3\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n2 1\n10000001 100000000\n998244353 0\n2 0\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n14 15\n10 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "3 1\n9 15\n12 9\n2 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n"]}, {"input": "5 4\n1 1\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 0\n430995384 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n9 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n2 2\n10000001 100000000\n1258790837 0\n5 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n5\n4\n3\n5\n7\n8\n"]}, {"input": "5 2\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n"]}, {"input": "3 4\n16 21\n10 17\n2 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1683854825 0\n3 1\n2 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n4 1\n1 10\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "5 1\n1 0\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n3 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "3 4\n16 12\n12 22\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000000 100000000\n1908812372 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000101 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n2 1\n", "output": ["0\n"]}, {"input": "5 1\n1 1\n10000101 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 2\n1 2\n", "output": ["0\n"]}, {"input": "3 1\n9 15\n12 9\n2 2\n1 3\n1 1\n1 1\n2 3\n", "output": ["0\n"]}, {"input": "5 4\n1 0\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n0 0\n430995384 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 2\n1 1\n10000000 100010000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n"]}, {"input": "10 7\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 1\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 9\n2 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "3 4\n1 12\n12 22\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000000 100000000\n1908812372 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n2 1\n10000101 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n2 1\n", "output": ["0\n"]}, {"input": "3 1\n9 15\n12 9\n2 4\n1 3\n1 1\n1 1\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n0 0\n140846265 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 9\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n8\n"]}, {"input": "5 2\n1 2\n10000000 100010000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n"]}, {"input": "10 7\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 1\n2 9\n1 1\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 13\n2 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n12 9\n2 4\n1 3\n1 1\n0 1\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n-1 0\n140846265 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 7\n3 10\n9 6\n529113291 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 1\n2 9\n1 1\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "3 1\n9 15\n12 9\n2 4\n1 3\n1 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 7\n3 10\n-1 0\n140846265 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n17 2\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n292159474 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n3 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n7\n"]}, {"input": "3 1\n9 15\n12 11\n2 4\n1 3\n1 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 2\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n12 11\n2 4\n1 3\n0 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 1\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n12 11\n4 4\n1 3\n0 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 1\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 6\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n16 11\n4 4\n1 3\n0 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 0\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 6\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 -1\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 6\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 2\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n0 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n2 1\n10000001 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}], "task_id": "codecontest/22", "repair_prompt": ["Kawasiro Nitori is excellent in engineering, thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment, with no trains present in the department at the beginning. At each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), then it is in maintenance for y_i days, then in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Kawasiro Nitori is excellent in engineering, thus she has been appointed to help maintain trains.\n\nThere are n models of trains. Nitori's department will only have at most one train of each model at any moment. There are no trains present in the department at the beginning. At each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), then it is in maintenance for y_i days, then in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Kawasiro Nitori is excellent in engineering, thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment, with no trains present in the department at the beginning. At each of the following m days, one train will be added, or one train will be removed; when a train of model i is added at day t, it works for x_i days (day t inclusive), then it is in maintenance for y_i days, then in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_cycles.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # Initialize the status of each train model\n    train_status = [None] * n  # None means no train of this model is present\n    \n    # Result list to store the number of trains in maintenance each day\n    maintenance_count = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = train_cycles[k]\n            train_status[k] = (0, x_i, y_i)  # (current day in cycle, x_i, y_i)\n        \n        elif op == 2:  # Remove train of model k\n            train_status[k] = None\n        \n        # Calculate the number of trains in maintenance\n        count = 0\n        for status in train_status:\n            if status is not None:\n                current_day, x_i, y_i = status\n                cycle_length = x_i + y_i\n                if current_day >= x_i and current_day < cycle_length:\n                    count += 1\n        \n        maintenance_count.append(count)\n        \n        # Update the cycle day for each train model\n        for i in range(n):\n            if train_status[i] is not None:\n                current_day, x_i, y_i = train_status[i]\n                train_status[i] = ((current_day + 1) % (x_i + y_i), x_i, y_i)\n    \n    # Print the results\n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    work_maintenance = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        work_maintenance.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # State tracking\n    train_state = [None] * n  # None means not in department, otherwise (days_in_state, is_working)\n    maintenance_count = 0\n    \n    results = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            x_i, y_i = work_maintenance[k]\n            train_state[k] = (1, True)  # Start with 1 day in working state\n        elif op == 2:  # Remove train\n            if train_state[k] is not None:\n                days_in_state, is_working = train_state[k]\n                if not is_working:\n                    maintenance_count -= 1\n                train_state[k] = None\n        \n        # Update train states\n        for i in range(n):\n            if train_state[i] is not None:\n                days_in_state, is_working = train_state[i]\n                x_i, y_i = work_maintenance[i]\n                \n                if is_working:\n                    if days_in_state == x_i:\n                        train_state[i] = (1, False)  # Switch to maintenance\n                        maintenance_count += 1\n                    else:\n                        train_state[i] = (days_in_state + 1, True)\n                else:\n                    if days_in_state == y_i:\n                        train_state[i] = (1, True)  # Switch to working\n                        maintenance_count -= 1\n                    else:\n                        train_state[i] = (days_in_state + 1, False)\n        \n        results.append(maintenance_count)\n    \n    for result in results:\n        print\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    work_maintenance_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        work_maintenance_cycles.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to zero-based index\n        index += 1\n        operations.append((op, k))\n    \n    # Initialize the status of each train model\n    train_status = [None] * n  # None means no train of that model is present\n    \n    # Result list to store the number of trains in maintenance each day\n    result = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = work_maintenance_cycles[k]\n            train_status[k] = (x_i, y_i, x_i)  # (work_days, maintenance_days, remaining_work_days)\n        \n        elif op == 2:  # Remove train of model k\n            train_status[k] = None\n        \n        # Count trains in maintenance\n        maintenance_count = 0\n        for i in range(n):\n            if train_status[i] is not None:\n                x_i, y_i, remaining_work_days = train_status[i]\n                if remaining_work_days == 0:\n                    maintenance_count += 1\n                    train_status[i] = (x_i, y_i, x_i)  # Reset to work cycle after maintenance\n                else:\n                    train_status[i] = (x_i, y_i, remaining_work_days - 1)\n        \n        result.append(maintenance_count)\n    \n    # Print the result for each day\n    for count in result:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def calculate_maintenance_days(n, m, train_specs, operations):\n    # Initialize the state of each train model\n    train_state = [None] * (n + 1)  # None means no train of that model is present\n    maintenance_count = [0] * m\n\n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = train_specs[k - 1]\n            train_state[k] = (day, x_i, y_i)  # Store the day it was added and its cycle\n        elif op == 2:  # Remove train of model k\n            train_state[k] = None  # Remove the train\n\n        # Calculate the number of trains in maintenance for the current day\n        count = 0\n        for model in range(1, n + 1):\n            if train_state[model] is not None:\n                added_day, x_i, y_i = train_state[model]\n                cycle_length = x_i + y_i\n                days_since_added = day - added_day\n                \n                # Check if the train is in maintenance\n                if days_since_added >= x_i and (days_since_added % cycle_length) >= x_i:\n                    count += 1\n        \n        maintenance_count[day] = count\n\n    return maintenance_count\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    m = int(data[index + 1])\n    index += 2\n    \n    train_specs = []\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        train_specs.append((x_i, y_i))\n        index += 2\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1])\n        operations.append((op, k))\n        index += 2\n    \n    maintenance_count = calculate_maintenance_days(n, m, train_specs, operations)\n    \n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    work_maintenance = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        work_maintenance.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # State of each train model: None if not present, otherwise (days_left, in_maintenance)\n    train_state = [None] * n\n    maintenance_count = 0\n    results = []\n    \n    for op, k in operations:\n        if op == 1:  # Add train\n            x_i, y_i = work_maintenance[k]\n            train_state[k] = (x_i, False)  # Start with working period\n        elif op == 2:  # Remove train\n            if train_state[k] is not None:\n                days_left, in_maintenance = train_state[k]\n                if in_maintenance:\n                    maintenance_count -= 1\n                train_state[k] = None\n        \n        # Update all trains' states\n        for i in range(n):\n            if train_state[i] is not None:\n                days_left, in_maintenance = train_state[i]\n                days_left -= 1\n                if days_left == 0:\n                    if in_maintenance:\n                        maintenance_count -= 1\n                        x_i, y_i = work_maintenance[i]\n                        train_state[i] = (x_i, False)  # Switch to working\n                    else:\n                        x_i, y_i = work_maintenance[i]\n                        train_state[i] = (y_i, True)  # Switch to maintenance\n                        maintenance_count += 1\n                else:\n                    train_state[i] = (days_left, in_maintenance)\n        \n        results.append(maintenance_count)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    work_maintenance_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        work_maintenance_cycles.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # State tracking for each train model\n    train_states = [None] * n  # None means no train of this model is present\n    maintenance_count = 0\n    \n    results = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        # Update the state of all trains\n        for i in range(n):\n            if train_states[i] is not None:\n                days_left, in_maintenance = train_states[i]\n                days_left -= 1\n                \n                if days_left == 0:\n                    if in_maintenance:\n                        # Transition from maintenance to working\n                        train_states[i] = (work_maintenance_cycles[i][0], False)\n                        maintenance_count -= 1\n                    else:\n                        # Transition from working to maintenance\n                        train_states[i] = (work_maintenance_cycles[i][1], True)\n                        maintenance_count += 1\n                else:\n                    train_states[i] = (days_left, in_maintenance)\n        \n        # Process the operation for the current day\n        if op == 1:\n            # Add train of model k\n            train_states[k] = (work_maintenance_cycles[k][0], False)\n        elif op == 2:\n            # Remove train of model k\n            if train_states[k][1]:  # If it was in maintenance\n                maintenance_count -= 1\n            train_states[k] = None\n        \n        # Record the number of trains in maintenance for this day\n        results.append(maintenance_count)\n    \n    # Output the results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    work_maintenance_periods = []\n    index = 2\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        work_maintenance_periods.append((x_i, y_i))\n        index += 2\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to 0-based index\n        operations.append((op, k))\n        index += 2\n    \n    # Initialize train status\n    train_status = [None] * n  # None means no train of this model is present\n    \n    # Initialize maintenance count for each day\n    maintenance_count = [0] * m\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            x_i, y_i = work_maintenance_periods[k]\n            train_status[k] = (day, x_i, y_i)  # Store the day it was added and its periods\n        elif op == 2:  # Remove train\n            train_status[k] = None\n        \n        # Calculate maintenance count for the current day\n        count = 0\n        for status in train_status:\n            if status is not None:\n                added_day, x_i, y_i = status\n                cycle_length = x_i + y_i\n                days_since_added = day - added_day\n                \n                # Check if the train is in maintenance\n                if days_since_added >= x_i:\n                    cycle_position = days_since_added % cycle_length\n                    if cycle_position >= x_i:\n                        count += 1\n        \n        maintenance_count[day] = count\n    \n    # Output the maintenance count for each day\n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    # Read work and maintenance periods for each train model\n    train_periods = []\n    index = 2\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        train_periods.append((x_i, y_i))\n        index += 2\n    \n    # Initialize the state of each train model\n    train_states = [None] * n\n    \n    # Prepare to read operations\n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to 0-based index\n        operations.append((op, k))\n        index += 2\n    \n    # Result list to store the number of trains in maintenance each day\n    maintenance_count = []\n    \n    # Process each day's operation\n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:\n            # Add train logic\n            x_i, y_i = train_periods[k]\n            train_states[k] = (day, x_i, y_i)  # Store the start day and periods\n        elif op == 2:\n            # Remove train logic\n            train_states[k] = None\n        \n        # Calculate maintenance count\n        count = 0\n        for state in train_states:\n            if state is not None:\n                start_day, x_i, y_i = state\n                # Calculate the cycle position\n                cycle_length = x_i + y_i\n                days_since_start = day - start_day\n                cycle_position = days_since_start % cycle_length\n                \n                # Check if the train is in maintenance\n                if cycle_position >= x_i:\n                    count += 1\n        \n        maintenance_count.append(count)\n    \n    # Output the maintenance count for each day\n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_cycles.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # State tracking\n    train_states = [None] * n  # None means no train of this model is present\n    maintenance_count = 0\n    results = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = train_cycles[k]\n            train_states[k] = (day, x_i, y_i)  # Store the start day and cycle\n        elif op == 2:  # Remove train of model k\n            train_states[k] = None\n        \n        # Calculate maintenance count for the current day\n        maintenance_count = 0\n        for state in train_states:\n            if state is not None:\n                start_day, x_i, y_i = state\n                cycle_length = x_i + y_i\n                days_since_start = day - start_day\n                if days_since_start >= x_i:\n                    # Check if the train is in maintenance\n                    if (days_since_start % cycle_length) < y_i:\n                        maintenance_count += 1\n        \n        results.append(maintenance_count)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    work_maintenance_periods = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        work_maintenance_periods.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # State of each train model: None if not present, otherwise (day_added, current_state)\n    # current_state: 0 for working, 1 for maintenance\n    train_states = [None] * n\n    \n    # Result for each day\n    maintenance_count = [0] * m\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = work_maintenance_periods[k]\n            train_states[k] = (day, 0)  # Added today, starts in working state\n        \n        elif op == 2:  # Remove train of model k\n            train_states[k] = None\n        \n        # Calculate number of trains in maintenance\n        count_in_maintenance = 0\n        for i in range(n):\n            if train_states[i] is not None:\n                day_added, current_state = train_states[i]\n                x_i, y_i = work_maintenance_periods[i]\n                \n                # Calculate the number of days since the train was added\n                days_since_added = day - day_added\n                \n                # Calculate the current cycle position\n                cycle_length = x_i + y_i\n                cycle_position = days_since_added % cycle_length\n                \n                # Determine if the train is in maintenance\n                if cycle_position >= x_i:\n                    count_in_maintenance += 1\n        \n        maintenance_count[day] = count_in_maintenance\n    \n    # Output the result\n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_cycles.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # Initialize the status of each train model\n    train_status = [None] * n  # None means no train of this model is present\n    \n    # Result list to store the number of trains in maintenance each day\n    maintenance_count = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = train_cycles[k]\n            train_status[k] = (0, x_i, y_i)  # (current day in cycle, x_i, y_i)\n        \n        elif op == 2:  # Remove train of model k\n            train_status[k] = None\n        \n        # Calculate the number of trains in maintenance\n        count = 0\n        for status in train_status:\n            if status is not None:\n                current_day, x_i, y_i = status\n                cycle_length = x_i + y_i\n                if current_day >= x_i and current_day < cycle_length:\n                    count += 1\n        \n        maintenance_count.append(count)\n        \n        # Update the cycle day for each train model\n        for i in range(n):\n            if train_status[i] is not None:\n                current_day, x_i, y_i = train_status[i]\n                train_status[i] = ((current_day + 1) % (x_i + y_i), x_i, y_i)\n    \n    # Print the results\n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models, number of days, and the operation details for each day.\",\n      \"steps\": [\n        \"Read the first line to get integers n (number of train models) and m (number of days).\",\n        \"Read the next n lines to get the working and maintenance periods (x_i, y_i) for each train model.\",\n        \"Read the next m lines to get the operations (op, k) for each day, where op indicates adding or removing a train and k indicates the train model.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the daily operations to track the status of each train model.\",\n      \"steps\": [\n        \"Initialize a data structure to keep track of the current status of each train model (whether it is present and its current cycle position).\",\n        \"For each day, update the status of the train models based on the operation (add or remove) and the current cycle position.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"For each day, iterate over the train models to check their current status.\",\n        \"Count the number of trains that are in the maintenance period based on their cycle position.\",\n        \"Store the count for each day.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each day.\",\n      \"steps\": [\n        \"Print the number of trains in maintenance for each of the m days.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary information about train models and daily operations.\",\n    \"Initialize data structures to track the status of each train model.\",\n    \"Simulate the operations for each day, updating the status of train models.\",\n    \"Calculate and store the number of trains in maintenance for each day.\",\n    \"Output the results for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models'\n    Explanation: Refers to different types of trains, each with its own working and maintenance cycle.\n\n    'maintenance'\n    Explanation: A period during which a train is not operational and is being serviced.\n\n    'operation'\n    Explanation: Refers to the action of adding or removing a train on a given day.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: This means that there can be zero or one train of each model in the department at any time.\n\n    'x_i days', 'y_i days'\n    Explanation: These represent the number of days a train works and is in maintenance, respectively.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan are well-structured and do not require simultaneous implementation. Each step logically follows the previous one, ensuring the correct simulation of train operations and maintenance tracking.\n\n# [edge case] \n    1. Input: 1 1\n             1 1\n             1 1\n       Output: 0\n       Explanation: A single train is added and works for 1 day, so it is not in maintenance.\n\n    2. Input: 2 2\n             1 1\n             1 1\n             1 1\n             1 2\n       Output: 0\n               0\n       Explanation: Both trains are added and work for 1 day, so neither is in maintenance.\n\n    3. Input: 1 2\n             1 1\n             1 1\n             1 1\n             2 1\n       Output: 0\n               0\n       Explanation: A train is added and then removed the next day, so it is never in maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of simulating the train operations and checking their maintenance status should cover these scenarios.\n\nNO", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_cycles.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # Initialize the status of each train model\n    train_status = [None] * n  # None means no train of this model is present\n    \n    # Result list to store the number of trains in maintenance each day\n    maintenance_count = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = train_cycles[k]\n            train_status[k] = (0, x_i, y_i)  # (current day in cycle, x_i, y_i)\n        \n        elif op == 2:  # Remove train of model k\n            train_status[k] = None\n        \n        # Calculate the number of trains in maintenance\n        count = 0\n        for status in train_status:\n            if status is not None:\n                current_day, x_i, y_i = status\n                cycle_length = x_i + y_i\n                if current_day >= x_i and current_day < cycle_length:\n                    count += 1\n        \n        maintenance_count.append(count)\n        \n        # Update the cycle day for each train model\n        for i in range(n):\n            if train_status[i] is not None:\n                current_day, x_i, y_i = train_status[i]\n                train_status[i] = ((current_day + 1) % (x_i + y_i), x_i, y_i)\n    \n    # Print the results\n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 110)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_cycles.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # Initialize the status of each train model\n    train_status = [None] * n  # None means no train of this model is present\n    \n    # Result list to store the number of trains in maintenance each day\n    maintenance_count = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = train_cycles[k]\n            train_status[k] = (0, x_i, y_i)  # (current day in cycle, x_i, y_i)\n        \n        elif op == 2:  # Remove train of model k\n            train_status[k] = None\n        \n        # Calculate the number of trains in maintenance\n        count = 0\n        for status in train_status:\n            if status is not None:\n                current_day, x_i, y_i = status\n                cycle_length = x_i + y_i\n                if current_day >= x_i and current_day < cycle_length:\n                    count += 1\n        \n        maintenance_count.append(count)\n        \n        # Update the cycle day for each train model\n        for i in range(n):\n            if train_status[i] is not None:\n                current_day, x_i, y_i = train_status[i]\n                train_status[i] = ((current_day + 1) % (x_i + y_i), x_i, y_i)\n    \n    # Print the results\n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), the work and maintenance periods for each train model, and the operations for each day.\",\n      \"output\": \"A structured representation of the input data, including train models' work and maintenance periods and daily operations.\"\n    },\n    {\n      \"description\": \"Implement a data structure to track the state of each train model, specifically whether it is currently in the department and its current cycle (working or maintenance).\",\n      \"output\": \"A data structure that can efficiently update and query the state of each train model.\"\n    },\n    {\n      \"description\": \"Simulate each day's operations, updating the state of the trains based on the operation (add or remove) and the current cycle of each train.\",\n      \"output\": \"An updated state of the trains for each day, reflecting the addition or removal of trains and their current cycle.\"\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day based on the current state of the trains.\",\n      \"output\": \"A list of integers representing the number of trains in maintenance for each day.\"\n    },\n    {\n      \"description\": \"Output the result for each day as specified in the requirement.\",\n      \"output\": \"Print the number of trains in maintenance for each day.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of train models, number of days, work and maintenance periods for each train model, and daily operations.\",\n    \"Initialize a data structure to track the state of each train model, including whether it is in the department and its current cycle.\",\n    \"Iterate over each day's operations:\",\n    \"  - If a train is added, update its state to reflect it is in the department and start its work cycle.\",\n    \"  - If a train is removed, update its state to reflect it is no longer in the department.\",\n    \"  - For each train in the department, update its cycle (work or maintenance) based on the elapsed days.\",\n    \"Calculate the number of trains in maintenance for the current day based on the updated state.\",\n    \"Output the number of trains in maintenance for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models'\n    Explanation: Refers to different types of trains, each with its own work and maintenance schedule.\n\n    'work for x_i days, then in maintenance for y_i days'\n    Explanation: Each train model has a cycle of working and maintenance days. A train works for a specified number of days and then goes into maintenance for another specified number of days.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: The department can have only one train of each model at any time.\n\n    'x_i days', 'y_i days'\n    Explanation: These are the specific durations for which a train works and is in maintenance, respectively. In code, this can be implemented by tracking the number of days a train has been in its current state and switching states when the count reaches x_i or y_i.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps related to updating the state of trains and calculating the number of trains in maintenance should be considered simultaneously. Specifically:\n    - \"Iterate over each day's operations\" and \"Calculate the number of trains in maintenance for the current day\" should be done in the same loop to ensure the state is updated and the count is calculated for each day.\n\n# [edge case] \n    1. Input: 1 1\\n1 1\\n1 1\\n\n       Output: 0\n       Explanation: Only one train is added and it starts working immediately, so no train is in maintenance.\n\n    2. Input: 2 2\\n1 1\\n1 1\\n1 1\\n2 1\\n\n       Output: 0\\n0\n       Explanation: A train is added and then removed the next day, so no train is in maintenance on either day.\n\n    3. Input: 1 3\\n1 1\\n1 1\\n1 1\\n1 1\\n\n       Output: 0\\n1\\n0\n       Explanation: A train is added and starts working, then goes into maintenance on the second day, and is removed on the third day.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    - Specifically, we need to ensure that the state of each train is correctly initialized and updated based on the operations and the cycle durations.\n    - Code for handling the edge case:\n    ```python\n    # Initialize", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    work_maintenance = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        work_maintenance.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # State tracking\n    train_state = [None] * n  # None means not in department, otherwise (days_in_state, is_working)\n    maintenance_count = 0\n    \n    results = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            x_i, y_i = work_maintenance[k]\n            train_state[k] = (1, True)  # Start with 1 day in working state\n        elif op == 2:  # Remove train\n            if train_state[k] is not None:\n                days_in_state, is_working = train_state[k]\n                if not is_working:\n                    maintenance_count -= 1\n                train_state[k] = None\n        \n        # Update train states\n        for i in range(n):\n            if train_state[i] is not None:\n                days_in_state, is_working = train_state[i]\n                x_i, y_i = work_maintenance[i]\n                \n                if is_working:\n                    if days_in_state == x_i:\n                        train_state[i] = (1, False)  # Switch to maintenance\n                        maintenance_count += 1\n                    else:\n                        train_state[i] = (days_in_state + 1, True)\n                else:\n                    if days_in_state == y_i:\n                        train_state[i] = (1, True)  # Switch to working\n                        maintenance_count -= 1\n                    else:\n                        train_state[i] = (days_in_state + 1, False)\n        \n        results.append(maintenance_count)\n    \n    for result in results:\n        print", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 1 was given"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    work_maintenance = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        work_maintenance.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # State tracking\n    train_state = [None] * n  # None means not in department, otherwise (days_in_state, is_working)\n    maintenance_count = 0\n    \n    results = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            x_i, y_i = work_maintenance[k]\n            train_state[k] = (1, True)  # Start with 1 day in working state\n        elif op == 2:  # Remove train\n            if train_state[k] is not None:\n                days_in_state, is_working = train_state[k]\n                if not is_working:\n                    maintenance_count -= 1\n                train_state[k] = None\n        \n        # Update train states\n        for i in range(n):\n            if train_state[i] is not None:\n                days_in_state, is_working = train_state[i]\n                x_i, y_i = work_maintenance[i]\n                \n                if is_working:\n                    if days_in_state == x_i:\n                        train_state[i] = (1, False)  # Switch to maintenance\n                        maintenance_count += 1\n                    else:\n                        train_state[i] = (days_in_state + 1, True)\n                else:\n                    if days_in_state == y_i:\n                        train_state[i] = (1, True)  # Switch to working\n                        maintenance_count -= 1\n                    else:\n                        train_state[i] = (days_in_state + 1, False)\n        \n        results.append(maintenance_count)\n    \n    for result in results:\n        print"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), the work and maintenance periods for each train model, and the operations for each day.\",\n      \"steps\": [\n        \"Read the first line to get n and m.\",\n        \"Read the next n lines to get the work (x_i) and maintenance (y_i) periods for each train model.\",\n        \"Read the next m lines to get the operations (op, k) for each day.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the addition and removal of trains over the m days and track the maintenance status of each train model.\",\n      \"steps\": [\n        \"Initialize a data structure to keep track of the current status (working or maintenance) and the remaining days for each train model.\",\n        \"For each day, perform the operation specified (add or remove a train) and update the status of the trains accordingly.\",\n        \"If a train is added, set its initial status to working and track its work and maintenance cycle.\",\n        \"If a train is removed, ensure it is not counted as in maintenance on that day.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"For each day, iterate over all train models to count how many are in the maintenance phase.\",\n        \"Output the count of trains in maintenance for each day.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data about train models and daily operations.\",\n    \"Initialize data structures to track the status and cycles of each train model.\",\n    \"Iterate over each day, updating the status of trains based on the operations (add or remove) and their work/maintenance cycles.\",\n    \"For each day, calculate and output the number of trains currently in maintenance.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models'\n    Explanation: Refers to different types of trains, each with its own work and maintenance cycle.\n\n    'work and maintenance cycle'\n    Explanation: Each train model has a specific number of days it works (x_i) and a specific number of days it is in maintenance (y_i).\n\n    'operations'\n    Explanation: Refers to the actions taken each day, either adding a train of a specific model or removing it.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: This means that there can be zero or one train of each model in the department at any time, but not more than one.\n\n    'x_i days', 'y_i days'\n    Explanation: These are the specific durations for which a train model works and is in maintenance, respectively.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented in sequence, but within the simulation of train operations, the addition and removal of trains should be handled in a single code block for each day. This can be done using an if-else statement to check the operation type (add or remove) and update the train status accordingly.\n\n# [edge case]\n    1. Input: 1 1\n             1 1\n             1 1\n       Output: 0\n       Explanation: On the first day, a train is added and it is in the working phase, so no train is in maintenance.\n\n    2. Input: 1 2\n             1 1\n             1 1\n             2 1\n       Output: 0\n               0\n       Explanation: On the first day, a train is added and it is in the working phase. On the second day, the train is removed, so no train is in maintenance on either day.\n\n    3. Input: 2 3\n             1 1\n             1 1\n             1 1\n             1 2\n             2 1\n       Output: 0\n               0\n               0\n       Explanation: On the first day, a train of model 1 is added and is in the working phase. On the second day, a train of model 2 is added and is also in the working phase. On the third day, the train of model 1 is removed, so no", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    work_maintenance_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        work_maintenance_cycles.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to zero-based index\n        index += 1\n        operations.append((op, k))\n    \n    # Initialize the status of each train model\n    train_status = [None] * n  # None means no train of that model is present\n    \n    # Result list to store the number of trains in maintenance each day\n    result = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = work_maintenance_cycles[k]\n            train_status[k] = (x_i, y_i, x_i)  # (work_days, maintenance_days, remaining_work_days)\n        \n        elif op == 2:  # Remove train of model k\n            train_status[k] = None\n        \n        # Count trains in maintenance\n        maintenance_count = 0\n        for i in range(n):\n            if train_status[i] is not None:\n                x_i, y_i, remaining_work_days = train_status[i]\n                if remaining_work_days == 0:\n                    maintenance_count += 1\n                    train_status[i] = (x_i, y_i, x_i)  # Reset to work cycle after maintenance\n                else:\n                    train_status[i] = (x_i, y_i, remaining_work_days - 1)\n        \n        result.append(maintenance_count)\n    \n    # Print the result for each day\n    for count in result:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), and the list of train model specifications (x_i, y_i).\",\n      \"steps\": [\n        \"Read the first line to get n and m.\",\n        \"Read the next n lines to get the x_i and y_i values for each train model.\"\n      ]\n    },\n    {\n      \"description\": \"Track the state of each train model over the m days based on operations (add or remove).\",\n      \"steps\": [\n        \"Initialize a data structure to keep track of the current state of each train model (whether it is added or removed).\",\n        \"Iterate over the m operations, updating the state of the train models accordingly.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"For each day, check the state of each train model.\",\n        \"Determine if a train is in maintenance based on its cycle (x_i days working, y_i days maintenance).\",\n        \"Count the number of trains in maintenance for that day.\"\n      ]\n    },\n    {\n      \"description\": \"Output the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"For each day, output the calculated number of trains in maintenance.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract n, m, and the train model specifications.\",\n    \"Initialize a data structure to track the state of each train model.\",\n    \"Iterate over the m operations to update the state of the train models.\",\n    \"For each day, calculate the number of trains in maintenance based on their cycles.\",\n    \"Output the number of trains in maintenance for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maintenance'\n    Explanation: In the context of the requirement, maintenance refers to the period during which a train is not operational and is undergoing maintenance. The cycle of a train includes working days followed by maintenance days.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': This means that there can be zero or one train of each model in the department at any given time.\n    'x_i days', 'y_i days': These phrases indicate the duration of the working and maintenance periods for each train model. In code, this can be implemented using counters or timers to track the days a train is in operation or maintenance.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan related to tracking the state of each train model and calculating the number of trains in maintenance should be implemented simultaneously. Specifically, updating the state of train models and checking their maintenance status can be done in the same loop that processes daily operations.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: Only one train is added and it is working on the first day, so no train is in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           1 2\n    Output: 0\n            0\n    Explanation: Both trains are added on separate days and are working, so no train is in maintenance.\n\n    Input: 1 3\n           1 1\n           1 1\n           2 1\n           1 1\n    Output: 0\n            0\n            0\n    Explanation: A train is added, removed, and added again, but it is always working on the days it is present.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of tracking the state of each train and calculating maintenance days will naturally handle these scenarios.\n\nNO", "Round_0": {"code": "def calculate_maintenance_days(n, m, train_specs, operations):\n    # Initialize the state of each train model\n    train_state = [None] * (n + 1)  # None means no train of that model is present\n    maintenance_count = [0] * m\n\n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = train_specs[k - 1]\n            train_state[k] = (day, x_i, y_i)  # Store the day it was added and its cycle\n        elif op == 2:  # Remove train of model k\n            train_state[k] = None  # Remove the train\n\n        # Calculate the number of trains in maintenance for the current day\n        count = 0\n        for model in range(1, n + 1):\n            if train_state[model] is not None:\n                added_day, x_i, y_i = train_state[model]\n                cycle_length = x_i + y_i\n                days_since_added = day - added_day\n                \n                # Check if the train is in maintenance\n                if days_since_added >= x_i and (days_since_added % cycle_length) >= x_i:\n                    count += 1\n        \n        maintenance_count[day] = count\n\n    return maintenance_count\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    m = int(data[index + 1])\n    index += 2\n    \n    train_specs = []\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        train_specs.append((x_i, y_i))\n        index += 2\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1])\n        operations.append((op, k))\n        index += 2\n    \n    maintenance_count = calculate_maintenance_days(n, m, train_specs, operations)\n    \n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), the work and maintenance periods for each train model, and the operations for each day.\",\n      \"output\": \"A structured representation of the input data, including train models' work and maintenance periods and daily operations.\"\n    },\n    {\n      \"description\": \"Implement a data structure to track the state of each train model, specifically whether it is currently working or in maintenance.\",\n      \"output\": \"A data structure that can efficiently update and query the state of each train model.\"\n    },\n    {\n      \"description\": \"Simulate each day's operations, updating the state of the trains based on the operation (add or remove) and the current day.\",\n      \"output\": \"An updated state of the train models for each day, reflecting the addition or removal of trains.\"\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day based on the current state of the trains.\",\n      \"output\": \"A list of integers representing the number of trains in maintenance for each day.\"\n    },\n    {\n      \"description\": \"Output the results for each day as specified in the requirement.\",\n      \"output\": \"Print the number of trains in maintenance for each day.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of train models, number of days, work and maintenance periods for each train model, and daily operations.\",\n    \"Initialize a data structure to keep track of the state of each train model, including its current cycle (working or maintenance) and the remaining days in that cycle.\",\n    \"Iterate over each day's operations:\",\n    \"  - If a train is added, set its initial state to working and calculate when it will enter maintenance.\",\n    \"  - If a train is removed, update the state to reflect its removal.\",\n    \"  - For each train, update its state based on the passage of a day, switching between working and maintenance as necessary.\",\n    \"Calculate the number of trains in maintenance for the current day based on the updated states.\",\n    \"Output the number of trains in maintenance for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models'\n    Explanation: Refers to different types of trains, each with specific work and maintenance cycles.\n\n    'work for x_i days, then in maintenance for y_i days'\n    Explanation: Each train model has a cycle where it operates for a certain number of days and then undergoes maintenance for another set of days.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: There can be no more than one train of each model in the department at any time.\n\n    'x_i days', 'y_i days'\n    Explanation: These are the specific durations for which a train works and is in maintenance, respectively.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps related to updating the state of each train model and calculating the number of trains in maintenance should be implemented simultaneously. Specifically:\n    - \"Simulate each day's operations, updating the state of the trains based on the operation (add or remove) and the current day.\"\n    - \"Calculate the number of trains in maintenance for each day based on the current state of the trains.\"\n    These can be done in a single loop that processes each day's operations and updates the state of the trains accordingly.\n\n# [edge case]\n    1. Input: 1 1\\n1 1\\n1 1\\n1 1\n       Output: 0\n       Explanation: Only one train is added and it starts working immediately, so no train is in maintenance.\n\n    2. Input: 2 2\\n1 1\\n1 1\\n1 1\\n2 1\n       Output: 0\\n0\n       Explanation: A train is added and then removed the next day, never entering maintenance.\n\n    3. Input: 1 3\\n1 1\\n1 1\\n1 1\\n1 1\\n2 1\n       Output: 0\\n0\\n0\n       Explanation: A train is added and removed before it can enter maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of updating the state of each train model and calculating the number of trains in maintenance should naturally handle these scenarios.\n\nNO", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    work_maintenance = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        work_maintenance.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # State of each train model: None if not present, otherwise (days_left, in_maintenance)\n    train_state = [None] * n\n    maintenance_count = 0\n    results = []\n    \n    for op, k in operations:\n        if op == 1:  # Add train\n            x_i, y_i = work_maintenance[k]\n            train_state[k] = (x_i, False)  # Start with working period\n        elif op == 2:  # Remove train\n            if train_state[k] is not None:\n                days_left, in_maintenance = train_state[k]\n                if in_maintenance:\n                    maintenance_count -= 1\n                train_state[k] = None\n        \n        # Update all trains' states\n        for i in range(n):\n            if train_state[i] is not None:\n                days_left, in_maintenance = train_state[i]\n                days_left -= 1\n                if days_left == 0:\n                    if in_maintenance:\n                        maintenance_count -= 1\n                        x_i, y_i = work_maintenance[i]\n                        train_state[i] = (x_i, False)  # Switch to working\n                    else:\n                        x_i, y_i = work_maintenance[i]\n                        train_state[i] = (y_i, True)  # Switch to maintenance\n                        maintenance_count += 1\n                else:\n                    train_state[i] = (days_left, in_maintenance)\n        \n        results.append(maintenance_count)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), the work and maintenance periods for each train model, and the operations for each day.\",\n      \"output\": \"A structured representation of the input data, including train models and daily operations.\"\n    },\n    {\n      \"description\": \"Implement a data structure to track the state of each train model, specifically whether it is currently working or in maintenance.\",\n      \"output\": \"A data structure that can efficiently update and query the state of each train model.\"\n    },\n    {\n      \"description\": \"Simulate each day's operations, updating the state of the trains based on the operation (add or remove) and the current day.\",\n      \"output\": \"An updated state of the train models for each day.\"\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day based on the current state of all train models.\",\n      \"output\": \"A list of integers representing the number of trains in maintenance for each day.\"\n    },\n    {\n      \"description\": \"Output the result for each day as specified in the requirement.\",\n      \"output\": \"Print the number of trains in maintenance for each day.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of train models, number of days, work and maintenance periods for each train model, and the operations for each day.\",\n    \"Initialize a data structure to track the state of each train model, including its current cycle (working or maintenance) and the remaining days in that cycle.\",\n    \"Iterate over each day's operations:\",\n    \"  - If a train is added, set its initial state to working and track its cycle.\",\n    \"  - If a train is removed, ensure it is not counted in maintenance and remove it from tracking.\",\n    \"  - Update the state of all trains, decrementing the days remaining in their current cycle.\",\n    \"  - Transition trains from working to maintenance or vice versa as their cycles complete.\",\n    \"Calculate the number of trains in maintenance for the current day based on the updated states.\",\n    \"Output the number of trains in maintenance for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models'\n    Explanation: Refers to different types of trains, each with its own work and maintenance cycle.\n\n    'work and maintenance cycle'\n    Explanation: Each train model has a specific number of days it works (x_i) and a specific number of days it is in maintenance (y_i).\n\n    'operations'\n    Explanation: Refers to the daily actions of adding or removing a train of a specific model.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: This means that there can be zero or one train of each model in the department at any time.\n\n    'x_i days (day t inclusive)'\n    Explanation: The train works for x_i days starting from the day it is added.\n\n    'y_i days'\n    Explanation: The train is in maintenance for y_i days after its working period.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps related to updating the state of trains and calculating the number of trains in maintenance should be implemented simultaneously. Specifically:\n    - \"Update the state of all trains, decrementing the days remaining in their current cycle.\"\n    - \"Transition trains from working to maintenance or vice versa as their cycles complete.\"\n    - \"Calculate the number of trains in maintenance for the current day based on the updated states.\"\n    These steps can be combined in a loop that processes each day's operations and updates the state of all trains accordingly.\n\n# [edge case]\n    1. Input: 1 1\n             1 1\n             1 1\n       Output: 0\n       Explanation: Only one train is added and it starts working immediately, so no train is in maintenance.\n\n    2. Input: 1 2\n             1 1\n             1 1\n             2 1\n       Output: 0\n               0\n       Explanation: A train is added and then removed the next day, so it never enters maintenance.\n\n    3. Input: 2 3\n             1 1\n             1 1\n             1 1\n             1 2\n             2 1\n       Output: 0\n               0\n               0\n       Explanation: Two trains are added, but both are in their working period, and one is removed before entering maintenance.\n\n# [extra code for edge case]\n    We do not need", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    work_maintenance_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        work_maintenance_cycles.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # State tracking for each train model\n    train_states = [None] * n  # None means no train of this model is present\n    maintenance_count = 0\n    \n    results = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        # Update the state of all trains\n        for i in range(n):\n            if train_states[i] is not None:\n                days_left, in_maintenance = train_states[i]\n                days_left -= 1\n                \n                if days_left == 0:\n                    if in_maintenance:\n                        # Transition from maintenance to working\n                        train_states[i] = (work_maintenance_cycles[i][0], False)\n                        maintenance_count -= 1\n                    else:\n                        # Transition from working to maintenance\n                        train_states[i] = (work_maintenance_cycles[i][1], True)\n                        maintenance_count += 1\n                else:\n                    train_states[i] = (days_left, in_maintenance)\n        \n        # Process the operation for the current day\n        if op == 1:\n            # Add train of model k\n            train_states[k] = (work_maintenance_cycles[k][0], False)\n        elif op == 2:\n            # Remove train of model k\n            if train_states[k][1]:  # If it was in maintenance\n                maintenance_count -= 1\n            train_states[k] = None\n        \n        # Record the number of trains in maintenance for this day\n        results.append(maintenance_count)\n    \n    # Output the results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), the work and maintenance periods for each train model, and the operations for each day.\",\n      \"steps\": [\n        \"Read the first line to get n and m.\",\n        \"Read the next n lines to get the work (x_i) and maintenance (y_i) periods for each train model.\",\n        \"Read the next m lines to get the operations (op, k) for each day.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the addition and removal of trains over the m days and track their maintenance status.\",\n      \"steps\": [\n        \"Initialize a data structure to keep track of the current status of each train model (e.g., whether it is working or in maintenance).\",\n        \"For each day, perform the operation specified (add or remove a train) and update the status of the trains accordingly.\",\n        \"For each train added, calculate its maintenance schedule based on its work and maintenance periods.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"For each day, check the status of all trains to determine how many are in maintenance.\",\n        \"Ensure that trains removed on a given day are not counted as in maintenance.\"\n      ]\n    },\n    {\n      \"description\": \"Output the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"For each day, output the calculated number of trains in maintenance.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data.\",\n    \"Initialize data structures to track train statuses and maintenance schedules.\",\n    \"Iterate over each day, updating train statuses based on operations and calculating maintenance counts.\",\n    \"Output the number of trains in maintenance for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models'\n    Explanation: Refers to the different types of trains, each with its own work and maintenance schedule.\n\n    'work and maintenance periods'\n    Explanation: Each train model has a specific number of days it works (x_i) and a specific number of days it is in maintenance (y_i).\n\n    'operations'\n    Explanation: Refers to the actions taken each day, either adding a train of a specific model or removing it.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: This means that there can be zero or one train of each model in the department at any time, but not more than one.\n\n    'x_i days (day t inclusive)'\n    Explanation: The train works for x_i days starting from the day it is added.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the subproblem \"Simulate the addition and removal of trains over the m days and track their maintenance status\" should be implemented simultaneously. Specifically, updating the status of trains and calculating their maintenance schedule should be done in the same code block to ensure accurate tracking of each train's status.\n\n# [edge case]\n    1. Input: 1 1\n             1 1\n             1 1\n       Output: 0\n       Explanation: Only one train is added and it starts working immediately, so no train is in maintenance.\n\n    2. Input: 1 2\n             1 1\n             1 1\n             2 1\n       Output: 0\n       Explanation: A train is added and then removed the next day, so it never enters maintenance.\n\n    3. Input: 2 3\n             1 1\n             1 1\n             1 1\n             1 2\n             2 1\n       Output: 0\n               0\n               0\n       Explanation: Two trains are added on consecutive days, but both are removed before entering maintenance.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where trains are added and removed without entering maintenance. This can be handled by ensuring that the maintenance status is only updated after the work period is completed and before the train is removed.\n\n    Example code snippet:\n    ```python\n    if op == 1:  # Add train\n        # Calculate", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    work_maintenance_periods = []\n    index = 2\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        work_maintenance_periods.append((x_i, y_i))\n        index += 2\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to 0-based index\n        operations.append((op, k))\n        index += 2\n    \n    # Initialize train status\n    train_status = [None] * n  # None means no train of this model is present\n    \n    # Initialize maintenance count for each day\n    maintenance_count = [0] * m\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            x_i, y_i = work_maintenance_periods[k]\n            train_status[k] = (day, x_i, y_i)  # Store the day it was added and its periods\n        elif op == 2:  # Remove train\n            train_status[k] = None\n        \n        # Calculate maintenance count for the current day\n        count = 0\n        for status in train_status:\n            if status is not None:\n                added_day, x_i, y_i = status\n                cycle_length = x_i + y_i\n                days_since_added = day - added_day\n                \n                # Check if the train is in maintenance\n                if days_since_added >= x_i:\n                    cycle_position = days_since_added % cycle_length\n                    if cycle_position >= x_i:\n                        count += 1\n        \n        maintenance_count[day] = count\n    \n    # Output the maintenance count for each day\n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: unexpected EOF while parsing (<string>, line 109)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    work_maintenance_periods = []\n    index = 2\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        work_maintenance_periods.append((x_i, y_i))\n        index += 2\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to 0-based index\n        operations.append((op, k))\n        index += 2\n    \n    # Initialize train status\n    train_status = [None] * n  # None means no train of this model is present\n    \n    # Initialize maintenance count for each day\n    maintenance_count = [0] * m\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            x_i, y_i = work_maintenance_periods[k]\n            train_status[k] = (day, x_i, y_i)  # Store the day it was added and its periods\n        elif op == 2:  # Remove train\n            train_status[k] = None\n        \n        # Calculate maintenance count for the current day\n        count = 0\n        for status in train_status:\n            if status is not None:\n                added_day, x_i, y_i = status\n                cycle_length = x_i + y_i\n                days_since_added = day - added_day\n                \n                # Check if the train is in maintenance\n                if days_since_added >= x_i:\n                    cycle_position = days_since_added % cycle_length\n                    if cycle_position >= x_i:\n                        count += 1\n        \n        maintenance_count[day] = count\n    \n    # Output the maintenance count for each day\n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), the work and maintenance periods for each train model, and the operations for each day.\",\n      \"output\": \"A structured representation of the input data, including train models' work and maintenance periods and daily operations.\"\n    },\n    {\n      \"description\": \"Simulate the addition and removal of trains over the m days, keeping track of which trains are currently in the department and their current state (working or in maintenance).\",\n      \"output\": \"A dynamic data structure that maintains the current state of each train model in the department.\"\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day based on the current state of the trains in the department.\",\n      \"output\": \"A list of integers representing the number of trains in maintenance for each day.\"\n    },\n    {\n      \"description\": \"Output the number of trains in maintenance for each day in the required format.\",\n      \"output\": \"Formatted output of the maintenance count for each day.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract n, m, the work and maintenance periods for each train model, and the daily operations.\",\n    \"Initialize a data structure to keep track of the current state of each train model in the department.\",\n    \"Iterate over each day, processing the operations to add or remove trains, and update their states accordingly.\",\n    \"For each day, calculate the number of trains in maintenance by checking the state of each train in the department.\",\n    \"Store the maintenance count for each day.\",\n    \"Output the maintenance count for each day in the specified format.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maintenance'\n    In the requirement, maintenance refers to the period when a train is not operational and is being serviced. The task is to calculate how many trains are in this state each day.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': This means that there can be zero or one train of each model in the department at any time.\n    'works for x_i days': This indicates the duration a train is operational before going into maintenance.\n    'in maintenance for y_i days': This indicates the duration a train is in maintenance before becoming operational again.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps of adding and removing trains should be considered simultaneously with updating their states. When a train is added, its state should be initialized, and when removed, its state should be reset. This can be implemented using an if-else statement to handle the operations based on the value of 'op'.\n\n# [edge case] \n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: With only one train model and one day, the train is added and starts working immediately, so no train is in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: The train is added on the first day and removed on the second day, so it never enters maintenance.\n\n    Input: 3 3\n           1 1\n           1 1\n           1 1\n           1 1\n           1 2\n           2 1\n    Output: 0\n            0\n            0\n    Explanation: The train of model 1 is added and removed before it can enter maintenance, and the train of model 2 is added but not yet in maintenance.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where trains are added and removed before entering maintenance.\n        if op == 1:\n            # Add train logic\n            # Initialize train state\n        elif op == 2:\n            # Remove train logic\n            # Reset train state\n        # Calculate maintenance count\n\nYES", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    # Read work and maintenance periods for each train model\n    train_periods = []\n    index = 2\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        train_periods.append((x_i, y_i))\n        index += 2\n    \n    # Initialize the state of each train model\n    train_states = [None] * n\n    \n    # Prepare to read operations\n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to 0-based index\n        operations.append((op, k))\n        index += 2\n    \n    # Result list to store the number of trains in maintenance each day\n    maintenance_count = []\n    \n    # Process each day's operation\n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:\n            # Add train logic\n            x_i, y_i = train_periods[k]\n            train_states[k] = (day, x_i, y_i)  # Store the start day and periods\n        elif op == 2:\n            # Remove train logic\n            train_states[k] = None\n        \n        # Calculate maintenance count\n        count = 0\n        for state in train_states:\n            if state is not None:\n                start_day, x_i, y_i = state\n                # Calculate the cycle position\n                cycle_length = x_i + y_i\n                days_since_start = day - start_day\n                cycle_position = days_since_start % cycle_length\n                \n                # Check if the train is in maintenance\n                if cycle_position >= x_i:\n                    count += 1\n        \n        maintenance_count.append(count)\n    \n    # Output the maintenance count for each day\n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), and the list of train operations.\",\n      \"details\": \"Read the first line to get n and m. Read the next n lines to get the x_i and y_i values for each train model. Read the next m lines to get the operations (op, k) for each day.\"\n    },\n    {\n      \"description\": \"Track the state of each train model over the days.\",\n      \"details\": \"Maintain a data structure to keep track of whether a train of each model is currently added and its current state (working or maintenance).\"\n    },\n    {\n      \"description\": \"Simulate the daily operations and update the train states accordingly.\",\n      \"details\": \"For each day, based on the operation (add or remove), update the state of the train model. If a train is added, start its cycle of working and maintenance. If a train is removed, ensure it is not counted as in maintenance.\"\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day.\",\n      \"details\": \"For each day, count the number of trains that are in the maintenance state and store the result.\"\n    },\n    {\n      \"description\": \"Output the results for each day.\",\n      \"details\": \"Print the number of trains in maintenance for each of the m days.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize data structures to store train model states and maintenance counts.\",\n    \"Parse the input to extract train model details and daily operations.\",\n    \"Iterate over each day and perform the operation specified (add or remove train).\",\n    \"Update the state of the train model based on its cycle of working and maintenance.\",\n    \"Count the number of trains in maintenance for the current day.\",\n    \"Store the count for the current day and proceed to the next day.\",\n    \"After processing all days, output the maintenance counts for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models', 'maintenance', 'working cycle'\n    Explanation: The requirement involves managing different train models, each with a specific cycle of working and maintenance. The core task is to track these cycles and determine how many trains are in maintenance on each day.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': This means that there can be zero or one train of each model in the department at any time.\n    'x_i days', 'y_i days': These phrases define the cycle duration for each train model, where x_i is the number of days a train works, and y_i is the number of days it is in maintenance.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps related to updating the train state and counting the number of trains in maintenance should be considered simultaneously. Specifically, when a train is added or removed, its state should be updated, and the count of trains in maintenance should be recalculated in the same code block.\n\n# [edge case] \n    1. Input: 1 1\n             1 1\n             1 1\n       Output: 0\n       Explanation: On the first day, a train is added and starts working, so no train is in maintenance.\n       \n    2. Input: 1 2\n             1 1\n             1 1\n             2 1\n       Output: 0\n               0\n       Explanation: On the first day, a train is added and starts working. On the second day, it is removed, so no train is in maintenance on either day.\n       \n    3. Input: 2 3\n             1 1\n             1 1\n             1 1\n             1 2\n             2 1\n       Output: 0\n               0\n               0\n       Explanation: On the first day, a train of model 1 is added and starts working. On the second day, a train of model 2 is added and starts working. On the third day, the train of model 1 is removed, so no train is in maintenance on any day.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Specifically, we need to ensure that when a train is added, it starts its cycle correctly, and when it is removed, it is", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_cycles.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # State tracking\n    train_states = [None] * n  # None means no train of this model is present\n    maintenance_count = 0\n    results = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = train_cycles[k]\n            train_states[k] = (day, x_i, y_i)  # Store the start day and cycle\n        elif op == 2:  # Remove train of model k\n            train_states[k] = None\n        \n        # Calculate maintenance count for the current day\n        maintenance_count = 0\n        for state in train_states:\n            if state is not None:\n                start_day, x_i, y_i = state\n                cycle_length = x_i + y_i\n                days_since_start = day - start_day\n                if days_since_start >= x_i:\n                    # Check if the train is in maintenance\n                    if (days_since_start % cycle_length) < y_i:\n                        maintenance_count += 1\n        \n        results.append(maintenance_count)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), the work and maintenance periods for each train model, and the operations for each day.\",\n      \"output\": \"A structured representation of the input data, including train models' work and maintenance periods and daily operations.\"\n    },\n    {\n      \"description\": \"Simulate the addition and removal of trains over the m days, keeping track of which trains are currently in the department and their current state (working or in maintenance).\",\n      \"output\": \"A dynamic data structure that maintains the current state of each train model in the department.\"\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day based on the current state of the trains in the department.\",\n      \"output\": \"A list of integers representing the number of trains in maintenance for each day.\"\n    },\n    {\n      \"description\": \"Output the number of trains in maintenance for each day in the required format.\",\n      \"output\": \"Formatted output of the maintenance count for each day.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read and parse the input to extract n, m, the work and maintenance periods for each train model, and the daily operations.\",\n    \"Initialize a data structure to keep track of the current state of each train model in the department.\",\n    \"Iterate over each day, processing the operations to add or remove trains, and update their states accordingly.\",\n    \"For each day, calculate the number of trains in maintenance by checking the state of each train in the department.\",\n    \"Store the maintenance count for each day and output the results in the specified format.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maintenance'\n    In the requirement, maintenance refers to the period when a train is not operational and is being serviced. The task is to calculate how many trains are in this state each day.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': This means that there can be zero or one train of each model in the department at any time.\n    'works for x_i days': This indicates the train operates for a specified number of days.\n    'in maintenance for y_i days': This indicates the train is in maintenance for a specified number of days.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps of adding and removing trains should be considered simultaneously with updating their states. When a train is added, its state should be initialized, and when removed, its state should be reset. This can be implemented using an if-else statement to handle the operations based on the value of 'op'.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: Only one train is added and it is working, not in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: The train is added and removed on consecutive days, never entering maintenance.\n\n    Input: 3 3\n           1 1\n           1 1\n           1 1\n           1 1\n           1 2\n           2 1\n    Output: 0\n            0\n            0\n    Explanation: Trains are added but removed before entering maintenance.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where trains are added and removed without entering maintenance.\n    ```python\n    if op == 1:\n        # Add train logic\n        # Initialize train state\n    elif op == 2:\n        # Remove train logic\n        # Reset train state\n    ```\n\nYES", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    work_maintenance_periods = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        work_maintenance_periods.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # State of each train model: None if not present, otherwise (day_added, current_state)\n    # current_state: 0 for working, 1 for maintenance\n    train_states = [None] * n\n    \n    # Result for each day\n    maintenance_count = [0] * m\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = work_maintenance_periods[k]\n            train_states[k] = (day, 0)  # Added today, starts in working state\n        \n        elif op == 2:  # Remove train of model k\n            train_states[k] = None\n        \n        # Calculate number of trains in maintenance\n        count_in_maintenance = 0\n        for i in range(n):\n            if train_states[i] is not None:\n                day_added, current_state = train_states[i]\n                x_i, y_i = work_maintenance_periods[i]\n                \n                # Calculate the number of days since the train was added\n                days_since_added = day - day_added\n                \n                # Calculate the current cycle position\n                cycle_length = x_i + y_i\n                cycle_position = days_since_added % cycle_length\n                \n                # Determine if the train is in maintenance\n                if cycle_position >= x_i:\n                    count_in_maintenance += 1\n        \n        maintenance_count[day] = count_in_maintenance\n    \n    # Output the result\n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models, number of days, and the operation details for each day.\",\n      \"steps\": [\n        \"Read the first line to get integers n (number of train models) and m (number of days).\",\n        \"Read the next n lines to get the working and maintenance periods (x_i, y_i) for each train model.\",\n        \"Read the next m lines to get the operations (op, k) for each day, where op indicates adding or removing a train and k indicates the train model.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the daily operations to track the status of each train model.\",\n      \"steps\": [\n        \"Initialize a data structure to keep track of the current status of each train model (whether it is present and its current cycle position).\",\n        \"For each day, update the status of the train models based on the operation (add or remove) and the current cycle position.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"For each day, iterate over the train models to check their current status.\",\n        \"Count the number of trains that are in the maintenance period based on their cycle position.\",\n        \"Store the count for each day.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each day.\",\n      \"steps\": [\n        \"Print the number of trains in maintenance for each of the m days.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary information about train models and daily operations.\",\n    \"Initialize data structures to track the status of each train model.\",\n    \"Simulate the operations for each day, updating the status of train models.\",\n    \"Calculate and store the number of trains in maintenance for each day.\",\n    \"Output the results for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models'\n    Explanation: Refers to different types of trains, each with its own working and maintenance cycle.\n\n    'maintenance'\n    Explanation: A period during which a train is not operational and is being serviced.\n\n    'operation'\n    Explanation: Refers to the action of adding or removing a train on a given day.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: This means that there can be zero or one train of each model in the department at any time.\n\n    'x_i days', 'y_i days'\n    Explanation: These represent the number of days a train works and is in maintenance, respectively.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan are well-structured and do not require simultaneous implementation. Each step logically follows the previous one, ensuring the correct simulation of train operations and maintenance tracking.\n\n# [edge case] \n    1. Input: 1 1\n             1 1\n             1 1\n       Output: 0\n       Explanation: A single train is added and works for 1 day, so it is not in maintenance.\n\n    2. Input: 2 2\n             1 1\n             1 1\n             1 1\n             1 2\n       Output: 0\n               0\n       Explanation: Both trains are added and work for 1 day, so neither is in maintenance.\n\n    3. Input: 1 2\n             1 1\n             1 1\n             1 1\n             2 1\n       Output: 0\n               0\n       Explanation: A train is added and then removed the next day, so it is never in maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of simulating the train operations and checking their maintenance status should cover these scenarios.\n\nNO", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_cycles.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # Initialize the status of each train model\n    train_status = [None] * n  # None means no train of this model is present\n    \n    # Result list to store the number of trains in maintenance each day\n    maintenance_count = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = train_cycles[k]\n            train_status[k] = (0, x_i, y_i)  # (current day in cycle, x_i, y_i)\n        \n        elif op == 2:  # Remove train of model k\n            train_status[k] = None\n        \n        # Calculate the number of trains in maintenance\n        count = 0\n        for status in train_status:\n            if status is not None:\n                current_day, x_i, y_i = status\n                cycle_length = x_i + y_i\n                if current_day >= x_i and current_day < cycle_length:\n                    count += 1\n        \n        maintenance_count.append(count)\n        \n        # Update the cycle day for each train model\n        for i in range(n):\n            if train_status[i] is not None:\n                current_day, x_i, y_i = train_status[i]\n                train_status[i] = ((current_day + 1) % (x_i + y_i), x_i, y_i)\n    \n    # Print the results\n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 110)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_cycles.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # Initialize the status of each train model\n    train_status = [None] * n  # None means no train of this model is present\n    \n    # Result list to store the number of trains in maintenance each day\n    maintenance_count = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = train_cycles[k]\n            train_status[k] = (0, x_i, y_i)  # (current day in cycle, x_i, y_i)\n        \n        elif op == 2:  # Remove train of model k\n            train_status[k] = None\n        \n        # Calculate the number of trains in maintenance\n        count = 0\n        for status in train_status:\n            if status is not None:\n                current_day, x_i, y_i = status\n                cycle_length = x_i + y_i\n                if current_day >= x_i and current_day < cycle_length:\n                    count += 1\n        \n        maintenance_count.append(count)\n        \n        # Update the cycle day for each train model\n        for i in range(n):\n            if train_status[i] is not None:\n                current_day, x_i, y_i = train_status[i]\n                train_status[i] = ((current_day + 1) % (x_i + y_i), x_i, y_i)\n    \n    # Print the results\n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [true, true, false, false, true, true, true, true, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 9, "round": 544, "prompt": "Kawasiro Nitori is excellent in engineering, thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment, with no trains present in the department at the beginning. At each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), then it is in maintenance for y_i days, then in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.", "examples": "\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.", "mutate_method": "condense_two2one", "save_node": false, "parent_index": 288}
