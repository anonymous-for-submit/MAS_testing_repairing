{"task_id": "HumanEval/133", "prompt": "def sum_squares(lst):\t\n'''You are given a list of numbers. You need to return the sum of squared numbers in the given list by rounding each element in the list to the upper int(Ceiling) first.\nExamples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    '''", "test": ["def check(sum_squares):\n\tassert sum_squares([9434, 10144]) == 191901092", "def check(sum_squares):\n\tassert sum_squares([5.997, 6, 3]) == 81", "def check(sum_squares):\n\tassert sum_squares([3.327, 2, 7]) == 69", "def check(sum_squares):\n\tassert sum_squares([0.018, 14.66, 13.014, 15.188]) == 678", "def check(sum_squares):\n\tassert sum_squares([9574, 10213]) == 195966845", "def check(sum_squares):\n\tassert sum_squares([9165, 10377]) == 191679354", "def check(sum_squares):\n\tassert sum_squares([-4.222, 3.751, 10.595]) == 153", "def check(sum_squares):\n\tassert sum_squares([-5.714, 22.497, 14.173, 22.134]) == 1308", "def check(sum_squares):\n\tassert sum_squares([1, 1, 1]) == 3", "def check(sum_squares):\n\tassert sum_squares([1, 1, 2]) == 6", "def check(sum_squares):\n\tassert sum_squares([3, 7, 2]) == 62", "def check(sum_squares):\n\tassert sum_squares([-3, 6, 5]) == 70", "def check(sum_squares):\n\tassert sum_squares([-4.95, 2, 5]) == 45", "def check(sum_squares):\n\tassert sum_squares([9277, 9545]) == 177169754", "def check(sum_squares):\n\tassert sum_squares([2.01, 6.193, 1]) == 59", "def check(sum_squares):\n\tassert sum_squares([-1]) == 1", "def check(sum_squares):\n\tassert sum_squares([1, 8, 1, 2]) == 70", "def check(sum_squares):\n\tassert sum_squares([2, 1, 10, 7]) == 154", "def check(sum_squares):\n\tassert sum_squares([1.457, 7, 8]) == 117", "def check(sum_squares):\n\tassert sum_squares([1.05, 6.88, 5]) == 78", "def check(sum_squares):\n\tassert sum_squares([5.855, 4.571, 3]) == 70", "def check(sum_squares):\n\tassert sum_squares([103, 4, 15, 3]) == 10859", "def check(sum_squares):\n\tassert sum_squares([-2.854, 12.651, 18.252, 22.792]) == 1063", "def check(sum_squares):\n\tassert sum_squares([0.156, 2.708, 1.964]) == 14", "def check(sum_squares):\n\tassert sum_squares([102, 1, 16, 3]) == 10670", "def check(sum_squares):\n\tassert sum_squares([-2.192, 6.531, 7.947]) == 117", "def check(sum_squares):\n\tassert sum_squares([2.169, 7, 1]) == 59", "def check(sum_squares):\n\tassert sum_squares([2.872, 3, 5]) == 43", "def check(sum_squares):\n\tassert sum_squares([-6, 5, 1]) == 62", "def check(sum_squares):\n\tassert sum_squares([2.178, 2.152, 5]) == 43", "def check(sum_squares):\n\tassert sum_squares([0.29, 1.85, 7.406]) == 69", "def check(sum_squares):\n\tassert sum_squares([1,2,3])==14", "def check(sum_squares):\n\tassert sum_squares([3.808, 1, 2]) == 21", "def check(sum_squares):\n\tassert sum_squares([10899, 9187]) == 203189170", "def check(sum_squares):\n\tassert sum_squares([0, 5, 2]) == 29", "def check(sum_squares):\n\tassert sum_squares([-3, 4, 3]) == 34", "def check(sum_squares):\n\tassert sum_squares([1,3,5,7])==84", "def check(sum_squares):\n\tassert sum_squares([100,1,15,2])==10230", "def check(sum_squares):\n\tassert sum_squares([5, 1, 5, 12]) == 195", "def check(sum_squares):\n\tassert sum_squares([-2.286, 12.406, 13.124, 15.17]) == 625", "def check(sum_squares):\n\tassert sum_squares([10530, 10750]) == 226443400", "def check(sum_squares):\n\tassert sum_squares([1, 3, 4, 7]) == 75", "def check(sum_squares):\n\tassert sum_squares([2.414, 6, 7]) == 94", "def check(sum_squares):\n\tassert sum_squares([6.717, 7.781, 2]) == 117", "def check(sum_squares):\n\tassert sum_squares([-1.25, 6, 4]) == 53", "def check(sum_squares):\n\tassert sum_squares([2, 2, 4]) == 24", "def check(sum_squares):\n\tassert sum_squares([1.4,4.2,0])==29", "def check(sum_squares):\n\tassert sum_squares([-1, 3, 4]) == 26", "def check(sum_squares):\n\tassert sum_squares([2.501, 1.394, 5]) == 38", "def check(sum_squares):\n\tassert sum_squares([-3.736, 7.572, 3.736]) == 89", "def check(sum_squares):\n\tassert sum_squares([3.534, 3, 6]) == 61", "def check(sum_squares):\n\tassert sum_squares([1, 6, 2]) == 41", "def check(sum_squares):\n\tassert sum_squares([1, 3, 5, 3]) == 44", "def check(sum_squares):\n\tassert sum_squares([-1,1,0])==2", "def check(sum_squares):\n\tassert sum_squares([97, 1, 10, 3]) == 9519", "def check(sum_squares):\n\tassert sum_squares([3.706, 1, 8]) == 81", "def check(sum_squares):\n\tassert sum_squares([2.427, 2.41, 1]) == 19", "def check(sum_squares):\n\tassert sum_squares([98, 4, 18, 5]) == 9969", "def check(sum_squares):\n\tassert sum_squares([1.02, 4, 3]) == 29", "def check(sum_squares):\n\tassert sum_squares([2.819, 3.053, 3]) == 34", "def check(sum_squares):\n\tassert sum_squares([-5.899, 4.772, 3.238]) == 66", "def check(sum_squares):\n\tassert sum_squares([2.973, 6, 3]) == 54", "def check(sum_squares):\n\tassert sum_squares([-3]) == 9", "def check(sum_squares):\n\tassert sum_squares([95, 6, 15, 7]) == 9335", "def check(sum_squares):\n\tassert sum_squares([-1.008, 20.367, 17.503, 15.597]) == 1022", "def check(sum_squares):\n\tassert sum_squares([6, 8, 10, 5]) == 225", "def check(sum_squares):\n\tassert sum_squares([10000,10000])==200000000", "def check(sum_squares):\n\tassert sum_squares([1]) == 1", "def check(sum_squares):\n\tassert sum_squares([-1, 4, 4]) == 33", "def check(sum_squares):\n\tassert sum_squares([-1.466, 20.894, 13.499, 18.436]) == 999", "def check(sum_squares):\n\tassert sum_squares([3.246, 6, 3]) == 61", "def check(sum_squares):\n\tassert sum_squares([4, 3, 4]) == 41", "def check(sum_squares):\n\tassert sum_squares([-4.293, 4, 2]) == 36", "def check(sum_squares):\n\tassert sum_squares([-1.049, 21.79, 17.42, 24.654]) == 1434", "def check(sum_squares):\n\tassert sum_squares([4.321, 6.246, 2.174]) == 83", "def check(sum_squares):\n\tassert sum_squares([-2.4,1,1])==6", "def check(sum_squares):\n\tassert sum_squares([-1.063, 2, 5]) == 30", "def check(sum_squares):\n\tassert sum_squares([4]) == 16", "def check(sum_squares):\n\tassert sum_squares([1, 3, 10, 4]) == 126", "def check(sum_squares):\n\tassert sum_squares([-0.161, 4.708, 2.846]) == 34", "def check(sum_squares):\n\tassert sum_squares([-5.071, 19.003, 21.797, 14.901]) == 1134", "def check(sum_squares):\n\tassert sum_squares([9472, 10900]) == 208528784", "def check(sum_squares):\n\tassert sum_squares([1.13, 4, 1]) == 21", "def check(sum_squares):\n\tassert sum_squares([98, 5, 11, 6]) == 9786", "def check(sum_squares):\n\tassert sum_squares([10570, 10770]) == 227717800", "def check(sum_squares):\n\tassert sum_squares([-4.626, 9.385, 6.866]) == 165", "def check(sum_squares):\n\tassert sum_squares([-2]) == 4", "def check(sum_squares):\n\tassert sum_squares([-1, 1, 4]) == 18", "def check(sum_squares):\n\tassert sum_squares([-0.824, 2, 5]) == 29", "def check(sum_squares):\n\tassert sum_squares([99, 2, 18, 1]) == 10130", "def check(sum_squares):\n\tassert sum_squares([0.069, 2, 4]) == 21", "def check(sum_squares):\n\tassert sum_squares([-1])==1", "def check(sum_squares):\n\tassert sum_squares([3, 2, 1, 2]) == 18", "def check(sum_squares):\n\tassert sum_squares([10100, 9662]) == 195364244", "def check(sum_squares):\n\tassert sum_squares([1.413, 6, 5]) == 65", "def check(sum_squares):\n\tassert sum_squares([5]) == 25", "def check(sum_squares):\n\tassert sum_squares([2]) == 4", "def check(sum_squares):\n\tassert sum_squares([4.716, 3.326, 9.135]) == 141", "def check(sum_squares):\n\tassert sum_squares([2, 1, 8]) == 69", "def check(sum_squares):\n\tassert sum_squares([-5, 1, 2]) == 30", "def check(sum_squares):\n\tassert sum_squares([9751, 10057]) == 196225250", "def check(sum_squares):\n\tassert sum_squares([4, 1, 7, 5]) == 91", "def check(sum_squares):\n\tassert sum_squares([0])==0", "def check(sum_squares):\n\tassert sum_squares([98, 5, 20, 1]) == 10030", "def check(sum_squares):\n\tassert sum_squares([4.313, 5.557, 2]) == 65", "def check(sum_squares):\n\tassert sum_squares([2.372, 22.016, 15.346, 18.542]) == 1155", "def check(sum_squares):\n\tassert sum_squares([-1.4,4.6,6.3])==75", "def check(sum_squares):\n\tassert sum_squares([1, 3, 4, 10]) == 126", "def check(sum_squares):\n\tassert sum_squares([1.0,2,3])==14", "def check(sum_squares):\n\tassert sum_squares([97, 2, 16, 5]) == 9694", "def check(sum_squares):\n\tassert sum_squares([5, 6, 3]) == 70", "def check(sum_squares):\n\tassert sum_squares([-5]) == 25", "def check(sum_squares):\n\tassert sum_squares([-2, 6, 4]) == 56", "def check(sum_squares):\n\tassert sum_squares([5.028, 2.27, 5]) == 70", "def check(sum_squares):\n\tassert sum_squares([-1.4,17.9,18.9,19.9])==1086", "def check(sum_squares):\n\tassert sum_squares([102, 4, 14, 2]) == 10620", "def check(sum_squares):\n\tassert sum_squares([3.57, 14.883, 23.709, 15.874]) == 1073", "def check(sum_squares):\n\tassert sum_squares([4, 3, 3]) == 34", "def check(sum_squares):\n\tassert sum_squares([3]) == 9", "def check(sum_squares):\n\tassert sum_squares([5, 5, 8]) == 114"], "entry_point": "sum_squares", "completion": "import math\n\ndef sum_squares(lst):\n    rounded_lst = [math.ceil(num) for num in lst]\n    squared_lst = [num**2 for num in rounded_lst]\n    return sum(squared_lst)\n", "completions": ["import math\n\ndef sum_squares(lst):\n    rounded_lst = [math.ceil(num) for num in lst]\n    squared_lst = [num**2 for num in rounded_lst]\n    return sum(squared_lst)\n", "import math\n\ndef sum_squares(lst):\n    rounded_list = [math.ceil(num) for num in lst]\n    squared_list = [num**2 for num in rounded_list]\n    return sum(squared_list)\n", "import math\n\ndef sum_squares(lst):\n    rounded_lst = [math.ceil(num) for num in lst]\n    squared_lst = [num**2 for num in rounded_lst]\n    return sum(squared_lst)\n", "import math\n\ndef sum_squares(lst):\n    rounded_lst = [math.ceil(num) for num in lst]\n    squared_lst = [num**2 for num in rounded_lst]\n    return sum(squared_lst)\n", "import math\n\ndef sum_squares(lst):\n    rounded_lst = [math.ceil(num) for num in lst]\n    squared_lst = [num**2 for num in rounded_lst]\n    return sum(squared_lst)\n", "import math\n\ndef sum_squares(lst):\n    rounded_lst = [math.ceil(num) for num in lst]\n    squared_lst = [num**2 for num in rounded_lst]\n    return sum(squared_lst)\n", "import math\n\ndef sum_squares(lst):\n    rounded_lst = [math.ceil(num) for num in lst]\n    squared_lst = [num**2 for num in rounded_lst]\n    return sum(squared_lst)\n", "import math\n\ndef sum_squares(lst):\n    rounded_lst = [math.ceil(num) for num in lst]\n    squared_lst = [num**2 for num in rounded_lst]\n    return sum(squared_lst)\n", "import math\n\ndef sum_squares(lst):\n    rounded_lst = [math.ceil(num) for num in lst]\n    squared_lst = [num**2 for num in rounded_lst]\n    return sum(squared_lst)\n", "import math\n\ndef sum_squares(lst):\n    rounded_lst = [math.ceil(num) for num in lst]\n    squared_lst = [num**2 for num in rounded_lst]\n    return sum(squared_lst)\n"], "session_history": {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Round each element in the list to the upper int (Ceiling)\",\n      \"Square each rounded element\",\n      \"Sum the squared numbers\"\n    ],\n    \"high-level steps\": [\n      \"Round each element in the list to the upper int (Ceiling)\",\n      \"Square each rounded element\",\n      \"Sum the squared numbers and return the result\"\n    ]\n  }\n}", "Round_0": {"code": "import math\n\ndef sum_squares(lst):\n    rounded_lst = [math.ceil(num) for num in lst]\n    squared_lst = [num**2 for num in rounded_lst]\n    return sum(squared_lst)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Round each element in the list to the upper int (Ceiling)\",\n      \"Square each element in the list\",\n      \"Sum the squared numbers in the list\"\n    ],\n    \"high-level steps\": [\n      \"Round each element in the list to the upper int (Ceiling)\",\n      \"Square each element in the list\",\n      \"Sum the squared numbers in the list\"\n    ]\n  }\n}", "Round_0": {"code": "import math\n\ndef sum_squares(lst):\n    rounded_lst = [math.ceil(num) for num in lst]\n    squared_lst = [num**2 for num in rounded_lst]\n    return sum(squared_lst)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Round each element in the list to the upper int (Ceiling)\",\n      \"Square each element in the list\",\n      \"Sum up all squared numbers in the list\"\n    ],\n    \"high-level steps\": [\n      \"Round each element in the list to the upper int (Ceiling)\",\n      \"Square each element in the list\",\n      \"Sum up all squared numbers in the list\"\n    ]\n  }\n}", "Round_0": {"code": "import math\n\ndef sum_squares(lst):\n    rounded_list = [math.ceil(num) for num in lst]\n    squared_list = [num**2 for num in rounded_list]\n    return sum(squared_list)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Round each element in the list to the upper int (Ceiling)\",\n      \"Square each rounded element\",\n      \"Sum up all squared elements\"\n    ],\n    \"high-level steps\": [\n      \"Round each element in the list to the upper int (Ceiling)\",\n      \"Square each rounded element\",\n      \"Sum up all squared elements\"\n    ]\n  }\n}", "Round_0": {"code": "import math\n\ndef sum_squares(lst):\n    rounded_lst = [math.ceil(num) for num in lst]\n    squared_lst = [num**2 for num in rounded_lst]\n    return sum(squared_lst)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Round each element in the list to the upper int (Ceiling)\",\n      \"Square each rounded element\",\n      \"Sum up all squared elements\"\n    ],\n    \"high-level steps\": [\n      \"Round each element in the list to the upper int (Ceiling)\",\n      \"Square each rounded element\",\n      \"Sum up all squared elements\"\n    ]\n  }\n}", "Round_0": {"code": "import math\n\ndef sum_squares(lst):\n    rounded_lst = [math.ceil(num) for num in lst]\n    squared_lst = [num**2 for num in rounded_lst]\n    return sum(squared_lst)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Round each element in the list to the upper int (Ceiling)\",\n      \"Square each element in the list\",\n      \"Sum up all the squared numbers\"\n    ],\n    \"high-level steps\": [\n      \"Round each element in the list to the upper int (Ceiling)\",\n      \"Square each element in the list\",\n      \"Sum up all the squared numbers\"\n    ]\n  }\n}", "Round_0": {"code": "import math\n\ndef sum_squares(lst):\n    rounded_lst = [math.ceil(num) for num in lst]\n    squared_lst = [num**2 for num in rounded_lst]\n    return sum(squared_lst)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Round each element in the list to the upper int (Ceiling)\",\n      \"Square each rounded element\",\n      \"Sum the squared numbers\"\n    ],\n    \"high-level steps\": [\n      \"Round each element in the list to the upper int (Ceiling)\",\n      \"Square each rounded element\",\n      \"Sum the squared numbers and return the result\"\n    ]\n  }\n}", "Round_0": {"code": "import math\n\ndef sum_squares(lst):\n    rounded_lst = [math.ceil(num) for num in lst]\n    squared_lst = [num**2 for num in rounded_lst]\n    return sum(squared_lst)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Round each element in the list to the upper int (Ceiling)\",\n      \"Square each rounded element\",\n      \"Sum the squared numbers\"\n    ],\n    \"high-level steps\": [\n      \"Round each element in the list to the upper int (Ceiling)\",\n      \"Square each rounded element\",\n      \"Sum the squared numbers and return the result\"\n    ]\n  }\n}", "Round_0": {"code": "import math\n\ndef sum_squares(lst):\n    rounded_lst = [math.ceil(num) for num in lst]\n    squared_lst = [num**2 for num in rounded_lst]\n    return sum(squared_lst)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Round each element in the list to the upper int (Ceiling)\",\n      \"Square each rounded element\",\n      \"Sum up all squared numbers\"\n    ],\n    \"high-level steps\": [\n      \"Round each element in the list to the upper int (Ceiling)\",\n      \"Square each rounded element\",\n      \"Sum up all squared numbers\"\n    ]\n  }\n}", "Round_0": {"code": "import math\n\ndef sum_squares(lst):\n    rounded_lst = [math.ceil(num) for num in lst]\n    squared_lst = [num**2 for num in rounded_lst]\n    return sum(squared_lst)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Round each element in the list to the upper int (Ceiling)\",\n      \"Square each element in the list\",\n      \"Sum up all squared numbers in the list\"\n    ],\n    \"high-level steps\": [\n      \"Round each element in the list to the upper int (Ceiling)\",\n      \"Square each element in the list\",\n      \"Sum up all squared numbers in the list\"\n    ]\n  }\n}", "Round_0": {"code": "import math\n\ndef sum_squares(lst):\n    rounded_lst = [math.ceil(num) for num in lst]\n    squared_lst = [num**2 for num in rounded_lst]\n    return sum(squared_lst)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Round each element in the list to the upper int (Ceiling)\",\n      \"Square each rounded element\",\n      \"Sum the squared numbers\"\n    ],\n    \"high-level steps\": [\n      \"Round each element in the list to the upper int (Ceiling)\",\n      \"Square each rounded element\",\n      \"Sum the squared numbers and return the result\"\n    ]\n  }\n}", "Round_0": {"code": "import math\n\ndef sum_squares(lst):\n    rounded_lst = [math.ceil(num) for num in lst]\n    squared_lst = [num**2 for num in rounded_lst]\n    return sum(squared_lst)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [120, 120, 120, 120, 120, 120, 120, 120, 120, 120], "passed": true, "passAt10": true, "nl": "You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    ", "func": "def sum_squares(lst):", "examples": "Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    ", "canonical_plan": ["{\n  \"high-level plan\": {\n    \"subproblems\": [\n      \"Round each element in the list to the upper int (Ceiling)\",\n      \"Square each rounded element\",\n      \"Sum up all squared numbers\"\n    ],\n    \"major steps\": [\n      \"Iterate through the list of numbers\",\n      \"Round each element to the upper int using math.ceil()\",\n      \"Square the rounded element\",\n      \"Sum up all squared numbers\",\n      \"Return the final sum\"\n    ]\n  }\n}"], "plan_score_gpt-35-turbo": [85.0, 95.0], "plan_score_gpt-4o": [90.5, 100.0], "mutate_method": "condense_two2one", "test_case_list": ["assert sum_squares([9434, 10144]) == 191901092", "assert sum_squares([5.997, 6, 3]) == 81", "assert sum_squares([3.327, 2, 7]) == 69", "assert sum_squares([0.018, 14.66, 13.014, 15.188]) == 678", "assert sum_squares([9574, 10213]) == 195966845", "assert sum_squares([9165, 10377]) == 191679354", "assert sum_squares([-4.222, 3.751, 10.595]) == 153", "assert sum_squares([-5.714, 22.497, 14.173, 22.134]) == 1308", "assert sum_squares([1, 1, 1]) == 3", "assert sum_squares([1, 1, 2]) == 6", "assert sum_squares([3, 7, 2]) == 62", "assert sum_squares([-3, 6, 5]) == 70", "assert sum_squares([-4.95, 2, 5]) == 45", "assert sum_squares([9277, 9545]) == 177169754", "assert sum_squares([2.01, 6.193, 1]) == 59", "assert sum_squares([-1]) == 1", "assert sum_squares([1, 8, 1, 2]) == 70", "assert sum_squares([2, 1, 10, 7]) == 154", "assert sum_squares([1.457, 7, 8]) == 117", "assert sum_squares([1.05, 6.88, 5]) == 78", "assert sum_squares([5.855, 4.571, 3]) == 70", "assert sum_squares([103, 4, 15, 3]) == 10859", "assert sum_squares([-2.854, 12.651, 18.252, 22.792]) == 1063", "assert sum_squares([0.156, 2.708, 1.964]) == 14", "assert sum_squares([102, 1, 16, 3]) == 10670", "assert sum_squares([-2.192, 6.531, 7.947]) == 117", "assert sum_squares([2.169, 7, 1]) == 59", "assert sum_squares([2.872, 3, 5]) == 43", "assert sum_squares([-6, 5, 1]) == 62", "assert sum_squares([2.178, 2.152, 5]) == 43", "assert sum_squares([0.29, 1.85, 7.406]) == 69", "assert sum_squares([1,2,3])==14", "assert sum_squares([3.808, 1, 2]) == 21", "assert sum_squares([10899, 9187]) == 203189170", "assert sum_squares([0, 5, 2]) == 29", "assert sum_squares([-3, 4, 3]) == 34", "assert sum_squares([1,3,5,7])==84", "assert sum_squares([100,1,15,2])==10230", "assert sum_squares([5, 1, 5, 12]) == 195", "assert sum_squares([-2.286, 12.406, 13.124, 15.17]) == 625", "assert sum_squares([10530, 10750]) == 226443400", "assert sum_squares([1, 3, 4, 7]) == 75", "assert sum_squares([2.414, 6, 7]) == 94", "assert sum_squares([6.717, 7.781, 2]) == 117", "assert sum_squares([-1.25, 6, 4]) == 53", "assert sum_squares([2, 2, 4]) == 24", "assert sum_squares([1.4,4.2,0])==29", "assert sum_squares([-1, 3, 4]) == 26", "assert sum_squares([2.501, 1.394, 5]) == 38", "assert sum_squares([-3.736, 7.572, 3.736]) == 89", "assert sum_squares([3.534, 3, 6]) == 61", "assert sum_squares([1, 6, 2]) == 41", "assert sum_squares([1, 3, 5, 3]) == 44", "assert sum_squares([-1,1,0])==2", "assert sum_squares([97, 1, 10, 3]) == 9519", "assert sum_squares([3.706, 1, 8]) == 81", "assert sum_squares([2.427, 2.41, 1]) == 19", "assert sum_squares([98, 4, 18, 5]) == 9969", "assert sum_squares([1.02, 4, 3]) == 29", "assert sum_squares([2.819, 3.053, 3]) == 34", "assert sum_squares([-5.899, 4.772, 3.238]) == 66", "assert sum_squares([2.973, 6, 3]) == 54", "assert sum_squares([-3]) == 9", "assert sum_squares([95, 6, 15, 7]) == 9335", "assert sum_squares([-1.008, 20.367, 17.503, 15.597]) == 1022", "assert sum_squares([6, 8, 10, 5]) == 225", "assert sum_squares([10000,10000])==200000000", "assert sum_squares([1]) == 1", "assert sum_squares([-1, 4, 4]) == 33", "assert sum_squares([-1.466, 20.894, 13.499, 18.436]) == 999", "assert sum_squares([3.246, 6, 3]) == 61", "assert sum_squares([4, 3, 4]) == 41", "assert sum_squares([-4.293, 4, 2]) == 36", "assert sum_squares([-1.049, 21.79, 17.42, 24.654]) == 1434", "assert sum_squares([4.321, 6.246, 2.174]) == 83", "assert sum_squares([-2.4,1,1])==6", "assert sum_squares([-1.063, 2, 5]) == 30", "assert sum_squares([4]) == 16", "assert sum_squares([1, 3, 10, 4]) == 126", "assert sum_squares([-0.161, 4.708, 2.846]) == 34", "assert sum_squares([-5.071, 19.003, 21.797, 14.901]) == 1134", "assert sum_squares([9472, 10900]) == 208528784", "assert sum_squares([1.13, 4, 1]) == 21", "assert sum_squares([98, 5, 11, 6]) == 9786", "assert sum_squares([10570, 10770]) == 227717800", "assert sum_squares([-4.626, 9.385, 6.866]) == 165", "assert sum_squares([-2]) == 4", "assert sum_squares([-1, 1, 4]) == 18", "assert sum_squares([-0.824, 2, 5]) == 29", "assert sum_squares([99, 2, 18, 1]) == 10130", "assert sum_squares([0.069, 2, 4]) == 21", "assert sum_squares([-1])==1", "assert sum_squares([3, 2, 1, 2]) == 18", "assert sum_squares([10100, 9662]) == 195364244", "assert sum_squares([1.413, 6, 5]) == 65", "assert sum_squares([5]) == 25", "assert sum_squares([2]) == 4", "assert sum_squares([4.716, 3.326, 9.135]) == 141", "assert sum_squares([2, 1, 8]) == 69", "assert sum_squares([-5, 1, 2]) == 30", "assert sum_squares([9751, 10057]) == 196225250", "assert sum_squares([4, 1, 7, 5]) == 91", "assert sum_squares([0])==0", "assert sum_squares([98, 5, 20, 1]) == 10030", "assert sum_squares([4.313, 5.557, 2]) == 65", "assert sum_squares([2.372, 22.016, 15.346, 18.542]) == 1155", "assert sum_squares([-1.4,4.6,6.3])==75", "assert sum_squares([1, 3, 4, 10]) == 126", "assert sum_squares([1.0,2,3])==14", "assert sum_squares([97, 2, 16, 5]) == 9694", "assert sum_squares([5, 6, 3]) == 70", "assert sum_squares([-5]) == 25", "assert sum_squares([-2, 6, 4]) == 56", "assert sum_squares([5.028, 2.27, 5]) == 70", "assert sum_squares([-1.4,17.9,18.9,19.9])==1086", "assert sum_squares([102, 4, 14, 2]) == 10620", "assert sum_squares([3.57, 14.883, 23.709, 15.874]) == 1073", "assert sum_squares([4, 3, 3]) == 34", "assert sum_squares([3]) == 9", "assert sum_squares([5, 5, 8]) == 114"], "save_node": false, "pass": true, "parent_index": 387, "round": 709}
