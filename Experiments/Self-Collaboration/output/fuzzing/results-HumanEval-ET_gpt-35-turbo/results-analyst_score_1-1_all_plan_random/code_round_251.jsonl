{"task_id": "HumanEval/61", "prompt": "def correct_bracketing(brackets: str):\t\n''' brackets is a sequence composed of \"(\" and \")\". \n    return True if each opening bracket has a matching closing bracket.\n>>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    '''", "test": ["def check(correct_bracketing):\n\tassert correct_bracketing(\"(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"))()))((())((()()((((\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")((((((()())())()(((\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")((())))()(()))())\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"(()\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()())\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()())()()((()()())())(()()(()))()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()))\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\")\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\")())()())))(((\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"))((((((()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")((((\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()(()())\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()())()()((()()())())(()()(()))\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"((())()))\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()()(())(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"))())\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()(()())()\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()(()())()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\")\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()))()(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(())\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()(()())()()()(()())()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()(()())()()()(()())()()()((()()())())(()()(()))\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()())()(()())\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()))))()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")(()())(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"((((\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()())\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(((()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"))()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")))((\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")()())\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()())(()())()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()())()()(()())()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()(()())()(()())()\") == True", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"((((\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"))))\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"())\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")()(())()((()())\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"))()))))(()()(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()())())(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()()()(()())()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\")()(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"((((((\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()()((()()(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()((()()())())(()()(()))()()(()())()()\") == True", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"((()())))\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()\")", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"(\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"())())((()()))\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()())()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\")(()))(((()((()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()))))\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"))())()))(())\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")())())()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")((()))))((()(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()())())))(()(())()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")((((((\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\")(()\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"((())()()\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"()()(()())()))()\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\")(()(())((())((())\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")(()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()(()())()()()((()()())())(()()(()))(()())\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()(()())()()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()())()()((()()())())(()()(()))(()())\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()((()()())())(()()(()))\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(((\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"\") == True", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"()()(()())())(()\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()(())()()()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\")()()(()(())(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"))()()())(())\") == False"], "entry_point": "correct_bracketing", "completion": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    \n    stack = []\n    \n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n", "completions": ["def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    \n    stack = []\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    \n    for char in brackets:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map.keys():\n            if not stack or bracket_map[char] != stack.pop():\n                return False\n    \n    return not stack\n", "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    \n    open_count = 0\n    close_count = 0\n    \n    for char in brackets:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            close_count += 1\n        \n        if close_count > open_count:\n            return False\n    \n    return open_count == close_count\n", "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    \n    open_count = 0\n    close_count = 0\n    \n    for char in brackets:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            close_count += 1\n            if close_count > open_count:\n                return False\n    \n    return open_count == close_count\n", "def correct_bracketing(brackets: str):\n    opening_bracket_count = 0\n    \n    for char in brackets:\n        if char == '(':\n            opening_bracket_count += 1\n        elif char == ')':\n            opening_bracket_count -= 1\n        \n        if opening_bracket_count < 0:\n            return False\n    \n    return opening_bracket_count == 0\n", "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    \n    opening_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            opening_brackets -= 1\n            if opening_brackets < 0:\n                return False\n    \n    return opening_brackets == 0\n", "def correct_bracketing(brackets: str):\n    opening_brackets = 0\n    closing_brackets = 0\n    stack = []\n    \n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            closing_brackets += 1\n    \n    if opening_brackets != closing_brackets:\n        return False\n    \n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    \n    return len(stack) == 0\n", "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    \n    stack = []\n    \n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n", "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    \n    opening_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            opening_brackets -= 1\n            if opening_brackets < 0:\n                return False\n    \n    return opening_brackets == 0\n", "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    \n    open_count = 0\n    close_count = 0\n    \n    for char in brackets:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            close_count += 1\n            if close_count > open_count:\n                return False\n    \n    return open_count == close_count\n", "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    \n    stack = []\n    \n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n"], "session_history": {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the input string is empty\",\n      \"Check if the number of opening and closing brackets are equal\",\n      \"Check if the brackets are correctly matched\"\n    ],\n    \"steps\": [\n      \"Check if the input string is empty, return False if it is\",\n      \"Initialize a stack to keep track of opening brackets\",\n      \"Iterate through each character in the input string\",\n      \"If the character is an opening bracket, push it onto the stack\",\n      \"If the character is a closing bracket, pop the top element from the stack\",\n      \"If the stack is empty at the end of iteration, return True, else return False\"\n    ]\n  }\n}", "Round_0": {"code": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    \n    stack = []\n    \n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the input string is empty\",\n      \"Check if the number of opening and closing brackets are equal\",\n      \"Check if the brackets are correctly matched\"\n    ],\n    \"steps\": [\n      \"Check if the input string is empty, return False if it is\",\n      \"Initialize a stack to keep track of opening brackets\",\n      \"Iterate through each character in the input string\",\n      \"If the character is an opening bracket, push it onto the stack\",\n      \"If the character is a closing bracket, pop the top element from the stack\",\n      \"If the stack is empty or the popped element does not match the closing bracket, return False\",\n      \"If all brackets are correctly matched, return True\"\n    ]\n  }\n}", "Round_0": {"code": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    \n    stack = []\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    \n    for char in brackets:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map.keys():\n            if not stack or bracket_map[char] != stack.pop():\n                return False\n    \n    return not stack\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the input string is empty\",\n      \"Check if the number of opening brackets is equal to the number of closing brackets\",\n      \"Check if each opening bracket has a matching closing bracket\"\n    ],\n    \"steps\": [\n      \"Create a function correct_bracketing that takes a string brackets as input\",\n      \"Check if the input string is empty, return False if it is\",\n      \"Initialize a counter for opening brackets and closing brackets\",\n      \"Iterate through each character in the input string\",\n      \"If the character is an opening bracket, increment the opening bracket counter\",\n      \"If the character is a closing bracket, increment the closing bracket counter\",\n      \"If the closing bracket counter is greater than the opening bracket counter, return False\",\n      \"If the closing bracket counter is equal to the opening bracket counter, return True\",\n      \"If the closing bracket counter is less than the opening bracket counter, return False\"\n    ]\n  }\n}", "Round_0": {"code": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    \n    open_count = 0\n    close_count = 0\n    \n    for char in brackets:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            close_count += 1\n        \n        if close_count > open_count:\n            return False\n    \n    return open_count == close_count\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the input string is empty\",\n      \"Check if the number of opening brackets is equal to the number of closing brackets\",\n      \"Check if the brackets are correctly nested\"\n    ],\n    \"steps\": [\n      \"Create a function correct_bracketing that takes a string brackets as input\",\n      \"Check if the input string is empty, return False if it is\",\n      \"Initialize a counter for opening brackets and closing brackets\",\n      \"Iterate through each character in the input string\",\n      \"If the character is an opening bracket, increment the opening bracket counter\",\n      \"If the character is a closing bracket, increment the closing bracket counter\",\n      \"If the closing bracket counter is greater than the opening bracket counter, return False\",\n      \"If the closing bracket counter is equal to the opening bracket counter, return True\",\n      \"If the closing bracket counter is less than the opening bracket counter, return False\"\n    ]\n  }\n}", "Round_0": {"code": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    \n    open_count = 0\n    close_count = 0\n    \n    for char in brackets:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            close_count += 1\n            if close_count > open_count:\n                return False\n    \n    return open_count == close_count\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the number of opening and closing brackets is equal\",\n      \"Check if each opening bracket has a matching closing bracket\"\n    ],\n    \"high-level steps\": [\n      \"Create a function correct_bracketing that takes a string of brackets as input\",\n      \"Initialize a counter for opening brackets\",\n      \"Iterate through each character in the input string\",\n      \"If the character is an opening bracket, increment the counter\",\n      \"If the character is a closing bracket, decrement the counter\",\n      \"If the counter becomes negative or is not zero at the end, return False\",\n      \"Otherwise, return True\"\n    ]\n  }\n}", "Round_0": {"code": "def correct_bracketing(brackets: str):\n    opening_bracket_count = 0\n    \n    for char in brackets:\n        if char == '(':\n            opening_bracket_count += 1\n        elif char == ')':\n            opening_bracket_count -= 1\n        \n        if opening_bracket_count < 0:\n            return False\n    \n    return opening_bracket_count == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the input string is empty\",\n      \"Check if the number of opening brackets is equal to the number of closing brackets\",\n      \"Check if the brackets are correctly nested\"\n    ],\n    \"steps\": [\n      \"Create a function correct_bracketing that takes a string brackets as input\",\n      \"Check if the input string is empty, return False if it is\",\n      \"Initialize a counter variable for opening brackets\",\n      \"Iterate through each character in the input string\",\n      \"If the character is an opening bracket, increment the counter\",\n      \"If the character is a closing bracket, decrement the counter\",\n      \"If the counter becomes negative at any point, return False\",\n      \"If the counter is not zero at the end, return False\",\n      \"Return True if all conditions are met\"\n    ]\n  }\n}", "Round_0": {"code": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    \n    opening_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            opening_brackets -= 1\n            if opening_brackets < 0:\n                return False\n    \n    return opening_brackets == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the number of opening and closing brackets is equal\",\n      \"Check if each opening bracket has a matching closing bracket\"\n    ],\n    \"high-level steps\": [\n      \"Create a function correct_bracketing that takes a string of brackets as input\",\n      \"Initialize a counter for opening brackets and closing brackets\",\n      \"Iterate through each character in the input string\",\n      \"If the character is an opening bracket, increment the opening bracket counter\",\n      \"If the character is a closing bracket, increment the closing bracket counter\",\n      \"Check if the number of opening and closing brackets is equal\",\n      \"If not equal, return False\",\n      \"Iterate through the input string again\",\n      \"If the character is an opening bracket, push it onto a stack\",\n      \"If the character is a closing bracket, pop the top element from the stack\",\n      \"If the stack is empty or the popped element is not a matching opening bracket, return False\",\n      \"If all brackets have been matched, return True\"\n    ]\n  }\n}", "Round_0": {"code": "def correct_bracketing(brackets: str):\n    opening_brackets = 0\n    closing_brackets = 0\n    stack = []\n    \n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            closing_brackets += 1\n    \n    if opening_brackets != closing_brackets:\n        return False\n    \n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    \n    return len(stack) == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the input string is empty\",\n      \"Check if the number of opening and closing brackets are equal\",\n      \"Check if the brackets are correctly matched\"\n    ],\n    \"steps\": [\n      \"Check if the input string is empty, return False if it is\",\n      \"Initialize a stack to keep track of opening brackets\",\n      \"Iterate through each character in the input string\",\n      \"If the character is an opening bracket, push it onto the stack\",\n      \"If the character is a closing bracket, pop the top element from the stack\",\n      \"If the stack is empty or the popped element does not match the closing bracket, return False\",\n      \"If all brackets are correctly matched, return True\"\n    ]\n  }\n}", "Round_0": {"code": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    \n    stack = []\n    \n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the input string is empty\",\n      \"Check if the number of opening brackets is equal to the number of closing brackets\",\n      \"Check if the brackets are correctly nested\"\n    ],\n    \"steps\": [\n      \"Create a function correct_bracketing that takes a string brackets as input\",\n      \"Check if the input string is empty, return False if it is\",\n      \"Initialize a counter variable for opening brackets\",\n      \"Iterate through each character in the input string\",\n      \"If the character is an opening bracket, increment the counter\",\n      \"If the character is a closing bracket, decrement the counter\",\n      \"If the counter becomes negative at any point, return False\",\n      \"If the counter is not zero at the end, return False\",\n      \"Return True if all conditions are met\"\n    ]\n  }\n}", "Round_0": {"code": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    \n    opening_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            opening_brackets -= 1\n            if opening_brackets < 0:\n                return False\n    \n    return opening_brackets == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the input string is empty\",\n      \"Check if the number of opening brackets is equal to the number of closing brackets\",\n      \"Check if the brackets are correctly nested\"\n    ],\n    \"steps\": [\n      \"Create a function correct_bracketing that takes a string brackets as input\",\n      \"Check if the input string is empty, return False if it is\",\n      \"Initialize a counter for opening brackets and closing brackets\",\n      \"Iterate through each character in the input string\",\n      \"If the character is an opening bracket, increment the opening bracket counter\",\n      \"If the character is a closing bracket, increment the closing bracket counter\",\n      \"If the closing bracket counter is greater than the opening bracket counter, return False\",\n      \"If the closing bracket counter is equal to the opening bracket counter at the end of the iteration, return True\",\n      \"If the closing bracket counter is less than the opening bracket counter at the end of the iteration, return False\"\n    ]\n  }\n}", "Round_0": {"code": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    \n    open_count = 0\n    close_count = 0\n    \n    for char in brackets:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            close_count += 1\n            if close_count > open_count:\n                return False\n    \n    return open_count == close_count\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the input string is empty\",\n      \"Check if the number of opening and closing brackets are equal\",\n      \"Check if the brackets are correctly matched\"\n    ],\n    \"steps\": [\n      \"Check if the input string is empty, return False if it is\",\n      \"Initialize a stack to keep track of opening brackets\",\n      \"Iterate through each character in the input string\",\n      \"If the character is an opening bracket, push it onto the stack\",\n      \"If the character is a closing bracket, pop the top element from the stack\",\n      \"If the stack is empty at the end of iteration, return True, else return False\"\n    ]\n  }\n}", "Round_0": {"code": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    \n    stack = []\n    \n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [0.9873, 0.9873, 0.9873, 1.0, 0.9873, 1.0, 0.9873, 0.9873, 0.9873, 0.9873], "pass_results": [false, false, false, true, false, true, false, false, false, false], "pass_test_cases_num": [78, 78, 78, 79, 78, 79, 78, 78, 78, 78], "passed": true, "passAt10": true, "nl": " brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    ", "func": "def correct_bracketing(brackets: str):", "examples": ">>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    ", "canonical_plan": ["{\n  \"high-level plan\": {\n    \"subproblems\": [\n      \"Identify opening and closing brackets in the input string\",\n      \"Check if each opening bracket has a corresponding closing bracket\"\n    ],\n    \"major steps\": [\n      \"Initialize a depth variable to keep track of bracket nesting level\",\n      \"Iterate through each character in the input string\",\n      \"Increment depth for each opening bracket and decrement for each closing bracket\",\n      \"Return False if depth becomes negative at any point\",\n      \"Return True if depth is zero at the end\"\n    ]\n  }\n}"], "plan_score_gpt-35-turbo": [83.5, 95.0], "plan_score_gpt-4o": [82.5, 86.0], "mutate_method": "rephrase_one", "test_case_list": ["assert correct_bracketing(\"(\") == False", "assert correct_bracketing(\"))()))((())((()()((((\") == False", "assert correct_bracketing(\")((((((()())())()(((\") == False", "assert correct_bracketing(\")((())))()(()))())\") == False", "assert not correct_bracketing(\"(()\")", "assert correct_bracketing(\"(()())\") == True", "assert correct_bracketing(\"(()())()()((()()())())(()()(()))()\") == True", "assert correct_bracketing(\"()))\") == False", "assert not correct_bracketing(\")\")", "assert correct_bracketing(\"()()\") == True", "assert correct_bracketing(\")())()())))(((\") == False", "assert correct_bracketing(\"))((((((()\") == False", "assert correct_bracketing(\")((((\") == False", "assert correct_bracketing(\"()(()())\") == True", "assert correct_bracketing(\"(()())()()((()()())())(()()(()))\") == True", "assert correct_bracketing(\"((())()))\") == False", "assert correct_bracketing(\"()()()(())(\") == False", "assert correct_bracketing(\"))())\") == False", "assert correct_bracketing(\"()()(()())()\")", "assert correct_bracketing(\"()()(()())()\") == True", "assert correct_bracketing(\")\") == False", "assert correct_bracketing(\"()()()\") == True", "assert correct_bracketing(\"()))()(\") == False", "assert correct_bracketing(\"(())\") == True", "assert correct_bracketing(\"()()(()())()()()(()())()\") == True", "assert correct_bracketing(\"()()(()())()()()(()())()()()((()()())())(()()(()))\") == True", "assert correct_bracketing(\"(()())()(()())\") == True", "assert correct_bracketing(\"(()))))()\") == False", "assert correct_bracketing(\")(()())(\") == False", "assert correct_bracketing(\"((((\") == False", "assert correct_bracketing(\"(()())\")", "assert correct_bracketing(\"(((()\") == False", "assert correct_bracketing(\"))()\") == False", "assert correct_bracketing(\")))((\") == False", "assert correct_bracketing(\")()())\") == False", "assert correct_bracketing(\"(()\") == False", "assert correct_bracketing(\"(()())(()())()\") == True", "assert correct_bracketing(\"(()())()()(()())()\") == True", "assert correct_bracketing(\"()()(()())()(()())()\") == True", "assert not correct_bracketing(\"((((\")", "assert correct_bracketing(\"))))\") == False", "assert correct_bracketing(\"()\") == True", "assert correct_bracketing(\"())\") == False", "assert correct_bracketing(\")()(())()((()())\") == False", "assert correct_bracketing(\"))()))))(()()(\") == False", "assert correct_bracketing(\"()())())(\") == False", "assert correct_bracketing(\"()()()()(()())()\") == True", "assert correct_bracketing(\")()(\") == False", "assert correct_bracketing(\"((((((\") == False", "assert correct_bracketing(\"()()()((()()(\") == False", "assert correct_bracketing(\"()()((()()())())(()()(()))()()(()())()()\") == True", "assert not correct_bracketing(\"((()())))\")", "assert correct_bracketing(\"()\")", "assert not correct_bracketing(\"(\")", "assert correct_bracketing(\"())())((()()))\") == False", "assert correct_bracketing(\"(()())()\") == True", "assert correct_bracketing(\")(()))(((()((()\") == False", "assert correct_bracketing(\"()))))\") == False", "assert correct_bracketing(\"))())()))(())\") == False", "assert correct_bracketing(\")())())()\") == False", "assert correct_bracketing(\")((()))))((()(\") == False", "assert correct_bracketing(\"()())())))(()(())()\") == False", "assert correct_bracketing(\")((((((\") == False", "assert not correct_bracketing(\")(()\")", "assert correct_bracketing(\"((())()()\") == False", "assert not correct_bracketing(\"()()(()())()))()\")", "assert correct_bracketing(\")(()(())((())((())\") == False", "assert correct_bracketing(\")(()\") == False", "assert correct_bracketing(\")()\") == False", "assert correct_bracketing(\"()()(()())()()()((()()())())(()()(()))(()())\") == True", "assert correct_bracketing(\"()()(()())()()\") == True", "assert correct_bracketing(\"(()())()()((()()())())(()()(()))(()())\") == True", "assert correct_bracketing(\"()()((()()())())(()()(()))\")", "assert correct_bracketing(\"(((\") == False", "assert correct_bracketing(\"\") == True", "assert not correct_bracketing(\"()()(()())())(()\")", "assert correct_bracketing(\"()(())()()()\") == True", "assert correct_bracketing(\")()()(()(())(\") == False", "assert correct_bracketing(\"))()()())(())\") == False"], "save_node": true, "pass": true, "parent_index": 206, "round": 251}
