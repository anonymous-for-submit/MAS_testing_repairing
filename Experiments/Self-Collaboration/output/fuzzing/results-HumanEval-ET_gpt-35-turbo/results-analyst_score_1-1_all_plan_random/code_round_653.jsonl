{"task_id": "HumanEval/161", "prompt": "def solve(s):\t\n'''You are given a string s.  \n    if s[i] is a letter, reverse its case from lower to upper or vise versa,  \n    otherwise keep it as it is.  \n    If the string contains no letters, reverse the string.  \n    The function should return the resulted string.  \n    Consider edge cases where the input string might be empty.\nExamples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    '''", "test": ["def check(solve):\n\tassert solve(\"#ryv@$l*\") == '#RYV@$L*'", "def check(solve):\n\tassert solve(\"BjdhsNs\") == 'bJDHSnS'", "def check(solve):\n\tassert solve(\"$883%3/\") == '/3%388$'", "def check(solve):\n\tassert solve(\"QnNQfv\") == 'qNnqFV'", "def check(solve):\n\tassert solve(\"o3LWaIl4\") == 'O3lwAiL4'", "def check(solve):\n\tassert solve(\"zt*#m&v\") == 'ZT*#M&V'", "def check(solve):\n\tassert solve(\"wDgT\") == 'WdGt'", "def check(solve):\n\tassert solve(\"ab\") == \"AB\"", "def check(solve):\n\tassert solve(\"=E!NyLi\") == '=e!nYlI'", "def check(solve):\n\tassert solve(\"jZVuQ\") == 'JzvUq'", "def check(solve):\n\tassert solve(\"UKg@xpM~G\") == 'ukG@XPm~g'", "def check(solve):\n\tassert solve(\"%cCcq#\") == '%CcCQ#'", "def check(solve):\n\tassert solve(\"++A^/?xV\") == '++a^/?Xv'", "def check(solve):\n\tassert solve(\"7_%\") == '%_7'", "def check(solve):\n\tassert solve(\"qon\") == 'QON'", "def check(solve):\n\tassert solve(\"giiqdy\") == 'GIIQDY'", "def check(solve):\n\tassert solve(\"~@8%\") == '%8@~'", "def check(solve):\n\tassert solve(\"^@B\") == '^@b'", "def check(solve):\n\tassert solve(\"?UGciW\") == '?ugCIw'", "def check(solve):\n\tassert solve(\"17000556\") == '65500071'", "def check(solve):\n\tassert solve(\"nfl*&=+$@\") == 'NFL*&=+$@'", "def check(solve):\n\tassert solve(\"wSdcA\") == 'WsDCa'", "def check(solve):\n\tassert solve(\"luG9*?%\") == 'LUg9*?%'", "def check(solve):\n\tassert solve(\"5$0!@\") == '@!0$5'", "def check(solve):\n\tassert solve(\"sxFaMa\") == 'SXfAmA'", "def check(solve):\n\tassert solve(\"?ao\") == '?AO'", "def check(solve):\n\tassert solve(\"k&!_\") == 'K&!_'", "def check(solve):\n\tassert solve(\"-|MSfK\") == '-|msFk'", "def check(solve):\n\tassert solve(\"5%@\") == '@%5'", "def check(solve):\n\tassert solve(\"=epet*orq\") == '=EPET*ORQ'", "def check(solve):\n\tassert solve(\"^dHUM-y\") == '^Dhum-Y'", "def check(solve):\n\tassert solve(\"npKwSAD\") == 'NPkWsad'", "def check(solve):\n\tassert solve(\"55=9/9\") == '9/9=55'", "def check(solve):\n\tassert solve(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:", "def check(solve):\n\tassert solve(\"*^JOyeSI\") == '*^joYEsi'", "def check(solve):\n\tassert solve(\"yzzdc\") == 'YZZDC'", "def check(solve):\n\tassert solve(\"i!X&/T\") == 'I!x&/t'", "def check(solve):\n\tassert solve(\"mlB-*F\") == 'MLb-*f'", "def check(solve):\n\tassert solve(\"856\") == '658'", "def check(solve):\n\tassert solve(\"ifafP-OoTK%\") == 'IFAFp-oOtk%'", "def check(solve):\n\tassert solve(\"Xug\") == 'xUG'", "def check(solve):\n\tassert solve(\"~2~@0\") == '0@~2~'", "def check(solve):\n\tassert solve(\"UMm:m\") == 'umM:M'", "def check(solve):\n\tassert solve(\"6812832\") == '2382186'", "def check(solve):\n\tassert solve(\"QDF:CXB\") == 'qdf:cxb'", "def check(solve):\n\tassert solve(\"5-=@&*\") == '*&@=-5'", "def check(solve):\n\tassert solve(\"761~^_%~4\") == '4~%_^~167'", "def check(solve):\n\tassert solve(\"#$a^D\") == \"#$A^d\"", "def check(solve):\n\tassert solve(\"4hzTAP_e\") == '4HZtap_E'", "def check(solve):\n\tassert solve(\"2058786\") == '6878502'", "def check(solve):\n\tassert solve(\"yErHfPuhE\") == 'YeRhFpUHe'", "def check(solve):\n\tassert solve(\"*u~\") == '*U~'", "def check(solve):\n\tassert solve(\"g*chm\") == 'G*CHM'", "def check(solve):\n\tassert solve(\"enxhq\") == 'ENXHQ'", "def check(solve):\n\tassert solve(\"ctpx\") == 'CTPX'", "def check(solve):\n\tassert solve(\"j$&Wd\") == 'J$&wD'", "def check(solve):\n\tassert solve(\"ji$rpiwCJ\") == 'JI$RPIWcj'", "def check(solve):\n\tassert solve(\"cjG~zXx\") == 'CJg~ZxX'", "def check(solve):\n\tassert solve(\"dgksb\") == 'DGKSB'", "def check(solve):\n\tassert solve(\"827_~+=6:\") == ':6=+~_728'", "def check(solve):\n\tassert solve(\"vr_d$kBQ\") == 'VR_D$Kbq'", "def check(solve):\n\tassert solve(\"389627754\") == '457726983'", "def check(solve):\n\tassert solve(\"+:#\") == '#:+'", "def check(solve):\n\tassert solve(\"prytYOIw\") == 'PRYTyoiW'", "def check(solve):\n\tassert solve(\"+1/05*!?+\") == '+?!*50/1+'", "def check(solve):\n\tassert solve(\"$u%lZTsz\") == '$U%LztSZ'", "def check(solve):\n\tassert solve(\"qyAKc\") == 'QYakC'", "def check(solve):\n\tassert solve(\"/@-\") == '-@/'", "def check(solve):\n\tassert solve(\"iiyw\") == 'IIYW'", "def check(solve):\n\tassert solve(\"#a@C\") == \"#A@c\"", "def check(solve):\n\tassert solve(\"49623838\") == '83832694'", "def check(solve):\n\tassert solve(\"u:kx!*\") == 'U:KX!*'", "def check(solve):\n\tassert solve(\"gsl\") == 'GSL'", "def check(solve):\n\tassert solve(\"jlycko\") == 'JLYCKO'", "def check(solve):\n\tassert solve(\"MUSKIE\") == 'muskie'", "def check(solve):\n\tassert solve(\":TDr\") == ':tdR'", "def check(solve):\n\tassert solve(\"bkd\") == 'BKD'", "def check(solve):\n\tassert solve(\"DNOZ2XKDMJZSwC$\") == 'dnoz2xkdmjzsWc$'", "def check(solve):\n\tassert solve(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.", "def check(solve):\n\tassert solve(\"n$tkw\") == 'N$TKW'", "def check(solve):\n\tassert solve(\"48954\") == '45984'", "def check(solve):\n\tassert solve(\"LlWj5FD\") == 'lLwJ5fd'", "def check(solve):\n\tassert solve(\"AsDf\") == \"aSdF\"", "def check(solve):\n\tassert solve(\"@!93/5**@\") == '@**5/39!@'", "def check(solve):\n\tassert solve(\"VmVDPkI\") == 'vMvdpKi'", "def check(solve):\n\tassert solve(\"mOn\") == 'MoN'", "def check(solve):\n\tassert solve(\"059646105\") == '501646950'", "def check(solve):\n\tassert solve(\"huo^\") == 'HUO^'", "def check(solve):\n\tassert solve(\"ghgnw\") == 'GHGNW'", "def check(solve):\n\tassert solve(\"gne\") == 'GNE'", "def check(solve):\n\tassert solve(\"~~%==41\") == '14==%~~'", "def check(solve):\n\tassert solve(\"%_uoz/#?L\") == '%_UOZ/#?l'", "def check(solve):\n\tassert solve(\"w@l+zd\") == 'W@L+ZD'", "def check(solve):\n\tassert solve(\"1234\") == \"4321\"", "def check(solve):\n\tassert solve(\"EsvNrg\") == 'eSVnRG'", "def check(solve):\n\tassert solve(\"pstVx\") == 'PSTvX'", "def check(solve):\n\tassert solve(\"kLA#y:NC\") == 'Kla#Y:nc'", "def check(solve):\n\tassert solve(\"ePOjFeuu\") == 'EpoJfEUU'", "def check(solve):\n\tassert solve(\"GPJae+?*a\") == 'gpjAE+?*A'", "def check(solve):\n\tassert solve(\"Uc$$xCSQ0cN~\") == 'uC$$Xcsq0Cn~'", "def check(solve):\n\tassert solve(\"gtvtsr\") == 'GTVTSR'", "def check(solve):\n\tassert solve(\"#AsdfW^45\") == \"#aSDFw^45\"", "def check(solve):\n\tassert solve(\"6971168\") == '8611796'", "def check(solve):\n\tassert solve(\"??rwE\") == '??RWe'", "def check(solve):\n\tassert solve(\"HMYxK\") == 'hmyXk'", "def check(solve):\n\tassert solve(\"gcflna\") == 'GCFLNA'", "def check(solve):\n\tassert solve(\"~+/#\") == '#/+~'", "def check(solve):\n\tassert solve(\"glgh\") == 'GLGH'", "def check(solve):\n\tassert solve(\"?gn~\") == '?GN~'", "def check(solve):\n\tassert solve(\"73713138\") == '83131737'", "def check(solve):\n\tassert solve(\"54138\") == '83145'", "def check(solve):\n\tassert solve(\"oGzZO!NOb@Lty\") == 'OgZzo!noB@lTY'", "def check(solve):\n\tassert solve(\"Q&LKD*BmV\") == 'q&lkd*bMv'", "def check(solve):\n\tassert solve(\"13431299\") == '99213431'", "def check(solve):\n\tassert solve(\"~/uc/@p^h\") == '~/UC/@P^H'", "def check(solve):\n\tassert solve(\"4kqV&&/6+Lc\") == '4KQv&&/6+lC'", "def check(solve):\n\tassert solve(\"fqY\") == 'FQy'", "def check(solve):\n\tassert solve(\"|n*e~bx-\") == '|N*E~BX-'", "def check(solve):\n\tassert solve(\"Pj+3w:31N!s6\") == 'pJ+3W:31n!S6'", "def check(solve):\n\tassert solve(\"++skzZ\") == '++SKZz'", "def check(solve):\n\tassert solve(\"%kmlC*s\") == '%KMLc*S'", "def check(solve):\n\tassert solve(\"232948\") == '849232'", "def check(solve):\n\tassert solve(\"613\") == '316'", "def check(solve):\n\tassert solve(\"!tmFhu\") == '!TMfHU'", "def check(solve):\n\tassert solve(\"+fDs:f\") == '+FdS:F'", "def check(solve):\n\tassert solve(\"XAdrNtUNr\") == 'xaDRnTunR'", "def check(solve):\n\tassert solve(\"cqiau\") == 'CQIAU'", "def check(solve):\n\tassert solve(\"340988\") == '889043'"], "entry_point": "solve", "completion": "def solve(s):\n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        result = ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        result = s[::-1]\n    \n    return result\n", "completions": ["def solve(s):\n    if not s:\n        return s\n    has_letters = any(char.isalpha() for char in s)\n    if has_letters:\n        result = ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        result = s[::-1]\n    return result\n", "def solve(s):\n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        result = ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        result = s[::-1]\n    \n    return result\n", "def solve(s):\n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        result = ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        result = s[::-1]\n    \n    return result\n", "def solve(s):\n    if not s:\n        return \"\"\n    \n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        result = \"\".join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        result = s[::-1]\n    \n    return result\n", "def solve(s):\n    if not s:\n        return s\n    has_letters = any(char.isalpha() for char in s)\n    if has_letters:\n        result = ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        result = s[::-1]\n    return result\n", "def solve(s):\n    if not s:\n        return s\n    \n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        result = ''.join(char.lower() if char.isupper() else char.upper() if char.islower() else char for char in s)\n    else:\n        result = s[::-1]\n    \n    return result\n", "def solve(s):\n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        result = ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        result = s[::-1]\n    \n    return result\n", "def solve(s):\n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        result = ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        result = s[::-1]\n    \n    return result\n", "def solve(s):\n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        result = ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        result = s[::-1]\n    \n    return result\n", "def solve(s):\n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        result = ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        result = s[::-1]\n    \n    return result\n"], "session_history": {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify if the input string contains any letters\",\n      \"Reverse the case of letters in the string\",\n      \"Reverse the entire string if it contains no letters\"\n    ],\n    \"high-level steps\": [\n      \"Check if the input string contains any letters\",\n      \"If yes, reverse the case of letters in the string\",\n      \"If no, reverse the entire string\",\n      \"Return the resulted string\"\n    ]\n  }\n}", "Round_0": {"code": "def solve(s):\n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        result = ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        result = s[::-1]\n    \n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify if the input string contains any letters\",\n      \"Reverse the case of letters in the string\",\n      \"Reverse the entire string if it contains no letters\"\n    ],\n    \"steps\": [\n      \"Check if the input string is empty\",\n      \"Check if the input string contains any letters\",\n      \"If the string contains letters, reverse the case of each letter\",\n      \"If the string contains no letters, reverse the entire string\",\n      \"Return the resulted string\"\n    ]\n  }\n}", "Round_0": {"code": "def solve(s):\n    if not s:\n        return s\n    has_letters = any(char.isalpha() for char in s)\n    if has_letters:\n        result = ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        result = s[::-1]\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify if the input string contains any letters\",\n      \"Reverse the case of letters in the string\",\n      \"Reverse the entire string if it contains no letters\"\n    ],\n    \"high-level-steps\": [\n      \"Check if the input string contains any letters\",\n      \"If yes, reverse the case of letters in the string\",\n      \"If no, reverse the entire string\",\n      \"Return the resulted string\"\n    ]\n  }\n}", "Round_0": {"code": "def solve(s):\n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        result = ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        result = s[::-1]\n    \n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify if the input string contains any letters\",\n      \"Reverse the case of letters in the string\",\n      \"Reverse the entire string if it contains no letters\"\n    ],\n    \"high-level steps\": [\n      \"Check if the input string contains any letters\",\n      \"If yes, reverse the case of letters in the string\",\n      \"If no, reverse the entire string\",\n      \"Return the resulted string\"\n    ]\n  }\n}", "Round_0": {"code": "def solve(s):\n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        result = ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        result = s[::-1]\n    \n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify if the input string contains any letters\",\n      \"Reverse the case of letters in the string\",\n      \"Reverse the entire string if it contains no letters\"\n    ],\n    \"high-level steps\": [\n      \"Check if the input string is empty\",\n      \"Check if the input string contains any letters\",\n      \"If the string contains letters, reverse the case of each letter\",\n      \"If the string contains no letters, reverse the entire string\",\n      \"Return the resulted string\"\n    ]\n  }\n}", "Round_0": {"code": "def solve(s):\n    if not s:\n        return \"\"\n    \n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        result = \"\".join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        result = s[::-1]\n    \n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify if the input string contains any letters\",\n      \"Reverse the case of letters in the string\",\n      \"Reverse the entire string if it contains no letters\"\n    ],\n    \"steps\": [\n      \"Check if the input string is empty\",\n      \"Check if the input string contains any letters\",\n      \"If the string contains letters, reverse the case of each letter\",\n      \"If the string contains no letters, reverse the entire string\",\n      \"Return the resulted string\"\n    ]\n  }\n}", "Round_0": {"code": "def solve(s):\n    if not s:\n        return s\n    has_letters = any(char.isalpha() for char in s)\n    if has_letters:\n        result = ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        result = s[::-1]\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify if the input string contains any letters\",\n      \"Reverse the case of letters in the string\",\n      \"Reverse the entire string if it contains no letters\"\n    ],\n    \"high-level steps\": [\n      \"Check if the input string is empty\",\n      \"Check if the input string contains any letters\",\n      \"If the string contains letters, reverse the case of each letter\",\n      \"If the string contains no letters, reverse the entire string\",\n      \"Return the resulted string\"\n    ]\n  }\n}", "Round_0": {"code": "def solve(s):\n    if not s:\n        return s\n    \n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        result = ''.join(char.lower() if char.isupper() else char.upper() if char.islower() else char for char in s)\n    else:\n        result = s[::-1]\n    \n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify if the input string contains any letters\",\n      \"Reverse the case of letters in the string\",\n      \"Reverse the entire string if it contains no letters\"\n    ],\n    \"high-level-steps\": [\n      \"Check if the input string contains any letters\",\n      \"If yes, reverse the case of letters in the string\",\n      \"If no, reverse the entire string\",\n      \"Return the resulted string\"\n    ]\n  }\n}", "Round_0": {"code": "def solve(s):\n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        result = ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        result = s[::-1]\n    \n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify if the input string contains any letters\",\n      \"Reverse the case of letters in the string\",\n      \"Reverse the entire string if it contains no letters\"\n    ],\n    \"high-level-steps\": [\n      \"Check if the input string contains any letters\",\n      \"If yes, reverse the case of letters in the string\",\n      \"If no, reverse the entire string\",\n      \"Return the resulted string\"\n    ]\n  }\n}", "Round_0": {"code": "def solve(s):\n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        result = ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        result = s[::-1]\n    \n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify if the input string contains any letters\",\n      \"Reverse the case of letters in the string\",\n      \"Reverse the entire string if it contains no letters\"\n    ],\n    \"high-level-steps\": [\n      \"Check if the input string contains any letters\",\n      \"If yes, reverse the case of letters in the string\",\n      \"If no, reverse the entire string\",\n      \"Return the resulted string\"\n    ]\n  }\n}", "Round_0": {"code": "def solve(s):\n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        result = ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        result = s[::-1]\n    \n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify if the input string contains any letters\",\n      \"Reverse the case of letters in the string\",\n      \"Reverse the entire string if it contains no letters\"\n    ],\n    \"high-level steps\": [\n      \"Check if the input string contains any letters\",\n      \"If yes, reverse the case of letters in the string\",\n      \"If no, reverse the entire string\",\n      \"Return the resulted string\"\n    ]\n  }\n}", "Round_0": {"code": "def solve(s):\n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        result = ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    else:\n        result = s[::-1]\n    \n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [128, 128, 128, 128, 128, 128, 128, 128, 128, 128], "passed": true, "passAt10": true, "nl": "You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    ", "func": "def solve(s):", "examples": "Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    ", "canonical_plan": ["{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify if a character in the string is a letter or not\",\n      \"Reverse the case of a letter if it is a letter\",\n      \"Reverse the entire string if it contains no letters\"\n    ],\n    \"steps\": [\n      \"Create a function that takes a string as input\",\n      \"Initialize a flag variable and an index variable\",\n      \"Convert the string into a list of characters\",\n      \"Iterate through each character in the string\",\n      \"Check if the character is a letter using the isalpha() method\",\n      \"If it is a letter, reverse its case using the swapcase() method\",\n      \"Update the character in the list with the reversed case\",\n      \"If no letters were found, reverse the entire string\",\n      \"Convert the list back to a string\",\n      \"Return the modified string\"\n    ]\n  }\n}"], "plan_score_gpt-35-turbo": [94.0, 95.0], "plan_score_gpt-4o": [92.5, 94.0], "mutate_method": "add_1_sentence_at_end", "test_case_list": ["assert solve(\"#ryv@$l*\") == '#RYV@$L*'", "assert solve(\"BjdhsNs\") == 'bJDHSnS'", "assert solve(\"$883%3/\") == '/3%388$'", "assert solve(\"QnNQfv\") == 'qNnqFV'", "assert solve(\"o3LWaIl4\") == 'O3lwAiL4'", "assert solve(\"zt*#m&v\") == 'ZT*#M&V'", "assert solve(\"wDgT\") == 'WdGt'", "assert solve(\"ab\") == \"AB\"", "assert solve(\"=E!NyLi\") == '=e!nYlI'", "assert solve(\"jZVuQ\") == 'JzvUq'", "assert solve(\"UKg@xpM~G\") == 'ukG@XPm~g'", "assert solve(\"%cCcq#\") == '%CcCQ#'", "assert solve(\"++A^/?xV\") == '++a^/?Xv'", "assert solve(\"7_%\") == '%_7'", "assert solve(\"qon\") == 'QON'", "assert solve(\"giiqdy\") == 'GIIQDY'", "assert solve(\"~@8%\") == '%8@~'", "assert solve(\"^@B\") == '^@b'", "assert solve(\"?UGciW\") == '?ugCIw'", "assert solve(\"17000556\") == '65500071'", "assert solve(\"nfl*&=+$@\") == 'NFL*&=+$@'", "assert solve(\"wSdcA\") == 'WsDCa'", "assert solve(\"luG9*?%\") == 'LUg9*?%'", "assert solve(\"5$0!@\") == '@!0$5'", "assert solve(\"sxFaMa\") == 'SXfAmA'", "assert solve(\"?ao\") == '?AO'", "assert solve(\"k&!_\") == 'K&!_'", "assert solve(\"-|MSfK\") == '-|msFk'", "assert solve(\"5%@\") == '@%5'", "assert solve(\"=epet*orq\") == '=EPET*ORQ'", "assert solve(\"^dHUM-y\") == '^Dhum-Y'", "assert solve(\"npKwSAD\") == 'NPkWsad'", "assert solve(\"55=9/9\") == '9/9=55'", "assert solve(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:", "assert solve(\"*^JOyeSI\") == '*^joYEsi'", "assert solve(\"yzzdc\") == 'YZZDC'", "assert solve(\"i!X&/T\") == 'I!x&/t'", "assert solve(\"mlB-*F\") == 'MLb-*f'", "assert solve(\"856\") == '658'", "assert solve(\"ifafP-OoTK%\") == 'IFAFp-oOtk%'", "assert solve(\"Xug\") == 'xUG'", "assert solve(\"~2~@0\") == '0@~2~'", "assert solve(\"UMm:m\") == 'umM:M'", "assert solve(\"6812832\") == '2382186'", "assert solve(\"QDF:CXB\") == 'qdf:cxb'", "assert solve(\"5-=@&*\") == '*&@=-5'", "assert solve(\"761~^_%~4\") == '4~%_^~167'", "assert solve(\"#$a^D\") == \"#$A^d\"", "assert solve(\"4hzTAP_e\") == '4HZtap_E'", "assert solve(\"2058786\") == '6878502'", "assert solve(\"yErHfPuhE\") == 'YeRhFpUHe'", "assert solve(\"*u~\") == '*U~'", "assert solve(\"g*chm\") == 'G*CHM'", "assert solve(\"enxhq\") == 'ENXHQ'", "assert solve(\"ctpx\") == 'CTPX'", "assert solve(\"j$&Wd\") == 'J$&wD'", "assert solve(\"ji$rpiwCJ\") == 'JI$RPIWcj'", "assert solve(\"cjG~zXx\") == 'CJg~ZxX'", "assert solve(\"dgksb\") == 'DGKSB'", "assert solve(\"827_~+=6:\") == ':6=+~_728'", "assert solve(\"vr_d$kBQ\") == 'VR_D$Kbq'", "assert solve(\"389627754\") == '457726983'", "assert solve(\"+:#\") == '#:+'", "assert solve(\"prytYOIw\") == 'PRYTyoiW'", "assert solve(\"+1/05*!?+\") == '+?!*50/1+'", "assert solve(\"$u%lZTsz\") == '$U%LztSZ'", "assert solve(\"qyAKc\") == 'QYakC'", "assert solve(\"/@-\") == '-@/'", "assert solve(\"iiyw\") == 'IIYW'", "assert solve(\"#a@C\") == \"#A@c\"", "assert solve(\"49623838\") == '83832694'", "assert solve(\"u:kx!*\") == 'U:KX!*'", "assert solve(\"gsl\") == 'GSL'", "assert solve(\"jlycko\") == 'JLYCKO'", "assert solve(\"MUSKIE\") == 'muskie'", "assert solve(\":TDr\") == ':tdR'", "assert solve(\"bkd\") == 'BKD'", "assert solve(\"DNOZ2XKDMJZSwC$\") == 'dnoz2xkdmjzsWc$'", "assert solve(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.", "assert solve(\"n$tkw\") == 'N$TKW'", "assert solve(\"48954\") == '45984'", "assert solve(\"LlWj5FD\") == 'lLwJ5fd'", "assert solve(\"AsDf\") == \"aSdF\"", "assert solve(\"@!93/5**@\") == '@**5/39!@'", "assert solve(\"VmVDPkI\") == 'vMvdpKi'", "assert solve(\"mOn\") == 'MoN'", "assert solve(\"059646105\") == '501646950'", "assert solve(\"huo^\") == 'HUO^'", "assert solve(\"ghgnw\") == 'GHGNW'", "assert solve(\"gne\") == 'GNE'", "assert solve(\"~~%==41\") == '14==%~~'", "assert solve(\"%_uoz/#?L\") == '%_UOZ/#?l'", "assert solve(\"w@l+zd\") == 'W@L+ZD'", "assert solve(\"1234\") == \"4321\"", "assert solve(\"EsvNrg\") == 'eSVnRG'", "assert solve(\"pstVx\") == 'PSTvX'", "assert solve(\"kLA#y:NC\") == 'Kla#Y:nc'", "assert solve(\"ePOjFeuu\") == 'EpoJfEUU'", "assert solve(\"GPJae+?*a\") == 'gpjAE+?*A'", "assert solve(\"Uc$$xCSQ0cN~\") == 'uC$$Xcsq0Cn~'", "assert solve(\"gtvtsr\") == 'GTVTSR'", "assert solve(\"#AsdfW^45\") == \"#aSDFw^45\"", "assert solve(\"6971168\") == '8611796'", "assert solve(\"??rwE\") == '??RWe'", "assert solve(\"HMYxK\") == 'hmyXk'", "assert solve(\"gcflna\") == 'GCFLNA'", "assert solve(\"~+/#\") == '#/+~'", "assert solve(\"glgh\") == 'GLGH'", "assert solve(\"?gn~\") == '?GN~'", "assert solve(\"73713138\") == '83131737'", "assert solve(\"54138\") == '83145'", "assert solve(\"oGzZO!NOb@Lty\") == 'OgZzo!noB@lTY'", "assert solve(\"Q&LKD*BmV\") == 'q&lkd*bMv'", "assert solve(\"13431299\") == '99213431'", "assert solve(\"~/uc/@p^h\") == '~/UC/@P^H'", "assert solve(\"4kqV&&/6+Lc\") == '4KQv&&/6+lC'", "assert solve(\"fqY\") == 'FQy'", "assert solve(\"|n*e~bx-\") == '|N*E~BX-'", "assert solve(\"Pj+3w:31N!s6\") == 'pJ+3W:31n!S6'", "assert solve(\"++skzZ\") == '++SKZz'", "assert solve(\"%kmlC*s\") == '%KMLc*S'", "assert solve(\"232948\") == '849232'", "assert solve(\"613\") == '316'", "assert solve(\"!tmFhu\") == '!TMfHU'", "assert solve(\"+fDs:f\") == '+FdS:F'", "assert solve(\"XAdrNtUNr\") == 'xaDRnTunR'", "assert solve(\"cqiau\") == 'CQIAU'", "assert solve(\"340988\") == '889043'"], "save_node": false, "pass": true, "parent_index": 116, "round": 653}
