{"name": "1607_E. Robot on the Board 1", "description": "The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nThe sequence of commands s executed by the robot is given. Each command is denoted by one of the symbols 'L', 'R', 'D' or 'U', and triggers the movement to left, right, down or up, respectively.\n\nThe robot can start its movement in any cell. The robot executes the commands starting from the first one, strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's task is to execute as many commands as possible without falling off the board. For example, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nDetermine the cell from which the robot should start its movement in order to execute as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "tags": ["implementation"], "difficulty": 11, "id": 1607, "sample_io": [{"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}], "test_list": [{"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n5 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n1 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 1\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 4\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n1 1\n3 4\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n2 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 1\n2 1\n4 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRUDLLLDU\n", "output": ["1 2\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n2 2\nLUUDRLDLRLUU\n", "output": ["1 1\n1 2\n2 1\n2 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 1\nUULDRR\n4 2\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 1\n1 1\n4 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 1\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nLRDRUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 2\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n17 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 1\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 1\n3 1\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n4 4\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n5 2\nL\n3 3\nRRDLUU\n6 3\nLUUURRDLLLDU\n", "output": ["1 1\n1 2\n2 1\n4 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n4 4\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 4\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 1\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n4 3\nRRDLUU\n3 4\nDUULRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n2 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 2\nUULRRD\n6 2\nUULULDRRDULL\n", "output": ["1 1\n1 2\n3 2\n4 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n13 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n9 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n22 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n8 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n6 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n1 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRDRLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n5 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n4 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUT\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n6 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRDRLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n4 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n6 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDURDURL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n10 3\nRRDLUU\n6 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 2\nLUUDRLDLRLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n7 3\nRRDLUU\n8 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n8 3\nLUUDRRDLLLUT\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n5 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n3 3\nRRDUUL\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n6 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n3 3\nUULDRR\n11 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n7 3\nRRDLUU\n8 2\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n3 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nDRRLUU\n6 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n12 3\nRRDLUU\n8 2\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n2 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n5 2\nL\n3 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n10 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n4 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nLUULRRDLDLUU\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n2 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n5 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n2 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n10 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n6 3\nRRDLUU\n9 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRRDLUU\n8 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n2 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nUULDRR\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n4 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRDRLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nLUULRRDDLLUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nUULDRR\n4 2\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n6 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 4\nLUUDRRLLLDUU\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDURDURL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n1 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n2 2\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n5 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n8 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nDRRLUU\n6 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n5 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n12 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nUULDRR\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDTUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n5 3\nUUULLDRRDULL\n", "output": ["1 1\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 1\nL\n10 2\nL\n2 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 2\nUULDRR\n10 3\nLUULRRDDLLUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n23 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDTUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n13 2\nL\n2 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n6 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n9 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n15 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLRUURDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n4 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDUUL\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n4 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n11 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUV\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n5 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n12 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nUULRDR\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}], "task_id": "codecontest/102", "repair_prompt": ["The robot must identify a best initial spot that enhances the carrying out of the command sequence s without tumbling off the board's boundary. Consider edge scenarios where the sequence s involves movements that continuously approach the board's boundary.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def find_best_starting_position(n, m, s):\n    # Initialize variables to track the robot's position and boundaries\n    min_row, max_row, min_col, max_col = 0, 0, 0, 0\n    current_row, current_col = 0, 0\n\n    # Iterate over each command in the sequence s\n    for command in s:\n        if command == 'L':\n            current_col -= 1\n        elif command == 'R':\n            current_col += 1\n        elif command == 'U':\n            current_row -= 1\n        elif command == 'D':\n            current_row += 1\n\n        # Update boundaries\n        min_row = min(min_row, current_row)\n        max_row = max(max_row, current_row)\n        min_col = min(min_col, current_col)\n        max_col = max(max_col, current_col)\n\n    # Determine the best initial position\n    best_row = 1 - min_row\n    best_col = 1 - min_col\n\n    # Ensure the position is within the field boundaries\n    if best_row + max_row <= n and best_col + max_col <= m:\n        return best_row, best_col\n    else:\n        return None\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n\n    results = []\n\n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        s = data[index]\n        index += 1\n\n        result = find_best_starting_position(n, m, s)\n        if result:\n            results.append(f\"{result[0]} {result[1]}\")\n\n    # Output the results for each test case\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def find_best_starting_position(n, m, s):\n    # Initialize the best starting position and the maximum commands executed\n    best_r, best_c = 1, 1\n    max_commands = 0\n\n    # Iterate over all possible starting positions\n    for start_r in range(1, n + 1):\n        for start_c in range(1, m + 1):\n            r, c = start_r, start_c\n            commands_executed = 0\n            valid = True\n\n            # Simulate the robot's movement\n            for command in s:\n                if command == 'L':\n                    c -= 1\n                elif command == 'R':\n                    c += 1\n                elif command == 'U':\n                    r -= 1\n                elif command == 'D':\n                    r += 1\n\n                # Check if the robot is still on the board\n                if r < 1 or r > n or c < 1 or c > m:\n                    valid = False\n                    break\n\n                commands_executed += 1\n\n            # Update the best starting position if this one is better\n            if valid and commands_executed > max_commands:\n                max_commands = commands_executed\n                best_r, best_c = start_r, start_c\n\n    return best_r, best_c\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m = map(int, data[index].split())\n        s = data[index + 1]\n        index += 2\n\n        best_r, best_c = find_best_starting_position(n, m, s)\n        results.append(f\"{best_r} {best_c}\")\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def find_best_starting_position(t, test_cases):\n    results = []\n    for n, m, s in test_cases:\n        min_r, max_r, min_c, max_c = 0, 0, 0, 0\n        current_r, current_c = 0, 0\n        \n        for command in s:\n            if command == 'L':\n                current_c -= 1\n            elif command == 'R':\n                current_c += 1\n            elif command == 'U':\n                current_r -= 1\n            elif command == 'D':\n                current_r += 1\n            \n            min_r = min(min_r, current_r)\n            max_r = max(max_r, current_r)\n            min_c = min(min_c, current_c)\n            max_c = max(max_c, current_c)\n        \n        start_r = 1 - min_r\n        start_c = 1 - min_c\n        \n        if start_r + max_r > n:\n            start_r = n - max_r\n        if start_c + max_c > m:\n            start_c = m - max_c\n        \n        results.append((start_r, start_c))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        s = data[index]\n        index += 1\n        test_cases.append((n, m, s))\n    \n    results = find_best_starting_position(t, test_cases)\n    \n    for r, c in results:\n        print(r, c)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def find_best_starting_position(n, m, s):\n    # Initialize variables to track the best starting position\n    min_row, min_col = 0, 0\n    max_row, max_col = 0, 0\n    current_row, current_col = 0, 0\n\n    # Simulate the robot's movement\n    for command in s:\n        if command == 'L':\n            current_col -= 1\n        elif command == 'R':\n            current_col += 1\n        elif command == 'U':\n            current_row -= 1\n        elif command == 'D':\n            current_row += 1\n\n        # Track the minimum and maximum extents of the robot's path\n        min_row = min(min_row, current_row)\n        max_row = max(max_row, current_row)\n        min_col = min(min_col, current_col)\n        max_col = max(max_col, current_col)\n\n    # Calculate the best starting position\n    best_row = 1 - min_row\n    best_col = 1 - min_col\n\n    # Ensure the starting position is within the board boundaries\n    if best_row + max_row >= n:\n        best_row = n - max_row\n    if best_col + max_col >= m:\n        best_col = m - max_col\n\n    return best_row, best_col\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m = map(int, data[index].split())\n        s = data[index + 1]\n        index += 2\n\n        # Find the best starting position for the current test case\n        best_row, best_col = find_best_starting_position(n, m, s)\n        results.append(f\"{best_row} {best_col}\")\n\n    # Output the results for each test case\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def find_best_starting_position(n, m, s):\n    # Initialize variables to track the best starting position\n    best_r, best_c = 1, 1\n    max_commands = 0\n\n    # Initialize variables to track the current position and boundaries\n    min_r, max_r = 0, 0\n    min_c, max_c = 0, 0\n    current_r, current_c = 0, 0\n\n    # Simulate the robot's movement\n    for command in s:\n        if command == 'L':\n            current_c -= 1\n        elif command == 'R':\n            current_c += 1\n        elif command == 'U':\n            current_r -= 1\n        elif command == 'D':\n            current_r += 1\n\n        # Update boundaries\n        min_r = min(min_r, current_r)\n        max_r = max(max_r, current_r)\n        min_c = min(min_c, current_c)\n        max_c = max(max_c, current_c)\n\n        # Calculate the possible starting position\n        start_r = 1 - min_r\n        start_c = 1 - min_c\n\n        # Check if the starting position is valid\n        if 1 <= start_r <= n - (max_r - min_r) and 1 <= start_c <= m - (max_c - min_c):\n            # Calculate the number of commands executed\n            commands_executed = len(s)\n            if commands_executed > max_commands:\n                max_commands = commands_executed\n                best_r, best_c = start_r, start_c\n\n    return best_r, best_c\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n\n    results = []\n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        s = data[index]\n        index += 1\n\n        r, c = find_best_starting_position(n, m, s)\n        results.append(f\"{r} {c}\")\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def find_best_starting_position(n, m, s):\n    # Initialize the boundaries\n    min_row, max_row = 0, 0\n    min_col, max_col = 0, 0\n    \n    # Current position\n    current_row, current_col = 0, 0\n    \n    # Simulate the movement\n    for command in s:\n        if command == 'L':\n            current_col -= 1\n        elif command == 'R':\n            current_col += 1\n        elif command == 'U':\n            current_row -= 1\n        elif command == 'D':\n            current_row += 1\n        \n        # Update boundaries\n        min_row = min(min_row, current_row)\n        max_row = max(max_row, current_row)\n        min_col = min(min_col, current_col)\n        max_col = max(max_col, current_col)\n    \n    # Calculate the best starting position\n    start_row = 1 - min_row\n    start_col = 1 - min_col\n    \n    # Ensure the starting position is within the board\n    if start_row + max_row > n:\n        start_row = n - max_row\n    if start_col + max_col > m:\n        start_col = m - max_col\n    \n    return start_row, start_col\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        n, m = map(int, data[index].split())\n        s = data[index + 1]\n        index += 2\n        \n        result = find_best_starting_position(n, m, s)\n        results.append(result)\n    \n    for result in results:\n        print(result[0], result[1])\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def find_best_starting_position(n, m, s):\n    # Initialize the boundaries\n    min_row, max_row = 0, 0\n    min_col, max_col = 0, 0\n    \n    # Current position\n    current_row, current_col = 0, 0\n    \n    # Simulate the movement\n    for command in s:\n        if command == 'L':\n            current_col -= 1\n        elif command == 'R':\n            current_col += 1\n        elif command == 'U':\n            current_row -= 1\n        elif command == 'D':\n            current_row += 1\n        \n        # Update boundaries\n        min_row = min(min_row, current_row)\n        max_row = max(max_row, current_row)\n        min_col = min(min_col, current_col)\n        max_col = max(max_col, current_col)\n    \n    # Calculate the best starting position\n    best_row = 1 - min_row\n    best_col = 1 - min_col\n    \n    # Ensure the starting position is within the board\n    if best_row + max_row >= n:\n        best_row = n - max_row\n    if best_col + max_col >= m:\n        best_col = m - max_col\n    \n    return best_row, best_col\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        s = data[index]\n        index += 1\n        \n        r, c = find_best_starting_position(n, m, s)\n        results.append(f\"{r} {c}\")\n    \n    print(\"\\n\".join(results))\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def find_best_starting_position(n, m, s):\n    # Initialize variables to track the robot's position\n    min_row, max_row, min_col, max_col = 0, 0, 0, 0\n    current_row, current_col = 0, 0\n\n    # Iterate over each command in the string s\n    for command in s:\n        if command == 'L':\n            current_col -= 1\n        elif command == 'R':\n            current_col += 1\n        elif command == 'U':\n            current_row -= 1\n        elif command == 'D':\n            current_row += 1\n\n        # Update the boundaries\n        min_row = min(min_row, current_row)\n        max_row = max(max_row, current_row)\n        min_col = min(min_col, current_col)\n        max_col = max(max_col, current_col)\n\n    # Calculate the best starting position\n    best_row = 1 - min_row\n    best_col = 1 - min_col\n\n    # Ensure the starting position is within the board's boundaries\n    if best_row + max_row >= n:\n        best_row = n - max_row\n    if best_col + max_col >= m:\n        best_col = m - max_col\n\n    return best_row, best_col\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m = map(int, data[index].split())\n        s = data[index + 1]\n        index += 2\n\n        # Find the best starting position for this test case\n        best_row, best_col = find_best_starting_position(n, m, s)\n        results.append(f\"{best_row} {best_col}\")\n\n    # Output the results for each test case\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def find_best_starting_position(n, m, s):\n    # Initialize the minimum and maximum boundaries\n    min_row, max_row = 0, 0\n    min_col, max_col = 0, 0\n    \n    # Current position\n    current_row, current_col = 0, 0\n    \n    # Traverse the command sequence\n    for command in s:\n        if command == 'L':\n            current_col -= 1\n        elif command == 'R':\n            current_col += 1\n        elif command == 'U':\n            current_row -= 1\n        elif command == 'D':\n            current_row += 1\n        \n        # Update the boundaries\n        min_row = min(min_row, current_row)\n        max_row = max(max_row, current_row)\n        min_col = min(min_col, current_col)\n        max_col = max(max_col, current_col)\n    \n    # Calculate the best starting position\n    best_row = 1 - min_row\n    best_col = 1 - min_col\n    \n    # Ensure the starting position is within the field\n    if best_row + max_row >= n:\n        best_row = n - max_row\n    if best_col + max_col >= m:\n        best_col = m - max_col\n    \n    return best_row, best_col\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        s = data[index + 2]\n        index += 3\n        \n        r, c = find_best_starting_position(n, m, s)\n        results.append(f\"{r} {c}\")\n    \n    # Print all results for each test case\n    print(\"\\n\".join(results))\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def find_best_starting_position(n, m, s):\n    # Initialize the boundaries\n    min_row, max_row = 0, 0\n    min_col, max_col = 0, 0\n    \n    # Current position\n    current_row, current_col = 0, 0\n    \n    # Simulate the movement\n    for command in s:\n        if command == 'L':\n            current_col -= 1\n        elif command == 'R':\n            current_col += 1\n        elif command == 'U':\n            current_row -= 1\n        elif command == 'D':\n            current_row += 1\n        \n        # Update boundaries\n        min_row = min(min_row, current_row)\n        max_row = max(max_row, current_row)\n        min_col = min(min_col, current_col)\n        max_col = max(max_col, current_col)\n    \n    # Calculate the best starting position\n    start_row = 1 - min_row\n    start_col = 1 - min_col\n    \n    # Ensure the starting position is within the field\n    if start_row + max_row <= n and start_col + max_col <= m:\n        return start_row, start_col\n    else:\n        return None\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        s = data[index]\n        index += 1\n        \n        result = find_best_starting_position(n, m, s)\n        if result:\n            results.append(f\"{result[0]} {result[1]}\")\n    \n    # Output results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def find_best_starting_position(n, m, s):\n    # Initialize variables to track the robot's position and boundaries\n    min_row, max_row, min_col, max_col = 0, 0, 0, 0\n    current_row, current_col = 0, 0\n\n    # Iterate over each command in the sequence s\n    for command in s:\n        if command == 'L':\n            current_col -= 1\n        elif command == 'R':\n            current_col += 1\n        elif command == 'U':\n            current_row -= 1\n        elif command == 'D':\n            current_row += 1\n\n        # Update boundaries\n        min_row = min(min_row, current_row)\n        max_row = max(max_row, current_row)\n        min_col = min(min_col, current_col)\n        max_col = max(max_col, current_col)\n\n    # Determine the best initial position\n    best_row = 1 - min_row\n    best_col = 1 - min_col\n\n    # Ensure the position is within the field boundaries\n    if best_row + max_row <= n and best_col + max_col <= m:\n        return best_row, best_col\n    else:\n        return None\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n\n    results = []\n\n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        s = data[index]\n        index += 1\n\n        result = find_best_starting_position(n, m, s)\n        if result:\n            results.append(f\"{result[0]} {result[1]}\")\n\n    # Output the results for each test case\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, dimensions of the field, and command sequences.\",\n      \"details\": [\n        \"Read the integer t from the first line, which represents the number of test cases.\",\n        \"For each test case, read two integers n and m representing the dimensions of the field.\",\n        \"Read the string s representing the sequence of commands.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the robot's movement to determine the best starting position.\",\n      \"details\": [\n        \"Initialize variables to track the robot's position and boundaries.\",\n        \"Iterate over each command in the sequence s and update the robot's position accordingly.\",\n        \"Check if the robot's position approaches the boundary of the field.\",\n        \"Determine the best initial position that allows the robot to execute the maximum number of commands without crossing the boundary.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": [\n        \"For each test case, output the coordinates of the best starting position found.\",\n        \"Ensure the output format matches the requirement: two integers separated by a space.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read and parse the input data to extract the number of test cases, field dimensions, and command sequences.\",\n    \"For each test case, simulate the robot's movement based on the command sequence.\",\n    \"Track the robot's position and ensure it does not cross the field's boundaries.\",\n    \"Identify the best starting position that maximizes the number of executable commands.\",\n    \"Output the coordinates of the best starting position for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def find_best_starting_position(n, m, s):\n    # Initialize variables to track the robot's position and boundaries\n    min_row, max_row, min_col, max_col = 0, 0, 0, 0\n    current_row, current_col = 0, 0\n\n    # Iterate over each command in the sequence s\n    for command in s:\n        if command == 'L':\n            current_col -= 1\n        elif command == 'R':\n            current_col += 1\n        elif command == 'U':\n            current_row -= 1\n        elif command == 'D':\n            current_row += 1\n\n        # Update boundaries\n        min_row = min(min_row, current_row)\n        max_row = max(max_row, current_row)\n        min_col = min(min_col, current_col)\n        max_col = max(max_col, current_col)\n\n    # Determine the best initial position\n    best_row = 1 - min_row\n    best_col = 1 - min_col\n\n    # Ensure the position is within the field boundaries\n    if best_row + max_row <= n and best_col + max_col <= m:\n        return best_row, best_col\n    else:\n        return None\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n\n    results = []\n\n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        s = data[index]\n        index += 1\n\n        result = find_best_starting_position(n, m, s)\n        if result:\n            results.append(f\"{result[0]} {result[1]}\")\n\n    # Output the results for each test case\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"details\": [\n        \"Read the integer t, which represents the number of test cases.\",\n        \"For each test case, read the integers n and m, which represent the dimensions of the board.\",\n        \"Read the string s, which represents the sequence of commands.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the robot's movement to determine the best starting position.\",\n      \"details\": [\n        \"For each test case, iterate over possible starting positions on the board.\",\n        \"Simulate the execution of the command sequence s from each starting position.\",\n        \"Track the robot's position and ensure it does not move outside the board's boundaries.\",\n        \"Count the number of commands executed before the robot would tumble off the board.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the optimal starting position for each test case.\",\n      \"details\": [\n        \"Identify the starting position that allows the maximum number of commands to be executed without the robot tumbling off the board.\",\n        \"If multiple starting positions yield the same maximum number of commands, any of them can be chosen.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": [\n        \"For each test case, output the coordinates of the optimal starting position in the format 'r c'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, iterate over all possible starting positions on the board.\",\n    \"Simulate the robot's movement for each starting position and track the number of commands executed.\",\n    \"Determine the starting position that allows the maximum number of commands to be executed without tumbling off the board.\",\n    \"Output the optimal starting position for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def find_best_starting_position(n, m, s):\n    # Initialize the best starting position and the maximum commands executed\n    best_r, best_c = 1, 1\n    max_commands = 0\n\n    # Iterate over all possible starting positions\n    for start_r in range(1, n + 1):\n        for start_c in range(1, m + 1):\n            r, c = start_r, start_c\n            commands_executed = 0\n            valid = True\n\n            # Simulate the robot's movement\n            for command in s:\n                if command == 'L':\n                    c -= 1\n                elif command == 'R':\n                    c += 1\n                elif command == 'U':\n                    r -= 1\n                elif command == 'D':\n                    r += 1\n\n                # Check if the robot is still on the board\n                if r < 1 or r > n or c < 1 or c > m:\n                    valid = False\n                    break\n\n                commands_executed += 1\n\n            # Update the best starting position if this one is better\n            if valid and commands_executed > max_commands:\n                max_commands = commands_executed\n                best_r, best_c = start_r, start_c\n\n    return best_r, best_c\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m = map(int, data[index].split())\n        s = data[index + 1]\n        index += 2\n\n        best_r, best_c = find_best_starting_position(n, m, s)\n        results.append(f\"{best_r} {best_c}\")\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, dimensions of the field, and command sequences.\",\n      \"details\": [\n        \"Read the integer t from the first line, which represents the number of test cases.\",\n        \"For each test case, read two integers n and m representing the dimensions of the field.\",\n        \"Read the string s representing the sequence of commands.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the robot's movement on the field to determine the best starting position.\",\n      \"details\": [\n        \"Initialize variables to track the robot's position and boundaries.\",\n        \"Iterate over each command in the sequence s and update the robot's position accordingly.\",\n        \"Check if the robot's position approaches the boundary of the field and adjust the starting position to maximize the number of commands executed without crossing the boundary.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the optimal starting position for each test case.\",\n      \"details\": [\n        \"For each test case, calculate the starting position that allows the robot to execute the maximum number of commands without crossing the boundary.\",\n        \"If multiple starting positions yield the same result, choose any of them.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": [\n        \"For each test case, print the coordinates of the optimal starting position in the format 'r c'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases, field dimensions, and command sequences.\",\n    \"For each test case, simulate the robot's movement to determine the best starting position.\",\n    \"Calculate the optimal starting position that maximizes command execution without crossing boundaries.\",\n    \"Output the results for each test case in the specified format.\"\n  ]\n}\n```", "Round_0": {"code": "def find_best_starting_position(t, test_cases):\n    results = []\n    for n, m, s in test_cases:\n        min_r, max_r, min_c, max_c = 0, 0, 0, 0\n        current_r, current_c = 0, 0\n        \n        for command in s:\n            if command == 'L':\n                current_c -= 1\n            elif command == 'R':\n                current_c += 1\n            elif command == 'U':\n                current_r -= 1\n            elif command == 'D':\n                current_r += 1\n            \n            min_r = min(min_r, current_r)\n            max_r = max(max_r, current_r)\n            min_c = min(min_c, current_c)\n            max_c = max(max_c, current_c)\n        \n        start_r = 1 - min_r\n        start_c = 1 - min_c\n        \n        if start_r + max_r > n:\n            start_r = n - max_r\n        if start_c + max_c > m:\n            start_c = m - max_c\n        \n        results.append((start_r, start_c))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        s = data[index]\n        index += 1\n        test_cases.append((n, m, s))\n    \n    results = find_best_starting_position(t, test_cases)\n    \n    for r, c in results:\n        print(r, c)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"details\": \"Read the integer t, followed by 2t lines containing n, m, and the command sequence s for each test case.\"\n    },\n    {\n      \"description\": \"Simulate the robot's movement on the board for each test case to determine the best starting position.\",\n      \"details\": \"For each test case, simulate the robot's movement from different starting positions and track the maximum number of commands executed without the robot tumbling off the board.\"\n    },\n    {\n      \"description\": \"Identify the best initial spot for the robot for each test case.\",\n      \"details\": \"Determine the starting position (r, c) that allows the robot to execute the maximum number of commands without going out of bounds.\"\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": \"For each test case, print the coordinates (r, c) of the best starting position.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input data to get the number of test cases and the details for each test case.\",\n    \"For each test case, initialize variables to track the best starting position and the maximum number of commands executed.\",\n    \"Iterate over possible starting positions on the board.\",\n    \"For each starting position, simulate the robot's movement according to the command sequence s.\",\n    \"Check if the robot stays within the board boundaries for each command and count the number of commands executed.\",\n    \"Update the best starting position if the current position allows more commands to be executed without going out of bounds.\",\n    \"After evaluating all starting positions, store the best starting position for the current test case.\",\n    \"Output the best starting position for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def find_best_starting_position(n, m, s):\n    # Initialize variables to track the best starting position\n    min_row, min_col = 0, 0\n    max_row, max_col = 0, 0\n    current_row, current_col = 0, 0\n\n    # Simulate the robot's movement\n    for command in s:\n        if command == 'L':\n            current_col -= 1\n        elif command == 'R':\n            current_col += 1\n        elif command == 'U':\n            current_row -= 1\n        elif command == 'D':\n            current_row += 1\n\n        # Track the minimum and maximum extents of the robot's path\n        min_row = min(min_row, current_row)\n        max_row = max(max_row, current_row)\n        min_col = min(min_col, current_col)\n        max_col = max(max_col, current_col)\n\n    # Calculate the best starting position\n    best_row = 1 - min_row\n    best_col = 1 - min_col\n\n    # Ensure the starting position is within the board boundaries\n    if best_row + max_row >= n:\n        best_row = n - max_row\n    if best_col + max_col >= m:\n        best_col = m - max_col\n\n    return best_row, best_col\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m = map(int, data[index].split())\n        s = data[index + 1]\n        index += 2\n\n        # Find the best starting position for the current test case\n        best_row, best_col = find_best_starting_position(n, m, s)\n        results.append(f\"{best_row} {best_col}\")\n\n    # Output the results for each test case\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, dimensions of the field, and command sequences.\",\n      \"details\": \"Read the integer t for the number of test cases. For each test case, read integers n and m for the field dimensions, and the string s for the command sequence.\"\n    },\n    {\n      \"description\": \"Simulate the robot's movement on the board for each test case to determine the best starting position.\",\n      \"details\": \"For each test case, simulate the robot's movement starting from different positions on the board. Track the robot's position and ensure it does not move outside the boundaries of the board.\"\n    },\n    {\n      \"description\": \"Identify the starting position that allows the robot to execute the maximum number of commands without going out of bounds.\",\n      \"details\": \"For each starting position, count the number of commands executed before the robot would move out of bounds. Choose the starting position with the highest count.\"\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": \"For each test case, output the coordinates of the starting position that allows the maximum number of commands to be executed.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read and parse the input to extract the number of test cases, field dimensions, and command sequences.\",\n    \"For each test case, iterate over possible starting positions on the board.\",\n    \"Simulate the robot's movement from each starting position, tracking the number of commands executed before going out of bounds.\",\n    \"Select the starting position with the maximum number of executable commands.\",\n    \"Output the coordinates of the selected starting position for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def find_best_starting_position(n, m, s):\n    # Initialize variables to track the best starting position\n    best_r, best_c = 1, 1\n    max_commands = 0\n\n    # Initialize variables to track the current position and boundaries\n    min_r, max_r = 0, 0\n    min_c, max_c = 0, 0\n    current_r, current_c = 0, 0\n\n    # Simulate the robot's movement\n    for command in s:\n        if command == 'L':\n            current_c -= 1\n        elif command == 'R':\n            current_c += 1\n        elif command == 'U':\n            current_r -= 1\n        elif command == 'D':\n            current_r += 1\n\n        # Update boundaries\n        min_r = min(min_r, current_r)\n        max_r = max(max_r, current_r)\n        min_c = min(min_c, current_c)\n        max_c = max(max_c, current_c)\n\n        # Calculate the possible starting position\n        start_r = 1 - min_r\n        start_c = 1 - min_c\n\n        # Check if the starting position is valid\n        if 1 <= start_r <= n - (max_r - min_r) and 1 <= start_c <= m - (max_c - min_c):\n            # Calculate the number of commands executed\n            commands_executed = len(s)\n            if commands_executed > max_commands:\n                max_commands = commands_executed\n                best_r, best_c = start_r, start_c\n\n    return best_r, best_c\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n\n    results = []\n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        s = data[index]\n        index += 1\n\n        r, c = find_best_starting_position(n, m, s)\n        results.append(f\"{r} {c}\")\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, dimensions of the field, and command sequences.\",\n      \"steps\": [\n        \"Read the integer t from the first line, representing the number of test cases.\",\n        \"For each test case, read the integers n and m, representing the height and width of the field.\",\n        \"Read the string s, representing the sequence of commands.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the best initial spot for the robot to start executing the command sequence without tumbling off the board.\",\n      \"steps\": [\n        \"Simulate the robot's movement from each possible starting position on the board.\",\n        \"Track the robot's position and ensure it remains within the boundaries of the field.\",\n        \"Identify the starting position that allows the robot to execute the maximum number of commands without going out of bounds.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"For each test case, output the coordinates of the best starting position found.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a loop to process each test case.\",\n    \"For each test case, parse the dimensions of the field and the command sequence.\",\n    \"Iterate over all possible starting positions on the field.\",\n    \"Simulate the robot's movement from each starting position, tracking its position and ensuring it remains within bounds.\",\n    \"Determine the starting position that allows the maximum number of commands to be executed without going out of bounds.\",\n    \"Store the result for each test case.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```", "Round_0": {"code": "def find_best_starting_position(n, m, s):\n    # Initialize the boundaries\n    min_row, max_row = 0, 0\n    min_col, max_col = 0, 0\n    \n    # Current position\n    current_row, current_col = 0, 0\n    \n    # Simulate the movement\n    for command in s:\n        if command == 'L':\n            current_col -= 1\n        elif command == 'R':\n            current_col += 1\n        elif command == 'U':\n            current_row -= 1\n        elif command == 'D':\n            current_row += 1\n        \n        # Update boundaries\n        min_row = min(min_row, current_row)\n        max_row = max(max_row, current_row)\n        min_col = min(min_col, current_col)\n        max_col = max(max_col, current_col)\n    \n    # Calculate the best starting position\n    start_row = 1 - min_row\n    start_col = 1 - min_col\n    \n    # Ensure the starting position is within the board\n    if start_row + max_row > n:\n        start_row = n - max_row\n    if start_col + max_col > m:\n        start_col = m - max_col\n    \n    return start_row, start_col\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        n, m = map(int, data[index].split())\n        s = data[index + 1]\n        index += 2\n        \n        result = find_best_starting_position(n, m, s)\n        results.append(result)\n    \n    for result in results:\n        print(result[0], result[1])\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"details\": \"Read the integer t, followed by 2t lines containing n, m, and the command sequence s for each test case.\"\n    },\n    {\n      \"description\": \"Simulate the robot's movement on the board for each test case to determine the best starting position.\",\n      \"details\": \"For each test case, simulate the robot's movement from different starting positions and track the maximum number of commands executed without the robot tumbling off the board.\"\n    },\n    {\n      \"description\": \"Determine the best initial spot for the robot for each test case.\",\n      \"details\": \"Identify the starting position (r, c) that allows the robot to execute the maximum number of commands without going out of bounds.\"\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": \"For each test case, print the coordinates (r, c) of the best starting position.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the integer t from the input, representing the number of test cases.\",\n    \"For each test case, perform the following steps:\",\n    \"  a. Read the integers n and m, representing the dimensions of the board.\",\n    \"  b. Read the command sequence s.\",\n    \"  c. Initialize variables to track the best starting position and the maximum number of commands executed.\",\n    \"  d. Iterate over all possible starting positions (r, c) on the board:\",\n    \"     i. Simulate the robot's movement from the starting position using the command sequence s.\",\n    \"     ii. Track the number of commands executed before the robot goes out of bounds.\",\n    \"     iii. Update the best starting position if the current position allows more commands to be executed.\",\n    \"  e. Store the best starting position for the current test case.\",\n    \"Output the best starting position for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def find_best_starting_position(n, m, s):\n    # Initialize the boundaries\n    min_row, max_row = 0, 0\n    min_col, max_col = 0, 0\n    \n    # Current position\n    current_row, current_col = 0, 0\n    \n    # Simulate the movement\n    for command in s:\n        if command == 'L':\n            current_col -= 1\n        elif command == 'R':\n            current_col += 1\n        elif command == 'U':\n            current_row -= 1\n        elif command == 'D':\n            current_row += 1\n        \n        # Update boundaries\n        min_row = min(min_row, current_row)\n        max_row = max(max_row, current_row)\n        min_col = min(min_col, current_col)\n        max_col = max(max_col, current_col)\n    \n    # Calculate the best starting position\n    best_row = 1 - min_row\n    best_col = 1 - min_col\n    \n    # Ensure the starting position is within the board\n    if best_row + max_row >= n:\n        best_row = n - max_row\n    if best_col + max_col >= m:\n        best_col = m - max_col\n    \n    return best_row, best_col\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        s = data[index]\n        index += 1\n        \n        r, c = find_best_starting_position(n, m, s)\n        results.append(f\"{r} {c}\")\n    \n    print(\"\\n\".join(results))\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t, which represents the number of test cases.\",\n        \"For each test case, read the integers n and m, which represent the dimensions of the board.\",\n        \"Read the string s, which represents the sequence of commands.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the robot's movement to determine the best starting position.\",\n      \"steps\": [\n        \"Initialize variables to track the robot's current position and the boundaries of the board.\",\n        \"Iterate over each command in the string s and update the robot's position accordingly.\",\n        \"Check if the robot's position after each command is within the board's boundaries.\",\n        \"Track the maximum number of commands that can be executed without the robot tumbling off the board.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the best initial spot for the robot.\",\n      \"steps\": [\n        \"For each possible starting position on the board, simulate the robot's movement using the command sequence s.\",\n        \"Calculate the number of commands that can be executed from each starting position without the robot tumbling off the board.\",\n        \"Identify the starting position that allows the maximum number of commands to be executed.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"For each test case, output the coordinates of the best starting position found.\",\n        \"Ensure the output format matches the specified requirements.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, simulate the robot's movement from all possible starting positions on the board.\",\n    \"Determine the starting position that allows the maximum number of commands to be executed without the robot tumbling off the board.\",\n    \"Output the coordinates of the best starting position for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def find_best_starting_position(n, m, s):\n    # Initialize variables to track the robot's position\n    min_row, max_row, min_col, max_col = 0, 0, 0, 0\n    current_row, current_col = 0, 0\n\n    # Iterate over each command in the string s\n    for command in s:\n        if command == 'L':\n            current_col -= 1\n        elif command == 'R':\n            current_col += 1\n        elif command == 'U':\n            current_row -= 1\n        elif command == 'D':\n            current_row += 1\n\n        # Update the boundaries\n        min_row = min(min_row, current_row)\n        max_row = max(max_row, current_row)\n        min_col = min(min_col, current_col)\n        max_col = max(max_col, current_col)\n\n    # Calculate the best starting position\n    best_row = 1 - min_row\n    best_col = 1 - min_col\n\n    # Ensure the starting position is within the board's boundaries\n    if best_row + max_row >= n:\n        best_row = n - max_row\n    if best_col + max_col >= m:\n        best_col = m - max_col\n\n    return best_row, best_col\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m = map(int, data[index].split())\n        s = data[index + 1]\n        index += 2\n\n        # Find the best starting position for this test case\n        best_row, best_col = find_best_starting_position(n, m, s)\n        results.append(f\"{best_row} {best_col}\")\n\n    # Output the results for each test case\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, dimensions of the field, and command sequences.\",\n      \"steps\": [\n        \"Read the integer t from the first line, representing the number of test cases.\",\n        \"For each test case, read the integers n and m, representing the height and width of the field.\",\n        \"Read the string s, representing the sequence of commands.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the best initial spot for the robot to start executing the command sequence without tumbling off the board.\",\n      \"steps\": [\n        \"Simulate the robot's movement from each possible starting position on the board.\",\n        \"Track the robot's position and ensure it remains within the boundaries of the field.\",\n        \"Identify the starting position that allows the robot to execute the maximum number of commands without going out of bounds.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"For each test case, output the coordinates of the best starting position found.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a loop to process each test case.\",\n    \"For each test case, parse the dimensions of the field and the command sequence.\",\n    \"Iterate over all possible starting positions on the field.\",\n    \"Simulate the robot's movement from each starting position, tracking its position and ensuring it remains within bounds.\",\n    \"Determine the starting position that allows the maximum number of commands to be executed without going out of bounds.\",\n    \"Store the result for each test case.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```", "Round_0": {"code": "def find_best_starting_position(n, m, s):\n    # Initialize the minimum and maximum boundaries\n    min_row, max_row = 0, 0\n    min_col, max_col = 0, 0\n    \n    # Current position\n    current_row, current_col = 0, 0\n    \n    # Traverse the command sequence\n    for command in s:\n        if command == 'L':\n            current_col -= 1\n        elif command == 'R':\n            current_col += 1\n        elif command == 'U':\n            current_row -= 1\n        elif command == 'D':\n            current_row += 1\n        \n        # Update the boundaries\n        min_row = min(min_row, current_row)\n        max_row = max(max_row, current_row)\n        min_col = min(min_col, current_col)\n        max_col = max(max_col, current_col)\n    \n    # Calculate the best starting position\n    best_row = 1 - min_row\n    best_col = 1 - min_col\n    \n    # Ensure the starting position is within the field\n    if best_row + max_row >= n:\n        best_row = n - max_row\n    if best_col + max_col >= m:\n        best_col = m - max_col\n    \n    return best_row, best_col\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        s = data[index + 2]\n        index += 3\n        \n        r, c = find_best_starting_position(n, m, s)\n        results.append(f\"{r} {c}\")\n    \n    # Print all results for each test case\n    print(\"\\n\".join(results))\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, dimensions of the field, and command sequences.\",\n      \"steps\": [\n        \"Read the integer t from the first line, representing the number of test cases.\",\n        \"For each test case, read the integers n and m, representing the height and width of the field.\",\n        \"Read the string s, representing the sequence of commands.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the best initial spot for the robot to start executing the command sequence without tumbling off the board.\",\n      \"steps\": [\n        \"Simulate the robot's movement from each possible starting position on the board.\",\n        \"Track the robot's position and ensure it remains within the boundaries of the field.\",\n        \"Identify the starting position that allows the robot to execute the maximum number of commands without going out of bounds.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"For each test case, output the coordinates of the best starting position found.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a loop to process each test case.\",\n    \"For each test case, parse the dimensions of the field and the command sequence.\",\n    \"Iterate over all possible starting positions on the field.\",\n    \"Simulate the robot's movement from each starting position, tracking its position and ensuring it remains within bounds.\",\n    \"Determine the starting position that allows the maximum number of commands to be executed without going out of bounds.\",\n    \"Store the result for each test case.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```", "Round_0": {"code": "def find_best_starting_position(n, m, s):\n    # Initialize the boundaries\n    min_row, max_row = 0, 0\n    min_col, max_col = 0, 0\n    \n    # Current position\n    current_row, current_col = 0, 0\n    \n    # Simulate the movement\n    for command in s:\n        if command == 'L':\n            current_col -= 1\n        elif command == 'R':\n            current_col += 1\n        elif command == 'U':\n            current_row -= 1\n        elif command == 'D':\n            current_row += 1\n        \n        # Update boundaries\n        min_row = min(min_row, current_row)\n        max_row = max(max_row, current_row)\n        min_col = min(min_col, current_col)\n        max_col = max(max_col, current_col)\n    \n    # Calculate the best starting position\n    start_row = 1 - min_row\n    start_col = 1 - min_col\n    \n    # Ensure the starting position is within the field\n    if start_row + max_row <= n and start_col + max_col <= m:\n        return start_row, start_col\n    else:\n        return None\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        s = data[index]\n        index += 1\n        \n        result = find_best_starting_position(n, m, s)\n        if result:\n            results.append(f\"{result[0]} {result[1]}\")\n    \n    # Output results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, dimensions of the field, and command sequences.\",\n      \"details\": [\n        \"Read the integer t from the first line, which represents the number of test cases.\",\n        \"For each test case, read two integers n and m representing the dimensions of the field.\",\n        \"Read the string s representing the sequence of commands.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the robot's movement to determine the best starting position.\",\n      \"details\": [\n        \"Initialize variables to track the robot's position and boundaries.\",\n        \"Iterate over each command in the sequence s and update the robot's position accordingly.\",\n        \"Check if the robot's position approaches the boundary of the field.\",\n        \"Determine the best initial position that allows the robot to execute the maximum number of commands without crossing the boundary.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": [\n        \"For each test case, output the coordinates of the best starting position found.\",\n        \"Ensure the output format matches the requirement: two integers separated by a space.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read and parse the input data to extract the number of test cases, field dimensions, and command sequences.\",\n    \"For each test case, simulate the robot's movement based on the command sequence.\",\n    \"Track the robot's position and ensure it does not cross the field's boundaries.\",\n    \"Identify the best starting position that maximizes the number of executable commands.\",\n    \"Output the coordinates of the best starting position for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def find_best_starting_position(n, m, s):\n    # Initialize variables to track the robot's position and boundaries\n    min_row, max_row, min_col, max_col = 0, 0, 0, 0\n    current_row, current_col = 0, 0\n\n    # Iterate over each command in the sequence s\n    for command in s:\n        if command == 'L':\n            current_col -= 1\n        elif command == 'R':\n            current_col += 1\n        elif command == 'U':\n            current_row -= 1\n        elif command == 'D':\n            current_row += 1\n\n        # Update boundaries\n        min_row = min(min_row, current_row)\n        max_row = max(max_row, current_row)\n        min_col = min(min_col, current_col)\n        max_col = max(max_col, current_col)\n\n    # Determine the best initial position\n    best_row = 1 - min_row\n    best_col = 1 - min_col\n\n    # Ensure the position is within the field boundaries\n    if best_row + max_row <= n and best_col + max_col <= m:\n        return best_row, best_col\n    else:\n        return None\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n\n    results = []\n\n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        s = data[index]\n        index += 1\n\n        result = find_best_starting_position(n, m, s)\n        if result:\n            results.append(f\"{result[0]} {result[1]}\")\n\n    # Output the results for each test case\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [false, false, false, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": false, "pass": false, "pass_num": 6, "round": 575, "prompt": "The robot must identify a best initial spot that enhances the carrying out of the command sequence s without tumbling off the board's boundary. Consider edge scenarios where the sequence s involves movements that continuously approach the board's boundary.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "mutate_method": "add_1_sentence_at_end", "save_node": true, "parent_index": 154}
