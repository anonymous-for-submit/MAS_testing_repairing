{"name": "1622_B. Berland Music", "description": "Berland Music is a music streaming service built specifically to support Berland local artist. Its developers are currently working on a song recommendation module.\n\nSo imagine Monocarp got recommended n songs, numbered from 1 to n. The i-th song had its predicted rating equal to p_i, where 1 \u2264 p_i \u2264 n and every integer from 1 to n appears exactly once. In other words, p is a permutation.\n\nAfter listening to each of them, Monocarp pressed either a like or a dislike button. Let his vote sequence be represented with a string s, such that s_i=0 means that he disliked the i-th song, and s_i=1 means that he liked it.\n\nNow the service has to re-evaluate the song ratings in such a way that:\n\n  * the new ratings q_1, q_2, ..., q_n still form a permutation (1 \u2264 q_i \u2264 n; each integer from 1 to n appears exactly once); \n  * every song that Monocarp liked should have a greater rating than every song that Monocarp disliked (formally, for all i, j such that s_i=1 and s_j=0, q_i>q_j should hold). \n\n\n\nAmong all valid permutations q find the one that has the smallest value of \u2211_{i=1}^n |p_i-q_i|, where |x| is an absolute value of x.\n\nPrint the permutation q_1, q_2, ..., q_n. If there are multiple answers, you can print any of them.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of songs.\n\nThe second line of each testcase contains n integers p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n) \u2014 the permutation of the predicted ratings.\n\nThe third line contains a single string s, consisting of n characters. Each character is either a 0 or a 1. 0 means that Monocarp disliked the song, and 1 means that he liked it.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase, print a permutation q \u2014 the re-evaluated ratings of the songs. If there are multiple answers such that \u2211_{i=1}^n |p_i-q_i| is minimum possible, you can print any of them.\n\nExample\n\nInput\n\n\n3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110001\n\n\nOutput\n\n\n2 1\n3 1 2\n1 6 5 8 3 2 4 7\n\nNote\n\nIn the first testcase, there exists only one permutation q such that each liked song is rating higher than each disliked song: song 1 gets rating 2 and song 2 gets rating 1. \u2211_{i=1}^n |p_i-q_i|=|1-2|+|2-1|=2.\n\nIn the second testcase, Monocarp liked all songs, so all permutations could work. The permutation with the minimum sum of absolute differences is the permutation equal to p. Its cost is 0.", "tags": ["data structures", "greedy", "math", "sortings"], "difficulty": 8, "id": 1622, "sample_io": [{"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n3 1 2\n1 6 5 8 3 2 4 7\n"]}], "test_list": [{"input": "1\n7\n1 2 3 4 5 6 7\n0101010\n", "output": ["1 5 2 6 3 7 4\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101010\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n1 5 2 6 3 7 4\n1 6 5 8 3 2 4 7\n"]}, {"input": "1\n50\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n10101010101010101010101010101010101010101010101010\n", "output": ["26 1 27 2 28 3 29 4 30 5 31 6 32 7 33 8 34 9 35 10 36 11 37 12 38 13 39 14 40 15 41 16 42 17 43 18 44 19 45 20 46 21 47 22 48 23 49 24 50 25\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101000\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n1 6 2 7 3 4 5\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101001\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n1 5 2 6 3 4 7\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n11110001\n", "output": ["2 1\n3 1 2\n5 6 4 8 2 1 3 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n11110101\n", "output": ["2 1\n3 1 2\n4 5 3 8 1 6 2 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110101\n", "output": ["2 1\n3 1 2\n1 5 4 8 2 6 3 7\n"]}, {"input": "1\n7\n1 2 3 4 5 6 7\n1101010\n", "output": ["4 5 1 6 2 7 3\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101010\n8\n2 3 1 8 5 4 7 6\n00110001\n", "output": ["2 1\n1 5 2 6 3 7 4\n1 2 6 8 4 3 5 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110100\n", "output": ["2 1\n3 1 2\n1 6 5 8 2 7 4 3\n"]}, {"input": "1\n7\n1 2 3 4 5 6 7\n1101000\n", "output": ["5 6 1 7 2 3 4\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101010\n8\n2 3 1 8 5 4 7 6\n00010001\n", "output": ["2 1\n1 5 2 6 3 7 4\n2 3 1 8 5 4 6 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101000\n8\n2 3 1 8 5 4 7 6\n00010001\n", "output": ["2 1\n1 6 2 7 3 4 5\n2 3 1 8 5 4 6 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101011\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n1 4 2 5 3 6 7\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n11\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110101\n", "output": ["1 2\n3 1 2\n1 5 4 8 2 6 3 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0111010\n8\n2 3 1 8 5 4 7 6\n00110001\n", "output": ["2 1\n1 4 5 6 2 7 3\n1 2 6 8 4 3 5 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n11111001\n", "output": ["2 1\n3 1 2\n4 5 3 8 6 1 2 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n11110111\n", "output": ["2 1\n3 1 2\n3 4 2 8 1 5 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101000\n8\n2 3 1 8 5 4 7 6\n11110001\n", "output": ["2 1\n1 6 2 7 3 4 5\n5 6 4 8 2 1 3 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n011\n8\n2 3 1 8 5 4 7 6\n11110101\n", "output": ["2 1\n1 2 3\n4 5 3 8 1 6 2 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n01110100\n", "output": ["2 1\n3 2 1\n1 6 5 8 2 7 4 3\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n001\n8\n2 3 1 8 5 4 7 6\n11110101\n", "output": ["2 1\n2 1 3\n4 5 3 8 1 6 2 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101000\n8\n2 3 1 8 5 4 7 6\n11110011\n", "output": ["2 1\n1 6 2 7 3 4 5\n4 5 3 8 2 1 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0100010\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n1 6 2 3 4 7 5\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101000\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n1 6 2 7 3 4 5\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01100101\n", "output": ["2 1\n3 1 2\n1 6 5 4 2 7 3 8\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101010\n8\n2 3 1 8 5 4 7 6\n00110011\n", "output": ["2 1\n1 5 2 6 3 7 4\n1 2 5 8 4 3 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n11100101\n", "output": ["2 1\n3 1 2\n5 6 4 3 1 7 2 8\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0111010\n8\n2 3 1 8 5 4 7 6\n00110011\n", "output": ["2 1\n1 4 5 6 2 7 3\n1 2 5 8 4 3 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n01100100\n", "output": ["2 1\n3 2 1\n1 7 6 5 2 8 4 3\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n011\n8\n2 3 1 8 5 4 7 6\n01100101\n", "output": ["2 1\n1 2 3\n1 6 5 4 2 7 3 8\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101001\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n1 5 2 6 3 4 7\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1101001\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n4 5 1 6 2 3 7\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1111001\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n3 4 5 6 1 2 7\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n011\n8\n2 3 1 8 5 4 7 6\n01110100\n", "output": ["2 1\n1 2 3\n1 6 5 8 2 7 4 3\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101101\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n1 4 2 5 6 3 7\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n11010001\n", "output": ["2 1\n3 1 2\n5 6 1 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101010\n8\n2 3 1 8 5 4 7 6\n00010000\n", "output": ["2 1\n1 5 2 6 3 7 4\n2 3 1 8 5 4 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0001000\n8\n2 3 1 8 5 4 7 6\n00010001\n", "output": ["2 1\n1 2 3 7 4 5 6\n2 3 1 8 5 4 6 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101000\n8\n2 3 1 8 5 4 7 6\n11111011\n", "output": ["2 1\n1 6 2 7 3 4 5\n3 4 2 8 5 1 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n11111001\n", "output": ["2 1\n3 2 1\n4 5 3 8 6 1 2 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0111000\n8\n2 3 1 8 5 4 7 6\n11110011\n", "output": ["2 1\n1 5 6 7 2 3 4\n4 5 3 8 2 1 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1111000\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n4 5 6 7 1 2 3\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101000\n8\n2 3 1 8 5 4 7 6\n11111111\n", "output": ["2 1\n1 6 2 7 3 4 5\n2 3 1 8 5 4 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1101000\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n5 6 1 7 2 3 4\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101011\n8\n2 3 1 8 5 4 7 6\n01111001\n", "output": ["2 1\n1 4 2 5 3 6 7\n1 5 4 8 6 2 3 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n11110100\n", "output": ["2 1\n3 2 1\n5 6 4 8 1 7 3 2\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n010\n8\n2 3 1 8 5 4 7 6\n11111001\n", "output": ["2 1\n2 3 1\n4 5 3 8 6 1 2 7\n"]}, {"input": "1\n7\n1 2 3 4 5 6 7\n1001000\n", "output": ["6 1 2 7 3 4 5\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0111010\n8\n2 3 1 8 5 4 7 6\n00100001\n", "output": ["2 1\n1 4 5 6 2 7 3\n1 2 7 6 4 3 5 8\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n010\n8\n2 3 1 8 5 4 7 6\n01110100\n", "output": ["2 1\n2 3 1\n1 6 5 8 2 7 4 3\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101000\n8\n2 3 1 8 5 4 7 6\n01111111\n", "output": ["2 1\n1 6 2 7 3 4 5\n1 3 2 8 5 4 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101010\n8\n2 3 1 8 5 4 7 6\n01111001\n", "output": ["2 1\n1 5 2 6 3 7 4\n1 5 4 8 6 2 3 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n01111001\n", "output": ["2 1\n3 2 1\n1 5 4 8 6 2 3 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0111000\n8\n2 3 1 8 5 4 7 6\n11110111\n", "output": ["2 1\n1 5 6 7 2 3 4\n3 4 2 8 1 5 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1101000\n8\n2 3 1 8 5 4 7 6\n11010010\n", "output": ["2 1\n5 6 1 7 2 3 4\n5 6 1 8 3 2 7 4\n"]}, {"input": "3\n2\n2 1\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n3 1 2\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1111010\n8\n2 3 1 8 5 4 7 6\n00110001\n", "output": ["2 1\n3 4 5 6 1 7 2\n1 2 6 8 4 3 5 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1111100\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n3 4 5 6 7 1 2\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101000\n8\n2 3 1 8 5 4 7 6\n01110111\n", "output": ["2 1\n1 6 2 7 3 4 5\n1 4 3 8 2 5 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n01111101\n", "output": ["2 1\n3 2 1\n1 4 3 8 6 5 2 7\n"]}, {"input": "3\n2\n1 2\n11\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01100101\n", "output": ["1 2\n3 1 2\n1 6 5 4 2 7 3 8\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1111101\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n2 3 4 5 6 1 7\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101010\n8\n2 3 1 8 5 4 7 6\n10010000\n", "output": ["2 1\n1 5 2 6 3 7 4\n7 2 1 8 4 3 6 5\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0110000\n8\n2 3 1 8 5 4 7 6\n11110011\n", "output": ["2 1\n1 6 7 2 3 4 5\n4 5 3 8 2 1 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n001\n8\n2 3 1 8 5 4 7 6\n01100101\n", "output": ["2 1\n2 1 3\n1 6 5 4 2 7 3 8\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101110\n8\n2 3 1 8 5 4 7 6\n01111001\n", "output": ["2 1\n1 4 2 5 6 7 3\n1 5 4 8 6 2 3 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101110\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n1 4 2 5 6 7 3\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0001010\n8\n2 3 1 8 5 4 7 6\n00010001\n", "output": ["2 1\n1 2 3 6 4 7 5\n2 3 1 8 5 4 6 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n010\n8\n2 3 1 8 5 4 7 6\n11110101\n", "output": ["2 1\n2 3 1\n4 5 3 8 1 6 2 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n01110110\n", "output": ["2 1\n3 2 1\n1 5 4 8 2 6 7 3\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1101000\n8\n2 3 1 8 5 4 7 6\n10010011\n", "output": ["2 1\n5 6 1 7 2 3 4\n5 2 1 8 4 3 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n3 2 1\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n101\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n3 1 2\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n00110001\n", "output": ["2 1\n3 2 1\n1 2 6 8 4 3 5 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n011\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n1 2 3\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0100001\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n1 6 2 3 4 5 7\n1 6 5 8 3 2 4 7\n"]}, {"input": "1\n7\n1 2 3 4 5 6 7\n1100010\n", "output": ["5 6 1 2 3 7 4\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0111010\n8\n2 3 1 8 5 4 7 6\n00110111\n", "output": ["2 1\n1 4 5 6 2 7 3\n1 2 4 8 3 5 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1111000\n8\n2 3 1 8 5 4 7 6\n11000011\n", "output": ["2 1\n4 5 6 7 1 2 3\n5 6 1 4 3 2 8 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101011\n8\n2 3 1 8 5 4 7 6\n10010000\n", "output": ["2 1\n1 4 2 5 3 6 7\n7 2 1 8 4 3 6 5\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1101110\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n3 4 1 5 6 7 2\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n11110110\n", "output": ["2 1\n3 2 1\n4 5 3 8 1 6 7 2\n"]}, {"input": "3\n2\n1 2\n11\n3\n3 1 2\n101\n8\n2 3 1 8 5 4 7 6\n11100101\n", "output": ["1 2\n3 1 2\n5 6 4 3 1 7 2 8\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1111100\n8\n2 3 1 8 5 4 7 6\n11000011\n", "output": ["2 1\n3 4 5 6 7 1 2\n5 6 1 4 3 2 8 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101011\n8\n2 3 1 8 5 4 7 6\n01100001\n", "output": ["2 1\n1 4 2 5 3 6 7\n1 7 6 5 3 2 4 8\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0100000\n8\n2 3 1 8 5 4 7 6\n11110011\n", "output": ["2 1\n1 7 2 3 4 5 6\n4 5 3 8 2 1 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101001\n8\n2 3 1 8 5 4 7 6\n11011011\n", "output": ["2 1\n1 5 2 6 3 4 7\n3 4 1 8 5 2 7 6\n"]}, {"input": "3\n2\n1 2\n11\n3\n3 1 2\n101\n8\n2 3 1 8 5 4 7 6\n01110101\n", "output": ["1 2\n3 1 2\n1 5 4 8 2 6 3 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n101\n8\n2 3 1 8 5 4 7 6\n01100101\n", "output": ["2 1\n3 1 2\n1 6 5 4 2 7 3 8\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n000\n8\n2 3 1 8 5 4 7 6\n11111001\n", "output": ["2 1\n3 1 2\n4 5 3 8 6 1 2 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n101\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n3 1 2\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n101\n8\n2 3 1 8 5 4 7 6\n11010001\n", "output": ["2 1\n3 1 2\n5 6 1 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n11\n3\n3 1 2\n101\n8\n2 3 1 8 5 4 7 6\n01100101\n", "output": ["1 2\n3 1 2\n1 6 5 4 2 7 3 8\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n000\n8\n2 3 1 8 5 4 7 6\n11110101\n", "output": ["2 1\n3 1 2\n4 5 3 8 1 6 2 7\n"]}], "task_id": "codecontest/155", "repair_prompt": ["Berland Music is a music streaming service built specifically to support Berland local artist, and its developers are presently focusing on a module for song recommendations. So imagine Monocarp got recommended n songs, numbered from 1 to n, and the i-th song had its predicted rating equal to p_i, where 1 \u2264 p_i \u2264 n and every integer from 1 to n appears exactly once; in other words, p is a permutation.\n\nAfter listening to each of them, Monocarp pressed either a like or a dislike button. Let his vote sequence be represented with a string s, such that s_i=0 means that he disliked the i-th song, and s_i=1 means that he liked it.\n\nNow the service has to re-evaluate the song ratings in such a way that:\n\n  * the new ratings q_1, q_2, ..., q_n still form a permutation (1 \u2264 q_i \u2264 n; each integer from 1 to n appears exactly once); \n  * every song that Monocarp liked should have a greater rating than every song that Monocarp disliked (formally, for all i, j such that s_i=1 and s_j=0, q_i>q_j should hold). \n\nAmong all valid permutations q find the one that has the smallest value of \u2211_{i=1}^n |p_i-q_i|, where |x| is an absolute value of x.\n\nPrint the permutation q_1, q_2, ..., q_n. If there are multiple answers, you can print any of them.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of songs.\n\nThe second line of each testcase contains n integers p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n) \u2014 the permutation of the predicted ratings.\n\nThe third line contains a single string s, consisting of n characters. Each character is either a 0 or a 1. 0 means that Monocarp disliked the song, and 1 means that he liked it.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase, print a permutation q \u2014 the re-evaluated ratings of the songs. If there are multiple answers such that \u2211_{i=1}^n |p_i-q_i| is minimum possible, you can print any of them.\n\nExample\n\nInput\n\n\n3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110001\n\n\nOutput\n\n\n2 1\n3 1 2\n1 6 5 8 3 2 4 7\n\nNote\n\nIn the first testcase, there exists only one permutation q such that each liked song is rating higher than each disliked song: song 1 gets rating 2 and song 2 gets rating 1. \u2211_{i=1}^n |p_i-q_i|=|1-2|+|2-1|=2.\n\nIn the second testcase, Monocarp liked all songs, so all permutations could work. The permutation with the minimum sum of absolute differences is the permutation equal to p. Its cost is 0.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        p = list(map(int, data[index:index + n]))\n        index += n\n        s = data[index]\n        index += 1\n        \n        liked_songs = []\n        disliked_songs = []\n        \n        for i in range(n):\n            if s[i] == '1':\n                liked_songs.append(p[i])\n            else:\n                disliked_songs.append(p[i])\n        \n        liked_songs.sort()\n        disliked_songs.sort()\n        \n        q = [0] * n\n        liked_index = n - len(liked_songs)\n        disliked_index = 0\n        \n        for i in range(n):\n            if s[i] == '1':\n                q[i] = liked_songs.pop(0)\n            else:\n                q[i] = disliked_songs.pop(0)\n        \n        results.append(' '.join(map(str, q)))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        p = list(map(int, data[index:index + n]))\n        index += n\n        s = data[index]\n        index += 1\n        \n        liked_songs = []\n        disliked_songs = []\n        \n        for i in range(n):\n            if s[i] == '1':\n                liked_songs.append(p[i])\n            else:\n                disliked_songs.append(p[i])\n        \n        liked_songs.sort()\n        disliked_songs.sort()\n        \n        q = [0] * n\n        current_rating = 1\n        \n        for rating in disliked_songs:\n            q[p.index(rating)] = current_rating\n            current_rating += 1\n        \n        for rating in liked_songs:\n            q[p.index(rating)] = current_rating\n            current_rating += 1\n        \n        results.append(' '.join(map(str, q)))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        p = list(map(int, data[index:index + n]))\n        index += n\n        s = data[index]\n        index += 1\n        \n        liked_songs = []\n        disliked_songs = []\n        \n        for i in range(n):\n            if s[i] == '1':\n                liked_songs.append((p[i], i))\n            else:\n                disliked_songs.append((p[i], i))\n        \n        liked_songs.sort()\n        disliked_songs.sort()\n        \n        q = [0] * n\n        current_rating = 1\n        \n        for _, idx in disliked_songs:\n            q[idx] = current_rating\n            current_rating += 1\n        \n        for _, idx in liked_songs:\n            q[idx] = current_rating\n            current_rating += 1\n        \n        results.append(' '.join(map(str, q)))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        p = list(map(int, data[index:index + n]))\n        index += n\n        s = data[index]\n        index += 1\n        \n        liked_songs = []\n        disliked_songs = []\n        \n        for i in range(n):\n            if s[i] == '1':\n                liked_songs.append((p[i], i))\n            else:\n                disliked_songs.append((p[i], i))\n        \n        liked_songs.sort()\n        disliked_songs.sort()\n        \n        q = [0] * n\n        current_rating = 1\n        \n        for _, i in disliked_songs:\n            q[i] = current_rating\n            current_rating += 1\n        \n        for _, i in liked_songs:\n            q[i] = current_rating\n            current_rating += 1\n        \n        results.append(' '.join(map(str, q)))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        p = list(map(int, data[index:index + n]))\n        index += n\n        s = data[index]\n        index += 1\n        \n        liked_songs = []\n        disliked_songs = []\n        \n        for i in range(n):\n            if s[i] == '1':\n                liked_songs.append((p[i], i))\n            else:\n                disliked_songs.append((p[i], i))\n        \n        liked_songs.sort()\n        disliked_songs.sort()\n        \n        q = [0] * n\n        current_rating = 1\n        \n        for _, idx in disliked_songs:\n            q[idx] = current_rating\n            current_rating += 1\n        \n        for _, idx in liked_songs:\n            q[idx] = current_rating\n            current_rating += 1\n        \n        results.append(' '.join(map(str, q)))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        p = list(map(int, data[index:index + n]))\n        index += n\n        s = data[index]\n        index += 1\n        \n        liked_songs = []\n        disliked_songs = []\n        \n        for i in range(n):\n            if s[i] == '1':\n                liked_songs.append(p[i])\n            else:\n                disliked_songs.append(p[i])\n        \n        liked_songs.sort()\n        disliked_songs.sort()\n        \n        q = [0] * n\n        liked_index = 0\n        disliked_index = 0\n        \n        for i in range(1, n + 1):\n            if disliked_index < len(disliked_songs) and disliked_songs[disliked_index] == i:\n                disliked_index += 1\n            else:\n                liked_index += 1\n        \n        liked_ratings = list(range(n - liked_index + 1, n + 1))\n        disliked_ratings = list(range(1, n - liked_index + 1))\n        \n        liked_index = 0\n        disliked_index = 0\n        \n        for i in range(n):\n            if s[i] == '1':\n                q[i] = liked_ratings[liked_index]\n                liked_index += 1\n            else:\n                q[i] = disliked_ratings[disliked_index]\n                disliked_index += 1\n        \n        results.append(' '.join(map(str, q)))\n    \n    sys.stdout.write('\\n'.join(results) + '\\n')\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        p = list(map(int, data[index:index + n]))\n        index += n\n        s = data[index]\n        index += 1\n        \n        liked_songs = []\n        disliked_songs = []\n        \n        for i in range(n):\n            if s[i] == '1':\n                liked_songs.append((p[i], i))\n            else:\n                disliked_songs.append((p[i], i))\n        \n        liked_songs.sort()\n        disliked_songs.sort()\n        \n        q = [0] * n\n        current_rating = 1\n        \n        for _, idx in disliked_songs:\n            q[idx] = current_rating\n            current_rating += 1\n        \n        for _, idx in liked_songs:\n            q[idx] = current_rating\n            current_rating += 1\n        \n        results.append(' '.join(map(str, q)))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        p = list(map(int, data[index:index + n]))\n        index += n\n        s = data[index]\n        index += 1\n        \n        liked_songs = []\n        disliked_songs = []\n        \n        for i in range(n):\n            if s[i] == '1':\n                liked_songs.append(p[i])\n            else:\n                disliked_songs.append(p[i])\n        \n        liked_songs.sort()\n        disliked_songs.sort()\n        \n        q = [0] * n\n        liked_index = 0\n        disliked_index = 0\n        \n        for i in range(n):\n            if s[i] == '1':\n                q[i] = liked_songs[liked_index]\n                liked_index += 1\n            else:\n                q[i] = disliked_songs[disliked_index]\n                disliked_index += 1\n        \n        results.append(' '.join(map(str, q)))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        p = list(map(int, data[index:index + n]))\n        index += n\n        s = data[index]\n        index += 1\n        \n        liked = []\n        disliked = []\n        \n        for i in range(n):\n            if s[i] == '1':\n                liked.append((p[i], i))\n            else:\n                disliked.append((p[i], i))\n        \n        liked.sort(reverse=True)\n        disliked.sort()\n        \n        q = [0] * n\n        current_rating = n\n        \n        for _, i in liked:\n            q[i] = current_rating\n            current_rating -= 1\n        \n        for _, i in disliked:\n            q[i] = current_rating\n            current_rating -= 1\n        \n        results.append(' '.join(map(str, q)))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        p = list(map(int, data[index:index + n]))\n        index += n\n        s = data[index]\n        index += 1\n        \n        liked_songs = []\n        disliked_songs = []\n        \n        for i in range(n):\n            if s[i] == '1':\n                liked_songs.append(p[i])\n            else:\n                disliked_songs.append(p[i])\n        \n        liked_songs.sort()\n        disliked_songs.sort()\n        \n        q = [0] * n\n        liked_index = len(disliked_songs) + 1\n        disliked_index = 1\n        \n        for i in range(n):\n            if s[i] == '1':\n                q[i] = liked_index\n                liked_index += 1\n            else:\n                q[i] = disliked_index\n                disliked_index += 1\n        \n        results.append(' '.join(map(str, q)))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        p = list(map(int, data[index:index + n]))\n        index += n\n        s = data[index]\n        index += 1\n        \n        liked_songs = []\n        disliked_songs = []\n        \n        for i in range(n):\n            if s[i] == '1':\n                liked_songs.append(p[i])\n            else:\n                disliked_songs.append(p[i])\n        \n        liked_songs.sort()\n        disliked_songs.sort()\n        \n        q = [0] * n\n        liked_index = n - len(liked_songs)\n        disliked_index = 0\n        \n        for i in range(n):\n            if s[i] == '1':\n                q[i] = liked_songs.pop(0)\n            else:\n                q[i] = disliked_songs.pop(0)\n        \n        results.append(' '.join(map(str, q)))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, and for each test case, extract the number of songs, the permutation of predicted ratings, and the vote sequence.\",\n      \"steps\": [\n        \"Read the integer t representing the number of test cases.\",\n        \"For each test case, read the integer n representing the number of songs.\",\n        \"Read the list of integers p representing the permutation of predicted ratings.\",\n        \"Read the string s representing the vote sequence.\"\n      ]\n    },\n    {\n      \"description\": \"Separate the songs into liked and disliked categories based on the vote sequence.\",\n      \"steps\": [\n        \"Initialize two lists: liked_songs and disliked_songs.\",\n        \"Iterate over the vote sequence s.\",\n        \"For each index i, if s[i] is '1', add p[i] to liked_songs; if s[i] is '0', add p[i] to disliked_songs.\"\n      ]\n    },\n    {\n      \"description\": \"Re-evaluate the song ratings to form a valid permutation q.\",\n      \"steps\": [\n        \"Sort the liked_songs list in ascending order.\",\n        \"Sort the disliked_songs list in ascending order.\",\n        \"Assign the highest ratings to liked_songs and the lowest ratings to disliked_songs.\",\n        \"Combine the sorted liked_songs and disliked_songs to form the permutation q.\"\n      ]\n    },\n    {\n      \"description\": \"Output the permutation q for each test case.\",\n      \"steps\": [\n        \"For each test case, print the permutation q as a space-separated list of integers.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data for each test case.\",\n    \"For each test case, separate songs into liked and disliked categories based on the vote sequence.\",\n    \"Re-evaluate the song ratings to form a valid permutation q that satisfies the conditions.\",\n    \"Output the permutation q for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        p = list(map(int, data[index:index + n]))\n        index += n\n        s = data[index]\n        index += 1\n        \n        liked_songs = []\n        disliked_songs = []\n        \n        for i in range(n):\n            if s[i] == '1':\n                liked_songs.append(p[i])\n            else:\n                disliked_songs.append(p[i])\n        \n        liked_songs.sort()\n        disliked_songs.sort()\n        \n        q = [0] * n\n        liked_index = n - len(liked_songs)\n        disliked_index = 0\n        \n        for i in range(n):\n            if s[i] == '1':\n                q[i] = liked_songs.pop(0)\n            else:\n                q[i] = disliked_songs.pop(0)\n        \n        results.append(' '.join(map(str, q)))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, and for each test case, extract the number of songs, the permutation of predicted ratings, and the vote sequence.\",\n      \"steps\": [\n        \"Read the integer t representing the number of test cases.\",\n        \"For each test case, read the integer n representing the number of songs.\",\n        \"Read the list of integers p representing the permutation of predicted ratings.\",\n        \"Read the string s representing the vote sequence.\"\n      ]\n    },\n    {\n      \"description\": \"Separate the songs into liked and disliked categories based on the vote sequence.\",\n      \"steps\": [\n        \"Initialize two lists: liked_songs and disliked_songs.\",\n        \"Iterate over the vote sequence s.\",\n        \"If s[i] is '1', add the corresponding predicted rating p[i] to liked_songs.\",\n        \"If s[i] is '0', add the corresponding predicted rating p[i] to disliked_songs.\"\n      ]\n    },\n    {\n      \"description\": \"Re-evaluate the song ratings to form a valid permutation q that satisfies the conditions.\",\n      \"steps\": [\n        \"Sort the liked_songs list in ascending order.\",\n        \"Sort the disliked_songs list in ascending order.\",\n        \"Assign the highest ratings to liked_songs and the lowest ratings to disliked_songs.\",\n        \"Combine the two lists to form the permutation q.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the permutation q for each test case and output the result.\",\n      \"steps\": [\n        \"For each test case, construct the permutation q using the sorted liked_songs and disliked_songs.\",\n        \"Output the permutation q for each test case.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the necessary data for each test case.\",\n    \"For each test case, separate the songs into liked and disliked categories based on the vote sequence.\",\n    \"Sort the liked and disliked songs to determine their new ratings.\",\n    \"Construct the permutation q by assigning higher ratings to liked songs and lower ratings to disliked songs.\",\n    \"Output the permutation q for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        p = list(map(int, data[index:index + n]))\n        index += n\n        s = data[index]\n        index += 1\n        \n        liked_songs = []\n        disliked_songs = []\n        \n        for i in range(n):\n            if s[i] == '1':\n                liked_songs.append(p[i])\n            else:\n                disliked_songs.append(p[i])\n        \n        liked_songs.sort()\n        disliked_songs.sort()\n        \n        q = [0] * n\n        current_rating = 1\n        \n        for rating in disliked_songs:\n            q[p.index(rating)] = current_rating\n            current_rating += 1\n        \n        for rating in liked_songs:\n            q[p.index(rating)] = current_rating\n            current_rating += 1\n        \n        results.append(' '.join(map(str, q)))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and for each test case, extract the number of songs, the permutation of predicted ratings, and the vote sequence.\",\n      \"steps\": [\n        \"Read the integer t, the number of test cases.\",\n        \"For each test case, read the integer n, the number of songs.\",\n        \"Read the list of integers p, representing the permutation of predicted ratings.\",\n        \"Read the string s, representing the vote sequence.\"\n      ]\n    },\n    {\n      \"description\": \"Separate the songs into two groups based on the vote sequence: liked and disliked.\",\n      \"steps\": [\n        \"Initialize two lists: liked_songs and disliked_songs.\",\n        \"Iterate over the vote sequence s.\",\n        \"For each song i, if s[i] is '1', add (p[i], i) to liked_songs; if s[i] is '0', add (p[i], i) to disliked_songs.\"\n      ]\n    },\n    {\n      \"description\": \"Assign new ratings to the songs such that liked songs have higher ratings than disliked songs and the permutation minimizes the sum of absolute differences.\",\n      \"steps\": [\n        \"Sort liked_songs and disliked_songs based on the predicted ratings p.\",\n        \"Assign the highest available ratings to liked_songs and the lowest available ratings to disliked_songs.\",\n        \"Ensure that the new ratings form a valid permutation of numbers from 1 to n.\"\n      ]\n    },\n    {\n      \"description\": \"Output the new permutation of ratings for each test case.\",\n      \"steps\": [\n        \"For each test case, construct the permutation q based on the new ratings assigned to liked and disliked songs.\",\n        \"Print the permutation q for each test case.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and details for each test case.\",\n    \"For each test case, separate the songs into liked and disliked groups based on the vote sequence.\",\n    \"Sort the liked and disliked groups by their predicted ratings.\",\n    \"Assign new ratings to ensure liked songs have higher ratings than disliked songs while minimizing the sum of absolute differences.\",\n    \"Output the new permutation of ratings for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        p = list(map(int, data[index:index + n]))\n        index += n\n        s = data[index]\n        index += 1\n        \n        liked_songs = []\n        disliked_songs = []\n        \n        for i in range(n):\n            if s[i] == '1':\n                liked_songs.append((p[i], i))\n            else:\n                disliked_songs.append((p[i], i))\n        \n        liked_songs.sort()\n        disliked_songs.sort()\n        \n        q = [0] * n\n        current_rating = 1\n        \n        for _, idx in disliked_songs:\n            q[idx] = current_rating\n            current_rating += 1\n        \n        for _, idx in liked_songs:\n            q[idx] = current_rating\n            current_rating += 1\n        \n        results.append(' '.join(map(str, q)))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and for each test case, extract the number of songs, the permutation of predicted ratings, and the vote sequence.\",\n      \"steps\": [\n        \"Read the integer t, the number of test cases.\",\n        \"For each test case, read the integer n, the number of songs.\",\n        \"Read the permutation of predicted ratings p as a list of integers.\",\n        \"Read the vote sequence s as a string.\"\n      ]\n    },\n    {\n      \"description\": \"Separate the songs into two groups based on the vote sequence: liked and disliked.\",\n      \"steps\": [\n        \"Initialize two lists: liked_songs and disliked_songs.\",\n        \"Iterate over the vote sequence s and for each index i:\",\n        \"If s[i] is '1', append the tuple (p[i], i) to liked_songs.\",\n        \"If s[i] is '0', append the tuple (p[i], i) to disliked_songs.\"\n      ]\n    },\n    {\n      \"description\": \"Assign new ratings to the songs such that liked songs have higher ratings than disliked songs and the permutation minimizes the sum of absolute differences.\",\n      \"steps\": [\n        \"Sort liked_songs and disliked_songs based on the predicted ratings.\",\n        \"Assign the smallest available ratings to disliked_songs and the largest available ratings to liked_songs.\",\n        \"Ensure that the new ratings form a valid permutation of numbers from 1 to n.\"\n      ]\n    },\n    {\n      \"description\": \"Output the new permutation for each test case.\",\n      \"steps\": [\n        \"For each test case, construct the new permutation q based on the assigned ratings.\",\n        \"Print the permutation q for each test case.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and details for each test case.\",\n    \"For each test case, separate the songs into liked and disliked groups based on the vote sequence.\",\n    \"Sort the liked and disliked groups by their predicted ratings.\",\n    \"Assign new ratings to ensure liked songs have higher ratings than disliked songs while minimizing the sum of absolute differences.\",\n    \"Output the new permutation for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        p = list(map(int, data[index:index + n]))\n        index += n\n        s = data[index]\n        index += 1\n        \n        liked_songs = []\n        disliked_songs = []\n        \n        for i in range(n):\n            if s[i] == '1':\n                liked_songs.append((p[i], i))\n            else:\n                disliked_songs.append((p[i], i))\n        \n        liked_songs.sort()\n        disliked_songs.sort()\n        \n        q = [0] * n\n        current_rating = 1\n        \n        for _, i in disliked_songs:\n            q[i] = current_rating\n            current_rating += 1\n        \n        for _, i in liked_songs:\n            q[i] = current_rating\n            current_rating += 1\n        \n        results.append(' '.join(map(str, q)))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 97)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        p = list(map(int, data[index:index + n]))\n        index += n\n        s = data[index]\n        index += 1\n        \n        liked_songs = []\n        disliked_songs = []\n        \n        for i in range(n):\n            if s[i] == '1':\n                liked_songs.append((p[i], i))\n            else:\n                disliked_songs.append((p[i], i))\n        \n        liked_songs.sort()\n        disliked_songs.sort()\n        \n        q = [0] * n\n        current_rating = 1\n        \n        for _, i in disliked_songs:\n            q[i] = current_rating\n            current_rating += 1\n        \n        for _, i in liked_songs:\n            q[i] = current_rating\n            current_rating += 1\n        \n        results.append(' '.join(map(str, q)))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, and for each test case, extract the number of songs, the permutation of predicted ratings, and the vote sequence.\",\n      \"steps\": [\n        \"Read the integer t, the number of test cases.\",\n        \"For each test case, read the integer n, the number of songs.\",\n        \"Read the list of integers p, representing the permutation of predicted ratings.\",\n        \"Read the string s, representing the vote sequence.\"\n      ]\n    },\n    {\n      \"description\": \"Separate the songs into two groups based on the vote sequence: liked songs and disliked songs.\",\n      \"steps\": [\n        \"Initialize two lists: liked_songs and disliked_songs.\",\n        \"Iterate over the vote sequence s.\",\n        \"For each song i, if s[i] is '1', add the song's predicted rating p[i] to liked_songs; if s[i] is '0', add it to disliked_songs.\"\n      ]\n    },\n    {\n      \"description\": \"Assign new ratings to the songs such that liked songs have higher ratings than disliked songs, while minimizing the sum of absolute differences.\",\n      \"steps\": [\n        \"Sort the liked_songs list in ascending order.\",\n        \"Sort the disliked_songs list in ascending order.\",\n        \"Assign the smallest available ratings to disliked_songs and the largest available ratings to liked_songs.\"\n      ]\n    },\n    {\n      \"description\": \"Construct the final permutation q for each test case and output the result.\",\n      \"steps\": [\n        \"Initialize an empty list q of size n.\",\n        \"Assign the new ratings to the corresponding positions in q based on the original order of songs.\",\n        \"Output the permutation q for each test case.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, separate the songs into liked and disliked groups based on the vote sequence.\",\n    \"Sort the liked and disliked songs and assign new ratings to ensure liked songs have higher ratings than disliked songs.\",\n    \"Construct the final permutation q for each test case and print the result.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        p = list(map(int, data[index:index + n]))\n        index += n\n        s = data[index]\n        index += 1\n        \n        liked_songs = []\n        disliked_songs = []\n        \n        for i in range(n):\n            if s[i] == '1':\n                liked_songs.append((p[i], i))\n            else:\n                disliked_songs.append((p[i], i))\n        \n        liked_songs.sort()\n        disliked_songs.sort()\n        \n        q = [0] * n\n        current_rating = 1\n        \n        for _, idx in disliked_songs:\n            q[idx] = current_rating\n            current_rating += 1\n        \n        for _, idx in liked_songs:\n            q[idx] = current_rating\n            current_rating += 1\n        \n        results.append(' '.join(map(str, q)))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 96)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        p = list(map(int, data[index:index + n]))\n        index += n\n        s = data[index]\n        index += 1\n        \n        liked_songs = []\n        disliked_songs = []\n        \n        for i in range(n):\n            if s[i] == '1':\n                liked_songs.append((p[i], i))\n            else:\n                disliked_songs.append((p[i], i))\n        \n        liked_songs.sort()\n        disliked_songs.sort()\n        \n        q = [0] * n\n        current_rating = 1\n        \n        for _, idx in disliked_songs:\n            q[idx] = current_rating\n            current_rating += 1\n        \n        for _, idx in liked_songs:\n            q[idx] = current_rating\n            current_rating += 1\n        \n        results.append(' '.join(map(str, q)))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and for each test case, extract the number of songs, the permutation of predicted ratings, and the vote sequence.\",\n      \"steps\": [\n        \"Read the integer t, the number of test cases.\",\n        \"For each test case, read the integer n, the number of songs.\",\n        \"Read the permutation of predicted ratings p as a list of integers.\",\n        \"Read the vote sequence s as a string.\"\n      ]\n    },\n    {\n      \"description\": \"Separate the songs into two groups based on the vote sequence: liked songs and disliked songs.\",\n      \"steps\": [\n        \"Initialize two lists: liked_songs and disliked_songs.\",\n        \"Iterate over the vote sequence s and for each index i, if s[i] is '1', add the corresponding p[i] to liked_songs, otherwise add it to disliked_songs.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the new ratings for the songs such that liked songs have higher ratings than disliked songs and the permutation minimizes the sum of absolute differences.\",\n      \"steps\": [\n        \"Sort the liked_songs list in ascending order.\",\n        \"Sort the disliked_songs list in ascending order.\",\n        \"Assign the highest available ratings to liked_songs and the lowest available ratings to disliked_songs to minimize the sum of absolute differences.\"\n      ]\n    },\n    {\n      \"description\": \"Construct the final permutation q for each test case.\",\n      \"steps\": [\n        \"Initialize an empty list q of size n.\",\n        \"Iterate over the original permutation p and for each element, if it was in liked_songs, assign the next highest rating from the liked_songs ratings to q, otherwise assign the next lowest rating from the disliked_songs ratings to q.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"For each test case, print the permutation q as a space-separated string.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, separate the songs into liked and disliked groups based on the vote sequence.\",\n    \"Sort the liked and disliked songs to prepare for assigning new ratings.\",\n    \"Assign new ratings to ensure liked songs have higher ratings than disliked songs while minimizing", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        p = list(map(int, data[index:index + n]))\n        index += n\n        s = data[index]\n        index += 1\n        \n        liked_songs = []\n        disliked_songs = []\n        \n        for i in range(n):\n            if s[i] == '1':\n                liked_songs.append(p[i])\n            else:\n                disliked_songs.append(p[i])\n        \n        liked_songs.sort()\n        disliked_songs.sort()\n        \n        q = [0] * n\n        liked_index = 0\n        disliked_index = 0\n        \n        for i in range(1, n + 1):\n            if disliked_index < len(disliked_songs) and disliked_songs[disliked_index] == i:\n                disliked_index += 1\n            else:\n                liked_index += 1\n        \n        liked_ratings = list(range(n - liked_index + 1, n + 1))\n        disliked_ratings = list(range(1, n - liked_index + 1))\n        \n        liked_index = 0\n        disliked_index = 0\n        \n        for i in range(n):\n            if s[i] == '1':\n                q[i] = liked_ratings[liked_index]\n                liked_index += 1\n            else:\n                q[i] = disliked_ratings[disliked_index]\n                disliked_index += 1\n        \n        results.append(' '.join(map(str, q)))\n    \n    sys.stdout.write('\\n'.join(results) + '\\n')\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and for each test case, extract the number of songs, the permutation of predicted ratings, and the vote sequence.\",\n      \"steps\": [\n        \"Read the integer t, the number of test cases.\",\n        \"For each test case, read the integer n, the number of songs.\",\n        \"Read the list of integers p, representing the permutation of predicted ratings.\",\n        \"Read the string s, representing the vote sequence.\"\n      ]\n    },\n    {\n      \"description\": \"Separate the songs into two groups based on the vote sequence: liked songs and disliked songs.\",\n      \"steps\": [\n        \"Initialize two lists: liked_songs and disliked_songs.\",\n        \"Iterate over the vote sequence s.\",\n        \"For each song i, if s[i] is '1', add the song's predicted rating p[i] to liked_songs; if s[i] is '0', add it to disliked_songs.\"\n      ]\n    },\n    {\n      \"description\": \"Assign new ratings to the songs such that liked songs have higher ratings than disliked songs while minimizing the sum of absolute differences.\",\n      \"steps\": [\n        \"Sort the liked_songs list in ascending order.\",\n        \"Sort the disliked_songs list in ascending order.\",\n        \"Assign the lowest available ratings to disliked_songs and the highest available ratings to liked_songs.\"\n      ]\n    },\n    {\n      \"description\": \"Construct the final permutation q for each test case and output the result.\",\n      \"steps\": [\n        \"Initialize an empty list q of size n.\",\n        \"Assign the new ratings to the corresponding positions in q based on the original order of songs.\",\n        \"Output the permutation q for each test case.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, separate the songs into liked and disliked groups based on the vote sequence.\",\n    \"Sort the liked and disliked songs and assign new ratings to ensure liked songs have higher ratings than disliked songs.\",\n    \"Construct the final permutation q for each test case and print the result.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        p = list(map(int, data[index:index + n]))\n        index += n\n        s = data[index]\n        index += 1\n        \n        liked_songs = []\n        disliked_songs = []\n        \n        for i in range(n):\n            if s[i] == '1':\n                liked_songs.append((p[i], i))\n            else:\n                disliked_songs.append((p[i], i))\n        \n        liked_songs.sort()\n        disliked_songs.sort()\n        \n        q = [0] * n\n        current_rating = 1\n        \n        for _, idx in disliked_songs:\n            q[idx] = current_rating\n            current_rating += 1\n        \n        for _, idx in liked_songs:\n            q[idx] = current_rating\n            current_rating += 1\n        \n        results.append(' '.join(map(str, q)))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and for each test case, extract the number of songs, the permutation of predicted ratings, and the vote sequence.\",\n      \"steps\": [\n        \"Read the integer t, the number of test cases.\",\n        \"For each test case, read the integer n, the number of songs.\",\n        \"Read the list of integers p, representing the permutation of predicted ratings.\",\n        \"Read the string s, representing the vote sequence.\"\n      ]\n    },\n    {\n      \"description\": \"Separate the songs into two groups based on the vote sequence: liked songs and disliked songs.\",\n      \"steps\": [\n        \"Initialize two lists: liked_songs and disliked_songs.\",\n        \"Iterate over the vote sequence s.\",\n        \"For each song i, if s[i] is '1', add p[i] to liked_songs; if s[i] is '0', add p[i] to disliked_songs.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the new ratings for the songs such that liked songs have higher ratings than disliked songs and the permutation minimizes the sum of absolute differences.\",\n      \"steps\": [\n        \"Sort the liked_songs in ascending order.\",\n        \"Sort the disliked_songs in ascending order.\",\n        \"Assign the highest available ratings to liked_songs and the lowest available ratings to disliked_songs.\"\n      ]\n    },\n    {\n      \"description\": \"Construct the output permutation q for each test case.\",\n      \"steps\": [\n        \"Initialize an empty list q of size n.\",\n        \"Iterate over the original permutation p.\",\n        \"For each index i, if s[i] is '1', assign the next highest rating from liked_songs to q[i]; if s[i] is '0', assign the next lowest rating from disliked_songs to q[i].\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"For each test case, print the permutation q as a space-separated string.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, separate the songs into liked and disliked groups based on the vote sequence.\",\n    \"Sort the liked and disliked songs to prepare for assigning new ratings.\",\n    \"Assign new ratings to", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        p = list(map(int, data[index:index + n]))\n        index += n\n        s = data[index]\n        index += 1\n        \n        liked_songs = []\n        disliked_songs = []\n        \n        for i in range(n):\n            if s[i] == '1':\n                liked_songs.append(p[i])\n            else:\n                disliked_songs.append(p[i])\n        \n        liked_songs.sort()\n        disliked_songs.sort()\n        \n        q = [0] * n\n        liked_index = 0\n        disliked_index = 0\n        \n        for i in range(n):\n            if s[i] == '1':\n                q[i] = liked_songs[liked_index]\n                liked_index += 1\n            else:\n                q[i] = disliked_songs[disliked_index]\n                disliked_index += 1\n        \n        results.append(' '.join(map(str, q)))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and for each test case, extract the number of songs, the permutation of predicted ratings, and the vote sequence.\",\n      \"output\": \"A list of test cases, where each test case contains the number of songs, the permutation of predicted ratings, and the vote sequence.\"\n    },\n    {\n      \"description\": \"For each test case, separate the songs into two groups based on the vote sequence: liked songs and disliked songs.\",\n      \"output\": \"Two lists for each test case: one for liked songs and one for disliked songs, each containing tuples of (predicted rating, index).\"\n    },\n    {\n      \"description\": \"Sort the liked songs in descending order of their predicted ratings and the disliked songs in ascending order of their predicted ratings.\",\n      \"output\": \"Two sorted lists for each test case: liked songs sorted in descending order and disliked songs sorted in ascending order.\"\n    },\n    {\n      \"description\": \"Assign new ratings to the songs such that all liked songs have higher ratings than all disliked songs, while minimizing the sum of absolute differences between predicted and new ratings.\",\n      \"output\": \"A permutation of new ratings for each test case that satisfies the conditions.\"\n    },\n    {\n      \"description\": \"Output the new ratings permutation for each test case.\",\n      \"output\": \"Print the new ratings permutation for each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, read the number of songs, the permutation of predicted ratings, and the vote sequence.\",\n    \"Separate the songs into liked and disliked groups based on the vote sequence.\",\n    \"Sort the liked songs in descending order and the disliked songs in ascending order based on their predicted ratings.\",\n    \"Assign new ratings starting from the highest available rating to the liked songs and the lowest available rating to the disliked songs, ensuring the order constraints are met.\",\n    \"Calculate the permutation of new ratings that minimizes the sum of absolute differences with the predicted ratings.\",\n    \"Print the new ratings permutation for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        p = list(map(int, data[index:index + n]))\n        index += n\n        s = data[index]\n        index += 1\n        \n        liked = []\n        disliked = []\n        \n        for i in range(n):\n            if s[i] == '1':\n                liked.append((p[i], i))\n            else:\n                disliked.append((p[i], i))\n        \n        liked.sort(reverse=True)\n        disliked.sort()\n        \n        q = [0] * n\n        current_rating = n\n        \n        for _, i in liked:\n            q[i] = current_rating\n            current_rating -= 1\n        \n        for _, i in disliked:\n            q[i] = current_rating\n            current_rating -= 1\n        \n        results.append(' '.join(map(str, q)))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and for each test case, extract the number of songs, the permutation of predicted ratings, and the vote sequence.\",\n      \"steps\": [\n        \"Read the integer t, the number of test cases.\",\n        \"For each test case, read the integer n, the number of songs.\",\n        \"Read the permutation of predicted ratings p as a list of integers.\",\n        \"Read the vote sequence s as a string.\"\n      ]\n    },\n    {\n      \"description\": \"Separate the songs into two groups based on the vote sequence: liked songs and disliked songs.\",\n      \"steps\": [\n        \"Initialize two lists: liked_songs and disliked_songs.\",\n        \"Iterate over the vote sequence s and for each index i, if s[i] is '1', append p[i] to liked_songs, otherwise append p[i] to disliked_songs.\"\n      ]\n    },\n    {\n      \"description\": \"Assign new ratings to the songs such that liked songs have higher ratings than disliked songs while minimizing the sum of absolute differences.\",\n      \"steps\": [\n        \"Sort the liked_songs list in ascending order.\",\n        \"Sort the disliked_songs list in ascending order.\",\n        \"Assign the smallest available ratings to disliked_songs and the largest available ratings to liked_songs.\"\n      ]\n    },\n    {\n      \"description\": \"Construct the final permutation q based on the new ratings assigned to liked and disliked songs.\",\n      \"steps\": [\n        \"Initialize an empty list q of size n.\",\n        \"Iterate over the original permutation p and the vote sequence s.\",\n        \"For each index i, if s[i] is '1', assign the next highest rating from liked_songs to q[i], otherwise assign the next lowest rating from disliked_songs to q[i].\"\n      ]\n    },\n    {\n      \"description\": \"Output the final permutation q for each test case.\",\n      \"steps\": [\n        \"For each test case, print the list q as a space-separated string.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, separate the songs into liked and disliked groups based on the vote sequence.\",\n    \"Sort the liked and disliked songs to prepare for assigning new ratings.\",\n    \"Assign new ratings to ensure liked songs have higher", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        p = list(map(int, data[index:index + n]))\n        index += n\n        s = data[index]\n        index += 1\n        \n        liked_songs = []\n        disliked_songs = []\n        \n        for i in range(n):\n            if s[i] == '1':\n                liked_songs.append(p[i])\n            else:\n                disliked_songs.append(p[i])\n        \n        liked_songs.sort()\n        disliked_songs.sort()\n        \n        q = [0] * n\n        liked_index = len(disliked_songs) + 1\n        disliked_index = 1\n        \n        for i in range(n):\n            if s[i] == '1':\n                q[i] = liked_index\n                liked_index += 1\n            else:\n                q[i] = disliked_index\n                disliked_index += 1\n        \n        results.append(' '.join(map(str, q)))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, and for each test case, extract the number of songs, the permutation of predicted ratings, and the vote sequence.\",\n      \"steps\": [\n        \"Read the integer t representing the number of test cases.\",\n        \"For each test case, read the integer n representing the number of songs.\",\n        \"Read the list of integers p representing the permutation of predicted ratings.\",\n        \"Read the string s representing the vote sequence.\"\n      ]\n    },\n    {\n      \"description\": \"Separate the songs into liked and disliked categories based on the vote sequence.\",\n      \"steps\": [\n        \"Initialize two lists: liked_songs and disliked_songs.\",\n        \"Iterate over the vote sequence s.\",\n        \"For each index i, if s[i] is '1', add p[i] to liked_songs; if s[i] is '0', add p[i] to disliked_songs.\"\n      ]\n    },\n    {\n      \"description\": \"Re-evaluate the song ratings to form a valid permutation q.\",\n      \"steps\": [\n        \"Sort the liked_songs list in ascending order.\",\n        \"Sort the disliked_songs list in ascending order.\",\n        \"Assign the highest ratings to liked_songs and the lowest ratings to disliked_songs.\",\n        \"Combine the sorted liked_songs and disliked_songs to form the permutation q.\"\n      ]\n    },\n    {\n      \"description\": \"Output the permutation q for each test case.\",\n      \"steps\": [\n        \"For each test case, print the permutation q as a space-separated list of integers.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data for each test case.\",\n    \"For each test case, separate songs into liked and disliked categories based on the vote sequence.\",\n    \"Re-evaluate the song ratings to form a valid permutation q that satisfies the conditions.\",\n    \"Output the permutation q for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        p = list(map(int, data[index:index + n]))\n        index += n\n        s = data[index]\n        index += 1\n        \n        liked_songs = []\n        disliked_songs = []\n        \n        for i in range(n):\n            if s[i] == '1':\n                liked_songs.append(p[i])\n            else:\n                disliked_songs.append(p[i])\n        \n        liked_songs.sort()\n        disliked_songs.sort()\n        \n        q = [0] * n\n        liked_index = n - len(liked_songs)\n        disliked_index = 0\n        \n        for i in range(n):\n            if s[i] == '1':\n                q[i] = liked_songs.pop(0)\n            else:\n                q[i] = disliked_songs.pop(0)\n        \n        results.append(' '.join(map(str, q)))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [true, true, false, true, false, true, false, false, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 6, "round": 269, "prompt": "Berland Music is a music streaming service built specifically to support Berland local artist, and its developers are presently focusing on a module for song recommendations. So imagine Monocarp got recommended n songs, numbered from 1 to n, and the i-th song had its predicted rating equal to p_i, where 1 \u2264 p_i \u2264 n and every integer from 1 to n appears exactly once; in other words, p is a permutation.\n\nAfter listening to each of them, Monocarp pressed either a like or a dislike button. Let his vote sequence be represented with a string s, such that s_i=0 means that he disliked the i-th song, and s_i=1 means that he liked it.\n\nNow the service has to re-evaluate the song ratings in such a way that:\n\n  * the new ratings q_1, q_2, ..., q_n still form a permutation (1 \u2264 q_i \u2264 n; each integer from 1 to n appears exactly once); \n  * every song that Monocarp liked should have a greater rating than every song that Monocarp disliked (formally, for all i, j such that s_i=1 and s_j=0, q_i>q_j should hold). \n\nAmong all valid permutations q find the one that has the smallest value of \u2211_{i=1}^n |p_i-q_i|, where |x| is an absolute value of x.\n\nPrint the permutation q_1, q_2, ..., q_n. If there are multiple answers, you can print any of them.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of songs.\n\nThe second line of each testcase contains n integers p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n) \u2014 the permutation of the predicted ratings.\n\nThe third line contains a single string s, consisting of n characters. Each character is either a 0 or a 1. 0 means that Monocarp disliked the song, and 1 means that he liked it.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase, print a permutation q \u2014 the re-evaluated ratings of the songs. If there are multiple answers such that \u2211_{i=1}^n |p_i-q_i| is minimum possible, you can print any of them.\n\nExample\n\nInput\n\n\n3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110001\n\n\nOutput\n\n\n2 1\n3 1 2\n1 6 5 8 3 2 4 7\n\nNote\n\nIn the first testcase, there exists only one permutation q such that each liked song is rating higher than each disliked song: song 1 gets rating 2 and song 2 gets rating 1. \u2211_{i=1}^n |p_i-q_i|=|1-2|+|2-1|=2.\n\nIn the second testcase, Monocarp liked all songs, so all permutations could work. The permutation with the minimum sum of absolute differences is the permutation equal to p. Its cost is 0.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of songs.\n\nThe second line of each testcase contains n integers p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n) \u2014 the permutation of the predicted ratings.\n\nThe third line contains a single string s, consisting of n characters. Each character is either a 0 or a 1. 0 means that Monocarp disliked the song, and 1 means that he liked it.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase, print a permutation q \u2014 the re-evaluated ratings of the songs. If there are multiple answers such that \u2211_{i=1}^n |p_i-q_i| is minimum possible, you can print any of them.\n\nExample\n\nInput\n\n\n3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110001\n\n\nOutput\n\n\n2 1\n3 1 2\n1 6 5 8 3 2 4 7\n\nNote\n\nIn the first testcase, there exists only one permutation q such that each liked song is rating higher than each disliked song: song 1 gets rating 2 and song 2 gets rating 1. \u2211_{i=1}^n |p_i-q_i|=|1-2|+|2-1|=2.\n\nIn the second testcase, Monocarp liked all songs, so all permutations could work. The permutation with the minimum sum of absolute differences is the permutation equal to p. Its cost is 0.", "mutate_method": "rephrase_one", "save_node": false, "parent_index": 85}
