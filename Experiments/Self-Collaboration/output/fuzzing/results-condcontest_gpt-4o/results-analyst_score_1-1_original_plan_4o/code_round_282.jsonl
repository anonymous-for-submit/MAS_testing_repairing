{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "repair_prompt": ["Polycarp possessed an array a of 3 positive integers and ended up with an array b of 7 integers after noting down the sums of all non-empty subsequences of this array arranged in non-decreasing order. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8; after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that the elements of array a are distinct positive integers.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def restore_array(t, test_cases):\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_all = b[6]\n        # The second largest element in b is the sum of the two largest elements in a\n        sum_two_largest = b[5]\n        # The second smallest element in b is the sum of the two smallest elements in a\n        sum_two_smallest = b[1]\n        \n        # Calculate a3 and a2\n        a3 = sum_all - sum_two_largest\n        a2 = sum_two_smallest - a1\n        \n        results.append((a1, a2, a3))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array(t, test_cases)\n    \n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def restore_array(t, test_cases):\n    results = []\n    for b in test_cases:\n        # a_1 is the smallest element in b\n        a_1 = b[0]\n        # a_2 is the second smallest element in b\n        a_2 = b[1]\n        # a_3 is the largest element minus a_1 and a_2\n        a_3 = b[-1] - a_1 - a_2\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array(t, test_cases)\n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def restore_array(t, test_cases):\n    results = []\n    for b in test_cases:\n        # Since b is already sorted, we can directly use the elements\n        a1 = b[0]  # The smallest element in b corresponds to a1\n        a2 = b[1]  # The second smallest element in b corresponds to a2\n        a3 = b[-1] - a1 - a2  # The largest element in b is the sum of a1, a2, and a3\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array(t, test_cases)\n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def restore_array(t, test_cases):\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element of array a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in array a\n        sum_all = b[6]\n        # The second largest element in b is the sum of the two largest elements in array a\n        sum_two_largest = b[5]\n        # The second smallest element in b is the sum of the two smallest elements in array a\n        sum_two_smallest = b[1]\n        \n        # Calculate the elements of array a\n        a2 = sum_two_smallest - a1\n        a3 = sum_two_largest - a2\n        \n        results.append((a1, a2, a3))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array(t, test_cases)\n    \n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def restore_array(t, test_cases):\n    results = []\n    for b in test_cases:\n        # a_1 is the smallest element in b\n        a_1 = b[0]\n        # a_2 is the second smallest element in b\n        a_2 = b[1]\n        # a_3 is the largest element in b minus a_1 and a_2\n        a_3 = b[-1] - a_1 - a_2\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array(t, test_cases)\n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_all = b[6]\n        # The second largest element in b is the sum of the two largest elements in a\n        sum_two_largest = b[5]\n        # The second smallest element in b is the sum of the two smallest elements in a\n        sum_two_smallest = b[1]\n        \n        # Calculate the individual elements of a\n        a3 = sum_all - sum_two_largest\n        a2 = sum_two_smallest - a1\n        \n        results.append((a1, a2, a3))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    \n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def restore_array(t, test_cases):\n    results = []\n    for b in test_cases:\n        # a_1 is the smallest element in b\n        a_1 = b[0]\n        # a_2 is the second smallest element in b\n        a_2 = b[1]\n        # a_3 is the largest element in b minus a_1 and a_2\n        a_3 = b[-1] - a_1 - a_2\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array(t, test_cases)\n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[6] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    \n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[6]\n        # The second largest element in a can be found by:\n        # sum_a - a1 - b[1] (since b[1] is the second smallest sum which is a1 + a2)\n        a2 = b[1]\n        a3 = sum_a - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    \n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[6] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    \n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def restore_array(t, test_cases):\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_all = b[6]\n        # The second largest element in b is the sum of the two largest elements in a\n        sum_two_largest = b[5]\n        # The second smallest element in b is the sum of the two smallest elements in a\n        sum_two_smallest = b[1]\n        \n        # Calculate a3 and a2\n        a3 = sum_all - sum_two_largest\n        a2 = sum_two_smallest - a1\n        \n        results.append((a1, a2, a3))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array(t, test_cases)\n    \n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the smallest element in the array b, which corresponds to the smallest element in array a.\",\n      \"input\": \"Array b of 7 integers in non-decreasing order.\",\n      \"output\": \"The smallest element of array a.\"\n    },\n    {\n      \"description\": \"Identify the largest element in the array b, which corresponds to the sum of all elements in array a.\",\n      \"input\": \"Array b of 7 integers in non-decreasing order.\",\n      \"output\": \"The sum of all elements in array a.\"\n    },\n    {\n      \"description\": \"Determine the second largest element in array b, which corresponds to the sum of the two largest elements in array a.\",\n      \"input\": \"Array b of 7 integers in non-decreasing order.\",\n      \"output\": \"The sum of the two largest elements in array a.\"\n    },\n    {\n      \"description\": \"Calculate the second smallest element in array b, which corresponds to the sum of the two smallest elements in array a.\",\n      \"input\": \"Array b of 7 integers in non-decreasing order.\",\n      \"output\": \"The sum of the two smallest elements in array a.\"\n    },\n    {\n      \"description\": \"Using the identified sums, solve for the individual elements of array a.\",\n      \"input\": \"The smallest element, the sum of all elements, the sum of the two largest elements, and the sum of the two smallest elements.\",\n      \"output\": \"The three distinct elements of array a.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, perform the following steps:\",\n    \"1. Read the array b of 7 integers.\",\n    \"2. Identify the smallest element in b, which is the smallest element in a.\",\n    \"3. Identify the largest element in b, which is the sum of all elements in a.\",\n    \"4. Identify the second largest element in b, which is the sum of the two largest elements in a.\",\n    \"5. Identify the second smallest element in b, which is the sum of the two smallest elements in a.\",\n    \"6. Use the identified sums to solve for the individual elements of array a:\",\n    \"   a. Let a1 be the smallest element in b.\",\n    \"   b. Let a3 be the largest element in b minus the second largest element", "Round_0": {"code": "def restore_array(t, test_cases):\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_all = b[6]\n        # The second largest element in b is the sum of the two largest elements in a\n        sum_two_largest = b[5]\n        # The second smallest element in b is the sum of the two smallest elements in a\n        sum_two_smallest = b[1]\n        \n        # Calculate a3 and a2\n        a3 = sum_all - sum_two_largest\n        a2 = sum_two_smallest - a1\n        \n        results.append((a1, a2, a3))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array(t, test_cases)\n    \n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Identify the relationship between the elements of array a and the sorted sums in array b.\",\n      \"description\": \"Understand that the smallest element in b is one of the elements of a, and the largest element in b is the sum of all elements in a.\"\n    },\n    {\n      \"subproblem\": \"Determine the elements of array a from array b.\",\n      \"description\": \"Use the properties of the sums to deduce the individual elements of a. Specifically, a_1 is the smallest element in b, a_2 is the second smallest element in b, and a_3 can be found by subtracting a_1 and a_2 from the largest element in b.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data\",\n      \"description\": \"Read the number of test cases and the subsequent arrays b for each test case.\"\n    },\n    {\n      \"step\": \"Process each test case\",\n      \"description\": \"For each test case, perform the following operations.\"\n    },\n    {\n      \"step\": \"Identify a_1\",\n      \"description\": \"Set a_1 as the smallest element in array b.\"\n    },\n    {\n      \"step\": \"Identify a_2\",\n      \"description\": \"Set a_2 as the second smallest element in array b.\"\n    },\n    {\n      \"step\": \"Identify a_3\",\n      \"description\": \"Calculate a_3 by subtracting a_1 and a_2 from the largest element in array b.\"\n    },\n    {\n      \"step\": \"Output the result\",\n      \"description\": \"Print the elements a_1, a_2, and a_3 for each test case.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def restore_array(t, test_cases):\n    results = []\n    for b in test_cases:\n        # a_1 is the smallest element in b\n        a_1 = b[0]\n        # a_2 is the second smallest element in b\n        a_2 = b[1]\n        # a_3 is the largest element minus a_1 and a_2\n        a_3 = b[-1] - a_1 - a_2\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array(t, test_cases)\n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the smallest element in array b, which corresponds to the smallest element in array a.\",\n      \"steps\": [\n        \"Sort the array b if not already sorted.\",\n        \"Assign the smallest element of b to a1.\"\n      ]\n    },\n    {\n      \"description\": \"Identify the largest element in array b, which corresponds to the sum of all elements in array a.\",\n      \"steps\": [\n        \"Assign the largest element of b to the sum of a1, a2, and a3.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the second and third elements of array a using the properties of sums in array b.\",\n      \"steps\": [\n        \"Identify the second smallest element in b, which corresponds to the second smallest element in a.\",\n        \"Identify the third smallest element in b, which corresponds to the third smallest element in a.\",\n        \"Use the largest element in b (sum of a1, a2, a3) to solve for the remaining elements of a.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, perform the following steps:\",\n    \"Sort the array b if not already sorted.\",\n    \"Assign the smallest element of b to a1.\",\n    \"Assign the largest element of b to the sum of a1, a2, and a3.\",\n    \"Identify the second and third elements of array a using the properties of sums in array b.\",\n    \"Output the elements of array a for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def restore_array(t, test_cases):\n    results = []\n    for b in test_cases:\n        # Since b is already sorted, we can directly use the elements\n        a1 = b[0]  # The smallest element in b corresponds to a1\n        a2 = b[1]  # The second smallest element in b corresponds to a2\n        a3 = b[-1] - a1 - a2  # The largest element in b is the sum of a1, a2, and a3\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array(t, test_cases)\n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the smallest element in array b, which corresponds to the smallest element in array a.\",\n      \"input\": \"Array b of 7 integers in non-decreasing order.\",\n      \"output\": \"The smallest element of array a.\"\n    },\n    {\n      \"description\": \"Identify the largest element in array b, which corresponds to the sum of all elements in array a.\",\n      \"input\": \"Array b of 7 integers in non-decreasing order.\",\n      \"output\": \"The sum of all elements in array a.\"\n    },\n    {\n      \"description\": \"Determine the second largest element in array b, which corresponds to the sum of the two largest elements in array a.\",\n      \"input\": \"Array b of 7 integers in non-decreasing order.\",\n      \"output\": \"The sum of the two largest elements in array a.\"\n    },\n    {\n      \"description\": \"Calculate the second smallest element in array b, which corresponds to the sum of the two smallest elements in array a.\",\n      \"input\": \"Array b of 7 integers in non-decreasing order.\",\n      \"output\": \"The sum of the two smallest elements in array a.\"\n    },\n    {\n      \"description\": \"Using the identified sums, solve for the individual elements of array a.\",\n      \"input\": \"The smallest element, the sum of all elements, the sum of the two largest elements, and the sum of the two smallest elements.\",\n      \"output\": \"The three distinct positive integers of array a.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, perform the following steps:\",\n    \"1. Read the array b of 7 integers.\",\n    \"2. Identify the smallest element in b as the smallest element of array a.\",\n    \"3. Identify the largest element in b as the sum of all elements in array a.\",\n    \"4. Identify the second largest element in b as the sum of the two largest elements in array a.\",\n    \"5. Identify the second smallest element in b as the sum of the two smallest elements in array a.\",\n    \"6. Use the identified sums to solve for the individual elements of array a.\",\n    \"7. Output the three distinct positive integers of array a.\"\n  ]\n}\n```", "Round_0": {"code": "def restore_array(t, test_cases):\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element of array a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in array a\n        sum_all = b[6]\n        # The second largest element in b is the sum of the two largest elements in array a\n        sum_two_largest = b[5]\n        # The second smallest element in b is the sum of the two smallest elements in array a\n        sum_two_smallest = b[1]\n        \n        # Calculate the elements of array a\n        a2 = sum_two_smallest - a1\n        a3 = sum_two_largest - a2\n        \n        results.append((a1, a2, a3))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array(t, test_cases)\n    \n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Identify the relationship between the elements of array a and the sorted sums in array b.\",\n      \"description\": \"Understand that the smallest element in b is one of the elements of a, and the largest element in b is the sum of all elements in a.\"\n    },\n    {\n      \"subproblem\": \"Determine the elements of array a from array b.\",\n      \"description\": \"Use the properties of the sums to deduce the individual elements of a. Specifically, a_1 is the smallest element in b, a_2 is the second smallest element in b, and a_3 can be found by subtracting a_1 and a_2 from the largest element in b.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data\",\n      \"description\": \"Read the number of test cases and the subsequent arrays b for each test case.\"\n    },\n    {\n      \"step\": \"Process each test case\",\n      \"description\": \"For each test case, perform the following operations.\"\n    },\n    {\n      \"step\": \"Identify a_1\",\n      \"description\": \"Set a_1 as the smallest element in array b.\"\n    },\n    {\n      \"step\": \"Identify a_2\",\n      \"description\": \"Set a_2 as the second smallest element in array b.\"\n    },\n    {\n      \"step\": \"Identify a_3\",\n      \"description\": \"Calculate a_3 by subtracting a_1 and a_2 from the largest element in array b.\"\n    },\n    {\n      \"step\": \"Output the result\",\n      \"description\": \"Print the elements a_1, a_2, and a_3 for each test case.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def restore_array(t, test_cases):\n    results = []\n    for b in test_cases:\n        # a_1 is the smallest element in b\n        a_1 = b[0]\n        # a_2 is the second smallest element in b\n        a_2 = b[1]\n        # a_3 is the largest element in b minus a_1 and a_2\n        a_3 = b[-1] - a_1 - a_2\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array(t, test_cases)\n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the smallest element in the array b, which corresponds to the smallest element in array a.\",\n      \"input\": \"Array b of 7 integers in non-decreasing order.\",\n      \"output\": \"The smallest element of array a.\"\n    },\n    {\n      \"description\": \"Identify the largest element in the array b, which corresponds to the sum of all elements in array a.\",\n      \"input\": \"Array b of 7 integers in non-decreasing order.\",\n      \"output\": \"The sum of all elements in array a.\"\n    },\n    {\n      \"description\": \"Determine the second largest element in array b, which corresponds to the sum of the two largest elements in array a.\",\n      \"input\": \"Array b of 7 integers in non-decreasing order.\",\n      \"output\": \"The sum of the two largest elements in array a.\"\n    },\n    {\n      \"description\": \"Calculate the second smallest element in array b, which corresponds to the sum of the two smallest elements in array a.\",\n      \"input\": \"Array b of 7 integers in non-decreasing order.\",\n      \"output\": \"The sum of the two smallest elements in array a.\"\n    },\n    {\n      \"description\": \"Using the identified sums, deduce the individual elements of array a.\",\n      \"input\": \"The smallest element, the sum of all elements, the sum of the two largest elements, and the sum of the two smallest elements.\",\n      \"output\": \"The three distinct elements of array a.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, perform the following steps:\",\n    \"1. Read the array b of 7 integers.\",\n    \"2. Identify the smallest element in b, which is the smallest element in a.\",\n    \"3. Identify the largest element in b, which is the sum of all elements in a.\",\n    \"4. Identify the second largest element in b, which is the sum of the two largest elements in a.\",\n    \"5. Identify the second smallest element in b, which is the sum of the two smallest elements in a.\",\n    \"6. Calculate the individual elements of a using the identified sums:\",\n    \"   - Let a1 be the smallest element in b.\",\n    \"   - Let a3 be the largest element in b minus the second largest element in b.\",\n    \"", "Round_0": {"code": "def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_all = b[6]\n        # The second largest element in b is the sum of the two largest elements in a\n        sum_two_largest = b[5]\n        # The second smallest element in b is the sum of the two smallest elements in a\n        sum_two_smallest = b[1]\n        \n        # Calculate the individual elements of a\n        a3 = sum_all - sum_two_largest\n        a2 = sum_two_smallest - a1\n        \n        results.append((a1, a2, a3))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    \n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Identify the relationship between the elements of array a and the sorted sums in array b.\",\n      \"description\": \"Understand that the smallest element in b is one of the elements of a, and the largest element in b is the sum of all elements in a.\"\n    },\n    {\n      \"subproblem\": \"Determine the elements of array a from array b.\",\n      \"description\": \"Use the properties of the sums to deduce the individual elements of a. Specifically, a_1 is the smallest element in b, a_2 is the second smallest element in b, and a_3 can be found by subtracting a_1 and a_2 from the largest element in b.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data\",\n      \"description\": \"Read the number of test cases and the subsequent arrays b for each test case.\"\n    },\n    {\n      \"step\": \"Process each test case\",\n      \"description\": \"For each test case, perform the following operations.\"\n    },\n    {\n      \"step\": \"Identify a_1\",\n      \"description\": \"Set a_1 as the smallest element in array b.\"\n    },\n    {\n      \"step\": \"Identify a_2\",\n      \"description\": \"Set a_2 as the second smallest element in array b.\"\n    },\n    {\n      \"step\": \"Identify a_3\",\n      \"description\": \"Calculate a_3 by subtracting a_1 and a_2 from the largest element in array b.\"\n    },\n    {\n      \"step\": \"Output the result\",\n      \"description\": \"Print the elements a_1, a_2, and a_3 for each test case.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def restore_array(t, test_cases):\n    results = []\n    for b in test_cases:\n        # a_1 is the smallest element in b\n        a_1 = b[0]\n        # a_2 is the second smallest element in b\n        a_2 = b[1]\n        # a_3 is the largest element in b minus a_1 and a_2\n        a_3 = b[-1] - a_1 - a_2\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array(t, test_cases)\n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Identify the relationship between the elements of array a and the sorted sums in array b.\",\n      \"description\": \"Understand that the smallest element in b is one of the elements of a, and the largest element in b is the sum of all elements of a.\"\n    },\n    {\n      \"subproblem\": \"Determine the elements of array a from array b.\",\n      \"description\": \"Use the properties of sums of subsequences to deduce the values of a_1, a_2, and a_3 from b.\"\n    },\n    {\n      \"subproblem\": \"Handle multiple test cases efficiently.\",\n      \"description\": \"Ensure the solution can process up to 5000 test cases as described in the input format.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Parse the input to retrieve the number of test cases and the array b for each test case.\",\n      \"description\": \"Read the input data and store it in a suitable format for processing.\"\n    },\n    {\n      \"step\": \"For each test case, identify the smallest and largest elements in array b.\",\n      \"description\": \"The smallest element in b is a_1, and the largest element is the sum of a_1, a_2, and a_3.\"\n    },\n    {\n      \"step\": \"Calculate the elements of array a using the properties of subsequence sums.\",\n      \"description\": \"Use the known properties: a_1 = b[0], a_2 = b[1], and a_3 = b[6] - b[0] - b[1].\"\n    },\n    {\n      \"step\": \"Output the elements of array a for each test case.\",\n      \"description\": \"Print the values of a_1, a_2, and a_3 for each test case in the required format.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[6] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    \n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the smallest element in the array b, which corresponds to the smallest element in array a.\",\n      \"input\": \"Array b of 7 integers in non-decreasing order.\",\n      \"output\": \"The smallest element of array a.\"\n    },\n    {\n      \"description\": \"Identify the largest element in the array b, which corresponds to the sum of all elements in array a.\",\n      \"input\": \"Array b of 7 integers in non-decreasing order.\",\n      \"output\": \"The sum of all elements in array a.\"\n    },\n    {\n      \"description\": \"Determine the second largest element in array a by using the largest element and the smallest element identified in previous steps.\",\n      \"input\": \"The smallest element and the sum of all elements in array a.\",\n      \"output\": \"The second largest element of array a.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, perform the following steps:\",\n    \"1. Read the array b of 7 integers.\",\n    \"2. Identify the smallest element in array b, which is the smallest element of array a.\",\n    \"3. Identify the largest element in array b, which is the sum of all elements in array a.\",\n    \"4. Calculate the second largest element of array a by subtracting the smallest element from the largest element and then subtracting the third element from the result.\",\n    \"5. Output the three elements of array a.\"\n  ]\n}\n```", "Round_0": {"code": "def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[6]\n        # The second largest element in a can be found by:\n        # sum_a - a1 - b[1] (since b[1] is the second smallest sum which is a1 + a2)\n        a2 = b[1]\n        a3 = sum_a - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    \n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the relationship between the elements of array a and the sorted sums in array b.\",\n      \"details\": \"Given that array a has 3 elements, the sums of all non-empty subsequences will result in 7 distinct sums. The smallest element in b is the smallest element in a, and the largest element in b is the sum of all elements in a.\"\n    },\n    {\n      \"description\": \"Determine the elements of array a from array b.\",\n      \"details\": \"The elements of array a can be derived from the sorted array b as follows: a_1 is the smallest element in b, a_2 is the second smallest element in b, and a_3 can be calculated as the largest element in b minus the sum of a_1 and a_2.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read the number of test cases t.\"\n    },\n    {\n      \"step\": \"For each test case, read the array b of 7 integers.\"\n    },\n    {\n      \"step\": \"Identify a_1 as the smallest element in b (b[0]).\"\n    },\n    {\n      \"step\": \"Identify a_2 as the second smallest element in b (b[1]).\"\n    },\n    {\n      \"step\": \"Calculate a_3 as the largest element in b (b[6]) minus the sum of a_1 and a_2.\"\n    },\n    {\n      \"step\": \"Output the elements a_1, a_2, and a_3 for each test case.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[6] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    \n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the smallest element in the array b, which corresponds to the smallest element in array a.\",\n      \"input\": \"Array b of 7 integers in non-decreasing order.\",\n      \"output\": \"The smallest element of array a.\"\n    },\n    {\n      \"description\": \"Identify the largest element in the array b, which corresponds to the sum of all elements in array a.\",\n      \"input\": \"Array b of 7 integers in non-decreasing order.\",\n      \"output\": \"The sum of all elements in array a.\"\n    },\n    {\n      \"description\": \"Determine the second largest element in array b, which corresponds to the sum of the two largest elements in array a.\",\n      \"input\": \"Array b of 7 integers in non-decreasing order.\",\n      \"output\": \"The sum of the two largest elements in array a.\"\n    },\n    {\n      \"description\": \"Calculate the second smallest element in array b, which corresponds to the sum of the two smallest elements in array a.\",\n      \"input\": \"Array b of 7 integers in non-decreasing order.\",\n      \"output\": \"The sum of the two smallest elements in array a.\"\n    },\n    {\n      \"description\": \"Using the identified sums, solve for the individual elements of array a.\",\n      \"input\": \"The smallest element, the sum of all elements, the sum of the two largest elements, and the sum of the two smallest elements.\",\n      \"output\": \"The three distinct elements of array a.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, perform the following steps:\",\n    \"1. Read the array b of 7 integers.\",\n    \"2. Identify the smallest element in b, which is the smallest element in a.\",\n    \"3. Identify the largest element in b, which is the sum of all elements in a.\",\n    \"4. Identify the second largest element in b, which is the sum of the two largest elements in a.\",\n    \"5. Identify the second smallest element in b, which is the sum of the two smallest elements in a.\",\n    \"6. Use the identified sums to solve for the individual elements of array a:\",\n    \"   a. Let a1 be the smallest element in b.\",\n    \"   b. Let a3 be the largest element in b minus the second largest element", "Round_0": {"code": "def restore_array(t, test_cases):\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_all = b[6]\n        # The second largest element in b is the sum of the two largest elements in a\n        sum_two_largest = b[5]\n        # The second smallest element in b is the sum of the two smallest elements in a\n        sum_two_smallest = b[1]\n        \n        # Calculate a3 and a2\n        a3 = sum_all - sum_two_largest\n        a2 = sum_two_smallest - a1\n        \n        results.append((a1, a2, a3))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array(t, test_cases)\n    \n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [true, true, false, true, true, true, false, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 282, "prompt": "Polycarp possessed an array a of 3 positive integers and ended up with an array b of 7 integers after noting down the sums of all non-empty subsequences of this array arranged in non-decreasing order. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8; after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that the elements of array a are distinct positive integers.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "condense_two2one", "save_node": true, "parent_index": 178}
