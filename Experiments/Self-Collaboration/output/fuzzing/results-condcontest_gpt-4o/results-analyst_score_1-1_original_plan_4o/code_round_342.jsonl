{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "repair_prompt": ["Polycarp had an array a comprising 3 positive numbers and eventually had an array b of 7 numbers after documenting the sums of all non-empty subsequences of this array ordered in non-decreasing fashion. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8; after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that the elements of array a are distinct positive integers.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a1 = b[0]\n        # The second smallest element in b is a_2\n        a2 = b[1]\n        # The largest element in b is the sum of all elements in a (a_1 + a_2 + a_3)\n        sum_a = b[6]\n        # Deduce a_3 using the sum\n        a3 = sum_a - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        # According to the plan, a_1 is b[0], a_2 is b[1], and a_3 is b[6] - a_1 - a_2\n        a_1 = b[0]\n        a_2 = b[1]\n        a_3 = b[6] - a_1 - a_2\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    \n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[6] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    \n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        # According to the plan, a_1 is the smallest element, a_2 is the second smallest,\n        # and a_3 is the largest element minus the sum of a_1 and a_2.\n        a_1 = b[0]\n        a_2 = b[1]\n        a_3 = b[6] - a_1 - a_2\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    \n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the elements of a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements of a\n        sum_a = b[6]\n        # Deduce the remaining elements using the properties of subsequences\n        a2 = b[1]\n        a3 = sum_a - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    \n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        # According to the plan, deduce a_1, a_2, a_3\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[6] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    \n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a1 = b[0]\n        # The second smallest element in b is a_2\n        a2 = b[1]\n        # The largest element in b is the sum of a_1, a_2, and a_3\n        a3 = b[6] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    \n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a1 = b[0]\n        # The second smallest element in b is a_2\n        a2 = b[1]\n        # The largest element in b is a_1 + a_2 + a_3\n        a3 = b[6] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    \n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        # The largest element in b is the sum of all elements in a\n        sum_all = b[6]\n        \n        # The smallest element in b is one of the elements of a\n        a1 = b[0]\n        \n        # The second largest unique element in b is the sum of two elements of a\n        # The third largest unique element in b is also the sum of two elements of a\n        # We can deduce the other two elements of a using these sums\n        a2 = b[1]\n        a3 = sum_all - a1 - a2\n        \n        results.append((a1, a2, a3))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    \n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        # The largest element in b is the sum of all elements in a\n        a3 = b[6]\n        # The smallest element in b is one of the elements of a\n        a1 = b[0]\n        # The second smallest element in b is another element of a\n        a2 = b[1]\n        # Append the result for this test case\n        results.append((a1, a2, a3 - a1 - a2))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    \n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a1 = b[0]\n        # The second smallest element in b is a_2\n        a2 = b[1]\n        # The largest element in b is the sum of all elements in a (a_1 + a_2 + a_3)\n        sum_a = b[6]\n        # Deduce a_3 using the sum\n        a3 = sum_a - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the relationship between the elements of array a and the sorted array b.\",\n      \"details\": \"Given that array b is the sorted list of sums of all non-empty subsequences of array a, determine how the elements of a can be derived from b.\"\n    },\n    {\n      \"description\": \"Extract the elements of array a from array b.\",\n      \"details\": \"Use the properties of subsequences and their sums to deduce the values of a_1, a_2, and a_3 from the sorted array b.\"\n    },\n    {\n      \"description\": \"Handle multiple test cases efficiently.\",\n      \"details\": \"Ensure the solution can process up to 5000 test cases as specified in the input constraints.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Parse the input to retrieve the number of test cases and the corresponding arrays b for each test case.\",\n      \"details\": \"Read the input data and store the number of test cases and the 7 integers for each test case.\"\n    },\n    {\n      \"step\": \"For each test case, identify the elements of array a.\",\n      \"details\": \"Use the fact that the largest element in b is the sum of all elements in a (a_1 + a_2 + a_3). The smallest element in b is the smallest element in a (a_1). The second smallest element in b is the second smallest element in a (a_2). Deduce a_3 using these relationships.\"\n    },\n    {\n      \"step\": \"Output the elements of array a for each test case.\",\n      \"details\": \"Print the values of a_1, a_2, and a_3 for each test case in the specified format.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a1 = b[0]\n        # The second smallest element in b is a_2\n        a2 = b[1]\n        # The largest element in b is the sum of all elements in a (a_1 + a_2 + a_3)\n        sum_a = b[6]\n        # Deduce a_3 using the sum\n        a3 = sum_a - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the relationship between the elements of array a and the sorted array b.\",\n      \"details\": \"Given that array b contains sums of all non-empty subsequences of array a, determine how the smallest, middle, and largest elements of array a can be derived from array b.\"\n    },\n    {\n      \"description\": \"Extract the elements of array a from array b.\",\n      \"details\": \"Use the properties of subsequences and the sorted nature of array b to deduce the values of a_1, a_2, and a_3.\"\n    },\n    {\n      \"description\": \"Handle multiple test cases efficiently.\",\n      \"details\": \"Ensure the program can process up to 5000 test cases, extracting array a for each test case from the given array b.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data\",\n      \"details\": \"Read the number of test cases t and then read each array b of 7 integers for each test case.\"\n    },\n    {\n      \"step\": \"Process each test case\",\n      \"details\": \"For each test case, apply the logic to extract array a from array b.\"\n    },\n    {\n      \"step\": \"Extract array a from array b\",\n      \"details\": \"Use the smallest element b[0] as a_1, the second smallest element b[1] as a_2, and the largest element b[6] minus the sum of a_1 and a_2 as a_3.\"\n    },\n    {\n      \"step\": \"Output results\",\n      \"details\": \"Print the extracted array a for each test case.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        # According to the plan, a_1 is b[0], a_2 is b[1], and a_3 is b[6] - a_1 - a_2\n        a_1 = b[0]\n        a_2 = b[1]\n        a_3 = b[6] - a_1 - a_2\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    \n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Identify the relationship between the elements of array a and the sorted array b.\",\n      \"description\": \"Understand how the sums of non-empty subsequences of array a result in the sorted array b.\"\n    },\n    {\n      \"subproblem\": \"Determine the elements of array a from array b.\",\n      \"description\": \"Use the properties of subsequences and the constraints given to deduce the original elements of array a.\"\n    },\n    {\n      \"subproblem\": \"Handle multiple test cases efficiently.\",\n      \"description\": \"Ensure the solution can process up to 5000 test cases as specified in the input constraints.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Parse the input.\",\n      \"description\": \"Read the number of test cases and the subsequent arrays b for each test case.\"\n    },\n    {\n      \"step\": \"For each test case, identify the elements of array a.\",\n      \"description\": \"Given the sorted array b, deduce the elements of array a using the relationship: a_1 = b_1, a_2 = b_2, a_3 = b_7 - a_1 - a_2.\"\n    },\n    {\n      \"step\": \"Output the results.\",\n      \"description\": \"Print the deduced elements of array a for each test case.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[6] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    \n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the relationship between the elements of array a and the sorted array b.\",\n      \"details\": \"Given that array b contains sums of all non-empty subsequences of array a, determine how the smallest, middle, and largest elements of array a can be derived from array b.\"\n    },\n    {\n      \"description\": \"Extract the elements of array a from array b.\",\n      \"details\": \"Use the properties of subsequences and the sorted nature of array b to deduce the values of a_1, a_2, and a_3.\"\n    },\n    {\n      \"description\": \"Handle multiple test cases efficiently.\",\n      \"details\": \"Ensure the program can process up to 5000 test cases, extracting array a for each test case from the given array b.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data\",\n      \"details\": \"Read the number of test cases t and then read each array b of 7 integers for each test case.\"\n    },\n    {\n      \"step\": \"Process each test case\",\n      \"details\": \"For each test case, apply the logic to extract array a from array b.\"\n    },\n    {\n      \"step\": \"Extract array a from array b\",\n      \"details\": \"Use the smallest element b[0] as a_1, the second smallest element b[1] as a_2, and the largest element b[6] minus the sum of a_1 and a_2 as a_3.\"\n    },\n    {\n      \"step\": \"Output results\",\n      \"details\": \"Print the extracted array a for each test case.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        # According to the plan, a_1 is the smallest element, a_2 is the second smallest,\n        # and a_3 is the largest element minus the sum of a_1 and a_2.\n        a_1 = b[0]\n        a_2 = b[1]\n        a_3 = b[6] - a_1 - a_2\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    \n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Identify the relationship between the elements of array a and the sorted array b.\",\n      \"description\": \"Understand that the elements of array a are distinct positive integers and the array b is formed by the sums of all non-empty subsequences of a.\"\n    },\n    {\n      \"subproblem\": \"Determine the elements of array a from array b.\",\n      \"description\": \"Use the properties of subsequences and the sorted nature of array b to deduce the elements of array a.\"\n    },\n    {\n      \"subproblem\": \"Handle multiple test cases efficiently.\",\n      \"description\": \"Ensure the solution can process up to 5000 test cases as specified in the requirement.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Parse the input to extract the number of test cases and the array b for each test case.\",\n      \"description\": \"Read the input data and store it in a suitable format for processing.\"\n    },\n    {\n      \"step\": \"For each test case, identify the elements of array a.\",\n      \"description\": \"Use the fact that the smallest element in b is one of the elements of a, and the largest element in b is the sum of all elements of a. Deduce the remaining elements using the properties of subsequences.\"\n    },\n    {\n      \"step\": \"Output the elements of array a for each test case.\",\n      \"description\": \"Print the deduced elements of array a in the required format.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the elements of a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements of a\n        sum_a = b[6]\n        # Deduce the remaining elements using the properties of subsequences\n        a2 = b[1]\n        a3 = sum_a - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    \n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Identify the relationship between the elements of array a and the sorted array b.\",\n      \"description\": \"Understand how the sums of non-empty subsequences of array a result in the sorted array b.\"\n    },\n    {\n      \"subproblem\": \"Determine the elements of array a from array b.\",\n      \"description\": \"Use the properties of subsequences and the constraints given to deduce the original elements of array a.\"\n    },\n    {\n      \"subproblem\": \"Handle multiple test cases efficiently.\",\n      \"description\": \"Ensure the solution can process up to 5000 test cases as specified in the input constraints.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Parse the input.\",\n      \"description\": \"Read the number of test cases and the subsequent arrays b for each test case.\"\n    },\n    {\n      \"step\": \"For each test case, identify the elements of array a.\",\n      \"description\": \"Given the sorted array b, deduce the elements of array a using the relationship: a_1 = b_1, a_2 = b_2, a_3 = b_7 - a_1 - a_2.\"\n    },\n    {\n      \"step\": \"Output the results.\",\n      \"description\": \"Print the deduced elements of array a for each test case.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        # According to the plan, deduce a_1, a_2, a_3\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[6] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    \n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the relationship between the elements of array a and the sorted array b.\",\n      \"details\": \"Given that array b contains all non-empty subsequences of array a, determine how the elements of array a can be derived from the sorted array b.\"\n    },\n    {\n      \"description\": \"Extract the elements of array a from array b.\",\n      \"details\": \"Use the properties of subsequences to deduce the values of a_1, a_2, and a_3 from the sorted array b.\"\n    },\n    {\n      \"description\": \"Handle multiple test cases efficiently.\",\n      \"details\": \"Ensure the solution can process up to 5000 test cases as specified in the requirement.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Parse the input to retrieve the number of test cases and the corresponding arrays b.\",\n      \"details\": \"Read the input data and store the number of test cases and each array b for processing.\"\n    },\n    {\n      \"step\": \"For each test case, analyze the sorted array b to determine the elements of array a.\",\n      \"details\": \"Use the fact that the largest element in b is the sum of all elements in a, and the smallest elements in b are the individual elements of a.\"\n    },\n    {\n      \"step\": \"Calculate the elements of array a using the properties of subsequences.\",\n      \"details\": \"Identify a_1, a_2, and a_3 by using the smallest element, the second smallest element, and the largest element in b.\"\n    },\n    {\n      \"step\": \"Output the results for each test case.\",\n      \"details\": \"Print the derived elements of array a for each test case in the specified format.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a1 = b[0]\n        # The second smallest element in b is a_2\n        a2 = b[1]\n        # The largest element in b is the sum of a_1, a_2, and a_3\n        a3 = b[6] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    \n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the relationship between the elements of array a and the sorted array b.\",\n      \"details\": \"Given that array b is the sorted list of sums of all non-empty subsequences of array a, deduce how the elements of a can be derived from b.\"\n    },\n    {\n      \"description\": \"Extract the elements of array a from array b.\",\n      \"details\": \"Use the properties of subsequences and their sums to determine the values of a_1, a_2, and a_3 from the sorted array b.\"\n    },\n    {\n      \"description\": \"Handle multiple test cases efficiently.\",\n      \"details\": \"Ensure the solution can process up to 5000 test cases, each with its own array b.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Parse the input to retrieve the number of test cases and the arrays b for each test case.\",\n      \"details\": \"Read the input data and store the number of test cases and the corresponding arrays b.\"\n    },\n    {\n      \"step\": \"For each test case, analyze the array b to determine the elements of array a.\",\n      \"details\": \"Use the fact that the smallest element in b is a_1, the second smallest is a_2, and the largest element is a_1 + a_2 + a_3. Deduce a_3 using these relationships.\"\n    },\n    {\n      \"step\": \"Output the elements of array a for each test case.\",\n      \"details\": \"Print the values of a_1, a_2, and a_3 for each test case in the required format.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a1 = b[0]\n        # The second smallest element in b is a_2\n        a2 = b[1]\n        # The largest element in b is a_1 + a_2 + a_3\n        a3 = b[6] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    \n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the relationship between the elements of array a and the sorted array b.\",\n      \"details\": \"Given that array b contains all non-empty subsequences of array a, deduce that the largest element in b is the sum of all elements in a. The smallest element in b is one of the elements of a.\"\n    },\n    {\n      \"description\": \"Determine the elements of array a from array b.\",\n      \"details\": \"Use the properties of subsequences to identify the elements of a. Specifically, the three largest unique sums in b correspond to the sums of pairs and the sum of all three elements in a.\"\n    },\n    {\n      \"description\": \"Handle multiple test cases efficiently.\",\n      \"details\": \"Iterate over each test case, apply the logic to deduce array a, and store the results for output.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Parse the input to extract the number of test cases and the array b for each test case.\"\n    },\n    {\n      \"step\": \"For each test case, identify the largest element in b as the sum of all elements in a.\"\n    },\n    {\n      \"step\": \"Identify the smallest element in b as one of the elements of a.\"\n    },\n    {\n      \"step\": \"Use the second largest and third largest unique elements in b to deduce the other two elements of a.\"\n    },\n    {\n      \"step\": \"Output the deduced elements of array a for each test case.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        # The largest element in b is the sum of all elements in a\n        sum_all = b[6]\n        \n        # The smallest element in b is one of the elements of a\n        a1 = b[0]\n        \n        # The second largest unique element in b is the sum of two elements of a\n        # The third largest unique element in b is also the sum of two elements of a\n        # We can deduce the other two elements of a using these sums\n        a2 = b[1]\n        a3 = sum_all - a1 - a2\n        \n        results.append((a1, a2, a3))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    \n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the relationship between the elements of array a and the sorted array b.\",\n      \"details\": \"Given that array b contains all non-empty subsequences of array a, determine how the elements of array a can be derived from the sorted array b.\"\n    },\n    {\n      \"description\": \"Extract the elements of array a from array b.\",\n      \"details\": \"Use the properties of subsequences to deduce the values of a_1, a_2, and a_3 from the sorted array b.\"\n    },\n    {\n      \"description\": \"Handle multiple test cases efficiently.\",\n      \"details\": \"Ensure the program can process up to 5000 test cases and output the correct array a for each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data\",\n      \"details\": \"Parse the number of test cases and the subsequent arrays b for each test case.\"\n    },\n    {\n      \"step\": \"Process each test case\",\n      \"details\": \"For each test case, apply the logic to extract array a from array b.\"\n    },\n    {\n      \"step\": \"Derive array a from array b\",\n      \"details\": \"Use the fact that the largest element in b is the sum of all elements in a (a_1 + a_2 + a_3). The smallest element in b is one of the elements of a. The second smallest element in b is another element of a. The third smallest element in b is the remaining element of a.\"\n    },\n    {\n      \"step\": \"Output results\",\n      \"details\": \"Print the derived array a for each test case.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        # The largest element in b is the sum of all elements in a\n        a3 = b[6]\n        # The smallest element in b is one of the elements of a\n        a1 = b[0]\n        # The second smallest element in b is another element of a\n        a2 = b[1]\n        # Append the result for this test case\n        results.append((a1, a2, a3 - a1 - a2))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    \n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the relationship between the elements of array a and the sorted array b.\",\n      \"details\": \"Given that array b is the sorted list of sums of all non-empty subsequences of array a, determine how the elements of a can be derived from b.\"\n    },\n    {\n      \"description\": \"Extract the elements of array a from array b.\",\n      \"details\": \"Use the properties of subsequences and their sums to deduce the values of a_1, a_2, and a_3 from the sorted array b.\"\n    },\n    {\n      \"description\": \"Handle multiple test cases efficiently.\",\n      \"details\": \"Ensure the solution can process up to 5000 test cases as specified in the input constraints.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Parse the input to retrieve the number of test cases and the corresponding arrays b for each test case.\",\n      \"details\": \"Read the input data and store the number of test cases and the 7 integers for each test case.\"\n    },\n    {\n      \"step\": \"For each test case, identify the elements of array a.\",\n      \"details\": \"Use the fact that the largest element in b is the sum of all elements in a (a_1 + a_2 + a_3). The smallest element in b is the smallest element in a (a_1). The second smallest element in b is the second smallest element in a (a_2). Deduce a_3 using these relationships.\"\n    },\n    {\n      \"step\": \"Output the elements of array a for each test case.\",\n      \"details\": \"Print the values of a_1, a_2, and a_3 for each test case in the specified format.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def restore_array_a(test_cases):\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a1 = b[0]\n        # The second smallest element in b is a_2\n        a2 = b[1]\n        # The largest element in b is the sum of all elements in a (a_1 + a_2 + a_3)\n        sum_a = b[6]\n        # Deduce a_3 using the sum\n        a3 = sum_a - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        test_cases.append(b)\n        index += 7\n    \n    results = restore_array_a(test_cases)\n    for result in results:\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 342, "prompt": "Polycarp had an array a comprising 3 positive numbers and eventually had an array b of 7 numbers after documenting the sums of all non-empty subsequences of this array ordered in non-decreasing fashion. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8; after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that the elements of array a are distinct positive integers.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "rephrase_one", "save_node": false, "parent_index": 217}
