{"name": "1598_B. Groups", "description": "n students attended the first meeting of the Berland SU programming course (n is even). All students will be divided into two groups. Each group will be attending exactly one lesson each week during one of the five working days (Monday, Tuesday, Wednesday, Thursday and Friday), and the days chosen for the groups must be different. Furthermore, both groups should contain the same number of students.\n\nEach student has filled a survey in which they told which days of the week are convenient for them to attend a lesson, and which are not. \n\nYour task is to determine if it is possible to choose two different week days to schedule the lessons for the group (the first group will attend the lesson on the first chosen day, the second group will attend the lesson on the second chosen day), and divide the students into two groups, so the groups have equal sizes, and for each student, the chosen lesson day for their group is convenient.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days.", "tags": ["brute force", "implementation"], "difficulty": 8, "id": 1598, "sample_io": [{"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}], "test_list": [{"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 1 0 0\n0 0 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 1 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 0\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 0 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n1 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n1 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n-1 0 0 1 0\n0 0 1 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 0 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 0\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 0 1\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n1 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 1 0 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 1\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 1 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n1 1 0 0 1\n0 0 0 1 0\n0 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 1 0 0 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 0 1\n0 1 0 1 0\n0 0 0 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 1\n0 1 0 0 1\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 0 1 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n1 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 0\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 1\n0 1 0 0 1\n2\n0 0 0 1 1\n1 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 1\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 1 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 0 1 1 1\n2\n0 0 0 0 0\n0 1 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 0 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n1 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 0\n1 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n-1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 0 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n1 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 1 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 0\n0 0 0 1 1\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 1 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 1 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 1 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 0 0 1 0\n1 1 0 1 0\n2\n0 0 1 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n1 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n1 0 0 1 0\n0 1 0 0 0\n2\n0 1 0 0 0\n0 0 1 0 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 1 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 1 1 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 1\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n1 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 1 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n-1 0 0 1 0\n0 0 1 1 0\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 0 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 0 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 0 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 1\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n1 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 1 0 0 0\n0 1 0 0 1\n1 1 0 0 1\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 0 1\n0 0 1 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 1 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n-1 1 0 0 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 1\n0 1 0 0 1\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n1 1 0 0 1\n0 0 0 1 1\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 0\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 1 1\n1 1 0 0 1\n0 1 0 0 1\n2\n0 0 0 1 1\n1 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 1\n2\n0 0 0 0 0\n0 1 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 0 0\n2\n1 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 0\n0 0 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n1 1 0 1 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 0 0 1 0\n2\n0 0 0 0 0\n0 1 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 1 0 0\n0 0 0 1 1\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 0\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 1 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 0\n0 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 1 0\n0 0 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 1 0\n1 1 0 1 0\n2\n0 0 1 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 1 0 0 0\n0 0 1 0 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 1\n0 1 0 0 1\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n1 0 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 1 1\n0 0 0 1 0\n1 1 0 0 0\n2\n-1 0 0 1 0\n0 0 1 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 0 0\n1 1 0 1 0\n2\n0 0 0 0 1\n0 1 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 0 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 0\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 1 1 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 0\n0 0 0 1 1\n0 1 0 1 0\n2\n1 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 1\n0 1 0 0 1\n2\n0 1 0 1 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 1 1 0\n1 0 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 1 1 0\n0 1 0 0 0\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n1 1 0 0 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 0\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 1 1 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n1 0 0 0 1\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 1 1\n0 0 1 1 0\n1 0 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n1 1 0 0 0\n2\n1 1 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 1 1\n0 0 1 0 0\n1 0 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 0 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n1 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 0 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 1 0 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 1\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 1 0 0\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 1 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 1 1 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 0 0\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n1 0 1 1 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 0 1 1\n0 1 0 0 1\n1 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 0 0 1 1\n2\n0 0 0 0 0\n0 0 1 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 1 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 0 0 1 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 1 1 0\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 0 1\n2\n0 0 0 0 1\n0 0 1 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 1 0 0\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n1 0 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 1 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 1 0 0 0\n0 0 1 0 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 0 1\n0 1 0 1 0\n0 0 0 0 0\n2\n0 0 0 0 1\n0 0 1 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 0 0 0 1\n0 1 0 0 1\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 0 1 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 0\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 1 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 1 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 1\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 1\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 0\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 1 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 0 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n0 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 1 0 1\n0 0 0 1 0\n1 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 1 1 1 0\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 0 1\n0 0 0 1 1\n0 1 0 1 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 0 0 1 0\n1 1 0 1 0\n2\n0 0 1 1 1\n1 0 0 1 1\n", "output": ["YES\nYES\n"]}], "task_id": "codecontest/59", "repair_prompt": ["n students attended the initial meeting of the Berland SU programming course (n is an even number). All students will be split into two groups, each attending exactly one lesson each week on one of the five working days (Monday, Tuesday, Wednesday, Thursday and Friday) on different days, and furthermore, both groups should contain the same number of students. Each student has filled a survey in which they told which days of the week are convenient for them to attend a lesson, and which are not. Your task is to figure out if it is possible to select two distinct weekdays to schedule the lessons for the groups (the first group will attend the lesson on the first chosen day, the second group will attend the lesson on the second chosen day), and divide the students into two groups, so the groups have equal sizes, and for each student, the chosen lesson day for their group is convenient. Ensure that this distribution maximizes overall student convenience.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def can_divide_students(t, test_cases):\n    results = []\n    \n    for case in test_cases:\n        n, availability = case\n        possible = False\n        \n        # Iterate over all pairs of days (i, j) where i != j\n        for i in range(5):\n            for j in range(i + 1, 5):\n                count_i = 0\n                count_j = 0\n                count_both = 0\n                \n                for student in availability:\n                    if student[i] == 1 and student[j] == 1:\n                        count_both += 1\n                    elif student[i] == 1:\n                        count_i += 1\n                    elif student[j] == 1:\n                        count_j += 1\n                \n                # Check if we can form two groups of size n/2\n                if count_i + count_both >= n // 2 and count_j + count_both >= n // 2 and count_i + count_j + count_both == n:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        \n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        \n        test_cases.append((n, availability))\n    \n    results = can_divide_students(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def can_divide_students(t, test_cases):\n    results = []\n    \n    for n, availability in test_cases:\n        possible = False\n        \n        # Iterate over all pairs of weekdays\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                group1_count = 0\n                group2_count = 0\n                \n                # Count students who can attend on day1 and day2\n                for student in availability:\n                    if student[day1] == 1:\n                        group1_count += 1\n                    if student[day2] == 1:\n                        group2_count += 1\n                \n                # Check if both groups can have n/2 students\n                if group1_count >= n // 2 and group2_count >= n // 2:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        availability = []\n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        \n        test_cases.append((n, availability))\n    \n    results = can_divide_students(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_divide_students(t, test_cases):\n    results = []\n    for n, availability in test_cases:\n        possible = False\n        # Iterate over all pairs of weekdays\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                count_day1 = 0\n                count_day2 = 0\n                both_days = 0\n                # Count students who can attend on day1, day2, and both\n                for student in availability:\n                    if student[day1] == 1 and student[day2] == 1:\n                        both_days += 1\n                    elif student[day1] == 1:\n                        count_day1 += 1\n                    elif student[day2] == 1:\n                        count_day2 += 1\n                \n                # Check if we can divide students into two equal groups\n                if count_day1 + both_days >= n // 2 and count_day2 + both_days >= n // 2:\n                    possible = True\n                    break\n            if possible:\n                break\n        results.append(\"YES\" if possible else \"NO\")\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        test_cases.append((n, availability))\n    \n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        \n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        \n        possible = False\n        \n        # Check all pairs of days\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                count_day1 = 0\n                count_day2 = 0\n                both_days = 0\n                \n                for student in availability:\n                    if student[day1] == 1 and student[day2] == 1:\n                        both_days += 1\n                    elif student[day1] == 1:\n                        count_day1 += 1\n                    elif student[day2] == 1:\n                        count_day2 += 1\n                \n                # Check if we can split students into two groups of n/2\n                if count_day1 + both_days >= n // 2 and count_day2 + both_days >= n // 2:\n                    possible = True\n                    break\n            if possible:\n                break\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_divide_students(t, test_cases):\n    results = []\n    for n, availability in test_cases:\n        possible = False\n        # Iterate over all pairs of weekdays\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                count_day1 = 0\n                count_day2 = 0\n                both_days = 0\n                \n                # Count students who can attend on day1, day2, and both\n                for student in availability:\n                    if student[day1] == 1 and student[day2] == 1:\n                        both_days += 1\n                    elif student[day1] == 1:\n                        count_day1 += 1\n                    elif student[day2] == 1:\n                        count_day2 += 1\n                \n                # Check if we can divide students into two groups of n/2\n                if count_day1 + both_days >= n // 2 and count_day2 + both_days >= n // 2:\n                    possible = True\n                    break\n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        test_cases.append((n, availability))\n    \n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_divide_students(t, test_cases):\n    results = []\n    for n, availability in test_cases:\n        possible = False\n        # Iterate over all pairs of weekdays\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                group1_count = 0\n                group2_count = 0\n                both_count = 0\n                # Count students who can attend on day1, day2, or both\n                for student in availability:\n                    if student[day1] == 1 and student[day2] == 1:\n                        both_count += 1\n                    elif student[day1] == 1:\n                        group1_count += 1\n                    elif student[day2] == 1:\n                        group2_count += 1\n                # Check if both groups can have n/2 students\n                needed = n // 2\n                if group1_count <= needed and group2_count <= needed and group1_count + group2_count + both_count >= n:\n                    possible = True\n                    break\n            if possible:\n                break\n        results.append(\"YES\" if possible else \"NO\")\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        test_cases.append((n, availability))\n    \n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_divide_students(t, test_cases):\n    results = []\n    \n    for n, availability in test_cases:\n        possible = False\n        \n        # Iterate over all pairs of weekdays\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                group1_count = 0\n                group2_count = 0\n                \n                # Count students who can attend on day1 and day2\n                for student in availability:\n                    if student[day1] == 1:\n                        group1_count += 1\n                    if student[day2] == 1:\n                        group2_count += 1\n                \n                # Check if both groups can have equal size\n                if group1_count >= n // 2 and group2_count >= n // 2:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        availability = []\n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        \n        test_cases.append((n, availability))\n    \n    results = can_divide_students(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        \n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        \n        possible = False\n        \n        # Check all pairs of days (i, j)\n        for i in range(5):\n            for j in range(i + 1, 5):\n                count_i = 0\n                count_j = 0\n                count_both = 0\n                \n                for student in availability:\n                    if student[i] == 1 and student[j] == 1:\n                        count_both += 1\n                    elif student[i] == 1:\n                        count_i += 1\n                    elif student[j] == 1:\n                        count_j += 1\n                \n                # Check if we can form two groups of size n/2\n                if count_i + count_both >= n // 2 and count_j + count_both >= n // 2:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_divide_students(t, test_cases):\n    results = []\n    \n    for n, availability in test_cases:\n        possible = False\n        \n        # Iterate over all pairs of days (i, j) where i != j\n        for i in range(5):\n            for j in range(i + 1, 5):\n                count_i = count_j = count_both = 0\n                \n                # Count students who can attend on day i, day j, both, or neither\n                for student in availability:\n                    if student[i] == 1 and student[j] == 1:\n                        count_both += 1\n                    elif student[i] == 1:\n                        count_i += 1\n                    elif student[j] == 1:\n                        count_j += 1\n                \n                # Check if it's possible to split the students into two equal groups\n                if count_i + count_both >= n // 2 and count_j + count_both >= n // 2:\n                    possible = True\n                    break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        \n        for _ in range(n):\n            availability.append(list(map(int, data[index:index + 5])))\n            index += 5\n        \n        test_cases.append((n, availability))\n    \n    results = can_divide_students(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        \n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        \n        possible = False\n        \n        # Iterate over all pairs of distinct days (i, j)\n        for i in range(5):\n            for j in range(i + 1, 5):\n                count_i = 0\n                count_j = 0\n                count_both = 0\n                \n                for student in availability:\n                    if student[i] == 1 and student[j] == 1:\n                        count_both += 1\n                    elif student[i] == 1:\n                        count_i += 1\n                    elif student[j] == 1:\n                        count_j += 1\n                \n                # Check if we can form two groups of size n/2\n                if count_i + count_both >= n // 2 and count_j + count_both >= n // 2:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_divide_students(t, test_cases):\n    results = []\n    \n    for case in test_cases:\n        n, availability = case\n        possible = False\n        \n        # Iterate over all pairs of days (i, j) where i != j\n        for i in range(5):\n            for j in range(i + 1, 5):\n                count_i = 0\n                count_j = 0\n                count_both = 0\n                \n                for student in availability:\n                    if student[i] == 1 and student[j] == 1:\n                        count_both += 1\n                    elif student[i] == 1:\n                        count_i += 1\n                    elif student[j] == 1:\n                        count_j += 1\n                \n                # Check if we can form two groups of size n/2\n                if count_i + count_both >= n // 2 and count_j + count_both >= n // 2 and count_i + count_j + count_both == n:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        \n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        \n        test_cases.append((n, availability))\n    \n    results = can_divide_students(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the availability matrix for each test case.\",\n      \"details\": \"Read the number of test cases t. For each test case, read the number of students n and then read the n lines of availability, each containing 5 integers representing the days of the week.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to split students into two equal groups with distinct convenient days.\",\n      \"details\": \"For each test case, iterate over all pairs of days (i, j) where i != j. Check if it's possible to divide students into two groups such that one group can attend on day i and the other on day j.\"\n    },\n    {\n      \"description\": \"Check the feasibility of grouping students for each pair of days.\",\n      \"details\": \"For each pair of days, count the number of students who can attend on each day. Ensure that the sum of students who can attend on either day is at least n, and that each group can be formed with n/2 students.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, if a valid grouping is found for any pair of days, output 'YES'. Otherwise, output 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, read the number of students and their availability matrix.\",\n    \"For each pair of distinct days, check if it's possible to divide students into two groups of equal size where each group can attend on one of the days.\",\n    \"If a valid division is found for any pair of days, output 'YES'. Otherwise, output 'NO'.\"\n  ]\n}\n```", "Round_0": {"code": "def can_divide_students(t, test_cases):\n    results = []\n    \n    for case in test_cases:\n        n, availability = case\n        possible = False\n        \n        # Iterate over all pairs of days (i, j) where i != j\n        for i in range(5):\n            for j in range(i + 1, 5):\n                count_i = 0\n                count_j = 0\n                count_both = 0\n                \n                for student in availability:\n                    if student[i] == 1 and student[j] == 1:\n                        count_both += 1\n                    elif student[i] == 1:\n                        count_i += 1\n                    elif student[j] == 1:\n                        count_j += 1\n                \n                # Check if we can form two groups of size n/2\n                if count_i + count_both >= n // 2 and count_j + count_both >= n // 2 and count_i + count_j + count_both == n:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        \n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        \n        test_cases.append((n, availability))\n    \n    results = can_divide_students(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: unexpected EOF while parsing (<string>, line 112)"}, "Round_1": {"code": "def can_divide_students(t, test_cases):\n    results = []\n    \n    for case in test_cases:\n        n, availability = case\n        possible = False\n        \n        # Iterate over all pairs of days (i, j) where i != j\n        for i in range(5):\n            for j in range(i + 1, 5):\n                count_i = 0\n                count_j = 0\n                count_both = 0\n                \n                for student in availability:\n                    if student[i] == 1 and student[j] == 1:\n                        count_both += 1\n                    elif student[i] == 1:\n                        count_i += 1\n                    elif student[j] == 1:\n                        count_j += 1\n                \n                # Check if we can form two groups of size n/2\n                if count_i + count_both >= n // 2 and count_j + count_both >= n // 2 and count_i + count_j + count_both == n:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        \n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        \n        test_cases.append((n, availability))\n    \n    results = can_divide_students(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the student availability data for each test case.\",\n      \"steps\": [\n        \"Read the integer t, the number of test cases.\",\n        \"For each test case, read the integer n, the number of students.\",\n        \"For each student, read the list of 5 integers representing their availability for each weekday.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if it is possible to divide students into two equal groups with distinct convenient weekdays for lessons.\",\n      \"steps\": [\n        \"For each test case, iterate over all pairs of weekdays.\",\n        \"For each pair of weekdays, check if it is possible to divide students into two groups such that each group can attend lessons on one of the weekdays in the pair.\",\n        \"Ensure that each group has exactly n/2 students and all students in a group find the chosen weekday convenient.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"If a valid division is found for a test case, output 'YES'.\",\n        \"If no valid division is found, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and student availability data.\",\n    \"For each test case, iterate over all pairs of weekdays to check possible group divisions.\",\n    \"For each pair, attempt to divide students into two groups with equal size and convenient weekdays.\",\n    \"Output 'YES' if a valid division is found, otherwise output 'NO'.\"\n  ]\n}\n```", "Round_0": {"code": "def can_divide_students(t, test_cases):\n    results = []\n    \n    for n, availability in test_cases:\n        possible = False\n        \n        # Iterate over all pairs of weekdays\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                group1_count = 0\n                group2_count = 0\n                \n                # Count students who can attend on day1 and day2\n                for student in availability:\n                    if student[day1] == 1:\n                        group1_count += 1\n                    if student[day2] == 1:\n                        group2_count += 1\n                \n                # Check if both groups can have n/2 students\n                if group1_count >= n // 2 and group2_count >= n // 2:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        availability = []\n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        \n        test_cases.append((n, availability))\n    \n    results = can_divide_students(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: unexpected EOF while parsing (<string>, line 105)"}, "Round_1": {"code": "def can_divide_students(t, test_cases):\n    results = []\n    \n    for n, availability in test_cases:\n        possible = False\n        \n        # Iterate over all pairs of weekdays\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                group1_count = 0\n                group2_count = 0\n                \n                # Count students who can attend on day1 and day2\n                for student in availability:\n                    if student[day1] == 1:\n                        group1_count += 1\n                    if student[day2] == 1:\n                        group2_count += 1\n                \n                # Check if both groups can have n/2 students\n                if group1_count >= n // 2 and group2_count >= n // 2:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        availability = []\n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        \n        test_cases.append((n, availability))\n    \n    results = can_divide_students(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the availability matrix for each test case.\",\n      \"steps\": [\n        \"Read the integer t, which represents the number of test cases.\",\n        \"For each test case, read the integer n, which represents the number of students.\",\n        \"For each student, read the 5 integers representing their availability for each weekday.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if it's possible to divide students into two groups with equal sizes and assign them to different weekdays.\",\n      \"steps\": [\n        \"For each test case, iterate over all pairs of weekdays.\",\n        \"For each pair of weekdays, check if it's possible to divide students into two groups such that each student can attend the lesson on their group's assigned day.\",\n        \"Ensure that both groups have equal sizes and maximize overall student convenience.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"If a valid division is found for a test case, output 'YES'.\",\n        \"If no valid division is possible, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and student availability data.\",\n    \"For each test case, iterate over all pairs of weekdays to find a valid division of students into two groups.\",\n    \"Check the feasibility of dividing students into two groups with equal sizes for each pair of weekdays.\",\n    \"Output 'YES' if a valid division is found, otherwise output 'NO'.\"\n  ]\n}\n```", "Round_0": {"code": "def can_divide_students(t, test_cases):\n    results = []\n    for n, availability in test_cases:\n        possible = False\n        # Iterate over all pairs of weekdays\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                count_day1 = 0\n                count_day2 = 0\n                both_days = 0\n                # Count students who can attend on day1, day2, and both\n                for student in availability:\n                    if student[day1] == 1 and student[day2] == 1:\n                        both_days += 1\n                    elif student[day1] == 1:\n                        count_day1 += 1\n                    elif student[day2] == 1:\n                        count_day2 += 1\n                \n                # Check if we can divide students into two equal groups\n                if count_day1 + both_days >= n // 2 and count_day2 + both_days >= n // 2:\n                    possible = True\n                    break\n            if possible:\n                break\n        results.append(\"YES\" if possible else \"NO\")\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        test_cases.append((n, availability))\n    \n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: unexpected EOF while parsing (<string>, line 98)"}, "Round_1": {"code": "def can_divide_students(t, test_cases):\n    results = []\n    for n, availability in test_cases:\n        possible = False\n        # Iterate over all pairs of weekdays\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                count_day1 = 0\n                count_day2 = 0\n                both_days = 0\n                # Count students who can attend on day1, day2, and both\n                for student in availability:\n                    if student[day1] == 1 and student[day2] == 1:\n                        both_days += 1\n                    elif student[day1] == 1:\n                        count_day1 += 1\n                    elif student[day2] == 1:\n                        count_day2 += 1\n                \n                # Check if we can divide students into two equal groups\n                if count_day1 + both_days >= n // 2 and count_day2 + both_days >= n // 2:\n                    possible = True\n                    break\n            if possible:\n                break\n        results.append(\"YES\" if possible else \"NO\")\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        test_cases.append((n, availability))\n    \n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the availability matrix for each test case.\",\n      \"steps\": [\n        \"Read the integer t, the number of test cases.\",\n        \"For each test case, read the integer n, the number of students.\",\n        \"For each student, read the list of 5 integers representing their availability for each weekday.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if it is possible to divide students into two groups with equal sizes and assign different weekdays for each group.\",\n      \"steps\": [\n        \"For each pair of weekdays, check if it is possible to divide students into two groups such that each student can attend the lesson on their group's assigned day.\",\n        \"Count the number of students available on each of the two chosen days.\",\n        \"Ensure that the total number of students available on both days is at least n (since n is even, n/2 students must be available for each group).\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"If a valid division is found for a test case, output 'YES'.\",\n        \"If no valid division is found, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the availability matrix for each test case.\",\n    \"For each test case, iterate over all pairs of weekdays.\",\n    \"For each pair, count the number of students available on each day.\",\n    \"Check if the sum of students available on both days is at least n.\",\n    \"If a valid pair is found, store 'YES' for the test case; otherwise, store 'NO'.\",\n    \"Output the stored results for all test cases.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        \n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        \n        possible = False\n        \n        # Check all pairs of days\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                count_day1 = 0\n                count_day2 = 0\n                both_days = 0\n                \n                for student in availability:\n                    if student[day1] == 1 and student[day2] == 1:\n                        both_days += 1\n                    elif student[day1] == 1:\n                        count_day1 += 1\n                    elif student[day2] == 1:\n                        count_day2 += 1\n                \n                # Check if we can split students into two groups of n/2\n                if count_day1 + both_days >= n // 2 and count_day2 + both_days >= n // 2:\n                    possible = True\n                    break\n            if possible:\n                break\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 91)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        \n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        \n        possible = False\n        \n        # Check all pairs of days\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                count_day1 = 0\n                count_day2 = 0\n                both_days = 0\n                \n                for student in availability:\n                    if student[day1] == 1 and student[day2] == 1:\n                        both_days += 1\n                    elif student[day1] == 1:\n                        count_day1 += 1\n                    elif student[day2] == 1:\n                        count_day2 += 1\n                \n                # Check if we can split students into two groups of n/2\n                if count_day1 + both_days >= n // 2 and count_day2 + both_days >= n // 2:\n                    possible = True\n                    break\n            if possible:\n                break\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the student availability data for each test case.\",\n      \"steps\": [\n        \"Read the integer t, the number of test cases.\",\n        \"For each test case, read the integer n, the number of students.\",\n        \"For each student, read the list of 5 integers representing their availability for each weekday.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if it is possible to divide students into two equal groups with distinct convenient weekdays for lessons.\",\n      \"steps\": [\n        \"For each test case, iterate over all pairs of weekdays.\",\n        \"For each pair of weekdays, check if it is possible to divide students into two groups such that each group can attend lessons on one of the weekdays in the pair.\",\n        \"Ensure that each group has exactly n/2 students and all students in a group find the chosen weekday convenient.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"If a valid division is found for a test case, output 'YES'.\",\n        \"If no valid division is found, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and student availability data.\",\n    \"For each test case, iterate over all pairs of weekdays to check possible group divisions.\",\n    \"For each pair, attempt to divide students into two groups with equal size and convenient weekdays.\",\n    \"Output 'YES' if a valid division is found, otherwise output 'NO'.\"\n  ]\n}\n```", "Round_0": {"code": "def can_divide_students(t, test_cases):\n    results = []\n    for n, availability in test_cases:\n        possible = False\n        # Iterate over all pairs of weekdays\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                count_day1 = 0\n                count_day2 = 0\n                both_days = 0\n                \n                # Count students who can attend on day1, day2, and both\n                for student in availability:\n                    if student[day1] == 1 and student[day2] == 1:\n                        both_days += 1\n                    elif student[day1] == 1:\n                        count_day1 += 1\n                    elif student[day2] == 1:\n                        count_day2 += 1\n                \n                # Check if we can divide students into two groups of n/2\n                if count_day1 + both_days >= n // 2 and count_day2 + both_days >= n // 2:\n                    possible = True\n                    break\n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        test_cases.append((n, availability))\n    \n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: unexpected EOF while parsing (<string>, line 101)"}, "Round_1": {"code": "def can_divide_students(t, test_cases):\n    results = []\n    for n, availability in test_cases:\n        possible = False\n        # Iterate over all pairs of weekdays\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                count_day1 = 0\n                count_day2 = 0\n                both_days = 0\n                \n                # Count students who can attend on day1, day2, and both\n                for student in availability:\n                    if student[day1] == 1 and student[day2] == 1:\n                        both_days += 1\n                    elif student[day1] == 1:\n                        count_day1 += 1\n                    elif student[day2] == 1:\n                        count_day2 += 1\n                \n                # Check if we can divide students into two groups of n/2\n                if count_day1 + both_days >= n // 2 and count_day2 + both_days >= n // 2:\n                    possible = True\n                    break\n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        test_cases.append((n, availability))\n    \n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the student availability data for each test case.\",\n      \"steps\": [\n        \"Read the integer t, the number of test cases.\",\n        \"For each test case, read the integer n, the number of students.\",\n        \"For each student, read the list of 5 integers representing their availability for each weekday.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if it is possible to divide students into two equal groups with distinct convenient weekdays for lessons.\",\n      \"steps\": [\n        \"For each test case, iterate over all pairs of weekdays.\",\n        \"For each pair of weekdays, check if it is possible to divide students into two groups such that each group can attend lessons on one of the weekdays in the pair.\",\n        \"Ensure that each group has exactly n/2 students and all students in a group find the chosen weekday convenient.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"If a valid division is found for a test case, output 'YES'.\",\n        \"If no valid division is found, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and student availability data.\",\n    \"For each test case, iterate over all pairs of weekdays to check possible group divisions.\",\n    \"For each pair, attempt to divide students into two groups with equal size and convenient weekdays.\",\n    \"Output 'YES' if a valid division is found, otherwise output 'NO'.\"\n  ]\n}\n```", "Round_0": {"code": "def can_divide_students(t, test_cases):\n    results = []\n    for n, availability in test_cases:\n        possible = False\n        # Iterate over all pairs of weekdays\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                group1_count = 0\n                group2_count = 0\n                # Count students who can attend on day1 and day2\n                for student in availability:\n                    if student[day1] == 1:\n                        group1_count += 1\n                    if student[day2] == 1:\n                        group2_count += 1\n                # Check if both groups can have n/2 students\n                if group1_count >= n // 2 and group2_count >= n // 2:\n                    possible = True\n                    break\n            if possible:\n                break\n        results.append(\"YES\" if possible else \"NO\")\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        test_cases.append((n, availability))\n    \n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: unexpected EOF while parsing (<string>, line 96)"}, "Round_1": {"code": "def can_divide_students(t, test_cases):\n    results = []\n    for n, availability in test_cases:\n        possible = False\n        # Iterate over all pairs of weekdays\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                group1_count = 0\n                group2_count = 0\n                both_count = 0\n                # Count students who can attend on day1, day2, or both\n                for student in availability:\n                    if student[day1] == 1 and student[day2] == 1:\n                        both_count += 1\n                    elif student[day1] == 1:\n                        group1_count += 1\n                    elif student[day2] == 1:\n                        group2_count += 1\n                # Check if both groups can have n/2 students\n                needed = n // 2\n                if group1_count <= needed and group2_count <= needed and group1_count + group2_count + both_count >= n:\n                    possible = True\n                    break\n            if possible:\n                break\n        results.append(\"YES\" if possible else \"NO\")\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        test_cases.append((n, availability))\n    \n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the availability matrix for each test case.\",\n      \"steps\": [\n        \"Read the integer t, the number of test cases.\",\n        \"For each test case, read the integer n, the number of students.\",\n        \"For each student, read the list of 5 integers representing their availability for each weekday.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if it is possible to divide students into two groups with equal sizes and assign them to different weekdays.\",\n      \"steps\": [\n        \"For each test case, iterate over all pairs of weekdays.\",\n        \"For each pair of weekdays, check if it is possible to divide students into two groups such that each student can attend the lesson on their group's assigned day.\",\n        \"Ensure that both groups have equal sizes and maximize student convenience.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"If a valid division is found for a test case, output 'YES'.\",\n        \"If no valid division is possible, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a list to store results for each test case.\",\n    \"Parse the input to extract the number of test cases and student availability data.\",\n    \"For each test case, iterate over all pairs of weekdays to check possible group divisions.\",\n    \"For each pair, attempt to divide students into two groups with equal sizes based on their availability.\",\n    \"Store 'YES' if a valid division is found, otherwise store 'NO'.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```", "Round_0": {"code": "def can_divide_students(t, test_cases):\n    results = []\n    \n    for n, availability in test_cases:\n        possible = False\n        \n        # Iterate over all pairs of weekdays\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                group1_count = 0\n                group2_count = 0\n                \n                # Count students who can attend on day1 and day2\n                for student in availability:\n                    if student[day1] == 1:\n                        group1_count += 1\n                    if student[day2] == 1:\n                        group2_count += 1\n                \n                # Check if both groups can have equal size\n                if group1_count >= n // 2 and group2_count >= n // 2:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        availability = []\n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        \n        test_cases.append((n, availability))\n    \n    results = can_divide_students(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: unexpected EOF while parsing (<string>, line 105)"}, "Round_1": {"code": "def can_divide_students(t, test_cases):\n    results = []\n    \n    for n, availability in test_cases:\n        possible = False\n        \n        # Iterate over all pairs of weekdays\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                group1_count = 0\n                group2_count = 0\n                \n                # Count students who can attend on day1 and day2\n                for student in availability:\n                    if student[day1] == 1:\n                        group1_count += 1\n                    if student[day2] == 1:\n                        group2_count += 1\n                \n                # Check if both groups can have equal size\n                if group1_count >= n // 2 and group2_count >= n // 2:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        availability = []\n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        \n        test_cases.append((n, availability))\n    \n    results = can_divide_students(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the availability matrix for each test case.\",\n      \"details\": \"Read the number of test cases t. For each test case, read the number of students n and then read the n lines of availability, each containing 5 integers representing the days of the week.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to split students into two groups with equal sizes and assign them to two different days.\",\n      \"details\": \"For each pair of days, check if it's possible to divide the students into two groups such that each student can attend the lesson on their group's assigned day.\"\n    },\n    {\n      \"description\": \"Check the feasibility of the division for each pair of days.\",\n      \"details\": \"For each pair of days (i, j), count the number of students who can attend on day i and the number who can attend on day j. Ensure that the sum of students who can attend on either day is at least n, and that each group can be formed with n/2 students.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, output 'YES' if a valid division is possible, otherwise output 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases t.\",\n    \"For each test case, perform the following steps:\",\n    \"  Read the number of students n.\",\n    \"  Read the availability matrix for n students.\",\n    \"  For each pair of days (i, j) where i != j:\",\n    \"    Count the number of students who can attend on day i and day j.\",\n    \"    Check if it's possible to form two groups of size n/2 with these counts.\",\n    \"    If a valid division is found, mark the test case as 'YES' and break the loop.\",\n    \"  If no valid division is found after checking all pairs, mark the test case as 'NO'.\",\n    \"Output the result for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        \n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        \n        possible = False\n        \n        # Check all pairs of days (i, j)\n        for i in range(5):\n            for j in range(i + 1, 5):\n                count_i = 0\n                count_j = 0\n                count_both = 0\n                \n                for student in availability:\n                    if student[i] == 1 and student[j] == 1:\n                        count_both += 1\n                    elif student[i] == 1:\n                        count_i += 1\n                    elif student[j] == 1:\n                        count_j += 1\n                \n                # Check if we can form two groups of size n/2\n                if count_i + count_both >= n // 2 and count_j + count_both >= n // 2:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 89)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        \n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        \n        possible = False\n        \n        # Check all pairs of days (i, j)\n        for i in range(5):\n            for j in range(i + 1, 5):\n                count_i = 0\n                count_j = 0\n                count_both = 0\n                \n                for student in availability:\n                    if student[i] == 1 and student[j] == 1:\n                        count_both += 1\n                    elif student[i] == 1:\n                        count_i += 1\n                    elif student[j] == 1:\n                        count_j += 1\n                \n                # Check if we can form two groups of size n/2\n                if count_i + count_both >= n // 2 and count_j + count_both >= n // 2:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the availability matrix for each test case.\",\n      \"details\": \"Read the number of test cases t. For each test case, read the number of students n and then read the n lines of availability, each containing 5 integers representing the days of the week.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to split students into two groups with equal sizes and assign them to two different days.\",\n      \"details\": \"For each pair of days, check if it's possible to divide the students into two groups such that each student can attend the lesson on their group's assigned day.\"\n    },\n    {\n      \"description\": \"Check the feasibility of the group division for each pair of days.\",\n      \"details\": \"For each pair of days (i, j), count the number of students who can attend on day i, day j, both days, or neither. Use these counts to determine if a valid division is possible.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, output 'YES' if a valid division is possible, otherwise output 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases t.\",\n    \"For each test case, perform the following steps:\",\n    \"  Read the number of students n.\",\n    \"  Initialize a list to store the availability of each student.\",\n    \"  For each student, read their availability for the 5 days and store it.\",\n    \"  Iterate over all pairs of days (i, j) where i != j.\",\n    \"    For each pair, count the number of students who can attend on day i, day j, both, or neither.\",\n    \"    Check if it's possible to split the students into two equal groups based on these counts.\",\n    \"    If a valid split is found for any pair, mark the test case as 'YES' and break the loop.\",\n    \"  If no valid split is found for any pair, mark the test case as 'NO'.\",\n    \"Output the result for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def can_divide_students(t, test_cases):\n    results = []\n    \n    for n, availability in test_cases:\n        possible = False\n        \n        # Iterate over all pairs of days (i, j) where i != j\n        for i in range(5):\n            for j in range(i + 1, 5):\n                count_i = count_j = count_both = 0\n                \n                # Count students who can attend on day i, day j, both, or neither\n                for student in availability:\n                    if student[i] == 1 and student[j] == 1:\n                        count_both += 1\n                    elif student[i] == 1:\n                        count_i += 1\n                    elif student[j] == 1:\n                        count_j += 1\n                \n                # Check if it's possible to split the students into two equal groups\n                if count_i + count_both >= n // 2 and count_j + count_both >= n // 2:\n                    possible = True\n                    break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        \n        for _ in range(n):\n            availability.append(list(map(int, data[index:index + 5])))\n            index += 5\n        \n        test_cases.append((n, availability))\n    \n    results = can_divide_students(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: unexpected EOF while parsing (<string>, line 104)"}, "Round_1": {"code": "def can_divide_students(t, test_cases):\n    results = []\n    \n    for n, availability in test_cases:\n        possible = False\n        \n        # Iterate over all pairs of days (i, j) where i != j\n        for i in range(5):\n            for j in range(i + 1, 5):\n                count_i = count_j = count_both = 0\n                \n                # Count students who can attend on day i, day j, both, or neither\n                for student in availability:\n                    if student[i] == 1 and student[j] == 1:\n                        count_both += 1\n                    elif student[i] == 1:\n                        count_i += 1\n                    elif student[j] == 1:\n                        count_j += 1\n                \n                # Check if it's possible to split the students into two equal groups\n                if count_i + count_both >= n // 2 and count_j + count_both >= n // 2:\n                    possible = True\n                    break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        \n        for _ in range(n):\n            availability.append(list(map(int, data[index:index + 5])))\n            index += 5\n        \n        test_cases.append((n, availability))\n    \n    results = can_divide_students(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the availability matrix for each test case.\",\n      \"details\": \"Read the number of test cases t. For each test case, read the number of students n and then read the n lines of availability, each containing 5 integers representing the days of the week.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to split students into two equal groups with distinct convenient days.\",\n      \"details\": \"For each test case, iterate over all pairs of days (i, j) where i != j. Check if it's possible to divide students into two groups such that one group can attend on day i and the other on day j.\"\n    },\n    {\n      \"description\": \"Check the feasibility of grouping for each pair of days.\",\n      \"details\": \"For each pair of days, count the number of students who can attend on each day. Ensure that the sum of students who can attend on either day is at least n, and that each group can be formed with n/2 students.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, if a valid grouping is found for any pair of days, output 'YES'. Otherwise, output 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases t.\",\n    \"For each test case, perform the following steps:\",\n    \"  Read the number of students n.\",\n    \"  Read the availability matrix for n students.\",\n    \"  Iterate over all pairs of distinct days (i, j).\",\n    \"  For each pair, count the number of students who can attend on day i and day j.\",\n    \"  Check if it's possible to form two groups of size n/2 with these days.\",\n    \"  If a valid grouping is found for any pair, mark the test case as 'YES'.\",\n    \"  If no valid grouping is found after checking all pairs, mark the test case as 'NO'.\",\n    \"Output the result for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        \n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        \n        possible = False\n        \n        # Iterate over all pairs of distinct days (i, j)\n        for i in range(5):\n            for j in range(i + 1, 5):\n                count_i = 0\n                count_j = 0\n                count_both = 0\n                \n                for student in availability:\n                    if student[i] == 1 and student[j] == 1:\n                        count_both += 1\n                    elif student[i] == 1:\n                        count_i += 1\n                    elif student[j] == 1:\n                        count_j += 1\n                \n                # Check if we can form two groups of size n/2\n                if count_i + count_both >= n // 2 and count_j + count_both >= n // 2:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the availability matrix for each test case.\",\n      \"details\": \"Read the number of test cases t. For each test case, read the number of students n and then read the n lines of availability, each containing 5 integers representing the days of the week.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to split students into two equal groups with distinct convenient days.\",\n      \"details\": \"For each test case, iterate over all pairs of days (i, j) where i != j. Check if it's possible to divide students into two groups such that one group can attend on day i and the other on day j.\"\n    },\n    {\n      \"description\": \"Check the feasibility of grouping students for each pair of days.\",\n      \"details\": \"For each pair of days, count the number of students who can attend on each day. Ensure that the sum of students who can attend on either day is at least n, and that each group can be formed with n/2 students.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, if a valid grouping is found for any pair of days, output 'YES'. Otherwise, output 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, read the number of students and their availability matrix.\",\n    \"For each pair of distinct days, check if it's possible to divide students into two groups of equal size where each group can attend on one of the days.\",\n    \"If a valid division is found for any pair of days, output 'YES'. Otherwise, output 'NO'.\"\n  ]\n}\n```", "Round_0": {"code": "def can_divide_students(t, test_cases):\n    results = []\n    \n    for case in test_cases:\n        n, availability = case\n        possible = False\n        \n        # Iterate over all pairs of days (i, j) where i != j\n        for i in range(5):\n            for j in range(i + 1, 5):\n                count_i = 0\n                count_j = 0\n                count_both = 0\n                \n                for student in availability:\n                    if student[i] == 1 and student[j] == 1:\n                        count_both += 1\n                    elif student[i] == 1:\n                        count_i += 1\n                    elif student[j] == 1:\n                        count_j += 1\n                \n                # Check if we can form two groups of size n/2\n                if count_i + count_both >= n // 2 and count_j + count_both >= n // 2 and count_i + count_j + count_both == n:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        \n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        \n        test_cases.append((n, availability))\n    \n    results = can_divide_students(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: unexpected EOF while parsing (<string>, line 112)"}, "Round_1": {"code": "def can_divide_students(t, test_cases):\n    results = []\n    \n    for case in test_cases:\n        n, availability = case\n        possible = False\n        \n        # Iterate over all pairs of days (i, j) where i != j\n        for i in range(5):\n            for j in range(i + 1, 5):\n                count_i = 0\n                count_j = 0\n                count_both = 0\n                \n                for student in availability:\n                    if student[i] == 1 and student[j] == 1:\n                        count_both += 1\n                    elif student[i] == 1:\n                        count_i += 1\n                    elif student[j] == 1:\n                        count_j += 1\n                \n                # Check if we can form two groups of size n/2\n                if count_i + count_both >= n // 2 and count_j + count_both >= n // 2 and count_i + count_j + count_both == n:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        \n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        \n        test_cases.append((n, availability))\n    \n    results = can_divide_students(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}], "scores": [], "pass_results": [false, true, false, false, false, false, false, false, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 445, "prompt": "n students attended the initial meeting of the Berland SU programming course (n is an even number). All students will be split into two groups, each attending exactly one lesson each week on one of the five working days (Monday, Tuesday, Wednesday, Thursday and Friday) on different days, and furthermore, both groups should contain the same number of students. Each student has filled a survey in which they told which days of the week are convenient for them to attend a lesson, and which are not. Your task is to figure out if it is possible to select two distinct weekdays to schedule the lessons for the groups (the first group will attend the lesson on the first chosen day, the second group will attend the lesson on the second chosen day), and divide the students into two groups, so the groups have equal sizes, and for each student, the chosen lesson day for their group is convenient. Ensure that this distribution maximizes overall student convenience.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days.", "mutate_method": "rephrase_one", "save_node": true, "parent_index": 221}
