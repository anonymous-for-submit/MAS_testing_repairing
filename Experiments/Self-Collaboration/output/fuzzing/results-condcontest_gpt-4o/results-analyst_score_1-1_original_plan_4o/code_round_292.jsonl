{"name": "1600_F. Party Organization", "description": "On the great island of Baltia, there live N people, numbered from 1 to N. There are exactly M pairs of people that are friends with each other. The people of Baltia want to organize a successful party, but they have very strict rules on what a party is and when the party is successful. On the island of Baltia, a party is a gathering of exactly 5 people. The party is considered to be successful if either all the people at the party are friends with each other (so that they can all talk to each other without having to worry about talking to someone they are not friends with) or no two people at the party are friends with each other (so that everyone can just be on their phones without anyone else bothering them). Please help the people of Baltia organize a successful party or tell them that it's impossible to do so.\n\nInput\n\nThe first line contains two integer numbers, N (5 \u2264 N \u2264 2*10^5) and M (0 \u2264 M \u2264 2*10^5) \u2013 the number of people that live in Baltia, and the number of friendships. The next M lines each contains two integers U_i and V_i (1 \u2264 U_i,V_i \u2264 N) \u2013 meaning that person U_i is friends with person V_i. Two friends can not be in the list of friends twice (no pairs are repeated) and a person can be friends with themselves (U_i \u2260 V_i).\n\nOutput\n\nIf it's possible to organize a successful party, print 5 numbers indicating which 5 people should be invited to the party. If it's not possible to organize a successful party, print -1 instead. If there are multiple successful parties possible, print any.\n\nExamples\n\nInput\n\n\n6 3\n1 4\n4 2\n5 4\n\n\nOutput\n\n\n1 2 3 5 6\n\n\nInput\n\n\n5 4\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n-1", "tags": ["brute force", "math", "probabilities"], "difficulty": 12, "id": 1600, "sample_io": [{"input": "5 4\n1 2\n2 3\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n4 2\n5 4\n", "output": ["1 2 3 5 6\n"]}], "test_list": [{"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 5\n2 4\n6 3\n1 2\n", "output": ["1 2 4 5 6\n"]}, {"input": "10 8\n5 2\n1 8\n5 7\n1 9\n6 4\n2 7\n8 9\n3 10\n", "output": ["-1\n"]}, {"input": "20 57\n13 14\n12 20\n18 3\n17 20\n15 9\n18 13\n12 19\n2 4\n9 2\n12 11\n14 1\n16 11\n11 14\n16 4\n16 15\n11 19\n15 4\n10 15\n12 5\n9 3\n10 2\n10 4\n20 19\n14 7\n19 2\n5 8\n6 14\n4 17\n2 17\n17 9\n13 9\n19 9\n18 8\n12 16\n18 5\n7 1\n8 3\n11 20\n6 13\n20 5\n13 8\n17 19\n7 6\n9 11\n18 9\n13 1\n12 14\n7 3\n10 16\n20 2\n5 3\n10 17\n6 1\n8 9\n7 5\n12 15\n15 11\n", "output": ["-1\n"]}, {"input": "5 0\n", "output": ["1 2 3 4 5\n"]}, {"input": "10 8\n2 7\n2 9\n7 9\n8 10\n5 3\n1 4\n10 6\n6 8\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 2\n4 5\n6 4\n3 1\n1 6\n1 5\n2 4\n6 3\n1 2\n", "output": ["1 2 4 5 6\n"]}, {"input": "6 3\n1 4\n1 3\n5 1\n", "output": ["2 3 4 5 6\n"]}, {"input": "6 3\n1 2\n4 2\n5 2\n", "output": ["1 3 4 5 6\n"]}, {"input": "6 4\n1 4\n4 1\n2 4\n4 5\n", "output": ["1 2 3 5 6\n"]}, {"input": "7 4\n1 5\n4 3\n3 2\n5 2\n", "output": ["1 2 4 6 7\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n3 4\n3 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n4 2\n5 1\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 1\n1 6\n2 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n5 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 1\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n5 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 2\n2 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n5 2\n5 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n4 3\n", "output": ["-1\n"]}, {"input": "6 3\n1 2\n4 2\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n5 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n1 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 3\n1 3\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 3\n6 4\n3 1\n1 6\n1 5\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n6 1\n1 6\n1 4\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 2\n1 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 3\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n3 4\n4 2\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 3\n2 4\n4 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n1 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n2 4\n1 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n4 3\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n5 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 2\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n1 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n1 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 5\n4 3\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n1 4\n4 5\n", "output": ["-1\n"]}, {"input": "8 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 3\n2 4\n4 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 1\n1 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 1\n1 6\n4 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 4\n5 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 4\n1 3\n1 3\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n6 1\n1 6\n1 4\n2 6\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n5 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 2\n2 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 3\n3 2\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n3 5\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n3 1\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 1\n1 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 2\n1 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 5\n4 2\n5 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 4\n3 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n2 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 2\n1 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "6 4\n1 3\n2 3\n3 4\n3 1\n", "output": ["1 2 4 5 6\n"]}, {"input": "5 4\n2 5\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 1\n3 2\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n2 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 2\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n2 4\n2 1\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n1 6\n5 1\n", "output": ["2 3 4 5 6\n"]}, {"input": "5 4\n1 2\n2 3\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n2 3\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n1 3\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n4 1\n2 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n2 5\n", "output": ["-1\n"]}, {"input": "6 4\n1 4\n3 2\n2 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 3\n3 2\n5 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n2 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 3\n3 5\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n4 1\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n1 3\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 5\n2 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 2\n4 2\n5 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n1 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n2 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n2 3\n3 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 6\n4 1\n2 4\n4 5\n", "output": ["-1\n"]}, {"input": "20 57\n13 14\n12 20\n18 3\n17 20\n15 2\n18 13\n12 19\n2 4\n9 2\n12 11\n14 1\n16 11\n11 14\n16 4\n16 15\n11 19\n15 4\n10 15\n12 5\n9 3\n10 2\n10 4\n20 19\n14 7\n19 2\n5 8\n6 14\n4 17\n2 17\n17 9\n13 9\n19 9\n18 8\n12 16\n18 5\n7 1\n8 3\n11 20\n6 13\n20 5\n13 8\n17 19\n7 6\n9 11\n18 9\n13 1\n12 14\n7 3\n10 16\n20 2\n5 3\n10 17\n6 1\n8 9\n7 5\n12 15\n15 11\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 2\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n1 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n3 4\n4 3\n", "output": ["-1\n"]}, {"input": "6 3\n1 2\n5 2\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 1\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n2 1\n3 2\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n1 5\n6 4\n3 1\n1 6\n4 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 5\n2 3\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 4\n5 2\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n5 2\n5 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 4\n1 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 1\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n2 3\n3 4\n3 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n1 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 2\n1 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 3\n2 3\n3 4\n3 2\n", "output": ["1 2 4 5 6\n"]}, {"input": "5 4\n1 4\n2 1\n4 2\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n5 3\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 2\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 3\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n1 3\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n2 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n4 2\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 4\n4 1\n2 1\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n1 3\n2 3\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n2 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 1\n3 1\n3 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n2 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 5\n1 3\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n4 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 3\n4 3\n3 4\n3 2\n", "output": ["1 2 4 5 6\n"]}, {"input": "5 4\n1 4\n2 5\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 3\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n4 3\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n4 1\n4 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n2 1\n1 4\n1 5\n", "output": ["2 3 4 5 6\n"]}, {"input": "5 4\n1 2\n2 3\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n2 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 4\n3 1\n3 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n2 1\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n1 4\n4 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n5 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n3 2\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n2 4\n1 3\n", "output": ["-1\n"]}, {"input": "6 4\n1 4\n4 1\n3 4\n4 5\n", "output": ["1 2 3 5 6\n"]}, {"input": "5 4\n1 3\n4 1\n3 2\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n5 4\n3 2\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n4 3\n4 1\n", "output": ["1 2 3 5 6\n"]}, {"input": "5 4\n2 4\n4 3\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n3 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n1 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 2\n3 1\n1 6\n4 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 4\n5 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 4\n1 3\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n3 2\n2 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 1\n3 2\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 2\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 1\n2 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n3 1\n4 5\n", "output": ["-1\n"]}], "task_id": "codecontest/76", "repair_prompt": ["On the great island of Baltia, there live N people, numbered from 1 to N. There are exactly M pairs of people that are friends with each other. The people of Baltia want to organize a successful party. They have very strict rules on what a party is. They also have strict rules on when the party is successful. On the island of Baltia, a party is a gathering of exactly 5 people. The party is considered to be successful if either all the people at the party are friends with each other. This allows them to all talk to each other without having to worry about talking to someone they are not friends with. Or no two people at the party are friends with each other (so that everyone can just be on their phones without anyone else bothering them). Please help the people of Baltia organize a successful party or tell them that it's impossible to do so. You should consider edge cases, such as when N is less than 5 or when there are no friendships at all.\n\nInput\n\nThe first line contains two integer numbers, N (5 \u2264 N \u2264 2*10^5) and M (0 \u2264 M \u2264 2*10^5) \u2013 the number of people that live in Baltia, and the number of friendships. The next M lines each contains two integers U_i and V_i (1 \u2264 U_i,V_i \u2264 N) \u2013 meaning that person U_i is friends with person V_i. Two friends can not be in the list of friends twice (no pairs are repeated) and a person can be friends with themselves (U_i \u2260 V_i).\n\nOutput\n\nIf it's possible to organize a successful party, print 5 numbers indicating which 5 people should be invited to the party. If it's not possible to organize a successful party, print -1 instead. If there are multiple successful parties possible, print any.\n\nExamples\n\nInput\n\n\n6 3\n1 4\n4 2\n5 4\n\n\nOutput\n\n\n1 2 3 5 6\n\n\nInput\n\n\n5 4\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n-1\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Parse friendships\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships[u].add(v)\n        friendships[v].add(u)\n        index += 2\n    \n    # Check for a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(friendships[person]) >= 4:\n                friends = list(friendships[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[j] in friendships[friends[i]] and\n                                    friends[k] in friendships[friends[i]] and\n                                    friends[l] in friendships[friends[i]] and\n                                    friends[k] in friendships[friends[j]] and\n                                    friends[l] in friendships[friends[j]] and\n                                    friends[l] in friendships[friends[k]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(friendships[person]) < N - 5:\n                continue\n            current_non_friends = non_friends - friendships[person] - {person}\n            if len(current_non_friends) >= 4:\n                return [person] + list(current_non_friends)[:4]\n        return None\n    \n    # Try to find a clique of size 5\n    clique = find_clique_of_size_5()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    # Try to find an independent set of size 5\n    independent_set = find_independent_set_of_size_5()\n    if independent_set:\nmain()", "completions": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    friendships = []\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.append((U, V))\n        index += 2\n    \n    from collections import defaultdict\n    \n    # Create adjacency list for the graph\n    graph = defaultdict(set)\n    for u, v in friendships:\n        graph[u].add(v)\n        graph[v].add(u)\n    \n    # Check for a complete subgraph (clique) of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                clique = [person, friends[i], friends[j], friends[k], friends[l]]\n                                if all(graph[clique[x]].intersection(clique) == set(clique) - {clique[x]} for x in range(5)):\n                                    return clique\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(graph[person]) < N - 1:\n                non_friends -= graph[person]\n                non_friends -= {person}\n                if len(non_friends) >= 4:\n                    independent_set = [person] + list(non_friends)[:4]\n                    return independent_set\n        return None\n    \n    clique = find_clique_of_size_5()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    independent_set = find_independent_set_of_size_5()\n    if independent_set:\n        print(' '.join(map(str, independent_set)))\n        return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse the input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    friendships = []\n    for _ in range(M):\n        U = int(data[index])\n        index += 1\n        V = int(data[index])\n        index += 1\n        friendships.append((U, V))\n    \n    # Check if it's possible to have a party with exactly 5 people\n    if N < 5:\n        print(-1)\n        return\n    \n    # Construct the adjacency list\n    from collections import defaultdict\n    adj_list = defaultdict(set)\n    for u, v in friendships:\n        adj_list[u].add(v)\n        adj_list[v].add(u)\n    \n    # Function to find a clique of 5 people\n    def find_clique():\n        for person in range(1, N + 1):\n            if len(adj_list[person]) >= 4:\n                friends = list(adj_list[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in adj_list[friends[j]] and\n                                    friends[i] in adj_list[friends[k]] and\n                                    friends[i] in adj_list[friends[l]] and\n                                    friends[j] in adj_list[friends[k]] and\n                                    friends[j] in adj_list[friends[l]] and\n                                    friends[k] in adj_list[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Function to find an independent set of 5 people\n    def find_independent_set():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(non_friends) >= 5:\n                independent_set = list(non_friends)[:5]\n                return independent_set\n            non_friends -= adj_list[person]\n        return None\n    \n    # Try to find a clique\n    clique = find_clique()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    #\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Parse friendships\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships[u].add(v)\n        friendships[v].add(u)\n        index += 2\n    \n    # Check for a complete subgraph (clique) of 5 nodes\n    def find_clique():\n        for person in range(1, N + 1):\n            if len(friendships[person]) >= 4:\n                potential_clique = [person] + list(friendships[person])\n                if len(potential_clique) >= 5:\n                    for i in range(5):\n                        for j in range(i + 1, 5):\n                            if potential_clique[j] not in friendships[potential_clique[i]]:\n                                break\n                        else:\n                            continue\n                        break\n                    else:\n                        return potential_clique[:5]\n        return None\n    \n    # Check for an independent set of 5 nodes\n    def find_independent_set():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(friendships[person]) < N - 1:\n                non_friends -= friendships[person]\n                non_friends.remove(person)\n                if len(non_friends) >= 5:\n                    return list(non_friends)[:5]\n                non_friends.add(person)\n                non_friends.update(friendships[person])\n        return None\n    \n    # Try to find a clique\n    clique = find_clique()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    # Try to find an independent set\n    independent_set = find_independent_set()\n    if independent_set:\n        print(' '.join(map(str, independent_set)))\n        return\n    \n    # If neither is found, print -1\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Construct adjacency list\n    friends = defaultdict(set)\n    for _ in range(M):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        friends[u].add(v)\n        friends[v].add(u)\n    \n    # Function to find a clique of size 5\n    def find_clique():\n        for person in range(1, N + 1):\n            if len(friends[person]) >= 4:\n                potential_clique = [person] + list(friends[person])\n                if len(potential_clique) >= 5:\n                    for i in range(5):\n                        for j in range(i + 1, 5):\n                            if potential_clique[j] not in friends[potential_clique[i]]:\n                                break\n                        else:\n                            continue\n                        break\n                    else:\n                        return potential_clique[:5]\n        return None\n    \n    # Function to find an independent set of size 5\n    def find_independent_set():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(non_friends) < 5:\n                break\n            if person in non_friends:\n                non_friends -= friends[person]\n                non_friends.discard(person)\n        if len(non_friends) >= 5:\n            return list(non_friends)[:5]\n        return None\n    \n    # Try to find a clique\n    clique = find_clique()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    # Try to find an independent set\n    independent_set = find_independent_set()\n    if independent_set:\n        print(' '.join(map(str, independent_set)))\n        return\n    \n    # If neither is found, print -1\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse the input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    friendships = []\n    for _ in range(M):\n        U = int(data[index])\n        index += 1\n        V = int(data[index])\n        index += 1\n        friendships.append((U, V))\n    \n    # Check if it's possible to have a party with exactly 5 people\n    if N < 5:\n        print(-1)\n        return\n    \n    # Construct a graph representation using adjacency list\n    from collections import defaultdict\n    graph = defaultdict(set)\n    for u, v in friendships:\n        graph[u].add(v)\n        graph[v].add(u)\n    \n    # Function to find a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in graph[friends[j]] and\n                                    friends[i] in graph[friends[k]] and\n                                    friends[i] in graph[friends[l]] and\n                                    friends[j] in graph[friends[k]] and\n                                    friends[j] in graph[friends[l]] and\n                                    friends[k] in graph[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Function to find an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(graph[person]) < N - 1:\n                non_friends -= graph[person]\n                non_friends.discard(person)\n                if len(non_friends) >= 4:\n                    return [person] + list(non_friends)[:4]\n        return None\n    \n    # Check for a successful party configuration\n    clique = find_clique_of_size\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Parse friendships\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships[u].add(v)\n        friendships[v].add(u)\n        index += 2\n    \n    # Check for a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(friendships[person]) >= 4:\n                friends = list(friendships[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[j] in friendships[friends[i]] and\n                                    friends[k] in friendships[friends[i]] and\n                                    friends[l] in friendships[friends[i]] and\n                                    friends[k] in friendships[friends[j]] and\n                                    friends[l] in friendships[friends[j]] and\n                                    friends[l] in friendships[friends[k]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(friendships[person]) < N - 1:\n                non_friends -= friendships[person]\n                non_friends.remove(person)\n                if len(non_friends) >= 4:\n                    return [person] + list(non_friends)[:4]\n                non_friends = set(range(1, N + 1))\n        return None\n    \n    # Try to find a clique of size 5\n    clique = find_clique_of_size_5()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    # Try to find an independent set of size 5\n    independent_set = find_independent_set_of_size\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse the input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Create adjacency list\n    adjacency_list = defaultdict(set)\n    for _ in range(M):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        adjacency_list[u].add(v)\n        adjacency_list[v].add(u)\n    \n    # Function to find a clique of size 5\n    def find_clique_of_5():\n        for person in range(1, N + 1):\n            if len(adjacency_list[person]) >= 4:\n                friends = list(adjacency_list[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[j] in adjacency_list[friends[i]] and\n                                    friends[k] in adjacency_list[friends[i]] and\n                                    friends[l] in adjacency_list[friends[i]] and\n                                    friends[k] in adjacency_list[friends[j]] and\n                                    friends[l] in adjacency_list[friends[j]] and\n                                    friends[l] in adjacency_list[friends[k]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Function to find an independent set of size 5\n    def find_independent_set_of_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(adjacency_list[person]) < N - 1:\n                non_friends -= adjacency_list[person]\n                non_friends.remove(person)\n                if len(non_friends) >= 4:\n                    return [person] + list(non_friends)[:4]\n                non_friends = set(range(1, N + 1))\n        return None\n    \n    # Try to find a clique of 5\n    clique = find_clique_of_5()\n    if clique:\n        print\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse the input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Construct the adjacency list\n    adjacency_list = defaultdict(set)\n    for _ in range(M):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        adjacency_list[u].add(v)\n        adjacency_list[v].add(u)\n    \n    # Function to find a clique of size 5\n    def find_clique_of_5():\n        for person in range(1, N + 1):\n            if len(adjacency_list[person]) >= 4:\n                friends = list(adjacency_list[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[j] in adjacency_list[friends[i]] and\n                                    friends[k] in adjacency_list[friends[i]] and\n                                    friends[l] in adjacency_list[friends[i]] and\n                                    friends[k] in adjacency_list[friends[j]] and\n                                    friends[l] in adjacency_list[friends[j]] and\n                                    friends[l] in adjacency_list[friends[k]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Function to find an independent set of size 5\n    def find_independent_set_of_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(adjacency_list[person]) < N - 1:\n                non_friends -= adjacency_list[person]\n                non_friends.remove(person)\n                if len(non_friends) >= 4:\n                    return [person] + list(non_friends)[:4]\n                non_friends = set(range(1, N + 1))\n        return None\n    \n    # Try to find a clique of 5\n    clique = find_clique_of_5()\n    if clique:\nmain()", "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships.add((u, v))\n        friendships.add((v, u))\n        index += 2\n    \n    # Check for a clique of 5\n    for comb in combinations(range(1, N + 1), 5):\n        if all((comb[i], comb[j]) in friendships for i in range(5) for j in range(i + 1, 5)):\n            print(*comb)\n            return\n    \n    # Check for an independent set of 5\n    for comb in combinations(range(1, N + 1), 5):\n        if all((comb[i], comb[j]) not in friendships for i in range(5) for j in range(i + 1, 5)):\n            print(*comb)\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Parse friendships\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships[u].add(v)\n        friendships[v].add(u)\n        index += 2\n    \n    # Check for a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(friendships[person]) >= 4:\n                friends = list(friendships[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[j] in friendships[friends[i]] and\n                                    friends[k] in friendships[friends[i]] and\n                                    friends[l] in friendships[friends[i]] and\n                                    friends[k] in friendships[friends[j]] and\n                                    friends[l] in friendships[friends[j]] and\n                                    friends[l] in friendships[friends[k]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(friendships[person]) < N - 5:\n                continue\n            current_non_friends = non_friends - friendships[person] - {person}\n            if len(current_non_friends) >= 4:\n                return [person] + list(current_non_friends)[:4]\n        return None\n    \n    # Try to find a clique of size 5\n    clique = find_clique_of_size_5()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    # Try to find an independent set of size 5\n    independent_set = find_independent_set_of_size_5()\n    if independent_set:\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendship pairs.\",\n      \"output\": \"N, M, and a list of tuples representing friendships.\"\n    },\n    {\n      \"description\": \"Check if it's possible to have a party with exactly 5 people given the constraints (N >= 5).\",\n      \"output\": \"Boolean indicating if a party is possible based on the number of people.\"\n    },\n    {\n      \"description\": \"Construct a graph representation of the friendships using an adjacency list.\",\n      \"output\": \"Graph data structure representing friendships.\"\n    },\n    {\n      \"description\": \"Search for a clique of size 5 in the graph where all members are friends with each other.\",\n      \"output\": \"List of 5 people if such a clique exists, otherwise null.\"\n    },\n    {\n      \"description\": \"Search for an independent set of size 5 in the graph where no members are friends with each other.\",\n      \"output\": \"List of 5 people if such an independent set exists, otherwise null.\"\n    },\n    {\n      \"description\": \"Determine if either a clique or an independent set of size 5 was found.\",\n      \"output\": \"List of 5 people for a successful party or -1 if not possible.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to get N, M, and the list of friendships.\",\n    \"Check if N is less than 5. If so, print -1 and exit.\",\n    \"Create a graph using an adjacency list to represent friendships.\",\n    \"Implement a function to find a clique of size 5 in the graph.\",\n    \"Implement a function to find an independent set of size 5 in the graph.\",\n    \"Check if either a clique or an independent set of size 5 is found.\",\n    \"If a successful party configuration is found, print the list of 5 people.\",\n    \"If no configuration is found, print -1.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Parse friendships\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships[u].add(v)\n        friendships[v].add(u)\n        index += 2\n    \n    # Check for a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(friendships[person]) >= 4:\n                friends = list(friendships[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[j] in friendships[friends[i]] and\n                                    friends[k] in friendships[friends[i]] and\n                                    friends[l] in friendships[friends[i]] and\n                                    friends[k] in friendships[friends[j]] and\n                                    friends[l] in friendships[friends[j]] and\n                                    friends[l] in friendships[friends[k]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(friendships[person]) < N - 5:\n                continue\n            current_non_friends = non_friends - friendships[person] - {person}\n            if len(current_non_friends) >= 4:\n                return [person] + list(current_non_friends)[:4]\n        return None\n    \n    # Try to find a clique of size 5\n    clique = find_clique_of_size_5()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    # Try to find an independent set of size 5\n    independent_set = find_independent_set_of_size_5()\n    if independent_set:", "report": "The compilation output of the preceding code is: expected an indented block (<string>, line 63)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Parse friendships\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships[u].add(v)\n        friendships[v].add(u)\n        index += 2\n    \n    # Check for a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(friendships[person]) >= 4:\n                friends = list(friendships[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[j] in friendships[friends[i]] and\n                                    friends[k] in friendships[friends[i]] and\n                                    friends[l] in friendships[friends[i]] and\n                                    friends[k] in friendships[friends[j]] and\n                                    friends[l] in friendships[friends[j]] and\n                                    friends[l] in friendships[friends[k]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(friendships[person]) < N - 5:\n                continue\n            current_non_friends = non_friends - friendships[person] - {person}\n            if len(current_non_friends) >= 4:\n                return [person] + list(current_non_friends)[:4]\n        return None\n    \n    # Try to find a clique of size 5\n    clique = find_clique_of_size_5()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    # Try to find an independent set of size 5\n    independent_set = find_independent_set_of_size_5()\n    if independent_set:"}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendship pairs.\",\n      \"output\": \"N, M, and a list of tuples representing friendships.\"\n    },\n    {\n      \"description\": \"Check if it's possible to have a party with exactly 5 people given the constraints.\",\n      \"output\": \"Boolean indicating if a party is possible.\"\n    },\n    {\n      \"description\": \"Identify a group of 5 people where all are friends with each other.\",\n      \"output\": \"List of 5 people if such a group exists, otherwise an indication that it doesn't.\"\n    },\n    {\n      \"description\": \"Identify a group of 5 people where no two are friends with each other.\",\n      \"output\": \"List of 5 people if such a group exists, otherwise an indication that it doesn't.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to get N, M, and the list of friendship pairs.\",\n    \"If N is less than 5, immediately return -1 as it's impossible to have a party.\",\n    \"Create a graph representation of the friendships using an adjacency list.\",\n    \"Check for a complete subgraph (clique) of size 5 in the graph. If found, output the 5 people.\",\n    \"Check for an independent set of size 5 in the graph. If found, output the 5 people.\",\n    \"If neither a clique nor an independent set of size 5 is found, output -1.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    friendships = []\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.append((U, V))\n        index += 2\n    \n    from collections import defaultdict\n    \n    # Create adjacency list for the graph\n    graph = defaultdict(set)\n    for u, v in friendships:\n        graph[u].add(v)\n        graph[v].add(u)\n    \n    # Check for a complete subgraph (clique) of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                clique = [person, friends[i], friends[j], friends[k], friends[l]]\n                                if all(graph[clique[x]].intersection(clique) == set(clique) - {clique[x]} for x in range(5)):\n                                    return clique\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(graph[person]) < N - 1:\n                non_friends -= graph[person]\n                non_friends -= {person}\n                if len(non_friends) >= 4:\n                    independent_set = [person] + list(non_friends)[:4]\n                    return independent_set\n        return None\n    \n    clique = find_clique_of_size_5()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    independent_set = find_independent_set_of_size_5()\n    if independent_set:\n        print(' '.join(map(str, independent_set)))\n        return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendships.\",\n      \"output\": \"N, M, and a list of tuples representing friendships.\"\n    },\n    {\n      \"description\": \"Check if it's possible to have a party with exactly 5 people.\",\n      \"output\": \"Return -1 if N < 5, otherwise proceed.\"\n    },\n    {\n      \"description\": \"Construct a graph representation of the friendships using an adjacency list.\",\n      \"output\": \"An adjacency list where each person points to a list of their friends.\"\n    },\n    {\n      \"description\": \"Search for a clique of 5 people where everyone is friends with each other.\",\n      \"output\": \"A list of 5 people if such a clique exists, otherwise proceed to the next step.\"\n    },\n    {\n      \"description\": \"Search for an independent set of 5 people where no two people are friends with each other.\",\n      \"output\": \"A list of 5 people if such an independent set exists, otherwise return -1.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read and parse the input to get N, M, and the list of friendships.\",\n    \"If N < 5, print -1 and exit.\",\n    \"Create an adjacency list to represent the friendships as a graph.\",\n    \"Implement a function to find a clique of 5 people in the graph. If found, print the 5 people and exit.\",\n    \"Implement a function to find an independent set of 5 people in the graph. If found, print the 5 people and exit.\",\n    \"If neither a clique nor an independent set of 5 people is found, print -1.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse the input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    friendships = []\n    for _ in range(M):\n        U = int(data[index])\n        index += 1\n        V = int(data[index])\n        index += 1\n        friendships.append((U, V))\n    \n    # Check if it's possible to have a party with exactly 5 people\n    if N < 5:\n        print(-1)\n        return\n    \n    # Construct the adjacency list\n    from collections import defaultdict\n    adj_list = defaultdict(set)\n    for u, v in friendships:\n        adj_list[u].add(v)\n        adj_list[v].add(u)\n    \n    # Function to find a clique of 5 people\n    def find_clique():\n        for person in range(1, N + 1):\n            if len(adj_list[person]) >= 4:\n                friends = list(adj_list[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in adj_list[friends[j]] and\n                                    friends[i] in adj_list[friends[k]] and\n                                    friends[i] in adj_list[friends[l]] and\n                                    friends[j] in adj_list[friends[k]] and\n                                    friends[j] in adj_list[friends[l]] and\n                                    friends[k] in adj_list[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Function to find an independent set of 5 people\n    def find_independent_set():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(non_friends) >= 5:\n                independent_set = list(non_friends)[:5]\n                return independent_set\n            non_friends -= adj_list[person]\n        return None\n    \n    # Try to find a clique\n    clique = find_clique()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    #", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendship pairs.\",\n      \"steps\": [\n        \"Read the first line to get N and M.\",\n        \"Read the next M lines to get the friendship pairs.\"\n      ]\n    },\n    {\n      \"description\": \"Check if a successful party is possible based on the given conditions.\",\n      \"steps\": [\n        \"If N < 5, immediately return -1 as it's impossible to form a party.\",\n        \"If M == 0, check if N >= 5 to form a party with no friendships.\"\n      ]\n    },\n    {\n      \"description\": \"Identify a group of 5 people where either all are friends or none are friends.\",\n      \"steps\": [\n        \"Create a graph representation using adjacency lists for friendships.\",\n        \"Check for a complete subgraph of 5 nodes (clique) where all nodes are connected.\",\n        \"Check for an independent set of 5 nodes where no nodes are connected.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result based on the findings.\",\n      \"steps\": [\n        \"If a successful party configuration is found, print the 5 people.\",\n        \"If no configuration is found, print -1.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract N, M, and friendship pairs.\",\n    \"Check if a party is possible with the given number of people and friendships.\",\n    \"Construct a graph to represent friendships.\",\n    \"Search for a complete subgraph (clique) of 5 nodes.\",\n    \"Search for an independent set of 5 nodes.\",\n    \"Output the result based on the search findings.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Parse friendships\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships[u].add(v)\n        friendships[v].add(u)\n        index += 2\n    \n    # Check for a complete subgraph (clique) of 5 nodes\n    def find_clique():\n        for person in range(1, N + 1):\n            if len(friendships[person]) >= 4:\n                potential_clique = [person] + list(friendships[person])\n                if len(potential_clique) >= 5:\n                    for i in range(5):\n                        for j in range(i + 1, 5):\n                            if potential_clique[j] not in friendships[potential_clique[i]]:\n                                break\n                        else:\n                            continue\n                        break\n                    else:\n                        return potential_clique[:5]\n        return None\n    \n    # Check for an independent set of 5 nodes\n    def find_independent_set():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(friendships[person]) < N - 1:\n                non_friends -= friendships[person]\n                non_friends.remove(person)\n                if len(non_friends) >= 5:\n                    return list(non_friends)[:5]\n                non_friends.add(person)\n                non_friends.update(friendships[person])\n        return None\n    \n    # Try to find a clique\n    clique = find_clique()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    # Try to find an independent set\n    independent_set = find_independent_set()\n    if independent_set:\n        print(' '.join(map(str, independent_set)))\n        return\n    \n    # If neither is found, print -1\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendships.\",\n      \"output\": \"N, M, and a list of tuples representing friendships.\"\n    },\n    {\n      \"description\": \"Check if it's possible to have a party with exactly 5 people.\",\n      \"output\": \"Return -1 if N < 5, otherwise proceed.\"\n    },\n    {\n      \"description\": \"Construct a graph representation of the friendships using an adjacency list.\",\n      \"output\": \"An adjacency list where each person points to a list of their friends.\"\n    },\n    {\n      \"description\": \"Search for a clique of 5 people where everyone is friends with each other.\",\n      \"output\": \"A list of 5 people if such a clique exists, otherwise proceed to the next subproblem.\"\n    },\n    {\n      \"description\": \"Search for an independent set of 5 people where no two are friends with each other.\",\n      \"output\": \"A list of 5 people if such an independent set exists, otherwise return -1.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to get N, M, and the list of friendships.\",\n    \"If N < 5, print -1 and exit.\",\n    \"Create an adjacency list to represent the friendships.\",\n    \"Implement a function to find a clique of 5 people. If found, print the 5 people and exit.\",\n    \"If no clique is found, implement a function to find an independent set of 5 people. If found, print the 5 people and exit.\",\n    \"If neither a clique nor an independent set is found, print -1.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Construct adjacency list\n    friends = defaultdict(set)\n    for _ in range(M):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        friends[u].add(v)\n        friends[v].add(u)\n    \n    # Function to find a clique of size 5\n    def find_clique():\n        for person in range(1, N + 1):\n            if len(friends[person]) >= 4:\n                potential_clique = [person] + list(friends[person])\n                if len(potential_clique) >= 5:\n                    for i in range(5):\n                        for j in range(i + 1, 5):\n                            if potential_clique[j] not in friends[potential_clique[i]]:\n                                break\n                        else:\n                            continue\n                        break\n                    else:\n                        return potential_clique[:5]\n        return None\n    \n    # Function to find an independent set of size 5\n    def find_independent_set():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(non_friends) < 5:\n                break\n            if person in non_friends:\n                non_friends -= friends[person]\n                non_friends.discard(person)\n        if len(non_friends) >= 5:\n            return list(non_friends)[:5]\n        return None\n    \n    # Try to find a clique\n    clique = find_clique()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    # Try to find an independent set\n    independent_set = find_independent_set()\n    if independent_set:\n        print(' '.join(map(str, independent_set)))\n        return\n    \n    # If neither is found, print -1\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendship pairs.\",\n      \"output\": \"N, M, and a list of tuples representing friendships.\"\n    },\n    {\n      \"description\": \"Check if it's possible to have a party with exactly 5 people given the constraints (N >= 5).\",\n      \"output\": \"Boolean indicating if a party is possible based on the number of people.\"\n    },\n    {\n      \"description\": \"Construct a graph representation of the friendships using an adjacency list.\",\n      \"output\": \"Graph data structure representing friendships.\"\n    },\n    {\n      \"description\": \"Search for a clique of size 5 in the graph where all members are friends with each other.\",\n      \"output\": \"List of 5 people if such a clique exists, otherwise null.\"\n    },\n    {\n      \"description\": \"Search for an independent set of size 5 in the graph where no members are friends with each other.\",\n      \"output\": \"List of 5 people if such an independent set exists, otherwise null.\"\n    },\n    {\n      \"description\": \"Determine if a successful party configuration (either a clique or an independent set) is found.\",\n      \"output\": \"List of 5 people for a successful party or -1 if no configuration is found.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to get N, M, and the list of friendships.\",\n    \"Check if N is less than 5. If so, print -1 and exit.\",\n    \"Create a graph using an adjacency list to represent friendships.\",\n    \"Implement a function to find a clique of size 5 in the graph.\",\n    \"Implement a function to find an independent set of size 5 in the graph.\",\n    \"Check if either a clique or an independent set of size 5 is found.\",\n    \"If a successful party configuration is found, print the list of 5 people.\",\n    \"If no configuration is found, print -1.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse the input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    friendships = []\n    for _ in range(M):\n        U = int(data[index])\n        index += 1\n        V = int(data[index])\n        index += 1\n        friendships.append((U, V))\n    \n    # Check if it's possible to have a party with exactly 5 people\n    if N < 5:\n        print(-1)\n        return\n    \n    # Construct a graph representation using adjacency list\n    from collections import defaultdict\n    graph = defaultdict(set)\n    for u, v in friendships:\n        graph[u].add(v)\n        graph[v].add(u)\n    \n    # Function to find a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in graph[friends[j]] and\n                                    friends[i] in graph[friends[k]] and\n                                    friends[i] in graph[friends[l]] and\n                                    friends[j] in graph[friends[k]] and\n                                    friends[j] in graph[friends[l]] and\n                                    friends[k] in graph[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Function to find an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(graph[person]) < N - 1:\n                non_friends -= graph[person]\n                non_friends.discard(person)\n                if len(non_friends) >= 4:\n                    return [person] + list(non_friends)[:4]\n        return None\n    \n    # Check for a successful party configuration\n    clique = find_clique_of_size", "report": "The compilation output of the preceding code is: name 'find_clique_of_size' is not defined"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse the input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    friendships = []\n    for _ in range(M):\n        U = int(data[index])\n        index += 1\n        V = int(data[index])\n        index += 1\n        friendships.append((U, V))\n    \n    # Check if it's possible to have a party with exactly 5 people\n    if N < 5:\n        print(-1)\n        return\n    \n    # Construct a graph representation using adjacency list\n    from collections import defaultdict\n    graph = defaultdict(set)\n    for u, v in friendships:\n        graph[u].add(v)\n        graph[v].add(u)\n    \n    # Function to find a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in graph[friends[j]] and\n                                    friends[i] in graph[friends[k]] and\n                                    friends[i] in graph[friends[l]] and\n                                    friends[j] in graph[friends[k]] and\n                                    friends[j] in graph[friends[l]] and\n                                    friends[k] in graph[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Function to find an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(graph[person]) < N - 1:\n                non_friends -= graph[person]\n                non_friends.discard(person)\n                if len(non_friends) >= 4:\n                    return [person] + list(non_friends)[:4]\n        return None\n    \n    # Check for a successful party configuration\n    clique = find_clique_of_size"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendship pairs.\",\n      \"steps\": [\n        \"Read the first line to get N and M.\",\n        \"Read the next M lines to get the friendship pairs.\"\n      ]\n    },\n    {\n      \"description\": \"Check if it's possible to have a party with 5 people.\",\n      \"steps\": [\n        \"If N < 5, immediately return -1 as it's impossible to have a party.\",\n        \"If M == 0, check if N >= 5 to have a party with no friendships.\"\n      ]\n    },\n    {\n      \"description\": \"Identify a group of 5 people where all are friends or none are friends.\",\n      \"steps\": [\n        \"Create a graph representation using adjacency lists for friendships.\",\n        \"Search for a complete subgraph (clique) of size 5 where all nodes are connected.\",\n        \"Search for an independent set of size 5 where no nodes are connected.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result based on the findings.\",\n      \"steps\": [\n        \"If a successful party configuration is found, print the 5 people.\",\n        \"If no configuration is found, print -1.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract N, M, and friendship pairs.\",\n    \"Check if a party is possible with the given number of people.\",\n    \"Construct a graph to represent friendships.\",\n    \"Search for a clique of size 5 or an independent set of size 5.\",\n    \"Output the result based on the search findings.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Parse friendships\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships[u].add(v)\n        friendships[v].add(u)\n        index += 2\n    \n    # Check for a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(friendships[person]) >= 4:\n                friends = list(friendships[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[j] in friendships[friends[i]] and\n                                    friends[k] in friendships[friends[i]] and\n                                    friends[l] in friendships[friends[i]] and\n                                    friends[k] in friendships[friends[j]] and\n                                    friends[l] in friendships[friends[j]] and\n                                    friends[l] in friendships[friends[k]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(friendships[person]) < N - 1:\n                non_friends -= friendships[person]\n                non_friends.remove(person)\n                if len(non_friends) >= 4:\n                    return [person] + list(non_friends)[:4]\n                non_friends = set(range(1, N + 1))\n        return None\n    \n    # Try to find a clique of size 5\n    clique = find_clique_of_size_5()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    # Try to find an independent set of size 5\n    independent_set = find_independent_set_of_size", "report": "The compilation output of the preceding code is: name 'find_independent_set_of_size' is not defined"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Parse friendships\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships[u].add(v)\n        friendships[v].add(u)\n        index += 2\n    \n    # Check for a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(friendships[person]) >= 4:\n                friends = list(friendships[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[j] in friendships[friends[i]] and\n                                    friends[k] in friendships[friends[i]] and\n                                    friends[l] in friendships[friends[i]] and\n                                    friends[k] in friendships[friends[j]] and\n                                    friends[l] in friendships[friends[j]] and\n                                    friends[l] in friendships[friends[k]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(friendships[person]) < N - 1:\n                non_friends -= friendships[person]\n                non_friends.remove(person)\n                if len(non_friends) >= 4:\n                    return [person] + list(non_friends)[:4]\n                non_friends = set(range(1, N + 1))\n        return None\n    \n    # Try to find a clique of size 5\n    clique = find_clique_of_size_5()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    # Try to find an independent set of size 5\n    independent_set = find_independent_set_of_size", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendship pairs.\",\n      \"output\": \"N, M, and a list of tuples representing friendships.\"\n    },\n    {\n      \"description\": \"Check if it's possible to have a party with exactly 5 people.\",\n      \"output\": \"Return -1 if N < 5, otherwise proceed.\"\n    },\n    {\n      \"description\": \"Create a graph representation of the friendships using an adjacency list.\",\n      \"output\": \"An adjacency list where each person points to a list of their friends.\"\n    },\n    {\n      \"description\": \"Search for a clique of 5 people where everyone is friends with each other.\",\n      \"output\": \"A list of 5 people if such a clique exists, otherwise proceed to the next step.\"\n    },\n    {\n      \"description\": \"Search for an independent set of 5 people where no two people are friends with each other.\",\n      \"output\": \"A list of 5 people if such an independent set exists, otherwise return -1.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to get N, M, and the list of friendship pairs.\",\n    \"If N < 5, print -1 and exit.\",\n    \"Construct an adjacency list to represent the friendships.\",\n    \"Implement a function to find a clique of 5 people in the graph.\",\n    \"If a clique is found, print the 5 people and exit.\",\n    \"Implement a function to find an independent set of 5 people in the graph.\",\n    \"If an independent set is found, print the 5 people and exit.\",\n    \"If neither a clique nor an independent set is found, print -1.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse the input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Create adjacency list\n    adjacency_list = defaultdict(set)\n    for _ in range(M):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        adjacency_list[u].add(v)\n        adjacency_list[v].add(u)\n    \n    # Function to find a clique of size 5\n    def find_clique_of_5():\n        for person in range(1, N + 1):\n            if len(adjacency_list[person]) >= 4:\n                friends = list(adjacency_list[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[j] in adjacency_list[friends[i]] and\n                                    friends[k] in adjacency_list[friends[i]] and\n                                    friends[l] in adjacency_list[friends[i]] and\n                                    friends[k] in adjacency_list[friends[j]] and\n                                    friends[l] in adjacency_list[friends[j]] and\n                                    friends[l] in adjacency_list[friends[k]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Function to find an independent set of size 5\n    def find_independent_set_of_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(adjacency_list[person]) < N - 1:\n                non_friends -= adjacency_list[person]\n                non_friends.remove(person)\n                if len(non_friends) >= 4:\n                    return [person] + list(non_friends)[:4]\n                non_friends = set(range(1, N + 1))\n        return None\n    \n    # Try to find a clique of 5\n    clique = find_clique_of_5()\n    if clique:\n        print", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendships.\",\n      \"output\": \"N, M, and a list of tuples representing friendships.\"\n    },\n    {\n      \"description\": \"Check if it's possible to have a party with exactly 5 people.\",\n      \"output\": \"Return -1 if N < 5, otherwise proceed.\"\n    },\n    {\n      \"description\": \"Construct a graph representation of the friendships using an adjacency list.\",\n      \"output\": \"An adjacency list where each person points to a list of their friends.\"\n    },\n    {\n      \"description\": \"Search for a clique of 5 people where everyone is friends with each other.\",\n      \"output\": \"A list of 5 people if such a clique exists, otherwise proceed to the next step.\"\n    },\n    {\n      \"description\": \"Search for an independent set of 5 people where no two people are friends with each other.\",\n      \"output\": \"A list of 5 people if such an independent set exists, otherwise return -1.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read and parse the input to get N, M, and the list of friendships.\",\n    \"If N < 5, print -1 and exit.\",\n    \"Create an adjacency list to represent the friendships as a graph.\",\n    \"Implement a function to find a clique of 5 people in the graph. If found, print the 5 people and exit.\",\n    \"Implement a function to find an independent set of 5 people in the graph. If found, print the 5 people and exit.\",\n    \"If neither a clique nor an independent set of 5 people is found, print -1.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse the input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Construct the adjacency list\n    adjacency_list = defaultdict(set)\n    for _ in range(M):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        adjacency_list[u].add(v)\n        adjacency_list[v].add(u)\n    \n    # Function to find a clique of size 5\n    def find_clique_of_5():\n        for person in range(1, N + 1):\n            if len(adjacency_list[person]) >= 4:\n                friends = list(adjacency_list[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[j] in adjacency_list[friends[i]] and\n                                    friends[k] in adjacency_list[friends[i]] and\n                                    friends[l] in adjacency_list[friends[i]] and\n                                    friends[k] in adjacency_list[friends[j]] and\n                                    friends[l] in adjacency_list[friends[j]] and\n                                    friends[l] in adjacency_list[friends[k]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Function to find an independent set of size 5\n    def find_independent_set_of_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(adjacency_list[person]) < N - 1:\n                non_friends -= adjacency_list[person]\n                non_friends.remove(person)\n                if len(non_friends) >= 4:\n                    return [person] + list(non_friends)[:4]\n                non_friends = set(range(1, N + 1))\n        return None\n    \n    # Try to find a clique of 5\n    clique = find_clique_of_5()\n    if clique:", "report": "The compilation output of the preceding code is: expected an indented block (<string>, line 62)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse the input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Construct the adjacency list\n    adjacency_list = defaultdict(set)\n    for _ in range(M):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        adjacency_list[u].add(v)\n        adjacency_list[v].add(u)\n    \n    # Function to find a clique of size 5\n    def find_clique_of_5():\n        for person in range(1, N + 1):\n            if len(adjacency_list[person]) >= 4:\n                friends = list(adjacency_list[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[j] in adjacency_list[friends[i]] and\n                                    friends[k] in adjacency_list[friends[i]] and\n                                    friends[l] in adjacency_list[friends[i]] and\n                                    friends[k] in adjacency_list[friends[j]] and\n                                    friends[l] in adjacency_list[friends[j]] and\n                                    friends[l] in adjacency_list[friends[k]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Function to find an independent set of size 5\n    def find_independent_set_of_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(adjacency_list[person]) < N - 1:\n                non_friends -= adjacency_list[person]\n                non_friends.remove(person)\n                if len(non_friends) >= 4:\n                    return [person] + list(non_friends)[:4]\n                non_friends = set(range(1, N + 1))\n        return None\n    \n    # Try to find a clique of 5\n    clique = find_clique_of_5()\n    if clique:"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendship pairs.\",\n      \"details\": \"Read the first line to get N and M. Then read the next M lines to get pairs of friends.\"\n    },\n    {\n      \"description\": \"Check if a party can be organized based on the number of people.\",\n      \"details\": \"If N is less than 5, immediately return -1 as it's impossible to organize a party.\"\n    },\n    {\n      \"description\": \"Construct a graph representation of friendships.\",\n      \"details\": \"Use an adjacency list or matrix to represent friendships between people.\"\n    },\n    {\n      \"description\": \"Find a group of 5 people where all are friends with each other.\",\n      \"details\": \"Check combinations of 5 people to see if they form a complete subgraph (clique) in the friendship graph.\"\n    },\n    {\n      \"description\": \"Find a group of 5 people where no two are friends.\",\n      \"details\": \"Check combinations of 5 people to see if they form an independent set in the friendship graph.\"\n    },\n    {\n      \"description\": \"Output the result based on the findings.\",\n      \"details\": \"If a successful party configuration is found, print the 5 people. Otherwise, print -1.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract N, M, and friendship pairs.\",\n    \"Check if N is less than 5; if so, print -1 and exit.\",\n    \"Construct a graph using the friendship pairs.\",\n    \"Iterate over combinations of 5 people to check for a complete subgraph (clique).\",\n    \"If a clique is found, print the 5 people and exit.\",\n    \"If no clique is found, iterate over combinations of 5 people to check for an independent set.\",\n    \"If an independent set is found, print the 5 people and exit.\",\n    \"If neither a clique nor an independent set is found, print -1.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships.add((u, v))\n        friendships.add((v, u))\n        index += 2\n    \n    # Check for a clique of 5\n    for comb in combinations(range(1, N + 1), 5):\n        if all((comb[i], comb[j]) in friendships for i in range(5) for j in range(i + 1, 5)):\n            print(*comb)\n            return\n    \n    # Check for an independent set of 5\n    for comb in combinations(range(1, N + 1), 5):\n        if all((comb[i], comb[j]) not in friendships for i in range(5) for j in range(i + 1, 5)):\n            print(*comb)\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendship pairs.\",\n      \"output\": \"N, M, and a list of tuples representing friendships.\"\n    },\n    {\n      \"description\": \"Check if it's possible to have a party with exactly 5 people given the constraints (N >= 5).\",\n      \"output\": \"Boolean indicating if a party is possible based on the number of people.\"\n    },\n    {\n      \"description\": \"Construct a graph representation of the friendships using an adjacency list.\",\n      \"output\": \"Graph data structure representing friendships.\"\n    },\n    {\n      \"description\": \"Search for a clique of size 5 in the graph where all members are friends with each other.\",\n      \"output\": \"List of 5 people if such a clique exists, otherwise null.\"\n    },\n    {\n      \"description\": \"Search for an independent set of size 5 in the graph where no members are friends with each other.\",\n      \"output\": \"List of 5 people if such an independent set exists, otherwise null.\"\n    },\n    {\n      \"description\": \"Determine if either a clique or an independent set of size 5 was found.\",\n      \"output\": \"List of 5 people for a successful party or -1 if not possible.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to get N, M, and the list of friendships.\",\n    \"Check if N is less than 5. If so, print -1 and exit.\",\n    \"Create a graph using an adjacency list to represent friendships.\",\n    \"Implement a function to find a clique of size 5 in the graph.\",\n    \"Implement a function to find an independent set of size 5 in the graph.\",\n    \"Check if either a clique or an independent set of size 5 is found.\",\n    \"If a successful party configuration is found, print the list of 5 people.\",\n    \"If no configuration is found, print -1.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Parse friendships\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships[u].add(v)\n        friendships[v].add(u)\n        index += 2\n    \n    # Check for a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(friendships[person]) >= 4:\n                friends = list(friendships[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[j] in friendships[friends[i]] and\n                                    friends[k] in friendships[friends[i]] and\n                                    friends[l] in friendships[friends[i]] and\n                                    friends[k] in friendships[friends[j]] and\n                                    friends[l] in friendships[friends[j]] and\n                                    friends[l] in friendships[friends[k]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(friendships[person]) < N - 5:\n                continue\n            current_non_friends = non_friends - friendships[person] - {person}\n            if len(current_non_friends) >= 4:\n                return [person] + list(current_non_friends)[:4]\n        return None\n    \n    # Try to find a clique of size 5\n    clique = find_clique_of_size_5()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    # Try to find an independent set of size 5\n    independent_set = find_independent_set_of_size_5()\n    if independent_set:", "report": "The compilation output of the preceding code is: expected an indented block (<string>, line 63)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Parse friendships\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships[u].add(v)\n        friendships[v].add(u)\n        index += 2\n    \n    # Check for a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(friendships[person]) >= 4:\n                friends = list(friendships[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[j] in friendships[friends[i]] and\n                                    friends[k] in friendships[friends[i]] and\n                                    friends[l] in friendships[friends[i]] and\n                                    friends[k] in friendships[friends[j]] and\n                                    friends[l] in friendships[friends[j]] and\n                                    friends[l] in friendships[friends[k]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(friendships[person]) < N - 5:\n                continue\n            current_non_friends = non_friends - friendships[person] - {person}\n            if len(current_non_friends) >= 4:\n                return [person] + list(current_non_friends)[:4]\n        return None\n    \n    # Try to find a clique of size 5\n    clique = find_clique_of_size_5()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    # Try to find an independent set of size 5\n    independent_set = find_independent_set_of_size_5()\n    if independent_set:"}}], "scores": [], "pass_results": [false, false, false, false, true, false, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 292, "prompt": "On the great island of Baltia, there live N people, numbered from 1 to N. There are exactly M pairs of people that are friends with each other. The people of Baltia want to organize a successful party. They have very strict rules on what a party is. They also have strict rules on when the party is successful. On the island of Baltia, a party is a gathering of exactly 5 people. The party is considered to be successful if either all the people at the party are friends with each other. This allows them to all talk to each other without having to worry about talking to someone they are not friends with. Or no two people at the party are friends with each other (so that everyone can just be on their phones without anyone else bothering them). Please help the people of Baltia organize a successful party or tell them that it's impossible to do so. You should consider edge cases, such as when N is less than 5 or when there are no friendships at all.\n\nInput\n\nThe first line contains two integer numbers, N (5 \u2264 N \u2264 2*10^5) and M (0 \u2264 M \u2264 2*10^5) \u2013 the number of people that live in Baltia, and the number of friendships. The next M lines each contains two integers U_i and V_i (1 \u2264 U_i,V_i \u2264 N) \u2013 meaning that person U_i is friends with person V_i. Two friends can not be in the list of friends twice (no pairs are repeated) and a person can be friends with themselves (U_i \u2260 V_i).\n\nOutput\n\nIf it's possible to organize a successful party, print 5 numbers indicating which 5 people should be invited to the party. If it's not possible to organize a successful party, print -1 instead. If there are multiple successful parties possible, print any.\n\nExamples\n\nInput\n\n\n6 3\n1 4\n4 2\n5 4\n\n\nOutput\n\n\n1 2 3 5 6\n\n\nInput\n\n\n5 4\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n-1", "examples": "\nInput\n\nThe first line contains two integer numbers, N (5 \u2264 N \u2264 2*10^5) and M (0 \u2264 M \u2264 2*10^5) \u2013 the number of people that live in Baltia, and the number of friendships. The next M lines each contains two integers U_i and V_i (1 \u2264 U_i,V_i \u2264 N) \u2013 meaning that person U_i is friends with person V_i. Two friends can not be in the list of friends twice (no pairs are repeated) and a person can be friends with themselves (U_i \u2260 V_i).\n\nOutput\n\nIf it's possible to organize a successful party, print 5 numbers indicating which 5 people should be invited to the party. If it's not possible to organize a successful party, print -1 instead. If there are multiple successful parties possible, print any.\n\nExamples\n\nInput\n\n\n6 3\n1 4\n4 2\n5 4\n\n\nOutput\n\n\n1 2 3 5 6\n\n\nInput\n\n\n5 4\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n-1", "mutate_method": "expand_one2two", "save_node": false, "parent_index": 197}
