{"name": "1600_F. Party Organization", "description": "On the great island of Baltia, there live N people, numbered from 1 to N. There are exactly M pairs of people that are friends with each other. The people of Baltia want to organize a successful party, but they have very strict rules on what a party is and when the party is successful. On the island of Baltia, a party is a gathering of exactly 5 people. The party is considered to be successful if either all the people at the party are friends with each other (so that they can all talk to each other without having to worry about talking to someone they are not friends with) or no two people at the party are friends with each other (so that everyone can just be on their phones without anyone else bothering them). Please help the people of Baltia organize a successful party or tell them that it's impossible to do so.\n\nInput\n\nThe first line contains two integer numbers, N (5 \u2264 N \u2264 2*10^5) and M (0 \u2264 M \u2264 2*10^5) \u2013 the number of people that live in Baltia, and the number of friendships. The next M lines each contains two integers U_i and V_i (1 \u2264 U_i,V_i \u2264 N) \u2013 meaning that person U_i is friends with person V_i. Two friends can not be in the list of friends twice (no pairs are repeated) and a person can be friends with themselves (U_i \u2260 V_i).\n\nOutput\n\nIf it's possible to organize a successful party, print 5 numbers indicating which 5 people should be invited to the party. If it's not possible to organize a successful party, print -1 instead. If there are multiple successful parties possible, print any.\n\nExamples\n\nInput\n\n\n6 3\n1 4\n4 2\n5 4\n\n\nOutput\n\n\n1 2 3 5 6\n\n\nInput\n\n\n5 4\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n-1", "tags": ["brute force", "math", "probabilities"], "difficulty": 12, "id": 1600, "sample_io": [{"input": "5 4\n1 2\n2 3\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n4 2\n5 4\n", "output": ["1 2 3 5 6\n"]}], "test_list": [{"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 5\n2 4\n6 3\n1 2\n", "output": ["1 2 4 5 6\n"]}, {"input": "10 8\n5 2\n1 8\n5 7\n1 9\n6 4\n2 7\n8 9\n3 10\n", "output": ["-1\n"]}, {"input": "20 57\n13 14\n12 20\n18 3\n17 20\n15 9\n18 13\n12 19\n2 4\n9 2\n12 11\n14 1\n16 11\n11 14\n16 4\n16 15\n11 19\n15 4\n10 15\n12 5\n9 3\n10 2\n10 4\n20 19\n14 7\n19 2\n5 8\n6 14\n4 17\n2 17\n17 9\n13 9\n19 9\n18 8\n12 16\n18 5\n7 1\n8 3\n11 20\n6 13\n20 5\n13 8\n17 19\n7 6\n9 11\n18 9\n13 1\n12 14\n7 3\n10 16\n20 2\n5 3\n10 17\n6 1\n8 9\n7 5\n12 15\n15 11\n", "output": ["-1\n"]}, {"input": "5 0\n", "output": ["1 2 3 4 5\n"]}, {"input": "10 8\n2 7\n2 9\n7 9\n8 10\n5 3\n1 4\n10 6\n6 8\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 2\n4 5\n6 4\n3 1\n1 6\n1 5\n2 4\n6 3\n1 2\n", "output": ["1 2 4 5 6\n"]}, {"input": "6 3\n1 4\n1 3\n5 1\n", "output": ["2 3 4 5 6\n"]}, {"input": "6 3\n1 2\n4 2\n5 2\n", "output": ["1 3 4 5 6\n"]}, {"input": "6 4\n1 4\n4 1\n2 4\n4 5\n", "output": ["1 2 3 5 6\n"]}, {"input": "7 4\n1 5\n4 3\n3 2\n5 2\n", "output": ["1 2 4 6 7\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n3 4\n3 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n4 2\n5 1\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 1\n1 6\n2 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n5 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 1\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n5 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 2\n2 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n5 2\n5 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n4 3\n", "output": ["-1\n"]}, {"input": "6 3\n1 2\n4 2\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n5 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n1 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 3\n1 3\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 3\n6 4\n3 1\n1 6\n1 5\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n6 1\n1 6\n1 4\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 2\n1 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 3\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n3 4\n4 2\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 3\n2 4\n4 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n1 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n2 4\n1 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n4 3\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n5 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 2\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n1 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n1 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 5\n4 3\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n1 4\n4 5\n", "output": ["-1\n"]}, {"input": "8 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 3\n2 4\n4 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 1\n1 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 1\n1 6\n4 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 4\n5 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 4\n1 3\n1 3\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n6 1\n1 6\n1 4\n2 6\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n5 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 2\n2 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 3\n3 2\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n3 5\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n3 1\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 1\n1 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 2\n1 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 5\n4 2\n5 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 4\n3 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n2 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 2\n1 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "6 4\n1 3\n2 3\n3 4\n3 1\n", "output": ["1 2 4 5 6\n"]}, {"input": "5 4\n2 5\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 1\n3 2\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n2 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 2\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n2 4\n2 1\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n1 6\n5 1\n", "output": ["2 3 4 5 6\n"]}, {"input": "5 4\n1 2\n2 3\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n2 3\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n1 3\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n4 1\n2 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n2 5\n", "output": ["-1\n"]}, {"input": "6 4\n1 4\n3 2\n2 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 3\n3 2\n5 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n2 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 3\n3 5\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n4 1\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n1 3\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 5\n2 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 2\n4 2\n5 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n1 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n2 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n2 3\n3 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 6\n4 1\n2 4\n4 5\n", "output": ["-1\n"]}, {"input": "20 57\n13 14\n12 20\n18 3\n17 20\n15 2\n18 13\n12 19\n2 4\n9 2\n12 11\n14 1\n16 11\n11 14\n16 4\n16 15\n11 19\n15 4\n10 15\n12 5\n9 3\n10 2\n10 4\n20 19\n14 7\n19 2\n5 8\n6 14\n4 17\n2 17\n17 9\n13 9\n19 9\n18 8\n12 16\n18 5\n7 1\n8 3\n11 20\n6 13\n20 5\n13 8\n17 19\n7 6\n9 11\n18 9\n13 1\n12 14\n7 3\n10 16\n20 2\n5 3\n10 17\n6 1\n8 9\n7 5\n12 15\n15 11\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 2\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n1 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n3 4\n4 3\n", "output": ["-1\n"]}, {"input": "6 3\n1 2\n5 2\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 1\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n2 1\n3 2\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n1 5\n6 4\n3 1\n1 6\n4 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 5\n2 3\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 4\n5 2\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n5 2\n5 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 4\n1 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 1\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n2 3\n3 4\n3 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n1 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 2\n1 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 3\n2 3\n3 4\n3 2\n", "output": ["1 2 4 5 6\n"]}, {"input": "5 4\n1 4\n2 1\n4 2\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n5 3\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 2\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 3\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n1 3\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n2 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n4 2\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 4\n4 1\n2 1\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n1 3\n2 3\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n2 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 1\n3 1\n3 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n2 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 5\n1 3\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n4 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 3\n4 3\n3 4\n3 2\n", "output": ["1 2 4 5 6\n"]}, {"input": "5 4\n1 4\n2 5\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 3\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n4 3\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n4 1\n4 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n2 1\n1 4\n1 5\n", "output": ["2 3 4 5 6\n"]}, {"input": "5 4\n1 2\n2 3\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n2 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 4\n3 1\n3 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n2 1\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n1 4\n4 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n5 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n3 2\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n2 4\n1 3\n", "output": ["-1\n"]}, {"input": "6 4\n1 4\n4 1\n3 4\n4 5\n", "output": ["1 2 3 5 6\n"]}, {"input": "5 4\n1 3\n4 1\n3 2\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n5 4\n3 2\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n4 3\n4 1\n", "output": ["1 2 3 5 6\n"]}, {"input": "5 4\n2 4\n4 3\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n3 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n1 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 2\n3 1\n1 6\n4 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 4\n5 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 4\n1 3\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n3 2\n2 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 1\n3 2\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 2\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 1\n2 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n3 1\n4 5\n", "output": ["-1\n"]}], "task_id": "codecontest/76", "repair_prompt": ["On the great island of Baltia, there live N people, numbered from 1 to N. There are exactly M pairs of people that are friends with each other. The people of Baltia want to organize a successful party, but they have very strict rules on what a party is and when the party is successful. On the island of Baltia, a party is a gathering of exactly 5 people. The party is considered to be successful if either all the people at the party are friends with each other (so that they can all talk to each other without having to worry about talking to someone they are not friends with) or no two people at the party are friends with each other (so that everyone can just be on their phones without anyone else bothering them). Please help the people of Baltia organize a successful party or tell them that it's impossible to do so. Note that each pair counts as a bidirectional friendship.\n\nInput\n\nThe first line contains two integer numbers, N (5 \u2264 N \u2264 2*10^5) and M (0 \u2264 M \u2264 2*10^5) \u2013 the number of people that live in Baltia, and the number of friendships. The next M lines each contains two integers U_i and V_i (1 \u2264 U_i,V_i \u2264 N) \u2013 meaning that person U_i is friends with person V_i. Two friends can not be in the list of friends twice (no pairs are repeated) and a person can be friends with themselves (U_i \u2260 V_i).\n\nOutput\n\nIf it's possible to organize a successful party, print 5 numbers indicating which 5 people should be invited to the party. If it's not possible to organize a successful party, print -1 instead. If there are multiple successful parties possible, print any.\n\nExamples\n\nInput\n\n\n6 3\n1 4\n4 2\n5 4\n\n\nOutput\n\n\n1 2 3 5 6\n\n\nInput\n\n\n5 4\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n-1\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    # Create a set of friendships\n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for group in combinations(range(1, N + 1), 5):\n        # Check if the group is a clique\n        is_clique = True\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (group[i], group[j]) not in friendships:\n                    is_clique = False\n                    break\n            if not is_clique:\n                break\n        \n        if is_clique:\n            print(\" \".join(map(str, group)))\n            return\n        \n        # Check if the group is an independent set\n        is_independent_set = True\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (group[i], group[j]) in friendships:\n                    is_independent_set = False\n                    break\n            if not is_independent_set:\n                break\n        \n        if is_independent_set:\n            print(\" \".join(map(str, group)))\n            return\n    \n    # If no successful party is found\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = []\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.append((U, V))\n        index += 2\n    \n    # Create adjacency list\n    adj_list = {i: set() for i in range(1, N + 1)}\n    for u, v in friendships:\n        adj_list[u].add(v)\n        adj_list[v].add(u)\n    \n    # Generate all combinations of 5 people\n    people = list(range(1, N + 1))\n    for combo in combinations(people, 5):\n        all_friends = True\n        no_friends = True\n        \n        # Check if all are friends with each other\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if combo[j] not in adj_list[combo[i]]:\n                    all_friends = False\n                else:\n                    no_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Generate all combinations of 5 people\n    for group in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        # Check if all are friends or none are friends\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (group[i], group[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, group)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for group in combinations(range(1, N + 1), 5):\n        # Check if all are friends (clique)\n        all_friends = True\n        no_friends = True\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (group[i], group[j]) not in friendships:\n                    all_friends = False\n                else:\n                    no_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, group)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    from collections import defaultdict\n    \n    # Parse the friendship pairs\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships[u].add(v)\n        friendships[v].add(u)\n        index += 2\n    \n    # Check for a complete subgraph of 5 nodes (clique)\n    def find_clique():\n        for person in range(1, N + 1):\n            if len(friendships[person]) >= 4:\n                # Check if there is a clique of size 5 including this person\n                friends = list(friendships[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                clique = [person, friends[i], friends[j], friends[k], friends[l]]\n                                if all(friendships[clique[x]].intersection(clique) == set(clique) - {clique[x]} for x in range(5)):\n                                    return clique\n        return None\n    \n    # Check for an independent set of 5 nodes\n    def find_independent_set():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(friendships[person]) < N - 1:\n                # Check if there is an independent set of size 5 including this person\n                possible_set = non_friends - friendships[person] - {person}\n                if len(possible_set) >= 4:\n                    independent_set = [person] + list(possible_set)[:4]\n                    return independent_set\n        return None\n    \n    # Try to find a successful party configuration\n    clique = find_clique()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    independent_set = find_independent_set()\n    if independent_set:\n        print(' '.join(map(str, independent_set)))\n        return\n    \n    # If no configuration is found, print -1\n    print(-1)\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    from collections import defaultdict\n    \n    # Create adjacency list for the graph\n    friends = defaultdict(set)\n    for _ in range(M):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        friends[u].add(v)\n        friends[v].add(u)\n    \n    # Check for a complete subgraph of 5 nodes (clique)\n    def find_clique_of_5():\n        for u in range(1, N + 1):\n            if len(friends[u]) >= 4:\n                for v in friends[u]:\n                    if len(friends[v]) >= 4:\n                        common_friends = friends[u].intersection(friends[v])\n                        if len(common_friends) >= 3:\n                            common_friends = list(common_friends)\n                            for i in range(len(common_friends)):\n                                for j in range(i + 1, len(common_friends)):\n                                    for k in range(j + 1, len(common_friends)):\n                                        a, b, c = common_friends[i], common_friends[j], common_friends[k]\n                                        if a in friends[b] and a in friends[c] and b in friends[c]:\n                                            return [u, v, a, b, c]\n        return None\n    \n    # Check for an independent set of 5 nodes\n    def find_independent_set_of_5():\n        non_friends = set(range(1, N + 1))\n        for u in range(1, N + 1):\n            if len(non_friends) < 5:\n                break\n            non_friends -= friends[u]\n            non_friends.add(u)\n            if len(non_friends) >= 5:\n                return list(non_friends)[:5]\n        return None\n    \n    # Try to find a clique of 5\n    clique = find_clique_of_5()\n    if clique:\n        print(\" \".join(map(str, clique)))\n        return\n    \n    # Try to find an independent set of 5\n    independent_set = find_independent_set_of_5()\n    if independent_set:\n        print(\" \".join(map(str, independent_set)))\nmain()", "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for group in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (group[i], group[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(\" \".join(map(str, group)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Generate all combinations of 5 people\n    people = list(range(1, N + 1))\n    for combo in combinations(people, 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for group in combinations(range(1, N + 1), 5):\n        # Check if all are friends (clique)\n        all_friends = True\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (group[i], group[j]) not in friendships:\n                    all_friends = False\n                    break\n            if not all_friends:\n                break\n        \n        if all_friends:\n            print(' '.join(map(str, group)))\n            return\n        \n        # Check if none are friends (independent set)\n        no_friends = True\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (group[i], group[j]) in friendships:\n                    no_friends = False\n                    break\n            if not no_friends:\n                break\n        \n        if no_friends:\n            print(' '.join(map(str, group)))\n            return\n    \n    # If no successful party is found\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships.add((u, v))\n        friendships.add((v, u))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    # Create a set of friendships\n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for group in combinations(range(1, N + 1), 5):\n        # Check if the group is a clique\n        is_clique = True\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (group[i], group[j]) not in friendships:\n                    is_clique = False\n                    break\n            if not is_clique:\n                break\n        \n        if is_clique:\n            print(\" \".join(map(str, group)))\n            return\n        \n        # Check if the group is an independent set\n        is_independent_set = True\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (group[i], group[j]) in friendships:\n                    is_independent_set = False\n                    break\n            if not is_independent_set:\n                break\n        \n        if is_independent_set:\n            print(\" \".join(map(str, group)))\n            return\n    \n    # If no successful party is found\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendship pairs.\",\n      \"goal\": \"Create data structures to store the people and their friendships.\"\n    },\n    {\n      \"description\": \"Identify potential groups of 5 people from the list of N people.\",\n      \"goal\": \"Generate combinations of 5 people to evaluate for party conditions.\"\n    },\n    {\n      \"description\": \"Check if all 5 people in a group are friends with each other.\",\n      \"goal\": \"Verify if the selected group forms a complete subgraph (clique) in the friendship graph.\"\n    },\n    {\n      \"description\": \"Check if no two people in a group are friends with each other.\",\n      \"goal\": \"Verify if the selected group forms an independent set in the friendship graph.\"\n    },\n    {\n      \"description\": \"Determine if a successful party can be organized based on the above checks.\",\n      \"goal\": \"Output the group of 5 people if a successful party is possible, otherwise output -1.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read and parse the input to obtain N, M, and the list of friendship pairs.\",\n    \"Create a graph representation using adjacency lists or matrices to store friendships.\",\n    \"Iterate over all combinations of 5 people from the list of N people.\",\n    \"For each combination, check if it forms a complete subgraph (clique) or an independent set in the friendship graph.\",\n    \"If a successful party is found, print the 5 people in the group.\",\n    \"If no successful party is found after checking all combinations, print -1.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    # Create a set of friendships\n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for group in combinations(range(1, N + 1), 5):\n        # Check if the group is a clique\n        is_clique = True\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (group[i], group[j]) not in friendships:\n                    is_clique = False\n                    break\n            if not is_clique:\n                break\n        \n        if is_clique:\n            print(\" \".join(map(str, group)))\n            return\n        \n        # Check if the group is an independent set\n        is_independent_set = True\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (group[i], group[j]) in friendships:\n                    is_independent_set = False\n                    break\n            if not is_independent_set:\n                break\n        \n        if is_independent_set:\n            print(\" \".join(map(str, group)))\n            return\n    \n    # If no successful party is found\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendships.\",\n      \"output\": \"N, M, and a list of tuples representing friendships.\"\n    },\n    {\n      \"description\": \"Create a graph representation of the friendships using an adjacency list.\",\n      \"output\": \"An adjacency list where each person points to a list of their friends.\"\n    },\n    {\n      \"description\": \"Identify all possible combinations of 5 people from the N people.\",\n      \"output\": \"A list of all possible 5-person combinations.\"\n    },\n    {\n      \"description\": \"For each 5-person combination, check if all are friends with each other or if none are friends with each other.\",\n      \"output\": \"A boolean indicating whether the combination is a successful party.\"\n    },\n    {\n      \"description\": \"Return the first successful party found or -1 if no successful party exists.\",\n      \"output\": \"A list of 5 people or -1.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to get N, M, and the list of friendships.\",\n    \"Construct an adjacency list to represent the friendships as a graph.\",\n    \"Generate all possible combinations of 5 people from the N people.\",\n    \"For each combination, check if it forms a successful party by verifying the friendship conditions.\",\n    \"If a successful party is found, output the combination. If no successful party is found after checking all combinations, output -1.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = []\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.append((U, V))\n        index += 2\n    \n    # Create adjacency list\n    adj_list = {i: set() for i in range(1, N + 1)}\n    for u, v in friendships:\n        adj_list[u].add(v)\n        adj_list[v].add(u)\n    \n    # Generate all combinations of 5 people\n    people = list(range(1, N + 1))\n    for combo in combinations(people, 5):\n        all_friends = True\n        no_friends = True\n        \n        # Check if all are friends with each other\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if combo[j] not in adj_list[combo[i]]:\n                    all_friends = False\n                else:\n                    no_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendship pairs.\",\n      \"goal\": \"Create data structures to store the people and their friendships.\"\n    },\n    {\n      \"description\": \"Identify potential groups of 5 people from the list of N people.\",\n      \"goal\": \"Generate all possible combinations of 5 people.\"\n    },\n    {\n      \"description\": \"Check if a group of 5 people is a successful party.\",\n      \"goal\": \"Determine if all 5 people are friends with each other or if none of them are friends with each other.\"\n    },\n    {\n      \"description\": \"Output the result based on the findings.\",\n      \"goal\": \"Print the 5 people if a successful party is found, otherwise print -1.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input values for N, M, and the friendship pairs.\",\n    \"Store the friendship pairs in a suitable data structure, such as an adjacency list or matrix.\",\n    \"Iterate over all combinations of 5 people from the list of N people.\",\n    \"For each combination, check if all 5 people are friends with each other or if none of them are friends with each other using the stored friendship data.\",\n    \"If a successful party is found, print the 5 people and terminate the program.\",\n    \"If no successful party is found after checking all combinations, print -1.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Generate all combinations of 5 people\n    for group in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        # Check if all are friends or none are friends\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (group[i], group[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, group)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendship pairs.\",\n      \"goal\": \"Create data structures to store the people and their friendships.\"\n    },\n    {\n      \"description\": \"Identify potential groups of 5 people from the list of N people.\",\n      \"goal\": \"Generate combinations of 5 people to evaluate for party conditions.\"\n    },\n    {\n      \"description\": \"Check if all 5 people in a group are friends with each other.\",\n      \"goal\": \"Verify if the selected group forms a complete subgraph (clique) in the friendship graph.\"\n    },\n    {\n      \"description\": \"Check if no two people in a group are friends with each other.\",\n      \"goal\": \"Verify if the selected group forms an independent set in the friendship graph.\"\n    },\n    {\n      \"description\": \"Determine if a successful party can be organized.\",\n      \"goal\": \"Output the group of 5 people if a successful party is possible, otherwise output -1.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read and parse the input to extract N, M, and the list of friendship pairs.\",\n    \"Create a graph representation using adjacency lists or matrices to store friendships.\",\n    \"Iterate over all combinations of 5 people from the list of N people.\",\n    \"For each combination, check if it forms a complete subgraph (clique) or an independent set.\",\n    \"If a successful party is found, print the group of 5 people and terminate.\",\n    \"If no successful party is found after checking all combinations, print -1.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for group in combinations(range(1, N + 1), 5):\n        # Check if all are friends (clique)\n        all_friends = True\n        no_friends = True\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (group[i], group[j]) not in friendships:\n                    all_friends = False\n                else:\n                    no_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, group)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendship pairs.\",\n      \"steps\": [\n        \"Read the first line to get N and M.\",\n        \"Read the next M lines to get the friendship pairs.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a successful party can be organized where all 5 people are friends with each other.\",\n      \"steps\": [\n        \"Check if there exists a complete subgraph of 5 nodes in the friendship graph.\",\n        \"Use graph traversal techniques to identify cliques of size 5.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a successful party can be organized where no two of the 5 people are friends with each other.\",\n      \"steps\": [\n        \"Check if there exists a set of 5 nodes with no edges between them in the friendship graph.\",\n        \"Use graph traversal techniques to identify independent sets of size 5.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result based on the findings.\",\n      \"steps\": [\n        \"If a successful party configuration is found, print the 5 people involved.\",\n        \"If no configuration is found, print -1.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract N, M, and the list of friendship pairs.\",\n    \"Construct a graph representation using adjacency lists or matrices.\",\n    \"Check for a complete subgraph of 5 nodes (clique) in the graph.\",\n    \"Check for an independent set of 5 nodes in the graph.\",\n    \"Output the result based on whether a successful party configuration is found.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    from collections import defaultdict\n    \n    # Parse the friendship pairs\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships[u].add(v)\n        friendships[v].add(u)\n        index += 2\n    \n    # Check for a complete subgraph of 5 nodes (clique)\n    def find_clique():\n        for person in range(1, N + 1):\n            if len(friendships[person]) >= 4:\n                # Check if there is a clique of size 5 including this person\n                friends = list(friendships[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                clique = [person, friends[i], friends[j], friends[k], friends[l]]\n                                if all(friendships[clique[x]].intersection(clique) == set(clique) - {clique[x]} for x in range(5)):\n                                    return clique\n        return None\n    \n    # Check for an independent set of 5 nodes\n    def find_independent_set():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(friendships[person]) < N - 1:\n                # Check if there is an independent set of size 5 including this person\n                possible_set = non_friends - friendships[person] - {person}\n                if len(possible_set) >= 4:\n                    independent_set = [person] + list(possible_set)[:4]\n                    return independent_set\n        return None\n    \n    # Try to find a successful party configuration\n    clique = find_clique()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    independent_set = find_independent_set()\n    if independent_set:\n        print(' '.join(map(str, independent_set)))\n        return\n    \n    # If no configuration is found, print -1\n    print(-1)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendship pairs.\",\n      \"steps\": [\n        \"Read the first line to get N and M.\",\n        \"Read the next M lines to get the friendship pairs.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a successful party can be organized where all 5 people are friends with each other.\",\n      \"steps\": [\n        \"Check if there exists a complete subgraph of 5 nodes in the friendship graph.\",\n        \"Use graph traversal techniques to identify cliques of size 5.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a successful party can be organized where no two of the 5 people are friends with each other.\",\n      \"steps\": [\n        \"Check if there exists a set of 5 nodes with no edges between them in the friendship graph.\",\n        \"Use graph traversal techniques to identify independent sets of size 5.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result based on the findings.\",\n      \"steps\": [\n        \"If a successful party configuration is found, print the 5 people involved.\",\n        \"If no configuration is found, print -1.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract N, M, and the list of friendship pairs.\",\n    \"Construct a graph representation using adjacency lists or matrices.\",\n    \"Check for a complete subgraph of 5 nodes (clique) in the graph.\",\n    \"Check for an independent set of 5 nodes in the graph.\",\n    \"Output the result based on whether a successful party configuration is found.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    from collections import defaultdict\n    \n    # Create adjacency list for the graph\n    friends = defaultdict(set)\n    for _ in range(M):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        friends[u].add(v)\n        friends[v].add(u)\n    \n    # Check for a complete subgraph of 5 nodes (clique)\n    def find_clique_of_5():\n        for u in range(1, N + 1):\n            if len(friends[u]) >= 4:\n                for v in friends[u]:\n                    if len(friends[v]) >= 4:\n                        common_friends = friends[u].intersection(friends[v])\n                        if len(common_friends) >= 3:\n                            common_friends = list(common_friends)\n                            for i in range(len(common_friends)):\n                                for j in range(i + 1, len(common_friends)):\n                                    for k in range(j + 1, len(common_friends)):\n                                        a, b, c = common_friends[i], common_friends[j], common_friends[k]\n                                        if a in friends[b] and a in friends[c] and b in friends[c]:\n                                            return [u, v, a, b, c]\n        return None\n    \n    # Check for an independent set of 5 nodes\n    def find_independent_set_of_5():\n        non_friends = set(range(1, N + 1))\n        for u in range(1, N + 1):\n            if len(non_friends) < 5:\n                break\n            non_friends -= friends[u]\n            non_friends.add(u)\n            if len(non_friends) >= 5:\n                return list(non_friends)[:5]\n        return None\n    \n    # Try to find a clique of 5\n    clique = find_clique_of_5()\n    if clique:\n        print(\" \".join(map(str, clique)))\n        return\n    \n    # Try to find an independent set of 5\n    independent_set = find_independent_set_of_5()\n    if independent_set:\n        print(\" \".join(map(str, independent_set)))", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendship pairs.\",\n      \"goal\": \"Create data structures to store the people and their friendships.\"\n    },\n    {\n      \"description\": \"Identify potential groups of 5 people from the list of N people.\",\n      \"goal\": \"Generate all possible combinations of 5 people.\"\n    },\n    {\n      \"description\": \"Check if a group of 5 people is a successful party.\",\n      \"goal\": \"Determine if all 5 people are friends with each other or if none of them are friends with each other.\"\n    },\n    {\n      \"description\": \"Output the result based on the findings.\",\n      \"goal\": \"Print the 5 people if a successful party is found, otherwise print -1.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read and parse the input to get N, M, and the list of friendship pairs.\",\n    \"Store friendships in a suitable data structure, such as an adjacency list or matrix.\",\n    \"Iterate over all combinations of 5 people from the list of N people.\",\n    \"For each combination, check if all 5 people are friends with each other or if none are friends with each other.\",\n    \"If a successful party is found, print the 5 people and terminate.\",\n    \"If no successful party is found after checking all combinations, print -1.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for group in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (group[i], group[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(\" \".join(map(str, group)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendships.\",\n      \"output\": \"A list of friendships represented as pairs of integers and the values of N and M.\"\n    },\n    {\n      \"description\": \"Model the friendships as a graph where each person is a node and each friendship is an edge.\",\n      \"output\": \"A graph data structure representing the friendships.\"\n    },\n    {\n      \"description\": \"Identify all possible combinations of 5 people from the N people.\",\n      \"output\": \"A list of all possible 5-person combinations.\"\n    },\n    {\n      \"description\": \"For each 5-person combination, check if all are friends with each other or if none are friends with each other.\",\n      \"output\": \"A boolean indicating whether a successful party can be formed with the current combination.\"\n    },\n    {\n      \"description\": \"Determine if there exists at least one successful party configuration.\",\n      \"output\": \"The indices of the 5 people forming a successful party or -1 if no such configuration exists.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read and parse the input to get N, M, and the list of friendships.\",\n    \"Construct a graph using the list of friendships.\",\n    \"Generate all possible combinations of 5 people from the N people.\",\n    \"For each combination, check if it forms a successful party by verifying the friendship conditions.\",\n    \"If a successful party is found, output the indices of the 5 people. If no successful party is found after checking all combinations, output -1.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Generate all combinations of 5 people\n    people = list(range(1, N + 1))\n    for combo in combinations(people, 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendship pairs.\",\n      \"goal\": \"Create data structures to store the people and their friendships.\"\n    },\n    {\n      \"description\": \"Identify potential groups of 5 people from the list of N people.\",\n      \"goal\": \"Generate combinations of 5 people to evaluate for party conditions.\"\n    },\n    {\n      \"description\": \"Check if all 5 people in a group are friends with each other.\",\n      \"goal\": \"Verify if the selected group forms a complete subgraph (clique) in the friendship graph.\"\n    },\n    {\n      \"description\": \"Check if no two people in a group are friends with each other.\",\n      \"goal\": \"Verify if the selected group forms an independent set in the friendship graph.\"\n    },\n    {\n      \"description\": \"Determine if a successful party can be organized based on the conditions.\",\n      \"goal\": \"Output the group of 5 people if a successful party is possible, otherwise output -1.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read and parse the input to obtain N, M, and the list of friendship pairs.\",\n    \"Create a graph representation using adjacency lists or matrices to store friendships.\",\n    \"Iterate over all combinations of 5 people from the list of N people.\",\n    \"For each combination, check if it forms a complete subgraph (clique) or an independent set.\",\n    \"If a successful party is found, print the 5 people involved and terminate.\",\n    \"If no successful party is found after checking all combinations, print -1.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for group in combinations(range(1, N + 1), 5):\n        # Check if all are friends (clique)\n        all_friends = True\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (group[i], group[j]) not in friendships:\n                    all_friends = False\n                    break\n            if not all_friends:\n                break\n        \n        if all_friends:\n            print(' '.join(map(str, group)))\n            return\n        \n        # Check if none are friends (independent set)\n        no_friends = True\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (group[i], group[j]) in friendships:\n                    no_friends = False\n                    break\n            if not no_friends:\n                break\n        \n        if no_friends:\n            print(' '.join(map(str, group)))\n            return\n    \n    # If no successful party is found\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), the number of friendships (M), and the list of friendship pairs.\",\n      \"output\": \"N, M, and a list of tuples representing friendships.\"\n    },\n    {\n      \"description\": \"Create a graph representation of the friendships using an adjacency list or adjacency matrix.\",\n      \"output\": \"A graph data structure representing friendships.\"\n    },\n    {\n      \"description\": \"Identify all possible combinations of 5 people from the N people.\",\n      \"output\": \"A list of all possible 5-person combinations.\"\n    },\n    {\n      \"description\": \"For each 5-person combination, check if all are friends with each other or if none are friends with each other.\",\n      \"output\": \"A boolean indicating whether a successful party configuration is found.\"\n    },\n    {\n      \"description\": \"If a successful party configuration is found, return the combination. If none is found after checking all combinations, return -1.\",\n      \"output\": \"A list of 5 people or -1.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to get N, M, and the list of friendship pairs.\",\n    \"Construct a graph to represent the friendships using an adjacency list or matrix.\",\n    \"Generate all possible combinations of 5 people from the N people.\",\n    \"For each combination, check if it satisfies the successful party conditions: either all are friends or none are friends.\",\n    \"If a valid combination is found, output the combination. If no valid combination is found after checking all, output -1.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships.add((u, v))\n        friendships.add((v, u))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendship pairs.\",\n      \"goal\": \"Create data structures to store the people and their friendships.\"\n    },\n    {\n      \"description\": \"Identify potential groups of 5 people from the list of N people.\",\n      \"goal\": \"Generate combinations of 5 people to evaluate for party conditions.\"\n    },\n    {\n      \"description\": \"Check if all 5 people in a group are friends with each other.\",\n      \"goal\": \"Verify if the selected group forms a complete subgraph (clique) in the friendship graph.\"\n    },\n    {\n      \"description\": \"Check if no two people in a group are friends with each other.\",\n      \"goal\": \"Verify if the selected group forms an independent set in the friendship graph.\"\n    },\n    {\n      \"description\": \"Determine if a successful party can be organized based on the above checks.\",\n      \"goal\": \"Output the group of 5 people if a successful party is possible, otherwise output -1.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read and parse the input to obtain N, M, and the list of friendship pairs.\",\n    \"Create a graph representation using adjacency lists or matrices to store friendships.\",\n    \"Iterate over all combinations of 5 people from the list of N people.\",\n    \"For each combination, check if it forms a complete subgraph (clique) or an independent set in the friendship graph.\",\n    \"If a successful party is found, print the 5 people in the group.\",\n    \"If no successful party is found after checking all combinations, print -1.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    # Create a set of friendships\n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for group in combinations(range(1, N + 1), 5):\n        # Check if the group is a clique\n        is_clique = True\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (group[i], group[j]) not in friendships:\n                    is_clique = False\n                    break\n            if not is_clique:\n                break\n        \n        if is_clique:\n            print(\" \".join(map(str, group)))\n            return\n        \n        # Check if the group is an independent set\n        is_independent_set = True\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (group[i], group[j]) in friendships:\n                    is_independent_set = False\n                    break\n            if not is_independent_set:\n                break\n        \n        if is_independent_set:\n            print(\" \".join(map(str, group)))\n            return\n    \n    # If no successful party is found\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [true, true, true, true, true, false, true, false, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 220, "prompt": "On the great island of Baltia, there live N people, numbered from 1 to N. There are exactly M pairs of people that are friends with each other. The people of Baltia want to organize a successful party, but they have very strict rules on what a party is and when the party is successful. On the island of Baltia, a party is a gathering of exactly 5 people. The party is considered to be successful if either all the people at the party are friends with each other (so that they can all talk to each other without having to worry about talking to someone they are not friends with) or no two people at the party are friends with each other (so that everyone can just be on their phones without anyone else bothering them). Please help the people of Baltia organize a successful party or tell them that it's impossible to do so. Note that each pair counts as a bidirectional friendship.\n\nInput\n\nThe first line contains two integer numbers, N (5 \u2264 N \u2264 2*10^5) and M (0 \u2264 M \u2264 2*10^5) \u2013 the number of people that live in Baltia, and the number of friendships. The next M lines each contains two integers U_i and V_i (1 \u2264 U_i,V_i \u2264 N) \u2013 meaning that person U_i is friends with person V_i. Two friends can not be in the list of friends twice (no pairs are repeated) and a person can be friends with themselves (U_i \u2260 V_i).\n\nOutput\n\nIf it's possible to organize a successful party, print 5 numbers indicating which 5 people should be invited to the party. If it's not possible to organize a successful party, print -1 instead. If there are multiple successful parties possible, print any.\n\nExamples\n\nInput\n\n\n6 3\n1 4\n4 2\n5 4\n\n\nOutput\n\n\n1 2 3 5 6\n\n\nInput\n\n\n5 4\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n-1", "examples": "\nInput\n\nThe first line contains two integer numbers, N (5 \u2264 N \u2264 2*10^5) and M (0 \u2264 M \u2264 2*10^5) \u2013 the number of people that live in Baltia, and the number of friendships. The next M lines each contains two integers U_i and V_i (1 \u2264 U_i,V_i \u2264 N) \u2013 meaning that person U_i is friends with person V_i. Two friends can not be in the list of friends twice (no pairs are repeated) and a person can be friends with themselves (U_i \u2260 V_i).\n\nOutput\n\nIf it's possible to organize a successful party, print 5 numbers indicating which 5 people should be invited to the party. If it's not possible to organize a successful party, print -1 instead. If there are multiple successful parties possible, print any.\n\nExamples\n\nInput\n\n\n6 3\n1 4\n4 2\n5 4\n\n\nOutput\n\n\n1 2 3 5 6\n\n\nInput\n\n\n5 4\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n-1", "mutate_method": "add_1_sentence_at_end", "save_node": false, "parent_index": 29}
