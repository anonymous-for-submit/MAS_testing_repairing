{"name": "1575_A. Another Sorting Problem", "description": "Andi and Budi were given an assignment to tidy up their bookshelf of n books. Each book is represented by the book title \u2014 a string s_i numbered from 1 to n, each with length m. Andi really wants to sort the book lexicographically ascending, while Budi wants to sort it lexicographically descending.\n\nSettling their fight, they decided to combine their idea and sort it asc-desc-endingly, where the odd-indexed characters will be compared ascendingly, and the even-indexed characters will be compared descendingly.\n\nA string a occurs before a string b in asc-desc-ending order if and only if in the first position where a and b differ, the following holds:\n\n  * if it is an odd position, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b; \n  * if it is an even position, the string a has a letter that appears later in the alphabet than the corresponding letter in b. \n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n \u22c5 m \u2264 10^6).\n\nThe i-th of the next n lines contains a string s_i consisting of m uppercase Latin letters \u2014 the book title. The strings are pairwise distinct.\n\nOutput\n\nOutput n integers \u2014 the indices of the strings after they are sorted asc-desc-endingly.\n\nExample\n\nInput\n\n\n5 2\nAA\nAB\nBB\nBA\nAZ\n\n\nOutput\n\n\n5 2 1 3 4\n", "tags": ["data structures", "sortings", "strings"], "difficulty": 7, "id": 1575, "sample_io": [{"input": "5 2\nAA\nAB\nBB\nBA\nAZ\n", "output": ["5 2 1 3 4 \n"]}], "test_list": [{"input": "5 2\nAA\nAB\nBB\nBA\nZA\n", "output": ["2 1 3 4 5\n"]}, {"input": "5 2\nAA\nAB\nCB\nBA\nAZ\n", "output": ["5 2 1 4 3\n"]}, {"input": "2 2\nAA\nAB\nCB\nBA\nAZ\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nBC\nCB\nAB\nAZ\n", "output": ["1 2\n"]}, {"input": "1 2\nAA\nAC\nBC\nBA\nZA\n", "output": ["1\n"]}, {"input": "5 2\nAA\nAB\nBC\nBA\nAZ\n", "output": ["5 2 1 3 4\n"]}, {"input": "3 2\nAA\nAB\nCB\nAB\nAZ\n", "output": ["2 1 3\n"]}, {"input": "4 2\nBA\nAC\nEA\nAA\nZ@\n", "output": ["2 4 1 3\n"]}, {"input": "3 2\nAA\nBA\nCB\nAB\nAZ\n", "output": ["1 2 3\n"]}, {"input": "4 2\nAA\nAC\nCB\nBA\nAZ\n", "output": ["2 1 4 3\n"]}, {"input": "4 2\nBA\nBC\nEA\nAB\nZ@\n", "output": ["4 2 1 3\n"]}, {"input": "3 2\nBA\nAD\nAB\nBA\nC[\n", "output": ["2 3 1\n"]}, {"input": "3 2\nAA\nBA\nBC\nAB\nAZ\n", "output": ["1 3 2\n"]}, {"input": "5 2\nAA\nBA\nCC\nBB\nAZ\n", "output": ["5 1 4 2 3\n"]}, {"input": "2 2\nAA\nAB\nCB\nAB\nAZ\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nAC\nCB\nAB\nAZ\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nBC\nCB\nAB\nZA\n", "output": ["1 2\n"]}, {"input": "2 2\nAA\nBC\nBC\nAB\nZA\n", "output": ["1 2\n"]}, {"input": "2 2\nAA\nAC\nBC\nAB\nZA\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nAC\nBC\nBA\nZA\n", "output": ["2 1\n"]}, {"input": "1 2\nAA\nAC\nBC\nAA\nZA\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAC\nCB\nAA\nZA\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAC\nCB\nAA\nZ@\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAC\nCB\nAA\nZ@\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nAC\nCA\nAA\nZ@\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nAC\nCA\nAA\nZ@\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nAC\nCA\nBA\nZ@\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nAC\nCA\nAB\nZ@\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nAC\nCA\nAB\n@Z\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nAC\nCA\nAB\n@Y\n", "output": ["2 1\n"]}, {"input": "5 2\nAA\nAB\nBB\nBA\nZB\n", "output": ["2 1 3 4 5\n"]}, {"input": "2 2\nAA\nAD\nCB\nAB\nAZ\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nBC\nBB\nAB\nAZ\n", "output": ["1 2\n"]}, {"input": "2 2\nBA\nBC\nCB\nAB\nZA\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nBC\nBD\nAB\nZA\n", "output": ["1 2\n"]}, {"input": "2 2\nAA\nAC\nBC\nAB\n[A\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nAC\nBC\nBA\nAZ\n", "output": ["2 1\n"]}, {"input": "1 2\nAA\nAB\nBC\nBA\nZA\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAC\nBC\nAA\nAZ\n", "output": ["1\n"]}, {"input": "1 2\nBA\nAC\nCB\nAA\nZ@\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAC\nBC\nAA\nZ@\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nAC\nDA\nAA\nZ@\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nAC\nCA\nAA\n[@\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nCA\nCA\nBA\nZ@\n", "output": ["1 2\n"]}, {"input": "2 2\nAB\nAC\nAC\nAB\nZ@\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nAC\nBA\nAB\n@Z\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nCA\nCA\nAB\n@Y\n", "output": ["1 2\n"]}, {"input": "5 2\nAA\nAB\nCC\nBA\nAZ\n", "output": ["5 2 1 4 3\n"]}, {"input": "2 2\nBA\nBC\nBB\nAB\nZA\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nAC\nAC\nAB\n[A\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nAC\nCB\nBA\nAZ\n", "output": ["2 1\n"]}, {"input": "1 2\nAA\nAB\nBC\nBA\nAZ\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAC\nBC\nAA\n@Z\n", "output": ["1\n"]}, {"input": "1 2\nBA\nAC\nCA\nAA\nZ@\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAC\nBC\nAA\nZ?\n", "output": ["2 1\n"]}, {"input": "3 2\nAA\nAC\nDA\nAA\nZ@\n", "output": ["2 1 3\n"]}, {"input": "2 2\nBA\nAC\nCA\nAA\n[@\n", "output": ["2 1\n"]}, {"input": "1 2\nAB\nCA\nCA\nBA\nZ@\n", "output": ["1\n"]}, {"input": "2 2\nAB\nCA\nAC\nAB\nZ@\n", "output": ["1 2\n"]}, {"input": "2 2\nAB\nAC\nBA\nBB\n@Z\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nCB\nCA\nAB\n@Y\n", "output": ["1 2\n"]}, {"input": "3 2\nAA\nAB\nCC\nBA\nAZ\n", "output": ["2 1 3\n"]}, {"input": "1 2\nBA\nBC\nBB\nAB\nZA\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAC\nAC\nAC\n[A\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nAB\nCB\nCA\nAZ\n", "output": ["2 1\n"]}, {"input": "1 2\nAA\nAB\nBC\nBA\nA[\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAC\nBC\nAB\n@Z\n", "output": ["1\n"]}, {"input": "1 2\nBA\nAC\nCA\nAA\n@Z\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAC\nBC\nAA\n?Z\n", "output": ["2 1\n"]}, {"input": "3 2\nAA\nAC\nEA\nAA\nZ@\n", "output": ["2 1 3\n"]}, {"input": "2 2\nBA\nAC\nAC\nAA\n[@\n", "output": ["2 1\n"]}, {"input": "1 2\nBB\nCA\nCA\nBA\nZ@\n", "output": ["1\n"]}, {"input": "2 2\nAB\nBA\nAC\nAB\nZ@\n", "output": ["1 2\n"]}, {"input": "2 2\nAB\nAC\nBA\nBB\n?Z\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nCB\nCA\nAC\n@Y\n", "output": ["1 2\n"]}, {"input": "1 2\nBA\nCB\nBB\nAB\nZA\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAC\nAC\nAC\n[B\n", "output": ["2 1\n"]}, {"input": "1 2\nAA\nAC\nCB\nBA\nAZ\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAB\nBC\nBA\nA[\n", "output": ["2 1\n"]}, {"input": "1 2\nAA\nAC\nCB\nAB\n@Z\n", "output": ["1\n"]}, {"input": "1 2\nBA\nAC\nCA\nAB\n@Z\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAC\nBC\nA@\n?Z\n", "output": ["2 1\n"]}, {"input": "3 2\nBA\nAC\nEA\nAA\nZ@\n", "output": ["2 1 3\n"]}, {"input": "1 2\nBB\nAC\nCA\nBA\nZ@\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAC\nBA\nBB\n?Z\n", "output": ["2 1\n"]}, {"input": "2 2\nBA\nCB\nCA\nAC\n@Y\n", "output": ["1 2\n"]}, {"input": "2 2\nBA\nCB\nBB\nAB\nZA\n", "output": ["1 2\n"]}, {"input": "1 2\nAA\nAC\nAC\nAC\n[B\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAC\nCB\nBA\nZA\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAB\nCB\nBA\nA[\n", "output": ["2 1\n"]}, {"input": "1 2\nAA\nAC\nCB\nAB\nZ@\n", "output": ["1\n"]}, {"input": "1 2\nBA\nAC\nCB\nAB\n@Z\n", "output": ["1\n"]}, {"input": "2 2\nBA\nAC\nBC\nA@\n?Z\n", "output": ["2 1\n"]}, {"input": "1 2\nBB\nAC\nCA\nAB\nZ@\n", "output": ["1\n"]}, {"input": "2 2\nAA\nBC\nBA\nBB\n?Z\n", "output": ["1 2\n"]}, {"input": "2 2\nBA\nBC\nCA\nAC\n@Y\n", "output": ["2 1\n"]}, {"input": "1 2\nAA\nAC\nAC\nAC\n[C\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAC\nCB\nBA\nA[\n", "output": ["2 1\n"]}, {"input": "1 2\nAA\nAC\nDB\nAB\nZ@\n", "output": ["1\n"]}, {"input": "2 2\nBA\nAD\nBC\nA@\n?Z\n", "output": ["2 1\n"]}, {"input": "4 2\nBA\nAC\nEA\nAB\nZ@\n", "output": ["2 4 1 3\n"]}, {"input": "1 2\nCB\nAC\nCA\nAB\nZ@\n", "output": ["1\n"]}, {"input": "2 2\nAA\nBC\nBA\nBB\nZ?\n", "output": ["1 2\n"]}, {"input": "2 2\nBA\nBB\nCA\nAC\n@Y\n", "output": ["2 1\n"]}, {"input": "1 2\nAA\nAC\nAC\nAD\n[C\n", "output": ["1\n"]}, {"input": "2 2\nAA\nCA\nCB\nBA\nA[\n", "output": ["1 2\n"]}, {"input": "2 2\nBA\nAD\nBC\nA?\n?Z\n", "output": ["2 1\n"]}, {"input": "1 2\nCB\nCA\nCA\nAB\nZ@\n", "output": ["1\n"]}, {"input": "2 2\nAA\nBC\nBB\nBB\nZ?\n", "output": ["1 2\n"]}, {"input": "2 2\nBA\nBB\nCA\nCA\n@Y\n", "output": ["2 1\n"]}, {"input": "1 2\nAA\nCA\nAC\nAD\n[C\n", "output": ["1\n"]}, {"input": "2 2\nAA\nCA\nBB\nBA\nA[\n", "output": ["1 2\n"]}, {"input": "2 2\nBA\nAD\nBB\nA?\n?Z\n", "output": ["2 1\n"]}, {"input": "2 2\nBA\nBB\nCA\nDA\n@Y\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nCA\nBB\nAB\nA[\n", "output": ["1 2\n"]}, {"input": "2 2\nBA\nDA\nBB\nA?\n?Z\n", "output": ["1 2\n"]}, {"input": "2 2\nAB\nBB\nCA\nDA\n@Y\n", "output": ["1 2\n"]}, {"input": "2 2\nAA\nCA\nBB\nAA\nA[\n", "output": ["1 2\n"]}, {"input": "2 2\nBA\nAD\nBB\nA?\n?Y\n", "output": ["2 1\n"]}, {"input": "2 2\nBA\nBB\nCA\nD@\n@Y\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nDA\nBB\nBA\nA[\n", "output": ["1 2\n"]}, {"input": "2 2\nAB\nAD\nBB\nA?\n?Y\n", "output": ["2 1\n"]}, {"input": "2 2\nBA\nBB\nAC\nD@\n@Y\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nDA\nBB\nAB\nA[\n", "output": ["1 2\n"]}, {"input": "2 2\nAB\nAD\nBA\nA?\n?Y\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nDA\nAB\nAB\nA[\n", "output": ["1 2\n"]}, {"input": "2 2\nAB\nAD\nAB\nA?\n?Y\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nDA\nAB\nBA\nA[\n", "output": ["1 2\n"]}, {"input": "2 2\nAB\nAD\nCA\nA?\n?Y\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nDA\nAB\nBA\nB[\n", "output": ["1 2\n"]}, {"input": "2 2\nAB\nAD\nCA\nA>\n?Y\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nDA\nAB\nCA\nB[\n", "output": ["1 2\n"]}, {"input": "1 2\nAA\nDA\nAB\nCA\nB[\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAD\nAB\nCA\nB[\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAD\nAB\nAC\nB[\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAD\nAB\nAC\nC[\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAD\nAB\nCA\nC[\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAD\nAB\nBA\nC[\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAD\nAB\nBA\nC[\n", "output": ["2 1\n"]}, {"input": "2 2\nBA\nAD\nAB\nBA\nC[\n", "output": ["2 1\n"]}, {"input": "2 2\nBA\nAE\nAB\nBA\nC[\n", "output": ["2 1\n"]}, {"input": "2 2\nBA\nAE\nAB\nBA\n[C\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nAB\nCB\nAC\nAZ\n", "output": ["2 1\n"]}, {"input": "3 2\nAA\nAC\nCB\nAB\nAZ\n", "output": ["2 1 3\n"]}, {"input": "2 2\nAA\nBC\nDB\nAB\nAZ\n", "output": ["1 2\n"]}, {"input": "2 2\nAA\nBC\nCB\nBA\nZA\n", "output": ["1 2\n"]}, {"input": "2 2\nAA\nBC\nBC\nAC\nZA\n", "output": ["1 2\n"]}, {"input": "2 2\nAA\nAC\nCB\nAB\nZA\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nAC\nCC\nBA\nZA\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nCA\nBC\nBA\nZA\n", "output": ["1 2\n"]}, {"input": "1 2\nAA\nAB\nBC\nAA\nZA\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAC\nCC\nAA\nZA\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAD\nCB\nAA\nZ@\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAC\nCB\n@A\nZ@\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nCA\nCA\nAB\nZ@\n", "output": ["1 2\n"]}, {"input": "2 2\nAA\nAC\nCA\nAB\nZ@\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nAC\nAC\nAB\n@Z\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nAC\nAC\nAB\n@Y\n", "output": ["2 1\n"]}, {"input": "2 2\nAA\nBC\nBD\nAB\nYA\n", "output": ["1 2\n"]}, {"input": "3 2\nAA\nAC\nBC\nAB\n[A\n", "output": ["2 1 3\n"]}, {"input": "2 2\nAA\nAC\nAC\nBA\nAZ\n", "output": ["2 1\n"]}, {"input": "1 1\nAA\nAC\nBC\nAA\nAZ\n", "output": ["1\n"]}, {"input": "1 2\nBA\nAC\nCB\nAA\n@Z\n", "output": ["1\n"]}, {"input": "2 2\nAB\nAC\nDA\nAA\nZ@\n", "output": ["2 1\n"]}, {"input": "2 2\nBA\nAC\nCB\nAA\n[@\n", "output": ["2 1\n"]}, {"input": "2 1\nAB\nCA\nCA\nBA\nZ@\n", "output": ["1 2\n"]}, {"input": "2 2\nBA\nAC\nCA\nAB\n@Z\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nBC\nBA\nAB\n@Z\n", "output": ["1 2\n"]}, {"input": "2 2\nAB\nCA\nAC\nAB\n@Y\n", "output": ["1 2\n"]}, {"input": "5 2\nAA\nAB\nCC\nBB\nAZ\n", "output": ["5 2 1 4 3\n"]}, {"input": "2 2\nBA\nCB\nBB\nAB\nAZ\n", "output": ["1 2\n"]}, {"input": "1 2\nAA\nAB\nBC\nBA\nAY\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAC\nBC\nBA\n@Z\n", "output": ["1\n"]}, {"input": "2 2\nAB\nAC\nCB\nAA\n[@\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nCA\nAD\nAB\nZ@\n", "output": ["1 2\n"]}, {"input": "2 2\nAB\nCB\nCB\nAB\n@Y\n", "output": ["1 2\n"]}, {"input": "3 2\nAA\nAB\nCC\nBA\nAY\n", "output": ["2 1 3\n"]}, {"input": "1 2\nBA\nBC\nBB\nBB\nZA\n", "output": ["1\n"]}, {"input": "2 2\nAA\nCA\nAC\nAC\n[A\n", "output": ["1 2\n"]}, {"input": "2 2\nAA\nAB\nBC\nBA\nAZ\n", "output": ["2 1\n"]}, {"input": "1 2\nAA\nAB\nBB\nBA\nA[\n", "output": ["1\n"]}, {"input": "1 2\nAA\nAC\nBC\nAB\n@[\n", "output": ["1\n"]}, {"input": "1 2\nBA\nBC\nCA\nAA\nZ@\n", "output": ["1\n"]}, {"input": "2 2\nAA\nCA\nBC\nAA\n?Z\n", "output": ["1 2\n"]}, {"input": "3 2\nAB\nAC\nEA\nAA\nZ@\n", "output": ["2 1 3\n"]}, {"input": "2 2\nBA\nAC\nAC\nAA\nZ@\n", "output": ["2 1\n"]}, {"input": "1 2\nBB\nCA\nCA\nBA\n@Z\n", "output": ["1\n"]}, {"input": "2 2\nAB\nBA\nAC\nBA\nZ@\n", "output": ["1 2\n"]}, {"input": "2 2\nBB\nCB\nCA\nAC\n@Y\n", "output": ["1 2\n"]}, {"input": "1 2\nBA\nCB\nBB\nBA\nZA\n", "output": ["1\n"]}, {"input": "2 2\nBA\nAC\nAC\nAC\n[B\n", "output": ["2 1\n"]}, {"input": "1 2\nAA\nAC\nCB\nAA\nAZ\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAB\nBC\nB@\nA[\n", "output": ["2 1\n"]}, {"input": "1 2\nAA\nAC\nCB\nAA\n@Z\n", "output": ["1\n"]}, {"input": "2 2\nAA\nAC\nCA\nBB\n?Z\n", "output": ["2 1\n"]}, {"input": "2 2\nAB\nCB\nBB\nAB\nZA\n", "output": ["1 2\n"]}, {"input": "1 2\nAA\nCA\nAC\nAC\n[B\n", "output": ["1\n"]}, {"input": "3 2\nAA\nAB\nCB\nBA\nA[\n", "output": ["2 1 3\n"]}, {"input": "1 1\nAA\nAC\nCB\nAB\nZ@\n", "output": ["1\n"]}, {"input": "1 2\nBA\nAC\nCC\nAB\n@Z\n", "output": ["1\n"]}], "task_id": "codecontest/0", "repair_prompt": ["Andi and Budi were given an assignment to tidy up their bookshelf of n books where each book is represented by the book title \u2014 a string s_i numbered from 1 to n, each with length m, and Andi really wants to sort the book lexicographically ascending, while Budi wants to sort it lexicographically descending. Settling their fight, they decided to combine their idea and sort it asc-desc-endingly. In this new method, they compare the odd-indexed characters in an ascending manner. Meanwhile, the even-indexed characters are compared in a descending order. A string a occurs before a string b in asc-desc-ending order if and only if in the first position where a and b differ, the following holds: * if it is an odd position, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b; * if it is an even position, the string a has a letter that appears later in the alphabet than the corresponding letter in b. Your task is to write a function that sorts an array of book titles according to the asc-desc-ending order. Ensure your implementation efficiently handles cases where the number of books and their title lengths can be large. Your solution should also account for potential edge cases such as identical book titles or titles of varying lengths.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n \u22c5 m \u2264 10^6).\n\nThe i-th of the next n lines contains a string s_i consisting of m uppercase Latin letters \u2014 the book title. The strings are pairwise distinct.\n\nOutput\n\nOutput n integers \u2014 the indices of the strings after they are sorted asc-desc-endingly.\n\nExample\n\nInput\n\n\n5 2\nAA\nAB\nBB\nBA\nAZ\n\n\nOutput\n\n\n5 2 1 3 4\n\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    # Parse the input\n    n, m = map(int, data[0].split())\n    book_titles = data[1:n+1]\n    \n    # Custom sorting function\n    def asc_desc_ending_key(title):\n        # Create a tuple key for sorting\n        key = []\n        for i, char in enumerate(title):\n            if i % 2 == 0:\n                # Odd index (1-based), ascending order\n                key.append((char, 1))\n            else:\n                # Even index (1-based), descending order\n                key.append((char, -1))\n        return key\n    \n    # Sort the book titles using the custom key\n    sorted_indices = sorted(range(n), key=lambda i: asc_desc_ending_key(book_titles[i]))\n    \n    # Output the sorted indices (1-based)\n    print(' '.join(str(i + 1) for i in sorted_indices))\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["import sys\n\ndef custom_sort_key(title):\n    # Create a tuple that represents the custom sort order\n    # Odd-indexed characters are sorted ascending, even-indexed descending\n    return tuple((c if i % 2 == 0 else chr(255 - ord(c)) for i, c in enumerate(title)))\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    titles = [(data[i + 2], i + 1) for i in range(n)]\n    \n    # Sort titles using the custom sort key\n    sorted_titles = sorted(titles, key=lambda x: custom_sort_key(x[0]))\n    \n    # Extract indices from sorted titles\n    sorted_indices = [index for _, index in sorted_titles]\n    \n    # Print the sorted indices\n    print(' '.join(map(str, sorted_indices)))\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    # Parse the input\n    n, m = map(int, data[0].split())\n    titles = data[1:n+1]\n    \n    # Custom comparison function\n    def asc_desc_ending_key(title):\n        # Create a tuple of characters with odd positions as is and even positions negated\n        return tuple((c if i % 2 == 0 else chr(255 - ord(c))) for i, c in enumerate(title))\n    \n    # Sort the titles using the custom key\n    sorted_indices = sorted(range(n), key=lambda i: asc_desc_ending_key(titles[i]))\n    \n    # Output the indices of the sorted titles\n    print(' '.join(str(i + 1) for i in sorted_indices))\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    # Parse the input\n    n, m = map(int, data[0].split())\n    book_titles = data[1:n+1]\n    \n    # Define a custom key function for sorting\n    def asc_desc_ending_key(title):\n        # Create a tuple of characters with odd positions sorted ascending\n        # and even positions sorted descending\n        return tuple(\n            (c if i % 2 == 0 else chr(255 - ord(c))) \n            for i, c in enumerate(title)\n        )\n    \n    # Sort the book titles using the custom key\n    sorted_indices = sorted(range(n), key=lambda i: asc_desc_ending_key(book_titles[i]))\n    \n    # Output the indices of the sorted book titles\n    print(' '.join(str(i + 1) for i in sorted_indices))\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    # Parse the input\n    n, m = map(int, data[0].split())\n    book_titles = data[1:n+1]\n    \n    # Custom key function for sorting\n    def asc_desc_key(title):\n        # Create a tuple of characters with custom ordering\n        return tuple(\n            (c if i % 2 == 0 else chr(255 - ord(c)))  # odd index: ascending, even index: descending\n            for i, c in enumerate(title)\n        )\n    \n    # Sort the book titles using the custom key\n    sorted_indices = sorted(range(n), key=lambda i: asc_desc_key(book_titles[i]))\n    \n    # Output the indices of the sorted book titles\n    print(' '.join(str(i + 1) for i in sorted_indices))\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    titles = data[2:]\n    \n    # Pair each title with its original index\n    indexed_titles = [(titles[i], i + 1) for i in range(n)]\n    \n    def custom_sort_key(title_index_pair):\n        title, index = title_index_pair\n        # Create a tuple of characters with odd positions sorted ascending\n        # and even positions sorted descending\n        return tuple(\n            (ord(title[i]) if i % 2 == 0 else -ord(title[i]))\n            for i in range(m)\n        )\n    \n    # Sort the titles using the custom sort key\n    indexed_titles.sort(key=custom_sort_key)\n    \n    # Extract the indices of the sorted titles\n    sorted_indices = [index for _, index in indexed_titles]\n    \n    # Print the result\n    print(' '.join(map(str, sorted_indices)))\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    titles = data[2:]\n    \n    def asc_desc_ending_key(title):\n        # Create a tuple key for sorting\n        key = []\n        for i, char in enumerate(title):\n            if i % 2 == 0:\n                # Odd-indexed positions (0-based index) -> Ascending\n                key.append((char, 1))\n            else:\n                # Even-indexed positions (0-based index) -> Descending\n                key.append((char, -1))\n        return tuple(key)\n    \n    # Pair each title with its original index\n    indexed_titles = list(enumerate(titles, start=1))\n    \n    # Sort using the custom key\n    indexed_titles.sort(key=lambda x: asc_desc_ending_key(x[1]))\n    \n    # Extract the sorted indices\n    sorted_indices = [index for index, _ in indexed_titles]\n    \n    # Print the result\n    print(' '.join(map(str, sorted_indices)))\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def asc_desc_ending_sort(n, m, titles):\n    def custom_key(title):\n        # Create a tuple that represents the custom sorting order\n        return tuple(\n            (ord(title[i]) if i % 2 == 0 else -ord(title[i]))\n            for i in range(m)\n        )\n\n    # Sort titles using the custom key\n    sorted_titles = sorted(enumerate(titles, start=1), key=lambda x: custom_key(x[1]))\n\n    # Extract and return the indices of the sorted titles\n    return [index for index, _ in sorted_titles]\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    titles = data[2:n+2]\n    \n    sorted_indices = asc_desc_ending_sort(n, m, titles)\n    print(' '.join(map(str, sorted_indices)))\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    # Parse the input\n    n, m = map(int, data[0].split())\n    book_titles = data[1:n+1]\n    \n    # Custom key function for sorting\n    def asc_desc_key(title):\n        # Create a tuple of characters with odd positions sorted ascending\n        # and even positions sorted descending\n        return tuple(\n            (c if i % 2 == 0 else chr(255 - ord(c)))\n            for i, c in enumerate(title)\n        )\n    \n    # Sort the book titles using the custom key\n    sorted_indices = sorted(range(n), key=lambda i: asc_desc_key(book_titles[i]))\n    \n    # Output the indices of the sorted book titles\n    print(' '.join(str(i + 1) for i in sorted_indices))\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    # Parse the input\n    n, m = map(int, data[0].split())\n    books = [(data[i + 1], i + 1) for i in range(n)]\n    \n    # Define the custom comparator function\n    def asc_desc_ending_key(book):\n        title, index = book\n        # Create a tuple of characters with the custom sorting logic\n        return tuple(\n            (ord(title[i]) if i % 2 == 0 else -ord(title[i]))\n            for i in range(m)\n        )\n    \n    # Sort the books using the custom key\n    books.sort(key=asc_desc_ending_key)\n    \n    # Extract the indices of the sorted book titles\n    sorted_indices = [index for _, index in books]\n    \n    # Print the result\n    print(' '.join(map(str, sorted_indices)))\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    # Parse the input\n    n, m = map(int, data[0].split())\n    book_titles = data[1:n+1]\n    \n    # Custom sorting function\n    def asc_desc_ending_key(title):\n        # Create a tuple key for sorting\n        key = []\n        for i, char in enumerate(title):\n            if i % 2 == 0:\n                # Odd index (1-based), ascending order\n                key.append((char, 1))\n            else:\n                # Even index (1-based), descending order\n                key.append((char, -1))\n        return key\n    \n    # Sort the book titles using the custom key\n    sorted_indices = sorted(range(n), key=lambda i: asc_desc_ending_key(book_titles[i]))\n    \n    # Output the sorted indices (1-based)\n    print(' '.join(str(i + 1) for i in sorted_indices))\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of books (n), the length of each book title (m), and the list of book titles.\",\n      \"steps\": [\n        \"Read the first line to get n and m.\",\n        \"Read the next n lines to get the list of book titles.\"\n      ]\n    },\n    {\n      \"description\": \"Implement a custom sorting function that sorts book titles according to the asc-desc-ending order.\",\n      \"steps\": [\n        \"Define a comparison function that compares two book titles based on the asc-desc-ending criteria.\",\n        \"For each character position in the titles, determine if it is odd or even.\",\n        \"If the position is odd, compare characters in ascending order.\",\n        \"If the position is even, compare characters in descending order.\",\n        \"Use this comparison function to sort the list of book titles.\"\n      ]\n    },\n    {\n      \"description\": \"Output the sorted indices of the book titles.\",\n      \"steps\": [\n        \"Determine the original indices of the sorted book titles.\",\n        \"Output the indices in the order of the sorted titles.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract n, m, and the list of book titles.\",\n    \"Implement a custom sorting function using the asc-desc-ending criteria.\",\n    \"Sort the book titles using the custom sorting function.\",\n    \"Output the indices of the sorted book titles.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    # Parse the input\n    n, m = map(int, data[0].split())\n    book_titles = data[1:n+1]\n    \n    # Custom sorting function\n    def asc_desc_ending_key(title):\n        # Create a tuple key for sorting\n        key = []\n        for i, char in enumerate(title):\n            if i % 2 == 0:\n                # Odd index (1-based), ascending order\n                key.append((char, 1))\n            else:\n                # Even index (1-based), descending order\n                key.append((char, -1))\n        return key\n    \n    # Sort the book titles using the custom key\n    sorted_indices = sorted(range(n), key=lambda i: asc_desc_ending_key(book_titles[i]))\n    \n    # Output the sorted indices (1-based)\n    print(' '.join(str(i + 1) for i in sorted_indices))\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of books (n), the length of each book title (m), and the list of book titles.\",\n      \"output\": \"A list of book titles and their respective indices.\"\n    },\n    {\n      \"description\": \"Define a custom sorting function that implements the asc-desc-ending order.\",\n      \"output\": \"A function that compares two book titles based on the asc-desc-ending order.\"\n    },\n    {\n      \"description\": \"Sort the list of book titles using the custom sorting function.\",\n      \"output\": \"A sorted list of book titles according to the asc-desc-ending order.\"\n    },\n    {\n      \"description\": \"Extract the indices of the sorted book titles to match the required output format.\",\n      \"output\": \"A list of indices representing the order of the sorted book titles.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input values for n and m, followed by the n book titles.\",\n    \"Store each book title along with its original index in a list.\",\n    \"Implement a custom comparator function that compares two book titles based on the asc-desc-ending order: - For odd-indexed characters, compare in ascending order. - For even-indexed characters, compare in descending order.\",\n    \"Use the custom comparator to sort the list of book titles.\",\n    \"Extract and print the original indices of the sorted book titles in the required order.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\n\ndef custom_sort_key(title):\n    # Create a tuple that represents the custom sort order\n    # Odd-indexed characters are sorted ascending, even-indexed descending\n    return tuple((c if i % 2 == 0 else chr(255 - ord(c)) for i, c in enumerate(title)))\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    titles = [(data[i + 2], i + 1) for i in range(n)]\n    \n    # Sort titles using the custom sort key\n    sorted_titles = sorted(titles, key=lambda x: custom_sort_key(x[0]))\n    \n    # Extract indices from sorted titles\n    sorted_indices = [index for _, index in sorted_titles]\n    \n    # Print the sorted indices\n    print(' '.join(map(str, sorted_indices)))\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: custom_sort_key() missing 1 required positional argument: 'title'"}, "Round_1": {"code": "import sys\n\ndef custom_sort_key(title):\n    # Create a tuple that represents the custom sort order\n    # Odd-indexed characters are sorted ascending, even-indexed descending\n    return tuple((c if i % 2 == 0 else chr(255 - ord(c)) for i, c in enumerate(title)))\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    titles = [(data[i + 2], i + 1) for i in range(n)]\n    \n    # Sort titles using the custom sort key\n    sorted_titles = sorted(titles, key=lambda x: custom_sort_key(x[0]))\n    \n    # Extract indices from sorted titles\n    sorted_indices = [index for _, index in sorted_titles]\n    \n    # Print the sorted indices\n    print(' '.join(map(str, sorted_indices)))\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of books (n), the length of each book title (m), and the list of book titles.\",\n      \"steps\": [\n        \"Read the first line to get the integers n and m.\",\n        \"Read the next n lines to get the list of book titles.\"\n      ]\n    },\n    {\n      \"description\": \"Implement a custom sorting function that compares two book titles based on the asc-desc-ending order.\",\n      \"steps\": [\n        \"Define a comparison function that takes two book titles as input.\",\n        \"Iterate over the characters of the titles, comparing them based on their index position (odd or even).\",\n        \"For odd-indexed positions, compare characters in ascending order.\",\n        \"For even-indexed positions, compare characters in descending order.\",\n        \"Return the result of the comparison.\"\n      ]\n    },\n    {\n      \"description\": \"Sort the list of book titles using the custom sorting function.\",\n      \"steps\": [\n        \"Use a sorting algorithm (e.g., Python's built-in sort) with the custom comparison function to sort the titles.\",\n        \"Ensure the sorting is efficient to handle large inputs.\"\n      ]\n    },\n    {\n      \"description\": \"Output the indices of the sorted book titles.\",\n      \"steps\": [\n        \"Determine the original indices of the sorted titles.\",\n        \"Output the indices in the required format.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of books, the length of each title, and the list of titles.\",\n    \"Implement a custom comparison function to compare two titles based on the asc-desc-ending order.\",\n    \"Sort the list of titles using the custom comparison function.\",\n    \"Output the indices of the sorted titles in the required format.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    # Parse the input\n    n, m = map(int, data[0].split())\n    titles = data[1:n+1]\n    \n    # Custom comparison function\n    def asc_desc_ending_key(title):\n        # Create a tuple of characters with odd positions as is and even positions negated\n        return tuple((c if i % 2 == 0 else chr(255 - ord(c))) for i, c in enumerate(title))\n    \n    # Sort the titles using the custom key\n    sorted_indices = sorted(range(n), key=lambda i: asc_desc_ending_key(titles[i]))\n    \n    # Output the indices of the sorted titles\n    print(' '.join(str(i + 1) for i in sorted_indices))\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of books (n), the length of each book title (m), and the list of book titles.\",\n      \"steps\": [\n        \"Read the first line to get the integers n and m.\",\n        \"Read the next n lines to get the list of book titles.\"\n      ]\n    },\n    {\n      \"description\": \"Define a custom sorting function that implements the asc-desc-ending order.\",\n      \"steps\": [\n        \"Create a function that takes two book titles and compares them based on the asc-desc-ending order.\",\n        \"For each character position in the titles, determine if it is odd or even.\",\n        \"If the position is odd, compare the characters in ascending order.\",\n        \"If the position is even, compare the characters in descending order.\",\n        \"Return the comparison result for the first differing character.\"\n      ]\n    },\n    {\n      \"description\": \"Sort the list of book titles using the custom sorting function.\",\n      \"steps\": [\n        \"Use a sorting algorithm (e.g., Python's built-in sort) with the custom sorting function as the key.\",\n        \"Ensure the sorting algorithm efficiently handles large inputs.\"\n      ]\n    },\n    {\n      \"description\": \"Output the indices of the sorted book titles.\",\n      \"steps\": [\n        \"Determine the original indices of the sorted book titles.\",\n        \"Output the indices in the order of the sorted titles.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract n, m, and the list of book titles.\",\n    \"Implement a custom sorting function based on the asc-desc-ending order.\",\n    \"Sort the book titles using the custom sorting function.\",\n    \"Output the indices of the sorted book titles.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    # Parse the input\n    n, m = map(int, data[0].split())\n    book_titles = data[1:n+1]\n    \n    # Define a custom key function for sorting\n    def asc_desc_ending_key(title):\n        # Create a tuple of characters with odd positions sorted ascending\n        # and even positions sorted descending\n        return tuple(\n            (c if i % 2 == 0 else chr(255 - ord(c))) \n            for i, c in enumerate(title)\n        )\n    \n    # Sort the book titles using the custom key\n    sorted_indices = sorted(range(n), key=lambda i: asc_desc_ending_key(book_titles[i]))\n    \n    # Output the indices of the sorted book titles\n    print(' '.join(str(i + 1) for i in sorted_indices))\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of books (n), the length of each book title (m), and the list of book titles.\",\n      \"steps\": [\n        \"Read the first line to get n and m.\",\n        \"Read the next n lines to get the list of book titles.\"\n      ]\n    },\n    {\n      \"description\": \"Implement a custom sorting function that sorts book titles according to the asc-desc-ending order.\",\n      \"steps\": [\n        \"Define a comparison function that compares two book titles based on the asc-desc-ending criteria.\",\n        \"For each pair of book titles, iterate through their characters.\",\n        \"If the current position is odd, compare characters in ascending order.\",\n        \"If the current position is even, compare characters in descending order.\",\n        \"Return the result of the comparison.\"\n      ]\n    },\n    {\n      \"description\": \"Sort the list of book titles using the custom sorting function.\",\n      \"steps\": [\n        \"Use the custom comparison function to sort the list of book titles.\",\n        \"Ensure the sorting handles edge cases such as identical titles or varying lengths.\"\n      ]\n    },\n    {\n      \"description\": \"Output the indices of the sorted book titles.\",\n      \"steps\": [\n        \"Determine the original indices of the sorted book titles.\",\n        \"Output the indices in the order of the sorted titles.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract n, m, and the list of book titles.\",\n    \"Implement a custom sorting function based on the asc-desc-ending criteria.\",\n    \"Sort the list of book titles using the custom sorting function.\",\n    \"Output the indices of the sorted book titles.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    # Parse the input\n    n, m = map(int, data[0].split())\n    book_titles = data[1:n+1]\n    \n    # Custom key function for sorting\n    def asc_desc_key(title):\n        # Create a tuple of characters with custom ordering\n        return tuple(\n            (c if i % 2 == 0 else chr(255 - ord(c)))  # odd index: ascending, even index: descending\n            for i, c in enumerate(title)\n        )\n    \n    # Sort the book titles using the custom key\n    sorted_indices = sorted(range(n), key=lambda i: asc_desc_key(book_titles[i]))\n    \n    # Output the indices of the sorted book titles\n    print(' '.join(str(i + 1) for i in sorted_indices))\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of books (n), the length of each book title (m), and the list of book titles.\",\n      \"output\": \"A list of book titles and their respective indices.\"\n    },\n    {\n      \"description\": \"Define a custom sorting function that implements the asc-desc-ending order.\",\n      \"output\": \"A function that compares two book titles based on the specified order.\"\n    },\n    {\n      \"description\": \"Sort the list of book titles using the custom sorting function.\",\n      \"output\": \"A sorted list of book titles according to the asc-desc-ending order.\"\n    },\n    {\n      \"description\": \"Extract the indices of the sorted book titles to match the required output format.\",\n      \"output\": \"A list of indices representing the order of the sorted book titles.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input values for n and m, followed by the n book titles.\",\n    \"Store each book title along with its original index in a list.\",\n    \"Implement a custom comparator function that compares two book titles based on the asc-desc-ending order: odd-indexed characters are compared in ascending order, and even-indexed characters are compared in descending order.\",\n    \"Use a sorting algorithm (e.g., Python's built-in sort) with the custom comparator to sort the list of book titles.\",\n    \"Extract and print the original indices of the book titles in the order they appear in the sorted list.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    titles = data[2:]\n    \n    # Pair each title with its original index\n    indexed_titles = [(titles[i], i + 1) for i in range(n)]\n    \n    def custom_sort_key(title_index_pair):\n        title, index = title_index_pair\n        # Create a tuple of characters with odd positions sorted ascending\n        # and even positions sorted descending\n        return tuple(\n            (ord(title[i]) if i % 2 == 0 else -ord(title[i]))\n            for i in range(m)\n        )\n    \n    # Sort the titles using the custom sort key\n    indexed_titles.sort(key=custom_sort_key)\n    \n    # Extract the indices of the sorted titles\n    sorted_indices = [index for _, index in indexed_titles]\n    \n    # Print the result\n    print(' '.join(map(str, sorted_indices)))\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of books (n), the length of each book title (m), and the list of book titles.\",\n      \"output\": \"A list of book titles and their respective indices.\"\n    },\n    {\n      \"description\": \"Define a custom sorting function that implements the asc-desc-ending order.\",\n      \"output\": \"A function that compares two book titles based on the asc-desc-ending order.\"\n    },\n    {\n      \"description\": \"Sort the list of book titles using the custom sorting function.\",\n      \"output\": \"A sorted list of book titles based on the asc-desc-ending order.\"\n    },\n    {\n      \"description\": \"Extract the indices of the sorted book titles.\",\n      \"output\": \"A list of indices representing the order of the sorted book titles.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input to get the number of books (n), the length of each book title (m), and the list of book titles.\",\n    \"Implement a custom sorting function that compares two book titles by iterating through each character position:\",\n    \"  - For odd-indexed positions, compare characters in ascending order.\",\n    \"  - For even-indexed positions, compare characters in descending order.\",\n    \"Use the custom sorting function to sort the list of book titles.\",\n    \"Extract and output the indices of the book titles in their new sorted order.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    titles = data[2:]\n    \n    def asc_desc_ending_key(title):\n        # Create a tuple key for sorting\n        key = []\n        for i, char in enumerate(title):\n            if i % 2 == 0:\n                # Odd-indexed positions (0-based index) -> Ascending\n                key.append((char, 1))\n            else:\n                # Even-indexed positions (0-based index) -> Descending\n                key.append((char, -1))\n        return tuple(key)\n    \n    # Pair each title with its original index\n    indexed_titles = list(enumerate(titles, start=1))\n    \n    # Sort using the custom key\n    indexed_titles.sort(key=lambda x: asc_desc_ending_key(x[1]))\n    \n    # Extract the sorted indices\n    sorted_indices = [index for index, _ in indexed_titles]\n    \n    # Print the result\n    print(' '.join(map(str, sorted_indices)))\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of books (n), the length of each book title (m), and the list of book titles.\",\n      \"steps\": [\n        \"Read the first line to get the integers n and m.\",\n        \"Read the next n lines to get the list of book titles.\"\n      ]\n    },\n    {\n      \"description\": \"Define a custom sorting function that implements the asc-desc-ending order.\",\n      \"steps\": [\n        \"Create a function that takes two book titles and compares them based on the asc-desc-ending order.\",\n        \"For each character position in the titles, determine if it is odd or even.\",\n        \"If the position is odd, compare the characters in ascending order.\",\n        \"If the position is even, compare the characters in descending order.\",\n        \"Return the comparison result for the first differing position.\"\n      ]\n    },\n    {\n      \"description\": \"Sort the list of book titles using the custom sorting function.\",\n      \"steps\": [\n        \"Use a sorting algorithm (e.g., Python's built-in sort) with the custom sorting function as the key.\",\n        \"Ensure the sorting algorithm efficiently handles large inputs.\"\n      ]\n    },\n    {\n      \"description\": \"Output the indices of the sorted book titles.\",\n      \"steps\": [\n        \"Determine the original indices of the sorted book titles.\",\n        \"Output the indices in the required format.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract n, m, and the list of book titles.\",\n    \"Implement a custom sorting function based on the asc-desc-ending order.\",\n    \"Sort the book titles using the custom sorting function.\",\n    \"Output the indices of the sorted book titles in the specified format.\"\n  ]\n}\n```", "Round_0": {"code": "def asc_desc_ending_sort(n, m, titles):\n    def custom_key(title):\n        # Create a tuple that represents the custom sorting order\n        return tuple(\n            (ord(title[i]) if i % 2 == 0 else -ord(title[i]))\n            for i in range(m)\n        )\n\n    # Sort titles using the custom key\n    sorted_titles = sorted(enumerate(titles, start=1), key=lambda x: custom_key(x[1]))\n\n    # Extract and return the indices of the sorted titles\n    return [index for index, _ in sorted_titles]\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    titles = data[2:n+2]\n    \n    sorted_indices = asc_desc_ending_sort(n, m, titles)\n    print(' '.join(map(str, sorted_indices)))\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of books (n), the length of each book title (m), and the list of book titles.\",\n      \"steps\": [\n        \"Read the first line to get the integers n and m.\",\n        \"Read the next n lines to get the list of book titles.\"\n      ]\n    },\n    {\n      \"description\": \"Implement a custom sorting function that compares two book titles based on the asc-desc-ending order.\",\n      \"steps\": [\n        \"Define a comparison function that takes two book titles as input.\",\n        \"Iterate over the characters of the titles, comparing them based on their index position (odd or even).\",\n        \"For odd-indexed positions, compare characters in ascending order.\",\n        \"For even-indexed positions, compare characters in descending order.\",\n        \"Return the result of the comparison.\"\n      ]\n    },\n    {\n      \"description\": \"Sort the list of book titles using the custom sorting function.\",\n      \"steps\": [\n        \"Use a sorting algorithm (e.g., Python's built-in sort) with the custom comparison function to sort the titles.\",\n        \"Ensure the sorting is efficient to handle large inputs.\"\n      ]\n    },\n    {\n      \"description\": \"Output the indices of the sorted book titles.\",\n      \"steps\": [\n        \"Determine the original indices of the sorted titles.\",\n        \"Output the indices in the required format.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract n, m, and the list of book titles.\",\n    \"Implement a custom comparison function for the asc-desc-ending order.\",\n    \"Sort the book titles using the custom comparison function.\",\n    \"Output the indices of the sorted book titles in the specified format.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    # Parse the input\n    n, m = map(int, data[0].split())\n    book_titles = data[1:n+1]\n    \n    # Custom key function for sorting\n    def asc_desc_key(title):\n        # Create a tuple of characters with odd positions sorted ascending\n        # and even positions sorted descending\n        return tuple(\n            (c if i % 2 == 0 else chr(255 - ord(c)))\n            for i, c in enumerate(title)\n        )\n    \n    # Sort the book titles using the custom key\n    sorted_indices = sorted(range(n), key=lambda i: asc_desc_key(book_titles[i]))\n    \n    # Output the indices of the sorted book titles\n    print(' '.join(str(i + 1) for i in sorted_indices))\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of books (n), the length of each book title (m), and the list of book titles.\",\n      \"output\": \"A list of book titles and their respective indices.\"\n    },\n    {\n      \"description\": \"Define a custom sorting function that implements the asc-desc-ending order.\",\n      \"output\": \"A function that compares two book titles based on the specified sorting criteria.\"\n    },\n    {\n      \"description\": \"Sort the list of book titles using the custom sorting function.\",\n      \"output\": \"A sorted list of book titles according to the asc-desc-ending order.\"\n    },\n    {\n      \"description\": \"Extract the indices of the sorted book titles.\",\n      \"output\": \"A list of indices representing the order of the sorted book titles.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input values for n and m, followed by the n book titles.\",\n    \"Store each book title along with its original index in a list.\",\n    \"Implement a custom comparator function that compares two book titles based on the asc-desc-ending order: - For odd-indexed characters, compare in ascending order. - For even-indexed characters, compare in descending order.\",\n    \"Use the custom comparator to sort the list of book titles.\",\n    \"After sorting, extract and output the original indices of the book titles in their new order.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    # Parse the input\n    n, m = map(int, data[0].split())\n    books = [(data[i + 1], i + 1) for i in range(n)]\n    \n    # Define the custom comparator function\n    def asc_desc_ending_key(book):\n        title, index = book\n        # Create a tuple of characters with the custom sorting logic\n        return tuple(\n            (ord(title[i]) if i % 2 == 0 else -ord(title[i]))\n            for i in range(m)\n        )\n    \n    # Sort the books using the custom key\n    books.sort(key=asc_desc_ending_key)\n    \n    # Extract the indices of the sorted book titles\n    sorted_indices = [index for _, index in books]\n    \n    # Print the result\n    print(' '.join(map(str, sorted_indices)))\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of books (n), the length of each book title (m), and the list of book titles.\",\n      \"steps\": [\n        \"Read the first line to get n and m.\",\n        \"Read the next n lines to get the list of book titles.\"\n      ]\n    },\n    {\n      \"description\": \"Implement a custom sorting function that sorts book titles according to the asc-desc-ending order.\",\n      \"steps\": [\n        \"Define a comparison function that compares two book titles based on the asc-desc-ending criteria.\",\n        \"For each character position in the titles, determine if it is odd or even.\",\n        \"If the position is odd, compare characters in ascending order.\",\n        \"If the position is even, compare characters in descending order.\",\n        \"Use this comparison function to sort the list of book titles.\"\n      ]\n    },\n    {\n      \"description\": \"Output the sorted indices of the book titles.\",\n      \"steps\": [\n        \"Determine the original indices of the sorted book titles.\",\n        \"Output the indices in the order of the sorted titles.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract n, m, and the list of book titles.\",\n    \"Implement a custom sorting function using the asc-desc-ending criteria.\",\n    \"Sort the book titles using the custom sorting function.\",\n    \"Output the indices of the sorted book titles.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    # Parse the input\n    n, m = map(int, data[0].split())\n    book_titles = data[1:n+1]\n    \n    # Custom sorting function\n    def asc_desc_ending_key(title):\n        # Create a tuple key for sorting\n        key = []\n        for i, char in enumerate(title):\n            if i % 2 == 0:\n                # Odd index (1-based), ascending order\n                key.append((char, 1))\n            else:\n                # Even index (1-based), descending order\n                key.append((char, -1))\n        return key\n    \n    # Sort the book titles using the custom key\n    sorted_indices = sorted(range(n), key=lambda i: asc_desc_ending_key(book_titles[i]))\n    \n    # Output the sorted indices (1-based)\n    print(' '.join(str(i + 1) for i in sorted_indices))\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [false, true, true, true, true, true, false, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 9, "round": 495, "prompt": "Andi and Budi were given an assignment to tidy up their bookshelf of n books where each book is represented by the book title \u2014 a string s_i numbered from 1 to n, each with length m, and Andi really wants to sort the book lexicographically ascending, while Budi wants to sort it lexicographically descending. Settling their fight, they decided to combine their idea and sort it asc-desc-endingly. In this new method, they compare the odd-indexed characters in an ascending manner. Meanwhile, the even-indexed characters are compared in a descending order. A string a occurs before a string b in asc-desc-ending order if and only if in the first position where a and b differ, the following holds: * if it is an odd position, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b; * if it is an even position, the string a has a letter that appears later in the alphabet than the corresponding letter in b. Your task is to write a function that sorts an array of book titles according to the asc-desc-ending order. Ensure your implementation efficiently handles cases where the number of books and their title lengths can be large. Your solution should also account for potential edge cases such as identical book titles or titles of varying lengths.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n \u22c5 m \u2264 10^6).\n\nThe i-th of the next n lines contains a string s_i consisting of m uppercase Latin letters \u2014 the book title. The strings are pairwise distinct.\n\nOutput\n\nOutput n integers \u2014 the indices of the strings after they are sorted asc-desc-endingly.\n\nExample\n\nInput\n\n\n5 2\nAA\nAB\nBB\nBA\nAZ\n\n\nOutput\n\n\n5 2 1 3 4\n", "examples": "\nInput\n\nThe first line contains two integers n and m (1 \u2264 n \u22c5 m \u2264 10^6).\n\nThe i-th of the next n lines contains a string s_i consisting of m uppercase Latin letters \u2014 the book title. The strings are pairwise distinct.\n\nOutput\n\nOutput n integers \u2014 the indices of the strings after they are sorted asc-desc-endingly.\n\nExample\n\nInput\n\n\n5 2\nAA\nAB\nBB\nBA\nAZ\n\n\nOutput\n\n\n5 2 1 3 4\n", "mutate_method": "add_1_sentence_at_end", "save_node": false, "parent_index": 184}
