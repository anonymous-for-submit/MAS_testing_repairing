{"name": "1586_H. Omkar and Tours", "description": "Omkar is hosting tours of his country, Omkarland! There are n cities in Omkarland, and, rather curiously, there are exactly n-1 bidirectional roads connecting the cities to each other. It is guaranteed that you can reach any city from any other city through the road network.\n\nEvery city has an enjoyment value e. Each road has a capacity c, denoting the maximum number of vehicles that can be on it, and an associated toll t. However, the toll system in Omkarland has an interesting quirk: if a vehicle travels on multiple roads on a single journey, they pay only the highest toll of any single road on which they traveled. (In other words, they pay max t over all the roads on which they traveled.) If a vehicle traverses no roads, they pay 0 toll.\n\nOmkar has decided to host q tour groups. Each tour group consists of v vehicles starting at city x. (Keep in mind that a tour group with v vehicles can travel only on roads with capacity \u2265 v.) Being the tour organizer, Omkar wants his groups to have as much fun as they possibly can, but also must reimburse his groups for the tolls that they have to pay. Thus, for each tour group, Omkar wants to know two things: first, what is the enjoyment value of the city y with maximum enjoyment value that the tour group can reach from their starting city, and second, how much per vehicle will Omkar have to pay to reimburse the entire group for their trip from x to y? (This trip from x to y will always be on the shortest path from x to y.)\n\nIn the case that there are multiple reachable cities with the maximum enjoyment value, Omkar will let his tour group choose which one they want to go to. Therefore, to prepare for all possible scenarios, he wants to know the amount of money per vehicle that he needs to guarantee that he can reimburse the group regardless of which city they choose.\n\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 2 \u22c5 10^5, 1 \u2264 q \u2264 2 \u22c5 10^5), representing the number of cities and the number of groups, respectively.\n\nThe next line contains n integers e_1, e_2, \u2026, e_n (1 \u2264 e_i \u2264 10^9), where e_i represents the enjoyment value for city i.\n\nThe next n-1 lines each contain four integers a, b, c, and t (1 \u2264 a,b \u2264 n, 1 \u2264 c \u2264 10^9, 1 \u2264 t \u2264 10^9), representing an road between city a and city b with capacity c and toll t.\n\nThe next q lines each contain two integers v and x (1 \u2264 v \u2264 10^9, 1 \u2264 x \u2264 n), representing the number of vehicles in the tour group and the starting city, respectively.\n\nOutput\n\nOutput q lines. The i-th line should contain two integers: the highest possible enjoyment value of a city reachable by the i-th tour group, and the amount of money per vehicle Omkar needs to guarantee that he can reimburse the i-th tour group.\n\nExamples\n\nInput\n\n\n5 3\n2 2 3 3 3\n1 2 4 7\n1 3 2 8\n2 4 8 2\n2 5 1 1\n1 3\n9 5\n6 2\n\n\nOutput\n\n\n3 8\n3 0\n3 2\n\n\nInput\n\n\n5 5\n1 2 3 4 5\n1 2 4 1\n1 3 3 1\n1 4 2 1\n2 5 1 1\n5 1\n4 1\n3 1\n2 1\n1 1\n\n\nOutput\n\n\n1 0\n2 1\n3 1\n4 1\n5 1\n\n\nInput\n\n\n5 5\n1 2 2 2 2\n1 2 5 8\n1 3 6 3\n1 4 4 5\n1 5 7 1\n4 1\n5 1\n6 1\n7 1\n8 1\n\n\nOutput\n\n\n2 8\n2 8\n2 3\n2 1\n1 0\n\nNote\n\nA map of the first sample is shown below. For the nodes, unbolded numbers represent indices and bolded numbers represent enjoyment values. For the edges, unbolded numbers represent capacities and bolded numbers represent tolls.\n\n<image>\n\nFor the first query, a tour group of size 1 starting at city 3 can reach cities 1, 2, 3, 4, and 5. Thus, the largest enjoyment value that they can reach is 3. If the tour group chooses to go to city 4, Omkar will have to pay 8 per vehicle, which is the maximum.\n\nFor the second query, a tour group of size 9 starting at city 5 can reach only city 5. Thus, the largest reachable enjoyment value is still 3, and Omkar will pay 0 per vehicle.\n\nFor the third query, a tour group of size 6 starting at city 2 can reach cities 2 and 4. The largest reachable enjoyment value is again 3. If the tour group chooses to go to city 4, Omkar will have to pay 2 per vehicle, which is the maximum.\n\nA map of the second sample is shown below:\n\n<image>\n\nFor the first query, a tour group of size 5 starting at city 1 can only reach city 1. Thus, their maximum enjoyment value is 1 and the cost Omkar will have to pay is 0 per vehicle.\n\nFor the second query, a tour group of size 4 starting at city 1 can reach cities 1 and 2. Thus, their maximum enjoyment value is 2 and Omkar will pay 1 per vehicle.\n\nFor the third query, a tour group of size 3 starting at city 1 can reach cities 1, 2, and 3. Thus, their maximum enjoyment value is 3 and Omkar will pay 1 per vehicle.\n\nFor the fourth query, a tour group of size 2 starting at city 1 can reach cities 1, 2, 3 and 4. Thus, their maximum enjoyment value is 4 and Omkar will pay 1 per vehicle.\n\nFor the fifth query, a tour group of size 1 starting at city 1 can reach cities 1, 2, 3, 4, and 5. Thus, their maximum enjoyment value is 5 and Omkar will pay 1 per vehicle.", "tags": ["data structures", "dsu", "sortings", "trees"], "difficulty": 14, "id": 1586, "sample_io": [{"input": "5 5\n1 2 3 4 5\n1 2 4 1\n1 3 3 1\n1 4 2 1\n2 5 1 1\n5 1\n4 1\n3 1\n2 1\n1 1\n", "output": ["1 0\n2 1\n3 1\n4 1\n5 1\n"]}, {"input": "5 3\n2 2 3 3 3\n1 2 4 7\n1 3 2 8\n2 4 8 2\n2 5 1 1\n1 3\n9 5\n6 2\n", "output": ["3 8\n3 0\n3 2\n"]}, {"input": "5 5\n1 2 2 2 2\n1 2 5 8\n1 3 6 3\n1 4 4 5\n1 5 7 1\n4 1\n5 1\n6 1\n7 1\n8 1\n", "output": ["2 8\n2 8\n2 3\n2 1\n1 0\n"]}], "test_list": [{"input": "2 6\n1 2\n1 2 2 1\n1 1\n2 1\n3 1\n1 2\n2 2\n3 2\n", "output": ["2 1\n2 1\n1 0\n2 0\n2 0\n2 0\n"]}, {"input": "2 2\n7 3\n1 2 4 9\n10 1\n5 2\n", "output": ["7 0\n3 0\n"]}, {"input": "8 64\n1 1 1 1 1 1 1 1\n6 1 31 60\n1 3 3 8\n1 2 4 27\n4 1 41 27\n7 1 6 39\n1 5 28 46\n1 8 8 55\n55 6\n24 1\n28 1\n46 4\n15 6\n52 4\n58 4\n19 1\n55 8\n59 8\n18 2\n18 7\n26 1\n41 3\n48 4\n41 7\n46 6\n42 8\n44 4\n56 4\n13 1\n46 6\n1 2\n34 5\n47 6\n18 5\n35 8\n26 6\n57 7\n35 2\n27 3\n26 2\n39 2\n11 5\n23 1\n1 2\n54 3\n47 5\n48 2\n13 8\n40 6\n7 6\n38 2\n35 5\n6 6\n19 3\n10 6\n64 1\n2 3\n31 2\n1 6\n59 7\n47 3\n38 7\n18 4\n6 6\n27 7\n13 5\n63 8\n10 8\n11 4\n30 6\n2 2\n34 5\n", "output": ["1 0\n1 60\n1 60\n1 0\n1 60\n1 0\n1 0\n1 60\n1 0\n1 0\n1 0\n1 0\n1 60\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 60\n1 0\n1 60\n1 0\n1 0\n1 60\n1 0\n1 60\n1 0\n1 0\n1 0\n1 0\n1 0\n1 60\n1 60\n1 60\n1 0\n1 0\n1 0\n1 0\n1 0\n1 60\n1 0\n1 0\n1 60\n1 0\n1 60\n1 0\n1 60\n1 0\n1 60\n1 0\n1 0\n1 0\n1 60\n1 60\n1 0\n1 60\n1 0\n1 0\n1 60\n1 60\n1 60\n1 0\n"]}, {"input": "2 2\n7 0\n1 2 4 9\n10 1\n5 2\n", "output": ["7 0\n0 0\n"]}, {"input": "5 5\n1 2 3 4 5\n1 2 4 1\n1 3 2 1\n1 4 2 1\n2 5 1 1\n5 1\n4 1\n3 1\n2 1\n1 1\n", "output": ["1 0\n2 1\n2 1\n4 1\n5 1\n"]}, {"input": "5 3\n2 2 3 3 3\n1 2 4 7\n1 3 1 8\n2 4 8 2\n2 5 1 1\n1 3\n9 5\n6 2\n", "output": ["3 8\n3 0\n3 2\n"]}, {"input": "2 2\n4 0\n1 2 4 9\n10 1\n5 2\n", "output": ["4 0\n0 0\n"]}, {"input": "5 5\n1 2 3 3 5\n1 2 4 1\n1 3 2 1\n1 4 2 1\n2 5 1 1\n5 1\n4 1\n3 1\n2 1\n1 1\n", "output": ["1 0\n2 1\n2 1\n3 1\n5 1\n"]}, {"input": "5 5\n1 2 3 3 5\n1 2 4 1\n1 3 2 1\n1 4 2 1\n2 5 1 1\n4 1\n4 1\n3 1\n2 1\n1 1\n", "output": ["2 1\n2 1\n2 1\n3 1\n5 1\n"]}, {"input": "5 3\n2 2 0 3 3\n1 2 4 7\n1 3 1 8\n2 4 8 3\n2 5 1 1\n1 3\n7 5\n6 2\n", "output": ["3 8\n3 0\n3 3\n"]}, {"input": "5 5\n1 2 6 0 5\n1 2 4 1\n1 3 2 1\n1 4 2 1\n2 5 1 1\n4 1\n4 1\n3 1\n2 1\n1 1\n", "output": ["2 1\n2 1\n2 1\n6 1\n6 1\n"]}, {"input": "5 3\n2 2 0 5 3\n1 2 4 7\n1 3 1 8\n2 4 8 3\n2 5 1 1\n1 3\n7 5\n8 2\n", "output": ["5 8\n3 0\n5 3\n"]}, {"input": "5 3\n4 2 0 5 3\n1 2 4 7\n1 3 1 11\n2 4 8 3\n2 5 1 1\n1 3\n7 5\n8 2\n", "output": ["5 11\n3 0\n5 3\n"]}, {"input": "5 3\n4 2 0 5 2\n1 2 4 7\n1 3 1 11\n2 4 8 3\n2 5 1 1\n1 3\n7 5\n8 2\n", "output": ["5 11\n2 0\n5 3\n"]}, {"input": "2 6\n1 2\n1 2 2 1\n1 2\n2 1\n3 1\n1 2\n2 2\n3 2\n", "output": ["2 0\n2 1\n1 0\n2 0\n2 0\n2 0\n"]}, {"input": "2 2\n7 2\n1 2 4 9\n10 1\n5 2\n", "output": ["7 0\n2 0\n"]}, {"input": "5 5\n1 2 3 4 0\n1 2 4 1\n1 3 3 1\n1 4 2 1\n2 5 1 1\n5 1\n4 1\n3 1\n2 1\n1 1\n", "output": ["1 0\n2 1\n3 1\n4 1\n4 1\n"]}, {"input": "5 3\n2 2 3 3 3\n1 2 4 13\n1 3 2 8\n2 4 8 2\n2 5 1 1\n1 3\n9 5\n6 2\n", "output": ["3 13\n3 0\n3 2\n"]}, {"input": "5 5\n1 2 2 2 2\n1 2 2 8\n1 3 6 3\n1 4 4 5\n1 5 7 1\n4 1\n5 1\n6 1\n7 1\n8 1\n", "output": ["2 5\n2 3\n2 3\n2 1\n1 0\n"]}, {"input": "5 5\n1 2 5 4 5\n1 2 4 1\n1 3 2 1\n1 4 2 1\n2 5 1 1\n5 1\n4 1\n3 1\n2 1\n1 1\n", "output": ["1 0\n2 1\n2 1\n5 1\n5 1\n"]}, {"input": "2 2\n4 0\n1 2 4 3\n10 2\n5 2\n", "output": ["0 0\n0 0\n"]}, {"input": "5 5\n1 2 3 0 5\n1 2 4 1\n1 3 2 1\n1 4 2 1\n2 5 0 1\n4 1\n4 1\n3 1\n2 1\n1 1\n", "output": ["2 1\n2 1\n2 1\n3 1\n3 1\n"]}, {"input": "5 3\n2 2 0 3 3\n1 2 4 7\n1 3 0 8\n2 4 8 2\n2 5 1 1\n1 3\n7 5\n6 2\n", "output": ["0 0\n3 0\n3 2\n"]}, {"input": "5 5\n1 0 6 0 5\n1 2 4 1\n1 3 2 1\n1 4 2 1\n2 5 1 1\n4 1\n4 1\n3 1\n2 1\n1 1\n", "output": ["1 0\n1 0\n1 0\n6 1\n6 1\n"]}, {"input": "5 5\n1 2 3 4 0\n1 2 4 1\n1 3 3 1\n1 4 1 1\n2 5 1 1\n5 1\n4 1\n3 1\n2 1\n1 1\n", "output": ["1 0\n2 1\n3 1\n3 1\n4 1\n"]}, {"input": "5 5\n1 2 2 2 2\n1 2 2 8\n1 3 6 3\n1 4 4 5\n1 5 2 1\n4 1\n5 1\n6 1\n7 1\n8 1\n", "output": ["2 5\n2 3\n2 3\n1 0\n1 0\n"]}, {"input": "2 2\n7 1\n1 2 4 9\n10 1\n7 2\n", "output": ["7 0\n1 0\n"]}, {"input": "5 5\n1 0 9 0 5\n1 2 4 1\n1 3 2 1\n1 4 2 1\n2 5 1 1\n4 1\n4 1\n3 1\n2 1\n1 1\n", "output": ["1 0\n1 0\n1 0\n9 1\n9 1\n"]}, {"input": "5 3\n2 2 0 5 3\n1 2 1 7\n1 3 1 8\n2 4 8 4\n2 5 1 1\n1 3\n7 5\n8 2\n", "output": ["5 8\n3 0\n5 4\n"]}, {"input": "5 3\n4 1 0 5 3\n1 2 4 7\n1 3 1 11\n2 4 8 4\n2 5 1 1\n1 3\n7 5\n8 2\n", "output": ["5 11\n3 0\n5 4\n"]}, {"input": "5 3\n4 4 0 5 2\n1 2 4 7\n1 3 1 11\n1 4 8 3\n2 5 1 1\n1 3\n7 5\n8 2\n", "output": ["5 11\n2 0\n4 0\n"]}, {"input": "5 5\n1 2 5 4 5\n1 2 4 1\n1 3 1 1\n1 4 2 1\n2 5 1 1\n5 1\n8 1\n3 1\n2 1\n1 1\n", "output": ["1 0\n1 0\n2 1\n4 1\n5 1\n"]}, {"input": "2 2\n8 1\n1 2 4 3\n10 2\n5 2\n", "output": ["1 0\n1 0\n"]}, {"input": "5 3\n9 2 0 5 2\n1 2 4 7\n1 3 1 11\n2 4 8 3\n4 5 2 1\n1 3\n7 5\n8 2\n", "output": ["9 11\n2 0\n5 3\n"]}, {"input": "2 2\n7 2\n1 2 4 4\n10 1\n4 2\n", "output": ["7 0\n7 4\n"]}, {"input": "5 5\n1 2 5 4 6\n1 2 4 1\n1 3 1 1\n1 4 2 1\n2 5 1 1\n5 1\n8 1\n3 1\n2 1\n1 1\n", "output": ["1 0\n1 0\n2 1\n4 1\n6 1\n"]}, {"input": "5 3\n4 0 0 3 3\n1 2 6 7\n1 3 1 8\n2 4 8 2\n3 5 1 1\n1 3\n7 5\n6 2\n", "output": ["4 8\n3 0\n4 7\n"]}, {"input": "5 5\n1 1 5 4 6\n1 2 4 1\n1 3 1 1\n1 4 2 1\n2 5 1 1\n5 1\n8 1\n3 1\n2 1\n1 1\n", "output": ["1 0\n1 0\n1 1\n4 1\n6 1\n"]}, {"input": "5 3\n9 2 0 5 2\n1 2 4 7\n1 3 1 11\n2 4 2 3\n4 5 2 1\n1 3\n7 5\n6 2\n", "output": ["9 11\n2 0\n2 0\n"]}, {"input": "5 5\n1 1 5 4 6\n1 2 4 1\n1 3 1 1\n1 4 2 1\n3 5 1 1\n5 1\n8 1\n5 1\n2 2\n1 1\n", "output": ["1 0\n1 0\n1 0\n4 1\n6 1\n"]}, {"input": "5 5\n1 1 5 4 6\n1 2 4 1\n1 3 1 1\n1 4 2 1\n3 5 1 1\n5 1\n8 1\n5 1\n2 4\n1 1\n", "output": ["1 0\n1 0\n1 0\n4 0\n6 1\n"]}, {"input": "2 2\n11 3\n1 2 4 9\n10 1\n5 2\n", "output": ["11 0\n3 0\n"]}, {"input": "5 5\n1 2 3 4 5\n1 2 4 1\n1 3 2 1\n1 4 2 1\n2 5 1 1\n5 1\n4 1\n3 1\n3 1\n1 1\n", "output": ["1 0\n2 1\n2 1\n2 1\n5 1\n"]}, {"input": "2 1\n4 0\n1 2 4 9\n10 1\n5 2\n", "output": ["4 0\n"]}, {"input": "5 3\n2 2 3 3 0\n1 2 4 7\n1 3 1 8\n2 4 8 2\n2 5 1 1\n1 3\n7 5\n6 2\n", "output": ["3 8\n0 0\n3 2\n"]}, {"input": "5 5\n1 2 3 3 5\n1 2 4 1\n1 3 2 2\n1 4 2 1\n2 5 1 1\n4 1\n4 1\n3 1\n2 1\n1 1\n", "output": ["2 1\n2 1\n2 1\n3 2\n5 1\n"]}, {"input": "5 5\n1 2 6 0 5\n1 2 4 1\n1 3 2 1\n1 4 2 1\n2 5 1 1\n8 1\n4 1\n3 1\n2 1\n1 1\n", "output": ["1 0\n2 1\n2 1\n6 1\n6 1\n"]}, {"input": "5 3\n2 2 0 3 3\n1 2 4 7\n1 3 1 8\n2 4 8 3\n2 5 1 1\n1 3\n7 5\n8 3\n", "output": ["3 8\n3 0\n0 0\n"]}, {"input": "5 3\n4 2 0 5 3\n1 2 4 7\n1 3 1 6\n2 4 8 3\n2 5 1 1\n1 3\n7 5\n8 2\n", "output": ["5 7\n3 0\n5 3\n"]}, {"input": "5 2\n4 2 0 5 2\n1 2 4 7\n1 3 1 11\n2 4 8 3\n2 5 2 1\n1 3\n7 5\n8 2\n", "output": ["5 11\n2 0\n"]}, {"input": "2 2\n5 2\n1 2 4 9\n10 1\n5 2\n", "output": ["5 0\n2 0\n"]}, {"input": "5 5\n1 2 3 4 0\n1 2 4 1\n1 3 3 1\n1 4 2 1\n2 5 1 1\n4 1\n4 1\n3 1\n2 1\n1 1\n", "output": ["2 1\n2 1\n3 1\n4 1\n4 1\n"]}, {"input": "5 3\n2 2 3 3 3\n1 2 4 13\n1 3 2 8\n2 4 3 2\n2 5 1 1\n1 3\n9 5\n6 2\n", "output": ["3 13\n3 0\n2 0\n"]}, {"input": "5 3\n2 0 0 3 3\n1 2 4 7\n1 3 1 5\n2 4 8 2\n2 5 1 1\n1 3\n7 5\n6 2\n", "output": ["3 7\n3 0\n3 2\n"]}, {"input": "5 5\n1 0 3 4 0\n1 2 4 1\n1 3 3 1\n1 4 1 1\n2 5 1 1\n5 1\n4 1\n3 1\n2 1\n1 1\n", "output": ["1 0\n1 0\n3 1\n3 1\n4 1\n"]}, {"input": "5 3\n2 2 0 3 3\n1 2 7 7\n1 3 0 8\n2 4 2 2\n2 5 1 1\n1 3\n7 5\n6 2\n", "output": ["0 0\n3 0\n2 7\n"]}, {"input": "5 3\n4 1 0 5 6\n1 2 4 7\n1 3 1 11\n2 4 8 4\n2 5 1 1\n1 3\n7 5\n8 2\n", "output": ["6 11\n6 0\n5 4\n"]}, {"input": "2 2\n8 2\n1 2 4 4\n10 1\n5 2\n", "output": ["8 0\n2 0\n"]}, {"input": "5 5\n1 2 5 4 6\n1 2 4 2\n1 3 1 1\n1 4 2 1\n2 5 1 1\n5 1\n8 1\n3 1\n2 1\n1 1\n", "output": ["1 0\n1 0\n2 2\n4 1\n6 2\n"]}, {"input": "5 2\n9 2 0 5 2\n1 2 4 7\n1 3 1 11\n2 4 8 3\n4 5 2 1\n1 3\n7 5\n6 2\n", "output": ["9 11\n2 0\n"]}, {"input": "5 3\n4 0 0 3 3\n1 2 6 7\n1 3 0 8\n2 4 8 2\n3 5 1 1\n1 3\n4 5\n6 2\n", "output": ["3 1\n3 0\n4 7\n"]}, {"input": "5 3\n4 0 0 3 3\n1 2 6 7\n1 3 1 8\n2 4 8 2\n3 5 1 1\n1 2\n4 5\n4 2\n", "output": ["4 7\n3 0\n4 7\n"]}, {"input": "5 5\n1 2 3 4 5\n1 2 4 1\n1 3 2 1\n1 4 2 1\n2 5 1 1\n5 2\n4 1\n3 1\n3 1\n1 1\n", "output": ["2 0\n2 1\n2 1\n2 1\n5 1\n"]}, {"input": "5 5\n1 2 3 3 5\n1 2 4 1\n1 3 2 2\n1 4 2 1\n2 5 1 1\n4 1\n4 2\n3 1\n2 1\n1 1\n", "output": ["2 1\n2 0\n2 1\n3 2\n5 1\n"]}, {"input": "5 3\n4 2 0 5 3\n1 2 4 4\n1 3 1 6\n2 4 8 3\n2 5 1 1\n1 3\n7 5\n8 2\n", "output": ["5 6\n3 0\n5 3\n"]}, {"input": "2 2\n8 2\n1 2 8 4\n10 1\n5 2\n", "output": ["8 0\n8 4\n"]}, {"input": "5 5\n1 2 5 4 6\n1 2 1 2\n1 3 1 1\n1 4 2 1\n2 5 1 1\n5 1\n8 1\n3 1\n2 1\n1 1\n", "output": ["1 0\n1 0\n1 0\n4 1\n6 2\n"]}, {"input": "5 2\n9 2 0 5 2\n1 2 4 7\n1 3 1 3\n2 4 8 3\n4 5 2 1\n1 3\n7 5\n6 2\n", "output": ["9 3\n2 0\n"]}, {"input": "5 3\n2 0 0 3 3\n1 2 4 9\n1 3 1 5\n2 4 8 2\n2 5 1 1\n1 3\n3 5\n6 2\n", "output": ["3 9\n3 0\n3 2\n"]}, {"input": "5 3\n4 4 0 5 2\n1 2 4 7\n1 3 1 11\n1 4 8 1\n2 5 1 1\n1 3\n14 5\n8 1\n", "output": ["5 11\n2 0\n5 1\n"]}, {"input": "2 1\n8 2\n1 2 8 4\n10 1\n5 2\n", "output": ["8 0\n"]}, {"input": "5 3\n2 0 0 3 3\n1 2 6 7\n1 3 1 9\n2 4 8 2\n3 5 1 0\n1 3\n7 5\n6 3\n", "output": ["3 9\n3 0\n0 0\n"]}, {"input": "5 3\n2 0 0 3 3\n1 2 4 12\n1 3 1 5\n2 4 8 2\n2 5 1 1\n1 3\n3 5\n6 2\n", "output": ["3 12\n3 0\n3 2\n"]}, {"input": "5 3\n4 4 0 5 4\n1 2 4 7\n1 3 1 11\n1 4 8 1\n2 5 1 1\n1 3\n14 5\n8 1\n", "output": ["5 11\n4 0\n5 1\n"]}, {"input": "5 3\n2 0 0 3 3\n1 2 6 7\n1 3 1 9\n2 4 8 2\n3 5 1 0\n2 3\n7 5\n6 3\n", "output": ["0 0\n3 0\n0 0\n"]}, {"input": "5 3\n10 0 0 5 2\n1 2 6 6\n1 3 1 11\n2 4 8 3\n4 5 2 1\n1 3\n7 5\n8 2\n", "output": ["10 11\n2 0\n5 3\n"]}, {"input": "5 3\n2 0 0 3 2\n1 2 6 7\n1 3 1 9\n2 4 8 2\n3 5 1 0\n2 3\n7 5\n6 3\n", "output": ["0 0\n2 0\n0 0\n"]}, {"input": "5 3\n2 0 0 3 3\n1 2 4 12\n1 3 1 5\n2 4 8 3\n4 5 1 1\n1 3\n3 5\n6 2\n", "output": ["3 12\n3 0\n3 3\n"]}, {"input": "5 3\n4 9 0 5 4\n1 2 4 7\n1 3 1 11\n1 4 8 1\n2 5 1 1\n1 3\n14 5\n8 1\n", "output": ["9 11\n4 0\n5 1\n"]}, {"input": "5 3\n4 9 0 5 4\n1 2 4 14\n1 3 1 11\n1 4 8 1\n2 5 1 1\n1 3\n14 5\n8 1\n", "output": ["9 14\n4 0\n5 1\n"]}, {"input": "2 2\n7 3\n1 2 4 9\n10 2\n5 2\n", "output": ["3 0\n3 0\n"]}, {"input": "8 64\n1 1 1 1 1 1 1 1\n6 1 31 60\n1 3 3 8\n1 2 4 27\n4 1 41 27\n7 1 6 39\n1 5 28 46\n1 8 8 55\n55 6\n24 1\n28 1\n46 4\n15 6\n52 4\n58 4\n19 1\n55 8\n59 8\n18 2\n18 7\n26 1\n41 3\n48 4\n41 7\n46 6\n42 8\n44 4\n56 4\n13 1\n46 6\n1 2\n34 5\n47 6\n18 5\n35 8\n26 6\n57 7\n35 2\n27 3\n26 2\n39 2\n11 5\n23 1\n1 2\n54 3\n47 5\n48 2\n13 8\n40 6\n7 6\n38 2\n35 5\n6 6\n19 3\n10 6\n64 1\n2 3\n41 2\n1 6\n59 7\n47 3\n38 7\n18 4\n6 6\n27 7\n13 5\n63 8\n10 8\n11 4\n30 6\n2 2\n34 5\n", "output": ["1 0\n1 60\n1 60\n1 0\n1 60\n1 0\n1 0\n1 60\n1 0\n1 0\n1 0\n1 0\n1 60\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 60\n1 0\n1 60\n1 0\n1 0\n1 60\n1 0\n1 60\n1 0\n1 0\n1 0\n1 0\n1 0\n1 60\n1 60\n1 60\n1 0\n1 0\n1 0\n1 0\n1 0\n1 60\n1 0\n1 0\n1 60\n1 0\n1 60\n1 0\n1 60\n1 0\n1 60\n1 0\n1 0\n1 0\n1 60\n1 60\n1 0\n1 60\n1 0\n1 0\n1 60\n1 60\n1 60\n1 0\n"]}, {"input": "5 5\n1 2 2 2 2\n1 2 5 8\n1 3 6 3\n1 4 2 5\n1 5 7 1\n4 1\n5 1\n6 1\n7 1\n8 1\n", "output": ["2 8\n2 8\n2 3\n2 1\n1 0\n"]}, {"input": "5 5\n2 2 3 4 5\n1 2 4 1\n1 3 2 1\n1 4 2 1\n2 5 1 1\n5 1\n4 1\n3 1\n2 1\n1 1\n", "output": ["2 0\n2 1\n2 1\n4 1\n5 1\n"]}, {"input": "5 3\n4 2 0 5 3\n1 2 4 7\n1 3 0 8\n2 4 8 3\n2 5 1 1\n1 3\n7 5\n8 2\n", "output": ["0 0\n3 0\n5 3\n"]}, {"input": "5 3\n4 2 0 5 5\n1 2 4 7\n1 3 1 11\n2 4 8 3\n2 5 1 1\n1 3\n7 5\n8 2\n", "output": ["5 11\n5 0\n5 3\n"]}, {"input": "2 2\n7 2\n1 2 4 9\n10 2\n5 2\n", "output": ["2 0\n2 0\n"]}, {"input": "5 5\n1 2 3 4 0\n1 2 4 1\n1 3 3 1\n1 4 2 1\n2 5 1 1\n5 1\n4 2\n3 1\n2 1\n1 1\n", "output": ["1 0\n2 0\n3 1\n4 1\n4 1\n"]}, {"input": "5 3\n4 1 0 5 3\n1 2 4 7\n1 3 1 14\n2 4 8 3\n2 5 1 1\n1 3\n7 5\n8 2\n", "output": ["5 14\n3 0\n5 3\n"]}, {"input": "5 3\n7 4 0 5 2\n1 2 4 7\n1 3 1 11\n2 4 8 3\n2 5 1 1\n1 3\n7 5\n8 2\n", "output": ["7 11\n2 0\n5 3\n"]}, {"input": "5 3\n4 2 0 5 2\n1 2 4 7\n1 3 1 11\n2 4 8 3\n4 5 2 1\n1 3\n7 5\n13 2\n", "output": ["5 11\n2 0\n2 0\n"]}, {"input": "2 6\n1 2\n1 2 2 1\n1 2\n2 1\n3 2\n1 2\n2 2\n2 2\n", "output": ["2 0\n2 1\n2 0\n2 0\n2 0\n2 0\n"]}, {"input": "5 3\n2 2 0 5 3\n1 2 1 7\n1 3 1 8\n2 4 8 4\n2 5 1 1\n1 4\n7 5\n8 2\n", "output": ["5 0\n3 0\n5 4\n"]}, {"input": "5 3\n4 1 0 5 4\n1 2 4 7\n1 3 1 11\n2 4 8 4\n2 5 1 1\n1 3\n7 5\n8 2\n", "output": ["5 11\n4 0\n5 4\n"]}, {"input": "5 3\n5 2 0 5 2\n1 2 4 7\n1 3 1 11\n2 4 8 3\n4 5 2 1\n1 3\n7 5\n8 4\n", "output": ["5 11\n2 0\n5 0\n"]}, {"input": "5 5\n1 2 5 4 5\n1 2 4 1\n1 3 1 1\n1 4 2 1\n2 5 1 2\n5 1\n8 1\n3 1\n2 1\n1 1\n", "output": ["1 0\n1 0\n2 1\n4 1\n5 2\n"]}, {"input": "2 2\n8 1\n1 2 4 3\n10 2\n2 2\n", "output": ["1 0\n8 3\n"]}, {"input": "5 3\n4 0 0 3 3\n1 2 6 7\n1 3 1 8\n2 4 8 2\n3 5 1 1\n1 3\n4 5\n6 1\n", "output": ["4 8\n3 0\n4 0\n"]}, {"input": "5 5\n1 1 5 4 6\n1 2 4 1\n1 3 1 1\n1 4 2 1\n3 5 1 1\n5 1\n8 1\n5 1\n2 4\n2 1\n", "output": ["1 0\n1 0\n1 0\n4 0\n4 1\n"]}, {"input": "5 5\n1 1 5 2 6\n1 2 4 1\n1 3 1 1\n1 4 2 0\n3 5 1 1\n10 1\n8 1\n5 2\n2 4\n1 1\n", "output": ["1 0\n1 0\n1 0\n2 0\n6 1\n"]}, {"input": "5 5\n1 1 5 4 6\n1 2 5 1\n2 3 1 1\n1 4 2 0\n3 5 1 1\n10 1\n8 1\n5 2\n2 4\n1 1\n", "output": ["1 0\n1 0\n1 1\n4 0\n6 1\n"]}, {"input": "2 2\n9 3\n1 2 4 9\n10 1\n5 2\n", "output": ["9 0\n3 0\n"]}, {"input": "2 2\n5 4\n1 2 4 9\n10 1\n5 2\n", "output": ["5 0\n4 0\n"]}, {"input": "5 3\n2 2 0 5 3\n1 2 1 7\n1 3 1 8\n3 4 15 3\n2 5 1 1\n1 3\n7 5\n8 2\n", "output": ["5 3\n3 0\n2 0\n"]}, {"input": "5 3\n2 2 0 5 1\n1 2 1 7\n1 3 1 8\n2 4 8 4\n2 5 1 0\n1 3\n7 5\n8 2\n", "output": ["5 8\n1 0\n5 4\n"]}, {"input": "5 5\n1 1 5 4 6\n1 2 4 1\n1 3 1 1\n1 4 2 1\n3 5 1 1\n9 1\n8 1\n3 1\n4 1\n1 1\n", "output": ["1 0\n1 0\n1 1\n1 1\n6 1\n"]}, {"input": "5 5\n1 2 3 4 5\n1 2 4 1\n1 3 2 1\n1 4 2 1\n2 5 1 1\n5 2\n4 1\n3 1\n3 2\n1 1\n", "output": ["2 0\n2 1\n2 1\n2 0\n5 1\n"]}, {"input": "5 3\n2 2 0 3 5\n1 2 7 7\n1 3 0 8\n2 4 2 2\n2 5 0 1\n1 3\n7 5\n6 2\n", "output": ["0 0\n5 0\n2 7\n"]}, {"input": "5 3\n2 0 0 3 3\n1 2 4 9\n1 3 1 5\n2 4 8 2\n2 5 1 1\n1 3\n1 5\n6 2\n", "output": ["3 9\n3 2\n3 2\n"]}, {"input": "5 3\n5 4 0 5 2\n1 2 6 6\n1 3 1 11\n2 4 8 6\n4 5 2 1\n1 3\n7 5\n8 2\n", "output": ["5 11\n2 0\n5 6\n"]}, {"input": "5 3\n2 2 3 3 3\n1 2 4 7\n1 3 1 8\n2 4 8 2\n2 5 1 1\n1 3\n7 5\n6 2\n", "output": ["3 8\n3 0\n3 2\n"]}, {"input": "2 2\n4 0\n1 2 4 3\n10 1\n5 2\n", "output": ["4 0\n0 0\n"]}, {"input": "5 3\n2 2 0 3 3\n1 2 4 7\n1 3 1 8\n2 4 8 2\n2 5 1 1\n1 3\n7 5\n6 2\n", "output": ["3 8\n3 0\n3 2\n"]}, {"input": "5 5\n1 2 3 0 5\n1 2 4 1\n1 3 2 1\n1 4 2 1\n2 5 1 1\n4 1\n4 1\n3 1\n2 1\n1 1\n", "output": ["2 1\n2 1\n2 1\n3 1\n5 1\n"]}, {"input": "5 3\n2 2 0 3 3\n1 2 4 7\n1 3 1 8\n2 4 8 3\n2 5 1 1\n1 3\n7 5\n8 2\n", "output": ["3 8\n3 0\n3 3\n"]}, {"input": "5 3\n4 2 0 5 3\n1 2 4 7\n1 3 1 8\n2 4 8 3\n2 5 1 1\n1 3\n7 5\n8 2\n", "output": ["5 8\n3 0\n5 3\n"]}, {"input": "5 3\n4 2 0 5 2\n1 2 4 7\n1 3 1 11\n2 4 8 3\n2 5 2 1\n1 3\n7 5\n8 2\n", "output": ["5 11\n2 0\n5 3\n"]}, {"input": "2 2\n7 0\n1 2 4 9\n10 1\n7 2\n", "output": ["7 0\n0 0\n"]}, {"input": "5 3\n2 0 0 3 3\n1 2 4 7\n1 3 1 8\n2 4 8 2\n2 5 1 1\n1 3\n7 5\n6 2\n", "output": ["3 8\n3 0\n3 2\n"]}, {"input": "5 3\n2 2 0 5 3\n1 2 1 7\n1 3 1 8\n2 4 8 3\n2 5 1 1\n1 3\n7 5\n8 2\n", "output": ["5 8\n3 0\n5 3\n"]}, {"input": "5 3\n4 1 0 5 3\n1 2 4 7\n1 3 1 11\n2 4 8 3\n2 5 1 1\n1 3\n7 5\n8 2\n", "output": ["5 11\n3 0\n5 3\n"]}, {"input": "5 3\n4 4 0 5 2\n1 2 4 7\n1 3 1 11\n2 4 8 3\n2 5 1 1\n1 3\n7 5\n8 2\n", "output": ["5 11\n2 0\n5 3\n"]}, {"input": "5 3\n4 2 0 5 2\n1 2 4 7\n1 3 1 11\n2 4 8 3\n4 5 2 1\n1 3\n7 5\n8 2\n", "output": ["5 11\n2 0\n5 3\n"]}, {"input": "2 6\n1 2\n1 2 2 1\n1 2\n2 1\n3 1\n1 2\n2 2\n2 2\n", "output": ["2 0\n2 1\n1 0\n2 0\n2 0\n2 0\n"]}, {"input": "2 2\n7 2\n1 2 4 5\n10 1\n5 2\n", "output": ["7 0\n2 0\n"]}, {"input": "5 5\n1 2 5 4 5\n1 2 4 1\n1 3 1 1\n1 4 2 1\n2 5 1 1\n5 1\n4 1\n3 1\n2 1\n1 1\n", "output": ["1 0\n2 1\n2 1\n4 1\n5 1\n"]}, {"input": "2 2\n8 0\n1 2 4 3\n10 2\n5 2\n", "output": ["0 0\n0 0\n"]}, {"input": "5 3\n2 0 0 3 3\n1 2 6 7\n1 3 1 8\n2 4 8 2\n2 5 1 1\n1 3\n7 5\n6 2\n", "output": ["3 8\n3 0\n3 2\n"]}, {"input": "5 3\n2 2 0 3 3\n1 2 7 7\n1 3 0 8\n2 4 8 2\n2 5 1 1\n1 3\n7 5\n6 2\n", "output": ["0 0\n3 0\n3 2\n"]}, {"input": "5 3\n5 2 0 5 2\n1 2 4 7\n1 3 1 11\n2 4 8 3\n4 5 2 1\n1 3\n7 5\n8 2\n", "output": ["5 11\n2 0\n5 3\n"]}, {"input": "2 2\n7 2\n1 2 4 4\n10 1\n5 2\n", "output": ["7 0\n2 0\n"]}, {"input": "5 3\n2 0 0 3 3\n1 2 6 7\n1 3 1 8\n2 4 8 2\n3 5 1 1\n1 3\n7 5\n6 2\n", "output": ["3 8\n3 0\n3 2\n"]}, {"input": "2 2\n8 1\n1 2 4 0\n10 2\n5 2\n", "output": ["1 0\n1 0\n"]}, {"input": "5 3\n9 2 0 5 2\n1 2 4 7\n1 3 1 11\n2 4 8 3\n4 5 2 1\n1 3\n7 5\n6 2\n", "output": ["9 11\n2 0\n5 3\n"]}, {"input": "2 2\n8 1\n1 2 4 0\n9 2\n5 2\n", "output": ["1 0\n1 0\n"]}, {"input": "5 3\n4 0 0 3 3\n1 2 6 7\n1 3 1 8\n2 4 8 2\n3 5 1 1\n1 3\n4 5\n6 2\n", "output": ["4 8\n3 0\n4 7\n"]}, {"input": "5 5\n1 1 5 4 6\n1 2 4 1\n1 3 1 1\n1 4 2 1\n3 5 1 1\n5 1\n8 1\n3 1\n2 1\n1 1\n", "output": ["1 0\n1 0\n1 1\n4 1\n6 1\n"]}, {"input": "5 3\n4 0 0 3 3\n1 2 6 7\n1 3 1 8\n2 4 8 2\n3 5 1 1\n1 3\n4 5\n4 2\n", "output": ["4 8\n3 0\n4 7\n"]}, {"input": "5 5\n1 1 5 4 6\n1 2 4 1\n1 3 1 1\n1 4 2 1\n3 5 1 1\n5 1\n8 1\n3 1\n2 2\n1 1\n", "output": ["1 0\n1 0\n1 1\n4 1\n6 1\n"]}, {"input": "5 5\n1 1 5 4 6\n1 2 4 1\n1 3 1 1\n1 4 2 1\n3 5 1 1\n10 1\n8 1\n5 1\n2 4\n1 1\n", "output": ["1 0\n1 0\n1 0\n4 0\n6 1\n"]}, {"input": "5 5\n1 1 5 4 6\n1 2 4 1\n1 3 1 1\n1 4 2 0\n3 5 1 1\n10 1\n8 1\n5 1\n2 4\n1 1\n", "output": ["1 0\n1 0\n1 0\n4 0\n6 1\n"]}, {"input": "5 5\n1 1 5 4 6\n1 2 4 1\n1 3 1 1\n1 4 2 0\n3 5 1 1\n10 1\n8 1\n5 2\n2 4\n1 1\n", "output": ["1 0\n1 0\n1 0\n4 0\n6 1\n"]}, {"input": "5 5\n1 1 5 4 6\n1 2 4 1\n2 3 1 1\n1 4 2 0\n3 5 1 1\n10 1\n8 1\n5 2\n2 4\n1 1\n", "output": ["1 0\n1 0\n1 0\n4 0\n6 1\n"]}, {"input": "5 5\n1 2 3 1 5\n1 2 4 1\n1 3 2 1\n1 4 2 1\n2 5 1 1\n4 1\n4 1\n3 1\n2 1\n1 1\n", "output": ["2 1\n2 1\n2 1\n3 1\n5 1\n"]}, {"input": "5 3\n2 2 0 5 3\n1 2 1 7\n1 3 1 8\n2 4 15 3\n2 5 1 1\n1 3\n7 5\n8 2\n", "output": ["5 8\n3 0\n5 3\n"]}, {"input": "5 3\n4 2 0 5 2\n1 2 4 7\n1 3 1 11\n2 4 8 3\n4 5 2 2\n1 3\n7 5\n8 2\n", "output": ["5 11\n2 0\n5 3\n"]}, {"input": "2 2\n7 1\n1 2 4 5\n10 1\n5 2\n", "output": ["7 0\n1 0\n"]}, {"input": "5 5\n1 2 2 2 2\n1 2 2 8\n1 3 6 3\n1 4 4 5\n1 5 2 1\n4 1\n5 1\n6 1\n8 1\n8 1\n", "output": ["2 5\n2 3\n2 3\n1 0\n1 0\n"]}, {"input": "2 2\n7 1\n1 2 4 9\n12 1\n7 2\n", "output": ["7 0\n1 0\n"]}, {"input": "2 2\n8 0\n1 2 4 4\n10 2\n5 2\n", "output": ["0 0\n0 0\n"]}, {"input": "5 3\n2 2 0 5 3\n1 2 1 7\n1 3 1 8\n2 4 8 4\n2 5 1 0\n1 3\n7 5\n8 2\n", "output": ["5 8\n3 0\n5 4\n"]}, {"input": "5 3\n4 4 0 5 2\n1 2 4 7\n1 3 1 11\n1 4 8 3\n2 5 1 1\n1 3\n14 5\n8 2\n", "output": ["5 11\n2 0\n4 0\n"]}, {"input": "5 3\n5 2 0 5 2\n1 2 4 6\n1 3 1 11\n2 4 8 3\n4 5 2 1\n1 3\n7 5\n8 2\n", "output": ["5 11\n2 0\n5 3\n"]}, {"input": "5 3\n2 0 0 3 3\n1 2 6 7\n1 3 1 8\n2 4 8 2\n3 5 1 1\n1 3\n7 5\n6 3\n", "output": ["3 8\n3 0\n0 0\n"]}, {"input": "5 3\n9 2 0 5 2\n1 2 4 7\n1 3 1 11\n2 4 4 3\n4 5 2 1\n1 3\n7 5\n6 2\n", "output": ["9 11\n2 0\n2 0\n"]}, {"input": "5 5\n1 1 5 4 6\n1 2 4 1\n1 3 1 1\n1 4 2 1\n3 5 1 1\n9 1\n8 1\n3 1\n2 1\n1 1\n", "output": ["1 0\n1 0\n1 1\n4 1\n6 1\n"]}, {"input": "5 5\n1 1 5 4 6\n1 2 4 1\n1 3 1 1\n1 4 2 1\n3 5 1 1\n5 1\n5 1\n5 1\n2 4\n1 1\n", "output": ["1 0\n1 0\n1 0\n4 0\n6 1\n"]}, {"input": "5 5\n1 1 5 4 6\n1 2 4 1\n1 3 1 1\n1 4 2 1\n3 5 1 1\n10 1\n5 1\n5 1\n2 4\n1 1\n", "output": ["1 0\n1 0\n1 0\n4 0\n6 1\n"]}, {"input": "2 1\n4 0\n1 2 4 13\n10 1\n5 2\n", "output": ["4 0\n"]}, {"input": "5 5\n1 2 6 -1 5\n1 2 4 1\n1 3 2 1\n1 4 2 1\n2 5 1 1\n8 1\n4 1\n3 1\n2 1\n1 1\n", "output": ["1 0\n2 1\n2 1\n6 1\n6 1\n"]}, {"input": "5 3\n2 2 0 3 3\n1 2 4 7\n1 3 1 8\n2 4 12 3\n2 5 1 1\n1 3\n7 5\n8 3\n", "output": ["3 8\n3 0\n0 0\n"]}, {"input": "5 5\n1 2 3 4 0\n1 2 4 1\n1 3 3 1\n1 4 2 1\n2 5 1 1\n4 1\n4 1\n3 1\n2 1\n1 2\n", "output": ["2 1\n2 1\n3 1\n4 1\n4 1\n"]}, {"input": "5 3\n2 0 0 3 3\n1 2 4 7\n1 3 1 5\n2 4 8 2\n2 5 1 1\n1 3\n3 5\n6 2\n", "output": ["3 7\n3 0\n3 2\n"]}, {"input": "5 5\n1 2 2 2 2\n1 2 2 8\n1 3 6 3\n1 4 4 5\n1 5 4 1\n4 1\n5 1\n6 1\n8 1\n8 1\n", "output": ["2 5\n2 3\n2 3\n1 0\n1 0\n"]}, {"input": "5 3\n2 2 0 3 3\n1 2 7 7\n1 3 0 8\n2 4 2 2\n2 5 0 1\n1 3\n7 5\n6 2\n", "output": ["0 0\n3 0\n2 7\n"]}, {"input": "5 3\n2 2 0 5 3\n1 2 1 11\n1 3 1 8\n2 4 8 4\n2 5 1 0\n1 3\n7 5\n8 2\n", "output": ["5 11\n3 0\n5 4\n"]}, {"input": "5 3\n4 4 0 5 2\n1 2 4 7\n1 3 1 11\n1 4 8 3\n2 5 1 1\n1 3\n14 5\n8 1\n", "output": ["5 11\n2 0\n5 3\n"]}, {"input": "5 3\n5 4 0 5 2\n1 2 4 6\n1 3 1 11\n2 4 8 3\n4 5 2 1\n1 3\n7 5\n8 2\n", "output": ["5 11\n2 0\n5 3\n"]}, {"input": "5 3\n2 0 0 3 3\n1 2 6 7\n1 3 1 8\n2 4 8 2\n3 5 1 0\n1 3\n7 5\n6 3\n", "output": ["3 8\n3 0\n0 0\n"]}, {"input": "5 5\n1 2 5 4 6\n1 2 4 1\n1 3 1 1\n1 4 2 1\n3 5 1 1\n9 1\n8 1\n3 1\n2 1\n1 1\n", "output": ["1 0\n1 0\n2 1\n4 1\n6 1\n"]}, {"input": "5 5\n1 2 5 4 5\n1 2 4 1\n1 3 2 1\n1 4 2 1\n2 5 1 1\n5 2\n4 1\n3 1\n3 1\n1 1\n", "output": ["2 0\n2 1\n2 1\n2 1\n5 1\n"]}, {"input": "2 1\n4 -1\n1 2 4 13\n10 1\n5 2\n", "output": ["4 0\n"]}, {"input": "5 5\n1 2 3 3 5\n1 2 4 1\n1 3 2 2\n1 4 1 1\n2 5 1 1\n4 1\n4 2\n3 1\n2 1\n1 1\n", "output": ["2 1\n2 0\n2 1\n3 2\n5 1\n"]}, {"input": "5 3\n2 2 0 3 3\n1 2 7 7\n1 3 0 8\n1 4 2 2\n2 5 0 1\n1 3\n7 5\n6 2\n", "output": ["0 0\n3 0\n2 7\n"]}, {"input": "5 3\n5 4 0 5 2\n1 2 6 6\n1 3 1 11\n2 4 8 3\n4 5 2 1\n1 3\n7 5\n8 2\n", "output": ["5 11\n2 0\n5 3\n"]}, {"input": "2 1\n4 -1\n1 2 4 13\n10 1\n2 2\n", "output": ["4 0\n"]}, {"input": "5 3\n5 0 0 5 2\n1 2 6 6\n1 3 1 11\n2 4 8 3\n4 5 2 1\n1 3\n7 5\n8 2\n", "output": ["5 11\n2 0\n5 3\n"]}, {"input": "2 1\n4 -1\n1 2 4 13\n10 1\n2 3\n", "output": ["4 0\n"]}, {"input": "5 3\n2 0 0 3 3\n1 2 4 12\n1 3 1 5\n2 4 8 2\n4 5 1 1\n1 3\n3 5\n6 2\n", "output": ["3 12\n3 0\n3 2\n"]}, {"input": "5 3\n4 5 0 5 4\n1 2 4 7\n1 3 1 11\n1 4 8 1\n2 5 1 1\n1 3\n14 5\n8 1\n", "output": ["5 11\n4 0\n5 1\n"]}, {"input": "2 1\n4 -1\n1 2 4 13\n16 1\n2 3\n", "output": ["4 0\n"]}, {"input": "5 3\n2 0 0 6 2\n1 2 6 7\n1 3 1 9\n2 4 8 2\n3 5 1 0\n2 3\n7 5\n6 3\n", "output": ["0 0\n2 0\n0 0\n"]}, {"input": "2 1\n4 -1\n1 2 4 13\n16 1\n0 3\n", "output": ["4 0\n"]}, {"input": "5 3\n2 0 0 6 2\n1 2 6 7\n1 3 1 9\n2 4 8 2\n1 5 1 0\n2 3\n7 5\n6 3\n", "output": ["0 0\n2 0\n0 0\n"]}, {"input": "5 3\n2 2 3 3 3\n1 4 4 7\n1 3 2 8\n2 4 8 2\n2 5 1 1\n1 3\n9 5\n6 2\n", "output": ["3 8\n3 0\n3 2\n"]}, {"input": "2 2\n7 0\n1 2 4 9\n5 1\n5 2\n", "output": ["7 0\n0 0\n"]}, {"input": "5 3\n2 2 3 3 3\n1 2 4 4\n1 3 1 8\n2 4 8 2\n2 5 1 1\n1 3\n9 5\n6 2\n", "output": ["3 8\n3 0\n3 2\n"]}, {"input": "2 2\n4 0\n1 2 4 6\n10 1\n5 2\n", "output": ["4 0\n0 0\n"]}, {"input": "5 5\n1 2 3 3 5\n1 2 4 1\n1 3 2 1\n2 4 2 1\n2 5 1 1\n4 1\n4 1\n3 1\n2 1\n1 1\n", "output": ["2 1\n2 1\n2 1\n3 1\n5 1\n"]}, {"input": "5 3\n2 2 0 3 3\n1 2 4 7\n1 3 1 8\n2 4 8 2\n2 5 1 2\n1 3\n7 5\n6 2\n", "output": ["3 8\n3 0\n3 2\n"]}, {"input": "5 5\n1 2 3 0 5\n1 2 4 1\n1 3 2 1\n1 4 3 1\n2 5 0 1\n4 1\n4 1\n3 1\n2 1\n1 1\n", "output": ["2 1\n2 1\n2 1\n3 1\n3 1\n"]}, {"input": "5 3\n2 2 0 3 3\n1 2 7 7\n1 3 1 8\n2 4 8 3\n2 5 1 1\n1 3\n7 5\n8 2\n", "output": ["3 8\n3 0\n3 3\n"]}, {"input": "5 3\n5 2 0 5 2\n1 2 4 7\n1 3 1 11\n2 4 8 3\n2 5 2 1\n1 3\n7 5\n8 2\n", "output": ["5 11\n2 0\n5 3\n"]}, {"input": "5 5\n1 0 2 2 2\n1 2 2 8\n1 3 6 3\n1 4 4 5\n1 5 7 1\n4 1\n5 1\n6 1\n7 1\n8 1\n", "output": ["2 5\n2 3\n2 3\n2 1\n1 0\n"]}, {"input": "2 2\n7 0\n1 2 4 9\n5 1\n7 2\n", "output": ["7 0\n0 0\n"]}, {"input": "5 5\n1 2 5 4 5\n1 2 4 1\n1 3 0 1\n1 4 2 1\n2 5 1 1\n5 1\n4 1\n3 1\n2 1\n1 1\n", "output": ["1 0\n2 1\n2 1\n4 1\n5 1\n"]}, {"input": "5 3\n2 0 0 3 3\n1 2 3 7\n1 3 1 8\n2 4 8 2\n2 5 1 1\n1 3\n7 5\n6 2\n", "output": ["3 8\n3 0\n3 2\n"]}, {"input": "5 3\n2 2 0 3 3\n1 2 4 7\n1 3 0 11\n2 4 8 2\n2 5 1 1\n1 3\n7 5\n6 2\n", "output": ["0 0\n3 0\n3 2\n"]}, {"input": "5 5\n1 0 6 0 5\n1 2 4 0\n1 3 2 1\n1 4 2 1\n2 5 1 1\n4 1\n4 1\n3 1\n2 1\n1 1\n", "output": ["1 0\n1 0\n1 0\n6 1\n6 1\n"]}, {"input": "2 2\n7 1\n1 2 4 9\n10 2\n7 2\n", "output": ["1 0\n1 0\n"]}, {"input": "5 5\n1 2 5 4 5\n1 2 4 1\n1 3 1 1\n1 4 2 1\n2 5 1 1\n5 2\n4 1\n3 1\n2 1\n1 1\n", "output": ["2 0\n2 1\n2 1\n4 1\n5 1\n"]}, {"input": "5 5\n1 0 9 0 5\n1 2 4 1\n1 3 2 1\n1 4 2 1\n2 5 1 1\n6 1\n4 1\n3 1\n2 1\n1 1\n", "output": ["1 0\n1 0\n1 0\n9 1\n9 1\n"]}, {"input": "5 3\n4 4 0 5 2\n1 2 6 7\n1 3 1 11\n1 4 8 3\n2 5 1 1\n1 3\n7 5\n8 2\n", "output": ["5 11\n2 0\n4 0\n"]}], "task_id": "codecontest/43", "repair_prompt": ["Omkar is hosting tours of his country, Omkarland! There are n cities in Omkarland. Rather curiously, there are exactly n-1 bidirectional roads connecting the cities to each other. It is guaranteed that you can reach any city from any other city through the road network.\n\nEvery city has an enjoyment value e. Each road has a capacity c, denoting the maximum number of vehicles that can be on it, and an associated toll t. However, the toll system in Omkarland has an interesting quirk: if a vehicle travels on multiple roads on a single journey, they pay only the highest toll of any single road on which they traveled. Put differently, they pay the maximum toll across all the roads they traversed. If a vehicle traverses no roads, they pay 0 toll.\n\nOmkar has decided to host q tour groups. Each tour group consists of v vehicles starting at city x. (Keep in mind that a tour group with v vehicles can travel only on roads with capacity \u2265 v.) Being the tour organizer, Omkar wants his groups to have as much fun as they possibly can, but also must reimburse his groups for the tolls that they have to pay. Thus, for each tour group, Omkar wants to know two things: first, what is the enjoyment value of the city y with maximum enjoyment value that the tour group can reach from their starting city, and second, how much per vehicle will Omkar have to pay to reimburse the entire group for their trip from x to y? (This trip from x to y will always be on the shortest path from x to y.)\n\nIn the case that there are multiple reachable cities with the maximum enjoyment value, Omkar will let his tour group choose which one they want to go to. Therefore, to prepare for all possible scenarios, he wants to know the amount of money per vehicle that he needs to guarantee. This ensures that he can reimburse the group regardless of which city they choose.\n\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 2 \u22c5 10^5, 1 \u2264 q \u2264 2 \u22c5 10^5), representing the number of cities and the number of groups, respectively.\n\nThe next line contains n integers e_1, e_2, \u2026, e_n (1 \u2264 e_i \u2264 10^9), where e_i represents the enjoyment value for city i.\n\nThe next n-1 lines each contain four integers a, b, c, and t (1 \u2264 a,b \u2264 n, 1 \u2264 c \u2264 10^9, 1 \u2264 t \u2264 10^9), representing an road between city a and city b with capacity c and toll t.\n\nThe next q lines each contain two integers v and x (1 \u2264 v \u2264 10^9, 1 \u2264 x \u2264 n), representing the number of vehicles in the tour group and the starting city, respectively.\n\nOutput\n\nOutput q lines. The i-th line should contain two integers: the highest possible enjoyment value of a city reachable by the i-th tour group, and the amount of money per vehicle Omkar needs to guarantee that he can reimburse the i-th tour group.\n\nExamples\n\nInput\n\n\n5 3\n2 2 3 3 3\n1 2 4 7\n1 3 2 8\n2 4 8 2\n2 5 1 1\n1 3\n9 5\n6 2\n\n\nOutput\n\n\n3 8\n3 0\n3 2\n\n\nInput\n\n\n5 5\n1 2 3 4 5\n1 2 4 1\n1 3 3 1\n1 4 2 1\n2 5 1 1\n5 1\n4 1\n3 1\n2 1\n1 1\n\n\nOutput\n\n\n1 0\n2 1\n3 1\n4 1\n5 1\n\n\nInput\n\n\n5 5\n1 2 2 2 2\n1 2 5 8\n1 3 6 3\n1 4 4 5\n1 5 7 1\n4 1\n5 1\n6 1\n7 1\n8 1\n\n\nOutput\n\n\n2 8\n2 8\n2 3\n2 1\n1 0\n\nNote\n\nA map of the first sample is shown below. For the nodes, unbolded numbers represent indices and bolded numbers represent enjoyment values. For the edges, unbolded numbers represent capacities and bolded numbers represent tolls.\n\n<image>\n\nFor the first query, a tour group of size 1 starting at city 3 can reach cities 1, 2, 3, 4, and 5. Thus, the largest enjoyment value that they can reach is 3. If the tour group chooses to go to city 4, Omkar will have to pay 8 per vehicle, which is the maximum.\n\nFor the second query, a tour group of size 9 starting at city 5 can reach only city 5. Thus, the largest reachable enjoyment value is still 3, and Omkar will pay 0 per vehicle.\n\nFor the third query, a tour group of size 6 starting at city 2 can reach cities 2 and 4. The largest reachable enjoyment value is again 3. If the tour group chooses to go to city 4, Omkar will have to pay 2 per vehicle, which is the maximum.\n\nA map of the second sample is shown below:\n\n<image>\n\nFor the first query, a tour group of size 5 starting at city 1 can only reach city 1. Thus, their maximum enjoyment value is 1 and the cost Omkar will have to pay is 0 per vehicle.\n\nFor the second query, a tour group of size 4 starting at city 1 can reach cities 1 and 2. Thus, their maximum enjoyment value is 2 and Omkar will pay 1 per vehicle.\n\nFor the third query, a tour group of size 3 starting at city 1 can reach cities 1, 2, and 3. Thus, their maximum enjoyment value is 3 and Omkar will pay 1 per vehicle.\n\nFor the fourth query, a tour group of size 2 starting at city 1 can reach cities 1, 2, 3 and 4. Thus, their maximum enjoyment value is 4 and Omkar will pay 1 per vehicle.\n\nFor the fifth query, a tour group of size 1 starting at city 1 can reach cities 1, 2, 3, 4, and 5. Thus, their maximum enjoyment value is 5 and Omkar will pay 1 per vehicle.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "import sys\nimport heapq\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    enjoyment_values = list(map(int, data[index:index + n]))\n    index += n\n    \n    graph = defaultdict(list)\n    \n    for _ in range(n - 1):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        c = int(data[index + 2])\n        t = int(data[index + 3])\n        index += 4\n        graph[a].append((b, c, t))\n        graph[b].append((a, c, t))\n    \n    queries = []\n    for _ in range(q):\n        v = int(data[index])\n        x = int(data[index + 1]) - 1\n        index += 2\n        queries.append((v, x))\n    \n    results = []\n    \n    for v, start in queries:\n        max_enjoyment = -1\n        max_toll = 0\n        \n        # BFS to find reachable cities with max enjoyment\n        queue = deque([(start, 0)])\n        visited = set()\n        local_max_enjoyment = enjoyment_values[start]\n        local_max_toll = 0\n        \n        while queue:\n            current, current_toll = queue.popleft()\n            if current in visited:\n                continue\n            visited.add(current)\n            \n            if enjoyment_values[current] > local_max_enjoyment:\n                local_max_enjoyment = enjoyment_values[current]\n                local_max_toll = current_toll\n            elif enjoyment_values[current] == local_max_enjoyment:\n                local_max_toll = max(local_max_toll, current_toll)\n            \n            for neighbor, capacity, toll in graph[current]:\n                if neighbor not in visited and capacity >= v:\n                    queue.append((neighbor, max(current_toll, toll)))\n        \n        results.append((local_max_enjoyment, local_max_toll))\n    \n    for enjoyment, toll in results:\n        print(enjoyment, toll)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["import sys\nimport heapq\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    enjoyment_values = list(map(int, data[index:index + n]))\n    index += n\n    \n    graph = defaultdict(list)\n    \n    for _ in range(n - 1):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        c = int(data[index + 2])\n        t = int(data[index + 3])\n        index += 4\n        graph[a].append((b, c, t))\n        graph[b].append((a, c, t))\n    \n    queries = []\n    for _ in range(q):\n        v = int(data[index])\n        x = int(data[index + 1]) - 1\n        index += 2\n        queries.append((v, x))\n    \n    results = []\n    \n    for v, start in queries:\n        max_enjoyment = -1\n        max_toll = 0\n        \n        # BFS to find reachable cities\n        queue = deque([(start, 0)])\n        visited = set()\n        visited.add(start)\n        \n        while queue:\n            current_city, current_max_toll = queue.popleft()\n            current_enjoyment = enjoyment_values[current_city]\n            \n            if current_enjoyment > max_enjoyment:\n                max_enjoyment = current_enjoyment\n                max_toll = current_max_toll\n            elif current_enjoyment == max_enjoyment:\n                max_toll = max(max_toll, current_max_toll)\n            \n            for neighbor, capacity, toll in graph[current_city]:\n                if neighbor not in visited and capacity >= v:\n                    visited.add(neighbor)\n                    queue.append((neighbor, max(current_max_toll, toll)))\n        \n        results.append((max_enjoyment, max_toll))\n    \n    for enjoyment, toll in results:\n        print(enjoyment, toll)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    enjoyment_values = list(map(int, data[index:index + n]))\n    index += n\n    \n    graph = defaultdict(list)\n    \n    for _ in range(n - 1):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        c = int(data[index + 2])\n        t = int(data[index + 3])\n        index += 4\n        graph[a].append((b, c, t))\n        graph[b].append((a, c, t))\n    \n    queries = []\n    for _ in range(q):\n        v = int(data[index])\n        x = int(data[index + 1]) - 1\n        index += 2\n        queries.append((v, x))\n    \n    results = []\n    \n    for v, start in queries:\n        max_enjoyment = enjoyment_values[start]\n        max_toll = 0\n        visited = [False] * n\n        queue = deque([(start, 0)])\n        \n        while queue:\n            current, current_max_toll = queue.popleft()\n            if visited[current]:\n                continue\n            visited[current] = True\n            max_enjoyment = max(max_enjoyment, enjoyment_values[current])\n            max_toll = max(max_toll, current_max_toll)\n            \n            for neighbor, capacity, toll in graph[current]:\n                if not visited[neighbor] and capacity >= v:\n                    queue.append((neighbor, max(current_max_toll, toll)))\n        \n        results.append((max_enjoyment, max_toll))\n    \n    for enjoyment, toll in results:\n        print(enjoyment, toll)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def parse_input():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    enjoyment_values = list(map(int, data[index:index + n]))\n    index += n\n    \n    roads = []\n    for _ in range(n - 1):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        c = int(data[index + 2])\n        t = int(data[index + 3])\n        roads.append((a, b, c, t))\n        index += 4\n    \n    queries = []\n    for _ in range(q):\n        v = int(data[index])\n        x = int(data[index + 1]) - 1\n        queries.append((v, x))\n        index += 2\n    \n    return n, q, enjoyment_values, roads, queries\n\ndef build_graph(n, roads):\n    graph = defaultdict(list)\n    for a, b, c, t in roads:\n        graph[a].append((b, c, t))\n        graph[b].append((a, c, t))\n    return graph\n\ndef bfs_max_enjoyment_and_toll(graph, enjoyment_values, start_city, vehicle_count):\n    max_enjoyment = enjoyment_values[start_city]\n    max_toll = 0\n    visited = [False] * len(enjoyment_values)\n    queue = deque([(start_city, 0)])\n    visited[start_city] = True\n    \n    while queue:\n        current_city, current_toll = queue.popleft()\n        max_enjoyment = max(max_enjoyment, enjoyment_values[current_city])\n        max_toll = max(max_toll, current_toll)\n        \n        for neighbor, capacity, toll in graph[current_city]:\n            if not visited[neighbor] and capacity >= vehicle_count:\n                visited[neighbor] = True\n                queue.append((neighbor, max(current_toll, toll)))\n    \n    return max_enjoyment, max_toll\n\ndef main():\n    n, q, enjoyment_values, roads, queries = parse_input()\n    graph = build_graph(n, roads)\n    \n    results = []\n    for vehicle_count, start_city in queries:\n        max_enjoyment, max_toll = bfs_max_enjoyment_and_toll(graph, enjoyment_values, start\nmain()", "def main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    enjoyment_values = list(map(int, data[index:index + n]))\n    index += n\n    \n    graph = defaultdict(list)\n    \n    for _ in range(n - 1):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        c = int(data[index + 2])\n        t = int(data[index + 3])\n        index += 4\n        graph[a].append((b, c, t))\n        graph[b].append((a, c, t))\n    \n    queries = []\n    for _ in range(q):\n        v = int(data[index])\n        x = int(data[index + 1]) - 1\n        index += 2\n        queries.append((v, x))\n    \n    results = []\n    \n    for v, start in queries:\n        max_enjoyment = -1\n        max_toll = 0\n        \n        # BFS to find reachable cities and max enjoyment\n        queue = deque([(start, 0)])\n        visited = set()\n        local_max_enjoyment = enjoyment_values[start]\n        \n        while queue:\n            current, current_max_toll = queue.popleft()\n            if current in visited:\n                continue\n            visited.add(current)\n            \n            local_max_enjoyment = max(local_max_enjoyment, enjoyment_values[current])\n            \n            for neighbor, capacity, toll in graph[current]:\n                if neighbor not in visited and capacity >= v:\n                    queue.append((neighbor, max(current_max_toll, toll)))\n        \n        # Find the max toll for the shortest path to the city with max enjoyment\n        max_enjoyment = local_max_enjoyment\n        max_toll = 0\n        visited = set()\n        heap = [(0, start)]\n        \n        while heap:\n            current_max_toll, current = heapq.heappop(heap)\n            if current in visited:\n                continue\n            visited.add(current)\n            \n            if enjoyment_values[current] == max_enjoyment:\n                max_toll = current_max_toll\n                break\n            \n            for neighbor, capacity, toll in graph[current]:\n                if neighbor not in visited and capacity >= v:\n                    heap\nmain()", "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    enjoyment_values = list(map(int, data[index:index + n]))\n    index += n\n    \n    graph = defaultdict(list)\n    \n    for _ in range(n - 1):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        c = int(data[index + 2])\n        t = int(data[index + 3])\n        index += 4\n        graph[a].append((b, c, t))\n        graph[b].append((a, c, t))\n    \n    queries = []\n    for _ in range(q):\n        v = int(data[index])\n        x = int(data[index + 1]) - 1\n        index += 2\n        queries.append((v, x))\n    \n    results = []\n    \n    for v, start in queries:\n        max_enjoyment = enjoyment_values[start]\n        max_toll = 0\n        \n        visited = [False] * n\n        queue = deque([(start, 0)])\n        visited[start] = True\n        \n        while queue:\n            current, current_max_toll = queue.popleft()\n            max_enjoyment = max(max_enjoyment, enjoyment_values[current])\n            max_toll = max(max_toll, current_max_toll)\n            \n            for neighbor, capacity, toll in graph[current]:\n                if not visited[neighbor] and capacity >= v:\n                    visited[neighbor] = True\n                    queue.append((neighbor, max(current_max_toll, toll)))\n        \n        results.append((max_enjoyment, max_toll))\n    \n    for enjoyment, toll in results:\n        print(enjoyment, toll)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    enjoyment_values = list(map(int, data[index:index + n]))\n    index += n\n    \n    graph = defaultdict(list)\n    \n    for _ in range(n - 1):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        c = int(data[index + 2])\n        t = int(data[index + 3])\n        index += 4\n        graph[a].append((b, c, t))\n        graph[b].append((a, c, t))\n    \n    queries = []\n    for _ in range(q):\n        v = int(data[index])\n        x = int(data[index + 1]) - 1\n        index += 2\n        queries.append((v, x))\n    \n    results = []\n    \n    for v, start in queries:\n        # BFS to find reachable cities and max toll\n        queue = deque([(start, 0)])\n        visited = set()\n        max_enjoyment = enjoyment_values[start]\n        max_toll = 0\n        \n        while queue:\n            current, current_max_toll = queue.popleft()\n            if current in visited:\n                continue\n            visited.add(current)\n            \n            max_enjoyment = max(max_enjoyment, enjoyment_values[current])\n            max_toll = max(max_toll, current_max_toll)\n            \n            for neighbor, capacity, toll in graph[current]:\n                if neighbor not in visited and capacity >= v:\n                    queue.append((neighbor, max(current_max_toll, toll)))\n        \n        results.append((max_enjoyment, max_toll))\n    \n    for enjoyment, toll in results:\n        print(enjoyment, toll)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    enjoyment_values = list(map(int, data[index:index + n]))\n    index += n\n    \n    graph = defaultdict(list)\n    \n    for _ in range(n - 1):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        c = int(data[index + 2])\n        t = int(data[index + 3])\n        index += 4\n        graph[a].append((b, c, t))\n        graph[b].append((a, c, t))\n    \n    queries = []\n    for _ in range(q):\n        v = int(data[index])\n        x = int(data[index + 1]) - 1\n        index += 2\n        queries.append((v, x))\n    \n    results = []\n    \n    for v, start in queries:\n        max_enjoyment = enjoyment_values[start]\n        max_toll = 0\n        \n        visited = [False] * n\n        queue = deque([(start, 0)])\n        visited[start] = True\n        \n        while queue:\n            current_city, current_max_toll = queue.popleft()\n            \n            for neighbor, capacity, toll in graph[current_city]:\n                if not visited[neighbor] and capacity >= v:\n                    visited[neighbor] = True\n                    new_max_toll = max(current_max_toll, toll)\n                    queue.append((neighbor, new_max_toll))\n                    \n                    if enjoyment_values[neighbor] > max_enjoyment:\n                        max_enjoyment = enjoyment_values[neighbor]\n                        max_toll = new_max_toll\n                    elif enjoyment_values[neighbor] == max_enjoyment:\n                        max_toll = max(max_toll, new_max_toll)\n        \n        results.append((max_enjoyment, max_toll))\n    \n    for enjoyment, toll in results:\n        print(enjoyment, toll)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def parse_input():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    enjoyment_values = list(map(int, data[index:index + n]))\n    index += n\n    \n    roads = []\n    for _ in range(n - 1):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        c = int(data[index + 2])\n        t = int(data[index + 3])\n        roads.append((a, b, c, t))\n        index += 4\n    \n    queries = []\n    for _ in range(q):\n        v = int(data[index])\n        x = int(data[index + 1]) - 1\n        queries.append((v, x))\n        index += 2\n    \n    return n, q, enjoyment_values, roads, queries\n\ndef build_graph(n, roads):\n    graph = defaultdict(list)\n    for a, b, c, t in roads:\n        graph[a].append((b, c, t))\n        graph[b].append((a, c, t))\n    return graph\n\ndef bfs_max_enjoyment_and_toll(graph, enjoyment_values, start, vehicle_count):\n    max_enjoyment = enjoyment_values[start]\n    max_toll = 0\n    visited = [False] * len(enjoyment_values)\n    queue = deque([(start, 0)])\n    visited[start] = True\n    \n    while queue:\n        current_city, current_toll = queue.popleft()\n        max_enjoyment = max(max_enjoyment, enjoyment_values[current_city])\n        max_toll = max(max_toll, current_toll)\n        \n        for neighbor, capacity, toll in graph[current_city]:\n            if not visited[neighbor] and capacity >= vehicle_count:\n                visited[neighbor] = True\n                queue.append((neighbor, max(current_toll, toll)))\n    \n    return max_enjoyment, max_toll\n\ndef main():\n    n, q, enjoyment_values, roads, queries = parse_input()\n    graph = build_graph(n, roads)\n    \n    results = []\n    for vehicle_count, start_city in queries:\n        max_enjoyment, max_toll = bfs_max_enjoyment_and_toll(graph, enjoyment_values, start_city, vehicle_count\nmain()", "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    enjoyment_values = list(map(int, data[index:index + n]))\n    index += n\n    \n    graph = defaultdict(list)\n    \n    for _ in range(n - 1):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        c = int(data[index + 2])\n        t = int(data[index + 3])\n        index += 4\n        graph[a].append((b, c, t))\n        graph[b].append((a, c, t))\n    \n    queries = []\n    for _ in range(q):\n        v = int(data[index])\n        x = int(data[index + 1]) - 1\n        index += 2\n        queries.append((v, x))\n    \n    results = []\n    \n    for v, start in queries:\n        # BFS to find reachable cities and max toll\n        queue = deque([(start, 0)])\n        visited = set([start])\n        max_enjoyment = enjoyment_values[start]\n        max_toll = 0\n        \n        while queue:\n            current, current_max_toll = queue.popleft()\n            \n            for neighbor, capacity, toll in graph[current]:\n                if neighbor not in visited and capacity >= v:\n                    visited.add(neighbor)\n                    new_max_toll = max(current_max_toll, toll)\n                    queue.append((neighbor, new_max_toll))\n                    max_enjoyment = max(max_enjoyment, enjoyment_values[neighbor])\n                    max_toll = max(max_toll, new_max_toll)\n        \n        results.append((max_enjoyment, max_toll))\n    \n    for enjoyment, toll in results:\n        print(enjoyment, toll)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nimport heapq\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    enjoyment_values = list(map(int, data[index:index + n]))\n    index += n\n    \n    graph = defaultdict(list)\n    \n    for _ in range(n - 1):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        c = int(data[index + 2])\n        t = int(data[index + 3])\n        index += 4\n        graph[a].append((b, c, t))\n        graph[b].append((a, c, t))\n    \n    queries = []\n    for _ in range(q):\n        v = int(data[index])\n        x = int(data[index + 1]) - 1\n        index += 2\n        queries.append((v, x))\n    \n    results = []\n    \n    for v, start in queries:\n        max_enjoyment = -1\n        max_toll = 0\n        \n        # BFS to find reachable cities with max enjoyment\n        queue = deque([(start, 0)])\n        visited = set()\n        local_max_enjoyment = enjoyment_values[start]\n        local_max_toll = 0\n        \n        while queue:\n            current, current_toll = queue.popleft()\n            if current in visited:\n                continue\n            visited.add(current)\n            \n            if enjoyment_values[current] > local_max_enjoyment:\n                local_max_enjoyment = enjoyment_values[current]\n                local_max_toll = current_toll\n            elif enjoyment_values[current] == local_max_enjoyment:\n                local_max_toll = max(local_max_toll, current_toll)\n            \n            for neighbor, capacity, toll in graph[current]:\n                if neighbor not in visited and capacity >= v:\n                    queue.append((neighbor, max(current_toll, toll)))\n        \n        results.append((local_max_enjoyment, local_max_toll))\n    \n    for enjoyment, toll in results:\n        print(enjoyment, toll)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of cities, number of groups, enjoyment values, road connections, and tour group details.\",\n      \"steps\": [\n        \"Read the first line to get n (number of cities) and q (number of groups).\",\n        \"Read the second line to get the enjoyment values for each city.\",\n        \"Read the next n-1 lines to get the road connections, capacities, and tolls.\",\n        \"Read the next q lines to get the number of vehicles and starting city for each tour group.\"\n      ]\n    },\n    {\n      \"description\": \"Model the cities and roads as a graph to facilitate traversal and pathfinding.\",\n      \"steps\": [\n        \"Represent cities as nodes and roads as edges in a graph.\",\n        \"Store road capacities and tolls as edge attributes.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the maximum enjoyment value reachable for each tour group.\",\n      \"steps\": [\n        \"For each tour group, perform a graph traversal starting from the given city.\",\n        \"Filter roads based on capacity to ensure the tour group can travel.\",\n        \"Track the maximum enjoyment value encountered during traversal.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the maximum toll for the shortest path to the city with maximum enjoyment value.\",\n      \"steps\": [\n        \"For each tour group, find the shortest path to each reachable city with maximum enjoyment value.\",\n        \"Determine the maximum toll encountered on the shortest path.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each tour group.\",\n      \"steps\": [\n        \"For each tour group, output the maximum enjoyment value and the maximum toll per vehicle.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input data to extract cities, roads, and tour group information.\",\n    \"Construct a graph representation of the cities and roads.\",\n    \"For each tour group, perform a graph traversal to find reachable cities with maximum enjoyment value.\",\n    \"Calculate the maximum toll for the shortest path to these cities.\",\n    \"Output the maximum enjoyment value and toll for each tour group.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nimport heapq\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    enjoyment_values = list(map(int, data[index:index + n]))\n    index += n\n    \n    graph = defaultdict(list)\n    \n    for _ in range(n - 1):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        c = int(data[index + 2])\n        t = int(data[index + 3])\n        index += 4\n        graph[a].append((b, c, t))\n        graph[b].append((a, c, t))\n    \n    queries = []\n    for _ in range(q):\n        v = int(data[index])\n        x = int(data[index + 1]) - 1\n        index += 2\n        queries.append((v, x))\n    \n    results = []\n    \n    for v, start in queries:\n        max_enjoyment = -1\n        max_toll = 0\n        \n        # BFS to find reachable cities with max enjoyment\n        queue = deque([(start, 0)])\n        visited = set()\n        local_max_enjoyment = enjoyment_values[start]\n        local_max_toll = 0\n        \n        while queue:\n            current, current_toll = queue.popleft()\n            if current in visited:\n                continue\n            visited.add(current)\n            \n            if enjoyment_values[current] > local_max_enjoyment:\n                local_max_enjoyment = enjoyment_values[current]\n                local_max_toll = current_toll\n            elif enjoyment_values[current] == local_max_enjoyment:\n                local_max_toll = max(local_max_toll, current_toll)\n            \n            for neighbor, capacity, toll in graph[current]:\n                if neighbor not in visited and capacity >= v:\n                    queue.append((neighbor, max(current_toll, toll)))\n        \n        results.append((local_max_enjoyment, local_max_toll))\n    \n    for enjoyment, toll in results:\n        print(enjoyment, toll)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of cities, number of groups, enjoyment values, road connections, and tour group details.\",\n      \"steps\": [\n        \"Read the first line to get n (number of cities) and q (number of groups).\",\n        \"Read the second line to get the enjoyment values for each city.\",\n        \"Read the next n-1 lines to get the road connections, capacities, and tolls.\",\n        \"Read the next q lines to get the number of vehicles and starting city for each tour group.\"\n      ]\n    },\n    {\n      \"description\": \"Construct a graph representation of the cities and roads.\",\n      \"steps\": [\n        \"Use adjacency lists to represent the graph where each city is a node and roads are edges with capacity and toll attributes.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the reachable cities for each tour group based on road capacities.\",\n      \"steps\": [\n        \"For each tour group, perform a graph traversal (e.g., BFS or DFS) starting from the given city.\",\n        \"Only traverse roads with capacity greater than or equal to the number of vehicles in the tour group.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the maximum enjoyment value among reachable cities for each tour group.\",\n      \"steps\": [\n        \"For each tour group, find the city with the highest enjoyment value among the reachable cities.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the maximum toll for the shortest path to the city with maximum enjoyment value.\",\n      \"steps\": [\n        \"For each tour group, determine the shortest path to each reachable city using a suitable algorithm (e.g., Dijkstra's algorithm).\",\n        \"Calculate the maximum toll encountered on the shortest path.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each tour group.\",\n      \"steps\": [\n        \"For each tour group, output the maximum enjoyment value and the maximum toll per vehicle.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input data to extract cities, roads, and tour group information.\",\n    \"Construct a graph representation of the cities and roads.\",\n    \"For each tour group, determine the set of reachable cities based on road capacities.\",\n    \"Calculate the maximum enjoyment value among reachable cities for each tour group.\",\n    \"For each tour group, calculate the maximum toll for the shortest path to the city with", "Round_0": {"code": "import sys\nimport heapq\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    enjoyment_values = list(map(int, data[index:index + n]))\n    index += n\n    \n    graph = defaultdict(list)\n    \n    for _ in range(n - 1):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        c = int(data[index + 2])\n        t = int(data[index + 3])\n        index += 4\n        graph[a].append((b, c, t))\n        graph[b].append((a, c, t))\n    \n    queries = []\n    for _ in range(q):\n        v = int(data[index])\n        x = int(data[index + 1]) - 1\n        index += 2\n        queries.append((v, x))\n    \n    results = []\n    \n    for v, start in queries:\n        max_enjoyment = -1\n        max_toll = 0\n        \n        # BFS to find reachable cities\n        queue = deque([(start, 0)])\n        visited = set()\n        visited.add(start)\n        \n        while queue:\n            current_city, current_max_toll = queue.popleft()\n            current_enjoyment = enjoyment_values[current_city]\n            \n            if current_enjoyment > max_enjoyment:\n                max_enjoyment = current_enjoyment\n                max_toll = current_max_toll\n            elif current_enjoyment == max_enjoyment:\n                max_toll = max(max_toll, current_max_toll)\n            \n            for neighbor, capacity, toll in graph[current_city]:\n                if neighbor not in visited and capacity >= v:\n                    visited.add(neighbor)\n                    queue.append((neighbor, max(current_max_toll, toll)))\n        \n        results.append((max_enjoyment, max_toll))\n    \n    for enjoyment, toll in results:\n        print(enjoyment, toll)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"name\": \"Parse Input\",\n      \"description\": \"Read and parse the input data to extract the number of cities, number of queries, enjoyment values, road connections, and tour group details.\"\n    },\n    {\n      \"name\": \"Build Graph\",\n      \"description\": \"Construct a graph representation of the cities and roads using adjacency lists, where each node represents a city and each edge represents a road with its capacity and toll.\"\n    },\n    {\n      \"name\": \"Filter Roads by Capacity\",\n      \"description\": \"For each query, filter the roads in the graph to only include those with a capacity greater than or equal to the number of vehicles in the tour group.\"\n    },\n    {\n      \"name\": \"Find Reachable Cities\",\n      \"description\": \"Using a graph traversal algorithm (e.g., BFS or DFS), find all cities reachable from the starting city for each tour group, considering only roads that meet the capacity requirement.\"\n    },\n    {\n      \"name\": \"Determine Maximum Enjoyment\",\n      \"description\": \"For each query, determine the maximum enjoyment value among the reachable cities.\"\n    },\n    {\n      \"name\": \"Calculate Maximum Toll\",\n      \"description\": \"For each query, calculate the maximum toll that would be incurred on the shortest path to any city with the maximum enjoyment value.\"\n    },\n    {\n      \"name\": \"Output Results\",\n      \"description\": \"For each query, output the maximum enjoyment value and the maximum toll per vehicle.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of cities, number of queries, enjoyment values, road connections, and tour group details.\",\n    \"Construct a graph using adjacency lists to represent the cities and roads.\",\n    \"For each query, filter the graph to only include roads with sufficient capacity for the tour group.\",\n    \"Perform a graph traversal from the starting city to find all reachable cities.\",\n    \"Identify the city with the maximum enjoyment value among the reachable cities.\",\n    \"Calculate the maximum toll incurred on the shortest path to any city with the maximum enjoyment value.\",\n    \"Output the maximum enjoyment value and the maximum toll per vehicle for each query.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nimport heapq\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    enjoyment_values = list(map(int, data[index:index + n]))\n    index += n\n    \n    graph = defaultdict(list)\n    \n    for _ in range(n - 1):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        c = int(data[index + 2])\n        t = int(data[index + 3])\n        index += 4\n        graph[a].append((b, c, t))\n        graph[b].append((a, c, t))\n    \n    queries = []\n    for _ in range(q):\n        v = int(data[index])\n        x = int(data[index + 1]) - 1\n        index += 2\n        queries.append((v, x))\n    \n    results = []\n    \n    for v, start in queries:\n        # BFS to find reachable cities and max toll\n        max_enjoyment = enjoyment_values[start]\n        max_toll = 0\n        visited = [False] * n\n        queue = deque([(start, 0)])\n        \n        while queue:\n            current, current_max_toll = queue.popleft()\n            if visited[current]:\n                continue\n            visited[current] = True\n            max_enjoyment = max(max_enjoyment, enjoyment_values[current])\n            max_toll = max(max_toll, current_max_toll)\n            \n            for neighbor, capacity, toll in graph[current]:\n                if not visited[neighbor] and capacity >= v:\n                    queue.append((neighbor, max(current_max_toll, toll)))\n        \n        results.append((max_enjoyment, max_toll))\n    \n    for enjoyment, toll in results:\n        print(enjoyment, toll)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOF while scanning triple-quoted string literal (<string>, line 142)"}, "Round_1": {"code": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    enjoyment_values = list(map(int, data[index:index + n]))\n    index += n\n    \n    graph = defaultdict(list)\n    \n    for _ in range(n - 1):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        c = int(data[index + 2])\n        t = int(data[index + 3])\n        index += 4\n        graph[a].append((b, c, t))\n        graph[b].append((a, c, t))\n    \n    queries = []\n    for _ in range(q):\n        v = int(data[index])\n        x = int(data[index + 1]) - 1\n        index += 2\n        queries.append((v, x))\n    \n    results = []\n    \n    for v, start in queries:\n        max_enjoyment = enjoyment_values[start]\n        max_toll = 0\n        visited = [False] * n\n        queue = deque([(start, 0)])\n        \n        while queue:\n            current, current_max_toll = queue.popleft()\n            if visited[current]:\n                continue\n            visited[current] = True\n            max_enjoyment = max(max_enjoyment, enjoyment_values[current])\n            max_toll = max(max_toll, current_max_toll)\n            \n            for neighbor, capacity, toll in graph[current]:\n                if not visited[neighbor] and capacity >= v:\n                    queue.append((neighbor, max(current_max_toll, toll)))\n        \n        results.append((max_enjoyment, max_toll))\n    \n    for enjoyment, toll in results:\n        print(enjoyment, toll)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"name\": \"Parse Input\",\n      \"description\": \"Read and parse the input data to extract the number of cities, number of queries, enjoyment values, road connections, and tour group details.\"\n    },\n    {\n      \"name\": \"Build Graph\",\n      \"description\": \"Construct a graph representation of the cities and roads using adjacency lists, where each node represents a city and each edge represents a road with its capacity and toll.\"\n    },\n    {\n      \"name\": \"Filter Roads by Capacity\",\n      \"description\": \"For each query, filter the roads in the graph to only include those with a capacity greater than or equal to the number of vehicles in the tour group.\"\n    },\n    {\n      \"name\": \"Find Reachable Cities\",\n      \"description\": \"For each query, perform a graph traversal (e.g., BFS or DFS) from the starting city to find all reachable cities given the filtered roads.\"\n    },\n    {\n      \"name\": \"Determine Maximum Enjoyment\",\n      \"description\": \"For each query, among the reachable cities, determine the city with the maximum enjoyment value.\"\n    },\n    {\n      \"name\": \"Calculate Maximum Toll\",\n      \"description\": \"For each query, calculate the maximum toll that would be incurred on the shortest path from the starting city to any city with the maximum enjoyment value.\"\n    },\n    {\n      \"name\": \"Output Results\",\n      \"description\": \"For each query, output the maximum enjoyment value and the maximum toll per vehicle.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of cities, number of queries, enjoyment values, road connections, and tour group details.\",\n    \"Construct a graph using adjacency lists to represent the cities and roads.\",\n    \"For each query, filter the roads based on the capacity requirement of the tour group.\",\n    \"Perform a graph traversal from the starting city to find all reachable cities using the filtered roads.\",\n    \"Identify the city with the maximum enjoyment value among the reachable cities.\",\n    \"Calculate the maximum toll incurred on the shortest path to any city with the maximum enjoyment value.\",\n    \"Output the maximum enjoyment value and the maximum toll per vehicle for each query.\"\n  ]\n}\n```", "Round_0": {"code": "def parse_input():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    enjoyment_values = list(map(int, data[index:index + n]))\n    index += n\n    \n    roads = []\n    for _ in range(n - 1):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        c = int(data[index + 2])\n        t = int(data[index + 3])\n        roads.append((a, b, c, t))\n        index += 4\n    \n    queries = []\n    for _ in range(q):\n        v = int(data[index])\n        x = int(data[index + 1]) - 1\n        queries.append((v, x))\n        index += 2\n    \n    return n, q, enjoyment_values, roads, queries\n\ndef build_graph(n, roads):\n    graph = defaultdict(list)\n    for a, b, c, t in roads:\n        graph[a].append((b, c, t))\n        graph[b].append((a, c, t))\n    return graph\n\ndef bfs_max_enjoyment_and_toll(graph, enjoyment_values, start_city, vehicle_count):\n    max_enjoyment = enjoyment_values[start_city]\n    max_toll = 0\n    visited = [False] * len(enjoyment_values)\n    queue = deque([(start_city, 0)])\n    visited[start_city] = True\n    \n    while queue:\n        current_city, current_toll = queue.popleft()\n        max_enjoyment = max(max_enjoyment, enjoyment_values[current_city])\n        max_toll = max(max_toll, current_toll)\n        \n        for neighbor, capacity, toll in graph[current_city]:\n            if not visited[neighbor] and capacity >= vehicle_count:\n                visited[neighbor] = True\n                queue.append((neighbor, max(current_toll, toll)))\n    \n    return max_enjoyment, max_toll\n\ndef main():\n    n, q, enjoyment_values, roads, queries = parse_input()\n    graph = build_graph(n, roads)\n    \n    results = []\n    for vehicle_count, start_city in queries:\n        max_enjoyment, max_toll = bfs_max_enjoyment_and_toll(graph, enjoyment_values, start", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 64)"}, "Round_1": {"code": "def parse_input():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    enjoyment_values = list(map(int, data[index:index + n]))\n    index += n\n    \n    roads = []\n    for _ in range(n - 1):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        c = int(data[index + 2])\n        t = int(data[index + 3])\n        roads.append((a, b, c, t))\n        index += 4\n    \n    queries = []\n    for _ in range(q):\n        v = int(data[index])\n        x = int(data[index + 1]) - 1\n        queries.append((v, x))\n        index += 2\n    \n    return n, q, enjoyment_values, roads, queries\n\ndef build_graph(n, roads):\n    graph = defaultdict(list)\n    for a, b, c, t in roads:\n        graph[a].append((b, c, t))\n        graph[b].append((a, c, t))\n    return graph\n\ndef bfs_max_enjoyment_and_toll(graph, enjoyment_values, start_city, vehicle_count):\n    max_enjoyment = enjoyment_values[start_city]\n    max_toll = 0\n    visited = [False] * len(enjoyment_values)\n    queue = deque([(start_city, 0)])\n    visited[start_city] = True\n    \n    while queue:\n        current_city, current_toll = queue.popleft()\n        max_enjoyment = max(max_enjoyment, enjoyment_values[current_city])\n        max_toll = max(max_toll, current_toll)\n        \n        for neighbor, capacity, toll in graph[current_city]:\n            if not visited[neighbor] and capacity >= vehicle_count:\n                visited[neighbor] = True\n                queue.append((neighbor, max(current_toll, toll)))\n    \n    return max_enjoyment, max_toll\n\ndef main():\n    n, q, enjoyment_values, roads, queries = parse_input()\n    graph = build_graph(n, roads)\n    \n    results = []\n    for vehicle_count, start_city in queries:\n        max_enjoyment, max_toll = bfs_max_enjoyment_and_toll(graph, enjoyment_values, start"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of cities, number of groups, enjoyment values, road connections, and tour group details.\",\n      \"steps\": [\n        \"Read the first line to get n (number of cities) and q (number of groups).\",\n        \"Read the second line to get the enjoyment values for each city.\",\n        \"Read the next n-1 lines to get the road connections with their capacities and tolls.\",\n        \"Read the next q lines to get the tour group details (number of vehicles and starting city).\"\n      ]\n    },\n    {\n      \"description\": \"Construct a graph representation of the cities and roads.\",\n      \"steps\": [\n        \"Use an adjacency list to represent the graph where each city is a node and roads are edges with capacity and toll attributes.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the maximum enjoyment value reachable for each tour group.\",\n      \"steps\": [\n        \"For each tour group, perform a graph traversal (e.g., BFS or DFS) starting from the given city.\",\n        \"Only traverse roads with capacity greater than or equal to the number of vehicles in the tour group.\",\n        \"Track the maximum enjoyment value encountered during the traversal.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the maximum toll for the shortest path to the city with maximum enjoyment value.\",\n      \"steps\": [\n        \"For each tour group, find the shortest path to each city with the maximum enjoyment value using a modified Dijkstra's algorithm.\",\n        \"During the pathfinding, keep track of the maximum toll encountered on the path.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each tour group.\",\n      \"steps\": [\n        \"For each tour group, output the maximum enjoyment value and the maximum toll per vehicle.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input data to extract cities, roads, and tour group information.\",\n    \"Construct a graph using adjacency lists to represent cities and roads.\",\n    \"For each tour group, perform a graph traversal to find the maximum enjoyment value reachable.\",\n    \"Use a pathfinding algorithm to determine the maximum toll for the shortest path to the city with maximum enjoyment value.\",\n    \"Output the results for each tour group.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    enjoyment_values = list(map(int, data[index:index + n]))\n    index += n\n    \n    graph = defaultdict(list)\n    \n    for _ in range(n - 1):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        c = int(data[index + 2])\n        t = int(data[index + 3])\n        index += 4\n        graph[a].append((b, c, t))\n        graph[b].append((a, c, t))\n    \n    queries = []\n    for _ in range(q):\n        v = int(data[index])\n        x = int(data[index + 1]) - 1\n        index += 2\n        queries.append((v, x))\n    \n    results = []\n    \n    for v, start in queries:\n        max_enjoyment = -1\n        max_toll = 0\n        \n        # BFS to find reachable cities and max enjoyment\n        queue = deque([(start, 0)])\n        visited = set()\n        local_max_enjoyment = enjoyment_values[start]\n        \n        while queue:\n            current, current_max_toll = queue.popleft()\n            if current in visited:\n                continue\n            visited.add(current)\n            \n            local_max_enjoyment = max(local_max_enjoyment, enjoyment_values[current])\n            \n            for neighbor, capacity, toll in graph[current]:\n                if neighbor not in visited and capacity >= v:\n                    queue.append((neighbor, max(current_max_toll, toll)))\n        \n        # Find the max toll for the shortest path to the city with max enjoyment\n        max_enjoyment = local_max_enjoyment\n        max_toll = 0\n        visited = set()\n        heap = [(0, start)]\n        \n        while heap:\n            current_max_toll, current = heapq.heappop(heap)\n            if current in visited:\n                continue\n            visited.add(current)\n            \n            if enjoyment_values[current] == max_enjoyment:\n                max_toll = current_max_toll\n                break\n            \n            for neighbor, capacity, toll in graph[current]:\n                if neighbor not in visited and capacity >= v:\n                    heap", "report": "The compilation output of the preceding code is: unexpected EOF while parsing (<string>, line 118)"}, "Round_1": {"code": "def main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    enjoyment_values = list(map(int, data[index:index + n]))\n    index += n\n    \n    graph = defaultdict(list)\n    \n    for _ in range(n - 1):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        c = int(data[index + 2])\n        t = int(data[index + 3])\n        index += 4\n        graph[a].append((b, c, t))\n        graph[b].append((a, c, t))\n    \n    queries = []\n    for _ in range(q):\n        v = int(data[index])\n        x = int(data[index + 1]) - 1\n        index += 2\n        queries.append((v, x))\n    \n    results = []\n    \n    for v, start in queries:\n        max_enjoyment = -1\n        max_toll = 0\n        \n        # BFS to find reachable cities and max enjoyment\n        queue = deque([(start, 0)])\n        visited = set()\n        local_max_enjoyment = enjoyment_values[start]\n        \n        while queue:\n            current, current_max_toll = queue.popleft()\n            if current in visited:\n                continue\n            visited.add(current)\n            \n            local_max_enjoyment = max(local_max_enjoyment, enjoyment_values[current])\n            \n            for neighbor, capacity, toll in graph[current]:\n                if neighbor not in visited and capacity >= v:\n                    queue.append((neighbor, max(current_max_toll, toll)))\n        \n        # Find the max toll for the shortest path to the city with max enjoyment\n        max_enjoyment = local_max_enjoyment\n        max_toll = 0\n        visited = set()\n        heap = [(0, start)]\n        \n        while heap:\n            current_max_toll, current = heapq.heappop(heap)\n            if current in visited:\n                continue\n            visited.add(current)\n            \n            if enjoyment_values[current] == max_enjoyment:\n                max_toll = current_max_toll\n                break\n            \n            for neighbor, capacity, toll in graph[current]:\n                if neighbor not in visited and capacity >= v:\n                    heap"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of cities, number of queries, enjoyment values, road connections, and tour group details.\",\n      \"output\": \"Structured data containing cities, roads, and queries.\"\n    },\n    {\n      \"description\": \"Construct a graph representation of the cities and roads using adjacency lists or another suitable data structure.\",\n      \"output\": \"Graph data structure representing the cities and roads.\"\n    },\n    {\n      \"description\": \"Implement a function to determine the maximum enjoyment value reachable from a given starting city with a given number of vehicles.\",\n      \"output\": \"Maximum enjoyment value for each query.\"\n    },\n    {\n      \"description\": \"Implement a function to calculate the maximum toll cost per vehicle for the shortest path from the starting city to the city with maximum enjoyment value.\",\n      \"output\": \"Maximum toll cost per vehicle for each query.\"\n    },\n    {\n      \"description\": \"Combine the results of the maximum enjoyment value and maximum toll cost calculations to produce the final output for each query.\",\n      \"output\": \"Final output for each query containing the maximum enjoyment value and the toll cost.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of cities, number of queries, enjoyment values, road connections, and tour group details.\",\n    \"Construct a graph representation of the cities and roads using an adjacency list or another suitable data structure.\",\n    \"For each query, perform the following steps:\",\n    \"  a. Use a graph traversal algorithm (e.g., BFS or DFS) to find all reachable cities from the starting city that can accommodate the number of vehicles.\",\n    \"  b. Determine the city with the maximum enjoyment value among the reachable cities.\",\n    \"  c. Calculate the maximum toll cost per vehicle for the shortest path from the starting city to the city with the maximum enjoyment value.\",\n    \"Output the maximum enjoyment value and the maximum toll cost per vehicle for each query.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    enjoyment_values = list(map(int, data[index:index + n]))\n    index += n\n    \n    graph = defaultdict(list)\n    \n    for _ in range(n - 1):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        c = int(data[index + 2])\n        t = int(data[index + 3])\n        index += 4\n        graph[a].append((b, c, t))\n        graph[b].append((a, c, t))\n    \n    queries = []\n    for _ in range(q):\n        v = int(data[index])\n        x = int(data[index + 1]) - 1\n        index += 2\n        queries.append((v, x))\n    \n    results = []\n    \n    for v, start in queries:\n        max_enjoyment = enjoyment_values[start]\n        max_toll = 0\n        \n        visited = [False] * n\n        queue = deque([(start, 0)])\n        visited[start] = True\n        \n        while queue:\n            current, current_max_toll = queue.popleft()\n            max_enjoyment = max(max_enjoyment, enjoyment_values[current])\n            max_toll = max(max_toll, current_max_toll)\n            \n            for neighbor, capacity, toll in graph[current]:\n                if not visited[neighbor] and capacity >= v:\n                    visited[neighbor] = True\n                    queue.append((neighbor, max(current_max_toll, toll)))\n        \n        results.append((max_enjoyment, max_toll))\n    \n    for enjoyment, toll in results:\n        print(enjoyment, toll)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 144)"}, "Round_1": {"code": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    enjoyment_values = list(map(int, data[index:index + n]))\n    index += n\n    \n    graph = defaultdict(list)\n    \n    for _ in range(n - 1):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        c = int(data[index + 2])\n        t = int(data[index + 3])\n        index += 4\n        graph[a].append((b, c, t))\n        graph[b].append((a, c, t))\n    \n    queries = []\n    for _ in range(q):\n        v = int(data[index])\n        x = int(data[index + 1]) - 1\n        index += 2\n        queries.append((v, x))\n    \n    results = []\n    \n    for v, start in queries:\n        max_enjoyment = enjoyment_values[start]\n        max_toll = 0\n        \n        visited = [False] * n\n        queue = deque([(start, 0)])\n        visited[start] = True\n        \n        while queue:\n            current, current_max_toll = queue.popleft()\n            max_enjoyment = max(max_enjoyment, enjoyment_values[current])\n            max_toll = max(max_toll, current_max_toll)\n            \n            for neighbor, capacity, toll in graph[current]:\n                if not visited[neighbor] and capacity >= v:\n                    visited[neighbor] = True\n                    queue.append((neighbor, max(current_max_toll, toll)))\n        \n        results.append((max_enjoyment, max_toll))\n    \n    for enjoyment, toll in results:\n        print(enjoyment, toll)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"name\": \"Parse Input\",\n      \"description\": \"Read and parse the input data to extract the number of cities, number of queries, enjoyment values, road connections, and tour group details.\"\n    },\n    {\n      \"name\": \"Build Graph\",\n      \"description\": \"Construct a graph representation of the cities and roads using adjacency lists, where each node represents a city and each edge represents a road with its capacity and toll.\"\n    },\n    {\n      \"name\": \"Filter Roads by Capacity\",\n      \"description\": \"For each query, filter the roads in the graph to only include those with a capacity greater than or equal to the number of vehicles in the tour group.\"\n    },\n    {\n      \"name\": \"Find Reachable Cities\",\n      \"description\": \"Using a graph traversal algorithm (e.g., BFS or DFS), find all cities that are reachable from the starting city for each query, considering only roads that meet the capacity requirement.\"\n    },\n    {\n      \"name\": \"Determine Maximum Enjoyment\",\n      \"description\": \"For each query, determine the maximum enjoyment value among the reachable cities.\"\n    },\n    {\n      \"name\": \"Calculate Maximum Toll\",\n      \"description\": \"For each query, calculate the maximum toll that would be incurred on the shortest path to any city with the maximum enjoyment value.\"\n    },\n    {\n      \"name\": \"Output Results\",\n      \"description\": \"For each query, output the maximum enjoyment value and the maximum toll per vehicle.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of cities, number of queries, enjoyment values, road connections, and tour group details.\",\n    \"Construct a graph using adjacency lists to represent the cities and roads.\",\n    \"For each query, filter the graph to only include roads with sufficient capacity for the tour group.\",\n    \"Perform a graph traversal from the starting city to find all reachable cities.\",\n    \"Identify the city with the maximum enjoyment value among the reachable cities.\",\n    \"Calculate the maximum toll incurred on the shortest path to any city with the maximum enjoyment value.\",\n    \"Output the maximum enjoyment value and the maximum toll per vehicle for each query.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    enjoyment_values = list(map(int, data[index:index + n]))\n    index += n\n    \n    graph = defaultdict(list)\n    \n    for _ in range(n - 1):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        c = int(data[index + 2])\n        t = int(data[index + 3])\n        index += 4\n        graph[a].append((b, c, t))\n        graph[b].append((a, c, t))\n    \n    queries = []\n    for _ in range(q):\n        v = int(data[index])\n        x = int(data[index + 1]) - 1\n        index += 2\n        queries.append((v, x))\n    \n    results = []\n    \n    for v, start in queries:\n        # BFS to find reachable cities and max toll\n        queue = deque([(start, 0)])\n        visited = set()\n        max_enjoyment = enjoyment_values[start]\n        max_toll = 0\n        \n        while queue:\n            current, current_max_toll = queue.popleft()\n            if current in visited:\n                continue\n            visited.add(current)\n            \n            max_enjoyment = max(max_enjoyment, enjoyment_values[current])\n            max_toll = max(max_toll, current_max_toll)\n            \n            for neighbor, capacity, toll in graph[current]:\n                if neighbor not in visited and capacity >= v:\n                    queue.append((neighbor, max(current_max_toll, toll)))\n        \n        results.append((max_enjoyment, max_toll))\n    \n    for enjoyment, toll in results:\n        print(enjoyment, toll)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOF while scanning triple-quoted string literal (<string>, line 142)"}, "Round_1": {"code": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    enjoyment_values = list(map(int, data[index:index + n]))\n    index += n\n    \n    graph = defaultdict(list)\n    \n    for _ in range(n - 1):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        c = int(data[index + 2])\n        t = int(data[index + 3])\n        index += 4\n        graph[a].append((b, c, t))\n        graph[b].append((a, c, t))\n    \n    queries = []\n    for _ in range(q):\n        v = int(data[index])\n        x = int(data[index + 1]) - 1\n        index += 2\n        queries.append((v, x))\n    \n    results = []\n    \n    for v, start in queries:\n        # BFS to find reachable cities and max toll\n        queue = deque([(start, 0)])\n        visited = set()\n        max_enjoyment = enjoyment_values[start]\n        max_toll = 0\n        \n        while queue:\n            current, current_max_toll = queue.popleft()\n            if current in visited:\n                continue\n            visited.add(current)\n            \n            max_enjoyment = max(max_enjoyment, enjoyment_values[current])\n            max_toll = max(max_toll, current_max_toll)\n            \n            for neighbor, capacity, toll in graph[current]:\n                if neighbor not in visited and capacity >= v:\n                    queue.append((neighbor, max(current_max_toll, toll)))\n        \n        results.append((max_enjoyment, max_toll))\n    \n    for enjoyment, toll in results:\n        print(enjoyment, toll)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of cities, number of queries, enjoyment values, road connections, and tour group details.\",\n      \"output\": \"Structured data for cities, roads, and queries.\"\n    },\n    {\n      \"description\": \"Construct a graph representation of the cities and roads using adjacency lists or another suitable data structure.\",\n      \"output\": \"Graph data structure representing cities and roads with capacities and tolls.\"\n    },\n    {\n      \"description\": \"Implement a function to find all reachable cities from a given starting city for a tour group, considering the road capacity constraints.\",\n      \"output\": \"List of reachable cities for each query.\"\n    },\n    {\n      \"description\": \"Determine the city with the maximum enjoyment value among the reachable cities for each query.\",\n      \"output\": \"Maximum enjoyment value for each query.\"\n    },\n    {\n      \"description\": \"Calculate the maximum toll that needs to be reimbursed for the journey to the city with the maximum enjoyment value.\",\n      \"output\": \"Maximum toll per vehicle for each query.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of cities, number of queries, enjoyment values, road connections, and tour group details.\",\n    \"Construct a graph representation of the cities and roads using adjacency lists or another suitable data structure.\",\n    \"For each query, perform a graph traversal (e.g., BFS or DFS) from the starting city to find all reachable cities, considering the road capacity constraints.\",\n    \"For each query, identify the city with the maximum enjoyment value among the reachable cities.\",\n    \"For each query, calculate the maximum toll that needs to be reimbursed for the journey to the city with the maximum enjoyment value.\",\n    \"Output the maximum enjoyment value and the maximum toll per vehicle for each query.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    enjoyment_values = list(map(int, data[index:index + n]))\n    index += n\n    \n    graph = defaultdict(list)\n    \n    for _ in range(n - 1):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        c = int(data[index + 2])\n        t = int(data[index + 3])\n        index += 4\n        graph[a].append((b, c, t))\n        graph[b].append((a, c, t))\n    \n    queries = []\n    for _ in range(q):\n        v = int(data[index])\n        x = int(data[index + 1]) - 1\n        index += 2\n        queries.append((v, x))\n    \n    results = []\n    \n    for v, start in queries:\n        max_enjoyment = enjoyment_values[start]\n        max_toll = 0\n        \n        visited = [False] * n\n        queue = deque([(start, 0)])\n        visited[start] = True\n        \n        while queue:\n            current_city, current_max_toll = queue.popleft()\n            \n            for neighbor, capacity, toll in graph[current_city]:\n                if not visited[neighbor] and capacity >= v:\n                    visited[neighbor] = True\n                    new_max_toll = max(current_max_toll, toll)\n                    queue.append((neighbor, new_max_toll))\n                    \n                    if enjoyment_values[neighbor] > max_enjoyment:\n                        max_enjoyment = enjoyment_values[neighbor]\n                        max_toll = new_max_toll\n                    elif enjoyment_values[neighbor] == max_enjoyment:\n                        max_toll = max(max_toll, new_max_toll)\n        \n        results.append((max_enjoyment, max_toll))\n    \n    for enjoyment, toll in results:\n        print(enjoyment, toll)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"name\": \"Parse Input\",\n      \"description\": \"Read and parse the input data to extract the number of cities, number of queries, enjoyment values, road connections, and tour group details.\"\n    },\n    {\n      \"name\": \"Build Graph\",\n      \"description\": \"Construct a graph representation of the cities and roads using adjacency lists, where each node represents a city and each edge represents a road with its capacity and toll.\"\n    },\n    {\n      \"name\": \"Filter Roads by Capacity\",\n      \"description\": \"For each query, filter the roads in the graph to only include those with a capacity greater than or equal to the number of vehicles in the tour group.\"\n    },\n    {\n      \"name\": \"Find Reachable Cities\",\n      \"description\": \"Using a graph traversal algorithm (e.g., BFS or DFS), find all cities that are reachable from the starting city of the tour group, considering only roads that meet the capacity requirement.\"\n    },\n    {\n      \"name\": \"Determine Maximum Enjoyment\",\n      \"description\": \"Among the reachable cities, determine the city with the maximum enjoyment value.\"\n    },\n    {\n      \"name\": \"Calculate Maximum Toll\",\n      \"description\": \"For the path to the city with the maximum enjoyment value, calculate the maximum toll that would be incurred by the tour group.\"\n    },\n    {\n      \"name\": \"Output Results\",\n      \"description\": \"For each query, output the maximum enjoyment value and the maximum toll per vehicle.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of cities, number of queries, enjoyment values, road connections, and tour group details.\",\n    \"Construct a graph using adjacency lists to represent the cities and roads.\",\n    \"For each query, filter the roads based on the capacity requirement of the tour group.\",\n    \"Perform a graph traversal from the starting city to find all reachable cities.\",\n    \"Identify the city with the maximum enjoyment value among the reachable cities.\",\n    \"Calculate the maximum toll for the path to the city with the maximum enjoyment value.\",\n    \"Output the results for each query, including the maximum enjoyment value and the maximum toll per vehicle.\"\n  ]\n}\n```", "Round_0": {"code": "def parse_input():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    enjoyment_values = list(map(int, data[index:index + n]))\n    index += n\n    \n    roads = []\n    for _ in range(n - 1):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        c = int(data[index + 2])\n        t = int(data[index + 3])\n        roads.append((a, b, c, t))\n        index += 4\n    \n    queries = []\n    for _ in range(q):\n        v = int(data[index])\n        x = int(data[index + 1]) - 1\n        queries.append((v, x))\n        index += 2\n    \n    return n, q, enjoyment_values, roads, queries\n\ndef build_graph(n, roads):\n    graph = defaultdict(list)\n    for a, b, c, t in roads:\n        graph[a].append((b, c, t))\n        graph[b].append((a, c, t))\n    return graph\n\ndef bfs_max_enjoyment_and_toll(graph, enjoyment_values, start, vehicle_count):\n    max_enjoyment = enjoyment_values[start]\n    max_toll = 0\n    visited = [False] * len(enjoyment_values)\n    queue = deque([(start, 0)])\n    visited[start] = True\n    \n    while queue:\n        current_city, current_toll = queue.popleft()\n        max_enjoyment = max(max_enjoyment, enjoyment_values[current_city])\n        max_toll = max(max_toll, current_toll)\n        \n        for neighbor, capacity, toll in graph[current_city]:\n            if not visited[neighbor] and capacity >= vehicle_count:\n                visited[neighbor] = True\n                queue.append((neighbor, max(current_toll, toll)))\n    \n    return max_enjoyment, max_toll\n\ndef main():\n    n, q, enjoyment_values, roads, queries = parse_input()\n    graph = build_graph(n, roads)\n    \n    results = []\n    for vehicle_count, start_city in queries:\n        max_enjoyment, max_toll = bfs_max_enjoyment_and_toll(graph, enjoyment_values, start_city, vehicle_count", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 64)"}, "Round_1": {"code": "def parse_input():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    enjoyment_values = list(map(int, data[index:index + n]))\n    index += n\n    \n    roads = []\n    for _ in range(n - 1):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        c = int(data[index + 2])\n        t = int(data[index + 3])\n        roads.append((a, b, c, t))\n        index += 4\n    \n    queries = []\n    for _ in range(q):\n        v = int(data[index])\n        x = int(data[index + 1]) - 1\n        queries.append((v, x))\n        index += 2\n    \n    return n, q, enjoyment_values, roads, queries\n\ndef build_graph(n, roads):\n    graph = defaultdict(list)\n    for a, b, c, t in roads:\n        graph[a].append((b, c, t))\n        graph[b].append((a, c, t))\n    return graph\n\ndef bfs_max_enjoyment_and_toll(graph, enjoyment_values, start, vehicle_count):\n    max_enjoyment = enjoyment_values[start]\n    max_toll = 0\n    visited = [False] * len(enjoyment_values)\n    queue = deque([(start, 0)])\n    visited[start] = True\n    \n    while queue:\n        current_city, current_toll = queue.popleft()\n        max_enjoyment = max(max_enjoyment, enjoyment_values[current_city])\n        max_toll = max(max_toll, current_toll)\n        \n        for neighbor, capacity, toll in graph[current_city]:\n            if not visited[neighbor] and capacity >= vehicle_count:\n                visited[neighbor] = True\n                queue.append((neighbor, max(current_toll, toll)))\n    \n    return max_enjoyment, max_toll\n\ndef main():\n    n, q, enjoyment_values, roads, queries = parse_input()\n    graph = build_graph(n, roads)\n    \n    results = []\n    for vehicle_count, start_city in queries:\n        max_enjoyment, max_toll = bfs_max_enjoyment_and_toll(graph, enjoyment_values, start_city, vehicle_count"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"name\": \"Parse Input\",\n      \"description\": \"Read and parse the input data to extract the number of cities, number of queries, enjoyment values, road connections, and tour group details.\"\n    },\n    {\n      \"name\": \"Build Graph\",\n      \"description\": \"Construct a graph representation of the cities and roads using adjacency lists, where each node represents a city and each edge represents a road with its capacity and toll.\"\n    },\n    {\n      \"name\": \"Filter Roads by Capacity\",\n      \"description\": \"For each query, filter the roads in the graph to only include those with a capacity greater than or equal to the number of vehicles in the tour group.\"\n    },\n    {\n      \"name\": \"Find Reachable Cities\",\n      \"description\": \"For each query, perform a graph traversal (e.g., BFS or DFS) from the starting city to find all reachable cities given the filtered roads.\"\n    },\n    {\n      \"name\": \"Determine Maximum Enjoyment\",\n      \"description\": \"For each query, among the reachable cities, determine the city with the maximum enjoyment value.\"\n    },\n    {\n      \"name\": \"Calculate Maximum Toll\",\n      \"description\": \"For each query, calculate the maximum toll that would be incurred on the shortest path to any city with the maximum enjoyment value.\"\n    },\n    {\n      \"name\": \"Output Results\",\n      \"description\": \"For each query, output the maximum enjoyment value and the maximum toll per vehicle.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of cities, queries, enjoyment values, roads, and tour groups.\",\n    \"Construct a graph using adjacency lists to represent the cities and roads.\",\n    \"For each query, filter the roads based on the capacity requirement of the tour group.\",\n    \"Perform a graph traversal from the starting city to find all reachable cities with the filtered roads.\",\n    \"Identify the city with the maximum enjoyment value among the reachable cities.\",\n    \"Calculate the maximum toll incurred on the shortest path to any city with the maximum enjoyment value.\",\n    \"Output the maximum enjoyment value and the maximum toll per vehicle for each query.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    enjoyment_values = list(map(int, data[index:index + n]))\n    index += n\n    \n    graph = defaultdict(list)\n    \n    for _ in range(n - 1):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        c = int(data[index + 2])\n        t = int(data[index + 3])\n        index += 4\n        graph[a].append((b, c, t))\n        graph[b].append((a, c, t))\n    \n    queries = []\n    for _ in range(q):\n        v = int(data[index])\n        x = int(data[index + 1]) - 1\n        index += 2\n        queries.append((v, x))\n    \n    results = []\n    \n    for v, start in queries:\n        # BFS to find reachable cities and max toll\n        queue = deque([(start, 0)])\n        visited = set([start])\n        max_enjoyment = enjoyment_values[start]\n        max_toll = 0\n        \n        while queue:\n            current, current_max_toll = queue.popleft()\n            \n            for neighbor, capacity, toll in graph[current]:\n                if neighbor not in visited and capacity >= v:\n                    visited.add(neighbor)\n                    new_max_toll = max(current_max_toll, toll)\n                    queue.append((neighbor, new_max_toll))\n                    max_enjoyment = max(max_enjoyment, enjoyment_values[neighbor])\n                    max_toll = max(max_toll, new_max_toll)\n        \n        results.append((max_enjoyment, max_toll))\n    \n    for enjoyment, toll in results:\n        print(enjoyment, toll)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of cities, number of groups, enjoyment values, road connections, and tour group details.\",\n      \"steps\": [\n        \"Read the first line to get n (number of cities) and q (number of groups).\",\n        \"Read the second line to get the enjoyment values for each city.\",\n        \"Read the next n-1 lines to get the road connections, capacities, and tolls.\",\n        \"Read the next q lines to get the number of vehicles and starting city for each tour group.\"\n      ]\n    },\n    {\n      \"description\": \"Model the cities and roads as a graph to facilitate traversal and pathfinding.\",\n      \"steps\": [\n        \"Represent cities as nodes and roads as edges in a graph.\",\n        \"Store road capacities and tolls as edge attributes.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the maximum enjoyment value reachable for each tour group.\",\n      \"steps\": [\n        \"For each tour group, perform a graph traversal starting from the given city.\",\n        \"Filter roads based on capacity to ensure the tour group can travel.\",\n        \"Track the maximum enjoyment value encountered during traversal.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the maximum toll for the shortest path to the city with maximum enjoyment value.\",\n      \"steps\": [\n        \"For each tour group, find the shortest path to each reachable city with maximum enjoyment value.\",\n        \"Determine the maximum toll encountered on the shortest path.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each tour group.\",\n      \"steps\": [\n        \"For each tour group, output the maximum enjoyment value and the maximum toll per vehicle.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input data to extract cities, roads, and tour group information.\",\n    \"Construct a graph representation of the cities and roads.\",\n    \"For each tour group, perform a graph traversal to find reachable cities with maximum enjoyment value.\",\n    \"Calculate the maximum toll for the shortest path to these cities.\",\n    \"Output the maximum enjoyment value and toll for each tour group.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nimport heapq\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    enjoyment_values = list(map(int, data[index:index + n]))\n    index += n\n    \n    graph = defaultdict(list)\n    \n    for _ in range(n - 1):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        c = int(data[index + 2])\n        t = int(data[index + 3])\n        index += 4\n        graph[a].append((b, c, t))\n        graph[b].append((a, c, t))\n    \n    queries = []\n    for _ in range(q):\n        v = int(data[index])\n        x = int(data[index + 1]) - 1\n        index += 2\n        queries.append((v, x))\n    \n    results = []\n    \n    for v, start in queries:\n        max_enjoyment = -1\n        max_toll = 0\n        \n        # BFS to find reachable cities with max enjoyment\n        queue = deque([(start, 0)])\n        visited = set()\n        local_max_enjoyment = enjoyment_values[start]\n        local_max_toll = 0\n        \n        while queue:\n            current, current_toll = queue.popleft()\n            if current in visited:\n                continue\n            visited.add(current)\n            \n            if enjoyment_values[current] > local_max_enjoyment:\n                local_max_enjoyment = enjoyment_values[current]\n                local_max_toll = current_toll\n            elif enjoyment_values[current] == local_max_enjoyment:\n                local_max_toll = max(local_max_toll, current_toll)\n            \n            for neighbor, capacity, toll in graph[current]:\n                if neighbor not in visited and capacity >= v:\n                    queue.append((neighbor, max(current_toll, toll)))\n        \n        results.append((local_max_enjoyment, local_max_toll))\n    \n    for enjoyment, toll in results:\n        print(enjoyment, toll)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [false, false, true, false, true, false, true, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 4, "round": 212, "prompt": "Omkar is hosting tours of his country, Omkarland! There are n cities in Omkarland. Rather curiously, there are exactly n-1 bidirectional roads connecting the cities to each other. It is guaranteed that you can reach any city from any other city through the road network.\n\nEvery city has an enjoyment value e. Each road has a capacity c, denoting the maximum number of vehicles that can be on it, and an associated toll t. However, the toll system in Omkarland has an interesting quirk: if a vehicle travels on multiple roads on a single journey, they pay only the highest toll of any single road on which they traveled. Put differently, they pay the maximum toll across all the roads they traversed. If a vehicle traverses no roads, they pay 0 toll.\n\nOmkar has decided to host q tour groups. Each tour group consists of v vehicles starting at city x. (Keep in mind that a tour group with v vehicles can travel only on roads with capacity \u2265 v.) Being the tour organizer, Omkar wants his groups to have as much fun as they possibly can, but also must reimburse his groups for the tolls that they have to pay. Thus, for each tour group, Omkar wants to know two things: first, what is the enjoyment value of the city y with maximum enjoyment value that the tour group can reach from their starting city, and second, how much per vehicle will Omkar have to pay to reimburse the entire group for their trip from x to y? (This trip from x to y will always be on the shortest path from x to y.)\n\nIn the case that there are multiple reachable cities with the maximum enjoyment value, Omkar will let his tour group choose which one they want to go to. Therefore, to prepare for all possible scenarios, he wants to know the amount of money per vehicle that he needs to guarantee. This ensures that he can reimburse the group regardless of which city they choose.\n\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 2 \u22c5 10^5, 1 \u2264 q \u2264 2 \u22c5 10^5), representing the number of cities and the number of groups, respectively.\n\nThe next line contains n integers e_1, e_2, \u2026, e_n (1 \u2264 e_i \u2264 10^9), where e_i represents the enjoyment value for city i.\n\nThe next n-1 lines each contain four integers a, b, c, and t (1 \u2264 a,b \u2264 n, 1 \u2264 c \u2264 10^9, 1 \u2264 t \u2264 10^9), representing an road between city a and city b with capacity c and toll t.\n\nThe next q lines each contain two integers v and x (1 \u2264 v \u2264 10^9, 1 \u2264 x \u2264 n), representing the number of vehicles in the tour group and the starting city, respectively.\n\nOutput\n\nOutput q lines. The i-th line should contain two integers: the highest possible enjoyment value of a city reachable by the i-th tour group, and the amount of money per vehicle Omkar needs to guarantee that he can reimburse the i-th tour group.\n\nExamples\n\nInput\n\n\n5 3\n2 2 3 3 3\n1 2 4 7\n1 3 2 8\n2 4 8 2\n2 5 1 1\n1 3\n9 5\n6 2\n\n\nOutput\n\n\n3 8\n3 0\n3 2\n\n\nInput\n\n\n5 5\n1 2 3 4 5\n1 2 4 1\n1 3 3 1\n1 4 2 1\n2 5 1 1\n5 1\n4 1\n3 1\n2 1\n1 1\n\n\nOutput\n\n\n1 0\n2 1\n3 1\n4 1\n5 1\n\n\nInput\n\n\n5 5\n1 2 2 2 2\n1 2 5 8\n1 3 6 3\n1 4 4 5\n1 5 7 1\n4 1\n5 1\n6 1\n7 1\n8 1\n\n\nOutput\n\n\n2 8\n2 8\n2 3\n2 1\n1 0\n\nNote\n\nA map of the first sample is shown below. For the nodes, unbolded numbers represent indices and bolded numbers represent enjoyment values. For the edges, unbolded numbers represent capacities and bolded numbers represent tolls.\n\n<image>\n\nFor the first query, a tour group of size 1 starting at city 3 can reach cities 1, 2, 3, 4, and 5. Thus, the largest enjoyment value that they can reach is 3. If the tour group chooses to go to city 4, Omkar will have to pay 8 per vehicle, which is the maximum.\n\nFor the second query, a tour group of size 9 starting at city 5 can reach only city 5. Thus, the largest reachable enjoyment value is still 3, and Omkar will pay 0 per vehicle.\n\nFor the third query, a tour group of size 6 starting at city 2 can reach cities 2 and 4. The largest reachable enjoyment value is again 3. If the tour group chooses to go to city 4, Omkar will have to pay 2 per vehicle, which is the maximum.\n\nA map of the second sample is shown below:\n\n<image>\n\nFor the first query, a tour group of size 5 starting at city 1 can only reach city 1. Thus, their maximum enjoyment value is 1 and the cost Omkar will have to pay is 0 per vehicle.\n\nFor the second query, a tour group of size 4 starting at city 1 can reach cities 1 and 2. Thus, their maximum enjoyment value is 2 and Omkar will pay 1 per vehicle.\n\nFor the third query, a tour group of size 3 starting at city 1 can reach cities 1, 2, and 3. Thus, their maximum enjoyment value is 3 and Omkar will pay 1 per vehicle.\n\nFor the fourth query, a tour group of size 2 starting at city 1 can reach cities 1, 2, 3 and 4. Thus, their maximum enjoyment value is 4 and Omkar will pay 1 per vehicle.\n\nFor the fifth query, a tour group of size 1 starting at city 1 can reach cities 1, 2, 3, 4, and 5. Thus, their maximum enjoyment value is 5 and Omkar will pay 1 per vehicle.", "examples": "\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 2 \u22c5 10^5, 1 \u2264 q \u2264 2 \u22c5 10^5), representing the number of cities and the number of groups, respectively.\n\nThe next line contains n integers e_1, e_2, \u2026, e_n (1 \u2264 e_i \u2264 10^9), where e_i represents the enjoyment value for city i.\n\nThe next n-1 lines each contain four integers a, b, c, and t (1 \u2264 a,b \u2264 n, 1 \u2264 c \u2264 10^9, 1 \u2264 t \u2264 10^9), representing an road between city a and city b with capacity c and toll t.\n\nThe next q lines each contain two integers v and x (1 \u2264 v \u2264 10^9, 1 \u2264 x \u2264 n), representing the number of vehicles in the tour group and the starting city, respectively.\n\nOutput\n\nOutput q lines. The i-th line should contain two integers: the highest possible enjoyment value of a city reachable by the i-th tour group, and the amount of money per vehicle Omkar needs to guarantee that he can reimburse the i-th tour group.\n\nExamples\n\nInput\n\n\n5 3\n2 2 3 3 3\n1 2 4 7\n1 3 2 8\n2 4 8 2\n2 5 1 1\n1 3\n9 5\n6 2\n\n\nOutput\n\n\n3 8\n3 0\n3 2\n\n\nInput\n\n\n5 5\n1 2 3 4 5\n1 2 4 1\n1 3 3 1\n1 4 2 1\n2 5 1 1\n5 1\n4 1\n3 1\n2 1\n1 1\n\n\nOutput\n\n\n1 0\n2 1\n3 1\n4 1\n5 1\n\n\nInput\n\n\n5 5\n1 2 2 2 2\n1 2 5 8\n1 3 6 3\n1 4 4 5\n1 5 7 1\n4 1\n5 1\n6 1\n7 1\n8 1\n\n\nOutput\n\n\n2 8\n2 8\n2 3\n2 1\n1 0\n\nNote\n\nA map of the first sample is shown below. For the nodes, unbolded numbers represent indices and bolded numbers represent enjoyment values. For the edges, unbolded numbers represent capacities and bolded numbers represent tolls.\n\n<image>\n\nFor the first query, a tour group of size 1 starting at city 3 can reach cities 1, 2, 3, 4, and 5. Thus, the largest enjoyment value that they can reach is 3. If the tour group chooses to go to city 4, Omkar will have to pay 8 per vehicle, which is the maximum.\n\nFor the second query, a tour group of size 9 starting at city 5 can reach only city 5. Thus, the largest reachable enjoyment value is still 3, and Omkar will pay 0 per vehicle.\n\nFor the third query, a tour group of size 6 starting at city 2 can reach cities 2 and 4. The largest reachable enjoyment value is again 3. If the tour group chooses to go to city 4, Omkar will have to pay 2 per vehicle, which is the maximum.\n\nA map of the second sample is shown below:\n\n<image>\n\nFor the first query, a tour group of size 5 starting at city 1 can only reach city 1. Thus, their maximum enjoyment value is 1 and the cost Omkar will have to pay is 0 per vehicle.\n\nFor the second query, a tour group of size 4 starting at city 1 can reach cities 1 and 2. Thus, their maximum enjoyment value is 2 and Omkar will pay 1 per vehicle.\n\nFor the third query, a tour group of size 3 starting at city 1 can reach cities 1, 2, and 3. Thus, their maximum enjoyment value is 3 and Omkar will pay 1 per vehicle.\n\nFor the fourth query, a tour group of size 2 starting at city 1 can reach cities 1, 2, 3 and 4. Thus, their maximum enjoyment value is 4 and Omkar will pay 1 per vehicle.\n\nFor the fifth query, a tour group of size 1 starting at city 1 can reach cities 1, 2, 3, 4, and 5. Thus, their maximum enjoyment value is 5 and Omkar will pay 1 per vehicle.", "mutate_method": "expand_one2two", "save_node": false, "parent_index": 168}
