{"name": "1619_A. Square String?", "description": "A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES", "tags": ["implementation", "strings"], "difficulty": 7, "id": 1619, "sample_io": [{"input": "10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n", "output": ["NO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES\n"]}], "test_list": [{"input": "1\nacascnakcn\n", "output": ["NO\n"]}, {"input": "1\nababab\n", "output": ["NO\n"]}, {"input": "1\nzz\n", "output": ["YES\n"]}, {"input": "1\nacascnajcn\n", "output": ["NO\n"]}, {"input": "10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nyxxy\nxyyx\nxyxy\n", "output": ["NO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "1\n{{\n", "output": ["YES\n"]}, {"input": "10\nb\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nyxxy\nxyxx\nxyxz\n", "output": ["NO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "10\nb\naa\naaa\nabaa\nabab\nabcabc\nabacaba\nyxxy\nxyxx\nxyxz\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "10\nb\naa\naaa\nabaa\nabab\nabc`bc\nabacaba\nyxxy\nxyxx\nxyxz\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "10\nb\naa\naaa\nab`a\nabab\ncb`caa\nabacbaa\nxyxy\nxyxw\nzxyx\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "10\na\nba\naaa\nab`a\nabab\ncb`caa\nabacbaa\nyxyx\nxyxw\nzxyx\n", "output": ["NO\nNO\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "10\na\nba\naaa\nab`a\nbaab\ncb`caa\nabbcbba\nyxyx\nwyxw\nzxyx\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "10\nb\nb`\na``\n_aba\nabbb\ncca`ba\nabacbca\nxyxx\nxwyv\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "10\nd\n`c\nbab\ncaa_\nbaba\nccabc`\n_baceac\nwxxy\nwuwy\nw|wz\n", "output": ["NO\nNO\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "1\n`babab\n", "output": ["NO\n"]}, {"input": "1\nz{\n", "output": ["NO\n"]}, {"input": "1\nacascankcn\n", "output": ["NO\n"]}, {"input": "1\n`babbb\n", "output": ["NO\n"]}, {"input": "10\nb\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nyxxy\nxyyx\nxyxy\n", "output": ["NO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "1\nacbscankcn\n", "output": ["NO\n"]}, {"input": "1\n_babbb\n", "output": ["NO\n"]}, {"input": "1\n{|\n", "output": ["NO\n"]}, {"input": "10\nb\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nyxxy\nxxyx\nxyxy\n", "output": ["NO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "1\nacbscakncn\n", "output": ["NO\n"]}, {"input": "1\n_baabb\n", "output": ["NO\n"]}, {"input": "1\n|{\n", "output": ["NO\n"]}, {"input": "10\nb\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nyxxy\nxyxx\nxyxy\n", "output": ["NO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "1\nabbscakncn\n", "output": ["NO\n"]}, {"input": "1\n^baabb\n", "output": ["NO\n"]}, {"input": "1\n||\n", "output": ["YES\n"]}, {"input": "1\nabbscakmcn\n", "output": ["NO\n"]}, {"input": "1\n^baacb\n", "output": ["NO\n"]}, {"input": "1\nz|\n", "output": ["NO\n"]}, {"input": "1\nncmkacsbba\n", "output": ["NO\n"]}, {"input": "1\n^b`acb\n", "output": ["NO\n"]}, {"input": "1\n|z\n", "output": ["NO\n"]}, {"input": "1\nncmkacsbca\n", "output": ["NO\n"]}, {"input": "1\nbca`b^\n", "output": ["NO\n"]}, {"input": "1\nz}\n", "output": ["NO\n"]}, {"input": "10\nc\naa\naaa\nabaa\nabab\nabc`bc\nabacaba\nyxxy\nxyxx\nxyxz\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "1\nncmlacsbca\n", "output": ["NO\n"]}, {"input": "1\nbca`b_\n", "output": ["NO\n"]}, {"input": "1\n}z\n", "output": ["NO\n"]}, {"input": "10\nc\naa\naaa\nabaa\nabab\nabc`bc\nabacaba\nyxxy\nxyxw\nxyxz\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "1\nccmlansbca\n", "output": ["NO\n"]}, {"input": "1\n`cabb_\n", "output": ["NO\n"]}, {"input": "1\n{}\n", "output": ["NO\n"]}, {"input": "10\nc\naa\naaa\nabaa\nabab\nabc`bc\nabacaaa\nyxxy\nxyxw\nxyxz\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "1\nccmlamsbca\n", "output": ["NO\n"]}, {"input": "1\n_bbac`\n", "output": ["NO\n"]}, {"input": "1\n{z\n", "output": ["NO\n"]}, {"input": "10\nc\naa\naaa\nabaa\nabab\nabc`bc\nabacbaa\nyxxy\nxyxw\nxyxz\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "1\nbcmlamsbca\n", "output": ["NO\n"]}, {"input": "1\n`bbac`\n", "output": ["NO\n"]}, {"input": "1\nyz\n", "output": ["NO\n"]}, {"input": "10\nc\naa\naaa\nabaa\nabab\naac`bc\nabacbaa\nyxxy\nxyxw\nxyxz\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "1\nbcmlamsbda\n", "output": ["NO\n"]}, {"input": "1\n`cabb`\n", "output": ["NO\n"]}, {"input": "1\nzy\n", "output": ["NO\n"]}, {"input": "10\nc\naa\naaa\nabaa\nabab\naac`bc\nabacbaa\nyxxy\nxyxw\nzxyx\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "1\nbcmlaasbdm\n", "output": ["NO\n"]}, {"input": "1\n`cabc`\n", "output": ["NO\n"]}, {"input": "1\nzx\n", "output": ["NO\n"]}, {"input": "10\nc\naa\naaa\nab`a\nabab\naac`bc\nabacbaa\nyxxy\nxyxw\nzxyx\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "1\nmdbsaalmcb\n", "output": ["NO\n"]}, {"input": "1\n_cabc`\n", "output": ["NO\n"]}, {"input": "1\nxz\n", "output": ["NO\n"]}, {"input": "10\nb\naa\naaa\nab`a\nabab\naac`bc\nabacbaa\nyxxy\nxyxw\nzxyx\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "1\nmdbsaakmcb\n", "output": ["NO\n"]}, {"input": "1\n_cbbc`\n", "output": ["NO\n"]}, {"input": "1\nyy\n", "output": ["YES\n"]}, {"input": "10\nb\naa\naaa\nab`a\nabab\ncb`caa\nabacbaa\nyxxy\nxyxw\nzxyx\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "1\nmdbsaajmcb\n", "output": ["NO\n"]}, {"input": "1\n_cbbd`\n", "output": ["NO\n"]}, {"input": "1\ny{\n", "output": ["NO\n"]}, {"input": "1\nbcmjaasbdm\n", "output": ["NO\n"]}, {"input": "1\n`dbbc_\n", "output": ["NO\n"]}, {"input": "1\ny|\n", "output": ["NO\n"]}, {"input": "10\nb\naa\naaa\nab`a\nabab\ncb`caa\nabacbaa\nyxyx\nxyxw\nzxyx\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nbbmjaasbdm\n", "output": ["NO\n"]}, {"input": "1\n`dbbb_\n", "output": ["NO\n"]}, {"input": "1\nx|\n", "output": ["NO\n"]}, {"input": "10\na\naa\naaa\nab`a\nabab\ncb`caa\nabacbaa\nyxyx\nxyxw\nzxyx\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nbdmjaasbbm\n", "output": ["NO\n"]}, {"input": "1\nadbbb_\n", "output": ["NO\n"]}, {"input": "1\nx}\n", "output": ["NO\n"]}, {"input": "1\nbdmj`asbbm\n", "output": ["NO\n"]}, {"input": "1\na_bbbd\n", "output": ["NO\n"]}, {"input": "1\nw}\n", "output": ["NO\n"]}, {"input": "10\na\nba\naaa\nab`a\nabab\ncb`caa\nabbcbaa\nyxyx\nxyxw\nzxyx\n", "output": ["NO\nNO\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nbdmj`ascbm\n", "output": ["NO\n"]}, {"input": "1\na_cbbd\n", "output": ["NO\n"]}, {"input": "1\n}w\n", "output": ["NO\n"]}, {"input": "10\na\nba\naaa\nab`a\nabab\ncb`cab\nabbcbaa\nyxyx\nxyxw\nzxyx\n", "output": ["NO\nNO\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nbdma`jscbm\n", "output": ["NO\n"]}, {"input": "1\na_cbcd\n", "output": ["NO\n"]}, {"input": "1\n}x\n", "output": ["NO\n"]}, {"input": "10\na\nba\naaa\nab`a\nabab\ncb`cab\nabbcbaa\nyxyx\nwyxw\nzxyx\n", "output": ["NO\nNO\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nbdm`ajscbm\n", "output": ["NO\n"]}, {"input": "1\na_cbcc\n", "output": ["NO\n"]}, {"input": "1\ny}\n", "output": ["NO\n"]}, {"input": "10\na\nba\naaa\nab`a\nabab\ncb`caa\nabbcbaa\nyxyx\nwyxw\nzxyx\n", "output": ["NO\nNO\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nbdm`ajscbl\n", "output": ["NO\n"]}, {"input": "1\na_cbbc\n", "output": ["NO\n"]}, {"input": "1\n}y\n", "output": ["NO\n"]}, {"input": "10\na\nba\naaa\nab`a\nabab\ncb`caa\nabbcbba\nyxyx\nwyxw\nzxyx\n", "output": ["NO\nNO\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nbdl`ajscbl\n", "output": ["NO\n"]}, {"input": "1\na_cabc\n", "output": ["NO\n"]}, {"input": "1\n~y\n", "output": ["NO\n"]}, {"input": "1\nbbl`ajscdl\n", "output": ["NO\n"]}, {"input": "1\na`cabc\n", "output": ["NO\n"]}, {"input": "1\ny~\n", "output": ["NO\n"]}, {"input": "10\na\nba\naaa\nab`a\nbaab\ncb`caa\nabbcbba\nyxyx\nwyxw\nzyxx\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nldcsja`lbb\n", "output": ["NO\n"]}, {"input": "1\na`cbbc\n", "output": ["NO\n"]}, {"input": "1\ny\u007f\n", "output": ["NO\n"]}, {"input": "10\na\nba\naaa\na`ba\nbaab\ncb`caa\nabbcbba\nyxyx\nwyxw\nzyxx\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nldcrja`lbb\n", "output": ["NO\n"]}, {"input": "1\naacbbc\n", "output": ["NO\n"]}, {"input": "1\n\u007fy\n", "output": ["NO\n"]}, {"input": "10\na\nba\naaa\na`ba\nbaab\ncb`caa\nabbcbba\nyxyx\nwyxw\nzyxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nldcrja`lab\n", "output": ["NO\n"]}, {"input": "1\naacbbb\n", "output": ["NO\n"]}, {"input": "1\nx\u007f\n", "output": ["NO\n"]}, {"input": "10\na\nb`\naaa\na`ba\nbaab\ncb`caa\nabbcbba\nyxyx\nwyxw\nzyxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nlddrja`lab\n", "output": ["NO\n"]}, {"input": "1\naadbbb\n", "output": ["NO\n"]}, {"input": "1\nx~\n", "output": ["NO\n"]}, {"input": "10\na\nb`\naa`\na`ba\nbaab\ncb`caa\nabbcbba\nyxyx\nwyxw\nzyxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nbal`ajrddl\n", "output": ["NO\n"]}, {"input": "1\naaebbb\n", "output": ["NO\n"]}, {"input": "1\nz~\n", "output": ["NO\n"]}, {"input": "10\na\nb`\naa`\na`ba\nbaab\ncb`caa\nabbcbba\nyxyx\nwyxw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\ncal`ajrddl\n", "output": ["NO\n"]}, {"input": "1\naaebab\n", "output": ["NO\n"]}, {"input": "1\n~z\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\naa`\na`ba\nbaab\ncb`caa\nabbcbba\nyxyx\nwyxw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nlddrja`lac\n", "output": ["NO\n"]}, {"input": "1\nbabeaa\n", "output": ["NO\n"]}, {"input": "1\nz\u007f\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\na``\na`ba\nbaab\ncb`caa\nabbcbba\nyxyx\nwyxw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nmddrja`lac\n", "output": ["NO\n"]}, {"input": "1\naabeaa\n", "output": ["NO\n"]}, {"input": "1\n\u007fz\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\na``\na`ba\nbaab\ncb`caa\nabbcbba\nyxyx\nwyyw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\ncal`ajrddm\n", "output": ["NO\n"]}, {"input": "1\naaebaa\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\na``\na`ba\nbaab\nab`cac\nabbcbba\nyxyx\nwyyw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\ncal`ajqddm\n", "output": ["NO\n"]}, {"input": "1\nbaebaa\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\na``\na`ba\nbaab\ncac`ba\nabbcbba\nyxyx\nwyyw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\ncal`aiqddm\n", "output": ["NO\n"]}, {"input": "1\naabeab\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\na``\na_ba\nbaab\ncac`ba\nabbcbba\nyxyx\nwyyw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nmddqia`lac\n", "output": ["NO\n"]}, {"input": "1\nbaebab\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\na``\na_ba\nbaab\nab`cac\nabbcbba\nyxyx\nwyyw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nmcdqia`lad\n", "output": ["NO\n"]}, {"input": "1\nbafbab\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\na``\na_ba\nbaab\nab`cac\nabbcbba\nxyxy\nwyyw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nmcdqia`mad\n", "output": ["NO\n"]}, {"input": "1\nbagbab\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\na``\na_ba\nbaab\nab`cac\nabbcbba\nxyxy\nwyxw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\ndam`aiqdcm\n", "output": ["NO\n"]}, {"input": "1\nbagbaa\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\na``\na_ba\nbaab\ncac`ba\nabbcbba\nxyxy\nwyxw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nd`m`aiqdcm\n", "output": ["NO\n"]}, {"input": "1\naagbba\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\na``\na_ba\nbaab\ncca`ba\nabbcbba\nxyxy\nwyxw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nd`c`aiqdmm\n", "output": ["NO\n"]}, {"input": "1\na`gbba\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\na``\na_ba\nbaab\ncca`ba\nabbcbba\nxyxy\nwxyw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nd`b`aiqdmm\n", "output": ["NO\n"]}, {"input": "1\na`gbb`\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\na``\na_ba\nabab\ncca`ba\nabbcbba\nxyxy\nwxyw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nm`b`aiqddm\n", "output": ["NO\n"]}, {"input": "1\na`gb`b\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\na``\na_ba\nabab\ncca`ba\nabbcbba\nxyxy\nwyxw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nm`c`aiqddm\n", "output": ["NO\n"]}, {"input": "1\na`hb`b\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\na``\na_ba\nabab\ncca`ba\nabacbba\nxyxy\nwyxw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nmac`aiqddm\n", "output": ["NO\n"]}, {"input": "1\nb`hb`b\n", "output": ["NO\n"]}, {"input": "10\nb\n`b\na``\na_ba\nabab\ncca`ba\nabacbba\nxyxy\nwyxw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nnac`aiqddm\n", "output": ["NO\n"]}, {"input": "1\na`hbab\n", "output": ["NO\n"]}, {"input": "10\nb\n`b\na``\na_ba\nabab\ncca`ba\nabacbca\nxyxy\nwyxw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nmddqia`can\n", "output": ["NO\n"]}, {"input": "1\na_hbab\n", "output": ["NO\n"]}, {"input": "10\nb\n`b\na``\na_ba\nabab\ncca`ba\nabacbca\nxyxy\nwxyw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\naddqia`cmn\n", "output": ["NO\n"]}, {"input": "1\nbabh_a\n", "output": ["NO\n"]}, {"input": "10\nb\n`b\na``\na_ba\nabbb\ncca`ba\nabacbca\nxyxy\nwxyw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\naddqia`cnn\n", "output": ["NO\n"]}, {"input": "1\nbabh^a\n", "output": ["NO\n"]}, {"input": "10\nb\n`b\na``\na_ba\nabbb\ncca`ba\nabacbca\nxyxy\nwxyv\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nnnc`aiqdda\n", "output": ["NO\n"]}, {"input": "1\nbbbh^a\n", "output": ["NO\n"]}, {"input": "10\nb\n`b\na``\na_ba\nabbb\ncca`ba\nabacbca\nxyxy\nxwyv\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nnnc`ajqdda\n", "output": ["NO\n"]}, {"input": "1\nabbh^b\n", "output": ["NO\n"]}, {"input": "10\nb\n`b\na``\n_aba\nabbb\ncca`ba\nabacbca\nxyxy\nxwyv\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\naddqja`cnn\n", "output": ["NO\n"]}], "task_id": "codecontest/139", "repair_prompt": ["A string is considered square if it is a substring repeated consecutively two times. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def is_square(s):\n    n = len(s)\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            if s[:i] * (n // i) == s:\n                return \"YES\"\n    return \"NO\"\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        s = input().strip()\n        print(is_square(s))\n\nmain()", "completions": ["def is_square(s):\n    n = len(s)\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            if s[:i] * (n//i) == s:\n                return \"YES\"\n    return \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    s = input().strip()\n    print(is_square(s))\n\nmain()", "def is_square(s):\n    n = len(s)\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            if s[:i] * (n // i) == s:\n                return \"YES\"\n    return \"NO\"\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        s = input().strip()\n        print(is_square(s))\n\nmain()", "def is_square(s):\n    n = len(s)\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            if s[:i] * (n // i) == s:\n                return \"YES\"\n    return \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    s = input().strip()\n    print(is_square(s))\n\nmain()", "def is_square(s):\n    n = len(s)\n    for i in range(1, n // 2 + 1):\n        if n % i == 0 and s[:i] * (n // i) == s:\n            return \"YES\"\n    return \"NO\"\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        s = input().strip()\n        print(is_square(s))\n\nmain()", "def is_square(s):\n    n = len(s)\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            if s[:i] * (n//i) == s:\n                return \"YES\"\n    return \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    s = input().strip()\n    print(is_square(s))\n\nmain()", "def is_square(s):\n    n = len(s)\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            if s[:i] * (n // i) == s:\n                return \"YES\"\n    return \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    s = input().strip()\n    print(is_square(s))\n\nmain()", "def is_square(s):\n    n = len(s)\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            if s[:i] * (n // i) == s:\n                return \"YES\"\n    return \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    s = input().strip()\n    print(is_square(s))\n\nmain()", "def is_square(s):\n    n = len(s)\n    for i in range(1, n // 2 + 1):\n        if n % i == 0 and s[:i] * (n // i) == s:\n            return \"YES\"\n    return \"NO\"\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        s = input().strip()\n        print(is_square(s))\n\nmain()", "def is_square(s):\n    n = len(s)\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            if s[:i] * (n // i) == s:\n                return \"YES\"\n    return \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    s = input().strip()\n    print(is_square(s))\n\nmain()", "def is_square(s):\n    n = len(s)\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            if s[:i] * (n // i) == s:\n                return \"YES\"\n    return \"NO\"\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        s = input().strip()\n        print(is_square(s))\n\nmain()"], "session_history": {"plan": "{\n  \"subproblems\": [\n    \"Check if the given string is repeated consecutively two times\",\n    \"Handle multiple test cases\",\n    \"Output YES or NO based on the result\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the input string\",\n    \"Step 3\": \"Check if the string is square by checking if it is repeated consecutively two times\",\n    \"Step 4\": \"Output YES if the string is square, otherwise output NO\"\n  }\n}", "Round_0": {"code": "def is_square(s):\n    n = len(s)\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            if s[:i] * (n // i) == s:\n                return \"YES\"\n    return \"NO\"\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        s = input().strip()\n        print(is_square(s))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 20)"}, "Round_1": {"code": "def is_square(s):\n    n = len(s)\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            if s[:i] * (n // i) == s:\n                return \"YES\"\n    return \"NO\"\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        s = input().strip()\n        print(is_square(s))\n"}}, "session_historys": [{"plan": "{\n  \"subproblems\": [\n    \"Check if the given string is repeated consecutively two times\",\n    \"Determine if the string is square based on the above condition\"\n  ],\n  \"high-level plan\": {\n    \"Step 1\": \"Read the number of test cases (t)\",\n    \"Step 2\": \"For each test case, read the string input\",\n    \"Step 3\": \"Check if the string is repeated consecutively two times\",\n    \"Step 4\": \"Output YES if the string is square, NO otherwise\"\n  }\n}", "Round_0": {"code": "def is_square(s):\n    n = len(s)\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            if s[:i] * (n//i) == s:\n                return \"YES\"\n    return \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    s = input().strip()\n    print(is_square(s))\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def is_square(s):\n    n = len(s)\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            if s[:i] * (n//i) == s:\n                return \"YES\"\n    return \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    s = input().strip()\n    print(is_square(s))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Check if the given string is repeated consecutively two times\",\n    \"Handle multiple test cases\",\n    \"Output YES or NO based on the result\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the input string\",\n    \"Step 3\": \"Check if the string is square by checking if it is repeated consecutively two times\",\n    \"Step 4\": \"Output YES if the string is square, otherwise output NO\"\n  }\n}", "Round_0": {"code": "def is_square(s):\n    n = len(s)\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            if s[:i] * (n // i) == s:\n                return \"YES\"\n    return \"NO\"\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        s = input().strip()\n        print(is_square(s))\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"subproblems\": [\n    \"Check if the given string is repeated consecutively two times\",\n    \"Handle multiple test cases\",\n    \"Output YES or NO based on the result\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the string\",\n    \"Step 3\": \"Check if the string is square by checking if it is repeated consecutively two times\",\n    \"Step 4\": \"Output YES if the string is square, otherwise output NO\"\n  }\n}", "Round_0": {"code": "def is_square(s):\n    n = len(s)\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            if s[:i] * (n // i) == s:\n                return \"YES\"\n    return \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    s = input().strip()\n    print(is_square(s))\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def is_square(s):\n    n = len(s)\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            if s[:i] * (n // i) == s:\n                return \"YES\"\n    return \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    s = input().strip()\n    print(is_square(s))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Check if the given string is repeated consecutively two times\",\n    \"Handle multiple test cases\",\n    \"Output YES or NO based on the result\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the input string\",\n    \"Step 3\": \"Check if the string is square by checking if it is repeated consecutively two times\",\n    \"Step 4\": \"Output YES if the string is square, otherwise output NO\"\n  }\n}", "Round_0": {"code": "def is_square(s):\n    n = len(s)\n    for i in range(1, n // 2 + 1):\n        if n % i == 0 and s[:i] * (n // i) == s:\n            return \"YES\"\n    return \"NO\"\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        s = input().strip()\n        print(is_square(s))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 19)"}, "Round_1": {"code": "def is_square(s):\n    n = len(s)\n    for i in range(1, n // 2 + 1):\n        if n % i == 0 and s[:i] * (n // i) == s:\n            return \"YES\"\n    return \"NO\"\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        s = input().strip()\n        print(is_square(s))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Check if the given string is repeated consecutively two times\",\n    \"Handle multiple test cases\",\n    \"Output YES or NO based on the result\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the string\",\n    \"Step 3\": \"Check if the string is square by checking if it is repeated consecutively two times\",\n    \"Step 4\": \"Output YES if the string is square, NO otherwise\"\n  }\n}", "Round_0": {"code": "def is_square(s):\n    n = len(s)\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            if s[:i] * (n//i) == s:\n                return \"YES\"\n    return \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    s = input().strip()\n    print(is_square(s))\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def is_square(s):\n    n = len(s)\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            if s[:i] * (n//i) == s:\n                return \"YES\"\n    return \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    s = input().strip()\n    print(is_square(s))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Check if the given string is repeated consecutively two times\",\n    \"Determine if the string is square based on the above condition\"\n  ],\n  \"high-level plan\": {\n    \"Step 1\": \"Read the number of test cases (t)\",\n    \"Step 2\": \"For each test case, read the string input\",\n    \"Step 3\": \"Check if the string is repeated consecutively two times\",\n    \"Step 4\": \"Output YES if the string is square, NO otherwise\"\n  }\n}", "Round_0": {"code": "def is_square(s):\n    n = len(s)\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            if s[:i] * (n // i) == s:\n                return \"YES\"\n    return \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    s = input().strip()\n    print(is_square(s))\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def is_square(s):\n    n = len(s)\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            if s[:i] * (n // i) == s:\n                return \"YES\"\n    return \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    s = input().strip()\n    print(is_square(s))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Check if the given string is repeated consecutively two times\",\n    \"Determine if the string is square based on the above condition\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases (t)\",\n    \"Step 2\": \"For each test case, read the string input\",\n    \"Step 3\": \"Check if the string is repeated consecutively two times\",\n    \"Step 4\": \"Output YES if the string is square, NO otherwise\"\n  }\n}", "Round_0": {"code": "def is_square(s):\n    n = len(s)\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            if s[:i] * (n // i) == s:\n                return \"YES\"\n    return \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    s = input().strip()\n    print(is_square(s))\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def is_square(s):\n    n = len(s)\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            if s[:i] * (n // i) == s:\n                return \"YES\"\n    return \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    s = input().strip()\n    print(is_square(s))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Check if the given string is repeated consecutively two times\",\n    \"Handle multiple test cases\",\n    \"Output YES or NO based on the result\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the string\",\n    \"Step 3\": \"Check if the string is square by checking if it is repeated consecutively two times\",\n    \"Step 4\": \"Output YES if the string is square, otherwise output NO\"\n  }\n}", "Round_0": {"code": "def is_square(s):\n    n = len(s)\n    for i in range(1, n // 2 + 1):\n        if n % i == 0 and s[:i] * (n // i) == s:\n            return \"YES\"\n    return \"NO\"\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        s = input().strip()\n        print(is_square(s))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 19)"}, "Round_1": {"code": "def is_square(s):\n    n = len(s)\n    for i in range(1, n // 2 + 1):\n        if n % i == 0 and s[:i] * (n // i) == s:\n            return \"YES\"\n    return \"NO\"\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        s = input().strip()\n        print(is_square(s))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Check if the given string is repeated consecutively two times\",\n    \"Determine if the string is square based on the above condition\"\n  ],\n  \"high-level plan\": {\n    \"Step 1\": \"Read the number of test cases (t)\",\n    \"Step 2\": \"For each test case, read the string input\",\n    \"Step 3\": \"Check if the string is repeated consecutively two times\",\n    \"Step 4\": \"Output YES if the string is square, NO otherwise\"\n  }\n}", "Round_0": {"code": "def is_square(s):\n    n = len(s)\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            if s[:i] * (n // i) == s:\n                return \"YES\"\n    return \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    s = input().strip()\n    print(is_square(s))\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def is_square(s):\n    n = len(s)\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            if s[:i] * (n // i) == s:\n                return \"YES\"\n    return \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    s = input().strip()\n    print(is_square(s))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Check if the given string is repeated consecutively two times\",\n    \"Handle multiple test cases\",\n    \"Output YES or NO based on the result\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the input string\",\n    \"Step 3\": \"Check if the string is square by checking if it is repeated consecutively two times\",\n    \"Step 4\": \"Output YES if the string is square, otherwise output NO\"\n  }\n}", "Round_0": {"code": "def is_square(s):\n    n = len(s)\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            if s[:i] * (n // i) == s:\n                return \"YES\"\n    return \"NO\"\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        s = input().strip()\n        print(is_square(s))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 20)"}, "Round_1": {"code": "def is_square(s):\n    n = len(s)\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            if s[:i] * (n // i) == s:\n                return \"YES\"\n    return \"NO\"\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        s = input().strip()\n        print(is_square(s))\n"}}], "scores": [], "pass_results": [false, false, false, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": false, "pass": false, "pass_num": 10, "round": 42, "prompt": "A string is considered square if it is a substring repeated consecutively two times. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES", "examples": "\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES", "mutate_method": "rephrase_one", "save_node": true, "parent_index": 14}
