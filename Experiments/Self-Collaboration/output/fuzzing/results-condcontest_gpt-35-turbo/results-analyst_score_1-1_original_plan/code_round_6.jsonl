{"name": "1591_A. Life of a Flower", "description": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "tags": ["implementation"], "difficulty": 7, "id": 1591, "sample_io": [{"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}], "test_list": [{"input": "1\n10\n1 1 1 1 1 1 1 1 1 1\n", "output": ["47\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n7\n3\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 0\n", "output": ["33\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 1\n", "output": ["29\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n-1\n8\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 0 1 1 1 1 1\n", "output": ["24\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["7\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n12\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n7\n8\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["7\n-1\n8\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 0 1 1\n", "output": ["20\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["12\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["-1\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["12\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 1 1 1\n1\n1\n", "output": ["3\n7\n12\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n3\n17\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n7\n8\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 0\n", "output": ["28\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n7\n17\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["2\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["7\n-1\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n3\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n1\n", "output": ["3\n7\n3\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["12\n12\n-1\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n3\n12\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 0 1\n", "output": ["15\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n1\n", "output": ["3\n-1\n17\n2\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 1 1\n", "output": ["42\n"]}, {"input": "4\n3\n0 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n-1\n3\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n2\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["3\n2\n8\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["2\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n2\n-1\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n3\n8\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["12\n-1\n17\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 0\n", "output": ["19\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n1\n", "output": ["3\n-1\n7\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n2\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n3\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 0\n1\n0\n", "output": ["-1\n7\n3\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n1\n", "output": ["-1\n-1\n7\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 1\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n12\n17\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n3\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n7\n17\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["12\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 0\n1\n1\n", "output": ["3\n-1\n12\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 1 0 1\n1\n0\n", "output": ["3\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n7\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n12\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["12\n7\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n3\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["12\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["-1\n7\n17\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["-1\n12\n-1\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 0\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 1 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 0 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 2 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n2 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 -1 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 1\n", "output": ["29\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 0\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 0 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "1\n10\n0 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 1\n", "output": ["15\n"]}, {"input": "1\n10\n1 0 0 1 0 2 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "1\n10\n0 1 0 0 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 2 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 3 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 2 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 1 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 0 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 -1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 0\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 0\n", "output": ["24\n"]}, {"input": "1\n10\n1 1 0 1 1 1 0 0 0 0\n", "output": ["-1\n"]}], "task_id": "codecontest/45", "repair_prompt": ["Petya has got an intriguing flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days consecutively, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        watering_days = test_cases[_][1]\n        \n        flower_height = 1\n        consecutive_days_without_water = 0\n        \n        for i in range(n):\n            if watering_days[i] == 1:\n                if consecutive_days_without_water == 1:\n                    flower_height += 5\n                    consecutive_days_without_water = 0\n                else:\n                    flower_height += 1\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    flower_height = -1\n                    break\n        \n        print(flower_height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    watering_days = list(map(int, input().split()))\n    test_cases.append((n, watering_days))\n\n# Output\ncalculate_flower_height(t, test_cases)\n\nmain()", "completions": ["def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        days = test_cases[_][1]\n        \n        flower_height = 1\n        consecutive_days_without_water = 0\n        \n        for i in range(n):\n            if days[i] == 1:\n                if consecutive_days_without_water == 1:\n                    flower_height += 5\n                    consecutive_days_without_water = 0\n                else:\n                    flower_height += 1\n                    consecutive_days_without_water = 0\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    print(-1)\n                    break\n        \n        print(flower_height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    days = list(map(int, input().split()))\n    test_cases.append((n, days))\n\n# Output\ncalculate_flower_height(t, test_cases)\n\nmain()", "def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        watering_days = test_cases[_][1]\n        \n        flower_height = 1\n        consecutive_days_without_water = 0\n        \n        for i in range(n):\n            if watering_days[i] == 1:\n                if consecutive_days_without_water == 1:\n                    flower_height += 5\n                    consecutive_days_without_water = 0\n                else:\n                    flower_height += 1\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    flower_height = -1\n                    break\n        \n        print(flower_height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    watering_days = list(map(int, input().split()))\n    test_cases.append((n, watering_days))\n\n# Output\ncalculate_flower_height(t, test_cases)\n\nmain()", "def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        days = test_cases[_][1]\n        \n        flower_height = 1\n        consecutive_days_without_water = 0\n        \n        for i in range(n):\n            if days[i] == 1:\n                if consecutive_days_without_water == 1:\n                    flower_height += 5\n                    consecutive_days_without_water = 0\n                else:\n                    flower_height += 1\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    print(-1)\n                    break\n        \n        print(flower_height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    days = list(map(int, input().split()))\n    test_cases.append((n, days))\n\n# Output\ncalculate_flower_height(t, test_cases)\n\nmain()", "def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        days = test_cases[_][1]\n        \n        flower_height = 1\n        consecutive_days_without_water = 0\n        \n        for i in range(n):\n            if days[i] == 1:\n                if consecutive_days_without_water == 1:\n                    flower_height += 5\n                    consecutive_days_without_water = 0\n                else:\n                    flower_height += 1\n                    consecutive_days_without_water = 0\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    print(-1)\n                    break\n        \n        print(flower_height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    days = list(map(int, input().split()))\n    test_cases.append((n, days))\n\n# Output\ncalculate_flower_height(t, test_cases)\n\nmain()", "def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        days = test_cases[_][1]\n        \n        flower_height = 1\n        consecutive_days_without_water = 0\n        \n        for i in range(n):\n            if days[i] == 1:\n                if consecutive_days_without_water == 1:\n                    flower_height += 5\n                    consecutive_days_without_water = 0\n                else:\n                    flower_height += 1\n                    consecutive_days_without_water = 0\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    flower_height = -1\n                    break\n        \n        print(flower_height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    days = list(map(int, input().split()))\n    test_cases.append((n, days))\n\n# Output\ncalculate_flower_height(t, test_cases)\n\nmain()", "def calculate_flower_height(n, watering_status):\n    height = 1\n    consecutive_days = 0\n    \n    for i in range(n):\n        if watering_status[i] == 1:\n            if i > 0 and watering_status[i-1] == 1:\n                height += 5\n            else:\n                height += 1\n            consecutive_days = 0\n        else:\n            consecutive_days += 1\n            if consecutive_days == 2:\n                return -1\n    \n    return height\n\n# Read the number of test cases\nt = int(input())\n\nfor _ in range(t):\n    # Read the number of days and the watering status for each day\n    n = int(input())\n    watering_status = list(map(int, input().split()))\n    \n    # Calculate the height of the flower after n days\n    result = calculate_flower_height(n, watering_status)\n    \n    # Print the height of the flower after n days or -1 if the flower dies\n    print(result)\n\nmain()", "def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        watering_days = test_cases[_][1]\n        \n        flower_height = 1\n        consecutive_days_without_water = 0\n        \n        for i in range(n):\n            if watering_days[i] == 1:\n                if consecutive_days_without_water == 1:\n                    flower_height += 5\n                    consecutive_days_without_water = 0\n                else:\n                    flower_height += 1\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    print(-1)\n                    break\n        \n        print(flower_height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    watering_days = list(map(int, input().split()))\n    test_cases.append((n, watering_days))\n\n# Output\ncalculate_flower_height(t, test_cases)\n\nmain()", "def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        watering_days = test_cases[_][1]\n        \n        flower_height = 1\n        consecutive_days_without_water = 0\n        \n        for i in range(n):\n            if watering_days[i] == 1:\n                if consecutive_days_without_water == 1:\n                    flower_height += 5\n                    consecutive_days_without_water = 0\n                else:\n                    flower_height += 1\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    flower_height = -1\n                    break\n        \n        print(flower_height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    watering_days = list(map(int, input().split()))\n    test_cases.append((n, watering_days))\n\n# Output\ncalculate_flower_height(t, test_cases)\n\nmain()", "def calculate_flower_height(n, watering_pattern):\n    height = 1\n    consecutive_days_without_water = 0\n\n    for i in range(n):\n        if watering_pattern[i] == 1:\n            if i > 0 and watering_pattern[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n            consecutive_days_without_water = 0\n        else:\n            consecutive_days_without_water += 1\n            if consecutive_days_without_water == 2:\n                return -1\n\n    return height\n\n# Read the number of test cases\nt = int(input())\n\nfor _ in range(t):\n    # Read the number of days and the watering pattern\n    n = int(input())\n    watering_pattern = list(map(int, input().split()))\n\n    # Calculate the height of the flower\n    result = calculate_flower_height(n, watering_pattern)\n\n    # Print the height of the flower or -1 if it dies\n    print(result)\n\nmain()", "def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        watering_days = test_cases[_][1]\n        \n        flower_height = 1\n        consecutive_days_without_water = 0\n        \n        for i in range(n):\n            if watering_days[i] == 1:\n                if consecutive_days_without_water == 1:\n                    flower_height += 5\n                    consecutive_days_without_water = 0\n                else:\n                    flower_height += 1\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    flower_height = -1\n                    break\n        \n        print(flower_height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    watering_days = list(map(int, input().split()))\n    test_cases.append((n, watering_days))\n\n# Output\ncalculate_flower_height(t, test_cases)\n\nmain()"], "session_history": {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Determine if the flower dies after n days\",\n      \"Calculate the height of the flower after n days\"\n    ],\n    \"steps\": [\n      \"Read the number of test cases t\",\n      \"For each test case:\",\n      \"  Read the number of days n\",\n      \"  Read the list of watering days a_i\",\n      \"  Initialize flower height to 1\",\n      \"  Initialize consecutive_days_without_water to 0\",\n      \"  For each day i from 1 to n:\",\n      \"    If a_i is 1:\",\n      \"      If consecutive_days_without_water is 1:\",\n      \"        Increase flower height by 5\",\n      \"        Reset consecutive_days_without_water to 0\",\n      \"      Else:\",\n      \"        Increase flower height by 1\",\n      \"    Else:\",\n      \"      Increase consecutive_days_without_water by 1\",\n      \"      If consecutive_days_without_water is 2:\",\n      \"        Set flower height to -1 (flower dies)\",\n      \"        Break out of loop\",\n      \"  Print the final flower height\"\n    ]\n  }\n}", "Round_0": {"code": "def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        watering_days = test_cases[_][1]\n        \n        flower_height = 1\n        consecutive_days_without_water = 0\n        \n        for i in range(n):\n            if watering_days[i] == 1:\n                if consecutive_days_without_water == 1:\n                    flower_height += 5\n                    consecutive_days_without_water = 0\n                else:\n                    flower_height += 1\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    flower_height = -1\n                    break\n        \n        print(flower_height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    watering_days = list(map(int, input().split()))\n    test_cases.append((n, watering_days))\n\n# Output\ncalculate_flower_height(t, test_cases)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        watering_days = test_cases[_][1]\n        \n        flower_height = 1\n        consecutive_days_without_water = 0\n        \n        for i in range(n):\n            if watering_days[i] == 1:\n                if consecutive_days_without_water == 1:\n                    flower_height += 5\n                    consecutive_days_without_water = 0\n                else:\n                    flower_height += 1\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    flower_height = -1\n                    break\n        \n        print(flower_height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    watering_days = list(map(int, input().split()))\n    test_cases.append((n, watering_days))\n\n# Output\ncalculate_flower_height(t, test_cases)\n"}}, "session_historys": [{"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Determine if the flower dies after n days\",\n      \"Calculate the height of the flower after n days\"\n    ],\n    \"steps\": [\n      \"Read the number of test cases t\",\n      \"For each test case:\",\n      \"  Read the number of days n\",\n      \"  Read the list of watering days a_i\",\n      \"  Initialize flower height to 1\",\n      \"  Initialize consecutive_days_without_water to 0\",\n      \"  For each day i from 1 to n:\",\n      \"    If a_i is 1:\",\n      \"      If consecutive_days_without_water is 1:\",\n      \"        Increase flower height by 5\",\n      \"        Reset consecutive_days_without_water to 0\",\n      \"      Else:\",\n      \"        Increase flower height by 1\",\n      \"        Reset consecutive_days_without_water to 0\",\n      \"    Else:\",\n      \"      Increase consecutive_days_without_water by 1\",\n      \"      If consecutive_days_without_water is 2:\",\n      \"        Print -1 (flower dies)\",\n      \"        Break\",\n      \"  Print flower height\"\n    ]\n  }\n}", "Round_0": {"code": "def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        days = test_cases[_][1]\n        \n        flower_height = 1\n        consecutive_days_without_water = 0\n        \n        for i in range(n):\n            if days[i] == 1:\n                if consecutive_days_without_water == 1:\n                    flower_height += 5\n                    consecutive_days_without_water = 0\n                else:\n                    flower_height += 1\n                    consecutive_days_without_water = 0\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    print(-1)\n                    break\n        \n        print(flower_height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    days = list(map(int, input().split()))\n    test_cases.append((n, days))\n\n# Output\ncalculate_flower_height(t, test_cases)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        days = test_cases[_][1]\n        \n        flower_height = 1\n        consecutive_days_without_water = 0\n        \n        for i in range(n):\n            if days[i] == 1:\n                if consecutive_days_without_water == 1:\n                    flower_height += 5\n                    consecutive_days_without_water = 0\n                else:\n                    flower_height += 1\n                    consecutive_days_without_water = 0\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    print(-1)\n                    break\n        \n        print(flower_height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    days = list(map(int, input().split()))\n    test_cases.append((n, days))\n\n# Output\ncalculate_flower_height(t, test_cases)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Determine if the flower dies after n days\",\n      \"Calculate the height of the flower after n days\"\n    ],\n    \"steps\": [\n      \"Read the number of test cases t\",\n      \"For each test case:\",\n      \"  Read the number of days n\",\n      \"  Read the list of watering days a_i\",\n      \"  Initialize flower height to 1\",\n      \"  Initialize consecutive_days_without_water to 0\",\n      \"  For each day i from 1 to n:\",\n      \"    If a_i is 1:\",\n      \"      If consecutive_days_without_water is 1:\",\n      \"        Increase flower height by 5\",\n      \"        Reset consecutive_days_without_water to 0\",\n      \"      Else:\",\n      \"        Increase flower height by 1\",\n      \"    Else:\",\n      \"      Increase consecutive_days_without_water by 1\",\n      \"      If consecutive_days_without_water is 2:\",\n      \"        Set flower height to -1 (flower dies)\",\n      \"        Break out of loop\",\n      \"  Print the final flower height\"\n    ]\n  }\n}", "Round_0": {"code": "def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        watering_days = test_cases[_][1]\n        \n        flower_height = 1\n        consecutive_days_without_water = 0\n        \n        for i in range(n):\n            if watering_days[i] == 1:\n                if consecutive_days_without_water == 1:\n                    flower_height += 5\n                    consecutive_days_without_water = 0\n                else:\n                    flower_height += 1\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    flower_height = -1\n                    break\n        \n        print(flower_height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    watering_days = list(map(int, input().split()))\n    test_cases.append((n, watering_days))\n\n# Output\ncalculate_flower_height(t, test_cases)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        watering_days = test_cases[_][1]\n        \n        flower_height = 1\n        consecutive_days_without_water = 0\n        \n        for i in range(n):\n            if watering_days[i] == 1:\n                if consecutive_days_without_water == 1:\n                    flower_height += 5\n                    consecutive_days_without_water = 0\n                else:\n                    flower_height += 1\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    flower_height = -1\n                    break\n        \n        print(flower_height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    watering_days = list(map(int, input().split()))\n    test_cases.append((n, watering_days))\n\n# Output\ncalculate_flower_height(t, test_cases)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Determine if the flower dies after n days\",\n      \"Calculate the height of the flower after n days\"\n    ],\n    \"steps\": [\n      \"Read the number of test cases t\",\n      \"For each test case:\",\n      \"  Read the number of days n\",\n      \"  Read the list of watering days a_i\",\n      \"  Initialize flower height to 1\",\n      \"  Initialize consecutive_days_without_water to 0\",\n      \"  For each day i from 1 to n:\",\n      \"    If a_i is 1:\",\n      \"      If consecutive_days_without_water is 1:\",\n      \"        Increase flower height by 5\",\n      \"        Reset consecutive_days_without_water to 0\",\n      \"      Else:\",\n      \"        Increase flower height by 1\",\n      \"    Else:\",\n      \"      Increase consecutive_days_without_water by 1\",\n      \"      If consecutive_days_without_water is 2:\",\n      \"        Print -1 (flower dies)\",\n      \"        Break\",\n      \"  Print flower height\"\n    ]\n  }\n}", "Round_0": {"code": "def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        days = test_cases[_][1]\n        \n        flower_height = 1\n        consecutive_days_without_water = 0\n        \n        for i in range(n):\n            if days[i] == 1:\n                if consecutive_days_without_water == 1:\n                    flower_height += 5\n                    consecutive_days_without_water = 0\n                else:\n                    flower_height += 1\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    print(-1)\n                    break\n        \n        print(flower_height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    days = list(map(int, input().split()))\n    test_cases.append((n, days))\n\n# Output\ncalculate_flower_height(t, test_cases)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 40)"}, "Round_1": {"code": "def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        days = test_cases[_][1]\n        \n        flower_height = 1\n        consecutive_days_without_water = 0\n        \n        for i in range(n):\n            if days[i] == 1:\n                if consecutive_days_without_water == 1:\n                    flower_height += 5\n                    consecutive_days_without_water = 0\n                else:\n                    flower_height += 1\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    print(-1)\n                    break\n        \n        print(flower_height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    days = list(map(int, input().split()))\n    test_cases.append((n, days))\n\n# Output\ncalculate_flower_height(t, test_cases)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Determine if the flower dies after n days\",\n      \"Calculate the height of the flower after n days\"\n    ],\n    \"steps\": [\n      \"Read the number of test cases t\",\n      \"For each test case:\",\n      \"  Read the number of days n\",\n      \"  Read the list of watering days a_i\",\n      \"  Initialize flower height to 1\",\n      \"  Initialize consecutive_days_without_water to 0\",\n      \"  For each day i from 1 to n:\",\n      \"    If a_i is 1:\",\n      \"      If consecutive_days_without_water is 1:\",\n      \"        Increase flower height by 5\",\n      \"        Reset consecutive_days_without_water to 0\",\n      \"      Else:\",\n      \"        Increase flower height by 1\",\n      \"        Reset consecutive_days_without_water to 0\",\n      \"    Else:\",\n      \"      Increase consecutive_days_without_water by 1\",\n      \"      If consecutive_days_without_water is 2:\",\n      \"        Print -1 (flower dies)\",\n      \"        Break\",\n      \"  Print flower height\"\n    ]\n  }\n}", "Round_0": {"code": "def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        days = test_cases[_][1]\n        \n        flower_height = 1\n        consecutive_days_without_water = 0\n        \n        for i in range(n):\n            if days[i] == 1:\n                if consecutive_days_without_water == 1:\n                    flower_height += 5\n                    consecutive_days_without_water = 0\n                else:\n                    flower_height += 1\n                    consecutive_days_without_water = 0\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    print(-1)\n                    break\n        \n        print(flower_height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    days = list(map(int, input().split()))\n    test_cases.append((n, days))\n\n# Output\ncalculate_flower_height(t, test_cases)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        days = test_cases[_][1]\n        \n        flower_height = 1\n        consecutive_days_without_water = 0\n        \n        for i in range(n):\n            if days[i] == 1:\n                if consecutive_days_without_water == 1:\n                    flower_height += 5\n                    consecutive_days_without_water = 0\n                else:\n                    flower_height += 1\n                    consecutive_days_without_water = 0\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    print(-1)\n                    break\n        \n        print(flower_height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    days = list(map(int, input().split()))\n    test_cases.append((n, days))\n\n# Output\ncalculate_flower_height(t, test_cases)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Determine if the flower dies after n days\",\n      \"Calculate the height of the flower after n days\"\n    ],\n    \"steps\": [\n      \"Read the number of test cases t\",\n      \"For each test case:\",\n      \"  Read the number of days n\",\n      \"  Read the list of watering days a_i\",\n      \"  Initialize flower height to 1\",\n      \"  Initialize consecutive_days_without_water to 0\",\n      \"  For each day i from 1 to n:\",\n      \"    If a_i is 1:\",\n      \"      If consecutive_days_without_water is 1:\",\n      \"        Increase flower height by 5\",\n      \"        Reset consecutive_days_without_water to 0\",\n      \"      Else:\",\n      \"        Increase flower height by 1\",\n      \"        Reset consecutive_days_without_water to 0\",\n      \"    Else:\",\n      \"      Increase consecutive_days_without_water by 1\",\n      \"      If consecutive_days_without_water is 2:\",\n      \"        Set flower height to -1\",\n      \"        Break out of loop\",\n      \"  Print the flower height\"\n    ]\n  }\n}", "Round_0": {"code": "def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        days = test_cases[_][1]\n        \n        flower_height = 1\n        consecutive_days_without_water = 0\n        \n        for i in range(n):\n            if days[i] == 1:\n                if consecutive_days_without_water == 1:\n                    flower_height += 5\n                    consecutive_days_without_water = 0\n                else:\n                    flower_height += 1\n                    consecutive_days_without_water = 0\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    flower_height = -1\n                    break\n        \n        print(flower_height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    days = list(map(int, input().split()))\n    test_cases.append((n, days))\n\n# Output\ncalculate_flower_height(t, test_cases)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 41)"}, "Round_1": {"code": "def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        days = test_cases[_][1]\n        \n        flower_height = 1\n        consecutive_days_without_water = 0\n        \n        for i in range(n):\n            if days[i] == 1:\n                if consecutive_days_without_water == 1:\n                    flower_height += 5\n                    consecutive_days_without_water = 0\n                else:\n                    flower_height += 1\n                    consecutive_days_without_water = 0\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    flower_height = -1\n                    break\n        \n        print(flower_height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    days = list(map(int, input().split()))\n    test_cases.append((n, days))\n\n# Output\ncalculate_flower_height(t, test_cases)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Determine if the flower dies after n days\",\n      \"Calculate the height of the flower after n days\"\n    ],\n    \"steps\": [\n      \"Read the number of test cases\",\n      \"For each test case, read the number of days and the watering status for each day\",\n      \"For each day, check if the flower is watered consecutively or not\",\n      \"Calculate the height of the flower based on the watering status for each day\",\n      \"Print the height of the flower after n days or -1 if the flower dies\"\n    ]\n  }\n}", "Round_0": {"code": "def calculate_flower_height(n, watering_status):\n    height = 1\n    consecutive_days = 0\n    \n    for i in range(n):\n        if watering_status[i] == 1:\n            if i > 0 and watering_status[i-1] == 1:\n                height += 5\n            else:\n                height += 1\n            consecutive_days = 0\n        else:\n            consecutive_days += 1\n            if consecutive_days == 2:\n                return -1\n    \n    return height\n\n# Read the number of test cases\nt = int(input())\n\nfor _ in range(t):\n    # Read the number of days and the watering status for each day\n    n = int(input())\n    watering_status = list(map(int, input().split()))\n    \n    # Calculate the height of the flower after n days\n    result = calculate_flower_height(n, watering_status)\n    \n    # Print the height of the flower after n days or -1 if the flower dies\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_flower_height(n, watering_status):\n    height = 1\n    consecutive_days = 0\n    \n    for i in range(n):\n        if watering_status[i] == 1:\n            if i > 0 and watering_status[i-1] == 1:\n                height += 5\n            else:\n                height += 1\n            consecutive_days = 0\n        else:\n            consecutive_days += 1\n            if consecutive_days == 2:\n                return -1\n    \n    return height\n\n# Read the number of test cases\nt = int(input())\n\nfor _ in range(t):\n    # Read the number of days and the watering status for each day\n    n = int(input())\n    watering_status = list(map(int, input().split()))\n    \n    # Calculate the height of the flower after n days\n    result = calculate_flower_height(n, watering_status)\n    \n    # Print the height of the flower after n days or -1 if the flower dies\n    print(result)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Determine if the flower dies after n days\",\n      \"Calculate the height of the flower after n days\"\n    ],\n    \"steps\": [\n      \"Read the number of test cases t\",\n      \"For each test case:\",\n      \"  Read the number of days n\",\n      \"  Read the list of watering days a_i\",\n      \"  Initialize flower height to 1\",\n      \"  Initialize consecutive_days_without_water to 0\",\n      \"  For each day i from 1 to n:\",\n      \"    If a_i is 1:\",\n      \"      If consecutive_days_without_water is 1:\",\n      \"        Increase flower height by 5\",\n      \"        Reset consecutive_days_without_water to 0\",\n      \"      Else:\",\n      \"        Increase flower height by 1\",\n      \"    Else:\",\n      \"      Increase consecutive_days_without_water by 1\",\n      \"      If consecutive_days_without_water is 2:\",\n      \"        Print -1 (flower dies)\",\n      \"        Break\",\n      \"  Print flower height\"\n    ]\n  }\n}", "Round_0": {"code": "def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        watering_days = test_cases[_][1]\n        \n        flower_height = 1\n        consecutive_days_without_water = 0\n        \n        for i in range(n):\n            if watering_days[i] == 1:\n                if consecutive_days_without_water == 1:\n                    flower_height += 5\n                    consecutive_days_without_water = 0\n                else:\n                    flower_height += 1\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    print(-1)\n                    break\n        \n        print(flower_height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    watering_days = list(map(int, input().split()))\n    test_cases.append((n, watering_days))\n\n# Output\ncalculate_flower_height(t, test_cases)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        watering_days = test_cases[_][1]\n        \n        flower_height = 1\n        consecutive_days_without_water = 0\n        \n        for i in range(n):\n            if watering_days[i] == 1:\n                if consecutive_days_without_water == 1:\n                    flower_height += 5\n                    consecutive_days_without_water = 0\n                else:\n                    flower_height += 1\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    print(-1)\n                    break\n        \n        print(flower_height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    watering_days = list(map(int, input().split()))\n    test_cases.append((n, watering_days))\n\n# Output\ncalculate_flower_height(t, test_cases)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Determine if the flower dies after n days\",\n      \"Calculate the height of the flower after n days\"\n    ],\n    \"steps\": [\n      \"Read the number of test cases t\",\n      \"For each test case:\",\n      \"  Read the number of days n\",\n      \"  Read the list of watering days a_i\",\n      \"  Initialize flower height to 1\",\n      \"  Initialize consecutive_days_without_water to 0\",\n      \"  For each day i from 1 to n:\",\n      \"    If a_i is 1:\",\n      \"      If consecutive_days_without_water is 1:\",\n      \"        Increase flower height by 5\",\n      \"        Reset consecutive_days_without_water to 0\",\n      \"      Else:\",\n      \"        Increase flower height by 1\",\n      \"    Else:\",\n      \"      Increase consecutive_days_without_water by 1\",\n      \"      If consecutive_days_without_water is 2:\",\n      \"        Set flower height to -1 (flower dies)\",\n      \"        Break out of loop\",\n      \"  Print the final flower height\"\n    ]\n  }\n}", "Round_0": {"code": "def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        watering_days = test_cases[_][1]\n        \n        flower_height = 1\n        consecutive_days_without_water = 0\n        \n        for i in range(n):\n            if watering_days[i] == 1:\n                if consecutive_days_without_water == 1:\n                    flower_height += 5\n                    consecutive_days_without_water = 0\n                else:\n                    flower_height += 1\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    flower_height = -1\n                    break\n        \n        print(flower_height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    watering_days = list(map(int, input().split()))\n    test_cases.append((n, watering_days))\n\n# Output\ncalculate_flower_height(t, test_cases)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 40)"}, "Round_1": {"code": "def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        watering_days = test_cases[_][1]\n        \n        flower_height = 1\n        consecutive_days_without_water = 0\n        \n        for i in range(n):\n            if watering_days[i] == 1:\n                if consecutive_days_without_water == 1:\n                    flower_height += 5\n                    consecutive_days_without_water = 0\n                else:\n                    flower_height += 1\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    flower_height = -1\n                    break\n        \n        print(flower_height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    watering_days = list(map(int, input().split()))\n    test_cases.append((n, watering_days))\n\n# Output\ncalculate_flower_height(t, test_cases)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Determine if the flower dies after n days\",\n      \"Calculate the height of the flower after n days\"\n    ],\n    \"steps\": [\n      \"Read the number of test cases\",\n      \"For each test case, read the number of days and the watering pattern\",\n      \"For each day, check if the flower is watered or not\",\n      \"Calculate the height of the flower based on the watering pattern\",\n      \"Print the height of the flower or -1 if it dies\"\n    ]\n  }\n}", "Round_0": {"code": "def calculate_flower_height(n, watering_pattern):\n    height = 1\n    consecutive_days_without_water = 0\n\n    for i in range(n):\n        if watering_pattern[i] == 1:\n            if i > 0 and watering_pattern[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n            consecutive_days_without_water = 0\n        else:\n            consecutive_days_without_water += 1\n            if consecutive_days_without_water == 2:\n                return -1\n\n    return height\n\n# Read the number of test cases\nt = int(input())\n\nfor _ in range(t):\n    # Read the number of days and the watering pattern\n    n = int(input())\n    watering_pattern = list(map(int, input().split()))\n\n    # Calculate the height of the flower\n    result = calculate_flower_height(n, watering_pattern)\n\n    # Print the height of the flower or -1 if it dies\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_flower_height(n, watering_pattern):\n    height = 1\n    consecutive_days_without_water = 0\n\n    for i in range(n):\n        if watering_pattern[i] == 1:\n            if i > 0 and watering_pattern[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n            consecutive_days_without_water = 0\n        else:\n            consecutive_days_without_water += 1\n            if consecutive_days_without_water == 2:\n                return -1\n\n    return height\n\n# Read the number of test cases\nt = int(input())\n\nfor _ in range(t):\n    # Read the number of days and the watering pattern\n    n = int(input())\n    watering_pattern = list(map(int, input().split()))\n\n    # Calculate the height of the flower\n    result = calculate_flower_height(n, watering_pattern)\n\n    # Print the height of the flower or -1 if it dies\n    print(result)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Determine if the flower dies after n days\",\n      \"Calculate the height of the flower after n days\"\n    ],\n    \"steps\": [\n      \"Read the number of test cases t\",\n      \"For each test case:\",\n      \"  Read the number of days n\",\n      \"  Read the list of watering days a_i\",\n      \"  Initialize flower height to 1\",\n      \"  Initialize consecutive_days_without_water to 0\",\n      \"  For each day i from 1 to n:\",\n      \"    If a_i is 1:\",\n      \"      If consecutive_days_without_water is 1:\",\n      \"        Increase flower height by 5\",\n      \"        Reset consecutive_days_without_water to 0\",\n      \"      Else:\",\n      \"        Increase flower height by 1\",\n      \"    Else:\",\n      \"      Increase consecutive_days_without_water by 1\",\n      \"      If consecutive_days_without_water is 2:\",\n      \"        Set flower height to -1 (flower dies)\",\n      \"        Break out of loop\",\n      \"  Print the final flower height\"\n    ]\n  }\n}", "Round_0": {"code": "def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        watering_days = test_cases[_][1]\n        \n        flower_height = 1\n        consecutive_days_without_water = 0\n        \n        for i in range(n):\n            if watering_days[i] == 1:\n                if consecutive_days_without_water == 1:\n                    flower_height += 5\n                    consecutive_days_without_water = 0\n                else:\n                    flower_height += 1\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    flower_height = -1\n                    break\n        \n        print(flower_height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    watering_days = list(map(int, input().split()))\n    test_cases.append((n, watering_days))\n\n# Output\ncalculate_flower_height(t, test_cases)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        watering_days = test_cases[_][1]\n        \n        flower_height = 1\n        consecutive_days_without_water = 0\n        \n        for i in range(n):\n            if watering_days[i] == 1:\n                if consecutive_days_without_water == 1:\n                    flower_height += 5\n                    consecutive_days_without_water = 0\n                else:\n                    flower_height += 1\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    flower_height = -1\n                    break\n        \n        print(flower_height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    watering_days = list(map(int, input().split()))\n    test_cases.append((n, watering_days))\n\n# Output\ncalculate_flower_height(t, test_cases)\n"}}], "scores": [], "pass_results": [false, true, false, false, false, false, false, false, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 6, "prompt": "Petya has got an intriguing flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days consecutively, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "mutate_method": "rephrase_one", "save_node": true, "parent_index": 6}
